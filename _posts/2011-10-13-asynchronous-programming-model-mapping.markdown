---
title: Asynchronous programming model mapping
abstract: Mapping is performed between operations of an abstract asynchronous programming model and a concrete asynchronous programming model. In other words, differences between asynchronous programming models are bridged to enable interaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08539439&OS=08539439&RS=08539439
owner: Microsoft Corporation
number: 08539439
owner_city: Redmond
owner_country: US
publication_date: 20111013
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Asynchronous programming is increasing in popularity over synchronous programming. Synchronous programming involves specifying computations execute sequentially such that a second computation is started only after a first computation has terminated. However, synchronous programming can be problematic in light of high latency operations including file and network access as well as long running computations. In particular, with synchronous programming a program is blocked from performing additional work until a preceding computation is completed. Asynchronous programming involves specification of computation in a manner that allows additional work to be performed while a computation is executed. Upon completed execution, a program can be notified of the results by way of a callback, for example. Asynchronous programming has been resisted mainly because asynchronous programming is more difficult than synchronous programming. However, efficiency gains and the popularity of network-based applications is overcoming this resistance and tipping the scale toward asynchronous programming.","The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed subject matter. This summary is not an extensive overview. It is not intended to identify key\/critical elements or to delineate the scope of the claimed subject matter. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","Briefly described, the subject disclosure generally pertains to asynchronous programming model mapping. More specifically, operations of an abstract asynchronous programming model can be mapped, or converted to one or more semantically equivalent concrete asynchronous programming model operations and vice versa. In this manner, the abstract asynchronous programming model and the concrete asynchronous programing model can interact and enable programmers to specify asynchronous operations with respect to the abstract asynchronous programming model as opposed to a concrete asynchronous programming model, which is typically more difficult to use than the abstract asynchronous programming model.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the claimed subject matter are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways in which the subject matter may be practiced, all of which are intended to be within the scope of the claimed subject matter. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.","Details below are generally directed toward mapping between an abstract asynchronous programming model and a concrete asynchronous programming model. An abstract asynchronous programming model facilitates asynchronous programming independent of any particular program. By contrast, a concrete asynchronous programming model aids asynchronous programming with respect to a specific program. By way of example and not limitation an abstract asynchronous programming model can correspond to a software library, or framework, employable by numerous programming languages to aid generation of asynchronous and event-based programs, and a concrete asynchronous programming model can relate to asynchronous functionality afforded by an a program, such as an operating system. While both models enable asynchronous programming, the models can implement and expose such functionality differently. As provided herein, however, differences can be bridged to allow interaction and thus an improved programming experience.","Various aspects of the subject disclosure are now described in more detail with reference to the annexed drawings, wherein like numerals refer to like or corresponding elements throughout. It should be understood, however, that the drawings and detailed description relating thereto are not intended to limit the claimed subject matter to the particular form disclosed. Rather, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the claimed subject matter.","Referring initially to , mapping system  is illustrated. The mapping system  comprises map component  configured to map, or in other words convert, between abstract asynchronous programming model  and concrete asynchronous programming model . Stated differently, the map component  is configured to map operations of the abstract asynchronous programming model to one or more operations of the concrete asynchronous programming model  or vice versa.","The abstract asynchronous programming model  facilitates asynchronous programming independent of a particular program. In one instance, the abstract asynchronous programming model  can be embodied as a library, or framework, employable with respect to one or more programming languages to aid generation of asynchronous and event-based programs utilizing observable (e.g., asynchronous, push-based) sequences (e.g., non-persisted, potentially lazily evaluated), or in other words, data streams. Furthermore, language integrated query operators can be supported by the abstract asynchronous programming model  to allow queries to be written in a declarative manner over one or more data streams. In one instance, library or framework functionality can be exposed by way of an application programming interface (API). Accordingly, a programmer can employ such functionality by specifying calls to an API from within a programming language of choice including, but not limited to, C#\u00ae, Visual Basic\u00ae, or JavaScript\u00ae.","The concrete asynchronous programming model  aids asynchronous programming with respect to specific program. The concrete asynchronous programming model  can provide asynchronous functionality for a particular program and expose such functionality through an application programming interface (API). By way of example, and not limitation, an operating system can provide a uniform API to enable asynchronous program interaction. Conventionally, concrete asynchronous programming models and associated APIs reflect the low-level details regarding how a program operates. Accordingly, such models and APIs are typically imperative and stateful. In other words, a series of operations are specified that change state, and the result of any operation depends on the results of previous operations. For example, an object can be created, but not started, and later started and employed.","An abstract asynchronous programming model  is easier to use than the concrete asynchronous programming model . In fact, the abstract asynchronous programming model  can be designed to be easy for a programmer to use. The concrete asynchronous programming model  is easy to define since it reflects implementation details. However, the concrete asynchronous programming model  does nothing to make it easier for a programmer to use. The map component  can enable an abstract asynchronous programming model  to interact with a concrete asynchronous programming model  and thus make it easier than otherwise possible to employ asynchronous functionality of a particular program such as an operating system.","By analogy, the concrete asynchronous programming model  is like an old car that requires a driver to go to the front of the car, insert a hand crank directly in the drive shaft, and turn the crack to start the car's engine. The abstract asynchronous programming model  is like a modern electric motor, which can be employed in conjunction with an engine to rotate the engine to start the car. The electric motor hides some of the details from a driver and is much easier to use, since the driver does not have to get out of the car to start the engine but can simply push a button and the electric motor will start the engine.","In addition to allowing usage in the context of a plurality of programming languages including, for example, a browser scripting language (e.g., JavaScript), the abstract asynchronous programming model  can hide differences amongst multiple concrete asynchronous programming models behind a common interface. Accordingly, it can be said that the abstract asynchronous programming model  virtualizes, or is a virtualization of, concrete asynchronous programming models and\/or associated APIs.","Turning attention to , a representative map component  is shown in further detail. Here, the map component  includes two subcomponents: abstract-to-concrete component  and concrete-to-abstract component . The abstract-to-concrete component  is configured to map, or convert, operations of an abstract asynchronous programming model to operations of a concrete asynchronous programming model. The concrete-to-abstract component  is configured to map, or convert, operations of a concrete asynchronous programming model to operations of an asynchronous programming model. As a result, a user can utilize an abstract asynchronous programming model to specify asynchrony, which can be mapped to corresponding operations of a concrete asynchronous programming model, and results can be converted from a concrete representation back to an abstract representation.","What follows is a description regarding two exemplary asynchronous programming models and mapping between the models. More concretely, mapping between interfaces (e.g., APIs) associated with the models is described. The description is not intended to limit the scope of the appended claims but rather to facilitate clarity and understanding regarding aspects of the disclosure.","The abstract asynchronous programming model can enable interaction with push-based observable sequences (as opposed to pull-based enumerable sequences) utilizing \u201cIObserver\u201d and \u201cIObservable\u201d interfaces with the following signatures:",{"@attributes":{"id":"p-0022","num":"0021"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public interface IObservable<out T>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IDisposable Subscribe(IObserver<T> observer);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public interface IObserver<in T>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"void OnNext(T value);"]},{"entry":[{},"void OnError(Exception exception);"]},{"entry":[{},"void OnCompleted( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As a result, one or more observable sequences, or data streams, can be produced and generic language integrated query operators can be utilized to manipulate these objects. Most operators take a data stream, perform some logic (e.g., projection, filter, group, aggregate, partition, join, order . . . ) on it, and output another data stream that captures the results of the logic. In addition, multiple operators can be chained together on a source stream to produce specific resulting data stream. Consequently, compositionality is inherently supported.","The concrete asynchronous programming model can also deal with push-based data but can differ in implementation as well as supported functionality. Below is an exemplary model formalized by the COM (Component Object Model) interface below:",{"@attributes":{"id":"p-0025","num":"0024"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"typedef enum {Created, Started, Progressed, Completed, Cancelled, Error}"},{"entry":"AsyncStatus;"},{"entry":"coclass QueryEventSource"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IAsyncInfo;"]},{"entry":[{},"[default] interface IQueryEventSource;"]},{"entry":[{},"[default, source] dispinterface _IQueryEventSourceEvents;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"interface IAsyncInfo : IUnknown"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[propget] int Id( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003[propget] AsyncStatus Status( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[propget] long ErrorCode( );"]},{"entry":[{},"HRESULT Start( );"]},{"entry":[{},"HRESULT Cancel( );"]},{"entry":[{},"HRESULT Close( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"interface IQueryEventSource : IUnknown"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT GetResults([out, retval] IConcurrentStringList"]},{"entry":[{},"**result);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":"dispinterface _IQueryEventSourceEvents"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"properties:"]},{"entry":[{},"methods:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[id(1), helpstring(\u201cmethod OnAsyncCompletedEvent\u201d)]"]},{"entry":[{},"HRESULT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"OnAsyncCompletedEvent([in] IAsyncInfo *info);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(2), helpstring(\u201cmethod OnQueryProgressEvent\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"OnQueryProgressEvent ([in] IAsyncInfo *info, [in] int Progress);"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"This model is imperative and stateful. Stated differently, the model relies on a series of operations that change state, and the outcome of a given operation is dependent upon state resulting from previous operations. Note the supported \u201cAsyncStatus,\u201d namely created, started, progressed, completed, cancelled, and error. Such statuses are indicative of the manner in which asynchrony is supported. Here, an event source, such as user-interface element, must first be created and subsequently started. Such an event source can be called \u201ccold\u201d in the sense that it is not running until the event source is started. Similarly, and as provided in \u201cAsyncInfo,\u201d an operation can be cancelled, and a cancelled operation can subsequently be closed. Further, the status \u201cprogressed\u201d provides a notification that an event has been provided, and the intended meaning of \u201cGetResults\u201d is to yield results that have been collected thus far. Thus, upon receipt of a notification of \u201cprogressed,\u201d \u201cGetResults\u201d can be called to acquire all results that have been collected up to that point.","By contrast, the abstract asynchronous programming model described above is declarative and based on observable sequences\/data streams. In other words, a desired result is described without specifying a series of operations to achieve the result, and operations are performed with respect to sequences of data in a compositional manner.","Model differences can be bridged to enable interaction. Simply stated, \u201cm\u201d abstract operations can be mapped to \u201cn\u201d concrete operations, wherein \u201cn\u201d and \u201cm\u201d can, but need not, be the same. There can be several direct mappings, for example, \u201cSubscribe\u201d can be mapped to \u201cStart,\u201d \u201cDispose\u201d can be mapped to \u201cCancel,\u201d \u201cOnComplete\u201d can be mapped to \u201cOnAsyncCompletedEvent,\u201d among others. Additional code can be injected to handle variations in operations.","Consider a progress operation, for instance. The concrete asynchronous programming model can support progress where a notification \u201cprogressed\u201d is provided that indicates a value has been received, and subsequently, a \u201cGetResults\u201d operation can be executed to acquire all values up to that point. Code can be injected with respect to \u201cOnNext\u201d of the abstract asynchronous programming model to return not only the value received but also all the results received thus far or to ensure calls to \u201cOnNext\u201d expose disjoint segments of an observable sequence, that is without overlap such that concatenation of \u201cOnNext\u201d messages corresponds to an entire underlying sequence being produced (e.g., by the concrete implementation). By way of example, and not limitation, suppose an asynchronous computation is performed that returns ten results. Here, a notification can be provided with a list of a first result, then a notification can be provided with a list of the first result and a second result, subsequently a notification can be provided with a list of the first, second, and third results, etc.","The APPENDIX hereinafter provides details regarding one particular implementation of mapping functionality. In particular, a pulse buffer is an observable subject that implements \u201cIObservable<IEnumerable<T>>.\u201d In other words, the pulse buffer is a collection of lists of results produced thus far, wherein the \u201cIEnumerable<T>\u201d represents a list of growing values. Alternatively, the \u201cIEnumerable<T>\u201d can represent a disjoint segment of an observable sequence that exhibits the property of: \u201cXS==XS.Concate( ),\u201d where \u201cXS\u201d is the concrete model's produced sequence (e.g., byte sequence from a file, sent in chunks) and \u201cXS\u201d is the abstract model's (observable) sequence of enumerable fragment-including (e.g., byte[ ] chunks) sequences. Further, this subject can be started and cancelled to replicate functionality of the exemplary concrete asynchronous programming model.","As another example, when mapping from the concrete model to the abstract model, code can be employed to produce data streams over which the abstract model can operate. For example, with respect to \u201cCreated\u201d and \u201cStarted\u201d two events streams can be produced: one for \u201cCreated\u201d events and one for \u201cStarted\u201d events. Alternatively, a single event stream can be generated that includes two different event types, \u201cCreated\u201d and \u201cStarted,\u201d and a single event stream.","In accordance with one aspect of the disclosure, the abstract asynchronous programming model is independent of any particular programming language as well as concrete asynchronous programming model. Accordingly, the abstract asynchronous programming model provides programmers with a uniform interface to program against arbitrary concrete asynchronous APIs from arbitrary programming languages. For instance, a user can employ the abstract asynchronous programming model from within C#\u00ae, Visual Basic\u00ae, or JavaScript\u00ae (browser scripting language) to target one or more concrete asynchronous programming mechanisms, such as two distinct asynchronous operating system APIs. As asynchronous computations becomes increasingly popular so will concrete asynchronous APIs. Mappings, conversions, or the like can then be provided from the abstract asynchronous programming model as implemented with respect to a particular programming language to specific concrete asynchronous implementations to aid users in asynchronous programming by among other things hiding details of the concrete implementation. Further, the compositional nature of the abstract asynchronous programming model can make it easier to capture desired functionality, and a declarative approach can further be of assistance to enable a desired result to be specified rather than specific steps that achieve the results. Further yet, since the abstract asynchronous programming interface is separate from a concrete implementation, it is easy to cross machine boundaries, for example using a proxy object, which is beneficial in the context of distributed and cloud-based computing.","The aforementioned systems, architectures, environments, and the like have been described with respect to interaction between several components. It should be appreciated that such systems and components can include those components or sub-components specified therein, some of the specified components or sub-components, and\/or additional components. Sub-components could also be implemented as components communicatively coupled to other components rather than included within parent components. Further yet, one or more components and\/or sub-components may be combined into a single component to provide aggregate functionality. Communication between systems, components and\/or sub-components can be accomplished in accordance with either a push and\/or pull model. The components may also interact with one or more other components not specifically described herein for the sake of brevity, but known by those of skill in the art.","Furthermore, various portions of the disclosed systems above and methods below can include or employ of artificial intelligence, machine learning, or knowledge or rule-based components, sub-components, processes, means, methodologies, or mechanisms (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines, classifiers . . . ). Such components, inter alia, can automate certain mechanisms or processes performed thereby to make portions of the systems and methods more adaptive as well as efficient and intelligent. By way of example and not limitation, such mechanism can be employed with respect to a mapping to enable optimized interaction.","In view of the exemplary systems described supra, methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . While for purposes of simplicity of explanation, the methodologies are shown and described as a series of blocks, it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks, as some blocks may occur in different orders and\/or concurrently with other blocks from what is depicted and described herein. Moreover, not all illustrated blocks may be required to implement the methods described hereinafter.","Referring to , a method of asynchronous program model mapping is illustrated. At reference numeral , an operation of an abstract asynchronous programming model is identified. An abstract asynchronous programming model facilitates asynchronous programming in a manner generally disassociated from a particular program. In one instance, the abstract asynchronous programming model can be embodied as a library, or framework, for generating asynchronous and event-based programs utilizing observable (e.g., asynchronous, push-based) sequences, or in other words, data streams. Furthermore, one or more language integrated query operators can be specified over such a data stream. At numeral , the operation is mapped or converted to one or more operations of a concrete asynchronous programming model that aids asynchronous programming with respect to specific program such as an operating system. A concrete asynchronous programming model is typically tightly tied to low-level implementation details of a specific program. As a result, operations are likely imperative and stateful. Abstract operations, which are generally declarative and stream based, can be mapped to such concrete operations and\/or representations. Mapping can comprise converting one or more abstract operations to one or more semantically equivalent operations in accordance with a map, for instance. In some situations, mapping can be one-to-one in other situations one-to-many. By way of example, and not limitation, an abstract \u201cDispose\u201d operation can be mapped directly to a concrete \u201cCancel\u201d operation and an abstract \u201cSubscribe\u201d operation can be mapped to concrete \u201cCreate\u201d and \u201cStart\u201d operations.","Referring to , a method of asynchronous program model mapping is illustrated. At reference numeral , a concrete asynchronous programing model operation is identified. In accordance with one embodiment, a concrete asynchronous programming model can correspond to an operating system program that provides support for asynchronous functionality by way of an API. At reference numeral , the concrete operation is mapped or converted to one or more operations of abstract asynchronous programming model of equivalent meaning. In other words, semantics are preserved but the representation is altered. In one instance, the concrete operations can correspond to provisioning an asynchronous result. Accordingly, a corresponding notification can be called in a manner supported by the abstract asynchronous programming model. Further, as previously described herein, the abstract asynchronous programming model can support interaction with data streams so results can be added to one or more data streams to enable interaction.","As used herein, the terms \u201ccomponent\u201d and \u201csystem\u201d as well as forms thereof are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an instance, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a computer and the computer can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","The word \u201cexemplary\u201d or various forms thereof are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Furthermore, examples are provided solely for purposes of clarity and understanding and are not meant to limit or restrict the claimed subject matter or relevant portions of this disclosure in any manner It is to be appreciated a myriad of additional or alternate examples of varying scope could have been presented, but have been omitted for purposes of brevity.","The conjunction \u201cor\u201d as used in this description and appended claims is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor,\u201d unless otherwise specified or clear from context. In other words, \u201c\u2018X\u2019 or \u2018Y\u2019\u201d is intended to mean any inclusive permutations of \u201cX\u201d and \u201cY.\u201d For example, if \u201c\u2018A\u2019 employs \u2018X,\u2019\u201d \u201c\u2018A employs \u2018Y,\u2019\u201d or \u201c\u2018A\u2019 employs both \u2018A\u2019 and \u2018B,\u2019\u201d then \u201c\u2018A\u2019 employs \u2018X\u2019 or \u2018Y\u2019\u201d is satisfied under any of the foregoing instances.","As used herein, the term \u201cinference\u201d or \u201cinfer\u201d refers generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Various classification schemes and\/or systems (e.g., support vector machines, neural networks, expert systems, Bayesian belief networks, fuzzy logic, data fusion engines . . . ) can be employed in connection with performing automatic and\/or inferred action in connection with the claimed subject matter.","Furthermore, to the extent that the terms \u201cincludes,\u201d \u201ccontains,\u201d \u201chas,\u201d \u201chaving\u201d or variations in form thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim.","In order to provide a context for the claimed subject matter,  as well as the following discussion are intended to provide a brief, general description of a suitable environment in which various aspects of the subject matter can be implemented. The suitable environment, however, is only an example and is not intended to suggest any limitation as to scope of use or functionality.","While the above disclosed system and methods can be described in the general context of computer-executable instructions of a program that runs on one or more computers, those skilled in the art will recognize that aspects can also be implemented in combination with other program modules or the like. Generally, program modules include routines, programs, components, data structures, among other things that perform particular tasks and\/or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the above systems and methods can be practiced with various computer system configurations, including single-processor, multi-processor or multi-core processor computer systems, mini-computing devices, mainframe computers, as well as personal computers, hand-held computing devices (e.g., personal digital assistant (PDA), phone, watch . . . ), microprocessor-based or programmable consumer or industrial electronics, and the like. Aspects can also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However, some, if not all aspects of the claimed subject matter can be practiced on stand-alone computers. In a distributed computing environment, program modules may be located in one or both of local and remote memory storage devices.","With reference to , illustrated is an example general-purpose computer  or computing device (e.g., desktop, laptop, server, hand-held, programmable consumer or industrial electronics, set-top box, game system . . . ). The computer  includes one or more processor(s) , memory , system bus , mass storage , and one or more interface components . The system bus  communicatively couples at least the above system components. However, it is to be appreciated that in its simplest form the computer  can include one or more processors  coupled to memory  that execute various computer executable actions, instructions, and or components stored in memory .","The processor(s)  can be implemented with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general-purpose processor may be a microprocessor, but in the alternative, the processor may be any processor, controller, microcontroller, or state machine. The processor(s)  may also be implemented as a combination of computing devices, for example a combination of a DSP and a microprocessor, a plurality of microprocessors, multi-core processors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The computer  can include or otherwise interact with a variety of computer-readable media to facilitate control of the computer  to implement one or more aspects of the claimed subject matter. The computer-readable media can be any available media that can be accessed by the computer  and includes volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media.","Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to memory devices (e.g., random access memory (RAM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM) . . . ), magnetic storage devices (e.g., hard disk, floppy disk, cassettes, tape . . . ), optical disks (e.g., compact disk (CD), digital versatile disk (DVD) . . . ), and solid state devices (e.g., solid state drive (SSD), flash memory drive (e.g., card, stick, key drive . . . ) . . . ), or any other medium which can be used to store the desired information and which can be accessed by the computer .","Communication media typically embodies computer-readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer-readable media.","Memory  and mass storage  are examples of computer-readable storage media. Depending on the exact configuration and type of computing device, memory  may be volatile (e.g., RAM), non-volatile (e.g., ROM, flash memory . . . ) or some combination of the two. By way of example, the basic input\/output system (BIOS), including basic routines to transfer information between elements within the computer , such as during start-up, can be stored in nonvolatile memory, while volatile memory can act as external cache memory to facilitate processing by the processor(s) , among other things.","Mass storage  includes removable\/non-removable, volatile\/non-volatile computer storage media for storage of large amounts of data relative to the memory . For example, mass storage  includes, but is not limited to, one or more devices such as a magnetic or optical disk drive, floppy disk drive, flash memory, solid-state drive, or memory stick.","Memory  and mass storage  can include, or have stored therein, operating system , one or more applications , one or more program modules , and data . The operating system  acts to control and allocate resources of the computer . Applications  include one or both of system and application software and can exploit management of resources by the operating system  through program modules  and data  stored in memory  and\/or mass storage  to perform one or more actions. Accordingly, applications  can turn a general-purpose computer  into a specialized machine in accordance with the logic provided thereby.","All or portions of the claimed subject matter can be implemented using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to realize the disclosed functionality. By way of example and not limitation, the mapping system , or portions thereof, can be, or form part, of an application , and include one or more modules  and data  stored in memory and\/or mass storage  whose functionality can be realized when executed by one or more processor(s) .","In accordance with one particular embodiment, the processor(s)  can correspond to a system on a chip (SOC) or like architecture including, or in other words integrating, both hardware and software on a single integrated circuit substrate. Here, the processor(s)  can include one or more processors as well as memory at least similar to processor(s)  and memory , among other things. Conventional processors include a minimal amount of hardware and software and rely extensively on external hardware and software. By contrast, an SOC implementation of processor is more powerful, as it embeds hardware and software therein that enable particular functionality with minimal or no reliance on external hardware and software. For example, the mapping system  and\/or associated functionality can be embedded within hardware in a SOC architecture.","The computer  also includes one or more interface components  that are communicatively coupled to the system bus  and facilitate interaction with the computer . By way of example, the interface component  can be a port (e.g., serial, parallel, PCMCIA, USB, FireWire . . . ) or an interface card (e.g., sound, video . . . ) or the like. In one example implementation, the interface component  can be embodied as a user input\/output interface to enable a user to enter commands and information into the computer  through one or more input devices (e.g., pointing device such as a mouse, trackball, stylus, touch pad, keyboard, microphone, joystick, game pad, satellite dish, scanner, camera, other computer . . . ). In another example implementation, the interface component  can be embodied as an output peripheral interface to supply output to displays (e.g., CRT, LCD, plasma . . . ), speakers, printers, and\/or other computers, among other things. Still further yet, the interface component  can be embodied as a network interface to enable communication with other computing devices (not shown), such as over a wired or wireless communications link.","What has been described above includes examples of aspects of the claimed subject matter. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter, but one of ordinary skill in the art may recognize that many further combinations and permutations of the disclosed subject matter are possible. Accordingly, the disclosed subject matter is intended to embrace all such alterations, modifications, and variations that fall within the spirit and scope of the appended claims.",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"APPENDIX"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"public class PulseBuffer<T> : IObservable<IEnumerable<T>>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"class State"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public List<T> values = new List<T>( );"]},{"entry":[{},"public Exception exception;"]},{"entry":[{},"public bool completed;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"private readonly Subject<IEnumerable<T>> _subscribers = new"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Subject<IEnumerable<T>>( );"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private readonly IObservable<Notification<T>> _src;"]},{"entry":[{},"private readonly BehaviorSubject<State> _state = new"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"BehaviorSubject<State>(new State( ));"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"private readonly IObservable<Unit> _pulses;"]},{"entry":[{},"public PulseBuffer(IObservable<T> src, IObservable<Unit>"]},{"entry":[{},"pulses)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"this._src = src.Materialize( );"]},{"entry":[{},"this._pulses = pulses;"]},{"entry":[{},"Observable.Join"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(_state.And(_src).Then((state, value) =>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"switch (value.Kind)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case NotificationKind.OnNext:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state.values.Add(value.Value);"]},{"entry":[{},"_state.OnNext(state);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case NotificationKind.OnError:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state.exception = value.Exception;"]},{"entry":[{},"_state.OnNext(state);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case NotificationKind.OnCompleted:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state.completed = true;"]},{"entry":[{},"_state.OnNext(state);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return new Unit( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"})"]},{"entry":[{},", _state.And(_pulses).Then((state, pulse) =>"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if(state.completed)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_subscribers.OnNext(state.values.Select(x"]},{"entry":[{},"=> x));"]},{"entry":[{},"_subscribers.OnCompleted( );"]},{"entry":[{},"_state.OnCompleted( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if(state.exception != null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_subscribers.OnNext(state.values.Select(x"]},{"entry":[{},"=> x));"]},{"entry":[{},"_subscribers.OnError(state.exception);"]},{"entry":[{},"_state.OnCompleted( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_subscribers.OnNext(state.values.Select(x"]},{"entry":[{},"=> x));"]},{"entry":[{},"_state.OnNext(new State( ));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return new Unit( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"})"]},{"entry":[{},").Subscribe( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"public IDisposable Subscribe(IObserver<IEnumerable<T>>"]},{"entry":[{},"observer)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return _subscribers.Subscribe(observer);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
