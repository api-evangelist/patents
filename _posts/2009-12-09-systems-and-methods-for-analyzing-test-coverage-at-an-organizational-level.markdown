---
title: Systems and methods for analyzing test coverage at an organizational level
abstract: Disclosed are methods and systems for calculating test coverage of a software organizational schema. The method and systems involve retrieving the software organizational schema associated with an application, receiving an assigned weight factor to the one or more software organizational schema components associated with the application, determining a number of processed code lines and a total number of the code lines associated with the one or more software organizational schema components, calculating a test coverage for the one or more software organizational schema components based on the weight factor, the number of processed code lines and the total number of code lines of the software organizational schema component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495575&OS=08495575&RS=08495575
owner: SAP AG
number: 08495575
owner_city: Walldorf
owner_country: DE
publication_date: 20091209
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The field generally relates to software testing and more specifically to analyzing the coverage of software code subjected to testing.","Today's business applications are based on division of labor and collaboration. The assignment of specific tasks to certain executable and reusable components of software enables creation of complex business applications through composition of various software components. A software component itself is either composed of other sub components or is made of units of work which keep track of the context and take into account relationships, data and rule based constraints.","The software components that make up an application are tested to assure the quality (e.g., in terms of its functionality, robustness and performance) in order to guarantee the quality of the overall application itself. Test coverage is one indicator of the effectiveness of the testing. However, determining the test coverage of the software components in a manner that is contextual to the requirements of various testing scenarios can be a challenge. Test coverage information can be very useful if in addition to determining whether the testing is adequate it is also directed to the code that is of interest. For example, results of the test coverage analysis can be used to identify software components for which additional tests are required to raise the overall test coverage indices. Moreover, test coverage results can be used to calculate Quality Key Process Indicators (KPIs) that allow for a formal description of the quality of part of software.","Disclosed are methods and systems for calculating test coverage of a software organizational schema at an organizational level. In one aspect, the methods and systems involve retrieving the software organizational schema associated with an application, the software organizational schema includes one or more software organizational schema components and associated code lines. According to another aspect, an assigned weight factor of the one or more software organizational schema components associated with the application is received. A number of processed code lines and a total number of the code lines associated with the one or more software organizational schema components are determined. A test coverage for the one or more software organizational schema components are calculated based on the weight factor, the number of processed code lines and the total number of code lines of software organizational schema component.","In one embodiment, whether the test coverage satisfies quality indices required by an organization is determined. If the test coverage satisfies the required quality indices of the organization, the test coverage is accepted. If the test coverage does not satisfy the required quality indices of the organization, at least one test which satisfies the quality indices is determined. The test coverage is displayed to a user.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for analyzing test coverage at an organizational level are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize, however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","Composite software made up of various components and sub-components can be understood in terms of one or more organizational schemas that explain how the various software components are organized to make up the whole. Several such software organizational schemas can be used to describe the same piece of software depending on various grouping strategies. For instance, if the grouping strategy is along the dimension of tasks performed by the software components then the software organizational schema groups the software components according to the tasks they perform (e.g., user interface, data services, business logic and the like). Some such organizational schema components may have a hierarchy and can be represented in a tree format. In order to express hierarchy, where it exists, the organizational schema components can be further referred to as primary organizational schema component, secondary organizational schema component, tertiary organizational schema component and so on. However, the groupings that are associated with various organizational schemas need not necessarily express a hierarchy.","For example, if the primary software organizational schema component is human resources business logic, the one or more secondary software organizational schema components associated with the primary software organizational schema component are payroll data, taxes data and so on. Test coverage can be calculated for the primary software organizational schema component and each of the secondary software organizational schema components. In yet another example, where software components are maintained by different departments, analyzing test coverage along the departmental dimension enables the organization to find out how well each department has performed in the responsibilities assigned to them.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["105","110","100","100","110","110","115","120","125","130","115","115","115","120","120","120","120","125","125","125","125","125","125","130","130","130","130","100"],"i":["a ","b","a","b ","c","a","b","c","d ","e","a","b ","c"]},"The software organizational schema  illustrates the software organizational schema components that were called while executing a user request to the application. From a testing point of view, it may be important to record the software organizational schema components and code lines that have been processed during a test run. The recording allows creating statements about which software organizational schema components have been processed and it also calculates test coverage for the software organizational schema components involved. In this exemplary scenario, the software organizational schema components that were called while executing the user request are \u2192\u2192\u2192\u2192. Having such a trace of the code portions that were touched in a test run allows one the ability to determine the coverage of the test which can be one measure of its effectiveness.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 2","FIG. 2"],"b":["200","205","205","210","240","260","215","220","225","230","245","250","255","205"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3A","b":["305","310"]},"Consider the exemplary weight factors assigned to software organizational schema  in . A weight factor of 80% is assigned to Human Resource Business Logic  and weight factor of 20% is assigned to Persistency Layer . According to this scenario, when calculating a test coverage for the application \u201cHuman Resources\u201d software organizational schema component \u201cHuman Resource Business Logic\u201d is considered as a more significant software organizational schema component than \u201cPersistency Layer\u201d software organizational schema component.","In an embodiment, if the assigned weight factor for the software organizational schema component is zero, then that software organizational schema component is ignored, meaning the test coverage is not calculated for that software organizational schema component. In another embodiment, if the software organizational schema associated with the application is significantly large (e.g., the application includes more than 20 primary software organizational components) then the weight factor can be assigned to primary software organizational schema components as well.","At process block , a number of processed code lines and a total number of code lines for the software organizational schema component are determined. At process block , test coverage for the software organizational schema component is calculated.","According to one embodiment, the test coverage may be calculated using the following equation:",{"@attributes":{"id":"p-0027","num":"0026"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":{"mi":["Test","Coverage"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":"=","mfrac":{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"m","mo":"=","mn":"1"},{"mi":["m","n"],"mo":"="}]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["w","m"]},{"mi":["pcl","m"]}],"mo":"\u00b7"}},{"munderover":{"mo":"\u2211","mrow":[{"mi":"m","mo":"=","mn":"1"},{"mi":["m","n"],"mo":"="}]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["w","m"]},{"mi":["cl","m"]}],"mo":"\u00b7"}}]}},{"mrow":{"munderover":{"mo":"\u2211","mrow":[{"mi":"m","mo":"=","mn":"1"},{"mi":["m","n"],"mo":"="}]},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["w","m"]},{"mi":["cl","m"]}],"mo":"\u00b7"}},"mo":">","mn":"0"}],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":{}},{"mtext":{}}],"mi":"with"}},{"mrow":{"mo":["(",")"],"mn":"1"}}]}}}}},"where,","w=weight factor of software organizational schema component m","cl=number of code lines of software organizational schema component m","pcl=number of processed codes lines of software organizational schema component m.","In general terms, the equation (1) to calculate test coverage at an organizational level can be reduced to:",{"@attributes":{"id":"p-0033","num":"0032"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":{"mi":["Test","Coverage"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}},"mo":"=","mfrac":{"mrow":[{"mo":"\u2211","mrow":{"mi":["Processed","code","lines","of","organizational","level"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},{"mo":"\u2211","mrow":{"mi":["Code","lines","of","organizational","level"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}}]}}},{"mrow":{"mo":["(",")"],"mn":"2"}}]}}}}},"Consider a scenario 1 where the test coverage of the software organizational schema component is 100%. This means, during testing process all code lines in the software organizational schema component are processed for scenario 1. Consider scenario 2 where the test coverage of the software organizational schema component is 80%. For scenario 2, during the testing process some of the code lines were not tested. Therefore, alternate tests may have to be performed for scenario 2 to achieve 100% test coverage.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3B","FIG. 3A"],"b":["325","330","335","335","345"]},"If the test coverage does not satisfy the quality indices required by the organization, then the process proceeds to process block . At process block , at least one test is determined to increase the test coverage to satisfy the quality indices. At process block , the test configurations may be changed and the test is run again until a test that meets the quality at  is found. In some cases, alternative tests may have to be carried out in order to meet the quality indices.","In an embodiment, the quality indices include an acceptable range, an intermediate range and an unacceptable range. For example, if the quality index defined by the organization for a software organizational schema component is 80%-85%, the test coverage obtained is 82%, then the test coverage is said to have an acceptable range.","For example, if the quality index defined by the organization for a software organizational schema component is 75%-80%, the obtained test coverage is 74.5%, then the test coverage is said to have an intermediate range.","For example, if the quality index defined by the organization for a software organizational schema is 60%-80%, the obtained test coverage is 50%, then the test coverage is said to have a unacceptable range. In such cases, alternative tests are determined to at least achieve a test coverage which falls in the intermediate range.","In another embodiment, color codes are assigned to the quality indices. The color code for the acceptable range, the intermediate range and the unacceptable range are green, yellow and red colored respectively. The color codes assigned to the quality indices may depend on the standards set by the organization. The color codes may vary from one organization to another. The quality indices may depend on various factors like organizational policy, type of software organizational schema component tested and so on. In yet another embodiment, status for the quality indices is identified by a square, triangle and a circle. Square, triangle and circle indicate acceptable range, intermediate range and unacceptable range respectively. Again, the shapes to identify the quality indices may depend on the organization and it may vary from one organization to another. The color codes and shapes are not limited to the above listed illustrations. The color codes and shapes can be used alone or in combination with one another.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["405","410","415","420","425"]},"System  includes organization database  to store a software organizational schema associated with an application. The software organizational schema includes one or more software organizational schema components and associated code lines. The organization database can also store a hierarchical software organizational schema. The organization database  also stores quality indices defined by the organization. A data indicating a number of processed code lines and a total number of code lines associated with the one or more software organizational schema components is determined in a memory (not shown in the figure). A processor (not shown in the figure) in communication with the memory and storage may include instructions for the weight module , test coverage calculator  and the comparator  to perform the required operations. The weight factor module  assigns a weight factor to one or more software organizational schema components of the software organizational schema. A test coverage calculator  calculates test coverage based on the weight factor, the number of processed lines and the total number of the code lines of the software organizational schema component. The test coverage calculator  uses equation (1) to calculate the test coverage. The comparator  compares if the test coverage satisfies the quality indices required by an organization. If the test coverage satisfies the quality indices required by the organization, then the test coverage is accepted. If the test coverage does not satisfy the quality indices required by the organization, then an alternative test which is able to satisfy the quality indices of the organization is determined. The alternative tests may be stored in the memory and processed by the processor. The test coverage is displayed to a user on a user interface . The test configurations of the test may be changed and the test is run again until a test that meets the quality indices. In some cases, alternative tests may have to be carried out in order to meet the quality indices.","Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable medium as instructions. The term \u201ccomputer readable medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 5","b":["500","500","505","555","500","540","555","510","515","510","515","505","515","500","525","530","500","525","530","500","535","500","550","550","500","545","500","520","560","560","560","550","560"]},"A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases, such as, relational, transactional, hierarchical, multi-dimensional (e.g., OLAP), object oriented databases, and the like. Further data sources include tabular data (e.g., spreadsheets, delimited text files), data tagged with a markup language (e.g., XML data), transactional data, unstructured data (e.g., text files, screen scrapings), hierarchical data (e.g., data in a file system, XML data), files, a plurality of reports, and any other data source accessible through an established protocol, such as, Open DataBase Connectivity (ODBC), produced by an underlying software system (e.g., ERP system), and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams, broadcast data, and the like. These data sources can include associated data foundations, semantic layers, management systems, security systems and so on.","The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
