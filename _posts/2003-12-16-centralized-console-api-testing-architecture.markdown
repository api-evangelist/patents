---
title: Centralized console API testing architecture
abstract: A method for API testing is provided that includes attaching a top level header to an API request from a console where the top level header facilitates processing of the API request by a host driver. The method also includes forwarding the API request with the top level header to the host driver and receiving an API response from the host driver where the API response includes the top level header. The method also includes removing the top level header from the API response so the console can process the API response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07016800&OS=07016800&RS=07016800
owner: Adaptec, Inc.
number: 07016800
owner_city: Milpitas
owner_country: US
publication_date: 20031216
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["INCORPORATION BY REFERENCE","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["A computer program listing on a CD-ROM is hereby incorporated as reference. The CD-ROM contains an ASCII file entitled \u201cComputer Program Listing Appendix.\u201d The ASCII file is one embodiment of a code that utilizes a methodology described herein. However, the one embodiment is one of many different embodiments of code that can accomplish the methodology.","1. Field of the Invention","This invention relates generally to computing technology and more particularly concerns the testing of Application Programming Interfaces (APIs)","2. Description of the Related Art","Developing tests for API testing of a complex system is by itself a formidable task. This task is further compounded by the requirement for the API test suite to support many different operating systems. Typically, separate test suites need to be maintained for each operating system tested. In addition, separate test development environments are needed for each operating system under which tests need to be created. Also, the porting task for moving the complex test engine and user interface between the operating systems is a significant development task.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1A","b":["12","14","18","20","16","18","14","12","16","20","18"]},"The third party needs to know the API for the initiator . The API is typically provided by the makers of the initiator  for the particular system. Third party remotes  utilized to manage initiators typically need to know how to communicate with the initiators. Consequently, the third party remote needs to know the API of the initiator  and the operating system. If code must be ported to the third party remote to test the API on the initiator , then this takes a large amount of time and effort.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1B","b":["1","40","44","1","42","46"]},"Therefore, there is a need for an initiator-target system that enables centralized console API testing.","As can be seen, there is a need for a way for centralized console API testing by centralizing test development under one operating system. Several inventive embodiments of the present invention are described below.","In one embodiment, a method for API testing is provided that includes attaching a top level header to an API request from a console where the top level header facilitates processing of the API request by a host driver. The method also includes forwarding the API request with the top level header to the host driver and receiving an API response from the host driver where the API response includes the top level header. The method also includes removing the top level header from the API response so the console can process the API response.","In another embodiment, a method for API testing is provided which includes receiving an API request from an API console, and attaching a top level header to the API request where the top level header facilitates processing of the API request by a host driver. The method further includes forwarding the API request with the top level header to the host driver and receiving an API response from the host driver where the API response includes the top level header. The method further includes removing the top level header from the API response and sending the API response without the top level header to the API console.","In yet another embodiment, a computer readable media having program instructions for API testing is provided. The computer media includes program instructions for attaching a top level header to an API request from a console where the top level header facilitates processing of the API request by a host driver. The computer readable media also includes program instructions for forwarding the API request with the top level header to the host driver. The computer readable media further includes program instructions for receiving an API response from the host driver where the API response includes the top level header. The computer readable media also includes program instructions for removing the top level header from the API response so the console can process the API response.","The advantages of the present invention are numerous. Most notably, by creating a centralized console API testing architecture and methods for using the same, API testing may be done in an intelligently organized manner that takes less time than prior art methods. Because the API testing is centralized under one operating system, new code specific to each system does not have to be ported in thereby saving large amounts of time. Specifically, the use of an agent daemon that can act as a translation layer between the console and the system under test, creates a powerful system where large amounts of new code do not have be ported in for different systems. Consequently, the methodology and architecture described herein significantly increases API efficiency and decreases the time required for API testing.","Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","An invention is described for a method and device for using a centralized console for API testing. It will be obvious, however, to one skilled in the art, that the present invention may be practiced without some or all of these specific details. In other instances, well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.","Console based testing resolves the problems of the prior art by centralizing test development under one operating system. This minimizes the amount of code that needs to be ported whenever a new operating system needs to be supported. In one embodiment, test suites are developed under the Linux operating system on which the test console resides. It should be understood that other types of operating systems may be utilized. Therefore, the Linux operating system is discussed herein as one possible exemplary embodiment of many different embodiments that can utilize any suitable operation system such as, for example Windows NT, Windows 2000, Windows XP, Macintosh OS and Solaris.","As a result, test development may be centralized under one operating system by using the methodology described herein. The test console system can communicate with the system under test via a network connection. Communication may be accomplished using a custom protocol developed specifically for performing API testing. An API console module is used on a console system to forward requests and accept responses from an API agent daemon that resides on the system under test. The API agent acts as a conduit between the console system and the API interface for the system being tested. The porting effort to move the agent between operating systems should be relatively small due to the elegance of its design.","Moreover, API support covered by the API agent is not limited to only one technology. Separate modules can be added to support many areas of standard and storage networking. In one embodiment, the methodology as described herein may support SOCK-API, which are exported by TCP\/IP off load engine (TOE), iSCSI Initiator API, iSCSI Target API, and SNIA iSCSI Management.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["100","110","110","102","104","106"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["140","140","142","146","150","146","148","144","149","149","146","150","146","150","150","146","148","150","148","150"]},"Therefore, an API may be exercised without writing a specific API exercising application for each system being tested. The agent daemon  only needs to be installed on the SUT , which is capable of receiving the API exercising instructions from the console , and the agent daemon  translates the instructions from the console into a request that interfaces with the API interface of the SUT . The API interface then communicates with the firmware of the SUT . The agent daemon  is a translation layer that knows how to receive a request to exercise the API and knows the system it is sitting on so it knows the translation for the system under test and vice versa. In one embodiment, each OS has a specific agent daemon to be utilized.","In general terms, once the components of the system are connected, each agent daemon is loaded onto each initiator which then has its own specific agent daemon. The console is running its own management software. The console configures each of the initiators that are available. The configuring includes setting an IP address, setting a target name, and login negotiation parameters. For each request, the firmware of the SUT will respond with an error or success of configuring the IP address.","After the setup, the console  goes through pre-defined tests so one knows what is being tested and what data is expected to be returned from the testing. The SUT  is rescanned to determine how many targets exist and makes sure that the agent daemon  is translating properly. If the agent daemon  is not doing translation properly an error message will be shown on the console . Then, the console  communicates with and configures the target.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 4","b":["200","148","218","216","214","218","216","214","218","214","218"]},"An API console includes a console module , which includes the common TCP network module , the common API agent\/console interface module , and a specific API process module . Different API console modules can be developed for each technology using the common modules linked with the specific API process module. The common API agent\/console interface module  processes the packets between the agent and the console. Upon receiving packets, it validates the parameters and strips out the agent\/console header and forwards these packets to the operating system specific interface with the driver module (OSM) . When sending packets, it appends the agent\/console header and forwards them to the common TCP module . Module iSCSI Initiator API Process Module  prepares the API Request and validates the API response for all parameters and data. Then it displays the summary results on the monitor and logs all the outputs to the specified output file for viewing later.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 5","b":["300","302"]},"After operation , the method moves to operation , which accepts a connection from an API console. At this point, the agent is waiting for the communication from the API console to come through a port.","Then the method advances to operation  where an API request is received. After operation , the method proceeds to operation  where it is determined whether the packet has valid parameters. If the packet does not have valid parameters, the method advances to operation , which sends a response with an error code to a console. After operation , the method proceeds to operation , which determines whether the consol closes a connection.","If operation  determines that the packet has valid parameters, the method moves to operation  where the API request is forwarded to a host driver. The host driver is a driver for the firmware as discussed above. In one embodiment, a top level header as discussed below in reference to  is removed. The data portion below the top level header is sent to the driver. After operation , the method advances to operation , which receives an API response from the host driver. The agent daemon, in this operation, adds the top level header and communicates the packet back to the console. Then the method proceeds to operation  where the API response to the API console is sent. After operation , the method moves to operation .","If operation  determines that the console does not close the connection, the method returns to operation  and the method proceeds from operation  as discussed above. If operation  determines that the console closes the connection, the method advances to operation , which cleans up the connection and exits its thread. After operation , the method returns to operation  as discussed above. The methodology as discussed is exemplified in code previously incorporated by reference. It should be appreciated that the code is exemplary in nature and any other type of codification may be utilized as long as the operations as described herein may be accomplished.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 6","FIG. 4"],"b":["400","402","402","404","406","408","410","404","404","406","408","410","412"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 7","b":["414","414","414","416","418","420","422","424","426","428","430"]},"The agent header length field  includes the total length of the agent header including this field. The agent payload length field  includes the total length of the API payload following the agent header. The agent minimum version field  includes the minimum version that the API agent module supports. The agent maximum version field  includes the maximum version that the API agent module supports. The agent API type field  includes the unique type of agent API. In one embodiment, the types of agent APIs include:\n\n","In one embodiment, the API agent uses port  to accept the TCP connections from the API Console. Further, the API agent initializes the TCP network server side to be ready to accept the client TCP connection via the above specified agent port. The API console may initialize the TCP network client side to open the TCP connection to the API agent. For each API request, the console can send a packet consisting of a header with a API agent header structure  with valid parameters and the specific API header, which is different for each type of API. Upon receiving this API request, the agent validates the API agent header parameters such as, for example, Min Version, Max Version, and size of the API agent header. In other exemplary embodiments, other API agent header parameters may be validated. If there are some parameter errors, the agent sends the response packet to the console consisting of only the API agent header with the appropriate status code. If there is no error in the API agent header, the agent makes an IOCTL call to the driver to send the specific API header request. When the driver returns the API response data, the agent sends back the response packet, which may include the API agent header with valid parameters and status code, and the specific API header response, which is different for each type of API.","In one embodiment, an iSCSI initiator agent will open the iSCSI initiator driver so that it can start the communication and initialize all structures, which will be used to interface with the driver. After it successfully makes a TCP connection to the agent, the iSCSI initiator console can send an API request to get the firmware version to check the compatibility between its API process module and the firmware. The iSCSI initiator console can also, after it successfully to make a TCP connection to the Agent, validate if the initiator has an IP address or not. If not, it sends a request to configure an IP address. The iSCSI initiator can also validate if the initiator has a name or not. If not, it sends a request to configure an initiator name. The iSCSI initiator can also continue to send other API requests and process the corresponding responses.","In one embodiment, the iSCSI target agent will open the iSCSI target driver so that it can start the communication and initialize all structures, which will be used to interface with the driver. After the iSCSI target console successfully makes a TCP connection to the agent, it sends an API request to get the firmware version to check the compatibility between its API process module and the firmware. The iSCSI target console also validates if the target has an IP address or not. If not, it sends a request to configure an IP address. Further, the iSCSI target console continues to send other API requests and processes the corresponding responses.","The invention may employ various computer-implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. Further, the manipulations performed are often referred to in terms, such as producing, identifying, determining, or comparing.","Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes, or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular, various general purpose machines may be used with computer programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required operations.","The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data, which can be thereafter read by a computer system. Examples of the computer readable medium include read-only memory, random-access memory, CD-ROMs, CD-Rs, CD-RWs, magnetic tapes, and other optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Accordingly, the present embodiments are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope and equivalents of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be readily understood by the following detailed description in conjunction with the accompanying drawings, and like reference numerals designate like structural elements.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
