---
title: Method, system and article for rapid detection and avoidance of high data corrupting routes within a network
abstract: A receiving host in a TCP/IP network sends an acknowledgment indicating a received data packet is corrupt. The sending host will begin transmitting with a new field set in the IP header called a check-TCP-checksum bit, thereby requesting that all routers in the TCP/IP network perform a checksum on the entire received packet. Routers in the TCP/IP network will perform a complete checksum on an entire packet with the check-TCP-checksum bit set, and not just on the IP header. The routers continuously monitor the ratio of corrupt packets received on a particular port that fail the entire packet checksum to the total number of packets received on that port. If the ratio of corrupt-to-received packets exceeds a corruption threshold, the router assumes that the associated link is causing data corruption and issues a routing update indicating that the link is bad and should be avoided. Once the retransmission rate between the sender and receiver drops below a threshold level, the bad link has been detected and avoided within the TCP/IP network and the check-TCP-checksum option in the IP header is no longer set in data packets transmitted to the receiver host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07394769&OS=07394769&RS=07394769
owner: International Business Machines Corporation
number: 07394769
owner_city: Armonk
owner_country: US
publication_date: 20030814
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention is related in general to data transfers in data processing system networks and in particular to transfer of data blocks over the Internet or similar networks. Still more particularly, the present invention relates to quickly detecting routes within the Internet causing high data corruption and efficiently re-routing data around such high data corrupting routes.","Networks provide for transmission of information from a source to a destination over a particular route. The information is transmitted along the route through routers. Typically, each router has knowledge of various routes available in the network and this knowledge is stored in a route database or route table. The information is transmitted throughout the network in accordance with a particular protocol and routers in the network may support any of a number of protocols. Thus, the router may store multiple routes, which are available using multiple protocols.","The Internet has become a particularly important network for transmission and distribution of data (text, code, image, video, audio, or mixed) and software. Users connect to the backbone of the Internet with broadly divergent levels of performance, ranging from 14.4 Kb\/s to more than 45 Mb\/s. Transmission Control Protocol\/Internet Protocol (TCP\/IP) has become a widely implemented standard communication protocol in Internet and Intranet technology, enabling broad heterogeneity between clients, servers, and the communications systems coupling them. Internet Protocol (IP) is the network layer protocol and Transmission Control Protocol (TCP) is the transport layer protocol. At the network level, IP provides a \u201cdatagram\u201d delivery service. By contrast, TCP builds a transport level service over the datagram service to provide guaranteed, sequential delivery of a byte stream between two IP hosts.","In a large network such as the Internet, it is possible for one of the routes within the network to be causing data corruption. While each router along the route will perform a checksum on the header of each data packet received to detect data corruption of the packet, some data corruption caused along the route may only be detectable by performing a checksum on the entire payload of the received packet. Therefore, routers within the network are not aware that they are forwarding corrupted packets to the destination. This data corruption is only detected upon the packet's arrival at the receiving host, which performs a checksum on the entire payload. The receiving host will then send an acknowledgment to the sending host requesting retransmission of the corrupted data packets. However, since the sender host and receiver host hosts have no way of knowing which route caused the data corruption, they are unable to avoid that route in the retransmission of the data packets. Further, the sender host and receiver host hosts have no way of informing the routers within the network of the data corruption so that the routers can correct or avoid the corrupting route. Consequently, it can be seen that there is a need for a communications routing protocol and system that provides the rapid detection of bad links within the network so that the routers can route data packets around data corrupting links.","In accordance with the present invention, improved methods, systems and articles of manufacture for detection and avoidance of data links causing data corruption in an IP network are disclosed. One preferred method of the present invention, comprises the steps of: receiving a data packet over a data link at a router within an IP network, wherein the data packet is sourced by a sender and destined for a receiver and contains an indication to perform a checksum on the entire data packet; performing a checksum on the entire data packet, in response to receiving the data packet containing the indication to perform the checksum on the entire data packet; modifying a value indicating the number of data packets received over the data link that failed the checksum, in response to a failure of the checksum of the entire data packet; and performing a routing update to avoid transmission of data packets over the data link, if the value exceeds a corruption threshold for the router.","All objects, features, and advantages of the present invention will become apparent in the following detailed written description.","This invention is described in a preferred embodiment in the following description with reference to the figures, in which like numbers represent the same or similar elements. While this invention is described in terms of the best mode for achieving this invention's objectives, it will be appreciated by those skilled in the art that variations may be accomplished in view of these teachings without deviating from the spirit or scope of the present invention.","With reference now to the figures, and in particular with reference to , a data processing system network in which a preferred embodiment of the present invention may be implemented is depicted. Data processing system network  includes at least one server system  coupled to at least one client system  via at least one network such as the Internet . Data transfers between the server system  and client system  conform to the TCP\/IP specification, as well as File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), or some similar communications protocol. As will be appreciated, while only a single server system  and single client system  are shown, data processing system network  may include any number of server and client systems (not shown) interconnected by one or more connections and networks, including Internet .","In order to transfer data over a network, it is necessary to have a set of rules so that every portion of the transfer sequence is properly executed. Each of these rules is called a protocol, and a set of rules is called a protocol suite. The most common set of protocols that are used when transferring data over the Internet and various other networks such as LANs (local area networks) and WANs (wide area networks) is provided by the TCP\/IP (Transmission Control Protocol\/Internet Protocol) protocol suite. The TCP\/IP protocol suite allows a variety of different types of computers, running different operating systems, to communicate with each other. TCP\/IP forms the basis for the worldwide Internet, a wide area network of more than one million computers that literally spans the globe. There are many other network protocol suites in addition to the TCP\/IP suite, including IPX\/SPX (Internet Packet Exchange\/Sequenced Packet Exchange), and NetBios. Although originally developed by independent research groups, most network protocols are open (non-proprietary) standards, many of which are published as a series of numerically-ordered RFC (Request for Comment) papers. For example, the IP protocol is RFC 791. The RFC papers are readily available on the Internet or at a various libraries. Although distinct, each of these network protocol suites are similar in structure, comprising a set of layers, with each layer responsible for a different facet of the communication task. For simplicity, the discussion below will primarily pertain to the use of the invention when using the TCP\/IP protocol. However, it should be recognized by those skilled in the art that although the principles of the invention are described in reference to the TCP\/IP protocol, the invention can also be applied to various other network protocols as well.","Flow control is the procedure of handling the mismatch in processing and buffering capacities between a receiver host and a transmitter to best utilize the bandwidth provided by the transmission medium. TCP flow control mechanisms operate exclusively at the end stations to limit the rate at which TCP endpoints emit data. However, TCP lacks explicit data rate control. The basic flow control mechanism is a \u201csliding window\u201d, superimposed on a range of bytes beyond the last explicitly acknowledged byte. The sliding window limits the maximum number of sequential bytes between the byte most recently sent from the server to the earliest byte for which a receipt acknowledgment has not yet been received from the client. This sliding operation limits the amount of unacknowledged transmissible data that a TCP endpoint can emit. A variety of algorithms automatically re-send packets and slowly restart data transmission when the sliding window limit is exceeded. Thus, if the link between the server and client is shut down in the middle of transmission of a data collection, the server will stop sending packets within one sliding window of the last packet acknowledged by the client. This use of a sliding window inherently limits the bandwidth of a data transfer through the network.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["104","106","200","205","210","215","220","225"]},"As shown in , TCP\/IP and similar protocols are utilized by a 4-layer communications architecture  for the network comprising an application layer , a transport layer  a network layer , and a link layer . Each layer is responsible for handling various communications tasks, as follows. The link layer  (also referred to as the data-link layer or the network interface layer) normally includes the device driver in the operating system and the corresponding network interface card in the computer. Together they handle all the hardware details of physically interfacing with the network media being used, e.g. Ethernet cable, etc.","The network layer  (also referred to as the internet layer) handles the movement of packets of data around the network. For example, the network layer handles the routing of the various packets of data that are transferred over the network. The network layer in the TCP\/IP suite is comprised of several protocols, including IP (Internet Protocol), ICMP (Internet Control Message Protocol), and IGMP (Internet Group Management Protocol).","The transport layer  provides an interface between the network layer  and the application layer  that facilitates the transfer of data between two host computers. The transport layer is concerned with things such as dividing the data passed to it from the application into appropriately sized chunks for the network layer below, acknowledging received packets, setting timeouts to make certain the other end acknowledges packets that are sent, etc. In the TCP\/IP protocol suite there are two distinctly different transport protocols: TCP (Transmission Control Protocol) and UDP (User Datagram Protocol). TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services. Conversely, UDP provides a much simpler service to the application layer by merely sends packets of data called datagrams from one host to the other, without providing any mechanism for guaranteeing that the data is properly transferred. When using UDP, the application layer must perform the reliability functionality.","The application layer  handles the details of the particular application. There are many common TCP\/IP applications that almost every implementation provides, including (1) Telnet for remote login; (2) FTP, the File Transfer Protocol; (3) SMTP, the Simple Mail Transfer protocol, for electronic mail, and (4) SNMP, the Simple Network Management Protocol.","Networks such as the Internet are interconnected by routers, which each connect two or more networks together. Typical routers comprise a special-purpose hardware box with input and output connections and dedicated hardware and\/or embedded software that allow many different types of physical networks to be connected, such as Ethernet, token ring, point-to-point links, etc.  shows an internet  comprising an Ethernet network  connected to a token ring network  by a router . Although  only shows two hosts in communication, any host on the Ethernet network can communicate with any host thereon, or with any host on the token ring network, and vice versa.","As shown in , the router  comprises a network layer module  (an IP module in this case), and appropriate network drivers for connecting to the host networks, namely an Ethernet driver  and a token ring driver . At the application layer, the network comprises an FTP client  and an FTP server . Most network applications are designed so that one end is the client and the other side is the server. The server provides some type of services to various clients, in this case, access to files on the server host. Each layer has one or more protocols for communicating with its peer at the same layer. These communication protocols include the FTP protocol  at the application layer, the TCP protocol  at the transport layer, the IP protocol  at the network layer, and the Ethernet protocol  and token ring protocol  at the link layer. It is common for the application layer to handle user processes, while the lower three layers (transport, network and link) are implemented in the kernel of the operating system, such as UNIX or Windows operating system. For example, the purpose of the network interface layer is to handle the details of the communication media (Ethernet, token ring, etc.), while the purpose of the application layer is to handle one specific user application (FTP, Telnet, etc.).","The application layer and the transport layer use end-to-end protocols (FTP protocol , TCP protocol ). The network layer provides a hop-to-hop protocol that is used on the two end systems and every intermediate system in between (for clarity only one intermediate system is shown here). For instance, the IP module  of the router  is connected to the two hosts by IP protocols . There are also link layer protocols that are specific to the various types of host networks that are connected to the router to handle communication between the networks and the router at the link layer. Thus, an Ethernet protocol  is used to handle communications between the Ethernet driver  in the router  and the Ethernet driver  of the hosts on the Ethernet network , while a token ring protocol  is used to handle communications between the token ring driver  of the router  and the token ring driver  of the hosts on the token ring network .","In the TCP\/IP protocol suite the network layer, IP, provides an unreliable service. It moves a packet of data from a source to a destination, but it provides no mechanism for guaranteeing delivery, or even being able to determine if a proper transfer has occurred. TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services.","A router has two or more network interface layers (since it connects two or more networks). Any system with multiple interfaces is called multi-homed. A host can also be multi-homed, but unless it specifically forwards packets from one interface to another, it is not called a router. Also, routers need not be special hardware boxes that only move packets around an internet. Most TCP\/IP implementations allow a multi-homed host to act as a router, but the host needs to be specifically configured to support this use. In such instances, the system is either a host (when an application such as FTP or Telnet is being used) or a router (when it's forwarding packets from one network to another). Another way to connect networks is with a bridge. Bridges connect networks at the link layer, while routers connect networks at the network layer. Bridges make multiple LANs appear to the upper layers as a single LAN.","When an application sends data using TCP\/IP, the data is sent down a protocol stack, through each layer, until it is sent as a stream of bits across the network. As shown in , each layer adds information to the data by prepending headers (and sometimes adding trailer information) to the data that it receives. For instance, at the application layer an application header  is prepended to user data  to form application data . At the transport layer a transport protocol header is prepended to the application data. In the case of  the transport layer is TCP, and therefore a TCP header  is prepended to the application data , thereby forming a TCP packet  that is sent to the network layer IP. The TCP header  comprises twenty bytes. Similarly, at the network layer, a network layer header is prepended to the transport layer data. In the case of TCP\/IP, an IP header  is prepended to the TCP packet  to form an IP datagram . The IP header  also comprises twenty bytes. Finally, at the link layer a media header such as Ethernet header  is added to the data received from the network layer to form a packet of data. In some instances, such as when the media is Ethernet, a media trailer is also appended to the end of the data. For instance, in  an Ethernet trailer  is appended to the Ethernet Header  and the IP datagram  to form an Ethernet packet . The Ethernet packet comprises the stream of bits that flow across the network that correspond to the original application message data. The numbers (14, 20, 20, 4) at the bottom of the headers are typical sizes of the headers in bytes, e.g., the Ethernet header  comprises 14 bytes, etc. The size of the packet will be limited by the maximum transmission unit (MTU) of the type of network being used to transfer the data packet. For example, the MTU of an Ethernet network is 1500 bytes. The network layer automatically performs fragmentation (breaking the datagram up into smaller pieces), so that each fragment is smaller than the MTU of the network.","The format for a TCP header is shown in . As seen, a TCP packet  is constructed from 32-bit words and includes a 20 byte (5-word) header. The basic layout of the TCP header  includes:","\u201csource port number\u201d\u2014The source (and destination) port numbers are used for demultiplexing the data stream to applications. It is entirely possible for there to be multiple simultaneous TCP data streams between two hosts. A TCP data stream is uniquely identified by a group of four numbers. These are the two hosts addresses and the two port numbers. The source port number is the one to be used as destination in any reply to the packet.","\u201cdestination port number\u201d\u2014This is the \u201ctarget\u201d port number on the remote system.","\u201csequence number\u201d\u2014This 32 bit number identifies the first byte of the data in the packet.","\u201cacknowledgment number\u201d\u2014This 32 bit number is the byte number of the next byte that the sender host expects to receive from the remote host. The remote host can infer that all bytes up to this number minus one have been safely received and the remote host's local copies can be discarded.","\u201cheader length\u201d\u2014This 4-bit field specifies the header length in 32 bit words. Clearly the maximum value is 15 words (60 bytes) allowing for 10 (40 bytes) of options.","\u201cflag bits\u201d\u2014This group of 6 bits identify various special states in the protocol. Several of the bits may be set simultaneously.","\u201cwindow size\u201d\u2014This is translates from the amount of space that the receiver host has available for the storage of unacknowledged data. The units are bytes unless the window scale factor option is used. The maximum value is 65535.","\u201cchecksum\u201d\u2014This covers both the header and the data. It is calculated by prepending a pseudo-header to the TCP packet, this consists of three 32-bit words, which contain the source, and destination IP addresses, a byte set to 0, a byte set to 6 (the protocol number for TCP in an IP datagram header) and the packet length (in \u201cwords\u201d). The checksum field of the TCP packet is set to zero and the following algorithm applied to the prepended packet treated as a sequence of 16-bit (unsigned) words. Note that the inclusion of the IP addresses in the checksum calculation means that TCP cannot easily be carried on lower level protocols other than IP.","\u201curgent pointer\u201d\u2014This is part of TCP's mechanism for sending urgent data that will overtake the normal data stream. If the URG flag bit is set this field indicates the position within the data of the last byte of the urgent data. There is no way of indicating where the urgent data starts.","\u201coptions\u201d\u2014There are a number of options defined in various RFCs. The most useful is the Maximum Packet Size (MSS) specification facility.","The format for an IP header  in accordance with the preferred embodiment is shown in , and starts with a Version Number (Ver), currently assigned a value of \u201c4\u201d. The next four bits represent the length of the header field (Hdr Length) in long words (32-bits). For almost all data packets on the Internet, this value is \u201c5\u201d, which makes the header twenty bytes long. This number increases, however, if the datagrams are of special type, called Options packets. The next eight bits are called \u201cToS\u201d bits, representing the Type of Service that is assigned to this datagram. Different applications have different service requirements for delivery from the network, which are encoded, in the ToS field. The next sixteen bit field is the Total Length of the datagram in bytes, limiting the length of the IP datagram to 2; i.e. 65535 bytes. The next sixteen bits, called the \u201cIdentification\u201d field, uniquely identifies each datagram sent by a host. The next two fields are flag (FLG) and Fragmentation Offset fields, which are used to packet datagrams and reassemble them as they travel through networks that have limitations on the maximum size of datagrams.","The next field shown in the IP header  of  is called the Time To Live or TTL field, which is responsible for limiting the number of hops a datagram may make through a network. This field decrements at each networking node in the network. If this field reduces to zero before reaching the desired destination, the datagram is dropped. This mechanism prevents infinite looping between two networking nodes because of some routing error. The next field is the Protocol field, used by the hosts to distinguish the higher layer application for which this datagram is intended. This allows for simultaneous multiple applications to exist between the same two hosts. Header Checksum is the next field, which normally provides the checksum generating function and guaranties the validity of the header. The Checksum is calculated over the entire header and stored in the header.","In accordance with the preferred embodiment, following the header Checksum is a special flag called the check-TCP-checksum (\u201cCK_TCP_CKSUM\u201d), which instructs a receiving networking node to perform a checksum on the entire received packet (a \u201cpacket checksum\u201d as used herein). In accordance with the preferred embodiment, when a Router in the network receives a packet with the CK_TCP_CKSUM bit set in the IP header, it will compute a checksum on the entire TCP payload , in addition to the checksum of the header that is performed utilizing the header Checksum in IP header . The Checksum value stored in the TCP header  of the packet is utilized to perform this checksum of the entire packet at the networking node. If the CK_TCP_CKSUM bit is not set, only the checksum of the header, utilizing the header Checksum in IP header , is performed.","Followed by this field are two addresses: the Source network Address and the Destination network Address. Each host is assigned a unique address, which allows a network to forward the stream of datagrams from one node to the other.","When the client detects that certain data packets are missing from the data transmission stream, the client will request that the server retransmit the missing packet by sending the sequence number of the first byte of the missing packet in an acknowledge frame. As seen in , the format of a TCP acknowledge frame  comprises a media header , a protocol header , a received sequence number field , and a send sequence number field . The media header  will be particular to the type of network, e.g., an Ethernet header for an Ethernet network, etc. The protocol header  will depend on the transport and network layer protocol used, such as TCP\/IP, IPX\/SPX, Netbios, etc. The received sequence number field  provides an identifier to the last sequence number reliably received by the computer. The send sequence number  corresponds to the relative sequential number of the message.","The checksum failed (CKSUM_FAIL) flag  provides a special flag that may be set by the receiving host when a TCP checksum fails on a received packet, in accordance with a preferred embodiment of the present invention. Upon determining that a received packet contains corrupted data, the receiver host would set the checksum-failed flag  in the acknowledgment packet  returned to the sender host.","In the simplified Internet representation of , datagrams are forwarded from a source to a destination in an automatic manner. From the sender host's point of view, it only knows the destination address and does not know the route by which the datagram reaches the final destination. For the automatic delivery of IP datagrams, a harmonious coexistence of IP Routing Protocols is provided, running on intermediate networking nodes inside the Internet, the IP Routing Protocols being intelligent mechanisms on each internetworking node that share information about networking addresses with other internetworking nodes via Routing datagrams called IP Routing PDU's. The IP Routing Protocols on each internetworking node create and maintain databases that allow it to forward ingress datagrams to the next internetworking node on the way to its final destination.","A representation of a network such as the Internet is presented in . In the example of , eleven Hosts are shown connected to a network of thirteen Routers, which are geographically independently located. Each networking node, called a Router, has connections to a subset of the total number of networking nodes. There may not be a fully meshed interconnection; i.e. each Router may not be connected directly to every other Router in the network. As an example, assume that Host  would like to send a datagram to Host . Host  could achieve this in a few ways, by sending the datagram to Router . Router  may then forward the datagram to Router , and then Router  forwards the datagram to the ultimate destination Router , which then forwards it to Host . Host  could also have sent the datagram to Router , with Router  then forwarding the datagram to Router , which then forwards to Router , which then forwards to Router , and then finally Router  may forward the datagram to Router , that in turn sends it to Host .","The many coexisting IP Routing Protocols collectively provide the information for Router  to determine which Router it is forward a datagram to (Router  or Router  in the above example, and with the same question raised at every internetworking node of the Internet) to create a network in a non-fully meshed connected Internet. Each Router creates a database of hierarchical topology of destination network addresses that it learns from other Routers via the Internet Routing Protocols, called a Routing Table. From the Routing Table, each Router creates another database, called a Forwarding Table, which maps a destination network address to one of its interfaces; meaning, that if a Router gets a datagram from a Host or other Router from a directly connected interface, then by examining the destination network address in the header and applying it to the Routing Table, the Router can determine which one of the local interfaces or ports should be used to forward the datagram. Using these two tables, the Routing Table and the Forwarding Table, a datagram that enters the network can thus be forwarded to the eventual destination by examining the datagram IP header and looking up the Forwarding Table to find the next interface to which to send the datagram. There are two very popular IP Routing Protocols, BGP and OSPF, which include IPv6 and the MPLS. IPv6 is a proposal to solve some of the address space limitations. MPLS, on the other hand, is a proposal to streamline the Forwarding Process of IP Datagrams. One of the common themes of the two proposals is to discard any Checksum field at the IP header layer. Underlying the present invention, however, is the discovery of significant advantages that can be obtained by enhancing the checksum functionality as is described below.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 8","FIG. 9A","FIG. 8"],"b":["800","800","800","800","904","800","801","804"]},"An exemplary process will now be detailed, using the high level networking node diagram of . Assuming some combinations of IP Routing Protocols, Routers attached respectively on the other side of Units , ,  and  are respectively advertising reachability to network addresses a, b and c, to network addresses c, d and e, to network addresses a, f and g, and finally, to network addresses h, i, and j. In this simple example, the Routing Engine  sees multiple exit or output ports, labeled as Output Ports -. The Routing Engine  will decide, based on one of many options, such as cost, hop count, etc., the best exit port to reach destination network address \u2018a\u2019 and destination network address \u2018c\u2019, for example. Assuming for this example that the Routing Engine  chooses the interface to port  for the forwarding of all datagrams destined for network address \u2018a\u2019, and it chooses port  for the forwarding of all datagrams destined for network address \u2018c\u2019, the Routing Engine  will thereupon create the Forwarding Table  shown in . In practice, the Forwarding Tables on a backbone Router can extend to tens of thousands of entries. Each network address in  is listed within parenthesis as four numbers, which represents the real network address as four bytes. The Forwarding Table is then forwarded to each input or ingress data port by the Routing Engine  to permit the Header Processing Units - to examine all incoming datagrams and match the destination address in the Forwarding Table and thereby determine the corresponding appropriate output or egress interface port , , , . The datagram is then sent to that output port via the switch .","With reference back to , an example of how the preferred embodiment provides rapid detection and avoidance of data routes within a network causing high data corruption is now provided. In this example, Link  within Network  is picking up noise that is causing data corruption to packets traversing over the Link. Thus, when Host  initiates data communication with Host , the data stream is likely to pick up noise in Link  via the route Link -Link . If the corrupted data packets were permitted to traverse through Network  from Host  to Host , Host  would perform a checksum on the received packets and determine that some data packets had corrupted data. However, because Host  and Host  have insufficient information to determine the route the corrupted data packets took through Network , they cannot explicitly discern the Link causing the corruption and instruct the Network  to avoid the corrupt Link. However, in accordance with the preferred embodiment, Host  sends an acknowledgment packet  with the checksum failed bit  set, indicating that the received sequence number packet had data corruption and requesting the Network implement the rapid detection and corrupt link avoidance routine of the preferred embodiment.","When Host  receives an acknowledgment frame  with a checksum fail bit  (CKSUM_FAIL) that is set, Host  will begin transmitting all packets within the current communication session it is conducting with Host  with the check-TCP-checksum (CK_TCP_CKSUM) bit in the IP header set, thereby requesting that all receiving routers perform a packet checksum on the received packet, in accordance with the preferred embodiment. Upon receiving a packet with the check-TCP-checksum bit set, router  will perform a complete checksum on the entire packet, and not just on the IP header. In a preferred embodiment, the packet checksum is performed by conducting both an IP header checksum and a TCP payload checksum as were described in conjunction with IP header  and TCP header . In an alternative embodiment, the CK_TCP_CKSUM bit is expanded to a field providing a checksum value for the entire packet, including the TCP\/IP payload, and the checksum is performed against this combined value.","Assuming that Link  is not introducing errors, the packet checksum performed by Router  will confirm the packet is good and will permit Router  to continue routing the packet based on the destination port. The routing and forwarding tables in Router  will then direct the data packet over Link  en route to Host . Upon receiving the data packet, Router  will detect that the check-TCP-checksum bit has been set and will perform a packet checksum on the entire packet. Because Link  has been introducing noise, the packet checksum performed by Router  will fail, indicating that the link between Router  and Router  is bad. Router  will then drop the corrupted packet and update a register maintaining a count of the number of packets detected as corrupt over a set period.","As seen in , registers  within router memory  keep track of the total number of packets received by its router and registers  keep track of the number of packets received that are corrupt, in accordance with a preferred embodiment. Registers  include Register  containing a value for the number of corrupt packets detected on Port  (CP_PORT A), Register  containing a value for the number of corrupt packets detected on Port  (CP_PORT B), Register  containing a value for the number of corrupt packets detected on Port  (CP_PORT C), and Register  containing a value for the number of corrupt packets detected on Port  (CP_PORT D). Registers  include Register  containing a value for the total number of data packets received on Port  (TP_PORT ), Register  containing a value for the total number of data packets received on Port  (TP_PORT ), Register  containing a value for the total number of data packets received on Port  (TP_PORT ), and Register  containing a value for the total number of data packets received on Port  (TP_PORT ). Registers  and  are reset to \u201c0\u201d on a periodic basis, for example every five minutes.","When a router receives a packet over one of its ports, the corresponding value in Register  is incremented and the corresponding value in Registers  for the port is incremented by \u201c1\u201d if the packet is detected as bad. Thus, for example, if Router  is connected to Link  on its input port , the variable stored in Register  would be incremented by \u201c1\u201d each time a data packet was received on Port , and, additionally, the variable stored in Register  would be incremented by \u201c1\u201d each time a corrupt packet was received on Port .","The router continuously monitors the ratio of corrupt packets on a particular port to the total number of packets received on the port (i.e. CP_PORT_\/TP_PORT_). If the ratio for a particular port exceeds a \u201ccorruption threshold\u201d preset by an administrative policy of the router, then the link is indicated as bad. In a preferred embodiment, the link would be deemed bad if the ratio of corrupt-to-received packets in a given five minute interval exceeded a twenty percent (20%) threshold. If the ratio of corrupt-to-received packets for a particular port does not exceed the preset threshold, then the router will continue to operate as normal and continue to use the link connected to the port.","Therefore, in accordance with the preferred embodiment, if the ratio of corrupt-to-received packets for a particular port exceeds the corruption threshold, then the router assumes that the associated link is causing data corruption and will update its Routing Table to eliminate routing from that link. As required by the routing protocol, the router would also issue a routing update to other routers in the network indicating that the link is bad and should be avoided. In a preferred embodiment, a link-state advertisement (LSA) provided by the OSPF (Open Shortest Path First) protocol is utilized to provide a routing update to the other routers coupled to Ports - and communicate the identified corrupted link to be avoided. OSPF is an interior gateway routing protocol developed for IP networks based on the shortest path first or link-state algorithm. Routers use link-state algorithms to send routing information to all nodes in an internetwork by calculating the shortest path to each node based on the topography of the Internet constructed by each node. Each router sends that portion of the routing table that describes the state of its own links, and it also sends the complete routing structure (topography).","Returning to the example of , prior to a determination in accordance with the present invention that Link  is bad, the retransmission rate from Host  to Host  would have seen a large increase due to the required Fast Retransmit of many corrupted packets along the route of Links ---. Once a determination is made in accordance with the present invention that Link  is causing corruption and should be avoided, Router  issues a routing update to the network that will result in Router  forwarding data packets over Links ---- to arrive at Host , thereby avoiding the corrupted Link . Through the new route of Links -----, Host  will see the retransmission rate of lost or corrupted data packets begin to significantly drop for the connection session between Host  and Host . Accordingly, when the retransmission rate drops below a predetermined level set by an administration policy, Host  can then assume that the bad link has been detected and avoided within Network  through the process of the preferred embodiment, and will therefore stop setting the CK_TCP_CKSUM option in the IP Header of data packets transmitted to Host .","As will be appreciated, the preferred embodiment presents significant advantages over current routing algorithms and networks. First, network congestion is significantly relieved because corrupted packets are dropped at the routers when the corruption is detected, thereby eliminating the propagation of the corrupted packets all the way to the receiving client host. Second, by providing a mechanism to target specific data packets for packet checksum computation, the probability of error detection over the links has been increased, thereby routing protocols to react faster to potential link outages.","With reference now to , there is shown a process performed in client-server systems for indicating data corruption within a network, in accordance with a preferred embodiment of the present invention. The process  begins at step , when the client receives a data packet over a network connection. At step , the client determines whether the received data packet is corrupt by performing a checksum on the entire data packet. If not, the process passes to step , which shows that the client responds to receipt of the data packet by sending a packet acknowledgment frame with the CKSUM_FAIL flag reset, indicating that the received data packet had passed the checksum test at the client. From step , the process ends at step . Returning to decision block , if the received data packet is determined to be corrupt, the process passes to step , where the client sends an acknowledgment frame for the received packet with the CKSUM_FAIL flag set, indicating that the received packet had failed the checksum test and that the data packet was corrupt. From step , the process ends at step .","With reference now to , there is shown a process performed in client-server systems for indicating data corruption within a network, in accordance with a preferred embodiment of the present invention. The process  begins at step , when the client receives a packet acknowledgment frame with the CKSUM_FAIL flag set. The process passes to step , where the server responds by sending all subsequent data packets to the client with the CK_TCP_CKSUM flag set in the IP Header of each such data packet, thereby requesting that each router in the network receiving the data packet perform a packet checksum on the entire packet upon receipt. The process then passes to step , where the server stores the rate at which the sender host is being required to resend data packets to the client host (the \u201ccurrent retransmission rate\u201d) as a result of the Fast Retransmit algorithm of TCP for delivering lost or corrupt data packets to the client. The process then passes to decision block  where the server determines if the current retransmission rate to the client has dropped below a predetermined threshold retransmission rate stored in the server. If not, the process returns to step , where the latest current retransmission rate is stored in the server. If the decision at step  indicates that the current retransmission rate has dropped below the threshold retransmission rate, the drop in current retransmission rate is assumed to be the result of the bad link within the route between server host and client host being detected and avoided by the routers within the network, in accordance with the present invention, and the process passes to step , where the server sends subsequent packets to the client with the CK_TCP_CKSUM reset, thereby not requesting that routers receiving the data packet in the network perform a packet checksum on the entire data packet.","With reference now to , there is shown a process performed in network routers for providing rapid detection and avoidance of data routes within the network causing high data corruption, in accordance with a preferred embodiment of the present invention. The process  starts at step , and passes to step , where a router within the network receives a data packet over a network connection on a given port, and increments the stored value of the total packets received over that port (TP_PORT_(stored in the registers ). The process then passes to decision block , where it is determined if the CK_TCP_CKSUM flag in the IP header of the received data packet is set. If not, the process passes to step , where the router performs a checksum on the IP header of the packet. The process then passes to decision block , where it is determined if the checksum test has passed. If not, the process passes to step , where the router drops the packet, and the process thereafter ends at step . If the decision at step  is that the checksum passed, the process passes to step , where the data packet is forwarded on to the next router in the route (next hop) through the network to the client. Thereafter, the process ends at step .","Returning to decision block , if the CK_TCP_CKSUM is set in a data packet received over the network, the process passes to step , where the router performs a packet checksum on the entire data packet received. The process then passes to decision block , where it is determined if the packet checksum of the entire data packet has passed. If so, the process passes back to step , where the data packet is forwarded to the next hop in the route through the network to the client. If the decision at step  is that the packet checksum has failed, the process passes to step , where the router drops the received packet. The process then passes to step , where the router increments the sorted value of the number of detected corrupt packets received over the port (C_PORT_) (stored in the registers ). Thereafter, the process passes to decision block , where it is determined if the value of C_PORT_is exceed the corruption threshold of the system. In a preferred embodiment, the corruption threshold is a percentage and the determination at step  is whether the percent ratio of received corrupt packets to received total packets (C_PORT_\/TP_PORT) is greater than the corruption threshold percent. If the decision at step  is negative, the process ends at step . If the determination at step  is affirmative, the process passes to step , where the router updates its Forwarding Table to avoid the link on the port and transmits a routing update to the network indicating that the link is bad, thereby updating all of the routers in the network on the bad link. Thereafter, the process ends at step .","While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example, the present invention may be implemented using any combination of computer programming software, firmware or hardware. As a preparatory step to practicing the invention or constructing an apparatus according to the invention, the computer programming code (whether software or firmware) according to the invention will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, optical disks, magnetic tape, semiconductor memories such as ROMs, PROMs, etc., thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the computer programming code is used by either executing the code directly from the storage device, by copying the code from the storage device into another storage device such as a hard disk, RAM, etc. or by transmitting the code for remote execution. A method for practicing the invention may result from combining one or more machine-readable storage devices containing the code with appropriate standard computer hardware to execute the code. An apparatus for practicing the invention could be one or more computers and storage systems containing or having network access to computer program(s) coded in accordance with the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
