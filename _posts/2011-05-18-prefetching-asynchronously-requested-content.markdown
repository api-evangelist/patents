---
title: Pre-fetching asynchronously requested content
abstract: Disclosed are various embodiments for pre-fetching data from a service in advance of obtaining an asynchronous callback for the data from a client. It is determined whether a network page requested by a client is configured to prompt the client to initiate an asynchronous callback for data that may be pre-fetched. The data is pre-fetched from a service before obtaining the asynchronous callback for the data from the client. The data that has been pre-fetched from the service is sent to the client in response to obtaining the asynchronous callback for the data from the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08516041&OS=08516041&RS=08516041
owner: Amazon Technologies, Inc.
number: 08516041
owner_city: Reno
owner_country: US
publication_date: 20110518
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["Network pages, such as web pages, have grown increasingly complex to assemble. In years past, most network pages were static files containing hypertext markup language (HTML). Network page servers were configured simply to read the files from a data store and serve them up to browser applications. Now, nearly all network pages are dynamically generated by template engines and\/or other network page generation software.","Ajax refers to a group of interrelated web development technologies that may be used to create interactive applications. In particular, the term \u201cAjax\u201d may refer, for example, to the asynchronous use of JavaScript and extensible markup language (XML) on the client-side. Ajax may use, for example, a combination of cascading style sheets (CSS) and HTML to format content. The document object model (DOM) corresponding to the content may be accessed with JavaScript in order to provide dynamic updates to the content. The dynamic updates may occur asynchronously with respect to the loading of the original content.","The present disclosure relates to pre-fetching data that is to be asynchronously requested by a client. It is often desirable for a network page to include content that is to be requested and obtained asynchronously with respect to the network page. Such content may require communication with one or more services and may take a relatively long time to process and build. If such content were loaded synchronously with the network page, rendering of the network page would be delayed, leading to user frustration. By loading such content asynchronously, an incomplete version of the network page may be rendered initially, with the asynchronous content being rendered later. The user experience is thereby improved, with the user having fast access to at least a preliminary version of the network page.","Various embodiments of the present disclosure improve the rendering speed of asynchronous content by pre-fetching the content at the network page server. Although obtaining some instances of asynchronous content may depend at least in part on user input or parameters that are available only after the network page is initially rendered in the client, other instances of asynchronous content may be obtained in response to the original network page request. In the latter cases, the asynchronous content may be pre-fetched from one or more services and cached by the network page server before the callback is received from a client. The cached content may facilitate a faster response time to the callback, thereby improving rendering performance for the asynchronous content. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more computing devices  by way of a network . The computing devices  are also in data communication with one or more clients  by way of a network . The networks  and  may include, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks. The networks  and  may be the same network or different networks. In one embodiment, the network  corresponds to an internal network, while the network  corresponds to a public network.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include a network page server application  and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The network page server application  is executed to generate and serve up network pages , such as web pages or other forms of network content. The network pages  are sent to clients  in response to network page requests  obtained from the clients . Additionally, the network page server application  may obtain asynchronous data requests  from the clients  and respond with asynchronous data .","The network page server application  obtains the asynchronous data  (or data used to generate the asynchronous data) from a service executed on the computing devices  by sending a service request . The service responds to the network page server application  with a service response . The network page server application  is configured to pre-fetch the asynchronous data  before obtaining the asynchronous data request  where possible. In various embodiments, the network page server application  may include a commercially available hypertext transfer protocol (HTTP) server such as, for example, Apache\u00ae HTTP Server, Microsoft\u00ae Internet Information Services (IIS), Apache\u00ae Tomcat\u00ae, etc.","The data stored in the data store  includes, for example, network page data , a data cache , session data , and potentially other data. The network page data  includes any data used to generate the network pages  such as, for example, code, templates, text, graphics, images, audio, video, and so on. The data cache  is used to store pre-fetched data obtained from a service that is to be returned to a client  as asynchronous data . The data in the data cache  may be associated with a unique identifier. The session data  corresponds to session identifiers, cookies, etc. that may be used by the network page server application  to track users across a session and identify HTTP requests.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above. In various embodiments, the computing device  may be the same as the computing device  or different from the computing device .","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include a service application  and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The service application  corresponds to a web service or other service within a service-oriented architecture. The service application  accepts service requests  over the network  and responds to the service requests  with service responses . To this end, the service application  may employ simple object access protocol (SOAP), HTTP, extensible markup language (XML), and\/or other technologies to facilitate communication and data exchange with service clients such as the network page server application .","In one embodiment, the service application  may use an internal cache to speed the return of data in the service response . However, even if the service application  employs a data cache, it is understood that the network page server application  may achieve a performance improvement for the client  by pre-fetching data. At the least, pre-fetching data may eliminate an extra hop in the network , thereby reducing latency. Although only one service application  is discussed, it is contemplated that there may be many different service applications  within a service-oriented architecture. The various service applications  may have different response times based, for example, on time to acquire data and generate the service response , volume of service requests , complexity of the service request , and\/or other factors.","The client  is representative of a plurality of client devices that may be coupled to the network . The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of desktop computers, laptop computers, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability. The client  may include a display . The display  may comprise, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc.","The client  may be configured to execute various applications such as a browser  and\/or other applications. The browser  may be executed in a client , for example, to access and render network pages , such as web pages, or other network content served up by the computing device  and\/or other servers, thereby generating a rendered network page  on the display . The network pages  may include page update code  that is configured to generate asynchronous data requests  and to obtain asynchronous data . The page update code  may correspond to Java\u00ae, JavaScript\u00ae, VBScript, and\/or other forms of client-side code that may be embedded in a network page . The asynchronous data  may be used by the page update code  executed in the browser  to update one or more display regions  in the rendered network page . The client  may be configured to execute applications beyond browser  such as, for example, email applications, instant message applications, and\/or other applications.","Next, a general description of the operation of the various components of the networked environment  is provided. To begin, network page data  is configured to be used for generating network pages  for a network site. A developer of the network site may choose to include asynchronously requested content in the network page . To this end, the network page  may include page update code  that is configured to generate one or more asynchronous callbacks to the network page server application  or another server application for additional data to be used in updating the rendered network page .","When the network page server application  is generating the network page , it may be determined whether the data that will be requested by an asynchronous callback may be pre-fetched. Such data may be pre-fetched when it does not depend on user interaction in the client , data in the client , or other asynchronously obtained data that cannot be predicted. Whether data may be pre-fetched may be specified through an application programming interface (API) or configuration setting. In some embodiments, it may be automatically determined whether data may be pre-fetched. As a non-limiting example, the network page server application  may determine whether the service request  uses parameters that are not available before the asynchronous callback is made.","If the asynchronous content can be pre-fetched, the network page server application  is configured to request it from the appropriate service application  before obtaining the asynchronous callback from the client . The pre-fetching may be performed in another process or thread of the network page server application  to avoid blocking the sending of the network page  to the client . When the asynchronous content is obtained from the service application , it may be processed and\/or transformed and then stored in the data cache . The content may be stored in association with a unique identifier for the client , the session, and\/or the asynchronous callback within the session. The unique identifier may be provided in the page update code  so that the asynchronous callback specifies the unique identifier. Alternatively, the unique identifier may be determined from the session data  and a cookie provided by the browser .","When the network page server application  obtains the asynchronous callback from the client , the data that has been pre-fetched may or may not have been obtained from the service application . If the data has been obtained and stored in the cache, the cached data may be returned to the client . If the data has not yet been obtained but has been requested, the network page server application  may block until the data is obtained. If the data has not been requested (i.e., the data could not be pre-fetched), the data may be requested and the network page server application  may block until the data is obtained. The data is returned to the client , and the page update code  uses the data to update a rendering of the network page  in the client .","Any number of asynchronous callbacks and\/or services may be involved in the rendering of a network page . In some cases, asynchronous callbacks for data that cannot be pre-fetched may follow asynchronous callbacks for data that can be pre-fetched, and vice versa. Further, asynchronous callbacks may be generated in response to data that is obtained asynchronously.","It is understood that the principles of the present disclosure may be extended to asynchronous data requests that depend on data available at the client  after the network page  has been sent. To this end, a first set of asynchronous data  that could not be pre-fetched may be obtained and sent to the client  in response to a first asynchronous callback. In response to the first asynchronous callback, a second set of asynchronous data  may be pre-fetched in anticipation of a second asynchronous callback. The second set of asynchronous data  may be pre-fetched based, for example, at least in part upon the first set of asynchronous data , the first asynchronous callback, and\/or other data. The second asynchronous callback may be generated in the client  based, for example, at least in part on the first set of asynchronous data , user interaction, and\/or other data.","As a non-limiting example, a network page  may include a dynamic display region  that uses pagination. Although the asynchronous data  related to the display region  may not be capable of being pre-fetched, once a user has selected the first page, the network page server application  may anticipate that subsequent pages will be requested. Thus, the network page server application  may pre-fetch data related to the second page, third page, etc. after the first page is requested. Accordingly, the data related to the second page, third page, etc. may be cached and ready to send as soon as it is requested by the client .","Additionally, data that is stored in the data cache  may be made available in connection with multiple network pages  and\/or multiple user sessions. As a non-limiting example, asynchronous data  may relate to a localization of a network page  that is generic with respect to the user. Thus, the localization may be employed for multiple users. To this end, the data cache  may employ a cache control approach with timestamps to ensure, for example, that old data is purged and the latest data is presented.","Referring next to , shown is one example of a user interface  rendered by a browser  () executed in a client  () in the networked environment  () according to various embodiments. In particular, the user interface  includes a rendered network page  that corresponds to a preliminary rendering of a network page  (). In this non-limiting example, the rendered network page  relates to a management dashboard for a merchant in an electronic marketplace. A navigational tool  and other content is initially rendered, thereby providing a preliminary version of the rendered network page  for the user to see and interact with while other data is loading. The navigational tool  allows the user to select from various management tasks, which the user may select before other content has finished loading.","The rendered network page  includes three display regions , , and that feature asynchronously loaded content. The display region will display a list of pending orders for the merchant, the display region will display a list of bestselling products for the merchant, and the display region will display a list of most viewed pages for the merchant. The data underlying these features may take some time to obtain and prepare, so these features are loaded asynchronously with respect to the network page . A placeholder, such as a textual description, graphic, or animation, is rendered in the display regions -while the asynchronous data  () underlying the features are being loaded. In this example, a \u201cloading\u201d graphic is rendered.","Turning now to , shown is another example of a user interface  rendered by a browser  () executed in a client  () in the networked environment  () according to various embodiments. In particular, the user interface  includes a rendered network page  that corresponds to a rendering of a network page  () that has been updated with respect to . Since the time that  was rendered, asynchronous data  () has been obtained to render the feature in the display region . The asynchronous data  to render display regions and have not yet been obtained by the browser .","The display region , which may correspond to an \u201ciframe\u201d or other element, provides a list of bestselling products for the merchant. As shown in this non-limiting example, the list displays a title of the product that is linked to a detail page, a number of orders for the product, and a thumbnail icon for the product. Although the information used to generate the list is specific to the merchant, the rendering of the list in  may be performed by data that does not depend on user interaction after the network page  is rendered. In other words, the network page server application  () may pre-fetch the data underlying the display region before a corresponding asynchronous data request  () is obtained from the browser . The asynchronous data  that has been pre-fetched may be cached in the data cache  () in anticipation of the asynchronous data request . Alternatively, the asynchronous data  may arrive relatively sooner at the network page server application  to fulfill the asynchronous data request  because it has been requested before receipt of the asynchronous data request .","Moving on to , shown is a sequence diagram  that illustrates one example of the interaction among a browser , a network page server application , and a service application  executed in the client  (), the computing device  (), and the computing device  (), respectively, within the networked environment  () according to various embodiments. Although the tasks in the sequence diagram  are depicted as being in a specific order, it is understood that various tasks may be scrambled and may be performed asynchronously or in parallel with one another, leading to different possible orders. The operation of the browser , the network page server application , and the service application  will be discussed in further detail with respect to the flowcharts of .","Beginning with box , the browser  generates a network page request . For example, a user may type in a uniform resource locator (URL) into an address bar of the browser , select a bookmark for the URL, select a link for the URL, or otherwise select a URL that is associated with the network page request . The network page request  is sent over the network  () to the network page server application . In box , the network page server application  generates the network page  from the network page data  (). In box , the network page server application  generates a non-blocking request for service data in response to determining that there is an asynchronous callback in the network page  for data that may be pre-fetched. The service request  may be sent to the service application  any time before the asynchronous data request  is obtained from the client .","The network page  is returned to the browser . Potentially in parallel, in box , the service application  obtains data in response to the service request . The service application  returns the service response  to the network page server application . In box , the network page server application  may cache the service data, or a derivative thereof, in the data cache  () in association with a unique identifier.","In box , the browser  executes the page update code  () embedded in, or referenced by, the network page . In box , in response to the page update code  (), the browser  generates an asynchronous data request  which is sent to the network page server application  over the network . The asynchronous data request  may include the unique identifier. In box , the network page server application  returns the stored service data from the data cache  based at least in part on the unique identifier associated with the asynchronous data request . If the pre-fetched service data has not yet arrived, the network page server application  may block until the service data arrives.","The asynchronous data  is returned to the browser  over the network . In box , the page update code  executed in the browser  updates the rendered network page  () based at least in part on the asynchronous data . Thereafter, the sequence diagram  ends.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the network page server application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page server application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the network page server application  obtains a network page request  () from a client  (). In box , the network page server application  generates a network page  () in response to the network page request . In box , the network page server application  determines whether the network page  includes asynchronous content that may be pre-fetched or cached. If the network page server application  determines that the network page  includes asynchronous content that may be pre-fetched, the network page server application  moves to box  and requests the asynchronous content from the respective service application  () over the network  () via a service request  (). Thereafter, the network page server application  proceeds to box . If the network page  does not include asynchronous content that may be pre-fetched, the network page server application  also proceeds to box .","In box , the network page server application  sends the network page  to the client  over the network  (). In box , the network page server application  obtains the asynchronous content that has been requested from the service application  in a service response  () if such content has been requested. The asynchronous content may be stored in a data cache . In some situations, the flow of the network page server application  may continue to box  without obtaining the asynchronous content. In box , the network page server application  obtains an asynchronous data request  () from the client .","In box , the network page server application  determines whether the requested data has been cached. If the content has not been cached, the network page server application  moves to box . In box , the network page server application  determines whether a service request  is pending with the service application . For example, a service request  to pre-fetch the asynchronous data may have been sent in box , but the data might not have been obtained in box . Such a service request  may still be pending, or the service request  may have timed out and may no longer be pending. If no service request  is pending, the network page server application  moves to box  and requests the asynchronous content from the service application  in a service request . Thereafter, the network page server application  proceeds to box . If a service request  is pending, the network page server application  also proceeds to box .","In box , the network page server application  requests and obtains the asynchronous content from the service application . Thereafter, the network page server application  proceeds to box . If the network page server application instead determines in box  that the requested data has been cached, then in box , the network page server application  obtains the asynchronous content from the data cache  (). Thereafter, the network page server application  also proceeds to box .","In box , the network page server application  sends the asynchronous data  to the client . Thereafter, the portion of the network page server application  ends. In a variation on the flowchart of , the pre-fetched data may be obtained from the service application  after the asynchronous data request  has been received from the client . In such a case, the network page server application  may block until the request may be satisfied.","Continuing now to , shown is a flowchart that provides one example of the operation of a portion of the browser  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the browser  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the client  () according to one or more embodiments.","Beginning with box , the browser  sends a network page request  () to the network page server application  (). In box , the browser  obtains a network page  () from the network page server application . In box , the browser  renders the network page  for display as a rendered network page  (). In box , the browser  executes page update code  () embedded or associated with the network page .","The page update code  causes the browser  to send an asynchronous callback (asynchronous data request  ()) to the network page server application  in box . The asynchronous data request  may specify a unique identifier as determined in the page update code . In box , the browser  obtains the asynchronous data  () from the network page server application  in response to the asynchronous data request . In box , the page update code  causes the browser  to render an updated network page  for display. Thereafter, the portion of the browser  ends.","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the service application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the service application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the service application  obtains a service request  () for data from the network page server application  over the network  (). In box , the service application  generates data in response to the service request . The data may be generated based at least in part on data in the data store  (). In some cases, the data may be stored in a data cache accessible to the service application . In box , the service application  sends the data to the network page server application  in a service response  () over the network . Thereafter, the portion of the service application  ends.","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor  and a memory , both of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the network page server application  and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system may be stored in the memory  and executable by the processor .","It is understood that there may be other applications that are stored in the memory  and are executable by the processor  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the network page server application , the browser  (), the service application  (), the page update code  (), and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The sequence diagram of  and the flowcharts of  show the functionality and operation of an implementation of portions of the browser , the network page server application , and the service application . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the sequence diagram of  and the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in the sequence diagram of  or the flowcharts of  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in the sequence diagram of  or the flowcharts of  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the network page server application , the browser , the service application , and the page update code , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIGS. 2A and 2B","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
