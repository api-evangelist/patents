---
title: Network traffic processing according to network traffic rule criteria and transferring network traffic metadata in a network device that includes hosted virtual machines
abstract: Network devices include hosted virtual machines and virtual machine applications. Hosted virtual machines and their applications implement additional functions and services in network devices. Network devices include data taps for directing network traffic to hosted virtual machines and allowing hosted virtual machines to inject network traffic. Network devices include unidirectional data flow specifications, referred to as hyperswitches. Each hyperswitch is associated with a hosted virtual machine and receives network traffic received by the network device from a single direction. Each hyperswitch processes network traffic according to rules and rule criteria. A hosted virtual machine can be associated with multiple hyperswitches, thereby independently specifying the data flow of network traffic to and from the hosted virtual machine from multiple networks. The network device architecture also enables the communication of additional information between the network device and one or more virtual machine applications using an extended non-standard network protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954957&OS=08954957&RS=08954957
owner: Riverbed Technology, Inc.
number: 08954957
owner_city: San Francisco
owner_country: US
publication_date: 20090701
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application is related to U.S. patent application Ser. No. 12\/496,405, entitled \u201cDefining Network Traffic Processing Flows Between Virtual Machines\u201d, filed 1 Jul. 2009; U.S. Pat. No. 8,634,437 issued on 24 Jan. 2014, entitled \u201cExtended Network Protocols for Communicating Metadata with Virtual Machines\u201d, filed 1 Jul. 2009; and U.S. Pat. No. 8,572,609 issued on 29 Oct. 2013, entitled \u201cMaintaining Virtual Machines in a Network Device\u201d, filed 1 Jul. 2009; all of which are incorporated by reference herein for all purposes.","The present invention relates network devices in general and in particular to providing virtualized network services and network applications using network devices.","Data communications networks, such as local area networks (LANs) and wide area networks (WANs) often include a variety of network devices for sending, receiving, directing, and optimizing network data traffic. Examples of common network devices include routers, switches, storage-area network front-ends and interfaces, network-address translation (NAT) and firewall devices, and wireless network devices such as access points, bridges, and repeaters. More specialized network devices include standalone print-servers, streaming video and music servers, logging and network management devices, and network monitoring and traffic inspection devices.","WAN accelerators are another example of a network device. WAN accelerators optimize network traffic to improve network performance in reading and\/or writing data over a network. WAN accelerators are referred to in the art by many different terms, including, but not limited to, transaction accelerators, WAN optimizers, WAN optimization controllers (WOCs), wide-area data services (WDS) appliances, WAN traffic optimizers (WTOs), and protocol accelerators or optimizers. Additionally, techniques for optimizing network traffic to improve network performance in reading and\/or writing data over a network are referred to in the art by many different terms, including, but not limited to, WAN acceleration, transaction acceleration, transaction pipelining, protocol pipelining, request prediction, application flow acceleration, and protocol acceleration. Herein, the term \u201cWAN accelerator\u201d is used to refer to such devices and \u201cWAN acceleration\u201d is used to refer to such techniques.","Most network devices provide a fixed or limited set of functionality. For example, a switch device redirects network traffic. In another example, a WAN accelerator optimizes network traffic passing through a WAN between two or more LANs. Although the fixed or limited set of network device functionality eases the installation and enhances the reliability of network devices, there is an unmet need to enhance network devices with additional functions or applications without compromising reliability and ease of management. Furthermore, there is an unmet need to flexibly direct network traffic to one or more additional functions or network applications provided by a network device. Additionally, there is an unmet need to communicate additional data associated with network traffic to one or more additional functions or network applications provided by a network device.","An embodiment of the invention includes network devices capable of hosting one or more virtual machines and associated virtual machine applications. The use of hosted virtual machines and their applications allows network devices to flexibly and reliably implement additional functions and services. To flexibly direct network traffic within the network device, an embodiment of the network device architecture includes multiple data taps for directing network traffic to hosted virtual machines and allowing hosted virtual machines to inject network traffic.","To specify data transfer topologies between virtual machines and network traffic taps, an embodiment of the network device architecture includes unidirectional data flow specifications, referred to as hyperswitches. Hyperswitches may be implemented as software and\/or hardware within a network device. Each hyperswitch is associated with a hosted virtual machine. Each hyperswitch is adapted to receive network traffic directed in a single direction (i.e. towards or away from a network connected with the network device). Each hyperswitch processes received network traffic according to rules and rule criteria. In an embodiment, example rules include copying network traffic to a hosted virtual machine, redirecting network traffic to a hosted virtual machine, passing network traffic towards its destination unchanged, and dropping network traffic. A hosted virtual machine can be associated with two or more hyperswitches, thereby independently specifying the data flow of network traffic to and from the hosted virtual machine from two or more networks.","In an embodiment, the network device architecture also enables the communication of additional information such as network traffic metadata between the network device and one or more virtual machine applications using an extended non-standard network protocol. The use of extended non-standard network protocols allows virtual machine applications to receive network traffic metadata from other modules of the network device, such as a network traffic processing module, or from other hosted virtual machines and their respective virtual machine applications without using complex inter-application or inter-device communication techniques. Furthermore, extended non-standard network protocols provide functionality similar to application programming interfaces without the need to compile applications against specialized API libraries. Additionally, extended non-standard network protocols allow network traffic metadata to be communicated with associated network traffic without any risk of data corruption to the network traffic. Additionally, virtual machine applications and modules of the network device can exchange network traffic metadata using extended non-standard network protocols without any knowledge of the data transfer topology for communicating network traffic between hosted virtual machines and the network device; this allows for flexibility in configuring virtual machine applications within a network device.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","105","105"]},"In an embodiment, network device  includes at least two network connections, referred to as network connection A  and network connection B . Network connections A  and B  are each adapted to communicate with one or more network devices and\/or computers. Network connections A  and B  may be connected with the same network or different networks. In an example of the former, the network connections A  and B  are both connected with a single local-area network (LAN). In an example of the latter, network connection A  is adapted to connect with a LAN, allowing network device  to communicate with one or more additional network devices and\/or computers connected with the LAN. Example network connection B  is adapted to connected with a wide-area network (WAN), such as the Internet, allowing network device  to communicate with one or more additional network devices and\/or computers connected either directly to the WAN or indirectly to the WAN via one or more additional LANs.","In an embodiment, network device  receives network traffic via network connections A  and B  and performs one or more network processing operations using network traffic processing module . As a result of its network processing operations, network device  may output network traffic via network connections A  and\/or B . In embodiments of network device , the network traffic output by network device  may be similar or identical to the received network traffic or may be different than the received network traffic. For example, the network traffic output by network device  may be a compressed or optimized version of the received network traffic. In a further embodiment, the network device  may output network traffic via network connections A  and\/or B  independent of the receipt of any incoming network traffic.","An embodiment of the network device architecture  implements one or more additional functions or applications within one or more virtual machines hosted by the network device . By hosting additional functions or applications within one or more virtual machines, network device  includes flexible, enhanced functionality without compromising reliability and ease of management.","An embodiment of the network device  includes a virtual machine data interface . Virtual machine data interface  is adapted to directed network traffic to, from, and between one or more virtual machines  hosted by the network device and the network connections A  and\/or B . In an embodiment, virtual machine data interface  is connected with network connection A  via a traffic tap A , which is adapted to direct a copy of all incoming LAN traffic to the virtual machine data interface . In an embodiment, the traffic tap A is also adapted to direct network traffic from one or more virtual machines  hosted by the network device  to network devices and\/or computers directly or indirectly connected with the network device  via LAN connection .","Similarly, in an embodiment, virtual machine data interface  is connected with WAN connection  via a traffic tap B , which is adapted to direct a copy of all incoming WAN traffic to the virtual machine data interface . In an embodiment, the traffic tap B is also adapted to direct network traffic from one or more virtual machines  hosted by the network device  to network devices and\/or computers connected directly or indirectly with the network device  via WAN connection .","In an embodiment, virtual machine data interface  may optionally include one or more additional intra-module network traffic taps, such as intra-module network traffic taps and , adapted to direct copies of all network traffic at one or more intermediate stages of network processing operations to the virtual machine data interface . Additionally, network traffic output from one or more virtual machines  hosted by the network device  may be received by the virtual machine data interface  and redirected into the network traffic processing module  via one or more of the intra-module network traffic taps, such as intra-module network traffic taps and ","Network device  can host one or more virtual machines , such as virtual machines , , and . Each one of the virtual machines  can operate independently of both any other virtual machines  and the network traffic processing module . As described above, the virtual machine data interface  receives incoming and outgoing network traffic or copies of this network traffic via traffic taps . In an embodiment, network traffic directed to the virtual machines  are received by virtual network interfaces  within each of the virtual machines , such as virtual network interface within virtual machine , virtual network interface within virtual machine , virtual network interface within virtual machine . In an embodiment, virtual network interfaces  are adapted to send and receive network traffic according to standard high-level or low-level network protocols, such as HTTP, TCP\/IP, or Ethernet.","In an embodiment, each of the virtual machines  executes one or more virtual machine applications , such as virtual machine applications , , and . Virtual machine applications  can perform many types of additional functions. Example additional functions include but are not limited to data compression and optimization functions; storage-area network functions; network security functions such as network-address translation, firewall, virus and malware protection, document security and redaction applications, and spam or e-mail filtering functions; network service functions such as print servers, e-mail servers, database servers, VPN and data sharing servers, directory and domain servers, web and other content servers, and streaming video and music servers; logging and network management functions; and network monitoring and traffic inspection functions. In general, a virtual machine application may perform any type of function that is capable of being implemented as an application executed by a virtual machine hosted by a network device. In an embodiment, virtual machine applications  send and receive network traffic via their associated virtual network interfaces using standard or non-standard networking protocols. From the perspective of the virtual machine applications , the network traffic from the virtual network interfaces appears to be network traffic received directly via a physical LAN or WAN.","In a further embodiment, hosted virtual machines and their associated virtual machine applications may also support one or more intra-module network traffic taps. For example, virtual machine includes an intra-module network traffic tap . Intra-module network traffic tap enables virtual machine and its virtual machine application to export network traffic at an intermediate stage of processing to the virtual machine data interface , where it may be accessed by the network traffic processing module , other hosted virtual machines  and their applications , and\/or output via the network connections  or  to one or more networks connected with the network device .","Additionally, an embodiment of the network device  includes a management module  for configuring, managing, and monitoring the functions of the network device , including the network traffic processing module . Optionally, management module  may be used to configure, manage, and monitor one or more of the virtual machines  hosted by network device . For example, network administrators may use management module  to upload virtual machine images, which specify the configuration of virtual machines  and its applications, to the network device . Additionally, network administrators may use management module  to start, stop, or otherwise control one or more hosted virtual machines . Furthermore, an embodiment of management module  enables network administrators to specify the flow of network traffic between network traffic taps  and hosted virtual machines , as well as between different hosted virtual machines .","As described above, the virtual machine data interface  can direct network traffic from the traffic tap A, traffic tap B, and any optional intra-module traffic taps to one or more hosted virtual machines in any order. Additionally, the virtual machine data interface  can direct network traffic from each hosted virtual machine to one or more other hosted virtual machines and\/or to the network traffic processing module  and to other computers and network devices via the traffic tap A, traffic tap B, and any optional intra-module traffic taps.","An embodiment of the network device architecture  enables the specification of complex data transfer topologies between virtual machines and network traffic taps using one or unidirectional data flow specifications, referred to as hyperswitches. Hyperswitches may be implemented as software and\/or hardware within a network device. For example, an embodiment of network device  can include one or more software-implemented hyperswitches within the virtual machine data interface  to specify the data transfer topology between the one or more connected networks, such as LANs and\/or WANs, network traffic processing module, and one or more hosted virtual machines.  illustrates a system for specifying data transfer topologies between virtual machines using hyperswitches within a network device according to an embodiment of the invention.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2A","b":["200","200","107","105","205","225","200","109","105","210"]},"Side A connected hyperswitch  is adapted to receive network traffic coming to the network device from a first network using the side A tap interface . Side A tap interface  may receive network traffic received by the network device from the first via any network traffic tap provided by a network device, including traffic tap A , intra-module traffic taps , , and , and traffic tap B shown in example network device architecture . Regardless of the traffic tap connected with side A tap interface , side A tap interface  only receives network traffic received by the network device via the side A network interface ; as described below, network traffic received by the network device from the same or a different network via the side B network interface  is diverted to a separate hyperswitch.","Upon receiving network traffic from the first network via the side A tap interface , an embodiment of the side A connected hyperswitch interface  applies a set of rules  to the received network traffic. In an embodiment, the side A connected hyperswitch interface  compares each packet or other unit of network traffic to rule criteria  corresponding with the rules . Embodiments of the side A connected hyperswitch interface  may include one or more attributes of a packet or other unit of network traffic in each of the rule criteria , including the packet data contents or payload; layer 2 attributes such as a source or destination MAC address; layer 3 attributes such as a source or destination IP address; layer 4 attributes such as TCP or UDP attributes; layer 5 attributes such as session information; layer 6 and 7 attributes such as those associated with data structures, data presentation, and applications, including application layer protocols such as HTTP (including HTTP URLs) and application data formats such as XML.","In response to a packet or other unit of network traffic matching one or more of the criteria, an embodiment of the side A connected hyperswitch interface  applies one or more of the rules  corresponding with the matching criteria. In an embodiment, examples of rules  may include redirect rules, a copy rule, a pass rule, and\/or a drop rule.","A redirect rule diverts network traffic received at the side A tap interface  to the hosted virtual machine connected with the virtual machine interface . An embodiment of the side A connected hyperswitch interface  may use network address translation (NAT) to transfer a received packet directed to an arbitrary IP address to the virtual network interface associated with the hosted virtual machine. In addition to or as an alternative to network address translation-based diversion of network traffic, an embodiment of the side A connected hyperswitch interface  may use layer 2 based network switching to redirect received network traffic matching a rule criterion to the hosted virtual machine. In this embodiment, the side A connected hyperswitch interface  modifies the destination MAC addresses of the matching received network traffic to the MAC address of the virtual network interface of the hosted virtual machine. One implementation of this embodiment includes a layer 2 routing table  for maintaining MAC addresses.","A copy rule mirrors or copies matching network traffic matching at least one of the rule criteria . The original network traffic is then forwarded towards its intended destination via the side B tap interface . The copy of the matching network traffic is forwarded to the hosted virtual machine connected with the virtual machine interface . Embodiments of the side A connected hyperswitch interface  may use NAT and\/or layer 2 based switching to direct the copy of the network traffic to the hosted virtual machine.","In an embodiment, network traffic copied or diverted to the hosted virtual machine in response to a redirect or copy rule is communicated via connection  to the virtual machine interface  and on to the hosted virtual machine.","A pass rule forwards the original network traffic towards its intended destination via the side B tap interface , without sending the network traffic to the hosted virtual machine. A drop rule discards the network traffic matching the associated rule criteria.","In an embodiment, network traffic subject to rules including the copy rule and the pass rule is output from the side A hyperswitch interface  via side B tap interface . Side B tap interface  directs network traffic towards the side B network interface, optionally passing through one or more additional taps and hyperswitch interfaces. In this manner, network traffic from a first network and entering network device  and processed by one or more hyperswitch interfaces is capable of being output by the network device  via the side B network interface  to either the first network or a different, second network.","In an embodiment, network traffic received by the side A connected hyperswitch interface  and directed towards a network device or computer on the first network will be communicated via connection  to the side A tap interface . This outbound virtual machine network traffic may optionally be processed by one or more additional hyperswitch interfaces and then, if it is not redirected or dropped by one of the hyperswitch interfaces, exits the network device  via the side A network connection towards its intended destination.","In an embodiment, the side A connected hyperswitch interface includes a bypass connection . In the event that the associated virtual machine or any of its virtual machine applications fails or becomes unresponsive, bypass connection  may be activated to allow network traffic to continue to pass through the side A connected hyperswitch interface .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 2B","b":["230","230","240","255","109","230","235"]},"Side B connected hyperswitch interface  is adapted to receive network traffic coming to the network device from the side B network connection using the side B tap interface . Side B tap interface  may receive network traffic received by the network device from the side B network connection via any network traffic tap provided by a network device, including traffic tap A , intra-module traffic taps , , and , and traffic tap B shown in example network device architecture . Regardless of the traffic tap connected with side B tap interface , side B tap interface  only receives network traffic received by the network device from the side B network interface; as described above, network traffic received by the network device from the side A network connection is handled by a side A connected hyperswitch interface.","Upon receiving network traffic from the side B network connection via the side B tap interface , an embodiment of the side B connected hyperswitch interface  applies a set of rules  to the received network traffic. In an embodiment, the side B connected hyperswitch interface  compares each packet or other unit of network traffic to rule criteria  corresponding with the rules . Embodiments of the side B connected hyperswitch interface  may include one or more attributes of a packet or other unit of network traffic in each of the rule criteria , including the packet data contents or payload; layer 2 attributes such as a source or destination MAC address; layer 3 attributes such as a source or destination IP address; layer 4 attributes such as TCP or UDP attributes; layer 5 attributes such as session information; layer 6 and 7 attributes such as those associated with data structures, data presentation, and applications, including application layer protocols such as HTTP (including HTTP URLs) and application data formats such as XML.","In response to a packet or other unit of network traffic matching one or more of the criteria, an embodiment of the side B connected hyperswitch interface  applies one or more of the rules  corresponding with the matching criteria. In an embodiment, examples of rules  may include redirect rules, a copy rule, a pass rule, and\/or a drop rule. These rules are similar to those described above for the side A connected hyperswitch interface , except that network traffic is received via the side B tap interface  and output via the side A tap interface . Embodiments of the side B connected hyperswitch interface  may use NAT or layer 2 switching to direct network traffic or a copy of the network traffic to the hosted virtual machine.","In an embodiment, the side B connected hyperswitch interface  includes a bypass connection . In the event that the associated virtual machine or any of its virtual machine applications fails or becomes unresponsive, bypass connection  may be activated to allow network traffic to continue to pass through the side B connected hyperswitch interface .","As described above, each of the side A connected  and side B connected  hyperswitch interfaces specifies a unidirectional flow of network traffic from one of the network devices' network interface (i.e. the side A network connection or the side B network connection) to a hosted virtual machine. A network device thus includes at least one hyperswitch interface for each of its hosted virtual machines to direct some or all of the network traffic received by one of the network device's network connection to the hosted virtual machines. Additionally, these hyperswitch interfaces can direct network traffic from a hosted virtual machine back to the network connected with the hyperswitch interface.","However, in some situations, a virtual machine application may desire to send and receive network traffic from two or more network connections of the network device. For example, a virtual machine application may desire to receive network traffic coming from a LAN to the network device via a side A network connection and generate outgoing network traffic directed to a WAN connected with the network device via a side B network connection, and vice-versa. In these situations, two or more hyperswitch interfaces may be associated with a hosted virtual machine to provide a duplex or bidirectional specification of data transfer between the LAN, WAN, and the hosted virtual machine.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 2C","b":["260","260","265","265","275","280","265","282","267","282","275","250","280","282"],"i":["a","a ","a. "]},"Similarly, an embodiment of the side B connected hyperswitch interface  receives network traffic received by the network device from a side B network connection via side B tap interface . This network traffic may be passed via the side A tap interface  on to other hyperswitch interfaces (and hence other hosted virtual machines), the network traffic processing module of the network device, and\/or the side A network connection of the network device. Side B connected hyperswitch interface  also selectively copies or redirects network traffic to the associated hosted virtual machine via virtual machine interface , as specified according to rules and rule criteria . Network traffic from the hosted virtual machine and directed to the side B network connection passes through virtual machine interface to the side B tap interface . Although  illustrates the virtual machine interface  as two separate interfaces and for clarity, embodiments of the duplex hyperswitch interface  communicate with its associated hosted virtual machine via a single interface. In an embodiment, layer 2 MAC table  is used to direct network traffic to the side A tap interface  or the virtual machine interface . In this embodiment, the layer 2 MAC table  is shared between the side A connected hyperswitch interface  and the side B connected hyperswitch interface . Additionally, bypass connection  may be activated to allow network traffic to continue to pass through the duplex hyperswitch interface  in the event that the associated virtual machine or any of its virtual machine applications fails or becomes unresponsive.","Combinations of two or more side A connected, side B connected, or duplex hyperswitch interfaces may be used to flexibly direct network traffic to one or more hosted virtual machines, thereby enabling the network device to reliably provide additional functions or network applications.  illustrates an example application  of hyperswitch interfaces for specifying data transfer topologies between virtual machines within a network device according to an embodiment of the invention.","In example application , network traffic received by the network device from a LAN connected to the side A network connection of the network device is provided by side A tap interface  to a virtual machine data interface including hyperswitches , , , and . Similarly, network traffic received by the network device from a WAN connected to the side B network connection of the network device is provided by the side B tap interface  to the virtual machine data interface.","In example application , network traffic received by the network device from the LAN via the side A network connection is first processed by duplex hyperswitch , which directs HTTP network traffic, using NAT, to a non-transparent HTTP proxy application  implemented using a first hosted virtual machine. Non-HTTP network traffic and WAN-directed outbound traffic of the HTTP proxy application  is output from duplex hyperswitch  to duplex hyperswitch . Duplex hyperswitch  directs all non-SSH TCP traffic, using layer 2 switching, to a WAN optimization application  implemented using a second hosted virtual machine. SSH network traffic and WAN-directed outbound traffic of the WAN optimization application  is output from duplex hyperswitch  to side A connected hyperswitch interface . Side A connected hyperswitch interface  directs all network traffic addressed to subnet 10.11.x.x, except for that addressed to subnet 10.11.12.x, to an in-path VPN application  implemented by a third hosted virtual machine. WAN-directed outbound network traffic of the VPN application , as well as network traffic not matching the specified subnet, is passed to the side B tap interface , where it will be optionally processed by the network traffic processing module of the network device and output to the WAN via the side B network connection.","In example application , network traffic received by the network device from the WAN via the side B network connection is processed in a similar manner. First, network traffic received by the network device from the WAN is processed by side B connected hyperswitch interface , which directs network traffic on TCP port  to the VPN application  implemented by the third hosted virtual machine. Network traffic not matching this port or outbound from the VPN application  is directed to duplex hyperswitch . As with side A network traffic, duplex hyperswitch  directs all side B non-SSH TCP network traffic to the WAN optimization application  implemented using the second hosted virtual machine. SSH network traffic and LAN-directed outbound traffic of the WAN optimization application  is output from duplex hyperswitch  to duplex hyperswitch . Duplex hyperswitch  directs HTTP network traffic to the non-transparent HTTP proxy application  implemented using the first hosted virtual machine. Non-HTTP network traffic and LAN-directed outbound traffic of the HTTP proxy application  is output from duplex hyperswitch  to side A network traffic tap interface , where it will be optionally processed by the network traffic processing module of the network device and output to the LAN via the side A network connection.","In an embodiment, virtual machine applications executed in virtual machines hosted by the network device send and receive data via standard network protocols, such as Ethernet, TCP\/IP, and\/or UDP. However, additional functionality and enhanced performance may be enabled by providing virtual machine applications with additional information not available in standard network protocols. For example, a virtual machine application may benefit from access to network traffic metadata provided by a network traffic processing module of a network device or another virtual machine application executing on a different hosted virtual machine. Network traffic metadata can include any type of additional information describing network traffic, such as an associated application sending or receiving the network traffic or a data type represented by the network traffic.","In an embodiment, a network device architecture enables the communication of additional information such as network traffic metadata between the network device and one or more virtual machine applications using an extended non-standard network protocol. The use of extended non-standard network protocols allows virtual machine applications to receive network traffic metadata from other modules of the network device, such as a network traffic processing module, or from other hosted virtual machines and their respective virtual machine applications without using complex inter-application or inter-device communication techniques. Furthermore, extended non-standard network protocols provide functionality similar to application programming interfaces without the need to compile applications against specialized API libraries. Additionally, extended non-standard network protocols allow network traffic metadata to be communicated with associated network traffic without any risk of data corruption to the network traffic. Additionally, virtual machine applications and modules of the network device can exchange network traffic metadata using extended non-standard network protocols without any knowledge of the data transfer topology for communicating network traffic between hosted virtual machines and the network device; this allows for flexibility in configuring virtual machine applications within a network device.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4","b":["400","400","410","410","410","415","405"]},"Virtual network interface  is adapted to communicate network traffic with at least one virtual machine application, such as virtual machine application . In an embodiment, virtual machine network  presents network traffic to the virtual machine application  using a network protocol, such as a layer 2 protocol like Ethernet. The virtual network interface  includes a layer 2 network driver  enabling communication of network traffic with the virtual machine application  using a layer 2 network protocol.","Additionally, virtual network interface  includes a layer 2 extension module . In an embodiment, the layer 2 extension module  is adapted to extract network traffic metadata associated with received packets or other units of network traffic. For example, if network packet is received by the virtual network interface , the virtual network interface  and the layer 2 network driver  provide the packet data to the virtual machine application . Additionally, an embodiment of the layer 2 extension module  provides extension data including network traffic metadata to the virtual machine application.","In an embodiment, a virtual machine application  sends a query or command to the virtual network interface  to receive any extension data included in a received packet. If the received packet does not include any extension data, then this query or command will return an indicator of this state. Similarly, if the virtual machine application  does not request any extension data from the virtual network interface, then this extension data is ignored by the virtual network driver  and the layer 2 network driver . This allows virtual machine applications that are not adapted to use extension data to operate normally.","In a further embodiment, the virtual machine application  can output its own network traffic metadata to be included in an outgoing network packet. This additional network traffic metadata may be used by modules of the network device or other virtual machine applications executed on other hosted virtual machines. For example, upon receiving outbound network traffic data and outbound network traffic metadata from virtual machine application , the layer 2 network driver  converts the network traffic data into packet data . The destination network address and other network packet configuration parameters are also provided to the layer 2 network driver  to create an initial network packet. Similarly, the layer 2 extension module  converts the network traffic metadata into extension data . The initial network packet including packet data and extension data are then combined into outbound packet , which is sent by virtual network interface  towards its destination.","In an embodiment, extension data including network traffic metadata is stored in packets and as additional data outside of the standard network packet data and . For example, extension data  may be included as additional data fields or attributes of network packets  outside of the packet data payload. Because network traffic data and its network traffic metadata are carried in the same network packet, network traffic metadata is automatically associated with its corresponding network traffic data. Additionally, because the extension data  is separate from the packet data , network traffic metadata cannot corrupt the network traffic data.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5A","b":["500","505","505"]},"In decision block , method  determines if the hosted virtual machine response to the contact attempt. In an embodiment, decision block  waits for a duration of time (typically less than 50 ms) to give the virtual network interface of the hosted virtual machine adequate time to receive, process, and respond to the contact attempt. In an embodiment, the response of the hosted virtual machine can include a ping response message, such as ICMP echo response packet, addressed to a network address associated with the network device.","If the network device does receive a response to its contact request within the duration of time, then method  proceeds to step . Step  identifies the one or more hyperswitch interfaces associated with the hosted virtual machine. Step  then determines if any of these identified hyperswitch interfaces are operating in bypass mode, with their bypass connections activated to allow network traffic to pass through the hyperswitch interface without any rule processing. If any of the identified hyperswitch interfaces are operating in bypass mode, then step  deactivates their bypass connections, allowing these hyperswitches to process further network traffic according to their specified rules and rule criteria. In a further embodiment, step  determines if the network device is to bypass mode, allowing network traffic to pass through the network device without processing by any modules of the network device, such as a network traffic processing module, or any other hosted virtual machines and their virtual machine applications. If so, then an embodiment of step  may deactivate the network device's bypass mode, allowing the network device and its hosted virtual machines to process network traffic. Following step , method  returns to step  to determine if the virtual machine application function has been restored.","Conversely, if the network device does not receive a response to its contact request within the duration of time, then method  proceeds to step . Step  identifies the one or more hyperswitch interfaces associated with the hosted virtual machine. Step  then sets activates these hyperswitches' bypass connections, allowing network traffic to pass through the hyperswitch interface without any rule processing.","Optional step  may set the entire network device to operate in bypass mode. In some situations, a virtual machine application may perform a critical function, such as network security. In these situations, if the hosted virtual machine does not respond to a contact attempt, the all of the functions of network device should be shut down, rather than continue to operate without the critical function. Thus, optional step  may set the network device to bypass mode, allowing network traffic to pass through the network device without processing by any modules of the network device, such as a network traffic processing module, or any other hosted virtual machines and their virtual machine applications. In an embodiment, a user or network administrator configuration can specify whether step  should be performed upon the failure of a specific one of the hosted virtual machines, any combination of hosted virtual machines, or all of the hosted virtual machines. Additionally, a user or network administrator can specify the conditions under which the network device may exit its bypass mode (as described in step ), such as upon restoration of operation of a specific one of the hosted virtual machines, any combination of hosted virtual machines, or all of the hosted virtual machines.","Optional step  attempts to reset or restart the hosted virtual machine. Upon restarting or resetting the hosted virtual machine, method  returns to step  to determine if the virtual machine application function has been restored.","Method  may be repeated at multiple time intervals to detect hosted virtual machine failures and possible restorations of functions. In an embodiment, method  may be applied to one or more the hosted virtual machines of a network device in series or in parallel.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 5B","b":["550","555"]},"In an embodiment, step  waits for a predetermined duration of time from the last message received from the hosted virtual machine to receive the message. In an embodiment, a virtual machine application executed by the hosted virtual machine may be configured to periodically generate and send messages addressed to this module of the network device. In another embodiment, the virtual machine network interface and\/or the hosted virtual machine itself may be configured to automatically generate and send periodic messages to this module of the network device. The period at which these messages is sent is configured to be less than or equal to the predetermined duration of time used by the module, such that the module always receives a message within the predetermined duration of time when the hosted virtual machine is operating normally.","If the network device does receive a message from the hosted virtual machine within the duration of time, then method  proceeds to step . Step  identifies the one or more hyperswitch interfaces associated with the hosted virtual machine. Step  then determines if any of these identified hyperswitch interfaces are operating in bypass mode, with their bypass connections activated to allow network traffic to pass through the hyperswitch interface without any rule processing. If any of the identified hyperswitch interfaces are operating in bypass mode, then step  deactivates their bypass connections, allowing these hyperswitches to process further network traffic according to their specified rules and rule criteria. In a further embodiment, step  determines if the network device is to bypass mode, allowing network traffic to pass through the network device without processing by any modules of the network device, such as a network traffic processing module, or any other hosted virtual machines and their virtual machine applications. If so, then an embodiment of step  may deactivate the network device's bypass mode, allowing the network device and its hosted virtual machines to process network traffic. Following step , method  returns to step  to await the next message from the hosted virtual machine.","Conversely, if the network device does not receive a message from the hosted virtual machine within the duration of time, then method  proceeds to step . Step  identifies the one or more hyperswitch interfaces associated with the hosted virtual machine. Step  then sets activates these hyperswitches' bypass connections, allowing network traffic to pass through the hyperswitch interface without any rule processing.","Optional step  may set the entire network device to operate in bypass mode. In some situations, a virtual machine application may perform a critical function, such as network security. In these situations, if the hosted virtual machine does not respond to a contact attempt, the all of the functions of network device should be shut down, rather than continue to operate without the critical function. Thus, optional step  may set the network device to bypass mode, allowing network traffic to pass through the network device without processing by any modules of the network device, such as a network traffic processing module, or any other hosted virtual machines and their virtual machine applications. In an embodiment, a user or network administrator configuration can specify whether step  should be performed upon the failure of a specific one of the hosted virtual machines, any combination of hosted virtual machines, or all of the hosted virtual machines. Additionally, a user or network administrator can specify the conditions under which the network device may exit its bypass mode (as described in step ), such as upon restoration of operation of a specific one of the hosted virtual machines, any combination of hosted virtual machines, or all of the hosted virtual machines.","Optional step  attempts to reset or restart the hosted virtual machine. Upon restarting or resetting the hosted virtual machine, method  returns to step  to await the receipt of a message from the hosted virtual machine, indicating that the virtual machine application function has been restored.","Method  may be repeated at multiple time intervals to detect hosted virtual machine failures and possible restorations of functions. In an embodiment, method  may be applied to one or more the hosted virtual machines of a network device in series or in parallel.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 6","FIG. 6"],"b":["2000","2000"]},"Computer system  includes a central processing unit (CPU)  for running software applications and optionally an operating system. CPU  may be comprised of one or more processing cores. Memory  stores applications and data for use by the CPU . Examples of memory  include dynamic and static random access memory. Storage  provides non-volatile storage for applications and data and may include fixed or removable hard disk drives, flash memory devices, ROM memory, and CD-ROM, DVD-ROM, Blu-ray, HD-DVD, or other magnetic, optical, or solid state storage devices. In a further embodiment, CPU  may execute virtual machine software applications to create one or more virtual processors capable of executing additional software applications and optional additional operating systems. Virtual machine applications can include interpreters, recompilers, and just-in-time compilers to assist in executing software applications within virtual machines. Additionally, one or more CPUs  or associated processing cores can include virtualization specific hardware, such as additional register sets, memory address manipulation hardware, additional virtualization-specific processor instructions, and virtual machine state maintenance and migration hardware.","Optional user input devices  communicate user inputs from one or more users to the computer system , examples of which may include keyboards, mice, joysticks, digitizer tablets, touch pads, touch screens, still or video cameras, and\/or microphones. In an embodiment, user input devices may be omitted and computer system  may present a user interface to a user over a network, for example using a web page or network management protocol and network management software applications.","Computer system  includes one or more network interfaces  that allow computer system  to communicate with other computer systems via an electronic communications network, and may include wired or wireless communication over local area networks and wide area networks such as the Internet. Computer system  may support a variety of networking protocols at one or more levels of abstraction. For example, computer system may support networking protocols at one or more layers of the seven layer OSI network model. An embodiment of network interface  includes one or more wireless network interfaces adapted to communicate with wireless clients and with other wireless networking devices using radio waves, for example using the 802.11 family of protocols, such as 802.11a, 802.11b, 802.11g, and 802.11n.","An embodiment of the computer system  may also include one or more wired networking interfaces, such as one or more Ethernet connections to communicate with other networking devices via local or wide-area networks.","The components of computer system , including CPU , memory , data storage , user input devices , and network interface  are connected via one or more data buses . Additionally, some or all of the components of computer system , including CPU , memory , data storage , user input devices , and network interface  may be integrated together into one or more integrated circuits or integrated circuit packages. Furthermore, some or all of the components of computer system  may be implemented as application specific integrated circuits (ASICS) and\/or programmable logic.","Further embodiments can be envisioned to one of ordinary skill in the art after reading the attached documents. For example, embodiments of the invention can be used with any number of network connections and may be added to any type of network device, client or server computer, or other computing device in addition to the computer illustrated above. In other embodiments, combinations or sub-combinations of the above disclosed invention can be advantageously made. The block diagrams of the architecture and flow charts are grouped for ease of understanding. However it should be understood that combinations of blocks, additions of new blocks, re-arrangement of blocks, and the like are contemplated in alternative embodiments of the present invention.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense. It will, however, be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be described with reference to the drawings, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 2A-2C"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIGS. 5A-5B"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
