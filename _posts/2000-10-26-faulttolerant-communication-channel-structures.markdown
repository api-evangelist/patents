---
title: Fault-tolerant communication channel structures
abstract: Systems and techniques for implementing fault-tolerant communication channels and features in communication systems. Selected commercial-off-the-shelf devices can be integrated in such systems to reduce the cost.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07020076&OS=07020076&RS=07020076
owner: California Institute of Technology
number: 07020076
owner_city: Pasadena
owner_country: US
publication_date: 20001026
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 60\/161,697, filed Oct. 26, 1999.","The invention described herein was made in the performance of work under a NASA contract, and is subject to the provisions of Public Law 96-517 (35 U.S.C. 202) in which the Contractor has elected to retain title.","This application relates to signal transmission and data communication techniques and systems, and more particularly, to fault-tolerant communication channel structures for information systems such as digital electronic systems and techniques for implementing the same.","Information systems generally include multiple information devices that are connected through various communication channels so that information can be transmitted from one device to another. Each device may be a receiver which only receives information from one or more other linked devices, a transmitter which only sends information to one or more other linked devices, or a transceiver which can operate as both a receiver and a transmitter. In the communication terminology, such an information system is essentially a communication network of communication nodes that are interconnected by hard-wired or wireless communication channels or links, where each node is an information device.","For example, such an information system or a communication network may be a general-purpose digital computer system which may include one or more computer processors, certain memory units, and various other devices. The communication channels in such a system often include electronic buses each of which has a collection of conducting wires for transmitting information in form of electronic signals. Other forms of communication channels may also be used, such as a wireless radio-frequency link or an optical communication channel which transmits information through one or more optical carriers over an optic fiber link or a free-space optical link. Another example of an information system is a task-specific computer system such as a flight control system for spacecraft or aircraft, which may integrate two or more computer systems, one or more navigation systems, and other devices together to perform complex computations.","One desirable feature of these systems is the system reliability against one or more faults or failures of nodes and communication channels in the network. One way to achieve such reliability is to make the system \u201cfault-tolerant\u201d so that the system can continue to operate, in the presence of faults, to meet the system specification without failure of the entire system. Such a fault in a node or a communication channel may be caused by software, hardware, or a combination of both.","One conventional fault-tolerant system duplicates all operations in a particular system. For example, each node may be duplicated and the duplicated nodes are used to perform the identical operations. Hence, in one implementation, when one node fails, one or more other duplicated nodes can take over. A voting scheme may also be used to produce the output of a node based on outputs of the corresponding duplicates.","Nodes in a communication system may be linked in a number of ways. In one classification, different linking configurations may be divided as one-connected-graph systems or two or multiple-connected-graph systems. In a one-connected-graph system such as a string of nodes in a line configuration or certain tree configurations, a communication between two nodes can fail due to a single failure in a communication link or node. Hence, a single-point failure in the network can partition the system and isolate one node or a group of nodes from the rest of the system. In a two-connected-graph system, at least two separate communication links or nodes must fail to break the communication between two nodes to cause a partition. A ring with multiple nodes is one example of a two-connected-graph system.","The present disclosure includes systems and techniques for implementing fault-tolerant communication channels and features in communication systems. Selected commercial-off-the-shelf devices can be integrated in such systems to reduce the cost.","One embodiment of such a system includes a plurality of node devices, each operable to transmit or receive information, and a first set of composite communication links to connect the node devices to form a communication network. Each composite communication link has at least a first type communication channel and a second type, different communication channel. The communication channels of the first type are connected to the nodes to form a first network in a first topology. The communication channels of the second type are connected to the nodes to form a second network in a second, different topology. At least one of the first and the second networks is not partitioned when a failure occurs.","The fault-tolerant systems and techniques of the present disclosure include one or more fault-tolerant features based on redundancy in the communication channels linking different nodes in one-connected-graph communication systems. Hence, duplication of nodes is not required in the present systems although such duplication may be combined with the redundancy in the communication channels. In certain applications, duplication of nodes may not be practical or feasible because duplicated nodes may increase the physical size, system complexity, power consumption, and cost of a fault-tolerant communication system. One example is a fault-tolerant avionic system for aircraft or spacecraft which demands compact system packaging, low power consumption, and light weight. The present fault-toleration features based on redundancy in the communication channels may be implemented without duplicating nodes to meet these and other application requirements.","The redundancy in the communication channels for one-connected-graph systems may be implemented at two different, separate levels. First, composite fault-tolerant links are constructed to each include at least two communication channels with different link topological configurations and are used to interconnect the nodes. Such a composite fault-tolerant link at the system level will be referred to as \u201ca bus set\u201d when all communication channels in the link are formed of buses with conducting wires. Hence, at least two independent, different link networks coexist to connect the same set of nodes in such a system and assist each other to increase the fault tolerance of the system. The communication channels in each composite fault-tolerant link are selected so that when a particular node or link fails, at least one of the link networks is not partitioned and can bypass that failed node or link to tolerate that particular failure. This provides a first level of redundancy.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 1","b":["100","100","110","120","110","130","140","130","110","140","110","120","110","12","132","142","130","140","132","142"]},"In another level of redundancy in the communication channels, each composite fault-tolerant link in the system may be duplicated so that any two immediately-linked nodes are connected by at least a primary composite fault-tolerant link and a secondary composite fault-tolerant link. In operation, when the primary composite fault-tolerant link fails, the secondary composite fault-tolerant link is used by communicating through one of its two or more communication channels. Hence, this duplication of composite links provides at least four independent link networks with two different topological configurations to link the same set of nodes to improve the fault tolerance of the entire system.","In addition, the secondary composite fault-tolerant links may not be an exact copy of the primary composite fault-tolerant links. Instead, one set of communication channels for one particular topology in the primary composite fault-tolerant link connect the nodes differently from the duplicated set of communication channels for the same particular topology in the secondary composite fault-tolerant link. This is another layer of redundancy and can further improve the fault tolerance.","Assume, for example, one set of communication channels in the primary link may be in an one-connected tree topology and accordingly, the duplicated set of communication channels in the secondary composite link also form a tree topology. However, the set of channels and the duplicate set of channels connected the nodes differently so that the tree position of a particular node in the tree formed in the set of channels in the primary composite link is different from the tree position of that same node in the tree formed in the duplicated set of channels in the secondary composite link.","In particular, according to one embodiment, any node may not be a branch node in both trees in the primary and secondary composite links. Instead, a branch node in the tree formed in the primary composite link may be a leaf node in another tree formed in the secondary composite link. A leaf node in one tree, however, may be either a branch node or a leaf node in another tree. Hence, a failed node can only partition the tree in which it is connected as a branch node to which other nodes are connected. Because this same node is a leaf node in the other tree formed by another composite link, the failure of the node only causes the loss of a leaf node and will not affect other nodes and the tree structure.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","1","2","1","2","1","2"]},"Another feature of the present systems and techniques is that commercial-off-the-shelf (COTS) products may be used to implement some or all of the communication channels for the composite fault-tolerant links. Use of COTS products may significantly reduce the manufacture and maintenance cost in both hardware and software because such products are widely available and supported by the commercial market. A COTS product, such as the IEEE 1394 and I2C buses, may be integrated in the present fault-tolerant systems without changing its OEM characteristics so that the benefits of the commercial availability, updates and support can be fully utilized. In addition to achieve fault tolerance through the above-described multi-level redundancy in configuring the communication channels, the fault tolerance may be further enhanced by using the native fault containment in each COTS product and adding special hardware or software fault-tolerant features. These and other aspects will be described with reference to examples in using IEEE 1394 and I2C buses to implement the system  shown in .","1. General Approach to Integrating COTS Buses","One use of the fault protection techniques is fault containment in devices used in the space exploration. Traditionally, a spacecraft is divided into fault containment regions. Rigorous design effort is used to ensure no effects of a fault within a containment region will propagate to the other regions. Single-fault tolerance have been implemented in various spacecraft designs based on dual redundancy of fault containment regions.","Integrating COTS products into such a single-fault tolerance system can face certain difficulties. One of the reasons is that COTS are not developed with the same level of rigorous fault tolerance in mind. Hence, there are many fundamental fault tolerance shortcomings in COTS. For examples, the commercial VersaModule Eurocard (VME) bus usually does not have the parity bit to check the data and address. Another example is the IEEE 1394 bus (cable implementation) adopts a tree topology in which a single node or link failure will partition the bus. These fundamental weakness can hinder rigorous enforcement of fault containment. In addition, it is usually difficult to modify COTS products in general. This is in part because the suppliers of COTS products generally have no interest to change their design, add any overhead, or sacrifice their performance for a narrow market of high reliability applications. Also, any modification may render the COTS incompatible with commercial test equipment or software, and therefore can significantly reduce the economic benefits of COTS. Therefore, fault tolerance cannot easily be achieved by a single layer of fault containment regions that contains COTS.","The COTS-based bus architecture of the system  shown in  uses a multi-level fault protection methodology to achieve high reliability. The levels of the methodology are described as follows:","Level 1: Native Fault Containment\u2014most of COTS bus standards have some limited fault detection capabilities. These capabilities should be exploited as the first line of defense.","Level 2: Enhanced Fault Containment\u2014addition layer of hardware or software can be used to enhance the fault detection, isolation, and recovery capabilities of the native fault containment region. Examples are watchdog timer or additional layer of error checking code. The added fault tolerance mechanisms should not affect the basic COTS functions. This level is also a convenient level to implement provisions for fault injections.","Level 3: Fault Protection by Component Level Design-Diversity\u2014certain COTS suffer fundamental fault tolerance weakness that may not be simply removed by enhancing the native fault protection mechanisms. Such weakness is generally related to single points of failures. One example of applying design diversity is the protection of the tree topology of the IEEE 1394 bus. Once the IEEE 1394 bus is partitioned by a failed node, no watchdog timer or extra layer of protocol can reconnect the bus. Similar examples include buses using other point-to-point topologies. In order to compensate for such fundamental shortcomings, complementary types of buses may be used to implement this level of fault protection. In particular, the I2C bus, which has a multi-drop bus topology, is used in the architecture of the system  to complement the IEEE 1394 fault isolation and recovery.","Another example of design-diversity to compensate for COTS reliability is the use of flash memory for the Non-Volatile Memory in the system  in . The flash memory can provide adequate storage density but it has been observed that a single high energy particle can corrupt an entire block in the flash memory. To handle such failure mode with error correcting codes alone may not meet the reliability requirement. Therefore, in order to compensate for this weakness, a more robust but much lower density Giant Magnetoresistive RAM (GMRAM) or Ferroelectric RAM (FeRAM) may be used to store critical state data instead of the flash memory.","Level 4: Fault Protection by System Level Redundancy\u2014the Level 3 fault containment regions will be replicated for system level fault containment. The redundant fault containment regions can be either in ready or dormant states, depending on the recovery time and other system requirements. If they are in ready state, voting or comparison of outputs among the regions will provide one more level of fault detection. In either case, the redundant regions are necessary resources for the fault recovery process.","2. Overview of the Avionics Architecture in ","The avionics architecture  in  includes a number of compact PCI based \u201cnodes\u201d  connected by a composite fault-tolerant system bus. In this particular example, a \u201cnode\u201d  can either be a flight computer, a global non-volatile mass memory, a subsystem microcontroller, or a science instrument. The fault-tolerant system bus is comprised of two COTS buses, the IEEE 1394 () and I2C (). Both buses  and  are multi-master and therefore support symmetric scalable and distributed architectures. Due to the standard electrical interface and protocol of the COTS buses, nodes complying with the bus interfaces can be added to or removed from the system without impacting the architecture. The capability of each node can also be enhanced by adding circuit boards to the compact PCI bus. Some spacecraft functions that are handled by the avionics architecture  include: power management and distribution, autonomous operations for on-board planning, scheduling, autonomous navigation fault-protection, isolation and recovery, etc., telemetry collection, management and downlink spacecraft navigation and control, science data storage and on-board science processing, and interfacing to numerous device drivers which include both \u201cdumb\u201d and \u201cintelligent\u201d device drivers.","The current commercial IEEE 1394 bus  is capable to transfer data at 100, 200, or 400 Mbps. The IEEE 1394 bus has two implementations, cable and backplane. The cable implementation has adopted a tree topology and the backplane implementation has a multi-drop bus topology. The backplane 1394 bus is in general not widely supported in the commercial industry and thus will not be able to take the full advantage of COTS. The cable implementation has received wide commercial support and has better performance than the backplane implementation. Therefore, the cable implementation has been selected for the system  in .","The IEEE 1394 bus has two modes of data transactions, the isochronous transaction and the asynchronous transactions. The isochronous transaction guarantees on-time delivery but does not require acknowledgment, while the asynchronous transaction requires acknowledgment but does not guarantee on-time delivery. Isochronous messages are sent through \u201cchannels\u201d and a node can talk on or listen to more than one isochronous channel. Each isochronous channel can request and will be allocated a portion of the bus bandwidth at the bus initialization. Once every 125 microseconds (called isochronous cycle), each isochronous channel has to arbitrate but is guaranteed a time slot to send out its isochronous messages. At the beginning of each isochronous cycle, the root sends out a cycle start message and then the isochronous transaction will follow. After the isochronous transaction is the asynchronous transaction. Asynchronous message is not guaranteed to be sent within an isochronous cycle. Therefore, a node may have to wait a number of isochronous cycles before its asynchronous massage can be sent out. The asynchronous transaction employs a fair arbitration scheme, which allows each node to send an asynchronous message only once in each fair arbitration cycle. A fair arbitration cycle can span over many isochronous cycles, depending on how much of each cycle is used up by the isochronous transactions and how many nodes are arbitrating for asynchronous transactions. The end of a fair arbitration cycle is signified by an Arbitration Reset Gap.","During the bus startup or reset, the IEEE 1394 bus will go through an initialization process in which each node will get a node ID. In addition, the root (cycle master), bus manager, and isochronous resource manager will be elected. The root mainly is responsible for sending the cycle start message and acts as the central arbitrator for bus requests. The bus manager is responsible to acquire and maintain the bus topology. The isochronous resource manager is responsible for allocating bus bandwidth to isochronous nodes. The root, bus manager, and isochronous resource manger are not pre-determined, so that any nodes can be elected to take these roles as long as they have the capability.","The I2C bus is a simple bus with a data rate of 100 kbps. It has a more traditional multi-drop topology. The I2C bus has two open-collector signal lines: a data line (SDA) and a clock line (SCL) (not shown). Both signal lines are normally pulled high. When a bus transaction begins, the SDA line is pulled down before the SCL line. This constitutes a start condition. Then the address bits will follow, which is followed by a read\/write bit and then an acknowledgment bit. The target node can acknowledge the receipt of the data by holding down the acknowledgment bit. After that, eight bits of data can be sent followed by another acknowledgment bit. Data can be sent repeatedly until a stop condition occurs, in which the source node signals the end of transaction by a low-to-high transition on the SDA line while holding the SCL line high.","The I2C uses collision avoidance to resolve conflicts between master nodes contending for the bus. If two or more masters try to send data to the bus, the node producing a \u2018one\u2019 bit will lose arbitration to the node producing a \u2018zero\u2019 bit. The clock signals during arbitration are a synchronized combination of the clocks generated by the masters using the wired-AND connection to the SCL line.","There are two applications of the I2C bus in this architecture. In the system level, it is used to assist the IEEE 1394 bus to isolate and recover from faults. In the subsystem level, a separate C bus may be used to collect engineering data from sensors and send commands to power switches or other equipment.","The system  in  as shown has three basic types of nodes: flight computer, microcontroller node, and non-volatile memory node. The flight computer node includes a high-performance processor module (250 MIPS); 128 Mbytes of local (DRAM) memory; 128 Mbytes of non-volatile storage for boot-up software and other spacecraft state data; an I\/O module for interfacing with the IEEE 1394 and I2C buses. All modules can communicate with each other via a 33 MHz PCI bus. The microcontroller node is similar to the flight computer node except the microcontroller has lower performance and less memory to conserve power. It is used to interface sensors and instruments with the IEEE 1394 and I2C bus. The non-volatile memory node has four slices, each slice contains 256 Mbytes of flash memory and 1 Mbytes of GMRAM. The flash memory has much higher density and is suitable for block data storage. However, it has limited number of write cycles and is susceptible to radiation effects. The GMRAM has unlimited write cycles and is radiation tolerant, but its density is much lower than flash. The flash memory is used for software codes and science data storage while the GMRAM is used to store spacecraft state data. The non-volatile memory slices are controlled by a microcontroller with an IEEE 1394 and I2C bus interfaces.","3. Design of Composite Fault-Tolerant Link with COTS Buses","The composite fault-tolerant link in the system  of  includes two different buses, the IEEE 1394 bus () and the I2C bus (). This choice for the system  is a result from evaluating a variety of commercial buses, including IEEE 1394, Fiber Channel, Universal Serial Bus (USB), Fast Ethernet, Serial Fiber Optic Data Bus (SFODB), ATM, Myrinet, FDD1, AS1773, and SPI. The IEEE 1394 bus is selected because of its high data rate (100, 200 or 400 Mbps), multi-master capability, moderate power consumption, strong commercial support, relatively deterministic latency, and the availability of commercial ASIC cores (referred to as Intellectual Properties or IPs in industry). The advantages of IPs are that they are reusable and can be integrated in ASICs and fabricated by rad-hard foundry to meet radiation requirements. The I2C bus is selected because of its low power consumption, multi-master capability, availability of ASIC IPs, adequate data rate (100 kbps) for low speed data, simple protocol, and strong commercial support. APL has even developed a rad-hard C based sensor interface chip.","Although the IEEE 1394 and I2C buses are very attractive in many aspects, it is recognized that they may not be ideal buses in the classical fault tolerance sense. The 1394 bus has limited fault detection features, and has no explicit fault recovery mechanisms such as built-in redundancy or cross strapping. In particular, the 1394 bus has a tree topology that can easily be partitioned by a single node or link failure. The I2C bus has almost no built-in fault detection except an acknowledgement bit after every byte transfer. However, they are preferred for this particular application in the system  in  over the other fault-tolerant buses mainly because of their low cost and commercial support.","The fault-tolerant features in the system  of  are designed in part to mitigate some common or critical failure modes for data buses in spacecraft avionics systems. However, such features may also be in other failure-tolerant systems and may require some modifications. NASA\/JPL performs failure mode effect and criticality analysis for every spacecraft design. Based on those experiences, the following failure modes for data buses in avionics systems have been identified as either frequently occur or critical to the survival of the spacecraft:\n\n",{"@attributes":{"id":"p-0052","num":"0055"},"figref":"FIG. 3"},"When a fault is detected in the primary bus set, simple recovery procedures such as retry and bus reset may first be attempted. If the simple procedures cannot correct the problem, then the backup set of buses may be activated and the system operations will be transferred to the backup bus. At this point, the system can have more time to diagnose the failed bus set and remove the faulty node or connections. The repaired bus set can then become the backup. The implementation of this bus architecture also allows the IEEE 1394 and I2C buses to be switched to their backups independently to enhance recovery flexibility. Details of each layer in  are explained as follows.","Layer 1: Native Fault Containment\u2014The basic fault detection mechanisms of the IEEE 1394 and I2C buses such as CRC and acknowledgment are used to detect invalid messages or non-responsive failure modes.","Layer 2: Enhanced Fault Containment\u2014A layer of hardware and software is used to detect more difficult failure modes such as babbling and conflict of node addresses in the IEEE 1394 and I2C buses. This layer may also include some low-level fault recovery mechanisms in each bus.","Layer 3: Fault Protection by Design Diversity\u2014Since the IEEE 1394 bus adopts a tree topology, it can be difficult to isolate or recover from a failed node or link because the bus network is partitioned and communication between the sub-trees is cut off. The I2C bus is used to assist the fault isolation and recovery by maintaining the communication of all nodes. Similarly, if the shared medium of the I2C bus fails, the IEEE 1394 bus can be used to assist the fault isolation and recovery of the I2C bus.","Layer 4: Fault Protection by System Level Redundancy \u2014The entire set of IEEE 1394 and I2C buses are duplicated to provide redundancy for fault recovery. For long-life missions, only one set of the buses will be activated in normal operations. If one of the buses in the primary bus set fails, the backup set of buses will be activated and the system operations will be transferred to the backup buses. After that, the failed bus set will be diagnosed and repaired. It is worth to notice that even though either one of the buses in the primary set can be switched to its backup bus independently, it is preferred to have the entire bus set switched. This is because the system operations in the backup bus set will not be affected while the healthy bus (e.g., I2C bus) in the failed bus set is diagnosing the faulty bus (e.g., IEEE 1394 bus).","3.1 Native fault containment regions","Certain basic fault detection mechanisms of the IEEE 1394 and I2C buses are highlighted in this section.","The 1394 bus standard has a number of built-in fault detection mechanisms, including:","A. Data and packet header CRCs for both isochronous and asynchronous transactions;\n\n","A useful feature in the IEEE 1394a standard (Draft 2.0, March 1998) is the capability to enable or disable individual ports (a port is the physical interface to a link). With this feature, every node in the bus can disable a link connected to a failed node and enable a backup link to bypass the failed node. This feature is the basis of the IEEE 1394 bus recovery in this bus architecture.","Another feature in the IEEE 1394 standard is the keep-alive of the physical layer with cable power. This feature allows the link layer hardware and the host processor to be powered off without affecting the capability of the physical layer to pass on messages. This is useful for insolating a failed processor during fault recovery.","The I2C bus has only one fault detection mechanism which is the acknowledgment bit that follows every data byte. When a node (master) sends data to another node (slave), and if the slave node is able to receive the data, it has to acknowledge the transaction by pulling the data line (SDA) to low. If the slave node fails to acknowledge, the master node will issue a stop condition to abort the transaction. Similar situation can happen when the master node requests data from a slave node. If the master fails to acknowledge after receiving data from the slave, the slave will stop sending data. Subsequently, the master node can issue a stop condition to terminate the transaction if it is still functional.","3.2. Enhanced fault containment regions","Several mechanisms are added to enhance the fault detection and recovery capability of the IEEE 1394 bus.","A. Heartbeat and Polling","Heartbeat is effective for detecting root failure while polling can be used to detect individual node failures. Since the cycle master (root) of the IEEE 1394 bus always sends out an isochronous cycle start message every 125 microseconds on the average, the cycle start message can be used as the heartbeat. All other nodes on the bus monitor the interval between cycle start messages. If the root node fails, other nodes on the bus will detect missing cycle start and initiate fault isolation process (to be discussed in later sections). However, cycle start can only detect hardware level faults since it is automatically generated by the link layer. Therefore, a software heartbeat should be used to detect faults in the transaction or application layers.","Other failure modes can also be detected by this method. For example, multiple roots will generate more than one hardware heartbeat (i.e., cycle start) within an isochronous cycle. By comparing the actual heartbeat interval with a minimum expected heartbeat interval, the multiple heartbeats can be detected. More discussions about the multiple root detection can be found in the next two sections.","Furthermore, software heartbeat is effective in detecting babbling nodes. If the fault causing the node to babble is in software, it is possible that the hardware heartbeat may appear to be valid since the cycle start is automatically generated by the link layer hardware. On the other hand, the software fault is likely to affect the software heartbeat. Therefore, the software heartbeat is preferred over the hardware heartbeat in detecting babbling nodes.","In addition to heartbeat, the root node can also send polling messages periodically to individual nodes by asynchronous transaction. Since asynchronous transaction requires acknowledgment from the target node, a node failure can be detected by acknowledgment timeout.","B. Isochronous Acknowledgment:","Sometimes, acknowledgment is desirable for isochronous transactions, especially when the isochronous transaction requires on-time and reliable delivery. Therefore, a confirmation message type is added to the application layer, so that the target node can report any isochronous transaction errors to the source node. The confirmation message itself can be either an isochronous or asynchronous transaction, depending on the time criticality. Furthermore, the data field of the original isochronous message contains the source node ID, so the target node knows where to report the isochronous transaction errors. If the confirmation message contains an error code, the source node can retransmit the message in isochronous or asynchronous mode as appropriate.","C. Link Layer Fail-Silence","The root node of the IEEE 1394 bus periodically sends a \u201cfail silence\u201d message to all nodes; every node in the bus has a fail silence timer in the link layer to monitor this message. Upon receiving the message, each node will reset its fail silence timer. If one of the nodes babbles because of a link layer or application layer failure, the fail silence message will be blocked or corrupted. This will cause the fail silence timer in each node to time out. Subsequently, the fail silence timer will disable the hardware of its own link layer and thus inhibit the node from transmitting or receiving messages (note: the ability of the physical layer to pass on message is unaffected). Eventually, after a waiting period, the link layers of all nodes including the babbling node will be disabled and the bus will become quiet again. At this time, another timer in the root will \u201cunmute\u201d the root itself and send a Link-on packet, which is a physical layer packet, to individual nodes. Upon receiving the Link-on packet, the physical layer of a node will send a signal to wake up its link layer. If a node causes the bus to fail again while its link layer is re-enabled, it will be identified as the failed node and will not be enabled again. If the root itself is the babbling node, other nodes will detect the unmute timeout and issue bus reset.","D. Watchdog Timers","The IEEE 1394 standard has specified many watchdog timers. Additional watchdog timers that are related to fault detection of the IEEE 1394 bus have been identified as follows.","E. CPU Watchdog Timer","A hardware timer to monitor the health of the host CPU (i.e., the microprocessor or microcontroller). This watchdog timer is an incremental counter and need to be reset by the CPU periodically. If the CPU fails to reset this watchdog, an overflow will occur which then will trigger a local reset.","F. Heartbeat Lost Timer","Triggered by lost of heartbeat (i.e., the Isochronous Cycle Start packet). This is one of the native fault detection mechanisms in the IEEE 1394 bus standard.","G. Poll Response Timer (in Root Node)","A software timer monitor the response time of polling message on the 1394 bus.","The enhanced fault-tolerance mechanisms for I2C bus include the protocol enhancement, the byte timeout, and the fail silence.","The protocol enhancement is a layer of protocol added to the I2C bus. This protocol includes a byte count after the address and two CRC bytes after the data. The system design for the system  in  also utilizes especial hardware messages commands to control critical functions. For these messages, command is sent followed by its complement to provide one more layer of protection.","The I2C bus permits a receiving node (slave or master) to hold down the clock signal (SCL) as a means to slow down the sending node (master or slave). This is to allow a fast node to send data to a slow node. However, it is possible that a failed receiving node causes a stuck-at-low fault on the SCL signal, so that the sending node may have to wait indefinitely. To recover from this failure mode, every node has a byte timeout timer to monitor the duration of the SCL signal. When the byte timeout timer in a node (including the faulty node) expires, it will disable the circuitry of the SDA and SCL transmitters. After all nodes have disabled their SDA and SDL transmitters, a recovery procedure similar to that in the fail-silence mechanism will be used to disable the failed node.","In the Fail Silence mechanism, one of the nodes in the I2C is designated as the controlling master. The controlling master periodically sends a \u201cfail silence\u201d message to all I2C nodes. All nodes will monitor this message with an I2C bus fail silence timer. Upon receiving the message, each node will reset its I2C bus fail silence timer. If one of the nodes is babbling so that the fail silence message is blocked or delayed, the I2C bus fail-silence timer of each node will time out. Subsequently, the bus transmitters of each node will be disabled to inhibit any transmission of messages. However, the bus receiver of each node is still enabled so that it can receive commands for fault recovery later on. After a waiting period, the bus transmitters of all nodes including the babbling node will be disabled and the bus will be quiet again. At this time, another timer in the controlling master node will \u201cunmute\u201d the node itself and send a message to re-enable the other nodes individually. If a node causes the bus to fail again while it is enabled, it will be identified as the failed node and will not be enabled again. If the root itself is the failed node, other backup nodes will detect the unmute timeout and promote themselves as the controlling master according to a pre-determined priority.","3.3. Fault Protection by Design Diversity","The combination of the IEEE 1394 and I2C buses can be used to isolate and recover from many faults that might not be possible if each bus is working alone. The failure modes that can be handled by the cooperation of the buses are described below.","A. Non-Responsive Failures:","In the IEEE 1394 bus, when a node or one of its links fails in the non-responsive mode, it will not be able to respond to requests and messages will not be able to pass through the node. The existence of the failure can easily be detected by the bus timeout, message re-transmission, heartbeat, or polling. In general, the failed node is relatively easy to isolate because all the nodes in the sub-tree under it will become non-responsive to the requests from the root node. Therefore, the prime suspect is usually the non-responsive node nearest to the root. However, to recover from the fault is not trivial because the tree topology of the bus has been partitioned in to two or three segments by the failed node. The nodes in each segment will not be able to communicate with the nodes in the other segments. Consequently, the root node will not be able to command the nodes in the other segments to change bus topology. It might be possible to devise distributed algorithms so that each node can try different link configurations to re-establish the connectivity. However, these algorithms usually are rather complicate and their effectiveness is difficult to prove.","Under these circumstances, the I2C bus can facilitate the communication among all the nodes. The root node will first interrogate the health of the nearest non-responsive node (i.e., the prime suspect) through the I2C bus. If the node does not respond or if its response over the I2C bus indicates any internal or physical connection failures, then the root node can send I2C messages to the other nodes and command them to reconfigure their links to bypass the failed node. If the prime suspect node is fault-free, then the root can repeat the interrogation (and recovery procedure) on the other nodes in separate segments.","Similarly, if a node in the I2C bus becomes non-responsive, the source node can interrogate the health of the target node through the IEEE 1394 bus, command the target node to reset its I2C bus interface, and request the target node to retransmit the message.","B. IEEE 1394 Bus Physical Layer Babbling","The fail-silence technique is effective to handle babbling failures in the I2C bus and in the link or application layers in the IEEE 1394 bus. However, the physical layer of the IEEE 1394 bus is rather complicate and contains state machines, it is possible that a transient fault would cause it to babble. A particular dangerous type of babbling is the continuous reset because any node in the IEEE 1394 bus is able to issue bus reset. Such failures cannot be handled by fail-silence. It is because if the physical layer is silenced, it will not be able to pass on messages and thus cause bus partitioning. In this case, each node can check its own physical layer (e.g., read the physical layer registers). If the physical layer is faulty, the processor of the node can issue a physical layer reset to correct the problem. However, if the physical layer fault is permanent, then the node has to inform the root node via the I2C bus. Subsequently, the root node can command other nodes via the I2C bus to reconfigure the bus topology to bypass the failed node.","C. Conflict of Node Addresses","The address of any node in the IEEE 1394 or I2C buses can be corrupted by permanent fault or single event upset. If the faulty address coincides with an existing node address, any read transaction to that address will be corrupted by bus conflict from the two nodes, and any write transaction will go to both nodes and may have unpredictable consequences. Hence, it is difficult to disable the fault node by the bus itself alone. However, with the redundant IEEE 1394\/I2C bus set, this kind of failures can be handled through using one bus to disable a faulty node on the other bus, so that the erroneously duplicated node address can be eliminated.","3.4. Fault Protection by System Level Redundancy","The COTS bus set is duplicated to provide system level of fault protection. In addition, the duplicated bus set is not identically configured as its counter part.  illustrates one example that the IEEE 1394 bus in one bus set and the IEEE 1394 in its duplicate bus set connect the same node at different positions in their respective trees in a \u201cstack-tree\u201d topology.","Under catastrophic failure conditions such as bus power failure, both COTS bus sets may fail such that all communications among the nodes can be lost. To re-establish the communication, each node can execute a distributed recovery procedure that consists of a sequence of link enable\/disable activities. The enabled links of all the nodes in each step of the procedure forms a bus configuration. If the critical nodes of the system can communicate with each other in one of the bus configurations, further fault recovery procedures can follow. Unfortunately, this approach usually requires reasonably tight synchronization among all the nodes, which is very difficult to achieve when all bus communications are lost. Furthermore, since the cause of the catastrophic failure may not be within the avionics system, the distributed recovery procedure may not succeed. Therefore, this approach may be used as the last recourse.","4. Detailed Examples Based on Stack-Tree Topology","The tree topology for the IEEE bus may be topologically simple so that it can be easily maintained as nodes are added to or deleted from the system for easy testing and integration.  shows one embodiment of a stack-tree topology , where a node is either a flight computer or a device. Three physical layer ports may be implemented in each node. For each branch node, two or more of these ports are connected to other nodes. A leaf node has only one port that is connected to another node.  shows more detailed node connections of the system  in  in such a stack-tree topology.","The stack-tree topology shown in  is not fault tolerant because any single node or link failure can result in tree partitioning such that fault-tolerant routing will not be possible. In addition, it can be difficult to duplicate and cross-strap nodes for bus network fault tolerance purpose due to the constraints on power and mass\/volume in certain applications such as space flight missions. However, the IEEE 1394a standard provides a \u201cport-disable\u201d feature to allow a 1394-compliant, reconfigurable bus architecture which can be used for fault tolerance.","4.1. Stack-Tree based Bus Architecture","Definition 1 A stack tree is a tree where each branch node is connected to at most three other nodes among which at most two are branch nodes.",{"@attributes":{"id":"p-0090","num":"0097"},"figref":["FIGS. 6(","FIGS. 6(","FIG. 6("],"i":["a","d","a","c","d","b"],"b":["6","6","6"]},"Definition 2 A complete stack tree is a stack tree where each branch node is connected to at least one leaf node.",{"@attributes":{"id":"p-0091","num":"0098"},"figref":["FIG. 6(","FIGS. 6(","FIG. 6("],"i":["c","c","d","c"],"b":"6","sub":"S"},"Definition 3 The mirror-image of a complete stack tree is a tree obtained by (I) removing the edges connecting the branch nodes with the ID numbers i and j which satisfy the relation |i\u2212j|=1; (2) adding edges to connect the leaf nodes with the ID numbers k and 1 which satisfy the relation |k\u22121|=1.","Clearly, the CST shown in ) is a mirror image of that nodes in ). It is worth to note that, if we connect 2n a CST-based network and its mirror image, then the two networks will not have any branch nodes in common.","It is desirable to make the system shown in  scalable and gracefully degradable. Accordingly, a fault-tolerant bus network architecture may be designed to allow all the surviving nodes in the bus network to remain connected in the presence of node failures, without requiring spare nodes. The fact that a CST and its mirror image do not have branch nodes in common implies that losing a branch node in one tree will not partition its mirror image.",{"@attributes":{"id":"p-0095","num":"0102"},"figref":["FIG. 7A","FIG. 7B","FIG. 7C"]},"We use terminal clustered branch-leaf failures to refer to the second failure pattern. Thus, for the cases which involve only the above failure patterns, all the surviving nodes will remain connected (no network partitioning). On the other hand, if a branch node and a leaf node in a CSTD based network fail in a form other than terminal clustered branch-leaf failure (), both the primary and mirror image will be partitioned.","Next, another tree structure with backup links is examined. The IEEE 1394 port-disable feature enables the physical connections between the physical layer of a node and the serial bus cable to become \u201cinvisible\u201d from the view point of the reminder of the bus network. The implication is the following:\n\n",{"@attributes":{"id":"p-0098","num":"0107"},"figref":["FIG. 8A","FIG. 8B"],"b":"1"},{"@attributes":{"id":"p-0099","num":"0108"},"figref":"FIG. 8C"},"Definition 4 A failed branch node i and a failed leaf node j in a CSTa based network of size n will form a cut-type failure if |(j mod n)\u2212(i mod n)|<1.",{"@attributes":{"id":"p-0100","num":"0109"},"figref":["FIGS. 9A","FIG. 9A","FIG. 9B","FIGS. 9C and 9D"],"b":["9","9","9","2","9","5","11"]},{"@attributes":{"id":"p-0101","num":"0110"},"figref":["FIGS. 9E and 9F","FIG. 9F","FIG. 9E"],"b":"6","sub":["R ","R "]},{"@attributes":{"id":"p-0102","num":"0111"},"figref":["FIGS. 10A","FIG. 10A","FIG. 10B","FIG. 10C"],"b":["10","10"],"sub":["R ","S ","s "]},{"@attributes":{"id":"p-0103","num":"0112"},"figref":["FIG. 11","FIG. 9"]},"4.2. Bus Network Reliability Evaluation","The bus network reliability can be defined as the probability that, through a mission duration t, the network remains in a state in which all the surviving nodes are connected. The causes of a node failure may include physical layer failure, link layer failure and CPU failure. Moreover, while redundant links (serial bus cables) are permitted in the present architecture, it is assumed herein that duplicated nodes and cross-strap nodes for bus network fault tolerance purpose are not allowed due to the power and mass\/volume constraints. As a result, the likelihood of node failure is significantly greater than that of link failure.","Hence, under the above conditions, the following reliability assessment will focus on only node failure. It is also assumed that, when a node fails, there is a possibility that the faulty node may go undetected, or the corresponding network reconfiguration process (including port disabling\/enabling, etc.) may unexpectedly crash the system. The complement of the probability of such an event is called \u201ccoverage.\u201d","Reliability models can be developed for the three complete stack tree structures discussed above. See, Tai et al., \u201cCOTS-Based Fault Tolerance in Deep Space: Qualitative and Quantitative Analyses of A Bus Network Architecture\u201d in Proceedings of the 4th IEEE International Symposium on High Assurance Systems Engineering, Washington D.C., November 1999. The Reliability measures for the bus networks based on CSTs, CSTD and CSTR are evaluated with respect to the node failure rate \u03bb, size of bus network n and mission duration t (in hours).",{"@attributes":{"id":"p-0107","num":"0116"},"figref":"FIG. 12","sup":["\u22128 ","\u22127"]},{"@attributes":{"id":"p-0108","num":"0117"},"figref":"FIG. 13","sup":"\u22127"},{"@attributes":{"id":"p-0109","num":"0118"},"figref":"FIG. 14","sup":"\u22127 "},"The above disclosure only includes a few embodiments. However, it is understood that variations and enhancements may be made. For example, the examples are based on wired buses but various features may be implemented with other types of communication channels for data transmission, such as wireless links in either RF or optical frequencies or other wired links such as optical fiber links. All these and others are intended to be encompassed by the following claims."],"GOVINT":[{},{}],"heading":["ORIGIN OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 6A through 6D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 7A through 7D"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 8A through 8C"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 9A through 9F"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIGS. 10A through 10C"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 12","b":["13","14"]}]},"DETDESC":[{},{}]}
