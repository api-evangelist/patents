---
title: Hierarchical data server
abstract: A hierarchical data server provides a query and storage system for hierarchical data with three interfaces that are, data interface for accepting hierarchical data, query interface for accepting a query, and result interface for returning output of the query. The system models hierarchical data with one data object called data vine and one data structure type called data vine list. A data vine includes a name, a property list, and a child list. A data vine list is an ordered list of data vines. A data vine is recursively defined with its child list as a data vine list. The system introduces five basic operators, cast, restrict, unique, sort, and traverse. Each operator acts on one data vine list and returns another data vine list. A property list in a data vine is unordered with set operations implemented, which include default operation, update operation, elimination operation, replacement operation, and intersection operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218393&OS=09218393&RS=09218393
owner: 
number: 09218393
owner_city: Elmhurst
owner_country: US
publication_date: 20130415
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to a query system for searching database based upon SGML. The invention is a query system designed for working on hierarchical structures. It provides queries with operators and operations to retrieve and modify any element in a hierarchical structure. To construct a result, the query language in the invention binds on one hierarchical data source or multiple hierarchical data sources for adopting some child structures, getting prototype of a desired part, and cascading with property data inside.","2. Description of the Related Art","Many hierarchical data formats became the standards of technologies including SGML (Standard Generalized Markup Language), HTML (Hyper Text Markup Language), and XML (Extensible Markup Language). Among them, SGML is the most basic one. The rest are its derivatives. The HTML 4 is considered to be an application of SGML, and XML is considered to be a subset of SGML. Many query languages have been disclosed for the purpose of extracting and modifying SGML data. These published data query systems or prior arts adopt SQL-like languages. Some of them use FLWOR expressions (FOR, LET, WHERE, ORDERED BY, RETURN), and others use constructs like SELECT-WHERE similar to SQL. However, SQL is dealing with relational databases that are not hierarchically structured, and actually, are of one single level structured. This innate scope makes SQL-Like query languages less constructible than a query language that is directly defined on hierarchal structures of multiple levels. The invention is directly defined on and designed on hierarchical structures. It is a complement to the approach in all of the related arts. The major techniques in the query language of the invention are the use of CRUST operators that are cast operator, restrict operator, unique operator, sort operator, and traverse operator.","U.S. Patent Application Publication No. 2007\/0219959 A1 by Kanemasa and published on Sep. 20, 2007, describes a query language for XML (named \u201cXML-QL\u201d), which has a SELECT-WHERE construct, similar to SQL, and borrows features of various query languages for semi-constructed data. Kanemasa does not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data according to the claimed invention.","U.S. Pat. No. 6,665,677 B1 issued to Wotring on Dec. 13, 2003, allows data to be transformed from a relational database to a hierarchical database. Wotring does not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data according to the claimed invention.","J. Jaakkola and P. Kilpel\u00e4inen, \u201cUsing sgrep for querying structured text files\u201d, 1996, Espoo, Finland, Oct. 4-5, 1996, implement an algebra of unrestricted text fragments called regions. The algebra allows the retrieval of document components, represented as regions, based on conditions on their relative containment and ordering. J. Jaakkola and P. Kilpel\u00e4inen do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","J. Le Maitre, E. Murisasco, M. Rolbert, \u201cSgmIQL, a language for querying SGML documents\u201d, 4th , Lisbon, Portugal, Jul. 2-4, 1996, present a complete SGML query language based on SQL-like expressions. The language uses pattern-matching primitives, which are integrated into common operators, such as SELECT\/FROM\/WHERE. J. Le Maitre, E. Murisasco, and M. Rolbert do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","S. Abiteboul, D. Quass, J. McHugh, J. Widom, J. L. Wiener, \u201cThe Lorel query language for semistructured data\u201d, International Journal on Digital Libraries, Volume 1, Number 1, 68-88 (1997) present a query language (called the Lorel language\u201d) for querying semi-structured data. Lorel language is written in the SQL\/OQL style for querying data. For wide applicability, the simple object model underlying Lorel can be viewed as an extension of the ODMG data model and the Lorel language as an extension of OQL. Abiteboul et al. do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","K. Lee, Y. K. Lee, P. B. Berra, \u201cManagement of Multi-structured HypermediaDocuments: A Data Model, Query Language, and Indexing Scheme\u201d, , Volume 4, Number 2, 199-223 (1997), propose an object-oriented model for multi-structured hypermedia documents by using unique element identifiers and an indexing schema. K. Lee, Y. K. Lee, P. B. Berra, do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","A. Duetsch, M. Fernandez, D. Florescu, A. Levy, D. Suciu, \u201cXML-QL: A Query Language for XML\u201d, 19 Aug. 1998, introduce the XML, which is SQL-like and adopts FLWOR expressions (FOR, LET, WHERE, ORDERED BY, RETURN). A. Duetsch, M. Fernandez, D. Florescu, A. Levy, D. Suciu, do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","N. Fuhr and K. Grobjohann, \u201cXIRQL: a query language for information retrieval in XML documents\u201d, SIGIR '01 Proceedings of the 24th annual international ACM SIGIR conference on Research and development in information retrieval, add the features of weighting and ranking to XML and provide related query optimization. N. Fuhr and K. Grobjohann do not suggest use of the CRUST operators on hierarchical structures or set operations on property lists to retrieve and construct SGML data.","According to an aspect of the present disclosure, a dedicated storage system is provided with a query language. The storage system stores hierarchical databases particularly for data based upon SGML. The query language is for searching and modifying persistent data in the storage. The query language of the invention suggests a logic view on hierarchical data with a data object, called data vine; together with a data structure type, called data vine list that is an ordered list of data vines. Data vine and data vine list are recursively defined in an alternating way that the child list in a data vine is a data vine list and each member of a data vine list is a data vine. This mechanism helps to reach any element on hierarchical data up to certain high order and volume that a system can accommodate. The invention facilitates drilling on hierarchical data sources to extract and\/or construct hierarchical data by working on data vine lists with the CRUST operators (Cast operator, Restrict operator, Unique operator, Sort operator, Travers operator).","A data vine is stored in the server in Prolog codes specifically defined in the format of a predicate name with four parameters. The first parameter is a reference to the parent element, the second parameter is a tag name or text in SGML, the third parameter is a list of properties, and the fourth parameter is a reference to the child list.","A query can be used to build knowledge leads for quick accesses to hierarchical data. A knowledge lead is a hierarchical structure building on the original hierarchical data. Queries can be based upon the original data source as well as the build-up knowledge leads. Well-designed knowledge leads by users could form a part of intelligence on the original hierarchical data source and make an application more useful.","The invention supports the current standards and technologies based upon SGML. By its hierarchical nature it could be adjusted with very few modifications and fully complied with new releases of the standards in the future. The invention provides an easy access and persistent storage for hierarchical data. The user interface of the invention is a simple query language. By submitting a query the stored data can be retrieved, updated, and modified in anyway. With a password or a few lines of verification in queries the data security can be improved. Although the query language does not have the same power as a subscripting language, however, it could enhance the management and utilization of subscripting languages by applying modularization on the subscripting source codes and processing the modularized as hierarchical data. All these features are available because the invention adopts a different way to the process: holding the whole data in hierarchical structures and casting out what are needed. It is a complement to the current approach of document-subscripting model.","The invention is a stand-alone software program, which stores, retrieves, modifies, and updates hierarchical data in SGML format. The usage of the invention covers all SGML derivatives.","A hierarchical data server includes five parts:","part 1, a data server, which resides in a computer, holds hierarchical data, and facilitates query services;","part 2, a data input interface, which provides a channel to an authorized user to store data in the server;","part 3, a query interface, which gives users an access to submit queries;","part 4, a result interface, which returns results to query submitter; and","part 5, a self-contained query language for writing a query.","The invention works in a query model. Its administrator stores a computer readable data package in the server that resides in a computer. The data package gets into the server through the data input interface. The data package could be an SGML document, or a part of such document in well-formed format, or multiple SGML documents, or a combination of these mentioned.","To utilize the data in the package, a user or a computer program submits a query in the query language in part 5. The submitting can be done through LAN, WAN, or Internet to the server via part 3. Once the server receives the query a corresponding result is returned to the submitter via part 4. A query is a hierarchical structure written in the query language, which is actually the prototype of the query result. Depending on what a query is asking for, the result of the query could be an SGML document or a part of SGML document. The server in part 1 may return an empty string if no suitable result is found or an error is contained in the query.","The query language of part 5 is used to process stored data in SGML format. It is a declarative language.","The query language defines four data types:","number, which is an integer or a decimal number;","qualified name, which is a string starting with a lower case letter from a to z, followed by letters of: a to z, A to Z, the underscore \u201c_\u201d, digits from 0 to 9;","double quote, which is a string and enclosed with double quote signs; and","single quote, which is a string and enclosed with single quote signs.","The query language defines a property as a pair of property name, which is a qualified name, and property value, which is a double quote. The query language defines a property list as a group of properties.","For writing a query in a logic way, the query language suggests a data object called data vine that includes a name of qualified name, a property list; and a data structure called data vine list. Both data vine and data vine list are logic views to use with CRUST operators in order to formulate a query.","Angle tags in SGML are allowed in the query language to form hierarchical structures. An angle element in SGML represents a data vine in the query language. A tag name in SGML represents a data vine list in the query language. The traditional child operator of one slash sign, descendent operator of two slash signs, and property value operator of one commercial \u201cat\u201d sign are accepted by the query language of the invention. A child operator returns a data vine list of one level down on the path, in which each member has the same parent name that is the one before the operator sign\u201c\/\u201d, and the same child name that is the one after the operator sign \u201c\/\u201d. A descendent operator returns a data vine list of multiple levels down on the path, in which each member has the same parent name that is the one before the operator sign\u201c\/\/\u201d, and the same child name that is the one after the operator sign \u201c\/\/\u201d. A property value operator returns the property value belonging to the property name that is the one after the operator sign \u201c@\u201d.","The query language in the invention provides five right unary operators that are the cast operator, the restrict operator, the unique operator, the sort operator, and the traverse operator. An operator acts on a data vine list and return another data vine list. In a query each operator is prefix with one exclamation point and postfix with parameters in parentheses.","The cast operator has two modes. The first mode is castall and the second mode is castnone. Both modes of cast operator open the navigating data vine and act with iterations on the members inside. The operator castAll extracts all members inside and includes all of them in the result list. The castNone operator only iterates all members inside without including anyone of them in the result list, instead, providing a change for alteration. A cast operator has parameters that can add more members into the result or remove any existing member from the result.","A restrict operator acts on a data vine list and only extracts those restricted members inside. A parameter could be one of the following where N, X, and Y are positive integers:","N, which allows only the Nth index of member in the result list;","between X and Y, which allows all members of index numbers greater than X and less than Y in the result;","first N, which allows all members from index 1 to index N in the result;","last N, which allows all members of the last N index numbers in the result;","even, which allows all members of even index numbers in the result; and","odd, which allows all members of odd index numbers in the result.","A unique operator acts on a data vine list and extracts one for each satisfaction with the given condition of uniqueness. In case that duplicated ones are found, only the first one is selected. A unique operator has only one parameter that is a descendent name, and no path operator \u201c\/\u201d is needed in the parameter.","A sort operator sorts the data vine list according to the given sorting conditions. Parameters of a sort operator could be one the following. The first parameter sortFlag is a sorting flag. Its value can be 1 for sensitive ascending, 2 for sensitive descending, 3 for insensitive ascending, and 4 for insensitive descending. The flag could be omitted and the default value is 1 of sensitive ascending. The second parameter can be one of tagName, \/tagName, \/\/tagName, tagName@attributeName, \/tagName@attributeName, MagName@attributeName, and @attributeName.","A traverse operator acts on a data vine list, yields a spanning tree. The result collects those on the backward traverse path on the tree according to the given condition in parameters. A traverse operator and its parameter could be one of the following. In the notation here, tagName1 and tagName2 represent tag names; value1 and aValue2 represent values.","!traverse (from tagName1 aValue1 to tagName2 aValue2);","!traverse (from tagName1 aValue1); and","!traverse (to tagName2 aValue2).","The query language in the invention provides five property operations: default, +, \u2212, *, and ^ among property lists. If S is the property list of the current data vine, P is a property list as [propert1, propert2 . . . propertyN], where each property is a pair of property name and property value, and N is a positive integer, the following operations are between S and P. S is not showing in the expression because S represents the current existing property list of the action.","P is the default operation on S. P completely replaces S and becomes the property list of the current data vine.","+P is the update operation on S. A property in P will replace a property in S if these two properties share the same name, otherwise this property will join S and become a new property of S.","\u2212P is the elimination operation on S. A property in S will be removed if it has the same name and the same value with a property in P.","*P is the replacement operation on S. A property in P will replace a property in S if these two properties share the same name otherwise no action is taken.","^P is the intersection operation on S. Any property in S must be exactly the same as some property in P otherwise it will be dropped from the result.","The query language in the invention provides aggregation functions on a data vine list:","If _DVL is a data vine list and each member in _DVL has a number as value, the aggregation functions on _DVL are defined below.","Sum function is defined as sum(_DVL), which is the summation number of all data vine values from _DVL.","Count function is defined as count(_DVL), which is the count number of all data vines in _DVL.","Average function is defined as avg(_DVL), which is the average number of all data vine values from _DVL.","Minimum function is defined as min(_DVL), which is the minimum number of all data vine values from _DVL.","Maximum function is defined as max(_DVL), which is the maximum number of all data vine values from _DVL.","The query language in the invention provides criterion functions. In the following criterion functions, AA is a data vine list and BB is either a number or a double quote. A criterion function returns a value of logic true or false. In case BB is a data vine list, the first member of BB is used.","The equal function is expressed as the equal sign \u201c=\u201d. The expression \u201cAA=BB\u201d will be evaluated to true if each member in AA has the same value as BB.","The greater-than function is expressed as the word \u201cisGT\u201d. The expression \u201cAA isGT BB\u201d will be evaluated to true if each member in AA has the value greater than BB.","The greater-than-or-equal-to function is expressed as the word \u201cisGTE\u201d. The expression \u201cAA isGTE BB\u201d will be evaluated to true if each member in AA has the value greater than or equal to BB.","The less-than function is expressed as the word \u201cisLT\u201d. The expression \u201cAA isLT BB\u201d will be evaluated to true if each member in AA has the value less than BB.","The less-than-or-equal-to function is expressed as the word \u201cisLTE\u201d. The expression \u201cAA isLTE BB\u201d will be evaluated to true if each member in AA has the value less than or equal to BB.","The query language in the invention provides conditional statements if-then and if-then-else that accommodate data vine lists.","All legal statements are:","a data vine list represented by a tag name, a path, or a data vine name;","a path operation of the child operator of one slash and the descendent operator of two slashes;","an operation of the Cast, Restrict, Unique, Sort, and Traverse operators;","a property operation;","a beginning angle tag and its closing angle tag conforming well-formed rules;","a single angle tag;","an assignment operation;","an assigned variable;","a function;","a built-in statement; and","a conditional statement.","All delimiters of SGML including starting tags, ending tags, single tags, tag names, and attribute names are legal terms in the query language and can be used in a query directly as native terms without any other signs. A tag element in SGML is assigned to a logic view of a data vine. A tag name in SGML is assigned to a logic view of a data vine list. The attribute name and value are assigned to logic views of property name and value respectively.","Further features and aspects of the present disclosure will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.","Various exemplary embodiments, features, and aspects of the disclosure will be described in detail below with reference to the drawings.","The invention provides a dedicated server program that facilitates persistent storage. A database administrator loads hierarchical data into server. A user submits a query based on the loaded hierarchical data. A query accepts SGML angle notations. Any data in a SGML angle are used directly without quote symbol. Any text between a pair of angle tags of SGML is used in the query language within a pair of double quote symbols. A query result returns a document in SGML or a section of well-formed SGML data. A frequently submitted query may be reused to build a knowledge lead that is a new hierarchical structure on the original hierarchical data. Subsequent queries can take this advantage and navigate on the knowledge lead to get a short cut to the desired data.","The invention works in a query model. In this model databases are input via computer readable medium to a server that is a program running in computer, a query is submitted to the server via computer readable medium for data request, and an answer is returned to the query maker via computer readable medium. The advantage of this model is that, data, files, and file locations are not exposed to query makers. The invention follows this model and extends it in the way that a query is returned either in whole if it succeeds everywhere or nothing if it fails somewhere. The invention provides a self-contained query language in which logic programming principles bind on statements of a query. If a query succeeds on each statement then the appropriated result is returned. No incomplete answer is returned and no rollback is needed.","The invention includes five parts. First four parts are shown in . The part 5 is the query language.","part 1, a data server, which resides in a computer, holds hierarchical data, and facilitates query services;","part 2, a data input interface, which provides a channel to a server administrator or an authorized user to store data in the server;","part 3, a query interface, which gives users an access to submit a query;","part 4, a query interface, which returns result to query maker; and","part 5, a self-contained query language for writing a query.","The following contents are SGML data of three books under catalog in SGML. The contents are input to the server via part 2 of the data input interface. The contents are processed and stored in the data server for subsequent queries.",{"@attributes":{"id":"p-0108","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<catalog>"]},{"entry":[{},"\u2003<book cover=\u201cpapercover\u201d>"]},{"entry":[{},"\u2003\u2003<title>FOL and PROLOG<\/title>"]},{"entry":[{},"\u2003\u2003<edition>2nd edition<\/edition>"]},{"entry":[{},"\u2003\u2003<author><last>Ryder<\/last><first>Mike<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<publisher>Al Collections Inc.<\/publisher>"]},{"entry":[{},"\u2003\u2003<publishingDate>April 26, 2002<\/publishingDate>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cUSD\u201d>14.99<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cCAD\u201d>22.95<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cGBP\u201d>10.99<\/price>"]},{"entry":[{},"\u2003<\/book>"]},{"entry":[{},"\u2003<book year=\u201c\u201dcover=\u201cpapercover\u201d>"]},{"entry":[{},"\u2003\u2003<title>Natural Language Processing with Prolog<\/title>"]},{"entry":[{},"\u2003\u2003<edition>4th edition<\/edition>"]},{"entry":[{},"\u2003\u2003<author><last>Anderson<\/last><first>Steve<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<author><last>North<\/last><first>Hudson<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<author><last>Turner<\/last><first>Martha<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<publisher>Al Collections Inc.<\/publisher>"]},{"entry":[{},"\u2003\u2003<publishingDate>July 9, 2008<\/publishingDate>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cUSD\u201d>34.99<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cCAD\u201d>37.99<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cGBP\u201d>24.99<\/price>"]},{"entry":[{},"\u2003<\/book>"]},{"entry":[{},"\u2003<book year=\u201c\u201dcover=\u201cpapercover\u201d>"]},{"entry":[{},"\u2003\u2003<title>Manage Web Data with Prolog<\/title>"]},{"entry":[{},"\u2003\u2003<edition>4th edition<\/edition>"]},{"entry":[{},"\u2003\u2003<author><last>North<\/last><first>Hudson<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<author><last>Anderson<\/last><first>Steve<\/first><\/author>"]},{"entry":[{},"\u2003\u2003<publisher>Al Collections Inc.<\/publisher>"]},{"entry":[{},"\u2003\u2003<publishingDate>October 25, 2003<\/publishingDate>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cUSD\u201d>39.99<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cCAD\u201d>59.99<\/price>"]},{"entry":[{},"\u2003\u2003<price currency=\u201cGBP\u201d>26.99<\/price>"]},{"entry":[{},"\u2003<\/book>"]},{"entry":[{},"\u2003<\/catalog>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A data vine is stored in the server in Prolog codes specifically defined in the format of a predicate name with four parameters. The first parameter is a reference to the parent data vine, the second parameter is a double quote corresponding to a tag name in SGML data, the third parameter is a list of properties, and the fourth parameter is a reference to the child list. A terminal data vine is a data vine with \u201cnone\u201d as child reference. A tag value in SGML is expressed as a terminal data vine with the value in the second parameter. The above data of three books under catalog are stored with the following Prolog codes in server.","Among the codes, for example, t39513293834(j48310636322,\u2018book\u2019,[(\u2018cover\u2019,\u201cpapercover\u201d)],h24636326765) is a data vine stored in the server. The first parameter j48310636322 is the reference to the parent data vine, the second parameter \u2018book\u2019 is the tag name in the SGML data source, the third parameter [(\u2018cover\u2019,\u201cpapercover\u201d)] is a property list, and the fourth parameter h24636326765 is the reference to child vine list.","Among the codes, for example, h79547784277(h24636326765,\u20182nd edition\u2019,[ ],none) is a terminal data vine. The first parameter h24636326765 is the reference to the parent data vine, the second parameter \u20182nd edition\u2019 is the tag value in the SGML data source, the third parameter [ ] is an empty list for properties, and the fourth parameter is none that indicates being a terminal vine and no more child reference.","The following is Prolog code for the data of three books under catalog in SGML.",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"j48310636322(v15375181413,\u2018catalog\u2019,[ ],t39513293834)."},{"entry":"\u2003t39513293834(j48310636322,\u2018book\u2019,[(\u2018cover\u2019,\u201cpapercover\u201d)],h24636326765)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018title\u2019,[ ],u35112653426)."},{"entry":"\u2003\u2003\u2003u35112653426(h24636326765,\u2018FOL and PROLOG\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018edition\u2019,[ ],h79547784277)."},{"entry":"\u2003\u2003\u2003h79547784277(h24636326765,\u20182nd edition\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018author\u2019,[ ],u11826728488)."},{"entry":"\u2003\u2003\u2003u11826728488(h24636326765,\u2018last\u2019,[ ],a63364092259)."},{"entry":"\u2003\u2003\u2003\u2003a63364092259(u11826728488,\u2018Ryder\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003u11826728488(h24636326765,\u2018first\u2019,[ ],q79343971710)."},{"entry":"\u2003\u2003\u2003\u2003q79343971710(u11826728488,\u2018Mike\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018publisher\u2019,[ ],f71297706511)."},{"entry":"\u2003\u2003\u2003f71297706511(h24636326765,\u2018Al Collections Inc.\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018publishingDate\u2019,[ ],q99853395812)."},{"entry":"\u2003\u2003\u2003q99853395812(h24636326765,\u2018April 26, 2002\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cUSD\u201d)],h17730132613)."},{"entry":"\u2003\u2003\u2003h17730132613(h24636326765,\u201814.99\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cCAD\u201d)],w55896967414)."},{"entry":"\u2003\u2003\u2003w55896967414(h24636326765,\u201822.95\u2019,[ ],none)."},{"entry":"\u2003\u2003h24636326765(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cGBP\u201d)],r40483995815)."},{"entry":"\u2003\u2003\u2003r40483995815(h24636326765,\u201810.99\u2019,[ ],none)."},{"entry":"\u2003t39513293834(j48310636322,\u2018book\u2019,[(\u2018year\u2019,\u201c\u201d),(\u2018cover\u2019,\u201cpapercover\u201d)],"},{"entry":"\u2003\u2003\u2003\u2003\u2003y79664051616)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018title\u2019,[ ],d92223856217)."},{"entry":"\u2003\u2003\u2003d92223856217(y79664051616,\u2018Natural Language Processing with"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003Prolog\u2019, [ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018edition\u2019,[ ],v72043407518)."},{"entry":"\u2003\u2003\u2003v72043407518(y79664051616,\u20184th edition\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018author\u2019,[ ],p35202283119)."},{"entry":"\u2003\u2003\u2003p35202283119(y79664051616,\u2018last\u2019,[ ],g58931688220)."},{"entry":"\u2003\u2003\u2003\u2003g58931688220(p35202283119,\u2018Anderson\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003p35202283119(y79664051616,\u2018first\u2019,[ ],d34130928221)."},{"entry":"\u2003\u2003\u2003\u2003d34130928221(p35202283119,\u2018Steve\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018author\u2019,[ ],m35667072522)."},{"entry":"\u2003\u2003\u2003m35667072522(y79664051616,\u2018last\u2019,[ ],s77176642523)."},{"entry":"\u2003\u2003\u2003\u2003s77176642523(m35667072522,\u2018North\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003m35667072522(y79664051616,\u2018first\u2019,[ ],b19587891124)."},{"entry":"\u2003\u2003\u2003\u2003b19587891124(m35667072522,\u2018Hudson\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018author\u2019,[ ],j65082617725)."},{"entry":"\u2003\u2003\u2003j65082617725(y79664051616;\u2018last\u2019,[ ],m40716174626)."},{"entry":"\u2003\u2003\u2003\u2003m40716174626(j65082617725,\u2018Turner\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003j65082617725(y79664051616;\u2018first\u2019,[ ],d18414387727)."},{"entry":"\u2003\u2003\u2003\u2003d18414387727(j65082617725,\u2018Martha\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018publisher\u2019,[ ],e70566241128)."},{"entry":"\u2003\u2003\u2003e70566241128(y79664051616,\u2018Al Collections Inc.\u2019, [ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018publishingDate\u2019,[ ],g42930972529)."},{"entry":"\u2003\u2003\u2003g42930972529(y79664051616,\u2018July 9, 2008\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cUSD\u201d)],h69078357330)."},{"entry":"\u2003\u2003\u2003h69078357330(y79664051616,\u201834.99\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cCAD\u201d)],h53080996831)."},{"entry":"\u2003\u2003\u2003h53080996831(y79664051616,\u201837.99\u2019,[ ],none)."},{"entry":"\u2003\u2003y79664051616(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cGBP\u201d)],s59677253732)."},{"entry":"\u2003\u2003\u2003s59677253732(y79664051616,\u201824.99\u2019,[ ], none)."},{"entry":"\u2003t39513293834648310636322,\u2018book\u2019,[(\u2018year\u2019,\u201c\u201d),(\u2018cover\u2019,\u201cpapercover\u201d)],"},{"entry":"\u2003\u2003\u2003\u2003\u2003n63623716433)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018title\u2019,[ ],c52455768634)."},{"entry":"\u2003\u2003\u2003c52455768634(n63623716433,\u2018Manage Web Data with Prolog\u2019,"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003[ ]none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018edition\u2019,[ ],b59375174135)."},{"entry":"\u2003\u2003\u2003b59375174135(n63623716433,\u20184th edition\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018author\u2019,[ ],x85483396136)."},{"entry":"\u2003\u2003\u2003x85483396136(n63623716433,\u2018last\u2019,[ ],g73079266837)."},{"entry":"\u2003\u2003\u2003\u2003g73079266837(x85483396136,\u2018North\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003x85483396136(n63623716433;\u2018first\u2019,[ ],q24239956438)."},{"entry":"\u2003\u2003\u2003\u2003q24239956438(x85483396136,\u2018Hudson\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018author\u2019,[ ],j21403832839)."},{"entry":"\u2003\u2003\u2003j21403832839(n63623716433,\u2018last\u2019,[ ],b19174098340)."},{"entry":"\u2003\u2003\u2003\u2003b19174098340(j21403832839,\u2018Anderson\u2019,[ ],none)."},{"entry":"\u2003\u2003\u2003j21403832839(n63623716433,\u2018first\u2019,[ ],r1 9061767541)."},{"entry":"\u2003\u2003\u2003\u2003r19061767541(j21403832839,\u2018Steve\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018publisher\u2019,[ ],h91386946142)."},{"entry":"\u2003\u2003\u2003\u2003h91386946142(n63623716433,\u2018Al Collections Inc.\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018publishingDate\u2019,[ ],I91057065343)."},{"entry":"\u2003\u2003\u2003\u2003l91057065343(n63623716433,\u2018October 25, 2003\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cUSD\u201d)],"},{"entry":"\u2003\u2003\u2003\u2003\u2003m16440723344)."},{"entry":"\u2003\u2003\u2003\u2003m16440723344(n63623716433,\u201839.99\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cCAD\u201d)],"},{"entry":"\u2003\u2003\u2003\u2003\u2003e93056027745)."},{"entry":"\u2003\u2003\u2003e93056027745(n63623716433,\u201859.99\u2019,[ ],none)."},{"entry":"\u2003\u2003n63623716433(t39513293834,\u2018price\u2019,[(\u2018currency\u2019,\u201cGBP\u201d)],"},{"entry":"\u2003\u2003\u2003\u2003\u2003w46292234246)."},{"entry":"w46292234246(n63623716433,\u201826.99\u2019,[ ],none)."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A query \u201c\/\/catalog\/\/title\u201d will return the title information as result below.",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<title>FOL and PROLOG<\/title>"]},{"entry":[{},"<title>Natural Language Processing with Prolog<\/title>"]},{"entry":[{},"<title>Manage Web Data with Prolog<\/title>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The query \u201c\/\/catalog\/\/title\u201d can be reused to build a knowledge lead in Prolog code as below.",{"@attributes":{"id":"p-0117","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"shortcut(v15375181413,\u2018lead1\u2019,[ ],[ h24636326765, y79664051616,"},{"entry":"n63623716433])."},{"entry":"This knowledge lead refers to the original data blow."},{"entry":"h24636326765(t39513293834,\u2018title\u2019,[ ],u35112653426)."},{"entry":"\u2003u35112653426(h24636326765,\u2018FOL and PROLOG\u2019,[ ],none)."},{"entry":"y79664051616(t39513293834,\u2018title\u2019,[ ],d92223856217)."},{"entry":"\u2003d92223856217(y79664051616,\u2018Natural Language Processing with"},{"entry":"Prolog\u2019,[ ],none)."},{"entry":"n63623716433(t39513293834,\u2018title\u2019,[ ],c52455768634)."},{"entry":"\u2003c52455768634(n63623716433,\u2018Manage Web Data with Prolog\u2019,[ ],none)."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"A new query \u201c\/\/lead1\u201d will return the same title information with less processing time.","<title>FOL and PROLOG<\/title>","<title>Natural Language Processing with Prolog<\/title>","<title>Manage Web Data with Prolog<\/title>","Generally a frequently submitted query may be reused to build a knowledge lead that is a new hierarchical structure on the original data. Subsequent queries may take this advantage and navigate on the knowledge lead to get a short cut to the desired data. This feature helps a large-scale application.","The following contents are showing a query written with part 5. A query may contain SGML angle notations such as <example> and <book> in below. The query is submitted to server via part 3 of the query interface. In the query, the expression of title and edition in SGML angle notation are directly used without any quote symbol to extract corresponding data.",{"@attributes":{"id":"p-0124","num":"0123"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<example>"]},{"entry":[{},"\u2003\/\/book!castnone(<mybook>title,edition<\/mybook>)"]},{"entry":[{},"<\/example>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The result of this query is returned via part 4 of the query interface. Because the use of castnone operator the tags of <book><\/book> are not included in the result. Only title and edition are included because they are explicitly expressed in the query for extraction. The tags of <mybook>, <\/mybook> in the query are used to enclose title and edition in the result.",{"@attributes":{"id":"p-0126","num":"0125"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<example>"]},{"entry":[{},{},"\u2003<mybook>"]},{"entry":[{},{},"\u2003\u2003<title>"]},{"entry":[{},{},"\u2003\u2003FOL and PROLOG"]},{"entry":[{},{},"\u2003\u2003<\/title>"]},{"entry":[{},{},"\u2003\u2003<edition>"]},{"entry":[{},{},"\u2003\u20032nd edition"]},{"entry":[{},{},"\u2003\u2003<\/edition>"]},{"entry":[{},{},"\u2003<\/mybook>"]},{"entry":[{},{},"\u2003<mybook>"]},{"entry":[{},{},"\u2003\u2003<title>"]},{"entry":[{},{},"\u2003\u2003Natural Language Processing with Prolog"]},{"entry":[{},{},"\u2003\u2003<\/title>"]},{"entry":[{},{},"\u2003\u2003<edition>"]},{"entry":[{},{},"\u2003\u20034th edition"]},{"entry":[{},{},"\u2003\u2003<\/edition>"]},{"entry":[{},{},"\u2003<\/mybook>"]},{"entry":[{},{},"\u2003<mybook>"]},{"entry":[{},{},"\u2003\u2003<title>"]},{"entry":[{},{},"\u2003\u2003Manage Web Data with Prolog"]},{"entry":[{},{},"\u2003\u2003<\/title>"]},{"entry":[{},{},"\u2003\u2003<edition>"]},{"entry":[{},{},"\u2003\u20034th edition"]},{"entry":[{},{},"\u2003\u2003<\/edition>"]},{"entry":[{},{},"\u2003<\/mybook>"]},{"entry":[{},{},"<\/example>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The query language in the invention suggests a data object called data vine and a data structure type called data vine list. Data vine list is an ordered list of data vines. Data vine and data vine list are logic views to write a query. A data vine is a piece of data with a name that is a string of letters, a property list that is a set of pairs, and a vine list as its children. Constant data of a number, a string, a single quote, and a double quote are classified as terminal data vine. A terminal data vine has a constant as its name, an empty proper list, and a null child list. The following content corresponds to a data vine with a name of \u201cbook\u201d, a property list of [(cover, \u201cpapercover\u201d)], and a child list that has 3 data vines as members: \u201ctitle\u201d, \u201cedition\u201d, and \u201cauthor\u201d. Among the child list the first member is the data vine with the name \u201ctitle\u201d, an empty property list, and a child list of the only member \u201cFOL and PROLOG\u201d. In turn, the constant \u201cFOL and PROLOG\u201d is a terminal data vine with the name of itself, an empty proper list, and a null child list. The same logic views can apply on the second member of data vine \u201cedition\u201d and the third member of data vine \u201cauthor\u201d.",{"@attributes":{"id":"p-0128","num":"0127"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<book cover=\u201cpapercover\u201d>"]},{"entry":[{},"\u2003<title>FOL and PROLOG<\/title>"]},{"entry":[{},"\u2003<edition>2nd edition<\/edition>"]},{"entry":[{},"\u2003<author><last>Ryder<\/last><first>Mike<\/first><\/author>"]},{"entry":[{},"<\/book>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The child operator \u201c\/\u201d and the descendent operator \u201c\/\/\u201d are extended to accept a data vine list and return a data vine list. For example, \u201ccatalog\u201d is data vine list. The expression \u201ccatalog\/book\u201d represent another data vine list that all of its members are immediate children of \u201ccatalog\u201d. The expression \u201ccatalog\/\/last\u201d is a data vine list that all of its members are descendent of \u201ccatalog\u201d and each with the vine name \u201clast\u201d. A variable in the query language is used to represent a data vine list. A variable is prefixed with an underscore symbol. The query language uses symbol of \u201c:=\u201d to assign a data vine list to a variable. For example, _book is a variable and \/\/book is a data vine list, the assignment is _book:=\/\/book.","The operator castnone is designed to provide a chance for prototyping a data element. The data in  are input to the server. In  a query similar to the following query is submitted. The variable _Book is assigned to a data vine list to hold the elements of \u201cbook\u201d. Then the castNone operator acts on this list. There are four statements as the parameters of castNone, \u201c<book>\u201d, \u201ctitle\u201d, \u201cedition\u201d, and \u201c<\/book>\u201d. The two statements \u201ctitle\u201d and \u201cedition\u201d are the original tag names in the given data set. The castnone operator iterates on the act-on data vine list but does not extract anything. These two statements explicitly extract elements of <title> and <edition> from the act-on data vine list and cast them out in the result.",{"@attributes":{"id":"p-0131","num":"0130"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"_Book:=\/\/book,"]},{"entry":[{},{},"<example1>"]},{"entry":[{},{},"\u2003_Book!castNone(<book>title,edition,<\/book>)"]},{"entry":[{},{},"<\/example1>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"As in  there are nine book elements in the result. The first book and the second book have the same title with different editions. The angle tags of <book> are not from extracting but from the query declaration.","The operator castall is designed to extract a piece of data with hierarchical infrastructure intact. The data in  are input to the server. In  the castAll operator casts all out including <book> tag with its attributes. There are three statements as the parameters. The statement noshow( ) is used to block casting out anyone under the element <book>, but it does not block the casting of the tag <book>. After blocking all elements under the <book> element, the statements \u201ctitle\u201d and \u201cedition\u201d are used to explicitly extract elements of <title> and <edition> from the act-on data vine list and cast them out in the result.",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"_Book:=\/\/book,"]},{"entry":[{},{},"<example2>"]},{"entry":[{},{},"\u2003_Book!castAll("]},{"entry":[{},{},"\u2003\u2003noshow(),"]},{"entry":[{},{},"\u2003\u2003title,"]},{"entry":[{},{},"\u2003\u2003edition,"]},{"entry":[{},{},"\u2003)"]},{"entry":[{},{},"<\/example2>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"As in  there are nine book elements in the result. The castall operator extracts the angle tags of <book> with the attribute in tags. The contents in the angle tags of <book> are also extracted but suppressed by the noshow( ) statement.","The operator restrict is designed to screen out members from the act-on data vine list. The data in  are input to the server. In , \/\/book is a data vine list with 9 book elements. The query \u201c\/\/book!restrict(1,3,4,7)\u201d only keeps the elements of index 1,3,4, and 7 that includes the result data vine list. Other legal expressions in a restrict operator could be following:",{"@attributes":{"id":"p-0137","num":"0136"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/book!restrict(between 2 and 8), with a parameter expressed as between X"},{"entry":"and Y to get the middle part from item X to item Y;"},{"entry":"\u2003\/\/book!restrict(first 5), with a parameter expressed as first N to get the first"},{"entry":"part of N items;"},{"entry":"\u2003\/\/book!restrict(last 3), with a parameter expressed as last N to get the last"},{"entry":"part of N items;"},{"entry":"\u2003\/\/book!restrict(even), with a parameter expressed as even to get items in"},{"entry":"even indexes;"},{"entry":"\u2003\/\/book!restrict(odd), with a parameter expressed as odd to get items in odd"},{"entry":"indexes."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The unique operator is designed to make a given data vine list to be unique up to the given condition in parameters. It acts on the given data vine list and only selects the first item if multiple items satisfy the condition. A single data vine name or a tag name in the parameter is used for operation. No path operator \u201c\/\u201d is needed in the parameter. In , the query \/\/book\/author is the operant of the unique operator and is a data vine list of 13 members including all <author> elements in . The query is \u201c\/\/book\/author!unique(last)\u201d which means make it unique up to the last name of the <last> element in . After operation of unique operator on the data vine list of 13 members, 9 members with different last names are extracted and remained on the result list.","The sort operator is designed to sort a given data vine list up to conditions in parameters. The operant of sort operator in  is the result vine list from , which is \u201c\/\/book\/author!unique(last)\u201d. The query is \u201c\/\/book\/author!unique(last)!sort(\/\/last)\u201d. It sorts the data vine list up to the last names of <last> elements. In case a sorting flag is omitted and the default value of 1 is used for the sorting order of sensitive ascending. The sort operator has more options. The first parameter sortFlag is a sorting flag. Its value can be 1 for sensitive ascending, 2 for sensitive descending, 3 for insensitive ascending, and 4 for insensitive descending. The flag could be omitted and the default value 1 for sensitive ascending is used. The second parameter, with a notation of tagName as a data vine name or as a tag name and attributeName as a property or as an attribute name, can be written as expressions of tagName, \/tagName, \/\/tagName, tagName@attributeName, \/tagName@attributeName, \/\/tagName@attributeName, and @attributeName. The following are legal use of the sort operator although some of them may not cause significant sorting change:",{"@attributes":{"id":"p-0140","num":"0139"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\/\/book!sort(\/\/book@cover);"]},{"entry":[{},{},"\/\/book!sort(3,\/\/last);"]},{"entry":[{},{},"\/\/book!sort(2\/\/title);"]},{"entry":[{},{},"\/\/author!unique(\/\/last)!sort(\/\/first)."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The operator traverse is designed to help a user for data mining on a specific part in databases with one or two values under a tag name or a data vine name. A traverse operator acts on a data vine list that is a hierarchical structure as a tree. The traverse operator picks items in the tree on a backward traverse path according to the given condition in the parameter, extracts and collects any member from the operant list if the member has a descendent in the picked up list. In , a traverse operator acts on a data vine list of nine <book> elements. The parameter is expressed as, from price 12.99 to edition \u201c4th edition\u201d. All descendent elements of these nine <book> elements are put into the middle result list in the order of their appearances in . The traverse operator picks elements Price2a, Price2b, Price2c, Book3, Title3, and Edition3 due to the value 12.99 is in Price2a and the value \u201c4th edition\u201d is in Edition3, and, locates the ancestors of these picked elements in the operant list, which are Book2 and Book3 in the result list. A traverse operator and its parameter could be one of the following. In the notation here, tagName1 and tagName2 represent tag names, and, aValue1 and aValue2 represent values.","!traverse (from tagName1 aValue1 to tagName2 aValue2);","!traverse (from tagName1 aValue1);","!traverse (to tagName2 aValue2).","A property list is a logic view of attributes. In , the <book> elements have one or two attributes. In the first starting <book>tag as of <book cover=\u201cpapercover\u201d>, the corresponding property list is [(\u201ccover\u201d, \u201cpapercover\u201d)]. In the third starting <book> tag as of <book year=\u201c \u201d cover=\u201cpapercover\u201d>, the corresponding property list is [(\u201cyear\u201d, \u201c \u201d), (\u201ccover\u201d, \u201cpapercover\u201d)].","The default operation provides a replacement for the entire property list. The query, \/\/book!castall([(\u201ctagTitle\u201d,title),(\u201csearchDate\u201d,datenow( ))]), provides replacements for attributes of all <book> tags in  with [(\u201ctagTitle\u201d,title),(\u201csearchdate\u201d,datenow( ))]), by which the first <book>tag becomes <book tagTitle=\u201cFOL and PROLOG\u201d searchDate=\u201c20111224\u201d> and the third <book> tag becomes <book tagTitle=\u201cNatural Language Processing with Prolog\u201d searchDate=\u201c20111224\u201d>.","The update operation updates the existing property list. The query, \/\/book!castall(+[(\u201cyear\u201d,publishingdate),(\u201csearchDate\u201d,datenow( ))]), updates the attribute values of the attribute name \u201cyear\u201d, and adds the new attribute of name searchDate. The first <book>tag becomes <book cover=\u201cpapercover\u201d year=\u201cApr. 26, 2002\u201d searchDate=\u201c20111224\u201d> and the third <book> tag becomes <book year=\u201cJul. 9, 2008\u201d cover=\u201cpapercover\u201d searchDate=\u201c20111224\u201d>.","The elimination operation removes the designated members from the existing property list. The query, \/\/book!castall(\u2212[(\u201cyear\u201d, \u201c \u201d)]), removes the attribute of the name \u201cyear\u201d. The first <book>tag becomes <book cover=\u201cpapercover\u201d> and the third <book> tag becomes <book cover=\u201cpapercover\u201d>.","The replacement operation renews the property value only for a property that has the same property name in both property lists of the operation. The query, \/\/book!castall(*[(\u201cyear\u201d,publishingdate),(\u201csearchDate\u201d,datenow( ))]), renews the proper values of the property name \u201cyear\u201d only. The first <book>tag becomes <book cover=\u201cpapercover\u201d> and the third <book> tag becomes <book year=\u201cJul. 9, 2008\u201d cover=\u201cpapercover\u201d>.","The intersection operation verifies the existing property list so that a property is kept if it has the same property name in both property lists of the operation. The query, \/\/book!castall(^[(\u201cyear\u201d, \u201c \u201d)]), intersects each of property lists of <book> elements with [(\u201cyear\u201d, \u201c \u201d)]. The first <book>tag becomes <book> since it does not have attribute of the name \u201cyear\u201d and the third <book> tag becomes <book year=\u201c \u201d>.","The query language in the invention provides aggregation functions on a data vine list:","The sum function gets the summation number of all data vine values from a data vine list.","The count function gets the count number of a data vine list.","The avg function gets the average number of all data vine values from a data vine list.","The min function gets the minimum number of all data vine values from a data vine list.","The max function gets the maximum number of all data vine values from a data vine list.","The median function returns a list of data vines that are located in the middle of a data vine list.","The query language in the invention provides criterion functions that return a value of true if the criterion is satisfied otherwise it returns false.","The equal function is expressed as the equal sign \u201c=\u201d, the left side of \u201c=\u201d is a data vine list A and the right side of \u201c=\u201d is evaluated to a number or a double quote B. The function returns true if all data vines in A evaluate to the value of B.","The greater-than function is expressed as the word \u201cisGT\u201d; the left side of \u201cisGT\u201d is a data vine list A and the right side of \u201cisGT\u201d is evaluated to a number or a double quote B. The function returns true if one data vine in A has the value greater than B.","The greater-than-or-equal function is expressed as the word \u201cisGTE\u201d; the left side of \u201cisGTE\u201d is a data vine list A and the right side of \u201cisGTE\u201d is evaluated to a number or a double quote B. The function returns true if one data vine in A has the value greater than or equal to B.","The less-than function is expressed as the word \u201cisLT\u201d; the left side of \u201cisLT\u201d is a data vine list A and the right side of \u201cisLT\u201d is evaluated to a number or a double quote B. The function returns true if one data vine in A has the value less than B.","The less-than-or-equal function is expressed as the word \u201cisLTE\u201d, the left side of \u201cisLTE\u201d is a data vine list A and the right side of \u201cisLTE\u201d is evaluated to a number or a double quote B. The function returns true if one data vine in A has the value less than or equal to B.","The query language in the invention provides conditional statements if-then and if-then-else that accommodate data vine lists.","In the statement\n\n","In the query of ",{"@attributes":{"id":"p-0167","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<bib>"]},{"entry":[{},{},"\u2003\u2003\u2003\/\/book!castNone("]},{"entry":[{},{},"\u2003\u2003count(author) isGT 1,"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003title,"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003author! restrict(1,2),"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003if count(author) isGT 2 then <etcetra\/>"]},{"entry":[{},{},"\u2003)"]},{"entry":[{},{},"<\/bib>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":{"@attributes":{"id":"ul0003-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0004","list-style":"none"},"li":"the statement, count(author) isGT 1, allow further execution only on those <book> elements that have two or more authors"}}}},"of the book;","the statement, title, casts out an element of <title>;","the statement, author! restrict(1,2), casts only the first and second of <author> elements;","the statement, if count(auth) isGT 2 then <etcetra\/>, casts out a single tag <etcetra\/> for a book with three or more authors.","A data vine list represented by a tag name, a path, or a data vine name is a legal statement.","A path operation of the child operator of one slash and the descendent operator of two slashes is a legal statement","An operation of the Cast, Restrict, Unique, Sort, and Traverse operators is a legal statement.","A property operation is a legal statement.","A beginning angle tag and its closing angle tag conforming well-formed rules is a legal statement. The angle tags appear pair and must obey the well-formed rules. The comma following an angle tag can be omitted.","A single angle tag is a legal statement. The comma following an angle tag can be omitted.","An assignment operation is a legal statement.","An assigned variable is a legal statement.","A defined function is a legal statement.","A built-in statement is a legal statement.","A conditional statement is a legal statement.","SGML tags, tag names, and attribute names in hierarchical databases are embedded in the query language for direct use as legal terms in a query. A tag element is assigned to a logic view of a data vine. A tag name is assigned to a logic view of a data vine list. The attribute name is assigned to a logic view of a property name. In the query of , the starting tag <averageprice> and the ending tag <\/averageprice> with contents in between consolidate an hierarchical element that is assigned to a logic view of data vine; price is a tag name in  and is assigned to represent a data vine list, in which every member has the tag name of price; currency is an attribute name in  and is assigned to be used as a property name.","In the query of ,",{"@attributes":{"id":"p-0185","num":"0186"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003_Book:=\/\/book,"]},{"entry":[{},"\u2003<example>"]},{"entry":[{},"\u2003\u2003_X:=_Book\/\/price!castAll(@currency=\u201cUSD\u201d),"]},{"entry":[{},"\u2003\u2003<averageprice>,"]},{"entry":[{},"\u2003\u2003\u2003\u201cThe total amount is $\u201d,sum(_X),'. The average price of \u201d,"]},{"entry":[{},"\u2003\u2003\u2003count(_X),\u201cbooks is $\u201d,avg(_X),\u201c.\u201d,"]},{"entry":[{},"\u2003\u2003<\/averageprice>,"]},{"entry":[{},"<\/example>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"the statement, _Book:=\/\/book, assigns the variable _Book to a data vine list that holds <book> elements;\n\n","the statement, count(_X), is a aggregation function that returns the total count of books in ;","the statement, \u201cbooks is $\u201d, is a double quote and is to be directly included in the result; and","the statement, avg(_X), is a aggregation function that returns the average price in US dollars of all books in .","While the present disclosure has been described with reference to exemplary embodiments, it is to be understood that the disclosure is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications, equivalent structures, and functions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate exemplary embodiments, features, and aspects of the disclosure and, together with the description, serve to explain the principles of the disclosure.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
