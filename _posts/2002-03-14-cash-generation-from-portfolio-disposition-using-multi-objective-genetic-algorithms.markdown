---
title: Cash generation from portfolio disposition using multi objective genetic algorithms
abstract: A plan for disposing of assets in a given asset portfolio is determined using a genetic algorithm, which operates to satisfy certain objectives, including the generation of a cash amount. A genome population including a number of vectors is generated. The genome population is modified using a genetic algorithm, until at least one vector represents a change in the percentage of each asset such that the disposition of each asset in accordance with the vector most nearly satisfies one or more objectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680747&OS=07680747&RS=07680747
owner: Intuit Inc.
number: 07680747
owner_city: Mountain View
owner_country: US
publication_date: 20020314
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The present invention relates generally to financial analysis of portfolios for optimized liquidation, and to using genetic algorithms for generating a desired amount of cash from a given asset portfolio while optimizing one or more objectives. The present invention also relates to rebalancing a given asset portfolio while optimizing one or more objectives.","Cash. Just the sound of it evokes permanence, substance, an almost tangible feel, a tribute to its origin in the French word for \u2018money box,\u2019 casse. We speak of \u201ccash in hand,\u201d \u201ccash on the barrelhead\u201d and \u201ccash cow,\u201d all suggesting an unqualified immediacy of value or profit. Cash is the lubricant of finance, the most liquid of assets; if there is anything for which one would say \u201cdon't leave home without it,\u201d it must be cash. The range of uses of cash is unlimited. But the primary question is this: where do you get cash?","There are basically three ways to obtain cash: 1) working; 2) selling assets; and 3) investing assets. One way of obtaining cash is by selling existing assets from an existing asset portfolio. As shown in , one can sell certain assets from an asset portfolio  including assets A, B, C, and D, to obtain a modified asset portfolio  including assets A\u2032, B\u2032, C\u2032, and D\u2032 and a certain amount of cash. One can use such cash generated to purchase other assets, so as to obtain another modified asset portfolio  including assets A\u2033, B\u2033, C\u2033, D\u2033, E\u2033, and F\u2033. These assets A, B, C, D and the like can be any type of assets, such as stock of a particular company, stock of a particular type (large cap, small cap, etc.), real property, bonds, intellectual property, personal property, cash, and even debt or liabilities. For the purposes of the present invention, an \u2018asset\u2019 is anything that can be given an economic value. Conventional investment strategies normally only recommend how an asset portfolio should be redistributed for optimization. This is so called portfolio optimization or portfolio balancing. As shown in , conventional investment strategies typically recommend that, for a given investor, the initial asset portfolio  including a plurality of assets, such as A, B, C, and D, should be redistributed to the modified asset portfolio  including a plurality of assets, such as A\u2033, B\u2033, C\u2033, D\u2033, E\u2033, and F\u2033. In order for such portfolio optimization to occur, it is inevitable that certain assets in the initial asset portfolio should be sold to generate a certain amount of cash and that the generated cash should be used to purchase new assets for the modified asset portfolio, as shown in . However, the prior art () only teaches the type and amount of assets that should be included in the modified asset portfolio, but does not teach or suggest how a certain amount of cash should be generated from the initial asset portfolio while satisfying certain objectives in order to reach the modified asset portfolio. In other words, conventional portfolio optimization merely identifies the desired end result, the modified portfolio, but does not describe how to achieve that end result.","One of the key issues that arise in disposing of assets in any context is the tax consequence. While many investment strategies suggest minimizing tax consequences, when it comes to determining which assets to dispose of in which amounts, the complexity of determining the tax effects is typically overwhelming. While investment advisors do have general heuristics or suggestions for considering the tax consequences, these are merely precautionary, and not based on computational analysis of the actual tax consequences of each various possible optimization plans.","It is a very complicated task to find a solution for how an initial asset portfolio should be modified to generate a certain amount of cash while satisfying certain objectives as shown in . Consider, for example, a situation where $4,000 of cash should be generated from an asset portfolio having ten different mutual find holdings each comprising 10 lots that have assets in different capital gain categories under the tax law, while satisfying certain objectives specified by a user. The search space for this situation would involve devising a plan to sell some part of each asset so as to generate a certain amount of cash while satisfying certain objectives. Having ten funds each with ten lots, there will be 100 distinct assets of which some fraction can be sold. Assuming that the assets can be sold between 1% and 100% in 1% increments, just to simplify the calculation, there will be 100 ways to sell each asset. That is, there will be 100 ways to sell 100 distinct assets, resulting in 100combinations of possible solutions. In addition, a variety of objectives should be considered when finding the solution, such as minimizing tax obligations, maximizing capital gains, avoiding sale of certain assets, minimizing associated commissions and fees, minimizing the number of transactions, preference to sell entire asset lots, consideration of future value, consideration of personal preference, etc., with respect to a user-specified importance level for each objective. The solution space for such a situation will be enormous, discontinuous in scope and will typically involve non-linear, non-dimensional, and inter-dependent variables.","Such a complicated problem is very difficult to solve, but once a solution is obtained, it is easy to check the solution. Such problems are called non-deterministic polynomial (\u201cNP\u201d) problems, which mean that it is possible to guess the solution by some non-deterministic algorithm and then check the solution, both in polynomial time. NP problems typically can be solved by genetic algorithms. However, so far there has been no attempt to apply a genetic algorithm to finding a solution for generating a certain amount of cash from an asset portfolio while optimizing certain objectives of a user.","The present invention solves this problem by generating a plan for disposing of assets in a given asset portfolio by using a genetic algorithm, while satisfying or optimizing certain objectives, including, but not limited to the generation of a desired amount of cash. The generated cash can be used for various purposes including purchasing new assets for portfolio optimization.","In one embodiment, a genome population including a number of vectors (genomes) is generated. Each vector (genome) represents a change in a percentage of each asset in an asset portfolio containing a number of assets. The genome population is modified using a genetic algorithm, including introducing into the genome population new vectors derived from other vectors, including the original or previously existing vectors. The genome population is modified until at least one vector represents a change in the percentage of each asset such that the disposition of each asset in accordance with the percentage change most nearly satisfies or optimizes one or more objectives, such as the generation of a desired amount of cash, minimization of taxes, or the like.","Modifying the genome population can include determining a fitness of each genome (vector) based on one or more objective functions pertaining to the disposition of an asset in the asset portfolio. The objective functions provide a way of measuring the degree to which the disposition of assets in accordance with a genome vector satisfies the various objectives. Various vectors are selected as mating vectors from the first set of vectors based on their fitness, and then combined to obtain a second set of vectors, which are the offspring of the mating vectors. The resulting offspring vectors are preferably mutated, and used to replace selected ones of vectors in the genome population.","The present invention may be embodied in various forms, including computer program products, methods, and systems, special or general purpose computing devices or apparatus, online services or systems, users interfaces, etc.","By employing a genetic algorithm in order to find a solution for optimizing a set of criteria, such as generating a certain amount of cash, in the disposition of an asset portfolio, it is possible to search a potentially intractable solution space for an optimal solution in an acceptable amount of time.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3","b":["300","300","300","314","316","318","320","322","324","300","328","326"]},"The initial asset portfolio  can comprise any type of assets, including securities, derivatives, real property, intellectual property, personal property, cash, and even debts or liabilities. It is understood that the initial asset portfolio  is not physically present in the present invention, but rather is represented by data used by the module . Preferably, each asset in the portfolio  has a name, a type, an acquisition date, an acquisition cost, and a current value. Other data may also be associated with the assets, depending upon the implementation and the information deemed desirable to a user, but again, this is not material to the invention. The portfolio  may be stored in a conventional relational or flat file database that is accessible to the module . For example, many personal finance software applications, such as Intuit Inc.'s QUICKEN\u00ae or Microsoft Corp.'s MONEY\u00ae use databases to store data pertaining to the user's asset portfolio. It is anticipated that the present invention in its embodiment as the genetic algorithm module  may be integrated into a personal finance software application, such as one of the foregoing applications, or integrated into securities trading and management systems which are commonly available online to investors from the many brokerage and securities firms. In this embodiment, the firms store information about a user's portfolio, which can be directly accessed by the module to obtain asset information.","The asset valuation data  comprises valuation data for each of the assets included in the initial asset portfolio . For example, the asset valuation data  can include stock prices for particular companies, stock indexes, mutual fund prices, real property prices, bond prices, valuation of intellectual property such as patents and copyright, etc. The asset valuation data  may be provided manually by a user, or it may be obtained automatically by the module  via appropriate connections with databases or online information sources. For example, for securities type assets, the module  can query conventional stock quotation systems via an Internet network connection, by providing a stock symbol for the security. Again, in an embodiment where the module is part of trading system of a brokerage firm, integration with stock quotation systems will be relatively straightforward. Suffice to say that the manner in which such a connection is made between the module  and external databases or system is well understood by those of skill in the art, and the details are not material to the invention.","The asset liquidation cost data  comprises cost data for liquidating each of the assets included in the initial asset portfolio . The liquidation costs are mostly transaction costs and include, for example, commission for stockbrokers, mutual fund fees, commission for real estate brokers, commission for selling bonds, commission for selling intellectual property rights or personal property, and attorney fees associated with such transactions, etc. Again, this asset liquidation cost data  may be stored in a database or table internal to, or accessible by the module  via an application programming interface, and may be manually or automatically provided. For example, for securities assets, a commission fee schedule or equation for the sale of securities in accordance with the number of shares, lots, or dollar value may be stored and accessible by the module . Here too, integration with a trading system provides a direct connection to commission fees and schedules in an efficient manner.","The tax information  includes relevant federal and state tax law information in the U.S. and tax law information of foreign countries to the extent they are relevant to the initial asset portfolio  and the set of transactions  associated therewith. The tax information  may be stored as a set of tax rules, schedules, and associated tax computations, and may be manually or automatically provided.","The objectives  comprise the constraints that the genetic algorithm module  takes into consideration and attempts to optimize as it finds a solution for generating the asset disposition plan . Those objectives  include, but are not limited to, minimizing tax obligations, obtaining a target capital gain, maximizing the return on investment (ROI), avoiding sale of certain assets, minimizing associated commissions and fees, minimizing the number of transactions, preference to sell entire asset lots, consideration of future value, consideration of personal preference (regret), etc. Also, one of the objectives can be the generation of the desired amount of cash itself. In addition, each objective is associated with a weight that describes the level of importance of the objective. The weight may be fixed or it may be provided by the user. The weight is applied to one or more objective functions that relate to the particular objective. Any other relevant data  may be input as well, so long as it can be used to modify or adjust the operation of the objective functions, their input parameters, or the genetic algorithm module .","In one embodiment, the genetic algorithm module  comprises an initialization module , a scoring module , a selection module , a mating module , a mutation module , and a replacement module . The specific details of such software modules will be explained below in conjunction with . The genetic algorithm module  finds a solution for generating a desired amount of cash (one objective) from the initial asset portfolio  while satisfying the other objectives  and outputs a modified asset portfolio\/cash  and an asset disposition plan  describing a set of transactions for obtaining such modified asset portfolio\/cash  from the initial asset portfolio . The transactions of the asset disposition plan  specify each asset and the amount or percentage of that asset to be sold in order to generate the desired amount of cash while satisfying the other objectives . Disposition of the initial asset portfolio  in accordance with the set of specified transactions of the asset disposition plan  will result in the desired amount of cash (or the closet approximation thereto) and the modified asset portfolio  while optimizing the user's objectives.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["300","300","401","314","316","318","320","322","324"]},"More specifically, and depending on the embodiment, the module  reads the asset portfolio  from a database, such as a local database, or even a remote database, such as one maintained on the Internet by a financial services online provider. Again, depending on the implementation, the user interacts with the module  to designate the portfolio  from a number of other portfolios, or to construct the portfolio by selecting particular assets from a larger portfolio. For obtaining the asset valuation data , here too the module  reads from a database table or other local or remote source, and stores the information locally. For obtaining the objectives and their weights , the module  can provide the user with a graphical or textual user interface presenting each of the objectives and having the user rank order them in terms of importance, or use a sequence of pairwise comparisons to determine the user's implicit ranking, or provide the list of the objectives, along with a control for each to allow the user to set the weight (e.g., 1 to 10) of the objective, which are then internally normalized. In addition, the user can select which objectives  to satisfy and which to ignore (either by removing the objectives from the later computation process, or by giving such functions a weighting of 0). Input of the target amount of cash can likewise be made via a text or graphical user interface. If the user simply wants portfolio rebalancing without generation of any cash, then the user can weight the cash generation objective as zero (0). Asset liquidation cost data  and tax information  can also be obtained by reading a local database or a remote database.","Initialization of Genome Population","Then, a genome population is initialized  by the initialization module . The genome population comprises a plurality of genomes that are in the form of vectors. An initial genome population of around 100 genomes is useful, but more or fewer can be used. In the context of the present invention the terms \u201cvector\u201d and \u201cgenome\u201d will be used interchangeably herein. Each genome comprises a plurality of \u2018alleles,\u2019 one allele for each asset in the initial asset portfolio . Each allele corresponds to an asset disposition value for each asset, representing how each asset should be disposed of.","According to one embodiment of the present invention, each allele represents a percentage of each asset to be sold. Assume, for example, that the initial asset portfolio  includes 4 different assets A, B, C, and D, each constituting 10%, 15%, 25%, and 50%, respectively, of the initial asset portfolio , in terms of their cash value, say $200, $300, $500, and $1,000 respectively in a portfolio having a total value of $2,000. For instance, a genome for this portfolio of <100, 20, 40, 50> has four alleles, 100, 20, 40, and 50, which means that 100% of asset A, 20% of asset B, 40% of asset C, and 50% of asset D need to be sold from the initial asset portfolio  to generate the desired amount of cash. That is, the allele of \u2018100\u2019 indicates to sell 100% of asset A, i.e., 10% (100% of 10%, or $200) of the entire cash value of the asset portfolio. The allele of \u201820\u2019 indicates to sell 20% of asset B, 3% (20% of 15%, or $60) of the entire cash value of the portfolio, and so forth for the other alleles.","Alternatively, according to another embodiment of the present invention, each allele in the genome represents a percentage of each asset to keep rather than sell. In this case, in the above example, the genome <100, 20, 40, 50> indicates to keep 100% of asset A, 20% of asset B, 40% of asset C, and 50% of asset D, and sell the rest in order to generate the desired amount of cash and other objectives. Thus, the particular coding of the alleles (sell or keep) is merely a design consideration.","According to one embodiment, the genomes in the initial genome population are randomly generated. In one embodiment, each allele in a genome comprises a plurality of binary bits representing the asset disposition value. The genetic algorithm module  of the present invention utilizes a bit-string uniform procedure in randomly generating the genomes, by assigning 0 or 1 to each bit in the genome with equal probability. To this end, the genetic algorithm module  first chooses randomly a bit density d from a uniform distribution, wherein 0<=d<=1. Then, the genetic algorithm module  randomly sets each bit of each allele to one (1) with a probability of d. This will result in genomes evenly distributed in the binary space. It should be noted that this initialization is with respect to the entire genome treated as single bit string, and temporarily ignoring the separation of the individual alleles. Thus, for example, if each allele is represented by a 32-bit value, and there are 10 alleles, then the genome is treated as 320 bit string during the initialization process. The values of each allele are then the values of each corresponding 32-bit word in the bit string.","Alternatively in accordance with another embodiment of the present invention, selected ones of the genomes in the initial genome population are initialized with predetermined values thereby giving structured data for the genetic algorithm module  to draw on. For example, including a genome of all zeros (0) and a genome of all ones (1) in the initial genome population will help the genetic algorithm module  to find solutions at the very ends of the solution space. Any number of other fixed genomes may be added to the initial population, though this is likely to affect the quality of the overall search of the solution space.","The alleles are preferably represented by either an unsigned integer or a floating-point number. If an unsigned integer is used according to one embodiment of the present invention, the integer represents the numerator of a quotient, the implicit denominator being the maximum unsigned integer that can be stored in a certain number of bits used by the computer. Therefore, the resultant quotient will be a rational number in the range of 0.0 to 1.0 in floating point form, which represents the asset disposition percentage for the corresponding asset. A very simple example will suffice: Assume that the maximum number of bits is 8, in which case the implicit denominator is 255 or \u201c11111111\u201d in binary form. Thus, for an allele that ultimately represents disposition of 64\/255 (approximately 25%) of the asset, the numerator is 64 or \u201c1000000\u201d in binary form. As this should make clear then, the actual value stored for the allele in the vector does not necessarily have to be the asset disposition value, but only a value from which the asset disposition value can be calculated. In a preferred embodiment, alleles are represented by 32 bit unsigned integers. The use of unsigned integers as the alleles has an advantage that it helps avoiding epistasis, which is the inherent problem in genetic algorithms whereby a genome representation inhibits a genetic algorithm from finding an optimum solution to a problem.","Floating-point numbers may be used as the alleles according to another embodiment of the present invention. In this case the alleles will be a real floating-point number between 0 and 1 (including 0 and 1), and directly represent the asset disposition value. The use of real floating-point numbers as the alleles has an advantage that there is no need to convert each allele from its integer-numerator form to its floating-point form every time the allele is used in the genetic algorithm.","Determining Fitness of Genomes by Use of Objective Function","Thereafter, the fitness of the genomes in the genome population is determined  by the scoring module  to obtain a fitness score by using a composite objective function, respective objective functions and related objectives and weights . Determining the fitness of a genome is equivalent to determining how close the genome comes to optimizing or satisfying the user-specified objectives and weights  when the solution represented by the genome is applied to the initial asset portfolio . Again, the objectives themselves may include generating a target amount of cash from the asset portfolio.","According to one embodiment of the invention, the fitness scores of the genomes in the genome population are determined by (i) obtaining a composite genome objective value Ofor each genome in the genome population with an objective function that encompasses the objectives, and (ii) computing a fitness score F for each genome by applying a fitness function to the composite genome objective value Ocorresponding to each genome. The fitness function will be illustrated in detail below.","The composite genome objective value Ofor each genome in the genome population is calculated by first applying the evaluated genome to the initial asset portfolio  and using the respective objective functions, to compute the objective values Ofor each underlying objective (amount of cash generated, tax, commission, etc.). That is, for each objective, there is an objective function to which the disposition of the assets defined in the genome is applied; the result of the each objective function is the objective value O. Then, the objective values Ofrom all of the functions are normalized and standardized to obtain a normalized, standardized objective value Ofor each underlying objective. Finally, the normalized, standardized objective values Oare weighted and summed by a composite objective function to obtain a composite genome objective value Ocorresponding to the evaluated genome.","As illustrated in detail below, the objective values Ofor each underlying objective can be calculated by applying the genome to the initial asset portfolio  to assess the impact of the transactions represented by the evaluated genome upon the various objectives. Each objective is associated with an objective value O. The best (optimum) and worst objective values Oand Ocorresponding to each underlying objective can also be calculated by analyzing the nature of the underlying objective.","Also as illustrated in detail below, the objective values Ofor each underlying objective are normalized (a value between 0 and 1) and standardized (optimal value is 0, worst value is 1) to generate normalized, standardized objective values O. Normalization and standardization of the objective values allow the different values\/scales of each objective value corresponding to different objectives (e.g., minimum tax and minimum commission) to be summed together, because they are now unitless relative values, not dollar values or other application-specific values any more.","The normalization and standardization of the objective values Omay be done in a different manner for different objectives by analyzing the nature of the objectives. For most objectives, the normalized, standardized objective value Ocan be computed by dividing the difference between the calculated objective value Oand the best (or desired) objective value Oby a normalization factor, which for most underlying objectives is the difference between the worst objective value Oand the best objective value O, i.e., by the formula O=|O\u2212O|\/|O\u2212O|. However, the normalization factor can be different from |O\u2212O| depending upon the type of objective to be optimized.","The following is an illustration of the manner in which O, O, Oand Oare computed for a given genome in the genome population for various objectives in accordance with one embodiment of the present invention. These objectives listed below are merely exemplary, and can include other objectives that are not listed herein.","Calculating the normalized, standardized objective value Ofor the objective of optimizing the amount of cash generated: Here, Ois the desired amount of cash to be generated input by a user to the module  as one of the objectives , and Ois the most possible cash that can be generated from the initial asset portfolio . This value Ocan be obtained by calculating the total value of all assets in the portfolio , since the value of the assets are already input to the module  as asset valuation data . Ois the sum of cash generated for each type of asset when the genome is applied (i.e., after the disposition of each asset according to the allele values). The cash generated for each asset can be obtained by multiplying the price per unit asset with the total number of units and the percentage of the asset to be sold as represented by each allele of the genome. The price per unit is included in the asset valuation data , and the total number of units is included in the initial asset portfolio . The normalized, standardized objective value O=|O\u2212O|\/|O|, when O>=O\/2 and O=|O\u2212O|\/|O\u2212O|, when O<O\/2. Here, different normalization factors are needed to take into consideration two different circumstances. When Ois closer to O, the normalization factor is |O|. When Ois closer to 0, the normalization factor is |O\u2212O|. This is done so that the normalized, standardized objective values will always be in the range of 0 to 1.","Calculating the normalized, standardized objective value Ofor the underlying objective of maximizing capital gain: Here, Ois the sum of the capital gains from all assets which when sold would generate a gain, without considering taxes, commission, etc. Ois the sum of capital loss from all assets which when sold would generate a loss, without considering taxes, commission, etc. These values Oand Ocan be calculated by using the initial asset portfolio  and asset valuation data  input to the module . A capital gain is generated when the current value is higher than the basis for the asset and a capital loss is generated when the current value is lower than the basis for the asset. The current value of the assets is part of the asset valuation data and the basis is included in the initial asset portfolio data . Ois the total capital gain generated from the asset portfolio  when the evaluated genome is applied to the portfolio . Each allele in the evaluated genome is applied to each asset, and generates a capital gain if the current sales price exceeds the basis and a capital loss if the current sales price is lower than the basis. Summation of all the capital gains and capital losses for the assets results in the total generated capital gain O. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing tax: Here, Ois the loss limit (typically a minus value) permitted under the tax law, and Ois the maximum tax incurred when all assets showing a capital gain are sold, calculated by applying the appropriate tax law to the maximum capital gain. As explained previously, the appropriate tax law is input to the module as tax information . The loss limit is included in the tax information . Ois obtained by applying the appropriate tax law to the results of the change in the asset portfolio when the genome is applied to the asset portfolio . The tax calculation can also be done by finance management applications such as Intuit Inc.'s QUICKEN\u00ae or Microsoft Corp.'s MONEY\u00ae. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing the commission (costs) for the transactions: Here, Ois $0 (no commission), and Ois the sum total of commissions (costs) incurred by selling 100% of all the assets, calculated by adding the appropriate commissions for selling all the assets. Ois obtained by adding the appropriate commissions (costs) for the results of the change in the asset portfolio when the genome is applied to the asset portfolio . As explained previously, information on the appropriate commissions is input to the module  as asset liquidation cost data . The normalized, standardized objective value O=O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing the total number of transactions: Here, Ois 0, and Ois the total number of assets in the asset portfolio . Ois the number of transactions represented by the genome to be evaluated, which can be calculated by counting the number of alleles that represent a sale of asset in the asset portfolio . When the alleles represent the percentage to sell, then any non-zero allele represents a sale of asset in the asset portfolio . The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of favoring sale by whole lots: Here, Ois 1 (i.e., the average percentage of the asset lots being sold is 1.0 or 100%), and Ois 0 (i.e., the average percentage of the asset lots being sold is 0.0 or 0%). Ois the average percentage of the asset lots being sold when the evaluated genome is applied to the asset portfolio, and can be obtained by averaging the percentages of the assets to be sold represented by each allele in the evaluated genome. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of minimizing regret value: Regret value is a user-specified value assigned to each asset in the asset portfolio  and represents a degree of dislike for selling a particular asset. According to one embodiment of the present invention, the higher the regret value for a particular asset is, the more disfavored the sale of that asset is, that is the more the user desires to keep the asset. Regret values can be input to the module  as one of the objectives , and are in the range of 0 to 1. Ois 0 (no regret) and Ois 1 (total regret, most disfavored sale). Ois the average regret value for all the assets when the evaluated genome is applied to the asset portfolio . Ois calculated by (i) adding all the regret values assigned to assets that should be sold according to the evaluated genome (i.e., alleles represent a sale of the asset) to obtain a total regret value and (ii) dividing the total regret value by the number of assets in the portfolio. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of obtaining a target capital gain: Here, two additional variables are introduced, Oand O. Ois the sum of capital loss from all assets which when sold would generate loss, and Ois the sum of capital gain from all assets which when sold would generate a gain. These values Oand Ocan be calculated by using the initial asset portfolio  and asset valuation data  input to the module . O(optimum value) is the target amount of capital gain specified by a user, as one of the objectives . Ois the total capital gain generated from the asset portfolio  when the evaluated genome is applied to the portfolio . Each allele in the evaluated genome is applied to its corresponding asset, and generates a capital gain if the current sales price exceeds the basis and a capital loss if the current sales price is lower than the basis. Summation of all the capital gains and capital losses for the assets results in the total generated capital gain O. The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","Calculating the normalized, standardized objective value Ofor the objective of maximizing return on investment (ROI): Here, Ois the sum of the ROI of all assets of which the ROI is greater than or equal to 0, and Ois the sum of the ROI of all assets of which the ROI is less than 0. ROI for each asset can be calculated by dividing the difference between the sales proceeds and the basis of the asset by the basis. The sale proceeds of the assets are obtained from the asset valuation data  input to the module , and the basis is obtained from the initial asset portfolio  input to the module . Ois the ROI of the asset portfolio  when the evaluated genome is applied to the portfolio . Each allele in the evaluated genome is applied to its corresponding asset and generates a sales proceed and thus an ROI. Ocan be obtained by adding up the ROI of all assets when the alleles of the evaluated genome are applied to the assets in the portfolio . The normalized, standardized objective value O=|O\u2212O|\/|O\u2212O|.","After the standardized, normalized objective values for the respective underlying objectives are calculated for the evaluated genome, the composite genome objective value Ofor the evaluated genome can be obtained by the following composite objective function:",{"@attributes":{"id":"p-0051","num":"0050"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["O","comp"]},"mo":"=","mrow":{"munderover":{"mo":"\u2211","mrow":{"mi":"i","mo":"=","mn":"1"},"mi":"n"},"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}},"mrow":{"msub":[{"mi":["w","i"]},{"mi":["O","i"]}],"mo":"\u2062"}}}}},"br":{},"sub":"i ","ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["wis a weight for each objective; and","n is the number of objectives to be optimized."]}},"The weights are importance levels (either predetermined or specified by the users) in the range of 0 to 1 and are normalized so that they add up to 1. Each weight corresponds to each objective. Since the O's are normalized and standardized values, a composite genome objective value Oof zero (0) is the best (optimum) value and one (1) is the worst value.","In the manner described above, the composite genome objective values O's corresponding to all the genomes in the genome population are determined. Thereafter, the fitness score F for each genome in the genome population is obtained by applying a fitness function to each composite genome objective value Ocorresponding to each genome in the genome population. The fitness function is applied to the composite genome objective values in order to redistribute the genomes in the solution space such that the genomes are distributed in a way more effective for the genetic algorithm. According to one embodiment of the present invention, the fitness score F for each genome in the genome population can be obtained by sigma truncation:\n\n\u2212()\n\n","After the fitness scores of all the genomes in the genome population is calculated, it is determined  whether or not the termination criteria are satisfied. The termination criteria is one of two circumstances:\n\n","The user of the module  can specify how nearly the objectives should be optimized by the asset disposition plan  represented by the genomes. For example, the user can specify a threshold amount for the amount of cash generated, and when the cash generated by the genome exceeds the threshold amount, then the termination criterion is satisfied. Likewise, the user can specify a threshold fitness score, and when the fitness score of at least one of the genomes in the genome population is lower than the threshold fitness score, the termination criterion is satisfied.","The number of generations limit for one genome population as the termination criteria is preferably set as 50, such that the genetic algorithm terminates when the number of generations of one genome population exceeds 50. According to another embodiment of the present invention, another termination condition is added to the number of generations. That is, when the number of generations exceeds 50, then it is determined whether or not the ratio of the best fitness score in the first generation to the best fitness score in the current generation is smaller than one (1). If the ratio is smaller than or equal to one (1), then the genetic algorithm is terminated because this means that the fitness score is not getting better (i.e., not getting lower) for further generations. If the ratio is larger than one (1), then the genetic algorithm is not terminated because this means that the fitness score is getting better (i.e., getting lower) for further generations and it is worth trying the subsequent generations to find an optimum solution.","If one of the termination criteria is satisfied , the results are reported  and the process is returned  to the user, when the genetic algorithm module  has satisfied  the goal of optimizing the objectives (including generating the desired amount of cash). If the goal is not satisfied , then it is determined  whether or not the execution time applicable to the entire genetic algorithm of the application has exceeded a certain limit. If so, then the process is returned  to the user with the current best results. If not, the process returns to initialize  the genome population again and restarts the genetic algorithm. According to one embodiment, a user imposes this time limit for the entire genetic algorithm of the application. In another embodiment, this time limit is predetermined in the genetic algorithm module  itself.","Selection of Genomes for Mating","If the termination criteria are not satisfied , the selection module  in the genetic algorithm module  proceeds to select 416 genomes for mating. The selection can be carried out by roulette wheel selection, tournament selection, or any other type of selection method typically used by genetic algorithms.","According to one embodiment of the present invention, roulette wheel selection is used to give every genome in the genome population a chance of mating, the chance of mating for each genome being proportional to the determined fitness score of each genome. To this end, the fitness score Ffor genomeis used as a threshold and a random number R in the range of 0 to 1 is selected. According to one embodiment of the present invention where the fitness scores are standardized such that the best value is 0, the genome is selected for mating if R>F. Otherwise the genome is skipped. Because very good genomes will have very low F's, R will more likely be greater than their fitness F. Very poor genomes are less likely to be picked. Roulette wheel selection is continued until the genetic algorithm module has selected two mating genomes from the genome population.","According to another embodiment of the present invention, tournament selection is used for selecting the mating genomes. Specifically, a first superior genome is selected from a first set of two randomly chosen genomes in the initial genome population. Then, a second superior genome is additionally selected from a second set of two randomly chosen genomes in the initial genome population. The first and second superior genomes are the selected genomes for mating. Superiority of each genome is determined based on the fitness score for each genome computed above. Tournament selection is continued until the genetic algorithm module has selected two mating genomes from the genome population.","Mating Genomes to Create Offspring Genomes","Thereafter, the two selected genomes are mated  by the mating module  to create offspring genomes. According to one embodiment of the present invention, the selected genomes are mated by single-point crossover. Single-point crossover is performed by randomly selecting a common crossover point (bit) in a first mating genome and a second mating genome among the selected mating genomes. The first mating genome has a first portion and a second portion divided by the common crossover point and the second mating genome also has a first portion and a second portion divided by the common crossover point. Then, the second portion of the first mating genome is replaced with the second portion of the second mating genome to create an offspring genome.","In accordance with another embodiment of the present invention, two-point crossover is used for mating. Two-point crossover is performed by selecting two crossover points (here, bit positions in the genome), copying the part from the beginning of the genome to the first crossover point from the first mating genome, copying the part from the first to the second crossover point from the second mating genome, and copying the part from the second crossover point to the end of the genome from the first mating genome, so as to create an offspring genome.","In accordance with still another embodiment of the present invention, uniform crossover is used for mating. Uniform crossover is performed by randomly copying from either the first mating genome or the second mating genome to create an offspring genome. That is, the length of the genome is traversed and at each bit location a bit is copied into the offspring genome from either the first mating genome or the second mating genome.","According to still another embodiment of the present invention, arithmetic crossover is used for mating. Arithmetic crossover is carried out by performing some arithmetic operation with the first and second mating genomes to create an offspring genome. For example, the first and second mating genomes represented by binary bits are added to obtain the offspring genome.","Mutating Offspring Genomes","Thereafter, the offspring genomes are mutated  at a low frequency by the mutation module . According to one embodiment of the present invention, the mutation rate is 0.01%, and this is implemented by selecting a single integer in the range of 1 to 10,000, and mutating only when a randomly selected number in the range equals the selected integer. Another approach is to set the mutation rate as the threshold itself, and mutate the bit only if a randomly selected number is below the threshold. The low frequency mutation rate is selected such that it is high enough for the genetic algorithm to explore the solution space effectively but low enough to prevent destruction of information obtained during mating. Mutation is carried out by (i) selecting a bit in the offspring genome to mutate by random selection in a uniform distribution, and (ii) changing the selected bit in the offspring genome from zero (0) to one (1), or vice versa.","Inserting Offspring Genomes into Genome Population","Thereafter, the offspring genomes are inserted  into the genome population and a new generation genome population is obtained based on a replacement strategy by the replacement module . According to one embodiment of the present invention, the replacement strategy adds the offspring genome to the initial genome population to obtain a modified genome population. Then, the fitness score of each genome in the modified genome population is determined in the manner described above. Thereafter, a first predetermined number of the worst vectors are removed from the modified genome population based upon the determined fitness of the modified genome population. Finally, a second predetermined number of the best vectors in the initial genome population are added to the modified genome population based upon the determined fitness of the initial genome population. The resultant modified genome population is the new (next generation) genome population. According to one embodiment of the present invention, the first and second predetermined numbers above are 25.","Then, the process returns to determine  the fitness of the new genome population as described above. The processes , , , , , and  are repeated until the termination criteria are satisfied .","The genetic algorithm module  is able to search an enormous, non-linear search space with a number of inter-dependent variables to find a near optimal solution for optimizing or satisfying numerous objectives specified by the user. Numerous (possibly conflicting) objectives can be weighted by the importance levels and optimized at the same time. The objectives can include generating a target amount of cash. Moreover, the genetic algorithm module  is not limited to a certain type of asset and can be used with any type of assets in an asset portfolio. In addition, the solution can be found in an acceptable period of time, such as a few seconds to a few minutes.","Computer software implementation of the cash generating genetic algorithm can be readily done, since it is programmable in any type of programming language that can run on any type of computer.","Although the present invention has been illustrated as a computer-implemented method, it should be clear to one skilled in the art that the genetic algorithm module  of the present invention can be embodied in a computer program product recorded on any type of computer readable medium.","It is also possible to use multiple different genome populations as the initial genome populations and run them simultaneously according to the genetic algorithm, rather than use one initial genome population. For example, one embodiment of the present invention utilizes 10 genome populations in parallel. This would result in reduction of the time required for finding the solution but would also be a heavier computational burden on the computer that runs the genetic algorithm.","The present invention has been described in particular detail with respect to one possible embodiment. Those of skill in the art will appreciate that the invention may be practiced in other embodiments. First, the particular naming of the components, capitalization of terms, the attributes, data structures, or any other programming or structural aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names, formats, or protocols. Further, the system may be implemented via a combination of hardware and software, as described, or entirely in hardware elements. Also, the particular division of functionality between the various system components described herein is merely exemplary, and not mandatory; functions performed by a single system component may instead be performed by multiple components, and functions performed by multiple components may instead performed by a single component.","Some portions of the above description present the feature of the present invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. These operations, while described functionally or logically, are understood to be implemented by computer programs. Furthermore, it has also proven convenient at times, to refer to these arrangements of operations as modules or code devices, without loss of generality.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system memories or registers or other such information storage, transmission or display devices.","Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMS), random access memories (RAMS), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), each coupled to a computer system bus. Furthermore, the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general-purpose systems may also be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It is appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein, and any references to specific languages are provided for disclosure of enablement and best mode of the present invention.","Finally, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
