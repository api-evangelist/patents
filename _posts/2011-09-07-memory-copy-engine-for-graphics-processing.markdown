---
title: Memory copy engine for graphics processing
abstract: The example techniques described in this disclosure may be directed to interaction between a graphics processing unit (GPU) and a system memory. For example, the GPU may include a memory copy engine that handles tasks related to accessing data that is stored or is to be stored in the system memory. In addition, in some examples, the memory copy engine may perform additional tasks such as modification tasks to increase the performance of the GPU.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08941655&OS=08941655&RS=08941655
owner: QUALCOMM Incorporated
number: 08941655
owner_city: San Diego
owner_country: US
publication_date: 20110907
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to graphics processing units (GPUs), and more particularly, to interaction between a GPU and memory.","A device that generates graphics content generally includes a graphics processing unit (GPU). The GPU may process graphics data to generate pixel values for the pixels on a display. Part of the processing of graphics data may require the GPU to access its local memory or system memory. For example, at least a portion of the graphics data may be stored in system memory, and the GPU may retrieve the graphics data from system memory.","In general, this disclosure describes techniques for accessing graphics data stored in memory. In some examples, the techniques may include performing data modification tasks, independently from the execution of one or more programs on a graphics processing unit (GPU). For instance, the techniques of this disclosure may allow the GPU to separate tasks related to memory management and data modification from tasks related to data processing, and allow for independent execution of these tasks. As one example, the techniques described in this disclosure may allow the GPU to retrieve data from memory or store data in memory, and in parallel with performing such functions, execute instructions of one or more programs. As another example, the techniques described in this disclosure may allow the GPU to convert data into a more suitable form, which the executed instructions utilize, independently from the execution of the instructions.","In one example, this disclosure describes an apparatus that includes a system memory that is accessible via a system bus, and a graphics processing unit (GPU). The GPU includes a local memory, a memory copy engine, and a shader processor. The memory copy engine is operable to retrieve first data from the system memory via the system bus and store the first data into the local memory, and retrieve second data from the local memory and store the second data into the system memory via the system bus. The shader processor is operable to retrieve the first data from the local memory, process the first data to generate the second data, and store the second data into the local memory.","In another example, this disclosure describes a method that includes retrieving, with a memory copy engine of a graphics processing unit (GPU), first data from system memory that is external to the GPU via a system bus, and storing, with the memory copy engine of the GPU, the first data into local memory of the GPU. The method further includes retrieving, with a shader processor of the GPU, the first data from the local memory, processing, with the shader processor of the GPU, the first data to generate a second data, and storing, with the shader processor of the GPU, the second data into the local memory. The method also includes retrieving, with the memory copy engine of the GPU, the second data from the local memory, and storing, with the memory copy engine of the GPU, the second data into the system memory via the system bus.","In another example, this disclosure describes an apparatus that includes a system memory that is accessible via a system bus, and a graphics processing unit (GPU) that is external to the system memory. The GPU includes a local memory. In this example, the GPU also includes means for retrieving, with a memory copy engine of the GPU, first data from the system memory that is external to the GPU via the system bus, and means for storing, with the memory copy engine of the GPU, the first data into the local memory. The GPU also includes mean for retrieving, with a shader processor of the GPU, the first data from the local memory, means for processing, with the shader processor of the GPU, the first data to generate a second data, and means for storing, with the shader processor of the GPU, the second data into the local memory. The GPU further includes means for retrieving, with the memory copy engine of the GPU, the second data from the local memory, and means for storing, with the memory copy engine of the GPU, the second data into the system memory via the system bus.","In another example, this disclosure describes a non-transitory computer-readable storage medium. The non-transitory computer-readable storage medium includes instructions that cause a graphics processing unit (GPU) to retrieve, with a memory copy engine of the GPU, first data from system memory that is external to the GPU via a system bus, and store, with the memory copy engine of the GPU, the first data into local memory of the GPU. The instructions further cause the GPU to retrieve, with a shader processor of the GPU, the first data from the local memory, process, with the shader processor of the GPU, the first data to generate a second data, and store, with the shader processor of the GPU, the second data into the local memory. The instructions also cause the GPU to retrieve, with the memory copy engine of the GPU, the second data from the local memory, and store, with the memory copy engine of the GPU, the second data into the system memory via the system bus.","The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.","In general, this disclosure relates to interaction between a graphics processing unit (GPU) and memory, such as system memory of a device that houses the GPU. The techniques of this disclosure are generally applicable to video devices such as media players, set-top boxes, wireless handsets such as mobile telephones, personal digital assistants (PDAs), desktop computers, laptop computers, gaming consoles, display devices, televisions, and the like.","Graphics processing systems generally include the GPU and the system memory. The GPU includes a shader processor and local memory, which may at times be shared with other processors external to the GPU or even part of the GPU. The shader processor, sometimes referred to as a shader core, may be configured to execute various types of graphics related programs such as a geometry shader, a vertex shader, and a fragment shader. In some examples, the shader processor may be configured to execute programs in addition to programs related to graphics processing.","For example, a GPU may be configured for quickly and efficiently performing multiple tasks in parallel. Some applications may utilize the efficient parallel processing capabilities of the GPU for general purpose processing. In this sense, the GPU may function as a general purpose GPU (GPGPU). Programs for general purpose processing that execute on the shader processor of the GPU may be referred to as compute shaders. Graphics related programs, such as vertex shaders, pixel shaders, and fragment shaders, and general purpose processing programs, such as compute shaders, may be commonly referred to as shader programs to indicate that such programs are executed by the shader processor of the GPU. In other words, the term \u201cshader programs\u201d should not be considered limited to only programs that perform graphics related functions.","In some of the examples described in this disclosure, a GPU may also include a memory copy engine, in addition to the shader processor and the local memory. The memory copy engine may be implemented as hardware, software executing on hardware, or a combination thereof. The memory copy engine may be operable to handle memory related tasks of retrieving data from and storing data into a system memory. In this manner, instructions related to memory management of the system memory may be separated from instructions that are not related to memory management. This may allow the shader processor to execute instructions of the shader programs in parallel with the memory copy engine executing instructions for storage of data into or retrieval of data from the system memory. Parallel execution of instructions may refer to simultaneous execution of instructions by the shader processor and the memory copy engine, as well as, execution of instructions by the shader processor that overlap with the execution of instructions by the memory copy engine.","The tasks performed by the memory copy engine may be controlled by various mechanisms. For example, a command processor may schedule tasks of the memory copy engine and the shader processor. Alternatively, the shader processor may schedule the tasks of the memory copy engine. In some other examples, a device external to the GPU, such as a central processing unit (CPU), may schedule tasks of memory copy engine and the shader processor.","In some examples, the memory copy engine may execute instructions in addition to executing copy instructions. These additional instructions may be referred to as modification instructions. The modification instructions may modify the data into a more suitable form that the shader programs can utilize, or modify where the data is stored for ease of access, as two examples. In this manner, the shader processor is further freed to perform arithmetic operations, and other operations can be offloaded to the memory copy engine.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["10","10","10","12","14","16","18","20","22","22","10"]},"GPU  may be operable to implement various types of graphics pipelines. For example, GPU  may implement a graphics pipeline similar to that described in the OpenGL ES 2.0 specification, which was released on Apr. 24, 2008 by the Khronos Group, and is publicly available. As another example, aspects of this disclosure may be implemented in Microsoft\u00ae DirectX (DX) 10 and 11 application programming interfaces (APIs) that define a graphics pipeline. The graphics pipeline may be implemented as software executing on GPU , firmware executing on GPU , one or more hardware units, such as fixed-function graphics units , formed on GPU , or a combination thereof. GPU  may implement other types of graphics pipelines as well, and aspects of this disclosure should not be considered limited to the graphics pipeline of the OpenGL ES 2.0 specification, or the DX 10 and 11 APIs. Furthermore, there may be other types of graphics algorithms that may be implemented by GPU . For example, GPU  may implement ray-tracing instead of or in addition to the Open GL ES 2.0 and DX 10 and 11 APIs.","In addition to implementing graphics pipelines, GPU  may be operable to implement non-graphics related functions. For example, GPU  may be configured to support massive parallel processing functionality, which is suitable for graphics related functions that require quick and efficient processing of multiple tasks in parallel for generating pixel values for relatively large number of pixels of a display. For some non-graphics related applications, it may be considered desirable to exploit this quick and efficient parallel processing of GPU . In this sense, GPU  may be considered as a general purpose GPU (GPGPU) that is operable to perform both graphics and non-graphics related functions. As described in more detail, these graphics and non-graphics related functions may be defined by programs executing on GPU .","Command processor  may be the controller of GPU . For instance, command processor  may schedule the tasks that are to be performed by shader processor  and memory copy engine . As one example, shader processor  may perform operations, such as arithmetic operations, on blocks of data stored in system memory (not shown). In this example, command processor  may instruct memory copy engine  to retrieve a first block of data from system memory, and store the first block of data in local memory . Command processor  may instruct shader processor  to retrieve the first block of data from local memory , and perform functions on the first block of data. In some examples, while shader processor  is performing operations on the first block of data, command processor  may instruct memory copy engine  to retrieve a second block of data from system memory, in parallel with shader processor  performing operations on the first block of data.","For example, command processor  may be considered as pipelining the tasks performed by memory copy engine  and shader processor . For instance, command processor  may instruct memory copy engine  to perform a next copy instruction (e.g., retrieve data from or store data to the system memory), before memory copy engine  has completed performing the current copy instruction. In this example, after memory copy engine  completes the current copy instruction, memory copy engine  is ready to immediately perform the next copy instruction.","In some examples, memory copy engine  may provide an indication to shader processor  upon completion of a memory copying task. For instance, memory copy engine  may pre-store a next block of data that is to be used by shader processor  while shader processor  is performing tasks on a current block of data. In this example, memory copy engine  may indicate to shader processor  that the next block of data is already stored in local memory , and shader processor  may retrieve the next block of data from local memory  for processing.","In this manner, memory copy engine  may synchronize its operations with those of shader processor . For example, because memory copy engine  provides an indication to shader processor  when the data is available for processing, shader processor  may not attempt to retrieve and process data before the data is available for retrieval. This may potentially cause shader processor  to remain idle while shader processor  waits for the indication from memory copy engine . However, this idle time may be less than the amount of time it would take shader processor  to handle all memory related tasks because memory copy engine  executes its copy instructions while shader processor  executes its arithmetic operations.","In alternate examples, command processor  may monitor when memory copy engine  completed its tasks, and provide the indication that memory copy engine  completed its tasks to shader processor . In other words, command processor  may maintain the proper synchronization between the functions that are performed by shader processor  and the functions that are performed by memory copy engine .","In some alternate examples, shader processor  may perform the functions of command processor , and command processor  may not be necessary in these examples. In some other alternate examples, GPU  may receive scheduling information from an external device such as a central processing unit (CPU). In these examples, command processor  may not be necessary. However, even in either of these alternate examples, GPU  may still include command processor  for performing other functions. Also, in either of these alternate examples, memory copy engine  may provide an indication to shader processor  when it completes its tasks to synchronize the instructions executed by shader processor  and the instructions executed by memory copy engine .","Fixed-function graphics units  may be hardware units that may be hardwired to perform specific tasks. For example, fixed-function graphics units  may include one or more of a primitive assembly unit and a rasterization unit, although fixed-function graphics units  may include additional units. The primitive assembly unit of fixed-function graphics units  may assemble primitives, such as triangles or other types of polygons, based on vertex coordinates received from shader processor . The rasterization unit of fixed-function graphics units  may determine line equations for the assembled polygons, and determine which pixels reside within the assembled polygons based on the determined line equations. Such functionality of fixed-function graphics units  may not require operational flexibility, and may therefore be hardwired to perform particular functions.","Whereas fixed-function graphics units  may not provide operational flexibility, shader processor  may provide extensive operational flexibility. For example, shader processor , which also may be referred to as a shader core, is operable to execute programs such as both graphics and non-graphics related programs. The programs executed by shader processor  define the functions which are performed by shader processor .","For example, shader processor  is operable to execute graphics-related programs such as geometry shaders, vertex shaders, and fragment shaders. Geometry shaders receive graphics data of a single polygon, and may divide the single polygon into multiple polygons. Vertex shaders may receive the multiple polygons from the geometry shaders and perform functions such as coordinate transform and lighting on the vertices of the received polygons. Fragment shaders may determine pixel values of the pixels that are displayed on a display.","In some examples, shader processor  may also be operable to execute non-graphics related programs. For example, the massive parallel processing capabilities of GPU  may promote efficient execution of certain types of non-graphics related programs that perform multiple parallel functions. These types of non-graphics related programs may be referred to as compute shaders. The term \u201cshader program\u201d may refer generally to any program that executes on shader processor . For example, the term shader program refers to geometry shaders, vertex shaders, fragment shaders, and compute shaders.","The shader programs, executing on shader processor , perform operations such as arithmetic operations on data stored in system memory. For instance, shader processor  may include a plurality of arithmetic logic units (ALUs) that are programmable to perform desired arithmetic operations. The term \u201cdata\u201d is used to refer to graphics related data such as pixel values (e.g., color values, opacity values, or other such attributes of pixels), as well as non-graphics related data (e.g., data that is used by a compute shader). The system memory may also store data generated by the shader programs such as the results of the arithmetic operations. System memory may be memory that is external to GPU , and requires system bus  for data access.","In accordance with aspects of this disclosure, memory copy engine  may handle memory related tasks that require interaction with the system memory. Memory copy engine  may be implemented as hardware, software executing on hardware, or a combination thereof. For instance, as a non-limiting example, memory copy engine  may be a program that performs very specific functions and is designed in accordance with the OpenGL or OpenCL standard, when implemented as software.","For purposes of illustration, memory copy engine  is described in the context of being a hardware unit. For instance, memory copy engine  may be formed as a DSP, an ASIC, a FPGA, or other equivalent integrated circuitry. In some examples, memory copy engine  may be formed as discrete logic circuitry or discrete analog circuitry. The examples above for a hardware unit are provided for illustration purposes and should not be considered as limiting.","As one example, memory copy engine  may execute copy instructions such as instructions to retrieve data from or store data into the system memory. For instance, memory copy engine  may execute instructions to retrieve data from the system memory and store the retrieved data into local memory  for use by the shader programs executing on shader processor . Memory copy engine  may also execute instructions to retrieve data stored in local memory  and store the retrieved data into the system memory.","As illustrated in , memory copy engine  may be coupled to memory interface . Memory copy engine  may retrieve data from or store data into the system memory via memory interface . In this sense, memory interface  may function as an intermediary between the components of GPU  and the system memory. For example, memory interface  may include components that allow memory interface  to output data via system bus , and receive data via system bus .","In example techniques described in this disclosure, shader processor  may be able to execute instructions in parallel with memory copy engine  executing instructions for storage of data to or retrieval of data from the system memory. For example, shader processor  may execute instructions while memory copy engine  is executing instructions for storage of data to or retrieval of data from the system memory. The parallel execution of shader processor  and memory copy engine  may refer to simultaneous execution or overlapping execution of instructions by shader processor  and memory copy engine .","It should be understood that the instructions executed by shader processor  and memory copy engine , either in parallel or otherwise, need not be the same instructions. In general, memory copy engine  may execute instructions related to memory access, which shader processor  may not execute. Also, although the techniques described in this disclosure allow memory copy engine  and shader processor  to execute instructions at the same time, aspects of this disclosure are not so limited. For instance, memory copy engine  and shader processor  need not execute instructions at the same time in every example. Rather, memory copy engine  and shader processor  are capable of executing instructions at the same time.","In some examples, because memory copy engine  may execute instructions for storage of data to or retrieval of data from the system memory, shader processor  may be configured to not retrieve data from the system memory or store data into the system memory. In other words, accessing the system memory may be completely offloaded from shader processor , and such accessing may only be performed by memory copy engine , in this example. In this manner, shader processor  is free to execute the shader program or programs while memory copy engine  retrieves and stores data. This frees up shader processor  from not needing to execute instructions for data retrieval or storage and is free to execute instructions of the shader program or programs simultaneously with the retrieval and storage of data functions performed by memory copy engine . In alternate examples, it may still be possible for shader processor  to access the system memory.","In examples of this disclosure, shader processor  may still execute instructions for storing data generated by the shader programs into local memory  and instructions for retrieving data from local memory . For example, memory copy engine  may execute copy instructions related to data storage and retrieval, and while memory copy engine  is executing such copy instructions, shader processor  may continue to execute data processing instructions, at the same time (e.g., simultaneously), such as data processing instructions of the shader programs. One example of the data processing instructions may be arithmetic instructions because such instructions are generally for performing arithmetic operations on the data.","Offloading instructions related to accessing the system memory to memory copy engine  may further promote the processing efficiencies of GPU . For example, conventional techniques relied on shader processor  to handle all instructions related to accessing memory, e.g., both local memory  and the system memory. For instance, in these conventional techniques, shader processor  would be coupled to memory interface  via a texture fetch pipeline. In accordance with these conventional techniques, shader processor  would access system memory via the texture fetch pipeline and memory interface .","However, while instructions of the shader programs for accessing local memory  may execute asynchronously with other instructions of the shader programs, instructions of the shader programs for accessing the system memory may not execute asynchronously. Rather, instructions for accessing the system memory, on shader processor , may execute synchronously with other instructions of the shader programs. For instructions for accessing the system memory, in the conventional techniques, shader processor  may remain idle, and unable to execute other instructions, while shader processor  waits for data to be stored on to the system memory or retrieved from the system memory.","With memory copy engine , the techniques described in this disclosure may allow shader processor  to execute data processing instructions for the data in parallel with, e.g., substantially simultaneously with, the execution of the memory copy instructions by memory copy engine , e.g., data transfer operations between the system memory and GPU , and with increased performance as shader processor  no longer needs to execute the memory copy instructions. The slots for the instructions of the shader programs, previously used for memory copy instructions, may be freed for instructions to be executed by shader processor  for performing actual arithmetic operations, e.g., executing data processing instructions. With memory copy engine , shader processor  is not required to remain idle and unable to execute other instructions, while data is copied into the system memory or retrieved from the system memory. Instead, memory copy engine  handles these tasks, allowing shader processor  to continue to execute data processing instructions.","As illustrated, memory copy engine  is a separate, independent processing unit from shader processor , although it may be possible for shader processor  to control memory copy engine . For instance, while memory copy engine  and shader processor  may be formed within GPU , memory copy engine  and shader processor  may not be formed within one another. In other words, in some examples, the functions performed by memory copy engine  are functions that shader processor  does not need to perform. For instance, shader processor  may still be able to access the system memory for storage and retrieval; however, with memory copy engine  performing such tasks, shader processor  may be freed from performing such tasks. The arithmetic operations that are to be performed by the shader programs are localized to within shader processor . The operations related to accessing the system memory are localized to within memory copy engine . In some examples, memory copy engine  may perform only functions related to accessing the system memory; however, aspects of this disclosure are not so limited as described below.","In general, memory copy engine , shader processor , and local memory  are separate from one another and on a chip of GPU . For example, where GPU  is its own integrated circuit (e.g., a chip), memory copy engine , shader processor , and local memory  are distinct components of the GPU  chip (e.g., separate from one another and on the chip of GPU ). In some other examples, memory copy engine  and shader processor  may be separate from one another, and part of GPU ; however, local memory  may be shared with other devices.","There may be various ways to cause memory copy engine  to perform the example functions described above. In general, the example techniques to cause memory copy engine  to perform the example functions may allow memory copy engine  to pre-store data into local memory  so that it is available for processing by the shader programs executing on shader processor  when such shader programs require the data. For instance, memory copy engine  may be capable of sequentially storing vertex data in local memory  before shader processor  utilizes the vertex data. Also, the example techniques to cause memory copy engine  to perform the example functions may allow memory copy engine  to store data from local memory  into the system memory while shader processor  is executing other instructions.","As one example, command processor  may schedule memory copy instructions that are executed by memory copy engine  simultaneously with data processing instructions that are executed by shader processor . For example, command processor  may cause memory copy engine  to retrieve a first block of source data from the system memory and store the first block of source data in local memory . A block of data may be a predetermined amount of data, e.g., attribute values for 10 pixels as one example for illustration purposes only. Source data may be referred to as data retrieved from the system memory.","Command processor  may then cause shader processor  to retrieve the first block of source data from local memory  and process the first block of source data to generate a first block of results data. The first block of results data may be a block of data generated by shader processor  after shader processor  processes a block of source data.","While shader processor  is processing the first block of source data (e.g., at the same time), command processor  may cause memory copy engine  to execute instructions to retrieve a second block of source data from the system memory, and store the second block of source data into local memory . After shader processor  completes processing the first block of source data, shader processor  may then store results of the processing of the first block of source data, e.g., a first block of results data, into local memory , and immediately begin processing the second block of source data from local memory . In this manner, if local memory  includes sufficient storage capability to store data retrieved from the system memory, e.g., source data, and store processed data processed by shader processor , e.g., results data, at the same time, memory copy engine  may execute copy instructions at the same time that shader processor  executes data processing instructions. In this manner, command processor  may queue the memory copy operations that are performed by memory copy engine .","As another example, shader processor  may perform some or all of the example functions of command processor  described in the previous example. In these examples, command processor  may not be necessary because shader processor  may perform such functions of command processor . However, GPU  may still include command processor , if command processor  is needed for performing other tasks.","For example, shader processor  may issue a command to memory copy engine  that instructs memory copy engine  to execute instructions to retrieve a next block of source data, while shader processor  is processing a current block of source data. Then, after completion of the processing of the current block of source data, shader processor  may store the results data (e.g., the results of the processing of the current block of source data) in local memory , and being processing the source data for the next block, which memory copy engine  pre-stored in local memory . Shader processor  may also instruct memory copy engine  to retrieve the results data from local memory  and store the results data into the system memory.","As yet another example, command processor  may operate as a command sequencer. In this example, command processor  may receive instructions that are to be performed by GPU  from another device, such as a central processing unit (CPU). Command processor  may divide the received instructions into instructions that are to be performed by shader processor  and instructions that are to be performed by memory copy engine . For example, command processor  may divide the instructions into arithmetic operations that are to be performed by shader processor  and into memory interaction operations that are to be performed by memory copy engine . Command processor  may then forward the instructions for performing arithmetic operations to shader processor  and forward the instructions for performing memory interaction operations to memory copy engine  as appropriate.","For example, command processor  may forward instructions to shader processor  that cause shader processor  to retrieve a block of data from local memory  and process the data. Command processor  may forward instructions to memory copy engine  to retrieve a block of source data from the system memory, and shader processor  and memory copy engine  may execute their respective instructions at the same time. In this manner, the source data that shader processor  will process next is pre-stored in local memory . Also, command processor  may forward instructions to memory copy engine  to retrieve the data resulting from the operations performed by shader processor  from local memory , and store such data into the system memory.","As a further example, another device, such as the CPU, may transmit instructions directly to each one of shader processor  and memory copy engine . For example, the CPU may transmit all instructions related to interactions with the system memory to memory copy engine , and all instructions related to arithmetic operations to shader processor .","In these examples, command processor  may not be necessary because the CPU may provide instructions directly to shader processor  and memory copy engine . However, GPU  may still include command processor , if command processor  is needed for performing other tasks.","In the preceding examples (e.g., where GPU  includes command processor  or where GPU  does not include command processor ), memory copy engine  may pre-store data that will be subsequently used by shader processor . In some examples, memory copy engine  may provide an indication to shader processor  that the next data that shader processor  should use is already stored in local memory  to synchronize the instructions of memory copy engine  and shader processor . Shader processor  may then retrieve the pre-stored data from local memory , process the data, and generate results data that is the result of the processing of the data. Shader processor  may then store the results data in local memory . In some examples, for instance where the results data is no longer needed by shader processor , memory copy engine  may retrieve the results data from local memory  and store the results data in the system memory. Even in instances where the results data is needed for subsequent processing, it may be possible for memory copy engine  to retrieve the results data from local memory  and store the results data in system memory to free memory space on local memory .","The example techniques described in this disclosure may be beneficial in various types of systems. As a few examples, the techniques described in this disclosure may be applicable for optimization of binning-based rendering, image processing, border area copying (e.g., copying of parts of neighboring blocks or tiles), and queues-based communication. In general, the example techniques described in this disclosure may be beneficial to any shader processor application that requires transfer of data between GPU  and the system memory.","As an example, such functionality may be beneficial for executing a shader program that performs filtering operations on a generated image, although aspects of this disclosure should not be considered so limiting. For instance, the shader program that performs filtering operations may perform such filtering operations on a block-by-block or tile-by-tile basis on the generated image. In this example, memory copy engine  may pre-store the next block or tile, while shader processor  is performing tasks on the current block or tile. It should be understood that aspects of this disclosure may be beneficial for situations in addition to situations where shader processor  executes a shader program that performs filtering operations. The ability of memory copy engine  to pre-store data may be beneficial across a wide variety of different types of shader programs.","As another example, when performing filtering operations, the functionality of memory copy engine  may allow for loading, in addition to the next block or tile of the source image, parts of its neighboring blocks or tiles, as required by the filter. In some examples, when shader programs need to store data outside the current block or tile into local memory , the operation may result in redundancy or increased complexity. Memory copy engine  may not be restricted in this way. For example, memory copy engine  may be able to retrieve a larger portion of data without redundancy or increased complexity.","Moreover, in some examples, these shader programs may be required to load data with a rectangular footprint (e.g., data that must be stored in storage locations of local memory that form a rectangular area). Memory copy engine  may not be required to load data with such restrictions. In some examples, memory copy engine  may be configured such that it may be able to load data with non-rectangular footprints. In this manner, memory copy engine  may reduce the redundancy and complexity.","Although the previous examples are described with memory copy engine  performing tasks related to accessing system memory, aspects of this disclosure are not so limited. In some examples, memory copy engine , instead of or in addition to performing tasks related to accessing system memory, may perform modification tasks. Modification tasks may refer to modifying data stored in the system or data that is to be stored in system memory to data into a more usable form. Modification tasks may also refer to modifying locations where the data is stored.","As one example of modification tasks where memory copy engine  modifies locations where the data is stored, memory copy engine  may gather and compact data. For instance, data that is shared between different shader programs may be sparsely populated. Sparsely populated data may refer to a relatively small amount of data that is stored across a relatively large storage portion. In these instances, memory copy engine  may compact the data so that it is not stored across a relatively large portion of the system memory or local memory . Instead, the sparsely populated data may be rewritten to a smaller portion of memory. This compaction of data may allow memory copy engine  to access the data more quickly. Also, because shader processor  is unaware of such data compaction, there may be no need to modify the instructions of the shader programs that utilize the data for arithmetic operations.","As a few examples where memory copy engine  modifies data stored in system memory or data that is to be stored in system memory, memory copy engine  may convert a linear block of data into a tiled block of data, or vice-versa for storage into local memory  or storage into the system memory. Memory copy engine  may also shuffle data in the x, y direction of a matrix, convert red-green-blue (RGB) colors to luma and chrominance components (YUV) colors, or vice-versa, encode RGB or YUV format into another format, as well as any other modification useful for shader processor . For example, memory copy engine  may also execute modification instructions that convert the data stored in local memory  into another form that is useable by some other shader program. Memory copy engine  may also pack or unpack compressed data structures or image formats when retrieving data from system memory and storing the data into local memory , as well as pack or unpack compressed data structures or image formats when retrieving data from local memory  and storing the data into the system memory.","For instance, a compute shader may generate results data for a vertex shader. However, the data format of the results data may not be the correct format for the vertex shader. In this example, memory copy engine  may modify the format of the results data, from the compute shader, into a format suitable for the vertex shader. Memory copy engine  may also modify where the data is stored (e.g., copy data from one location within local memory  to another location within local memory ). In terms of performance, this may be beneficial because memory copy engine  may place data in locations of local memory  that shader processor  can access efficiently by using fast access patterns that shader processor  has to local memory .","As more examples, memory copy engine  may also perform modification tasks such as conversion of linked lists to linear format, planar to padded YUV, or vice versa, encoded HDR (High Dynamic Range) or RGB formats to FP16 or FP32, addition or removal of padding, data alignment, compression or decompression of data, 2D wavelet transform, data structure parsing (such as list and tree structures), and like. Memory copy engine  may also provide multiple copies of the data. For example, when storing data into the system memory, memory copy engine  may store multiple copies of the data for protection of the data from corruption. These are various examples of the modification tasks that memory copy engine  can perform, provided for purposes of illustration, and aspects of this disclosure should not be considered limited to the examples above.","In this manner, some of the modification instructions that may have been executed by shader processor  may be offloaded to memory copy engine . This may allow shader processor  to only execute data processing instructions such as arithmetic operations, and memory copy engine  may perform any copying and modifying tasks.","Local memory  may be formed as cache, registers, or any form in which data can be stored. The components of GPU  may be able to retrieve data from or store data into local memory  more quickly and with less power consumption than retrieving data from or storing data into the system memory. For example, the components of GPU  may access local memory  without requiring extensive scheduling and without a separate bus. However, accessing the system memory may require access scheduling which may be time consuming. For example, GPU  may be able to access the system memory during available timeslots when there is no data transferring along system bus . Accessing system memory via system bus  may consume power.","Moreover, although local memory  is illustrated as being internal to GPU , aspects of this disclosure are not so limited. In some examples, GPU  may be part of a larger integrated circuit. This integrated circuit may include additional processing units such as a display processor, video processor, and the like. In these examples, local memory  may potentially be external to GPU , and may function as a local memory for the various processing units within the integrated circuit. In this sense, local memory  may be considered as a shared local memory. However, even in these examples, the components of GPU  may be able to access local memory  quicker and with less power consumption as compared to accessing the system memory via system bus . Moreover, in any of these examples, GPU  may still be viewed as comprising local memory  because local memory  functions as the local memory for GPU . For instance, even where local memory  is external to GPU , local memory  may still be considered to be functionally a part of GPU  because local memory  provides local memory storage and retrieval to the components of GPU .",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2","b":["26","26","26","28","10","30","32","34","36","38"]},"GPU  of device , as illustrated in , may be identical or substantially similar to GPU  of . For example, GPU  includes memory copy engine , which is identical to or substantially similar to memory copy engine  of . For instance, memory copy engine  may perform tasks that require accessing system memory , as well as, in some examples, perform data formatting tasks. For purposes of brevity, the example functionality of GPU  and memory copy engine  is not discussed further in the example of .","Processor  may be the central processing unit (CPU) of device , and may perform the functions of the CPU described above in . Examples of processor  include, but are not limited to, a DSP, a general purpose microprocessor, an ASIC, a FPGA, or other equivalent integrated or discrete logic circuitry. Although processor  and GPU  are illustrated as separate units, aspects of this disclosure are not so limited. In some examples, processor  and GPU  may be formed in a common integrated circuit (IC). Processor  and GPU  may each include a single processor core or multiple processor cores.","Device  may include additional modules or units not shown in  for purposes of clarity. For example, device  may include a speaker and a microphone, neither of which are shown in , to effectuate telephonic communications in examples where device  is a mobile wireless telephone, or a speaker where device  is a media player. Furthermore, the various modules and units shown in device  may not be necessary in every example of device . For example, user interface  and display  may be external to device  in examples where device  is a desktop computer or other device that is equipped to interface with an external user interface or display.","System memory  may be the overall memory for device , but not the local memory for GPU  (e.g., local memory ). For example, system memory  may store data produced by GPU , which may be referred to as results data because the results data may be the resulting from the tasks performed by shader processor  of GPU . Similarly, system memory  may store data that is to be used by GPU , which may be referred to as source data because the source data may be the data that shader processor  of GPU  uses to perform tasks. System memory  may also store pre-complied and\/or compiled code for the shader programs that are executed by shader processor  of GPU . The various components of device , such as processor  and GPU , may access system memory  via system bus .","Examples of system memory  include, but are not limited to, a random access memory (RAM), a read only memory (ROM), an electrically erasable programmable read-only memory (EEPROM), CD-ROM or other optical disk storage, magnetic disk storage, or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer, a processor, or a GPU. In some example system memory  may comprise one or more computer-readable storage media, such as a computer-readable storage device. For instance, in some example implementations, system memory  may include instructions that cause processor  and\/or GPU  to perform the functions ascribed to processor  and GPU  in this disclosure.","System memory  may, in some examples, be considered as a non-transitory storage medium. The term \u201cnon-transitory\u201d may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. However, the term \u201cnon-transitory\u201d should not be interpreted to mean that system memory  is non-movable. As one example, system memory  may be removed from device , and moved to another device. As another example, a storage device, substantially similar to system memory , may be inserted into device . In certain examples, a non-transitory storage medium may store data that can, over time, change (e.g., in RAM).","Examples of user interface  include, but are not limited to, a trackball, a mouse, a keyboard, and other types of input devices. User interface  may also be a touch screen and may be incorporated as a part of display . Transceiver module  may include circuitry to allow wireless or wired communication between device  and another device or a network. Transceiver module  may include modulators, demodulators, amplifiers and other such circuitry for wired or wireless communication.","GPU  may output the pixel values for an image that is to be displayed on display . In some examples, GPU  may output the pixel values directly to display . In some alternate examples, GPU  may output the pixel values of the image to display buffer . Display buffer  may temporarily store the pixel values of image until the entire image is rendered. Display buffer  may be considered as an image frame buffer. Display buffer  may then transmit the rendered image to be displayed on display . Display  may comprise a liquid crystal display (LCD), an organic light emitting diode display (OLED), a cathode ray tube (CRT) display, a plasma display, or another type of display device.",{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":"10"},"Memory copy engine  of GPU  may retrieve first data from system memory  that is external to GPU  via system bus  (). The first data may be source data, which refers to data stored in system memory . Memory copy engine  may store the first data into local memory  (). Memory copy engine  may not need to access system bus  to store the first data into local memory . In some examples, memory copy engine  may modify the first data and store the modified first data into local memory.","Shader processor  of GPU  may retrieve the first data from local memory  (), and may do so without accessing system bus . Shader processor  may process the first data to generate the second data (). For example, shader processor  may execute instructions of shader programs that perform arithmetic operations on the first data to generate the second data. The second data may be viewed as results data to indicate that it is the data resulting from the operations of shader processor . Shader processor  may store the second data into local memory  (). In some examples, shader processor  may not be capable of accessing system memory , and only memory copy engine  may be capable of accessing system memory , although aspects of this disclosure are not so limited. Also, in some examples, memory copy engine  may modify the second data and store the modified second data into the system memory.","Memory copy engine  may retrieve the second data from local memory  (). Memory copy engine  may store the second data into system memory  via system bus  (). In some examples, as described above, memory copy engine may also be operable to modify data. For example, memory copy engine  may modify the first data stored in local memory  into data useable by a shader program executing on shader processor . As another example, memory copy engine  may modify the second data stored in local memory  into data usable by a shader program executing on shader processor .","In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored as one or more instructions or code on a computer-readable medium. Computer-readable media may include computer data storage media. Data storage media may be any available media that can be accessed by one or more computers or one or more processors to retrieve instructions, code and\/or data structures for implementation of the techniques described in this disclosure. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and Blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","The code may be executed by one or more processors, such as one or more digital signal processors (DSPs), general purpose microprocessors, application specific integrated circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Accordingly, the term \u201cprocessor,\u201d as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. Also, the techniques could be fully implemented in one or more circuits or logic elements.","The techniques of this disclosure may be implemented in a wide variety of devices or apparatuses, including a wireless handset, an integrated circuit (IC) or a set of ICs (i.e., a chip set). Various components, modules or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as described above, various units may be combined in a hardware unit or provided by a collection of interoperative hardware units, including one or more processors as described above, in conjunction with suitable software and\/or firmware.","Various examples have been described. These and other examples are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]}]},"DETDESC":[{},{}]}
