---
title: Data integration in service oriented architectures
abstract: A system, method and program product for transferring structured and unstructured data in a service oriented architecture (SOA) infrastructure. A method is disclosed that includes: receiving a request for a synchronization at a service orchestration engine (SOE), wherein the synchronization includes a transfer of structured meta-data from a first node to a second node and a transfer of unstructured file data from a first file node to a second file node; creating an entry in a routing table to track the synchronization; receiving the structured meta-data at the SOE from the first node and transferring the structured meta-data to the second node; and orchestrating a peer-to-peer data transfer from the first file node to the second file node, including communicating with file handling agents at the first and second file handling nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930425&OS=08930425&RS=08930425
owner: International Business Machines Corporation
number: 08930425
owner_city: Armonk
owner_country: US
publication_date: 20110317
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY CLAIM","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention is a continuation application and claims priority to co-pending U.S. patent application Ser. No. 12\/362,058 filed on Jan. 29, 2009, entitled \u201cDATA INTEGRATION IN SERVICE ORIENTED ARCHITECTURES,\u201d the content of which is hereby incorporated by reference.","The invention relates generally to managing data communicated between applications, and more particularly to a system and method of managing structured and unstructured data being communicated among applications in a service oriented architecture.","It is often necessary for applications operating in a service oriented architecture (SOA) to exchange data that includes unstructured information (e.g., documents, files, etc.) and structured information (e.g., meta-data) that describes the unstructured information. For example, in a Product Lifecycle Management environment, there may be a need to exchange product overviews (i.e., structured data e.g., in an XML format) and associated design and development documents (i.e., unstructured data in computer aided design CAD files).","Current SOA software products are primarily suited to handle synchronous exchanges of structured data sets of limited size. Such approaches ensure a high Quality of Service. Unfortunately, there are situations in which the data to be transferred combines large volumes of both structured and unstructured data. In addition, it is not unusual for unstructured data to be distributed across a network, e.g., close to the users. Accordingly, there may be hundreds or thousands of nodes involved. Furthermore, current products are not suited to support the transformation of file formats or to provide restart capabilities on an exchange flow that has been partially processed.","Accordingly, a need exists for a solution that allows for the transfer of structured and unstructured data in a SOA infrastructure.","The present invention addresses the above-mentioned problems, as well as others, by providing an SOA infrastructure that can handle the transfer of structured and unstructured data. In a first aspect, the invention provides a service orchestration engine (SOE) for use within a service oriented architecture (SOA) infrastructure, comprising: a transfer facility that receives structured data from a first node and transfers the structured data to a second node; and a file orchestrator that orchestrates peer-to-peer unstructured data transfers between a plurality of file nodes in the SOA infrastructure.","In a second aspect, the invention provides a computer program product stored on a computer readable storage medium, which when executed by a computing device within a service oriented architecture (SOA) infrastructure, comprises: program code that receives structured data from a first node and transfers the structured data to a second node; and program code that orchestrates peer-to-peer unstructured data transfers among a plurality of file nodes in the SOA infrastructure.","In a third aspect, the invention provides a service orchestration engine (SOE) for use within a service oriented architecture (SOA) infrastructure, comprising: a transfer facility that receives structured data from a first node and transfers the structured data to a second node; and a file orchestrator that orchestrates unstructured data transfers between a plurality of external file nodes in the SOA infrastructure.","Accordingly, the present invention provides an SOA integration pattern that can combine structured data flows and file (unstructured data) transfer flows. Unlike traditional integration patterns, multiple parallel flows are provided, rather that a single message flow combining both structured data and unstructured data, and multiple processing nodes can be utilized, rather than a single synchronization hub.","The solution combines the benefits of an EAI based approach (mainly data integrity and consistency) and a file transfer approach (performance, parallelization) while leveraging a new SOA model. Advantages include the ability to leverage parallelization of the various activities in the synchronization process, including the processing, transformation and synchronization of structured and unstructured data, and the use of multiple data exchange path in order to optimize global data transfer flows. In addition, the present utilizes a bus integration pattern rather than a centralized node to process and transfer large unstructured data files.","Service-oriented architecture (SOA) provides methods for systems development and integration where systems group functionality around business processes and package these as interoperable services. SOA also describes an information technology (IT) infrastructure that allows different applications to exchange data with one another as they participate in business processes. This disclosure is essentially focused on a solution for exchanging (i.e., synchronizing) structured and unstructured data among different applications (i.e., nodes) in an SOA infrastructure. In a typical embodiment, the structured data is presented in, or can be readily into, a predetermined format that can be readily understood by different applications. The structured data may comprise pointers or links to information in one or more files containing unstructured data.","Referring now to drawings,  depicts an SOA infrastructure  having advanced capabilities for transferring structured and unstructured data from one application (i.e., node) to another application. In this case, the structured data comprises meta-data synchronized between meta-data node  and meta-data nodes  and ; and the unstructured data comprises file data being synchronized among file nodes , ,  and . As can be seen, the structured data is communicated via a centralized service orchestration engine (SOE) , whereas the unstructured data is communicated in a peer-to-peer fashion. Meta-data transfers are handled by a meta-data file transfer facility  at the SOE . In one illustrative embodiment, the SOE  may also include a meta-data transformation system  that transforms the meta-data received from node  to a format understood by nodes  and . Similarly, file nodes , , ,  may access one or more file transformation nodes  to transform file formats. In order to ensure operability, a global synchronization process is provided by SOE  that can track and manage each of the different flows that occur in synchronizing data in accordance with the invention.","The SOA infrastructure  generally includes: a service orchestration engine  having a file orchestrator ; meta-data nodes , , ; file nodes , , , ; and a plurality of file handling agents , , ,  that reside with file nodes , , , , respectively. The service orchestration engine (SOE)  is the service choreographer within the SOA infrastructure . As shown, SOE  includes a file orchestrator , which is typically implemented as program code whose key role is to provide to the global synchronization process a consistent way to synchronize and monitor the various flows. Although shown as part of the SOE , file orchestrator  could be implemented at some other node in the infrastructure .","File orchestrator  manages all of the different filing handling situations or scenarios, which are described in further detail below. File orchestrator  include a parallel processing system  that allows multiple peer-to-peer file transfers to occur simultaneously. For example, a file transfer between file nodes  and  could occur at the same time a file transfer is occurring between file nodes  and . In order to manage this process, file orchestrator  utilizes a routing table  that tracks a set of information (i.e., an \u201centry\u201d) for each transfer.  depicts an overview of a routing table entry.","File handling agents , , , and  are also implemented as program code, and provide the counterpart functionality to the file orchestrator . Their key role is to wrap local file handling capabilities (e.g., transfer, transformation, localization, etc.) and to expose them as services to be called by the file orchestrator . Illustrative services include:","(1) Monitoring of file transfers using basic commands such as START\/CANCEL, RESTART\/STATUS, etc.","(2) Monitoring of file transformation using basic commands such as START and CANCEL. This will be available only on file nodes , , ,  implementing File Format transformation capabilities.","(3) Managing the global transaction through file handling capabilities. Basic commands include DELETE and RENAME.","Overall, there are four main flows to consider. First, there is native structured data flow  in which data is exchanged between a source meta-data node  originating the synchronization request event and the SOE . Secondly, there is transformed structured data flow  exchanged between the SOE and the target meta-data nodes ,  that should be synchronized. Meta-data transfer facility , which handles these two flows, may be implemented using any classical application integration approach.","A third type of flow is a file transfer flow  in peer to peer between the various file nodes that will implement the actual unstructured data exchanges. This may include both transformed and untransformed exchanges. Finally, file control flow  provides a mechanism to monitor file transfer flows among the file nodes from the SOE.","File control flow  is implemented based on processes and communications exchanged between the file orchestrator  and the file handling agents , , , . One job of the file control flow  is to monitor all file transfers between the file nodes. A second job is to monitor all file format transformations. A third job is to implement remote file handling capabilities.","The following scenarios are considered and described in :\n\n",{"@attributes":{"id":"p-0034","num":"0037"},"figref":"FIG. 2","b":"10"},{"@attributes":{"id":"p-0035","num":"0038"},"figref":["FIG. 3","FIG. 2"],"b":["1","2"]},{"@attributes":{"id":"p-0036","num":"0039"},"figref":"FIG. 4","b":"50"},{"@attributes":{"id":"p-0037","num":"0040"},"figref":"FIG. 5","b":["52","54","52","54"]},{"@attributes":{"id":"p-0038","num":"0041"},"figref":["FIG. 6","FIG. 1"]},"At S, a synchronization request event is received from an application. Next at S, the meta-data to be synchronized is retrieved in at the source meta-data node. At S, a file routing table entry is created based on the retrieved data. An illustrative routing table entry is shown in . At S, each entry in the file routing table is processed in parallel (i.e., multiple simultaneous file transfers are implemented and tracked). There are various ways to implement parallel processing in BPEL such as the use of the FlowN verb (Oracle specific), the new BPEL 2.0 for-each verb, the use of event handlers, etc. At the same time, the structured meta-data is transformed (if necessary) to the format requested by the target meta-data nodes at S.","At S, a file (File) is transferred from Node A to Node B in a peer-to-peer manner. At S, File is transformed to File at Node B. The transformation may be implemented using a dynamic service call pattern. The transformation service, as exposed by the file handling agent (i.e., COMMAND verb) is published in a Service Registry. Therefore, the file orchestrator does not have to care about the transformation engine localization. It asks the Service Registry for the actual Transformation Service to be called. At S, File is transferred from Node B to Node C and any return codes are consolidated at S.","A decision is then made at S and S whether to implement an error handler S or update meta-data with target file locators S and update target meta-data nodes with updated meta-data S. At this point the deletion of files corresponding to updated entries in the Target Meta Data nodes can be considered.",{"@attributes":{"id":"p-0042","num":"0045"},"figref":["FIG. 8","FIG. 1"],"b":["20","21","22","23","10","24"]},"If a transformation is requested, the actual transformation service and location is retrieved from the Service Registry at S. Next, target an intermediate file locators are generated and the file routing table is updated at S. At S, the source file is transferred from the source node to the transformation node using a \u201cto-be-transformed\u201d file locator. At S the file routing table is updated with the file transfer return code. Next, the to-be-transformed file is transformed at the transformation node at S. Note that this is a synchronous call. The full process to transfer and individual file processing is synchronous, but all the processes run in parallel. At S, the file routing table is updated with the file transfer return code (RC). At S the transformed file is transferred from the transformation node to the target node using the target file locator and at S, the file routing table is updated with the file transfer return code. At S, the transfer thread ends.",{"@attributes":{"id":"p-0044","num":"0047"},"figref":["FIG. 9","FIG. 7"],"b":["40","41","42","43","44"]},"At S, the list of all intermediate and target files and their locations are retrieved from the file routing table. At S, S, and S, the process loops such that all intermediate and target files are deleted. This is achieved with a call to the service implemented at the related file node (e.g., using the CANCEL TRANSFER verb as exposed by the file handling agent). The error handler process then ends at S. In a further embodiment, restart capabilities (i.e., manual or automated) could be implemented.","File transfer agents can be implemented using either FTP or COTS (Commercial Off the Shelf) software products implementing managed file transfer capabilities. An aspect of the transfer process is the availability of the services interfaces as described above. These services include, e.g., START TRANSFER, CANCEL TRANSFER, START TRANSFORMATION, DELETE FILE and RENAME FILE. All these services are synchronous and should send back a Return Code. One illustrative implementation could use a J2EE application server that can implement the Web Services interfaces and rely on JMS flows to support the file transfers.","Referring again to , in general, SOE  and each of the file and meta-data nodes may be implemented using any type of computing device, and may be implemented as part of a client and\/or a server. Such a computing device or system generally includes a processor, input\/output (I\/O), memory, and a bus. The processor may comprise a single processing unit, or be distributed across one or more processing units in one or more locations, e.g., on a client and server. Memory may comprise any known type of data storage, including magnetic media, optical media, random access memory (RAM), read-only memory (ROM), a data cache, a data object, etc. Moreover, memory may reside at a single physical location, comprising one or more types of data storage, or be distributed across a plurality of physical systems in various forms.","I\/O may comprise any system for exchanging information to\/from an external resource. External devices\/resources may comprise any known type of external device, including a monitor\/display, speakers, storage, another computer system, a hand-held device, keyboard, mouse, voice recognition system, speech output system, printer, facsimile, pager, etc. Bus provides a communication link between each of the components in the computer system and likewise may comprise any known type of transmission link, including electrical, optical, wireless, etc. Additional components, such as cache memory, communication systems, system software, etc., may be incorporated into a computer system.","It should be appreciated that the teachings of the present invention could be offered as a business method on a subscription or fee basis. For example, a computer system comprising a service orchestration engine  could be created, maintained and\/or deployed by a service provider that offers the functions described herein for customers. That is, a service provider could offer to provide SOA based data transfers as described above.","It is understood that the systems, functions, mechanisms, methods, engines and modules described herein can be implemented in hardware, software, or a combination of hardware and software. They may be implemented by any type of computer system or other apparatus adapted for carrying out the methods described herein. A typical combination of hardware and software could be a general-purpose computer system with a computer program that, when loaded and executed, controls the computer system such that it carries out the methods described herein. Alternatively, a specific use computer, containing specialized hardware for carrying out one or more of the functional tasks of the invention could be utilized. In a further embodiment, part or all of the invention could be implemented in a distributed manner, e.g., over a network such as the Internet.","The present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods and functions described herein, and which\u2014when loaded in a computer system\u2014is able to carry out these methods and functions. Terms such as computer program, software program, program, program product, software, etc., in the present context mean any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: (a) conversion to another language, code or notation; and\/or (b) reproduction in a different material form.","The foregoing description of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed, and obviously, many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of this invention as defined by the accompanying claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other features of this invention will be more readily understood from the following detailed description of the various aspects of the invention taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
