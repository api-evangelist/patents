---
title: Method and apparatus for reducing latency in speech-based applications
abstract: A speech recognition interface and computer-readable medium build a grammar for speech recognition that reduces latency in speech-based applications. The interface and medium receive instructions to add a new phrase and semantic information to a grammar. The new phrase is combined with at least one other phrase in the grammar to form a composite grammar structure. The semantic information is then associated with a single word or transition in the grammar structure by selecting the first possible word or transition that semantically differentiates the new phrase from all other phrases in the grammar structure. By placing the semantic information in this position, the semantic information is placed as far forward in the grammar as possible without introducing semantic ambiguity into the grammar structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06961694&OS=06961694&RS=06961694
owner: Microsoft Corporation
number: 06961694
owner_city: Redmond
owner_country: US
publication_date: 20010122
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention relates to the construction of grammars used in speech recognition. In particular, the invention relates to the construction of grammars that include semantic tags.","In speech recognition systems, a computer system attempts to identify a sequence of words from a speech signal. One way to improve the accuracy of the recognition is to limit the recognition to a set of selected phrases. This is typically done by limiting valid recognition hypothesis to phrases that are found in a context-free grammar (CFG).","In some speech recognition systems, the context-free grammar is augmented by associating semantic tags and their corresponding values to words or phrases in the grammar. With such augmented systems, the semantic information is returned to an application along with the recognized phrase. This allows the application to take action based on the semantic information without having to first translate the recognition of the phrase into some semantic value.","In prior art systems, the semantic tag and value are only passed to the application after a complete utterance has been recognized. However, the semantic meaning of the utterance may be apparent earlier in the utterance. Since the recognition engine identifies the end of an utterance by detecting some period of silence, at a minimum, the user must wait through the silence period before the application takes action on the speech signal.","This delay is perceivable and annoying to users. As such, a speech recognition system is needed that allows applications to take actions before an utterance has been completely recognized.","A speech recognition interface and computer-readable medium build a grammar for speech recognition that reduces latency in speech-based applications. The interface and medium receive instructions to add a new phrase and semantic information to a grammar. The new phrase is combined with at least one other phrase in the grammar to form a composite grammar structure. The semantic information is then associated with a single word or transition in the grammar structure by selecting the first possible word or transition that differentiates the new phrase from all semantically different phrases in the grammar structure. By placing the semantic information in this position, the semantic information is placed as far forward in the grammar as possible without introducing semantic ambiguity into the grammar structure.","Another aspect of the present invention is speech-based applications that are capable of taking actions based on semantic information returned by a speech recognition system before the system has recognized an entire utterance. These applications determine whether to take an action based on semantic information returned for a hypothesis word identified by the speech recognition system. When determining whether to take the action, the applications balance the risk of harm of incorrectly taking the action with the confidence score attributed to the semantic information.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, telephony systems, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way o example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","200","202","204","206","208","210"]},"Memory  is implemented as non-volatile electronic memory such as random access memory (RAM) with a battery back-up module (not shown) such that information stored in memory  is not lost when the general power to mobile device  is shut down. A portion of memory  is preferably allocated as addressable memory for program execution, while another portion of memory  is preferably used for storage, such as to simulate storage on a disk drive.","Memory  includes an operating system , application programs  as well as an object store . During operation, operating system  is preferably executed by processor  from memory . Operating system , in one preferred embodiment, is a WINDOWS\u00ae CE brand operating system commercially available from Microsoft Corporation. Operating system  is preferably designed for mobile devices, and implements database features that can be utilized by applications  through a set of exposed application programming interfaces and methods. The objects in object store  are maintained by applications  and operating system , at least partially in response to calls to the exposed application programming interfaces and methods.","Communication interface  represents numerous devices and technologies that allow mobile device  to send and receive information. The devices include wired and wireless modems, satellite receivers and broadcast tuners to name a few. Mobile device  can also be directly connected to a computer to exchange data therewith. In such cases, communication interface  can be an infrared transceiver or a serial or parallel communication connection, all of which are capable of transmitting streaming information.","Input\/output components  include a variety of input devices such as a touch-sensitive screen, buttons, rollers, and a microphone as well as a variety of output devices including an audio generator, a vibrating device, and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition, other input\/output devices may be attached to or found with mobile device  within the scope of the present invention.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["300","302","304","306","304","304","306","302"]},"Under one embodiment, the composite grammar in context-free grammar engine  is organized as a recursive transition network (RTN) that includes a collection of grammar structures known as rules. Each rule contains a collection of transitions that define one or more paths from a starting state to an ending state for the rule. Under these embodiments, each transition corresponds to the recognition of a recognition value such as a single word, the lack of a word (known as an epsilon transition), or the recognition of some other rule (known as a rule reference).","The composite grammar maintained by context-free grammar engine  is constructed from a collection of binary grammars  that are formed by a compiler . Compiler  includes a front end  and a back end . Compiler front-end  converts text-formatted grammars , which in one embodiment are XML tagged grammars, into a set of instructions for building a binary grammar. These instructions are passed to compiler back-end  and direct back-end  to build binary structures that represent particular rules (grammar structures) in a grammar.","In embodiments where the composite grammar is a recursive transition network, the instructions define new rules to be added to the network and the location and content of transitions to be added to each rule. Thus, the instructions indicate whether a transition is associated with a word, a lack of a word (an epsilon transition) or a rule. The instructions also indicate the identity of any semantic tag\/semantic value pair that is to be associated with the transition.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4"],"b":["312","400","410","402","404","404","402"]},"When compiler front-end  reaches the end of the text-formatted grammar, it instructs back-end  to commit the grammar. When it receives this instruction, shown as instruction  in , a binary build component  of back-end  takes the current form of the grammar in grammar memory  and constructs a compact binary representation  of the grammar. In one embodiment, binary representation  takes the form of a collection of tables that describe the recursive transition network.","Compiler back-end  may also receive grammar-building instructions directly from application  at run time. These instructions are generated by the application to produce one or more run-time grammars that are then added to the composite grammar used by context-free grammar engine . Like compiler front-end , application  is able to specify semantic tag\/semantic value pairs for transitions that it wants added to the grammar.","During recognition, speech recognition engine  compares sections of the speech signal to acoustic models representing a set of phonetic units that can be spoken in the language of interest. From these comparisons, engine  identifies sequences of phonetic units that could be represented by the speech signal. When identifying the possible sequences, recognition engine  eliminates those sequences that do not occur in at least one of the grammar structures of the composite grammar.","Under most embodiments, recognition engine  periodically provides a hypothesis of the current word it is trying to recognize to context-free grammar engine . Under one embodiment, recognition engine  actually returns the identity of the transition associated with the word it selects as its hypothesis. Using this transition ID, grammar engine  retrieves any semantic tag\/semantic value pair associated with the transition and returns the word and the tag\/value pair to application  as a hypothesis.","In some embodiments, speech recognition engine  also returns a confidence score that indicates how likely it is that the hypothesized word is actually represented by the speech signal. This confidence score is provided to application  through grammar engine  and, under the present invention, is used by application  as part of a risk\/reward calculation to determine whether the recognition confidence is high enough to justify taking an action before the recognition is fully completed. Such risk\/reward determinations are described in more detail below.","Under the present invention, an application's ability to take actions based on the hypotheses returned by the speech recognition engine is enhanced by shifting semantic tag\/semantic values forward in the grammar structures. This shifting is done by compiler back-end  with each new transition it adds to the grammar structure. Under the invention, a semantic tag\/semantic value pair is placed as far forward in a rule as it can be without creating an ambiguity with some other transition in the rule. In addition, as new transitions are added to a rule, the present invention shifts existing tag\/value pairs within the rule to prevent semantic ambiguities. This shifting is discussed below with reference to the flow diagram of FIG.  and the transition network diagrams of , , ,  and .","At step  of , compiler back-end  receives instructions to add transitions for a phrase to a grammar. In , this phrase is the short phrase \u201cgo back\u201d, which has an associated semantic tag\/semantic value pair of \u201cpageback:\u22121\u201d where \u201cpageback\u201d is the semantic tag and \u201c\u22121\u201d is the value.","At step  of , the transitions for the new phrase are added to the rule identified in the instructions. For a new rule, as is the case in , the transitions are inserted directly. Thus, transition  is added for the word \u201cgo\u201d and transition  is added for the word \u201cback\u201d.","For an existing rule, compiler back-end  attempts to reuse as many existing transitions as possible in the current rule. For example, in  compiler back-end  has been instructed to add the phrase \u201cgo back a page\u201d to the rule of FIG. . To do this, compiler back end  reuses transitions  and  and adds new transitions , , and . New transition  is an epsilon transition indicating that no words need to be identified during the transition in order for the rule to be recognized. This epsilon transition allows the speech recognition engine to continue to recognize the short phrase \u201cgo back\u201d. Transitions  and  add the sub-phrase \u201ca page\u201d to \u201cgo back\u201d to produce the complete phrase \u201cgo back a page\u201d.","At step  of , compiler back-end  determines whether a semantic tag or semantic value associated with the newly added phrase is different than a semantic tag or semantic value that was previously present along a common transition that is used by both the newly added phrase and at least one existing phrase in the rule. If the semantic tag and semantic value for the new phrase are the same as an existing semantic tag and semantic value pair found on a common transition, the location of the existing semantic tag and semantic value is maintained.","This is shown as step  in FIG.  and an example of this is shown in  where the newly added phrase \u201cgo back a page\u201d has the same semantic tag and semantic value, \u201cpageback:\u22121\u201d, that was found on common transition . As such, \u201cpageback:\u22121\u201dis maintained at transition .","Note that maintaining the common semantic tag\/semantic value pair at its current position when adding a new phrase keeps the semantic tag\/semantic value pair as far forward in the rule as possible. Since a transition that is forward in a rule will be identified in a hypothesis before a later transition, keeping the semantic pair in this forward position allows the semantic pair to be provided to the application sooner than if it was shifted back to a later transition.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 8","FIG. 7","FIG. 7"],"b":["312","800","801","702","704","8"]},"If the semantic tag\/semantic value pair associated with a newly added phrase is not the same as a pair along a common path at step , the process of  continues at step  where the grammar structure formed from the newly added phrase is compared to the grammar structure present before the phrase was added. This comparison locates the position of the first transition branch that was added to the previous structure when the new phrase was inserted in the structure.","At step , the results of this search are used to determine if the new semantic tag\/semantic value pair will generate a semantic ambiguity in the grammar. In particular, if the new phrase does not create a newly added branch, the new semantic tag\/semantic value pair will generate an ambiguity because there will be two different semantic pairs for the same phrase structure.","Under embodiments of the present invention, if an instruction to add a phrase would generate a semantic ambiguity in the grammar, the process continues at step  where the transitions added in step  are removed from the grammar. In addition, an error message is generated and is sent to the component that sent the instructions to add the phrase. This is especially helpful for an application that is dynamically building the grammar, because it allows the application to react to the error message at that point without having to wait for the entire grammar to be built.","If the added phrase does not generate a semantic ambiguity at step , the process continues at step  of  where the semantic tag\/semantic value pair for the new phrase is placed at this first transition branch identified in step . Next, at step , the previous semantic tag\/semantic value pair found on the common path before the first transition branch is shifted back to each transition that extends from the same state as the first transition of the newly added branch. This shifting removes ambiguities that would otherwise arise if the existing semantic pair were maintained in the previous position. It also places all of the semantic pairs as far forward as possible in the rule structure.","An example of this semantic shifting is shown in  where the phrase \u201cgo back two pages\u201d and the semantic pair \u201cpageback:\u22122\u201d have been added to the grammar structure of FIG. . Because \u201cgo back two pages\u201d begins with the common sub-phrase \u201cgo back\u201d the new phrase is added by inserting a branch  formed of transitions  and  that are associated with the words \u201ctwo\u201d and \u201cpages\u201d respectively.","Using steps  and  of , the semantic pair \u201cpageback:\u22122\u201d for the new phrase is placed at the first transition of the first newly added branch. In , this is transition  of branch . Using step , existing semantic pair \u201cpageback:\u22121\u201d, which was associated with common transition  in , is shifted back to each of the transitions that extend from state . This is the same state from which new transition  extends. This involves placing the \u201cpageback:\u22121\u201d semantic pair on transitions , , and  in FIG. .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 10","FIG. 10","FIG. 9"],"b":["9","1000","1002","1004","9","508","510","1002","512","1002","600","602"]},"Under some embodiments of the invention where a text-formatted grammar is converted into a binary grammar by compiler , the manner in which the grammar is specified in the text-formatted grammar can limit where the semantic pairs are shifted within the grammar structure. For example, in embodiments where phrases are found between pairs of phrase tags (for example <P>phrase<\/P>) a semantic pair that is defined in the leading phrase tag can only be shifted within the words of the phrase. For example, if the text-formatted grammar contained the entry \u201c<P>go back<\/P><P pageback:\u22124>four pages<\/P>\u201d, the semantic pair \u201cpageback:\u22124\u201d could only be placed with the transition for the word \u201cfour\u201d or transition for the word \u201cpages\u201d. It could not be shifted to the transitions for \u201cgo\u201d or \u201cback\u201d.","Although the description of  above shows an embodiment in which the grammar is built based on separate instructions for each phrase, in other embodiments, the grammar is built from one instruction that makes reference to a collection of phrases. Under such embodiments, the semantic information is still shifted so that it is as far forward as possible in the grammar without introducing semantic ambiguity.","As noted in the background, most prior art speech recognition systems only pass semantic pairs to an application when a complete utterance had been recognized. This means that prior applications have to wait for the entire utterance and a silence period after the utterance before they can perform operations based on the speech input. Under the present invention, this delay is removed by shifting the semantic pairs as far forward in the grammar structure as possible and passing the semantic pairs to the application as the speech recognizer generates possible hypothesis words for the speech signal.","In some circumstances, where the risk of harm of taking a wrong action is outweighed by the confidence of the hypothesis, this allows applications to take action before the recognition is complete. By taking action before full recognition, these applications improve the user experience by providing quicker responses to user input.","For example, using the grammar rule of , if the speech recognition system identifies transitions , , and  as hypothesis transitions, the application can page back one page as soon as it receives the indication that transition  is a hypothesis transition. This can be done even if the confidence level for that transition is low, because the harm of paging back one page is small.","In particular, if the speech recognition engine later changes its hypothesis to transition  instead of transition , no harm has been done by going back one page. In fact, by paging back one page during the hypothesis of transition , the application reduces the amount of time need to go back three pages, which is the likely response to transition  being identified by the speech recognition engine.","Note that at other times, the application will wait to take an action even though it has received the semantic information. For example, if instead of first identifying transition  as the hypothesis transition, speech recognition engine identifies transition , the application may page back one page but will likely not page back all three pages unless the confidence level of transition  is high enough. If the confidence level of transition  is low, the application may wait until the speech recognition engine indicates that transition  is a hypothesis transition before paging back all three pages. This will improve the user experience because the application will not page back three pages when the user only wanted to page back one or two pages.","In other embodiments, the application will use a risk\/reward calculation that includes the stability of the semantic information that is sent to it. In such embodiments, the application will take an action if the semantic information remains constant for a number of consecutive hypotheses, but will not take the action if the semantic information is changing with each hypothesis. For example, if a hypothesis is being generated every 200 ms, then waiting for two semantically-unchanged hypotheses with reasonable confidence works well. If the confidence level was lower or the penalty higher, the application could wait for three or more semantically-unchanged hypotheses.","In other embodiments, the application takes the initialization period of the action into consideration when determining whether to start the action. Under these embodiments, those actions with longer initialization periods would require a lower confidence score and\/or lower semantic stability.","In still other embodiments, where the penalty of an action prevents the application from taking the action without high confidence, the application provides user feedback while the confidence is still too low to indicate the action that the application is leaning toward. For example, if the application has a low confidence score for a cut operation, it may \u2018gray-out\u2019 the selection to indicate that it is considering a cut operation. If the confidence level increases, the cut operation is then performed. By providing such feedback, the present invention makes the system seem much more responsive to user input.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4","b":["412","4"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 8","FIG. 7"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 10","FIG. 9"]}]},"DETDESC":[{},{}]}
