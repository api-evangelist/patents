---
title: Apparatus, system and method for detecting old version of an applet in a client brower's JVM
abstract: An apparatus, system and method for checking the version of a cached applet on a client device against version information stored on a host server is provided. By checking the version of the applet, it can be determined whether or not the applet is still usable with the host server. If an applet is not usable with the host server, the applet is either automatically updated to a current version or the user is provided with information as to how to update the applet to the current version. If an applet is usable with the host server but is not a current version of the applet, the user may be informed of this fact and given the opportunity to either update the applet or continue to execute the older version of the applet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07131122&OS=07131122&RS=07131122
owner: International Business Machines Corporation
number: 07131122
owner_city: Armonk
owner_country: US
publication_date: 20000824
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT"],"p":["1. Technical Field","The present invention is directed to an apparatus, system and method for detecting old versions of an applet in a client browser's Java\u2122 Virtual Machine (JVM). In particular, the present invention provides a mechanism by which old versions of an applet are identified and a determination is made as to whether the applet is still functional with the server or needs to be updated.","2. Description of Related Art","An applet is a program written in the Java programming language which can be included in HyperText Markup Language (HTML) pages much in the same way an image is included. Applets provide functionality to Web pages for providing users with information, entertainment, and for gathering information from users.","When a user employs a Java technology enabled browser in his\/her client device to view a web page that contains an applet, the applet's bytecode is transferred to the client device's browser system and executed by the browser's Java Virtual Machine (JVM). Typically, a browser will cache the Java classes which make up an applet. This becomes a problem when a developer updates and deploys the Java code on the server that makes up the applet. The problem arises in that the cached version of the applet in the client JVM may not be compatible with the updated Java code on the server.","In such a case, a two principal situations may arise. First, if the developer has added any new classes in this updated Java code, the older cached Java classes will not work with these new Java classes. In this case the applet will halt with an exception.","The details of such an exception can be seen clearly in the Java Console of the browser. However, most end users are lay people and are not able to understand what happened to cause the exception. As a result, the end user may become frustrated, thereby creating a customer satisfaction issue.","To resolve this customer satisfaction issue, the end user typically will either abandon their efforts on the web page and search elsewhere or will contact a customer support representative. In the latter case, resolving this issue takes up customer support time because the support representative must recreate the user scenario and then guide the user in clearing the cached Java classes.","Clearing the cached Java classes is not a simple operation. Just clearing the regular browser cache does not clear the cached Java classes in the JVM. Furthermore, the two most popular browsers, Netscape Communicator\u2122 and Microsoft Internet Explorer\u2122, have different procedures to clear the cached classes.","Even if no new classes were added in the updated Java code, if a database transaction message format with the host server was changed by the update to the Java code, then the cached applet will have problems communicating with the host server. As a result, the user will experience a number of communication errors which again results in a customer satisfaction and support issue.","Thus, it would be beneficial to have an apparatus, system and method for detecting old versions of an applet in a client browser's JVM. It would further be beneficial to have an apparatus, system and method that identifies old versions of an applet and a determines whether the applet is still functional with the host server or needs to be updated.","The present invention provides an apparatus, system and method for checking the version of a cached applet on a client device against version information stored on a host server. By checking the version of the applet, it can be determined whether or not the applet is still usable with the host server. If an applet is not usable with the host server, the applet is either automatically updated to a current version or the user is provided with information as to how to update the applet to the current version.","If an applet is usable with the host server but is not a current version of the applet, the user may be informed of this fact and given the opportunity to either update the applet or continue to execute the older version of the applet. If the user chooses to update the applet, the update is performed in substantially the same manner as that described above. If the user chose to continue with the older version of the applet, the mainline code of the older version of the applet is executed.","With reference now to the figures, and in particular with reference to , a pictorial representation of a distributed data processing system in which the present invention may be implemented is depicted. Distributed data processing system  is a network of computers in which the present invention may be implemented. Distributed data processing system  contains a network , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system . Network  may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.","In the depicted example, a server  is connected to network  along with storage unit . In addition, clients , , and  also are connected to a network . These clients , , and  may be, for example, personal computers or network computers. For purposes of this application, a network computer is any computer, coupled to a network, which receives a program or other application from another computer coupled to the network. In the depicted example, server  provides data, such as boot files, operating system images, and applications to clients \u2013. Clients , , and  are clients to server . Distributed data processing system  may include additional servers, clients, and other devices not shown. In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the TCP\/IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational, and other computer systems, that route data and messages. Of course, distributed data processing system  also may be implemented as a number of different types of networks, such as, for example, an Intranet or a local area network.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1"},"With reference now to , a block diagram of a data processing system which may be implemented as a server, such as server  in , is depicted in accordance to the present invention. Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors  and  connected to system bus . Alternatively, a single processor system may be employed. Also connected to system bus  is memory controller\/cache , which provides an interface to local memory . I\/O Bus Bridge  is connected to system bus  and provides an interface to I\/O bus . Memory controller\/cache  and I\/O Bus Bridge  may be integrated as depicted.","Peripheral component interconnect (PCI) bus bridge  connected to I\/O bus  provides an interface to PCI local bus . A modem  may be connected to PCI local bus . Typical PCI bus implementations will support four PCI expansion slots or add-in connectors. Communications links to network computers \u2013 in  may be provided through modem  and network adapter  connected to PCI local bus  through add-in boards.","Additional PCI bus bridges  and  provide interfaces for additional PCI buses  and , from which additional modems or network adapters may be supported. In this manner, server  allows connections to multiple network computers. A memory mapped graphics adapter  and hard disk  may also be connected to I\/O bus  as depicted, either directly or indirectly.","Those of ordinary skill in the art will appreciate that the hardware depicted in  may vary. For example, other peripheral devices, such as optical disk drive and the like also may be used in addition or in place of the hardware depicted. The depicted example is not meant to imply architectural limitations with respect to the present invention.","The data processing system depicted in  may be, for example, an IBM RISC\/System  system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.","With reference now to , a block diagram of a data processing system in which the present invention may be implemented is illustrated. Data processing system  is an example of a client computer. Data processing system  employs a peripheral component interconnect (PCI) local bus architecture. Although the depicted example employs a PCI bus, other bus architectures such as Micro Channel and ISA may be used. Processor  and main memory  are connected to PCI local bus  through PCI Bridge . PCI Bridge  also may include an integrated memory controller and cache memory for processor . Additional connections to PCI local bus  may be made through direct component interconnection or through add-in boards. In the depicted example, local area network (LAN) adapter , SCSI host bus adapter , and expansion bus interface  are connected to PCI local bus  by direct component connection. In contrast, audio adapter , graphics adapter , and audio\/video adapter (A\/V)  are connected to PCI local bus  by add-in boards inserted into expansion slots. Expansion bus interface  provides a connection for a keyboard and mouse adapter , modem , and additional memory . SCSI host bus adapter  provides a connection for hard disk drive , tape drive , and CD-ROM  in the depicted example. Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.","An operating system runs on processor  and is used to coordinate and provide control of various components within data processing system  in . The operating system may be a commercially available operating system such as OS\/2, which is available from International Business Machines Corporation.","An object oriented programming system such as a Java system may run in conjunction with the operating system and may provide calls to the operating system from Java programs or applications executing on data processing system . Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive  and may be loaded into main memory  for execution by processor . Hard disk drives are often absent and memory is constrained when data processing system  is used as a network client.","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. For example, other peripheral devices, such as optical disk drives and the like may be used in addition to or in place of the hardware depicted in . The depicted example is not meant to imply architectural limitations with respect to the present invention. For example, the processes of the present invention may be applied to a multiprocessor data processing system.","Although the present invention may operate on a variety of computer platforms and operating systems, it may also operate within an interpretive environment, such as a REXX, Smalltalk, or Java runtime environment, and the like. For example, the present invention may operate in conjunction with a Java Virtual Machine (JVM) yet within the boundaries of a JVM as defined by Java standard specifications. In order to provide a context for the present invention with regard to an exemplary interpretive environment, portions of the operation of a JVM according to Java specifications are herein described.","With reference now to , a block diagram illustrates the relationship of software components operating within a computer system that may implement the present invention. Java-based system  contains platform specific operating system  that provides hardware and system support to software executing on a specific hardware platform. JVM  is one software application that may execute in conjunction with the operating system. Alternatively, JVM  may be imbedded inside a Java enabled browser application such as Microsoft Internet Explorer\u2122 or Netscape Communicator\u2122. JVM  provides a Java run-time environment with the ability to execute Java application or applet , which is a program, servlet, or software component written in the Java programming language. The computer system in which JVM  operates may be similar to data processing system  or computer  described above. However, JVM  may be implemented in dedicated hardware on a so-called Java chip, Java-on-silicon, or Java processor with an embedded picoJava core. At the center of a Java run-time environment is the JVM, which supports all aspects of a Java environment, including its architecture, security features, mobility across networks, and platform independence.","The JVM is a virtual computer, i.e. a computer that is specified abstractly. The specification defines certain features that every JVM must implement, with some range of design choices that may depend upon the platform on which the JVM is designed to execute. For example, all JVMs must execute Java bytecodes and may use a range of techniques to execute the instructions represented by the bytecodes. A JVM may be implemented completely in software or somewhat in hardware. This flexibility allows different JVMs to be designed for mainframe computers and PDAs.","The JVM is the name of a virtual computer component that actually executes Java programs. Java programs are not run directly by the central processor but instead by the JVM, which is itself a piece of software running on the processor. The JVM allows Java programs to be executed on a different platform as opposed to only the one platform for which the code was compiled. Java programs are compiled for the JVM. In this manner, a Java environment is able to support applications for many types of data processing systems, which may contain a variety of central processing units and operating systems architectures. To enable a Java application to execute on different types of data processing systems, a compiler typically generates an architecture-neutral file format\u2014the compiled code is executable on many processors, given the presence of the Java run-time system.","The Java compiler generates bytecode instructions that are nonspecific to a particular computer architecture. A bytecode is a machine independent code generated by the Java compiler and executed by a Java interpreter. A Java interpreter is part of the JVM that alternately decodes and interprets a bytecode or bytecodes. These bytecode instructions are designed to be easy to interpret on any computer and easily translated on the fly into native machine code.","A JVM must load class files and execute the bytecodes within them. The JVM contains a class loader, which loads class files from an application and the class files from the Java application programming interfaces (APIs) which are needed by the application. The execution engine that executes the bytecodes may vary across platforms and implementations.","One type of software-based execution engine is a just-in-time (JIT) compiler. With this type of execution, the bytecodes of a method are compiled to native machine code upon successful fulfillment of some type of criteria for \u201cjitting\u201d a method. The native machine code for the method is then cached and reused upon the next invocation of the method. The execution engine may also be implemented in hardware and embedded on a chip so that the Java bytecodes are executed natively. JVMs usually interpret bytecodes, but JVMs may also use other techniques, such as just-in-time compiling, to execute bytecodes.","When an application is executed on a JVM that is implemented in software on a platform-specific operating system, a Java application may interact with the host operating system by invoking native methods. A Java method is written in the Java language, compiled to bytecodes, and stored in class files. A native method is written in some other language and compiled to the native machine code of a particular processor. Native methods are stored in a dynamically linked library whose exact form is platform specific.","With reference now to , a block diagram of a JVM is depicted in accordance with a preferred embodiment of the present invention. JVM  includes a class loader subsystem , which is a mechanism for loading types, such as classes and interfaces, given fully qualified names. JVM  also contains runtime data areas , execution engine , native method interface , and memory management . Execution engine  is a mechanism for executing instructions contained in the methods of classes loaded by class loader subsystem . Execution engine  may be, for example, Java interpreter  or just-in-time compiler . Native method interface  allows access to resources in the underlying operating system. Native method interface  may be, for example, a Java native interface.","Runtime data areas  contain native method stacks , Java stacks , PC registers , method area , and heap . These different data areas represent the organization of memory needed by JVM  to execute a program.","Java stacks  are used to store the state of Java method invocations. When a new thread is launched, the JVM creates a new Java stack for the thread. The JVM performs only two operations directly on Java stacks: it pushes and pops frames. A thread's Java stack stores the state of Java method invocations for the thread. The state of a Java method invocation includes its local variables, the parameters with which it was invoked, its return value, if any, and intermediate calculations. Java stacks are composed of stack frames. A stack frame contains the state of a single Java method invocation. When a thread invokes a method, the JVM pushes a new frame onto the Java stack of the thread. When the method completes, the JVM pops the frame for that method and discards it.","The JVM does not have any registers for holding intermediate values; any Java instruction that requires or produces an intermediate value uses the stack for holding the intermediate values. In this manner, the Java instruction set is well-defined for a variety of platform architectures.","PC registers  are used to indicate the next instruction to be executed. Each instantiated thread gets its own pc register (program counter) and Java stack. If the thread is executing a JVM method, the value of the pc register indicates the next instruction to execute. If the thread is executing a native method, then the contents of the pc register are undefined.","Native method stacks  store the state of invocations of native methods. The state of native method invocations is stored in an implementation-dependent way in native method stacks, registers, or other implementation-dependent memory areas. In some JVM implementations, native method stacks  and Java stacks  are combined.","Method area  contains class data while heap  contains all instantiated objects. The JVM specification strictly defines data types and operations. Most JVMs choose to have one method area and one heap, each of which are shared by all threads running inside the JVM. When the JVM loads a class file, it parses information about a type from the binary data contained in the class file. It places this type information into the method area. Each time a class instance or array is created, the memory for the new object is allocated from heap . JVM  includes an instruction that allocates memory space within the memory for heap  but includes no instruction for freeing that space within the memory.","Memory management  in the depicted example manages memory space within the memory allocated to heap . Memory management  may include a garbage collector which automatically reclaims memory used by objects that are no longer referenced. Additionally, a garbage collector also may move objects to reduce heap fragmentation.","The present invention provides a mechanism by which the versions of applets executed by the JVM may be checked to determine if the applets are still operational with the host server. With the present invention, an applet may have one of three version states: old and in need of updating, old and workable with the host server, and current. Only when the applet is old and in need of updating will the present invention not run the applet's mainline code which would result in an exception when the JVM attempts to execute the applet's bytecode. If the applet is current, no updating is necessary and the applet functions normally. If the applet is old and workable, the JVM may provide the user of the client device with the option of updating the applet before proceeding or continuing with the old version of the applet.","With reference now to , a diagram illustrating components and data flow used to provide communication between a client and a host is depicted in accordance with a preferred embodiment of the present invention. In this example, communication is provided between host  and client . In this example, host  includes a database server , an application server , and a web server . Web server  also is referred to as an HTTP server. Web server  handles all the HTTP requests coming into a website. Then, web server  hands off the request to the application server , which then talks to the database server  if necessary to access data or write data. Also, all responses from the website go out, to the client, through web server .","Web server  also includes a directory that contains the Java class files and the graphics files such as .gifs, .jpegs, etc. In this example, web server  includes applet class files . Application server  runs the Common Gateway Interface (CGI) scripts. This server has a servlet engine to run servlets. In this example, application server  contains CGI scripts and servlets . Database server  is used to store and access data, such as in data storage . These three servers (daemon processes) can all run on one machine or each server can run on its own separate dedicated machine.","The data storage  stores a version table for applets supported by the host . The version table contains information identifying the applet, the various versions of the applet that have been released, and the current status of each version. Each version of an applet may have one of three statuses: current, old and in need of update, or old and workable, as will be discussed in greater detail hereafter.","There are many different ways in which the version table may be stored for use by the present invention. The present invention is intended to encompass all possible version table storage mechanisms and methods. However, as an example of one embodiment, the version table may be stored on a backend DB2 application version table. DB2 is a Relational Database Management System (RDBMS), available from International Business Machines, Inc., that is a full-featured Structured Query Language (SQL) language RDBMS. An example of such a version table may be:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"CREATE TABLE MASTR.APPL_VERSION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"("]},{"entry":[{},"APPL_NAME VARCHAR(30) NOT NULL,"]},{"entry":[{},"VERSION_NBR VARCHAR(10) NOT NULL,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"--format Vv.Rr.Mmmm"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LATEST_VERSION_FLG CHAR(1) NOT NULL,"]},{"entry":[{},"PRIMARY KEY (APPL_NAME, VERSION_NBR),"]},{"entry":[{},"FOREIGN KEY FLG(LATEST_VERSION_FLG)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"REFERENCES MASTR.YES_NO_DOMAIN"]},{"entry":[{},"ON DELETE RESTRICT"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The version table may take the form of that shown in Table 1 below, for example. As shown in Table 1, there are entries for applet name, applet version, and a latest version flag. For each applet name and applet version, there is a corresponding latest version flag identifying the applet version as being old and in need of update, old and workable or current.",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example of Version Table"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Application Name","Application Version No.","Latest Version Flag"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["login_screen","V1.R2.M0006","Current (C)"]},{"entry":["login_screen","V1.R2.M0005","Workable (W)"]},{"entry":["login_screen","V1.R1.M0004","Expired (E)"]},{"entry":["login_screen","V1.R1.M0003","Expired (E)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The version table is used to check the version of an applet  cached or otherwise stored by the client , in order to determine if the applet  may be properly used with the host . When an applets' code execution is initiated by the client , the applet checks its version against those stored in the version table to determine if the applet needs to be updated or if it can be used with the host , as will be described hereafter.","In the example shown in , applet  is executing within browser  on client . Applet  was downloaded from applet class files  in response to a user input to browser . Applet  performs a data transfer with host , in response to various user inputs. For example, applet  may provide a form to retrieve data about client , such as operating system type, processor type, amount of memory, adapter types, and storage capacity. Also, applet  may receive data for display to a user on client .","To avoid connection problems with a firewall, applet  uses HyperText Transport Protocol (HTTP) to create and open a Uniform Resource Locator (URL) connection to a CGI program or servlet on host . In this example, the communication is to a CGI script or a servlet . When invoking the CGI script or a servlet , some parameters may be passed to these programs through the use of a \u201cPath info\u201d and\/or \u201cQuery string.\u201d These parameters may be optionally included in the URL used to establish the connection. The value of these parameters may be used to cause the CGI script or a servlet  to execute a selected operation on the data. The \u201cPath info\u201d or \u201cQuery string\u201d is part of the URL string, and as such is sent to the host, or more appropriately to the CGI script or servlet at the host, as part of the creation of the URL connection.","All of the data from the applet  may be passed to the CGI script or a servlet  in an output stream, simulating a POST method used by a browser. A POST method is used to send data in an HTML form, in a client browser, to the server. Next, the CGI script or a servlet  may process the data and store the data in data storage  or retrieve other data from data storage . Return data may be returned to the applet  by the CGI script or a servlet  in an input stream of the applet .","With the present invention, when a user initiates the applet  by, for example, visiting a web page that contains an applet with his\/her browser, the applet  initiates communication with the host  it was launched from. By stating that the applet  initiates communication with the host  and performs the functions described hereafter, what is meant is that the applet  contains classes whose function is to perform the version check of the present invention. Thus, the applet  contains not only the bytecode necessary to perform the functions specific to the applet  but also the bytecode for version verification.","Upon initiation, the applet  passes two pieces of data to a servlet or CGI script  at the host :","1. Applet Name. This is the APPL_NAME column in the APPL_VERSION table in the data storage , described above. An example would be \u201cPBDApplet\u201d or \u201clogin_screen\u201d; and","2. The version number that is burned into the byte code of the applet class. An example would be \u201cV1.R2.M0005\u201d. The preferred method to tie the version number of the applet to the applet itself is to \u201cburn\u201d the version number into the applet bytecode. This is done by defining a constant in the applet Java source code, such as:","private static final String APPLET_VERSION=\u201cV1.R2.M005\u201d","Next, the servlet or CGI script  uses this data to query the data storage . The data storage  looks-up the applet name and version number in the version table and returns two pieces of data back to the servlet or CGI script :","1. The current version number for this applet in the data storage . This is the VERSION_NBR in the APPL_VERSION table. Specifically, this is the row which matches the APPL_NAME sent in by the applet  and where the LATEST_VERSION_FLG is set to \u2018C\u2019 by the applet developer. An example would be \u201cV1.R2.M0006\u201d; and","2. The LATEST_VERSION_FLG from the APPL_VERSION table. Specifically, this is the row which matches the APPL_NAME and the VERSION_NBR that was sent in by the applet . An example would be \u201cW\u201d. The servlet or CGI script  then passes these two pieces of data back to the applet .","As described above, the LATEST_VERSION_FLG can contain one of the following three values:\n\n","If the LATEST_VERSION_FLG is \u2018W\u2019, the applet  first provides the user of the client  with a selection of either continuing with the version of the applet  cached with the possibility that the cached version has less functionality than the current version of the applet , or updating the applet  from the host  and then executing the mainline code of the applet . If the user selects to continue with the version of the applet  that is cached, the mainline code of the cached version of the applet  is executed. If the user selects to update the applet , the applet  either provides the user with instructions on how to clear the applet classes from the cache and reload the applet  from the host , or will attempt to automatically clear the applet classes from the cache.","Because there a plurality of browsers in use today, in order to clear applet classes from a cache, it may be necessary to know the type of browser for which the applet is designed. This is because the command to clear the cache may be different in each browser. Thus, for example, the command to clear the cache and reload the applet classes in Netscape\u2122 is to hold the shift key and select the \u201creload\u201d command. Similarly, the command in Microsoft Internet Explorer\u2122 is to hold the control key and select the \u201crefresh\u201d command.","The present invention may inform the user of the proper sequence to be used to clear the applet classes from the cache. The present invention may inform the user using a dialog box that provides each of the proper commands for each of the possible browsers thereby relying on the user to select the command sequence that is specified for the browser being used by the client .","Alternatively, the applet  may look at the system property of the applet using the system.getproperty class and java.vendor class to identify the browser being used with the applet . After identifying the browser, the applet may then provide the proper command sequence to the user via a dialog box, or the like, to thereby inform the user how to clear the applet classes and reload them.","Moreover, after identifying the browser in the manner described above, the present invention may automatically enter the command sequence to clear the applet classes from the cache and reload them. To automatically enter the command sequence, the applet provides the proper command string to the browser to cause the browser to perform the functions of clearing the cache and sending a request to the host  for the applet.",{"@attributes":{"id":"p-0077","num":"0079"},"figref":["FIG. 5","FIG. 5"],"b":["510","520","530","580"]},"If the applet is not the current version, a determination is made as to whether the applet is a workable version (step ). If not, the applet is updated (step ) and the operation returns to step . If so, the user is provided with the option of either continuing with the applet version that is cached or to update the applet (step ). If the user selects to update the applet (step ), the operation continues to step . If the user selects to continue with the version of the applet cached, the operation continues to step  wherein the mainline code of the applet is executed and the operation then ends.","Thus, the present invention provides a mechanism by which versions of applets may be checked for compatibility with Java code stored on the host server from which the applet was launched. The present invention further provides a mechanism by which the user may be informed of the proper procedure for updating the applet and, in the alternative, for automatically updating the applet based on the type of browser being used.","While the present invention has been described with regard to an embodiment in which an applet contains classes to perform the version verification, the present invention is not limited to such. Rather, the version verification may be performed by a software\/hardware element, such as a Java application, outside the applet without departing from the spirit and scope of the present invention. A Java application, in contrast to a Java applet, has a main( ) method, runs in the Java Runtime Environment (JRE) installed on the operating system of a client machine and does not need a JVM enabled browser for execution.","For example, the JVM may contain Java application bytecode that is used to perform the version verification in accordance with the present invention. In such an embodiment, upon for example, initial user login of the Java application, the application will suspend execution of the mainline code until the version verification is performed.","It is important to note that while the present invention has been described in the context of a fully functioning data processing system, those of ordinary skill in the art will appreciate that the processes of the present invention are capable of being distributed in the form of a computer readable medium of instructions and a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media actually used to carry out the distribution. Examples of computer readable media include recordable-type media such a floppy disc, a hard disk drive, a RAM, and CD-ROMs and transmission-type media such as digital and analog communications links.","The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The novel features believed characteristic of the invention are set forth in the appended claims. The invention itself, however, as well as a preferred mode of use, further objectives and advantages thereof, will best be understood by reference to the following detailed description of an illustrative embodiment when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
