---
title: Implementing device support in a web-based enterprise application
abstract: A method, system, application programming interface, and computer program product that enable enterprise data management application programs to request input/output services from a device manager controlling devices. The device manager operates in a heterogeneous environment including incompatible devices provided by multiple vendors. These requests, and responses from the device manager to the enterprise data management application program, are communicated in a markup language format, rather than in a device-specific native language. This structure enables the vendor of the enterprise data management application program to send requests for services, including both data and instructions to use specialized features of a device, without the need to change the enterprise data management application program to support device-specific native languages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026701&OS=09026701&RS=09026701
owner: Siebel Systems, Inc.
number: 09026701
owner_city: San Mateo
owner_country: US
publication_date: 20031230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["Portions of this patent application contain materials that are subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document, or the patent disclosure, as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever.","As businesses increasingly rely on computers for their daily operations, managing the vast amount of business information generated and processed has become a significant challenge. Most large businesses have a wide variety of application programs managing large volumes of data that is entered and\/or provided to users via many different types of input\/output devices. As an example, in the banking industry, data may be provided using a variety of devices, such as an Automated Teller Machine (ATM) key entry pad, a magnetic card reader, a receipt printer, a passbook reader\/writer, and so on. These input\/output devices may be available via various types of networks and operating system platforms and often include a variety of devices produced by many different vendors. Each device typically is incompatible with the devices of other vendors.","Often, vendors of input\/output devices provide their own application programming interfaces (APIs, sometimes referred to as application program interfaces) and\/or command line utilities for using the specialized features of their own input\/output devices, but these APIs and command line utilities are not compatible from vendor to vendor. Instead, these APIs and command line utilities typically communicate in a device-specific native language. Furthermore, device communication standards have not been widely adopted, adding to the incompatibility problem.","One approach to communicating with a wide variety of types of devices is to modify an enterprise data management application that uses the features of these devices to communicate in the device-specific native language for each device. For example, to add a new type of input\/output device to an enterprise data management system environment, the enterprise data management application often must be modified to call the device-specific APIs in addition to adding a new device driver or modifying an existing device driver. The software using the new device is tested by enterprise data management application vendor personnel and incorporated into a later release of the enterprise data management application.","This process for making new devices available has proven costly for vendors of enterprise data management applications, as support for each new type of device requires a new release, a costly and time-consuming project. Furthermore, the release process has proven untimely for the vendors of devices, as support for their products depends upon the release schedules for enterprise data management applications in which their products are used, slowing time to market for their devices. Typically, enterprise data management application vendors are not device vendors and would prefer a platform- and device-independent mechanism to request input\/output services.","Another approach to simplify communication with a variety of different devices is provided by the Microsoft Windows Driver Model (WDM). WDM was introduced to allow driver developers to write device drivers that are source-code compatible across all Microsoft Windows operating systems. A Windows driver acts as an intermediary between an application program and a device driver. A Windows driver API is pre-defined to receive calls from application programs for services, and the Windows driver determines the appropriate device to provide the service and communicates with the selected device in that device's native language.","The Windows Driver Model, however, has failed to provide the flexibility needed by enterprise data management applications. Because the WDM API is pre-defined, all features provided by each device may not be supported. In addition, most API calls do not provide optional variables that can be set to take advantage of a particular device's features, and no mechanism exists to easily modify messages sent to the WDM API. As a result, it may not be possible to take advantages of the particular features of a device without using the device-specific native language.","What is needed is the ability to dynamically add or modify support for a device in an enterprise data management application without the need to modify the enterprise data management application to communicate with the device.","The present invention relates to a method, system, application programming interface, and computer program product that enable enterprise data management application programs to request input\/output services from a device manager controlling devices. The device manager operates in a heterogeneous environment including incompatible devices provided by multiple vendors. These requests for services, and responses from the device manager to the enterprise data management application program, are communicated in a markup language format, rather than in a device-specific native language.","An application programming interface is provided to communicate with the device manager in the markup language format. This structure enables the vendor of the enterprise data management application program to send requests for services, including both data and instructions to use specialized features of a device, without the need to change the enterprise data management application program to support device-specific native languages. The device manager can be easily modified to support new devices by adding new API commands to support specific features of those devices.","One feature of the invention includes a method for obtaining a request to provide a service, wherein the request conforms to a request format defined in a first language, such as a markup language. At least one device of a plurality of devices provides the service, and the method further includes identifying one of the devices to provide the service. The method further includes converting the request to a second request in a second language, such as a device-specific native language, wherein the second language is used for communication with the one device. The method further includes directing the second request to the one device.","The use of the same reference symbols in different drawings indicates similar or items.","For a thorough understanding of the subject invention, refer to the following Detailed Description, including the appended Claims, in connection with the above-described Drawings. Although the present invention is described in connection with several embodiments, the invention is not intended to be limited to the specific forms set forth herein. On the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the scope of the invention as defined by the appended Claims.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details.","References in the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.","Communication with a device commonly involves use of a dynamic link library (DLL). A DLL is a collection of programs, any of which can be called when needed by another program that is running in the computer. A particular DLL program that enables the calling program to communicate with a specific device, such as a printer or scanner, is often packaged as a DLL file. DLL files that support specific device operation are known as device drivers.","The advantage of DLL files is that, because they are not loaded into random access memory (RAM) together with the main program, space is saved in RAM. When and if a DLL file is needed, then it is loaded and run. For example, as long as a user of Microsoft Word is editing a document, the printer DLL file does not need to be loaded into RAM. If the user decides to print the document, then the Word application causes the printer DLL file to be loaded and run.","As mentioned previously, typically device vendors will provide an application program interface (API) to communicate with a specific device. An API is the specific method prescribed by a computer operating system or by an application program by which a programmer writing an application program can make requests of the operating system or another application. An API can be contrasted with a graphical user interface or a command interface (both of which are direct user interfaces) as interfaces to an operating system or a program.","The term \u2018markup language\u2019 is used herein to describe a text-based language in which information can be encoded using structural features such as tags. SGML (Standard Generalized Markup Language) is one example of a standard for specifying a document markup language or tag set. Such a specification is itself a document type definition (DTD). SGML is not in itself a document language, but a description of how to specify one. SGML is metadata.","SGML is based on the idea that documents have structural and other semantic elements that can be described without reference to how such elements should be displayed. The actual display of such a document may vary, depending on the output medium and style preferences. Some advantages of documents based on SGML are:\n\n","The language that web browsers use, Hypertext Markup Language (HTML), is an example of an SGML-based language. There is a document type definition for HTML (and reading the HTML specification is effectively reading an expanded version of the document type definition). The markup languages described herein are not limited to SGML-based markup languages or HTML. The markup languages described herein need only provide the capability to define structure of the information in the document.","Introduction","The present invention relates to a method, system, application programming interface, and computer program product that enable enterprise data management application programs to request input\/output services from a device manager controlling devices. The device manager operates in a heterogeneous environment including incompatible devices provided by multiple vendors. These requests, and responses from the device manager to the enterprise data management application program, are communicated in a markup language format, rather than in a device-specific native language. This structure enables the vendor of the enterprise data management application program to send requests for services, including both data and instructions to use specialized features of a device, without the need to change the enterprise data management application program to support device-specific native languages.",{"@attributes":{"id":"p-0038","num":"0040"},"figref":"FIG. 1A","b":["110","120","122","110","130","130","130","130","130","130","130","130","130","132","132","132","132","132","110","140","130","130","132","140","134"]},"Device manager  can be considered to be language-independent because requests for input\/output services are communicated by enterprise application client  using markup language messages, rather than the native languages for devices. These markup language messages can be communicated, for example, via Remote Procedure Calls (RPC) between computers on a network, Component Object Model (COM) method calls, or by direct API calls, as shown by communication A between enterprise application client  and device markup language API . Device manager may be implemented, for example, as a servlet program, as part of an enterprise application, or using other techniques known in the art. Within device manager , device markup language API  is an interface for receiving and sending messages in a markup language format. Once received by device manager  via device manager language API , these markup language messages can be provided via communication  to markup language parser . Markup language parser  parses the markup language message and provides the results to device manager , as shown by communication .","The results provided by markup language parser  are used by device manager  to communicate with devices  using respective device-specific native language(s) for each of devices , as represented by device language-specific interfaces . Each of device language-specific interfaces  can be considered to correspond to a dynamic link library (DLL) for a respective one of devices .","Enterprise application client  includes an applet  that is downloaded from enterprise application web server  to run within a browser program (not shown) used for Internet communication. Applet  can generate markup language messages to communicate with device manager , such as markup language messages to request input\/output services on behalf of enterprise application client . In one embodiment, applet  is implemented as a Java applet, although applet  represents any type of program that can be used by enterprise application client  to allow a user (person or another program) to request services.","Enterprise application client  also includes control , which is a control program that can run outside a browser program (not shown) in which applet  executes. For example, control  may send markup language messages generated by applet  to device manager . Control  may have access privileges for accessing the client computer system (not shown) on which enterprise application client  runs, whereas applet  may not. For example, control  may be able to access client computer system resources to identify an address for device manager , whereas an applet typically cannot obtain such information. Applet  and control  can communicate via script messages, as shown by communication . The use of applet  and control  is one example of an implementation of enterprise application client , but the invention is not limited to such an implementation. Any implementation in which an enterprise application client, such as enterprise application client , can communicate with a language-independent device manager, such as device manager , is within the scope of the invention. Another example implementation of enterprise application client  is provided in , as described below.",{"@attributes":{"id":"p-0043","num":"0045"},"figref":["FIG. 1B","FIG. 1A"],"b":["110","130","140","110","120","140","110","114","117","122"]},"Server communication module C communicates with proxy server S via communication link . Communication via communication link  can be implemented using RPC, COM, hypertext transfer protocol (HTTP), or other communication protocols. Proxy server S in turn provides messages, as shown in client\/server communication , to enterprise application web server . Communication  can be accomplished, for example, using direct API calls, COM, or other inter-process communication techniques. Enterprise web application web server  then communicates markup language messages to device manager  via device markup language API , as shown in communication B. Communication B can be accomplished using RPC, COM, or direct API calls.","While  shows enterprise application client  as generating a request for service from device manager , it is possible that enterprise application server  may recognize the need to generate a request for service without enterprise application client  making the request. Enterprise application server  can then generate and send the appropriate markup language messages to make the request.",{"@attributes":{"id":"p-0046","num":"0048"},"figref":["FIG. 2A","FIG. 1A","FIGS. 2A through 3B"],"b":["110","140","2","1","110","2","2","110","114","2","3","114","140","110","2","4","114","116","116","114","114","116","116","116","140"]},"As noted above, control  has the ability to determine the address of device manager  and to communicate messages to device manager  on behalf of applet . This communication can be accomplished in several ways. For example, control  may send a message directly to device manager  using the address. Alternatively, control  may place a message into a queue that is periodically checked by device manager  to obtain messages, and device manager  may obtain the message from the queue. Other ways of communicating messages between enterprise application client  and device manager  are also within the scope of the invention.","In action A., control  sends the markup language messages generated by applet  to device manager  by calling a function of device markup language API . In action A., device manager  processes the request for information about attached devices. Processing the request may involve providing the markup language messages to markup language parser  of  (not shown here), obtaining the results of parsing the markup language messages, and initiating communication with devices  (not shown) via device language-specific interfaces  to identify the available attached devices. In action A., device manager  uses device markup language API  to provide a response to the request for information about attached devices to control . In action A., control  provides the response received from device manager  to applet . In action A., applet  processes the response and stores the attached device information for use in future input\/output service requests.",{"@attributes":{"id":"p-0049","num":"0051"},"figref":["FIG. 2B","FIG. 1B","FIG. 1A","FIG. 2B"],"b":["110","140","120","2","1","110","2","2","110","114","2","3","114","140","110","110","2","4","114","122","116","122","120"]},"In action B., server communication module C sends the markup language messages generated by applet  to proxy server S, which provides corresponding RPC, COM, or other communication services to communicate with server communication module C. In action B., proxy server S provides the messages received to enterprise application web server . In action B., enterprise application web server  sends the markup language messages to device manager  by calling a function of device markup language API . In action B., device manager  processes the request for information about attached devices. Processing the request may involve providing the markup language messages to markup language parser  of  (not shown here), obtaining the results of parsing the markup language messages, and initiating communication with devices  (not shown) via device language-specific interfaces  to identify the available attached devices.","In action B., device manager  uses device markup language API  to provide a response to the request for information about attached devices to enterprise application web server . In action B., enterprise application web server  provides the response received from device manager  to proxy server S. In action B., proxy server S sends the response including the attached devices information to server communication module C within enterprise application client . In action B., server communication module C provides the response to the original requester, applet . In action B., applet  processes the response and stores the attached device information for use in future input\/output service requests.",{"@attributes":{"id":"p-0052","num":"0054"},"figref":["FIG. 3A","FIG. 1A"],"b":["110","140","3","1","114","110","3","2","114","140","3","3","114","116"]},"In action A., control  sends the markup language print request generated by applet  to device manager  by calling a function of device markup language API . In action A., device manager  processes the print request. Processing the print request may involve providing the print request to markup language parser  of  (not shown here), obtaining the results of parsing the print request, selecting a device of devices  of  (not shown here) to fulfill the print request, translating the print request into a native language for the selected device, and initiating communication with the selected device (not shown) via that device's respective device language-specific interfaces  to communicate the print request.","In action A., device manager  uses device markup language API  to provide a response to the print request to control . The response to the print request may include a status of whether the print request was successfully completed. In action A., control  provides the response received from device manager  to applet  via a pre-defined script function call. In action A., applet  processes the response including the status of the print request. For example, if the response indicates that the print request was unsuccessful, applet  may send another print request to device manager .",{"@attributes":{"id":"p-0055","num":"0057"},"figref":["FIG. 3B","FIG. 1B"],"b":["110","140","120","3","1","114","3","2","114","140","3","3","114","122"]},"In action B., server communication module C sends the markup language print request generated by applet  to proxy server S. In action B., proxy server S provides the markup language print request to enterprise application web server . Enterprise application web server  then sends the markup language print request to device manager  by calling a function of device markup language API  in action B.. In action B., device manager  processes the markup language print request. Processing the print request may involve providing the print request to markup language parser  of  (not shown here), obtaining the results of parsing the print request, selecting a device of devices  of  (not shown here) to fulfill the print request, translating the print request into a native language for the selected device, and initiating communication with the selected device (not shown) via that device's respective native API of device language-specific interfaces  to communicate the print request.","In action B., device manager  uses device markup language API  to provide a response to the print request to enterprise application web server . The response to the print request may include a status of whether the print request was successfully completed. In action B., proxy server S obtains the response from enterprise application web server . In action B., proxy server S provides the response received from device manager  to server communication module C within enterprise application client . In action B., enterprise application client  sends the response to the print request, including the status, to applet . In action B., applet  processes the response including the status of the print request. For example, if the response indicates that the print request was unsuccessful, applet  may send another print request to device manager .","In the examples described above with reference to , device manager  performs several functions and can be considered to serve as a module, means, or instructions for performing each of those functions. For example, device manager  obtains a request to provide a service from enterprise application client  and can be considered to be an obtaining module, means, and\/or instructions. Device manager  also performs the functions of identifying or selecting one device to provide the service; converting the request to a second request in a second language, wherein the second language is a device-specific native language used for communication with the one device; and directing the second request to the one device.",{"@attributes":{"id":"p-0059","num":"0061"},"figref":["FIG. 4","FIGS. 1A and 1B","FIG. 1A"],"b":["1","114","114","116","116","114","114","110"],"i":["c","c","c "]},"Objects instantiating applet class can be configured to use objects instantiating a control class, such as control  instantiating control class , and\/or objects instantiating a server communication module class, such as server communication module C instantiating server communication module class Cc. Objects instantiating control class can be configured to communicate with a device manager object, such as device manager  instantiating a device manager class , using device markup language API  (not shown). By having access to an object instantiating device manager class , an object instantiating control class can communicate with device controller system  and device language-specific interfaces  to access devices . Server communication module class Cc is configured to use a proxy server object, instantiating proxy server class Sc.","The markup language messages communicated between objects can be considered to include a header, made up of instructions, and a payload, which includes data upon which the instructions are to be performed. Markup language messages can be configured to use specific features of particular devices by specifying an optional variable in the instructions and providing a value for the optional variable in the payload. Device markup language API  of  can define a messaging protocol for communicating with device manager . For example, device markup language API  can include a request definition for a command providing a request for service to device manager , a response definition for a response format in which a response to the request is provided, and an initialization command for initializing prior to providing a request for service.","By providing a markup language message format, clients of device manager  can provide the optional variables and values as part of a configurable request. Markup language parser  can be configured to recognize those optional variables, and device manager  can convert the request to a device language-specific interface commands. Applications can take advantage of special features provided by a specific device without the need to modify source code of the applications.",{"@attributes":{"id":"p-0063","num":"0065"},"figref":["FIGS. 5A through 5D","FIG. 5A","FIG. 1A"],"b":["510","140","1","130","510","510","510","512","514","512","1","514"]},{"@attributes":{"id":"p-0064","num":"0066"},"figref":["FIG. 5B","FIG. 1A","FIG. 5A"],"b":["140","1","510","520","520","520","522","524","522","524"]},{"@attributes":{"id":"p-0065","num":"0067"},"figref":["FIG. 5C","FIG. 1A","FIG. 5A"],"b":["140","1","510","530","530","530","532","534","532","534","534"],"sub":"\u2014"},{"@attributes":{"id":"p-0066","num":"0068"},"figref":"FIGS. 5A through 5C","b":["110","140","140","130","110","140","140","140"]},{"@attributes":{"id":"p-0067","num":"0069"},"figref":"FIG. 5D","b":["540","540","540","540","542","544","542","544"]},"The above-described embodiments of the invention can be implemented in a variety of computing and networking environments. An example networking environment in which the present invention can operate is described below with reference to , and an example computing environment that can be used to implement the invention is described below with reference to .","An Example Networking and Computing Environment",{"@attributes":{"id":"p-0069","num":"0071"},"figref":["FIG. 6","FIG. 6"],"b":["600","610","1","620","1","620","1","610","1","620","1","610","1","620","1"]},"One or more of client computers ()-(N) and\/or one or more of servers ()-(N) may be, for example, a computer system of any appropriate design, in general, including a mainframe, a mini-computer or a personal computer system. One such example computer system, discussed in terms of client computers ()-(N), is shown in detail in .",{"@attributes":{"id":"p-0071","num":"0073"},"figref":["FIG. 7","FIG. 6"],"b":["710","620","1","710","712","710","714","716","718","720","722","724","726","728","730","732","733","734","736","738","740","742","746","712","728","747","712","730","748","712"]},"Bus  allows data communication between central processor  and system memory , which may include both read only memory (ROM) or flash memory (neither shown), and random access memory (RAM) (not shown), as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded and typically affords at least 64 megabytes of memory space. The ROM or flash memory may contain, among other code, the Basic Input-Output system (BIOS) which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system  are generally stored on and accessed via a computer readable medium, such as a hard disk drive (e.g., fixed disk ), an optical drive (e.g., CD-ROM drive ), floppy disk unit  or other storage medium. Additionally, applications may be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem  or interface .","Storage interface , as with the other storage interfaces of computer system , may connect to a standard computer readable medium for storage and\/or retrieval of information, such as a fixed disk drive . Fixed disk drive  may be a part of computer system  or may be separate and accessed through other interface systems. Modem  may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider (ISP). Network interface  may provide a direct connection to a remote server via a direct network link to the Internet via a POP (point of presence). Network interface  may provide such connection using wireless techniques, including digital cellular telephone connection, general packet radio service (GPRS) connection, digital satellite data connection or the like.","Many other devices or subsystems (not shown) may be connected in a similar manner (e.g., bar code readers, document scanners, digital cameras and so on). Conversely, it is not necessary for all of the devices shown in  to be present to practice the present invention. The devices and subsystems may be interconnected in different ways from that shown in . The operation of a computer system such as that shown in  is readily known in the art and is not discussed in detail in this application. Code to implement the present invention may be stored in computer-readable storage media such as one or more of system memory , fixed disk , CD-ROM , or floppy disk . Additionally, computer system  may be any kind of computing device, and so includes personal data assistants (PDAs), network appliances, X-window terminals or other such computing devices. Computer system  also supports a number of Internet access tools, including, for example, an HTTP-compliant web browser having a script interpreter, such as a JavaScript interpreter.","As explained above, the invention described herein can be implemented in a variety of computing and networking environments and is designed to facilitate communication between heterogeneous, incompatible devices and computer systems provided by multiple vendors. The invention enables enterprise data management application programs to request input\/output services from a device manager controlling devices without requiring device-specific knowledge. Requests for services, and responses from the device manager to the enterprise data management application program, are communicated in a markup language format, rather than in a device-specific native language. This structure enables the vendor of the enterprise data management application program to send requests for services, including both data and instructions to use specialized features of a device, without the need to change the enterprise data management application program to support device-specific native languages.","By using a markup language format for communication, integration of new devices is straightforward. Testing for new devices involves ensuring that the message formats conform to the device markup language API request and response formats. Optional variables and values can be specified to take advantage of specific features of a particular device without requiring modification of software for other devices.","The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted, described, and is defined by reference to particular embodiments of the invention, such references do not imply a limitation on the invention, and no such limitation is to be inferred. The invention is capable of considerable modification, alteration, and equivalents in form and function, as will occur to those ordinarily skilled in the pertinent arts. The depicted and described embodiments are examples only, and are not exhaustive of the scope of the invention.","The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, operation and\/or component illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof.","The present invention has been described in the context of fully functional computer systems; however, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include recordable media such as floppy disks and CD-ROM, transmission type media such as digital and analog communications links, as well as media storage and distribution systems developed in the future.","The above-discussed embodiments may be implemented by software modules that perform certain tasks. The software modules discussed herein may include script, batch, or other executable files. The software modules may be stored on a machine-readable or computer-readable storage medium such as a disk drive. Storage devices used for storing software modules in accordance with an embodiment of the invention may be magnetic floppy disks, hard disks, or optical discs such as CD-ROMs or CD-Rs, for example. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention may also include a semiconductor-based memory, which may be permanently, removably or remotely coupled to a microprocessor\/memory system. Thus, the modules may be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer-readable storage media may be used to store the modules discussed herein.","The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein, and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein, without departing from the scope of the invention. Consequently, the invention is intended to be limited only by the scope of the appended claims, giving full cognizance to equivalents in all respects."],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","TERMINOLOGY","OTHER EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objectives, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2A","FIG. 1A"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2B","FIG. 1B"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3A","FIG. 1A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3B","FIG. 1B"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIGS. 1A and 1B"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5A","FIG. 1A"],"b":"1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 5B","FIG. 1A","FIG. 5A"],"b":"1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
