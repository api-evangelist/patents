---
title: Leasing fragmented storage between processes
abstract: A mechanism is provided for leasing fragmented storage between processes. The mechanism comprises a fragmented memory manager associated with instances of virtual memory managers to provide a pool of memory that may lease from the owners of the memory and in turn sub-let the memory for use by other processes or owners. The mechanism allows programs to operate under normal conditions until fragmentation sets. A different memory manager leases those fragmented memory blocks from processes to create a virtually contiguous block of memory that it can sub-lease to processes in need of temporary expansion beyond the memory available for the processes under normal circumstances.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08661221&OS=08661221&RS=08661221
owner: International Business Machines Corporation
number: 08661221
owner_city: Armonk
owner_country: US
publication_date: 20110316
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for leasing fragmented storage between processes.","Fragmentation is a phenomenon in which free storage becomes divided into many small pieces over time. Fragmentation is a weakness of certain storage allocation algorithms, occurring when an application allocates and de-allocates regions of storage of varying sizes, and the allocation algorithm responds by leaving the allocated and de-allocated regions interspersed. The result is that although free storage is available, it is effectively unusable because it is divided into pieces that are too small to satisfy the demands of the application. The term \u201cexternal\u201d refers to the fact that the unusable storage is outside the allocated regions.","For example, in dynamic memory allocation, a block of 1000 bytes might be requested, but the largest contiguous block of free space has only 300 bytes. Even if there are ten blocks of 300 bytes of free space, separated by allocated regions, one still cannot allocate the requested block of 1000 bytes, and the allocation request will fail. Fragmentation also occurs in file systems as many files of different sizes are created, change size, and are deleted. The effect is even worse if a file that is divided into many small pieces is deleted, because this leaves similarly small regions of free spaces.","Modern computer systems have memory management units that avoid fragmentation by creating a more granular allocation strategy or by providing abstraction that makes virtual memory addresses appear contiguous even when physical addresses cannot be. This usually results in higher latency due to extra cycles needed to accomplish the allocation strategy. In normal operating environments, fragmentation continues to occur.","In one illustrative embodiment, a method, in a data processing system, is provided for leasing fragmented storage between processes. The method comprises responsive to a first process running in the data processing system marking a fragment of storage as being leased out, adding, by a fragment pool manager running in the data processing system, the fragment of storage to an unallocated storage pool. The method further comprises responsive to a request to lease a portion of storage from a second process, constructing, by the fragment pool manager, one or more blocks of storage. The method further comprises allocating, by the fragment pool manager, the one or more blocks of storage to the second process and managing, by the fragment pool manager, access to the one or more blocks of storage by the second process.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide a mechanism for leasing fragmented storage between processes. The mechanism comprises a fragmented storage manager associated with instances of virtual memory managers to provide a pool of storage that may lease from the owners of the storage and in turn sub-let the storage for use by other processes or owners. The mechanism allows programs to operate under normal conditions until fragmentation sets. A different storage manager leases those fragmented storage blocks from processes to create a virtually contiguous block of storage that it can sub-lease to processes in need of temporary expansion beyond the storage available for the processes under normal circumstances.","The illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment, a single data processing device, or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","102","100","102"]},"In the depicted example, server  and server  are connected to network  along with storage unit . In addition, clients , , and  are also connected to network . These clients , , and  may be, for example, personal computers, network computers, or the like. In the depicted example, server  provides data, such as boot files, operating system images, and applications to the clients , , and . Clients , , and  are clients to server  in the depicted example. Distributed data processing system  may include additional servers, clients, and other devices not shown.","In the depicted example, distributed data processing system  is the Internet with network  representing a worldwide collection of networks and gateways that use the Transmission Control Protocol\/Internet Protocol (TCP\/IP) suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, governmental, educational and other computer systems that route data and messages. Of course, the distributed data processing system  may also be implemented to include a number of different types of networks, such as for example, an intranet, a local area network (LAN), a wide area network (WAN), or the like. As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"],"b":["200","110"]},"In the depicted example, data processing system  employs a hub architecture including north bridge and memory controller hub (NB\/MCH)  and south bridge and input\/output (I\/O) controller hub (SB\/ICH) . Processing unit , main memory , and graphics processor  are connected to NB\/MCH . Graphics processor  may be connected to NB\/MCH  through an accelerated graphics port (AGP).","In the depicted example, local area network (LAN) adapter  connects to SB\/ICH . Audio adapter , keyboard and mouse adapter , modem , read only memory (ROM) , hard disk drive (HDD) , CD-ROM drive , universal serial bus (USB) ports and other communication ports , and PCI\/PCIe devices  connect to SB\/ICH  through bus  and bus . PCI\/PCIe devices may include, for example, Ethernet adapters, add-in cards, and PC cards for notebook computers. PCI uses a card bus controller, while PCIe does not. ROM  may be, for example, a flash basic input\/output system (BIOS).","HDD  and CD-ROM drive  connect to SB\/ICH  through bus . HDD  and CD-ROM drive  may use, for example, an integrated drive electronics (IDE) or serial advanced technology attachment (SATA) interface. Super I\/O (SIO) device  may be connected to SB\/ICH .","An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system  in . As a client, the operating system may be a commercially available operating system such as Microsoft Windows 7 (Microsoft and Windows are trademarks of Microsoft Corporation in the United States, other countries, or both). An object-oriented programming system, such as the Java programming system, may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system  (Java is a trademark of Oracle and\/or its affiliates.).","As a server, data processing system  may be, for example, an IBM\u00ae eServer\u2122 System p\u00ae computer system, running the Advanced Interactive Executive (AIX\u00ae) operating system or the LINUX operating system (IBM, eServer, System p, and AIX are trademarks of International Business Machines Corporation in the United States, other countries, or both, and LINUX is a registered trademark of Linus Torvalds in the United States, other countries, or both). Data processing system  may be a symmetric multiprocessor (SMP) system including a plurality of processors in processing unit . Alternatively, a single processor system may be employed.","Instructions for the operating system, the object-oriented programming system, and applications or programs are located on storage devices, such as HDD , and may be loaded into main memory  for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit  using computer usable program code, which may be located in a memory such as, for example, main memory , ROM , or in one or more peripheral devices  and , for example.","A bus system, such as bus  or bus  as shown in , may be comprised of one or more buses. Of course, the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit, such as modern  or network adapter  of , may include one or more devices used to transmit and receive data. A memory may be, for example, main memory , ROM , or a cache such as found in NB\/MCH  in .","Those of ordinary skill in the art will appreciate that the hardware in  may vary depending on the implementation. Other internal hardware or peripheral devices, such as flash memory, equivalent non-volatile memory, or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in . Also, the processes of the illustrative embodiments may be applied to a multiprocessor data processing system, other than the SMP system mentioned previously, without departing from the spirit and scope of the present invention.","Moreover, the data processing system  may take the form of any of a number of different data processing systems including client computing devices, server computing devices, a tablet computer, laptop computer, telephone or other communication device, a personal digital assistant (PDA), or the like. In some illustrative examples, data processing system  may be a portable computing device which is configured with flash memory to provide non-volatile memory for storing operating system files and\/or user-generated data, for example. Essentially, data processing system  may be any known or later developed data processing system without architectural limitation.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["340","332","334","336","340","320","310","380","372","374","376","380","360","350"]},"In the examples depicted hereafter, the term \u201cmemory\u201d is used for simplicity. However, the mechanisms of the illustrative embodiments may manage memory, virtual memory, disk storage, or any form of storage or combinations of volatile memory and non-volatile storage. For instance, virtual memory itself may comprise a combination of volatile memory and non-volatile storage.","In the depicted example, processes , ,  may request memory from memory manager , which allocates blocks of memory  to processes , , . Because of fragmentation, processes , ,  may have portions of memory  that are unusable, represented as fragmented memory . While each individual fragment of memory may be too small to be usable for a given process, the collective fragmented memory , which likely is not contiguous memory, may be re-apportioned to form virtual memory or file system blocks to be allocated to processes in the same or a different logical partition.","In accordance with an illustrative embodiment, memory manager  includes fragmented memory manager  that is configured to manage fragmented memory  to lease unusable fragments from the owners of the memory and, in turn, sub-let portions of fragmented memory  for use by other processes or owners.","In the depicted example, memory manager  in logical partition  includes fragmented memory manager , which is configured to lease fragmented memory from fragmented memory manager  on behalf of one or more of processes , , . Thus, fragmented memory manager  may add leased memory  from fragmented memory  to memory  to temporarily expand the amount of available memory beyond the capacity of memory .","In one example embodiment, fragmented memory manager  and fragmented memory manager  may be identical, both being configured to lease in and lease out fragmented memory. In an alternative embodiment, fragmented memory manager  may be configured only to lease out fragmented memory to processes within the same or different logical partitions. In one embodiment, fragmented memory manager  may be configured to lease in fragmented memory without the capability of leasing out fragmented memory.","In the illustrative embodiments, to \u201clease\u201d is to share under some predefined terms. In the depicted example, use of the term \u201clease\u201d does not necessarily imply that memory is shared in exchange for an amount of monetary benefit, although such an embodiment is within the scope of this disclosure. In one illustrative embodiment, the predefined terms may indicate an infinite lease, a time-bound lease, or a lease based on other meta-data. At the expiration of a lease, fragmented memory manager  or fragmented memory manager , or both, may automatically renew the lease or may terminate the lease to reclaim the memory.","In another example embodiment, processes , ,  may lease out any portion of memory that a given process determines is not needed for a predetermined period of time, rather than only leasing out unusable fragments. This allows other processes to borrow (lease-in) a portion of memory for a fixed amount of time when it is known that the portion of memory will only be needed for that fixed amount of time.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4","b":["404","408","414"]},"Fragment detector  is programming logic that is embedded within virtual memory\/file or disk sub-system manager  to detect the presence of unusable fragments. For example, in case of a hard disk, a chunk of memory that is lower than the page and\/or block size could be identified as a fragment. In a Java\u2122 heap, the Java\u2122 virtual machine (JVM) may identify virtual memory addresses that would not satisfy observed allocation requests.","In one example embodiment, fragment detector  may identify portions of memory that are usable but not needed. Thus, an application process or sub-system logic may lease out portions of memory while they are not needed and then reclaim those portions of memory when they are needed.","In an example embodiment, virtual memory\/file or disk sub-system manager  may trigger fragment detector  when a storage allocation fails due to lack of memory or any other configurable events rather than always running. Thus, fragment detector  may have zero overhead when memory is abundant.","One aspect is what happens if a fragment is no longer a fragment. For example, a fragment of 300 bytes may be wedged between two 1000 byte allocated space. Then, when one or both of the 1000 byte allocation is freed, the unusable fragment becomes usable. In the illustrative embodiment, the fragment detector would no longer report such a fragment as unusable. If that memory has been let out, the fragment manager may need to hold onto the 300 bytes until the current lease expires.","Fragment lease manager  is a sub-program that exists within each application or sub-system logic  that is configured to lease out fragments from its memory or managed segments to fragment pool manager  and is configured to lease in memory from fragment pool manager . Lease-in manager  and lease-out manager  may be separate programs, if needed, allowing for some applications or sub-systems to do one and not the other.","Fragment pool manager  is an external sub-system that collects addresses of fragmented memory or file system areas and constructs virtual memory\/file system blocks that can be allocated to other programs. Fragment pool manager  works with a memory management system, such as kernel memory manager in UNIX\u00ae operating system. \u201cUNIX\u201d is a registered trademark of The Open Group in the United States, other countries, or both. Fragment pool manager  is configured to lease in memory from lease capable programs or sub-systems and lease out memory\/file system blocks to programs in need.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 5","b":["506","502","504","506","508","512","506","512","506","510","506","510","514","506","514","516","518"]},"Other JVMs that need heap beyond the system limit, or even under normal circumstances, may choose to lease memory from fragmented memory manager . Because the owning JVM still controls the memory, all accesses, including read\/write operations, may be routed through that JVM. This allows sharing of memory only between compatible JVMs. However, if fragmented memory manager  converts fragmented memory  is made into a shared-memory-like resource, then fragmented memory manager  may control all accesses, even accesses from other operating environments. JVM  may comprise an application programming interface (API)  to allow other programs to communicate with lease-in manager  and lease-out manager .","In the depicted example, fragmented memory manager  may perform the functions described above with respect to fragment lease manager  and fragment pool manager  in . Alternatively, fragmented memory manager  may perform functions of a fragment lease manager and communicate with a fragment pool manager (not shown) that is external to JVM .",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 6","b":["610","620","630","640","610","620","630"]},"Processes running in processing environment  may lease out memory to other processes in the same processing environment  or to processes running in processing environment  or processing environment . That is, the fragment pool manager of processing environment  may communicate with the fragment pool manager of processing environment  or the fragmented memory manager of processing environment  via communication medium . Similarly, processes running in processing environment  may lease in or lease out memory to processes in processing environment  or processing environment , and processes running in processing environment  may lease in or lease out memory to processes in processing environment  or processing environment .","Communication medium may be a symmetric multi-processing bus, a computer bus, such as a Peripheral Component Interconnect (PCI) bus, a switched fabric, a network, such as an Ethernet network, a wireless network, or the Internet. Thus, the mechanisms of the illustrative embodiments may allow processes to lease in or lease out portions of memory within a physical processor, within a multiple processor data processing system, within a network, or within a cloud computing environment.","As seen in , the distributed computing environment includes a plurality of fragment pool managers. These fragment pool managers may collaborate in a peer-to-peer configuration or, alternatively, in a master-slave configuration. In one example embodiment, one processing environment may act as the master while the remaining processing environments act as slave fragment pool managers. In another example embodiment, a master fragment pool manager  may communicate with a plurality of slave fragment pool managers in processing environments , , and . Whether the distributed computing environment uses a peer-to-peer configuration or a master-slave configuration, the distributed computing environment of  may allow diverse storage managers to act together. The ratio of pool managers to lease managers need not be one-to-one. Therefore, in yet another example environment, processing environments , , and  may not have fragment pool managers, and the fragment lease managers of processing environments , , and  may communicate directed with a central fragment pool manager .","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium(s) having computer usable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or any suitable combination of the foregoing. More specific examples (anon-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Computer code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc., or any suitable combination thereof.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus, or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":["702","704","702","704","706","702"]},{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 8","b":["802","804","806","808","802"]},"If the fragment lease manager determines that a process does not request to lease out memory, the fragment lease manager determines whether the process to which the fragment lease manager is associated requests to lease in memory (block ). If the fragment lease manager determines that it is to lease in memory, the fragment lease manager requests memory from the fragment pool manager (block ). In one example embodiment, the fragment lease manager(s) from which the memory fragments leased manage the lease. Thereafter, operation returns to block  to determine whether a process requests to lease out memory.","If the fragment lease manager determines that a process does not request to lease in memory in block , the fragment lease manager determines whether a lease that the fragment lease manager is managing expires (block ). If a lease does not expire in block , operation returns to block  to determine whether a process requests to lease out memory.","If the fragment lease manager determines that a lease expires in block , the fragment lease manager determines whether to renew the lease (block ). The fragment lease manager may make this determination based on the terms of the lease set in block . As described above, these terms may include a time limit for the lease of memory fragments. The fragment lease manager may determine whether the owning process needs to reclaim the memory or whether the lessee process still needs the memory. The terms of the lease may also include an indication that the process may automatically renew the lease. The terms of the lease may include an indication that the owning process may reclaim the memory at the conclusion of the lease. The fragment lease manager may also make this determination based on a policy data structure. If the fragment lease manager decides to renew the lease, the fragment lease manager resets the lease terms (block ). Then, operation returns to block  to manage the lease.","If the fragment lease manager decides not to renew the lease in block , the fragment lease manager instructs lessee process to relinquish the memory (block ) and notifies the fragment pool manager of the freed fragmented memory (block ). Thereafter, operation returns to block  to determine whether a process requests to lease out memory.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 9","b":["902","904","906","908","902"]},"If the fragment pool manager is not to allocate memory out in block , the fragment pool manager determines whether it is to receive memory in from an application associated with the fragment pool manager (block ). The fragment pool manager may make this determination based on one or more unusable memory fragments being detected or based on a lease expiring. If the fragment pool manager is to receive fragments of memory in, the fragment pool manager adds the fragments) to the unallocated memory pool (block ). Thereafter, or if the fragment pool manager determines that it is not to receive memory in, operation returns to block  to determine if the fragment pool manager is to lease out memory.","The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Thus, the illustrative embodiments provide mechanisms for leasing fragmented storage between processes. The mechanism comprises a fragmented memory manager associated with instances of virtual memory managers to provide a pool of memory that may lease from the owners of the memory and in turn sub-let the memory for use by other processes or owners. The mechanism allows programs to operate under normal conditions until fragmentation sets. A different memory manager leases those fragmented memory blocks from processes to create a virtually contiguous block of memory that it can sub-lease to processes in need of temporary expansion beyond the memory available for the processes under normal circumstances.","With the mechanisms of the illustrative embodiments, programs can continue to function beyond their otherwise normal memory limits. Instead of spending normal application machine cycles avoiding fragmentation, the mechanisms of the illustrative embodiments allow applications to execute under normal mode, while utilizing idle cycles to detect and organize fragmented memory. The pool of fragmented memory transcends process or file system boundaries, allowing more effective use of memory across the system. The only overhead for individual processes is the mechanism to detect unusable fragments and marking them for leasing out to the fragment pool manager. Actual use of the fragmented memory is governed by the fragment pool manager, which can be external to the process owning the fragment, hence minimizing the overhead on individual processes providing the fragments. By allowing fragments to be used only as a last resort and making that use time bound, the latency of accessing such memory is only incurred during that time and only for those memory blocks.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
