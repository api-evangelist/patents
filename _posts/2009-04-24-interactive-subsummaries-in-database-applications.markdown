---
title: Interactive sub-summaries in database applications
abstract: A system displays content from a database in a formatted view. The formatted view includes one or more data fields arranged in one or more data sections. Each of the data sections includes a sub-summary display field. The system receives a request to modify data in one of the data fields. In response, the system reformats the formatted view. The reformatting includes moving the data field from a first data section to a second data section and updating the sub-summary display field in the first data section and the sub-summary display field in the second data section. The system displays the reformatted view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484560&OS=08484560&RS=08484560
owner: Apple Inc.
number: 08484560
owner_city: Cupertino
owner_country: US
publication_date: 20090424
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Interactive Sub-Summary Overview","Example Process for Modifying Data in a Data Field","Example Process for Modifying a Layout","Formatting Viewable Layout","Example System Architecture"],"p":["This disclosure relates generally to database applications.","Many modern database tools integrate a database engine with a graphical user interface (GUI). In the GUI, the content of the database is formatted and displayed according to a layout. To modify the displayed content in conventional database tools, a user either updates the content in the database using a database editing tool or updates the layout using a layout editor. The content is formatted again using the updated data and updated layout. When multiple users use the same layout, one user's update in the layout is propagated to all users. Therefore, the conventional database tools are not suitable when a user intends to experiment with various layouts without affecting other users.","In some implementations, a system displays database content formatted using a cached layout. Unlike conventional database tools, a user can modify data and a display layout directly on the display without using components such as a database editor or a layout editor. The modifications of the data and the layout can be stored locally. Therefore, a user can make layout changes without propagating the changes to other users. The changes can be reflected immediately on the display, without the user having to run another database query or perform a complete reformat the data. The system can create, update, and delete sub-summary data fields interactively in response to the user's changes.","In some implementations, a system displays content from a database in a formatted view. The formatted view includes one or more data fields arranged in one or more data sections. Each of the data sections includes a sub-summary display field. The system receives a request to modify data in one of the data fields. In response, the system reformats a displayed portion of the formatted view. The reformatting includes moving the data field from a first data section to a second data section and updating the sub-summary display field in the first data section and the sub-summary display field in the second data section. The system displays the reformatted view.","In some implementations, a system displays database content in a formatted view. The formatted view is formatted based on a main layout. The formatted view includes one or more data fields. Upon receiving a request to add a new data field, the system updates a cached layout associated with the formatted view based on the request. Updating the cached layout includes creating a new layout node in the cached layout to represent the new data field; identifying layout nodes that are relevant to the new data field from the main layout; and copying the identified layout nodes from the main layout to the cached layout. The system reformats the formatted view according to the cached layout.","The details of one or more implementations of interactive sub-summaries are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of interactive sub-summaries will become apparent from the description, the drawings, and the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1A","b":"100"},"However, the user sometimes needs to modify the data that the user is viewing, e.g., to correct a particular number while viewing the formatted data in a display view in a database reporting tool. In a conventional database application program, the user is required to access  the database editing tool, which can be an application program that is different from the application program that the user is viewing. The conventional database application needs to authenticate the user and determine that the user has sufficient privilege to edit the database. If the user does not have sufficient privilege to access the database editing functions, the user cannot continue. After the conventional database application authenticates the user and determines that the user has sufficient privilege to edit the database, the user can modify  database content in the database editing tool. After modifying the database content, the user returns to the database reporting tool, re-runs the user's database queries to retrieve the updated content, and uses the database reporting tool to format  the updated content. The conventional database reporting tool includes a main layout for the database application the user is running. The user can further edit the main layout to change the way the database content is displayed. The updated content is formatted according to the edited main layout. As a result, the conventional database application generates  a new display view. The user can repeat the process to further edit the database content or edit the main layout. In the conventional process , the user's data editing is committed to the database. The user's modification of the main layout changes the main layout. The changes made by the user are therefore propagated to other database applications and other users that access the same content or use the same layout.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1B","b":["150","160","170"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIGS. 2A and 2B","FIG. 2A"],"b":["200","200","210","200","200"]},{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"sales"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"FIELD","TYPE","KEY"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"row_id","INT NOT NULL AUTO_INCREMENT","YES"]},{"entry":[{},"region","VARCHAR(100)"]},{"entry":[{},"sales_rep","VARCHAR(100)"]},{"entry":[{},"num_sales","INT(11)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},"In example table view , a sub-summary is displayed for each region. A sub-summary can be a summary field that summarizes a particular data column based on a particular grouping. For example, sub-summary field , which shows a value \u201c600,\u201d is a sub-summary representing a summation on the column \u201cnum_sales\u201d and based on a grouping by region \u201cA.\u201d Similarly, sub-summary field  summarizes total sales for region \u201cB.\u201d In various implementations, the sub-summary field can be created by a database statement. For example, a Structured Query Language (\u201cSQL\u201d) statement \u201cSELECT SUM(num_sales) FROM sales GROUP BY region;\u201d can be used. The sub-summary field can also be created by parsing the database result set returned from the database in response to a query or parsing cached database result sets. In some implementations, a sub-summary field can also be a field that represents an average, a median, a minimum, a maximum, or other calculations on the data column.","A user can edit a field  directly in the database reporting tool. For example, sales representative \u201cCarl\u201d is in region group \u201cA.\u201d The user can change the region of \u201cCarl\u201d from region \u201cA\u201d to region \u201cB.\u201d In some implementations, the changes are stored in a data cache area. The saved changes can be committed to the database upon a user request (e.g., by pressing a button that invokes a \u201ccommit\u201d of the data). In some implementations, the changes are immediately committed to the database without further user interference. If committing the changes to the database is unsuccessful (e.g., when the data field is a result of a calculation that cannot be modified, when database field is protected, or when the user does not have privilege to update the database), an error message can be displayed.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2B","FIG. 2A"],"b":["210","200","210","212","214","216"]},"The example display views  and  in  are table views. In a table view, the data from the database are displayed in tabular format, e.g., with rows and columns. In various implementations, a displayed view can be a list view, a browser view, or other forms of view. A list view can differ from a table view in that, for example, the data need not be organized in a tabular format, and the regions \u201cA,\u201d \u201cB,\u201d and \u201cC\u201d need not be repeated for each sales representative. In some implementations, where object-oriented technologies are employed, a table view class can be a subclass of a list view class.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 3A and 3B","b":["300","350","300","350","300","350"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3A","b":["300","300"]},"In some implementations, more than one data columns can be used as multi-level group fields, separately or in combination. For example, a database table can include country data (e.g., \u201cUS,\u201d \u201cCanada,\u201d etc.), state data (e.g., \u201cCalifornia,\u201d \u201cBritish Columbia,\u201d etc.), in addition to the region data (e.g., \u201cA,\u201d \u201cB,\u201d etc.). Sub-summaries can be calculated at each level of grouping. For example, a first level sub-summary can be calculated for each region, a second level sub-summary can be calculated for each state, and a third level sub-summary can be calculated for each country.","In some implementations, the more than one group fields can be used in conjunction as a single level group field. For example, a database table can contain data on sales representatives, regions of the sales representatives, and managers of the sales representatives. The data columns \u201cregion\u201d and \u201cmanager\u201d can be combined to form a single group field (e.g., by a SQL clause \u201cGROUP BY region, manager\u201d). A sub-summary can be calculated for each of the groups grouped by \u201cregion, manager.\u201d","In step , the system receives a first request to modify data in a data field in the displayed data fields. In some implementations, the request to modify data is a user clicking on a data field. For example, referring to , the data column \u201cRegion\u201d displays three data fields of \u201cAs,\u201d two data fields of \u201cBs,\u201d and two data fields of \u201cCs.\u201d The user can click on the data field  to edit the data in the data field .","In step , upon receiving the user's editing, the system can commit the edited data into the database. In various implementations, the database reporting tool sends data manipulating statements through a database interface to retrieve data. A database interface can include database drivers that contain specific details with regard to the database. Examples of database interface are database-specific Application Programming Interface (\u201cAPI\u201d) (e.g., TransactSQL), language-specific API (e.g., Java Database Connectivity (\u201cJDBC\u201d)), and standard procedural API (e.g., Open Database Connectivity (\u201cODBC\u201d)). The retrieved data can be organized in various data structures as results sets. In some implementations, JDBC is used. In the example code below, a query is executed to update the database.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"right"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Statement stmt = con.createStatement( );",{}]},{"entry":[{},"stmt.executeQuery(\u201cUPDATE sales SET region=\u2019B\u2019"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003\u2003WHERE row_id=3\u201d);","(1)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In the example code (1), a \u201crow_id\u201d field is used to identify the row in the database that needs to be updated. In various implementations, a key data field (e.g., a data field whose value can be used to uniquely identify a row in a database table) is tracked and associated with the displayed rows in the formatted view (e.g., table view ), although the key data field itself may not be displayed. Also in example code (1), a \u201cregion\u201d data field is updated. The system can identify which data field to update based on a corresponding display field in the display view. For example, a \u201cRegion\u201d column in table view  corresponds to the \u201cregion\u201d data field in the database table. The correspondence between a data field and a display field can be determined by the layout.","In step , the system reformats the formatted view (e.g., table view ). In various implementations, reformatting the formatted view can include moving the edited data field from an original group section to a target group section, and updating the sub-summary display field of the original group section and the target group section (e.g., as in table view ).","To reformat the formatted view, the system applies a layout to the edited data. When the sub-summary fields are live and interactive (e.g., can change based on user editing), it is possible that the sub-summary field moves during the live interaction (e.g., in views  and , sub-summary  for region \u201cA\u201d moves from a position in the fourth place in the body of the table in view  to a position in the third place in view ). The move can be determined by the layout. In database reporting tools, a formatter program can apply a layout to the data retrieved from the database and place certain data fields in certain places in certain format. For example, the layout can determine that the data are displayed in a size 12 font, in table cells that is 40 pixels high and 100 pixels wide, etc. In addition, a layout can determine the relative positions of various fields, e.g., where a sub-summary field is displayed on a screen.","Moving the edited data field from an original data section to a target data section can include creating a new data section. For example, in editing table view , a user can change the data in data field  from \u201cA\u201d to \u201cD.\u201d Table view  does not include a region \u201cD.\u201d Therefore, the system can create a separate data section \u201cD\u201d in table view  to accommodate the edited data. The system can put the newly created data section in a proper place among the existing data sections by re-sorting the data sections based on the new data value in the edited data field if the original data sections were sorted on the data column of the edited data field. A new sub-summary field can also be created for the new data section.","Moving a data field from an original data section to a target data section can include deleting an entire data section. For example, in editing table view , a user can change data in all \u201cRegion\u201d data fields in section \u201cA\u201d from \u201cA\u201d to \u201cB.\u201d In response to the change, the system removes data section for region \u201cA\u201d after deleting all records from the region \u201cA\u201d section and inserting the records into the region \u201cB\u201d section. In some implementations, the system identifies the original data section in which the data field being edited belongs. After editing, the system adds the edited data field to a target data section (which can be a new data section). The system examines the original data section. If there are no more records (e.g., data fields) in the original data section, the original data section is removed. The sub-summary section for the original data section is also removed.","A conventional database reporting tool can have a main layout for a database reporting application, where the main layout applies to all reports. The conventional database reporting tool maintains a main layout and applies the main layout to reformat the formatted view. In some implementations of interactive sub-summary techniques, in addition to a main layout (which can be shared by many users), the system maintains a cached layout (which can be stored locally). The cached layout is copied from the main layout. The system can reformat the formatted view using the cached layout. More details on the cached layout will be described below with respect to .","In some implementations, reformat the formatted view includes reformatting a viewable area of the formatted view instead of re-generating the entire formatted view. Unlike a traditional database reporting tool that regenerates a database report in its entirety, the system can reformat only a relevant portion of the report (e.g., the viewable area). The system can determine which area is viewable by calculating a height variance of a current view. For example, if a user is viewing a portion (e.g., 20 rows) in a large (e.g., an 8,000-row) report, the user's changing a value can cause a particular row to be moved from the viewable portion to another area of the report, and\/or a regeneration of the sub-summary data fields. The system can determine which rows and which sub-summary data fields to display on screen by shifting the rows already displayed up or down, instead of regenerating an entirely new report. More details on formatting a display area of the formatted report is described below with respect to .","In step , the system displays the reformatted view on a display device. A user can perform further editing on the reformatted view.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3B"},"In step , the system receives a request to position a data field (e.g., a sub-summary display field) in a display view. In various implementations, the request can be in the forms of a mouse click on a display button (e.g., \u201cunderline text in all selected data fields\u201d), a drag-and-drop of a data field (e.g., a total summary field) or data column (e.g., the column header \u201cSales\u201d of table view ), or a command from a \u201cmodify view\u201d dialog box, etc. The request can be re-ordering data in data columns (e.g., change a sorting \u201cfrom high to low\u201d into \u201cfrom low to high\u201d) or re-ordering the data columns themselves. For example, in table view , a user can click on the \u201cSales\u201d data column which is displayed on the right side of data column \u201cSales Rep,\u201d drag the \u201cSales\u201d data column to the left side of the data column \u201cSales Rep,\u201d and drops it there. The \u201cSales\u201d data column now is displayed in the display view on the left of the data column \u201cSales Rep.\u201d","The system can also reposition a label (e.g., a title of a table displayed at the top of the table view), a summary field (e.g., a total sales field at the bottom of the table view), or a sub-summary field by drag-and-drop. If the field being repositioned is a sub-summary field, the system can limit the place where the sub-summary field can be dropped.","In step , the system identifies a data field of which a sub-summary display field being repositioned is a sum. In a display view, sub-summary sections can be tied to the data fields that they summarize. For example, in table view , a user can drag sub-summary field  and drop it to another place in the table view. The sub-summary field  is a sum in the \u201cSales\u201d data column on three data fields (the sales numbers of \u201cAdam,\u201d \u201cBetty,\u201d and \u201cCarl\u201d).","In step , regardless of where the user drops the sub-summary field, the system positions the sub-summary display field above or below the identified data field vertically, and at the same position as the identified data field horizontally. In some implementations, the system positions the sub-summary display fields in the same data column as the data fields the sub-summary display fields summarize. Such positioning can avoid user confusion on what data the sub-summary display fields represent. For example, in table views  and , sub-summary display fields , , , and  represent the sums of number of sales. If the table views  and  each contains an additional data column \u201camount of sales\u201d and the user is allowed to position the sub-summary display fields in the data column \u201camount of sales,\u201d the user may later be confused because the sub-summary display fields represent the sums of \u201cnumber of sales\u201d and do not represent the sums of \u201camount of sales.\u201d Therefore, the system can automatically move the sub-summary display fields back to the data column that represents \u201cnumber of sales.\u201d","Within a data column, the sub-summary display field can be positioned above or below the data fields that the sub-summary display field summarizes. A sub-summary display field that is placed above the data fields can be designated as a leading sub-summary display field. A sub-summary display field that is placed below the data fields can be designated as a trailing sub-summary display field. For example, in table view , a user can drag and drop the sub-summary display field  to a position above record  (\u201cA,\u201d \u201cAdam,\u201d and \u201c100\u201d). The sub-summary display fields for number of sales can then be placed above the number of sales data fields for each sales rep. In various implementations, when a user drops the sub-summary display field into the repeating data fields (e.g., below record  but above data field ), the system can alternatively ignore the drop, reposition the sub-summary display fields, or determine whether to reposition the sub-summary display fields based on distances between the drop position and the leading or trailing positions.","In various implementations, the system can position the sub-summary display fields in manners similar to the techniques described above regardless of which particular instance of sub-summary display field the user attempts to reposition. Repositioning a single sub-summary display field can cause all related sub-summary fields to be repositioned. For example, in table view , the system can reposition the sub-summary display fields on \u201cSales\u201d regardless whether the user requests to move sub-summary display field  or sub-summary display field .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIGS. 4A and 4B","FIG. 3B"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4A","b":["400","400","400","402","404","405","406","408","410","412","410","410","410","404","412"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4B","b":["420","420","420","405","406","408","420","424","430","412"]},"To generate the table layout , the system copies parts from the main layout to the table layout. Parts are copied in an order in which the parts appear on the main layout. For example, leading sub-summary part  can be copied first, then the body part , and then the trailing sub-summary part . The system can process the leading sub-summary part  and the trailing sub-summary part  to confirm that sub-summary data fields are placed in the sub-summary parts. The system can ensure that a sub-summary data field (e.g., \u201cSUM(num_sales)\u201d) is placed in one of the sub-summary parts, and that non-summary data fields (e.g., \u201cname\u201d) are placed in other parts of the layout.","After determining that the sub-summary parts contain sub-summary data fields and sub-summary data fields are in sub-summary parts, the system can also examine whether the data fields being summarized are in the body part . If the data fields being summarized are in the body part , the system can acquire the coordinates of the data field. The system can use the coordinates to place the sub-summary display field. For example, if a data field in the body part  has (x, y) coordinates, the system can place the sub-summary display field that summarizes the data field at horizontal coordinate x and vertically at the top of the body part  so that the sub-summary display field aligns with the data fields in the body part . If the sub-summary part is a leading sub-summary part , the sub-summary display field can be placed at the bottom of the leading sub-summary part . If the sub-summary part is a trailing sub-summary part , the sub-summary display field can be placed at the top of the trailing sub-summary part .","A user can have more than one level of sub-summary display fields. For example, the user can have a level of sub-summary display fields for regions and a level of sub-summary display fields for states. In such cases, the system can expand the sub-summary parts and stack the sub-summary fields one on top of another in the table view .","When a user edits a display view, the hidden table layout  is modified. For example, when the user resizes or reorders data columns in the display view, the sizes and positions of the columns in the table layout  changes. The coordinates of the sub-summary display fields can move with the data columns that have been moved.","An example table layout  is shown in . The table layout can correspond to a table view. Other forms of layouts, such as a list layout that can correspond to a list view, can be implemented similarly.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 4C","b":["450","404","400","410","404","404","400","420","400","420","420"]},"In step , the system displays database content in a formatted view based on a main layout (e.g., ). The formatted view can be a table view containing a cached layout (e.g., a hidden table layout ). The cached table layout  can be generated from the main layout .","In step , the system receives a request to add a new data field. The request can be received through a display view modification interface (e.g., a \u201cmodify table view\u201d dialog box and an \u201cadd fields\u201d dialog box). Adding a new data field can result in a new data column being added to the display view. In some implementations, the system permits the user to add a data field (e.g., \u201cnum_sales\u201d) that exists in a database table from which the database content is retrieved. If a user attempts to add a new data field that is not in a database table, the system permits the user to add the new data field after automatically or manually editing the cached data by creating a corresponding data field. In addition to adding a data field in the database or the cache, the user can also add a sub-summary field or a grand summary field.","In step , the system updates the cached layout  associated with the formatted view based on the request. The system can create one or more new layout nodes in the cached layout  to represent the new data fields and the new data column. The new layout nodes can contain coordinates of the new data fields. In some implementations, the coordinates of the new layout nodes are determined by coordinates of existing layout nodes. For example, if the user adds a new sub-summary field for data column \u201cSales\u201d in the display view, the new node in the table layout  representing the added sub-summary field can be determined by the coordinates of the data fields representing \u201cnum_sales\u201d in the cached table layout.","In some implementations, the system identifies layout nodes that are relevant to the new data field from the main layout  and copies the identified layout nodes from the main layout  to the cached layout . Copying the nodes can happen when, in addition to the user added data fields, the system needs to display otherwise undisplayed data fields from the main layout  based on the addition. For example, a main layout  can include a sub-summary part that displays sub-summaries on \u201cnumber of sales.\u201d In some implementations, the sub-summaries on number of sales are not copied to the cached table layout originally, because the sub-summaries on an undisplayed field are not displayed (e.g., when a user removes the \u201cnumber of sales\u201d column from a display view, causing a regeneration of the cached layout ). However, after the user adds the data field that displays number of sales back into the display view, the sub-summaries on number of sales can be displayed. Therefore, after the user adds the display field, the system reads the main layout and determines which data fields can be displayed as a result of adding the display field, and copies the corresponding layout nodes to the cached table layout .","In step , the system reformats the formatted view according to the updated table layout . The process  can be repeated, allowing a user to add multiple data fields in the display view in multiple rounds of editing. Similarly, processes can be implemented to allow user to delete data fields from the display view. When a user deletes a particular data column (e.g., \u201cSales\u201d), the data fields and the sub-summary fields in the data column can be removed together. The nodes representing the data field and the sub-summary field are removed from the cached table layout .","In some implementations, the main layout is not modified by a user adding, editing, and deleting data fields in the displayed view. Only cached layouts are modified. Therefore, multiple users can each have a display view customized to the user's need. Each display view can have a cached layout. The editing of the display view can be contained in the cached layout.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIGS. 5A and 5B","FIG. 5A"],"b":"500"},"To calculate which rows need to be displayed, the system can calculate a new origin based on a window, a display view, and a scroll offset. The origin can be a top cursor, which is the first visible row cursor at the top of the view. Based on the top cursor, the system can determine what rows and associated sub-summaries parts are to be displayed. The system can make the determination by building a part instance list. Building a part instance list will be explained in more details below with respect to .","In some implementations, a table view is a kind of a list view. The table view can be implemented using a special hidden layout that can be rendered in list view. The hidden table can be generated automatically when the layout is saved.","In a conventional, non-interactive display view, the total height of the display view is fixed because the total number of rows returned from the database (which determines the total height of the display view) is fixed when the data are retrieved from the database. After the data are retrieved, the system knows how many rows of records are to be displayed. In a display view where interactive sub-summary techniques are applied, the total height of the display view is dynamic because user modification in the data fields can cause new sub-summary fields to be created or deleted (e.g., when a user changes data in field  from region \u201cA\u201d to region \u201cD,\u201d a new data section and a new sub-summary field for the new region \u201cD\u201d is created). The number of records displayed is dependent on the content in the data (e.g., how many distinct regions there are) and user editing. Therefore, techniques for dynamically calculating the height of the display view need to be employed.","As an example, the layout  in  can be a table layout or a list layout. The layout  contains multiple parts, including a title header part , a header part , a leading grand summary part  (e.g., a total number of sales of all regions), a leading high-level sub-summary part  (e.g., number of sales of each country), a leading mid-level sub-summary part  (e.g., number of sales of each state), and a leading low-level sub-summary part  (e.g., number of sales of each region). There can be other levels of leading sub-summary parts.","The layout  can also include a body part  which contains repeating data fields (e.g., rows corresponding to the rows in the database tables), multiple levels of trailing sub-summary parts , , and , trailing grand summary part , footer , and title footer . Each part can contain one or more objects (e.g., boilerplate text, images, or data fields). The parts and the objects can be stored as nodes in a tree structure. The geographical information of the objects (e.g., size, position) can be stored in the nodes.","In various implementations, the system imposes various rules on the placement of objects in the parts. For example, a placement rule can specify that objects in a leading part (e.g., a leading grand summary part or a leading sub-summary part) are placed at the bottom of the part, and objects in a trailing part are placed at the top of the trailing part. This placement rule can make the objects appear close to the body part, which contains data that the object summarizes, in the final display view. A sizing rule can specify that the size of each of the leading and trailing sub-summary parts, measured by rows that represent a number of objects in the part, be one more than the number of objects in the part. An alignment rule can specify that the text in a sub-summary field be aligned using the same text alignment rule as in the field whose data the sub-summary field summarizes.","Each part in the layout  can have multiple instances. For example, the body part  can have one instance for each data record (e.g., row of data) returned from the database. The leading sub-summary part , which sub-summarizes data for each region, can have one instance for each region. The instances of the parts that are viewable on a screen can be stored in a part instance list , as described below with respect to .",{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 5B","FIG. 5B"],"b":["550","550"]},"The system can build the part instance list  in various manners. In some implementations when the displayed data are not sorted, the system can iterate through the data records in the displayed data starting from the top cursor. For each record iterated, the system can create a new instance of a part instance description object, initialize the object with information of the body part , and insert the part instance description object into the part instance list. The iterations continue until the total vertical space of all the added parts is greater than a predefined limit (e.g., the height of a viewing rectangle plus a max record height).","In some other implementations, the displayed data are sorted into one or more levels. Data records and information on the data records can be grouped into bins (e.g., groups of country \u201cUS,\u201d country \u201cCanada,\u201d and sub-groups of region \u201cA,\u201d region \u201cB,\u201d etc.) The system can iterate through each level, starting from the top cursor and lowest level of sorting (e.g., region), and determine whether to add sub-summary parts (leading and trailing) to the part instance list . The system can make the determination by examining whether the sorting level matches a sub-summary defined in the layout . For example, if a currently traversed sorting level is \u201cregion\u201d and a sub-summary field for \u201cregion\u201d is defined in the layout , a sub-summary part is inserted into the part instance list . When the system reaches an end of a current traversal level, the system moves to a next higher traversal level and repeats the process. The iterations continue until the total vertical space of all the added parts is greater than a predefined limit (e.g., the height of a viewing rectangle plus a max record height).","In some implementations, when a user scrolls through the display view or edits data in the display view, the system can redraw the screen by calling a draw list view function. During a redrawing of the screen, the draw list view function can activate a part instance manager software component. The system can check the part instance manager to determine if the part instance list  needs to be updated. If the part instance list  needs to be updated, the system rebuilds the part instance list . During the rebuild, the system can activate a slide manager software component for each part instance. A slide manager can contain information on the height of a part instance. Each part instance can have a distinct height. Therefore, each part instance can be associated with a distinct slide manager. The system can compute bounds for the object in the part instance using the slide manager associated with the part instance. If there is no slide manager associated with the part instance, the system can create a slide manager by instantiating a slide manager class object.","In some implementations, the slide managers are cached in a Slide Info Map , separately from the part instances. To improve efficiency, the system can cache the slide manager software component instead of instantiating and destroying it each time the part instance list  is rebuilt. The system can store instances of the slide manager separately in the map  and associate each part instance in the part instance list  with an entry in the map  using the pair key. On a data change notification, the system can access the map  and mark the corresponding slide manager as outdated. The actual updating of the outdated slide manager can occur during a draw cycle.","To determine where the user is scrolling, the system can determine a relative position of a \u201cgrip\u201d on a scrollbar. The grip, alternatively known as a thumb, a wiper, or a slide, is a display bar that a user can drag and move along a track in order to move to various parts of a display view. In some implementations, the length of the track in a vertical scrollbar on the display view corresponds to a scrollbar height. The scrollbar height can be determined by multiplying a number of records (e.g., number of rows returned from a database query) by a maximum record size. The maximum record size can be a sum of leading and trailing sub-summary parts defined for a given layout. When the user scrolls vertically in a table view or a list view, the system can calculate a scrollbar delta (e.g., how many records the user scrolled over according to the distance the grip has moved and the height of the scrollbar). The system can use the scrollbar delta to determine which record or records the viewable portion needs to display, and update the part instance list  accordingly.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 6","FIGS. 1-5"],"b":["600","600","602","604","606","608","612","610"]},"The term \u201ccomputer-readable medium\u201d refers to any medium that participates in providing instructions to a processor  for execution, including without limitation, non-volatile media (e.g., optical or magnetic disks), volatile media (e.g., memory) and transmission media. Transmission media includes, without limitation, coaxial cables, copper wire and fiber optics.","The computer-readable medium  further includes an operating system  (e.g., Mac OS\u00ae server, Windows\u00ae NT server), a network communication module , a database interface , a formatter , a view manager , a graphical user interface , and a cached layout , as described in reference to . The operating system  can be multi-user, multiprocessing, multitasking, multithreading, real time, etc. The operating system  performs basic tasks, including but not limited to: recognizing input from and providing output to the devices , ; keeping track and managing files and directories on computer-readable mediums  (e.g., memory or a storage device); controlling peripheral devices; and managing traffic on the one or more communication channels . The network communications module  includes various components for establishing and maintaining network connections (e.g., software for implementing communication protocols, such as TCP\/IP, HTTP, etc.). The view manager  can include one or more part instance managers, one or more slide managers, one or more part instance lists , and one or more slide info maps .","The architecture  is one example of a suitable architecture for hosting a browser application having audio controls. Other architectures are possible, which include more or fewer components. The architecture  can be included in any device capable of hosting a database application program. The architecture  can be implemented in a parallel processing or peer-to-peer infrastructure or on a single device with one or more processors. Software can include multiple software components or can be a single body of code.","The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language (e.g., Objective-C, Java), including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors or cores, of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","A number of implementations of the invention have been described. Nevertheless, it will be understood that various modifications can be made without departing from the spirit and scope of the invention. Accordingly, other implementations are within the scope of the following claims.","For example, updating data in a database is described using SQL as an example. It is understood that various databases, including relational databases, object-oriented database, and other databases can be utilized as a backend database engine to implement the interactive sub-summary techniques."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 1A and 1B"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6","FIGS. 1-5"]}]},"DETDESC":[{},{}]}
