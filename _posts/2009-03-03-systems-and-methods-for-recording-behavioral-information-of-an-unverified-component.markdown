---
title: Systems and methods for recording behavioral information of an unverified component
abstract: A computer-implemented method for recording behavioral information of an unverified component is described. Interactions between a first process and an unverified component loaded in the first process are monitored. A fault is detected from the monitored interactions. Information associated with an event is sent to a proxy module loaded in a second process. The execution of the event in the second process is verified. Information associated with the behavior of the unverified component during the execution of the event is recorded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065567&OS=08065567&RS=08065567
owner: Symantec Corporation
number: 08065567
owner_city: Mountain View
owner_country: US
publication_date: 20090303
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["The use of computer systems and computer-related technologies continues to increase at a rapid pace. This increased use of computer systems has influenced the advances made to computer-related technologies. Indeed, computer systems have increasingly become an integral part of the business world and the activities of individual consumers. Computer systems are used to carry out several business, industry, and academic endeavors.","A user of a computer system typically interacts with computer software running on the system via a user interface on a screen. Computer software may interact with additional software programs. For example, a host computer program may interact with a computer plug-in application. A plug-in may provide a certain function to the host application on demand. In some instances, the host application provides services which the plug-in can use. For example, the host application may provide a way for plug-ins to register themselves with the host application as well as a protocol for the exchange of data with the plug-ins.","Plug-ins and other components interacting with computer software depend on the services provided by the host application. Open application programming interfaces (APIs) typically provide a standard interface, allowing third parties to create plug-ins that interact with the host application. However, third parties may create malicious plug-ins and other components that impede the performance of the computer software, extract sensitive information about the user of the computer software (e.g., financial information, identification, etc.), and engage in other malicious activities. As such, benefits may be realized by providing improved systems and methods for monitoring and recording the behavior of unknown components (such as plug-ins) as they execute an event. The monitored and recorded behavior may then allow a determination to be made as to whether the plug-in or other unknown component is a malicious or non-malicious component.","A computer-implemented method for recording behavioral information of an unverified component is described. Interactions between a first process and an unverified component loaded in the first process may be monitored. A fault may be detected from the monitored interactions. Information associated with an unexecuted event may be sent to a proxy module loaded in a second process. Verification may be received from the proxy module that the event has been executed in the second process. Information associated with the behavior of the unverified component during the execution of the event may be recorded.","In one embodiment, the unverified component is a plug-in application. A copy of the unverified component may be created and the memory of the created copy of the unverified component may be marked as inaccessible. In one configuration, the created copy of the unverified component may be loaded in the second process.","A fault may be detected when the unverified component requests the first process to execute an event. In addition, a fault may be detected when the second process requests the created copy of the unverified component to execute a request. Information associated with an unexecuted event may be sent to a proxy module loaded in the first process. Verification may be received from the proxy module that the event has been executed in the first process. Further, information associated with the behavior of the unverified component during the execution of the event may be recorded. In one embodiment, the second process is a copy of the first process. The second process may be isolated and separated from the first process.","A computer system configured to record behavioral information of an unverified component is also described. The computer system includes a processor and memory in electronic communication with the processor. The computer system further includes a first proxy module loaded in a first process. The first proxy module may be configured to monitor interactions between the first process and an unverified component loaded in the first process and detect a fault from the monitored interactions. The first proxy module may also be configured to send information associated with an unexecuted event to a second proxy module loaded in a second process and receive verification from the second proxy module that the event has been executed in the second process. In addition, the first proxy module may be configured to record information associated with the behavior of the unverified component during the execution of the event.","A computer-program product for recording behavioral information of an unverified component is also described. The computer-program product may comprise a computer-readable medium having instructions thereon. The instructions may comprise code programmed to monitor interactions between a first process and an unverified component loaded in the first process. The instructions may also comprise code programmed to detect a fault from the monitored interactions and code programmed to send information associated with an unexecuted event to a proxy module loaded in a second process. In addition, the instructions may comprise code programmed to receive verification from the proxy module that the event has been executed in the second process and code programmed to record information associated with the behavior of the unverified component during the execution of the event.","Features from any of the above-mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments, features, and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","102","104","106","102","102","104","110","108","108","102","108","102"]},"In one embodiment, the unverified component  and the mock component  may be a plug-in. For example, the components ,  may be computer programs that interact with the host process  and the surrogate process  in order to provide a particular function to the processes , . One difference between the mock component  and the unverified component  is that the memory of the mock component  may be unmapped so that requests from the host process  to access the mock component  may cause a fault to occur. However, the memory of the unverified component  may be mapped so that the surrogate process  may be enabled to interact with the unverified component .","In one example, the mock component  is identical to the unverified component  with the difference being that the memory of the mock component  is unmapped which causes an error to occur when interactions between the host process  and the mock component  are detected. The host process  and the surrogate process  may include a first proxy module  and a second proxy module , respectively. The first proxy module  may monitor the interactions between the host process  and the mock component . Similarly, the second proxy module  may monitor the interactions between the surrogate process  and the unverified component .","In one embodiment, the first proxy module  may detect faults that occur when the host process  attempts to interact with the mock component . For example, the host process  may attempt to communicate with the mock component in order to request the component  to carry out a certain event. For example, the host process  may be Internet Explorer and the mock component  may be an Internet Explorer plug-in (known as a \u201cbrowser help object\u201d (BHO)). In one embodiment, Internet Explorer (i.e., the host process ) may make calls to the plug-in (i.e., the mock component ) in order to notify the plug-in of new events. For example, Internet Explorer may call the plug-in when a web page is about to be loaded when a web page has finished loading.","Because the mock component  is unmapped, an error occurs when the host process  attempts to communicate with the mock component . Upon detecting a fault, the first proxy module  may communicate  with the second proxy module . In one embodiment, the first proxy module  may communicate  information regarding the event the host process  attempted to have the mock component  carry out.","In one embodiment, the second proxy module  may monitor the interactions between the surrogate process  and the unverified component . In one configuration, the unverified component  may function as if it were loaded into the host process . In other words, when the unverified component  attempts to interact with the surrogate process , the component  functions as if it were attempting to interact with the host process  to carry out a certain event. Because the surrogate process  is isolated from the host process , a fault may occur when the unverified component  attempts to interact with the surrogate process . The second proxy module  may detect these faults. The second proxy module  may then communicate  these faults and information about the unexecuted event to the first proxy module . Details regarding the proxy modules ,  will be discussed in further details below.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","200","202","208","208","202","208","202","202","204","204","204","202","204","202","206"]},"In one embodiment, the first proxy module  includes a first detection module , a first execution module , and a first recording module . In one example, the first detection module  may detect faults that occur when the host process  attempts to interact with the mock component  in order to request the mock component  to execute an event. When the first detection module  detects a fault, the first proxy module  may communicate  with a second proxy module  that is loaded on the surrogate process . In one example, the first proxy module  communicates  information about the unexecuted event. The second proxy module  may receive the information from the first proxy module .","In one embodiment, the second proxy module  may include a second execution module  that may interact with the unverified component in order to execute the event that was originally requested by the host process . When the event is completed, the second proxy module  may communicate  the results back to the first proxy module . In one embodiment, the first recording module  records the results. For example, the first recording module  may record the actions taken by the unverified component  during the execution of the event.","The second proxy module  may also include a second detection module  and a second recording module . In one embodiment, the second detection module  detects errors or faults that occur between the surrogate process  and the unverified component . For example, the unverified component  may be a plug-in component that attempts to interact with the surrogate process  to carry out a certain event. The unverified component  may mistakenly believe that it  is interacting with the host process . However, application programming interfaces (APIs) may not exist between the host process  and the unverified component  because the component  is functioning in an isolated process (i.e., the surrogate process ). A fault may be generated if the unverified component  attempts to interact with the surrogate process  to carry out an event. When the second execution module  detects a fault, the second proxy module  may communicate  to the first proxy module  details regarding the unexecuted event. In other words, the second proxy module  may communicate  the event that the unverified component  attempted to execute on the surrogate process . Upon receiving the communication  from the second proxy module , the first execution module  may facilitate the execution of the event on the host process . When the event has been executed, the first proxy module  may communicate  the results of the event back to the second proxy module . The second recording module  may record the results of the event as well as the actions taken by the host process  during the execution of the event.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["300","300","302","302","302"]},"In one embodiment, a determination  may be made as to whether a fault is detected. In one example, a first proxy module loaded in the first process may determine  whether a fault is detected. A fault may be detected when certain interactions between the first process and the unverified component occur. For example, a request from the first process to the unverified component to carry out a certain event may cause a fault to occur. If it is determined  that no fault is detected, the method  may continue to monitor  interactions between the first process and the unverified component. However, if it is determined  that a fault is detected, information about the unexecuted event associated with the detected fault may be sent  from the first proxy module to a second proxy module. In one embodiment, the second proxy module may be loaded in a second process that is separate and isolated from the first process. The second proxy module may facilitate the execution of the event upon receiving the information from the first proxy module.","In one configuration, verification may be received  that the event has been executed in the second process. In addition, the behavior of the unverified component during the execution of the event may be recorded . In other words, when an event is executed, the behavior of the unverified component may be recorded  for future analysis. For example, the application programming interfaces (APIs) called by the unverified component may be recorded. In addition, the global variables (i.e., external data) that the unverified component attempts to read or modify may also be recorded. The APIs and global variables used by the unverified component may provide behavioral characteristics of the unverified component. For example, if the unverified component is an Internet Explorer plug-in, the component may attempt to direct a web browser to a fake website of a financial institution (such as a bank). In this example, the APIs and the uniform resource locator (URL) of the malicious website that are called by the unverified component are recorded to provide behavioral characteristics of the component.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["400","400"]},"In one configuration, an unverified component, such as a plug-in, may be loaded  into a first process. The first process may be a web browser, an e-mail exchange application, etc. In one embodiment, the address space of the unverified component in the first process may be marked  as inaccessible. In other words, from the perspective of the first process, the unverified module is loaded and functioning properly. However, because the address space of the unverified component is marked as inaccessible, requests sent by the first process to the component requesting that the component execute an event, may cause a fault to occur.","In one embodiment, a second process may be created , and the unverified component may be loaded into the second process. When the unverified component is loaded into the second process, the address space of the component may remain accessible. In one configuration, a first proxy module may be loaded  into the first process and a second proxy module may be loaded  into the second process. In one example, the second process may be isolated and separated from the first process.","In one embodiment, interactions between the unmapped unverified component and the first process may be monitored . For example, calls originating from the first process to the unmapped unverified component may be monitored . In one example, the first proxy module loaded in the first process monitors  these interactions. A determination  may be made as to whether a fault is detected while the interactions are being monitored . If it is determined  that a fault is not detected, the method  may continue to monitor  the interactions between the unmapped unverified component and the first process. However, it is determined  that a fault is detected, information about an unexecuted event may be sent  to the second proxy module in the second process. In one embodiment, verification from the second proxy module that the event has been executed in the second process may be received . In addition, the behavior of the unverified component during the execution of the event in the second process may be recorded . For example, requests for data by the unverified component, data accessed by the unverified component, etc. during the execution of the event may be recorded .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["500","500"]},"In one configuration, an unverified component, such as a plug-in, may be loaded  into a first process. The first process may be a web browser, an e-mail exchange application, etc. In one embodiment, the address space of the unverified component in the first process may be marked  as inaccessible. In other words, from the perspective of the first process, the unverified module is loaded and functioning properly. However, because the address space of the unverified component is marked as inaccessible, requests sent by the first process to the component requesting that the component execute an event, may cause a fault to occur.","In one embodiment, a second process may be created , and the unverified component may be loaded into the second process. When the unverified component is loaded into the second process, the address space of the component may remain accessible. In one configuration, a first proxy module may be loaded  into the first process and a second proxy module may be loaded  into the second process. In one example, the second process may be isolated and separated from the first process.","In one embodiment, interactions between the unverified component and the second process may be monitored . For example, calls originating from the unverified component to the second process may be monitored . In one example, the second proxy module loaded in the second process monitors  these interactions. A determination  may be made as to whether a fault is detected while the interactions are being monitored . A fault may be detected if the unverified component requests the second process to carry out a particular event. If it is determined  that a fault is not detected, the method  may continue to monitor  the interactions between the unverified component and the second process. However, it is determined  that a fault is detected, information about an unexecuted event may be sent  to the first proxy module in the first process. In one embodiment, verification from the first proxy module that the event has been executed in the first process may be received . In addition, the behavior of the unverified component and the first process during the execution of the event in the first process may be recorded . For example, requests for data, data accessed, etc. during the execution of the event may be recorded  for future analysis.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 6","b":["610","610","610","610","614","616"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the monitoring, detecting, sending, verifying, and recording steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as monitoring, detecting, sending, verifying, and recording.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for monitoring, detecting, sending, receiving, and recording steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network or a wireless IEEE 802.11 network), a personal area network (such as a BLUETOOTH or IEEE Standard 802.15.1-2002 network), a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the monitoring, detecting, sending, receiving, and recording steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the monitoring, detecting, sending, verifying, and recording steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the monitoring, detecting, sending, receiving, and recording steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 7","FIG. 6"],"b":["700","710","720","730","740","745","750","710","720","730","610","740","745","750"]},"As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the monitoring, detecting, sending, verifying, and recording steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein. For example, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing a computer-implemented method for recording behavioral information of an unverified component that may comprise: 1) monitoring interactions between a first process and an unverified component loaded in the first process, 2) detecting a fault from the monitored interactions, 3) sending information associated with an event to a proxy module loaded in a second process, 4) verifying that the event has been executed in the second process, and then 5) recording information associated with the behavior of the unverified component during the execution of the event. The network resource may represent a networked device or a network service.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
