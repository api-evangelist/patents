---
title: Communication channel between web application and process outside browser
abstract: One or more techniques and/or systems are disclosed herein for relaying a request to a process running on a computing device from a web client and receiving a response from the process. A bridge message client disposed in a web application, running in a browser on a computer, opens a local connection to a process running outside the browser. The bridge message client comprises a communication channel ID that identifies a communication channel to host the local connection to a bridge server, and a bridge message client ID facilitates communications from the bridge server to the web application. The bridge server is disposed outside of the browser environment, and can receive a request from the bridge message client and forward it to the process, and/or can receive a response to the request from the process and forward it to the bridge message client over the local connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09390172&OS=09390172&RS=09390172
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09390172
owner_city: Redmond
owner_country: US
publication_date: 20091203
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Users of the Internet and other online technologies can access remote information by receiving, for example, file transfers or web pages. Information and\/or web-based application functionality can be displayed in a browser environment, such as on a personal computer (PC). Current web-based programming frameworks have been introduced that provide for web-based applications (web apps) to be developed that can be sent along with a web page, for example, to a user's browser environment (or run in an invisible browser-type environment as a gadget on the desktop). These frameworks can provide live, rich, interactive multimedia environments, for example, without having to send a user request back to the server, thereby providing the dynamic logic in web pages.","Often, the richly interactive web apps are loaded onto a user's computing device (e.g., PC, web-enabled mobile device, etc.) and maintain a live (or semi-live) connection with the Internet to provide updates and access requested information. For example, a user may load a widget onto their PC's desktop that displays current weather conditions for their location. While the computer maintains a connection to the Internet, in this example, the widget can update the displayed weather conditions for the user. Further, a browser may load a rich, interactive application (e.g., a Silverlight, Java, and Flash app) that provides a rich multimedia experience for the user, such as an application that tracks a baseball game, pitch-by-pitch with live scores, action, etc.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Presently, web-based applications (web apps) are not stand-alone applications that can interact directly with operating systems through operating system (OS) application programming interfaces (APIs) or indirectly with library functions which may in turn call the operating system APIs. For example, an ability to access the operating system APIs may give an application certain control of computing resources in a computer. Instead, web apps are run in a browser environment, for example, in a \u201csandbox\u201d that is separated from the OS APIs and libraries, thereby creating a certain amount of security from malicious hackers.","Current web apps cannot be used as stand-alone applications that utilize access to a full range of resources on the users computer such as the file system management and the display area beyond the browser's window. In general, web pages cannot be processed in non-browser contexts. However, if a web app were able to access information from an application running in a desktop environment, for example, a richer and more useful experience can be provided to a user, such as by having desktop content provided for use by the web app. (e.g., the web app. can make use of desktop content). For example, where a web app, such as a web-based social network, wished for a user to add contacts to their profile, it may be desirable for the web-app to be able to load them from the user's desktop-based application that manages their contacts.","One or more techniques and\/or systems are disclosed that provide a bridge between a web-based application, such as in a browser environment, and a desktop environment on a computer, such as where an application is running. As an example, the bridge can provide a way for a web app in the browser to communicate with a desktop application, for example, while maintaining appropriate security. For example, where web app requests information from an application the bridge can provide a way to send requests and retrieve responses from the application.","In one embodiment for relaying a request to a process running on a computing device from a web client and receiving a response from the process, a bridge message client in a web app running in a browser, can open a local connection to a process running outside the browser. In this embodiment, the bridge message client has a communication channel ID that identifies a communication channel to host the local connection, and a bridge message client ID to help a bridge server component to communicate with the web app. Additionally, in this embodiment, the bridge server component is outside of the browser environment, and can receive a request from the bridge message client and forward it to the process. Also, the bridge server component can receive a response to the request from the process and forward it to the bridge message client over the local connection.","To the accomplishment of the foregoing and related ends, the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects, advantages, and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.","The claimed subject matter is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident, however, that the claimed subject matter may be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","106","110","108","106","102","100","104","108","106"]},"For example, code used to run the web app  can be completely loaded to the browser environment  so that it operates entirely on the computing device  while maintaining a connection to the Internet , such as for live updates, etc. However, typical operating systems and computing environments do not allow a connection  between the web app running in the browser environment  and the application  running on the desktop environment. One reason for not allowing a connection  between a live web app that is connected to the Internet , for example, is to mitigate security breaches to the desktop environment of the computing device.","As provided herein, a bridge may be provided between a web-based application operating on a computing device, such as in a browser environment, and a desktop environment on a computer, for example. Further, the bridge can provide for communications between an application running in the browser environment and an application running in the desktop environment of the computer, for example, while maintaining appropriate security for the computing device. For example, where a web application, such as one created in a richly interactive, integrated multimedia runtime environment (e.g., Silverlight, Java, Flash and others), requests information from an application running outside of the browser environment, the bridge can provide a way to send requests and retrieve responses from the application while inhibiting potentially nefarious communications to the computing device.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["200","202","216","214","212","202","220","210","250","212"]},"The bridge message client component  comprises a communication channel identification component  that identifies a communication channel  through which the local connection  to a bridge server component  disposed on the computing device , such as in the desktop environment (not shown), can be hosted. The bridge message client component  further comprises a bridge message client identification component  that helps the bridge server component  communicate with the web application , for example, where multiple bridge message client components , and\/or web applications  may be attempting to communicate with the bridge server component .","In the exemplary system , the bridge server component  is disposed outside of the browser environment , and it can receive requests from the bridge message client component  and forward them to the process . Further, the bridge server component  can receive responses to the requests from the process  and forward them to the bridge message client component  over the local connection .","In one embodiment, the browser environment may have an instantiation of a web application (e.g., ), for example, where an interactive, richly integrated multimedia webpage was loaded from a website to the browser (e.g., ). In this embodiment, the web application can have an instantiation of the bridge message client component  disposed therein. Further, for example, the web application and associated bridge message client component  can be loaded to the browser environment, such as from a website, thereby running entirely on the computing device (e.g., ).","In this embodiment, a communications channel  can be opened with the bridge server component , using the communication channel identification, and the local connection  can be hosted on the communications channel . In one embodiment, the communication channel identification component  can comprise a channel name, for example, that names a particular communication channel (e.g., ) in the operating system that links communications from the web application to a bridge server component (e.g., ) associated with a desired process (e.g., ).","As an example, an operating system channel can be a component that processes a message in some way, for example, by authenticating a message. Further, in one embodiment, a communication channel  may be a transport channel, such as channels for Hyper Text Transfer Protocol (HTTP), named pipes, Transmission Control Protocol (TCP), and Microsoft Message Queuing (MSMQ), that can read and write messages from a network (or some other communication point outside of the computing device).","Further, as an example, the local connection  can be a publish\/subscribe mechanism that connects senders and receivers between two (or more) instances of web application-based controls. In one embodiment, the bridge server component  may be an instantiation of the richly interactive, integrated multimedia runtime environment that is hidden (e.g., hidden from view and\/or interaction by a user) on the computing device . In this embodiment, the local connection  can comprise a communications link between a first instantiation of the web-based application (running in the browser with the bridge message client component ) and a second instantiation of a web-based application (the bridge server running outside the browser environment). In this example, the local connection  can use the named communications channel to establish the communications link between the bridge message client (e.g., ) and the bridge server component (e.g., ).","In one embodiment, the bridge server component  may be a component that is hosted by an application (e.g., ) running on the computing device , such as in the desktop environment. Further, the bridge server component  may be a component instantiated as a service running on the computing device . It is appreciated that those skilled in the art may devise alternate ways to host or instantiate the bridge server component , for example, the bridge server component  may be comprised in one or more drivers installed in the desktop environment of the computing device.","Additionally, in one embodiment, the process (e.g., ) may comprise at least a portion of a program running in a desktop environment on a computing device. For example, the process may comprise a portion of programming code that is inserted into an application running on a user machine. In this example, the code can be designed to communicate with the bridge server to return response data, such as a string of requested information, from the application. Where the web application requests specific data from the application using the bridge message client, for example, the process can return the requested information from the application to the bridge server component .","In one embodiment, the bridge message client identification  can comprise a client name, such as for the bridge message client component , which links the communications channel  from the bridge server component  associated with the process  to a desired web application (e.g., ). That is, for example, where multiple web applications may respectively comprise instantiations of a bridge message client (e.g., ), the bridge server may want to identify a particular bridge message client. In this way, in this example, a particular response to a request from the web application can be returned to a correct bridge message client. In this embodiment, the client ID  can facilitate the proper connection over the communications channel .",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","352","354","202","220","218","208","208","350","210"]},"In this exemplary embodiment , the bridge server comprises a web relay component , a machine relay component  and a bridge message server component . In this embodiment, the web relay component  and the machine relay component  are disposed in a same domain, the host control . In this example, the host control domain  can be instantiated in the bridge server component to host the web and machine relays. In one example, the host control  may further comprise a bridge relay , such as to receive and send data across the bridge, in which the web relay component  is disposed. In another embodiment, the web relay component  may be created as an instantiation of the machine relay component  in the same domain (e.g., host control ).","In this embodiment , the web relay component  can receive a request from the bridge message client component  and forward it to the machine relay component . For example, the bridge message client component  can send a request for specific data from the process across the communication channel , using the local connection . Further, the bridge message client component  can receive the request from the web relay component  and forward it to the bridge message server component  over a first named communication pipe . As described above, a communications channel can comprise a named pipe for exchanging data, for example. In this embodiment, the machine relay can identify a first named communication pipe  to the bridge message server component  to forward the request. Additionally, the bridge message server component  can receive the request from the machine relay component  and forward it to the process .","In one embodiment, the process  can retrieve the requested information from the application  and return a response to the bridge message server component . The bridge message server component  can receive the response from the process  and forward it to the machine relay component  over a second named communication pipe . For example, the bridge message sever may identify a second name communications pipe to relay the message to the machine relay component . Further, the machine relay component  can receive the response from the bridge message server component  and forward it to the web relay component . Additionally, the web relay component  can receive the response from the machine relay component  and forward it to the bridge message client component  over the local connection .","As an example, the web client  can then utilize the information in the response, such as by displaying it in the browser environment . In one embodiment, the response can be received asynchronously. For example, the browser environment  may comprise a plurality of web clients , and\/or a web client may comprise a plurality of bridge message client components . In this example, more than one bridge message client  may send requests to the process  at a same or substantially similar time. Responses to the plurality of request can be returned asynchronously.","A method may be devised that allows for information to be sent between a browser environment and a desktop environment on a user's computer, for example.  is a flow diagram illustrating an exemplary embodiment of a method  for relaying a request to a process running on a computing device from a web client and receiving a response from the process. The exemplary method  begins at  and involves providing for a bridge server to be installed on the computing device outside of the browser environment, at .","At , an installation of the bridge message client in a web application is provided for, where the web application is configured to operate in the browser environment on the computing device. At , an opening of the local connection is provided, where the local connection is opened over an identified channel between the web application and the process. At , the local connection provides a communications link between the bridge message client and the bridge server that is associated with the process.","In the exemplary method , at , the bridge message client forwards a request from the web application to the bridge server over the local connection. At , the bridge server receives the request from the bridge message client over the local connection and forwards it to a process running outside of the browser environment on the computing device. Further, at , the bridge server receives a response to the request from the process and forwards it to the bridge message client over the local connection. At , the bridge message client receives the response to the request from the bridge server, for example, and a web application associated with the client utilizes the data in the response (e.g., displays it in the browser).",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIGS. 5A and 5B","b":["500","510","500","414","502","504","506","500","508"]},"In the exemplary embodiment , where the bridge server receives a response to the request from the process and forwards it to the bridge message client, at , the machine relay, which is disposed outside of the browser environment in the computing device, receives the response to the request from a bridge message server over a second named communication pipe, at . At , the machine relay forwards the response to the request to a web relay disposed in the same domain. At , the web relay receives the response to the request from the machine relay, and at , forwards it to the bridge message client component over the local connection.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 6 and 7","FIG. 6"],"b":"600"},"At , an instantiation of the bridge server (e.g.,  of ) is installed in the desktop environment of the computing device. As an example, the bridge server may be comprised as a stand-alone component or service, or it may be included in the desktop application for which information may be requested by the web app. Once installed, the bridge server listens for communications, such as requests over a communications channel.","At , the bridge message client (e.g.,  of ) is installed in the web app. For example, a developer of the web app may download a version of the bridge message client from a same site, such as having a same root domain, as the bridge server. In this way, in this example, the bridge server may be able to trust communication requests from the bridge message client, thereby creating a type of security relationship. At , the web app, comprising the bridge message client, is made available on a website, such as the web app developer's website.","At , a user opens the browser environment, such as a web browser, and browses to the webpage that has the web app and associated bridge message client. As an example, the web app may be a richly integrated and interactive multimedia experience that enables the user to utilize additional features of the webpage by uploading data. At , it is determined whether there is a bridge server present in the desktop environment that has a bridge for the client. If a bridge server is not present, at , no connection is made with the client. However, if the bridge server is present, and a communications channel is available, the bridge message client makes a local connection with the bridge server, at . In one embodiment, providing for the local connection to be opened can comprise creating a communications link between the browser environment and the desktop environment of the computing device, which in turn may allow strings of data to be transferred from the desktop environment to the browser environment.","In the exemplary embodiment  of , at , the user selects the feature on the web app that activates a request for the desktop application. For example, the web app may comprise a button that states \u201cclick here to upload contacts from application.\u201d The user can click on that button to begin the request, in this example. At , the bridge message client can send the request, such as for the list of contacts in the user's contact management application, over the local connection the bridge server.","At , the bridge server receives the request from the bridge message client. At , the bridge server determines whether it can respond to the request. For example, the bridge server can determine whether it is associated with code for an application that allows the user's contacts to be uploaded. If not, at , no response for the request is return, for example, other than a null response.","If the bridge server can respond, at , the bridge server sends the request to the code, such as in the desktop application, to retrieve the requested information. For example, the request for the user's contacts can be forwarded to the code in the contact management application, where it can marshal the contacts into a string of data that comprises the contacts. At , the bridge server receives the response from the code in the application, and forwards it to the bridge message client.","At , the bridge message client receives the response and forwards it to the web app for use. For example, the web application can receive the user's contacts and display them to use in the browser. As another example, the web app may then load the contacts into a web-based contact management application, and\/or allow other users to be added to a list in a social network from the user's contacts.","Still another embodiment involves a computer-readable medium comprising processor-executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer-readable medium that may be devised in these ways is illustrated in , wherein the implementation  comprises a computer-readable medium  (e.g., a CD-R, DVD-R, or a platter of a hard disk drive), on which is encoded computer-readable data . This computer-readable data  in turn comprises a set of computer instructions  configured to operate according to one or more of the principles set forth herein. In one such embodiment , the processor-executable instructions  may be configured to perform a method, such as the exemplary method  of , for example. In another such embodiment, the processor-executable instructions  may be configured to implement a system, such as the exemplary system  of , for example. Many such computer-readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims.","As used in this application, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem\u201d, \u201cinterface\u201d, and the like are generally intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers.","Furthermore, the claimed subject matter may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 9","FIG. 9"]},"Although not required, embodiments are described in the general context of \u201ccomputer readable instructions\u201d being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media (discussed below). Computer readable instructions may be implemented as program modules, such as functions, objects, Application Programming Interfaces (APIs), data structures, and the like, that perform particular tasks or implement particular abstract data types. Typically, the functionality of the computer readable instructions may be combined or distributed as desired in various environments.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 9","FIG. 9"],"b":["910","912","912","916","918","918","914"]},"In other embodiments, device  may include additional features and\/or functionality. For example, device  may also include additional storage (e.g., removable and\/or non-removable) including, but not limited to, magnetic storage, optical storage, and the like. Such additional storage is illustrated in  by storage . In one embodiment, computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage  may also store other computer readable instructions to implement an operating system, an application program, and the like. Computer readable instructions may be loaded in memory  for execution by processing unit , for example.","The term \u201ccomputer readable media\u201d as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory  and storage  are examples of computer storage media. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, Digital Versatile Disks (DVDs) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .","Device  may also include communication connection(s)  that allows device  to communicate with other devices. Communication connection(s)  may include, but is not limited to, a modem, a Network Interface Card (NIC), an integrated network interface, a radio frequency transmitter\/receiver, an infrared port, a USB connection, or other interfaces for connecting computing device  to other computing devices. Communication connection(s)  may include a wired connection or a wireless connection. Communication connection(s)  may transmit and\/or receive communication media.","The term \u201ccomputer readable media\u201d may include communication media. Communication media typically embodies computer readable instructions or other data in a \u201cmodulated data signal\u201d such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.","Device  may include input device(s)  such as keyboard, mouse, pen, voice input device, touch input device, infrared cameras, video input devices, and\/or any other input device. Output device(s)  such as one or more displays, speakers, printers, and\/or any other output device may also be included in device . Input device(s)  and output device(s)  may be connected to device  via a wired connection, wireless connection, or any combination thereof. In one embodiment, an input device or an output device from another computing device may be used as input device(s)  or output device(s)  for computing device .","Components of computing device  may be connected by various interconnects, such as a bus. Such interconnects may include a Peripheral Component Interconnect (PCI), such as PCI Express, a Universal Serial Bus (USB), firewire (IEEE 1394), an optical bus structure, and the like. In another embodiment, components of computing device  may be interconnected by a network. For example, memory  may be comprised of multiple physical memory units located in different physical locations interconnected by a network.","Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example, a computing device  accessible via network  may store computer readable instructions to implement one or more embodiments provided herein. Computing device  may access computing device  and download a part or all of the computer readable instructions for execution. Alternatively, computing device  may download pieces of the computer readable instructions, as needed, or some instructions may be executed at computing device  and some at computing device .","Various operations of embodiments are provided herein. In one embodiment, one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media, which if executed by a computing device, will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further, it will be understood that not all operations are necessarily present in each embodiment provided herein.","Moreover, the word \u201cexemplary\u201d is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as advantageous over other aspects or designs. Rather, use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X employs A; X employs B; or X employs both A and B, then \u201cX employs A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims may generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form.","Also, although the disclosure has been shown and described with respect to one or more implementations, equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components (e.g., elements, resources, etc.), the terms used to describe such components are intended to correspond, unless otherwise indicated, to any component which performs the specified function of the described component (e.g., that is functionally equivalent), even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition, while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations, such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore, to the extent that the terms \u201cincludes\u201d, \u201chaving\u201d, \u201chas\u201d, \u201cwith\u201d, or variants thereof are used in either the detailed description or the claims, such terms are intended to be inclusive in a manner similar to the term \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 5A and 5B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 6 and 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
