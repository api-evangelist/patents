---
title: Wear-focusing of non-volatile memories for improved endurance
abstract: Storing data in memory using wear-focusing techniques for improved endurance. A method for storing the data includes receiving write data to be written into a memory that is logically divided into a plurality of regions. The plurality of regions includes a first region and a second region that are implemented by the same memory technology. The memory is subject to degradation as a result of write operations. The write data is classified as dynamic data or static data. The write data is encoded using a first type of encoding in response to the write data being classified as dynamic. The write data encoded using the first type of encoding is stored in the first region of the memory. The write data is encoded using a second type of encoding and stored in the second region of the memory in response to classifying the write data as static data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621328&OS=08621328&RS=08621328
owner: International Business Machines Corporation
number: 08621328
owner_city: Armonk
owner_country: US
publication_date: 20110304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to computer memory, and more specifically to wear-focusing of non-volatile memories.","Phase-change memories (PCMs) and flash memories are examples of non-volatile memories with limited endurance (also referred to as a \u201climited life\u201d). Such memories have limited endurance in the sense that after undergoing a number of writing cycles (RESET cycles for PCM, program\/erase cycles for flash memory), the memory cells wear out and can no longer reliably store information.","Not-and (NAND) flash memories are increasingly being used as non-volatile storage media in both consumer and enterprise applications. A fundamental constraint in these memories is the low endurance of each cell. Specifically, each cell can only be programmed (i.e. written to) and erased a very limited number of times, before it becomes potentially unusable. Further, the endurance of these memories has been decreasing as memory densities increase. For example, the latest multi-level cell (MLC) NAND devices have endurance specifications of only 3,000 to 5,000 program\/erase cycles. The relatively low endurance of NAND flash is a major concern, especially in enterprise applications with stringent reliability requirements.","One technique used to prolong the lifetime of a flash device is wear-leveling. As the name suggests, wear-leveling seeks to make the amount of wear uniform across the cells of the memory by spreading writes evenly across the memory. A shortcoming of the wear-leveling approach is that it treats all memory regions and all data identically. Thus, once the entire memory has been cycled to the specified endurance limit, it is treated as potentially unusable. In reality, the endurance limit of flash is not a hard limit; instead as a cell is cycled more, its retention decreases and the probability of a bit error increases smoothly. Thus, there is a trade-off between data retention\/cell-error and endurance.","An embodiment is a computer implemented method for storing data in memory. The method includes receiving write data to be written into a memory that is logically divided into a plurality of regions. The plurality of regions includes a first region and a second region that are implemented by the same memory technology. The memory is subject to degradation as a result of write operations. The write data is classified as dynamic data or static data. The write data is encoded using a first type of encoding in response to the write data being classified as dynamic. The write data encoded using the first type of encoding is stored in the first region of the memory. The write data is encoded using a second type of encoding and stored in the second region of the memory in response to classifying the write data as static data.","Another embodiment is a system that includes a memory and a memory controller. The memory is logically divided into a plurality of regions including a first region and a second region. The first region and the second region are implemented by the same memory technology, and the memory is subject to degradation as a result of write operations. The memory controller is in communication with the memory and is configured to perform a method. The method includes receiving write data, and classifying the write data as dynamic data or static data. The write data is encoded using a first type of encoding and stored in the first region of memory in response to classifying the write data as dynamic data. The write data is encoded using a second type of encoding and stored in the second region of the memory in response to classifying the write data as static data.","A further embodiment is a computer program product for storing data in memory. The computer program product includes a tangible storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method. The method includes receiving write data to be written into a memory that is logically divided into a plurality of regions. The plurality of regions includes a first region and a second region that are implemented by the same memory technology. The memory is subject to degradation as a result of write operations. The write data is classified as dynamic data or static data. The write data is encoded using a first type of encoding in response to the write data being classified as dynamic. The write data encoded using the first type of encoding is stored in the first region of the memory. The write data is encoded using a second type of encoding and stored in the second region of the memory in response to classifying the write data as static data.","Additional features and advantages are realized through the techniques of the present embodiment. Other embodiments and aspects are described herein and are considered a part of the claimed invention. For a better understanding of the invention with the advantages and features, refer to the description and to the drawings.","An embodiment of the present invention improves the lifetime of a storage device based on flash memory by leveraging the soft endurance limit behavior of not-and (NAND) flash memory for enterprise workloads that are characterized by non-uniform data access frequency (e.g. part of the data is frequently updated, while the rest of the data is less frequently updated). As used herein, the term \u201cdynamic data\u201d refers to the data that is frequently updated and the term \u201cstatic data\u201d refers to the data that is less frequently or rarely updated.","In an embodiment, a memory such as a flash memory (made up of one or more NAND flash memory devices) is virtually partitioned into two regions, a \u201cwear-focused region\u201d or \u201cdynamic data region\u201d for storing dynamic data, and a \u201cstatic data region\u201d for storing static data. Frequently updated data is stored in the wear-focused data region (typically a smaller region of memory compared to the static data region) and thus the wear-focused data region wears out much faster than the static data region. In general, the wear-focused region is expected to have a higher bit-error rate (BER) and lower retention because of the higher level of writes to memory that occur in that region of memory. The lower retention is not a problem because the dynamic data is frequently updated and thus requires only low retention guarantees. In an embodiment, adaptive endurance coding and stronger error correction codes (ECCs) are used to mitigate the higher BER. The increased redundancy is not problematic because the wear-focused region is only a small part of the memory. An advantage to this process is that the static data region is written very rarely since the wear-focused region filters out most of the writes. Thus, the rate of wear of the static data region is considerably reduced. The lifetime of the entire device, which is governed by the retention guarantees required by the static data, is thus significantly increased. Embodiments, as described herein, are applicable to other non-volatile memory technologies where retention is a function of memory cycling.","An embodiment includes a memory controller that controls how data is written to a physical memory. In one embodiment, the physical memory is made up of one or more NAND flash memory devices, each memory device including a plurality of blocks of memory cells for storing data. The controller virtually partitions the NAND Flash memory into two regions: a wear-focused region and a static data region, with each region including a set of memory blocks for storing data. In an embodiment, each block also contains time-stamp information including one or more time-stamp records detailing when the data was previously updated. The wear-focused region is meant to store dynamic data (e.g., data that is frequently updated), while the static data region is for storing static data (e.g., data that is rarely updated).","The time stamp information helps to identify whether a particular quantum of stored data is static or dynamic. In one embodiment, the time stamp information is stored on a per-block or per-page basis. Upon receiving data to be written, the memory controller first classifies the data as static or dynamic. In one embodiment, the classifying is performed using the time-stamp information associated with the write address. In another embodiment, the classifying is performed using other metadata stored in the controller in conjunction with or instead of the time-stamp information. In an embodiment, the metadata includes cached time-stamp information to allow for fast classification without requiring a read from a memory device. In another embodiment, the metadata also includes information about spatially and temporally adjacent write addresses, which allow the classification to exploit spatial and temporal correlations in the data characteristics.","If the data is classified as dynamic, it is optionally coded using an adaptive endurance code (AEC) and a first ECC (ECC-1). In one embodiment the adaptive endurance coding process includes performing lossless compression followed by the application of a constrained AEC code that generates a bit-pattern which reduces wear and\/or the probability of bit-level errors being written into memory. Examples of AEC codes that may be implemented include, but are not limited to: constant weight codes or bounded weight codes. The adaptive endurance coding and error correction coding may be done jointly. The coded data is then written to the wear-focused data region of the memory. In one embodiment, the data address is mapped from a logical to physical write address for the purpose of wear-leveling and\/or write-amplification reduction.","If the data is classified as static, it is encoded using a second ECC (ECC-2) and is then written to the static data region after a logical to physical write address mapping done for the purpose of wear-leveling and\/or write-amplification reduction. In one embodiment, the associated time-stamp is also stored. In an embodiment, ECC-1 is a stronger code (i.e., it is designed to detect and correct more errors) than ECC-2 because the wear-focused region is expected to undergo greater wear and have a correspondingly higher bit error rate. As used herein, the term \u201cstronger ECC code\u201d refers to an error correcting code that is capable of correcting a larger number of errors per stored byte. In this sense a BCH code with a codeword length  and capable of correcting  errors, and storing 421 information bits is stronger than a BCH code with a codeword length  and capable of correcting  errors, and storing 466 information bits. Possible options for ECC-1 and ECC-2 include but are not limited to BCH codes, Reed-Solomon codes, Turbo Codes, and LDPC codes. In exemplary embodiments ECC-1 and ECC-2 are the same code (i.e., they coincide). In additional exemplary embodiments ECC-2 is a stronger code than ECC-1.","In accordance with an embodiment, data is shifted (i.e., moved) from the wear-focused region to the static data region of the memory and vice-versa on an intermittent basis. This is done if the update frequency characteristics of a given write-address changes over time, and thus if data that was formerly static has become dynamic and vice-versa. In one embodiment, the static to dynamic transfer is performed when write data corresponding to the write-address is received at the controller, and the classification algorithm determines that the data is being updated frequently enough to qualify as dynamic data. In one embodiment, the dynamic to static data transfer is performed periodically (e.g., every x amount of time, every y number of accesses to the memory, etc.). In a further embodiment, the dynamic to static data transfer is performed periodically when the wear-focused region has less than a certain threshold of available free-space, or at the time of classification. The decision to transfer data may be made in a manner identical to the write classification or, in the case of the wear-focused region running out of space, may be made on the basis of a least-recently used (LRU) policy based, for example, on the last time-stamp. In one embodiment, a dynamic to static re-classification module initiates AEC decoding and ECC-1 decoding, followed by ECC-2 encoding.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["100","102","106","104","102","106"]},"In one embodiment the memory controller  is in communication with, or communicatively coupled to, the computer processor  and receives write requests from the computer processor . The write requests contain data to be written to the memory  and a logical address for identifying the location in the memory  to which the data will be written. The memory controller  stores data at a physical address within the memory . In an embodiment, the memory controller  maps the logic address to a physical address in the memory  when storing or retrieving data. The physical address for a given logical address can change each time data in the memory  is modified.","The system  is one example of a configuration that may be utilized to perform the processing described herein. Although the system  has been depicted with only a single memory , memory controller , and computer processor , it will be understood that other embodiments would also operate in other systems with two or more of the memory , memory controller , or computer processor. In an embodiment, the memory , memory controller , and computer processor  are not located within the same computer. For example, the memory  and memory controller  may be located in one physical location (e.g., on a memory module) while the computer processor  is located in another physical location (e.g., the computer processor  accesses the memory controller  via a network). In addition, portions of the processing described herein may span one or more of the memory , memory controller , and computer processor .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 2","FIG. 2"],"b":["230","204","204","204","214","214","228","204","214"]},"If the write data has been classified as dynamic, it is sent to a dynamic encoder module . In one embodiment, the dynamic encoder module  first encodes the data using an AEC encoder. In one embodiment, the dynamic encoder module  encodes the write data using a first ECC (ECC-1). In one embodiment, once the write data is encoded, it is processed by a dynamic wear-leveling module , which writes the write data to the memory . Any wear-leveling process known in the art may be implemented by the dynamic wear-leveling module , including but not limited to the wear leveling that comes from the use of a log-based structure, from techniques which remap the logical to physical address mappings and\/or from specific wear leveling algorithms using, for example, write counters to enable efficient selection of the blocks to be erased during garbage collection.","In one embodiment the memory  is logically divided into two regions, a dynamic data region  and a static data region . The size of each region may be determined based on the workload requirements of the system. In one embodiment, the size of the dynamic data region  is determined based on a plotted frequency of writes such that a predetermined fraction of the writes are fulfilled by the dynamic data region . This subdivision allows to reparation in the average the total write load to the two regions. One embodiment selects the write load partitioning in such way that, after a given number of years of operation, the retention time of the wear-focused region is greater than a first given retention time r, and the retention time of the other region, i.e., the static data region is a given retention time r (generally, r will be much larger than r, for example r can be one day and r can be 1 year). To this end, either measurements or a model for the projected error rate and projection retention of the memory  as a function of the number of program\/erase cycles is needed.","In another embodiment, the size of the dynamic data region  is initially configured to be a percentage of the memory  (e.g. 20%). As data is stored in the memory  the dynamic data region  is adjusted to suit the specific needs of the system. For example, if the amount of data that is classified as dynamic exceeds the amount of available space in the dynamic data region , the dynamic data region  will expand and the static data region  will be reduced.","Although the embodiments described herein refer to a single dynamic data region  in the memory , it will be understood that in alternate embodiments, a plurality of dynamic data regions may be created. Each of the plurality of dynamic data regions may be configured with an update frequency threshold such that one dynamic data region will accommodate the most frequently updated data and each of the other dynamic data regions will accommodate data that is progressively less frequently updated.","In one embodiment, the dynamic wear-leveling module  writes the dynamically classified data in the dynamic data region  of the memory . The write data  is written as a dynamic data record  to the dynamic data region  in combination with a timestamp corresponding to the time when the data was written to the memory . In alternate embodiments, the dynamic data record  may be written to the dynamic data region  without a timestamp. Although the data and timestamp are illustrated in  as a single dynamic record layout, it will be understood that in alternate embodiments the timestamp may be located elsewhere in the memory , or in a separate memory location or cache module.","If the write data has been classified as static, it is sent to a static encoder module . In one embodiment, the static encoder module  encodes the write data using a second ECC (ECC-2). As described previously, ECC-1, which is used for the dynamic data, is typically a stronger ECC (e.g., detects\/corrects more errors) than ECC-1, which is used for static data. In additional embodiments, the static encoder module  encoder may encode the write data using any other error correction and detection algorithm as is known in the art. Once the write data has been encoded, it is processed by a static wear-leveling module , which writes the write data to a static data region  of the memory . In one embodiment, the static wear-leveling module  and the dynamic wear-leveling module  are a single module, performing the same process. In another embodiment, the static wear-leveling module  and the dynamic wear-leveling module  are performed independently using different processes.","The data is written as a static data record  to the static data region  in combination with a timestamp corresponding to the time when the data was written to the memory . In alternate embodiments, the static data record  is written to the static data region  without a timestamp. Although the data and timestamp are illustrated in  as a single static record layout, it will be understood that in alternate embodiments the timestamp may be located elsewhere in the memory , or in a separate memory location.","In one embodiment, the write data that was written to the dynamic data region  may be re-classified as static data based on a number of factors as described herein. A data re-classification module  may then initiate the re-classification of the dynamic data as static data. In an embodiment, a dynamic decoder  decodes the dynamic data, reversing the encoding performed by the dynamic encoder module . The decoded data is then re-encoded by the static encoder module  and stored in the static data region  as described above.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3"],"b":["314","314","302","310","302","304","302","306","302","306"]},"The high-level memory controller , depicted in  includes a partition module . The partition module  passes the write data, data classification information, and optionally the encoding requirements (ECC and AEC if the data is classified as dynamic) to the one or more WFA flash controllers . One of the one or more WFA flash controllers  receives the write data, data classification information, and the encoding requirements from the partition module  and encodes the write data according to the encoding requirements. As depicted in , each WFA flash controller  is communicatively coupled to a flash memory array  that includes one or more memories  (e.g. each memory made up of one or more memory devices). In one embodiment, each of the WFA flash controllers  is associated to one memory . In an alternate embodiment, one of the WFA flash controllers  is associated to more than one memory . In an embodiment, each memory  in the flash memory array  is divided into two physical areas, a dynamic data region , and a static data region . Once one of the WFA flash controllers  has encoded the write data, the WFA flash controller  stores the data that is classified as dynamic in the dynamic data region  and the data that is classified as static in the static data region .","Although the memory controller  is depicted in  as containing the high-level memory controller  and the WFA flash controllers , it will be understood that the various modules can be implemented in various configurations, for example the WFA flash controllers  may be physically located in the flash memory array .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["302","404","402","406","404","408","410"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 5","FIG. 2","FIG. 3","FIG. 4"],"b":["230","314","402","302","502","504","506","508","504","510","512"]},"In an embodiment, it is determined (e.g., by wear-focusing module ) if the write data is static based on a last modified timestamp associated with the logic address to which the write data is being written. In an embodiment, the wear-focusing module  is configured with a programmable threshold value that is compared to the timestamp. If the logical address has been written to sooner than the threshold value the data is classified as dynamic. Otherwise the data is classified as static.","In another embodiment, metadata is received to indicate if the write data is static or dynamic. In one embodiment, the metadata is provided through an application programming interface (API) by an application that is storing the write data in the memory. In another embodiment, the metadata is provided by an operating system and\/or a classification module outside of the memory controller and passed in with the write data. In yet another embodiment, the classification of the data is cached in a metadata repository when the write data is originally written to the memory, and the wear-focusing module  retrieves the classification from the metadata repository upon receipt of the write data. Using the metadata repository allows for efficient classification of the write data without requiring a memory read to retrieve the timestamp from the memory.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 6","FIG. 6","FIG. 2","FIG. 6","FIG. 3","FIG. 4","FIG. 2","FIG. 2"],"b":["230","314","402","302","602","224","220","224","604","606","220","608","226","220","610","206","208","612","210"]},"In an additional embodiment, dynamic data is moved to the static region based on the estimated durability of the data. As stated above, non-volatile memory degrades as data is written to it. Because the dynamic data is written to the dynamic data region  of  more frequently than static data is written to the static data region , the dynamic data region  will be subject to degradation more quickly than the static data region . As the dynamic data region  degrades the length of time that data can be safely stored in that region decreases.","Technical effects and benefits include prolonging the useful life of non-volatile memory by dividing the non-volatile memory into two or more data regions. In addition, the dynamic data and static data can be moved from one memory region to another as the data is updated over time based on a configurable threshold value further increasing the useable life of the non-volatile memory. Embodiments described herein are flexible in that the dynamic and static regions may be configured, and their size adjusted dynamically.","The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and\/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and\/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, element components, and\/or groups thereof.","The corresponding structures, materials, acts, and equivalents of all means or step plus function elements in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wire line, optical fiber cable, RF, etc., or any suitable combination of the foregoing.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps (or operations) described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention.","While the preferred embodiment to the invention had been described, it will be understood that those skilled in the art, both now and in the future, may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The subject matter that is regarded as the invention is particularly pointed out and distinctly claimed in the claims at the conclusion of the specification. The foregoing and other features, and advantages of the invention are apparent from the following detailed description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
