---
title: Opcode to turn around a bi-directional bus
abstract: A system for managing the control of a bi-directional data bus between a master unit and a slave unit. The master couples to the slave through a request opcode bus, a reply opcode bus and the data bus. If the master is in a bus driving state (with respect to the data bus) and receives a read request, the master relinquishes bus control and sends a read request through the request opcode bus. The slave unit assumes bus control and sends the requested data through the data bus. If the master is in a bus sensing state and receives a write request, the master sends a last read opcode to the slave via the request opcode bus, and waits for the slave to return a special token through the reply opcode bus. Upon receiving the special token the master unit assumes bus control and performs the write transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06895458&OS=06895458&RS=06895458
owner: Sun Microsystems, Inc.
number: 06895458
owner_city: Santa Clara
owner_country: US
publication_date: 20020304
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates generally to the field of data communication protocols and, more particularly, to a system for sharing a bi-directional data bus between a master device and a slave device.","2. Description of the Related Art","A master chip and a slave chip may share a data bus. The master chip may write data to the slave chip and\/or read data from the slave chip through the data bus. In some situations, the slave chip may be configured to receive a transfer request from the master chip and service the transfer request in a deterministic amount of time. Thus, when the master chip asserts a read request to the slave chip and has a pending write to perform next, the master chip may wait a deterministic amount of time, assume control of the data bus, and perform the write associated with the write request. After the deterministic amount of time, the slave unit will have supplied the requested data on the data bus, the requested data will have been captured by an input port of the master chip, and thus, it will be safe to assume control of the data bus.","In other situations, the slave chip may not be able to service a transfer request in a deterministic amount of time. In such situations, the master's scheme of assuming bus control after a fixed amount of time may be inappropriate. Thus, there exists a need for a system and method of arbitrating bus control between a master unit and a slave unit especially in situations where the slave's servicing time for reqeusted transactions is non-deterministic.","In one set of embodiments, a system for arbitrating the control of a bi-directoinal data bus between a master unit and a slave unit may be configured as follows. The system may include a request opcode bus, a reply opcode bus, and arbitration control logic. The arbitration control logic may reside inside the master unit. The arbitration control logic may couple to the slave unit through the request opcode bus, the reply opcode bus and the data bus. The arbitration control logic may be configured to send a last read opcode to the slave unit through the request opcode bus in response to (a) receiving a write request from a transfer request buffer and (b) being in an electrically sensing state with respect to the data bus. Furthermore, the arbitration control logic may be configured to (c) switch to an electrically driving state and (d) write data values corresponding to the write request in response to receiving a token from the slave unit through the reply opcode bus.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and will herein be described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents, and alternatives falling within the spirit and scope of the present invention as defined by the appended claims. Note, the headings are for organizational purposes only and are not meant to be used to limit or interpret the description or claims. Furthermore, note that the word \u201cmay\u201d is used throughout this application in a permissive sense (i.e., having the potential to, being able to), not a mandatory sense (i.e., must).\u201d The term \u201cinclude\u201d, and derivations thereof, mean \u201cincluding, but not limited to\u201d. The term \u201cconnected\u201d means \u201cdirectly or indirectly connected\u201d, and the term \u201ccoupled\u201d means \u201cdirectly or indirectly connected\u201d.","Computer System\u2014",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":"80"},"As shown, the computer system  includes a system unit  and a video monitor or display device  coupled to the system unit . The display device  may be any of various types of display monitors or devices (e.g., a CRT, LCD, or gas-plasma display). Various input devices may be connected to the computer system, including a keyboard  and\/or a mouse , or other input device (e.g., a trackball, digitizer, tablet, six-degree of freedom input device, head tracker, eye tracker, data glove, or body sensors). Application software may be executed by the computer system  to display graphical objects on display device .","Computer System Block Diagram\u2014",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2","b":["1","80","102","104","104","106","104"]},"Host processor  may include one or more processors of varying types, e.g., microprocessors, multi-processors and CPUs. The system memory  may include any combination of different types of memory subsystems such as random access memories (e.g., static random access memories or \u201cSRAMs,\u201d synchronous dynamic random access memories or \u201cSDRAMs,\u201d and Rambus dynamic random access memories or \u201cRDRAMs,\u201d among others), read-only memories, and mass storage devices. The system bus or host bus  may include one or more communication or host computer buses (for communication between host processors, CPUs, and memory subsystems) as well as specialized subsystem buses.","In , a graphics system  is coupled to the high-speed memory bus . The graphics system  may be coupled to the bus  by, for example, a crossbar switch or other bus connectivity logic. It is assumed that various other peripheral devices, or other buses, may be connected to the high-speed memory bus . It is noted that the graphics system  may be coupled to one or more of the buses in computer system  and\/or may be coupled to various types of buses. In addition, the graphics system  may be coupled to a communication port and thereby directly receive graphics data from an external source, e.g., the Internet or a network. As shown in the figure, one or more display devices  may be connected to the graphics system .","Host CPU  may transfer information to and from the graphics system  according to a programmed input\/output (I\/O) protocol over host bus . Alternately, graphics system  may access system memory  according to a direct memory access (DMA) protocol or through intelligent bus mastering.","A graphics application program conforming to an application programming interface (API) such as OpenGL\u00ae or Java 3D\u2122 may execute on host CPU  and generate commands and graphics data that define geometric primitives such as polygons for output on display device . Host processor  may transfer the graphics data to system memory . Thereafter, the host processor  may operate to transfer the graphics data to the graphics system  over the host bus . In another embodiment, the graphics system  may read in geometry data arrays over the host bus  using DMA access cycles. In yet another embodiment, the graphics system  may be coupled to the system memory  through a direct port, such as the Advanced Graphics Port (AGP) promulgated by Intel Corporation.","The graphics system may receive graphics data from any of various sources, including host CPU  and\/or system memory , other memory, or from an external source such as a network (e.g. the Internet), or from a broadcast medium, e.g., television, or from other sources.","Note while graphics system  is depicted as part of computer system , graphics system  may also be configured as a stand-alone device (e.g., with its own built-in display). Graphics system  may also be configured as a single chip device or as part of a system-on-a-chip or a multi-chip module. Additionally, in some embodiments, certain of the processing operations performed by elements of the illustrated graphics system  may be implemented in software.","Graphics System\u2014",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3","b":["112","112","112","14","18","20","22","24","112","26","28","14","18"]},"In some embodiments, one or more of these components may be removed. For example, the texture buffer may not be included in an embodiment that does not provide texture mapping. In other embodiments, all or part of the functionality incorporated in either or both of the media processor or the hardware accelerator may be implemented in software.","In one set of embodiments, media processor  is one integrated circuit and hardware accelerator is another integrated circuit. In other embodiments, media processor  and hardware accelerator  may be incorporated within the same integrated circuit. In some embodiments, portions of media processor  and\/or hardware accelerator  may be included in separate integrated circuits.","As shown, graphics system  may include an interface to a host bus such as host bus  in  to enable graphics system  to communicate with a host system such as computer system . More particularly, host bus  may allow a host processor to send commands to the graphics system . In one embodiment, host bus  may be a bi-directional bus.","Media Processor\u2014",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["14","14","112","80","80","112","14"]},"Transformation refers to the spatial manipulation of objects (or portions of objects) and includes translation, scaling (e.g. stretching or shrinking), rotation, reflection, or combinations thereof. More generally, transformation may include linear mappings (e.g. matrix multiplications), nonlinear mappings, and combinations thereof.","Lighting refers to calculating the illumination of the objects within the displayed image to determine what color values and\/or brightness values each individual object will have. Depending upon the shading algorithm being used (e.g., constant, Gourand, or Phong), lighting may be evaluated at a number of different spatial locations.","As illustrated, media processor  may be configured to receive graphics data via host interface . A graphics queue  may be included in media processor  to buffer a stream of data received via the accelerated port of host interface . The received graphics data may include one or more graphics primitives. As used herein, the term graphics primitive may include polygons, parametric surfaces, splines, NURBS (non-uniform rational B-splines), sub-divisions surfaces, fractals, volume primitives, voxels (i.e., three-dimensional pixels), and particle systems. In one embodiment, media processor  may also include a geometry data preprocessor  and one or more microprocessor units (MPUs) . MPUs  may be configured to perform vertex transformation, lighting calculations and other programmable functions, and to send the results to hardware accelerator . MPUs  may also have read\/write access to texels (i.e. the smallest addressable unit of a texture map) and pixels in the hardware accelerator . Geometry data preprocessor  may be configured to decompress geometry, to convert and format vertex data, to dispatch vertices and instructions to the MPUs , and to send vertex and attribute tags or register data to hardware accelerator .","As shown, media processor  may have other possible interfaces, including an interface to one or more memories. For example, as shown, media processor  may include direct Rambus interface  to a direct Rambus DRAM (DRDRAM) . A memory such as DRDRAM  may be used for program and\/or data storage for MPUs . DRDRAM  may also be used to store display lists and\/or vertex texture maps.","Media processor  may also include interfaces to other functional components of graphics system . For example, media processor  may have an interface to another specialized processor such as hardware accelerator . In the illustrated embodiment, controller  includes an accelerated port path that allows media processor  to control hardware accelerator . Media processor  may also include a direct interface such as bus interface unit (BIU) . Bus interface unit  provides a path to memory  and a path to hardware accelerator  and video output processor  via controller .","Hardware Accelerator\u2014","One or more hardware accelerators  may be configured to receive graphics instructions and data from media processor  and to perform a number of functions on the received data according to the received instructions. For example, hardware accelerator  may be configured to perform rasterization, 2D and\/or 3D texturing, pixel transfers, imaging, fragment processing, clipping, depth cueing, transparency processing, set-up, and\/or screen space rendering of various graphics primitives occurring within the graphics data.","Clipping refers to the elimination of graphics primitives or portions of graphics primitives that lie outside of a 3D view volume in world space. The 3D view volume may represent that portion of world space that is visible to a virtual observer (or virtual camera) situated in world space. For example, the view volume may be a solid truncated pyramid generated by a 2D view window, a viewpoint located in world space, a front clipping plane and a back clipping plane. The viewpoint may represent the world space location of the virtual observer. In most cases, primitives or portions of primitives that lie outside the 3D view volume are not currently visible and may be eliminated from further processing. Primitives or portions of primitives that lie inside the 3D view volume are candidates for projection onto the 2D view window.","Set-up refers to mapping primitives to a three-dimensional viewport. This involves translating and transforming the objects from their original \u201cworld-coordinate\u201d system to the established viewport's coordinates. This creates the correct perspective for three-dimensional objects displayed on the screen.","Screen-space rendering refers to the calculations performed to generate the data used to form each pixel that will be displayed. For example, hardware accelerator  may calculate \u201csamples.\u201d Samples are points that have color information but no real area. Samples allow hardware accelerator  to \u201csuper-sample,\u201d or calculate more than one sample per pixel. Super-sampling may result in a higher quality image.","Hardware accelerator  may also include several interfaces. For example, in the illustrated embodiment, hardware accelerator  has four interfaces. Hardware accelerator  has an interface  (referred to as the \u201cNorth Interface\u201d) to communicate with media processor . Hardware accelerator  may receive commands and\/or data from media processor  through interface . Additionally, hardware accelerator  may include an interface  to bus . Bus  may connect hardware accelerator  to boot PROM  and\/or video output processor . Boot PROM  may be configured to store system initialization data and\/or control code for frame buffer . Hardware accelerator  may also include an interface to a texture buffer . For example, hardware accelerator  may interface to texture buffer  using an eight-way interleaved texel bus that allows hardware accelerator  to read from and write to texture buffer . Hardware accelerator  may also interface to a frame buffer . For example, hardware accelerator  may be configured to read from and\/or write to frame buffer  using a four-way interleaved pixel bus.","The vertex processor  may be configured to use the vertex tags received from the media processor  to perform ordered assembly of the vertex data from the MPUs . Vertices may be saved in and\/or retrieved from a mesh buffer .","The render pipeline  may be configured to rasterize 2D window system primitives and 3D primitives into fragments. A fragment may contain one or more samples. Each sample may contain a vector of color data and perhaps other data such as alpha and control tags. 2D primitives include objects such as dots, fonts, Bresenham lines and 2D polygons. 3D primitives include objects such as smooth and large dots, smooth and wide DDA (Digital Differential Analyzer) lines and 3D polygons (e.g. 3D triangles).","For example, the render pipeline  may be configured to receive vertices defining a triangle, to identify fragments that intersect the triangle.","The render pipeline  may be configured to handle full-screen size primitives, to calculate plane and edge slopes, and to interpolate data (such as color) down to tile resolution (or fragment resolution) using interpolants or components such as:\n\n","In embodiments using super-sampling, the sample generator  may be configured to generate samples from the fragments output by the render pipeline  and to determine which samples are inside the rasterization edge. Sample positions may be defined by user-loadable tables to enable stochastic sample-positioning patterns.","Hardware accelerator  may be configured to write textured fragments from 3D primitives to frame buffer . The render pipeline  may send pixel tiles defining r, s, t and w to the texture address unit . The texture address unit  may use the r, s, t and w texture coordinates to compute texel addresses (e.g. addresses for a set of neighboring texels) and to determine interpolation coefficients for the texture filter . The texel addresses are used to access texture data (i.e. texels) from texture buffer . The texture buffer  may be interleaved to obtain as many neighboring texels as possible in each clock. The texture filter  may perform bilinear, trilinear or quadlinear interpolation. The pixel transfer unit  may also scale and bias and\/or lookup texels. The texture environment  may apply texels to samples produced by the sample generator . The texture environment  may also be used to perform geometric transformations on images (e.g., bilinear scale, rotate, flip) as well as to perform other image filtering operations on texture buffer image data (e.g., bicubic scale and convolutions).","In the illustrated embodiment, the pixel transfer MUX  controls the input to the pixel transfer unit . The pixel transfer unit  may selectively unpack pixel data received via north interface , select channels from either the frame buffer  or the texture buffer , or select data received from the texture filter  or sample filter .","The pixel transfer unit  may be used to perform scale, bias, and\/or color matrix operations, color lookup operations, histogram operations, accumulation operations, normalization operations, and\/or min\/max functions. Depending on the source of (and operations performed on) the processed data, the pixel transfer unit  may output the processed data to the texture buffer  (via the texture buffer MUX ), the frame buffer  (via the texture environment unit  and the fragment processor ), or to the host (via north interface ). For example, in one embodiment, when the pixel transfer unit  receives pixel data from the host via the pixel transfer MUX , the pixel transfer unit  may be used to perform a scale and bias or color matrix operation, followed by a color lookup or histogram operation, followed by a min\/max function. The pixel transfer unit  may then output data to either the texture buffer  or the frame buffer .","Fragment processor  may be used to perform standard fragment processing operations such as the OpenGL\u00ae fragment processing operations. For example, the fragment processor  may be configured to perform the following operations: fog, area pattern, scissor, alpha\/color test, ownership test (WID), stencil test, depth test, alpha blends or logic ops (ROP), plane masking, buffer selection, pick hit\/occlusion detection, and\/or auxiliary clipping in order to accelerate overlapping windows.","Texture Buffer ","Texture buffer  may include several SDRAMs. Texture buffer  may be configured to store texture maps, image processing buffers, and accumulation buffers for hardware accelerator . Texture buffer  may have many different capacities (e.g., depending on the type of SDRAM included in texture buffer ). In some embodiments, each pair of SDRAMs may be independently row and column addressable.","Frame Buffer ","Graphics system  may also include a frame buffer . In one embodiment, frame buffer  may include multiple memory devices such as 3D-RAM memory devices manufactured by Mitsubishi Electric Corporation. Frame buffer  may be configured as a display pixel buffer, an offscreen pixel buffer, and\/or a super-sample buffer. Furthermore, in one embodiment, certain portions of frame buffer  may be used as a display pixel buffer, while other portions may be used as an offscreen pixel buffer and sample buffer.","Video Output Processor\u2014","A video output processor  may also be included within graphics system . Video output processor  may buffer and process pixels output from frame buffer . For example, video output processor  may be configured to read bursts of pixels from frame buffer . Video output processor  may also be configured to perform double buffer selection (dbsel) if the frame buffer  is double-buffered, overlay transparency (using transparency\/overlay unit ), plane group extraction, gamma correction, psuedocolor or color lookup or bypass, and\/or cursor generation. For example, in the illustrated embodiment, the output processor  includes WID (Window ID) lookup tables (WLUTs)  and gamma and color map lookup tables (GLUTs, CLUTs) . In one embodiment, frame buffer  may include multiple 3DRAM64s  that include the transparency overlay  and all or some of the WLUTs . Video output processor  may also be configured to support two video output streams to two displays using the two independent video raster timing generators . For example, one raster (e.g., A) may drive a 1280\u00d71024 CRT while the other (e.g., B) may drive a NTSC or PAL device with encoded television video.","DAC  may operate as the final output stage of graphics system . The DAC  translates the digital pixel data received from GLUT\/CLUTs\/Cursor unit  into analog video signals that are then sent to a display device. In one embodiment, DAC  may be bypassed or omitted completely in order to output digital pixel data in lieu of analog video signals. This may be useful when a display device is based on a digital technology (e.g., an LCD-type display or a digital micro-mirror display).","DAC  may be a red-green-blue digital-to-analog converter configured to provide an analog video output to a display device such as a cathode ray tube (CRT) monitor. In one embodiment, DAC  may be configured to provide a high resolution RGB analog video output at dot rates of 240 MHz. Similarly, encoder  may be configured to supply an encoded video signal to a display. For example, encoder  may provide encoded NTSC or PAL video to an S-Video or composite video television monitor or recording device.","In other embodiments, the video output processor  may output pixel data to other combinations of displays. For example, by outputting pixel data to two DACs  (instead of one DAC  and one encoder ), video output processor  may drive two CRTs. Alternately, by using two encoders , video output processor  may supply appropriate video input to two television monitors. Generally, many different combinations of display devices may be supported by supplying the proper output device and\/or converter for that display device.","Sample-to-Pixel Processing Flow","In one set of embodiments, hardware accelerator  may receive geometric parameters defining primitives such as triangles from media processor , and render the primitives in terms of samples. The samples may be stored in a sample storage area (also referred to as the sample buffer) of frame buffer . The samples are then read from the sample storage area of frame buffer  and filtered by sample filter  to generate pixels. The pixels are stored in a pixel storage area of frame buffer . The pixel storage area may be double-buffered. Video output processor  reads the pixels from the pixel storage area of frame buffer  and generates a video stream from the pixels. The video stream may be provided to one or more display devices (e.g. monitors, projectors, head-mounted displays, and so forth) through DAC  and\/or video encoder .","The samples are computed at positions in a two-dimensional sample space (also referred to as rendering space). The sample space may be partitioned into an array of bins (also referred to herein as fragments). The storage of samples in the sample storage area of frame buffer  may be organized according to bins as illustrated in FIG. . Each bin may contain one or more samples. The number of samples per bin may be a programmable parameter.","Bi-Directional Bus Control Using Special Opcode",{"@attributes":{"id":"p-0061","num":"0065"},"figref":"FIG. 8","b":["310","310","320","330","335","340","345"]},"Master unit  sends request opcodes (i.e. requests for transactions such as a read transfer or a write transfer) to slave unit  through the request opcode bus . Slave unit  sends reply opcodes to master unit  through the reply opcode bus . For convenience of discussion, the terms \u201cwrite\u201d and \u201cread\u201d are interpreted from the point of view of master unit . Thus, write transfers flow from master to slave, and read transfers flow from slave to master.","When master unit  needs to write data to slave unit , it may gain control of data bus  (if it does not already have control) and send the write data to slave unit  through data bus . When the master unit  needs to read data from slave unit , it may hand off control of data bus  to slave unit  so that slave unit  may send the requested read data to master unit  through data bus .","To avoid bus contention, the following mechanism for arbitration of bus control may be implemented. At startup (or reset), master unit  may control the data bus  (i.e. may electrically drive the data bus ).","If master unit  needs to read from the slave, and master unit  currently controls the data bus , master unit  may relinquish control of the data bus  (i.e. transition from a state of electrically driving data bus  to a state of electrically sensing data bus ), and send a read request to slave unit  through request opcode bus . When the slave unit  receives the read request, slave unit  may take control of the data bus , i.e. may transition from a state of electrically sensing data bus  to a state of electrically driving data bus .","Slave unit  attempts to service the read request. In one embodiment, slave unit  may access a memory device or an array of memory devices for the requested data, and send the requested data to master unit  through data bus . In another embodiment, slave unit  may itself include the memory device or the array of memory devices. In yet another embodiment, slave unit  may include computational resources, and the read request may be interpreted as a request for a computation, and the requested data returned by the slave to master may be the result of the computation.","In certain situations, master unit  may need to perform a whole series of reads. After having sent a first read request (as described above), master unit  will be in the sensing state and slave unit  will be in the driving state. Master unit  may then send a stream of additional read requests to slave unit  through request opcode bus , and slave unit  may send back a corresponding stream of request data values through data bus . Slave unit  maintains control of the data bus  during this read process.","When master unit  needs to write to slave unit , and is currently in the sensing state (i.e. in the state of electrically sensing data bus ), master unit  may send a last read opcode to slave unit  through request opcode bus . In response to receiving the last read opcode, slave unit  completes any pending read requests it has received from master unit  (up to that point in time). In response to completing the pending read requests, slave unit  may transition from the state of electrically driving the data bus  to the state of electrically sensing the data bus , and send a \u201clast read complete\u201d token to master unit  through reply opcode bus .","In response to receiving the last read complete token, master unit  may transition from the state of electrically sensing the data bus  to the state of electrically driving the data bus , and transfer the write data to slave unit  through data bus .","When master unit  needs to write to slave unit , and is currently in the driving state (i.e. in the state of electrically driving the data bus ), master unit  may immediately send the write data to slave unit  through data bus . (When master already has control of data bus , it is not necessary to use the last read opcode mechanism for regaining control.) Thus, a series of writes from master to slave may proceed rapidly. Depending on the master's state prior to the first write, master unit may use the last read opcode mechanism to regain control of the data bus . However, once master unit  has gained control, it may maintain control, and thus, the whole series of writes across data bus  may proceed rapidly, i.e. delays for re-negotiation of the data bus. (As used herein, a unit is said to be \u201cin control of the data bus\u201d when it is in the state of electrically driving the data bus .)",{"@attributes":{"id":"p-0071","num":"0075"},"figref":"FIG. 9","b":["320","420","420","422","420","320","345","345"]},"Master unit  may include a transfer request buffer. The transfer request buffer may be organized as a first-in-first-out (FIFO) buffer. Circuits internal or external to master unit  may generate read requests (i.e. requests for the transfer of data from slave unit  to master unit  across the data bus ) and\/or write requests (i.e. requests for the transfer of data from master unit  to slave unit  across the data bus ). Such circuits may send the read requests and write requests to the transfer request buffer. Arbitration control logic in the master unit  may pull requests off the transfer request buffer and implement the state machine of FIG. .",{"@attributes":{"id":"p-0073","num":"0077"},"figref":"FIG. 10","b":["320","520","530","540","540","320","530","550","320","530","540","335","340","345"]},"The arbitration control logic  may remain in the drive wait substate  until the transfer request buffer becomes nonempty. When the transfer request buffer becomes nonempty, the arbitration control logic  may pull a request off the transfer request buffer. This request that the arbitration control logic  pulls off the transfer control buffer is referred to as the \u201ccurrent request\u201d. The arbitration control logic  transitions from drive wait substate  to substate  in response to the current request being a write request.","In substate , the arbitration control logic  sends the write data associated with the write request to the slave unit  through the data bus . After sending the write data, the arbitration control logic  may move to the drive wait substate  if the transfer request buffer is empty.","Alternatively, if, after sending the write data, the transfer request buffer is still nonempty, the arbitration control logic  may pull another request off the transfer request buffer. This newly pulled request is now the current request. If the current request is a write request, the arbitration control logic  may move from substate  to substate  (i.e. re-enter the same substate) to send more write data for the current (write) request. If the current request is a read request, the arbitration control logic  may move from substate  to state .","The arbitration control logic  also transitions from drive wait substate  to state  in response to the transfer request buffer becoming nonempty and the current request being a read request.","In state , the arbitration control logic  may release control of the data bus , i.e. circuit elements in the master unit  which interface with the data bus  switch from an electrically driving mode to a electrically sensing mode. Thus, after releasing control of the data bus , the arbitration control logic  is said to be in the master sensing state . After releasing control of the data bus , the arbitration control logic  moves into substate .","In substate , the arbitration control logic  sends the read request to the slave unit  through the request opcode bus . After sending the read request, the arbitration control logic  moves to sense wait substate  if the transfer request buffer is empty. However, if the transfer request buffer is nonempty, the arbitration control logic  pulls another request from the transfer request buffer. If the current request (i.e. just pulled request) is a read request, the arbitration control logic  re-enters the substate  to send the read request to slave. If the current request is a write request, the arbitration control logic  moves to the substate  (to be explained below).","In sense wait substate , the arbitration control logic  waits until the transfer request buffer becomes nonempty again. When the transfer request buffer becomes nonempty, the arbitration control logic  may pull another request off the transfer request buffer. Again this request is referred to as the \u201ccurrent request\u201d. The arbitration control logic  transitions from sense wait substate  back to substate  in response to the current request being a read request. Alternatively, the arbitration control logic  transitions from sense wait substate  to substate  in response to the current request being a write request.","In substate , the arbitration control logic  sends a last read opcode to the slave unit  through the request opcode bus . After sending the last read opcode, the master unit  waits to receive the last read complete token from the slave unit  through the reply opcode bus . In response to receiving the last read complete token from the slave, the arbitration control logic  moves to state .","In state , the arbitration control logic  takes control of the data bus , i.e. circuit elements in the master unit  which interface with the data bus  switch from an electrically sensing mode to an electrically driving mode. After taking control of the data bus , the arbitration control logic  moves into substate . Substate  has been described above.","In one set of embodiments, master unit  is a chip (i.e. integrated circuit) and the slave unit  is a separate chip. In one embodiment, the master unit  couples to a plurality of slave units like slave unit . The master may interact with each slave as described above, and may couple to each slave with a corresponding set of request operand bus, reply operand bus and bi-directional data bus.","In some embodiments, master unit  is a rendering chip suitable for use in graphics systems. For example, rendering circuits within master unit  may compute data values (e.g. pixel values or sample values) in response to receiving graphics data (e.g. primitives such as triangles). The slave unit  may couple to an array of memory devices (e.g. random access memory devices). To induce storage of the data values in the memory device array, the rendering circuits may generate write requests and push the write requests onto the tranfer request buffer. In addition the master unit  may include circuits (or may communicate with circuits) which operate on source data from the memory device array. To induce the reading of the source data from the memory device array, cuch circuits may generate read requests and push the read requests onto the transfer request buffer.","In one embodiment, hardware accelerator  may be implemented as a single chip including the arbitration control logic described above. However, hardware accelerator  may also include a programmable register which allows the arbitration control logic to be selectively turned on or off. For example, if the hardware accelerator chip is to directly interface with memory devices (instead of through a slave unit such as slave unit ), it may be desirable to disable the arbitration control logic, and to enable other circuit which mediate a different bus control scheme. Thus, the hardware accelerator chip may be adaptable to the needs of various different users, system designers, etc.","Although the embodiments above have been described in considerable detail, other versions are possible. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Note the section headings used herein are for organizational purposes only and are not meant to limit the description provided herein or the claims attached hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing, as well as other objects, features, and advantages of this invention may be more completely understood by reference to the following detailed description when read together with the accompanying drawings in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 6","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
