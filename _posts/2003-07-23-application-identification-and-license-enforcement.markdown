---
title: Application identification and license enforcement
abstract: The restriction of particular resources includes providing a digital signature for unauthorized resources based on a structure-related parameter of the resource. Thus, attempts at circumventing recognition of such resource will likely result in altering the overall functionality of the resource. Further, such digital signatures are encoded in a critical file required for loading of a resource, thus ensuring that the identity of the resource is considered before execution thereof. Enforcement of the resource restriction includes generating a verification signature for a resource that requests loading. The verification signature is compared to the signature coded into the critical file, and a positive match results in the resource being blocked from loading.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07464270&OS=07464270&RS=07464270
owner: Microsoft Corporation
number: 07464270
owner_city: Redmond
owner_country: US
publication_date: 20030723
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to regulating the use of resources loading on processing devices.","The misuse of computer software is costly. For the provider and\/or user of unauthorized software, the cost of misusing software can be measured, in part, in terms of legal costs and fines if found to violate any copyrights and\/or licensing agreements associated with the misused software. Additional dangers lie in the fact that unauthorized software applications often contain viruses with the potential to damage individual computers or even an entire network. Further still, unlicensed software may cause incompatibility between programs that would normally function together seamlessly. Yet another cost associated with the misuse of computer software is to a developer, server, or provider of licensed software products for whom the cost of misused software can be measured primarily in terms of lost licensing revenue.","Accordingly, developers, servers, and providers of licensed or otherwise authorized software products are highly motivated to regulate the execution of software on authorized operating systems for client devices and server devices. Crucial considerations for succeeding in such endeavor include quickly and accurately identifying and then restricting unauthorized software applications from loading without hindering the concurrent execution of licensed software applications.","Previous attempts at identifying software products for the purpose of restricting those that are not licensed or otherwise authorized include performing a bit-by-bit comparison of the entire code of a file against a known version thereof, comparing the size of a file to previously known parameters, and comparing a predetermined number of bits at the beginning of the file to those of previous versions of the file. However, such efforts are easily thwarted because the binary code associated with unauthorized software products may be changed, even slightly, to avoid detection. For instance, changing a file name or file location can change the appearance and\/or size of a file, thus frustrating efforts to regulate the usage thereof. Even minor code fixes, not intended to circumvent file recognition, can render a file unrecognizable relative to known versions. Furthermore, such efforts consume valuable processing resources and\/or overhead, which impede the usage of licensed or otherwise authorized software products.","Application identification and license enforcement are described herein.","According to one aspect, restricting the use of particular resources includes providing a cryptographic signature for a particular resource predicated on a static feature of the resource. Thus, attempts at circumventing recognition of such resource will likely result in altering the overall functionality of the resource. The signatures are encoded in a critical file required for loading and\/or running of the resource, thus ensuring that the identity of the resource is verified before the resource is executed. Enforcement of the resource restriction includes generating a verification cryptographic signature for a resource that requests loading. The verification signature is compared to the signature coded into the critical file, and a determination is made as to whether to block the resource from loading and\/or running based on whether the comparison results in a positive match.","In the example network environment of , multiple client computing devices , , , and , also referred to as clients, are coupled to server devices  and  via network . Network  is intended to represent any of a variety of conventional network topologies and types, which may include wired and\/or wireless networks. Network  may further utilize any of a variety of conventional network protocols, including public and\/or proprietary protocols. Network  may include, for example, the Internet as well as possibly at least portions of one or more local area networks (LANs).","Computing device  may include any of a variety of conventional computing devices, including a desktop personal computer (PC), workstations, mainframe computers, Internet appliances, and gaming consoles. Further computing devices associated with network  may include a personal digital assistant (PDA) , a laptop computer , and a cellular telephone , etc., which may be in communication with network  by a wired and\/or wireless link. Further still, one or more of computing devices , , , and  may include the same types of devices, or alternatively different types of devices.","Server devices  and  may provide any of a variety of data and\/or functionality to computing devices , , , and . The data may be publicly available or alternatively restricted (e.g., restricted to only certain users, available only if the appropriate fee is paid, etc.), as will be discussed in greater detail below.","The discussions herein refer to server devices and client devices, with all features described above included in the scope of a corresponding description. A server device may include any device that is the source of content, and a client device may include any device that receives such content (e.g., for presentation to a user at the client device). For example, in a peer-to-peer network, the device that is the source of the content may be referred to as the server device while the device that receives the content may be referred to as the client device.","Server devices  and  may include at least one of a network server and an application server. A network server is a server device that delivers content to any of client devices , , , and  by way of network . Such content may include a text file coded in HTML, which may also contain JavaScript code or other commands. Although frequently referred to herein as a \u201cweb server\u201d, it is to be appreciated that network server device  can be used in other networks that are not part of the World Wide Web.","A web server  or  may provide comprehensive Internet services to client devices , , , and . Web server  or  may incorporate any or all of an HTTP (hypertext transport protocol) server for delivering web pages and files, an FTP server (file transport protocol) for delivering file downloads, an NTTP server (network news transport protocol) for delivering newsgroup files, and an SMTP server (simple mail transfer protocol) for delivering e-mail.","The term \u201cweb server\u201d may be used to refer to the combined hardware and operating system of server devices  and , the operating system organizing and controlling the hardware and other software resources of server devices  and . Resources including operating systems and other applications or programs may be provided to server devices  and  by at least one of data source , which is off-line, and data source , which is on-line. Similarly, the software resources existing on server devices  and  may similarly be upgraded or replaced using off-line and on-line means and methodologies, which are well known in the art.","Application server  or , which is typically web-based, is a server device in a client\/server environment that performs business logic, provides a user interface, and performs data processing. An application server runs software in an intranet\/Internet environment that hosts a variety of language systems used to program database queries and\/or general business processing. Application servers may provide organizational support for groupware, directory services, and databases. Groupware includes software for supporting multiple users working on related tasks, often linking non-web-based applications such as those for managing calendars, schedules, contacts, and tasks. Directory services utilize specialized databases, typically hierarchical in design, to manage user accounts and network authorizations. Databases include sets of related files created and managed by a database management system (DBMS).","Web servers and application servers may be separate devices or they may reside in a same server device, often depending on the size and needs of the entity or organization that they service. Further, overlap may exist between a web server and an application server servicing a common entity or organization. For instance, a web server may invoke scripts and services to query databases and perform business processing, and an application server may include an HTTP server to deliver web pages to client devices.","For a variety of reasons, mostly financial, \u201cblade servers\u201d are being made available to provide entities and organizations with a server dedicated solely to web serving and hosting purposes. More particularly, blade servers are intended to provide high performance web-based services, including web page serving and ASP (active server page) execution, at a low entry price. As a restricted-use server device, a blade server is to prevent the loading of applications or programs that lack an appropriate web server license. Non-limiting examples of such restricted applications pertain to groupware, database and directory services.","Example embodiments related to such a restricted-use server device include, both singularly and in combination together: the generation of a unique identifier for a software application or program, the identifier also being referred to as a digital ID, signature, or fingerprint; and the enforcement of an application or program restriction, often the result of the lack of a web server licensing agreement. In particular, embodiments of a restricted-use server device identify a restricted application or program, and further restrict the loading of such a software application or program based on the identification of the application or program. Even more specifically, an embodiment of a license enforcement scheme for a restricted-use server device assigns a unique identification to a restricted application, \u201cbakes\u201d or codes the identification and a restriction\/authorization status of the restricted application into an operating system to run on a server device, identifies all applications sought to be loaded on the server device, and appropriately restricts the applications based on a positive comparison between the identification and restriction\/authorization status coded into the operating system and the identification made at the server device.","The process of  and data flow of  pertain to a data source  or  (see ) that may include, either singularly or in combination thereof, licensing manager component  or  and software developer component  or . At data source  or , a licensing structure is implemented to render particular files, which are software applications or programs to be executed on a server device, eligible or ineligible for execution. Implementation of the licensing structure results in a command  to generate a unique identifier for the particular applications or programs in accordance with a corresponding licensing status.","Applications and programs are formatted in an executable code (hereafter \u201cexecutable\u201d) in order to be executed by server device  or . Executables have an import table, which lists one or more dynamic link libraries (DLL) associated with the executable. A DLL is a module that can be used to perform one or more functions at runtime for the executable. Import tables may also be regarded as a set of data identifying an application or program, or as a linker table describing specific linkages to other applications or programs. For the sake of consistency, the description that follows will make reference to an import table though the corresponding discussion set forth above is to be included in the scope thereof.","According to the example embodiment of , the names of the functions included in each of the DLLs are retrieved  from the import table. These retrieved names, which may include the names of the DLLs, are used to generate  a unique identification for the application or program. These names can be combined in any of a variety of manners to generate the unique identification.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 3","FIG. 2"],"b":"220"},"In , a sorted list  of the retrieved function names is culled from the import table in a case-insensitive manner, based on a predetermined criterion, e.g., alphabetically, by name size in ascending or descending order, etc. The sorted list  of function names, which may include the corresponding DLL name, are then concatenated, or strung together consecutively.","The function names from an import table are generally unique, and typically cannot be changed without affecting the very functionality of the corresponding executable. Although major version releases of an application or program may include changes in an import table, import tables typically vary little from one version of an application or program to another, and generally not at all in localized versions of the application or program, i.e., they are static in nature and are considered to be integral to the structure of the application or program. Further, the function names are resistant to minute differences in executables including minor code tweaks to fix bugs, re-ordering binaries, filename changes, and filename location changes. Regardless of an underlying motivation, the aforementioned minute differences have previously succeeded in efforts to circumvent detection and\/or recognition of particular applications or programs without changing the functionality thereof. Conversely, any change to a function name affects the functionality of the application or program. More specifically, since the function names are references to functions in an external DLL file, changing a function name means that the corresponding function will not be found in the DLL resulting in a runtime error, and thus the program or application will be inoperable. Therefore function names are presently utilized for generating the signature for an application or program, thus preserving the reliable and robust nature of the example embodiments described herein.","The sorted and concatenated elements  of the import table are hashed  resulting in a unique signature  for the application or program. The hash is a cryptographic manipulation, and according to an example embodiment, includes a one-way MD5 (Message Digest 5) hash function. The result of an MD5 hash is a unique 16-byte signature for the executable of the application or program. Alternative one-way hash functions may be used, including SHA1 (Secure Hash Algorithm 1). The generated signature may be alternatively referred to as a \u201chash.\u201d","As mentioned above, this process is reliable and robust due to the utilization of at least the unique function names from the import table. In particular, sorting the function names from an import table in a predetermined manner and hashing a concatenation or string thereof result in a miniscule rate of collisions, i.e., the chance of identical signatures for multiple executables is very small. Further still, the hashing of only elements from the import table occupies a limited portion of processing resources, thus reducing the associated overhead. For instance, it is not necessary to load the entire binary code to memory for the hash computation. In addition, since only import table elements are hashed, very little of the actual binary code comprising the application or program are utilized in the signature generating effort. Also, considering the small size of an import table relative to the remainder of the application or program, the hash computation may be performed rapidly thereby reducing any hindrance to reliable execution of any authorized applications or programs running concurrently.","Continuing with regards to , data source  or  adds  the generated signature  to an operating system to be executed by server device  or . In view of the critical role an operating system plays for implementing a restricted-use server device, a list of prohibited applications or programs may be coded into a DLL for an operating system, which resides in the server device memory at all times while the server device is running and provides basic services. That is, the hashes are preferably coded into a critical file of the operating system. The kernel is the part of the operating system that is closest to the hardware of the server device and may activate the hardware directly or interface to another software layer that drives the hardware. In a Microsoft\u00ae Windows\u00ae operating system environment, an appropriate DLL for containing a list of prohibited applications or programs would be the kernel32.dll. Such example is non-limiting. For a restricted-use server device such as a blade server, the hash list includes the signatures for unlicensed applications or programs. However, it is further contemplated that the hash list may include the signatures of licensed applications or programs, or applications or programs that are at least one of ineligible and eligible for execution, with the respective hashes being appropriately categorized according to eligibility or accessibility.","Having been coded to include at least a hash and perhaps a restriction\/authorization classification for respective applications or programs, the operating system may be loaded onto a server device  or . For example, the operating system may be loaded onto server device  from off-line data source , or onto server device  or  from on-line data source . Further, operating system service packs with updated hashes may be loaded onto the server devices  and  in a similar manner. Appropriate means and methodologies are well known in the art.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 4 and 5","FIG. 5","FIG. 4"]},"When a startup configuration of server device  or  or a direct invocation at a local system calls for an application or program to be opened or loaded at restricted-use server device  or , the application or program on the operating system at server device  or  requests  a running state, i.e., requests execution by the server device. The operating system loads the code of the executable of the application or program through an application programming interface (API). That is, an executable must be processed by an API in order to achieve a running state. An example of an API in a Microsoft\u00ae Windows\u00ae operating system environment is called CreateProcess. Such example is non-limiting.","When the API receives the request  for a running state for an application or program, a determination  may be made as to whether particular applications or programs are being blocked at the particular server device  or , i.e., whether the server device is a restricted-use server device. However, since blade servers may be designed, manufactured, and\/or sold as restricted-use server devices, this decision step may be circumvented in favor of the assumption that unlicensed applications or programs are to be blocked from loading, i.e., restricted.","The API of an operating system generates  a verification signature of the application or program requesting a running state. Generation  of the verification signature for the application or program requesting a running state can be performed following the same procedure described above with respect to , relating to the generation of a signature for an application or program to be coded into an operating system. However, the discussion further below regarding  will provide additional details regarding the generation and processing of the verification signature.","The generated verification signature is compared to the signatures of the applications or programs that are coded into a DLL for an operating system kernel, and thus a determination  is made as to whether or not the application or program requesting a running state is restricted. A negative determination allows  the respective application or program to be loaded by the operating system at the restricted-use server, though a positive determination denies  access to the application or program.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5","b":["435","125","130","505","510","515","510"]},"The sorted function names  are then summed or concatenated, resulting in a single string including all of the function names from the sorted list  of import table elements. The sorted elements of the function table, having been strung together, are then hashed  using a cryptographic algorithm. A one-way hashing algorithm is utilized to generate a fixed string of numbers from a string of function names, which may include the DLL name. Example embodiments include hashing the import table elements using an MD5 hashing algorithm. However, the example embodiments described herein are not limited to such hash function. Any of a variety of hashing algorithms can be used; however, the hashing algorithm used should be the same as was used to generate the signature in  of .","The result of the one-way hashing function is a digital signature  of the application or program requesting a running state. An MD5 hashing of the sorted and concatenated import table elements  results in a 16-byte hash.","Generating verification signature  is quick and reliable due to the utilization of at least the unique function names from the import table. As discussed above regarding the unique and static nature of the function names from an import table, hashing the sorted and concatenated function names results in a low rate of collisions, i.e., the chance of identical signatures for multiple executables is very small.","According to an example embodiment of a restricted-use server device, the API compares the hash, or verification signature , of the application or program requesting a running state to the list of signatures  of restricted applications or programs that has already been coded, or \u201cbaked,\u201d into the operating system. A negative result, with no matches between verification signature  and any of the signatures coded into the operating system, results in the application or program being loaded. A positive result, with verification signature  matching one of the signatures in the DLL of the operating system, results in the application or program being blocked from loading. Thus, usage of the server device is restricted in accordance with web server licenses for respective applications or programs.","The list of restricted applications or programs is formulated based on many considerations, including those of a business and\/or financial nature. Thus, revisions to the list of signatures for restricted applications or programs can be continually updated as licenses are expired, revoked, purchased, renewed, etc. Accordingly, server devices  and  of  may periodically receive updated lists of restricted applications or programs in the forms of upgraded operating systems, service packs, etc.","The embodiments described above may be modified to reference not only restricted applications or programs but also authorized applications or programs. Such decisions may be made in accordance with evaluations of available resources and overhead. Regardless, such modifications do not in any way limit the scope of the embodiments described herein.","Further, the example embodiments described above are directed to blade web servers, although one of ordinary skill in the art should be able to appropriately modify such embodiment, as appropriate, for implementation of restricted-use application servers as well. Further, the embodiments may be modified, for example, to be implemented by both web servers and applications servers to prohibit the loading of applications suspected of containing bugs or viruses that may damage individual computers or even an entire network. Further, the embodiments may be modified to be implemented by a client operating system, for example to prohibit the loading of executables known to contain faulty or malicious code. The Microsoft\u00ae Windows\u00ae XP operating system is a non-limiting example of such an operating system. Further still, it may be desired to use such verification process to check for allowable, or eligible, applications or programs. For example, for a business kiosk intending to run only particular applications or programs server processing may be expedited if a corresponding server device checks for only authorized applications or programs.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 6","b":["600","600","600","600"]},"Computer environment  includes a general-purpose computing device in the form of a computer . Computer  can be, for example, client device , , , or  or server device  or  of . The components of computer  can include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including the processor  to the system memory .","The system bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, a PCI Express bus, a Universal Serial Bus (USB), a Secure Digital (SD) bus, or an IEEE 1394, i.e., FireWire, bus.","Computer  may include a variety of computer readable media. Such media can be any available media that is accessible by computer  and includes both volatile and non-volatile media, removable and non-removable media.","The system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) ; and\/or non-volatile memory, such as read only memory (ROM)  or flash RAM. A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM  or flash RAM. RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by the processing unit .","Computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by one or more interfaces (not shown).","The disk drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the example illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the example computing system and environment.","Any number of program modules can be stored on the hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, an operating system , one or more application programs , other program modules , and program data . Each of such operating system , one or more application programs , other program modules , and program data  (or some combination thereof) may implement all or part of the resident components that support the distributed file system.","A user can enter commands and information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to the processing unit  via input\/output interfaces  that are coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , other output peripheral devices can include components such as speakers (not shown) and a printer  which can be connected to computer  via the input\/output interfaces .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, the remote computing device  can be a PC, portable computer, a server, a router, a network computer, a peer device or other common network node, and the like. The remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer . Alternatively, computer  can operate in a non-networked environment as well.","Logical connections between computer  and the remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When implemented in a LAN networking environment, the computer  is connected to a local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the wide network . The modem , which can be internal or external to computer , can be connected to the system bus  via the input\/output interfaces  or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are examples and that other means of establishing at least one communication link between the computers  and  can be employed.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  reside on a memory device of remote computer . For purposes of illustration, applications or programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computing device , and are executed by at least one data processor of the computer.","Various modules and techniques may be described herein in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. for performing particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.","An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. As a non-limiting example only, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.","Reference has been made throughout this specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d or \u201can example embodiment\u201d meaning that a particular described feature, structure, or characteristic is included in at least one embodiment of the present invention. Thus, usage of such phrases may refer to more than just one embodiment. Furthermore, the described features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.","One skilled in the relevant art may recognize, however, that the invention may be practiced without one or more of the specific details, or with other methods, resources, materials, etc. In other instances, well known structures, resources, or operations have not been shown or described in detail merely to avoid obscuring aspects of the invention.","While example embodiments and applications of the present invention have been illustrated and described, it is to be understood that the invention is not limited to the precise configuration and resources described above. Various modifications, changes, and variations apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and systems of the present invention disclosed herein without departing from the scope of the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following detailed description, while indicating example embodiments, is only illustrative since various changes and modifications will become apparent to those skilled in the art from the following detailed description, in which:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
