---
title: Caching data for offline display and navigation of auxiliary information
abstract: Described is a system and system by which application programs provide data to auxiliary display device (that is associated with a main computer system) for display, including at times when the main computer system is powered down. The cache maintains the user data in association with structured navigational information, to allow navigation within the data via the structure. When online, the main computer system prepares the data cache from program data in combination with navigational information, and transfers the cache to an offline medium such as auxiliary storage in firmware. The cache may be arranged as a tree structure, such that navigation commands result in output according to data in the tree. Other events such as time-based events can change the auxiliary device output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577771&OS=07577771&RS=07577771
owner: Microsoft Corporation
number: 07577771
owner_city: Redmond
owner_country: US
publication_date: 20040503
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention is related to the following copending United States Patent Applications filed concurrently herewith, assigned to the assignee of the present invention, and hereby incorporated by reference in their entireties:","\u201cProcessing Information Received at an Auxiliary Computing Device,\u201d U.S. patent application Ser. No. 10\/837,895, filed May 3, 2004;","\u201cContext-Aware Auxiliary Display Platform and Applications,\u201d U.S. patent application Ser. No. 10\/837,894, filed May 3, 2004; and","\u201cAuxiliary Display System Architecture,\u201d U.S. patent application Ser. No. 10\/838,174, filed May 3, 2004.","The invention relates generally to computer systems, and more particularly to an improved system and system for display of information for a computing device.","Laptops and other mobile devices allow the user to work in various locations, providing great convenience to users. However, the mobile devices are often powered down when traveling between locations, particularly with laptops in which the lid is typically closed during transit. As a result, access to relevant data on the device requires opening the laptop lid, waiting for power-up, and navigating to the desired information. This is a time-consuming and less-than-desirable user experience, particularly when the desired data is something as simple as a room number of a meeting.","U.S. patent application Ser. Nos. 10\/429,930 and 10\/429,932 are generally directed towards the concept of computer systems having auxiliary processing and auxiliary mechanisms, particularly display-related mechanisms, that provide some computing functionality. For example, a small LCD on the lid or side of a laptop computer can provide its owner with useful information, such as a meeting location and time.","However, such auxiliary displays have heretofore been limited to narrow, limited operations in which a dedicated auxiliary display program is customized with respect to the information that can be displayed. For example, if meeting information was desired, the user would only see the information if the auxiliary display program was programmed to display the particular type of data as well programmed with the relevant data for the current meeting.","What is needed is a way for application programs that run under the main operating system of a computer system to provide appropriate data for display and navigation on an auxiliary display of that computer system, including at times when the main display is not easily accessible, such as when the computer system is powered down.","Briefly, the present invention provides a cache of relevant user application program data that allows a user to navigate through the information via an auxiliary display and associated actuators that remain active while the main computer system is powered down (offline). The cache maintains the user data in association with structured navigational information, whereby the user can navigate within the data via the structure. The structured cache provides a flexible mechanism that does not limit the user to the type of data that can be cached.","To accomplish offline operation, when online the main CPU, operating system and application programs prepare a data cache and other information that is then transferred to auxiliary storage in the firmware for use offline. The transfer may be a full transfer of the cache at transition to the powered-down state, or may be a synchronization of previously-cached data. The auxiliary device may be attached to the computer system, or the cache may be made available for remote access by another device, in which event the cache is the entity that couples the other device to the main computer data, essentially making the other device an auxiliary display.","A layered architecture is provided, by which application programs and the like (e.g., operating system components) register to provide data for auxiliary display to an auxiliary device service layer. Among other operations, the service layer is configured to structure the data into a cache. The structure may correspond to user navigation, such that navigation commands received from the user walk the user through the structure. For example, each application program that provides data can be represented by a branch of a tree structure, with child nodes under each branch providing some further navigation paths and\/or some subset of the application's data. Note that in addition to offline navigation, the cache can be used for online navigation, although for efficiency and for purposes of staying up-to-date, when online, some of the data in the cache can be a reference pointer to data in the main system rather than the actual data. Note further that if used, the online cache does not necessarily provide the same data as the offline cache, e.g., a user may want different application programs when online from when offline, and some of the application programs' data may have to be pruned when offline due to storage space limitations in the firmware.","In one implementation, the cache is arranged as a tree structure, such that only up and down navigation commands are required to navigate the tree, along with a selection mechanism (e.g., a selection button or button combination\/actuation pattern) to make a selection. A home page is maintained in the firmware, and at a minimum provides a way to get to the application program's or programs' data. For example, if the cache is a tree structure, the home page is a root node in the tree and may provide a (scrollable) list of the application programs that are represented by nodes branching directly from the root\/home page node.","As a user navigates the tree, the output of the auxiliary device may change, such as by sending a new cached bitmap to the display, or rendering a new display by interpreting cached markup data or the like. The user thus obtains an offline experience that presents various display screens for viewing the cached application program data.","In addition to program data, the firmware can also contain time-based event data or other event-based data such as power-state based events. For example, with time based events, the firmware can set up time-triggered interrupts that fire an event. When such an event is received, the firmware determines what the event means, and may change the state of the auxiliary device in response to the event, e.g., to show a cached meeting reminder, light an indicator or perform some other programmed action.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["120","120"]},"The personal computer system  included a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD-ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary computer system described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read-only memories (ROMs) and the like may also be used in the exemplary computer system.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system  (such as Windows\u00ae XP), one or more application programs  (such as Microsoft\u00ae Outlook), other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. An auxiliary display  is an additional output device, and may, for example, be connected to the system bus  via an auxiliary display interface . An auxiliary display  may also connect to a computing device  through a serial interface or by other interfaces, such as a parallel port, game port, infrared or wireless connection, universal serial bus (USB) or other peripheral device connection. An input device  in  may provide one or more actuators to interface with and\/or control the auxiliary display , and for example may be connected to the system bus  via input device interface , which may be a serial interface, or by other interfaces, such as a parallel port, game port, infrared or wireless connection, universal serial bus (USB) or other peripheral device connection.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, Intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It should be noted that the computer system need not be fully operational for an auxiliary display to work in accordance with the present invention. Indeed, as described below with reference to , an auxiliary display may still work when the computer is powered down, at least to a default extent or to an extent configured by a user, such as when the computer system is in a sleep state or a hibernate mode, and\/or when the user has not yet logged on or is otherwise locked out of the system via security mechanisms. For example, the user may want a telephone handset and speakerphone that are integrated into a personal computer to work as conventional appliances when the computer system is powered down, and use the auxiliary display as a caller-ID device. This device may also store data for later transmission to the computer system when the computer system is again powered up, such as to log the calls received, including when the computer system was not fully powered up.","The auxiliary display may supplement the main display and may also serve as a surrogate display when the main display is shut down or otherwise not operational (e.g., disconnected), to give the user some information. For example, information such as how to power up the main display might be helpful, as would a room number and\/or directions to a meeting on an auxiliary display device connected to a mobile computer that the user can view when the main display is off and\/or not easily visible (e.g., the lid of a laptop is closed). Note that even on a tablet PC with a continually visible screen, the main display may be shut down to save power, whereby an auxiliary display may provide substantial benefits. Note that the user may limit the extent of the display based on the computer system state, e.g., when the user is not logged in, only certain non-sensitive or very specifically-controlled information may be displayed, and so forth.","To enable and control communication in these powered-down modes, firmware may exist, stored in non-volatile memory, that when loaded and operated on by a secondary processor, enables the auxiliary display, along with other auxiliary components to be used, as long as some power is available. Note that as used herein, the term \u201cfirmware\u201d can be generally considered as representing the auxiliary memory, the code therein and\/or the secondary processor on which it runs.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIGS. 2A-2E","FIGS. 2A and 2B","FIG. 2C","FIGS. 2D and 2E"],"b":["200","200","200","202","200","204","200","206","200","200","208","210"],"sub":["a","e","a ","b ","c ","d ","e "]},"As should be apparent from , an auxiliary display may be in the form of any number of known types of displays such as one or more LEDs, a 2-line alphanumeric display, a monochrome display, or a color display. Those skilled in the art will appreciate that the present invention may also use the display of other computing or communication devices as the auxiliary display . These other computing or communication devices include general purpose computers, cell phones, and handheld devices such as a pager or a personal digital assistant (PDA). Additionally, the present invention may use a virtual auxiliary display implemented within an area of the onscreen display of the computing device  (e.g. a screensaver or a component of the graphical user interface) as the auxiliary display , including before a user has logged in. The auxiliary display  may include a combination of any of the forms described above, and also be physically or logically combined with indicators such as one or more LEDs and\/or used in conjunction with a virtual auxiliary display.","Even absent a screen, one or more LEDs may be advantageously used as the auxiliary display  for notification about the occurrence of an activity. Such an auxiliary display may be implemented with low costs and less power consumption and provide notification in an unobtrusive manner. It may be effective used for systems with extremely tight form factors or for systems where communications for users are managed by another person. An auxiliary display  may additionally be effective when notifications need to be seen from, a distance. An auxiliary display also may be used in conjunction with an onscreen virtual auxiliary display when there is informational content associated with the activity, such as notification of a new email message. In this case, content from the email may also be displayed on the virtual auxiliary display . Furthermore, an auxiliary display  may be effectively used for public systems (libraries or kiosks) or shared computers when display of content is undesirable.","Alternatively, a 2-line alphanumeric display may be advantageously used as the auxiliary display  where cost or space is critical, but notifications and basic content are desired. It may be effectively used for tablet PCs, laptops, budget PCs, phone docking stations, monitor bezels, and small or low-cost PC appliances or peripherals such as a handset, keyboard, or remote control. It may also be effectively used as a replacement for (and an improvement to) a caller ID box.","Furthermore, a monochrome or color multi-line display may be advantageously used as the auxiliary display  for media-rich applications, high-end consumer systems or media center systems. It may be effectively used for high-end laptops with more generous form factors or where an emphasis is placed on communication, full-function PCs with a heavy business or communications emphasis, media centers or high-end media appliances (including remotes, console systems with portable media functionality) and mobile auxiliary displays. Additionally, the display of another computing or communication device may advantageously be used as the auxiliary display  where users can expand the role of these supplemental devices when using their PC. These other computing or communication devices include general purpose computers, cell phones, and handheld devices such as a pager or a personal digital assistant (PDA). Further, note that the auxiliary display need not be an actual display, but can be a projection (e.g., onto a wall) of the information. An auxiliary display, as referred to herein, may be composed of essentially anything that can be sensed, including any visual, audible, and\/or tactile representations.","As mentioned previously, a virtual auxiliary display may be used as the auxiliary display  for public systems (libraries or kiosks) or shared computers when display of content is undesirable. It may also be effectively used for low-cost systems or for devices with very minimal form factors that make even LEDs impractical. A virtual auxiliary display may be implemented as a screensaver or as a component of the graphical user interface.","The input device , hereinafter referred to as actuators (in plural, even if only a single mechanism such as a button or pointing device), provides the user with a mechanism to switch between different categories of application data or notifications such as email notifications, voicemail notifications, calendar notifications, system status notifications, caller ID lists and other types of notification messages. Accompanying such a switch button may also be an up button and a down button to allow the user to scroll forward and backward through the notification messages within a particular category. Those skilled in the art will appreciate that any other types of actuators may be used, such as a keyboard, microphone, joystick, game pad or other device including a device that contains a biometric sensor, environmental sensor, position sensor, or other type of sensor. Any of the input devices of the computing device  that is represented in  may be used as the input device (actuators) , and may be used in conjunction with independent actuators.","Caching for Offline Auxiliary Display Operation","As will be understood, the present invention provides an auxiliary display  for a user to simply and rapidly view auxiliary information. In keeping with the present invention, the user may select, to an extent, what information appears on the auxiliary display by using actuators  to select among application program data that can be presented on the auxiliary device. Although program data and event notifications will be used to illustrate the auxiliary display of information, it should be understood that the present invention may provide auxiliary display of other types of information, such as data from Internet-related services including transaction services, auction services, advertising services, entertainment services, and location services. Such services can provide a wide variety of information including financial transaction information, headline news, stock quotes, sport scores, weather and other information, including information specifically requested by the user as well as unsolicited information. It will also be appreciated that the auxiliary display  may be operative using any number of known types of displays such as a set of notification lights, a 2-line alphanumeric display, a monochrome display, or a color display. Note that as used herein, for simplicity \u201cauxiliary display device\u201d will generally refer to the auxiliary display screen and\/or the actuators associated with that screen as well as any other hardware, firmware or software in the device, however it should be understood that the screen and actuators may be independent mechanisms, and\/or that there may not be actuators requiring physical contact to input data. Further, note that the auxiliary display device may be considered as possibly containing indicators (e.g., individual LEDs) instead of or in addition to a pixel-type display screen.","In accordance with an aspect of the present invention, the present invention facilitates usage of the auxiliary display at times when the main CPU\/operating system and application programs are not operating, that is, when the system is offline, but the auxiliary device remains operational. Note that the offline auxiliary system components are implemented in firmware including an auxiliary processor and auxiliary memory containing executable code and data. To accomplish offline operation, when online the main CPU\/operating system and application programs prepare a data cache and other information, that is then transferred to auxiliary storage in the firmware for use offline.","The transfer may be a full transfer of the cache at power-down (e.g., shutdown\/sleep\/hibernate time), or may be performed in part by a background process or the like such that only synchronization (instead of a full data transfer) is required at power-down time. Moreover, a computer device such as a desktop may not go into a powered-down state to make such a cache accessible. For example, via a background process or a manually-initiated operation, the cache can be built. If the cache is remotely accessible, the user would have remote access to the cached auxiliary information and the transfer can occur to a remote device without the computer device needing to be powered down. Thus, consider a user that travels to a meeting without a computer, but has another device such as a SmartPhone configured to remotely access the cache data of the main computer. Because of the cache, such a remote user can remotely view and navigate the cache via the remote device, which because of the cache is an auxiliary display of the system.","As generally represented in , there is provided a layered architecture by which one or more application programs  can interface with virtually any type of auxiliary display device, to output data to its display  and\/or interact with the user via actuators . To this end, there is provided an architecture having independent architectural layers of software, as generally described in the aforementioned related U.S. patent application entitled \u201cAuxiliary Display System Architecture.\u201d Note that in this related U.S. patent application, the layers are shown in generally the same order as in , although the grouping of components which is somewhat arbitrary may slightly differ from  of the present application. In any event, in , the service can be considered as an independent layer , with the application layer  above the service layer  and with the protocol layer  below the service layer .","In the implementation represented in , four layers are present, each separated by interfaces. More particularly, in addition to the application layer , the service layer , and the protocol layer , there is a firmware layer  shown in . As described below, these layers provide a straightforward mechanism by which an application program may provide auxiliary data for caching in a structured manner that provides a user with easy access to relevant cached information, without having to power the computer (and\/or open it to see the main display screen, if a laptop or covered tablet).",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 4","b":["302","302"]},"The application layer  provides the interfaces for developers to build solutions while the service layer addresses certain aspects of presenting auxiliary information, namely arbitration, interruption, and cache creation. Arbitration (as generally described in the aforementioned related U.S. patent application entitled \u201cAuxiliary Display System Architecture) and interruption support provides a framework that enables sharing of auxiliary resources.","In accordance with an aspect of the present invention, cache creation is the mechanism that structures the application data for an offline experience. As described below with reference to , the service layer builds the cache in a manner that preserves context and structure information so that the firmware can navigate the data when completely isolated from the online operating state. As further described below, in one implementation, the service layer is also responsible for pruning the data structure in the event that its content size exceeds the allotted storage capacity of the auxiliary device firmware.","As represented in , the application layer  and the auxiliary display service layer  enable various structure and functionality, including auxiliary registration by which an application program  (or associated application plug-in) registers itself with a service registration component  of the auxiliary display layer . In the example implementation of , the service registration component  provides an IAuxAppReg interface for this purpose. Other application programs may likewise register themselves via this interface.","Once registered, the auxiliary application  has the ability to receive events from the associated auxiliary display device and\/or related resources. For example, an event may be sent to the auxiliary application component  upon an auxiliary device becoming available, while another event could correspond to user interaction with the auxiliary device actuators. In the example implementation of , the application program implements and exposes an IAuxAppSink interface to receive such events.","The application program  also has the ability to enumerate the available auxiliary hardware device or devices that are available. In the example implementation of , a mediator component  in the auxiliary device service  provides the enumeration via an IAuxMediator interface. In this manner, the device or some data related to the device (e.g., a corresponding XML file) can report the capabilities of the device display screen or the like and\/or its actuators to the application program . The application program  may then adjust the output and input according to the display, e.g., color scheme, resolution, navigation commands, and so forth can be modified for the device characteristics.","Arbitration is also provided in the mediation component  of the service layer via the IAuxMediator interface, to provide the mechanism that determines which application program  should be having its data currently displayed and should be receiving navigation commands. Note that multiple application programs take turns sharing the display as appropriate; in other words, the arbitration function of mediation manages the priority (z-order) of the auxiliary application programs and\/or plug-ins.","The protocol layer  creates an abstraction through which the service layer  sends and receives data from the auxiliary device. The protocol layer  thus facilitates maintaining a level of hardware independence. The service layer can write to the display or set the state of indicators via an IAuxDevice interface for communicating data to the device.","Once a program is allowed to write to the display and receive commands via its actuators, auxiliary system referencing is one mechanism that provides the ability to blit\/render to an abstracted memory buffer that allows the currently selected auxiliary application (e.g., plug-in) component  to use the display resources. In implementations that do not allow offline caching, the mediator may pass a reference pointer to the auxiliary device interface to the auxiliary application, and have the application program thereafter call the interface directly to provide display data to the display and\/or indicator. This would be feasible in an offline-capable model as well. Note that there still may be such abstraction while the machine is online, even if the particular hardware implementation of the auxiliary display device does not support offline operation, e.g., the service layer would store the tree\/cache, and render it to the device as bitmaps or the like using the normal online APIs, rather than the cache being stored on the device's NVRAM and rendered by the firmware. Thus, in the example implementation of , the application program passes its data through the service layer (the mediator interface) so that the service layer can structure the code for offline caching.","In general, in one implementation, when online, the system works like the well-known WM_PAINT model, in that an application is instructed by the service when it is the application's turn to render data, (except the data is written to the auxiliary display in this instance). In an alternative implementation, it is feasible to have the application write data to the cache instead of to the display object, e.g., using the same structure as that of the cache but rather than sending the actual data, sending a pointer to main system that is cached so that the auxiliary device obtains the data that is needed to display at the current moment via the pointer thereby avoiding data transfer and avoiding the need to regularly synchronize a cached copy of an image, for example.","As can be readily appreciated, the various layers provide auxiliary functionality in an architecture that is comprehensive and extensible. The pluggable architecture facilitates the writing of applications that can utilize the auxiliary resources without needing to understand or deal with low-level requirements.","In accordance with an aspect of the present invention, relevant application data and other information is cached for use by the auxiliary display device. A general goal is to cache the information into a quickly accessible store, along with providing a straightforward systemology for applications to provide the information to be cached. To this end, in one implementation the data is structured in a tree format (referred to as a structured cache tree), and simple primitives are provided to build the structured cache tree. In this implementation, the collection of the structured cache trees (or tree subsets), the transfer of the tree to the firmware, and the interaction by the firmware with the tree data when the main computer is powered down provides the mechanism that facilitates offline usage of an auxiliary display.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 5","FIG. 5"],"b":["508","510"]},"As represented in , online application data  is collected by a caching mechanism , such as by polling each application program that uses the auxiliary display for its data; (an application that is not running but for which the user has indicated a need for offline interaction with its data can be started to obtain the data). Note that every application that uses the auxiliary display device when online may not be configured to use it when offline, or may use the auxiliary device differently when offline, such as by setting offline limits when configuring the application for offline data viewing. For example, the auxiliary display can scroll through any number of email messages when online, but the application may make no more than some default or user-configurable (e.g., twenty) messages available for offline scrolling.","The user may configure the system to control which application programs can provide data to the cache for offline viewing. For example, a user may want phone numbers, email messages, tasks and calendar data cached for offline viewing on the auxiliary display, but no other program's data. For example, even though an online application might use the auxiliary display for displaying stock quotes, a user might not want stock quotes cached for auxiliary viewing, because caching such data would waste storage space on data that rapidly would become obsolete.","The user may also configure the amount of storage that each application gets for its data and can configure the applications with rules for offline storage. Alternatively, an algorithm (described below) prunes data from the tree if the application programs provide too much data to cache, with any surplus from one application's allocation used for another applications' data when that other application's data uses more space than it has available. The redistribution of surplus data goes to applications based on a user-specified priority ordering, e.g., to the first application listed on the home page (the list order is user configurable), then if not all is needed to the next listed application, and so on.","As previously mentioned, the collection operation may take place when powering down, or may be ongoing to some extent with synchronization performed at the time of transitioning to offline. Pruning is performed as necessary by a data pruning mechanism  to divide the available storage up between applications and trim data as necessary for each to match the amount of space that is available. In any event, in the example implementation of , the result is a structured cache  of offline data that can be navigated via the tree structure.","Applications may want to provide more than just navigable data to users. For example, a calendar program may want to provide data such as a meeting reminder that automatically appears at a certain date and time. As it would be inefficient to walk the offline cache tree on a regular basis to look for such events, information such as to trigger a time based interrupt may be transferred to the firmware, as a list of times and actions to take (possibly via the tree, which would then have to be walked once to find it, but preferably as separate data). As represented in , the firmware may set up such time-based interrupts , and also store in a timer-ID to action table  or the like the action(s) to take when each identified timer interrupt occurs. In this manner, for example, specific reminders may be displayed at the correct moment, one or more indicators may light or flash, and so on.","Once set up and transferred and the main computer powered down, the microcontroller  and auxiliary storage take over sole control of the auxiliary display  and actuators . An offline shell program  may provide a home page from which navigation is based, along with the logic to process timer-based events and the like. The offline shell program  in conjunction with the offline interaction manager  handles navigation through the offline cache, as well as possibly changing the state of the display in response to non-manual actuators, e.g., to show a particular message when a battery is low. Shell primitives may include primitives for mail, phone, address, calendar, stocks, music, notes, and so on.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 6","b":["601","603","604"]},"In general, the home page may simply provide a menu of the application programs, (scrollable if necessary) although depending on the arrangement of the actuators, a more complex menu reflecting the hierarchy is feasible, e.g., four way navigation buttons could use the up and down buttons for scrolling and the right and left buttons for expanding and collapsing the currently highlighted menu entry to show data representing any subtrees. When a user selects a page in the home page menu, such as by pressing a selection actuator button when on a page, the shell node essentially moves to that node, where the information about that page is obtained and that page is rendered. The information page may comprise anything from a bitmap to markup language (e.g., HTML or XAML) as appropriate for rendering on a given device, which depends on the code that is installed on the device. Note too that code for interpreting the cached data can be transferred or otherwise downloaded to the firmware.","As represented in , there may be multiple sublevels in the tree structure. For example, the personal information manager node  that is shown might have contacts, appointment and task nodes (-, respectively) beneath it, each having its own corresponding display screen and respective sub-nodes C-C, A-Aand T-T. The application program node may only have one level below it, as represented by the message nodes M-M. In general, each node corresponds to a scrollable page that displays its data and any sub-nodes to which navigation is possible.","Note that in  the media player application  is shown for completeness, to indicate that in some implementations, the same navigation tree may be used when online or offline for determining the next screen to render, even though the media application may not operate in the offline state. When online in such an implementation, an online-only media player application will have a display screen node in the tree to which the user can navigate, such as to view current track and timer data on the auxiliary display. When offline, the node (referred to as a terminal, or raw node) representing such a display screen may be pruned from the tree to save storage space. Alternatively, when a media player such as an MP3 player serves as the auxiliary display, such a node would allow the MP3 player to use the screen as desired, yet do so in the navigational framework with the other application data.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIG. 6","FIG. 7","FIG. 6","FIG. 7"]},"As apparent from , the data that is cached is not only the application data, but also contains the structure for navigation. In this manner, the firmware can render the various images correctly as the user navigates via the actuators, whether the rendering is by providing different bitmaps from the cache in response to navigation commands, or by interpreting content by browser-like software to construct each page, or by some other mechanism. Thus, although a tree has been described, it is understood that any navigational structure (e.g., a graph, an HTML or XAML document containing rendering data or virtually any structured data) can be used for navigating among the data. In such implementations, the metadata that describes the application data is also cached. In alternative implementations, the data can be less formally structured, and the code that interprets the data can be provided to the firmware (along with the application data) if that code is not present in the firmware.","Moreover, once the navigational structure and data is cached, any auxiliary device that has access to the cache, including one not present at the time of caching, can read the data structure and allow the data to be rendered and navigated. For example, if the cache was saved to the Internet or removable media, rather than solely to a coupled device's firmware, any properly coded device with access to the cache file (and appropriate access rights) could render and navigate the data. Thus, for example, a user could read his or her cached auxiliary display data via an MP3 player as long as that player knew how to read the cache structure, even if that MP3 player was not coupled to the main computer at the time of caching. In other words, the cache is what couples the auxiliary device to the computer system. Note that this does not mean that the device understands the meaning of the data, only that it can render it and navigate it. Note further that if some of the data is itself internally structured (e.g., not a bitmap but arranged as rows and columns), rendering and navigational devices that also understand the data can do even more with the data, such as to allow suitable data to be dynamically sorted by the user as desired.","It can be readily appreciated that by preserving a cache as a file, other benefits are possible. For example, just like a file, much later (e.g., many years) the state of the auxiliary display can be replayed to recover important information.","Turning to an explanation of the pruning operation which occurs in the online state, it is possible for a sophisticated user to configure memory allotments to each application program that the user has specified as being able to use the auxiliary device when the offline state. Thus, for example, one user may have a large list of contacts that should be available, while another user has many meeting requests and still another user has a need for auxiliary display of email messages. Each user may want all of the data available, but each would prefer to give priority to a different application's corresponding display.","Lesser-sophisticated users with too much data also need a default way to divide memory among the applications' data being used to construct the tree. In one implementation, the default is to initially split the memory that is available evenly among the applications, that is, evenly to the nodes in the first level below the home page. Note that although initially split evenly, the data for any given application may not require its initial allotment, and thus the pruning mechanism may make the surplus available for the data of other applications. Thus, even if initially split evenly, there is still some mechanism needed as to how to allocate the surplus.","In one implementation, the surplus allocation mechanism is a simple priority scheme based on the order in which the home page presents the sub-pages representing the application programs. The display ordering is user configurable, and thus so is the priority.","Note that when building a tree, it is not known until a branch is built whether there is a surplus or deficit of memory for that branch. For example, an email branch may be pruned by removing messages (oldest first) until enough space is available for those messages that remain. However, the pruning of the last message, if a large message, results in what was a deficit becoming a substantial surplus that can now be redistributed to another branch of the tree. As such, the pruning algorithm is recursive from level to level and may be re-run for a branch when more memory becomes available.","The following pseudocode describes one such tree pruning routine that may be called with root identifier and total cache size variables. The total cache size (amount of memory allocated to the cache) initially is evenly divided between the branches, and each lower child node initially gets an equal share of the parent node's budget. As can be seen, pruning only applies when necessary, and the memory pruning is recursive, starting from last node to first node and up the branch. Child nodes of a branch are given any surplus first, and only if no child node can use the surplus is another branch given the surplus.",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Tree Pruning Algorithm Pseudo Code"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Given:",{}]},{"entry":["\u2003Node","::= A tree node."]},{"entry":["\u2003Node.size","::= Total size of subtree rooted at Node."]},{"entry":["\u2003Node.nChildren","::= Number of children of Node (0 if terminal)."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003Node.child[0..nChildren\u22121]\u2003::= Child nodes of Node."},{"entry":"Prune cache tree using:"},{"entry":"\u2003PruneTree(Root, TotalCacheSize)"},{"entry":"where PruneTree( ) is defined as follows:"},{"entry":"\/\/"},{"entry":"\/\/ Prune tree rooted at node N to <= budget."},{"entry":"\/\/"},{"entry":"\/\/ Return amount by which pruned tree is less than budget."},{"entry":"\/\/"},{"entry":"int PruneTree(Node N, int budget) {"},{"entry":"\u2003\/\/ If tree is already within budget, we're done."},{"entry":"\u2003if (N.size <= budget) {"},{"entry":"\u2003\u2003return budget \u2212 N.size; \u2003\u2003\/\/ Return budget surplus."},{"entry":"\u2003}"},{"entry":"\u2003\/\/ The tree is over budget and needs to be pruned."},{"entry":"\u2003\/\/ If it's a terminal node (no children), then we"},{"entry":"\u2003\/\/ completely delete the node."},{"entry":"\u2003if (N.nChildren == 0) {"},{"entry":"\u2003\u2003\/\/ Note: Deleting the node includes walking tree from"},{"entry":"\u2003\u2003\/\/ node to root, adjusting node subtree sizes"},{"entry":"\u2003\u2003\/\/ (i.e. subtract N.size from size of each parent to root)"},{"entry":"\u2003\u2003DeleteNode(N);"},{"entry":"\u2003\u2003return budget; \u2003\/\/ Return full budget as surplus."},{"entry":"\u2003}"},{"entry":"\u2003\/\/ It's an over budget tree--recursively prune the tree"},{"entry":"\u2003\/\/ until it is within budget."},{"entry":"\u2003\/\/ childBudget is the maximum allowed size of unpruned child nodes."},{"entry":"\u2003\/\/ Initially each child node is allocated an equal share of"},{"entry":"\u2003\/\/ the parent node's budget."},{"entry":"\u2003childBudget = budget \/ N.nChildren;"},{"entry":"\u2003\/\/ Examine child nodes from last to first (we assume that"},{"entry":"\u2003\/\/ the most \u201cvaluable\u201d nodes are listed first, so less"},{"entry":"\u2003\/\/ \u201cvaluable\u201d nodes will be considered for pruning first."},{"entry":"\u2003\/\/ Stop when parent node is within budget."},{"entry":"\u2003for (i = N.nChildren \u2212 1; i >= 0 && N.size > budget; \u2212\u2212i) {"},{"entry":"\u2003\u2003\/\/ If this child is over budget, it must be"},{"entry":"\u2003\u2003\/\/ recursively pruned."},{"entry":"\u2003\u2003if (N.child[i].size > childBudget) {"},{"entry":"\u2003\u2003\u2003\/\/ It will be pruned to a size that puts it within budget,"},{"entry":"\u2003\u2003\u2003\/\/ or puts its parent node within budget, which ever"},{"entry":"\u2003\u2003\u2003\/\/ requires less pruning."},{"entry":"\u2003\u2003\u2003\/\/ Minimum amount this child tree must be reduced."},{"entry":"\u2003\u2003\u2003minReduction = min((N.size \u2212 budget), (N.child[i].size \u2212"},{"entry":"childBudget));"},{"entry":"\u2003\u2003\u2003\/\/ Recursively prune the child tree."},{"entry":"\u2003\u2003\u2003surplus = prune(N.child[i], N.child[i].size \u2212 minReduction);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003else {"},{"entry":"\u2003\u2003\u2003\/\/ This child is within budget. It survives unpruned."},{"entry":"\u2003\u2003\u2003surplus = N.child[i].size \u2212 childBudget;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003\/\/ This child is now within budget by the amount given"},{"entry":"\u2003\u2003\/\/ by surplus."},{"entry":"\u2003\u2003\/\/ If there are more children, distribute the surplus"},{"entry":"\u2003\u2003\/\/ evenly among them."},{"entry":"\u2003\u2003if (i > 0) {"},{"entry":"\u2003\u2003\u2003childBudget += surplus \/ i;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":"\u2003\/\/ Return budget surplus."},{"entry":"\u2003return budget \u2212 N.size;"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"As can be seen from the foregoing, the present invention enables application programs to cache data for displaying and navigating via an auxiliary device of a computer system when the main computer system is powered down. The present invention thus provides numerous benefits and advantages needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific form or forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 2A-2E"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
