---
title: Facilitating system service request interactions for hardware-protected applications
abstract: Described herein are implementations for providing a platform adaptation layer that enables applications to execute inside a user-mode hardware-protected isolation container while utilizing host platform resources that reside outside of the isolation container. The platform adaptation layer facilitates a system service request interaction between the application and the host platform. As part of the facilitating, a secure services component of the platform adaptation layer performs a security-relevant action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09389933&OS=09389933&RS=09389933
owner: Microsoft Technology Licensing, LLC
number: 09389933
owner_city: Remond
owner_country: US
publication_date: 20111212
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","Overview","CONCLUSION"],"p":["The present application is related to U.S. patent application Ser. No. 13\/323,465, filed concurrently.","Conventional software applications rely on various operating system functions. An operating system may provide a set of application programming interfaces (APIs) for providing basic computational services, such as thread scheduling, memory allocation, virtual memory, device access, and so forth. Additionally, an operating system may provide a rich feature set of APIs that provide additional operating system services such as graphical user interface (GUI) services, clipboard services, and the like.","Certain security-enabled processors are capable of providing a secure execution environment. Such security-enabled processors provide a protected memory space, and the security-enabled processors ensure that code and data stored in the protected memory space is inaccessible by code outside the protected memory space. The security-enabled processor provides well-defined exit and entry functions, hereafter referred to as gates, that permit execution to pass between code inside the protected memory space and code outside environment. The security-enabled processor does not allow access to input or output devices or kernel-mode execution within the protected memory space. As a result, the protected memory areas of security-enabled processors are too restrictive to run conventional software applications.","This Summary is provided in order to introduce simplified concepts of the present disclosure, which are further described below in the Detailed Description. This summary is not intended to identify essential features of the claimed subject matter, nor is it intended for use in determining the scope of the claimed subject matter.","An application executes inside a user-mode hardware-protected isolation container (UMHPIC) provided by a security-enabled processor. A library operating system executing within the UMHPIC as part of the application fulfills most operating system requests, including high-level requests. An UMHPIC-aware platform adaptation layer (U-PAL) enables applications with no special knowledge of the UMHPIC to execute inside the UMHPIC while utilizing operating system resources that reside outside of the UMHPIC. The U-PAL includes a secure services component that executes within the UMHPIC and ensures that thread scheduling, file system interactions, and resource allocations are handled properly on behalf of the application. The U-PAL includes a thunking component with a trusted portion that resides inside the UMHPIC and an untrusted portion that executes in user mode in the outside execution environment. The trusted thunking component passes system calls to the untrusted thunking component via an exit gate controlled by the security-enabled processor. The untrusted thunking component passes system call results from the operating system to the UMHPIC via an entry gate controlled by the security-enabled processor.","As discussed above, conventional software applications rely on a rich feature set of operating system functions. Embodiments of the present application enable an application not written specifically to run within a secure execution environment (an unmodified application) to execute within a secure execution environment\u2014hereinafter referred to as a user-mode hardware-protected isolation container (UMHPIC)\u2014without trusting any code outside the secure execution environment. While code outside the UMHPIC, such a host operating system, may deny services to code inside the UMHPIC, code outside the UMHPIC cannot tamper with or snoop on the execution of code within the UMHPIC. Executing a conventional unmodified application within an UMHPIC might normally entail trusting the \u201chost\u201d operating system running outside the UMHPIC. An unmodified application normally trusts a host operating system for three reasons: first, conventional applications exploit rich and varied services from the operating system; second, an unmodified application is not configured to invoke the specific entry and exit gates of the security-enabled processor to enable execution and data to be passed between the UMHPIC and the outside execution environment; and third, the application relies upon the correct functioning of the operating system for its security. Embodiments of the present Detailed Description also enable a sandboxed environment, such as those described in U.S. application Ser. No. 12\/834,895 (\u201cULTRA-LOW COST SANDBOXING FOR APPLICATION APPLIANCES\u201d), to be executed within an UMHPIC.","Embodiments described in the present Detailed Description include an UMHPIC-aware platform adaptation layer (U-PAL) that resides partially inside an UMHPIC and partially in the outside execution environment. The U-PAL facilitates system resource request interactions between an application executing in the UMHPIC and a host platform executing outside of the UMHPIC. And, as part of the facilitating, one or more security-relevant actions are performed. The security-relevant actions, among other things, allow the application to utilize the host platform for access to resources even though the host platform executes outside of the UMHPIC, and is therefore \u201cuntrusted\u201d code.","In embodiments, applications include a trusted library operating system inside their UMHPIC; most operating system requests are fulfilled by the library operating system, which invokes services of the U-PAL as needed; the U-PAL in turn invokes services from the host operating system. The trusted portion of the U-PAL (i.e., the portion that resides and executes inside the UMHPIC) presents a service interface to the application executing within the UMHPIC. The untrusted portion of the U-PAL (i.e., the portion that resides and executes in user mode outside of the UMHPIC) interfaces with the operating system, such as through a platform adaptation layer (PAL) provided by the host computer system.","The U-PAL includes a secure services component and a thunking component. The secure services component executes within the UMHPIC, and is therefore a \u201ctrusted\u201d component from the perspective of the application. The secure services component verifies that all system services, including thread scheduling, file system interactions, and resource allocations are handled properly on behalf of the unmodified application thereby allowing for an untrusted host operating system. The thunking component includes both a trusted portion that resides inside the UMHPIC and an untrusted portion that executes in user mode outside of the UMHPIC. The thunking component provides the trusted portion of the U-PAL, including the secure services component, with access to host operating system functions that execute outside of the UMHPIC. The thunking component and the secure services component together allow an unmodified application, such as an application packaged with a library OS, to execute within an UMHPIC.","The processes, systems, and devices described herein may be implemented in a number of ways. Example implementations are provided below with reference to the following figures.","Example Environment for Executing an Unmodified Application in an UMHPIC",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":"100"},"System  includes a security-enabled processor  configured to instantiate a secure execution environment, including an UMHPIC . The UMHPIC  resides in a protected memory area within user-mode memory  or memory . Except through specific entry and exit gates provided by the security-enabled processor  that allow the code executing on the UMHPIC  to transfer execution and data in and out of the UMHPIC , the code and data stored in the UMHPIC  is inaccessible to code outside of the UMHPIC .","Threads exit the UMHPIC  to return to the unprotected memory through exit gates. Exit gates may be called directly, such as through a call instruction, or indirectly, such as through a processor exception. The UMHPIC  may be protected by encryption mechanisms; for example, the security-enabled processor  is configured to encrypt on write operations to the UMHPIC  and decrypt on read operations. Furthermore, the UMHPIC  can be tracked with a cryptographic hash (either inline or out of band) so that the security-enabled processor  can verify on read operations that the memory has not been altered. In other embodiments, the memory space that the UMHPIC  resides in might be on the same chip of the security-enabled processor , and the memory space may be segregated so that the security-enabled processor  can access it when execution enters an entry gate. In various embodiments, the security-enabled processor  may be implemented within a single chip, such as a system-on-chip (SOC), or it may be implemented across a processor and additional chipsets of system .","An application  executes within the UMHPIC . That is, the security-enabled processor  executes the application  in such a way that, except through well-defined entry and exit gates described in more detail below, prevents code executing outside of the UMHPIC , including untrusted code  or the host operating system (OS) , from tampering with or snooping on code or data inside the UMHPIC . For example, a thread executing code stored outside the UMHPIC  cannot access data stored in the UMHPIC . The security-enabled processor  might protect code and data within the UMHPIC for snooping or tampering through various techniques including, but not limited to, encrypting data as it leaves the processor, signing data to detect external tampering, blocking direct memory access (DMA) operations from I\/O devices, separating caches, or using memory stored directly on the processor. This provides protection against untrusted code\u2014that is, any code that runs outside of the UMHPIC \u2014snooping on or tampering with contents of the UMHPIC .","Untrusted code  executes in user mode outside of the UMHPIC. The security-enabled processor  executes the untrusted code  in a way that prevents it from accessing code and data within the UMHPIC . Multiple UMHPICs are possible, and the security-enabled processor  may execute the untrusted code  in another UMHPIC. Even if executed in another UMHPIC, the untrusted code  is \u201cuntrusted\u201d from the perspective of the UMHPIC . In some security-enabled processors, UMHPICs may be nested: an inner UMPHIC is protected from code in outer UMHPIC and all code outside the outer UMHPIC. In the case of nested UMHPICs, the code of the outer UMHPIC is untrusted by the inner UMHPIC; code and data of the inner UMHPIC cannot be tampered with or snooped on by code of the outer UMHPIC.","An initialization process\u2014such as is described in related U.S. patent application Ser. No. 13\/323,465, filed concurrently\u2014may be used to initialize the UMHPIC  in a way that provides a client system with confidence that the UMHPIC  is established with the client's trusted code and data, and with no untrusted code or data, thereby providing the client system with confidence that the application  properly executes on system .","The UMHPIC  may be instantiated in the context of a hosted computing service, such as a \u201ccloud computing\u201d service, in which a client system initializes the UMHPIC  in order to execute the application  securely on the cloud computing service. Thus, from the perspective of the client system, all portions of system  outside of the UMHPIC  and the security-enabled processor  are \u201cuntrusted.\u201d Embodiments of the present application enable the application  to execute within the UMHPIC and still access operating system functions from an \u201cuntrusted\u201d host operating system, such as the host OS .","In various embodiments, the application  includes one or more subcomponents. In common embodiments, one or more of the subcomponents of the application include a library operating system (OS) , which may be the same as or similar to the isolated OS subsystems described in U.S. patent application Ser. No. 12\/834,895, filed Jul. 13, 2010 and entitled \u201cULTRA-LOW COST SANDBOXING FOR APPLICATION APPLIANCES. U.S. patent application Ser. No. 12\/834,895 describes \u201capplication sandboxes\u201d configured to run various operating system elements (sometimes referred to as a \u201clibrary OS\u201d) within an isolated application process separate from other elements of the operating system. The application sandboxes described in U.S. patent application Ser. No. 12\/834,895, protect the host operating system from tampering or snooping by the application, but do not necessarily protect the application from tampering or snooping by the host operating system. The isolated OS subsystem described in U.S. patent application Ser. No. 12\/834,895 provides an application with a rich set of APIs in order to directly provide operating system functions that the application is designed to use. The isolated OS subsystem also utilizes a small subset of application programming interfaces (APIs) to communicate with a host operating system, via an operating system platform adaptation layer (PAL), in order to provide the application with basic computation services. The Host PAL  may be the same as, or similar to, the host operating system PAL described in U.S. patent application Ser. No. 12\/834,895. The host PAL  may in embodiments include a trap instruction. In alternative embodiments, the host PAL  includes libraries that create high-level abstractions from low-level host OS  abstractions. Collectively, the host PAL  (if present) and host OS  are included in a host platform .","The library OS  may be configured to provide the application  with a first subset of operating system services (such as, in one non-limiting example, the \u201crich\u201d set of services described above), and to call the host OS  to provide the application  with a second subset of operating system services (such as, in one non-limiting example, the basic computational services described above). Embodiments of the present disclosure are not limited to executing applications, such as the application , that are packaged with a library OS such as library OS . The host PAL  and\/or the library OS  are omitted in various embodiments. In at least one embodiment, the library OS  is omitted, and the application  consists of a user-mode processor emulator executing a virtual machine (which in turn may consist of a \u201cguest\u201d operating system and applications).","An UMHPIC-aware PAL (U-PAL)  resides partly within the UMHPIC , and partly in the untrusted portion of user-mode memory . In various embodiments, the application  may be unmodified for execution inside of the UMHPIC , and the application , in its unmodified version, is configured to interface directly with the host platform  via a service interface provided by the host platform . The U-PAL  therefore facilitates system resource request interactions between the application  executing in the UMHPIC and one or more components of a host platform  executing outside of the UMHPIC. And, a secure services component  of the U-PAL  performs one or more security-relevant actions. The U-PAL  provides the application  with a service interface, within the UMHPIC , that emulates the interface provided by the host platform . The portion of the U-PAL  that resides outside of the UMHPIC  is configured to interface with the host OS , such as through the host PAL  via a platform interface. In alternative embodiments, the host PAL  may be a sub-component of the U-PAL . In still other embodiments, such as those that omit the library OS  and the host PAL , the U-PAL  emulates all or part of the service interface provided by the host OS . For example, the U-PAL  may provide a partial or full set of rich APIs that the application  is configured to use.","The U-PAL  includes the secure services component  and a thunking component . The secure services component  resides entirely within the UMHPIC  and performs the security-relevant actions. The secure services component performs security-relevant actions such as validating handles returned by the host platform, validating memory allocations, ensuring that thread scheduling adheres to expected semantics (e.g. mutual exclusion primitives indeed provide mutual exclusion), validating the results of various calls made to the host platform , updating data structures necessary for such validations, encrypting data, protecting the integrity of data by means of digital signatures or message authentication codes, protecting data from replay attacks, securely providing random numbers. The application  may be unmodified, and not designed to execute within the UMHPIC  on an untrusted computing system. Thus, the application  may have been developed with the assumption that the computing system on which it runs is trusted. Thus, the application  is not necessarily configured to validate that the host OS  behaves properly. But, because the computing system  may be untrusted from the perspective of the UMHPIC , the host platform  is not assumed to behave properly. Thus, the secure services component  performs security-relevant actions that result in a virtual platform that behaves in expected and proper ways.","In one non-limiting example, the secure services component  validates that interface handles returned by the host platform  in response to API calls for device access made by the application  and\/or the library OS  are proper. For example, it may determine whether the interface handles are duplicates of interface handles previously provided to the application  and\/or the library OS . Such interface handles may be used to access devices, such as I\/O devices, networking devices, or other types of devices. In another non-limiting example, the secure services component  validates that memory allocations returned by the host platform  are proper. For example, it may ensure that a new memory allocation does not overlap with memory previously allocated to the application . Such overlapping memory allocation could cause the application  to unexpectedly overwrite its own data, thereby potentially causing it to behave in unpredictable ways.","In another non-limiting example, the secure services component  is configured to protect data to be written to a file on a file system of the host platform . This protection may include encryption, adding digital signatures or messages authentication codes and\/or measures to protect against replay attacks, such as those described in U.S. Pat. No. 7,421,579, issued to England et al. on Sep. 2, 2008 and entitled \u201cMultiplexing a secure counter to implement second level secure counters\u201d; U.S. Pat. No. 7,065,607, issued to England et al. on Jun. 20, 2006 and entitled \u201cSystem and method for implementing a counter\u201d; and as described in \u201cMemoir: Practical State Continuity for Protected Modules\u201d, by Bryan Parno, Jacob R. Lorch, John R. Douceur, James Mickens, and Jonathan M. McCune, and published in Proceedings of the IEEE Symposium on Security and Privacy, IEEE, May 2011. The application  itself may be configured to write data to a file system in an unprotected form because the application , as noted above, may be developed with the assumption that the computing system on which it runs is trusted. Thus, when the application  and\/or the library OS  issue an API call to write data to the file system, the secure services component  protects the data on behalf of the application  before passing the protected data in a call to the host platform . The secure services component is also configured to unprotect and\/or verify data read from the host platform, since the application  may not be configured to receive protected data from the file system and since it may not verify digital signatures or message authentication codes and may not check for replay attacks. In another embodiment, the secure services component  may implement all file system accesses using a protected virtual file system, possibly using encryption, digital signatures, message authentication codes and or measures to prevent replay attacks; avoiding the exposure of trusted file names and metadata to the host platform .","The application  may be configured to request thread scheduling services from the host platform . It would be possible, however, for an untrusted misbehaving host platform  to schedule threads in such a way as to cause the application  to execute incorrectly. For example, if one thread of the application  acquires a lock, a misbehaving operating system could allow another thread to concurrently acquire the same lock, thereby causing the threads to operate concurrently and leading to unpredictable results. Thus the secure services component  may include a user-mode thread scheduler configured to handle thread scheduling on behalf of the application  and\/or the library OS . Such a user mode thread scheduler may not be required, for example, if the application  and the library OS  have only one thread of execution. If the application  and\/or the library OS  invoke a call for host functionality related to thread scheduling, the secure services component  may determine to handle the thread scheduling call itself, rather than pass it to the host platform .","The thunking component  of the U-PAL  provides the ability to pass API calls from the secure services component  to the host platform . A trusted portion of the thunking component, the trusted thunking component , executes inside the UMHPIC  and is configured to marshal parameters associated with calls to the host platform , invoke an exit gate provided by the security-enabled processor , and to pass the marshaled parameters out to an untrusted thunking component . Thus, the trusted thunking component  acts as a transport for calls from the secure services component  to the host platform .","The trusted thunking component  also receives execution requests from the host platform  and results from the calls made to the host platform , via an entry gate invoked by the untrusted thunking component . The trusted thunking component  unmarshals the various parameters associated with those execution requests and results, and passes them to the secure services component  for validation.","The untrusted thunking component , also part of the thunking component , executes outside of the UMHPIC . It is configured to unmarshal the parameters passed to it by trusted thunking component  via the exit gate, and to make corresponding calls to the host platform  (such as invoking operating system calls to the host OS  through the host PAL ) on behalf of the UMHPIC . The untrusted thunking component  receives from the host platform  execution requests and results from system calls, marshals the corresponding parameters for the execution requests and results, invokes an entry gate, and passes such marshaled components to the trusted thunking component . Thus, the untrusted thunking component  acts as an entry point for results of calls and execution requests from the host platform .","In a common embodiment, the untrusted thunking component  executes in user-mode outside of the UMHPIC , and may be invoked by the trusted thunking component  through an explicit exit gate. In an alternative embodiment, the untrusted thunking component  executes as a subcomponent of the host platform , and may be invoked from a system call or trap instruction issued within the trusted thunking component .","The thunking component  is configured to invoke the entry and exit functions of the security-enabled processor , thereby allowing it to pass parameters and execution between the UMHPIC  and the outside execution environment and vice versa. As noted elsewhere, the application  may be unmodified and may be unaware that it executes within the UMHPIC , and therefore may not be configured to invoke the exit gates of the security-enabled processor  in order to pass calls out to the host platform . Likewise, the host PAL  may also be unmodified to provide support for an application executing in the UMHPIC , and therefore may not be configured to invoke the entry gates of the security-enabled processor  in order to pass execution requests and the results from calls back to the application . Thus, the thunking component  provides the ability to invoke the entry and exit gates of the security-enabled processor  on behalf of the application  and the host PAL . The secure services component  provides the ability to handle thread execution, protect application data written to untrusted storage and validate host platform  behavior on behalf of the application  and takes the corresponding security-relevant actions. Together, the thunking component  and the secure services component  allow the application  to execute within the UMHPIC  while still making use of system resources provided by the \u201cuntrusted\u201d host OS .","Example Computing Device for Providing a Secure Execution Environment",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2","b":"200"},"In one example configuration, the computing system  comprises one or more processors  and memory . The processors  include one or more security-enabled processors that are the same as or similar to security-enabled processor . The processors  may include one or more general-purpose or special-purpose processors other than a security-enabled processor. The computing system  may also contain communication connection(s)  that allow communications with various other systems. The computing system  may also include one or more input devices , such as a keyboard, mouse, pen, voice input device, touch input device, etc., and one or more output devices , such as a display, speakers, printer, etc. coupled communicatively to the processor(s)  and memory .","Memory  may store program instructions that are loadable and executable on the processor(s) , as well as data generated during execution of, and\/or usable in conjunction with, these programs. In the illustrated example, memory  stores an operating system , which provides basic system functionality of the computing system  and, among other things, provides for operation of the other programs and modules of the computing system . The operating system  may be the same as or similar to the host OS .","Portions of memory  may be included within an UMHPIC as is described elsewhere within this Detailed Description. Memory  may be divided between memory on the same physical chip as the processor and memory on other chips. Memory  includes a U-PAL , which may be the same as or similar to the U-PAL . Memory  includes an application , which may be the same as or similar to the application . The application  may include a library OS as described elsewhere within this Detailed Description configured to interface with a host PAL , which may be the same as or similar to the host PAL . Memory  includes untrusted code , which may be the same as or similar to untrusted code .","Example Operations for Execution of an Application in an UMHPIC",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 3","b":["300","110","104","302"]},"At , a U-PAL, such as U-PAL , facilitates a resource allocation request interaction between the application executing inside the UMHPIC and a host platform executing outside of the UMHPIC. The facilitating may include passing requests from the application, and results from the host platform, out of and into the UMHPIC, such as is described elsewhere within this Detailed Description. The facilitating may include invoking the entry and exit gates and marshaling parameters as are described elsewhere within this Detailed Description. The facilitating may include passing system resource requests to, and receiving associated results from, a host platform.","At , a secure services component of the U-PAL, such as the secure services component , performs, as part of the facilitating, a security-relevant action. The security-relevant action may include, in various embodiments, encrypting data from the application associated with the system service request interaction; decrypting data associated with the system service request interaction for the application; maintaining a bookkeeping data structure to store information regarding the system service request interaction; verifying the correctness of a resource allocation result that is provided by the host platform as part of the system service request interaction; checking for overlapping memory allocations; determining whether the device handle is a duplicate device handle; performing thread scheduling services, and so forth as described elsewhere within this Detailed Description. Other security-relevant actions may be performed without departing from the scope of the present disclosure.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 4","b":["400","130","401"]},"At , an application executing in an UMHPIC issues a call for a system service. The UMHPIC is provided by a security-enabled processor, such as the security-enabled processor . The security-enabled processor provides at least one exit gate for passing execution out of the UMHPIC and at least one entry gate for passing execution into the UMHPIC. The call may come from any subcomponent of the application including a library OS, such as the library OS , and the application and any subcomponents, including the library OS, may be unmodified to execute within the UMHPIC and may have no native capability to transfer execution outside of the UMHPIC.","At , a secure services component of a U-PAL, such as the secure services component  of the U-PAL , receives the call from the application. The secure services component executes within the UMHPIC.","At , the U-PAL may perform operations to cloak data in call parameters before they are sent to the host platform. For example, the U-PAL may encrypt data that will be written to persistent storage by the host platform.","At , a trusted thunking component of a U-PAL, such as the trusted thunking component  of the U-PAL , marshals the parameters of the call. For some parameters, such as for scalar values, the marshaling operation may be a null operation. For other parameters, the marshaling operation may be more complex. For example, if the call is one to write a buffer to disk, the trusted thunking component may allocate a temporary buffer in unprotected memory outside of the protected memory area, copy the contents from the buffer in the protected memory area to the temporary buffer in unprotected memory, and update the buffer pointer in the call parameters to point to the temporary buffer. In another example, a parameter may include a pointer-rich data structure, and the trusted thunking component may serialize it into a temporary buffer.","At , the trusted thunking component invokes an exit gate of the UMHPIC provided by the security-enabled processor to transfer execution to code of an untrusted thunking component, such as the untrusted thunking component  of the U-PAL , executing outside the UMHPIC.","At , the untrusted thunking component unmarshals the call parameters. For some parameters, such as for scalar values, the unmarshaling operation may be a null operation. For other parameters, the unmarshaling operation may be more complex. For example, the unmarshaling operation may deserialize a pointer-rich data structure. Various embodiments may include optimizations and\/or extra coordination between an untrusted thunking component and a trusted thunking component to improve performance. Various optimizations for marshaling and unmarshaling may be used.","At , the untrusted thunking component issues the call to a host platform, such as the host platform . At , the host platform fulfills the system service requested.","At , when execution returns from the host platform to the untrusted thunking component, the untrusted component marshals the results of the call. For some results, such as for scalar values, the marshaling operation may be a null operation. For other results, the marshaling operation may be more complex. For example, the marshaling operation may serialize a pointer-rich data structure.","At , the untrusted thunking component invokes an entry gate of the UMHPIC provided by the security-enabled processor to transfer execution to code of the trusted thunking component executing inside the UMHPIC.","At , the trusted thunking component unmarshals the results of the call. For some results, such as for scalar values, the unmarshaling operation may be a null operation. For other results, the unmarshaling operation may be more complex. For example, if the call is one to read a buffer from disk, the trusted thunking component may copy the data from a temporary buffer in unprotected memory to a buffer in the protected memory area, and update the buffer pointer in the result parameters to point to the final buffer. In another example, a parameter may include a pointer-rich data structure, and the trusted thunking component may deserialize it.","At , the secure services component may decrypt data read from storage provided by the host platform and may also verify digital signatures or message authentication codes to verify the integrity of data. It may also perform verifications designed to protect against replay attacks. These steps may also be applied, for example, to virtual memory pages as they are read from page files on a hard disk. As noted elsewhere within this Detailed Description, the secure services component protects data written to the host storage system by the application executing in the UMHPIC. This is because the host platform and its storage services, including any file system provided by the host platform, are untrusted by applications executing in the UMHPIC. But the application itself may be unmodified to execute in the UMHPIC, and may therefore be configured to write data to a file system without protecting it. Thus, data read from the file system is decrypted and\/or verified by the secure services component because the application is not configured to receive protected data, and may be unequipped to decrypt and verify it. In embodiments, the decryption step  may be combined with the unmarshaling step  as an optimization.","At , the secure services component verifies the returned results against bookkeeping data structures to verify that the results are consistent and trustworthy. In embodiments, the call might have been a request for a system resource or service, and the secure services component verifies that the result returned in response to the system request is valid for the requested resource or service. The system resource may be, in various embodiments, an allocated memory resource, a networking resource, an input\/output resource, or other system resource.","The secure services component may utilize a bookkeeping data structure to verify output of any untrusted services from the host platform. For example, the bookkeeping data structure may enable the secure services component to validate that interface handles and memory allocations from the host platform are proper. In embodiments where the result is a resource or interface handle, the secure services component verifies that the returned resource or interface handle is not a duplicate of a previously provided resource handle in order to avoid handle replay attacks. In embodiments where the result is an indication of memory allocated to the application, the secure services component verifies that the allocated memory is not previously allocated to the application (which may cause the application to overwrite its own data and behave in unexpected ways), is accessible to the application, and does not lie within a reserved or invalid address range. In common embodiments, the bookkeeping data structures include structures for storing data related to one or more of memory allocations, resource handles, and thread identifiers.","At , if verification against bookkeeping data structures of the results of the call determines that the results are valid and therefore may be trusted, then execution proceeds.","At , if the result of the verification at  includes that one or more of the results are invalid, then the secure services component returns a failure result to the application. In some embodiments, the failure result is an error code relevant to that service request; for example, a well-known \u201cdisk read error\u201d result on a disk read service request. In some embodiments, the failure may be delivered to the application as a catastrophic failure that causes the application to terminate immediately.","At , if the result of the verification at  includes that the results are valid, the secure services component updates the bookkeeping data structures as appropriate to the type of service request. For example, if the service request was to allocate a new region of memory, the secure services component may update a table of memory allocations; the secure services component may also issues instructions to the security-enabled processor to add the new region of memory to the protected memory area of the UMPHIC.","At , the secure services component provides the successful results of the call to the application, which continues its execution.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":["500","130","502","128","114","118"]},"At , the untrusted thunking component marshals the parameters that accompany the requests and notifications. That is, the untrusted thunking component transforms the parameters to make them suitable for passing into an UMHPIC, such as the UMHPIC , via an entry gate to a process executing inside of the UMHPIC.","At , the untrusted thunking component invokes an entry gate provided by the security-enabled processor to pass the marshaled parameters associated with the requests and the notifications to the UMHPIC. And at , a trusted thunking component executing inside the UMHPIC, such as the trusted thunking component , receives the marshaled parameters via the entry gate.","At , the trusted thunking component unmarshals the parameters received from the untrusted thunking layer. Unmarshaling the parameters involves transforming the marshaled parameters to re-create the execution request or the asynchronous notification. At , the trusted thunking component passes the unmarshaled parameters to a secure services component executing inside the UMHPIC, such as the secure services component .","At , the secure services component performs security-relevant actions. These actions may include verifying that the execution request or asynchronous notification provided by the host platform is valid.","At , the secure services component passes the execution request or asynchronous notification to the application and\/or a library OS executing in the UMHPIC.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIGS. 3-5"},"Computer-Readable Media","Depending on the configuration and type of computing device used, memory  of the computing system  in  may include volatile memory (such as random access memory (RAM)) and\/or non-volatile memory (such as read-only memory (ROM), flash memory, etc.). Memory  may also include additional removable storage and\/or non-removable storage including, but not limited to, flash memory, magnetic storage, optical storage, and\/or tape storage that may provide non-volatile storage of computer-readable instructions, data structures, program modules, and other data for computing system .","Memory  is an example of computer-readable media. Computer-readable media includes at least two types of computer-readable media, namely computer storage media and communications media.","Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any process or technology for storage of information such as computer-readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, phase change memory (PRAM), static random-access memory (SRAM), dynamic random-access memory (DRAM), other types of random-access memory (RAM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM), flash memory or other memory technology, compact disk read-only memory (CD-ROM), digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other non-transmission medium that can be used to store information for access by a computing device.","In contrast, communication media may embody computer-readable instructions, data structures, program modules, or other data in a modulated data signal, such as a carrier wave, or other transmission mechanism. As defined herein, computer storage media does not include communication media.","Although the disclosure uses language that is specific to structural features and\/or methodological acts, the invention is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as illustrative forms of implementing the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The Detailed Description is set forth with reference to the accompanying figures. In the figures, the left-most digit(s) of a reference number identifies the figure in which the reference number first appears. The use of the same reference numbers in different figures indicates similar or identical items.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
