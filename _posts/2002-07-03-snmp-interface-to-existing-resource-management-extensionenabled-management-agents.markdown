---
title: SNMP interface to existing resource management extension-enabled management agents
abstract: A method of adding a simple network management protocol (SNMP) interface to an existing resource management extension-enabled management agent without modifying the management agent can include reading a management information base definition of the management agent and creating a static mapping of SNMP object identifiers to management software components of the management agent using the management information base definition. During operation of the management agent, dynamic operating information for the management software components of the management agent can be determined. The static mapping can be updated with the dynamic operating information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07085851&OS=07085851&RS=07085851
owner: International Business Machines Corporation
number: 07085851
owner_city: Armonk
owner_country: US
publication_date: 20020703
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","This invention relates to the field of resource management, and more particularly, to interfacing network management systems with management agents.","2. Description of the Related Art","Management agents serve as an interface providing a layer of isolation between management systems and managed resources such as business applications, devices, or software implementations of services or policies. Management agents can be implemented using resource management extensions to programming languages. Accordingly, to manage resources via a particular resource management extension architecture, the resource must be enabled in accordance with the specification of the management agent with which the resource is to communicate.","Although resource management extensions exist for various programming languages, one example of a resource management extension architecture is the Java Management Extension (JMX) architecture. JMX\u00ae, defined in the JMX specification, defines an architecture, design patterns, application programming interfaces (APIs), and services for application and network management using the Java programming language. The JMX specification is a well-known set of specifications and development tools for managing Java environments and building management solutions. The JMX specification, which is incorporated herein by reference, has been defined in the document , v1.1 (March 2002), published by Sun Microsystems, Inc. of Palo Alto, Calif.","Although resource management extension architectures continue to gain favor as industry standards, a limited number of such architectures are in operation. Many legacy systems, for example Unix-based products, rely upon Simple Network Management Protocol (SNMP). Presently, no standardized solution exists to provide interoperability between resource management solutions such as JMX and legacy systems using SNMP. In consequence, there is no way to provide a unified management console view of a mixed SNMP legacy and resource management extension-enabled management agent without making significant modifications to the management agent.","Conventional interface solutions between legacy SNMP systems and management agents typically have been implemented as a standalone systems which are not integrated into the management agent. As such, the standalone solutions cannot take advantage of the full range of features provided by the management agent. For example, standalone solutions cannot take advantage of notifications.","Another disadvantage of conventional interface solutions is that significant recoding and\/or rebuilding of portions of the management agent is required. That is, to implement a conventional interface, developers must re-build management software components of the management agent using tools provided by the solution package to ensure that the resulting management software components have the requisite knowledge of the SNMP management system. To provide another example, conventional solutions for interfacing a JMX management agent with an SNMP system require developers to generate the management software components or MBeans using a tool provided by the interface solution so that the resulting MBeans have knowledge of the SNMP system.","Such conventional solutions are implemented from the perspective of the SNMP system rather than from the perspective of the management agent. As a result, conventional solutions cannot be applied to existing resource management extension-enabled products, such as JMX-enabled products, without rebuilding and\/or recoding the software management components of the management agent.","The invention disclosed herein provides a solution for interfacing a management agent with a Simple Network Management Protocol (SNMP) based management system. According to the present invention, existing management agent implementations which utilize resource management extension technology can be provided with SNMP support without having to implement code changes within the management agent. In particular, a protocol adapter can be added to the management agent. The protocol adapter does not require any knowledge of the SNMP protocol relied upon by the management system. Moreover, method disclosed herein can be performed automatically.","One aspect of the present invention can include a method of adding an SNMP interface to an existing resource management extension-enabled management agent without having to modify the management agent. For example, the management agent can be a Java-based management agent implemented using a resource management extension technology such as Java Management Extensions (JMX). Accordingly, an SNMP interface can be added to an existing JMX implementation of a management agent without modifying the management agent. The method can include reading a management information base definition of the management agent. A static mapping of the SNMP object identifiers to the management software components of the management agent can be created using the management information base definition.","During operation of the management agent, dynamic operating information for the management software components of the management agent can be determined. The dynamic operating information can be determined using reflection techniques which are available in various object oriented programming languages such as Java. For example, a number of instances of each SNMP object identifier can be determined and the method signatures can be determined for validation against the management information base definition. The static mapping can be updated with the dynamic operating information. Notably, the mapping can be continually or periodically updated with dynamic operating information as the management agent continues to operate. An index can be appended to each identified instance of an SNMP object identifier to uniquely reference the identified instance.","The method further can include receiving an SNMP object identifier request and converting the SNMP object identifier request to a request compliant with the management agent using the updated mapping. For example, an SNMP object identifier can be identified from the request and an associated management software component name and attribute can be determined for the SNMP object identifier from the updated mapping. Data for fulfilling the received SNMP object identifier request can be determined, for example via a management agent query to a managed resource. Accordingly, using the updated mapping, an SNMP response to the SNMP object identifier request can be built specifying the determined data. The SNMP response can be sent to an SNMP management system. For example, an SNMP trap can be sent responsive to receiving a resource management extension notification. The method can include receiving an SNMP request over a first User Datagram Protocol\/Internet Protocol (UDP\/IP) port and sending an SNMP response over a second UDP\/IP port.","The invention disclosed herein provides a solution for interfacing a management agent with a Simple Network Management Protocol (SNMP) based management system. According to the present invention, existing management agent implementations which utilize resource management extension technology can be provided with SNMP support without having to implement code changes within the management agent. In particular, a protocol adapter can be added to the management agent which does not require any knowledge of the SNMP protocol relied upon by the management system.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","105","110","115","115"]},"The management agent  can be any of a variety of resource management extension-enabled programming language architectures which serve to isolate the managed resources  of an information technology system from the SNMP management system . The management agent  can function as a management software component server including management software components . For example, according to one embodiment of the present invention, the management agent can be implemented using the Java Management Extension (JMX) architecture. Accordingly, the management agent can be a JMX management bean or MBean server.","The management agent  can include an adapter  for communicating with the SNMP management system . It should be appreciated that various resource management extension architectures, including JMX, define a mechanism for adding protocols adapters. Accordingly, the adapter  can be a plug-in protocol adapter serving as an interface between the management agent  and the SNMP management system . The adapter  can include mapping data . The mapping data  can be developed using a combination of a static mapping procedure which is updated using a dynamic procedure. In any case, the mapping data  can specify relationships among SNMP object identifiers (OIDs) and management software components of the management agent .","The present invention can generate mapping data  for the adapter  from a user generated management information base (MIB). The MIB must be created to manage resources via an SNMP management system. The user can create and validate, or compile, the MIB definition with any of a variety of commercially available tools using Abstract Syntax Notation number One (ASN.1). The MIB definition provides an SNMP representation of the management agent. The resulting MIB definition is used by the management system (or console of the management system) to interpret data from the management agent and traverse the hierarchical MIB definition tree. For example, the MIB definition can provide logical names for object identifiers of the SNMP management system.","The MIB definition can be created such that a node in the MIB definition tree is defined for each management software component to be managed. The logical name of the node can be the classname of the management software component with a descriptor appended to the name. Entries beneath the node in the tree belong to the defined management software component. For example, in a JMX implementation, a node labeled \u201cPersonMBean\u201d represents the JMX Person MBean, and all nodes below the PersonMBean object represent object instances of that object. Under each object instance are the methods and attributes. The attribute and method names defined in the MIB definition also must match those attributes and methods exposed in the management software component. Thus, if the name attribute of a person is referred to as \u201cName\u201d in the MIB definition, the name attribute also should be referenced as \u201cName\u201d in the management software component.","Attribute \u201cGet\u201d and \u201cSet\u201d capabilities can be made to match between the protocols. For example, within a JMX implementation, if there is a getter and not a setter in the JMX MBean for a specific attribute, the SNMP MIB definition can indicate this with a read-only attribute. The name given to trap nodes in the MIB definition can be made to match the JMX Event \u201ctype\u201d. Accordingly, a mapping for every field in the notification can be represented as an SNMP trap parameter in the user defined MIB for the management agent system.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["200","200"]},"In step , the MIB definition can be read. In step , a determination can be made as to whether another node is to be processed. If so, the method can continue to step . If not, the method continues to step  where the object identifier to management software component mapping data can be written to a configuration file. Continuing with step , the current node can be parsed. For example, from the node, the object identifier, the logical name of the management software component, as well as the parent information can be determined. In step , a determination can be made as to whether the logical name has an extension. For example, referring to a JMX-enabled management agent, a determination can be made as to whether the logical name has an MBean extension. If so, the management software component name can be used for entries located beneath the current node. If no extension is associated with the identified logical name, a line of the mapping table can be constructed in step . The method can repeat as necessary to process further nodes.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 1"],"b":["300","300","300","305","310"]},"As indicated by table entry , an SNMP trap can be sent upon a director attribute change event. Management extension events, (i.e. JMX events) can be sent to the console as SNMP traps. For example, when a management extension event is received, the event can be converted into an SNMP trap and then sent out to the console.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["400","405","410","415"]},"The dynamic mapping can begin in step  where the SNMP adapter can obtain operational information regarding the management software components of the management agent. For example, the SNMP adapter can utilize reflection techniques to determine the number of instances of object identifiers which can be indicated as entries in the mapping configuration file, the method signatures for validation against the MIB definition, as well as which notifications are supported. In step  the SNMP adapter can add the dynamically determined operational information to the mapping configuration file. Accordingly, a combination of static definition and dynamic discovery can be used to build an in memory registry of SNMP object identifiers to management software components for any resource management extension-enabled agent. In step , the SNMP adapter can begin operation using ports for SNMP messages. For example, the SNMP adapter can listen to SNMP requests on one User Datagram Protocol\/Internet Protocol (UDP\/IP) port and send responses and traps\/events on another UDP\/IP port.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 1"],"b":["500","500","500"]},"For example, as shown in , the SNMP object identifier for the \u201cName\u201d attribute of the \u201cPerson\u201d management software component is 1.2.6.999.1.1.1.2. The table entry for the \u201cName\u201d attribute of the \u201cJane Doe\u201d object instance of the \u201cPerson\u201d management software component is indicated by adding a number one (1) to the SNMP object identifier, yielding an SNMP object identifier of 1.2.6.999.1.1.1.2.1. As shown, each attribute and\/or method associated with the \u201cJane Doe\u201d management software component as been assigned an index of one (1). The next instance of the \u201cPerson\u201d management software component corresponding to \u201cJohn Doe\u201d has been assigned an index of two (2). The SNMP console can disregard which instance is assigned to a particular index number. Notably, as one instance of the \u201cCompany\u201d management software component is listed in the table , an index of zero (0) has been added to the SNMP object identifier index.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 6","b":["600","605","610"]},"Accordingly, in step , the SNMP adapter can determine the object name and attribute name from the mapping data. In step , the SNMP adapter obtains the value \u201cJane Doe\u201d for the name attribute of the management software component of the management agent. For example, within a JMX-enabled management agent, the SNMP adapter can get the value \u201cJane Doe\u201d for the indicated MBean name attribute from the MBean Server. In particular, the SNMP \u201cGetRequest\u201d can be translated into a \u201cgetName( )\u201d attribute query. In step  the SNMP adapter can build a return \u201cGetResponse\u201d PDU specifying the name \u201cJane Doe\u201d. In step , the SNMP management system console can receive the return \u201cGetResponse\u201d from the SNMP adapter. SNMP traps can be sent by the adapter when resource management extension notifications are received.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
