---
title: Automated modification integration and conflict resolution for software development
abstract: Proposed changes to a source code generated by client computing devices are integrated with a master version of the code resident on a server computing system remote from the client devices. The client devices connect to the server system over a network and transmit proposed changes to the server system, where resident integration/conflict resolution software automatically integrates the proposed changes into the master version. Any unresolved conflicts remaining after the automatic integration are identified and the server system automatically sends an email notifying the one or more client devices that there are unresolved conflicts. The email includes a link that enables a client device to launch a window on a monitor, and the client device user employs the window to transmit commands directly to and receive further communications directly from the integration/conflict resolution software in an interactive operation to attempt to manually resolve the conflicts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128805&OS=09128805&RS=09128805
owner: Microsoft Technology Licensing, LLC
number: 09128805
owner_city: Redmond
owner_country: US
publication_date: 20110504
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Current computer software code, such as source code for operating systems and multipurpose applications, is very complex and can comprise thousands of lines. In addition, common computer languages use routines and subroutines that are interrelated in complex ways to effect operations that the software is intended to perform. These factors and others make it a practical impossibility for one person to write such code, or even for a handful of people to collaborate as an organic whole to write it. Accordingly, it is common practice for a large number of individual software developers, usually working in plural teams, to be responsible for different functional parts (sometimes referred to as \u201cbranches\u201d) of the code.","One typical way this is handled is to have a master version of the entire code in a secure repository, such as a server computer, and to have the individuals and\/or teams developing the code work against this master version. The master version can be made available to the developers working on the code, such as by lodging a copy of it on the computer workstation of each developer. The developers' workstations have resident software that enables them to write new lines of code for addition to the master version or to revise existing lines of code. Developers, whether individuals or teams, can then transmit their proposed changes to the server computer on which the master version resides for possible incorporation into the master version (\u201creverse integration\u201d). The server computer includes resident software that automatically integrates proposed changes into the master version and also determines if the proposed changes would cause any conflicts either among the changes or with the existing master version of the code. (As used herein, the term \u201cconflict\u201d generally refers to a situation in which a particular line or section of code, when executed, would impair or prevent execution of other lines or sections of the code.) Many companies that develop software, particularly large organizations, use proprietary integration\/conflict resolution software, but there are commercially available versions of such software that are entirely suitable for the purpose, an example being the Team Foundation Server collaborative software development application available from Microsoft Corporation, the assignee of the present application.","In any case, if such software cannot automatically resolve a potential conflict that would be caused by integrating proposed changes\/additions into the master version of a code being developed, the various developers must collaborate to resolve the conflict. Once that is accomplished, the new master version is provided to the developers and\/or teams (\u201cforward integration\u201d) for further additions and\/or revisions as development of the code continues.","Although this paradigm has been used successfully to write code for numerous software products, it is fairly cumbersome and generally requires a large number of communications and\/or meetings among the various individual developers and teams to carry out periodic forward and reverse integrations to resolve potential conflicts that would result from proposed changes and thereby permit the code to be completed. As a result, development can be slowed while these communications take place so that all of the developers are working with the same master version of the source code at any one time.","One aspect of the subject matter discussed herein provides a method for integrating proposed changes to a source code with a master version of the source code, the proposed changes being generated by one or more users of client computing devices and the master version being resident on a server computing system remote from the client computing devices. In this method, proposed changes are transmitted from the client devices to the server system and the proposed changes are integrated into the master version using integration\/conflict resolution software resident on the server system. Any unresolved conflicts among the proposed changes and the master version after automatically integrating the proposed changes into the master version are identified and a communication from the server system to the client devices notifies them that there are unresolved conflicts and includes an executable portion, such as a link, that enables a user of a client device to launch an input\/output interface on a display component associated with the client device. The client device user employs the interface to transmit over the network commands from the client device to the integration\/conflict resolution software resident on the server system to attempt to resolve the unresolved conflicts. Also described and claimed herein are a client computing device that effects client-side method aspects and a server system that effects server-side method aspects.","By virtue of the method and apparatus disclosed and claimed herein, all of the teams developing branches of a particular source code can integrate proposed changes to a master version of the code resident on a server system and resolve conflicts without necessarily requiring extended collaboration among the team members. One of the important features of the resolution techniques described herein is the use of an input\/output interface, in preferred form a window launched on the display of the client device, via which the client device user directly interacts with integration\/conflict resolution software resident on the server system to attempt to resolve manually conflicts that could not be resolved automatically. Only if the individual developers (client device users) are unable to resolve conflicts in this way are they required to collaborate further, thus saving time and effort toward the final development of the source code.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","One skilled in the art will readily understand that the drawings are schematic in many respects, but nevertheless will find them sufficient, when taken with the detailed description that follows, to make and use the claimed subject matter.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 2","FIG. 3"],"b":["10","10","12","12","12","12","12","12","14","16","14","18","12","14","16"],"i":["a","b","c","n"]},"It will be appreciated that the architecture of the system  will depend largely on the size of the task at hand. A small software code writing project might utilize a LAN-based system in which all of the individual client workstations  are within a single facility. Alternatively, the system might utilize, say, a corporation-wide WAN-based architecture so that it can be used for software code development projects of various sizes and complexity. In addition, the system can be cloud-based, with different server computers performing different tasks in a fashion well known to those skilled in the art. Or the system can be any combination of these or other architectures now known or developed in the future. The salient point is that the principles of the integration techniques covered by the this discussion and the claims appended hereto is not confined to implementation using any particular system architecture.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 1"],"b":["12","100","102","104","102","106","100","16","100","108","16","108","16","18","108"]},"The computer  further includes a display component , such as a computer monitor, and an input component . In a typical implementation this component will comprise a conventional pointing device such as a mouse and a keyboard, although many other input components or apparatus could be used, such as a touch screen activated by a user's hand or a pen, voice commands, and the like. A typical operational paradigm for the computer  involves a graphical user interface that is displayed on the display component  under the control of the operating system module . A user interacts with the graphical user interface using the input component  to enter commands to the operating system module  to execute instructions that initiate various actions, such as accessing the network  via the network interface module , launching applications, and otherwise controlling the operation of the computer system .","As used in this description, the terms \u201ccomponent,\u201d \u201cmodule,\u201d \u201csystem,\u201d \u201capparatus,\u201d \u201cinterface,\u201d or the like are generally intended to refer to a computer-related entity or entities, either hardware, a combination of hardware and software, software, or software in execution, unless the context clearly indicates otherwise. For example, such a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program, and\/or a computer. By way of illustration, both an application running on a controller and the controller can be a component. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer (device) and\/or distributed between two or more computers (devices).","As used herein, a \u201ccomputer storage medium\u201d can be a volatile or non-volatile, removable or non-removable medium implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer","The computer  described here is meant to be only one example of an electronic device for effecting the integration\/conflict resolution methods described herein. It is intended that \u201celectronic device\u201d be considered broadly as including any such device (or any physical or logical element of another device, either standing alone or included in still other devices) that is configured for communication via one or more communication networks such as those described herein and that is responsive to user inputs. While the computer  will typically be implemented by a desktop computer familiar to those skilled in the art, other electronic devices may be adaptable to effect the methods to be described, examples of which electronic devices could include, but would not be limited to, mobile phones, personal digital assistants, smart phones, laptop and desktop computer systems of any configuration or implementation, personal media players, image or video capture\/playback devices, devices temporarily or permanently mounted in transportation equipment such as planes, trains, or wheeled vehicles, set-top boxes, game consoles, stereos, digital video recorders\/players, and televisions.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 1","FIG. 1"],"b":["14","200","202","204","200","206","16","206","108","100","204","16","18","206"]},"The server system  further includes an integration software module  that integrates changes\/additions to a source code compilation made via a workstation computer  with the master version of the source code. As noted above, an example of commercially available integration software is Microsoft Corporation's Team Foundation Server. The server system  further includes a communication module  that receives instructions from the client workstations , . . . , , and sends instructions to the workstations, over the network  (via the network interface modules  and ), executed by the instructions resident in the respective operating system modules  and . Among the functions of the communication module  is to generate emails to client workstation computers  and instructions for transmission to one or more client computers  to launch an integration interface window on the monitor , as described in more detail below.","It will be appreciated that the server system  is a schematic representation, and need not be implemented in a single device, nor does  depict all of the components of a server system that can be used to implement the methods described herein. For example, the integration software module can include a storage module on which the master version of the source code compilation is maintained, or the master version may be kept at a separate location in the cloud. Such an implementation could be used with a combination local area network having the client workstations connected with a local server, and the source code compilation resident in the cloud. In addition, other combinations and arrangements for implementing the server system  can likewise be employed to effect the subject matter described and claimed herein, and nothing in the present description of an embodiment of such a system should be taken as limiting the scope of the claims appended hereto.","Furthermore, the subject matter described and claimed herein may be implemented as a method, apparatus, or article of manufacture using standard programming and\/or engineering techniques to produce software, firmware, hardware, or any combination thereof to control a computer to implement the disclosed subject matter. The term \u201carticle of manufacture\u201d as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media. For example, computer readable media can include but are not limited to magnetic storage devices (e.g., hard disc, floppy disc, magnetic strips . . . ), optical discs (e.g., compact disc (CD), digital versatile disc (DVD) . . . ), smart cards, and flash memory devices (e.g., card, stick, key drive . . . ). Of course, those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 4","FIG. 3"],"b":["100","208","200","100","100","200"]},"Step S is a synchronization operation performed by the integration software module , to make all of the proposed changes received from all of the client computers  in the past 24 hours available for integration with the master version. The server operating system module  then runs the integration software, as represented by step S, which, as discussed above, integrates all of the proposed changes into the master version of the code being developed and attempts to automatically resolve any conflicts among the proposed changes and the master version or among the proposed changes themselves. In step S the presence or absence of conflicts is determined. If no conflicts exist after integration, the process proceeds to step S. in which the new master version is submitted for transmission to the client workstations (so-called \u201cforward integration\u201d) and for storage in readiness for the next reverse integration operation that will start with step S. Step S deems the reverse integration a success and sends emails to the client workstations indicating that a new master version of the code being developed is available.","If step S indicates the presence of conflicts that were not able to be automatically resolved, the process proceeds to step S, where the server system  initiates the conflict resolution process described in more detail below in connection with the flowchart depicted in . This involves setting up a networking protocol that will enable the various client workstations , comprising the computers , to communicate with the server system . This protocol enables the client computers  to share with the remote server system  communications (\u201cscripts\u201d) that provide commands to the server system operating system module . An example of such a protocol is Microsoft Corporation's Windows Communication Foundation application programming interface that supports distributed computing (in this case, among the various client workstations  and the server ) over the network . However, any protocol capable of enabling the exchange of user commands and responses between and among the workstations and the server will suffice. Once the network is set up in step S, the server automatically sends emails to client workstations to initiate conflict resolution as discussed in detail further below in connection with . In , the notation \u201cfile author\u201d refers to the author of proposed changes to a particular section or \u201cbranch\u201d of the code under development. \u201cBranch owner\u201d refers to the person in charge of developing that particular branch of the code. Several individual authors may be on a team that reports to a branch owner. There may be a further hierarchical organization, in which there are subbranches, in which case emails are preferably sent to everyone involved with the branch in question. In that way, those responsible for the branches and subbranches are made aware of conflicts that require resolution.","Step S represents the beginning of the conflict resolution process described in connection with . The integration software module  has generated a list of the conflicts that require resolution and removes each conflict from the list as it is resolved. The integration software is run to check the list periodically to determine if any conflicts remain. In the present embodiment, the list is polled in this manner every two minutes, but other time periods may be used, as well. The process then proceeds to step S to determine the results of the polling. If all conflicts have been resolved, the process proceeds to step S, where the network is closed, after which the process proceeds to step S, discussed above.","If a poll of the conflict resolution operation reveals that conflicts remain, the process proceeds to step S. This step determines if there has been any conflict resolution activity by any client workstation within a predetermined time period, which in this embodiment is set to two hours. If conflict resolution activity is continuing, the process returns to step S to await the next poll. If, however, step S determines that the predetermined time period has elapsed, the server assumes that conflict resolution has failed and proceeds to step S. In a typical embodiment, this step will generate another email to those involved indicating that a proposed change to the master code version has raised unresolved conflicts requiring further action.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5","FIG. 4"],"b":["100","100","200","202","100","200","202","112","204","210","100"]},"This automatically generated email includes a variety of information. One of its important aspects is that it includes an executable portion or link that when activated will automatically launch on the client computer monitor  the window shown in , the purpose of which is described in more detail in connection with that figure. The client computer receives the email in step S and in step S the user of the client computer opens the email and uses the input component  to activate the link (as by clicking on it with a mouse). As noted, the link is configured to automatically send an instruction to the server system's communication module  that results in launching a window on the client computer's monitor. As described in detail in connection with , this window enables the user of the client computer to interact directly with the server's operating system module  and integration software module  to manually resolve conflicts that the integration software identified in step S in . In addition to the link, this email identifies the branch or subbranch of the code that has the conflict(s), the date and time, the recipient's name (that is, the author of the proposed change that is causing the conflict), and the names of the manager(s) in charge of the subbranch and\/or branch in question. The body of the email will include text that indicates the purpose of the email. An example of such text would read:\n\n","On the server side, the process proceeds to step S, which indicates that the server system  can interact with the client computer , through the window that has been launched on the computer monitor . It will be appreciated that during this interaction the server system performs steps S, S, and S, shown in . Once the client computer user has completed a conflict resolution operation, he or she inputs a command (using the input component ) indicating that these operations have been completed, represented by step S. This generates a Done signal that is transmitted to the server system, while on the client side the client computer proceeds to step S to automatically close the window that was launched in step S.","On the server side, the Done signal causes the server system to proceed to step S, where a determination is made as to whether or not all conflicts identified in step S () have been resolved. Step S corresponds to step S in , so that if the determination is that no conflicts remain, the server system  proceeds to step S (corresponding to steps S and S in ). However, if conflicts remain after expiration of the predetermined time period established in step S, the server proceeds to step S and automatically generates an email to the client workstations of the interested parties, typically the same recipients of the email sent in step S. As noted above in connection with step S, this email will typically indicate that a proposed change to the master code version has raised unresolved conflicts requiring further action. The process then proceeds to step S, where the server session is terminated.",{"@attributes":{"id":"p-0037","num":"0040"},"figref":["FIG. 6","FIG. 5"],"b":["500","110","208","502","504","504","508","510","512","514","516","208","200"]},"Considering the window  in more detail, the time-out indicator  begins at 2:00:00 (2 hours, 0 minutes, and 0 seconds) when the window is launched. It then counts down on a second-by-second basis, thus indicating to the client computer user how much time remains to resolve the identified conflicts. (Note that this time period is not related to the time period in step S in .) If the user requires more time, he or she can activate the \u201cExtend Timeout\u201d button  (using the computer's input component ), which will increment the time-out indicator by a predetermined amount. A typical extension of time is 30 minutes, although other periods may be used as well. In addition, it is preferable to limit the number of times the timeout period can be extended so that any conflicts that have not been resolved in that time can be addressed by direct communications among the developing team members prior to the next automatically initiated integration\/conflict resolution operation (step S). If multiple workstations are using the system simultaneously, the total number of extensions of time will be limited to an absolute number, such as three (90 minutes if each extension is for 30 minutes), again so that the conflict resolution operation has a known ending and any necessary direct collaboration among the system users can be addressed in a timely fashion. Once the ultimate time limit has been reached, that is, after all available extensions have been requested, the \u201cExtend Timeout\u201d button is rendered inoperable (and is likewise displayed in a different manner, such as being \u201cgrayed out,\u201d to indicate to the user that further extensions are not available).","To begin the client-controlled conflict resolution process the user clicks on or otherwise activates the \u201cintegrate\u201d button , which automatically enters following the command prompt  the proper command to the server system integration software module . This initiates the software's integration procedure that was performed in step S in . The integration software then returns to the client computer  over the network  a listing of the conflicts that were determined in step S. The client user then activates the \u201cresolve\u201d button , for example, by clicking on it using a mouse, to permit the client user to begin an attempt to resolve the conflicts that were identified by the attempted integration. This is an interactive process in which the client user provides instructions to the integration software by typing them after the command prompt and causing them to be transmitted to the server system  (such as by pressing an \u201cEnter\u201d key on the computer keyboard after entering the text command). These commands are predetermined and are entered in specific syntax understood by the server computer. For example, a command could instruct the server to resolve an issue with the integration by overwriting a line of the master version of the code with the proposed change that is creating the conflict, as identified in the \u201cintegrate\u201d operation. Or conversely, the user could enter a command that instructs the server software to ignore the proposed change.","This process continues until the client user has resolved all of the conflicts, or has determined that one or more of the conflicts requires further collaboration with other developers of the code to resolve. If all of the client users that were logged on have resolved all of the conflicts identified in step S in , then step S determines that no conflicts remain, and the process proceeds to step S, as discussed above. As noted above, unresolved conflicts are identified by iteratively running the integration\/conflict resolution software at predetermined intervals (see steps S and S in ). Thus, if an iteration determines that no conflicts remain, the process proceeds to step S, as discussed above. Likewise, when the time period discussed above times out, the window automatically closes and any user inputs toward resolving conflicts are not saved and are lost, which thereby preserves the integrity of the master version of the code. If the client computer becomes inoperable for any reason, and thus makes it impossible for the user to indicate that he or she has completed the attempted conflict resolution process, the communication module  of the server system  waits for a time, such as five minutes, for the client to reconnect to the server system. If the client does not reconnect within that time period, the integration software considers the client to have logged off without resolving the detected conflicts.","The \u201cignore-d integrate\u201d button  enables the client user to instruct the system to ignore any files that were deleted during the conflict resolution process. More specifically, as a client user works on resolving conflicts subsequent to activating the \u201cresolve\u201d button , he or she may direct the integration software module  to delete certain files or lines of code from the master version. These files are marked with a \u201c-d\u201d flag and stored by the integration software module. If a client user has deleted any files or code from the master version during the conflict resolution process, he or she must activate the \u201cignore-d integration\u201d button upon successful completion of a conflict resolution session. If none of the client users in a conflict resolution session activates the \u201cignore-d integration\u201d button, the server will deem conflicts to remain in step S if any user has deleted any code from the master version. If any user activates the \u201cignore-d integration\u201d button, and the only conflicts remaining are because of deleted files or code, then step S in  determines that no conflicts remain, and the process proceeds to step S, as discussed above.","Finally, the \u201cHelp\u201d button  can be activated at any time during a conflict resolution session to open a separate window that the user can employ to search for information to assist in the conflict resolution process. As is conventional, help topics will typically be organized by context and searchable by text.","As will be apparent from the above description, the system  described herein enables all of the teams developing branches of a particular source code to integrate proposed changes to a master version of the code resident on a server system and resolve conflicts without necessarily requiring extended collaboration among the team members. Conventional software resident on the server system identifies conflicts that it cannot resolve automatically. In a preferred embodiment of the methods, systems, and devices described herein, the server system automatically generates emails to remote individual users that notifies them that their proposed changes have resulted in conflicts with the master version of the code. Clicking on a link in the email launches a window on the email recipient's computer. The window enables the user to directly interact with the integration\/conflict resolution software resident on the server system to attempt to resolve manually the conflicts that could not be resolved automatically. Only if the individual developers are unable to resolve conflicts in this way are they required to collaborate further, thus saving time and effort toward the final development of the source code.","Unless specifically stated, the methods described herein are not constrained to a particular order or sequence. In addition, some of the described method steps can occur or be performed concurrently. Further, the word \u201cexample\u201d is used herein simply to describe one manner of implementation. Such an implementation is not to be construed as the only manner of implementing any particular feature of the subject matter discussed herein. Also, functions described herein as being performed by computer programs are not limited to implementation by any specific embodiments of such program.","Although the subject matter herein has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter of the appended claims is not limited to the specific features or acts described above. Rather, such features and acts are disclosed as sample forms of corresponding subject matter covered by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The objects of the subject matter discussed herein will be better understood from the detailed description of embodiments which follows below, when taken in conjunction with the accompanying drawings, in which like numerals and letters refer to like features throughout. The following is a brief identification of the drawing figures used in the accompanying detailed description.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 1","FIG. 4"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIGS. 4 and 5"]}]},"DETDESC":[{},{}]}
