---
title: System and method for enterprise software distribution
abstract: A method for distributing software is provided. The method includes distributing a message from an application server to one or more application layer routers, such as servers that are being used to route enterprise software distribution messages, using a modified publish and subscribe architecture that includes the route to all recipients in the message address and that uses existing network communications. The message can thus be distributed to one or more subscribers on a first channel. The message is then distributed to one or more subscribers using the modified publish and subscribe architecture on one or more second channels selected from a second channel layer if necessary. This process is repeated until the message reaches all subscribers listed as recipients in the message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08166185&OS=08166185&RS=08166185
owner: Hewlett-Packard Development Company, L.P.
number: 08166185
owner_city: Houston
owner_country: US
publication_date: 20020305
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This application is related to U.S. Ser. No. 09\/435,300, entitled \u201cSystem and Method for Integrating Software Management and Distribution,\u201d filed Nov. 5, 1999.","The present invention pertains to the field of software distribution. More specifically, the invention relates to a system and method for enterprise software distribution that uses optimized messaging to efficiently use enterprise network bandwidth and resources.","Systems for enterprise software distribution are known in the art. For example, it is known to prepackage suites of software for distribution over an existing enterprise network, such as a local area network, a wide area network, or a combination of such networks. The prepackaged software is then installed on one or more preselected workstations, such as by using a point-to-point message protocol, a broadcast protocol, or a publish and subscribe message protocol.","Many problems have been encountered with such software distribution schemes. One problem is that enterprise network resources are unable to support the distribution of software in a timely manner using point-to-point message protocols for very large networks, such as those with over 1000 nodes. In such networks, even a five minute distribution time per node will require almost one week of time to complete software distribution for the enterprise. As a result, such systems must have multiple distribution points, which must each be configured and coordinated.","Broadcast of software packages to multiple endpoints can alleviate network bandwidth and resource requirements, but because of the differences between workstation hardware, software, physical location, user needs, and other configuration variables, such broadcast distribution typically requires operator support and configuration at each workstation.","Publish and subscribe messaging can be used to improve the ability to control software distribution to endpoints based on their location and function, but such publish and subscribe messaging requires that all the endpoints subscribe to a single channel, which results in some endpoints receiving messages that are not needed, and which also unnecessarily increases the number of messages that have to be handled by the enterprise network. Further, the publish\/subscribe model and the centralized software distribution model have two opposing requirements. In the publish\/subscribe model, the publisher does not care who the subscriber is. It is the subscriber's responsibility to subscribe to the \u201cchannel of interest\u201d. In the centralized mode, the publisher of the software decides who should subscribe to the software distribution.","In accordance with the present invention, a system and method for enterprise distribution of software are provided that overcome known problems with systems and methods for distributing software in an enterprise.","In particular, a system and method for enterprise distribution of software are provided that uses a modified publish and subscribe messaging that does not require all end points in the enterprise to subscribe to a single common channel, thereby eliminating the flow of unwanted messages through out an enterprise's network.","In accordance with an exemplary embodiment of the present invention, a method for distributing software is provided. The method includes distributing a message from an application server to one or more application layer routers, such as servers that are being used to route enterprise software distribution messages, using a modified publish and subscribe architecture that includes the route to all recipients of that message in the message address and that uses existing network communications. The message can thus be distributed to one or more subscribers on a first channel. The message is then distributed to one or more subscribers using the modified publish and subscribe architecture on one or more second channels selected from a second channel layer if necessary. This process can be repeated as necessary to optimize the delivery of messages to all subscribers while minimizing the use of enterprise network resources.","The present invention provides many important technical advantages. One important technical advantage of the present invention is a system and method for enterprise software distribution that uses modified publish and subscribe messaging to transmit messaging including files and control data to endpoints. The modified publish and subscribe messaging optimizes the use of bandwidth and resources, and allows the messages that are needed at each node to be determined and sequenced at a centralized location, without the need for a receiving system operating on each node, such as one that must subscribe to multiple channels depending on an endpoint's function or the set of software applications that it is required to have.","Those skilled in the art will further appreciate the advantages and superior features of the invention together with other important aspects thereof on reading the detailed description that follows in conjunction with the drawings.","In the description that follows, like parts are marked throughout the specification and drawings with the same reference numerals, respectively. The drawing figures might not be to scale, and certain components can be shown in generalized or schematic form and identified by commercial designations in the interest of clarity and conciseness.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100"]},"System  includes application distribution system , which can be implemented in hardware, software, or a suitable combination of hardware and software, and which can be one or more software systems operating on a general purpose server platform. As used herein, a software system can include one or more objects, agents, lines of code, threads, subroutines, databases, application programming interfaces (APIs), web browser plug-ins, or other suitable data structures, source code (human readable), object code (machine readable), and can include two or more different lines of code or suitable data structures operating in two or more separate software applications, on two or more different processing platforms, or in other suitable architectures. In one exemplary embodiment, a software system can include one or more lines of code or other suitable software structures operating in a general purpose software application, such as an operating system, and one or more lines of code or other suitable software structures operating in a specific purpose software application. In another exemplary embodiment, a software system can be implemented as a distributed software system, on a different processing platform than that shown in the exemplary embodiments herein, or in other suitable manners.","Application distribution system  is used to distribute packages of software that have been assembled for installation on an endpoint, such as using an assembly system and method described in U.S. Ser. No. 09\/435,300, entitled \u201cSystem and Method for Integrating Software Management and Distribution,\u201d filed Nov. 5, 1999, which is hereby incorporated by reference for all purposes. An endpoint can be a suitable processor platform, such as a laptop computer, a desktop computer, a workstation, a handheld device, a peripheral component such as a scanner, a printer, a copy machine, a fax machine or other suitable systems having a processor and processing capabilities.","Application distribution system  is coupled to primary router . As used herein, the term \u201ccouple,\u201d and its cognate terms such as \u201ccouples\u201d and \u201ccoupled,\u201d can include a physical connection (such as through a copper conductor), a virtual connection (such as through randomly assigned memory locations of a data memory device), a logical connection (such as through one or more logical devices of a semiconducting circuit), a hypertext transfer protocol connection, other suitable connections, or a suitable combination of such connections. In one exemplary embodiment, systems and components are coupled to other systems and components through intervening systems and components, such as through an operating system of a general purpose server platform.","Application distribution system  provides files to primary router  for distribution to a plurality of endpoints. Application distribution system  coordinates the transmission of files used for configuring the software applications so that the distribution of the software applications to the endpoints is optimized. Primary router  is used to distribute the files as a plurality of messages in a modified publish and subscribe format, where the address for each message is assigned by application distribution system  based on the location of the endpoints.","Primary router  can be implemented in hardware, software, or a suitable combination of hardware and software, and can be one or more software systems operating on a general purpose server platform. Primary router  is an application layer router, as opposed to a hardware layer router. In one exemplary embodiment, in the Open Systems Interconnection (OSI) networking model, an application layer router would operate in layer 7 of the OSI model, whereas a physical layer router would operate in layer 1 of the OSI model. Thus, primary router  can operate on a suitable network node that is normally not used for software distribution, such as a server, a workstation, or other suitable processing platforms. In this manner, primary router  can be selected based on an optimal network architecture, as opposed to using an existing hardware layer router that may not be optimally located for distribution of software in an enterprise.","Primary router controller  is coupled to primary router , and performs control of primary router . In one exemplary embodiment, primary router controller  can be implemented in hardware, software, or a suitable combination of hardware and software, and can be one or more software systems operating on a general purpose server platform. Primary router controller  receives messages from primary router  and stores the messages for subsequent transmission to other nodes in the distribution system. In one exemplary embodiment, primary router controller  stores messages that include one or more files, and then provides the messages to primary router  for transmission at predetermined times, upon the occurrence of predetermined events, or in other suitable manners. The processor resources of primary router  can thus be optimized, so as to facilitate rapid distribution of software throughout the enterprise from a centralized location.","Primary router  is coupled to secondary router  and secondary router , such as through a network. Secondary router , secondary router , secondary router controller  and secondary router controller  can each be implemented in a manner similar or identical to that of primary router  and primary router controller , respectively. Secondary router  and secondary router  receive messages containing files for distribution to endpoints from primary router . The messages are addressed and distributed in a modified publish and subscribe process that uses the connection between secondary router  and primary router  as a first channel, and the connection between secondary router  and primary router  as a second channel. In this manner, primary router  distributes messages to secondary router  and secondary router  by posting those messages to the corresponding channel. Thus, files to be distributed through primary router  and secondary router  and secondary router  can be addressed using a conventional publish and subscribe process where the message is addressed by identifying the channel to which the message should be routed, but where the \u201csubscription\u201d process is performed using standard network messaging functions.","Secondary router controller  and secondary router controller  are used to store and process the messages and files as they are received, so that the messages and files can then be routed through secondary router  and secondary router , respectively, in accordance with router processor capacity, bandwidth of the communications media, at predetermined times, or in response to predetermined events.","Secondary router  is coupled to endpoint  and endpoint , and secondary router  is coupled to endpoint  and endpoint , such as by a single network connection, two network connections as shown, or other suitable communications media. Files are transmitted in the form of messages from secondary router  to endpoints  and , and from secondary router  to endpoints  and , such as upon receipt of notification of a predetermined event, after the expiration of a period of time, or in accordance with other suitable routing commands. In addition, the addressing of messages from secondary router  to endpoint  and endpoint  is performed by using a modified publish and subscribe message format. In this manner, application distribution system  can address files for distribution to endpoints  through  by identifying the first channel to secondary router  or secondary router , and the second channel to the endpoint, where the existing network messaging software is used to install the files on the endpoints from the secondary routers. Thus, system  uses a modified publish and subscribe message format to distribute software in an enterprise, so as to deploy software systems on a large number of endpoints. System  allows the transmission of large numbers and sizes of files over application layer routers and communications media that does not overload the processor capabilities of the routers, and that does not overload the bandwidth of the communications media. In this manner, application distribution system  can sequence the distribution of files in a manner that optimizes existing system architecture.","Gateway  can be implemented in hardware, software, or a suitable combination of hardware and software, can be one or more software systems operating on a general purpose server platform. In on exemplary embodiment, gateway  is an existing server node in a network that is used as an application layer gateway for the purpose of facilitating enterprise software distribution. The enterprise software distribution process may require response messages to be generated by endpoints  through  and transmitted back to application distribution system  or other suitable systems. Gateway  can be used to return messages in response to event notification messages or other data transmitted through primary router  to secondary routers  or  so as to trigger subsequent transmission of messages to endpoints  and . Gateway  is coupled to endpoints  through , such as through the network connection between secondary routers  and secondary router , or by other suitable means. Thus, gateway  can be used to receive and coordinate message transmissions from endpoints  through  to application distribution system  or other suitable systems.","In operation, system  can be used to distribute software in an enterprise that includes a large number of nodes in geographically disbursed areas. System  allows software to be transmitted to each node using modified publish and subscribe messaging that uses existing network communications systems and allows file transmission to be coordinated through timing, in response to events, and to optimize the use of application layer router processing capabilities and bandwidth of network connections. In this manner, application distribution system  can determine an optimal processor and bandwidth loading based on the distribution of software to endpoints, and can further address files for distribution to endpoints in a manner that does not require those files to be individually addressed, broadcast, or that does not require the endpoints to determine the files that are needed and to subscribe to channels to receive such files. In this manner, application distribution system  can provide a sequence of file distribution based on optimized routing practices, such as by transmitting messages to endpoints to determine configuration information and then sequencing specific software to endpoints based on geographical, functional, or other parameters and network bandwidth and resources.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 2","b":["200","200","102","202","204","206","208","210","212"]},"Endpoint configuration system  includes endpoint configuration data for a plurality of endpoints in an enterprise. In one exemplary embodiment, endpoint configuration system  can include a database of processor configuration data that identifies the location of each processor, the applications that are required for each processor, the groups to which the processor operators are assigned, processors having multiple operators, and other suitable information. This processor configuration data is used by endpoint configuration system  to identify software that should be transmitted to each endpoint in an enterprise software distribution event. Furthermore, the endpoint configuration data can be used to identify optional messages for each endpoint, including negative options that require the endpoint to delete file files that were broadcast to all endpoints, all endpoints in a predetermined class, or other suitable systems. In this manner, endpoints having unique requirements that can be addressed by the deletion of certain files can be readily accommodated by sequencing optional messages that require file deletion, optional messages containing additional files, or other suitable data.","Bandwidth allocation system  receives message routing data and provides bandwidth allocation data in response to the message routing data. In one exemplary embodiment, bandwidth allocation system  tracks bandwidth availability for a software distribution path based on message routing data, such as using modified publish and subscribe routing in which each channel required to transmit a message to an endpoint is contained in the address for the message, in addition to the total number of endpoints that will be receiving the message. Bandwidth allocation system  can generate bandwidth availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, bandwidth allocation system  can receive message data that includes priority data, and can sequence the messages based upon available bandwidth and message routing data contained in the modified publish and subscribe format.","Response sequencing system  receives message routing data and provides response sequencing data in response to the message routing data. In one exemplary embodiment, response sequencing system  tracks bandwidth availability for a response message path based on message routing data, such as by determining the maximum response message load that can be generated when a plurality of endpoints generate a response to a transmitted message. Response sequencing system  can determine bandwidth availability or processor capacity data, and can provide a time, event, or priority ranking for transmitted messages to ensure that the response messages can be transmitted to the required destination.","Memory resource allocation system  receives message routing data and provides memory resource allocation data in response to the message routing data. In one exemplary embodiment, memory resource allocation system  tracks memory resource availability for a software distribution path based on message routing data, such as using modified publish and subscribe routing in which messages need to be stored at application routers in response to bandwidth availability or other variables. Memory resource allocation system  can generate memory resource availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, memory resource allocation system  can receive message data that includes priority data, and can sequence the messages based upon available memory resources and message routing data contained in the modified publish and subscribe format.","Processor resource allocation system  receives message routing data and provides processor resource allocation data in response to the message routing data. In one exemplary embodiment, processor resource allocation system  tracks processor resource availability for a software distribution path based on message routing data, such as using modified publish and subscribe routing in which each channel required to transmit a message to an endpoint is contained in the address for the message, in addition to the total number of endpoints that will be receiving the message. Processor resource allocation system  can generate processor resource availability data, such as in response to a query from application distribution system  or other suitable systems, so as to allow such other systems to sequence messages accordingly. Likewise, processor resource allocation system  can receive message data that includes priority data, and can sequence the messages based upon available processor resources and message routing data contained in a modified publish and subscribe format.","Event based sequencing system  generates event based sequencing control data for inclusion in a message. In one exemplary embodiment, event based sequencing system  can determine whether the occurrence of an event is required prior to transmitting a message. For example, receipt of a \u201cWakeOnLAN\u201d message may be required before files are transmitted, or receipt of a first file may be required prior to transmission of a second file. Event based sequencing system  can include event confirmation control data that requires receipt of confirmation data from application distribution system , nodes, or other system components before transmitting a message. Likewise, event based sequence system  can receive event notification from systems operating on a router or router controller, such as timer systems, bandwidth availability monitors, processor loading monitors or other suitable systems.","In operation, system  allows files to be organized as messages, and messages to be sequenced for distribution to a plurality of processors in an enterprise. System  allows the distribution of files to be organized so that files are transmitted in accordance with optimal bandwidth allocation, optimal memory resource allocation, optimal processor resource allocation, optimal response sequencing allocation for response gateways or other response systems, and optimal event based sequencing. System  thus allows files to be sequenced so as to facilitate file distribution in an optimal time period.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["300","300","302","304","306","308","310","312"]},"File cache system  receives messages including one or more files and stores the messages for subsequent transmission to one or more endpoints. File cache system  can store the messages in a random access memory, a magnetic storage media, or other suitable storage media based on the expected amount of time that a given file will be stored. In one exemplary embodiment, file cache system  can determine whether a file will be stored for a predetermined amount of time or until an event occurs, and can store the file in a storage medium based upon the expected amount of storage time for the file.","Message receiving system  receives messages including routing data such as publish and subscribe distribution data and payload data that can include files for distribution and corresponding control data, event messages that are used to trigger event based message distribution (such as timing messages, processor availability messages, bandwidth availability messages, or other suitable messages), and other suitable payload data. Message receiving system  then performs a message preparation function on the message. In one exemplary embodiment, a message preparation function can include extracting payload data for processing by message timing system , event based message system , or other suitable systems, preparing the message for retransmission to another router through message transmission system , or other suitable message preparation functions.","Message transmission system  assembles address data and payload data into a message for transmission by a router. In one exemplary embodiment, the message transmission system  can assemble files into payload data and append publish and subscribe address data based on control data received from message timing system , event based message system , message receiving system , or other suitable systems. In another exemplary embodiment, message transmission system  can transmit data to another router or router controller, such as bandwidth availability data, processor capacity data or other suitable messages.","Message timing system  performs timing functions for distribution of messages. Message timing system  can sequence messages in accordance with timing control data associated with each message, can start one or more timers based on receipt of messages with associated timer control data, and can perform other suitable functions.","Event based message system  tracks messages with event based transmission functions and generates message transmission control data upon the occurrence of an event. In one exemplary embodiment, event based message system  can store a list or other suitable structures with the events, and can monitor event messaging to determine whether an event has occurred. In another exemplary embodiment, event based message system  can perform queries or other suitable functions to determine whether an event has occurred. Event based message system  can further compile files and other data into a message to be transmitted upon the occurrence of an event.","In operation, system  provides control for an application layer router in a software distribution system for an enterprise. System  allows modified publish and subscribe messaging to be used to distribute messages in an enterprise software distribution system, in which messages are published based upon priority, time, bandwidth capacity, processor capacity, events, or other occurrences. System  thus allows the existing network to be used in an enterprise to distribute software to a plurality of endpoints in a manner that optimizes the software distribution process.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 4","b":["400","400"]},"Method  begins at , where software distribution data is received. In one exemplary embodiment, the software distribution data can include data identifying suites of software to be distributed, where the suites further comprise a plurality of software components, where each component includes a plurality of files. Likewise, the software distribution data can identify classes of machines that should receive different software suites and components based upon the function of the node, the location of a node, the geographic location of a node, the location of a node within an organization, or other suitable functions. The method then proceeds to .","At , the endpoints associated with the software distribution data are identified. In one exemplary embodiment, endpoints can be classed based upon various geographical data, organizational data, functional data, or other suitable data, where the network address for the endpoint is correlated based on these various factors. After the endpoints are identified, the method proceeds to .","At , it is determined whether a response is required to the message. In one exemplary embodiment, a message can include a control command that causes the processor to perform a function, such as activating an Intel WakeOnLAN Network Interface Card that causes a computer that is off to activate, an inventory scan function that causes the computer to transmit a list of files stored on the computer, a heartbeat query that causes a computer to respond if it is active, or other suitable responses. If it is determined at  that a response is not required, the method proceeds to . Otherwise, the method proceeds to  where a response to sequencing is performed. In one exemplary embodiment, the response to sequencing can include an analysis of the priority in which responses should be received, the bandwidth available between endpoints that will be receiving the response message and the application requiring the response, such as an application distribution system , the processing capacity of an application layer gateway or other suitable systems that are used to coordinate transmission of responses to the application, and other suitable constraints or factors. The method then proceeds to .","At , the bandwidth requirements for the messages are determined. In one exemplary embodiment, bandwidth requirements can be based on total bandwidth required for a group of messages, the bandwidth required at various points and the message transmission path to endpoints, or other suitable bandwidth requirements. The method then proceeds to .","At , it is determined whether the amount of bandwidth required is greater than available bandwidth. If the amount of bandwidth required is not greater than available, the method proceeds to . Otherwise, the method proceeds to  where bandwidth sequencing is performed. In one exemplary embodiment, bandwidth sequencing can be performed by using the priority of messages, the priority of endpoints, can be based on an analysis of bottleneck constraints, such as areas in which the bandwidth is a constraint on distribution for other areas, or other suitable factors. The method then proceeds to .","At , resource requirements are determined for distribution of the messages throughout the enterprise. In one exemplary embodiment, resource requirements can include the processor requirements for receiving and transmitting messages, storing messages, bandwidth requirements, or other suitable resource requirements. The method then proceeds to .","At , it is determined whether the amount of resources required for distribution of the messages exceeds available resources. If the amount does not exceed available resources, the method proceeds to . Otherwise, the method proceeds to  where resource sequencing is performed. In one exemplary embodiment, resource sequencing can include ordering messages based upon the priority of the message, based upon the amount of resources required, based upon bottleneck resource constraints, such as areas in which the processor capacity or storage availability will limit the distribution of the messages or other suitable resource sequencing. The method then proceeds to .","At , it is determined whether any event-based messages are included. If no event-based messages are included, the method proceeds to  and terminates. Otherwise the method proceeds to  where event based sequencing is performed. In one exemplary embodiment, events can be sequenced based upon priority of the event, a sequence number for events, or other suitable data. The method then proceeds to  where the message sequencing is released.","In operation, method  allows a plurality of messages including file messages and control data messages to be sequenced so as to allow enterprise distribution of software to be performed over a network. Method  uses existing network resources to distribute software from one or more centralized locations to a plurality of endpoints in an efficient manner, so as to optimize available network resources to allow the software to be efficiently distributed.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5","b":["500","500"]},"Method  begins at  where distribution priority is determined. In one exemplary embodiment, distribution priority can be determined based upon the software suite, the software component of a suite, the location of an endpoint, the function of an endpoint, a function that has to be performed by the endpoint, a function that has to be performed by an application layer router or gateway, or other suitable criteria. The method then proceeds to .","At , a message set is selected based upon the available bandwidth. In one exemplary embodiment, the message set can be selected by taking the highest priority messages in sequence until all available bandwidth has been allocated. In another exemplary embodiment, the message set can be selected based on priority in conjunction with other factors, such as the location of associated endpoints with priority messaging, bandwidth bottlenecks at certain locations, or other suitable functions. The method then proceeds to .","At , it is determined whether a priority violation has occurred. In one exemplary embodiment, a priority violation can include a sequencing of messages that results in a message not being transmitted at a required time, such as prior to transmission of other messages, in conjunction with transmission of other messages, or at other suitable times. If a priority violation has not occurred, the method proceeds to . Otherwise the method proceeds to  where operator notification is generated. In one exemplary embodiment, operator notification can request that the operator correct the priority violation, such as by reviewing the messages and selecting an operator override sequence. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If messages remain, the method returns to . Otherwise, the method proceeds to  where sequencing of messages continues, such as response sequencing, resource sequencing, or event sequencing.","In operation, method  allows messages to be sequenced based upon available bandwidth so as to optimize message distribution in an enterprise software distribution system. Method  allows priority to be assigned to messages so as to ensure that messages are received in a predetermined order, such as messages that may require a response to be generated or other suitable messages.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 6","b":["600","600"]},"Method  begins at  where distribution priority is determined. The method then proceeds to , where a message set is selected based upon the available resources. In one exemplary embodiment, the message set can be selected based on processor requirements for processing the message, for generating responses, for processing responses, for operating timers, for storing files, processor capacity bottlenecks at certain locations, or other suitable resource sequencing functions. The method then proceeds to .","At , it is determined whether a priority violation has occurred. If a priority violation has not occurred, the method proceeds to . Otherwise the method proceeds to  where operator notification is generated. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If messages remain, the method returns to . Otherwise, the method proceeds to  where sequencing of messages continues, such as response sequencing, bandwidth sequencing, event sequencing, or other suitable sequencing.","In operation, method  allows messages to be sequenced based upon available resources so as to optimize message distribution in an enterprise software distribution system. Method  allows priority to be assigned to messages so as to ensure that messages are received in a predetermined order, such as messages that may require a response to be generated or other suitable messages.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 7","b":["700","700"]},"Method  begins at  where a response priority is determined. In one exemplary embodiment, a response priority may be based upon control commands such as execution of an Intel WakeOnLAN Network Interface Card so that a processor is turned on prior to the transmission of messages to that processor. In one exemplary embodiment, the priority of the WakeOnLAN command would be greater than the priority for any other message. After the response priority is determined the method proceeds to .","At , response bandwidth is determined. In one exemplary embodiment, response bandwidth can include the available bandwidth between a plurality of endpoints and an application layer gateway, such as where the gateway is used to coordinate the transmission of response messages from the endpoints back to an application, such as an application distribution system . After the response bandwidth is determined, the method proceeds to .","At , it is determined whether the bandwidth required for the response is greater than available bandwidth. ","At , a set of messages is selected based upon priority and bandwidth constraints. In one exemplary embodiment, bandwidth sequencing may have already been performed such that predetermined sets are available for response priority sequencing. In another exemplary embodiment, priority sequencing can be performed in conjunction with bandwidth sequencing, and the transmission sets can be selected based upon overlapping compatible sets. The method then proceeds to .","At , it is determined whether a priority violation has occurred. If a priority violation has not occurred, the method proceeds to . Otherwise, the method proceeds to  where a notification is generated requesting operator assistance. The method then proceeds to .","At , it is determined whether any remaining messages need to be sequenced. If remaining messages are available, the method returns to . Otherwise, the method proceeds to  where sequencing for other factors is performed, such as resource sequencing or event sequencing.","In operation, method  is used to perform response sequencing in an enterprise software distribution system, so as to prevent responses that may be generated following transmission of messages including files or control data from overloading system capacity. In this manner, system  prevents data loss from occurring, such as from undelivered messages, which can result in improper installation of files in an enterprise software distribution system.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 8","b":["800","800","802","804"]},"At , it is determined whether there are any related events required for the message. In one exemplary embodiment, installation of components, bandwidth availability, processor availability, or other suitable events may need to occur before a message is transmitted, such as to prevent inadvertent non-delivery of the message, to ensure that predetermined events occur prior to transmission of the message, or for other suitable purposes. The method then proceeds to .","At , sequence commands are generated. In one exemplary embodiment, message sequencing can be generated based upon relative events, such that messages are sequenced after all messages have been processed. In another exemplary embodiment, messages can be assigned a sequence based upon absolute events, such as transmission of a message after a processor is on, transmission of a message after an operating system has been installed, or other suitable events. The method then proceeds to .","At , it is determined whether remaining messages need to be sequenced for event related sequencing. If any messages are remaining, the method returns to . Otherwise, the method proceeds to  where the process continues with any remaining sequencing, such as bandwidth sequencing, response sequencing, or resource sequencing.","In operation, method  allows messages to be sequenced based upon events that may be required prior to transmission of a message. Method  thus allows modified publish and subscribe messaging to be used in an enterprise software distribution system so as to allow the address of an endpoint to be determined centrally and for the message to be sequenced to the endpoint without inadvertent receipt of a message prior to predetermined events.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIGS. 9 through 14"},"The present invention can use a multi-tiered approach where control messages and file data are distributed to endpoints in a tiered fashion so as to have minimal impact on an enterprise's network and processing resources. Endpoint nodes can receive software distributions and other control messages that originate from a MOAS node through a hierarchy of MTS nodes. Response messages from the endpoints can be delivered to a MOAS node through the MTS nodes. A multi-tiered approach can also be used to facilitate local administrative control over MTS nodes.","In one exemplary embodiment, an enterprise is geographically divided into several regions, where each of the regions can have sub-regions. Using a tiered approach, the MOAS node and a top level MTS node (MASTER-MTS) can be located at a corporate headquarters, a plurality of second tier MTS nodes can be located one at each of a plurality of regional offices, and a plurality of third tier MTS nodes can be located one at each of a plurality of sub-regions. Endpoints can be located at the sub-regions and can receive control and file data from the sub-regional MTS nodes.","In this exemplary embodiment, MTS nodes at any given tier can move the control and file data messages downstream if there is an interest in those messages by endpoints located below them in the hierarchy, such that a software distribution targeted for endpoints that belong to a particular sub-region will not affect other regions or sub-regions of the enterprise.","A distribution cycle can begin at an MOAS node after a component or a suite of components have been packaged and a set of endpoints have been identified to receive them. In this exemplary embodiment, two types of distributions can be used\u2014staged and non-staged. The main phases of a distribution cycle for both types of distributions can include:\n\n","For staged distribution, the necessary files for a given software component can be staged at all the MTS nodes that lie in the path of endpoints selected for the distribution before the Component Change event from the MOAS node reaches the endpoints. In one exemplary embodiment, this can be achieved through an event based forwarding mechanism in the Downstream Messaging System (Router).",{"@attributes":{"id":"p-0094","num":"0099"},"figref":"FIG. 9","b":["900","900"]},"Method  begins at  and proceeds to  where a list of end points is obtained. The method then proceeds to  where optional messages are obtained for the end points. The method then proceeds to  where required messages common to the end points are obtained. The method then proceeds to .","At , subroute tree data structures are initialized. The method then proceeds to  where the current end point is set equal to the next item in the list. The method then proceeds to  where an end point entry is created for the current end point. The method then proceeds to  where optional messages are added to the end point entry. The method then proceeds to  where a subroute is obtained for the current end point. The method then proceeds to  where an end point entry is added to the subroute. The method then proceeds to .","At , it is determined whether the list is empty. If the list is not empty, the method returns to . Otherwise, the method proceeds to  where the subroute tree is transformed to a wire format that is suitable for transmission over the network. An exemplary wire format is XML. The method then proceeds to  and completes.",{"@attributes":{"id":"p-0098","num":"0103"},"figref":"FIGS. 10 and 11","b":["1000","1100","900"]},"Method  traverses up the mid-tier server hierarchy in the Configuration Repository for a given router and builds a subroute tree data structure all the way up to a master router, which is a router that does not have a parent.","Method  is a \u201cget subroute for endpoint\u201d process that begins at  and proceeds to  where router profile data for an end point's router is obtained from the configuration repository. The method then proceeds to  where it is determined whether the router is in the subroute map. If the router is not in the subroute map, the method proceeds to  where a subroute entry is created from the router profile. The method then proceeds to  where the subroute entry is added to the subroute map. The method then proceeds to  where the subroute hierarchy is built. The method then proceeds to  where a newly created subroute is returned. The method then proceeds to  and terminates. Likewise, if it is determined at  that the router is in a subroute map, the method proceeds to  where the route subroute from the subroute's map is returned and the method proceeds to  and terminates.","Method  is a \u201cbuild subroute hierarchy for given subroute\u201d process that begins at  and proceeds to  where a current subroute is set equal to an input subroute. The method then proceeds to  where it is determined whether a current subroute.parent is defined. If the current subroute.parent is not defined the method proceeds to  where a current subroute is defined as the master and the method proceeds to  and terminates. Likewise, if it is determined at  that a current subroute.parent is defined, the method proceeds to  where a subroute is obtained for the current subroute.parent from a subroute's map into the parent subroute. The method then proceeds to .","At , it is determined whether a parent subroute exists on the map. If a parent subroute exists on the map, the method proceeds to  and the current subroute is added to the parent subroute. The method then proceeds to  and terminates. Likewise, if it is determined at  that a parent subroute does not exist in the subroute in the map, the method proceeds to  where router profile is obtained for a current subroute.parent from the configuration repository. The method then proceeds to  where a subroute is created from the parent router profile called parent subroute. The method then proceeds to  where a current subroute is added to a parent subroute. The method then proceeds to  where a current subroute is set equal to a parent subroute. The method then returns to .",{"@attributes":{"id":"p-0103","num":"0108"},"figref":"FIG. 12","b":["1200","1200","1202","1204","1204","1206","1206","1208","1200","1210","1212","1200"],"i":["a","b","a","d"]},{"@attributes":{"id":"p-0104","num":"0109"},"figref":"FIG. 13","b":["1300","1300"]},"Method  begins at  and proceeds to  where a routed message is received on a parent's published channel. The method then proceeds to  where the subroute is retrieved for a routed message from a host name (router ID). The method then proceeds to .","At  it is determined whether a subroute entry is present. If a subroute entry is not present, the method returns to . Otherwise the method proceeds to  where required and optional messages are sent for a subroute to a router controller. The method then proceeds to  where a new routed message is built that contains child nodes of the subroute (subroutes and end points). The new routed message is saved and an acknowledgement is sent to the parent. To conserve network bandwidth, transmission of the acknowledgement can be delayed and the acknowledgement can be grouped with other acknowledgements. In order to protect against router outages the new routed message is first saved and then deleted when acknowledgements are received from all subscribers listed in the new routed message. The method then proceeds to .","At , it is determined whether a routing mode is event-based. If the routing mode is event-based, the method proceeds to  where the method waits for an event completion message from the router controller. The method then proceeds to  where the new routed message is published on the router published channel. The new routed message can be re-published if acknowledgements are not received from all subscribers within a predetermined time period. The method then returns to . Likewise, if it is determined at  that the routing mode is not of event-based, the method proceeds to  where it is determined whether the routing mode is time-based. If the routing mode is not time-based, the method proceeds to . Otherwise, the method proceeds to  where the method waits for a time period specified in the message. The method then proceeds to .",{"@attributes":{"id":"p-0108","num":"0113"},"figref":"FIG. 14","b":["1400","1400"]},"Method  begins at  and proceeds to  where a routed message is received on a parent's published channel. The method then proceeds to  where an end point entry for the endpoint's host name is received from a routed message. The method then proceeds to .","At  it is determined whether an end point entry is present. If an end point entry is not present the method returns to . Otherwise the method proceeds to  where required messages are retrieved and processed. The method then proceeds to  where optional messages for end point entries are retrieved and processed. The method then proceeds to  where an acknowledgement is sent to the parent. To conserve network bandwidth, transmission of the acknowledgement can be delayed and the acknowledgement can be grouped with other acknowledgements.","Although exemplary embodiments of a system and method for performing the present invention have been described in detail herein, those skilled in the art will also recognize that various substitutions and modifications can be made to the systems and methods without departing from the scope and spirit of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 10 and 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"}]},"DETDESC":[{},{}]}
