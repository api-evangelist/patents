---
title: System and method for application programming interface for extended intelligent platform management
abstract: A system for controlling a computer system uses a management controller having sensor data record objects in a sensor data record repository. Sensor data record objects contain data from a plurality of sensors, and at least one sensor data record object contains a property descriptor. The property descriptor references a property data object readable and writeable by a controlling computer through the management controller, and provides a way to control at least one feature of the computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07966389&OS=07966389&RS=07966389
owner: Hewlett-Packard Development Company, L.P.
number: 07966389
owner_city: Houston
owner_country: US
publication_date: 20030422
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","Introduction to IPMI","SUMMARY","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["The present Application Programming Interface (API) provides a system and method for extending Intelligent Platform Management Interface (IPMI) to provide large numbers of writeable, as well as readable, sensor and property records for control of computer systems including partitionable multiprocessor computer systems.","Intelligent Platform Management Interface (IPMI) is a protocol used for controlling computer systems, such as network server computers. IPMI assumes presence of a management processor in each controlled computer, such that logging, monitoring, inventory, and recovery operations are independent of primary processors in the controlled computer systems. A detailed description of IPMI can be obtained from the Intel website at http:\/\/www.intel.com\/design\/servers\/ipmi. The IPMI Version 1.5 revision 1.1 specification is available from Intel, enclosed herewith, and incorporated herein by reference.","IPMI defines common interfaces to \u201cintelligent\u201d hardware used to monitor and control a server computer's physical health, such as temperature, voltage, fan operation, and power supplies. These capabilities provide information that enables remote system management, recovery, and asset tracking. IPMI provides for remote computer system management over serial, modem and IAN connections between a controlling computer system and the Baseboard Management Controller (BMC) of the controlled computer system. The controlling computer may also be the controlled computer.","A BMC is a primary management controller for a system. The BMC may communicate with Satellite Management Controllers (SMC) within the system over a serial interface, derived from the industry-standard IC protocol, known as the Intelligent Platform Management Bus (IPMB). SMCs may be located on other circuit boards and in other devices of the system than is the BMC. IPMI provides commands to allow a controlling computer to access information from SMCs, and provide commands to SMCs, through the BMC.","IPMI messaging uses a request\/response protocol. IPMI request messages are commonly referred to as commands (Cmd). IPMI commands are grouped into functional command sets, using a field called the Network Function Code (NetFn), which serves in part to address the BMC or an SMC with which a command is associated. There are predefined command sets for sensor and event-related commands, chassis commands, and other functions.","The BMC maintains a centralized, non-volatile System Event Log (SEL), which is a repository for system critical events, such as out-of-range temperatures, power supply failures, and uncorrectable ECC errors. BMCs may maintain a list of Satellite Management Controllers (SMCs).","The BMC maintains a single, centralized, non-volatile SDR Repository, which holds Sensor Data Records (SDRs) for all IPMI-accessible sensors in the system. An SDR identifies and completely describes a sensor, including the sensor's default initialization settings that BMC uses at system initialization. An SDR also holds offsets and constants for converting raw sensor readings to standard units (such as milliamps or volts). System Management Software uses the SDR information to get the sensor locations and conversion factors. Sensors include much information of interest in managing a system and include system status information as well as voltage, temperature, and fan speed readings. SDRs may include parameters that can be written by a controlling computer, such as temperature and voltage limits.","Many sensor types are defined in the IPMI specification; the specification also provides for extensions to cover additional sensor types. IPMI commands are specified by a NetFn byte and a Cmd byte; there may also be an associated data field. Extended commands generally make use of NetFn and Cmd byte codes reserved for OEM extensions. IPMI extensions for both commands and sensor types are keyed to a manufacturer-id associated with the particular Original Equipment Manufacturer (OEM).","Shortcomings OF IPMI Extensions","This mechanism limits the number of extensions available to those reserved in the IPMI specification. In particular, IPMI defines available sensor identifications such that only sensor identifications OCOH-OFFH are available\u2014unless other techniques are used\u2014this limits OEM sensor extensions to no more than 64 sensor types.","While many sensor types are predefined in the IPMI specification, these do not include support for modern high-performance, repartitionable, computer systems capable of running more than one operating system simultaneously. Systems such as these require use of OEM command and sensor extensions under IPMI. Further, IPMI sensors typically are read-only.","Even a large company such as Hewlett-Packard has only one manufacturer-ID, therefore these sensor and command codes must be shared throughout all devices produced by the company. Further, should any sensor or command codes be reused with the same manufacturer-ID, confusion and system incompatibility may be expected. It is therefore desirable to extend the number of available sensor types and command codes for use with systems produced by the same manufacturer.","Typically, IPMI-controlled systems require a series of OEM-defined IPMI commands to control them. Typically, controlling systems must have knowledge of the OEM-defined commands implemented in each IPMI-controlled system. This is generally done by building a table of available commands for each possible controlled system into controlling system applications. This system tends to break down when there is a large variety of possible system configurations. It is desirable to implement an improved system whereby a controlling system can discover the commands implemented by a controlled system.","The IPMI specification also fails to provide a lock-unlock mechanism for accessing sensors having SDR size such that not all sensor information can be transferred in a single command response.","Introduction to SNMP","Simple Network Management Protocol (SNMP) is a protocol commonly used by a controlling computer system, known as a manager, to manage and control devices, such as switches and routers and known as agents, within a computer network. Agents are typically network interconnect devices, not server computers. SNMP typically operates through SNMP instructions and responses embedded in User Datagram Protocol (UDP) or Internet Protocol (IP) packets and transmitted over a computer network between the manager and the agents. No predetermined network connection is required between manager and agent, each SNMP command is typically encapsulated with manager and agent addresses and is transmitted independently across the network.","The SNMP protocol implements the following commands, which are be addressed by the manager to a particular agent:","get OID (retrieve operation)","get_next OID (traversal operation)","get_response OID (indicative operation)","set OID (alter operation)","trap","The get, get_next, get_response, and set operations of SNMP include an object identifier (OID). The OID is typically a sequence of integers. The OID is an identifier attached to these commands and is used to indicate a target variable, or object, within the agent. SNMP systems require implementation of a Management Information Block (MIB) datastructure of addressable objects within each agent. The MIB comprises multiple objects in a tree structure.","The present Application Programming Interface (API) provides a system and method for providing large numbers of sensor types having readable and writeable properties. The resulting enhanced IPMI can support powerful partitionable multiprocessor computer systems.","A pair of OEM commands are added to IPMI, these are a \u201cget property\u201d and a \u201cset property\u201d command. Each command is capable of reading or writing a large number of \u201cproperty\u201d records. Property records are of variable length, and are permitted to be greater than IPMI's maximum message length.","An OEM-defined SDR record type is also added; each instance of this SDR record type in the sensor data record repository contains information about a property record accessible on a particular machine.","In alternative embodiments, property data record may be larger than a maximum communication allowed under IPMI. A lock and unlock mechanism is provided to prevent conflicts between processes accessing the property records. Multiple copies of IPMI management software running on multiple controlling computers can therefore coexist simultaneously.","A computer system  () has a baseboard management controller (BMC) , one or several processor cells , . Processor cells ,  are of two or more ISA types.  is a detailed block diagram of a cell, such as cells ,  of . With reference to  and , processor cells ,  each have primary processors . Processor cells  embody primary processors of a first instruction set architecture (ISA) type, while processor cells  may embody processors of a second ISA type. For purposes of this document, a computer system is a heterogeneous computer system if it has primary processors of two or more ISA types, whether located on separate cells or not. In a particular embodiment, processor cells  embody processors  of the PA8800 type, while processor cells  embody processors  of the Intel Itanium type. In an embodiment, each cell has four primary processors, in another embodiment each cell has sixteen processors.","Cells of the system  are interconnected through high-speed interconnect . High-speed interconnect  provides for communications between cells. Some cells of the system  may also be coupled to I\/O (Input\/Output) interconnect . I\/O interconnect  provides a path for communication between cells of the system, such as cell , and I\/O devices . I\/O devices  may include disk drives and network interface devices, as well as other peripherals.","Each cell has one or more Satellite Management Controllers (SMCs) , that communicates with the BMC through one or more Intelligent Platform Management Busses (IPMB) . The BMC also has a connection  to permit a controlling computer to access the BMC via Intelligent Platform Management Interface (IPMI) commands. Management controller  is also coupled to control and monitor power supplies and fans , and other system devices. Power supply voltages and processor and power supply temperatures are monitored through analog to digital converters at the SMCs and BMC, with appropriate physical sensors such as thermistors.","In addition to primary processors , each cell  (), such as cells , , also has a memory system , and a high-speed interconnect interface device . In a particular embodiment, high speed interconnect interface device  includes crossbar switching circuits, bus bridging circuits, and memory control circuits. In an embodiment, high speed interconnect interface device  includes a protection domain register  for specifying a protection domain to which the cell is assigned. High speed interconnect interface device  interfaces processor busses, such as processor bus , from primary processors  to memory system , to at least one high-speed system interconnect , and I\/O interconnect .","Memory  of each cell is accessible from processors  of that cell, and from high speed interconnect . The high speed interconnect interface device  is capable of using protection domain register  to limit access to memory  by high speed interconnect  to references originating at cells assigned to the protection domain specified in protection domain register . Protection domains correspond to partitions of the system. Protection domain register  therefore enforces partitioning of the system by restricting memory access of memory  to cells of a particular partition.","A portion of system memory may be configured as Globally Shared Memory (GSM). In an alternative embodiment, a portion of memory  of one or more cells is configurable to serve as GSM memory. GSM memory is controlled through Coherency Set (CS) registers . The CS registers  include protection domain information whereby protection domains may be specified for each region of GSM memory. References to regions of GSM memory are rejected if they originate in processors assigned to protection domains, and hence partitions, other than those specifically permitted to access the region according to CS registers . These partitions allow the system to simultaneously run multiple operating systems in single or multiple copies.","In one embodiment, primary processors  of each cell each are large integrated circuits each having multiple CPUs (Central Processor Units) together with multiple levels of cache memory. In one version of this embodiment, each processor  has four CPUs. It is anticipated that the number of effective CPUs per processor  may be greater than four.","Each cell also has an SMC . SMC  is adapted for communication over IPMB . In a particular embodiment, SMC  controls cell-level cooling devices , and is capable of monitoring temperatures of the cells primary processors , as well as configuring CS registers . SMCs on cells have a cell type register  for indicating processor types on that cell.","Previously existing IPMI specifications lack adequate commands and sensor types to control CS registers , multiple high speed interconnect interfaces , protection domain registers , and other features of complex cellular, potentially heterogeneous, computer systems such as that illustrated. Complex systems like these are best managed with an enhanced IPMI having OEM-defined extended commands, sensor types, and sensor data records.","In the block diagram of a controlled system of , logical connections are illustrated between SDR records , , , also known as SDR objects, in the SDR repository  of the BMC  and property records , , also known as property objects, accessible to the BMC . Both the SDR repository  and property records ,  are accessible through the BMC  and its IPMI protocol interface  of the BMC. Property records ,  may be located in the BMC, may be located in any SMC  or any device of the system accessible to the BMC (at the system designer's option.","Shortly after a controlling computer (not shown) connects over an IPMI connection  to the controlled computer, it reads  () an SDR record count  from the SDR repository . Next, the controlling computer reads  the SDR records , ,  from the SDR repository, and determines sensor types associated with each SDR record , , .","While reading  the SDR records , , , the controlling computer finds  any property descriptor SDR records ,  in the SDR repository , and initializes  a property table in the controlling computer. Once SDR types have been determined  and the property table initialized, the controlling computer can monitor  the controlled system. The controlling computer then has the information necessary to control  the controlled computer through IPMI commands and writeable property records , .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 5","b":["302","304","302","502","504","308","302","508","104","510","512","514"]},"Each property SDR may contain one or more optional version identifiers  to allow versioning of property SDRs, property types and the property commands. This provides fine grained versioning control lacking in standard IPMI. SMCs of different revisions, accessible through the same BMC, may implement a property differently if they provide different property version numbers in the associated property SDR.","Property SDRs are implemented as nested variant records or objects with the property type being the variant selector. There are optional, additional, fields in the property SDR that may be present in some types of property SDRs.","When multiple-message-enable flag  is active, the associated property record  may be written or read with multiple messages. This multiple message read\/write capability permits support of property records  that exceed IPMI's maximum message transfer length.","When reading a property record with multiple messages, it is ordinarily possible for a property record to change between messages. In order to prevent changing records from causing confusion, properties are lockable with a Lock Property command, and unlockable with an Unlock Property command. Properties may be lockable or not lockable, those properties that are lockable are marked with a lockable flag  in the associated property instance descriptor SDR , .","Lockable properties may be read or written only if the get or set property command contains a valid access key. Two commands are provided to support locking: lock property and unlock property. A successful lock property command locks a specified property and returns an access key for use by a particular management utility running on a controlling computer to identify its commands as authorized. While a property is locked, it may not be locked a second time, further attempts to lock the property by the same or another controlling computer return an error status. Unlock property relinquishes the lock and invalidates the access key.","In alternate implementations, separate read and write locks may be implemented and multiple read locks allowed, thus permitting simultaneous reading of a property by multiple controlling computers.","A locked property is automatically unlocked when the property is set. Thus a successful set property command will automatically unlock the property, while a set property command that fails will not.","When a management utility running on a controlling computer accesses a property record , the management utility first checks  () its property table to determine if the property was marked lockable in the associated property instance descriptor SDR . If the property was not lockable, the management utility on the control computer issues  the get property or set property command required to access the property record. If the property was lockable, the controlling computer issues  a lock property command. If  the management controller granted lock, indicated by no error in status returned by the lock property command, the controlling computer issues a sequence of set property  or get property  commands as required to access the property record.","Since set property  commands act to unlock the property, if  the command issued is a set property command, no unlock property command  is required. If  the command issued was one or more get property  commands, an unlock property command  is issued.","If  the management controller did not grant lock, the controlling computer checks  a timestamp returned by the lock property command  to determine an elapsed time since the last successful lock property command referencing that particular property record . If  the time since the last successful lock property is greater than a timeout limit, the controlling computer issues an unlock  property command and retries the lock property command . If  the time since the last successful lock property command is less than the timeout limit, the controlling computer delays  and retries the lock property command .","In addition to one or more control computers, the BMC  may obtain a lock on a property to prevent a controlling computer from reading or changing the property while the BMC  is processing data associated with that property.","While the foregoing has been particularly shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that various other changes in the form and details may be made without departing from the spirit hereof. It is to be understood that various changes may be made in adapting the description to different embodiments without departing from the broader concepts disclosed herein and comprehended by the claims that follow:"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
