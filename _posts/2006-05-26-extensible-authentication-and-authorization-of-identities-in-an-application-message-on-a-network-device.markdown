---
title: Extensible authentication and authorization of identities in an application message on a network device
abstract: User credentials are validated within a network infrastructure element such as a packet data router or switch. The network element has authentication and authorization logic for receiving one or more packets representing an input application message logically associated with OSI network model Layer 5 or above; extracting user credentials from the one or more packets; authenticating an identity associated with the user credentials; authorizing privileges to the identity; and forwarding the application message to an intended destination if the identity is successfully authenticated and/or authorized. The authentication and authorization logic in the network element can invoke extension authentication and authorization methods that may be provisioned after the network element is deployed in a networked system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08613056&OS=08613056&RS=08613056
owner: Cisco Technology, Inc.
number: 08613056
owner_city: San Jose
owner_country: US
publication_date: 20060526
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["PRIORITY CLAIM","FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims the benefit under 35 U.S.C. 119(e) of prior provisional application 60\/692,715, filed Jun. 21, 2005, the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein.","The present invention generally relates to data processing techniques performed within network infrastructure elements such as routers and switches. The invention relates more specifically to techniques for authenticating and authorizing identities in an application message on a network device.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Software applications operating in a network environment exchange application messages. An \u201capplication message,\u201d or simply \u201cmessage\u201d, as used herein, refers to a message emitted or consumed by a software element that is logically located at Layer 5 or higher of the OSI reference model. Messages may be contained in more than one data frame, packet or segment. For simplicity, the term \u201cpacket\u201d is used to refer to a unit of organization under an internetworking protocol, such as data frame, packet or segment, at Layer 2, 3 or 4 of the OSI reference model.","Application end points such as clients and servers in a distributed system communicating over a network often need to authenticate users' credentials presented in an application message and, if the authentication succeeds, authorize the users for specific privileges for using system or application resources. Authentication and authorization usually is done by application end points. Application end points, or simply applications, are required to perform authentication and authorization operations relating to messages received. Under this approach, logic extracting user credentials from application messages is part of application processes. However, to perform the extraction, applications need to know specific details of application message formats such as where user credentials are stored.","Additionally, authentication or authorization logic often communicates with one or more authentication or authorization service providers or data stores. Thus, applications often need to know specific details of service providers or data stores such as where and how the user credentials extracted from messages can be compared with trusted user credentials kept by the service providers or data stores. To complicate the matter, some service providers or data stores may not be based on industry standards in providing the authentication or authorization related services.","Applications' needs for authentication and authorization may change. For example, service provider may change. An application may need to support LDAP, instead of Kerberos for authentication. Or an application may need to access a data store, instead of a service provider.","Furthermore, formats of application messages may change with respect to user credentials. User credentials may be specified in an application protocol header (say HTTP header) or SOAP header. Also they can come as a part of application message body in an application specific format, or in a payload.","Generally, in past approaches, in order to handle any of these changes, the implementation of the application has to be changed. This is time-consuming and requires significant resources in programming labor.","Further, in typical past approaches, the number of points at which authentication and authorization are performed is proportional to the number of application endpoints. This is a waste of application processing resources.","Also, in typical past approaches, authentication and authorization by an application can only authenticate and authorize based on user credentials present in an application message. Since the application typically is ignorant of what user credentials may present below OSI layer 5, authentication and authorization for such user credentials typically has to be performed elsewhere. An example of such user credentials is an SSL certificate. This results in a fragmented processing, waste of resources and potential inconsistent outcome.","An apparatus and method for extensible authentication and authorization of identities present in an application message on a network are described. In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","Embodiments are described herein according to the following outline:\n\n","The needs identified in the foregoing Background, and other needs and objects that will become apparent for the following description, are achieved in the present invention, which comprises, in one aspect, a data processing apparatus, comprising a plurality of network interfaces that are coupled to a data network for receiving one or more packets therefrom and sending one or more packets thereto; one or more processors; a switching system coupled to the one or more processors and packet forwarding logic, wherein the switching system and packet forwarding logic are configured to receive packets on a first network interface, determine a second network interface on which to send the packets, and to send the packets on the second network interface; a computer-readable storage medium having stored thereon a plurality of authentication methods and a policy that associates the authentication methods with respective message types; authentication and authorization logic comprising one or more stored sequences of instructions which, when executed by the one or more processors, cause the one or more processors to perform: receiving one or more packets representing an application message; determining a particular type of the application message; identifying one or more user credential elements in the one or more packets; selecting, based on the policy and the particular type of the application message, a particular authentication method, and validating the application message using the one or more user credential elements and the particular authentication method.","In one feature of this aspect, the one or more packets comprise one or more protocol headers, and wherein a subset of the one or more user credential elements is located in the one or more protocol headers. In another feature of this aspect, the application message comprises an application message header, and wherein a subset of the one or more user credential elements is located in the application message header.","In a further feature, the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform extracting an application message payload from the application message, and identifying a subset of the one or more user credential elements in the application message payload.","In still another feature, the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform forwarding an outgoing message associated with the application message to a destination.","In yet another feature, the computer-readable storage medium further comprises a plurality of user credential location definitions that specify locations of user credentials for various types of application messages, and wherein identifying one or more user credential elements includes selecting a particular user credential location definition and performing the identifying based on the particular user credential location definition.","In a further feature, the apparatus comprises any of a packet data router and a packet data switch in a packet-switched network.","In another aspect, the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform authenticating an identity associated with the one or more user credential elements. In one feature of this aspect, the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform executing the particular authentication method by sending the user credentials to an authentication service provider and requesting authentication of the user credentials.","In another feature, the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform authorizing one or more privileges associated with the identity. In one version of this feature, the computer-readable medium has stored thereon a plurality of authorization methods, wherein the policy associates the authorization methods with the respective message types, and wherein the authentication and authorization logic further comprises sequences of instructions which, when executed by the processor, cause the processor to perform selecting, based on the policy and the particular type of the application message, a particular authorization method, and executing the particular authorization method by sending the identity to an authorization service provider and requesting authorization of the one or more privileges associated with the identity.","In other aspects, the invention encompasses a machine-implemented method and a computer-readable medium configured to carry out the foregoing steps.","2.0 Structural and Functional Overview",{"@attributes":{"id":"p-0034","num":"0042"},"figref":["FIG. 1A","FIG. 1B"]},"Referring first to , a sender  is coupled through a network  to a receiver . The network  comprises one or more network infrastructure elements , such as routers or switches. Each of the network elements  comprises one or more blades, bladelets, or other software elements, alone or in combination with hardware or firmware elements, that implement inspection, at various OSI layers, of packets received in association with an application message and related authentication and authorization functions as described herein.","A commercial embodiment of network elements A may comprise routers or switches from Cisco Systems, Inc., San Jose, Calif., with blades having Application-Oriented Networking Services (AONS) capabilities. In some embodiments, network elements A are termed \u201cAONS nodes\u201d or \u201cAONS endpoints.\u201d Other network elements B may be non-AONS nodes. Further, network elements A need not use Cisco AONS technology; the network elements can comprise routers or switches that comprise other internal elements to perform extensible authentication and authorization functions as described herein. Thus, the use of AONS in an embodiment is not required, and all references herein to AONS elements are provided merely to illustrate a clear example, and not as limitations.","In an embodiment, the validation of an application message by network elements A involves accessing an authentication service provider A and an authorization service provider B.","The authentication service provider A may implement either standard-based or proprietary technology-based authentication services. Similarly, the authorization service B may implement either standard-based or proprietary technology-based authorization services. Examples of the standard-based authentication or authorization service providers include those based on LDAP, Kerberos, X509, or SAML. In some embodiments, authentication or authorization service providers such as A or B may comprise database access routines and a database storing user credential and privilege information. Furthermore, in some embodiments, an authentication service provider and an authorization service provider can comprise a single authentication and authorization server.","As seen in , sender  is coupled through a local network  to an internetwork  that is coupled to another local network . Either of the local networks  and  may have network elements  that implement the techniques herein. As an example, router A in local network  is equipped with an AONS blade , available from Cisco Systems, Inc. San Jose, Calif. The AONS blade  comprises one or more bladelets that form authentication and authorization logic . In certain embodiments all the network elements  include authentication and authorization logic , which comprises one or more computer programs, programmatic objects, or other software elements that implement the functions described herein.","Generally, the authentication and authorization logic  identifies user credentials in an application message. Examples of user credentials are peer SSL certificates, HTTP basic authentication scheme and parameters, or HTTP negotiate authentication data from message headers, and user\/password token, SAML token, SPNEGO token or X509 token from a message body.","The authentication and authorization logic  performs authentication and authorization based on the user credentials that were identified. If the authentication and authorization of the application message succeeds, the application message is processed according to a policy. For example, the message is forwarded to a receiving application server A. Thus, in the arrangement of , router  is proximate to the receiving application servers A, and can perform authentication and authorization for all the application servers. For example, sender , and other senders at different locations in networks , , might send different requests to different instances of applications on different application servers A. The authentication and authorization logic  can perform application message authentication and authorization for all such requests, relieving the application instances and application servers A from the processing burden of authentication and authorization for each request.","Alternatively, if router  is located in local network , the router can perform application message authentication and authorization when sender  emits messages and before the messages reach the application servers A. In all such cases, the data processing efficiency of the application servers A is greatly improved because router  is responsible for message authentication and authorization, and the application servers are responsible only for performing substantive application functions.","When an application message authentication and authorization operation is performed in a network device, the operation can be performed on a device that is closer to the application that is sending the message or the application that is receiving the message. As a result, if there are multiple instances of an application running, possibly on different hosts, then a single device through which all the messages are passing can perform the needed authentication and authorization. Accordingly, efficiency of the overall network is improved.","In some embodiments, extensible authentication and authorization is provided by using a user configurable policy. In this approach, the user configurable policy specifies how an incoming message should be authenticated or authorized.","In one embodiment, through a user interface, a user is enabled in the user configurable policy to define a plurality of message types and associations each of which associates between a particular authentication method with a corresponding message type. In one embodiment, the policy is created at design time in advance of message processing, based on known characteristics of incoming messages and outgoing messages. The policy associates authentication methods or authorization methods with respective message types. The policy can also associate user credential location definitions that specify locations of user credentials with respective message types. For example, the policy can be created using AONS Design Studio (ADS), and downloaded to an AONS node via AONS Management Console (AMC). An ADS designer can select an authentication method for a message type among LDAP and Kerberos SPNEGO, X509 Certificate based authentication methods and extension authentication methods provided by extension packages, as further explained herein. Similarly, the ADS designer can select an authorization method for the message type among LDAP Group-, SAML Assertion-, and Rule-based methods and extension authorization methods provided by extension packages. During runtime, the authentication and authorization logic  retrieves the policy and an incoming message. The authentication and authorization logic  determines the application message type, identifies user credentials in the message, validates the incoming message by applying associated authentication and authorization methods, and, if successful, directs other elements of the network element A to process the message according to a success policy, e.g., to forward the message on a path to a receiving application server A.",{"@attributes":{"id":"p-0046","num":"0054"},"figref":"FIG. 2","b":["108","116","108","206","208","210","206","208","210"]},"Upon receiving an incoming message  on any network interface of the router, the credential extraction  inspects the message. Credential extraction  has access to user credential location definitions for various application message types. In a preferred embodiment, credential extraction  makes use of existing components in the network infrastructure element A that allow extraction or identification in packets associated with an application message of fields in various OSI layers. The search of user credential fields may be conducted on headers, data, or payloads at standard locations or non-standard locations, and additionally or alternatively, using name-value pairs or regular expressions. In one embodiment, credential extraction  identifies user credentials or a subset thereof in locations specified by standards. In another embodiment, the credential extraction identifies the user credentials or a subset thereof based on user credential location definitions for the message type. In yet another embodiment, credential extraction  identifies the user credentials from both locations identified by the standards and by the user credential location definitions.","Credential validation  authenticates an identity associated with the user credentials. In a preferred embodiment, credential validation  comprises a validator  for built-in authentication methods and an extension validator  for non built-in authentication methods, which may be developed before or after the network infrastructure element A is deployed. For the built-in authentication methods, a user or policy specifies which one is to be used for a particular application message type. For example, the authenticate bladelet embodiment of credential validation  in an AONS bladelet has built-in authentication methods based on LDAP, Kerberos SPNEGO or X509 Certificate.","The extension validator  can be configured to invoke an extension authentication  in extension packages  for authentication methods that do not have built-in support. The extension packages  for non built-in authentication methods may be deployed before or after the installation of the router A in a network. In a preferred embodiment, the authentication and authorization logic  does not require the presence of a particular extension package  unless a corresponding non built-in authentication method is to be supported. However, when a non built-in authentication method is to be supported at runtime, the extension validator  is configured accordingly and the extension authentication  is provisioned to the network infrastructure element A.","An extension authentication  can be developed in a programming language that makes use of application programming interfaces (APIs) to support a particular authentication method. For example, an extension authentication can be developed in JAVA that makes use of SiteMinder JAVA Agent APIs, available from Computer Associates, Inc. (\u201cCA\u201d), to support the SiteMinder Authentication. In a preferred embodiment, the configuration that directs the extension validator  to use the extension authentication thus developed can be specified in AONS Design Studio. Both the configuration and the extension authentication can be provisioned to the network infrastructure element A to form an extension package  before its use by the extension validator  at runtime. In a preferred embodiment, the configuration and the extension package can be pre-packaged into a downloadable file in AONS Design Studio, and subsequently downloaded to an AONS node.","When the extension authentication  is invoked, it is made available all the required and optional parameters by the authentication and authorization logic . The extension authentication  reads configuration parameters relevant to accessing an authentication service provider or a database that stores necessary information for authentication. In some embodiments, the parameter list, values, and access routines for parameters are configured for a particular authentication method and authentication service provider in authentication and authorization logic . In a preferred embodiment, the parameter list, values, and access routines for parameters can be pre-packaged into a downloadable file in AONS Design Studio, and subsequently downloaded to an AONS node. For example, as a part of extension configuration in AMC, a user configures necessary and optional parameters including those required for connecting to an authentication service provider such as SiteMinder Policy Server from CA.","At runtime, the extension authentication  uses the parameters, performs the authentication method, and returns the result to its caller.","The credential authorization  can be invoked to authorize privileges to an identity associated with the user credentials. In a preferred embodiment, the credential authorization  comprises an authorizer  for built-in authorization methods and an extension authorizer  for non built-in authorization methods, which may be developed later. For the built-in authentication methods, a user or policy specifies which one is to be used for a particular application message type. For example, the authorize bladelet embodiment of credential authorization  in an AONS bladelet has built-in authorization methods based on LDAP Groups, SAML Assertions or rules.","The extension authorizer  can be configured to invoke an extension authorization  in extension packages  for authorization methods that do not have built-in support. The extension packages  for non built-in authorization methods may be deployed before or after the installation of the router A in a network. In a preferred embodiment, the authentication and authorization logic  does not require a particular extension package  unless a corresponding non built-in authorization method is to be supported. However, when a non built-in authorization method is to be supported at runtime, the extension authorizer  is configured accordingly and the extension authorization  is transferred to the network infrastructure element A.","An extension authorization  can be developed in a programming language that makes use of application programming interfaces (hereinafter APIs) to support a particular authorization method. For example, an extension authorization can be developed in JAVA that makes use of SiteMinder JAVA Agent APIs to support SiteMinder Authorization. In a preferred embodiment, the configuration that directs the extension authorizer  to use the extension authorization thus developed can be specified in AONS Design Studio. Both the configuration and the extension authorization can be provisioned to the network infrastructure element A to form an extension package  before its use by the extension authorizer  at runtime. In a preferred embodiment, the configuration and the extension package can be pre-packaged into a downloadable file in AONS Design Studio, and subsequently downloaded to an AONS node.","When the extension authorization  is invoked, it is made available all the required and optional parameters by the authentication and authorization logic . The extension authorization  reads configuration parameters relevant to accessing an authorization service provider or a database that stores necessary information for authorization. In some embodiments, the parameter list, values, and access routines for parameters are configured for a particular authorization method and authorization service provider in authentication and authorization logic . In a preferred embodiment, the parameter list, values, and access routines for parameters can be pre-packaged into a downloadable file in AONS Design Studio, and subsequently downloaded to an AONS node. For example, as a part of extension configuration in AMC, a user configures necessary and optional parameters including those required for connecting to an authorization service provider such as SiteMinder Policy Server from CA.","At runtime, the extension authorization  uses the parameters, performs the authorization method, and returns the result.","If the authentication and authorization tasks complete successfully, the authentication and authorization logic  directs the application message to a receiving application server A.","Thus, the extension validator , extension authorizer , extension package , which may include extension authentication  or extension authorization , represent an extensibility mechanism for the authentication and authorization logic .","There may be multiple extension packages  deployed in a network infrastructure element A. In various embodiments, an extension package  may provide support for authentication only, or for authorization only, or both. Thus, the SiteMinder extension package, discussed above, which supports both authentication and authorization, is described solely to present a clear example and not as a limitation. Furthermore, an extension package  may provide support for authentication and\/or authorization using service providers other than SiteMinder as discussed. In one embodiment, authentication and\/or authorization service is provided by Tivoli Access Manager from International Business Machine Corp., Armonk, N.Y. Thus, network elements A need not depend on a particular authentication and\/or authorization service provider such as SiteMinder. Any authentication and\/or authorization provider that is capable of performing authentication and authorization service upon a request by an extension package described herein is within the scope of the present invention. Thus, the use of SiteMinder in an embodiment is not required, and all references herein to SiteMinder are provided merely to illustrate a clear example, and not as limitations.","In an embodiment, support for a new authentication or authorization method by the network infrastructure element A can be disabled or enabled without requiring changes in implementation or re-building of the network infrastructure element code. In this embodiment, a user can easily enable or disable a method for business reasons, such as a change in a business partner relationship involving an authentication or authorization service provider. Also, a supplier for network infrastructure element A may need to enable or disable support for a specific method based on a licensing agreement or possibly different product bundling needs.",{"@attributes":{"id":"p-0062","num":"0070"},"figref":"FIG. 3","b":["302","108"]},"At step , for each incoming message received from a data network coupled to the network infrastructure element A, certain other steps are performed. In step , the type of the application message is determined by the network infrastructure element A. The type of an application message may be determined on a number of attributes carried by the application message or the underlying packets associated with the application message. Attributes capable of identifying application message types include endpoints' addresses or ports, universal resource locations (URL) at HTTP level, special fields in the message, or regular expression patterns. Additionally or alternatively, attributes capable of identifying application include any standard or proprietary tokens embedded in a message or underlying packet that identifies a particular type for an application message. For example, a string constant denoting an application name may be embedded in an application message in a proprietary manner to identify a particular application type.","If the incoming message is not a type that has been configured for authentication and authorization, in step , the authentication and authorization logic passes the message to logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination. If the incoming message is a type of an application message that has been configured for authentication and authorization, in step , the credential extraction  determines whether user credential location definitions should be consulted. For a plurality of application message types, the user credentials may be located in standard locations. In step , the credential extraction  identifies the user credentials in those standard locations. For some application message types, on the other hand, the user credentials may be located in a proprietary locations or non-standard locations. In step , a user credential location is selected for definitions corresponding to one such application message type as appropriate and, in step , the user credentials in those locations are identified.","If step  determines that the identification of user credential has failed, then error handling is invoked at step . The error handling may include logging the error and suppressing the erroneous message from being further forwarded to its intended destination. If the identification of use credential is successful as determined at step , then the credential validation  is invoked, and at step , the process determines whether a built-in or extension authentication method is associated with the message type. If the incoming message is of a type that associates with an extension authentication method, then at step , processing is passed to the extension validator , which handles invocation of the extension authentication method provided by extension authentication  in extension package , and which passes all the parameters necessary or optional for the invocation of the extension authentication method. If the incoming message is of a type that associates with a built-in authentication method, at step , then processing is passed to the validator  for executing the specified built-in authentication method.","At step , the credential validation  determines the result of the authentication method, whether it is built-in or extension. If the authentication method has failed to authenticate the identity, processing is passed to step  for error handling. If the user identity associated with user credentials has been successfully authenticated, then credential authorization  is invoked, and at step  determines whether an authorization method has been specified for the message type. If not, the authentication and authorization logic passes the message at step  to logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination.","If the incoming message is of a type that associates with an extension authorization method, at step , processing is passed to the extension authorizer , which handles invocation of the extension authorization method provided by extension authorization  in extension package , and which passes all the parameters necessary or optional for the invocation of the extension authorization method. If the incoming message is of a type that associates with a built-in authorization method, at step , processing is passed to the authorizer  for executing the specified built-in authorization method.","At step , the credential authorization  determines the result of the authorization method, whether it is built-in or extension. If the authorization has failed to authorize privileges required for the application message type for the identity for whatever reason, processing is passed to step  for error handling. Else if the user identity associated with user credentials has been successfully authorized for the privileges required for the application message type, the authentication and authorization logic passes the message at step  to a logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination.","3.0 AONS Implementation Examples","3.1 AONS General Overview","In an embodiment, AONS comprises a set of software modules hosted on a network infrastructure element, such as a router or switch, that can identify application messages from packet flows, perform operations on the applications messages, and perform application functions on behalf of applications, clients and servers. Examples of operations and functions include format transformation; payload changes based on policy; performing load-balancing decisions; sending messages to monitoring stations; and creating log entries, notifications and alerts according to rules. AONS complements existing networking technologies by providing a greater degree of awareness of what information is flowing within the network and helping users to integrate disparate applications by routing information to the appropriate destination, in the format expected by that destination; enforce policies for information access and exchange; optimize the flow of application traffic, both in terms of network bandwidth and processing overheads; provide increased manageability of information flow, including monitoring and metering of information flow for both business and infrastructure purposes; and provide enhanced business continuity by transparently backing up or re-routing critical business data.","AONS integrates with network-layer support to provide a more holistic approach to information flow and management, mapping required features at the application layer into low-level networking features implemented by routers, switches, firewalls and other networking systems. In an embodiment, a data processing unit (\u201cblade\u201d) in a router or switch hosts and executes one or more AONS software modules (\u201cbladelets\u201d) to implement the functions herein.","3.2 Multi-Blade Architecture","According to one embodiment, an AONS blade in a router or a switch performs the actions discussed herein.",{"@attributes":{"id":"p-0074","num":"0082"},"figref":"FIG. 4","b":["110","402","410","406","110","402","116","406","402","116","406","402","116","406","110","110","110","110","110"]},"Router A receives packet flows such as packet flows A-B. More specifically, packet flows A-B received by router A are received by supervisor blade . Supervisor blade  may comprise a forwarding engine and\/or a route processor such as those commercially available from Cisco Systems, Inc.","In one embodiment, supervisor blade  classifies packet flows A-B based on one or more parameters contained in the packets of those packet flows. If the parameters match specified parameters, then supervisor blade  sends the packets to a specified one of AONS blade  and\/or other blades A-N. Alternatively, if the parameters do not match any specified parameters, then supervisor blade  performs routing functions relative to the particular packet and forwards the particular packet on toward the particular packet's destination.","For example, supervisor blade  may determine that packets in packet flow B match specified parameters. Consequently, supervisor blade  may send packets in packet flow B to AONS blade . Supervisor blade  may receive packets back from AONS blade  and\/or other blades A-N and send the packets on to the next hop in a network path that leads to those packets' destination. For another example, supervisor blade  may determine that packets in packet flow A do not match any specified parameters. Consequently, without sending any packets in packet flow A to AONS blade  or other blades A-N, supervisor blade  may send packets in packet flow A on to the next hop in a network path that leads to those packets' destination.","AONS blade  and other blades A-N receive packets from supervisor blade , perform operations relative to the packets, and return the packets to supervisor blade . Supervisor blade  may send packets to and receive packets from multiple blades before sending those packets out of router A. For example, supervisor blade  may send a particular group of packets to other blade A. Other blade A may perform firewall functions relative to the packets and send the packets back to supervisor blade . Supervisor blade  may receive the packet from other blade A and send the packets to AONS blade . AONS blade  may perform one or more message payload-based operations relative to the packets and send the packets back to supervisor blade .","3.3 AONS Blade Message Processing Framework",{"@attributes":{"id":"p-0080","num":"0088"},"figref":"FIG. 5","b":["116","116","502","504","506","508","502","510","512","514","504","510","508","512","506","506","514","510","514"]},{"@attributes":{"id":"p-0081","num":"0089"},"figref":"FIG. 6","b":["116","602","602"]},"In one embodiment, executing the flow comprises executing each step (i.e., bladelet\/action) of the flow. If a bladelet is to be run within a separate context, then AMEC framework  may enqueue into bladelet-specific queues, and, based on thread availability, dequeue appropriate bladelet states from each bladelet queue.","3.4 Extension Package Implementation","In one embodiment, the following tools are provided for creating extension package for authentication and authorization in an AONS node: a custom bladelet software development kit (hereinafter \u201cCustom Bladelet SDK\u201d), a design studio, or ADS, and an admin tool, or AMC, all commercially available from Cisco Systems, Inc. A designer uses Cisco Custom Bladelet SDK, java editor, or other third party tools to write Java code that will provide bladelet functionality. ADS is a visual tool for designing flows and applying message classification and mapping policies. AMC is a web-based interface to perform all administration and configuration functions.",{"@attributes":{"id":"p-0085","num":"0093"},"figref":"FIG. 7","b":"702"},{"@attributes":{"id":"p-0086","num":"0094"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"AUTHENTICATION AND AUTHORIZATION API"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Method","Description","Return Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AAHandlerFactory"},{"entry":"This interface defines an Authentication\/Authorization Handler Factory object. This is"},{"entry":"implemented by an Authentication and Authorization Extension that intends to extend"},{"entry":"authentication and authorization function in AON. Class name in Authentication and"},{"entry":"Authorization Extension Package that implements this interface is specified in"},{"entry":"Authentication and Authorization Extension Meta Info."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["createHandler","This method creates an AAHandler","AAHandler"]},{"entry":[{},"object. This method must be implemented by"]},{"entry":[{},"extensions in a thread safe manner."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AAHandler"},{"entry":"This interface defines methods for authentication and authorization function. Objects that"},{"entry":"implement this interface are created by AAHandlerFactory. The authentication and"},{"entry":"authorization logic 108 invokes AAHandlerFactory and creates AAHandler objects."},{"entry":"These objects are then used to handle authenticate and authorize requests made by"},{"entry":"respective bladelets when corresponding extension is selected in the bladelet."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Authenticate","This method performs authentication. It","AuthenticationResult"]},{"entry":[{},"takes a collection of parameters"]},{"entry":[{},"(name\/value pairs) that defines an"]},{"entry":[{},"execution context. It contains all the"]},{"entry":[{},"configuration parameters specified in"]},{"entry":[{},"extension configuration in the bladelet."]},{"entry":["Authorize","This method performs authorization. It","AuthorizationResult"]},{"entry":[{},"takes a collection of parameters"]},{"entry":[{},"(name\/value pairs) that defines an execution"]},{"entry":[{},"context. It contains all the configuration"]},{"entry":[{},"parameters from extension"]},{"entry":[{},"configuration in authorization bladelet."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AuthenticationResult"},{"entry":"This class defines result of authentication operation. It contains result code and a"},{"entry":"collection of attribute values provided by the authenticator."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["getResultCode","This method returns the result code of the","Integer"]},{"entry":[{},"authentication result. If the result code is"]},{"entry":[{},"AUTHC_SUCCESS it indicates"]},{"entry":[{},"authentication success and if it is"]},{"entry":[{},"AUTHC_FAILURE it indicates"]},{"entry":[{},"authentication failure."]},{"entry":["getAttributes","This method returns a collection of","HashMap"]},{"entry":[{},"attribute value pairs returned as a result of"]},{"entry":[{},"authentication. This can provides"]},{"entry":[{},"attributes which are specific to extension"]},{"entry":[{},"implementation and may or may not be"]},{"entry":[{},"used by AON. It can also return attributes"]},{"entry":[{},"that AON may request the extension to"]},{"entry":[{},"provide if the operation results in"]},{"entry":[{},"authentication success."]},{"entry":[{},"One example of this could be an"]},{"entry":[{},"authenticator may supply a mapped"]},{"entry":[{},"identity of the user being authenticated."]},{"entry":[{},"Another example could be an option if the"]},{"entry":[{},"result of authentication can be cached and"]},{"entry":[{},"if so for how long a duration they can be"]},{"entry":[{},"cached."]},{"entry":[{},"These attribute names\/values that AON"]},{"entry":[{},"can handle will be documented as"]},{"entry":[{},"required."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"AuthorizationResult"},{"entry":"This class defines result of authorization operation. It contains result code and"},{"entry":"a collection of values provided by the authorizer."}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["getResultCode","This method returns the result code of the","Integer"]},{"entry":[{},"authorization result. If the result code is"]},{"entry":[{},"AUTHZ_PERMIT it indicates access"]},{"entry":[{},"requested is permitted and if it is"]},{"entry":[{},"AUTHZ_DENIED it indicates access"]},{"entry":[{},"requested is denied."]},{"entry":["getAttributes","This method returns a collection of","HashMap"]},{"entry":[{},"attribute value pairs returned as a result of"]},{"entry":[{},"authorization."]},{"entry":[{},"An example of an attribute value can be if"]},{"entry":[{},"operation failed the reason for failure, or if the"]},{"entry":[{},"authorization is denied then"]},{"entry":[{},"explanation of access denial."]},{"entry":[{},"These attribute names\/values that AON"]},{"entry":[{},"can handle will be documented as required."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"At step -, the designer  interacts with ADS  and creates an authentication\/authorization extension package. As a part of creating the package, the designer  provides a number of artifacts. First, the designer  provides one or more JAVA *.jar files implementing an extended authentication method and necessary libraries. For example, in case of a SiteMinder extension, the designer  provides the jar files implementing a SiteMinder Java Agent functionality and a number of library files referenced directly or indirectly by the SiteMinder Java Agent such as smjavaagentapi.jar, smjavasdk2.jar, libsmagentapi.so and libsmjavaagentapi.so for SiteMinder Release 5.5, commercially available from CA.","Additionally, the designer  provides bladelet extension info XML files for the custom bladelets, using bladelet extension info schema defined in Cisco Custom Bladelet SDK. Table 2 shows an example bladelet extension info XML file for SiteMinder authentication that can be used in an implementation.",{"@attributes":{"id":"p-0089","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"AN EXAMPLE BLADELET EXTENSION INFO XML FILE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<plugin displayNameKey=\u201caaext.siteminder\u201d"},{"entry":"\u2003id=\u201ccom.cisco.aons.security.aaext.SMAAExtPlugin\u201d"},{"entry":"\u2003version=\u201c1.0\u201d"},{"entry":"\u2003provider-name=\u201cCisco System, Inc.\u201d"},{"entry":"\u2003pluginClass=\u201ccom.cisco.aons.security.aaext.SMAAExtension\u201d"},{"entry":"\u2003bundle=\u201ccom.cisco.aons.security.aaext.SMAAExtProperties\u201d>"},{"entry":"\u2003<extension point=\u201cAuthentication:1.ext_config_type\u201d"},{"entry":"\u2003\u2003\u2003extClass=\u201ccom.cisco.aons.security.aaext.SMAAHandlerFactory\u201d"},{"entry":"\u2003\u2003\u2003extValidationClass=\u201ccom.cisco.aons.security.aaext.validator.-"},{"entry":"\u2003\u2003\u2003SMAAValidator\u201d"},{"entry":"\u2003\u2003\u2003displayNameKey=\u201caaext.siteminder\u201d"},{"entry":"\u2003\u2003\u2003id=\u201cSMAuthentication\u201d>"},{"entry":"\u2003\u2003<designSpec>"},{"entry":"\u2003\u2003<extParams>"},{"entry":"\u2003\u2003\u2003<extParam id=\u201c1\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<configuration-group name=\u201cConfigurationType\u201d"},{"entry":"\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003value=\u201cextension\u201d valueKey=\u201ccg.authnscheme.extension\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003type=\u201cradio\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<configuration-subgroup>"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003<parameter-group name=\u201cExtensionSubjectSource\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme.extension.pg.source\u201d>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<parameter name=\u201cExtensionSubject\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003designName=\u201cextension.source.input\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme.extension.pg.source.p.input\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003type=\u201cAONSSubject\u201d allowUserInput=\u201cfalse\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/parameter-group>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<parameter-group name=\u201cExtensionConfiguration\u201d"},{"entry":"\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme.extension.pg.configuration\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<parameter name=\u201cExtensionResource\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003designName=\u201cextension.configuration.resource\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme.extension.pg.extensionconfiguration.p.-"},{"entry":"\u2003\u2003\u2003\u2003\u2003resource\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003type=\u201cstring\u201d allowUserInput=\u201ctrue\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003allowVarBinding=\u201ctrue\u201d\/>"},{"entry":"\u2003\u2003\u2003\u2003<parameter name=\u201cProfile\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003designName=\u201cextension.configuration.profile\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003key=\u201ccg.authnscheme.extension.pg.configuration.p.profile\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003type=\u201cpolicy\u201d allowUserInput=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003allowVarBinding=\u201cfalse\u201d"},{"entry":"\u2003\u2003\u2003\u2003\u2003domain=\u201ccom.cisco.aons.policies.security.-"},{"entry":"\u2003\u2003\u2003\u2003\u2003NeteSiteMinderInfo\u201d>"},{"entry":"\u2003\u2003\u2003\u2003<\/parameter>"},{"entry":"\u2003\u2003\u2003\u2003\u2003<\/parameter-group>"},{"entry":"\u2003\u2003\u2003\u2003<\/configuration-subgroup>"},{"entry":"\u2003\u2003\u2003<\/extParam>"},{"entry":"\u2003\u2003<\/extParams>"},{"entry":"\u2003\u2003<\/designSpec>"},{"entry":"\u2003<\/extension>"},{"entry":"<\/plugin>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The designer  further provides parameters that are needed to perform the extension authentication and authorization method. The parameters may be defined by an attribute domain. Table 3 shows an example attribute domain for SiteMinder authentication that can be used in an implementation.",{"@attributes":{"id":"p-0091","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE 3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE ATTRIBUTE DOMAIN"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["No","Parameter\/Property","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Access Server","Specifies IP Address of SiteMinder Policy Server."]},{"entry":["2","Agent Name","Name of Web Agent configured in the Policy Server."]},{"entry":["3","Agent Secret","Password or secret for the agent. This is needed to connect"]},{"entry":[{},{},"to the agent object in Policy Server."]},{"entry":["4","Minimum no of connection","Agent API object is initialized with minimum no of"]},{"entry":[{},{},"connections. It creates these connections to SM Policy"]},{"entry":[{},{},"Server when it is initialized."]},{"entry":["5","Maximum no of connection","Indicates the maximum no of connections Agent API will"]},{"entry":[{},{},"create."]},{"entry":["6","Connection Step","Indicates the number by which connections are increased if"]},{"entry":[{},{},"Agent API needs to increase number of connections to SM"]},{"entry":[{},{},"Policy Server. Total number of connections does not"]},{"entry":[{},{},"exceed the value specified in 5."]},{"entry":["7","Connection Timeout in","This value is used as a timeout when any authentication or"]},{"entry":[{},"seconds","authorization call is made on Agent API object."]},{"entry":["8","Authentication Port","Indicates the value of authentication port configured on"]},{"entry":[{},{},"SM Policy Server. SM 5.5 Policy Server can configure a"]},{"entry":[{},{},"specific port value to use for authentication service. For"]},{"entry":[{},{},"SM 6.0 default can be used."]},{"entry":["9","Authorization Port","Indicates the value of authorization port configured on SM"]},{"entry":[{},{},"Policy Server. SM 5.5 Policy Server can configure a"]},{"entry":[{},{},"specific port value to use for authorization service. For SM"]},{"entry":[{},{},"6.0 default can be used."]},{"entry":["10","Accounting Port","Indicates the value of accounting port configured on SM"]},{"entry":[{},{},"Policy Server. SM 5.5 Policy Server can configure a"]},{"entry":[{},{},"specific port value to use for accounting service. For SM"]},{"entry":[{},{},"6.0 default can be used."]},{"entry":["11","Failover SM Policy Server","Specifies IP Address of Failover SM Policy Server to use."]},{"entry":[{},"Address"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"Note:"},{"entry":"Properties in rows 4, 5, 6, 7, 8, 9, 10 are provided for Failover SM Policy Server also."}]}}]}}},"In one embodiment, the authentication\/authorization extension package created with the above artifacts is saved as a bar file on a disk.","At step -, an administrator  uploads and registers the authentication\/authorization extension package to AMC . Once loaded and registered, the authentication\/authorization extension package is available for use in ADS.","At step -, the designer  causes ADS  to synchronize with AMC  to retrieve the authentication\/authorization extension package which has been enabled and made available by the AMC uploading and registering step -.","At step -, the designer  continues his or her designing tasks of defining message flows between bladelets, message types, user credential location definitions, and any associations of user credential location definitions with the message types.","At step -, the administrator  causes AMC  to synchronize with ADS  to retrieve the flows, message types, user credential location definitions, and associations defined in step -.","At step -, the administrator  deploys to an AON blade  the extension package, and a policy comprising of the message flows, message types, user credential location definitions and associations of the user credential location definitions with the message types, and enable the AON blade  to use the authentication\/authorization method available in the extension package.","4.0 Implementation Mechanisms\u2014Hardware Overview",{"@attributes":{"id":"p-0098","num":"0106"},"figref":"FIG. 8","b":["800","800"]},"Computer system  includes a bus  or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM), flash memory, or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk, flash memory or optical disk, is provided and coupled to bus  for storing information and instructions.","A communication interface  may be coupled to bus  for communicating information and command selections to processor . Interface  is a conventional serial interface such as an RS-232 or RS-422 interface. An external terminal  or other computer system connects to the computer system  and provides commands to it using the interface . Firmware or software running in the computer system  provides a terminal interface or character-based command interface so that external commands can be given to the computer system.","A switching system  is coupled to bus  and has an input interface  and an output interface  to one or more external network elements. The external network elements may include a local network  coupled to one or more hosts , or a global network such as Internet  having one or more servers . The switching system  switches information traffic arriving on input interface  to output interface  according to pre-determined protocols and conventions that are well known. For example, switching system , in cooperation with processor , can determine a destination of a packet of data arriving on input interface  and send it to the correct destination using output interface . The destinations may include host , server , other end stations, or other routing and switching devices in local network  or Internet .","The invention is related to the use of computer system  for extensible authentication and authorization in a network infrastructure element. According to one embodiment of the invention, extensible authentication and authorization in a network infrastructure element is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. One or more processors in a multi-processing arrangement may also be employed to execute the sequences of instructions contained in main memory . In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to bus  can receive the data carried in the infrared signal and place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Communication interface  also provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for extensible authentication and authorization in a network infrastructure element as described herein.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","5.0 Extensions and Alternatives","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","The preceding description has disclosed an approach for performing extensible authentication and authorization in a network device. The approach herein provides an improved authentication and authorization approach because a network device is more efficient in performing extended authentication or authorization methods, which may be deployed even after the network device has been installed.","The approach herein has numerous benefits over prior approaches. For example, the approach reduces the number of processing locations at which a message is authenticated or authorized. Application endpoints are not required to perform authentication or authorization. As a result, application resources can focus on core application functions, rather than implementing authentication and authorization logic in a fragmented manner.","The approach herein is useful for any network gear vendor that needs mechanisms to provide authentication and authorization capability in a networking device to enable better security."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
