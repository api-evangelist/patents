---
title: Scaling composite shapes for a graphical human-machine interface
abstract: Parameters associated with sub-elements of a composite shape may determine how the sub-element is scaled during resizing of the composite shape. A graphical display editor may use the scaling parameters to calculate various scaling factors that are then applied to the sub-elements of each composite shape during resizing. The editor may apply the scaling parameters to the sub-elements for resizing in one or more axes (e.g., the length, width, and height or X, Y, and Z axes, etc.) to adjust the composite shape for a particular graphical display. The editor may apply the scaling parameters directly to each sub-element to prevent any distortion of those sub-elements. The configured scaling parameters may then be linked to the composite shape so that, at runtime, the parameters are applied to the composite shape and its sub-elements. The scaling parameters may be applied to both composite shapes and animations associated with the composite shapes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881039&OS=08881039&RS=08881039
owner: Fisher-Rosemount Systems, Inc.
number: 08881039
owner_city: Round Rock
owner_country: US
publication_date: 20090505
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","DESCRIPTION OF THE RELATED ART","SUMMARY OF DISCLOSURE","DETAILED DESCRIPTION"],"p":["This application is a continuation-in-part of application Ser. No. 12\/403,812, entitled \u201cScaling Composite Shapes for a Graphical Human-Machine Interface,\u201d which was filed on Mar. 13, 2009, the entire contents of which are expressly incorporated by reference herein.","The present invention relates generally to process plants and, more particularly, to the scaling of composite shapes in an editor for graphical representations of components and various activities associated with plant configuration, control, maintenance, and simulation.","Distributed process control systems, like those used in chemical, petroleum or other processes, typically include one or more process controllers communicatively coupled to one or more field devices via analog, digital or combined analog and digital buses. The field devices, which may be, for example, valves, valve positioners, switches and transmitters (e.g., temperature, pressure, level and flow rate sensors), are located within the process environment and perform process functions such as opening or closing valves, measuring process parameters, etc. Smart field devices, such as the field devices conforming to the well-known Fieldbus protocols, like the FOUNDATION\u2122 Fieldbus protocol, may also perform control calculations, alarming functions, and other control functions commonly implemented within the controller. The process controllers, which are also typically located within the plant environment, receive signals indicative of process measurements made by the field devices and\/or other information pertaining to the field devices and execute a controller application that runs, for example, different control modules which make process control decisions, generate control signals based on the received information and coordinate with the control modules or blocks being executed in the field devices, such as HART and Fieldbus field devices. The control modules in the controller send the control signals over the communication lines to the field devices to thereby control the operation of the process.","Information from the field devices and the controller is usually made available over a data highway to one or more other hardware devices, such as operator workstations, personal computers, data historians, report generators, centralized databases, etc., typically placed in control rooms or other locations away from the harsher plant environment. These hardware devices run applications that may, for example, enable an operator to perform functions with respect to the process, such as changing settings of the process control routine, modifying the operation of the control modules within the controller or the field devices, viewing the current state of the process, viewing alarms generated by field devices and controllers, simulating the operation of the process for the purpose of training personnel or testing the process control software, keeping and updating a configuration database, etc.","As an example, the DeltaV\u2122 control system, sold by Emerson Process Management includes multiple applications stored within and executed by different devices located at diverse places within a process plant. A configuration application, which resides in one or more operator workstations, enables users to create or change process control modules and download these process control modules via a data highway to dedicated distributed controllers. Typically, these control modules are made up of communicatively interconnected function blocks, that are objects in an object oriented programming protocol and perform functions within the control scheme based on inputs thereto and provide outputs to other function blocks within the control scheme. The configuration application may also allow a designer to create or change operator interfaces or human-machine interfaces (HMI) which are used by a viewing application to display data to an operator and to enable the operator to change settings, such as set points, within the process control routine. Each dedicated controller and, in some cases, field devices, stores and executes a controller application that runs the control modules assigned and downloaded thereto to implement actual process control functionality. The viewing applications, which may be run on one or more operator workstations, receive data from the controller application via the data highway and display this data to process control system designers, operators, or users using the user interfaces, and may provide any of a number of different views, such as an operator's view, an engineer's view, a technician's view, etc. A data historian application is typically stored in and executed by a data historian device that collects and stores some or all of the data provided across the data highway while a configuration database application may run in a still further computer attached to the data highway to store the current process control routine configuration and data associated therewith. Alternatively, the configuration database may be located in the same workstation as the configuration application.","As the number and type of control and support applications used in a process control environment have increased, different graphical display applications have been provided to enable users to effectively configure and use these applications. For example, graphical display applications have been used to support control configuration applications to enable a configuration engineer to graphically create control programs to be downloaded to the control devices within a process plant. Additionally, graphical display applications have been used to enable control operators to view the current functioning of the process plant, or areas of the process plant, to enable maintenance personnel to view the state of hardware devices within the process plant, to enable simulation of the process plant, etc.","Some process control configuration applications that are supported by graphical display applications presently include a library of template objects, such as function block template objects and, in some cases, control module template objects, that are used to create a control strategy for a process plant. The template objects have default parameters, settings and methods associated therewith and the engineer using a graphical configuration application can select these template objects and essentially place copies of the selected template objects into a configuration screen to develop a control module. The template objects may also include one or more sub-elements or primitives of the template object. For example, a furnace template object may include a valve, valve fitting, and various text areas as sub-elements. During the process of selecting and placing the template objects into the configuration screen, the engineer interconnects the inputs and outputs of these objects and changes their parameters, names, tags and other parameters to create a specific control module for a specific use in the process plant. After creating one or more such control modules, the engineer can then instantiate the control module and download it to the appropriate controller or controllers and field devices for execution during operation of the process plant.","Thereafter, the engineer may use a different graphical display creation application to create one or more displays for operators, maintenance personnel, etc. within the process plant by selecting and building display objects in the display creation application. These displays are typically implemented on a system wide basis in one or more of the workstations and provide preconfigured displays to the operator or maintenance persons regarding the operating state of the control system or the devices within the plant. These displays generally take the form of alarming displays that receive and display alarms generated by controllers or devices within the process plant, control displays indicating the operating state of the controllers and other devices within the process plant, maintenance displays indicating the functioning state of the devices within the process plant, etc. However, these displays are generally reconfigured to display, in known manners, information or data received from the process control modules or the devices within the process plant. In some systems, displays are created by a graphic depiction that represents a physical or a logical element and that is communicatively tied to the physical or logical element to receive data about the physical or logical element. The graphic on the display screen may change in response to certain events, such as received data to illustrate, for example, that a tank is half full, to illustrate the flow measured by a flow sensor, etc.","Thus, similar to the control configuration application, the display creation application may have template graphical display items, such as tanks, valves, sensors, operator control buttons like slide bars, on\/off switches, etc. which may be placed on a screen in any desired configuration to create an operator display, maintenance display and the like. The template graphical display items often include numerous nested sub-elements to create a composite shape. For example, a tank template graphical display includes a pump and that pump may include numerous primary shapes such as an ellipse, rectangles, lines, or other shapes. When placed onto the screen, individual graphic items may be interconnected on the screen in a manner that provides some information or display of the inner-workings of the process plant to users. To animate the graphic display, the display creator must manually tie each of the graphical items to data generated within the process plant, such as data measured by sensors or indicative of valve positions, etc. by specifying a communication link between the graphic item and the relevant data source within the process plant.","Often, many of the same control modules and graphical displays are used for different equipment within the process plant. For example, many medium to large sized process plants have numerous instances of the same or similar equipment that can be controlled and viewed using the same basic general control module and display. To create these numerous control modules and displays, however, a general control module or display module is created and this general control or display module is then copied for each of the different pieces of equipment for which it is applicable. Some techniques for integrating and using a graphic display editor and graphic display elements at a system level of a process control and simulation system may be described in U.S. patent application Ser. No. 10\/590,574 entitled \u201cCOMPOSITE SHAPE WITH MULTIPLE VISUALIZATIONS IN A PROCESS CONTROL ENVIRONMENT\u201d filed on Aug. 22, 2006, the entire disclosure of which is hereby incorporated by reference herein. These techniques generally enable the creation and use of composite shapes or composite shapes in various activities associated with plant configuration, control, maintenance, and simulation. The composite shapes are re-useable and re-configurable for any process, simulation, or task within the process control system.","During the configuration of a process control and simulation system using a graphic display editor, a designer must create and configure the composite shapes for each representation of the object within the graphic display. For example, to adequately represent a number of process control system components within an operator screen or window of the operator display, a designer often must resize the composite shapes so that they fit within the window, accurately represent the actual component used in the process, ensure the representation is visually appealing to the operator, or that they are in relative size and position to each other to create an accurate and practical operator display or simulation environment for the HMI. Likewise, during runtime, a user may resize a composite shape created during the configuration process (or \u201ccongfiguration time\u201d) to suit operator preferences or edit the layout of a previously-created display. Often, these composite shapes contain a number of primary shapes (e.g., rectangles, lines, etc.), primitives, sub-elements, and other composite shapes such as valves, pipe fittings, connections, etc., that are constructed of multiple sub-elements, and textual shapes. For example, a tank, boiler, kiln, or other process control system component represented as a composite shape includes any number of sub-elements.","However, past graphic display editors that included functionality to resize composite shapes at configuration time or runtime often distorted visual parameters of the sub-elements. For example, some graphic display editors employed a panel or content decorator that enabled stretching of a composite shape to fill a desired space. One example of a content decorator is the ViewBox class of the Windows\u00ae Presentation Foundation which generally permits resizing a composite shape in various dimensions (e.g., X, Y, and Z axes, height, width, and length, etc., singularly or in combination). However, resizing using standard content decorators results in undesirable behaviors. For example, resizing with a ViewBox decorator results in distorted portions of the composite shape and sub-elements become noticeably thicker, stretched, narrow, out of position, or other undesirable visual characteristics. Further, even if an aspect ratio was locked during resizing, while some sub-elements would maintain a proper visual relationship with others, a text portion becomes unsuitably larger or smaller and text or element borders became undesirably thicker and thinner using a ViewBox.","Prior solutions have not specifically addressed the distortions discussed above during resizing of composite shapes and resizing an element with a locked aspect ratio. Images displayed in a user interface window were associated into logical groups. For example, two or more graphical elements may have been grouped together as one logical group. When the user changed a first dimension of a window that displayed several logical groups that are each made up of several graphical elements (i.e., changes some combination of the height or width of the window), the image aspect ratio may be locked and the image resized to the extent the user changed the window dimension. For example, if the user decreased the window height, all of the graphical elements within the several logical groups might become shorter (e.g., for graphical elements that comprised text enclosed in a box, the text reduced in font size and the boxes that enclosed the text became shorter, thus, each logical group, in turn, became shorter and the elements became distorted). However, when a user changed the window's second dimension, the image did not change size, but rather, the number of logical groups changed to accommodate the enlarged or reduced space. If the logical groups were generally aligned along the width of the window, the logical groups did not change shape when the window width was reduced (i.e., the graphical elements and, thus, the logical groups did not get skinnier). Rather, the number of logical groups displayed was reduced, depending on the extent of the reduction in the second dimension. For example, if the user reduced the size of the window that originally displayed five logical groups to an extent that the window only accommodated four and a half logical groups, the number of logical groups displayed may have been truncated to a whole number of groups so as to not change the general dimensions of the objects within the groups.","Other solutions required modification of a \u201cdeep copy\u201d of a composite shape. A deep copy may be a file such as a digital graphic image in a JPEG or other format that, apart from simple resizing, is generally regarded as permanent. For example, a composite shape created by a configuration engineer or other user during configuration time may generally be considered a deep copy. Simply resizing the composite shape deep copy resulted in distorted sub-elements, as previously described. Therefore, a user at configuration time would be forced to create a new, undistorted composite shape for each resized instance of the composite shape that was desired for a composite shape library. For example, if both a short tank and a tall tank were desired to be included in the composite shape library, yet both versions of these tanks included inlet and outlet ports that were of equal size, simply creating a short tank and stretching it might result in a tank of a desired height, but with inlet and outlet ports that were stretched as well. The tall tank that was created by stretching the short tank would have at least distorted inlet and outlet ports. Thus, both the normal and tall tanks would have to be created at configuration time. Likewise, if a runtime user desired a different-sized tank to be displayed, the user would be forced edit the composite shape from its original, deep copy format from within a composite shape library by individually modifying each individual sub-element within the composite shape to maintain the proper aspect ratio. Once the desired scale was achieved, the configuration time or runtime user could save the modified composite shape as a new or alternative deep copy of the original composite shape and place that modified element into the display. Continuing with the example, if the user wanted to keep an inlet or outlet port of a tank a standard size, but change the height of the tank itself, the user would have to open and modify the deep copy of the tank composite shape. Any further modifications for other graphic displays would require further modification of the deep copy.","Thus, past graphic display editors have addressed resizing distortions by locking an aspect ratio of the composite shape, resulting in unwanted thickening of lines, stretching of text, truncating the number of displayed sub-elements resulting in a reduction in the amount of information or the amount of the object displayed, and other undesirable distortions. Other methods required modification of a deep copy of the common composite shape for each resizing. As a result, graphical editors, to the extent they existed, have only enabled the user to resize common graphical elements in an \u201call or nothing\u201d approach that resizes and distorts all sub-elements of a composite shape with a locked aspect ratio, adds or eliminates a number of logical groups within the display window, or requires modification of the composite shape deep copy.","Composite shapes are provided for use as portions or components of one or more graphic displays that may be executed in a process plant to display information to users about the process plant environment. Scaling and baseline or unscaled parameters associated with sub-elements of a composite shape may determine how the sub-element is scaled during resizing of the composite shape. A graphical display editor may use the parameters to calculate various scaling factors that are then applied to the sub-elements of each composite shape during resizing. The editor may apply the scaling parameters to the sub-elements for resizing in one or more axes (e.g., the length, width, and height or X, Y, and Z axes, etc.) to adjust the composite shape for a particular graphical display and configuration time or runtime user preference. The editor may apply the scaling factors directly to each sub-element to prevent any distortion of those sub-elements. The scaling parameters of the composite shape's sub-elements may be adjusted during creation of the deep copy at configuration time or may be modified by a user at runtime to control what, if any, effect the scaling factors have in relation to the baseline or unscaled parameters on the composite shape as a whole and its sub-elements individually. The configured scaling parameters may then be linked to the composite shape so that, at both configuration time and runtime, the parameters are applied to the composite shape and its sub-elements during a resizing action. Where a composite shape includes nested composite shapes as sub-elements, the parameters may be applied recursively during a resizing action. The scaling parameters may be applied to both composite shapes and animations.","One example of scaling composite shapes for an operator display in a process control system for use in a process plant may include displaying a composite shape that graphically illustrates an entity within the process plant. The composite shape may include one or more sub-elements, each sub-element including one or more unscaled parameters and each unscaled parameter including one or more scaling parameters. Each scaling parameter may define a resizing behavior of a corresponding sub-element. Scaling may also include resizing the composite shape in one or more dimensions, calculating a scaling factor for each resized dimension, and applying one or more scaling factors to each unscaled parameter associated with a scaling parameter.","A graphic display editor may also be used in a process plant to resize one or more composite shapes that represent one or more of an operation and an entity within the process plant. The graphic display editor may include a library of composite shapes, wherein each of the composite shapes includes a different visual representation of a physical or a logical entity within the process control plant. The composite shape may also include one or more sub-elements. The editor may include a graphically based editor canvas routine that enables a user to define an executable graphic display by placing indications of one or more composite graphic objects from the library of composite graphic objects onto an edit canvas to define a manner in which visual representations of the one or more composite graphic objects will be displayed on a display device to a user during execution of the graphic display. Further, the graphically based editor canvas routine may enable the user to control a scale behavior of each of the component objects of the composite graphic object. Another editor routine may include a scaling canvas routine that may enable the user to associate one or more scaling parameters with one or more sub-elements of a composite shape, wherein each sub-element of the composite shape may be contained within a scaling canvas object and each scaling parameter may define a scaling behavior of a sub-element associated with the composite shape. Also, a composite shape resizing routine may enable the user to modify one or more dimensions of the composite shape within the editor canvas, wherein the modification may be applied to one or more sub-elements of the composite shape according to the associated scaling parameter.","A computer system may be used to scale composite shapes for use in a process control plant, as well. For example, where each composite shape may represent one or more of an operation and an entity within the process plant, the system may include a database with one or more composite shapes and a graphical human-machine interface for displaying a graphical representation of the process plant. The composite shapes within the database may include one or more sub-elements within a scaling canvas object, wherein each sub-element includes one or more unscaled parameters and the a graphical human-machine interface may include a composite shape resizing module for execution on a processor of the computing system. The module may include instructions for configuring, at configuration time, the one or more composite shapes including the one or more scaling parameters and, at runtime, binding each configured composite shape to a configured scaling parameter. Each scaling parameter may define a resizing behavior of a corresponding sub-element of a composite shape. The module may also include instructions for displaying a resized scaling canvas object of the composite shape and the resized scaling canvas object may include one or more changed dimensions. Further, the module may include instructions for calculating a scaling factor for each changed dimension, wherein the scaling factor may include a ratio of one or more changed dimensions of the scaling canvas object to one or more corresponding unscaled parameters. The module instructions may also apply one or more scaling factors to each unscaled parameter of each sub-element that includes a scaling parameter.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1","b":["10","10","10","12","14","16","18","12","20","23","24","28","24","10","10","12","14","16","28","10","12","18","14","16","20","23","28"]},"As is known, each of the controllers , which may be by way of example, the DeltaV\u2122 controller sold by Emerson Process Management, stores and executes a controller application that implements a control strategy using any number of different, independently executed, control modules or blocks . Each of the control modules  can be made up of what are commonly referred to as function blocks wherein each function block is a part or a subroutine of an overall control routine and operates in conjunction with other function blocks (via communications called links) to implement process control loops within the process plant . As is well known, function blocks, which may be objects in an object oriented programming protocol, typically perform one of an input function, such as that associated with a transmitter, a sensor or other process parameter measurement device, a control function, such as that associated with a control routine that performs PID, fuzzy logic, etc. control, or an output function that controls the operation of some device, such as a valve, to perform some physical function within the process plant . Of course hybrid and other types of complex function blocks exist such as model predictive controllers (MPCs), optimizers, etc. While the Fieldbus protocol and the DeltaV system protocol use control modules and function blocks designed and implemented in an object oriented programming protocol, the control modules could be designed using any desired control programming scheme including, for example, sequential function block, ladder logic, etc. and are not limited to being designed and implemented using the function block or any other particular programming technique.","In the plant  illustrated in , the field devices  and  connected to the controllers  may be standard 4-20 ma devices, may be smart field devices, such as HART, Profibus, or FOUNDATION\u2122 Fieldbus field devices, which include a processor and a memory, or may be any other desired type of devices. Some of these devices, such as Fieldbus field devices (labeled with reference number  in ), may store and execute modules, or sub-modules, such as function blocks, associated with the control strategy implemented in the controllers . Function blocks , which are illustrated in  as being disposed in two different ones of the Fieldbus field devices , may be executed in conjunction with the execution of the control modules  within the controllers  to implement process control, as is well known. Of course, the field devices  and  may be any types of devices, such as sensors, valves, transmitters, positioners, etc. and the I\/O devices  may be any types of I\/O devices conforming to any desired communication or controller protocol such as HART, Fieldbus, Profibus, etc.","In the process plant  of , the workstations - may include various applications that are used for various different functions performed by the same or different personnel within the plant . Each of the workstations - includes a memory  that stores various applications, programs, data structures, etc. and a processor  which may be used to execute any of the applications stored in the memory . In the example illustrated in , the workstation  is designated as a configuration workstation and includes one or more configuration applications  which may include, for example, control module creation applications, operator interface applications and other data structures which can be accessed by any authorized configuration engineer to create and download control routines or modules, such as the control modules  and , to the various controllers  and devices  of the plant . The workstation  is generally illustrated in  as a control operator viewing workstation and includes a number of display applications  which may provide a control operator with various displays during operation of the process plant  to enable the operator to view and control what is happening within the process plant  or in various sections of the plant. The applications  may include support applications such as control diagnostic applications, tuning applications, report generation applications or any other control support applications that may be used to assist a control operator in performing control functions. Similarly, the workstation  is illustrated as a maintenance viewing workstation and includes a number of maintenance applications  that may be used by various maintenance personnel to view the maintenance needs of the plant , to view the operating or working condition of various devices , , , etc. Of course, the applications  may include support applications such as maintenance diagnostic applications, calibration applications, vibration analysis applications, report generation applications or any other maintenance support applications that may be used to assist a maintenance person in performing maintenance functions within the plant . Additionally, the workstation  is indicated as a simulation workstation which includes a number of simulation applications  that may be used to simulate operation of the plant  or various sections of the plant  for any number of purposes, including for training purposes, for plant modeling purposes to assist in plant maintenance and control, etc. As is typical, each of the workstations - includes a display screen  along with other standard peripheral devices, like a keyboard, a mouse, etc.","Of course, while the various configuration, control, maintenance and simulation applications - are illustrated in  as being located in different workstations dedicated to one of those functions, it will be understood that the various applications - associated with these or other plant functions may be located in and executed in the same or different workstations or computers within the plant , depending on the needs and set up of the plant . Thus, for example, one or more simulation applications  and control applications  may be executed in the same workstation -, while different individual simulation applications  or different individual control applications  may be executed in different ones of the workstations -.","As described in U.S. patent application Ser. No. 10\/590,574, to alleviate the inefficiency of different graphics editors and packages for each plant level, and to provide for more widely usable and understandable graphics within the plant , a graphical support layer is provided at a system level of the process plant  to support the graphic display and data structure needs of each of the various functional areas of the plant , including the configuration, operator viewing, maintenance viewing, simulation and other functional areas of the plant . This system level of support is depicted diagrammatically in , which illustrates a plant operational level , a plant functional level  and a system level . As will be understood from , the plant operational level  includes the controllers , field devices , , etc. which execute the control routines or modules  and , as well as other software run within the plant  to implement plant operations during runtime of the plant. The plant functional level  is depicted as including a configuration function block , a control function block , a maintenance function block  and a simulation block , although other or different functions, such as an engineering and a business function, could be provided as well. The configuration function block  implements the configuration routines  which interface or communicate with components within the plant operational level  to provide control strategies or control modules thereto. The control function block  includes the control viewing and other applications  and which also interface or communicate typically directly with the various physical and logical components within the plant operational level  to implement operator initiated changes within the plant , to provide information to the operator via control displays , to acquire data for the control applications , etc. The maintenance function block  includes the maintenance routines and applications  and that interface or communicate with various physical and logical components within the plant operational level  to implement maintenance procedures, to collect maintenance data, to provide maintenance data or information to a maintenance person via maintenance displays , to run diagnostic applications , etc. Likewise, the simulation function block  includes simulation routines  which implement simulations of the plant  and which may be communicatively coupled to components within the plant operational level  to obtain data regarding the plant .","As illustrated in , the system level support layer  ties into and supports each of the function blocks - within the plant functional layer  to enable, for example, the creation and maintenance of common database and display structures, such as software objects, composite shapes and graphic displays for use in the various functional areas -. More particularly, the system level support layer  includes application, database and graphical support elements that enable the graphical activities performed in each of the function blocks - to be integrated together, or to be developed using common database structures and composite shapes created at the system support layer .","The system support layer  may include a graphical editor  and a graphical object database . The graphical editor  may be used to create composite shapes  and graphic displays , while the graphic object database  stores the composite shapes  and displays  in a memory accessible by the editor  and by the various applications in the blocks -. The database  may also store other objects  such as sub-elements for composite shapes , and data structures that connect the composite shapes  to individual hardware and software elements within the plant operational level . Additionally, the database  may store templates, sub-elements, and primitives that may be used to create further composite shapes, or displays. As will be understood from , the graphic display elements , displays  and other database structures  may be used by any and all of the functional blocks - to create and use graphics associated with those functional blocks.","Generally speaking, the system level support block  provides a manner of integrating the graphics used in the process plant  of  in all of the functional areas -, to thereby reduce or eliminate the necessity of repeatedly creating different composite shapes for the same plant equipment in different functional contexts, and to make it easy for a user in each of the functional areas - to tie into data associated with the equipment being displayed in graphical views associated with those functional areas. As will be understood, the system level support layer  may be used to provide graphics and database support for multiple applications in each of the functional areas -, for different applications in different ones of the functional areas -, etc.","Referring again to , the system level support block  may be implemented using an additional workstation or user interface  which may be connected to each of the other workstations -. The workstation  may generally store the graphics editor  and database  and may store the other elements ,  and  if so desired. Additionally, the workstation  may be communicatively connected to the workstations - via the databus , via separate wired or wireless communication connections (illustrated by dotted lines in ) or in any other desired manner. In the configuration illustrated in , the workstation  stores and executes the display editor  to enable a user to create composite shapes that include sub-elements and other composite shapes. and to group the shapes into one or more graphic displays or display modules. These display modules may be then stored in the database  to be accessed and used by various functional blocks - illustrated in  and implemented on the various workstations -. While, for the sake of illustration, the functionality of the system level block  and the function level blocks - is illustrated as being implemented on different or separate workstations - and  in , it will be understood that any or all of the applications associated with any of these various blocks could be implemented on the same or different workstations or other computers within or associated with the process plant . Thus, the graphics editor  may be stored in and executed on any of the other workstations - or on any other computer associated with the plant  and need not be in a stand-alone or separate computer.","As discussed above, the system level layer  of  implements system level display and database objects, which can be used in a variety of the functional environments as well as to provide higher level display capabilities. Generally speaking, the display objects created at the system level  of  can be categorized as composite shapes and graphic displays. Composite shapes are generally display objects that are associated with a particular physical entity within the plant, such as a hardware device like a valve, a sensor, a pump, a controller, a tank, a reactor, a burner, a pipe, a pipe fitting, etc. Graphic displays are generally made up of a set of interconnected composite shapes and are used to represent and model more complicated sets of hardware within a plant, such as a unit, an area, etc. and include interconnections between different hardware units. Composite shapes may be made up of a plurality of sub-elements that may, themselves, be composite shapes. In other words, the composite shapes  may be nested. For example, a tank composite shape within a reactor graphic display may include one or more composite shapes of valves, pipe fittings, sensors, an agitator, etc., that are each made up of rectangles, ellipses, lines, etc. Likewise, the graphic displays may include one or more composite shapes, as well. Additionally, graphic displays may include graphs, charts and other data provided from the plant, from other applications, such as diagnostic and business applications running in the workstations - and , etc.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 3","b":["70","72","74","74","74","76","76","76","70","50","74","76","52","74","76","10","10"],"i":["a","b","a","b"]},"As illustrated in , each of the composite shapes  includes a number of components that make the composite shape useful in many different contexts. In particular, each composite shape  includes one or more graphical elements or sub-elements , any number of parameters or properties , any number of actions or animations  which may be implemented using scripts or triggers, and bindings . Generally speaking, each element , , ,  defines the visual properties or elements to be actually displayed on a display screen when the composite shape  is implemented in the runtime environment . Typically, composite shapes define a graphical representation of a physical or logical device or group of devices, although a composite shape could represent other entities. Composite shapes  may be implemented in the runtime environment  using any desired description or programming paradigm that defines the specifics of the graphical depiction of an entity. In one embodiment, the composite shapes  may be implemented using PGXML, XAML, or Windows Presentation Foundation (WPF\u2014formerly named \u201cAvalon\u201d) controls, which are well known controls provided by Microsoft\u00ae and which, because they are object based, are easily implemented in standard Windows\u00ae type displays and portable between display environments.","The sub-elements  of a composite shape  may include basic shapes that are the building blocks of the composite shapes . As previously described, the sub-elements may include rectangles, ellipses, curves, lines, and other basic shapes that, when manipulated and combined, form a graphical representation of a tank, valve, pipe fitting, or other object. A sub-element  may, itself, be a composite shape  to create a complex, nested structure. Therefore, the sub-elements  may also include one or more of the parameters\/properties , actions\/animations , and bindings , as further described below.","Generally speaking, the parameters and properties  define variables or other parameters such as static or changeable intrinsic parameters, associated with the shape or entity being depicted and these parameters are definable by the creator of the shape . In some embodiments, the parameters are related to how associated sub-elements of the composite shape  behave during scaling. For example, the parameters  may be defined so that when a composite shape is resized, the associated sub-elements inside the composite shape will scale instead of stretch or exhibit otherwise undesirable behavior. Some examples of scaling parameters are the font size for labels and other text portions of the composite shape, an edge width, a corner radius, a size scale, and a position scale, as further explained below. The parameters may apply to the shapes during resizing actions at both configuration time and runtime. The composite shape  may also implement an interface to allow the Scaling Canvas container, as discussed below, to access the parameters associated with resizing. Thus, with the parameters and interface, the composite shapes themselves may provide their own scaling logic.","Each sub-element  may include a limited number of scaling factors, In some embodiments, each sub-element  only includes those scaling parameters that, if changed, will change a corresponding characteristic of the shape. For example, an ellipse object may only include scaling parameters for x and y positioning, width, and height scaling, while a rectangle object may additionally include corner scaling parameters, and a text object may include parameters for font size scaling, etc. Of course, other parameters may control other scaling behaviors of composite shapes  such as spacing, depth (in three-dimensional shapes), sequencing, and other visual characteristics.","The actions and animations  define routines or programs (that may be implemented as scripts to perform transforms on parameters, detect conditions of a process entity based on parameter values, etc.), animation routines that may include any routines that change the composite shape or sub-elements of the composite shape or behaviors to be performed on or using the shapes when they are depicted on a display screen, or routines which enable a user to use or interact with the shape  to cause a change in the process, such as a change to an input to the process. These actions and animations provide the composite shapes  with more interesting, understandable or helpful graphical properties and to allow the user to interact with the composite shapes . In one case, these actions or animations may take the form of changes in color, size (e.g., height and width, line size, fonts, etc.) of various components and sub-elements  of the shape, color fills, and animations such as changes in color, rotations, resizing, rescaling, skewing, etc. These actions and animations provide graphical properties as well as user interaction properties to the composite shape .","The bindings , which may be static or fixed bindings or bindings which use aliases, define the manner in which the parameters or properties  are to be bound to data, tags or other entities within the runtime environment  when the composite shape  is implemented as part of a display in the runtime environment . To prevent distortion of the composite shape  during resizing at both configuration and runtime, the bindings  for each composite shape may include one or more bindings to a Scaling Canvas, as further discussed, below. Generally, the bindings  for each composite shape  establish the manner in which the composite shape  is tied to one or more entities or data elements defined elsewhere in the plant environment, and thus define an interface between the actual runtime environment  and the composite shape .","As illustrated in , each of the graphic display objects  includes numerous components, such as a reference to or a copy of one or more composite shapes , connector elements , actions and animations , properties  and bindings . Generally speaking, a graphic display  may be a display that depicts the interaction of various composite shapes  that may be visually connected together with connector elements  representing pipes, lines, conveyor belts, etc. Such connector objects are described in U.S. Pat. No. 7,110,835. A dotted line in  illustrates a reference to one of the composite shapes  by the graphic display object . It will be understood that the graphic display  that references a composite shape  includes all of the properties, parameters, actions and animations, etc. of that composite shape . Similar to the composite shapes , each graphic display  may include one or more additional actions or animations associated therewith that perform, for example, animations on the display, user interface interactions, data manipulations, etc. Likewise, each graphic display  may include any number of properties associated with the display, and typically these properties define properties of units, areas, or other groups of elements depicted within the display. Of course, the bindings  define the manner in which the graphic display  is tied to one or more entities or data elements defined elsewhere in the plant environment and thus define an interface between the actual runtime environment  and the graphic display .","Once created, the composite shapes  and the graphic displays  may be bound to and executed in the runtime environment  on, for example, any of the workstations - of . In particular, after a composite shape  or a graphic display  is created as a class object and is stored in the database , that element or display may be instantiated as an actual runtime object and may be executed in the runtime environment . As illustrated by the block , the instantiation process fills in the bindings defined in the objects  and , which may be accomplished using one or more resolution tables that may be loaded with proper variable names, tags, aliases etc. within the process plant or process control system to provide a specific connection between actual entities within the process plant and the graphic objects running on a display device within the plant . As part of the binding process, the objects  and  connect to data sources within the process plant as defined by the resolution table, and thereby gain access to the plant so as to be logically and communicatively connected to the process plant .","As illustrated by the blocks , a composite shape  or a graphic display  can be executed in or as part of a number of different functions within the runtime environment , including a configuration display, a control operator display, a maintenance display and a simulation display, to name but a few. For example, any of the displays may be used to resize or scale the composite shape  without distortion. Additionally, the display objects  and  may be used to perform system level functions, e.g., ones that use data from various ones of the functional levels depicted in , including for example, predictive control or predictive maintenance functions, system level error detection, diagnostics, etc. In fact, the displays , once created in the configuration environment  and stored in the database  may be used for a number of different activities in the runtime environment . Still further, the display objects  and  may be executed on any desired display or computer hardware, such as a workstation , a laptop computer , a handheld device , like a personal data assistant (PDA), a telephone device, etc., or any other specialty display , such as a large screen display having multiple monitors, etc. If desired, a single graphic display  may be layered to include one or more views, such as configuration view, an operator view, a maintenance view and a simulation view. Alternatively, separate graphic displays  may be configured to provide these separate views using the same or similar composite shapes , to provide a consistent look and feel across displays created for these various functions.","As illustrated by the block , a composite shape , or a graphic display  may be copied or instantiated, and loaded onto the runtime machine to be ported to the runtime environment . Generally speaking, it is desirable that the display object  or  be bound to the runtime environment  only when called up or actually executed on a runtime machine, which is referred to herein as runtime binding. That is, the resolution table for each of the instantiated objects is only filled in or bound to the runtime environment when the display object is actually running or being executed in a runtime computer. Thus, the display object is preferably only bound to the runtime environment  when that object is actually running on a runtime computer, which means that the display objects  and  may be intermittently connected to the runtime environment  in a manner defined by the activities of the users viewing the display created by these objects. In particular, these objects may be bound to a runtime environment  at the times at which they are required to be viewed, and may be unbound or released when not being viewed by a user, such as when a user minimizes or closes a screen in which these objects are providing a display.","The display objects  and  are thus objects which may be created in a stand-alone environment, i.e., the configuration environment , but which may be tied or connected with other objects or data structures defined within the process plant environment or any application running within the process plant environment, including, for example, objects, data structures, applications, etc. defined in any control, simulation, maintenance, or configuration environment. Furthermore, once created, the display objects  and  may be bound to physical or logical process entities directly, via direct references, variables or tags defined in a resolution table, or indirectly through the use of alias names, variables and parameters, which may be resolved either when the display object  or  is downloaded or instantiated within the a runtime environment , or in some cases, when the display object  or  is actually running within the runtime environment .","The display editor  of  may enable the composite shapes  and graphic displays  to be created at various levels of detail at configuration time, to enhance their ease of use and their versatility. For example, composite shapes  may be created first to define the properties and operations of more primitive physical and logical entities. Graphic displays  may be created by interconnecting one or more composite shapes  to create higher level or more complicated displays depicting more complicated physical or logical entities, or groups of physical or logical entities. Of course, both composite shapes  and graphical displays  may be stored and accessed in various different categories to make the creation of higher level display objects easier for the user.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIGS. 4","FIG. 4","FIG. 4","FIG. 2","FIG. 3","FIG. 4","FIG. 4","FIG. 4","FIG. 4"],"i":["a ","b ","c ","a","b ","b","c","b "],"b":["4","50","87","95","96","96","78","50","78","96","97","97","97","98","99","97","96","95","100"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 5","FIGS. 5","FIGS. 5","FIG. 5"],"i":["a ","b ","c","b ","c","a ","a ","a ","a"],"b":["112","50","112","5","114","116","118","120","114","5","122","50","123","122","123","122","114"]},"The composite shapes may include a number of parameters that may be defined during configuration time (i.e., creation of the composite shape) that are depicted in . In some embodiments, the parameters may be related to scaling behaviors of the composite shapes. For example, scaling parameters may define or control what, if any, effect a resizing action may have on the sub-elements of the composite shapes, as further explained herein. Once created, composite shapes define the graphical representation for an actual object, which might be implemented in the runtime as an XAML or WPF object, that will be displayed on a screen or display when the composite shape is used in a runtime environment. The shapes or sub-elements  making up the composite shape may be illustrated in a composite shape hierarchy in the hierarchy section . In the configuration time environment illustrated in , a user may associate and define various scaling parameters, as described below, with each sub-element of the composite shape.","In the editor , the pallet view  includes a number of basic elements that can be used to create a composite shape . For example, the pallet view  includes a set of basic UI (user interface) elements, such as buttons, text boxes, sliders, knobs, etc., a set of basic panels, and a set of basic shapes. The defined panels may provide a container for various sub-elements and may impart one or more configuration or runtime behaviors to the contained sub-elements. For example, the various panels may include a scaling canvas panel  that includes the functions of the canvas panel with the additional function of being able to resize a composite shape without distortion of it sub-elements. In some embodiments, the Scaling Canvas  is a container object for one or more sub-elements that, collectively, comprise a composite shape . In other embodiments, the Scaling Canvas  is visually represented in the editor  as an area or panel, such as the main edit section , or a background of the composite shape upon which one or more sub-elements  or the composite shape may be placed for re-configuration, editing, or resizing. The Scaling Canvas  may also be an extension of the Windows Presentation Foundation (WPF) Canvas class. A composite shape may be selected from the pallet view  and dragged to the edit section . Still further, the sub-elements and composite shapes in the pallet view  may include ISA (Instrument Society of America) symbols, transmitter symbols, valve symbols, PI&D diagram symbols or other control symbols, etc. or any other desired shapes, all of which can be used to build a composite shape.","The element hierarchy section  provides, using a hierarchical view or a tree structure, the components associated with the shape within the main edit section . In the example of , the hierarchy section  shows that the composite shape being defined in the main edit section  includes sub-elements or primitives  of a Rectangle and an Ellipse and well as a sub-element that is a composite shape of an Agitator, and its ellipse and rectangle sub-elements Of course, the sub-elements depicted in the hierarchy section  are for illustration purposes only as the shape illustrated in includes more sub-elements than shown. The hierarchy section  also provides an indication of the type of container for the composite shape , for example, a Scaling Canvas , that includes the scaling and resizing capabilities as discussed herein. While not shown in , the hierarchy section  may include indications of animations, actions and other display features, such as scripts, visual triggers, etc. defined for the shape ","The parameter definition section , illustrates all of the parameters, including intrinsic parameters, currently defined for the composite shape shown in the editor . Each sub-element  of the composite shape or the Scaling Canvas  may include various scaling parameters  that prevent distortion of the sub-element  during resizing of the composite shape , as described herein. During configuration, if the Rectangle sub-element of is selected in a composite shape that includes the Scaling Canvas  container, the parameter definition section  may illustrate one or more scaling parameters  of the selected sub-element including a font size, edge width, corner radius, size (width and height), and position (x and y coordinates). In one embodiment, the scaling parameters include a naming convention to differentiate them from regular, non-scaling parameters, For example, the scaling parameter names may include FontSizeScaleMode, EdgeWidthScaleMode, CornerRadiusScaleMode, SizeScaleMode, PositionScaleMode. The definition section may include one or more baseline or unscaled parameters  such as a Height and Width. The scaling parameters  may control how the sub-elements contained within the Scaling Canvas  container of the composite shape are scaled when the shape is re-sized. Different sub-elements may have different scaling parameters. For example, an Ellipse sub-element may include Size (height and width), and Position (x and y coordinates) scaling while a Text sub-element may include Font Size scaling.","The Scaling Canvas  container or panel may interface with and manipulate the scaling parameters  and baseline or unscaled parameters  that are configured from the definition section . The configured scaling parameters , baseline\/unscaled parameters , and logic of the scaling canvas container  may permit undistorted resizing of the composite shape in both a configuration environment (as illustrated in , , and ) and a runtime environment (as illustrated in , , and ). For example, at configuration time when a user is creating the various composite shapes to be stored in a composite shape library, or creating a graphic display including one or more composite shapes, the user may configure the one or more scaling parameters  so that a resizing action will change the dimensions of a shape without distortion to produce an accurate representation of a process control plant. Also, when user opens and uses a operator display at runtime, the user or operator may customize or adjust the display by moving a slider bar or resizing a window including the display, thus resizing its composite shapes.","In one embodiment, the logic of the scaling canvas container  determines a scaling factor from the baseline\/unscaled parameters  and scaling parameters  and applies the factor to each sub-element of a composite shape that includes a scaling parameter  corresponding to a changed characteristic or dimension during a resizing action. For example, if the composite shape is resized in a horizontal, length, or X dimension, then the logic may determine a horizontal, length, or X-dimension scaling factor, and if the composite shape is resized in a vertical, height, or Y dimension, then the logic may determine a vertical, height, or Y-dimension scaling factor. In another embodiment, the Scaling Canvas includes logic to implement the scaling parameters as attached properties at configuration time and runtime, as further described herein. Regardless of whether the resizing action occurs at configuration time or runtime, the Scaling Canvas may adjust the sub-elements' size directly during a resizing action to prevent any distortion or unwanted resizing of fonts, borders, and other characteristics.","Resizing a composite shape may, essentially, replace a value of the unscaled or baseline parameters  with a scaled parameter to reflect the shape's changed size. The Scaling Canvas may then refer to the stored baseline values  to determine how much the resizing action changed the baseline parameter . Further. when the shape or sub-element  within a Scaling Canvas container  is selected from the pallet view , placed on an operator display and resized, the new \u201cunscaled\u201d parameters (e.g., size, position, height, width, etc.) may be stored as a starting point for any future resizing action as applied to the entire composite shape ","Once the baseline parameters  are stored and the scaling parameters  are set at configuration time as illustrated in , the configured composite shape may be stored in a composite shape library for use at configuration time when configuring the composite shapes  and graphical displays  (and ), and at runtime within a graphic display , as depicted in , , and . For example, illustrates configuration of a \u201cReactor-1\u201d graphic display  that includes the composite shape \u201cTank\u201d as configured within the editor depicted by , and another composite shape of \u201cStorage.\u201d As previously described, the Scaling Canvas container  includes logic to compute the scaling factor  that, once a resizing action occurs, may be applied to each sub-element  that includes a scaling parameter . The scaling factor  may be a ratio of one or more resized dimensions of a resized composite shape () to one or more corresponding baseline or unscaled parameters  of the sub-elements. For example, where the composite shape contained within the Scaling Canvas is resized to a height of two hundred, and the original, baseline height of the sub-element within the Scaling Canvas-contained composite shape is one hundred, the resulting scaling factor is (two hundred\u00f7one hundred) two. Therefore, if the sub-element does not include a scaling parameter, or if the sub-element includes a scaling parameter that allows the sub-element to be resized, the baseline\/unscaled value of that sub-element is changed by a factor of two. However, if the sub-element includes a scaling parameter that does not allow the sub-element to be resized, the baseline\/unscaled value of that sub-element will not change. The resizing action may iterate through the children of the composite shape (i.e., the remaining sub-elements) to apply the scaling factor(s)  to each sub-element  to create an undistorted, resized rendering of the original composite shape.","The scaling parameters  that may be configured at configuration time control how the scaling factors  are applied to the configured sub-elements during the resizing action described above. For example:\n\n","The user or designer could add other parameters to the composite shape and the composite shape sub-elements by defining the names, types and bindings of other variables, parameters, etc. within the parameter definition section  to thereby define other aspects of the composite shape . The scaling parameters  may include any of the selections described above as well as numerical values for other settings. Thus, for example, the parameters could also be arrays, tables, enumerated lists or any other types of variables or data structures.","After a resizing action, as illustrated in , some portions of the tank composite shape are increased in height by the scaling factor, while others are not. For example, the size of an inlet sub-element and an outlet sub element of the tank composite shape () remains unchanged at . Also, while an overall position of the inlet and outlet sub-elements changes from shape to shape , the relative position of these sub-elements as being in the middle of the tank shape does not change. In this embodiment, both the inlet and outlet sub-elements include at least a Size and a Position scaling parameter that determines the sub-element's behavior upon resizing. For example, the Size scaling parameter may be set to \u201cNone\u201d while the Position scaling parameter may be set to \u201cX and Y\u201d or \u201cY.\u201d Thus, in the above example, the scaling factor of two for the change in height (i.e., the Y dimension) would be applied the position, but not the size of the inlet and outlet sub-elements. The various other sub-elements of the tank composite shape may include scaling parameters , as described above, and the Scaling Canvas  may wholly or partially apply the scaling factor to these sub-elements, as well.","Of course, the tank composite shape may be resized at configuration time within a graphic display  in a variety of dimensions (e.g., the width, length, or X dimension, as illustrated in ). As previously described, the Scaling Canvas  may compare the unscaled width of the resized tank composite shape to the definition width to calculate a scaling factor. The Scaling Canvas  may then iterate through the composite shape sub-elements and apply the width scaling factor to those sub-elements that include a width scaling parameter. For example, the Size scaling parameter may be set to \u201cNone\u201d while the Position scaling parameter may be set to \u201cX and Y\u201d or \u201cX\u201d for the inlet and outlet sub-elements In this example, the scaling factor of two for the change in width (i.e., the X dimension) would be applied the position, but not the size of the inlet and outlet sub-elements , . The various other sub-elements of the tank composite shape may include scaling parameters , as described above, and the Scaling Canvas  may wholly or partially apply the scaling factor to these sub-elements, as well.","Any of the composite shapes may also include animations and\/or actions and event handler scripts associated therewith, and such animations or actions may be shown in a action\/animation view  of the editor . When a composite shape includes animations or actions, these animations or actions may be indicated in the hierarchy  with special symbols such as stars, etc. When selected in the hierarchy view , any actions or animations defined for a composite shape or a sub-element of a shape will be shown in the action\/animation view . Actions or animations may be created and assigned by defining such actions or animations in the view  or by adding such actions or animations to the hierarchy view . When a user wishes to create or edit an action or animation, the editor  may provide a dialog or edit box to allow this feature to be fully specified or defined. The actions or animations may also be bound to the Scaling Canvas  to allow resizing without distortion at both configuration and runtime, as herein described. Of course, actions or animations may be defined using scripts, visual triggers or other programs. In some embodiments, the actions, animations, and event handler scripts do not account for the scaling functions as described herein. Rather, the scaling may be applied to the shape after execution of an animation, action, or event handler script, thus simplifying the user's experience.","In other embodiments, the scaling parameters  may be included as part of each sub-element's definition to create a common framework for all composite shapes. For example, one or more base classes for each shape or sub-element may contain the common parameters of the shapes (i.e., name, x and y positions, height, width, rotation, etc.), as well as the scaling parameters . In this embodiment, the Scaling Canvas  is dependent on the common framework because the Scaling Canvas includes access to the scaling parameters  and knowledge of the particular parameters to modify for scaling the composite shape without distortion. In other embodiments, the scaling parameters  are included as parameters of the Scaling Canvas . For example, the Scaling Canvas  may implement one or more attached parameters (e.g., X Dimension, Y Dimension, Z Dimension, Width, Height, Corner Radius X, Corner Radius Y, Corner Radius Z, Font Size, Edge Width, etc.). In this embodiment, native parameters of the sub-elements  (e.g., X, Y, Width, Height, etc.) are bound to the attached parameters of the Scaling Canvas . In a further embodiment, both the sub-elements  and the Scaling Canvas  include the one or more scaling parameters  and the Scaling Canvas  may apply its attached parameters, including any scaling parameters , unless explicitly overridden by a sub-element parameter. Regardless of the whether the scaling parameters  are attached to the sub-elements , the Scaling Canvas , or both, the Scaling Canvas may use these parameters to correctly scale its contained child sub-elements .","Each scaling and definition parameter ,  may also include a number of values and settings that are used when resizing a composite shape . In some embodiments, the composite shape implements an interface to allow the Scaling Canvas to access the scaling parameters . This approach means that the composite shape and each sub-element contains its scaling logic. By including the interface and Scaling Canvas, dependencies of the Scaling Canvas to the shapes may be reduced as the Scaling Canvas need not be aware of any of the scaling parameters . Reducing the Scaling Canvas dependencies is different from the WPF pattern of Panels, wherein the logic for displaying the elements contained by the Panel is always defined in the Panel itself. For each definition parameter , for example, a baseline\/unscaled height value  and a baseline\/unscaled width value  may be assigned to the sub-element upon its creation. For each scaling parameter , one or more values or settings may be assigned depending on the desired behavior of the object during resizing.",{"@attributes":{"id":"p-0075","num":"0079"},"figref":["FIGS. 6","FIGS. 5","FIG. 3","FIGS. 6","FIG. 1"],"i":["a","b","c ","a","b","c ","a","b","c ","a"],"b":["6","6","112","5","5","87","150","6","6","152","150","87","37","152","154","156","158","160","162","152"]},"The runtime shapes may include the scaling parameters that determine how the shapes will behave upon a runtime user executing a resizing action, as described herein in relation to , , and . For example, scaling parameters may define or control what, if any, effect the resizing action may have on the sub-elements of the composite shapes, as further explained herein. In some embodiments, the previously described configured scaling parameters are bound to the configured composite shape at runtime.","At runtime, a resizing action may include the user or operator customizing the display by moving a slider bar or resizing a window including the display, thus resizing its composite shapes. Upon initiating a resizing action, the logic of the scaling canvas container that is included in the runtime illustration of the configured composite shape may determine a scaling factor from the baseline\/unscaled parameters and scaling parameters that were configured at configuration time. The factor is then applied to each sub-element of a composite shape that includes a scaling parameter corresponding to a changed characteristic or dimension during a resizing action. For example, if the window or display  is resized in a horizontal, length, or X dimension, then the logic may determine a horizontal, length, or X-dimension scaling factor, and if the composite shape is resized in a vertical, height, or Y dimension, then the logic may determine a vertical, height, or Y-dimension scaling factor, as previously described. The Scaling Canvas container may also include logic to implement the scaling parameters as attached properties at runtime. The resizing action may iterate through the children of the composite shape (i.e., the remaining sub-elements) to apply the scaling factor(s) to each sub-element to create an undistorted, resized rendering of the original composite shape ","With reference to , a runtime resizing action may include increasing the height of a window including a graphic display . After the resizing action, as illustrated in , some sub-elements of the composite shapes within the \u201cReactor-1\u201d area  of the display  are increased in height by the scaling factor that was set at configuration time, while others are not. For example, the size of a storage area , an inlet sub-element , and an outlet sub element were configured to remain unchanged upon executing a resizing action at runtime, as illustrated in . Also, while an overall position of the inlet and outlet sub-elements on the tank changes from shape to shape , the relative position of these sub-elements as being in the middle of the tank shape does not change. As previously described, both the inlet and outlet sub-elements were configured to include at least a Size and a Position scaling parameter that determines the sub-element's behavior upon resizing. For example, the Size scaling parameter may have been set to \u201cNone\u201d while the Position scaling parameter may have been set to \u201cX and Y\u201d or \u201cY.\u201d Thus, in the above example, the scaling factor of two for the change in height (i.e., the Y dimension) would be applied the position, but not the size of the inlet and outlet sub-elements. Likewise, the scaling parameters, if any, of the storage area composite shape may have been set to reflect no changes upon executing a runtime resizing action.","Of course, the display  may be resized in a variety of dimensions (e.g., the width, length, or X dimension, as illustrated in ). As previously described, upon executing a resizing action, the unscaled widths of each composite shape within the display  may be compared to the definition widths to calculate a scaling factor for each sub-element that was previously configured to include a scaling parameter. For example, with reference to , a width scaling factor may be applied iteratively to those composite shape sub-elements that include a width scaling parameter (e.g., the tank composite shape and sub-elements). In this example, the scaling factor of two for the change in width (i.e., the X dimension) would be applied the position, but not the size of the inlet and outlet sub-elements , . The various other composite shapes and associated sub-elements of the display  may include scaling parameters, as described above, and the scaling factor may wholly or partially be applied to these composite shapes and sub-elements, as well.","With reference to -, -, and , a method  may describe one or more routines to resize a composite shape without distortion in both a configuration time and runtime environment. The method  may be employed during configuration of one or more graphic displays as depicted in , , and , or in a runtime environment as depicted in , , and . For example, at configuration time when a user is creating an operator display and configuring various composite shapes within a graphic editor , the method  may resize a shape without distortion to produce an accurate representation of a process control plant. Also, at runtime when an operator is manipulating an operator display  at a workstation of the process control plant, the operator may resize the operator display, or resize various portions of the operator display for personal customization, and the method  may resize the composite shapes in the runtime environment. Generally, routines - described below may occur during a resizing action while positioning composite shapes on a graphic display at configuration time and during a resizing action while an operator is viewing the graphic display at runtime.","At routine , the method  may configure one or more scaling parameters  for a sub-element  of a composite shape . As previously described, the scaling parameters  may define one or more characteristics of a sub-element that may be modified during a resizing action performed on a corresponding composite shape. The scaling parameters  may include any characteristic of the sub-element or the composite shape that may be changed by a resizing action (e.g., one or more of a position, a size, an edge width, a font size, a corner radius, etc.). For example, configuration of a scaling parameter may include setting a scaling parameter to restrict an X-dimension position of a sub-element during resizing of an associated composite shape's width (i.e., x-dimension) or locking a font size of a text object sub-element while anchoring the object to a region or portion of the composite shape. Of course, many other configurations are possible, including allowing a rectangle to increase or decrease in one dimension during resizing while restricting its resizing in another dimension, allowing a corner radius of a triangle to resize in an x-dimension, but not in a y-dimension, etc. The one or more scaling parameters  may be bound to the one or more sub-elements  such that the scaling parameters  are also implemented at runtime. As previously described, one or more of the scaling parameters and the scaling logic may be included with the sub-elements themselves (i.e., a common framework for all shapes), or may be incorporated into the Scaling Canvas (i.e., the scaling parameters are included as attached properties of the Scaling Canvas). Regardless, the Scaling Canvas does not need to be aware of the scaling parameters associated with each specific shape or sub-element.","At routine , a user, application, or other entity may configure a composite shape. The composite shape may be placed on or contained within a Scaling Canvas , as previously described. For example, as a composite shape is being created, one or more sub-elements may be placed within a Scaling Canvas container. These sub-elements may be resized and positioned within the Scaling Canvas as desired by the user. Once the size, position, and other parameters of the sub-element are finalized within the Scaling Canvas container, the method  may retrieve and store the baseline or \u201cunsealed\u201d parameters at routine . These unscaled parameters may be used as the basis for computing new dimensions of a composite shape during a later resizing action.","At routine , the method  may compute one or more scaling factors for the composite shape. In one embodiment, the scaling factor is a ratio of an unscaled parameter (as stored at routine ) to a value of a composite shape's defined parameter. For example, as the composite shape is resized, the scaling canvas will be changed by a factor in one or more dimensions. Thus, if the composite shape is doubled in size in a Y dimension, then the scaling factor for that resizing action will be two. Of course, the scaling factors may be calculated for any resized dimension of the composite shape (e.g., an X dimension, a Z dimension, etc.).","At routine , the method  may iterate to each sub-element of the composite shape in preparation of applying the scaling factor computed at routine . In some embodiments, the method  may iterate to each sub-element of the composite shape. For example, the method  may determine whether or not the sub-element includes a scaling parameter at routine . In other embodiments, the method  may only iterate to those sub-elements that include one or more of the scaling parameters, as previously discussed. For example, the method  may determine which of the composite shape's sub-elements include a scaling parameter before iterating to a sub-element or before another of the previously-described routines. Regardless of when the method  determines whether a sub-element includes one or more scaling parameters, the method  may scale the sub-element at routine . In some embodiments, the method scales the sub-element by applying the scaling factor to the unscaled dimension that corresponds to the resizing dimension of the composite shape. For example, if the method  computed a scaling factor of two at routine  for a resizing in an X dimension, the sub-element included an unscaled X dimension of one hundred and a scaling parameter that permitted the resizing in the X dimension, then the scaled value of the X dimension for the sub-element would be two hundred. If, however, the sub-element did not include a scaling parameter or included a scaling parameter that did not permit resizing in the X dimension, then the method  may not resize the sub-element at routine . If the sub-element does not include a scaling parameter, the method  may proceed to routine .","At routine , the method  may determine whether or not the composite shape includes one or more sub-elements that have not been scaled. In some embodiments, the method  may include only those sub-elements that also include a scaling parameter in the determination of whether one or more sub-elements have been scaled at routine . In other embodiments, the method  may include all sub-elements or one or more other subsets of the sub-elements in the determination at routine . If there are no sub-elements that have not been scaled  or are otherwise remaining to be checked or resized by the method, then the method may end. If more sub-elements remain, then the method may return to routine  to re-iterate the previously-described routines.","When implemented, any of the software described herein may be stored in any computer readable memory such as on a magnetic disk, a laser disk, or other storage medium, in a RAM or ROM of a computer or processor, etc. Likewise, this software may be delivered to a user, a process plant or an operator workstation using any known or desired delivery method including, for example, on a computer readable disk or other transportable computer storage mechanism or over a communication channel such as a telephone line, the Internet, the World Wide Web, any other local area network or wide area network, etc. (which delivery is viewed as being the same as or interchangeable with providing such software via a transportable storage medium). Furthermore, this software may be provided directly without modulation or encryption or may be modulated and\/or encrypted using any suitable modulation carrier wave and\/or encryption technique before being transmitted over a communication channel.","While the present invention has been described with reference to specific examples, which are intended to be illustrative only and not to be limiting of the invention, it will be apparent to those of ordinary skill in the art that changes, additions or deletions may be made to the disclosed embodiments without departing from the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4","i":"a "},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","i":"b "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4","i":"c "},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 5","i":"c "},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 6","i":"a "},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 6","i":"b "},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 6","i":"c "},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
