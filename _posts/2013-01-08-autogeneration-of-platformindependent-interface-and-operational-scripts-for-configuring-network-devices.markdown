---
title: Auto-generation of platform-independent interface and operational scripts for configuring network devices
abstract: A network device is described that parses configuration data of the network device in accordance with a schema, for candidate configuration parameters. The device outputs a parameter identifier of each candidate configuration parameter, and in response, receives an indication of a selection of the candidate configuration parameters and corresponding labels. Both the selected parameters and the labels conform to a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network. The device generates a device-specific configuration script for modifying the configuration data of the device in accordance with the schema of the device. The device-specific configuration script can receive, via the platform-independent interface for the remote procedure call, parameterized information associated with the selected parameters and update the configuration data based on the parameterized information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09094299&OS=09094299&RS=09094299
owner: Juniper Networks, Inc.
number: 09094299
owner_city: Sunnyvale
owner_country: US
publication_date: 20130108
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to computer networks, and more particularly, to interfaces for interacting with devices within computer networks.","A computer network is a collection of interconnected computing devices that can exchange data and share resources. A variety of devices operate to facilitate communication between the computing devices. For example, a computer network may include routers, switches, gateways, firewalls, and a variety of other devices to provide and facilitate network communication. Large enterprises may operate computer networks that include hundreds or even thousands of geographically distributed network devices. These network devices typically include mechanisms, such as management interfaces, for locally or remotely configuring the devices. By interacting with the management interface, various clients, such as human administrators and automated scripts, can configure and provision a device for a particular service on the network.","In some cases a network device may provide multiple management interfaces of different types. For example, a network device may support a management interface that presents a command line interface by which a client can enter text-based commands to be applied by the network device. As another example, the network device may provide a management interface that by which the commands and configuration data may be specified in accordance with a data description language, such as the extensible markup language (XML). Examples of such interfaces include interfaces that support the Network Configuration (NETCONF) protocol, or a derivative thereof, such as the Juniper Device Management Interface, to perform the configuration. Such interfaces may be useful for computer-driven clients, such as automated scripts or network management systems. Further information on XML documents and the NETCONF protocol can be found in Extensible Markup Language (XML) 1.0 (Fifth Edition), W3C Recommendation 26 Nov. 2008, and R. Enns et al., RFC 4741: \u201cNETCONF Configuration Protocol,\u201d Network Working Group, the Internet Engineering Task Force draft, December 2006, available at http:\/\/tools.ietf.org\/html\/rfc4741, respectively, the entire contents of both being incorporated herein by reference.","These mechanisms and management interfaces can be used to configure a device for a particular service. To configure a device for a particular service, the management interface may be used to read, write, and otherwise edit configuration data associated with a particular device. Configuration data of a device is typically specified in accordance with one or more manufacturer-supplied schemas (e.g., XML schemas typically in the form of XML Schema Definition (XSD) documents). Further information on XSD documents can be found in XML Schema Part : Structures Second Edition, W3C Recommendation 28 Oct. 2004, the entire contents is incorporated herein by reference. In general, schemas specify appropriate syntactical structure of configuration data specific to a particular device. For example, a schema may describe the elements and attributes of a valid configuration file for a given device in view of the specifications of the device, the functions provided by the device, the network requirements for configuration of the device (e.g., an Internet protocol (IP) address and hostname for the device), and mechanisms for interacting with the device. Using the management interface of a device, a client or network administrator can provide configuration data to the device, in the format specified by the schema, to correctly configure the device for a particular network service.","Without any standardization across industry, schemas may vary from one network device manufacturer to the next. Similarly, manufactures change schemas as new products and new product revisions are developed. Understanding the differences in schemas and managing and configuring devices in a large network that each use a different schema can be challenging for an administrator or client. Individually configuring and provisioning network devices to provide configuration data in a form and format that is specific to the type and version of the particular device can be time consuming, expensive, and undesirable.","In general, this disclosure describes techniques for generating a device-specific script that runs on a network device to receive configuration commands per a common application programming interface (API) and configure the network device according to a particular schema of the device. The device-specific-script allows a user (e.g., a client, an administrator, etc.) to configure and provision a network device without understanding or having knowledge of the particular schema of the device. A script builder generates the device-specific script by parsing template configuration data of the device and prompting the user for information as to whether portions of the template configuration data should be parameterized. Once the device-specific script is enabled, the user can call the device-specific script via a command that satisfies the format of the common API. Data associated with the parameterized values is passed to the device-specific script during this command. The script configures the device according to the device-specific schema using the data associated with the parameterized values. In this manner, the user need not submit individualized configuration commands that satisfy the schema of a particular network device. The user can instead use a single common commands to configure an entire network of devices regardless of the schema used by each device.","In one example, a method comprises parsing, by a script builder module of a network device, configuration data of the network device in accordance with a schema of the network device for one or more candidate parameters for configuration. Each of the one or more candidate parameters may comprise a configurable attribute of the network device in the configuration data. The method may further include outputting, at an interface of the network device, a parameter identifier of each of the one or more candidate parameters. The method may further include receiving, at the interface of the network device, an indication of a selection of the one or more candidate parameters and a plurality of labels. Each label in the plurality of labels may correspond to a different one of the selected candidate parameters, and both the selected candidate parameters and the plurality of labels may conform to a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network. The method may further include generating, by the script builder module of the network device, based at least in part on the selected candidate parameters and the schema, at least one configuration script for modifying the configuration data of the network device in accordance with the schema. Generating the at least one configuration script may comprise configuring the at least one configuration script to receive, via the platform-independent interface for the remote procedure call, parameterized information associated with at least one of the selected candidate parameters, and update, based on the parameterized information, the configurable attribute in the configuration data that corresponds to the at least one of the selected candidate parameters.","In another example, a device comprises a control unit configured to execute a script builder module. The script builder module may be configured to parse, configuration data of the device in accordance with a schema of the device for one or more candidate parameters for configuration. Each of the one or more candidate parameters may comprise a configurable attribute of the device in the configuration data. The script builder module may be further configured to generate, based at least in part on a selection of one or more of the candidate parameters and the schema, at least one configuration script for modifying the configuration data of the device in accordance with the schema. In generating the at least one configuration script the script builder may configure the at least one configuration script to receive, via a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network, parameterized information associated with at least one of the selected candidate parameters, update, based on the parameterized information, the configurable attribute in the configuration data that corresponds to the at least one of the selected candidate parameters. The device may further include an interface configured to output an parameter identifier of each of the one or more candidate parameters and receive the indication of the selection of the one or more candidate parameters and a plurality of labels. Each label in the plurality of labels may correspond to a different one of the selected candidate parameters, and both the selected candidate parameters and the plurality of labels may conform to the platform-independent interface for the remote procedure call.","In another example, a computer-readable storage medium comprises instructions that, when executed, cause a processor to parse, by a script builder module executed by the processor, configuration data of a network device in accordance with a schema of the network device for one or more candidate parameters for configuration. Each of the one or more candidate parameters may comprise a configurable attribute of the network device in the configuration data. The instructions, when executed, may further cause the processor to output, at an interface executed by the processor, a parameter identifier of each of the one or more candidate parameters. The instructions, when executed, may further cause the processor to receive, at the interface executed by the processor, an indication of a selection of the one or more candidate parameters and a plurality of labels. Each label in the plurality of labels may correspond to a different one of the selected candidate parameters, and both the selected candidate parameters and the plurality of labels conform to a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network. The instructions, when executed, may further cause the processor to generate, by the script builder module executed by the processor, based at least in part on the selected candidate parameters and the schema, at least one configuration script for modifying the configuration data of the network device in accordance with the schema. In generating the at least one configuration script the script builder module executed by the processor may configure the at least one configuration script to receive, via the platform-independent interface for the remote procedure call, parameterized information associated with at least one of the selected candidate parameters, and update, based on the parameterized information, the configurable attribute in the configuration data that corresponds to the at least one of the selected candidate parameters.","The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["2","5","5","10","5","5","5","2","5","2","5"]},"Device management system  is communicatively coupled to elements  via network  (e.g., enterprise network ). Device management system  may be coupled either directly or indirectly to the various elements . Administrator  may use device management system  to manage and to configure elements  to specify certain operational characteristics that further the objectives of administrator . For example, administrator  may specify for an element  a particular operational policy regarding security, device accessibility, traffic engineering, quality of service (QoS), network address translation (NAT), packet filtering, packet forwarding, rate limiting, or other policies. Device management system  uses a network management protocol designed for management of configuration data within managed network elements , such as the SNMP protocol or the Network Configuration Protocol (NETCONF) protocol or a derivative thereof, such as the Juniper Device Management Interface, to perform the configuration. In general, NETCONF provides mechanisms for configuring network devices and uses an Extensible Markup Language (XML)-based data encoding for configuration data, which may include policy data. The Simple Network Management Protocol (SNMP) may allow device management system  to traverse and modify management information bases (MIBs) that store configuration data within each of elements . NETCONF is described in RFC 4741, as indicated above. Further details of the SNMP protocol can be found in Harrington et al., RFC 3411, \u201cAn Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks,\u201d Network Working Group, the Internet Engineering Task Force draft, December 2002, available at http:\/\/tools.ietf.org\/html\/rfc3411, the entire contents of which are incorporated herein by reference.","In common practice, device management system  and elements  are centrally maintained by an IT group of an enterprise and are collectively referred to as an element management system (EMS) or a network management system (NMS). Administrator  interacts with device management system  to remotely monitor and configure elements . For example, administrator  may view alerts received by device management system  regarding any of elements , view configuration data of elements , modify the configurations data of elements , add new elements  to network , remove existing elements  from network , or otherwise manipulate network  and elements  therein. Although described with respect to an enterprise network, the techniques of this invention are applicable to other network types, public and private, including local area networks (LANs), virtual LANs (VLANs), virtual private networks (VPNs), and the like.","In some examples, administrator  uses device management system  or a local workstation to interact directly with a management interface of each of elements  using a user interface. Example user interfaces supported by a management interface may include secure shell (SSH) interfaces, command line interfaces (CLI), web-based interfaces, graphical user interfaces (GUIs), and the like, by which administrator  can interact with elements  directly by issuing text-based and\/or graphical based commands. In other examples, administrator  uses device management system  or a local workstation to indirectly interact with a management interface of each of elements . For instance, administrator  may write a script for configuring one of elements . Administrator  may invoke the script at device management system . The script may establish a network communication session between device management system  and the respective one of elements  according to a device management protocol. For instance, the script may establish NETCONF sessions between management device  and one or more of elements . The script may issue commands and transfer data according to the device management protocol to the respective one of elements  and in response, receive data from the respective one of elements .","In either case, whether communicating directly or indirectly with elements , administrator  configures elements  in accordance with a particular schema associated with each of elements  (e.g., an XML schemas in the form of an XSD document, as described above). Each particular schema specifies the proper syntax of communication for interacting with and configuring a respective one of elements . For example, the schema of element A describes the elements and attributes of a valid configuration file for element A in view of the specifications of element A, the functions that can be performed by element A, the network requirements for configuration of element A, and mechanisms and syntax of commands for interacting with element A. Schemas may vary across elements , such that a schema of one of elements  may differ from a schema of a different one of elements . Schemas may vary based on the capability and network services associated with each of elements . Schemas may also differ as a result of design choices made by a particular manufacturer or as a result of capability differences from one version of elements  to the next.","In the example of , management device  participates in NETCONF sessions A-C with elements A-C, respectively, to exchange commands, configuration data, operational data, and the like, between management device  and each of elements A-C. NETCONF calls during NETCONF sessions are commonly used to remotely configure and provision network devices. Configuring a device for a particular service using NETCONF generally requires that the NETCONF session and parameterized data transmitted during the NETCONF session provide configuration data that conforms to a particular syntax and arrangement defined by the schema and the platform specifics of the respective device that is being configured. Since network devices and respective schemas for the configuration data can vary from one network device to the next, different sets of NETCONF calls and parameterized data may be required to configure different network devices for the same network service. The NETCONF calls, and the configuration data provided thereby, for configuring the different network devices for the same service can vary greatly from one network device to the next. As such, an administrator of an enterprise network may use extensive time and computing resources to manually write individualized sets of NETCONF calls to remotely configure the different network devices for the same network service. Adding a new device to the enterprise network may require a new and custom set of NETCONF calls to be generated for the new device.","In the example of , device management system  uses NETCONF as one example of a mechanism for remotely configuring and provisioning elements . That is, as described herein, rather than individually formatting each set of NETCONF calls to conform to the device-specific schemas of each of elements , device management system  uses the same set of NETCONF calls to configure each of elements  for a particular service. In other words, device management system  uses the same set of NETCONF calls for configuring each of elements , irrespective of the individual schemas of elements . Each of elements  executes a custom, device-specific configuration script that is invoked and receives parameter values according to a standard set of NETCONF calls, defined by a common API. The configuration scripts executing on each of elements  translate these parameter values into unique NETCONF configuration commands that meet the criteria of the schema of the underlying one of elements  where the configuration scripts are being executed. Moreover, the device-specific configuration scripts may be automatically generated for each of elements , thereby alleviating any burden on administrator  in creating such scripts.","In one example, device management system  may establish NETCONF sessions A-C with element A-C respectively. Each of elements A-C may use a different respective schema and likewise, individually execute a device-specific configuration script that configures the one of elements A-C in accordance with the respective schema of each of elements A-C. Although the built-in logic of the configuration scripts may vary from one to the next, all the configuration scripts of network  present a same common API for receiving NETCONF calls from device management system . As such administrator  can configure elements A-C using the same NETCONF calls to configure elements A-C, irrespective of the schemas used by elements A-C.","In one example described herein, administrator  may utilize a script builder configured to generate the device-specific configuration scripts that execute at each of elements A-C. The script builder may reside and execute at device management system  or copies of the script builder may each reside and execute at each of elements A-C. In either case, prior to configuring and provisioning elements A-C of network , administrator  may use device management system  to invoke the script builder to generate one or more configuration scripts for each of elements A-C.","By invoking the script builder for each of elements A-C, the script builder may parse configuration data, which conforms to the schema(s) of the respective elements A-C, for one or more candidate configuration parameters. For example, prior to invoking the script builder associated with element A, administrator  may use device management system  to generically configure element A for a particular service, thereby creating \u201ctemplate\u201d configuration data. In other words, from device management system , administrator  may use device management system  to send commands (e.g., CLI, NETCONF, and the like) to configure one or more interfaces of element A for a target network service that administrator  wishes to deploy across multiple elements . These commands cause element A to generate template configuration data (e.g., one or more XML files) for the target network service that conforms to the schema(s) of element A.","After element A generates this template configuration data, administrator  may use device management system  to invoke the script builder associated with element A to generate a device-specific script for element A to present the common API to device management system . The script builder of element A may retrieve the template configuration data of element A and parse the template configuration data for fields, elements, attributes, leaf nodes, and other data that may represent configurable attributes (e.g., candidate configuration parameters) associated with element A.","The script builder may identify the configurable attributes as one or more candidate configuration parameters to be settable through the API to be presented by the device-specific script. For instance, the script builder may output a user interface from which administrator  may use device management system  to select which of the one or more candidate configuration parameters to include as configurable configuration parameters. By selecting one or more of the candidate configuration parameters, administrator  is in essence selecting which configuration parameters are to be included as configurable configuration parameters within the API and, therefore, modifiable by administrator  via NETCONF calls from device management system  to a configuration script executing on element A.","The script builder may receive a selection of the one or more candidate configuration parameters. For example, administrator  may use device management system  to select one or more of the candidate configuration parameters via the user interface. The script builder may receive an indication of the selection and based on the indication, determine which of the one or more candidate configuration parameters to include as configurable configuration parameters in the logic of the configuration script.","The script builder may generate, based on the selection and the schema, at least one configuration script. For example, the script builder may determine a set of NETCONF calls, formatted according to the schema of element A, for modifying each of the selected configuration parameters. In other words, for each of the selected configuration parameters, the script builder may generate scripting language that can be invoked at element A. A call to this scripting language will perform the set of NETCONF calls, formatted according to the schema of element A, for modifying each of the selected configuration parameters.","For each selected configuration parameter, the script builder may add a wrapper around the associated scripting language that conforms to the common API for configuring each of elements  of network . In other words, the script builder may generate scripting language that can be invoked at element A using the syntax of the common API to perform the set of NETCONF calls, formatted according to the schema of element A, for modifying each of the selected configuration parameters.","The script builder may assemble the scripting language associated with each of the selected configuration parameters into a single configuration script, having an interface formatted according to the common API, that can be invoked, e.g., via NETCONF or CLI, to configure the selected configuration parameters of element A. A call to this script will configure element A by modifying data associated with each of the selected configuration parameters, according to the schema of element A, for modifying each of the selected configuration parameters.","In this way, administrator  may use device management system  to invoke the script builder associated with each of elements A-C to generate a configuration script for each one of elements A-C. After each of elements A-C has been updated to include a device-specific configuration script, administrator  can configure one or all of elements A-C by invoking the configuration script, e.g., using CLI, NETCONF calls, in a format according to the common API, without considering or understanding the underlying schemas for the configuration data of each element.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 2","FIG. 2"],"b":["14","14","5","2","14","14","14","14","20","22"]},"Network interface  represents an example interface that can communicatively couple network device  to an external device, e.g., another element of an enterprise network (e.g., network ), such as a router, switch, bridge, gateway, hub, or the like. Network interface  may represent a wireless and\/or wired interface, e.g., an Ethernet interface or a wireless radio configured to communicate according to a wireless standard, such as one or more of the IEEE 802.11 wireless networking protocols (such as 802.11 a\/b\/g\/n or other such wireless protocols). Network device  may include multiple network interfaces in various examples (e.g., when network device  corresponds to a router or switch), although only one network interface is illustrated for purposes of example.","Control unit  represents any combination of hardware, software, and\/or firmware for implementing the functionality attributed to control unit  and its constituent modules and elements. When control unit  includes software or firmware, control unit  further includes any necessary hardware for storing and executing the software or firmware, such as one or more processors or processing units. In general, a processing unit may include one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components.","Control unit  provides an operating environment for a number of different hardware or software modules that perform various processes and procedures of network device . In this example, control unit  includes management interface module , management daemon module , scripting engine module , and script builder module . Modules , , , and  may perform operations described herein using software, hardware, firmware, or a mixture of hardware, software, and firmware residing in and executing at network device . For example, control unit  of network device  may execute modules , , , and  as program code with one or more processors. In some examples, network device  may execute modules , , , and  as one or more virtual machines executing on underlying hardware. Modules , , , and  may operate independently or collectively to perform a process or service for network device .  illustrates various two-way communication paths for transmitting data and commands between modules , , , and  that facilitate collective operations performed on behalf of network device . For instance, management daemon module  shares a communication path between each of management interface module , scripting engine module , and script builder module .","Control unit  further includes schema data  and configuration data . Schema data  and configuration data  represent individual or a collective group of data stores, e.g., computer-readable storage medium capable of storing schema and configuration data for network device . These data stores may include, for example, random access memory (RAM), read only memory (ROM), flash memory, solid state drives, or the like. Control unit  and the underlying modules , , , and  may execute read and write instructions to access data stored at schema data  and configuration data .  illustrates communication paths between each of modules , , and , and one or more of schema data  and configuration data . For instance, management daemon module  shares a read-write communication path with both schema data  and configuration data . Scripting engine module  shares a read-write communication path with configuration data . Script builder module  shares a read-only communication path with schema data  and configuration data .","Control unit  further includes configuration scripts . Configuration scripts  represent instructions for reading and\/or modifying configuration data  in accordance with one or more schemas of schema data . In one embodiment, configuration scripts  are written in a scripting language, such as Extensible Stylesheet Language Transformations (XSLT), which may be used when writing scripts that interact with XML-formatted documents. Configuration scripts  may also be written in another scripting language, such as PERL, Python, PHP, Ruby, JavaScript, TCL, shell scripting languages such as sh, bash, or dash, or other languages. Configuration scripts  may be interpreted upon execution, as opposed to compiled code that is linked and executed. In another embodiment, configuration scripts  may be written in a language that is compiled and executed, such as C++.  illustrate a one way communication path between scripting engine module  and configuration scripts  and a one way communication path between script builder module  and configuration scripts . Configuration scripts  are described in more detail below, however, these two communication paths illustrate that, in general, configuration scripts  are generated by script builder module  and executed by scripting engine module  to provide a common API for configuring network device  in accordance with a device-specific schema of network device .","Schema data  includes one or more manufacturer-supplied schemas (e.g., one or more XSD files) associated with network device . Schema data  includes data that specifies appropriate syntactical structure of configuration data  for network device . In some examples, schema data  is pre-loaded with one or more schemas by a manufacturer of network device . In other examples, schema data  is loaded, updated, or otherwise modified after installation of network device  in network . In any event, schema data  includes data representative of one or more schemas that describe the elements and attributes of a valid configuration file for network device  in view of the specifications of network device , the functions provided by network device , the network requirements for configuration of network device , and mechanisms for interacting with network device . As described in further detail below, a client, such as administrator , can interact with network device  and provide configuration data to network device , in the format specified by one or more of these schemas, to correctly configure network device  for a particular network service.","Configuration data  includes data (e.g., one or more text files, databases, tables, data structures, XML configuration files, combinations thereof, or the like) that specify, e.g., system parameters, routing policies, forwarding options, network flow statistics, error logs, user information, router chassis inventory, and performance metrics. This configuration hierarchy may be specified by one or more of the XSD files within schema data . For proper operation of network device , the data within configuration data  is organized according to one or more of the schemas of schema data . As described in further detail below, a client such as administrator , can interact with network device  to access configuration data  to manage a policy or relationship between network device  and other network devices of network , configure network interface , adjust parameters for network protocol supported by network device , specify physical components within network device , modify other information about network device , and the like. In one embodiment, as further illustrated by , configuration data  is arranged in the form of a multi-level configuration hierarchy, having a plurality of inter-related objects.","Control unit  includes management interface module  by which a client, for example administrator  of , directly or remotely, accesses and configures resources within network device  and obtains operational information for those resources. In this example, management interface module  includes CLI module  and NETCONF module  that handle requests for establishing, respectively, CLI and NETCONF communication sessions and interpret, respectively, CLI and NETCONF remote procedure calls (RPC), commands, and other instructions on behalf of management daemon module . In other words, management interface  can receive a network communication via network interface  and translate the communication, from a CLI or NETCONF message or command, into a message or command that management daemon module  can understand and interpret for performing a process on behalf of network device . The fact that  illustrates only CLI module  and NETCONF module  should be construed in no way as limiting. For instance, management interface module  may include other modules that handle requests for establishing communication sessions using other network protocols and interpreting commands and instructions defined by other protocols on behalf of management daemon module .","In general, management daemon module  executes commands to manage or manipulate configuration data , although management module  also manages other components of network device . Control unit  executes management daemon module  to manage the configuration of network device , e.g. by interacting with management information interface module , scripting engine module , script builder module , schema data , and configuration data . For example, after establishing a NETCONF session with device management system  of , management interface module  may receive a NETCONF command, such as a RPC, via network interface . Management daemon module  may receive the RPC from management interface module  along with any related data, parameter values, and the like communicated to network device  via the NETCONF session. Management daemon module  may execute the RPC, which in some examples, may result in management daemon module  configuring network device  according to the parameters of the RPC. For example, the RPC may cause management daemon module  to write to configuration data  at a location where data associated with the particular device setting is stored. Management daemon module  may send a confirmation message to management interface module  confirming execution of the RPC and a change of the particular setting. Management interface module  may process the confirmation message and outputs data confirming the change via network interface  in accordance with the NETCONF protocol.","In some examples, management daemon module  interprets a command from management interface module  and in response to the command, interacts with scripting engine module  or script builder module . For instance, management daemon module  may receive a RPC to invoke one of configuration scripts  to handle configuring network device . In response, management daemon module  may invoke scripting engine module  by sending a command to scripting engine module  for executing a particular one of configuration scripts  associated with the RPC. Scripting engine module  may interpret the command from management daemon module  and execute the particular one of configuration scripts  to change information stored in configuration data .","In other examples, management daemon module  may interpret a RPC as a command to invoke script builder  to generate, view, modify, and\/or delete one of configuration scripts . Management daemon module  may invoke script builder module  by sending a run command to scripting builder module  or otherwise executing scripting builder module . In response, script builder module  may perform a series of operations related to outputting a user interface, parsing configuration data  for configurable attributes associated with network device , and generating, modifying, viewing, and\/or deleting one of configuration scripts .","In the example of , device management system  of  may use NETCONF as one example of a mechanism for remotely configuring and provisioning network device . In some examples, as described herein, rather than individually formatting a set of NETCONF calls to conform to the device-specific schemas of network device , device management system  can use the same set of NETCONF calls to configure network device  that device management system  uses to configure other elements  of network  for a particular service. In other words, network device  can receive the same set of NETCONF calls for configuring network device  that other elements  of network  can receive, irrespective of differences in the individual schemas of network device  and the other elements . Network device  executes a custom, device-specific configuration script stored as a configuration script , which responds to the standard set of NETCONF calls, defined by a common API. This configuration script translates NETCONF calls that are formatted according to the common API into unique configuration commands that meet the criteria of one or more schemas within schema data . Moreover, script builder  can automatically generate this device-specific configuration script for network device , thereby alleviating any burden on administrator  in creating such a script.","For example, administrator  may wish to configure network device  to receive the standard set of NETCONF calls, formatted according to the common API for configuring network device  and each of elements  of network  for a particular service. Using network management system , administrator  may use device management system  to start the process of configuring network device  to handle the NETCONF API calls by establishing a CLI communication session with network device . Administrator  may use device management system  to send one or more commands via the CLI interface to write generic configuration data to network device  for the particular service. For example, administrator  may use device management system  to send one or more RPC to network device  for editing configuration data  of network device . The one or more RPC may include one or more parameter placeholder values, e.g., data that represents either actual or temporary configuration settings for provisioning network device  for the particular service.","Management interface module  of network device  may acknowledge the CLI session with device management system , receive the one or more RPC, and relay the RPC received during the CLI session to management daemon module . Management daemon module  may interpret the RPC and write the parameter place holder values to configuration data . Through management interface module , management daemon module  may send a confirmation message to device management system  acknowledging the successful write to configuration data .","Administrator  may use device management system  to send an additional RPC to invoke script builder  for generating a device-specific configuration script. Management daemon module  may interpret the RPC and determine the RPC represents a request to invoke script builder module .","Management daemon module  may invoke script builder module  that generates one or more configuration scripts  for modifying configuration information (e.g., configuration data ) of the network device in accordance with a schema (e.g., schema data ) of network device . Each of configuration scripts  include a common interface for invoking the configuration script and receiving one or more parameterized values associated with the modification of the configuration information.","Once invoked, script builder module  may output a user interface (such as a text-based user interface compatible with the CLI session at device management system ) for receiving further instructions from a user (e.g., administrator ) for building the device-specific configuration script. Management daemon module , operating with management interface module  transmits the user interface for inclusion in the CLI session of network management system . The user interface may at first include a series of prompts requesting initial information about the current script building session. For example, the user interface may include one or more prompts that request the user to specify a particular service associated with the current script building session, identify configuration data (e.g., template data) associated with the particular service, and the like. Once presented with the user interface at the CLI, administrator  can interact with the user interface and input responses at device management system  that address the series of prompts. Script builder module  may receive information from management daemon module  based on user responses sent from device management system  via the CLI session, such as, a service identifier and an identifier of the template configuration data related to the service. Based on the information, script builder module  may identify one or more schema stored at schema data  related to the script building session and in addition configuration data stored at configuration data  related to the script building session.","The user interface may further include options for interacting with script builder module , for example options may include an option to define configuration parameters for the service, an option to build a new configuration script for the service, enable a particular one of configuration scripts , and the like. Script builder module  may receive an indication from management daemon module  of a selection of the option to define configuration parameters associated with network device . For example, once presented with the options of the user interface at the CLI, administrator  can interact with the user interface and select one or more of the options outputted by script builder . In this example, administrator  selects the option to define configuration parameters. Management interface  receives the selection and relays the selection through management daemon module  which transmits the selection to script builder .","In response to the selection to define configuration parameters, script builder module  may parse the template configuration data specified during the user interface session located within configuration data  of network device  and automatically identify one or more candidate configuration parameters. In other words, script builder module  may perform a series of read operations on the information within configuration data  associated with the template configuration data to identify candidate, or possible, elements of the template configuration data that can be modified and as such, elements that a client may want to include as configuration parameters settable by the configuration script being generated. For example, script builder module  may use a XML pull parser to sequentially read each element, attribute, and data within an XML file\u2014where the template configuration data is stored within configuration data . For each element, attribute, and data that the XML pull parser retrieves from the XML file, script builder module  may store the element, attribute, and data as a candidate configuration parameter.","Script builder module  may output one or more of the candidate configuration parameters to management interface module  for inclusion in the user interface currently embedded in the CLI session established with management system . From the CLI, administrator  may use device management system  to select one or more of the candidate configuration parameters included in the user interface. For instance, in response to outputting each candidate configuration parameter at the CLI, the user interface may require administrator  to type either \u201cyes\u201d or \u201cno\u201d at the CLI to indicate whether \u201cyes\u201d the candidate configuration parameter should be included as a configurable configuration parameter associated with the configuration script being generated, or \u201cno\u201d the candidate configuration parameter should not be included as a configurable configuration parameter. In cases when a \u201cyes\u201d response is received to identify the candidate configuration parameter as a configurable configuration parameter, script builder module  may include prompts requesting further information about the parameter (e.g., a parameter name, a description, and the like).","Script builder module  may receive a selection of the one or more candidate configuration parameters (and related information about the parameter). For example, management interface  may receive information associated with the selection of the one or more candidate configuration parameters from the CLI communication session and relay the information to management daemon module  which, in response, transmits the information to script builder . Script builder module  may receive the information and determine from the information, which of the one or more candidate configuration parameters administrator  selected from the user interface.","Once script builder module  receives the selection of the one or more candidate configuration parameters, script builder module  may generate, based on the selection and the schema, at least one configuration script within configuration scripts . Script builder module  may include logic to generate a file written in a scripting language, that script engine module  can execute. For example, according to at least one schema of schema data  related to the particular service identified above, script builder module  can generate script language that includes a series of NETCONF calls for configuring the selected configuration parameters in a way that conforms to the at least one schema based on values obtained when the configuration script is invoked. When executed by script engine module , the configuration script causes script engine module  to modify configuration data  for a particular service that conforms to at least one schema within schema data . The configuration script generated by script builder module  may include a common API, from which, script engine module  can receive parameterized values associated with the candidate configuration parameters selected from the user interface.","The configuration script may be invoked through a RPC from the CLI or NETCONF interface of network management system . The RPC may include a configuration script identifier as well as values associated with the selected candidate configuration parameters that the configuration script is configured to receive. The format of the RPC is defined by the common API associated with a particular service, for configuring each of elements  and network device  of network . For example, network management system  may establish a NETCONF session with network device  and during that session, transmit the RPC to invoke the configuration script. Management interface  receives the RPC and associated configuration parameter values via network interface  and relays the RPC and configuration parameter values to management daemon module . Management daemon module  invokes scripting engine module  to execute the one of configuration scripts  associated with the identifier in the RPC.","In response, scripting engine module  executes the one of configuration scripts , thereby configuring network device  according to the parameterized values received in the RPC. For each selected configuration parameter, the configuration script may include one or more instructions, that when executed by scripting engine module , write data (e.g., characters, numerical values, and the like) associated with the selected configuration parameter to configuration data , to configure network device  in accordance with the schema of network device .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 1","FIG. 1","FIG. 2","FIG. 1","FIG. 1","FIG. 2","FIG. 3","FIG. 3"],"b":["16","16","2","16","2","16","14","5","2","14","16","16","16"]},"In the example of , router  includes control unit  that provides control plane functionality for router . Router  also includes switch fabric  interconnecting a set of line cards A-N (collectively \u201cLC \u201d), each of which includes one or more packet-forwarding engines A-O (collectively \u201cPFE \u201d) that send and receive traffic by a set of interface cards A-N (collectively \u201cIFC \u201d) that typically have one or more physical network interfaces (ports). LC , components thereof, and switch fabric  collectively provide a data plane (also referred to as a forwarding plane) for forwarding network traffic. Although not shown in , PFE  may each include a central processing unit (CPU), memory and one or more programmable packet-forwarding application-specific integrated circuits (ASICs). Switch fabric  provides a high-speed interconnect for forwarding incoming data packets between PFE  for transmission over a network.","Control unit  provides control plane functions for router . For example, control unit  provides an environment for storing network topology information and providing a management interface to allow user access and configuration of router . The operating environment of control unit  may be implemented solely in software, or hardware, or may be implemented as a combination of software, hardware or firmware. For example, control unit  may include one or more processors which execute software instructions. In that case, control unit  may include various software modules or daemons executing on an operating system and various data stores that maintain information associated with these modules or daemons. Control unit  may include one or more non-transitory computer-readable storage mediums, such as computer memory or hard disk, for storing executable instructions and data.","Control unit  includes routing instance module  (RI ) that controls instances of network traffic routing (e.g., L routing) and network traffic forwarding (e.g., L forwarding) functions. In general, RI  maintains a routing information base data  (RIB ) that stores network routing information and network topology data representing a logical topology of a network, e.g., a spanning tree, from the perspective of the interfaces. RI  may also store updated MAC tables, MPLS label allocations, pseudowire information or other information related to the routing function. Based on RIB , RI  generates forwarding information base data  (FIB ) to contain forwarding data structures for programming each of PFEs .","In this example, control unit  is connected to each of LC  by a dedicated internal communication link . For example, dedicated link  may comprise a Gigabit Ethernet connection. In one embodiment, control unit  communicates data representative of a software copy \u2032 of FIB  into each of PFE  to program each of PFE  and thereby control forwarding of traffic by the corresponding components within the data plane that are associated with each routing instance controlled by RI . This allows FIB related data, stored in memory (e.g., on-chip RAM) of in each of PFE , to be updated without degrading packet-forwarding performance of router . In some instances, control unit  may derive separate and different software-copies of FIB related data for each respective PFE . In addition, one or more of PFE  may include packet-forwarding ASICs (not shown) that each one of PFE  programs with a hardware-copy of FIB related data based on the software-copies of FIB related data (i.e., hardware versions of the software FIB) copied to each respective PFE . In other, more complex embodiment, router  may have many (e.g., forty-eight, or sixty-four) individual LC , each of which may have four PFE  that each couple to up to multiple (e.g., sixteen) IFC .","In the example of , control unit  includes management interface module  (MIF ) and management daemon module  (MD) for managing the configuration of router , e.g., to configure router  to communicate on network, by manipulating configuration data  according to one or more schema . For example, device management system  may establish a NETCONF session with router  to configure router . Device management system  may send configuration data and a RPC that management daemon module  interprets as a request to change information within configuration data . Control unit  also includes script builder module  and scripting engine module  that are respectively configured to generate configuration scripts  and executed configuration scripts  according to the techniques described herein.","For example, administrator  may wish to generate a device-specific configuration script  that includes a common interface (e.g., API) for configuring router  in accordance with one or more schema data . During a CLI session established between device management system  and router  by administrator , management interface module  and management daemon module  may receive a RPC to invoke script builder module . In response, management daemon module  may invoke script builder module . Script builder module  may cause management interface module  to output a user interface within the CLI session that administrator  may interact with during the build of the configuration script. From the user interface within the CLI session, administrator  may use device management system  to select an option for building a new script and cause script builder module  to begin the configuration script build process.","To generate the configuration script, script builder module  may parse template configuration data stored at configuration data  of router  for one or more candidate configuration parameters. In other words, an XML pull parser of script builder module  may parse one or more XML files that include the template configuration data within configuration data  to identify potential (i.e., candidate) configurable attributes of router . Either sequentially or after identifying multiple configurable attributes, script builder module  may output the one or more candidate configuration parameters to the user interface of the CLI session with device management system .","From the user interface, administrator  may use device management system  to select one or more of the candidate configuration parameters to include as configurable attributes in the configuration script. In addition, from the user interface, administrator  may use device management system  to provide other information that further describes the selected configuration parameters (e.g., parameter name, a label, and the like). Script builder module  may receive a selection of the one or more candidate configuration parameters from management interface module  and management daemon module . Based on the selection received via the CLI session with administrator , and further based on schema data , script builder module  may generate at least one of configuration scripts .","The configuration script generated by script builder module  is generated to conform to a scripting language that scripting engine module  can execute. After generating the configuration script, administrator  may use device management system  to send a RPC to router  to invoke the generated configuration script. The RPC command complies with the common API and includes values to configure each of the candidate configuration parameters identified during the build process. Management daemon module  may receive the RPC and invoke the configuration script using scripting engine module . Once executed by scripting engine module , the configuration script correctly configures router  according to the information within schema data .","A detailed example of  for configuring router  according to the techniques described herein is described below including example NETCONF commands and CLI commands to generate a configuration script and to invoke and interact with the configurations script. As described above, administrator  may wish to generate a device-specific configuration script  for configuring router  for a particular service. The device-specific configuration script  includes a common interface for configuring router  in accordance with one or more schema data . In this example, the particular service is identified as a \u201cvpn-service\u201d.","In this example, administrator  causes device management system  to establish a CLI session between device management system  and router . During the CLI session, management interface module  and management daemon module  may receive one or more RPC to specify generic (e.g., template) configuration data  for the vpn-service. An example CLI session between device management system  and router  is shown below and illustrates an example for specifying template configuration data stored within configuration data  for the vpn-service.","cli> configure","[edit]","cli# edit groups vpn-service-template-group","[edit groups vpn-service-template-group]","cli# edit interfaces","[edit groups vpn-service-template-group interfaces]","cli# set ge-0\/0\/0 unit  encapsulation vlan-bridge","cli# set ge-0\/0\/0 unit  vlan-tags outer 0","The above series of CLI commands causes management daemon module  to perform a series of write operations at configuration data . The series of write operations results in data being generated and stored at configuration data . The data includes the following structure and an associated identifier \u201cvpn-service-template-group\u201d:",{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"interfaces {",{}]},{"entry":[{},{},"\u2003ge-0\/0\/0 {",{}]},{"entry":[{},{},"\u2003\u2003description \u201cConnected to customer- site-0\u201d;",{}]},{"entry":[{},{},"\u2003\u2003unit 0 {",{}]},{"entry":[{},{},"\u2003\u2003\u2003family bridge {",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003interface-mode access;",{}]},{"entry":[{},{},"\u2003\u2003\u2003\u2003vlan-id 300;",{}]},{"entry":[{},{},"\u2003\u2003\u2003}",{}]},{"entry":[{},{},"\u2003\u2003}",{}]},{"entry":[{},{},"\u2003}",{}]},{"entry":[{},{},"}",{}]},{"entry":[{},{},"poe {",{}]},{"entry":[{},{},"\u2003interface all;",{}]},{"entry":[{},{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"Management interface module  and management daemon module  may next receive a RPC to invoke script builder module . For example, administrator  may type the following command at the CLI of network management system :","$> op service-builder","In response to the above command received over the CLI of router , management daemon module  may invoke script builder module . Invoking script builder module  causes management interface module  to output a user interface at the CLI that administrator  may interact with to customize the build of the configuration script. The user interface may begin with the following prompt, requesting administrator  to identify the service related with the script building session and an identifier associated with template configuration data of the service, as shown, administrator  enters the service identifier and the identifier of the template configuration data stored at configuration data :","Welcome to Service Builder Script: (v1.0)","Enter the service name: vpn-service","Enter the group name: vpn-service-template-group","Next, script builder module  may cause the user interface to include a series of options related with the script building session. Administrator  may select one option within the user interface for (shown below as option 1, \u201cBuild Service API\u201d) for defining the interface associated with the configuration script being generated from this session.","[Op Script Builder\u2014Main Menu]","-----------------------------------","1. Show Variables","2. Build Service API","3. Enable Service API","Q. Quit","-----------------------------------","Enter Selection:> 1","Based on the selection received by script builder module  to define the interface associated with the configuration script being generated, script builder module  may parse configuration data  of router  for one or more candidate parameters. For example, an XML pull parser of script builder module  may parse data (e.g., an XML file) associated with the template configuration data identifier \u201cvpn-service-template-group\u201d stored at configuration data  to identify potential (i.e., candidate) configurable attributes of router , i.e., candidate configuration parameters. In one example, the XML pull parser may associate each \u201cleaf node\u201d of the template configuration data with a candidate configuration parameter. For example, the XML file may store the configuration data according to a multi-level configuration hierarchy, having a plurality of inter-related objects or nodes. The highest level node is referred to as a root node. The inter-related objects share connections, i.e., branches, with other objects or nodes in adjacent levels. The objects that do not share a branch with a lower level object are known as leaf nodes. The XML pull parser may traverse the XML file that stores the configuration data and identify each of these leaf nodes as candidate configuration parameters.","Either sequentially or after identifying multiple candidate configuration parameters, script builder module  may output the one or more candidate parameters to the user interface of the CLI session with device management system . The following text shows and example output of script builder module  within the user interface of the CLI session:","List of variables under each hierarchy to parameterize:","1. [edit groups vpn-service-template-group interfaces]","1.1. interface\/name","1.2. interface\/description","1.3. interface\/unit\/name","1.4. interface\/unit\/family\/bridge\/interface-mode","1.5. interface\/unit\/family\/bridge\/vlan-id","2. [edit groups vpn-service-template-group poe]","2.1. interface\/name --------------------------------------------------------------------","Enter Selection:> [default:all]","From the user interface, administrator  may use device management system  to select one or more of the candidate configuration parameters to include as configurable attributes in the configuration script. Script builder module  may receive a selection of the one or more candidate configuration parameters from management interface module  and management daemon module . In this example, administrator  selects \u201call\u201d. In other words, administrator  selects and option to generate a configuration script that uses all of the leaf nodes of the template configuration data as configurable parameters. In one example, the selected candidate configuration parameters satisfy the common API of a particular service, e.g. the vpn-service.","Following the selection of candidate configuration parameters script builder module  may prompt the user for information about each of the selected parameters. Script builder module  may prompt the user for information such as, an name for each parameter and a description about the candidate configuration parameter to include in a help menu. Administrator  may use device management system  to respond to each prompt for information about the configuration parameters. Administrator  may enter parameter names that satisfy the common API of the vpn-service. In other words, administrator  may use device management system  to enter parameter names that are similar to the parameter names entered in generating a configuration script for the vpn-service for a different network device. Bellow shows administrator  naming and describing each of the selected configuration parameters:","Enter parameter name for: 1.interfaces\/interface\/name","*************************","[edit groups vpn-service-template-group interfaces]","Name for this parameter? InterfaceName","Do you want to revise \u2018InterfaceName\u2019? (yes\/no) [no]:","Enter parameter name for: 2.interfaces\/interface\/description","*************************","[edit groups vpn-service-template-group interfaces]","Name for this parameter? InterfaceDesc","Do you want to revise \u2018InterfaceDesc\u2019? (yes\/no) [no]:","Enter parameter name for: 3.interfaces\/interface\/unit\/name","*************************","[edit groups vpn-service-template-group interfaces]","Name for this parameter? UnitName","Do you want to revise \u2018UnitName\u2019? (yes\/no) [no]:","Enter parameter name for: 4.interfaces\/interface\/unit\/family\/bridge\/interface-mode","*************************","[edit groups vpn-service-template-group interfaces]","Name for this parameter? Mode","Do you want to revise \u2018Mode\u2019? (yes\/no) [no]:","Enter parameter name for: 5.interfaces\/interface\/unit\/family\/bridge\/vlan-id","*************************","[edit groups vpn-service-template-group interfaces]","Name for this parameter? Vlanid","Do you want to revise \u2018Vlanid\u2019? (yes\/no) [no]:","Do you want to commit the previously selected options to create vpn-servicescript? (yes\/no) [yes]:","Enter parameter name for:","2.poe\/interface\/name","*************************","[edit groups vpn-service-template-group poe]","Name for this parameter? PoeInterfaceName","Do you want to revise \u2018PoeInterfaceName\u2019? (yes\/no) [no]:","Based on the selection of the candidate configuration parameters and the associated parameter information received via the CLI session with administrator , and further based on schema data  of router , script builder module  may generate a configuration script . For example, the configuration script generated by script builder module  is generated to conform to a scripting language that scripting engine module  can execute. Scripting builder module  may output a confirmation message to the user interface that the configuration script was successfully generated and allow the user to enable the configuration script. For example, below is an example user interface that shows the configuration script \u201cvpn-service\u201d was generated and a menu for receiving an option to enable the configuration script.",". . . Created service script: \/var\/db\/scripts\/op\/vpn-service.slax","[Op Script Builder\u2014Main Menu]","-----------------------------------","1. Show Variables","2. Build Service API","3. Enable Service API","Q. Quit","-----------------------------------","Enter Selection:>3","After generating the configuration script, and once enabled, administrator  may use device management system  to send a RPC to router  to invoke the generated configuration script. The RPC command complies with the common API and includes values to configure each of the candidate parameters identified during the build process. Management daemon module  may receive the RPC and invoke the configuration script using scripting engine module . Once executed by scripting engine module , the configuration script correctly configures router  according to the information within schema data . Below is a CLI command that causes management daemon module  to output the names and descriptions of the arguments, i.e., the configuration parameters, of the configuration script vpn-service specified during the build process described above:","$> op vpn-service ?","Possible completions:\n\n","After enabling the configuration script, device management system  may establish a NETCONF session with router , and configure router  according to the common API for vpn-service recognized by the vpn-service configuration script described above. Below are example NETCONF commands that cause management daemon module  to invoke the vpn-service configuration script described above and configure router  using the common API for the vpn-service:","<rpc>\n\n","<\/rpc>",{"@attributes":{"id":"p-0159","num":"0181"},"figref":["FIG. 4","FIG. 4","FIG. 3","FIG. 4","FIG. 4"],"b":["80","68","76","70","80","74"]},"In this example, configuration data  includes inter-related objects (\u201cobjects\u201d) , A, B, A, B, C, A, B, A, A, and B interconnected by branches -. Object  is a root object, and objects A, B, A, B, C, A, B, A, A, and B are child objects. For exemplary purposes only two child objects, object A and B of root object  are illustrated: INTERFACES object A and POE object B. As illustrated, each of the child objects A and B have associated textual labels, e.g., \u201cINTERFACES,\u201d and \u201cPOE.\u201d Child object A has child objects A-C with textual labels, respectively, \u201cNAME\u201d, \u201cDESCRIPTION\u201d, and \u201cUNIT\u201d. Child object C has child objects A and B with textual labels, respectively, \u201cNAME\u201d and \u201cFAMILY\u201d. Child object B has child object A and child object A with textual label \u201cBRIDGE.\u201d Child objects A and B have textual labels, respectively, \u201cVLAN-ID\u201d and \u201cIF-MODE\u201d and no child objects dependent therefrom. Depending upon the complexity of network  and network device , configuration data  may be arranged as a hierarchy having numerous levels inter-relating thousands of objects or more.","In this example, objects B, A, B, A, A, and B are leaf nodes. In other words, these objects do not have child objects dependent therefrom. In one example, the XML pull parser of script builder module  of router  can traverse this hierarchy of configuration data  and determine these leaf nodes do not have dependent child object and determine the leaf nodes are candidate configuration parameters. Each leaf node in configuration data  includes a data element that represents a configurable attribute of router . For each selected configuration parameter, script builder module  generates scripting language, that when executed by scripting engine module , receives a parameterized value associated with the data element at the respective leaf node.",{"@attributes":{"id":"p-0162","num":"0184"},"figref":["FIG. 5","FIG. 5","FIG. 1","FIG. 2","FIG. 5","FIG. 1","FIG. 2"],"b":["10","14","10","14"]},"In the example of , network management system  may request a CLI communication session with network device  (). For example, administrator  may wish to configure network device  to receive a standard set of NETCONF calls, formatted according to a common API for configuring network device  and each of elements  of network  for a particular service. Administrator  may enter one or more commands at the CLI of network management system  that cause network management system  to send a request to network device  to establish a CLI communication session with network device . Network device  may receive the request from network management system  and in response, acknowledge the CLI communication session (). For example, network device  may send an acknowledgement message to network management system , at which point, administrator  may receive an indication at network management system  that the CLI communication session has been established.",{"@attributes":{"id":"p-0164","num":"0186"},"figref":"FIG. 5","b":["10","130","12","10","14","12","44","14","14","10","14","14","140","24","14","26","44","24","26","10","44"]},{"@attributes":{"id":"p-0165","num":"0187"},"figref":"FIG. 5","b":["10","150","12","10","36","10","24","14","26","14","24","36","26","14","36","160","26","36","14"]},"Once invoked, script builder module  may output a user interface (such as a text-based user interface compatible with the CLI session at device management system ) for receiving further instructions from administrator  for building the device-specific configuration script. The user interface may at first include a series of prompts requesting initial information about the current script building session. Script builder module  may receive an indication from management daemon module  of a selection of the option to define configuration parameters associated with network device . For example, once presented with the options of the user interface at the CLI, administrator  can interact with the user interface and select one or more of the options outputted by script builder . In this example, administrator  selects the option to define configuration parameters. script builder  receives the selection from management daemon module .","In response to the selection to define configuration parameters, script builder module  may parse configuration data  for one or more candidate configuration parameters (). Script builder module  may parse configuration data  of network device  in accordance with schema data  of network device  for one or more candidate parameters for configuration. Each of the one or more candidate parameters comprises a configurable attribute of network device  in configuration data . Script builder module  may traverse configuration data  based at least in part on a multi-level hierarchy of configuration elements defined by schema  to identify a plurality of leaf nodes of configuration data  (e.g., schema  of network device  may conform to a schema for an extensible markup language and configuration data  may conform to the extensible markup language). Each leaf node of the plurality of leaf nodes comprises a configurable attribute of network device . Script builder module  may determining the one or more candidate parameters correspond to each of the plurality of leaf nodes.","Script builder module  may output an identifier of each of the one or more candidate configuration parameters for inclusion in the user interface currently embedded in the CLI session established with management system  (). From the CLI, administrator  may use device management system  to select one or more of the candidate configuration parameters included in the user interface.","Administrator  may select from the user interface one or more of the candidate parameters. Device management system  may send the selected candidate parameters via the UI (). Script builder module  may receive a selection of the one or more candidate configuration parameters (). For example, management interface  may receive information associated with the selection of the one or more candidate configuration parameters from the CLI communication session and relay the information to management daemon module  which, in response, transmits the information to script builder .","In response to the selection, script builder module  may request additional information about the selected candidate parameters via the user interface (). For example, script builder module  may request a plurality of label identifiers. Each label in the plurality of labels corresponds to a different one of the selected candidate parameters. Both the selected candidate parameters and the plurality of labels conform to a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network. For example, administrator  may have designed a common API that administrator  would like to use to configure multiple different network devices for a service (e.g., a LAN, a vpn service, etc.) on network . The common API includes a RPC call that can receive parameterized values associated with configurable attributes (e.g., an IP address, a connection speed, a protocol specifier, and the like) of each of these different devices. Administrator  may have labels for each of these parameters for common use across the different devices. Use of common labels may eliviate the need for administrator  to keep track of different terminology used in defininig similar attributes between services. Within the user interface, script builder module  may request information, such as labels, about the selected parameters.","Script builder module  may receive the information about each of the selected candidate parameters (). For example, administrator  may enter a label for each of the selected parameters and script builder module  may receive, in addition to an indication of a selection of the one or more candidate parameters, a plurality of labels.","Based on the selected candidate parameters, the plurality of labels, and schema data , script builder module  may generate at least one device-specific configuration script within configuration scripts (). For example, script builder module  may include logic to generate a file written in a scripting language, that script engine module  can execute for modifying configuration data  of network device  in accordance with schema . Script builder module  may configure the device-specific configuration script to receive, via the platform-independent interface for the remote procedure call, parameterized information associated with at least one of the selected candidate parameters and update, based on the parameterized information, the configurable attribute in the configuration data that corresponds to the at least one of the selected candidate parameters.","For example, according to at least one schema of schema data  script builder module  can generate script language that includes a series of automatic NETCONF calls for configuring the selected configuration parameters in a way that conforms to schema . Script builder module  may map, based on the schema, each label of the plurality of labels to a portion of configuration data  that corresponds to the corresponding different one of the selected candidate parameters. In other words, script builder module  may associate each label with a portion of configuration data . Rather than associating each portion of the configuration data  with a label defined by schema , the device-specific configuration script can use the mapping to associate the common API syntax with a portion of configuration data . Script builder module  may generate, based on the mapped plurality of labels, a series of commands in a script language to update the portion of configuration data  that corresponds to the configurable attribute.",{"@attributes":{"id":"p-0174","num":"0196"},"figref":["FIG. 6","FIG. 6","FIG. 1","FIG. 2","FIG. 6","FIG. 1","FIG. 2"],"b":["10","14","10","14"]},"When executed by script engine module , a device-specific configuration script  may cause script engine module  to modify configuration data  for executing a particular service. The configuration script  may include a common API (e.g., a platform-independent interface for a remote procedure call for provisioning a service on any one of a plurality of different devices within a network), from which, script engine module  can receive parameterized values associated with selected candidate configuration parameters. The configuration script may be invoked through a RPC from the CLI or NETCONF interface of network management system . The RPC may include a configuration script identifier as well as values associated with the selected candidate configuration parameters that the configuration script is configured to receive. The format of the RPC is defined by the common API associated with a particular service, for configuring each of elements  and network device  of network . For example, network management system  may request that a NETCONF session be established with network device  (). Network device  may acknowledge the NETCONF communication session request (). During the NETCONF session, network management system  may send one or more commands via conform to the common API to invoke configuration script, including parameterized data (). For example, these NETCONF commands may include a RPC with one or more values associated with the selected candidate parameters. The RPC may be used by network management system  to configure multiple different network devices of network  for a particular service.",{"@attributes":{"id":"p-0176","num":"0198"},"figref":"FIG. 6","b":["24","14","280","26","34","46","34","290","34","34","34","44","44","42"]},"The techniques described in this disclosure may be implemented, at least in part, in hardware, software, firmware or any combination thereof. For example, various aspects of the described techniques may be implemented within one or more processors, including one or more microprocessors, digital signal processors (DSPs), application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs), or any other equivalent integrated or discrete logic circuitry, as well as any combinations of such components. The term \u201cprocessor\u201d or \u201cprocessing circuitry\u201d may generally refer to any of the foregoing logic circuitry, alone or in combination with other logic circuitry, or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.","Such hardware, software, and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition, any of the described units, modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather, functionality associated with one or more modules or units may be performed by separate hardware or software components, or integrated within common or separate hardware or software components.","The techniques described in this disclosure may also be embodied or encoded in a computer-readable medium, such as a computer-readable storage medium, containing instructions. Instructions embedded or encoded in a computer-readable medium may cause a programmable processor, or other processor, to perform the method, e.g., when the instructions are executed. Computer-readable media may include non-transitory computer-readable storage media and transient communication media. Computer readable storage media, which is tangible and non-transitory, may include random access memory (RAM), read only memory (ROM), programmable read only memory (PROM), erasable programmable read only memory (EPROM), electronically erasable programmable read only memory (EEPROM), flash memory, a hard disk, a CD-ROM, a floppy disk, a cassette, magnetic media, optical media, or other computer-readable storage media. It should be understood that the term \u201ccomputer-readable storage media\u201d refers to physical storage media, and not signals, carrier waves, or other transient media.","Various examples have been described. These and other examples are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
