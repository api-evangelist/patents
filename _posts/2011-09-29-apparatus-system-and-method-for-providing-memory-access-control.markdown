---
title: Apparatus, system, and method for providing memory access control
abstract: Described herein are apparatus, system, and method for providing memory access control to protect software (e.g., firmware backup) and other data. The method comprises providing, by a processor, a protected storage area in a memory for storing backup image of software; detecting corruption in the software; accessing the backup image of the software from the protected storage area; and updating the corrupted software using the backup image, wherein the protected storage area is a reserved storage area of the memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235719&OS=09235719&RS=09235719
owner: Intel Corporation
number: 09235719
owner_city: Santa Clara
owner_country: US
publication_date: 20110929
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CLAIM OF PRIORITY","FIELD OF THE INVENTION","BACKGROUND","SUMMARY"],"p":["This application claims the benefit of priority of International Patent Application No. PCT\/US2011\/053961 filed Sep. 29, 2011, titled \u201cAPPARATUS, SYSTEM, AND METHOD FOR PROVIDING MEMORY ACCESS CONTROL,\u201d which is incorporated by reference in its entirety.","Embodiments of the invention relate generally to the field of software security. More particularly, embodiments of the invention relate to an apparatus, system, and method for providing memory access control to protect software.","Computer platforms (or simply platforms) incorporate multiple components (e.g., CPU processor, chipset, video processor\/card, etc.) that run dedicated software called firmware (also referred to as platform firmware). The portion of firmware that is hardcoded or stored in a Read Only Memory (ROM) is considered immutable and therefore is expected not to vary over time. Platform firmware includes the first set of instructions that are executed by a computer system. To protect this important set of instructions from attacks or unintentional corruption, current solutions guard an image of the firmware by making it part of the root of trust. The root of trust that originates from the platform hardware passes from the hardware to the software through the firmware of the platform, and thus the firmware becomes a critical part of the chain of trust.","In order to correct bugs and\/or add features to the firmware, there is generally another portion of the platform firmware that is programmable and updatable. Methods of compromising platform firmware are continually being developed. Compromising platform firmware enables an arsenal of very useful tools to attack a computer system. Unlike software attacks, compromised firmware is both hard to detect and difficult for a computer system to recover from. Compromised firmware is mostly invisible to the software layer of a computer system, including most anti-virus and spyware tools. The invisible nature of firmware makes it ideal for rootkits. Rootkits are compact and dormant malicious hooks in the platform that attain highest possible privilege and lowest visibility to running software. Their primary function is to provide an application programming interface (API) to viruses and worms on an infected system.","Furthermore, the potential damage from a malicious firmware attack is far worse than a software attack due to the persistent nature of the firmware. For example, a denial of service Disk Operating System (DOS) attack on the system software stack may result in a corrupted Operating System (OS) stack that would need to be reinstalled. In contrast, a compromised firmware DOS attack may result in a completely unbootable and unusable platform. A recovery solution to such firmware corruption may require reinstalling a backup image of firmware.","Contents on a non-volatile memory (e.g., hard disk drive, solid state drive) can be protected at the host end by the operating system or ring-0 software. However, any ring-0 malware can get access to the non-volatile memory and therefore corrupt any data on the non-volatile memory, including backup images of the firmware or any software that needs protection. Enabling a non-volatile memory password to protect the data in the non-volatile memory is also prone to malicious attacks. For example, when a user is prompted to enter the password for the non-volatile memory at boot time, the contents of the password are no longer protected from external\/internal software attacks. Additionally, partitioning of memory areas on a non-volatile memory does not provide meaningful security of data in the hard dive by itself.","Current technologies have very poor, if any, mechanisms for providing a protected storage for the backup image of platform firmware or for any other software that needs protection.","Embodiments of the invention relate to an apparatus, system, and method for providing a protected storage and access for a backup image of platform firmware or for any other software that needs protection.","In one embodiment, the method comprises providing, by a processor, a protected storage area in a memory for storing backup image of a software; detecting corruption in the software; accessing the backup image of the software from the protected storage area; and updating the corrupted software using the backup image, wherein the protected storage area is a reserved storage area of the memory.","In one embodiment, storing, by a memory controller, a backup image of a software in a reserved storage area of a non-volatile memory; pairing with a host, by provisioning secret and public keys from the host, to enter a paired and unprivileged state; authenticating the host, by a challenge-response protocol, to enter a paired and privileged state from the paired and unprivileged state; and allowing secure access, to the host, of the backup image of the software in response to entering the paired and privileged state.","In one embodiment, the system comprises a host comprising a processor; a display coupled to the host; and a solid state drive (SSD), coupled to the host, the SSD comprising: a memory controller, coupled to a non-volatile memory, operable to: store a backup image of a software in a reserved storage area of the non-volatile memory; pair with the host, by provisioning secret and public keys from the host, to enter a paired and unprivileged state; authenticate the host, by a challenge-response protocol, to enter a paired and privileged state from the paired and unprivileged state; and allow secure access, to the host, of the backup image of the software in response to entering the paired and privileged state.","In one embodiment, the method discusses above is executed by computer executable instructions. In one embodiment, the apparatus includes a machine readable storage medium including computer executable instructions that when executed cause a processor to perform the method discussed above.","While the summary of the invention has been described in conjunction with specific embodiments thereof, many alternatives, modifications and variations of such embodiments will be apparent to those of ordinary skill in the art in light of the foregoing description. The embodiments of the invention are intended to embrace all such alternatives, modifications, and variations as to fall within the broad scope of the appended claims.","Detailed Description","Embodiments of the invention relate to an apparatus, system, and method for providing a protected storage and access for a backup image of platform firmware or for any other software that needs protection. In one embodiment, existing commands for reading and writing to logs in memory and existing memory structures (also called logs, or memory space) are re-used for providing secure access to the non-volatile memory, for example, non-volatile memories in a solid state hard drive (SSD), hard disk drive (HDD), etc. In one embodiment, an additional security layer is placed above the regular operational layer of the SDD to provide exclusive modes of operation to protected logs\/areas of the non-volatile memory. In one embodiment, the non-volatile memory for the HDD is the magnetic medium.","In one embodiment, the method comprises providing, by a processor in a host, a protected storage area in a memory for storing backup image of software; detecting corruption in a software; accessing the backup image of the software from the protected storage area; and updating the corrupted software with the backup image, wherein the storage area is a reserved storage area of the memory. In one embodiment, the reserved storage area of the memory is a vendor specific storage area of the memory.","In one embodiment, the method comprises storing, by a memory controller in an SSD, a backup image of software in the reserved vendor specific storage area of a non-volatile memory; pairing with the host, by provisioning secret and public keys from the host, to enter a paired and unprivileged state; authenticating the host, by a challenge-response protocol, to enter a paired and privileged state from the paired and unprivileged state; and allowing secure access, to the host, of the backup image of the software in response to entering the paired and privileged state.","The term \u201cprovisioning\u201d herein refers to placing a keying material (e.g., public key, private key, secret key) to a component (e.g., HDD, SSD, or any other non-volatile memory, or component comprising a non-volatile memory) by another component (host processor) so that other component can access the component.","The technical effect of the embodiments discussed herein is to provide secure access to backup firmware or any type of data (e.g., operating system binaries, application, end-user data, etc) in a non-volatile memory and to protect access (Read-only, Read-Write or other privileges) to those data or backup firmware.","In the following description, numerous details are discussed to provide a more thorough explanation of embodiments of the present invention. It will be apparent, however, to one skilled in the art, that embodiments of the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring embodiments of the present invention.","Note that in the corresponding drawings of the embodiments, signals are represented with lines. Some lines may be thicker, to indicate more constituent signal paths, and\/or have arrows at one or more ends, to indicate primary information flow direction. Such indications are not intended to be limiting. Rather, the lines are used in connection with one or more exemplary embodiments to facilitate easier understanding of a circuit or a logical unit. Any represented signal, as dictated by design needs or preferences, may actually comprise one or more signals that may travel in either direction and may be implemented with any suitable type of signal scheme.","In the following description and claims, the term \u201ccoupled\u201d and its derivatives may be used. The term \u201ccoupled\u201d herein refers to two or more elements which are in direct contact (physically, electrically, magnetically, optically, etc.). The term \u201ccoupled\u201d herein may also refer to two or more elements that are not in direct contact with each other, but still cooperate or interact with each other.","As used herein, unless otherwise specified the use of the ordinal adjectives \u201cfirst,\u201d \u201csecond,\u201d and \u201cthird,\u201d etc., to describe a common object, merely indicate that different instances of like objects are being referred to, and are not intended to imply that the objects so described must be in a given sequence, either temporally, spatially, in ranking or in any other manner.","The terms \u201cpublic\/private keys\u201d herein describe a set of cryptographic keys used for public-key cryptography. The key pair consists of a \u201cpublic key\u201d and a \u201cprivate key.\u201d The key pair may be used for encryption, in which case the public key is used for encrypting data, and the private key used for decrypting the data. The key pair may also be used for digital signatures, in which case the private key is used for signing a message and the public key is used for verifying the message.","As used herein, a \u201cpublic key\u201d is the public half of a key pair. Among other uses, a public key may be used to encrypt data to ensure that it may only be decrypted by an entity holding the corresponding private key, or may be used to verify a signature created by an entity holding the private key. As used herein, a \u201cprivate key\u201d is the private or secret half of a key pair. Among other uses, a private key may be used to decrypt data that has been encrypted with the corresponding public key, or may be used to digitally \u201csign\u201d an item.","The term \u201csecret key\u201d herein refers to a set of bits used in symmetric cryptographic schemes (as opposed to asymmetric or public key cryptography), i.e. the same key is used for encrypting a plain text message to its corresponding cipher text, and for decrypting the cipher text to the original plain text message. The secret key is shared between the parties participating in the encrypted message exchanges.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1","b":["100","101","130","150","140"]},"In the following embodiments, modes for secure access between the SSD  and the host  are described. While the embodiments are discussed herein with reference to an SSD, they apply to any component with a non-volatile storage medium, such as HDD. In one embodiment, the processes discussed herein are packaged as a firmware update for a HDD.","In one embodiment, the host  comprises a package  which is operatively coupled to a non-volatile memory (which is part of SSD ) via a bus . In one embodiment, the bus  Serial Advance Technology Attachment (SATA) input-output (I\/O) bus. In one embodiment, the bus  is a Serially Attached Small System Computer (SAS) input-output (I\/O). In one embodiment, other types of buses (e.g., Universal Serial Bus (USB), Peripheral Component Interconnect Express (PCI Express)) can be used for bus  without changing the essence of the embodiments discussed herein.","In one embodiment, the package  comprises a processor (CPU)  coupled to a cache  and a trusted source . In one embodiment the trusted source  is a processor secured storage (PSS) which stores a public, private, or secret key accessible by the processor via a secure interface. In one embodiment, the trusted source  is a private memory of the processor , where the private memory is configured to store the root of trust of the processor  and\/or of the system . In one embodiment, the trusted source  resides outside the package . In one embodiment, the trusted source  is a Radio Frequency Identification Tag (RFID) which comprises a non-volatile random-access memory (NVRAM). In one embodiment the NVRAM is a NAND flash memory. In one embodiment the NVRAM is a NOR flash memory. In other embodiments, other types of non-volatile memories may be used in the RFID tag . In one embodiment, a public and\/or secret key is stored in the NVRAM. In one embodiment, the public and\/or secret key is protected by cryptography. In one embodiment, the processor  retrieves a secret key from the trusted source  via an Inter-Integrated Circuit (I2C) interface or an RF interface.","In one embodiment, the host  further comprises a basic input\/output system (BIOS) chip , which includes a BIOS image. The BIOS image is an example of platform firmware, an image of which is stored in a dedicated storage area of a non-volatile memory which is part of . In one embodiment the host  further comprises a chipset processor  which communicates with many peripheral devices including the SSD , USB Device , Server , display (not shown), etc. In one embodiment, the host comprises an operating system .","In one embodiment, the non-volatile memories in , , and  include dedicated storage areas , , and , respectively. In one embodiment, the dedicated\/reserved storage area in the SSD  is a vendor-specific area. The embodiments discussed herein describe a secure access control mechanism to this vendor-specific area via SATA commands (e.g., READ LOG EXT, READ LOG DMA EXT, WRITE LOG EXT, and WRITE LOG DMA EXT as described in T13\/2015-D Working Draft Project by American National Standard of Accredited Standards Committee INCITS ATA\/ATAPI Command Set-2, Revision 2, Published Aug. 3, 2009). In other embodiments, other commands may be used for secure access of the non-volatile memory  by the host . The embodiments discussed herein may be used to provide secure access to any reserved storage area in a non-volatile memory. As mentioned above, the SSD  is being used as an example embodiment, and the concepts described herein can be used for other types of mass storage devices (e.g., HDD, memory stick, CD, DVD, etc.) having non-volatile memories.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 2","b":["200","204","130","201","201","201","130"]},"In one embodiment, the memory controller  is coupled to the non-volatile memory  having reserved vendor specific storage areas . Each reserved vendor specific area includes an area for storing the software\/firmware image and associated valid  and erase  bits. In one embodiment, the SSD  includes the public  and secret  keys for mutual authentication with the host  to gain access to the protected areas , , and . The protected areas , , and  are included in the protected area of the SSD . The valid  and erase  bits are discussed with reference to the modes of operation.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 3","FIGS. 1-2"],"b":["300","205","130","302","130","101","301","101","130","101","130"],"sub":"1"},"In one embodiment, three modes are valid which are: un-paired  mode, paired  but unprivileged  mode, and paired  but privileged  mode. In other embodiments, more than the three modes can be added to further enhance the security layer added on top of the operation layer of the SSD. In one embodiment, only three modes are valid.","In the un-paired  mode, the SSD  is not paired with the host . The un-paired  mode is not a privileged mode. In one embodiment, when the SSD  and the host  are in un-paired  mode, they cannot communicate with one another to access the reserved vendor specific areas . In one embodiment, the un-paired  mode is the legacy mode. In one embodiment, the READ LOG EXT and READ LOG DMA EXT commands to the images are allowed in the un-paired  mode. In one embodiment, the WRITE LOG EXT, and WRITE LOG DMA EXT commands to the images are allowed only if the valid bit  is clear.","The paired  and unprivileged  combination mode refers to the mode when the SSD  and the host  have a common secret to authenticate each other. The paired  and privileged  combination mode refers to the mode when the SSD  and the host  are mutually authenticated and special commands to communicate between the SSD  and the host  are unlocked, i.e. the special commands are operative in this mode. Examples of operations permitted in the paired  and privileged  mode include; creating, deleting, or modifying copies of the platform firmware images that the SSD  stores. In one embodiment, the exemplary operations can only be performed in the paired  and privileged  mode to prevent malware from performing these exemplary operations and compromising the copies of the firmware images. In one embodiment, the un-paired  but privileged  combination mode is an invalid mode of secure SSD  access.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":"400"},"Although the blocks in the flowchart  are shown in a particular order, the order of the actions can be modified. Thus, the illustrated embodiments can be performed in a different order, and some actions\/blocks may be performed in parallel. Additionally, one or more actions\/blocks can be omitted in various embodiments of providing a protected storage and access for a backup image of platform firmware or for any other software that needs protection. The flowcharts of  are illustrated with reference to the embodiments of .","In one embodiment, the secure access begins by initiating a pairing  process between the SSD  and the host  (interchangeably referred to as processor ). In one embodiment, a successful pairing of the SSD  and the host  results in transitioning from the un-paired mode  to the paired and unprivileged mode . In one embodiment, the pairing process  is performed by the host  provisioning its keying material from the trusted source  to the SSD .","In one embodiment, the authentication process  is a mode transaction that allows the SSD  to enter the paired and privileged state  from the paired and un-privileged state . In one embodiment, the authentication is initiated upon a request from the host . In one embodiment, the SSD  authenticates the host  through a cryptographic protocol using its keying material (e.g.,  and ). In one embodiment, when the mutual authentication is successful, host  has complete access over the protected logs , , and .","In one embodiment, the exit process  is a mode transaction that allows the SSD  to leave the paired and privileged state  for the paired and un-privileged state . In one embodiment, the host  can read the protected logs but cannot modify them in the paired and un-privileged state .","In one embodiment, the de-provisioning process  is a mode transaction that allows the SSD  to un-pair from the host  and return to its original state, i.e. the un-paired state , from the paired and unprivileged state . In one embodiment, de-provisioning process  is achieved by a challenge-response protocol. In one embodiment, the challenge-response protocol involves public key cryptography and using provisioned keying material from the trusted source  and\/or the keying materials  and . In one embodiment, the public key  is used to verify de-provisioning licenses. For example, if a personal from the Information Technology (IT) department wants to install an SSD in another system without having the secret key with which the SSD was paired with, the personal would use the public key  to verify de-provisioning licenses.","In one embodiment, the un-pairing process  is a mode transaction that allows the SSD  to leave the paired and privileged state  directly to the un-paired state . In one embodiment, the host  deletes the keying material  and  without going through the de-provisioning process .","In one embodiment, the re-provisioning process  is a mode transaction that allows the SSD  to get updated keying materials  and  from the host . In such an embodiment, the SSD  remains in the paired and privileged state . In one embodiment, the host  re-provisions the keying material after a predetermined time lapse (e.g., 24 hrs).","Referring back to , in one embodiment each of the memory logs have corresponding valid  and erase  bits. In one embodiment, the memory logs are writeable in any mode (, , ) except when the valid bit  is enabled to 1 indicating that the memory logs are locked. In one embodiment, the valid bit  can only be modified in the paired and privileged mode .","In one embodiment, the host  manages the backup image on the SSD  by executing dedicated software with access to the keying materials  and  and\/or the keying material in the trusted source . In one embodiment, the dedicated software is launched on an end-user interface (e.g., by pressing the power button of the host  for a predetermined time (e.g., 2 seconds)). In one embodiment, the dedicated software is authorized to be launched on an end-user interface in special processor mode. In one embodiment, the special processor mode includes Virtual Machine Monitor (VMM), Secure Enclave, System Management Mode (SMM). SSM is a special mode where the processor can perform platform specific tasks via the BIOS. In such an embodiment, the host  is able to enter the paired and privileged mode  of the SSD . In one embodiment, in the paired and privileged mode  the host  is operable to check the validity of the software image in one or more of the memory logs and then set the valid bit  to 1 for memory log it would like to lock from any writable access. In such an embodiment, the software image (one or more of the memory logs ) corresponding to the set valid bit  is protected from any possibility of corruption until the authenticated host  clears the valid bit  to 0.","In one embodiment, the erase bit  is writeable in any mode (, , and ). In one embodiment, the erase bit  is used to relinquish protected logs in one or more of the memory logs that are no longer needed for the computer platform. For example, the host  can program a new firmware image of a platform component to the SSD  in one or more of the memory logs for which the valid bit  is cleared, i.e. set to 0, and mark the previous version of firmware image in the one or more of the memory logs as erasable by setting the erase bit  to 1.","In one embodiment, once the host  is authenticated to the SSD , i.e. in paired in privileged mode , the host  can read the erase bit  of the corresponding one or more of the memory logs (for which the erase bit is set to 1) and decide whether to clear the valid bit  corresponding to that memory log to a 1.","Although the blocks in the flowcharts with reference to  and  are shown in a particular order, the order of the actions can be modified. Thus, the illustrated embodiments can be performed in a different order, and some actions\/blocks may be performed in parallel. Additionally, one or more actions\/blocks can be omitted in various embodiments of providing a protected storage and access for a backup image of platform firmware or for any other software that needs protection. The flow charts of  and  are illustrated with reference to the embodiments of .",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 5A","b":["500","110","101"]},"At block , the processor  of the host  provides a protected storage area in the memory  for storing backup image of software. At block , the processor  detects corruption in software caused by any malware or virus. At block , the processor  begins the process of accessing the backup image of the software from the protected storage area of the non-volatile memory . At block , the processor  updates the corrupted software with the backup image, wherein the storage area is a reserved vendor specific storage area of the memory.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 5B","b":["520","503","205","130","101","110"],"sub":"1 ","i":"a"},"At block , the processor identifies whether the SSD  is paired  with the processor  (or host ). At block , a determination is made about the paired status. If the SSD  and the processor  are not paired, the method  proceeds to block , otherwise the method  continues to identify whether pairing occurred. At block , the processor  pairs with the SSD  by sending a command to the SSD  to write the keying material from the trusted source  to the SSD .","In one embodiment, the keying material is a secret key  which is stored in a dedicated location in the memory controller . In one embodiment the secret key  is stored in a dedicated location in the non-volatile memory . In one embodiment, the secret key is a 128 bit key. In one embodiment, the processor  receives an acknowledgement from the SSD  that it has received the secret key. The passing of the secret key from the trusted source  to the SSD  is also referred to the secret key provisioning.","In one embodiment, the processor  sends a public key from the trusted source  to the SSD . In one embodiment, the public key is stored in a dedicated area of the memory controller . In one embodiment, the public key is used in the de-provisioning transition which can be performed remotely, e.g., by a service provider (ISP). In one embodiment, the processor  receives an acknowledgement from the SSD  that it received the pubic key. The passing of the public key from the trusted source  to the SSD  is also referred to the public key provisioning. The SSD  enters a paired and unprivileged state in response to successful pairing .","At block , the processor  enters a paired and privileged state\/mode  with the SSD  by authenticating  the memory which is initially in the paired and unprivileged state\/mode . In one embodiment, the processor  sends a command to the SSD  that triggers a challenge-response protocol for mutual authentication. In one embodiment, the SSD  authenticates the processor  in response to the SSD  receiving a command from the processor  to initiate a challenge-response protocol for mutual authentication\u2014first authentication. In one embodiment, the SSD  is authenticated by the processor  in response to the SSD  receiving a command from the processor  to initiate a challenge-response protocol for mutual authentication\u2014second authentication. In one embodiment, both first and second authentications are performed serially\/sequentially. In one embodiment, the first authentication is performed before the second authentication. In another embodiment, the second authentication is performed before the first authentication. In one embodiment, both first and second authentications are performed in parallel, i.e. concurrently.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5C","b":"530"},"At block , the processor  receives a first encrypted random number from the memory, the first encrypted random number encrypted with the key. In one embodiment, the first encrypted random number is the challenge generated by the SSD  for the processor . The processor  will then generate a response to the challenge. In one embodiment, the encryption of the first random number is performed by using cryptography. In one embodiment, the cryptography is performed with the Advanced Encryption Standard (AES) and the secret key  used in the pairing  with the processor. In other embodiments, other forms of cryptography may be used e.g., public key encryption. In one embodiment, the first random number is a 128 bit random number and the SSD  performs encryption based on AES to generate a 128 bit encrypted result from the AES encryption. In other embodiments, other sizes for the random number may be used.","At block , the processor  decrypts the first encrypted random number (the challenge) to generate a first decrypted message (response). In one embodiment, the processor  decrypts the first encrypted random number with its secret key from the trusted source  to generate the first decrypted message (response).","At block , the processor  sends the first decrypted message to the SSD , wherein the SSD  verifies the first decrypted message from the processor  for authenticating the processor . In one embodiment, if the SSD  verifies the first decrypted message to be the same as first random number, then the SSD  declares that its has authenticated the processor . In one embodiment, the SSD  sends an acknowledgement message to the processor  that it has successfully verified the first decrypted message and so the challenge-response protocol is successful. In such an embodiment, the SSD  enters the paired and privileged state . Blocks - correspond to the first authentication discussed with reference to .","Referring back to , at block  the processor  sends a second encrypted random number to the SSD , the second encrypted random number (challenge ) generated by encrypting a second random number with a key. In one embodiment, the key is the secret key from the trusted source . In one embodiment, the encryption is performed by cryptography. In one embodiment, the cryptography is performed with the an encryption based on AES and the secret key from the trusted source  used in the pairing  with the SSD . In other embodiments, other forms of cryptography may be used e.g., public key encryption.","In one embodiment, the second random number is a 128 bit random number and the processor  performs AES to generate a 128 bit encrypted result from the AES encryption. In other embodiments, other sizes for the random number may be used.","At block , the processor  receives a second decrypted message from the SSD , wherein the SSD  generates the second decrypted message (response ) by decrypting the second encrypted random number (challenge ). In one embodiment, the SSD  decrypts the second encrypted random number with its secret key .","At block , the processor  sends an acknowledgement to the SSD  if the second decrypted message (response ) matches the second random number. In such an embodiment, the SSD  enters the paired and privileged state . Blocks - correspond to the second authentication discussed with reference to . As mentioned above, in one embodiment the second authentication is performed after the first authentication. In one embodiment, the first authentication alone is enough for entering the paired and privileged state .",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 5D","b":["540","405","402","401","204","541","405","110","130","544","130","110","402","401","130"]},"In one embodiment, at block  the process of exiting  is initiated when the SSD  is reset. In one embodiment, at block  the process of exiting  is initiated when the links (input-output communication with the processor ) is reset or goes into training mode. In other embodiment, other events may trigger the exit process  when the processor no longer needs the secure access to memory logs , e.g., when the processor  or any component of the computer platform realizes that a security breach has occurred in the computer platform.","In one embodiment, the processor  initiates the de-provisioning process  by sending a command to the SSD  that the processor  and the SSD  should be un-paired. In one embodiment, a challenge-response protocol is initiated with another machine (e.g., server) and the SSD  so that the processor  and the SSD  can be remotely un-paired securely. In such an embodiment, the SSD  returns to the un-paired mode  from the paired and un-privileged mode . In one embodiment, public key cryptography may be used with the provisioned keying material (e.g.,  and\/or ) in the challenge-response protocol.","In one embodiment, the processor  or the host  sends a command to the SSD  that it no longer wishes to keep the two devices paired. This process corresponds to the un-pairing process . In such an embodiment, the SSD  deletes the keying material (e.g.,  and\/or ) and returns to the un-paired mode  from the paired and privileged state .","In one embodiment, the processor  may want to re-provision  its keying material with the SSD . In one embodiment, the processor  sends a command to the SSD  with a new keying material from its trusted source  which will override the existing keying material (e.g.,  and\/or ) on the SSD . In such an embodiment, the SSD  is in the paired and privileged mode . In one embodiment, the SSD  overrides the keying material (e.g.,  and\/or ) with the new keying material from the processor  and then sends an acknowledgement message to the processor  that it has successfully re-provisioned the key. In another embodiment, the SSD  challenges the processor  so that the processor  proves to the SSD by a challenge-response protocol that the processor  knows the keying material (e.g., the secret key) even though the SSD  is in the paired and privileged state .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 6A","FIGS. 6A-B","FIGS. 5A-D"],"b":["600","201","204","130","130","110","101"]},"At block , the memory controller  of the SSD  stores a backup image of software in a reserved vendor specific storage area of a non-volatile memory . At block , the memory controller  of the SSD  pairs  with the host  (interchangeably used for processor ), by provisioning secret and public keys from the host , to enter a paired and unprivileged state . At block , the memory controller  of the SSD  authenticates  the host , by a challenge-response protocol, to enter a paired and privileged state  from the paired and unprivileged state . At block , the memory controller  of the SSD  sends an acknowledgement message to the host  about the successful authentication of the SSD  with the host  and allows secure access, to the host, of the backup image of the software in response to entering the paired and privileged state .",{"@attributes":{"id":"p-0086","num":"0085"},"figref":["FIG. 6B","FIGS. 5A-D","FIGS. 5A-D"],"b":["620","201","204","204","130","621","623","624","627"]},"At block , the memory controller  of the SSD  sends a first encrypted random number (challenge) to the host . In one embodiment, the first encrypted random number is generated by encrypting a first random number with the secret key . At block , the memory controller  of the SSD  receives a response from the host  in response to sending the first encrypted random number, wherein the host  generates the response by decrypting the first encrypted random number. At block , the memory controller  of the SSD  verifies the response for authenticating the host , the host  being authenticated when verifying the response is successful. The SSD  then sends an acknowledgement message to the host .","At block , the memory controller  of the SSD  receives a second encrypted random number (challenge ) from the host . In one embodiment, the second encrypted random number is generated by encrypting a second random number with the secret key from the trusted source . At block , the memory controller  of the SSD  decrypts the second encrypted random number to generate a decrypted message (response ). At block , the memory controller  of the SSD  sends the decrypted message to the host  for the host  to match the decrypted message with the second random number. At block , the memory controller  of the SSD  receives an acknowledgement from the host  after sending the decrypted message.",{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":["FIG. 7","FIG. 5","FIG. 5A-D","FIGS. 6A-B"],"b":["111","201","201","130","130"]},"The machine-readable medium may include, but is not limited to, flash memory, optical disks, HDD, SSD, CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or other type of machine-readable media suitable for storing electronic or computer-executable instructions. For example, embodiments of the invention may be downloaded as a computer program (e.g., BIOS) which may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals via a communication link (e.g., a modem or network connection).","In one embodiment, the system  includes, but is not limited to, a desktop computer, a laptop computer, a netbook, a tablet, a notebook computer, a personal digital assistant (PDA), a server, a workstation, a cellular telephone, a mobile computing device, a smart phone, an Internet appliance or any other type of computing device. In another embodiment, the system  implements the methods disclosed herein and may be a system on a chip (SOC) system.","In one embodiment, the processor  has one or more processing cores  and N, where N represents the Nth processor core inside the processor  where N is a positive integer. In one embodiment, the system  includes multiple processors including processors  and , where processor  has logic similar or identical to logic of processor . In one embodiment, the system  includes multiple processors including processors  and  such that processor  has logic that is completely independent from the logic of processor . In such an embodiment, a multi-package system  is a heterogeneous multi-package system because the processors  and  have different logic units. In one embodiment, the processing core  includes, but is not limited to, pre-fetch logic to fetch instructions, decode logic to decode the instructions, execution logic to execute instructions and the like. In one embodiment, the processor  has a cache memory  to cache instructions and\/or data of the system . In another embodiment of the invention, the cache memory  includes level one, level two and level three, cache memory, or any other configuration of the cache memory within the processor .","In one embodiment, processor  includes a memory control hub (MCH) , which is operable to perform functions that enable the processor  to access and communicate with a memory  that includes a volatile memory  and\/or a non-volatile memory . In one embodiment, the memory control hub (MCH)  is positioned outside of the processor  as an independent integrated circuit.","In one embodiment, the processor  is operable to communicate with the memory  and a chipset . In one embodiment, the processor  (same as  of ) and the chipset  are part of the host  of . In one embodiment, the chipset  (same as  of ) is coupled to a SSD  (same as  of ) via a SATA bus  (same as bus  of ). In one embodiment, the SSD  includes machine-readable medium for storing the computer-executable instructions to implement the flowchart of  and other processes discussed in the description that are to be performed by the memory controller  of the SSD . In such an embodiment, the a processor in the SSD  executes the computer-executable instructions when the SSD  is powered up.","In one embodiment, the processor  is also coupled to a wireless antenna  to communicate with any device configured to transmit and\/or receive wireless signals. In one embodiment, the wireless antenna interface  operates in accordance with, but is not limited to, the Institute of Electrical and Electronics Engineers (IEEE) 802.11 standard and its related family, HomePlug AV (HPAV), Ultra Wide Band (UWB), Bluetooth, WiMAX, or any form of wireless communication protocol.","In one embodiment, the volatile memory  includes, but is not limited to, Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM), and\/or any other type of random access memory device. The non-volatile memory  includes, but is not limited to, flash memory (e.g., NAND, NOR), phase change memory (PCM), read-only memory (ROM), electrically erasable programmable read-only memory (EEPROM), or any other type of non-volatile memory device.","The memory  stores information and instructions to be executed by the processor . In one embodiment, memory  may also store temporary variables or other intermediate information while the processor  is executing instructions. In one embodiment, chipset  connects with processor  via Point-to-Point (PtP or P-P) interfaces  and . In one embodiment, chipset  enables processor  to connect to other modules in the system . In one embodiment of the invention, interfaces  and  operate in accordance with a PtP communication protocol such as the INTEL\u00ae QuickPath Interconnect (QPI) or the like.","In one embodiment, the chipset  is operable to communicate with the processor , , display device , and other devices , , , , , , , , etc. In one embodiment, the chipset  is also coupled to a wireless antenna  to communicate with any device configured to transmit and\/or receive wireless signals.","In one embodiment, chipset  connects to a display device  via an interface . In one embodiment, the display  includes, but is not limited to, liquid crystal display (LCD), plasma, cathode ray tube (CRT) display, or any other form of visual display device. In one embodiment of the invention, processor  and chipset  are merged into a single SOC. In addition, the chipset  connects to one or more buses  and  that interconnect various modules , , , , and . In one embodiment, buses  and  may be interconnected together via a bus bridge  if there is a mismatch in bus speed or communication protocol. In one embodiment, chipset  couples with, but is not limited to, a non-volatile memory , a mass storage device(s) , a keyboard\/mouse , and a network interface  via interface , smart TV , consumer electronics , etc.","In one embodiment, the mass storage device  includes, but is not limited to, a solid state drive, a hard disk drive, a universal serial bus flash memory drive, or any other form of computer data storage medium. In one embodiment, network interface  is implemented by any type of well known network interface standard including, but not limited to, an Ethernet interface, a universal serial bus (USB) interface, a Peripheral Component Interconnect (PCI) Express interface, a wireless interface and\/or any other suitable type of interface. In one embodiment, the wireless interface operates in accordance with, but is not limited to, the IEEE 802.11 standard and its related family, HomePlug AV (HPAV), Ultra Wide Band (UWB), Bluetooth, WiMAX, or any form of wireless communication protocol.","While the modules shown in  are depicted as separate blocks within the system , the functions performed by some of these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits. For example, although the cache memory  is depicted as a separate block within the processor , the cache memory  can be incorporated into the processor core  respectively. In one embodiment, the system  may include more than one processor\/processing core in another embodiment of the invention.","Reference in the specification to \u201can embodiment,\u201d \u201cone embodiment,\u201d \u201csome embodiments,\u201d or \u201cother embodiments\u201d means that a particular feature, structure, or characteristic described in connection with the embodiments is included in at least some embodiments, but not necessarily all embodiments. The various appearances of \u201can embodiment,\u201d \u201cone embodiment,\u201d or \u201csome embodiments\u201d are not necessarily all referring to the same embodiments. If the specification states a component, feature, structure, or characteristic \u201cmay,\u201d \u201cmight,\u201d or \u201ccould\u201d be included, that particular component, feature, structure, or characteristic is not required to be included. If the specification or claim refers to \u201ca\u201d or \u201can\u201d element, that does not mean there is only one of the elements. If the specification or claims refer to \u201can additional\u201d element, that does not preclude there being more than one of the additional element.","While the invention has been described in conjunction with specific embodiments thereof, many alternatives, modifications and variations of such embodiments will be apparent to those of ordinary skill in the art in light of the foregoing description. The embodiments of the invention are intended to embrace all such alternatives, modifications, and variations as to fall within the broad scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5D"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
