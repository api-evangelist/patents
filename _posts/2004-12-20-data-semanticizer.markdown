---
title: Data semanticizer
abstract: A computer-implemented method of defining a set of annotation elements to map a concept to electronic data as input data; generating a mapping rule, according to the set of annotation elements defined and a sample of the input data; mapping the concept to the input data by applying the mapping rule to the input data; and generating a semantic instance of the input data based upon the mapping of the concept to the input data. The set of annotation elements to map the concept to the input data are a selected ontology corresponding to the input data, a selected ontology concept from the selected ontology, a mapping of a word or word phrase in the sample input data to the selected ontology concept from the selected ontology, and a pattern of the mapped word or word phrase relative to a structure of the sample input data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08065336&OS=08065336&RS=08065336
owner: Fujitsu Limited
number: 08065336
owner_city: Kawasaki
owner_country: JP
publication_date: 20041220
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention generally relates to a method and computer system of providing semantic information for data. More particularly, the present invention relates to a method and a computer system annotating a large volume of semi-structured or unstructured data with semantics.","2. Description of the Related Art","Advancements in technology including computing, network, and sensor equipment, etc. have resulted in large volumes of data being generated. The collected data generally need to be analyzed, and this is traditionally accomplished within a single application. However, in many areas, such as bioinformatics, meteorology, etc, the data produced\/collected by one application may need to be further used in other applications. Additionally, interdisciplinary collaboration, especially in the scientific community, is often desirable. Therefore, one key issue is interoperability in terms of the ability to exchange information (syntactic interoperability) and to use the information that has been exchanged (semantic interoperability). IEEE Standard Computer Dictionary: , IEEE, 1990.","Conventional semantic World Wide Web, or \u201cWeb,\u201d technologies involving ontology-based representations of information enable the cooperation of computers and humans and can be used to assist with data sharing and management. Through ontological representation, the modeling of entities and relationships in a domain allows the software and computer to process information as never before [www.sys-con.com\/xml\/article.cfm?id=577, retrieved on Oct. 22, 2004]. Conventional semantic Web technologies are an extension of the World Wide Web, which rely on searching Web pages and bringing the Web page to the semantic Web page level. Therefore, conventional semantic Web technologies process Web pages, which as tagged documents, such as hypertext markup language (HTML) documents, are considered fully structured documents. Further, the conventional semantic Web technologies are only for presentation, but not for task computing (i.e., computing device to computing device task processing). WEB SCRAPER software is an example of a conventional semantic Web technology bringing Web pages, as structured documents, to the semantic level. However, adding semantics to semi-structured or unstructured data, such as a flat file, is not a trivial task, and traditionally this function has been performed on a case-by-case (per input data) manner, which can be tedious and error-prone. Even when annotation is automated, such automation only targets a specific domain to be annotated.","Therefore, existing approaches to semi-structured and unstructured data annotation, depend completely on user knowledge and manual processing, which is not suitable for annotating data in large quantities, in any format, and in any domain, because such existing data annotation approaches are too tedious and error-prone to be applicable to large data, in any format and in any domain. For example, existing approaches, such as GENE ONTOLOGY (GO) annotation [www.geneontology.org, retrieved on Oct. 22, 2004] and TRELLIS by University of Southern California's Information Sciences Institute (ISI) [www.isi.edu\/ikcap\/trellis, retrieved on Oct. 22, 2004], depend completely on user knowledge, are data specific, and per input data based, which can be tedious and error-prone. In particular, GENE ONTOLOGY (GO) provides semantic data annotated with gene ontologies, but GO is only applicable to gene products and relies heavily on expertise in gene products (i.e., generally manual annotation, and if any type of automation is provided, the automation targets only, or is specific to, gene products domain). Further, in TRELLIS, users add semantic annotation to documents through observation, viewpoints and conclusion, but TRELLIS also relies heavily on users to add new knowledge based on their expertise, and further, in TRELLIS semantic annotation results in one semantic instance per observed document.","To take full advantage of any collected data in semi-structured or unstructured format for successful data sharing and management, easier ways to annotate data with semantics are much needed.","A computer system to assist a user to annotate with semantics a large volume of electronic data in any format, including semi-structured to unstructured electronic data, in any domain. Therefore, the present invention provides an ontological representation of electronic data in any format and any domain.","An embodiment described herein is a computer-implemented method and system of defining a set of annotation elements to map a concept to electronic data as input data; generating a mapping rule, according to the set of annotation elements defined and a sample of the input data; mapping the concept to the input data by applying the mapping rule to the input data; and generating a semantic instance of the input data based upon the mapping of the concept to the input data.","According to an aspect of the described embodiment, the set of annotation elements to map the concept to the input data are a selected ontology corresponding to the input data, a selected ontology concept from the selected ontology, a mapping of a word or word phrase (as a data point) in the sample input data to the selected ontology concept from the selected ontology, and a pattern of the mapped word or word phrase relative to a structure of the sample input data.","The above as well as additional aspects and advantages will be set forth in part in the description which follows and, in part, will be obvious from the description, or may be learned by practice of the described embodiments.","Reference will now be made in detail to the present embodiments of the present invention, examples of which are illustrated in the accompanying drawings. The embodiments are described below to explain the present invention by referring to the figures.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","108","100","108"]},"For example, the data semanticizer  can be applied to structured data. As another example, the data semanticizer  can be used when data might be in a well understood format, but each output of the data from various software applications might be unique. It can be observed that each application, such as a bioinformatics analysis application, generates data in well understood formats, but that each run of the application is likely to be unique. For example, in case of bioinformatics, the output of the BASIC LOCAL ALIGNMENT SEARCH TOOL (BLAST), which compares novel sequences with previously characterized sequences, varies depending on input parameters, and the output could be different in terms of the number of matching sequences and the locations of matching sequences, etc. The NATIONAL CENTER FOR BIOTECHNOLOGY INFORMATION (NCBI) at the NATIONAL INSTITUTE OF HEALTH provides information on BLAST [www.ncbi.nih.gov\/Education\/BLASTinfo\/information3.html, retrieved on Oct. 22, 2004] and also described by Altschul et al., , Journal of Molecular Biology, 251:403-410. Unlike Web pages, no special tags or similar mechanisms are used in the outputs of BLAST to identify the structure of the data. The data semanticizer  creates semantic instances of such semi-structured data based on selected ontology. Once semantic labels are provided, data properties can be identified that were otherwise obscured due to the many variations within the input and output data. For example, in case of BLAST, the actual gene sequences can be identified regardless of the many output representations. Therefore, the data semanticizer  can be used for data that is considered to be in semi-structured to unstructured format, when no special tags or similar mechanisms are used to identify structure of the data, and in any domain by allowing ontology selection.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG.1","FIG. 1"],"b":["100","108","100","102","104","102","102","110","102","110","104","118","110","118","108"]},"More particularly, as shown in , the present invention provides a computer-implemented method comprising, at operation , defining a set of annotation elements (implemented as a semanticization rule editor ) to map a concept to electronic data  as input data. Operation  essentially allows capturing a structure of electronic data . A mapping rule(s) , according to the set of annotation elements defined and a sample(s)  of the input data , is generated, to capture the structure of the input data  and to map a concept to the input data  (i.e., the semanticization or mapping rule set  is determined\/generated). Operation  comprises mapping the concept to the input data  by applying the mapping rule  to the input data , to generate a semantic instance(s)  of the input data  based upon the mapping rule  applied to the input data . The set of annotation elements to map a concept to the input data , or to capture the structure of the input data , which are implemented in the semanticization rule editor , comprise a selected sample  of the input data , a selected ontology  corresponding to the input data , a selected ontology concept from the selected ontology , a mapping of a word or word phrase (i.e., the word or word phrase being an example of a data point) in the sample input data  to the selected ontology concept from the selected ontology , and a pattern of the mapped word or word phrase relative to a structure of the sample input data  (i.e., a phrase and\/or a region of a phrase in the selected sample input data  mapped to the selected ontology concept from the selected ontology ).","The ontology  can be one or more of same and\/or different domain ontologies stored on computer readable media according to an electronic information format, such as Web Ontology Language (OWL) file format. Therefore, the data semanticizer  is not limited to generating semantic instances  corresponding to a single ontology , and the data semanticizer  can generate semantic instances  where different data parts map to a plurality of different ontologies . For example, let's consider the input data  string \u201cA research fellow at FUJITSU LABORATORIES OF AMERICA (FLA) leads a Task Computing project. He was also involved in LSM, Agent, and other projects during his tenure at FLA. He is also an adjunct professor at UNIVERSITY OF MARYLAND (UM) advising several students.\u201d To annotate such data , most likely it will involve ontology concepts defined in an FLA ontology  (e.g. projects managing, projects involved properties, etc) and a UM ontology  (e.g., advisees, topics properties, etc.).","The generating of the mapping rule  to map a concept to the input data , or to capture the structure of the input data , comprises, at operation , suggesting a sample mapping of a concept (i.e., the selected ontology concept from the selected ontology ) to a word or word phrase in a sample input data , as the mapping rule of the input data , and selecting a suggested mapping as the mapping rule of the input data , or a data structure rule of the input data . At operation , the mapping rule  is applied to the input data  to map the concept to the input data  to output semantic instances . Therefore, \u201ca mapping rule\u201d (semanticization rule set in )  is based upon a mapping of a word or word phrase relative to a structure of input data . The sample input data  can be, for example, a sample number of opened input data files  (e.g., 10 files each containing one email from among hundreds of files), or can be one input data file  that contains a number of records (e.g., one file containing hundreds of emails from among a plurality of files, where the user works with one email in the one file, but the system suggests all or any subset of email addresses appearing in the rest of the file(s)).","One main challenge solved by the data semanticizer  is capturing a structure of semi-structured to unstructured electronic data  to semanticize. The data semanticizer , at operation , as a data structure capture element, or annotation element, uses a small number of representative samples  of the data , when one has incomplete knowledge of the data format. As another data structure capture element, at operation , a mapping is performed of a phrase and\/or a region of a phrase in the selected sample input data  to a selected ontology concept from the selected ontology . Further, at operation , as two other elements to capture the structure of the input data, location information, a regular expression, or any combination thereof, are used in the generating of the rule to locate, in the selected sample input data , the phrase and\/or to determine the region of the phrase, mapped to the selected ontology concept from the selected ontology .","The two example data structure capture elements of location-based and regular expression-based, assume neither the prior knowledge of data format nor assistance from the user. However, the data semanticizer  can efficiently (e.g., simply, quickly, and highly effectively) incorporate assistance from a user, which will make the process of capturing the structure of data  easier. With the help of a user with domain expertise and a selected ontology , the data semanticizer  generates a semanticization rule set , which is then used to create semantic instances for a large volume of semi-structured to unstructured data . In this process of annotating data, human interactions might not be completely eliminated by using a human domain expert, however, the data semanticizer  substantially reduces expert human assistance and dependency in semanticizing a large volume of data  in any format and in any domain. Therefore, the data semanticizer  supports a semi-automated method of providing semantic information for application data .","The role of the data semanticizer  is to annotate data with semantics to bring data into a higher level of abstraction. Low level data can be easily extracted from higher levels of abstraction, but this is not true for the other direction. An example is comparing structured to unstructured data. Structured data is easy to represent in plain text format. For example, a LATEX document can be easily converted to a format for a display or a printer (LATEX to Device-Independent (DVI) file format to Bitmap). However, converting a Bitmap to a LATEX document would be extremely difficult; this is where the data semanticizer  helps, because of the efficient defined set of elements (implemented as a semanticization rule editor) to capture a structure of electronic data as input data, generating a rule according to the set of elements defined to capture the structure of the input data, applying the rule to the input data, and, generating a semantic instance of the input data based upon the rule applied to the input data. With the data semanticizer , the procedure of annotating data with semantics can be completed with reduced human interactions. Therefore, a new term, \u201csemanticize,\u201d is introduced to denote adding semantic annotations to data, according to the present invention.","In , as an example of operation , to generate a mapping rule  to map a concept to input data by capturing a structure of input data, comprises defining an atomic rule comprising, for example, a set of 6-tuples <C, W, R, K, P, O> as annotation or data structure capture elements where:","\u201cC\u201d is the concept from the selected ontology  corresponding to the class and its property for which the user wants to create an instance.","\u201cW\u201d is the word or word phrase in the sample data  that is being conceptualized. The user can specify \u201cW\u201d by, for example, highlighting the word(s) from a displayed sample data \u2014for example, a displayed sample document from among a plurality of documents as the input data . The \u201cC\u201d and \u201cW\u201d are data structure capture elements that can incorporate user assistance.","\u201cR\u201d is the region of the \u201cW\u201d word or the word phrase relative to the structure of an input data  (or a portion of an input data ), for example, a document. Typically in the present invention, the \u201cR\u201d element is determined relative to the structure of a sample  of the data  (or a portion a sample ). Two methods of determining the \u201cR\u201d element to capture a structure of input data is described\u2014location information and regular expressions. The details of these two methods, as data structure capture elements, are described further below. The \u201cR\u201d element is performed by the system (semanticization rule editor ) as a representation of \u201cC\u201d and \u201cW.\u201d In the present invention, the \u201cR\u201d data structure capture element is based upon an ontology and a data point (for example, a word or word phrase, and\/or any other types of data points) mapped to a concept in the ontology, thereby providing a domain or ontology rule-based knowledge system to capture structure of input data. The present invention provides a method of defining a set of annotation elements to map a concept to electronic data.","\u201cK\u201d is the color that uniquely distinguishes one complete \u201cC\u201d concept from another in a displayed sample data . For example, assume creation of an instance of a class called Person, in which hasFirstName and hasLastName are properties. When creating a semantic instance of the class Person, the rule editor  automatically lists these two properties and groups them as properties of the same class by assigning the same color, in the displayed sample data . The present invention is not limited to coloring for distinguishing displayed concepts, and other perceptible distinguishing characteristics\/attributes\/techniques (e.g., visual and\/or audible) can be used, such as (without limitation) visually distinguishing characteristics on a computer display screen via fonts, font sizing, underlining, bolding, italicizing, numbering, displaying icons, etc.","\u201cP\u201d is the priority of the rule. Priority is used to increase efficiency while reducing errors, when, at operation , applying a plurality of generated mapping rules  of the input data . Priority can be used to determine erroneous application of a rule set . When high priority rules cannot be applied, semantic instance creation process stops, whereas low priority rules can be safely ignored. For example, when trying to match words from the sample document  to an ontology concept from the ontology , some of the words may be important than others. For example, if a gene sequence includes a version number, the actual gene sequence can be given a higher priority than the version number, so that if some files omit the version number, the system does not fail to create semantic instances (i.e., mapping out the version number, if necessary).","\u201cO\u201d is the order in which a plurality of generated mapping rules  are applied; e.g., O is the first rule to be applied, O is the second rule to be applied, etc.","Therefore, a set of atomic rules together defines a rule set , referred to as a mapping, semanticization, or data structure capture, rule set , to map a concept to input data , such as documents, email messages, etc., in any format and in any domain. A minimum atomic rule comprises a set of 3 annotation or data structure capture, tuples <C, W, R>, of which \u201cC\u201d and \u201cW\u201d can incorporate user assistance. In the above example, the data structure capture elements <K, P, O>, enhance performance, but are not required. Further, the set of 3-tuples <C, W, R> can be combined in any combination with other data structure capture elements, such as, for example, the <K, P, O> data structure capture elements.","Two examples of methods, including any combinations thereof, for determining the region of word(s)\u2014the \u201cR\u201d element\u2014is described in more detail below. Therefore, the location information can be combined with regular expression as another method of determining the \u201cR\u201d element to capture a structure of input data.","Location Information\u2014Using highlighted location information in the sample data , \u201cR\u201d is represented as 4-tuples, <L, S, N, E> (location data structure capture elements) where","L is the line number,","S is the starting character position,","N is the number of lines, and","E is the ending character position","essentially capturing \u201ccolumns\u201d corresponding to words to be conceptualized.","The location elements essentially capture a location in the sample input data  corresponding to the word or word phrase, as the \u201cW\u201d element, which is to be conceptualized by being mapped to the selected ontology concept from the ontology .","Regular Expressions (Patterns)\u2014Alternatively, regular expressions can be used to deduce a pattern in the input data , via the sample data , for region of word(s)\u2014the \u201cR\u201d element. In this approach, \u201cR\u201d is a regular expression, which is described in terms of assumptions, inputs, outputs, and the process, as follows\u201d","Assumption examples:","The following is an example guideline used for an example input data  format:\n\n","Input data  example:\n\n","Process operations example:","1. Invoke a parse of input data  by passing an example substring and the data that is to be parsed (a sample ), as a parameter. The example substring may be selected, for example, on a display of the input data  via any known selection techniques, such as highlighting, clicking, click and drag, etc.","2. A pattern generator\/parser (semanticization rule editor ) examines the passed parameter example substring and constructs a regular expression (a pattern), based upon a set of templates, which matches the example substring.","3. The parser then applies the regular expression to each record in the sample data , recording the start and end positions of any matches it finds.","4. After each record has been processed, the total number of matches for a particular regular expression is checked. The regular expression is rejected automatically, if the number of match count does not fall within the tolerance level (the number of records\u00b1the tolerance value). In this case, the parse returns to operation 2.","5. Otherwise, the list of matches made by the parse is presented to the user for examination, as suggestions. If the user accepts these suggestions, then the parsing is complete. Otherwise, the regular expression (pattern) is rejected and the parser returns to operation 2. The process continues until the user accepts the parser's matches or the parser runs out regular expressions. Therefore, the output of the pattern generator\/parser  is a list of suggested matches.",{"@attributes":{"id":"p-0058","num":"0063"},"figref":["FIG. 2","FIG. 2"],"b":["100","108","114","108"]},"In , at operation , the input file  contains a set of email headers, and \u201cdean@cs.umd.edu\u201d is the example substring\u2014\u201cW\u201d data structure capture element\u2014which is mapped (as shown via a displayed highlight) to a selected ontology concept from the ontology  (not shown in , but see ) and serves as sample data  from the input file . At operation , the pattern generator (also referred to as the semanticization rule editor ) attempts to approximate the structure of the given input file  based on regular expression templates . At operation , the pattern generator  suggests a regular expression , to capture the structure of the input file , to the user. At operation , the user examines the suggestion. At operation , the user can either accept or reject the suggestion of the regular expression as the structure rule of the input data .","More particularly, in , the left most case in operation  shows the string \u201cdean@cs.umd.edu\u201d as a match using the example string \u201cdean@cs.umd.edu\u201d as a regular expression\u2014\u201cR\u201d data structure capture element. However, the input file  contains exactly one string that matches the regular expression \u201cdean@cs.umd.edu,\u201d (indicated via display screen yellow highlighting) and this regular expression can be ignored, because it generated too few matches. The middle case in operation  shows all email addresses as being matched using the regular expression \u201c\\w+@\\w+.\\w+.\u201d This regular expression matched all of email addresses that appeared in the input file ; however, this expression again can be skipped, because it generated too many matches. The third case in operation  shows the matches using the regular expression \u201cFrom: \\S+@\\S+,\u201d in which the matches are suggested to the user for inspection. In the  example, the system  internally eliminates cases 1 (left) and 2 (middle), according to configurable application design criteria, but the claimed present invention is not limited to such a configuration and the system  could be controlled (programmed), for example, to suggest to the user all outputs of the pattern generator  including a recommended suggestion.","Regular Expression Templates:","Regular expression templates can be developed based on assumptions about the input data  or domain specific. For example, one of the assumptions can be that each field in a record has some defining characteristics. The templates are designed to be diverse enough to approximate any scenarios. The system  is scalable in that additional templates can be developed to fit different types of input data .",{"@attributes":{"id":"p-0063","num":"0068"},"figref":["FIG. 3","FIG. 4","FIG. 3"],"b":["100","108"]},"Ontology Viewer Tools : The ontology viewer , which typically in the present invention is a combination of software tools, allows domain experts to view and modify ontologies. New ontologies can be created if necessary. Any existing ontology editor can be used, such as SWOOP [www.mindswap.org\/2004\/SWOOP\/, retrieved on Oct. 22, 2004], which is a scalable OWL (Web Ontology Language) ontology browser and editor. SWOOP supports the viewing of multiple ontologies in many different views including a traditional tree structure as well as a hyperlinked interface for easy navigation.  shows a computer displayed graphical user interface window of the ontology viewer tools .","Data Viewer : The data viewer  allows multiple data documents , as input electronic data in any format from structured to semi-structured to unstructured data and in any domain, to be displayed and semanticized in one batch. The formats the data view  supports can be, for example: txt, rtf and html documents. Only one document (or a portion thereof), as a sample , is necessary to generate the initial set of rules .  shows a computer displayed graphical user interface window of the data viewer .","Semanticization Rule Editor : The semanticization rule editor  takes samples  from a collection of data  and its corresponding ontology  as input and assists users in defining the semanticization rule set  per data collection . Typically in the present invention, the rule set  is generated with assistance from a domain expert who is familiar with the data collection. In , the computer displayed graphical user interface window  is an optional user interface window that can display various representations of operations by the semanticization rule editor  (i.e., semanticization rule viewer ), such as displaying a generated rule expression\u2014the \u201cR\u201d data structure capture element. In , the user interface window  displays ontology concepts, including a number thereof, that are mapped to the data displayed in the data viewer user interface window . For example,  shows that the COMMENT property of the protein concept (subclass) of the biopax-level1:PhysicalEntity class  is mapped once (1) and the ontology concept mapping is also visually indicated by a same color (red color in this example and also connected by a line)\u2014the \u201cK\u201d data capture structure element\u2014in both the semanticization rule editor user interface window  and the data viewer user interface window .","Semanticizer engine : The semanticizer engine  is a programmed computer processor that typically in the present invention runs in the background, which takes a large collection of data  and a semanticization rule set  to be applied to this data collection  and produces semantic instances  corresponding to the data collection .","Several additional components developed by FUJITSU LIMITED, Kawasaki, Japan, assignee of the present application, or others can be added to the ontology viewer tools  and the data viewer  environments. These include ontology mapping tools, inference engines, and data visualization tools. Ontology mapping tools, such as ONTOLINK [www.mindswap.org\/2004\/OntoLink, retrieved on Oct. 22, 2004] can be used to specify syntactic and semantic mappings and transformations between concepts defined in different ontologies. Inference engines such as PELLET [www.mindswap.org\/2003\/pellet\/index.shtml, retrieved on Oct. 22, 2004] and RACER [www.cs.concordia.ca\/\u02dchaarslev\/racer\/, retrieved on Oct. 22, 2004] can help check for inconsistencies in the ontologies and further classify classes. Data visualization tools, such as JAMBALAYA [www.thechiselgroup.org\/jambalaya, retrieved on Oct. 22, 2004] and RACER INTERACTIVE CLIENT ENVIRONMENT (RICE) [www.cs.concordia.ca\/\u02dchaarslev\/racer\/, retrieved on Oct. 22, 2004] can be used to present semantic instances  (i.e., data content  as annotated by the data semanticizer ) with respect to its ontology , providing a visualization of annotated data , which can be displayed in the data viewer user interface window . In other words, any other third party ontology viewer and data viewer can be used, such as JAMBALAYA and RICE, which are visualization tools, to present annotated data content or a knowledge base with respect to its ontology, but such visualization tools do not have annotation capability.","Therefore, in , the computer displayed graphical user interface (GUI) of the data semanticizer  comprises three window panes: Ontology Viewer  on the upper left pane, Rule Viewer  on the lower left pane, and Data Viewer  on the right pane.  shows the data semanticizer  in its base state, in which ontology  has been loaded in the ontology viewer , some data  has been opened in the data pane , and a small set of rules has been added, as shown in the rule viewer  (i.e., ontology concepts, including a number thereof, that are mapped to the data  displayed in the data viewer user interface window . In other words, the rule viewer  displays the objects and data properties of the classes that the user wishes to instantiate. Also, information about the number of data points associated with each property can also be found in the rule pane .","Therefore, in , the rule pane  serves as a container for definitions of associations between ontological concepts  and raw data , these associations referred to as \u201cmapping rules\u201d  (i.e., rule pane  implemented as a computer readable medium storing mapping rules and GUI(s) based thereon). A \u201cmapping rule\u201d , is a mapping between an ontology representation , such as a Web Ontology Language (OWL) property, which is displayed in the ontology viewer , and some form of raw data , such as strings of text, which is displayed in the data pane . In , for example, the semanticization rule editor  maps a data point , as a sample , to a selected ontology class property NAME, as shown in the ontology viewer  and the rule viewer  (i.e., indicated by the same \u201cK\u201d value, which in this example is highlighted blue for NAME), and for which an \u201cmapping rule\u201d  is determined based on \u201cR\u201d data structure capture element by associating the data point  (e.g., text) with a rule, via the \u201cAssociate Text with Rule\u201d . The purpose of the \u201cmapping rule\u201d  is to collect samples of data  that a smart parser (semanticization rule editor ) can use to try to discover similar data through suggestions in the remainder of the database , as described in more detail below with reference to . Accordingly, the \u201cmapping rule\u201d  essentially captures a structure of data  based upon a selected domain ontology or the \u201cmapping rule\u201d captures an ontology structure of data . According to aspect of the invention, when the smart parser  correctly identifies data, the smart parser  adds its discoveries back into the original mapping rule definition. Thus, each correct guess by the smart parser , theoretically, increases its ability to recognize subsequent similar datum . The parser  is \u201csmart\u201d because the input file  might have no set pattern that can be assumed to parse. In most parsers, the structure of the input file is known and the parser makes use of the known structure to automate the parsing process. Without this prior structure knowledge, it can be quite difficult to automate the parsing process. The parser  automates the parsing by trying multiple templates, heuristics, and thresholds, to suggest ontology concept mappings, while typically in the present invention leaving the ultimate decision process to accept the suggestions to be done by humans, and where the suggestions can reflect, or be used to derive, a structure of the input file . Once the end user confirms that what the data semanticizer , as a \u201cmapping rule\u201d  has suggested is correct, the \u201cmapping rule\u201d  is stored and can be presented via the rule pane . As the data semanticizer  collect more rules  that are already confirmed by humans as correct, the data semanticizer can utilize these previously confirmed rules in the remainder of data semanticization process (operation ) if similar patterns appear again. In other words, the tool  utilizes what it has learned about the input file .","The data pane  displays the data  from which the user wishes to extract data. Annotated data will be highlighted in different colors depending upon the property with which it is associated, as the \u201cK\u201d data structure capture element. As an example of inputting control commands to the data semanticizer , the keypad  is used as a handy menu type control panel, which allows the user to quickly execute certain common tasks, such as (without limitation and in any combination thereof) add a rule (i.e., map a data point to a selected ontology concept), remove selection from rules, associate text with rule to generate the \u201cR\u201d data structure capture element, and\/or generate an instance. The present invention is not limited to the keypad  implementation, and, for example, to map a sample data point to an ontology concept, typically in the present invention any available displayed data selection techniques can be used, such as selecting a region of a displayed sample input data  in the data viewer  and dropping the grabbed selection into a displayed concept of the ontology  in the ontology viewer .",{"@attributes":{"id":"p-0072","num":"0077"},"figref":["FIG. 5","FIG. 5"],"b":["250","108","252","116","254","108","256","116","258","260","106","262","114","108","264","266","268","108","108","106","114","264","110","116","116"]},"Therefore, in , operations  through  provide a dynamically configurable semanticization or annotation guidance , which typically in the present invention is obtained via input by a domain expert by the ontology viewer tools , the data viewer  and the semanticization rule editor . The annotation guidance  provides guidance of what and where in a sample  of input data  a data point should be mapped to the ontology , and based upon the guidance  generate a data structure capture rule or a annotation\/semanticization rule that could be applied across entire input data . In existing approaches, a user would have to deal with one file, as one input data, map the file to ontology, and move on to the next file, which is substantially a manual annotation process.","In , at operation , typically in the present invention, the semanticization rule editor  is configured to automatically reject or eliminate a data structure capture rule depending on a predetermined threshold (e.g., too many matches, too few matches, etc.) by internally generating rules and applying the rules to a sample  of the input data  and, at operation , to only suggest a rule through a perceptible (e.g., visual and\/or audible) mapping of sample data points  and the ontology  that meets or exceeds the threshold.","In , at operation , semantic instances  are output. Given the rule set  and the data set , the data semanticizer  generates corresponding semantic instances .  are example images of graphical user interfaces of a data semanticizer semanticizing bioinformatics as input electronic data, according to an embodiment of the present invention. More particularly,  show an example of the data semanticizer  annotating bioinformatics data using the regular expression method as the \u201cR\u201d data structure capture element. When a user accepts matches suggested by the data semanticizer  through the process similar to the processes shown in , a user may elect to populate rules  with data in the input file . A conveniently displayed selectable menu keypad  provides an easy access to frequently used menu items.","Although the description herein with reference to  is directed to instance generation for all data points from open data files  in the data pane  (three data points >gi . . . are displayed in the data pane  of ), a user may choose to create semantic instances of a few selected data points from open data files . This is an important capability since the data semanticizer  can generate updated semantic instances  as needed on demand. For example, a single record from a database  can be annotated and used instead of generating a large set of semantic instances from all the records in the database . Accordingly, although the above-described embodiment with reference to  describes using an input ontology , at least one input data  from among a plurality of the input data , and a sample  of the input data , the data semanticizer  is not limited to such a configuration and one or more ontologies , a plurality of input data  and a plurality of samples , or any combination thereof, can be used to generate one or more semantic instances .","In , for each selected ontology class and all of its properties mapped to a data point , as shown in the ontology viewer  and the rule viewer  (i.e., indicated, via a mapping by selecting \u201cAdd a Rule\u201d , by the same \u201cK\u201d value, which in this example is highlighted orange for COMMENT (Description: . . . ), highlighted yellow for NAME, highlighted red for SEQUENCE, highlighted dark green for SHORT-NAME, and highlighted light green for SYNONYMS), the \u201cmapping rules\u201d are determined based on \u201cR\u201d data structure capture element by associating a data point (e.g., text) with a rule, via the \u201cAssociate Text with Rule\u201d  (operation  in ) and providing suggested matches  for acceptance, rejection and\/or optimization (operations ,  and\/or  in ). In particular,  shows that the parser  has just completed for data point  discovering similar data  for the NAME ontology class property, in a remainder of a sample  of a database , which is highlighted in yellow upon selecting \u201cAssociate Text with Rule\u201d  and the parser  provides similar data suggestions  displayed by red color font.","Upon acceptance of suggestions and a successful completion of an error checking mechanism, a semantic instance can be created, via \u201cGenerate an Instance\u201d selection , using the following procedure:","1. For each row of the same color \u201cK,\u201d create an instance of the class with property values using \u201ccolumn\u201d information stored.","2. Run Error Checking Mechanisms: This data validation process contains a set of tests to check for errors from the data files; e.g. the correct data files are being properly semanticized; that is, all the high priority rules are found. For example, if the initial data file has all characters accounted for, so should the rest of the data files.","3. If all the tests pass, new instances are generated (operation  in ).",{"@attributes":{"id":"p-0082","num":"0087"},"figref":["FIG. 7","FIGS. 4"],"b":["304","6","7"]},"The data semanticizer  is flexible on the number of instances and files that can be generated. A single input file containing multiple data points can result in either a single output file with multiple semantic instances or multiple output files each containing one semantic instance of a data point. Likewise, multiple input files can result in either multiple output files or a single output file with semantic instances of all data points from multiple input files. Additionally, multiple input files each with multiple data points can result in multiple output files, each with multiple data points, not necessarily from corresponding input file. For instance, a user may wish to categorize input data points based on certain classifications.",{"@attributes":{"id":"p-0084","num":"0089"},"figref":["FIGS. 8A-8H","FIG. 8","FIG. 8A","FIGS. 8A through 8H"],"b":["118","118","100","118","108","116"]},{"@attributes":{"id":"p-0085","num":"0090"},"figref":"FIG. 8A","b":["116","118"]},{"@attributes":{"id":"p-0086","num":"0091"},"figref":"FIG. 8B","b":["116","118","100"]},{"@attributes":{"id":"p-0087","num":"0092"},"figref":"FIGS. 8C-8E","b":["116","118","118"]},{"@attributes":{"id":"p-0088","num":"0093"},"figref":["FIGS. 8F-8H","FIGS. 8F-8H"],"b":["116","118","106","108","108","108","100","110","108"]},{"@attributes":{"id":"p-0089","num":"0094"},"figref":"FIG. 9","b":["100","500","108","100","108","502","118","118","504","100","500","100","108","100","502","108","100","118","504","504","504"],"i":["a","n","a","n","a ","b"]},"In , the task computing environment  architecture, for example, comprises a presentation layer , a web service application programming interface (API) , a middleware layer , a service layer , and a realization layer . The data semanticizer  provides resource and service abstractions (realization layer ) based upon input data  in any format and in any domain, using generated semantic instances , and creates a task computing environment  based upon the resource and service abstractions  of the input data . In other words, the present invention provides as a service a semantic instance , as an abstraction of the input data , usable within a task computing environment . The available data semantics  will then make it easier to interface with and migrate to new applications and platforms. Once annotated, the self-explanatory semantic data are more likely to be correctly used in context and one can also easily index and search semantically annotated data, making it easier to manage a large volume of data.","More particularly, the present invention provides a computer system, as a data semanticizer , to assist a user to annotate with semantics a large volume of electronic data in any format, including semi-structured to unstructured electronic data, in any domain. Therefore, the present invention provides an ontological representation of electronic data in any format and any domain. Use of semantic Web technologies to provide interoperability via resource and service abstractions, thereby providing a task computing environment, is successfully demonstrated and described by FUJITSU LIMITED, Kawasaki, Japan, assignee of the present application, in the following publications and\/or patent applications (all of which are incorporated herein by reference) by R. Masuoka, Y. Labrou, B. Parsia, and E. Sirin, , IEEE Intelligent Systems, vol. 18, no. 5, September\/October 2003, pp. 68-72; R. Masuoka, B. Parsia, and Y. Labrou, , Proceedings of the 2nd International Semantic Web Conference 2003, Oct. 20-23, 2003, Sundial Resort, Sanibel Island, Fla., USA; Z. Song, Y. Labrou and R. Masuoka, , MobiQuitous 2004, Aug. 22-25, 2004, Boston, USA; Ryusuke Masuoka, Yannis Labrou, and Zhexuan Song, 1 No. 3, October 2004, pp. 21-24; Ryusuke Masuoka and Yannis Labrou, --, WWW Based Communities For Knowledge Presentation, Sharing, Mining and Protection (The PSMP workshop) within CIC 2003, Jun. 23-26, 2003, Las Vegas, USA; in copending U.S. non-provisional utility patent application Ser. No. 10\/733,328 filed on Dec. 12, 2003; and U.S. provisional application Nos. 60\/434,432, 60\/501,012 and 60\/511,741. Task Computing presents to a user the likely compositions of available services based on semantic input and output descriptions and creates an environment, in which non-computing experts can take advantage of available resources and services just as computing experts would. The data semanticizer  has a benefit of bringing similar interoperability to application data sets in any format and in any domain.","The existing approaches to data annotation, which depend completely on user knowledge and manual processing, are not suitable for annotating data in large quantities. They are often too tedious and error-prone to be applicable. The data semanticizer  assists users in generating rule sets  to be applied to a large data set  consisting of similar pattern files and automates the process of annotating the data  with the rule sets . This approach minimizes the human effort and dependency involved in annotating data with semantics.","Additionally, the automated data annotation process of the data semanticizer  allows rapid development of semantic data . Test results show that two files, each containing 550 Fast-A formatted protein sequences can be annotated using the BIOPAX-LEVEL1 ontology  without error in approximately 20 seconds once the user has accepted the suggestions.","One great advantage of using the data semanticizer is that one can take advantage of the Semantic Web technologies on output annotated data sets . The determination of data compatibility with applications is simplified and in some cases can be automated. Data can be more easily and appropriately shared among different applications and organizations enabling interoperability. For example, to date, the semantic data  generated by data semanticizer  has bee used in two applications; BIO-STEER and BIO-CENTRAL. The BIO-STEER is an application of task computing in the bioinformatics field, which gives the user flexibility to compose semantically defined services that perform bioinformatics analysis (e.g., phylogentic analysis). These semantic services exchange semantic data as the output of one service is used as the input to the next step. Using the data semanticizer , the semantic data  can be now passed to other semantic services with the appropriate translations.","The BIO-CENTRAL is a website which allows access to a knowledge-base of semantically annotated biological data. It exemplifies the benefits of a semantically described data. The data semanticizer  can be used to annotate molecular interaction data from the Biomolecular Interaction Network Database (BIND) [Bader, Betel, and Hogue, \u201cBIND: The Biomolecular Interaction Network Database,\u201d Nucleic Acids, Res, PMID, Vol. 31, No. 1, 2003] with the BIOPAX-LEVEL1 (Biological Pathway Exchange Language) [Bader et al. \u201cBio-PAX\u2014Biological Pathways Exchange Language, Level 1, Version 1.0 Documentation,\u201d BioPAX Recommendation, [www.biopax.org\/Downloads\/Level1v1.0\/biopax-level.zip, retrieved on Oct. 22, 2004]] ontology. The annotated data  are then deposited into the BIO-CENTRAL database.","When the data is annotated with rich semantics, the data can be easily manipulated, transformed, and used in many different ways. However, the work of \u201cpushing\u201d data into a higher level is not trivial. The framework of data semanticizer  works as a \u201cpump\u201d and helps users to complete the procedure in a much easier way by defining (implementing in software) a set of annotation elements to capture a structure of electronic data as input data; generating a rule, according to the set of annotation elements defined and a sample of the input data, to capture the structure of the input data; applying the rule to the input data; and generating a semantic instance of the input data based upon the rule applied to the input data.","Recently, an increasing number of researchers of in both fields are recognizing the benefits and merits of bringing the Semantic Web and the Grid together [E-Science, IEEE Intelligent Systems, Vol. 19, No. 1, January\/February 2004]. In order to take full advantage of the Semantic Web in the Grid, it is necessary to add semantic annotations to existing data. A small number of researchers have experimented with ways to annotate data with semantics. However, the existing approaches, such as GENE ONTOLOGY ANNOTATION [www.geneontology.org, retrieved on Oct. 22, 2004] and TRELLIS [www.isi.edu\/ikcap\/trellis, retrieved on Oct. 22, 2004], which completely depend on user knowledge, are often tedious and error-prone. The data semanticizer  provides a method to add semantics to the data with reduced human dependency.","Furthermore, the data semanticizer  is flexible in input data types and application domains. It can be applied to not only plain text data, but also other data types, such as relational databases, Extensible Markup Language (XML) databases, media (e.g., image, video, sound, etc.) files, and even the data access model in Grid Computing. The approach used in the data semanticizer is not domain specific as it is applicable to a variety of application domains, such as life science, government, business, etc. The data semanticizer  can play an important role in the deployment of Semantic Web technology as well. Further, the data semanticizer  provides the following: (a) any combination of a single input file or multiple input files can result in generation of a single output file containing multiple semantic instances, or multiple output files with each output file containing one or more semantic instances from the input data; (b) can provide a service which generates one semantic instance of user's choice; (c) can provide a service which generates a list of semantic instances of user's choice; (d) can provide a service which generates a list of all semantic instances in the input file; and (e) can directly assert the semantic object(s) into the RDF\/OWL store and\/or Relational Database(RDB).","The data semanticizer , comprising the above-described processes, is implemented in software (as stored on any known computer readable media) and\/or computing hardware controlling a computing device (any type of computing apparatus, such as (without limitation) a personal computer, a server and\/or a client computer in case of a client-server network architecture, networked computers in a distributed network architecture).","The many features and advantages of the invention are apparent from the detailed specification and, thus, it is intended by the appended claims to cover all such features and advantages of the invention that fall within the true spirit and scope of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation illustrated and described, and accordingly all suitable modifications and equivalents may be resorted to, falling within the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These together with other aspects and advantages which will be subsequently apparent, reside in the details of construction and operation as more fully hereinafter described and claimed, reference being had to the accompanying drawings forming a part hereof, wherein like numerals refer to like parts throughout.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 6-7"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 8A-8H"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
