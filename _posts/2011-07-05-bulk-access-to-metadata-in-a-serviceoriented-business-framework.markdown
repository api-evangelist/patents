---
title: Bulk access to metadata in a service-oriented business framework
abstract: A bulk service interface can be instantiated for each of at least one service provider providing a plurality of business objects using a stored definition of a plurality of metadata properties relating to generation of a user interface that incorporates content of a plurality of business objects. The bulk service interface can query the stored definition and access, in a bulk metadata access process, dynamic metadata required for instantiation of the plurality of business objects. If the stored definition has not previously been received, a default bulk services access process that queries an existing dynamic metadata access interface of each of the plurality of business objects can be initiated to retrieve the dynamic metadata from each of the plurality of business objects. An instance of the user interface can be generated using dynamic metadata accessed by the bulk service interface and/or the retrieved by the default bulk services access process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612927&OS=08612927&RS=08612927
owner: SAP AG
number: 08612927
owner_city: Walldorf
owner_country: DE
publication_date: 20110705
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject matter described herein relates to providing bulk access to metadata, for example metadata of one or more business objects in a service-oriented business framework.","Various organizations make use of enterprise resource planning (ERP) software architectures to provide an integrated, computer-based system for management of internal and external resources, such as for example tangible assets, financial resources, materials, customer relationships, and human resources. An ERP software architecture is an example of a service oriented business framework that can, in some examples, be designed to facilitate the flow of information between business functions inside the boundaries of the organization and to manage connections to outside service providers, stakeholders, and the like. Such architectures often include one or more centralized databases accessible by a core software platform that consolidates business operations, including but not limited to those provided by the core software platform and one or more third party vendors, into a uniform and organization-wide system environment. The core software platform can reside on a centralized server or alternatively be distributed across modular hardware and software units that provide \u201cservices\u201d and communicate via one or more direct or networked connections, for example over a network such as the Internet, a wide area network, a local area network, or the like.","As part of the installation process of the core software platform on computing hardware owned or operated by the organization, one or more customized features, configurations, business processes, or the like may be added to the default, preprogrammed features such that the core software platform is configured for maximum compatibility with the organization's business processes, data, and the like.","Business objects or other data objects in an object-oriented computer program, such as for example an ERP, can represent the entities in a business domain that the object-oriented computer program is designed to support. A business object can encapsulate all or at least some of the data and business behavior associated with the entity that it represents. In some applications, a business object can be modeled and implemented in a normalized manner to optimize service provisioning. Joined data of other business objects for use in a user interface, a form, an agent, a data analytic routine or module, or the like may be more efficiently accessed using one or more denormalized views. A service adaptation can provide a mapping facility to fill the gap between a provider layer, for example one or more repositories storing data and data objects, and a consumer layer that accesses the data and data objects.","Service adaptations can include frontend service adaptations that allow for the combination of fields from different business object nodes so that a resulting adapted business object node can be used for displaying required business data in a user interface. With frontend service adaptation, an adapted business object node can be configured to contain fields from different business object nodes along an association path. Such an arrangement can result in a large amount of metadata residing and being processed by a frontend server. In addition, during runtime, all data on an associated path is transferred to the frontend server. Moreover, many association paths may need to be evaluated on the frontend in order to access required business object fields. All of such requirements relating to frontend service adaptation can negatively affect performance, network data volume, memory consumption, and response time for the corresponding user interfaces. Alternative approaches, described in co-pending and co-owned U.S. patent application Ser. Nos. 12\/246,247, 12\/648,206, and 12\/648,216, the disclosures of each of which are incorporated herein by reference in their entireties, can include shifting service adaptation to the backend to improve performance, network data volume, memory consumption, response times, and the like.","In one aspect, determining, at a bulk metadata service, whether a stored definition of a plurality of metadata properties relating to generation of a user interface has previously been received from a service consumer of the user interface. The user interface incorporates content of a plurality of business objects. The definition further includes identities of a plurality of nodes of the plurality of business objects corresponding to the plurality of metadata properties. If the stored definition has previously been received, a bulk service interface is instantiated for each of at least one service provider providing the plurality of business objects. The bulk service interface queries the stored definition and accesses, in a bulk metadata access process, dynamic metadata required for instantiation of the plurality of business objects. If the stored definition has not previously been received, a default bulk services access process is initiated. The default bulk services access process queries an existing dynamic metadata access interface of each of the plurality of business objects to retrieve the dynamic metadata from each of the plurality of business objects. An instance of the user interface is generated using at least one of the dynamic metadata accessed by the bulk service interface and the dynamic metadata retrieved by the default bulk services access process.","In some variations one or more of the following features can optionally be included. A stored model of a use case specific service for access of static metadata can be accessed from a metadata repository. The stored model can map the use case specific service to an existing metadata infrastructure of a core software platform. The model can optionally include a description of the use case specific service in a bulk metadata access description language. The bulk metadata access description language can optionally be based at least in part on a Service Adaption Language (SADL) of a business service adaptation (BSA). The existing dynamic metadata access interface of the business object can optionally be characterized by nodes having fine metadata granularity. The service provider can optionally include at least one of a core software platform and an external service provider accessible via the core software platform. At least one of the determining, the instantiating, the initiating, and the generating can optionally be performed by a computing system that includes a programmable processor.","Systems and methods consistent with this approach are described as well as articles that comprise a tangibly embodied machine-readable medium operable to cause one or more machines (e.g., computers, etc.) to result in operations described herein. Similarly, computer systems are also described that may include a processor and a memory coupled to the processor. The memory may include one or more programs that cause the processor to perform one or more of the operations described herein.","The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings, and from the claims. It should be noted that, while descriptions of specific implementations of the current subject matter discuss delivery of enterprise resource planning software and in some examples delivery of enterprise resource planning software to multiple organizations via a multi-tenant system, the current subject matter is applicable to other types of software and data services access as well. The scope of the subject matter claimed below is therefore not limited except by the actual language of the claims.","When practical, similar reference numbers denote similar structures, features, or elements.","An ERP software architecture can typically function as an integration platform for one or more third party software components such that features, functions, etc. of the core software platform of the ERP software architecture and features, functions, etc. of the one or more third party software components are presented in a unified, user-customizable manner. One or more business objects can provide access to these various feature, functions, etc.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","102","104","106","110","112","114","116","120","102","122","124","126","102","102","122","112","102","112","122","102","112","122","102","112","122"]},"Business objects can include both dynamic metadata, which can generally be used by all kinds of user interfaces to facilitate the creation or modification of business object data, and static metadata, which are generally used to define data structures (e.g. tables, objects, etc.). A user interface, as noted above, may include more than one business object node, which can be included in either a single business object tasked with creation of the user interface or in one or more other business objects. Such one or more other business objects can be internal or external t the core software platform. The nodes required for display of the user interface can be joined such that the related data can be displayed in the user interface.","Under currently available approaches, access to dynamic metadata of a business object at runtime is generally limited by the granularity of a business object node. In other words, the smallest unit of dynamic metadata available for access from a business object is limited by how finely the metadata of the business subject are divided among the nodes of the business object. Accordingly, multiple requests to a business object may be required in generating a user interface based on the business object, and in some cases, the multiple requests can include redundant requests. For example, if a single business object node is used in a service adaption more than one time, the business object containing that node may need to be called repeatedly.","Using currently available approaches access to static metadata available in the metadata repository can be supported via one or more regular meta-objects via one or more consumer proxies, such as for example a local client proxy (LCP), an Advanced Business Application Programming (ABAP) consumer proxy (ACP), and a business service adaptation (BSA), and via\/or a metadata application programming interface (API) which can be based on a runtime repository. Both APIs can be generic, for example not use case specific and both can have fine granularity. The metadata API can have very fine granularity, which can lead to many ABAP object instances and ABAP method calls to access the metadata necessary to generate a user interface based on the business object.","To address these and potentially other issues with currently available solutions, one or more implementations of the current subject matter provide methods, systems, articles or manufacture, and the like that can, among other possible advantages, provide a bulk metadata service that enables, among other possible functions, specification of requested dynamic metadata for a business object. A consumer of the bulk service can describe the requested properties and the nodes for which the properties are requested. The bulk service can be related to standard properties such as \u201cread-only\u201d or \u201cdisabled\u201d and can also include one or more dynamic default values for an object create scenario. A service provider associated with the business object can instantiate one or more bulk service interfaces. If such instantiation is not available, a bulk services default module can orchestrate generation of a bulk services blueprint by calling a dynamic metadata access interface of a business object that has been pre-prepared at design time with business object node dependencies and other inter-connections defined at a fine granularity.","A metadata repository can also include models for use-case specific services for access of static metadata. Such services can be mapped to the already existing metadata infrastructure via a repository manager. A bulk metadata access description language can be used to describe use-case specifics. In some implementations, the bulk metadata access description language can be based on the Service Adaption Language (SADL) of the Business Service Adaptation (BSA), both of which are available from SAP AG of Walldorf, Germany. The runtime access can in some implementations be based on generated ABAP classes for consumer convenience. Runtime access ABAP classes can also be implemented to use internal shortcuts of a metadata repository infrastructure to further improve access performance.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["200","202","204","206","210"]},"Optionally, at , a stored model of a use case specific service for access of static metadata can be accessed from a metadata repository. The stored model, which can in some implementations include a description of the use case specific service in a bulk metadata access description language (e.g. one based at least in part on the Service Adaption Language (SADL) of the business service adaptation (BSA) available from SAP AG of Walldorf, Germany) can map the use case specific service to an existing metadata infrastructure of the core software platform.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["300","302","304","304","306","302","308","310","304","308","312","302","304","302","312","314","302","304","302","316","302"]},"One or more core software platform modules  of an ERP software architecture can be provided as part of a standalone, customized software installation that runs on one or more processors that are under the control of an organization. This arrangement can be very effective for a large-scale organization that has very sophisticated in-house information technology (IT) staff and for whom a sizable capital investment in computing hardware and consulting services required to customize a commercially available ERP solution to work with organization-specific business processes and functions is feasible. Smaller organizations can also benefit from use of ERP functionality. However, such an organization may lack the necessary hardware resources, IT support, and\/or consulting budget necessary to make use of a standalone ERP software architecture product and can in some cases be more effectively served by a software as a service (SaaS) arrangement. In a SaaS arrangement, the ERP system architecture (e.g. the core software platform) can be hosted on computing hardware such as servers and data repositories that are maintained remotely from the organization's location and accessed by authorized users at the organization via a thin client, such as for example a web browser, over a network.","In a software delivery configuration in which services provided to each of multiple organizations are hosted on a dedicated system that is accessible only to that organization, the software installation at the dedicated system can be customized and configured in a manner similar to the above-described example of a standalone, customized software installation running locally on the organization's hardware. However, to make more efficient use of computing resources of the SaaS provider and to provide important performance redundancies and better reliability, it can be advantageous to host multiple tenants on a single system that includes multiple servers and that maintains data for all of the multiple tenants in a secure manner while also providing customized solutions that are tailored to each tenant's business processes.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["400","402","404","310","410","410","400","402","404","412","410","410","404","402","414","402","416"]},"To provide for customization of the core software platform for each of multiple organizations supported by a single software delivery architecture , the data and data objects stored in the repository or repositories  that are accessed by the application server  can include three (or optionally more) types of content as shown in : core software platform content , system content , and tenant content . Core software platform content  includes content that represents core functionality and is not modifiable by a tenant. System content  can in some examples be created by the runtime of the core software platform and can include core data objects that are modifiable with data provided by each tenant. For example, if the core software platform is an ERP system that includes inventory tracking functionality, the system content A-N can include data objects for labeling and quantifying inventory. The data retained in these data objects are tenant-specific: for example, each tenant A-N stores information about its own inventory. Tenant content A-N includes data objects or extensions to other data objects that are customized for one specific tenant A-N to reflect business processes and data that are specific to that specific tenant and are accessible only to authorized users at the corresponding tenant. Such data objects can include a key field (for example \u201cclient\u201d in the case of inventory tracking) as well as one or more of master data, business configuration information, transaction data or the like. For example, tenant content  can include condition records in generated condition tables, access sequences, price calculation results, or any other tenant-specific values. A combination of the software platform content  and system content  and tenant content  of a specific tenant are presented to users from that tenant such that each tenant is provided access to a customized solution whose data are available only to users from that tenant.","A multi-tenant system such as that described herein can include one or more of support for multiple versions of the core software and backwards compatibility with older versions, stateless operation in which no user data or business data are retained at the thin client, and no need for tenant configuration on the central system. As noted above, in some implementations, support for multiple tenants can be provided using an application server  that includes multiple server systems  that handle processing loads distributed by a load balancer . Potential benefits from such an arrangement can include, but are not limited to, high and reliably continuous application server availability and minimization of unplanned downtime, phased updating of the multiple server systems  to permit continuous availability (one server system  can be taken offline while the other systems continue to provide services via the load balancer ), scalability via addition or removal of a server system  that is accessed via the load balancer , and de-coupled lifecycle processes (such as for example system maintenance, software upgrades, etc.) that enable updating of the core software independently of tenant-specific customizations implemented by individual tenants.","One or more aspects or features of the subject matter described herein can be realized in digital electronic circuitry, integrated circuitry, specially designed application specific integrated circuits (ASICs), field programmable gate arrays (FPGAs) computer hardware, firmware, software, and\/or combinations thereof. These various aspects or features can include implementation in one or more computer programs that are executable and\/or interpretable on a programmable system including at least one programmable processor, which can be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device. The programmable system or computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","These computer programs, which can also be referred to as programs, software, software applications, applications, components, or code, include machine instructions for a programmable processor, and can be implemented in a high-level procedural and\/or object-oriented programming language, and\/or in assembly\/machine language. As used herein, the term \u201cmachine-readable medium\u201d refers to any computer program product, apparatus and\/or device, such as for example magnetic discs, optical disks, memory, and Programmable Logic Devices (PLDs), used to provide machine instructions and\/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term \u201cmachine-readable signal\u201d refers to any signal used to provide machine instructions and\/or data to a programmable processor. The machine-readable medium can store such machine instructions non-transitorily, such as for example as would a non-transient solid-state memory or a magnetic hard drive or any equivalent storage medium. The machine-readable medium can alternatively or additionally store such machine instructions in a transient manner, such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.","To provide for interaction with a user, one or more aspects or features of the subject matter described herein can be implemented on a computer having a display device, such as for example a cathode ray tube (CRT) or a liquid crystal display (LCD) or a light emitting diode (LED) monitor for displaying information to the user and a keyboard and a pointing device, such as for example a mouse or a trackball, by which the user may provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example, feedback provided to the user can be any form of sensory feedback, such as for example visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including, but not limited to, acoustic, speech, or tactile input. Other possible input devices include, but are not limited to, touch screens or other touch-sensitive devices such as single or multi-point resistive or capacitive trackpads, voice recognition hardware and software, optical scanners, optical pointers, digital image capture devices and associated interpretation software, and the like.","The subject matter described herein can be embodied in systems, apparatus, methods, and\/or articles depending on the desired configuration. The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead, they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail above, other modifications or additions are possible. In particular, further features and\/or variations can be provided in addition to those set forth herein. For example, the implementations described above can be directed to various combinations and subcombinations of the disclosed features and\/or combinations and subcombinations of several further features disclosed above. In addition, the logic flows depicted in the accompanying figures and\/or described herein do not necessarily require the particular order shown, or sequential order, to achieve desirable results. Other implementations may be within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, show certain aspects of the subject matter disclosed herein and, together with the description, help explain some of the principles associated with the disclosed implementations. In the drawings,",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
