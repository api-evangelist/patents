---
title: Decomposing markup language elements for animation
abstract: Embodiments prepare a markup language (ML) element for animation. A request to perform at least one animation on at least one ML element is intercepted or received. One or more animation preparation attribute values are defined based at least on the requested animation and current attribute values of the ML element. The ML element is altered to include the defined animation preparation attribute values, and an animation engine performs the animation of the altered ML element. The animation preparation attributes and values (e.g., style elements) may be reset, removed, or otherwise modified after animation. In some embodiments, a library of application programming interfaces (APIs) enable web browsers to request animations of legacy hypertext markup language (HTML) elements for consumption by animation engines based on JAVASCRIPT scripting or cascading style sheets (CSS).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171098&OS=09171098&RS=09171098
owner: Microsoft Technology Licensing, LLC
number: 09171098
owner_city: Redmond
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Additional Scenario Examples","APPENDIX A"],"p":["Animations in documents enhance the user experience. For example, animations improve the usability and visual appeal of a website. Example animation include deleting a table from a web page, moving a hypertext markup language (HTML) element from one position to another, or otherwise visually altering HTML elements. Developers working with established websites, however, often have to animate HTML elements written in legacy code that cannot be animated using existing animation logic based on JAVASCRIPT or cascading style sheets (CSS). Rather, with some existing systems, the developers have to manually re-write each HTML element for animation in each animation scenario. Such an ad-hoc solution specific to each legacy HTML element to be animated is time consuming, expensive, and error prone.","Embodiments of the disclosure enable animation of legacy markup language (ML) elements. A computing device receives a request to perform at least one animation on at least one ML element. The ML element has one or more current attribute values associated therewith. The computing device defines one or more animation preparation attribute values based at least on the requested animation and the current attribute values. The computing device alters the ML element to include the defined animation preparation attribute values. An animation engine animates the altered ML element using at least the defined animation preparation attribute values.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","Referring to the figures, embodiments of the disclosure enable animation of markup language (ML) elements. In some embodiments, legacy hypertext markup language (HTML) elements are decomposed for consumption by animation engines  supporting JAVASCRIPT scripting and\/or cascading style sheets (such as CSS3). Application programs  such as browsers invoke one or more application programming interfaces (APIs)  that change attributes and attribute values of the ML elements (e.g., adds, alters, or removes metadata) such that content appears the same but is prepared for animation by the animation engine . Some aspects of the disclosure additionally reset the ML elements after animation (e.g., back to the original or legacy layout).","Exemplary operations performed by aspects of the disclosure include re-positioning the ML element, creating copies of ML elements for animations that replace content, animating a bounding box that grows to fully contain the ML element (e.g., for displaying additional text), and manipulating cells within a table (e.g., move, delete, insert, etc.).","While aspects of the disclosure are described with reference to the ML element being a hypertext markup language (HTML) element, embodiments of the disclosure are operable with any object to be animated. Further, aspects of the disclosure are not limited to animations on web pages, and instead contemplate animations in any document capable of displaying output from the animation engine .","Referring next to , an exemplary block diagram illustrates calling code  communicating with the animation engine  via the API . The calling code  may be the application program  or portion thereof that, when executed by a computing device , requests an animation. The animation may be requested using function calls such as provided by the API . In some embodiments, a plurality of APIs  may be available as a library. The library of APIs  may be loaded by the computing device  during compile time or runtime of the calling code . In other embodiments (not shown), the APIs  reside on a device separate from the computing device .","The APIs  include functions to decompose legacy HTML elements, objects, or code. In other embodiments, the APIs  decompose elements, objects, or code written in other markup languages. Decomposing the HTML element includes preparing the HTML element for animation. Examples of decomposition are described and illustrated herein, such as with reference to  and , and generally include adding or altering attributes on the HTML element to make the HTML element suitable for animation.","After the HTML element has been prepared for animation, the animation engine  processes the HTML element (e.g., consumes the decomposed HTML). For example, the animation engine  is executed by the computing device  to animate the HTML element and to display the animation on a display  associated with the computing device . In embodiments in which the animation engine  is executed by a device other than the computing device  executing the calling code  or providing the API , the animation engine  provides the animation to the computing device  for display. For example, the animation engine  may by executed by a server or a cloud service .","During and\/or after animation, the animation engine  updates the state of the HTML element by modifying attributes of the HTML element. When the animation is complete, the additions or alterations to the attributes made in preparation for animation are reset such that the HTML element reflects the legacy layout. For example, another function in the API  receives or intercepts the HTML element after animation and conforms the HTML element with the modified attributes to a format suitable for consumption by the calling code . For example, styles within the HTML element after animation are conformed to legacy HTML. The conformed HTML element is then provided to, or made accessible to, the calling code .","Aspects of the disclosure are operable with any animation engine  operating in any way to animate any ML element. While described with reference to the animation engine  being decoupled from animation definitions  as next described with reference to , aspects of the disclosure are not limited to such embodiments.","Referring next to , an exemplary block diagram illustrates processing of an animation request using a decomposition engine , the animation engine , and a re-composition engine . The application program  is executed by, or otherwise associated with, the computing device . The computing device  may be any device programmed to perform operations as described and illustrated herein (e.g., see ). In some embodiments, the application program  is a browser executing on the computing device . Aspects of the disclosure support different browser capabilities. For example, based on the browser type, the ML element to be animated may be coded in JAVASCRIPT scripting language or cascading style sheets (e.g., CSS3). In either of these examples, aspects of the disclosure are capable of preparing the ML element for animation.","In the example of , the application program  sends an animation request to the animation engine  using at least one of the APIs . For example, the application program  may request that a particular ML element be moved 50 pixels to the right of its current location. While shown external to the computing device  in , the APIs , or a portion thereof, may be stored and invoked locally on the computing device . The decomposition engine , or other layer between the application program  and the animation engine , receives or intercepts the animation request from the application program . For example, the decomposition engine  prepares the ML element for animation and sends the animation request with the prepared ML element to the animation engine  for animation. In some embodiments, preparing the ML element for animation includes adding, removing, and\/or otherwise changing metadata associated with the ML element.","During and\/or after animating the ML element as requested (e.g., the animation being displayed by the computing device ), the animation engine  modifies attributes of the ML element to reflect the animation. The ML element with the modified attributes is made available to the re-composition engine . For example, the ML element with the modified attributes is provided as part of a function call (e.g., finish or completion function) that resets or cleans up the animation. The re-composition engine , or other layer between the animation engine  and the application program , prepares the ML element after animation for processing by the application program  by, for example, resetting the ML element to its original, legacy layout. In some embodiments, the re-composition engine  prepares the ML element by adding, removing, and\/or otherwise changing metadata associated with the ML element. The re-composition engine  provides the prepared ML element to the application program .","In some embodiments, the animation engine  is decoupled from animation definitions  describing the requested animation. While aspects of the disclosure are not limited to such a configuration, these embodiments contemplate a catalog  that includes the animation definitions  accessible by the animation engine  via, for example, the API . For example, the animation request and the animation definition(s)  corresponding to the requested animation are identified and provided as input to the animation engine . For example, the API  may identify the corresponding animation definition  or the animation engine  itself may obtain the corresponding animation definition . The animation engine  performs the animation based on the animation request and the animation definition  for display on the computing device  (e.g., by the application program ).","Continuing the example in which the animation engine  is decoupled from the animation definitions , one or more animation providers  provide animation code (e.g., animation extensible markup language code) describing one or more animations for storage in the catalog . The animation code may be generally referred to as animation definitions , although in some embodiments the animation code from the animation providers  may be conformed or altered to create an animation definition  suitable for storage in the catalog . The catalog  may be external to the computing device  as shown in , or may be stored on the computing device  (e.g., as a library) with the animation engine  (not shown). The animation engine  may access the catalog  to obtain the animation definitions  (e.g., using an animation identifier or other pointer or reference included in the animation request), or may receive the animation definitions  from the catalog  via another component or device (e.g., the API ).","Referring next to , an exemplary block diagram illustrates the computing device  storing computer-executable components for decomposing and re-composing an ML element for animation by the animation engine . In this example, the computing device  is associated with a user  and represents a system for preparing legacy ML elements for animation. The computing device  may be any device executing instructions (e.g., as application programs, operating system functionality, or both) to implement the operations and functionality associated with the computing device . The computing device  may include a mobile computing device or any other portable device. In some embodiments, the mobile computing device includes a mobile telephone, laptop, tablet, computing pad, netbook, gaming device, and\/or portable media player. The computing device  may also include less portable devices such as desktop personal computers, kiosks, and tabletop devices. Additionally, the computing device  may represent a group of processing units or other computing devices.","The computing device  has at least one processor , a memory area , and at least one display . The processor  includes any quantity of processing units, and is programmed to execute computer-executable instructions for implementing aspects of the disclosure. The instructions may be performed by the processor  or by multiple processors executing within the computing device , or performed by a processor external to the computing device . In some embodiments, the processor  is programmed to execute one or more of the instructions illustrated in the figures (e.g., such as in  and ).","The computing device  further has one or more computer readable media such as the memory area . The memory area  includes any quantity of media associated with or accessible by the computing device . The memory area  may be internal to the computing device  (as shown in ), external to the computing device  (not shown), or both (not shown).","The memory area  stores, among other data, one or more applications. The applications, when executed by the processor , operate to perform functionality on the computing device . Exemplary applications include mail application programs, web browsers, calendar application programs, address book application programs, messaging programs, media applications, location-based services, search programs, and the like. The applications may communicate with counterpart applications or services such as web services accessible via a network. For example, the applications may represent downloaded client-side applications that correspond to server-side services executing in a cloud.","The memory area  further stores one or more of the APIs  for preparing the ML elements for animation. For example, the APIs  may be stored as a library loaded by a browser during runtime. In embodiments in which the computing device  executes the animation engine  to animate the ML elements, the memory area  may store the animation definitions .","The memory area  further stores one or more computer-executable components. Exemplary components include an interface component , a decomposition component , and a re-composition component . Operation of these components is described below with reference to .","The computing device  includes at least one display  or other means for displaying the animations to the user , along with computer-executable instructions (e.g., a driver) for operating a graphics card to enable the display .","In some embodiments, the computing device  also includes a communications interface such as a network interface card and\/or computer-executable instructions (e.g., a driver) for operating the network interface card.","Referring next to , an exemplary flow chart illustrates the preparation of at least one of the ML elements for animation by the animation engine . If the computing device  receives a request to animate at least one ML element at , the computing device  defines one or more animation preparation attribute values at . The request may be received from the application program  or other calling code . The ML element (or pre-animation ML element) has one or more current attribute values associated therewith. Defining the animation preparation attribute values includes selecting at least one attribute that is either within the pre-animation ML element already or to be added to the pre-animation ML element. The attribute is selected based at least on the requested animation (e.g., move, fade, etc.). Exemplary attributes (e.g., style attributes) include position, height, width, and opacity, though other attributed are contemplated. The position attribute may be a two-dimensional value such as (x,y), three-dimensional value such as (x,y,z), or otherwise. The units of measure for the position, height, and width attributes are represented as pixels, in some embodiments. The opacity may be represented as a percentage or with another metric. Other attributes are contemplated to be within the scope of the disclosure.","The animation definition  and\/or animation preparation attribute value may be defined for the selected attribute based at least on information included in the animation request (e.g., the requested animation and the current attribute values). For example, the animation request may indicate that a particular ML element should be moved by 50 pixels. In this example, the \u201cmove\u201d request identifies which of the animation definitions  to select.","At , the ML element is altered to include the defined animation preparation attribute values. In some embodiments, metadata associated with the ML element may be altered. For example, the ML element may be modified to include the selected attribute(s) and the defined animation preparation attribute values. At , the altered ML element is provided or made accessible to the animation engine . In examples in which the computing device  executes the animation engine , the altered ML element may be identified to the animation engine  via a pointer or other reference to memory. In examples in which the animation engine  is executed by another device, the computing device  may send the altered ML element to that device in a message or other communication.","The animation engine  animates the altered ML element using at least the defined animation preparation attribute values. Aspects of the disclosure are operable with any animation engine  that animates ML elements. Further, in some embodiments, the computing device  alters a plurality of ML elements and performs a plurality of animations based on the received animation request.","Example scenarios that involve defining the animation preparation attribute values, altering the ML element, and animating the altered ML elements are next described. Those skilled in the art will appreciate that the disclosure is not limited to the examples described herein, and that other animation preparation attribute values and changes made to the ML elements are within the scope of the disclosure. Further, examples of APIs  provided by aspects of the disclosure are described in Appendix A.","If the animation request is directed to re-positioning the ML element within a browser, offset coordinates are received from the browser. Absolute coordinates are defined based on the offset coordinates, and one or more of the attributes of the ML element are changed to include the defined absolute coordinates. In an example in which the ML element is an HTML element, aspects of the disclosure perform a \u201cmove\u201d animation by changing the values of the \u201ctop\u201d and \u201cleft\u201d attributes of the HTML element. The computing device  may manipulate a document object model (DOM) representing the HTML element by lifting fields, portions, attributes, values, or other elements from the DOM layout and positioning them as \u201crelative\u201d or \u201cabsolute\u201d so that the \u201ctop\u201d and \u201cleft\u201d attribute values become effective. In this manner, the HTML element starts moving from its exact initial position instead of a jerk before the motion starts.","If the application program  requests that existing content in one area of the display  be replaced with new content, aspects of the disclosure animate the existing content fading or moving out simultaneously while the new content animates into the display . In such examples, the computing device  creates a copy of the animation area and performs two animations simultaneously.","If the application program  requests that content be shown inline with the ML element, aspects of the disclosure animate an inline bounding box within the ML element to display inline comments or on-demand information on blogs, discussions, feeds, or the like. For example, the computing device  may layout the content to determine the target size of the bounding box, and then expand white space to the target size.","If the application program  requests that animations be performed on a table, aspects of the disclosure insert, delete, and\/or move rows and\/or columns of data. The cells, rows, and\/or columns are manipulated as separate ML elements.","Upon completion of the animation, attributes of the ML element have been updated to reflect completion of the animation. In some embodiments, the ML element after animation is the same ML element prior to animation, but with an updated state reflecting the post-animation attributes and values. The animation engine  may also provide the computing device , application program , or other calling code  an indication that animation of the altered ML element has completed. In embodiments such as described below with reference to , the ML element may be modified after animation in preparation for consumption by the requesting application program . For example, the defined animation preparation attribute values may be removed from the ML element during and\/or after animation.","In some embodiments, the computer-executable components illustrated in  execute to implement one or more of the operations illustrated in . For example, the interface component , when executed by the processor , causes the processor  to receive, from the application program , one or more requests to perform a plurality of animations on at least one ML element. In some embodiments, the interface component  increments a reference counter for each of the received requests that operate on the same ML element. Exemplary requests include one or more of the following: move at least one cell in a table, insert at least one row in a table, remove at least one row from a table, re-order cells within a table, fade-in at least one cell in a table, and fade-out at least one cell in a table","The decomposition component , when executed by the processor , causes the processor  to alter the ML element to include one or more animation preparation attribute values based at least on the animations and the current attribute values in the requests received by the interface component . The animation engine  performs the plurality of animations on the altered ML element using at least the defined animation preparation attribute values to update attributes of the ML element. In this example, at least two of the animations complete at different times.","The re-composition component , when executed by the processor , causes the processor  to remove the animation preparation attribute values from the ML element upon completion of the last animation. For example, the re-composition component  decrements the reference counter upon completion of each of the requested animations. In this example, the re-composition component  removes the animation preparation attribute values only upon completion of the last-to-finish animation (e.g., when the reference counter has a value of zero).","The interface component  further provides, to the application program , the ML element with the animation preparation attributes removed by the re-composition component .","Referring next to , an exemplary flow chart illustrates the inclusion and removal of animation preparation attributes in the ML element. If an animation request is received from the application program  or other calling code  at , the ML element is altered to include one or more animation preparation attributes at . The animation preparation attributes and corresponding animation preparation attribute values are selected and\/or defined based at least on the requested animation. The computing device  or other device executing the animation engine  animates the ML element at  using at least the animation preparation attributes included in the altered ML element.","If animation of the ML element is complete at , attributes of the ML element are updated to reflect completion of the animation. The ML element is then altered to be recognizable by the requesting application program . For example, the animation preparation attributes and corresponding values added at  are removed from the ML element at . For example, different tags, recognizable by the requesting application program , may be defined to represent the state of the ML element post-animation. The altered ML element is provided to the requesting application program  at .","Numerous scenarios for preparing the ML elements for animation are supported by the disclosure. The following implementations and\/or structures supporting the scenarios are merely exemplary and not limiting in any way.","An exemplary implementation for re-positioning the ML element includes adding the animation preparation attribute \u201cposition\u201d and the value \u201cabsolute\u201d to the ML element. In this example, the absolute position does not depend on parent elements and is supported by multiple browsers. The \u201ctop\u201d attribute value is computed as the sum of the offsetTop attribute values of all offsetParents of the ML element. The \u201cleft\u201d attribute value is computed as the sum of the offsetLeft attribute values of all offsetParents of the ML element. For RightToLeft rendering, the right offset is used instead of the left offset. The right offset may be computed as (document.body.offsetWidth-element.offsetWidth-SPAnimationUtility.BasicAnimator.GetLeftOffset(element)). The height and width attribute values are set to the offsetHeight and offsetWidth, respectively, at least because the height and width are reset when absolute positioning removes an element from the DOM layout. The top and left attribute values are adjusted with the horizontal and vertical scroll offsets to account for the scroll position of an element on the screen when the browser window is scrolled.","An exemplary implementation for cloning the ML element includes cloning the original content into a copy placed exactly over the original content. Cloning may be accomplished by creating a new element with the same innerHTML tag as the original element. The new element is appended as a sibling of the original element. The original element is then made invisible (e.g., adjust the visibility or opacity). The content of the original element is replaced to the new content at the same location by using, for example, the positioning API described herein. The animation engine  runs two simultaneous animations to animate the original content out and to animate the new element in. Upon completion of the animation, the cloned element is removed from the DOM.","An exemplary implementation for animating a bounding box includes laying out the content element outside a viewport to determine the height and width of the content element. The animation engine  runs an animation to grow the bounding box to the determined height and width. The content element is re-positioned and faded in.","An exemplary implementation for animating tables includes preparing the table for animation by positioning each table cell as absolute (e.g., each cell is treated as a separate ML element so that each cell can be moved freely). In some embodiments, the margins, paddings, and borders around the cells are considered during positioning. In addition, aspects of the disclosure support different number of cells per row. The overall height and width on the table element is set to keep the page layout around the table undisturbed by the absolute positioning of table cells.","A wrapper API is used to manage row insertion, deletion, and movement. For example, input arguments to the wrapper API identify the rows or columns to insert, delete, and\/or move in the table. The wrapper API runs these operations simultaneously to manage the animation. The wrapper API may also reset the animation preparation styles when the animations complete. To insert a row into the table, the table cells in the row are marked with an opacity value of zero, positioned within the table, and faded in. To delete a row from the table, the cells in the row are faded out each of the ML elements in the row. To move a row in a table, the distance of travel is computed as, for example, the product of the quantity of rows to move and the height of a row. The ML elements representing the cells in the row are moved by that distance.","When the overall height of the table changes after a table animation operation, the table footer is adjusted accordingly. For example, the change of height on the table element is animated for a smooth effect.","At least a portion of the functionality of the various elements in , , and  may be performed by other elements in , , or , or an entity (e.g., processor, web service, server, application program, computing device, etc.) not shown in , , or .","In some embodiments, the operations illustrated in  and  may be implemented as software instructions encoded on a computer readable medium, in hardware programmed or designed to perform the operations, or both. For example, aspects of the disclosure may be implemented as a system on a chip.","While no personally identifiable information is tracked by aspects of the disclosure, embodiments have been described with reference to data monitored and\/or collected from users . In such embodiments, notice is provided to the users  of the collection of the data (e.g., via a dialog box or preference setting) and users  are given the opportunity to give or deny consent for the monitoring and\/or collection. The consent may take the form of opt-in consent or opt-out consent.","Exemplary Operating Environment","Exemplary computer readable media include flash memory drives, digital versatile discs (DVDs), compact discs (CDs), floppy disks, and tape cassettes. By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media exclude propagated data signals. In some embodiments, computer storage media are implemented in hardware. Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.","Although described in connection with an exemplary computing system environment, embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with aspects of the invention include, but are not limited to, mobile computing devices, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, gaming consoles, microprocessor-based systems, set top boxes, programmable consumer electronics, mobile telephones, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","Embodiments of the invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. The computer-executable instructions may be organized into one or more computer-executable components or modules. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may be implemented with any number and organization of such components or modules. For example, aspects of the invention are not limited to the specific computer-executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer-executable instructions or components having more or less functionality than illustrated and described herein.","Aspects of the invention transform a general-purpose computer into a special-purpose computing device when configured to execute the instructions described herein.","The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for preparing the ML element for animation, and exemplary means for cross-browser animation of legacy HTML elements.","The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential, unless otherwise specified. That is, the operations may be performed in any order, unless otherwise specified, and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example, it is contemplated that executing or performing a particular operation before, contemporaneously with, or after another operation is within the scope of aspects of the invention.","When introducing elements of aspects of the invention or the embodiments thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","Having described aspects of the invention in detail, it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions, products, and methods without departing from the scope of aspects of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","Exemplary APIs such as API  for implementing aspects of the disclosure are next described. In some embodiments, APIs for re-positioning the ML element include the following.","public static void PositionAbsolute(DOMElement element)","The above exemplary API lifts the ML element out of the DOM layout in preparation for a \u201cmove\u201d animation, sets the position attribute to \u201cabsolute\u201d, and adjusts the left and top attribute values to match the exact initial position.","public static void PositionRelative(DOMElement element)","The above exemplary API lifts the ML element out of the DOM layout in preparation for a \u201cmove\u201d animation, sets the position attribute to \u201crelative\u201d, and adjusts the left and top attributes to match the exact initial position.",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public static void PositionAbsoluteExact(DOMElement element,"},{"entry":"int topValue, int leftValue, int heightValue, int widthValue)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0070","num":"0069"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public static void PositionRelativeExact(DOMElement element,"},{"entry":"int topValue, int leftValue, int heightValue, int widthValue)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"public static void ResetPosition(DOMElement element)","The above exemplary API resets the position styles, such as upon completion of the animation.","An API for creating a clone of the ML element for simultaneous animation with the ML element is shown below.",{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public static DOMElement CloneElement(DOMElement element,"},{"entry":"bool fMakeTransparent, bool fInsertBefore)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"An API for animating a bounding box is shown below.",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public static void ResizeContainerAndFillContent(DOMElement"},{"entry":"newElement, DOMElement parentNode, Callback finishFunc,"},{"entry":"bool fAddToEnd)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"The exemplary APIs shown below for manipulating tables may be grouped into a class such as public class TableAnimator.","public TableAnimator(DOMElement table)","The above exemplary API creates and initializes a TableAnimator object.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003public void AnimateRows(RowMoveInfo[ ] toMove, int[ ] toDelete,"},{"entry":"RowAddInfo[ ] toAdd, DOMElement footer, Callback finishFunc)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"public void DeleteRows(int[ ] toDelete, Callback finishFunc)","The above exemplary API performs a row delete animation in a table. The toDelete argument identifies an array of row indices to delete (e.g., [deleteRowIndex]). The rows are faded out. The finishFunc argument identifies a callback function to run when animation completes.","public void InsertRows(RowAddInfo[ ] toAdd, Callback finishFunc)","The above exemplary API performs a row insertion animation in a table. The toAdd argument identifies an array of row indices to fade in (e.g., [row, newRowIndex]). The finishFunc argument identifies a callback function to run when animation completes.","public void MoveRows(RowMoveInfo[ ] toMove, Callback finishFunc)","The above exemplary API performs a row move animation in a table. The toMove argument identifies an array of rows to move (e.g., [currentRowIndex, newRowIndex]). The finishFunc argument identifies a callback function to run when animation completes."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
