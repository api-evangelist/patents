---
title: Obtaining a graphical user interface to access a remote computing system
abstract: Embodiments of the invention are generally directed to a system and method for a remote Graphical User Interface (GUI). In an embodiment, a local computing system requests access to a remote computing system. In response, the remote computing system provides connection information to identify an appropriate GUI for accessing the remote computing system. The local computing system forwards the connection information to another local computing system to obtain the identified GUI. In one embodiment, the local computing system automatically downloads the GUI and accesses the remote computing system with the GUI.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07703024&OS=07703024&RS=07703024
owner: SAP AG
number: 07703024
owner_city: Walldorf
owner_country: DE
publication_date: 20040831
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["Embodiments of the invention generally relate to the field of data processing systems and, more particularly, to a system and method for a remote graphical user interface.","Many businesses rely on computer networks to provide a number of core functions. For example, businesses provide access to their products and services through applications that are delivered over computer networks such as the Internet. Also, businesses rely on computer networks to electronically link facilities that are physically separated. The applications that run on these computer networks typically have a multi-tiered architecture. In those cases where the applications are delivered over the Internet they are commonly referred to as Web-based applications.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1","b":["100","100","110","120","130","110","112","116","112","114","112","140","142","114","144","140"]},"Presentation logic  generates a Graphical User Interface (GUI) using, for example, a markup language such as the Hyper Text Markup Language (HTML). Business logic  represents the core of the application, for example, the rules governing the underlying business process (or other functionality) provided by the application. The Java 2 Enterprise Edition Specification v1.3, published on Jul. 27, 2001 (the J2EE specification) defines an increasingly popular architecture for application server .","Client  is a remotely located computing device that accesses application server  using a standalone user interface . The term \u201cstandalone\u201d refers to a user interface that accesses application server  independently of a Web browser. Standalone user interfaces are often used to provide a content rich environment to, for example, remotely administer application server . Typically, user interface  and\/or application server  change over time. For example, various updates, service packages, application releases, etc. create distinct versions of user interface  and application server . Experience has shown that some versions of user interface  are not compatible some versions of application server . The risk that user interface  is not compatible with application server  is increased because both client-side and server-side software frequently changes over time.","One possible solution is to download the appropriate client (e.g., client ) from computing system  as needed. This solution is typically inadequate, however, because of the length of time required to download the appropriate client. For example if client  is large and connection  is slow then the process of acquiring client  from computing system  is prohibitively slow.","Embodiments of the invention are generally directed to a system and method for a remote Graphical User Interface (GUI). In an embodiment, a local computing system requests access to a remote computing system. In response, the remote computing system provides connection information to identify an appropriate GUI for accessing the remote computing system. The local computing system forwards the connection information to another local computing system to obtain the identified GUI. In one embodiment, the local computing system automatically downloads the GUI from the other local computing system and accesses the remote computing system with the GUI.","Embodiments of the invention are generally directed to a system and method for a remote Graphical User Interface (GUI). In an embodiment, a local computing system requests access to a remote computing system. In response, the remote computing system provides connection information to identify an appropriate GUI for accessing the remote computing system. The local computing system forwards the connection information to another local computing system to obtain the identified GUI. In one embodiment, the local computing system automatically downloads the GUI and accesses the remote computing system with the GUI.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2","b":["200","200","210","220","230","210","210","200","240","210","220","210","220","240"]},"In an embodiment, remote computing system  is part of a multi-tiered network. The multi-tiered network may be implemented using a variety of different application technologies at each of the layers of the multi-tier architecture, including those based on the Java 2 Enterprise Edition\u2122 (\u201cJ2EE\u201d) specification (e.g., the Websphere platform developed by IBM Corporation), the Microsoft .NET platform, and\/or the Advanced Business Application Programming (\u201cABAP\u201d) platform developed by SAP AG. The J2EE specification refers to any of the J2EE specifications including, for example, the Java 2 Enterprise Edition Specification v1.3, published on Jul. 27, 2001.","Computing system  includes HTTP-server  and backend . The term \u201cHTTP-server\u201d refers to software that services HTTP messages. HTTP messages are messages that are formulated in accordance with one of the HTTP protocols, such as, the protocol described in Request For Comments (RFC)  entitled, \u201cHyperText Transport Protocol\u2014HTTP\/1.1,\u201d June 1999 (hereinafter, the HTTP protocol). In an alternative embodiment, HTTP-server  may be implemented to service messages formulated according to a different protocol such as HTTPS and\/or SOAP.","In an embodiment, backend  is the backend of an enterprise computing system. The term \u201cbackend\u201d refers to the portion of a multi-tiered network that processes and stores input from the front-end. In one embodiment, backend  includes an application server (e.g., application server , shown in ) and a database server (e.g., database server , shown in ). As is further described below, standalone clients may access backend  to perform various administrative functions.","Client cache server  provides a repository for one or more clients (e.g., client , shown in ) and\/or one or more versions of a client to access remote computing systems (e.g., remote computing system ). In an embodiment, client cache server  is an HTTP-server. As is further described below, in an embodiment, the storage of and access to clients on server  is structured, at least in part, according to the Java\u2122 Network Launching Protocol (JNLP). The JNLP refers to any of the Java Network Launching Protocols including the one described in Java Specification Request (JSR)\u201456 entitled, \u201cJava Network Launching Protocol & Application Programming Interface Specification, Version 1.0.1.\u201d In such an embodiment, the term \u201cJNLP-server\u201d may be used to describe server . In an embodiment, client cache server  is connected to local computing system  over a fast connection such as a Local Area Network (LAN). Thus, from the perspective of local computing system , client cache server  is another local computing system.","In an embodiment, browser  queries HTTP-server  to determine the proper version of a client (e.g., GUI ) to access backend  (as shown by reference number ). In response, HTTP-server  responds with connection information to identify the appropriate version of the client to access backend . Browser  forwards the connection information to client cache server  as shown by . In an embodiment, client cache server  downloads GUI  over a fast connection (e.g., a LAN) as shown by .","GUI  then connects to backend  over connection . In an embodiment, connection  is a content rich connection. The term \u201ccontent rich\u201d refers to a connection that allows GUI  to exchange integers, arrays, and more complex objects (e.g., program code). In one embodiment, connection  supports Remote Method Invocation (RMI). The term \u201cRMI\u201d refers to a remote procedure call mechanism for distributed objects. In an alternative embodiment, connection  supports the Internet Inter-Object Request Broker Protocol (IIOP). The IIOP refers to any of the IIOP protocols such as RMI over IIOP, IIOP.Net, and the like.","In one embodiment, the appropriate GUI (e.g., GUI ) is automatically obtained and opened in response to selecting a hyperlink displayed in browser . In such an embodiment, Java\u2122 Web Start may be used, for example, to automatically deploy and launch GUI . The term \u201cJava\u2122 Web Start\u201d refers to launching applications on a client system from resources hosted across a network using the JNLP.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3","b":["312","310","320","310","322","322","310","340","330","340","320","340","320","312","350"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 4","FIG. 2","FIG. 2","FIG. 2"],"b":["402","404","406","402","222","224","404","230","406","210"]},"In an embodiment, browser  requests access to the server on which server application  is running as shown by . In one embodiment, the request for access is a request to launch an appropriate GUI to interact with the server. HTTP message  illustrates one embodiment of a request to open the GUI. HTTP message  includes Uniform Resource Locator (URL)  to specify the location of a client cache server (e.g., client cache server , shown in ).","Server application  receives HTTP message  and determines the proper GUI (and\/or the proper version of the GUI) for accessing the server at . In an embodiment, server application  dynamically overwrites part of HTTP message  with an identifier  to specify the proper GUI and\/or the proper version of the GUI for accessing the server. Server application  responds to browser  with HTTP message  as shown by .","In an embodiment, browser  launches Java\u2122 Web Start after receiving HTTP message  and forwards identifier  to code base  as shown by . Code base  dynamically generates a JNLP file based, at least in part, on identifier  (and\/or other elements of HTTP message  such as parameter ) as shown by . The JNLP file describes the elements of the GUI (e.g., the Java\u2122 Archive files (JARs), libraries, properties, etc.) so that a local computing system can download those elements from code base . An example of a JNLP file is further discussed below with reference to . Code base  provides the JNLP file to browser  as shown by .","After receiving the JNLP file, the local computing system launches JNLP client  as shown by . The term \u201cJNLP client\u201d refers to client-side software that parses a JNLP file, downloads an application (e.g., a GUI) based on the parsed JNLP file, and launches the downloaded application. JNLP client  downloads the GUI specified by the JNLP file at . In an embodiment, the GUI is automatically launched after it is downloaded. In one embodiment, the interaction described in  occurs automatically once a hyperlink is selected in browser . Thus, in one embodiment, the user's experience is simply that the appropriate GUI for interacting with a server is opened when a hyperlink is selected in a browser.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 5","FIG. 3"],"b":["500","340","500","500","500","510","520","530","540","550"]},"JNLP element  is the root element of JNLP file  and may include one or more attributes that provide information that are specific to JNLP file . For example, spec attribute  specifies the version(s) of the JNLP specification that apply to JNLP file . The value \u201c1+\u201d indicates that JNLP file  works with a JNLP client (e.g., JNLP client ) that supports version 1.0 of the JNLP specification or higher.","Information element  provides meta-information about the associated client (e.g., meta-information about GUI , shown in ). In one embodiment, the information contained in information element  is displayed to a user while the associated client is downloaded. The illustrated embodiment includes title element , vendor element , and description element .","Security element  is used to request a restricted environment for a JNLP client (e.g., JNLP client , shown in ). The term \u201crestricted environment\u201d refers to an environment that prevents applications from intentionally or unintentionally harming a local host. The JNLP protocol specifies restrictions to enforce in a restricted environment.","Resources element  specifies resources that are part of the associated application. Examples of types of resources include Java\u2122 class files, native libraries, and system properties. The illustrated embodiment specifies the version of the Java Runtime Environment (JRE) that supports the associated application at . In addition, two JAR files that are part of the application's classpath are specified by  and .","Application description element  provides information used to launch the application. The application is launched using the static public void main (String[ ] argv) method on the main class of a resource specified in resource element  (e.g., JARs  and ). The argv argument is constructed from parameter .","Turning now to , the particular methods associated with embodiments of the invention are described in terms of computer software and hardware with reference to a flowchart. The methods to be performed by a computing device (e.g., an application server) may constitute state machines or computer programs made up of computer-executable instructions. The computer-executable instructions may be written in a computer programming language or may be embodied in firmware logic. If written in a programming language conforming to a recognized standard, such instructions can be executed on a variety of hardware platforms and for interface to a variety of operating systems. In addition, embodiments of the invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement embodiments of the invention as described herein. Furthermore, it is common in the art to speak of software, in one form or another (e.g., program, procedure, process, application, etc.), as taking an action or causing a result. Such expressions are merely a shorthand way of saying that execution of the software by a computing device causes the device to perform an action or produce a result.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 6","FIG. 2","FIG. 2"],"b":["610","210","220"]},"In one embodiment, a browser running on the local computing system receives input indicating that a displayed hyperlink is selected. The term \u201creceiving input\u201d refers to receiving an indication from, for example, a pointing device, keyboard, touch screen, etc. that indicates the hyperlink is selected. The browser sends an HTTP message to the remote computing system to request that the standalone GUI be opened. In one embodiment, the HTTP message contains a Uniform Resource Indicator (URI) that specifies the location of a client cache server (e.g., client cache server , shown in ).","Referring to process block , the local computing system receives connection information from the remote computing system. The term \u201cconnection information\u201d refers to information used to obtain the GUI. Examples of connection information include (and are not limited to) a URL specifying the location of the GUI, a version indicator to specify an appropriate version of the GUI, a parameter used to call the GUI, and the like. In an embodiment, the remote computing system sends the local computing system the connection information in an HTTP message (e.g., HTTP message , shown in ). The HTTP message may include a URL that specifies the location of the GUI, a version indicator to specify the proper version of the GUI (e.g., version indicator , shown in ), and\/or a parameter with which to launch the GUI (e.g., parameter , shown in ). In one embodiment, a server application (e.g., server application , shown in ) automatically sends an HTTP response message containing the connection information in response to receiving an HTTP request message to open the GUI from the local computing system.","Referring to process block , the local computing system forwards the received connection information to another local computing system to obtain the GUI from the other local computing system. In an embodiment, the other local computing system is a client cache server (e.g., client cache server , shown in ) that is connected to the local computing system via a LAN (or other fast connection). In such an embodiment, forwarding the received connection information includes sending the HTTP message that was received from the remote computing system to the client cache server. In an embodiment, the client cache server provides a JNLP file (e.g., JNLP file , shown in ) to the local computing system in response to receiving the forwarded connection information.","Referring to process block , the local computing system downloads the GUI from, for example, the client cache server. In one embodiment, Java\u2122 Web Start is used to store, update, and open, the GUI. In such an embodiment, the local computing system downloads the GUI based, at least in part, on the JNLP file received from the client cache server. For example, the local computing system identifies the resources that form the GUI (e.g., as specified in resources element , shown in ) and downloads the identified resources. In one embodiment, the local computing system automatically downloads the GUI in response to receiving the JNLP file.","Referring to process block , the local computing system accesses the remote computing system with the GUI. The term \u201caccessing\u201d the remote computing system refers to, for example, invoking a method of an object on the remote computing system, exchanging information with a process running on the remote computing system, and the like. In one embodiment, the GUI is automatically started (e.g., using Java\u2122 Web Start) after the GUI is downloaded. Similarly, in an embodiment, the GUI automatically connects with the remote system after it starts.","In one embodiment, the process described in  proceeds automatically in response to a user selecting a hyperlink displayed in browser. From the user's perspective, an appropriate GUI opens and connects with the remote computing system in response to selecting the hyperlink. In an alternative embodiment, the user experience may include providing additional input and\/or different input.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":["700","700","710","720","730","740","760","710","720"]},"Remote GUI connection logic  enables node  to identify, download, and launch an appropriate standalone GUI to access a remote computing system. Remote GUI connection logic  may be executable content, control logic (e.g., ASIC, PLD, FPGA, etc.), firmware, or some combination thereof, in an embodiment of the invention. In embodiments of the invention in which remote GUI connection logic  is executable content, it may be stored in memory  and executed by processor(s) .","Memory  may encompass a wide variety of memory devices including read-only memory (ROM), erasable programmable read-only memory (EPROM), electrically erasable programmable read-only memory (EEPROM), random access memory (RAM), non-volatile random access memory (NVRAM), cache memory, flash memory, and other memory devices. Memory  may also include one or more hard disks, floppy disks, ZIP disks, compact disks (e.g., CD-ROM), digital versatile\/video disks (DVD), magnetic random access memory (MRAM) devices, and other system-readable media that store instructions and\/or data. Memory  may store program modules such as routines, programs, objects, images, data structures, program data, and other program modules that perform particular tasks or implement particular abstract data types that facilitate system use.","One or more I\/O devices  may include a hard disk drive interface, a magnetic disk drive interface, an optical drive interface, a parallel port, serial controller or super I\/O controller, serial port, universal serial bus (USB) port, a display device interface (e.g., video adapter), a network interface card (NIC), a sound card, modem, and the like. System interconnection  permits communication between the various elements of node . System interconnection  may include a wide variety of signal lines including one or more of a memory bus, peripheral bus, local bus, host bus, bridge, optical, electrical, acoustical, and other propagated signal lines.","Elements of embodiments of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, flash memory, optical disks, CD-ROMs, DVD ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, or other type of machine-readable media suitable for storing electronic instructions.","It should be appreciated that reference throughout this specification to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Therefore, it is emphasized and should be appreciated that two or more references to \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can alternative embodiment\u201d in various portions of this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures or characteristics may be combined as suitable in one or more embodiments of the invention.","Similarly, it should be appreciated that in the foregoing description of embodiments of the invention, various features are sometimes grouped together in a single embodiment, figure, or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure, however, is not to be interpreted as reflecting an intention that the claimed subject matter requires more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus, the claims following the detailed description are hereby expressly incorporated into this detailed description, with each claim standing on its own as a separate embodiment of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
