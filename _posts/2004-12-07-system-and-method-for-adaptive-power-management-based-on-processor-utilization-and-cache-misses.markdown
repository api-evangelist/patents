---
title: System and method for adaptive power management based on processor utilization and cache misses
abstract: A processing system may include a performance monitoring unit (PMU), a machine accessible medium, and a processor responsive to the PMU and the machine accessible medium. Instructions encoded in the machine accessible medium, when executed by the processor, may determine whether performance details for the processing system should be collected, based at least in part on a predetermined monitoring policy for the processing system. The instructions may generate performance data for the processing system, based at least in part on data obtained from the PMU. The instructions may determine whether the processing system should be reconfigured, based at least in part on the performance data and a power policy profile for the processing system. The instructions may automatically adjust power consumption of the processing system by using the PMU to reconfigure the processing system. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814485&OS=07814485&RS=07814485
owner: Intel Corporation
number: 07814485
owner_city: Santa Clara
owner_country: US
publication_date: 20041207
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to the field of data processing, and more particularly to power management in a processing system.","Many purchasers, users, and manufacturers of computer products are becoming increasingly sensitive to issues of power consumption. In some cases, consumers desire to lower their energy bills. Consumers may also prefer processing systems that generate less noise and heat, and there is typically a positive relationship between the amount of power consumed by a processing system and the amounts of noise and heat generated by that processing system. In addition, for a battery powered processing system such as a laptop computer, a cellular telephone (\u201ccell phone\u201d), a personal digital assistants (PDAs), etc., reducing the power consumption has the valuable effect of increasing the processing system's battery life (i.e., increasing the amount of time the processing system can be used before the battery must be recharged or replaced with a fresh battery).","A typical processing system includes many different components, such as a processor or microprocessor, a data storage device, and various input\/output (I\/O) devices. When a processing system is not off, each component within the processing system may consume some power. The terms \u201csystem power state\u201d and \u201cglobal power state\u201d both refer to the aggregate power consumption of all of the components in a processing system. The term \u201cdevice power state\u201d refers to the power consumption of a particular component. Typically, the processor is one of the most significant consumers of power in a processing system. The term \u201cprocessor power state\u201d refers specifically to the power consumption of a processor or microprocessor.","Available publications discuss various aspects of power management for processing systems. For instance, revision 2.0c of the Advanced Configuration and Power Interface Specification, dated Aug. 25, 2003, (hereinafter the \u201cACPI specification\u201d) may be obtained from the Internet. The ACPI specification describes various global power states and device power states that may be implemented in a processing system to support power management. Also, revision 1.0 of the Intel\u00ae PCA Power Management Software Design Guide, dated Sep. 2, 2002, (hereinafter the \u201cIntel Design Guide\u201d) may be obtained from the Internet. The Intel Design Guide contains information on how to obtain power savings for processing systems that employ an architecture known as Intel\u00ae Personal Internet Client Architecture (PCA).","One approach to managing performance is to use a static prediction of performance needs. For instance, a developer of an end user application may initially determine through experimentation that certain functions or tasks of the application typically require a certain amount of processing power. The result of the experimentation may be considered static profiling information. The developer may then design the application to modify the performance level of the processing system before executing those functions or tasks. Such a software application thus manages the system performance based on the predicted needs.","Also, an operating system (OS) may schedule and run software entities such as processes, threads, and tasks, and the scheduler in the OS may include an application programming interface (API) that provides loading information pertaining to those processes, threads, and tasks. Other software programs can call that API to retrieve the loading information. The loading information may include, for instance, the total number of active processes, threads, and tasks. The programs that may obtain loading information from the OS scheduler may include power management software or debugging software, for example.","Static techniques for managing power present many disadvantages. For example, in a typical case, development of the software application will be made more difficult, because expected processing power requirements must be predicted by the developer, based on the previous analysis done, and then handled within the application. Furthermore, the predicted processing power requirements may differ substantially from the actual processing power requirements. Also, when a developer is attempting to design an application to handle the expected processing power requirements, the tools available for that application for modifying the system's performance level may be limited to the tools provided by a particular OS. This same limitation may apply to programs that obtain loading information from an OS API.","Intel Corporation manufactures processors that incorporate technologies to support low power consumption and high performance processing for a wide range of services. In some cases, the technologies in those processors for supporting low power consumption and high performance processing may be referred to in general as Intel XScale\u00ae technology. Intel Corporation currently distributes one or more families of processors that feature Intel XScale\u00ae technology under various product designations or model numbers, such as the Intel\u00ae PXA26x and the Intel\u00ae PXA27x product families.","Example embodiments illustrated herein may include processing systems with processors that support Intel\u00ae PCA. Alternative embodiments of the present invention include processing systems with other kinds of processors, whether manufactured by Intel Corporation or other manufacturers. As described in greater detail below, the example embodiment includes a processor with dynamic voltage management (DVM) and dynamic frequency management (DFM) capabilities.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1"]},"The data processing environment of , for example, may include a processing system  that includes one or more processors or central processing units (CPUs)  communicatively coupled to various other components via one or more buses or other communication conduits or pathways. CPU  may be implemented as an integrated circuit. The components coupled to CPU  may include one or more volatile or non-volatile data storage devices, such as random access memory (RAM)  and read-only memory (ROM) . A memory bus  may serve to couple RAM  and ROM  with CPU . For purposes of this disclosure, the term \u201cROM\u201d may be used in general to refer to non-volatile memory devices such as erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM), flash ROM, flash memory, etc. CPU  may also be communicatively coupled to mass storage devices, such as one or more integrated drive electronics (IDE) drives, small computer systems interface (SCSI) drives, or other types of hard disk drives. Other types of mass storage devices and storage media that may be used by processing system  may include floppy disks, optical storage, tapes, memory sticks, digital video disks, biological storage, etc.","The components of processing system  that are communicatively coupled to processor  may also include one or more bus bridges. One or more of those bridges and associated buses may be used to connect processor , either directly or indirectly, with additional components, such as one or more storage devices, device controllers, input\/output (I\/O) ports, and I\/O devices . For example, the additional components may include a video controller, a SCSI controller, a network controller, a universal serial bus (USB) controller, a keyboard controller, etc. In some embodiments, such components may be implemented as embedded devices, using components such as programmable or non-programmable logic devices or arrays, application-specific integrated circuits (ASICs), embedded computers, smart cards, and the like.","In some embodiments, processor  may be implemented as an integrated circuit (IC) that includes a processing core , as well as control circuits or control logic for implementing additional components. Such components may include an on-chip bus bridge , on-chip RAM , on-chip ROM , a performance monitoring unit (PMU) , and a memory controller . The IC may also feature one or more internal bus bridges and\/or internal buses, such as system bus , for interconnecting various components within processor .","Processing system  may be controlled, at least in part, by input from conventional input devices, such as a keyboard or keypad, a pointing device, etc., and\/or by directives received from one or more remote data processing systems , interaction with a virtual reality (VR) environment, biometric feedback, or other input sources or signals. Processing system  may send output to components such as a display device, remote data processing system , etc. Communications with remote data processing system  may travel through any suitable communications medium. Processing systems may be interconnected by way of a physical and\/or logical network , such as a local area network (LAN), a wide area network (WAN), an intranet, the Internet, a public switched telephone network (PSTN), a cellular telephone network, etc. Communications involving network  may utilize various wired and\/or wireless short range or long range carriers and protocols, including radio frequency (RF), satellite, microwave, Institute of Electrical and Electronics Engineers (IEEE) 802.11, Bluetooth, optical, infrared, cable, laser, etc.","The invention may be described by reference to or in conjunction with associated data including instructions, functions, procedures, data structures, application programs, etc. which when accessed by a machine result in the machine performing tasks or defining abstract data types or low-level hardware contexts. The data may be referred to in general as software, and it may be stored in volatile and\/or non-volatile data storage.","For example, ROM  may include at least portions of a software application  for monitoring the performance of processing system  and managing the power consumption of processing system . Software application  may also be referred to as platform power manager (PPM) . In an example embodiment, PPM  may include instructions and other data for implementing the functionality described herein. As indicated by the dashed box in RAM , some or all of PPM  may be loaded into RAM , for example in connection with a boot process for processing system . In one embodiment, PPM  may then cause processing system to operate as described below. In alternative embodiments, processing system  may obtain PPM  from one or more other sources, such as ROM  and\/or remote data processing system , and some or all of PPM  may be loaded into RAM .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["60","60","70","120","20","100"]},"In the example embodiment, power management architecture  also includes an operating system (OS)  and user applications . Power management architecture  may also include one or more power management applications  which interact with PPM , as described in greater detail below. OS  may include code for various OS services  and a task scheduler . OS  may also include power management (PM) software  for implementing certain power management features. In the example embodiment, OS  also includes a sequence of instructions for causing processing core  to enter and exit idle mode. Such a sequence of instructions may be referred to as original equipment manufacturer (OEM) idle code , idle execution path , or simply idle path .","In the example embodiment, task scheduler  keeps track of which processes or tasks are currently running, and OS  executes idle path  whenever no processes or tasks are ready to run. In the example embodiment, OS  uses a variable duration idle, which exits in response to an event such as an interrupt. In alternative embodiments, the OS can use a fixed duration idle. The present invention may also be used in systems that do not use a thread or other dispatchable entity to implement the idle path.","In the example embodiment, PPM  includes various modules for monitoring system performance, modifying system power consumption, and performing related functions. As described in greater detail below, those modules may include a power policy manager , a user settings interface , an idle profiler , a performance profiler , and an OS mapping module . Power policy manager  may also be referred to as policy manager . The different modules may communicate with each other through any suitable mechanisms, such as application programming interfaces (APIs) for example.","In the example embodiment, device drivers  register with PPM  through the device driver APIs. Consequently, device drivers  may receive notification from PPM  on all of the power management events, such as state transitions, frequency changes, and voltage changes. If a particular operating state is supported by OS , then PPM  may use the OS interface to notify device drivers . Otherwise, PPM  may use an independent interface between device drivers  and PPM . When a device driver receives a callback for a power management state transition or event, the device driver may transition into its new state and prepare the device for the next state. As an example, when a keypad driver transitions into a standby state, the keypad driver may configure the low-level registers so that the keypad driver can wakeup from standby state if the user presses the key on the keypad.","Device drivers  may also include logic for requesting a state change from PPM . For example, a battery driver may communicate with PPM  to request a reduced operating point for processing system , to reduce power consumption in response to determining that the charge level of the system's battery has fallen below a predetermined threshold.","PPM  may use its own services or services from OS  to dynamically scale power and performance. For example, if OS  supports two different performance modes identified as \u201crun\u201d and \u201cidle,\u201d PPM  may use services of OS  to enter those performance modes. In addition, as described in greater detail below, PPM  may recognize or create additional performance modes, and PPM  may use its own services (e.g., services for communicating with PMU ) to enter those modes.","OS mapping module  includes resources for interfacing with one or more individual OSs. OS mapping module  thus provides a layer of abstraction between policy manager  and OS . Consequently, PPM  may be used with a different OS by simply replacing OS mapping module , modifying OS mapping module , or using different resources of OS mapping module .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["500","500","510","540","500","550","510","540","552","554"]},"Communications subsystem  may include various software components, such as a communications power management module (CPMM) , various protocol stack layers, and an MSL interface. CPMM  may handle power management for communications subsystem , and CPMM  may maintain its own state machine. CPMM  may interface to the different layers of the protocol stack. In addition, CPMM may support different power modes, such as a run duty cycle and a low power duty cycle, with different states for functions such as a global positioning system (GPS) and\/or communications using technology such as a Global System for Mobile Communications (GSM) protocol.","Applications subsystem  may include software such as PPM  and OS power manager  for managing power in processing system . Applications subsystem  may also include a hardware abstraction layer (HAL) and various communications device drivers, such as power management IC (PMIC), audio, universal serial bus (USB), and MSL device drivers. The communications device drivers may operate as clients of PPM  and\/or OS power manager , and those device drivers may receive notifications from PPM  and\/or OS power manager  on appropriate state transitions. For example, when the OS goes into the standby mode, OS power manager  may notify one or more of the communications drivers about this state change. In response, communications subsystem  may enter a low power standby state, and, in conjunction with entering that state, may prepare itself for waking up applications subsystem , in case communications subsystem  subsequently transitions into a new state that requires processing on applications subsystem . Communications between applications subsystem  and communications subsystem  may transpire as signaling events over a communications path such as MSL , general purpose I\/O (GPIO) pins, or any other suitable path.","For dynamic performance and power scaling such as that described below, PPM  may also notify communications subsystem  about frequency and\/or voltage changes via a communications device driver such as the MSL driver. CPMM  may then notify the communications software accordingly, thereby increasing the effectiveness of the power management approach, relative to a system that does not notify its communications subsystem regarding one or more types of power or performance changes in the applications subsystem. Thus, dynamic, system-level power management may be achieved, rather than simply application-level or communications-level power management.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4","b":["20","20","20","70","300","70","82","80","28","29","82","70","74","80","76","82","20"]},"Each of the configuration settings may be provided with PPM  as default value, or may be supplied or modified by a user such as a vendor, a system administrator, an end user, etc. Thus, as described below, PPM  may receive a user specified policy setting for processing system , and may update power policy profile , based at least in part on that policy setting. In one embodiment, some or all of the values in power policy profile  are developed through experimentation for a particular hardware configuration, OS, and typical workload. Experimentation may be used to develop suitable values for other hardware configurations, OSs, and workloads.","As depicted at block , PPM  may then configure idle profiler  with processor utilization thresholds for idle profiler  to use in determining whether or not to report processor utilization to policy manager . These processor utilization thresholds may also be referred to as reporting thresholds. In one embodiment, reporting thresholds may be set at 15%, 45%, and 80% processor utilization, to establish the following steps or zones between the thresholds: 0-15% CPU utilization; 15-45% CPU utilization; 45-80% CPU utilization; and 80-100% CPU utilization. Accordingly, whenever processor utilization moves from one step to another, idle profiler  may report the new level of processor utilization to policy manager . Other thresholds may be used in alternative embodiments. For instance, a single threshold may be set at 80% CPU utilization.","PPM  may then complete the initialization of idle profiler  by launching idle profiler . The process of launching idle profiler  may include the operation of associating a callback routine with idle path  of OS . A hardware abstraction layer (HAL) or any other suitable technique may be used to associate idle profiler  with idle execution path . For instance, PPM  may insert the callback routine into an interrupt service routine (ISR) associated with entering and\/or exiting the processor idle mode. The callback routine may then collect idle time data whenever OS  enters and exits idle execution path , as described below. Since the callback routine is intimately involved in collecting the idle statistics, the callback routine may be considered part of idle profiler . Idle profiler  may also be referred to as an idle thread profiler .","Idle profiler  may set a sampling period, for example based on a default or user defined setting. Idle profiler  may then collect idle task data by aggregating the idle time data collected by the callback routine over that sampling period. The sampling period may include one or more time periods spent by the processor in the idle power mode. That is, idle execution path  may be executed more than once during a single sampling period.","After expiration of each sampling period, idle profiler  may automatically calculate idle statistics by calculating processor utilization for the sampling period, based on the aggregate idle time data. In the example embodiment, idle profiler  calculates the idle statistics as close to the end of the window as practical, to ensure that timely statistics are generated. For instance, idle profiler  may use code installed in an ISR to calculate the idle statistics. Different approaches may be used for different OSs.","Idle profiler  may then automatically determine whether processor utilization has crossed a reporting threshold. If processor utilization has crossed a reporting threshold, idle profiler  may automatically report the current processor utilization to policy manager . For instance, processor utilization may have been 40% for one sampling period and then 55% for the next. Since a change from 40% to 55% crosses the 45% threshold, idle profiler  may report the current processor utilization of 55 to policy manager .","However, if processor utilization has not crossed any reporting thresholds, idle profiler  may automatically adjust the size of the sampling period. For purposes of this disclosure, the length of the sampling period may also be referred to as the window size.","For example, the callback routine may implement logic such as that summarized in the following pseudo-code:\n\n","Idle profiler  may implement logic for calculating processor utilization, based on the collected idle statistics, upon expiration of the sampling period. The following pseudo-code summarizes one possible routine for implementing such logic:\n\n","Thus, PPM  may automatically adjust the sampling period, based at least in part on a comparison of a current performance characteristic and a previous performance characteristic. For instance, idle profiler  may determine whether processor utilization during a current sampling period substantially matches processor utilization for a preceding sampling period, and may automatically increase the sampling period in response to a determination that processor utilization during the current sampling period substantially matches processor utilization for the preceding sampling period. Idle profiler  may determine that the current metric for processor utilization does not substantially match the previous metric if the current and previous metrics fall on opposite sides of a predetermined reporting threshold.","In one embodiment, the initial window size may be 10 microseconds (ms), and the maximum window size may be 640 ms. Different initial and maximum sizes may be used in alternative embodiment. In other embodiments, a static window size may be used. The static window size may be a default window size set, or it may be specified by a user. For example, a constant sampling period of 100 ms may be used.",{"@attributes":{"id":"p-0049","num":"0064"},"figref":"FIG. 5","b":["70","74","74","210","74"]},"For the initial call, this determination may be negative, due to a lack of processor utilization data for a previous sampling period. If the determination is negative, idle profiler  may set the sampling period to an initial size, as indicated at block , and the process may then end.","If the determination at block  is positive, idle profiler  may determine whether the sampling period can be doubled without exceeding the predetermined maximum window size, as depicted at block . If doubling the window size would exceed the maximum size, the sampling window may be set to the maximum size, as indicated at block . Otherwise, the sampling period may be doubled, as depicted at block .","Referring again to , as shown at block , PPM  may also initialize performance profiler  with one or more settings or thresholds from power policy profile . For example, PPM  may provide performance profiler  with a table of performance parameters for different aspects of system performance (e.g., processor utilization statistics and memory utilization statistics) and corresponding system state values, such as idle, memory bound, processor bound, or both processor and memory bound. Such performance parameters may also be referred to as performance thresholds. Table 1 below illustrates some example performance thresholds.",{"@attributes":{"id":"p-0053","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Performance Profiler Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CPU",{},{},{},{}]},{"entry":["Utili-","Memory","State of",{},"Example"]},{"entry":["zation","Statistic","System","Policy","Workloads"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["IPC < 0.5","% Data Cache","Idle","Lower Core Freq.","System"]},{"entry":[{},"Misses < 10%",{},"and System Bus","Idle"]},{"entry":[{},{},{},"(PX) Freq."]},{"entry":["IPC < 0.5","% Data Cache","Memory","Increase PX","Memcpy"]},{"entry":[{},"Misses > 10%","Bound","Freq. and"]},{"entry":[{},{},{},"Memory (SDClk)"]},{"entry":[{},{},{},"Freq."]},{"entry":["IPC > 0.5","% Data Cache","CPU Bound","Increase Core","Dhrystone"]},{"entry":[{},"Misses < 10%",{},"Freq."]},{"entry":["IPC > 0.5","% Data Cache","Memory &","Increase Core","Video"]},{"entry":[{},"Misses > 10%","CPU Bound","Freq., PX Freq.,","Appli-"]},{"entry":[{},{},{},"and SDClk Freq.","cation"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"As described in greater detail below, the third and fourth columns of Table 1 may represent data in a power policy profile for managing the power consumption of processing system . In one embodiment, the term PX frequency may refer to the frequency of a peripheral bus of a processor with Intel XScale\u00ae technology, and the SDClk frequency may refer to the frequency of a single data rate dynamic RAM (DRAM) clock. As described below, other embodiments may use other types of policy profiles, such as policy profiles to adjust other types of components in other types of processors, for instance.","In one embodiment, PPM  loads performance thresholds and corresponding system state values such as those depicted in the first three columns of Table 1 into performance profiler . Performance profiler  may use that data to determine the system state to report to policy manager  when appropriate, as described in greater detail below.","Once performance profiler  has received configuration settings from PPM , performance profiler  may configure PMU  to read and count particular types of events. In the example embodiment, PMU  supports collection of twelve different core metrics and various other metrics for events such as liquid crystal display (LCD) activity and direct memory access (DMA) activity. Performance profiler  may configure PMU  to collect any desired subset of those metrics. For example, in one embodiment, performance profiler  configures PMU  to collect at least the following four metrics: instructions executed (PMU event number 0x7), data cache (DCache) misses (PMU event number 0xB), DCache accesses (PMU event number 0xA), and data dependency stalls (0x8).","At block  of , after performance profiler  has been initialized, policy manager  may determine whether it has received user specified power management settings from user settings interface . For instance, a user may specify new values to be added to power policy profile , or modifications to existing values for any suitable field in power policy profile , such as an initial sampling period, any of the various threshold values, system states, etc. If a user setting has been received, PPM  may update power policy profile , as indicated at block .","As depicted at block , policy manager  may then determine whether it has received a summary load report from idle profiler . In the example embodiment, a summary load report may be a communication from idle profiler  reporting that processor utilization has crossed a reporting threshold, as indicated above. The summary load report may specify the current processor utilization percentage, as measured by idle profiler .","If no report has been received, policy manager  may discontinue processing until such a report is received or new settings are received from a user, as indicated by the arrow returning to block . However, if a summary load report has been received, PPM  may, in response, automatically determine whether additional performance data should be collected, as depicted at block . That determination may be based at least in part on a predetermined monitoring policy for the processing system. For instance, the monitoring policy may specify one or more monitoring thresholds, and policy manager  may determine whether the reported processor utilization crosses one of the monitoring thresholds. For instance, the monitoring policy may define a monitoring threshold at 80% processor utilization, and policy manager  may collect additional metrics only if the reported processor utilization has reached or exceeded that threshold.","If no monitoring threshold has been crossed, policy manager  may discontinue processing until another load report is received from idle profiler  or new policy settings are received from a user, as indicated by the arrow returning to block . However, if a monitoring threshold has been crossed, policy manager  may call performance profiler  to obtain one or more metrics for the current system state, as indicated at block .","In the example embodiment, when performance profiler  is called, it obtains detailed performance data from PMU . That data may include, for example the metrics referenced above with regard to PMU . In the example embodiment, PMU  provides accurate characterization of the current system loading. Different mechanisms may be used to obtain the detailed performance data in different embodiments. For example, one set of functions may be used for platforms with one OS, and a different set of functions may be used for platforms with a different OS. In the example embodiment, for each instance of PMU data sampling, the PMU counters may be reset at the start of the window, so the statistics for that window will be based on counters which update starting from zero.","After collecting the detailed performance data, performance profiler  may generate processor performance statistics and memory performance statistics, based on the collected data. For example, performance profiler  may calculate an average number of instructions executed per cycle (IPC), for the period since performance profiler  was last called, by dividing the number of instructions executed, by a product of the current processor frequency and the length of time since the last call to performance profiler . Performance profiler  may also calculate the percentage of cache misses for the same period, for example by dividing the number of data cache misses by the number of data cache accesses, and multiplying the result by 100. The memory performance statistics may also be considered memory efficiency statistics. The processor and memory performance statistics may be referred to in general as architectural statistics.","In the example embodiment, idle profiler  uses a dynamically adjusted sampling window, and performance profiler  responds to requests from policy manager . In alternative embodiments, performance profiler  may instead also use the sampling window used by idle profiler . Accordingly, performance profiler  may use the length of that sampling window as the relevant time metric when calculating statistics such as IPC.","After generating the architectural statistics, performance profiler  may consult a performance profile such as the one illustrated above in Table 1 to assign a particular system state metric with the calculated statistics. For instance, in one embodiment, performance profiler  may assign a system state of \u201cidle\u201d when the calculated statistics include IPC less then 0.5 and a data cache miss percentage less than 10%. (As indicated above, the threshold metrics of 0.5 IPC and 10% data cache misses may be developed for a particular type of processing system and OS.) Performance profiler  may then report the system state to policy manager .","Thus, in the example embodiment, performance profiler  may generate performance data that identifies a current performance state of processing system  as an idle state, a memory bound state, a processor bound state, or a memory bound and processor bound state. Performance profiler  may report the current performance state to policy manager .","Policy manager  may then consult a policy profile to determine an appropriate policy to be implemented, based on the reported system state, as indicated at block  and . The policy profile may contain predetermined policy entries which associate different performance metrics or performance states with corresponding platform reconfiguration directives. Such a policy profile may include data such as that shown in columns 3 and 4 of Table 1, for example. This policy profile may be implemented as part of power policy profile , for instance.","If the policy profile indicates that no changes should be made to the current platform configuration, policy manager  may discontinue operation until the next load report is received or new policy settings are received from a user, as indicated by the arrow returning to block . However, as indicated at block , if the policy profile indicates that operating parameters of processing system  should be reconfigured, PPM  may automatically use PMU  to adjust power consumption of processing system  in accordance with the pertinent platform reconfiguration directive or directives from power policy profile .","For example, policy manager  may reconfigure processing system  by performing one or more of the following operations:\n\n","Table 1 and the above description refer to policies for reducing or increasing various frequencies. In some embodiments, the platform reconfiguration directives may specify particular frequencies to be set in particular circumstances. For example, the following table represents entries in a power policy profile for one embodiment, with predetermined actions to be implemented in response to detection of predetermined processor utilization metrics.",{"@attributes":{"id":"p-0070","num":"0093"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Alternative Platform Reconfiguration Directives"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Threshold","Action"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"right"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0\u201315%","CPU","Set system bus frequency to 100 MHz"]},{"entry":["15\u201345%","CPU","Set system bus frequency to 200 MHz"]},{"entry":["45\u201380%","CPU","Set system bus frequency to 300 MHz"]},{"entry":["80\u2013100%","CPU","Set system bus frequency to 400 MHz"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In some embodiments, the policy manager  may reconfigure the power consumption of the processing system in response to processor utilization data from an idle profiler, without necessarily also retrieving detailed performance data from a PMU.","Furthermore, in some embodiments, in addition to providing for automatic power management based on input from one or more profilers, policy manager  may provide for manual overrides. For instance, policy manager  may provide an interface for receiving a directive from the user to keep the system running in a particular operating mode or at a set frequency for set amount of time. The user may set the mode\/frequency and duration via a user interface setting. The input may go directly to policy manager , which may, in response, configure the operating parameters of processing system  accordingly.","For example, when the user desires to listen to music for half an hour, the user may provide input to instruct processing system  to go into an MP3 (Moving Picture Experts Group Layer-3 Audio) mode for 30 minutes. Alternatively, when the user does not plan to use telephony features for two hours, the user may instruct processing system  to shut off telephony components in processing system  for two hours. In response, policy manager may configure processing system  to utilize appropriate frequencies and power levels, according to the user directives. Policy manager  may also cause processing system  to suspend performance monitoring and profiling for the specified time period.","In the example embodiment, the operations for collecting idle time data, calculating processor utilization percentage, obtaining performance data from PMU , and calculating system state are performed in a kernel mode of operating system . Kernel mode may provide the least latency and the most accurate utilization statistics, and kernel mode may provide components such as performance profiler  with access to kernel services and components. Nevertheless, in alternative embodiments, one or more of those operations may be performed partially or completely within a user mode of OS . In such embodiments, the PMU driver may export the driver interface directly or indirectly, such as through I\/O control (IOCTL) calls, to minimize the latency for handling PMU events.","In the example embodiment, policy manager  may analyze the data from performance profiler  and reconfigure processing system  in a user mode of OS . In alternative embodiments, one or more of those operations may be performed at least partially in kernel mode.","Through operations and mechanisms such as those described above, idle profiler  dynamically calculates processor utilization information based on system idle, and provides that information to policy manager . Policy manager  may use that intelligent idle profiling input to derive the current operating points of the processing system (e.g., the current utilization statistics for the system's processing resources) and the current operating state of the system (e.g., which processing resources, if any, are limiting the system's performance). Policy manager  may then dynamically set system parameters to increase or decrease the performance of one or more processing resources to more efficiently meet the performance demands of the current workload. Processor utilization information may thus be used to adaptively manage power consumption by dynamically setting optimal system parameters and operating states, based on dynamic performance demands. Idle profiler  thus provides an algorithm, based on system idle, that may perform dynamic characterization of a processing system running an OS, to help enable accurate and efficient setting of parameters such as frequency and voltage, to make new low power modes available, and to save power while providing optimal system performance. In short, the methods and mechanisms disclosed herein support dynamic power and performance scaling, based on actual system workload.","Since PPM  may dynamically detect different types of workloads, based on the actual, measured, current performance characteristics, and may scale power consumption based on the current characteristics, PPM  provides an adaptive power management system.","The disclosed embodiments do not rely on task based scheduler information, but instead provide dynamic power performance scaling. This power scaling may be achieved without any static task schedule information. Instead, the processing system may be automatically configured into different operating points with different levels of power consumption, based on dynamically detected performance states and corresponding profile settings.","Furthermore, the present invention is not limited to a particular OS, but may be deployed in processing systems that use a wide variety of different OSs.","In addition, the above teachings may be used to take advantage of various low power modes that may be supported by the system's hardware (e.g., various power modes supported by a processor), even when those modes are not supported by the system's OS. For example, the processors in the Intel\u00ae PXA26x and the Intel\u00ae PXA27x processor families include technologies for performance switching. Similar technologies are included in various mobile processors distributed by Intel Corporation, such as the type of processor referred to as Mobile Intel\u00ae Pentium\u00ae III Processor-M. The technologies for performance switching included on those processors may be referred to in general as Intel SpeedStep\u00ae technology. Embodiments of the present invention may be used to more effectively exploit the power saving possibilities that such technologies support. Alternative embodiments may be used to enhance the efficiency of processing systems that use other kinds of processors, including processor that use other kinds of performance or power management technologies.",{"@attributes":{"id":"p-0081","num":"0104"},"figref":"FIG. 6","b":["20","1","20","4","4","20","90","90","20","90","20","2","2","90","20","3"]},"At time T, policy manager  may reconfigure processing system  to consume power at a level less than the level associated with conventional run mode, and greater than then level associated with conventional idle mode, such as a power level P. In certain circumstances, the time between T and T may correspond to the sampling period of idle profiler . When processing system  is configured to operate at power level P, processing system  may be said to be operating in a \u201crun minus 1\u201d or a \u201crun\u22121\u201d mode.","At time T, processing system  may transition back to idle mode, for instance in response to OS  determining that there are no more tasks to schedule. At time T, policy manager  may reconfigure processing system  to consume power at a level less than the level associated with conventional idle mode, such as a power level P. In some circumstances, the time between T and T may correspond to the sampling period of idle profiler . When processing system  is configured to operate at power level P, processing system  may be said to be operating in an \u201cidle minus 1,\u201d an \u201cidle\u22121\u201d mode, or an \u201cultra low power mode.\u201d Thus, areas  and  represent power savings realized through adaptive power and performance scaling according to the present disclosure.","In some embodiments, policy manager  and power policy profile  may provide for multiple \u201crun\u2212X\u201d and\/or multiple \u201cidle\u2212X\u201d modes. Each of those modes may be considered an operating power state. PPM  may thus be said to create or provide for multiple new operating power states, by mapping those states to available low power modes of processors such as processor  and\/or a communications or baseband processor within communications subsystem . Unlike with application-level power management, PPM  may provide for seamless power management, where power management events are handled without no significant performance or latency impact.","PPM  may extend the state machine provided by OS  for additional low power states. In some embodiments, PPM  operate at a lower logical level than OS , to transition processing system  into these new states without any direction from OS  regarding such transitions.","In the example embodiment, policy manager  reconfigures processing system into low power modes such as run\u22121 and idle\u22121 in response to determining that the current performance requirements can be accommodated in an operating mode with reduced power consumption. Policy manager  may make those determinations, based on performance data received from performance profiler , and based on power policy profile , as indicated above. Specifically, policy manager  may cause processing system  to enter run\u22121 or idle\u22121 mode by using PMU  to reconfigure processing system  according to a particular platform reconfiguration directive from power policy profile . That platform reconfiguration directive may be the directive associated with the performance data or performance metrics received from performance profiler .","Policy manager  thus dynamically sets the system's operating points in the run mode to increase power efficiency when processor  is doing work, and also in the idle mode to increase power efficiency when processor  is idle. In the example embodiment, processor  supports numerous different operating frequencies, from as low as 13 megahertz (MHz) TO 800 MHz, for instance. In other embodiments, other ranges of operating frequencies may be used.","It may be noted that, during idle mode, policy manager  may continue to monitor processor utilization and collect statistics. In ultra low power mode, policy manager  may stop the profilers. However, policy manager  may remain active, waiting for wakeup events that bring processing system  out of ultra low power mode. Once the processor comes out of the ultra low power mode, policy manager  may restart the profilers and continue enforcement of the power policy. For instance, if processing system  has been operating under a minimum threshold (e.g., 20% processor utilization) for a predetermined time period (e.g., over five minutes), policy manager  may stop the profilers, shut down various system components, and transition processing system  into ultra low power mode. Policy manager  may then restart the profilers in response to a wakeup event, such as a press key, an incoming call, etc.","Referring again to , PPM  also supports application-level power management, for example through one or more power management applications . For instance, a multimedia application can call PPM  to scale power and performance in anticipation of expected performance needs. PPM  may ultimately pass such calls to a bus or interface such as a power inter-integrated circuit (PI2C) interface of processing system  to utilize the DVM\/DFM capabilities of processor . Thus, in addition to the power savings provided by automatic power management at the platform or system level, processing system  may obtain power savings from explicit application-level directives.","In light of the principles and example embodiments described and illustrated herein, it will be recognized that the illustrated embodiments can be modified in arrangement and detail without departing from such principles. For instance, although one or more example embodiments have been described, for purposes of illustration, with regard to a battery powered device such as a cellular telephone, PDA, laptop computer, tablet computer, or other portable processing system, the present invention is not limited to utilization in such systems, but may also be used to advantage in many other types of systems, such as desktop computers, servers, etc. Accordingly, although one of the primary benefits for some implementations or embodiments of the invention may be extended battery life, other benefits may be more important in other implementations or embodiments. For example, noise and heat reductions may be the primary benefits in some implementations or embodiments, and reduced energy costs may be a primary benefit in other implementations or embodiments.","In addition, although the foregoing discussion has focused on particular embodiments, other configurations are contemplated. In particular, even though expressions such as \u201cin one embodiment,\u201d \u201cin another embodiment,\u201d or the like are used herein, these phrases are meant to generally reference embodiment possibilities, and are not intended to limit the invention to particular embodiment configurations. As used herein, these terms may reference the same or different embodiments that are combinable into other embodiments.","Similarly, although example processes have been described with regard to particular operations performed in a particular sequence, it will be apparent to those of ordinary skill in the art that numerous modifications to the processes could be applied to derive numerous alternative embodiments of the present invention. For example, alternative embodiments may include processes that use fewer than all of the disclosed operations, processes that use additional operations, processes that use the same operations in a different sequence, and processes in which the individual operations disclosed herein are combined, subdivided, or otherwise altered.","Alternative embodiments of the invention also include machine accessible media encoding instructions for performing the operations of the invention. Such embodiments may also be referred to as program products. Such machine accessible media may include, without limitation, storage media such as floppy disks, hard disks, CD-ROMs, DVDs, ROM, and RAM. Accordingly, instructions and other data may be used in a distributed environment and stored locally and\/or remotely for access by single or multiprocessor machines.","It should also be understood that the hardware and software components depicted herein represent functional elements that are reasonably self contained so that each can be designed, constructed, or updated substantially independently of the others. In alternative embodiments, many of the components may be implemented as hardware, software, or combinations of hardware and software for providing the functionality described and illustrated herein.","In view of the wide variety of useful permutations that may be readily derived from the example embodiments described herein, this detailed description is intended to be illustrative only, and should not be taken as limiting the scope of the invention. What is claimed as the invention, therefore, are all implementations that come within the scope and spirit of the following claims and all equivalents to such implementations."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the appended claims and the following detailed description of one or more example embodiments, in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
