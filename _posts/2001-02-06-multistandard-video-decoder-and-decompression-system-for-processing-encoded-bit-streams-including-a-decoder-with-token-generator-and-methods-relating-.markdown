---
title: Multistandard video decoder and decompression system for processing encoded bit streams including a decoder with token generator and methods relating thereto
abstract: A pipeline video decoder and decompression system handles a plurality of separately encoded bit streams arranged as a single serial bit stream of digital bits and having separately encoded pairs of control codes and corresponding data carried in the serial bit stream. The pipeline system employs a plurality of interconnected stages to decode and decompress the single bit stream, including a start code detector. When in a search mode, the start code detector searches for a specific start code corresponding to one of multiple compression standards. The start code detector responding to the single serial bit stream generates control tokens and data tokens. A respective one of the tokens includes a plurality of data words. Each data word has an extension bit which indicates a presence of additional words therein. The data words are thereby unlimited in number. A token decode circuit positioned in certain of the stages recognizes certain of the tokens as control tokens pertinent to that stage and passes unrecognized control tokens to a succeeding stage. A reconfigurable decode and parser processing means positioned in certain of the stages is responsive to a recognized control token and reconfigures a particular stage to handle an identified data token. Methods relating to the decoder and decompression system include processing steps relating thereto.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06910125&OS=06910125&RS=06910125
owner: Discovision Associates
number: 06910125
owner_city: Irvine
owner_country: US
publication_date: 20010206
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","GLOSSARY","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is a divisional of U.S. Ser. No. 09\/307,239 filed Oct. 7, 1997, issued as U.S. Pat. No. 6,330,666, which is a continuation of U.S. Ser. No. 08\/400,397 filed Mar. 7, 1995 now abandoned, which is Continuation-In-Part of U.S. Ser. No. 08\/382,958 filed Feb. 2, 1995, now abandoned, which is a continuation of U.S. Ser. No. 08\/082,291 filed Jun. 24, 1993, now abandoned.","The present invention is directed to improvements in methods and apparatus for decompression which operates to decompress and\/or decode a plurality of differently encoded input signals. The illustrative embodiment chosen for description hereinafter relates to the decoding or a plurality of encoded picture standards. More specifically, this embodiment relates to the decoding or any one of the well known standards known as JPEG, MPEG and H.261.","A serial pipeline processing system of the present invention comprises a single two-wire bus used for carrying unique and specialized interactive interfacing tokens, in the form or control tokens and data tokens, to a plurality of adaptive decompression circuits and the like positioned as a reconfigurable pipeline processor.","Video compression\/decompression systems are generally well-known in the art. However, such systems have generally seen dedicated in design and use to a single compression standard. They have also suffered from a number or other inefficiencies and inflexibility in overall system and subsystem design and data flow management.","Examples of prior art systems and subsystems are enumerated as follows:","One prior art system is described in U.S. Pat. No. 5,216,724. The apparatus comprises a plurality of compute modules, in a preferred embodiment, for a total of four compute modules coupled in parallel. Each of the compute modules has a processor, dual port memory, scratch-pad memory, and an arbitration mechanism. A first bus couples the compute modules and a host processor. The device comprises a shared memory which is coupled to the host processor and to the compute modules with a second bus.","U.S. Pat. No. 4,785,349 discloses a full motion color digital video signal that is compressed, formatted for transmission, recorded on compact disc media and decoded at conventional video frame rates. During compression, regions of a frame are individually analyzed to select optimum fill coding methods specific to each region. Region decoding time estimates are made to optimize compression thresholds. Region descriptive codes conveying the size and locations of the regions are grouped together in a first segment of a data stream. Region fill codes conveying pixel amplitude indications for the regions are grouped together according to fill code type and placed in other segments of the data stream. The data stream segments are individually variable length coded according to their respective statistical distributions and formatted to form data frames. The number of bytes per frame is withered by the addition of auxiliary data determined by a reverse frame sequence analysis to provide an average number selected to minimize pauses of the compact disc during playback, thereby avoiding unpredictable seek mode latency periods characteristic of compact discs. A decoder includes a variable length decoder responsive to statistical information in the code stream for separately variable length decoding individual segments of the data stream. Region location data is derived from region descriptive data and applied with region fill codes to a plurality of region specific decoders selected by detection of the fill code type (e.g., relative, absolute, dyad and DPCM) and decoded region pixels are stored in a bit map for subsequent display.","U.S. Pat. No. 4,922,341 discloses a method for scene-model-assisted reduction of image data for digital television signals, whereby a picture signal supplied at time is to be coded, whereby a predecessor frame from a scene already coded at time t-1 is present in an image store as a reference, and whereby the frame-to-frame information is composed of an amplification factor, a shift factor, and an adaptively acquired quad-tree division structure. Upon initialization of the system, a uniform, prescribed gray scale value or picture half-tone expressed as a defined luminance value is written into the image store of a coder at the transmitter and in the image store of a decoder at the receiver store, in the same way for all picture elements (pixels). Both the image store in the coder as well as the image store in the decoder are each operated with feed back to themselves in a manner such that the content of the image store in the coder and decoder can be read out in blocks of variable size, can be amplified with a factor greater than or less than 1 of the luminance and can be written back into the image store with shifted addresses, whereby the blocks of variable size are organized according to a known quad tree data structure.","U.S. Pat. No. 5,122,875 discloses an apparatus for encoding\/decoding an HDTV signal. The apparatus includes a compression circuit responsive to high definition video source signals for providing hierarchically layered codewords CW representing compressed video data and associated codewords T, defining the types of data represented by the codewords CW. A priority selection circuit, responsive to the codewords CW and T, parses the codewords CW into high and low priority codeword sequences wherein the high and low priority codeword sequences correspond to compressed video data of relatively greater and lesser importance to image reproduction respectively. A transport processor, responsive to the high and low priority codeword sequences, forms high and low priority transport blocks of high and low priority codewords, respectively. Each transport block includes a header, codewords CW and error detection check bits. The respective transport blocks are applied to a forward error check circuit for applying additional error check data. Thereafter, the high and low priority data are applied to a modem wherein quadrature amplitude modulates respective carriers for transmission.","U.S. Pat. No. 5,146,325 discloses a video decompression system for decompressing compressed image data wherein odd and even fields of the video signal are independently compressed in sequences of intraframe and interframe compression modes and then interleaved for transmission. The odd and even fields are independently decompressed. During intervals when valid decompressed odd\/even field data is not available, even\/odd field data is substituted for the unavailable odd\/even field data. Independently decompressing the even and odd fields of data and substituting the opposite field of data for unavailable data may be used to advantage to reduce image display latency during system start-up and channel changes.","U.S. Pat. No. 5,168,356 discloses a video signal encoding system that includes apparatus for segmenting encoded video data into transport blocks for signal transmission. The transport block format enhances signal recovery at the receiver by virtue of providing header data from which a receiver can determine re-entry points into the data stream on the occurrence of a loss or corruption of transmitted data. The re-entry points are maximized by providing secondary transport headers embedded within encoded video data in respective transport blocks.","U.S. Pat. No. 5,168,375 discloses a method for processing a field of image data samples to provide for one or more of the functions of decimation, interpolation, and sharpening. This is accomplished by an array transform processor such as that employed in a JPEG compression system. Blocks of data samples are transformed by the discrete even cosine transform (DECT) in both the decimation and interpolation processes, after which the number of frequency terms is altered. In the case of decimation, the number of frequency terms is reduced, this being followed by inverse transformation to produce a reduced-size matrix of sample points representing the original block of data. In the case of interpolation, additional frequency components of zero value are inserted into the array of frequency components after which inverse transformation produces an enlarged data sampling set without an increase in spectral bandwidth. In the case of sharpening, accomplished by a convolution or filtering operation involving multiplication of transforms of data and filter kernel in the frequency domain, there is provided an inverse transformation resulting in a set of blocks of processed data samples. The blocks are overlapped followed by a savings of designated samples, and a discarding of excess samples from regions of overlap. The spatial representation of the kernel is modified by reduction of the number of components, for a linear-phase filter, and zero-padded to equal the number of samples of a data block, this being followed by forming the discrete odd cosine transform (DOCT) of the padded kernel matrix.","U.S. Pat. No. 5,175,617 discloses a system and method for transmitting logmap video images through telephone line band-limited analog channels. The pixel organization in the logmap image is designed to match the sensor geometry of the human eye with a greater concentration of pixels at the center. The transmitter divides the frequency band into channels, and assigns one or two pixels to each channel, for example a 3 KHz voice quality telephone line is divided into 768 channels spaced about 3.9 Hz apart. Each channel consists of two carrier waves in quadrature, so each channel can carry two pixels. Some channels are reserved for special calibration signals enabling the receiver to detect both the phase and magnitude of the received signal. If the sensor and pixels are connected directly to a bank of oscillators and the receiver can continuously receive each channel, then the receiver need not be synchronized with the transmitter. An FFT algorithm implements a fast discrete approximation to the continuous case in which the receiver synchronizes to the first frame and then acquires subsequent frames every frame period. The frame period is relatively low compared with the sampling period so the receiver is unlikely to lose frame synchrony once the first frame is detected. An experimental video telephone transmitted 4 frames per second, applied quadrature coding to 1440 pixel logmap images and obtained an effective data transfer rate in excess of 40,000 bits per second.","U.S. Pat. No. 5,185,819 discloses a video compression system having odd and even fields of video signal that are independently compressed in sequences of intraframe and interframe compression modes. The odd and even fields of independently compressed data are interleaved for transmission such that the intraframe even field compressed data occurs midway between successive fields of intraframe odd field compressed data. The interleaved sequence provides receivers with twice the number of entry points into the signal for decoding without increasing the amount of data transmitted.","U.S. Pat. No. 5,212,742 discloses an apparatus and method for processing video data for compression\/decompression in real-time. The apparatus comprises a plurality of compute modules, in a preferred embodiment, for a total of four compute modules coupled in parallel. Each of the compute modules has a processor, dual port memory, scratch-pad memory, and an arbitration mechanism. A first bus couples the compute modules and host processor. Lastly, the device comprises a shared memory which is coupled to the host processor and to the compute modules with a second bus. The method handles assigning portions of the image for each of the processors to operate upon.","U.S. Pat. No. 5,231,484 discloses a system and method for implementing an encoder suitable for use with the proposed ISO\/IEC MPEG standards. Included are three cooperating components or subsystems that operate to variously adaptively pre-process the incoming digital motion video sequences, allocate bits to the pictures in a sequence, and adaptively quantize transform coefficients in different regions of a picture in a video sequence so as to provide optimal visual quality given the number of bits allocated to that picture.","U.S. Pat. No. 5,267,334 discloses a method of removing frame redundancy in a computer system for a sequence of moving images. The method comprises detecting a first scene change in the sequence of moving images and generating a first keyframe containing complete scene information for a first image. The first keyframe is known, in a preferred embodiment, as a \u201cforward-facing\u201d keyframe or intraframe, and it is normally present in CCITT compressed video data. The process then comprises generating at least one intermediate compressed frame, the at least one intermediate compressed frame containing difference information from the first image for at least one image following the first image in time in the sequence of moving images. This at least one frame being known as an interframe. Finally, detecting a second scene change in the sequence of moving images and generating a second keyframe containing complete scene information for an image displayed at the time just prior to the second scene change, known as a \u201cbackward-facing\u201d keyframe. The first keyframe and the at least one intermediate compressed frame are linked for forward play, and the second keyframe and the intermediate compressed frames are linked in reverse for reverse play. The intraframe may also be used for generation of complete scene information when the images are played in the forward direction. When this sequence is played in reverse, the backward-facing keyframe is used for the generation of complete scene information.","U.S. Pat. No. 5,276,513 discloses a first circuit apparatus, comprising a given number of prior-art image-pyramid stages, together with a second circuit apparatus, comprising the same given number of novel motion-vector stages, perform cost-effective hierarchical motion analysis (HMA) in real-time, with minimum system processing delay and\/or employing minimum system processing delay and\/or employing minimum hardware structure. Specifically, the first and second circuit apparatus, in response to relatively high-resolution image data from an ongoing input series of successive given pixel-density image-data frames that occur at a relatively high frame rate (e.g., 30 frames per second), derives, after a certain processing-system delay, an ongoing output series of successive given pixel-density vector-data frames that occur at the same given frame rate. Each vector-data frame is indicative of image motion occurring between each pair of successive image frames.","U.S. Pat. No. 5,283,646 discloses a method and apparatus for enabling a real-time video encoding system to accurately deliver the desired number of bits per frame, while coding the image only once, updates the quantization step size used to quantize coefficients which describe, for example, an image to be transmitted over a communications channel. The data is divided into sectors, each sector including a plurality of blocks. The blocks are encoded, for example, using DCT coding, to generate a sequence of coefficients for each block. The coefficients can be quantized, and depending upon the quantization step, the number of bits required to describe the data will vary significantly. At the end of the transmission of each sector of data, the accumulated actual number of bits expended is compared with the accumulated desired number of bits expended, for a selected number of sectors associated with the particular group of data. The system then readjusts the quantization step size to target a final desired number of data bits for a plurality of sectors, for example describing an image. Various methods are described for updating the quantization step size and determining desired bit allocations.","The article, Chong, Yong M., -, Wescon Technical Papers: No. 2 October\/November 1984, discloses a real-time signal processing system specifically designed for image processing. More particularly, a token based data-flow architecture is disclosed wherein the tokens are of a fixed one word width having a fixed width address field. The system contains a plurality of identical flow processors connected in a ring fashion. The tokens contain a data field, a control field and a tag. The tag field of the token is further broken down into a processor address field and an identifier field. The processor address field is used to direct the tokens to the correct data-flow processor, and the identifier field is used to label the data such that the data-flow processor knows what to do with the data. In this way, the identifier field acts as an instruction for the data-flow processor. The system directs each token to a specific data-flow processor using a module number (MN). If the MN matches the MN of the particular stage, then the appropriate operations are performed upon the data. If unrecognized, the token is directed to an output data bus.","The article, Kimori, S. et al. -, IEEE J. of Solid-State Circuits, Vol. 23, No. 1, February 1988, discloses an elastic pipeline having self-timed circuits. The asynchronous pipeline comprises a plurality of pipeline stages. Each of the pipeline stages consists of a group of input data latches followed by a combinatorial logic circuit that carries out logic operations specific to the pipeline stages. The data latches are simultaneously supplied with a triggering signal generated by a data-transfer control circuit associated with that stage. The data-transfer control circuits are interconnected to form a chain through which send and acknowledge signal lines control a hand-shake mode of data transfer between the successive pipeline stages. Furthermore, a decoder is generally provided in each stage to select operations to be done on the operands in the present stage. It is also possible to locate the decoder in the preceding stage in order to pre-decode complex decoding processing and to alleviate critical path problems in the logic circuit. The elastic nature of the pipeline eliminates any centralized control since all the interworkings between the submodules are determined by a completely localized decision and, in addition, each submodule can autonomously perform data buffering and self-timed data-transfer control at the same time. Finally, to increase the elasticity of the pipeline, empty stages are interleaved between the occupied stages in order to ensure reliable data transfer between the stages.","U.S. Pat. No. 5,278,646 discloses an improved technique for decoding wherein the number of coefficients to be included in each sub-block is selectable, and a code indicating the number of coefficients within each layer is inserted in the bitstream at the beginning of each encoded video sequence. This technique allows the original runs of zero coefficients in the highest resolution layer to remain intact by forming a sub-block for each scale from a selected number of coefficients along a continuous scan. These sub-blocks may be decoded in a standard fashion, with an inverse discrete cosine transform applied to square sub-blocks obtained by the appropriate zero padding of and\/or discarding of excess coefficients from each of the scales. This technique further improves decoding efficiency by allowing an implicit end of block signal to separate blocks, making it unnecessary to decode an explicit end of block signal in most cases.","U.S. Pat. No. 4,903,018 discloses a process and data processing system for compressing and expanding structurally associated multiple data sequences. The process is particular to data sets in which an analysis is made of the structure in order to identify a characteristic common to a predetermined number of successive data elements of a data sequence. In place of data elements, a code as used which is again decoded during expansion. The common characteristic is obtained by analyzing data elements which have the same order number in a number of data sequences. During expansion, the data elements obtained by decoding the code are ordered in data series on the basis of the order number of these data series on the basis of the order number of these data elements. The data processing system for performing the processes includes a storage matrix (26) and an index storage (28) having line addresses of the storage matrix (26) in an assorted line sequence.","U.S. Pat. No. 4,334,246 discloses a circuit and method for decompressing video subsequent to its prior compression for transmission or storage. The circuit assumes that the original video generated by a raster input scanner was operated on by a two line one shot predictor, coded using run length encoding into code words of four, eight or twelve bits and packed into sixteen bit data words. This described decompressor, then, unpacks the data by joining together the sixteen bit data words and then separately the individual code words, converts the code words into a number of all zero four bit nibbles and a terminating nibble containing one or more one bits which constitutes decoded data, inspects the actual video of the preceding scan line and the previous video bits of the present line to produce depredictor bits and compares the decoded data and depredictor bits to produce the final actual video.","U.S. Pat. No. 5,060,242 discloses an image signal processing system DPCM encodes the signal, then Huffman and run length encodes the signal to produce variable length code words, which are then tightly packed without gaps for efficient transmission without loss of any data. The tightly packed apparatus has a barrel shifter with its shift modulus controlled by an accumulator receiving code word length information. An OR gate is connected to the shifter, while a register is connected to the gate. Apparatus for processing a tightly packed and decorrelated digital signal has a barrel shifter and accumulator for unpacking, a Huffman and run length decoder, and an inverse DCPM decoder.","U.S. Pat. No. 5,168,375 discloses a method for processing a field of image data samples to provide for one or more of the functions of decimation, interpolation, and sharpening is accomplished by use of an array transform processor such as that employed in a JPEG compression system. Blocks of data samples are transformed by the discrete even cosine transform (DECT) in both the decimation and interpolation processes, after which the number of frequency terms is altered. In the case of decimation, the number of frequency terms is reduced, this being followed by inverse transformation to produce a reduced-size matrix of sample points representing the original block of data. In the case of interpolation, additional frequency components of zero value are inserted into the array of frequency components after which inverse transformation produces an enlarged data sampling set without an increase in spectral bandwidth. In the case of sharpening, accomplished by a convolution or filtering operation involving multiplication of transforms of data and filter kernel in the frequency domain, there is provided an inverse transformation resulting in a set of blocks of processed data samples. The blocks are overlapped followed by a savings of designated samples, and a discarding of excess samples from regions of overlap. The spatial representation of the kernel is modified by reduction of the number of components, for a linear-phase filter, and zero-padded to equal the number of samples of a data block, this being followed by forming the discrete odd cosine transform (DOCT) of the padded kernel matrix.","U.S. Pat. No. 5,231,486 discloses a high definition video system processes a bitstream including high and low priority variable length coded Data words. The coded Data is separated into packed High Priority Data and packed Low Priority Data by means of respective data packing units. The coded Data is continuously applied to both packing units. High Priority and Low Priority Length words indicating the bit lengths of high priority and low priority components of the coded Data are applied to the high and low priority data packers, respectively. The Low Priority Length word is zeroed when high Priority Data is to be packed for transport via a first output path, and the High Priority Length word is zeroed when Low Priority Data is to be packed for transport via a second output path.","U.S. Pat. No. 5,287,178 discloses a video signal encoding system includes a signal processor for segmenting encoded video data into transport blocks having a header section and a packed data section. The system also includes reset control apparatus for releasing resets of system components, after a global system reset, in a prescribed non-simultaneous phased sequence to enable signal processing to commence in the prescribed sequence. The phased reset release sequence begins when valid data is sensed as transmitting the data lines.","U.S. Pat. No. 5,124,790 to Nakayama discloses a reverse quantizer to be used with image memory. The inverse quantizer is used in the standard way to decode differential predictive coding method (DPCM) encoded data.]","U.S. Pat. No. 5,136,371 to Savatier et al. is directed to a de-quantizer having an adjustable quantizational level which is variable and determined by the fullness of the buffer. The applicants state that the novel aspect of their invention is the maximum available data rate that is achieved. Buffer overflow and underflow is avoided by adapting the quantization step size the quantizer 152 and the de-quantizer 156 by means of a quantizational level which is recalculated after each block has been encoded. The quantization level is calculated as a function of the amount of already encoded data for the frame, compared with the total buffer size. In this manner, the quantization level can advantageously be recalculated by the decoder and does not have to be transmitted.","U.S. Pat. No. 5,142,380 to Sakagami et al. discloses an image compression apparatus suitable for use with still images such as those formed by electronic still cameras using solid state image sensors. The quantizer employed is connected to a memory means from which threshold values of a quantization matrix for the laminate signal, Y, and rom 15 stores threshold values of a quantization matrix for the crominant signals I and Q.","U.S. Pat. No. 5,193,002 to Guichard et al. disclosed an apparatus for coding\/decoding image signals in real time in conjunction with the CCITT standard H.261. A digital signal processor carries out direct quantization and reverse quantization.","U.S. Pat. No. 5,241,383 to Chen et al. describes an apparatus with a pseudo-constant bit rate video coding achieved by an adjustable quantization parameter. The qunatization parameter utilized by the quantizer 32 is periodically adjusted to increase or decrease the amount of code bits generated by the coding circuit. The change in quantization parameters for coding the next group of pictures is determined by a deviation measure between the actual number of code bits generated by the coding circuits for the previous group of pictures in an estimate number of code bits for the previous group of pictures. The number of code bits generated by the coding circuit is controlled by controlling the quantizer step sizes. In general smaller quantizer step sizes result in more code bits in larger quantizer step sizes result in fewer code bits.","U.S. Pat. Nos. 5,113,255 to Nagata et al; 5,126,842 to Andrews et al; 5,253,058 to Gharavi; 5,260,782 to Hui; and 5,212,742 to Normile et al are included for background and as a general description of the art.","Accordingly, those concerned with the design, development and use of video compression\/decompression systems and related subsystems have long recognized a need for improved methods and apparatus providing enhanced flexibility, efficiency and performance. The present invention clearly fulfills all these needs.","Briefly, and in general terms, the present invention provides an input, an output and a plurality of processing stages between the input and the output, the plurality of processing stages being interconnected by a two-wire interface for conveyance of tokens along a pipeline, and control and\/or DATA tokens in the form of universal adaptation units for interfacing with all of the stages in the pipeline and interacting with selected stages in the pipeline for control, data and\/or combined control-data functions among the processing stages, whereby the processing stages in the pipeline are afforded enhanced flexibility in configuration and processing.","Each of the processing stages in the pipeline may include both primary and secondary storage, and the stages in the pipeline are reconfigurable in response to recognition of selected tokens. The tokens in the pipeline are dynamically adaptive and may be position dependent upon the processing stages for performance of functions or position independent of the processing stages for performance of functions.","In a pipeline machine, in accordance with the invention, the tokens may be altered by interfacing with the stages, and the tokens may interact with all of the processing stages in the pipeline or only with some but less than all of said processing stages. The tokens in the pipeline may interact with adjacent processing stages or with non-adjacent processing stages, and the tokens may reconfigure the processing stages. Such tokens may be position dependent for some functions and position independent for other functions in the pipeline.","The tokens, in combination with the reconfigurable processing stages, provide a basic building block for the pipeline system. The interaction of the tokens with a processing stage in the pipeline may be conditioned by the previous processing history of that processing stage. The tokens may have address fields which characterize the tokens, and the interactions with a processing stage may be determined by such address fields.","In an improved pipeline machine, in accordance with the invention, the tokens may include an extension bit for each token, the extension bit indicating the presence of additional words in that token and identifying the last word in that token. The address fields may be of variable length and may also be Huffman coded.","In the improved pipeline machine, the tokens may be generated by a processing stage. Such pipeline tokens may include data for transfer to the processing stages or the tokens may be devoid of data. Some of the tokens may be identified as DATA tokens and provide data to the processing stages in the pipeline, while other tokens are identified as control tokens and only condition the processing stages in the pipeline, such conditioning including reconfiguring of the processing stages. Still other tokens may provide both data and conditioning to the processing stages in the pipeline. Some of said tokens may identify coding standards to the processing stages in the pipeline, whereas other tokens may operate independent of any coding standard among the processing stages. The tokens may be capable of successive alteration by the processing stages in the pipeline.","In accordance with the invention, the interactive flexibility of the tokens in cooperation with the processing stages facilitates greater functional diversity of the processing stages for resident structure in the pipeline, and the flexibility of the tokens facilitates system expansion and\/or alteration. The tokens may be capable of facilitating a plurality of functions within any processing stage in the pipeline. Such pipeline tokens may be either hardware based or software based. Hence, the tokens facilitate more efficient uses of system bandwidth in the pipeline. The tokens may provide data and control simultaneously to the processing stages in the pipeline.","The invention may include a pipeline processing machine for handling plurality of separately encoded bit streams arranged as a single serial bit stream of digital bits and having separately encoded pairs of control codes and corresponding data carried in the serial bit stream and employing a plurality of stages interconnected by a two-wire interface, further characterized by a start code detector responsive to the single serial bit stream for generating control tokens and DATA tokens for application to the two-wire interface, a token decode circuit positioned in certain of the stages for recognizing certain of the tokens as control tokens pertinent to that stage and for passing unrecognized control tokens along the pipeline, and a reconfigurable decode and parser processing means responsive to a recognized control token for reconfiguring a particular stage to handle an identified DATA token.","The pipeline machine may also include first and second registers, the first register being positioned as an input of the decode and parser means, with the second register positioned as an output of the decode and parser means. One of the processing stages may be a spatial decoder, a second of the stages being a token generator for generating control tokens and DATA tokens for passage along the two-wire interface. A token decode means is positioned in the spatial decoder for recognizing certain of the tokens as control tokens pertinent to the spatial decoder and for configuring the spatial decoder for spatially decoding DATA tokens following a control token into a first decoded format.","A further stage may be a temporal decoder positioned downstream in the pipeline from the spatial decoder, with a second token decode means positioned in the temporal decoder for recognizing certain of the tokens as control tokens pertinent to the temporal decoder and for configuring the temporal decoder for termporally decoding the DATA tokens following the control token into a first decoded format. The temporal decoder may utilize a reconfigurable prediction filter which is reconfigurable by a prediction token.","Data may be moved along the two-wire interface within the temporal decoder in 8\u00d78 pel data blocks, and address means may be provided for storing and retrieving such data blocks along block boundaries. The address means may store and retrieve blocks of data across block boundaries. The address means reorders said blocks as picture data for display. The data blocks stored and retrieved may be greater and\/or smaller than 8\u00d78 pel data blocks. Circuit means may also be provided for either displaying the output of the temporal decoder or writing the output back into a picture memory location. The decoded format may be either a still picture format or a moving picture format.","The processing stage may also include, in accordance with the invention, a token decoder for decoding the address of a token and an action identifier responsive to the token decoder to implement configuration of the processing stage. The processing stages reside in a pipeline processing machine having a plurality of the processing stages interconnected by a two-wire interface bus, with control tokens and DATA tokens passing over the two-wire interface. A token decode circuit is positioned in certain of the processing stages for recognizing certain of the tokens as control tokens pertinent to that stage and for passing unrecognized control tokens along the pipeline. A first input latch circuit may be positioned on the two-wire interface preceding the processing stage and a second output latch circuit may be positioned on the two-wire interface succeeding the processing stage. The token decode circuit is connected to the two-wire interface through the first input latch. Predetermined processing stages may include a decoding circuit connected to the output of a predetermined data storage device, whereby each processing stage assumes the active state only when the stage contains a predetermined stage activation signal pattern and remains in the activation mode until the stage contains a predetermined stage deactivation pattern.","In accordance with the invention, one of the stages is a Start Code Detector for receiving the input and being adapted to generate and\/or convert the tokens. The Start Code Detector is responsive to data to create tokens, searches for and detects start codes and produces tokens in response thereto, and is capable of detecting overlapping start codes, whereby the first start code is ignored and the second start code is used to create start code tokens.","The Start Code Detector stage is adapted to search an input data stream in a search mode for a selected start code. The detector searches for breaks in the data stream, and the search may be made of data from an external data source. The Start Code Detector stage may produce a START CODE token, a PICTURE_START token, a SLICE_START token, a PICTURE_END token, a SEQUENCE_START token, a SEQUENCE_END token, and\/or a GROUP_START token. The Start Code Detector stage may also perform a padding function by adding bits to the last word of a token.","The Start Code Detector may provide, in a machine for handling a plurality of separately encoded bit streams arranged as a serial bit stream of digital bits and having separately encoded pairs of start codes and data carried in the serial bit stream, a Start Code Detector subsystem having first, second and third registers connected in serial fashion, each of the registers storing a different number of bits from the bit stream, the first register storing a value, the second register and a first decode means identifying a start code associated with the value contained in said first register. Circuit means shift the latter value to a predetermined end of the third register, and a second decode means is arranged for accepting data from the third register in parallel.","A memory may also be provided which is responsive to the second decode means for providing one or more control tokens stored in the memory as a result of the decoding of the value associated with the start code. A plurality of tag shift registers may be provided for handling tags indicating the validity of data from the registers. The system may also include means for accessing the input data stream from a microprocessor interface, and means for formatting and organizing the data stream.","In accordance with the invention, the Start Code Detector may identify start codes of varying widths associated with differently encoded bit streams. The detector may generate a plurality of DATA Tokens from the input data stream. Further in accordance with the invention, the system may be a pipeline system and the Start Code Detector may be positioned as the first processing stage in the pipeline.","The present invention also provides, in a digital picture information processing system, means for selectively configuring the system to process data in accordance with a plurality of different picture compression\/decompression standards. The picture standards may include JPEG, MPEG, and\/or H.261, or any other standards and any combination of such picture standards, without departing in any way from the spirit and scope of the invention. In accordance with the invention, the system may include a spatial decoder for video data and having a Huffman decoder, an index to data and an arithmetic logic unit with a microcode ROM having separate stored programs for each of a plurality of different picture compression\/decompression standards, such programs being selectable by an interfacing adaptation unit in the form of a token, so that processing for a plurality of picture standards is facilitated. A multi-standard system in accordance with the invention, may utilize tokens for its operation regardless of the selected picture standard, and the tokens may be utilized as a generic communication protocol in the system for all of the various picture standards. The system may be further characterized by a multi-standard token for mapping differently encoded data streams arranged on a single serial stream of data onto a single decoder using a mixture of standard dependent and standard independent hardware and control tokens. The system may also include an address generation means for arranging macroblocks of data associated with different picture standards into a common addressing scheme.","The present invention also provides, in a system having a plurality of processing stages, a universal adaptation unit in the form of an interactive interfacing token for control and\/or data functions among the processing stages, the token being a PICTURE_START code token for indicating that the start of a picture will follow in the subsequent DATA token.","The token may also be a PICTURE_END token for indicating the end of an individual picture.","The token may also be a FLUSH token for clearing buffers and resetting the system as it proceeds down the system from the input to the output. In accordance with the invention, the FLUSH token may variably reset the stages as the token proceeds down the pipeline.","The token may also be a CODING_STANDARD token for conditioning the system for processing in a selected one of a plurality of picture compression\/decompression standards.","The CODING_STANDARD token may designate the picture standard as JPEG, and\/or any other appropriate picture standard. At least some of the processing stages reconfigure in response to the CODING_STANDARD token.","One of the processing stages in the system may be a Huffman decoder and parser and, upon receipt of a CODING_STANDARD control token, the parser is reset to an address location corresponding to the location of a program for handling the picture standard identified by the CODING_STANDARD control token. A reset address may also be selected by the CODING_STANDARD control token corresponding to a memory location used for testing the Huffman decoder and parser.","The Huffman decoder may include a decoding stage and an Index to Data stage, and the parser stage may send an instruction to the Index to Data Unit to select tables needed for a particular identified coding standard, the parser stage indicating whether the arriving data is inverted or not.","The aforedescribed tokens may take the form of an interactive metamorphic interfacing token.","The present invention also provides a system for decoding video data, having a Huffman decoder, an index to data (ITOD) stage, an arithmetic logic unit (ALU), and a data buffering means immediately following the system, whereby time spread for video pictures of varying data size can be controlled.","The system may include a spatial decoder having a two-wire interface interconnecting processing stages, the interface enabling serial processing for data and parallel processing for control.","As previously indicated, the system may further include a ROM having separate stored programs for each of a plurality of picture standards, the programs being selectable by a token to facilitate processing for a plurality of different picture standards.","The spatial decoder system also includes a token formatter for formatting tokens, so that DATA tokens are created.","The system may also include a decoding stage and a parser stage for sending an instruction to the Index to Data Unit to select tables needed for a particular identified coding standard, the parser stage indicating whether the arriving data is inverted or not. The tables may be arranged within a memory for enabling multiple use of the tables where appropriate.","The present invention also provides a pipeline system having an input data stream, and a processing stage for receiving the input data stream, the stage including means for recognizing specified bit stream patterns, whereby said stage facilitates random access and error recovery. In accordance with the invention, the processing stage may be a start code detector and the bit stream patterns may include start codes. Hence, the invention provides a search-mode means for searching differently encoded data streams arranged as a single serial stream of data for allowing random access and enhanced error recovery.","The present invention also provides a pipeline machine having means for performing a stop-after-picture operation for achieving a clear end to picture data decoding, for indicating the end of a picture, and for clearing the pipeline, wherein such means generates a combination of a PICTURE_END token and a FLUSH token.","The present invention also provides, in a pipeline machine, a fixed size, fixed width buffer and means for padding the buffer to pass an arbitrary number of bits through the buffer. The padding means may be a start code detector.","Padding may be performed only on the last word of a token and padding insures uniformity of word size. In accordance with the invention, a reconfigurable processing stage may be provided as a spatial decoder and the padding means adds to picture data being handled by the spatial decoder sufficent additional bits such that each decompressed picture at the output of the spatial decoder is of the same length in bits.","The present invention also provides, in a system having a data stream including run length code, an inverse modeller means active upon the data stream from a token for expending out the run level code to a run of zero data followed by a level, whereby each token is expressed with a specified number of values. The token may be a DATA token.","The inverse modeller means blocks tokens which lack the specified number of values, and the specified number of values may be 64 coefficients in a presently preferred embodiment of the invention.","The practice of the invention may include an expanding circuit for accepting a DATA token having run length codes and decoding the run length codes. A padder circuit in communication with the expanding circuit checks that the DATA token has a predetermined length so that if the DATA token has less than the predetermined length, the padder circuit adds units of data to the DATA token until the predetermined length is achieved. A bypass circuit is also provided for bypassing any token other than a DATA token around the expanding circuit and the padding circuit.","In accordance with the invention, a method is provided for data to efficiently fill a buffer, including providing first type tokens having a first predetermined width, and at least one of the following formats:",{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Format A","ExxxxxxLLLLLLLLLLL"]},{"entry":[{},"Format B","ERRRRRRLLLLLLLLLLL"]}]}}}},"br":{},"b":["0","1","00000","0","0","0","0","1"],"i":["a ","a ","a "]},"The invention also provides an apparatus for providing a time delay to a group of compressed pictures, the pictures corresponding to a video compression\/decompression standard, wherein words of data containing compressed pictures are counted by a counter circuit and a microprocessor, in communication with the counter circuit and adapted to receive start-up information consistent with the standard of video decompression, communicates the start-up information to the counter circuit.","An inverse modeller circuit, for accepting the words of data and capable of delaying the words of data, is in communication with a control circuit intermediate the counter circuit and the inverse modeller circuit, the control circuit also communicating with the counter circuit which compares the start-up information with the counted words of data and signals the control circuit. The control circuit queues the signals in correspondence to the words of data that have met the start-up criterion and controls the inverse modeller delay feature.","The present invention also provides in a pipeline system having an inverse modeller stage and an inverse discrete cosine transform stage, the improvement characterized by a processing stage, positioned between the inverse modeller stage and the inverse discrete cosine transform stage, responsive to a token table for processing data.","In accordance with the invention, the token may be a QUANT_TABLE token for causing the processing stage to generate a quantization table.","The present invention also provides a Huffman decoder for decoding data words encoded according to the Huffman coding provisions of either H.261, JPEG or MPEG standards, the data words including an identifier that identifies the Huffman code standard under which the data words were coded, and comprising means for receiving the Huffman coded data words, means for reading the identifier to determine which standard governed the Huffman coding of the received data words, means for converting the data words to JPEG Huffman coded data words, if necessary, in response to reading the identifier that identifies the Huffman coded data words as H.261 or MPEG Huffman coded, means operably connected to the Huffman coded data words receiving means for generating an index number associated with each JPEG Huffman coded data word received from the Huffman coded data words receiving means, and means for operating a lookup table containing a Huffman code table having the format used under the JPEG standard to transmit JPEG Huffman table information, including an input for receiving an index number from the index number generating means, and including an output that is a decoded data word corresponding to the index number.","The invention further relates, in varying degrees of scope, to a method for decoding data words encoded according to the Huffman coding provisions of either H.261, JPEG or MPEG standards, the data words including an identifier that identifies the Huffman code standard under which the data words were coded, such steps comprising receiving the Huffman coded data words, including reading the identifier to determine which standard governed the Huffman coding of the received data words, if necessary, in response to reading the identifier that identifies the Huffman coded data words as H.261 or MPEG Huffman coded, generating an index number associated with each JPEG Huffman coded data word received, operating a lookup table containing a Huffman code table having the format used under the JPEG standard to transmit JPEG Huffman table information, including receiving an index number, and generating a decoded data word corresponding to the received index number.","The above and other objectives and advantages of the invention will become apparent from the following more detailed description when taken in conjunction with the accompanying drawings.","In the ensuing description of the practice of the invention, the following terms are frequently used and are generally defined by the following glossary:",{"@attributes":{"id":"p-0253","num":"0000"},"ul":{"@attributes":{"id":"ul0003","list-style":"none"},"li":["BLOCK: An 8-row by 8-column matrix of pels, or 64 DCT coefficients (source, quantized or dequantized).","CHROMINANCE (COMPONENT): A matrix, block or single pel representing one of the two color difference signals related to the primary colors in the manner defined in the bit stream. The symbols used for the color difference signals are Cr and Cb.","CODED REPRESENTATION: A data element as represented in its encoded form.","CODED VIDEO BIT STREAM: A coded representation of a series of one or more pictures as defined in this specification.","CODED ORDER: The order in which the pictures are transmitted and decoded. This order is not necessarily the same as the display order.","COMPONENT: A matrix, block or single pel from one of the three matrices (luminance and two chrominance) that make up a picture.","COMPRESSION: Reduction in the number of bits used to represent an item of data.","DECODER: An embodiment of a decoding process.","DECODING (PROCESS): The process defined in this specification that reads an input coded bitstream and produces decoded pictures or audio samples.","DISPLAY ORDER: The order in which the decoded pictures are displayed. Typically, this is the same order in which they were presented at the input of the encoder.","ENCODING (PROCESS): A process, not specified in this specification, that reads a stream of input pictures or audio samples and produces a valid coded bitstream as defined in this specification.","INTRA CODING: Coding of a macroblock or picture that uses information only from that macroblock or picture.","LUMINANCE (COMPONENT): A matrix, block or single pel representing a monochrome representation of the signal and related to the primary colors in the-manner defined in the bit stream. The symbol used for luminance is Y.","MACROBLOCK: The four 8 by 8 blocks of luminance data and the two (for 4:2:0 chroma format) four (for 4:2:2 chroma format) or eight (for 4:4:4 chroma format) corresponding 8 by 8 blocks of chrominance data coming from a 16 by 16 section of the luminance component of the picture. Macroblock is sometimes used to refer to the pel data and sometimes to the coded representation of the pel values and other data elements defined in the macroblock header of the syntax defined in this part of this specification. To one of ordinary skill in the art, the usage is clear from the context.","MOTION COMPENSATION: The use of motion vectors to improve the efficiency of the prediction of pel values. The prediction uses motion vectors to provide offsets into the past and\/or future reference pictures containing previously decoded pel values that are used to form the prediction error signal.","MOTION VECTOR: A two-dimensional vector used for motion compensation that provides an offset from the coordinate position in the current picture to the coordinates in a reference picture.","NON-INTRA CODING: Coding of a macroblock or picture that uses information both from itself and from macroblocks and pictures occurring at other times.","PEL. Picture element.","PICTURE: Source, coded or reconstructed image data. A source or reconstructed picture consists of three rectangular matrices of 8-bit numbers representing the luminance and two chrominance signals. For progressive video, a picture is identical to a frame, while for interlaced video, a picture can refer to a frame, or the top field or the bottom field of the frame depending on the context.","PREDICTION: The use of a predictor to provide an estimate of the pel value or data element currently being decoded.","RECONFIGURABLE PROCESS STAGE (RPS): A stage, which in response to a recognized token, reconfigures itself to perform various operations.","SLICE: A series of macroblocks.","TOKEN: A universal adaptation unit in the form of an interactive interfacing messenger package for control and\/or data functions.","START CODES [SYSTEM AND VIDEO]: 32-bit codes embedded in a coded bitstream that are unique. They are used for several purposes including identifying some of the structures in the coding syntax.","VARIABLE LENGTH CODING; VLC: A reversible procedure for coding that assigns shorter code-words to frequent events and longer code-words to less frequent events.","VIDEO SEQUENCE: A series of one or more pictures.\n\nDetailed Descriptions\n"]}},"As an introduction to the most general features used in a pipeline system which is utilized in the preferred embodiments of the invention,  is a greatly simplified illustration of six cycles of a six-stage pipeline. (As is explained in greater detail below, the preferred embodiment of the pipeline includes several advantageous features not shown in FIG. .).","Referring now to the drawings, wherein like reference numerals denote like or corresponding elements throughout the various figures of the drawings, and more particularly to , there is shown a block diagram of six cycles in practice of the present invention. Each row of boxes illustrates a cycle and each of the different stages are labelled A-F, respectively. Each shaded box indicates that the corresponding stage holds valid data, i.e., data that is to be processed in one of the pipeline stages. After processing (which may involve nothing more than a simple transfer without manipulation of the data) valid data is transferred out of the pipeline as valid output data.","Note that an actual pipeline application may include more or fewer than six pipeline stages. As will be appreciated, the present invention may be used with any number of pipeline stages. Furthermore, data may be processed in more than one stage and the processing time for different stages can differ.","In addition to clock and data signals (described below), the pipeline includes two transfer control signals\u2014a \u201cVALID\u201d signal and an \u201cACCEPT\u201d signal. These signals are used to control the transfer of data within the pipeline. The VALID signal, which is illustrated as the upper of the two lines connecting neighboring stages, is passed in a forward or downstream direction from each pipeline stage to the nearest neighboring device. This device may be another pipeline stage or some other system. For example, the last pipeline stage may pass its data on to subsequent processing circuitry. The ACCEPT signal, which is illustrated as the lower of the two lines connecting neighboring stages, passes in the other direction upstream to a preceding device.","A data pipeline system of the type used in the practice of the present invention has, in preferred embodiments, one or more of the following characteristics:\n\n","Although not shown in , there are data lines, either single lines or several parallel lines, which form a data bus that also lead into and out of each pipeline stage. As is explained and illustrated in greater detail below, data is transferred into, out of, and between the stages of the pipeline over the data lines.","Note that the first pipeline stage may receive data and control signals from any form of preceding device. For example, reception circuitry of a digital image transmission system, another pipeline, or the like. On the other hand, it may generate itself, all or part of the data to be processed in the pipeline. Indeed, as is explained below, a \u201cstage\u201d may contain arbitrary processing circuitry, including none at all (for simple passing of data) or entire systems (for example, another pipeline or even multiple systems or pipelines), and it may generate, change, and delete data as desired.","When a pipeline stage contains valid data that is to be transferred down the pipeline, the VALID signal, which indicates data validity, need not be transferred further than to the immediately subsequent pipeline stage. A two-wire interface is, therefore, included between every pair of pipeline stages in the system. This includes a two-wire interface between a preceding device and the first stage, and between a subsequent device and the last stage, if such other devices are included and data is to be transferred between them and the pipeline.","Each of the signals, ACCEPT and VALID, has a HIGH and a low value. These values are abbreviated as \u201cH\u201d and \u201cL\u201d, respectively. The most common applications of the pipeline. in practicing the invention, will typically be digital. In such digital implementations, the HIGH value may, for example, be a logical \u201c1\u201d and the LOW value may be a logical \u201c0\u201d. The system is not restricted to digital implementations, however, and in analog implementations, the HIGH value may be a voltage or other similar quantity above (or below) a set threshold, with the LOW value being indicated by the corresponding signal being below (or above) the same or some other threshold. For digital applications, the present invention may be implemented using any known technology, such as CMOS, bipolar etc.","It is not necessary to use a distinct storage device and wires to provide for storage of VALID signals. This is true even in a digital embodiment. All that is required is that the indication of \u201cvalidity\u201d of the data be stored along with the data. By way of example only, in digital television pictures that are represented by digital values, as specified in the international standard CCIR 601, certain specific values are not allowed. In this system, eight-bit binary numbers are used to represent samples of the picture and the values zero and 255 may not be used.","If such a picture were to be processed in a pipeline built in the practice of the present invention, then one of these values (zero, for example) could be used to indicate that the data in a specific stage in the pipeline is not valid. Accordingly, any non-zero data would be deemed to be valid. In this example, there is no specific latch that can be identified and said to be storing the \u201cvalidness\u201d of the associated data. Nonetheless, the validity of the data is stored along with the data.","As shown in , the state of the VALID signal into each stage is indicated as an \u201cH\u201d or an \u201cL\u201d on an upper, right-pointed arrow. Therefore, the VALID signal from Stage into Stage B is LOW, and the VALID signal from Stage D into Stage E is HIGH. The state of the ACCEPT signal into each stage is indicated as an \u201cH\u201d or an \u201cL\u201d on a lower, left-pointing arrow. Hence, the ACCEPT signal from Stage E into Stage D is HIGH, whereas the ACCEPT signal from the device connected downstream of the pipeline into Stage F is LOW.","Data is transferred from one stage to another during a cycle (explained below) whenever the ACCEPT signal of the downstream stage into its upstream neighbor is HIGH. If the ACCEPT signal is LOW between two stages, then data is not transferred between these stages.","Referring again to , if a box is shaded, the no corresponding pipeline stage is assumed, by way of example, to contain valid output data. Likewise, the VALID signal which is passed from that stage to the following stage is HIGH.  illustrates the pipeline when stages B, D, and E contain valid data. Stages A, C, and F do not contain valid data. At the beginning, the VALID signal into pipeline stage A is HIGH, meaning that the data on the transmission line into the pipeline is valid.","Also at this time, the ACCEPT signal into pipeline stage F is LOW, so that no data, whether valid or not, is transferred out of Stage F. Note that both valid and invalid data is transferred between pipeline stages. Invalid data, which is data not worth saving, may be written over, thereby, eliminating it from the pipeline. However, valid data must not be written over since it is data that must be saved for processing or use in a downstream device e.g., a pipeline stage, a device or a system connected to the pipeline that receives data from the pipeline.","In the pipeline illustrated in , Stage E contains valid data D, Stage D contains valid data D, Stage B contains valid data D, and a device (not shown) connected t the pipeline upstream contains data D that is to be transferred into and processed in the pipeline. Stages B, D and E, in addition to the upstream device, contain valid data and, therefore, the VALID signal from these stages or devices into their respective following devices is HIGH. The VALID signal from the Stages A, C and F is, however, LOW since these stages do not contain valid data.","Assume now that the device connected downstream from the pipeline is not ready to accept data from the pipeline. The device signals this by setting the corresponding ACCEPT signal LOW into Stage F. Stage F itself, however, does not contain valid data and is, therefore, able to accept data from the preceding Stage E. Hence, the ACCEPT signal from Stage F into Stage E is set HIGH.","Similarly, Stage E contains valid data and Stage F is ready to accept this data. Hence, Stage E can accept new data as long as the valid data D is first transferred to Stage F. In other words, although Stage F cannot transfer data downstream, all the other stages can do so without any valid data being overwritten or lost. At the end of Cycle , data can, therefore, be \u201cshifted\u201d one step to the right. This condition is shown in Cycle .","In the illustrated example, the downstream device is still not ready to accept new data in Cycle  and, therefore, the ACCEPT signal into Stage F is still LOW. Stage F cannot, therefore, accept new data since doing so would cause valid data D to be overwritten and lost. The ACCEPT signal from Stage F into Stage E, therefore, goes LOW, as does the ACCEPT signal from Stage E into Stage D since Stage E also contains valid data D. All of the Stages A-D, however, are able to accept new data (either because they do not contain valid data or because they are able to shift their valid data downstream and accept near data) and they signal this condition to their immediately preceding neighbors by setting their corresponding ACCEPT signals HIGH.","The state of the pipelines after Cycle  is illustrated in  for the row labelled Cycle . By way of example, it is assumed that the downstream device is still not ready to accept new data from Stage F (the ACCEPT signal into Stage F is LOW). Stages E and F, therefore, are still \u201cblocked\u201d, but in Cycle , Stage D has received the valid data D, which has overwritten the invalid data that was previously in this stage. Since Stage D cannot pass on data D in Cycle , it cannot accept new data and, therefore, sets the ACCEPT signal into Stage C LOW. However, stages A-C are ready to accept new data and signal this by setting their corresponding ACCEPT signals HIGH. Note that data D has been shifted from Stage A to Stage B.","Assume now that the downstream device becomes ready to accept new data in Cycle . It signals this to the pipeline by setting the ACCEPT signal into Stage F HIGH. Although Stages C-F contain valid data, they can now shift the data downstream and are, thus, able to accept new data. Since each stage is therefore able to shift data one step downstream, they set their respective ACCEPT signals out HIGH.","As long as the ACCEPT signal into the final pipeline stage (in this example, Stage F) is HIGH, the pipeline shown in  acts as a rigid pipeline and simply shifts data one step downstream on each cycle. Accordingly, in Cycle , data D, which was contained in Stage F in Cycle , is shifted out of the pipeline to the subsequent device, and all other data is shifted one step downstream.","Assume now, that the ACCEPT signal into Stage F goes LOW in Cycle . Once again, this means that Stages D-F are not able to accept new data, and the ACCEPT signals out of these stages into their immediately preceding neighbors go LOW.","Hence, the data D, D and D cannot shift downstream, however, the data D can. The corresponding state of the pipeline after Cycle  is, thus, shown in  as Cycle .","The ability of the pipeline, in accordance with the preferred embodiments of the present invention, to \u201cfill up\u201d empty processing stages is highly advantageous since the processing stages in the pipeline thereby become decouple from one another. In other words, even though a pipeline stage may not be ready to accept data, the entire pipeline does not have to stop and wait for the delayed stage. Rather, when one stage is unable to accept valid data it simply forms a temporary \u201cwall\u201d in the pipeline. Nonetheless, stages downstream of the \u201cwall\u201d can continue to advance valid data even to circuitry connected to the pipeline, and stages to the left of the \u201cwall\u201d can still accept and transfer valid data downstream. Even when several pipeline stages temporarily cannot accept new data, other stages can continue to operate normally. In particular, the pipeline can continue to accept data into its initial stage A as long as stage A does not already contain valid data that cannot be advanced due to the next stage not being ready to accept new data. As this example illustrates, data can be transferred into the pipeline and between stages even when one or more processing stages is blocked.","In the embodiment shown in , it is assumed that the various pipeline stages do not store the ACCEPT signals they receive from their immediately following neighbors. Instead, whenever the ACCEPT signal into a downstream stage goes LOW, this LOW signal is propagated upstream as far as the nearest pipeline stage that does not contain valid data. For example, referring to , it was assumed that the ACCEPT signal into Stage F goes LOW in Cycle . In Cycle , the LOW signal propagates from Stage F back to Stage D.","In Cycle , when the data D is latched into Stage D, the ACCEPT signal propagates upstream four stages to Stage C. When he ACCEPT signal into Stage F goes HIGH in Cycle , it must propagate upstream all the way to Stage C. In other words, the change in the ACCEPT signal must propagate back four stages. It is not necessary, however, in the embodiment illustrated in , for the ACCEPT signal to propagate all the way back to the beginning of the pipeline if there is some intermediate stage that is able to accept new data.","In the embodiment illustrated in , each pipeline stage will still need separate input and output data latches to allow data to be transferred between stages without unintended overwriting. Also, although the pipeline illustrated in  is able to \u201ccompress\u201d when downstream pipeline stages are blocked, i.e., they cannot pass on the data they contain, the pipeline does not \u201cexpand\u201d to provide stages that contain no valid data between stages that do contain valid data. Rather, the ability to compress depends on there being cycles during which no valid data is presented to the first pipeline stage.","In Cycle , for example, if the ACCEPT signal into Stage F remained LOW and valid data filled pipeline stages A and B, as long as valid data continued to be presented to Stage A the pipeline would not be able to compress any further and valid input data could be lost. Nonetheless, the pipeline illustrated in  reduces the risk of data loss since at is able to compress as long as there is a pipeline stage that does not contain valid data.",{"@attributes":{"id":"p-0283","num":"0315"},"figref":["FIG. 2","FIG. 2"]},"For ease of comparison only, the input data and ACCEPT spirals into the pipeline embodiment shown in  are the sane as in the pipeline embodiment shown in FIG. . Accordingly, stages E, D and B contain valid data D, D and D, respectively. The ACCEPT signal into Stage F is LOW; are data D is presented to the beginning pipeline Stage A. In , three lines are shown connecting each neighboring pair of pipeline stages. The uppermost line, which may be a bus, is a data line. The middle line is the line over which the VALID signal is transferred, while the bottom line is the line over which the ACCEPT signal is transferred. Also, as before, the ACCEPT signal into Stage F remains LOW except in Cycle . Furthermore, additional data D is presented to the pipeline in Cycle .","In , each pipeline stage is represented as a block divided into two halves to illustrate that each stage in this embodiment of the pipeline includes primary and secondary data storage elements. In , the primary data storage is shown as the right half of each stage. However, it will be appreciated that this delineation is for the purpose of illustration only and is not intended as a limitation.","As  illustrates, as long as the ACCEPT signal into a stage is HIGH, data is transferred from the primary storage elements of the stage to the secondary storage elements of the following stage during any given cycle. Accordingly, although the ACCEPT signal into Stage F is LOW, the ACCEPT signal into all other stages is HIGH so that the data D, D and D is shifted forward one stage in Cycle  and the data D is shifted into the first Stage A.","Up to this point, the pipeline embodiment shown in  acts in a manner similar to the pipeline embodiment shown in FIG. . The ACCEPT signal from Stage F into Stage E, however, is HIGH even though the ACCEPT signal into Stage F is LOW. As is explained below, because of the secondary storage elements, it is not necessary for the LOW ACCEPT signal to propagate upstream beyond Stage F. Moreover, by leaving the ACCEPT signal into Stage E HIGH, Stage F signals that it is ready to accept new data. Since Stage F is not able transfer the data D in its primary storage elements downstream (the ACCEPT signal into Stage F is LOW) in Cycle , Stage E must, therefore, transfer the data D into the secondary storage elements of Stage F. Since both the primary and the secondary storage elements of Stage F now contain valid data that cannot be passed on, the ACCEPT signal from Stage F into Stage E is set LOW. Accordingly, this represents a propagation of the LOW ACCEPT signal back only one stage relative to Cycle , whereas this ACCEPT signal had to be propagated back all the way to Stage C in the embodiment shown in FIG. .","Since Stages A-E are able to pass on their data, the ACCEPT signals from the stages into their immediately preceding neighbors are set HIGH. Consequently, the data D and D are shifted one stage to the right so that, in Cycle , they are loaded into the primary data storage elements of Stage E and Stage C, respectively. Although Stage E now contains valid data D in its primary storage elements, its secondary storage elements can still be used to store other data without risk of over-writing any valid data.","Assume now, as before, that the ACCEPT signal into Stage F becomes HIGH in Cycle . This indicates that the downstream device to which the pipeline passes data is ready to accept data from the pipeline. Stage F, however, has set its ACCEPT signal LOW and, thus, indicates to Stage E that Stage F is not prepared to accept new data. Observe that the ACCEPT signals for each cycle indicate what will \u201chappen\u201d in the next cycle, that is, whether data will be passed on (ACCEPT HIGH) or whether data must remain in place (ACCEPT LOW)). Therefore, from Cycle  to Cycle , the data D is passed from Stage F to the following device, the data D is shifted from secondary to primary storage in Stage F, but the data D in Stage E is not transferred to Stage F. The data D and D can be transferred into the following pipeline stages as normal since the following stages have their ACCEPT signals HIGH.","Comparing the state of the pipeline in Cycle  and Cycle , it can be seen that the provision of secondary storage elements, enables the pipeline embodiment shown in  to expand, that is, to free up data storage elements into which valid data can be advanced. For example, in Cycle , the data blocks D, D and D form a \u201csolid wall\u201d since their data cannot be transferred until the ACCEPT signal into Stage F goes HIGH. Once this signal does become HIGH, however, data D is shifted out of the pipeline, data D is shifted into the primary storage elements of Stage F, and the secondary storage elements of Stage F become free to accept new data if the following device is not able to receive the data D and the pipeline must once again \u201ccompress.\u201d This is is shown in Cycle , for which the data D has been shifted into the secondary storage elements of Stage F and the data D has been passed on from Stage D to Stage E as normal.",{"@attributes":{"id":"p-0291","num":"0323"},"figref":["FIGS. 3","FIG. 3","FIG. 2"],"i":["a","a","b","b"],"b":["1","3","2","3","1","3","2","0","1"]},"As shown in , each pipeline stage is represented as having two separate boxes which illustrate the primary and secondary storage elements. Also, although the VALID signal and the data lines connect the various pipeline stages as before, for ease of illustration, only the ACCEPT signal is shown in  change of state during a clock phase of certain of the ACCEPT signals is indicated in  using an upward-pointing arrow for changes from LOW to HIGH Similarly, a downward-pointing arrow for changes from HIGH to LOW. Transfer of data from one storage element to another is indicated by a large open arrow. It is assumed that the VALID signal out of the primary or secondary storage elements of any given stage is HIGH whenever the storage elements contain valid data.","In , each cycle is shown as consisting of a full period of the non-overlapping clock phases \u00f8 and \u00f8. As is explained in greater detail below, data is transferred from the secondary storage elements (shown as the left box in each stage) to the primary storage elements (shown as the right box in each stage) during clock cycle \u00f8, whereas data is transferred from the primary storage elements of one stage to the secondary storage elements of the following stage during the clock cycle \u00f8.  also illustrates that the primary and secondary storage elements in each stage are further connected via an internal acceptance line to pass an ACCEPT signal in the same manner that the ACCEPT signal is passed from stage to stage. In this way, the secondary storage element will know when it can pass its date to the primary storage element.",{"@attributes":{"id":"p-0294","num":"0326"},"figref":["FIG. 3","FIG. 3"],"b":["1","1","1","2","3","1","1","1","2"]},"The ACCEPT signal from the secondary storage elements of Stage F into the primary storage elements of Stage E is also set HIGH since the secondary storage elements of Stage F do not contain valid data. As before, since the primary storage elements of Stage F are able to accept data, data in all the upstream primary and secondary storage elements can be shifted downstream without any valid data being overwritten. The shift of data from one stage to the next takes place during the next \u00f8 phase in Cycle . For example, the valid data D contained in the primary storage element of Stage E is shifted into the secondary storage element of Stage F, the data D is shifted into the pipeline, that is, into the secondary storage element of Stage A, and so forth.","The primary storage element of Stage F still does not contain valid data during the \u00f8 phase in Cycle  and, therefore, the ACCEPT signal from the primary storage elements into the secondary storage elements of Stage F remains HIGH. During the \u00f8 phase in Cycle , data can therefore be shifted yet another step to the right, i.e., from the secondary to the primary storage elements within each stage.","However, once valid data is loaded into the primary storage elements of Stage F, if the ACCEPT into Stage F from the downstream device is still LOW, it is not possible to shift data out of the secondary storage element of Stage F without overwriting and destroying the valid data D. The ACCEPT signal from the primary storage elements into he secondary storage elements of Stage F therefore goes LOW. Data D, however, can still be shifted into the secondary storage of Stage F since it did not contain valid data and its ACCEPT signal out was HIGH.","During the \u00f8 phase of Cycle , it is not possible to shift data D into the primary storage elements of Stage F although data can be shifted within all the previous stages. Once valid data is loaded into the secondary storage elements of Stage F, however, Stage F is not able to pass on this data. It signals this event setting its ACCEPT signal out LOw.","Assuming that the ACCEPT signal into Stage F remains LOW, data upstream of Stage F can continue to be shifted between stages and within stages on the respective clock phases until the next valid data block D reaches the primary storage elements of Stage E. As illustrated, this condition is reached during the \u00f8 phase of Cycle .","During the \u00f8 phase of Cycle , data D has been loaded into the primary storage element of Stage E. Since this data cannot be shifted further, the ACCEPT signal out of the primary storage elements of Stage E is set LOW. Upstream data can be shifted as normal.","Assume now, as in Cycle  of , that the device connected downstream of the pipeline is able to accept pipeline data. It signals this event by setting the ACCEPT signal into pipeline Stage F HIGH during the \u00f8 phase of Cycle . The primary storage elements of Stage F can now shift data to the right and they are also able to accept new data. Hence, the data D was shifted out during the \u00f8 phase of Cycle  so that the primary storage elements of Stage F no longer contain data that must be saved. During the \u00f8 phase of Cycle , the data D is, therefore, shifted within Stage F from the secondary storage elements to the primary storage elements. The secondary storage elements of Stage F are also able to accept new data and signal this by setting the ACCEPT signal into the primary storage elements of Stage E HIGH. During transfer of data within a stage, that is, from its secondary to its primary storage elements, both sets of storage elements will contain the same data, but the data in the secondary storage elements can be overwritten with no data loss since this data will also be held in the primary storage elements. The same holds true for data transfer from the primary storage elements of one stage into the secondary storage elements of a subsequent stage.","Assume now, that the ACCEPT signal into the primary storage elements of Stage F goes LOW during the \u00f8 phase in Cycle . This means that Stage F is not able to transfer the data D out of the pipeline. Stage F, consequently, sets the ACCEPT signal from its primary to its secondary storage elements LOW to prevent overwriting of the valid data D. The data D stored in the secondary storage elements of Stage F, however, can be overwritten without loss, and the data D, is therefore, transferred into the secondary storage elements of Stage F during the \u00f8 phase of Cycle . Data D and D can be shifted downstream as normal. Once valid data D is stored in Stage F along with data D, as long as the ACCEPT signal into the primary storage elements of Stage F is LOW, neither of the secondary storage elements can accept new data, and it signals this by setting the ACCEPT signal into Stage E LOW.","When the ACCEPT signal into the pipeline from the downstream device changes from LOW to HIGH or vice versa, this change does not have to propagate upstream within the pipeline further than to the immediately preceding storage elements (within the same stage or within the preceding pipeline stage). Rather, this change propagates upstream within the pipeline one storage element block per clock phase.","As this example illustrates, the concept of a \u201cstage\u201d in the pipeline structure illustrated in  is to some extent a matter of perception. Since data is transferred within a stage (from the secondary to the primary storage elements) as it is between stages (from the primary storage elements of the upstream stage into the secondary storage elements of the neighboring downstream stage), one could us: as well consider a stage to consist of \u201cprimary\u201d storage elements followed by \u201csecondary storage elements\u201d instead of as illustrated in FIG. . The concept of \u201cprimary\u201d and \u201csecondary\u201d storage elements is, therefore, mostly a question of labeling. In , the \u201cprimary\u201d storage elements can also be referred to as \u201coutput\u201d storage elements, since they are the elements from which data is transferred out of a stage into a following stage or device, and the \u201csecondary\u201d storage elements could be \u201cinput\u201d storage elements for the same stage.","In explaining the aforementioned embodiments, as shown in , only the transfer of data under the control of the ACCEPT and VALID signals has been mentioned. It is to be further understood that each pipeline stage may also process the data it has received arbitrarily before passing it between its internal storage elements or before passing it to the following pipeline stage. Therefore, referring once again to , a pipeline stage can, therefore, be defined as the portion of the pipeline that contains input and output storage elements and that arbitrarily processes data stored in its storage elements.","Furthermore, the \u201cdevice\u201d downstream from the pipeline Stage F, need not be some other type of hardware structure, but rather it can be another section of the same or part of another pipeline. As illustrated below, a pipeline stage can set its ACCEPT signal LOW not only when all of the downstream storage elements are filled with valid data, but also when a stage requires more than one clock phase to finish processing its data. This also can occur when it creates valid data in one or both of its storage elements. In other words, it is not necessary for a stage simply to pass on the ACCEPT signal based on whether or not the immediately downstream storage elements contains valid data that cannot be passed on. Rather, the ACCEPT signal itself may also be altered within the stage or, by circuitry external to the stage, in order control the passage of data between adjacent storage elements. The VALID signal may also be processed in an analogous manner.","A great advantage of the two-wire interface,(one wire for each of the VALID and ACCEPT signals) is its ability to control the pipeline without the control signals needing to propagate back up the pipeline all the way to its beginning stage. Referring once again to , Cycle , for example, although stage F \u201ctells\u201d stage E that it cannot accept data, and stage E tells stage D, and stage D tells stage C. Indeed, if there had been more stages containing valid data, then this signal would have propagated back even further along the pipeline. In the embodiment shown in , Cycle , the LOW ACCEPT signal is not propagated any further upstream than to Stage E and, then, only to its primary storage elements.","As described below, this embodiment is able to achieve this flexibility without adding significantly to the silicon area that is required to implement the design. Typically, each latch in the pipeline used for data storage requires only a single extra transistor (which lays out very efficiently in silicon). In addition, two extra latches and a small number of gates are preferably added to process the ACCEPT and VALID signals that are associated with the data latches in each half-stage.",{"@attributes":{"id":"p-0309","num":"0341"},"figref":"FIG. 4","b":"3"},"By way of example only, it is assumed that eight-bit data is to be transferred (with or without further Manipulation in optional combinatorial logic circuits) in parallel through the pipeline. However, it will be appreciated that either ore or less than eight-bit data can be used in practicing the invention. Furthermore, the two-wire interface in accordance with this embodiment is, however, suitable for use with any data bus width, and the data bus width may even change from one stage to the next if a particular application so requires. The interface in accordance with this embodiment can also be used to process analog signals.","As discussed previously, while other conventional timing arrangements may be used, the interface is preferably controlled by a two-phase, non-overlapping clock. In , these clock phase signals are referred to as PH and PH. In , a line is shown for each clock phase signal.","Input data enters a pipeline stage over a multi-bit data bus IN_DATA and is transferred to a following pipeline stage or to subsequent receiving circuitry over an output data bus OUT_DATA. The input data is first loaded in a manner described below into a series of input latches (one for each input data signal) collectively referred to as LDIN, which constitute the secondary storage elements described above.","In the illustrated example of this embodiment, it is assumed that the Q outputs of all latches follow their D inputs, that is, they are \u201cloaded\u201d, when the clock input is HIGH, i.e., at a logic \u201c1\u201d level. Additionally, the Q outputs hold their last values. In other words, the Q outputs are \u201clatched\u201d on the falling edge of their respective clock signals. Each latch has for its clock either one of two non-overlapping clock signals PH or PH (as shown in FIG. ), or the logical AND combination of one of these clock signals PH, PH and one logic signal. The invention works equally well, however, by providing latches that latch on he rising edges of the clock signals, or any other known latching arrangement, as long as conventional methods are applied to ensure proper timing of the latching operations.","The output data from the input data latch LDIN passes via an arbitrary and optional combinatorial logic circuit B, which may be provided to convert output data from input later. LDIN into intermediate data, which is then later loaded in an output data latch LDOUT, which comprises the primary storage elements described above. The output from the output data latch LDOUT may similarly pass through an arbitrary and optional combinatorial logic circuit B before being passed onward as OUT_DATA to the next device downstream. This may be another pipeline stage or any other device connected to the pipeline.","In the practice of the present invention, each stage of the pipeline also includes a validation input latch LVIN, a validation output latch LVOUT, an acceptance input latch LAIN, and an acceptance output latch LAOUT. Each of these four latches is, preferably, a simple, single-stage latch. The outputs from latches LVIN, LVOUT, LAIN and LAOUT are, respectively, QVIN, QVOUT, QAIN, QAOUT. The output signal QVIN from the validation input latch is connected either directly as an input to the validation output latch LVOUT, or via intermediate logic devices or circuits that may alter the signal.","Similarly, the output validation signal QVOUT of a given stage may be connected either directly to the input of the validation input latch QVIN of the following stage, or via intermediate devices or logic circuits, which may alter the validation signal. This output QVIN is also connected to a logic gate (to be described below), whose output is connected to the input of the acceptance input latch LAIN. The output QAOUT from the acceptance output latch LAOUT is connected to a similar logic gate (described below), optionally via another logic gate.","As shown in , the output validation signal QVOUT forms an OUT_VALID signa that can be received by subsequent stages as an IN_VALID signal, or simply to indicate valid data to subsequent circuity connected to the pipeline. The readiness of the following circuit or stage to accept data is indicated to each stage as the signal OUT_ACCEPT, which is connected as the input to the acceptance output latch LAOUT, preferably via logic circuitry, which is described below. Similarly, the output QAOUT of the acceptance output latch LAOUT is connected as the input to the acceptance input latch LAIN, preferably via logic circuitry, which is described below.","In practicing the present invention, the output signals QVIN, QVOUT from the validation latches LVIN, LVOUT are combined with the acceptance signals QAOUT, OUT_ACCEPT, respectively, to form the inputs to the acceptance latches LAIN, LAOUT, respectively. In the embodiment illustrated in , these input signals are formed as the logical NAND combination of the respective validation signals QVIN, QVOUT, with the logical inverse of the respective acceptance output signals QAOUT, OUT_ACCEPT. Conventional logic gates, NAND and NAND, perform the NAND operation, and the inverters INV, INV form the logical inverses of the respective acceptance signals.","As is well known in the art of digital design, the output from a NAND gate is a logical \u201c1\u201d when any or all of its input signals are in the logical \u201c0\u201d state. The output from a NAND gate is, therefore, a logical \u201c0\u201d only when all of its inputs are in the logical \u201c1\u201d state. Also well known in the art, is that the output of a digital inverter such as INV is a logical \u201c1\u201d when its input signal is a \u201c0\u201d and is a \u201c0\u201d when its input signal is a \u201c1\u201d.","The inputs to the NAND gate NAND are, therefore, QVIN and NOT (QAOUT), where \u201cNOT\u201d indicates binary inversion. Using known techniques, the input to the acceptance latch LAIN can be resolved as follows:\n\nNAND(QVIN,NOT(QAOUT))=NOT(QVIN) OR QAOUT\n","In other words, the combination of the inverter INV and the NAND gate NAND is a logical \u201c1\u201d either when the signal QVIN is a \u201c1\u201d or the signal QAOUT is a \u201c1\u201d, or both. The gate NAND and the inverter INV can, therefore, be implemented by a single OR gate that has one of its inputs tied directly to the QAOUT output of the acceptance latch LAOUT and its other input tied to the inverse of the output signal QVIN of the validation input latch LVIN.","As is well known in the art of digital design, many latches suitable for use as the validation and acceptance latches may have two outputs, Q and NOT(Q), that is, Q and its logical inverse. If such latches are chosen, the one input to the OR gate can, therefore, be tied directly to the NOT(Q) output of the validation latch LVIN. The gate NAND and the inverter INVL can be implemented using well known conventional techniques. Depending on the latch architecture used, however, it may be more efficient to use a latch without an inverting output, and to provide instead the gate NANDI and the inverter INV, both of which also can be implemented efficiently in a silicon device. Accordingly, any known arrangement may be used to generate the Q signal and\/or its logical inverse.","The data and validation latches LDIN, LDOUT, LVIN and LVOUT, load their respective data inputs when both clock signals (PH at the input side and PH at the output side) and the output from the acceptance latch of the same side are logical \u201c1\u201d. Thus, the clock signal (PH for the input latches LDIN and LVIN) and the output of the respective acceptance latch (in this case, LAIN) are used in a logical AND manner and data is loaded only when they are both logical \u201c1\u201d.","In particular applications, such as CMOS implementations of the latches, the logical AND operation that controls the loading (via the illustrated CK or enabling \u201cinput\u201d) of the latches can be implemented easily in a conventional manner by connecting the respective enabling input signals (for example, PH and QAIN for the latches LVIN and LDIN), to the gates of MOS transistors connected in series in the input lines of the latches. Consequently, is necessary to provide an actual logic AND gate, which might cause problems of timing due to propagation delay in high-speed applications.","The AND gate shown in the figures, therefore, only indicates the logical function to be performed in generating the enable signals of the various latches.","Thus, the data latch LDIN loads input data only when PH and QAIN are both \u201c1\u201d. It will latch this data when either of these two signals goes to a \u201c0\u201d.","Although only one of the clock phase signals PH or PH, is used to clock the data and validation latches at the input (and output) side of the pipeline stage, the other clock phase signal is used, directly, to clock the acceptance latch at the same side. In other words, the acceptance latch on is either side (input or output) of a pipeline stage is preferably clocked \u201cout of phase\u201d with the data and validation latches on the same side. For example, PH is used to clock the acceptance input latch, although PH is used in generating the clock signal CK for the data latch LDIN and the validation latch LVIN.","As an example of the operation of a pipeline augmented by the two-wire validation and acceptance circuitry assume that no valid data is initially presented at the input to the circuit, either from a preceding pipeline stage, or from a transmission device. In other words, assume that the validation input signal IN_VALID to the illustrated stage has not gone to a \u201c1\u201d since the system was most recently reset. Assume further that several clock cycles have taken place since the system was last reset and, accordingly, the circuitry has reached a steady-state condition. The validation input signal QVIN from the validation latch LIVN is, therefore, loaded as a \u201c0\u201d during the next positive period of the clock PH. The input to the acceptance input latch LAIN (via the gate NAND or another equivalent gate;, is, therefore, loaded as a \u201c1\u201d during the next positive period of the clock signal PH. In other words, since the data in the data input latch LDIN is not valid, the stage signals that it is ready to accept input data (since it does not hold any data worth saving).","In this example, note that the signal IN_ACCEPT is used to enable the data and validation latches LDIN and LVIN. Since the signal IN_ACCEPT at this time is a \u201c1\u201d, these latches effectively work as conventional transparent latches so that whatever data is on the IN_DATA bus simply is loaded into the data latch LDIN as soon as the clock signal PH goes to a \u201c1\u201d. Of course, this invalid data will also be loaded into the next data latch LDOUT of the following pipeline stage as long as the output QAOUT from its acceptance latch is a \u201c1\u201d.","Hence, as long as a data latch does not contain valid data, it accepts or \u201cloads\u201d any data presented to it during the next positive period of its respective clock signal. On the other hand, such invalid data is not loaded in any stage dor which the acceptance signal from its corresponding acceptance latch is low (that is, a \u201c0\u201d). Furthermore, the output signal from a validation latch (which forms the validation input signal to the subsequent validation latch) remains a \u201c0\u201d as long as the corresponding IN_VALID (or QVIN) signal to the validation latch is low.","When the input data to a data latch is valid, the validation signal IN_VALID indicates this by rising to a \u201c1\u201d. The output of the corresponding validation latch then rises to a \u201c1\u201d on the next rising edge of its respective clock phase signal. For example, the validation input signal QVIN of latch LVIN rises to a \u201c1\u201d when its corresponding IN_VALID signal goes high (that is, rises to a \u201c1\u201d) on the next rising edge of the clock phase signal PH.","Assume now, instead, that the data input latch LDIN contains valid data. If the data output latch LDOUT is read to accept new data, its acceptance signal QAOUT will be a \u201c1\u201d. In this case, during the next positive period of the clock signal PH, the data latch LDOUT and validation latch LVOUT will be enabled, and the data latch LDOUT will load the data present at its input. This will occur before the next rising edge of the other clock signal PH, since the clock signals are non-overlapping. At the next rising edge of PH, the preceding data latch (LDIN) will, therefore, not latch in new input data from the preceding stage until the data output latch LDOUT has safely latched the data transferred from the latch LDIN.","Accordingly, the same sequence is followed by every adjacent pair of data latches (within a stage or between adjacent stages) that are able to accept data, since they will be operating based on alternate phases of the clock. Any data latch that is not ready to accept new data because it contains valid data that cannot yet be passed, will have an output acceptance signal (the QA output from its acceptance latch LA) that is LOW, and its data latch LDIN or LDCUT will not be loaded. Hence, as long as the acceptance signal (the output from the acceptance latch) of a given stage or side (input or output) of a stage is LOW, its corresponding data latch will not be loaded.",{"@attributes":{"id":"p-0334","num":"0366"},"figref":"FIG. 4","b":["0","0"]},"Note that it is not necessary to reset all of the latches that hold valid data in the pipeline. As depicted in , the validation input latch LVIN is not directly reset by the reset signal NOTRESET, but rather is reset indirectly. Assume that the reset signal NOTRESET drops to a \u201c0\u201d. The validation output signal QVOUT also drops to a \u201c0\u201d, regardless of its previous state, whereupon the input to the acceptance output latch LAOUT (via the gate NANDI) goes HIGH. The acceptance output signal QAOUT also rises to a \u201c1\u201d. This QAOUT value of \u201c1\u201d is then transferred as a \u201c1\u201d to the input of the acceptance input latch LAIN regardless of the state of the validation input signal QVIN. The acceptance input signal QAIN then rises to a \u201c1\u201d at the next rising edge of the clock signal PH. Assuming that the validation signal IN_VALID has been correctly reset to a \u201c0\u201d, then upon the subsequent rising edge of the clock signal PH, the output from the validation latch LVIN will become a \u201c0\u201d, as it would have done if it had been reset directly.","As this example illustrates, it is only necessary to reset the validation latch in only one side of each stage (including the final stage) in order to reset all validation latches. In fact, in many applications, it will not be necessary to reset every other validation latch: If the reset signal NOTRESET can be guaranteed to be low during ore than one complete cycle of both phases PH, PH of the clock, then the \u201cautomatic reset\u201d (a backwards propagation of the reset signal) will occur for validation latches n preceding pipeline stages. Indeed, if the reset signal is held low for at least as many full cycles of both phases of the clock as there are pipeline stages, it will only be necessary to directly reset the validation output latch in the final pipeline stage.",{"@attributes":{"id":"p-0337","num":"0369"},"figref":["FIGS. 5","FIG. 5","FIG. 5"],"i":["a ","b "],"b":["5","0","1","4","1","2"]},"Preferred Data Structure\u2014\u201cTokens\u201d","In the sample application shown in , each stage processes all input data, since there is no control circuity that excludes any stage from allowing input data to pass through its combinatorial logic block B, B, and so forth. To provide greater flexibility, the present invention includes a data structure in which \u201ctokens\u201d are used to distribute data and control information throughout the system. Each token consists of a series of binary bits separated into one or more blocks of token words. Furthermore, the bits fall into one of three types: address bits (A), data bits (D), or an extension bit (E). Assume by way of example and, not necessarily by way of limitation, that data is transferred as words over an 8-bit bus with a 1-bit extension bit line. An example of a four-word token is, in order of transmission:",{"@attributes":{"id":"p-0339","num":"0371"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"28pt","align":"center"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["First word:","E","A","A","A","D","D","D","D","D"]},{"entry":["Second word:","E","D","D","D","D","D","D","D","D"]},{"entry":["Third word:","E","D","D","D","D","D","D","D","D"]},{"entry":["Fourth word:","E","D","D","D","D","D","D","D","D"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}}}},"Note that the extension bit E is used as an addition (preferably) to each data word. In addition, the address field can be of variable length and is preferably transmitted just after the extension bit of the first word.","Tokens, therefore, consist of one or more words of (binary) digital data in the present invention. Each of these words is transferred in sequence and preferably in parallel, although this method of transfer is not necessary; serial data transfer is also possible using known techniques. For example, in a video parser, control information is transmitted in parallel, whereas data is transmitted serially.","As the example illustrates, each token has, preferably at the start, an address field (the string of A-bits) that identifies the type of data that is contained in the token. In most applications, a single word or portion of a word is sufficient to transfer the entire address field, but this is not necessary in accordance with the invention, so long as logic circuitry is included in the corresponding pipeline stages that is able to store some representation of partial address fields long enough for the stages to receive and decode the entire address field.","Note that no dedicated wires or registers are required to transmit the address field. It is transmitted using the data bits. As is explained below, a pipeline stage will not be slowed down if it is not intended to be activated by the particular address field, i.e., the stage will be able to pass along the token without delay.","The remainder of the data in the token following the address field is not constrained by the use of tokens. These D-data bits may take on any values and the meaning attached to these bits is of no importance here. That is, the meaning of the data can vary, for example, depending upon where the data is positioned within the system at a particular point in time. The number of data bits D appended after the address field can be as long or as short as required, and the number of data words in different tokens may vary greatly. The address field and extension bit are used to convey control signals to the pipeline stages. Because the number of words in the data field (the string of D bits) can be arbitrary, as can be he information conveyed in the data field can also vary accordingly. The explanation below is, therefore, directed to the use of the address and extension bits.","In the present invention, tokens are a particularly useful data structure when a number of blocks of circuitry are connected together in a relatively simple configuration. The simplest configuration is a pipeline of processing steps. For example, in the one shown in FIG. . The use of tokens, however, is not restricted to use on a pipeline structure.","Assume once again that each box represents a complete pipeline stage. In the pipeline of , data flows from left to right in the diagrams Data enters the machine and passes into processing Stage A. This may or may not modify the data and it then passes the data to stage B. The modification, if any, may be arbitrarily complicated and, in general, there will not be the same number of data items flowing into any stage as flow out. Stage B modifies the data again and passes it onto Stage C, and so forth. In a scheme such as this, it is impossible for data to flow in the opposite direction, so that, for example, Stage C cannot pass data to Stage A. This restriction is often perfectly acceptable.","On the other hand, it is very desirable for Stage A to be able to communicate information to Stage C even though there is no direct connection between the two blocks. Stage A and C communication is only via Stage B. One advantage of the tokens is their ability to achieve this kind of communication. Since any processing stage that does not recognize a token simply passes it on unaltered to the next block.","According to this example, an extension bit is transmitted along with the address and data fields in each token so that a processing stage can pass on a token (which can be of arbitrary length) without having to decode its address at all. According to this example, any token in which the extension bit is HIGH (a \u201c1\u201d) is followed by a subsequent word which is part of the same token. This word also has an extension bit, which indicates whether there is a further token word in the token. When a stage encounters a token word whose extension bit is LOW (a \u201c0\u201d), it is known to be the last word of the token. The next word is then assumed to be the first word of a new token.","Note that although the simple pipeline of processing stages is particularly useful, it will be appreciated that tokens may be applied to more complicated configurations o processing elements. An example of a more complicated processing element is described below.","It is not necessary, in accordance with the present invention, to use the state of the extension bit to signal the last word of a given token by giving it an extension bit set to \u201c0\u201d. One alternative to the preferred scheme is to move the extension bit so that it indicates the first word of a token instead of the last. This can be accomplished with appropriate changes in the decoding hardware.","The advantage of using the extension bit of the present invention to signal the last word in a token rather than the first, is that it is often useful to modify the behavior of a block of circuitry depending upon whether or not a token has extension bits. An example of this is a token that activates a stage that processes video quantization values stored in a quantization table (typically a memory device). For example, a table containing 64 eight-bit arbitrary binary integers.","In order to load a new quantization table into the quantizer stage of the pipeline, a \u201cQUANT_TABLE\u201d token is sent to the quantizer. In such a case the token, for example, consists of 65 token words. The first word contains the code \u201cQUANT_TABLE\u201d, i.e., build a quantization table. This is followed by 64 words, which are the integers of the quantization table.","When encoding video data, it is occasionally necessary to transmit such a quantization table. In order to accomplish this function, a QUANT_TABLE token with no extension words can be sent to the quantizer stage. On seeing this token, and noting that the extension bit of its first word is LOW, the quantizer stage can read out its quantization table and construct a QUANT_TABLE token which includes the 64 quantization table values. The extension bit of the first word (which was LOW) is changed so that it is HIGH and the token continues, with HIGH extension bits, until the new end of the token, indicated by a LOW extension bit on the sixty fourth quantization table value. This proceeds in the typical Dab through the system and is encoded into the bit stream.","Continuing with the example, the quantizer may either load a new quantization table into its own memory device or read out its table depending on whether the first word of the QUANT_TABLE token has its extension bit set or not.","The choice of whether to use the extension bit to signal the first or last token word in a token will, therefore, depend on the system in which the pipeline will be used. Both alternatives are possible in accordance with the invention.","Another alternative to the preferred extension bit scheme is to include a length count at the start of the token. Such an arrangement may, for example, be efficient if a token is very long. For example, assume that a typical token in a given application is 1000 words long. Using the illustrated extension bit scheme (with the bit attached to each token word) the token would require 1000 additional bits to contain all the extension bits. However, only ten bits would be required to encode the token length in binary form.","Although there are, therefore, uses for long tokens, a experience has shown that there are many uses for short tokens. Here the preferred extension bit scheme is advantageous. If a token is only one word long, then only one bit is required to signal this. However, a counting scheme would typically require the same ten bits as before.","Disadvantages of a length count scheme include the following: 1) it is inefficient for short tokens; 2) places a maximum length restriction on a token (with only ten bits, no more than 1023 words can be counted); 3) the length of a token must be known in advance of generating the count (which is presumably at the start of the token); 4) every block of circuitry that deals with tokens would need to be provided with hardware to count words; and 5) if the count should get corrupted (due to a data transmission error) it is not clear whether recovery can be achieved.","The advantages of the extension bit scheme in accordance with the present invention include: 1) pipeline stages need not include a block of circuitry that decodes every token since unrecognized tokens can be passed on correctly by considering only the extension bit; 2) the coding of the extension bit is identical for all tokens; 3) there is no limit placed on the length of a token; 4) the scheme is efficient (in terms of overhead to represent the length of the token) for short tokens; and 5) error recovery is naturally achieved. If an extension bit is corrupted then one random token will be generated (for an extension bit corrupted from \u201c1\u201d to \u201c0\u201d) or a token will be lost (extension bit corrupted \u201c0\u201d to \u201c1\u201d). Furthermore, the problem is localized to the tokens concerned. After that token, correct operation is resumed automatically.","In addition, the length of the address field may be varied. This is highly advantageous since it allows the most common tokens to be squeezed into the minimum number of words. This, in turn, is of great importance in video data pipeline systems since it ensures that all processing stages can be continuously running at full bandwidth.","In accordance to the present invention, in order to allow variable length address fields, the addresses are chosen so that a short address followed by random data can never be confused with a longer address. The preferred technique for encoding the address field (which also serves as the \u201ccode\u201d for activating an intended pipeline stage) is the well-known technique first described by Huffman, hence the common name \u201cHuffman Code\u201d. Nevertheless, it will be appreciated be one of ordinary skill in the art, that other coding schemes may also be successfully employed.","Although Huffman encoding is well understood in the field of digital design, the following example provides a general background:","Huffman codes consist of words made up of a string of symbols (in the context of digital systems, such as the present invention, the symbols are usually binary digits). The code words may have variable length and the special property of Huffman code words is that a code word is chosen so that none of the longer code words start with the symbols that form a shorter code word. In accordance with the invention, token address fields are preferably (although not necessarily) chosen using known Huffman encoding techniques.","Also in the present invention, the address field preferably starts in the most significant bit (MSB) of the first word token. (Note that the designation of the MSB is arbitrary and that this scheme can be modified to accommodate various designations of the MSB.) The address field continues through contiguous bits of lesser significance. If, in a given application, a token address requires more than one token word, the least significant bit in any given word the address field will continue in the most significant bit of the next word. The minimum length of the address field is one bit.","Any of several known hardware structures can be used to generate the tokens used in the present invention. One such structure is a microprogrammed state machine. However, known microprocessors or other devices may also be used.","The principle advantage of the token scheme in accordance with the present invention, is its adaptability to unanticipated needs. For example, if a new token is introduced, it is most likely that this will affect only a small number of pipeline stages. The most likely case is that only two stages or blocks of circuitry are affected, i.e., the one block that generates the tokens in the first place and the block or stage that has been newly designed or modified to deal with this new token. Note that it is not necessary to modify any other pipeline stages. Rather, these will be able to deal with the new token without modification to their designs because they will not recognize it and will, accordingly, pass that token on unmodified.","This ability of the present invention to leave substantially existing designed devices unaffected has clear advantages. It may be possible to leave some semiconductor chips in a chip set completely unaffected by a design improvement in some other chips in the set. This is advantageous both from the perspective of a customer and from that of a chip manufacturer. Even if modifications mean that all chips are affected by the design change (a situation that becomes increasingly likely as levels of integration progress so that the number of chips in a system drops) there will still be the considerable advantage of better time-to-market than can be achieved, since the same design can be reused.","In particular, note the situation that occurs when it becomes necessary to extend the token set to include two word addresses. Even in this case, it is still not necessary to modify an existing design. Token decoders in the pipeline stages will attempt to decode the first word of such a token and will conclude that it does not recognize the token. It will then pass on the token unmodified using the extension bit to perform this operation correctly. It will not attempt to decode the second word of the token (even though this contains address bits) because it will \u201cassume\u201d that the second word is part of the data field of a token that it does not recognize.","In many cases, a pipeline stage or a connected block of circuitry will modify a token. This usually, but not necessarily, takes the form of modifying the data field of a token. In addition, it is common for the number of data words in the token to be modified, either by removing certain data words or by adding new ones. In some cases, tokens are removed entirely from the token stream.","In most applications, pipeline stages will typically only decode (be activated by) a few tokens; the stage does not recognize other tokens and passes them on unaltered. In a large number of cases, only one token is decoded, the DATA Token word itself.","In many applications, the operation of a particular stage will depend upon the results of its own past operations. The \u201cstate\u201d of the stage, thus, depends on its previous states. In other words, the stage depends upon stored state information, which is another way of saying it must retain some information about its own history one or more clock cycles ago. The present invention is well-suited for use in pipelines that include such \u201cstate machine\u201d stages, as well as for use in applications in which the latches in the data path are simple pipeline latches.","The suitability of the two-wire interface, in accordance with the present invention, for such \u201cstate machine\u201d circuits is a significant advantage of the invention. This is especially true where a data path is being controlled by a state machine. In this case, the two-wire interface technique above-described may be used to ensure that the \u201ccurrent state\u201d of the machine stays in step with the data which it is controlling in the pipeline.",{"@attributes":{"id":"p-0373","num":"0405"},"figref":"FIG. 6"},"For the sake of simplicity only, the two-wire interface (with the acceptance and validation signals and latches) is not illustrated and all details dealing with resetting the circuit are omitted. As before, an 8-bit data word is assumed by way of example only and not by way of limitation.","This exemplifying pipeline stage delays the data bits and the extension bit by one pipeline stage. It also decodes the DATA Token. At the point when the first word of the DATA Token is presented at the output of the circuit, the signal \u201cDATA_ADDR\u201d is created and set HIGH. The data bits are delayed by the latches LDIN and LDOUT, each of which is repeated eight times for the eight data bits used in this example (corresponding to an 8-input, 8-output latch). Similarly, the extension bit is delayed by extension bit latches LEIN and LEOUT.","In this example, the latch LEPREV is provided to store the most recent state of the extension bit. The value of the extension bit is loaded into LEIN and is then loaded into LEOUT on the next rising edge of the non-overlapping clock phase signal PH. Latch LEOUT, thus, contains the value of the current extension bit, but only during the second half of the non-overlapping, two-phase clock. Latch LEPREV, however, loads this extension bit value on the next rising edge of the clock signal PH, that is, the same signal that enables the extension bit input latch LEIN. The output QEPREV of the latch LEPREV, thus, will hold the value of the extension bit during the previous PH clock phase.","The five bits of the data word output from the inverting Q output, plus the non-inverted MD[], of the latch LDIN are combined with the previous extension bit value QEPREV in a series of logic gates NAND, NAND, and NOR, whose operations are well known in the art of digital design. The designation \u201cN_MD[m] indicates the logical inverse of bit m of the mid-data word MD[:]. Using known techniques of Boolean algebra, it can be shown that the output signal SA from this logic block (the output from NOR) is HIGH (a \u201c1\u201d ) only when the previous extension bit is a \u201c0\u201d (QPREV=\u201c0\u201d) and the data word at the output of the non-inverting Q latch (the original input word) LDIN has the structure \u201c000001xx\u201d, that is, the five high-order bits MD[]-MD[] bits are all \u201c0\u201d and the bit MD[] is a \u201c1\u201d and the bits in the Zero-one positions have any arbitrary value.","There are, thus, four possible data words (there are four permutations of \u201cxx\u201d) that will cause SA and, therefore, the output of the address signal latch LADDR to whose input SA is connected, to become HIGH. In other words, this stage provides an activation signal (DATA_ADDR=\u201c\u201d) only when one of the four possible proper tokens is presented and only when the previous extension bit was a zero, that is, the previous data word was the last word in the previous series of token words, which means that the current token word is the first one in the current token.","When the signal QPREV from latch LEPREV is LOW, the value at the output of the latch LDIN is therefore the first word of a new token. The gates NAND, NAND and NOR decode the DATA token (000001xx). This address decoding signal SA is, however, delayed in latch LADDR so that the signal DATA_ADDR has the same timing as the output data OUT_DATA and OUT_EXTN.",{"@attributes":{"id":"p-0380","num":"0412"},"figref":["FIG. 7","FIG. 7","FIG. 4"],"b":["1","1","2","1","2","1","2"]},"Although this is an extremely simple example of a \u201cstate-dependent\u201d pipeline stage, i.e., since it depends on the state of only a single bit, it is generally true that all latches holding state information will be updated only when data is actually transferred between pipeline stages. In other words, only when the data is both valid and being accepted by the next stage. Accordingly, care must be taken to ensure that such latches are properly reset.","The generation and use of tokens in accordance with the present invention, thus, provides several advantages over known encoding techniques for data transfer through a pipeline.","First, the tokens, as described above, allow for variable length address fields (and can utilize Huffman coding for example) to provide efficient representation of common tokens.","Second, consistent encoding of the length of a token allows the end of a token (and hence the start of the next token) to be processed correctly (including simple non-manipulative transfer), even if the token is not recognized by the token decoder circuitry in a given pipeline stage.","Third, rules and hardware structures for the handling of unrecognized tokens (that is, for passing them on unmodified allow communication between one stage and a downstream stage that is not its nearest neighbor in the pipeline. This also increases the expandability and efficient adaptability of the pipeline since it allows for future changes in the token set Without requiring large scale redesigning of existing pipeline stages. The tokens of the present invention are particularly useful when used in conjunction with the two-wire interface that is described above and below.","As an example of the above, and , taken together (and referred to collectively below as ) depict a block diagram of a pipeline stage whose function is as follows. If the stage is processing a predetermined token (known in this example as the DATA token), then it will duplicate every word in this token with the exception of the first one, which includes the address field of the DATA token. If, on the other hand, the stage is processing any other kind of token, it will delete every word. The overall effect is that, at the output, only DATA Tokens appear and each word within these tokens is repeated twice.","Many of the components of this illustrated system may be the same as those described in the much simpler structures shown in , , and . This illustrates a significant advantage. More complicated pipeline stages will still enjoy the same benefits of flexibility and elasticity, since the sane two-wire interface may be used with little or no adaptation.","The data duplication stage shown in  is merely one example of the endless number of different types of operations that a pipeline stage could perform in any given application. This \u201cduplication stage\u201d illustrates, however, a stage that can form a \u201cbottleneck\u201d, so that the pipeline according to this embodiment will \u201cpack together\u201d.","A \u201cbottleneck\u201d can be any stage that either takes a relatively long time to perform its operations, or that creates more data in the pipeline than it receives. This example also illustrates that the two-wire accept\/valid interface according to this embodiment can be adapted very easily to different applications.","The duplication stage shown in  also has two latches LEIN and LEOUT that, as in the example shown in , latch the state of the extension bit at the input and at the output of the stage, respectively. As shows, the input extension latch LEIN is clocked synchronously with the input data latch LDIN and the validation signal IN_VALID.","For ease of reference, the various latches included in the duplication stage are paired below with their respective output signals:","In the duplication stage, the output from the data latch LDIN forms intermediate data referred to as MID_DATA. This intermediate data word is loaded into the data output latch LDOUT only when an intermediate acceptance signal (labeled \u201cMID_ACCEPT\u201d in ) is set HIGH.","The portion of the circuitry shown in  below the acceptance latches LAIN, LAOUT, shows the circuits that are added to the basic pipeline structure to generate the various internal control signals used to duplicate data. These include a \u201cDATA_TOKEN\u201d signal that indicates that the circuitry is currently processing a valid DATA Token, and a NOT_DUPLICATE signal which is used to control duplication of data. When the circuitry is processing a DATA Token, the NOT_DUPLICATE signal toggles between a HIGH and a LOW state and this causes each word in the token to be duplicated once (but no more times). When the circuitry is not processing a valid DATA Token then the NOT_DUPLICATE signal is held in a HIGH state. Accordingly, this means that the token words that are being processed are not duplicated.","As illustrates, the upper six bits of 8-bit intermediate data word and the output signal QI from the latch LI form inputs to a group of logic gates NOR, NOR, NAND. The output signal from the gate NAND is labeled S. Using well-known Boolean algebra, it can be shown that the signal S is a \u201c0\u201d only when the output signal QI is a \u201c1\u201d and the MID_DATA word has the following structure: \u201c000001xx\u201d, that is, the upper five bits are all \u201c0\u201d, the bit MID_DATA[] is a \u201c1\u201d and the bits in the MID_DATA[] and MID_DATA[] positions have any arbitrary value. Signal S, therefore, acts as a \u201ctoken identification signal\u201d which is low only when the MID_DATA signal has a predetermined structure and the output from the latch LI is a \u201c1\u201d. The nature of the latch LI and its output QI is explained further below.","Latch LO performs the function of latching the last value of the intermediate extension bit (labeled \u201cMID_EXTN\u201d and as signal S), and it loads this value on the next rising edge of the clock phase PH into the latch LI, whose output is the bit QI and is one of the inputs to the token decoding logic group that forms signal S. Signal S, as is explained above, may only drop to a \u201c0\u201d if the signal QI is a \u201c1\u201d (and the MID_DATA signal has the predetermined structure). Signal S may, therefore, only drop to a \u201c0\u201d whenever the last extension bit was \u201c0\u201d, indicating that the previous token has ended. Therefore, the MID_DATA word is the first data word in a new token.","The latches LO and LI together with the NAND gates NAND and NAND form storage for the signal, DATA_TOKEN. In the normal situation, the signal QI at the input to NAND and the signal S at the input to NAND will both be at logic \u201c1\u201d. It can be shown, again by the techniques of Boolean algebra, that in this situation these NAND gates operate in the same manner as inverters, that is, the signal QI from the output of latch LI is inverted in NAND and then this signal is inverted again by NAND to form the signal . In this case, since there are two logical inversions in this path, the signal S will have the same value as QI.","It can also be seen that the signal DATA_TOKEN at the output of latch LO forms the input to latch LI. As a result, as long as the situation remains in which both QI and S are HIGH, the signal DATA_TOKEN will retain its state (whether \u201c0\u201d or \u201c1\u201d). This is true even though the clock signals PH and PH are clocking the latches (LI and LO respectively). The value of DATA_TOKEN can only change when one or both of the signals QI and S are \u201c0\u201d.","As explained earlier, the signal QI will be \u201c0\u201d when the previous extension bit was \u201c0\u201d. Thus, it will be \u201c0\u201d whenever the MID_DATA value is the first word of a token (and, thus, includes the address field for the token). In this situation, the signal S may be either \u201c0\u201d or \u201c1\u201d. As explained earlier, signal S will be \u201c0\u201d if the MID_DATA word has the predetermined structure that in this example indicates a \u201cDATA\u201d Token. If the MID_DATA word has any other structure, (indicating that the token is some other token, not a DATA Token), S will be \u201c1\u201d.","If QI is \u201c0\u201d and S is \u201c1\u201d, this indicates there is some token other than a DATA Token. As is well known in the field of digital electronics, the output of NAND will be \u201c1\u201d. The NAND gate NAND will invert this (as previously explained) and the signal  will thus be a \u201c0\u201d. As a result, this \u201c0\u201d value will be loaded into latch LO at the start of the next PH clock phase and the DATA_TOKEN signal will become \u201c0\u201d, indicating that the circuitry is not processing a DATA token.","If QI is \u201c0\u201d and SO is \u201c0\u201d, thereby indicating a DATA token, then the signal S will be \u201c1\u201d (regardless of the other input to NAND from the output of NAND). As a result, this \u201c1\u201d value will be loaded into latch LO at the start of the next PH clock phase and the DATA_TOKEN signal will become \u201c1\u201d, indicating that the circuitry is processing a DATA token.","The NOT_DUPLICATE signal (the output signal QO) is similarly loaded into the latch LI on the next rising edge of the clock PH. The output signal QI from the latch LI is combined with the output signal QI in a gate NAND to form the signal . As before, Boolean algebra can be used to show that the signal S is a \u201c0\u201d only when both of the signals QI and QI have the value \u201c1\u201d. If the signal QI becomes a \u201c0\u201d, that is, the DATA TOKEN signal is a \u201c0\u201d, then the signal S becomes a \u201c1\u201d. In other words, if there is not a valid DATA TOKEN (QI=0) or the data word is not a duplicate (QI=0), then the signal S goes high.","Assume now, that the DATA TOKEN signal remains HIGH for more than one clock signal. Since the NOT_DUPLICATE signal (QO) is \u201cfed back\u201d to the latch LI and will be inverted by the gate NAND  (since its other input QI is held HIGH), the output signal QO will toggle between \u201c0\u201d and \u201c1\u201d. If there is no valid DATA Token, however, the signal QI will be a \u201c0\u201d, and the signal S and the output QO, will be forced HIGH until the DATE_TOKEN signal once again goes to a \u201c1\u201d.","The output QO (the NOT_DUPLICATE signal) is also fed back and is combined with the output QA from the acceptance latch LAIN in a series of logic gates (NAND and INV, which together form an AND gate) that have as their output a \u201c1\u201d, only when the signals QA and QO both have the value \u201c1\u201d. As _ACCEPT, which is used as described above in the two-wire interface structure.","The acceptance signal IN_ACCEPT is also used as an enabling signal to the latches LDIN, LEIN, and LVIN. As a result, if the NOT_DUPLICATE signal is low, the acceptance signal IN_ACCEPT will also be low, and all three of these latches will be disabled and will hold the values stored at their outputs. The stage will not accept new data until the NOT_DUPLICATE signal becomes HIGH. This is in addition to the requirements described above for forcing the output from the acceptance latch LAIN high.","As long as there is a valid DATA_TOKEN (the DATA_TOKEN signal QO is a \u201c1\u201d), the signal QO will toggle between the HIGH and LOW states, so that the input latches will be enabled and will be able to accept data, at most, during every other complete cycle of both clock phases PH, PH. The additional condition that the following stage be prepared to accept data, as indicated by a \u201cHIGH\u201d OUT_ACCEPT signal, must, of course, still be satisfied. The output latch LDOUT will, therefore, place the same data word onto the output bus OUT_DATA for at least two full clock cycles. The OUT_VALID signal will be a \u201c1\u201d only when there is both a valid DATA_TOKEN (QO HIGH) and the validation signal QVOUT is HIGH.","The signal QEIN, which is the extension bit corresponding to MID_DATA, is combined with the signal S in a series of logic gates (INV and NAND) to form a signal S. During presentation of a DATA Token, each data word MID_DATA will be repeated by loading it into the output latch LDOUT twice. During the first of these, S will be forced to a \u201c1\u201d by the action of NAND. The signal S is loaded in the latch LEOUT to form OUTEXTN at the same time as MID_DATA is loaded into LDOUT to form OUT_DATA[:].","Thus, the first time a given MID_DATA is loaded into LEOUT, the associated OUTEXTN will be forced high, whereas, on the second occasion, OUTEXTN will be the same as the signal QEIN. Now consider the situation during the very last word of a token in which QEIN is known to be low. During the first time MID_DATA is loaded into LDOUT, OUTEXTN will be \u201c1\u201d, and during the second time, OUTEXTN will be \u201c0\u201d, indicating the true end of the token.","The output signal QVIN from the validation latch LVIN is combined with the signal QI in a similar gate combination (INV and NAND) to form a signal S. Using known Boolean techniques, it can be shown that the signal S is HIGH either when the validation signal QVIN is HIGH, or when the signal QI is low (indicating that the data is a duplicate). The signal S is loaded into the validation output latch LVOUT at the same time that MID_DATA is loaded into LDOUT and the intermediate extension bit (signal S) is loaded into LEOUT. Signal  is also combined with the signal QO (the data token signal) in the logic gates NAND and INV to form the output validation signal OUT_VALID. As was mentioned earlier, OUT_VALID is HIGH only when there is a valid token and the validation signal QVOUT is high.","In the present invention, the MID_ACCEPT signal is combined with the signal S in a series of logic gates (NAND and INV) that perform the well-known AND function to form a signal S that is used as one of the two enabling signals to the latches LO, LO and LO. The signal  rises to a \u201c1\u201d when the MID_ACCEPT signal is HIGH and when either the validation signal QVIN is high, or when the token is a duplicate (QI is a \u201c0\u201d). If the signal MID_ACCEPT is HIGH, the latches LO-LO will, therefore, be enabled when the clock signal PH is high whenever valid input data is loaded at the input of the stage, or when the latched data is a duplicate.","From the discussion above, one can see that the stage shown in and will receive and transfer data between stages under the control of the validation and acceptance signals, as in previous embodiments, with the exception that the output signal from the acceptance latch LAIN at the input side is combined with the toggling duplication signal so that a data word will be output twice before a new word will be accepted.","The various logic gates such as NAND and INV may, of course, be replaced by equivalent logic circuitry (in this case, a single AND gate). Similarly, if the latches LEIN and LVIN, for example, have inverting outputs, the inverters INV and INV will not be necessary. Rather, the corresponding input to the gates NAND and NAND can be tied directly to the inverting outputs of these latches. As long as the proper logical operation is performed, the stage will operate in the same manner. Data words and extension bits will still be duplicated.","One should note that the duplication function that the illustrated stage performs will not be performed unless the first data word of the token has a \u201c1\u201d in the third position of the word and \u201cO's\u201d in the five high-order bits. (Of course, the required pattern can easily be changed and set by selecting other logic gates and interconnections other than the NOR, NOR, NND gates shown.)","In addition, as  shows, the OUT_VALID signal will be forced low during the entire token unless the first data word has the structure described above. This has the effect that all tokens except the one that causes the duplication process will be deleted from the token stream, since a device connected to the output terminals (OUTDATA, OUTEXTN and OUTVALID) will not recognize these token words as valid data.","As before, both validation latches LVIN, LVOUT in the stage can be reset by a single conductor NOT_RESETO, and a single resetting input R on the downstream latch LVOUT, with the reset signal being propagated backwards to cause the upstream validation latch to be forced low on the next clock cycle.","It should be noted that in the example shown in , the duplication of data contained in DATA tokens serves only as an example of the way in which circuitry may manipulate the ACCEPT and VALID signals so that more data is leaving the pipeline stage than that which is arriving at the input. Similarly, the example in  removes all non-DATA tokens purely as an illustration of the way in which circuitry may manipulate the VALID signal to remove data from the stream. In most typical applications, however, a pipeline stage will simply pass on any tokens that it does not recognize, unmodified, so that other stages further down the pipeline may act upon them if required.",{"@attributes":{"id":"p-0416","num":"0448"},"figref":["FIGS. 9","FIGS. 8"],"i":["a ","b ","a ","b"],"b":["9","8"]},"Referring now more particularly to , there is shown a reconfigurable process stage in accordance with one aspect of the present invention.","Input latches  receive an input over a first bus . A first output from the input latches  is passed over line  to a token decode subsystem . A second output from the input latches  is passed as a first input over line  to a processing unit . A first output from the token decode subsystem  is passed over line  as a second input to the processing unit . A second output from the token decode  is passed over line  to an action identification unit . The action identification unit  also receives input from registers  and  over line . The registers  and  hold the state of the machine as a whole. This state is determined by the history of tokens previously received. The output from the action identification unit  is passed over line  as a third input to the processing unit . The output from the processing unit  is passed to output latches . The output from the output latches  is passed over a second bus .","Referring now to , a Start Code Detector (SCD)  receives input over a two-wire interface . This input can be either in the form of DATA tokens or as data bits in a data stream. A first output from the Start Code Detector  is passed over line  to a first logical first-in first-out buffer (FIFO) . The output from the first FIFO  is logically passed over line  as a first input to a Huffman decoder . A second output from the Start Code Detector  is passed over line  as a first input to a DRAM interface . The DRAM interface  also receives input from a buffer manager  over line . Signals are transmitted to and received from external DRAM (not shown) by the DRAM interface  over line . A first output from the DRAM interface  is passed over line  as a first physical input to the Huffman decoder .","The output from the Huffman decoder  is passed over line  as an input to an Index to Data Unit (ITOD) . The Huffman decoder  and the ITOD  work together as a single logical unit. The output from the ITOD  is passed over line  to an arithmetic logic unit (ALU) . A first output from the ALU  is passed over line  to a read-only memory (ROM) state machine . The output from the ROM state machine  is passed over line  as a second physical input to the Huffman decoder . A second-output from the ALU  is passed over line  to a Token Formatter (T\/F) .","A first output  from the T\/F  of the present invention is passed over line  to a second FIFO . The output from the second FIFO  is passed over line  as a first input to an inverse modeller . A second output from the T\/F  is passed over line  as a third input to the DRAM interface . A third output from the DRAM interface  is passed over line  as a second input to the inverse modeller . The output from the inverse modeller  is passed over line  as an input to an inverse quantizer  The output from the inverse quantizer  is passed over line  as an input to an inverse zig-zag (IZZ) . The output from the IZZ  is passed over line  as an input to an inverse discrete cosine transform (IDCT) . The output from the IDCT  is passed over line  to a temporal decoder (not shown).","Referring now more particularly to , a temporal decoder in accordance with the present invention is shown. A fork  receives as input over line  the output from the IDCT  (shown in FIG. ). As a first output from the fork , the control tokens, e.g., motion vectors and the like, are passed over line  to an address generator . Data tokens are also passed to the address generator  for counting purposes. As a second output from the fork , the data is passed over line  to a FIFO . The output from the FIFO  is then passed over line  as a first input to a summer . The output from the address generator  is passed over line  as a first input to a DRAM interface . signals are transmitted to and received from external DRAM (not shown) by the DRAM interface  over line . A first output from the DRAM interface  is passed over line  to a prediction filter . The output from the prediction filter  is passed over line  as a second input to the summer . A first output from the summer  is passed over line  to output selector . A second output from the summer  is passed over line  as a second input to the DRAM interface . A second output from the DRAM interface  is passed over line  as a second input to the output selector . The output from the output selector  is passed over line  to a Video Formatter (not shown in FIG. ).","Referring now to , a fork  receives input from the output selector  (shown in ) over line . As a first output from the fork , the control tokens are passed over line  to an address generator . The output from the address generator  is passed over line  as a first input to a DRAM interface . As a second output from the fork  the data is passed over line  as a second input to the DRAM interface . Signals are transmitted to and received from external DRAM (not shown) by the DRAM interface  over line . The output from the DRAM interface  is passed over line  to a display pipe .","It will be apparent from the above descriptions that each line may comprise a plurality of lines, as necessary.","Referring now to , in the MPEG standard a picture  is encoded as one or more slices . Each slice  is, in turn, comprised of a plurality of blocks , and is encoded row-by-row, left-to-right in each row. As is shown, each slice  may span exactly one full line of blocks , less than one line B or D of blocks  or multiple lines C of blocks .","Referring to , in the JPEG and H.261 standards, the Common Intermediate Format (CIF) is used, wherein a picture  is encoded as 6 rows each containing 2 groups of blocks (GOBs) . Each GOB  is, in turn, composed of either 3 rows or 6 rows of an indeterminate number of blocks . Each GOB  is encoded in a zigzag direction indicated by the arrow . The GOBs  are, in turn, processed row-by-row, left-to-right in each row.","Referring now to , it can be seen that, for both MPEG and CIF, the output of the encoder is in the form of a data stream . The decoder receives this data stream . The decoder can then reconstruct the image according to the format used to encode it. In order to allow the decoder to recognize start and end points for each standard, the data stream  is segmented into lengths of 33 blocks .","Referring to , a Venn diagram is shown, representing the range of values possible for the table selection from the Huffman decoder  (shown in ) of the present invention. The values possible for an MPEG decoder and an H.261 decoder overlap, indicating that a single table selection will decode both certain MPEG and certain H.261 formats. Likewise, the values possible for an MPEG decoder and a JPEG decoder overlap, indicating that a single table selection will decode both certain MPEG and certain JPEG formats. Additionally, it is shown that the H.261 values and the JPEG values do not overlap, indicating that no single table selection exists that will decode both formats.","Referring now more particularly to , there is shown a schematic representation of variable length picture data in accordance with the practice of the present invention. A first picture  to be processed contains a first PICTURE_START token , first picture information of indeterminate length , and a first PICTURE_END token . A second picture  to be processed contains a second PICTURE_START token , second picture information of indeterminate length , and a second PICTURE_END token . The PICTURE_START tokens  and  indicate the start of the pictures  and  to the processor. Likewise, the PICTURE_END tokens  and  signify the end of the pictures  and  to the processor. This allows the processor to process picture information  and  of variable lengths.","Referring to , a split  receives input over line . A first output from the split  is passed over line  to an address generator . The address generated by the address generator  is passed over line  to a DRAM interface . Signals are transmitted to and received from external DRAM (not shown) by the DRAM interface  over line . A first output from the DRAM interface  is passed over line  to a prediction filter . The output from the prediction filter  is passed over line  as a first input to a summer . A second output from the split  is passed over line  as an input to a first-in first-out buffer (FIFO) . The output from the FIFO  is passed over line  as a second input to the summer . The output from the summer  is passed over line  to a write signal generator . A first output from the write signal generator  is passed over line  to the DRAM interface . A second output from the write signal generator  is passed over line  as a first input to a read signal generator . A second output from the DRAM interface  is passed over line  as a second input to the read signal generator . The output from the read signal generator  is passed over line  to a Video Formatter (not shown in FIG. ).","Referring now to , the prediction filtering process is illustrated. A forward picture  is passed over line  as a first input to a summer . A backward picture  is passed over line  as a second input to the summer . The output from the summer  is passed over line .","Referring to , a slice  comprises one or more macroblocks . In turn, each macroblock  comprises four luminance blocks  and two chrominance blocks , and contains the information for an original 16\u00d716 block of pixels. Each of the four luminance blocks  and two chrominance blocks  is 8\u00d78 pixels in size. The four luminance blocks  contain a 1 pixel to 1 pixel mapping of the luminance (Y) information from the original 16\u00d716 block of pixels. One chrominance block  contains a representation of the chrominance level of the blue color signal (Cu\/b), and the other chrominance block  contains a representation of the chrominance level of the red color signal (Cv\/r). Each chrominance level is subsampled such that each 8\u00d78 chrominance block  contains the chrominance level of its color signal for the entire original 16\u00d716 block of pixels.","Referring now to , the structure and function of the Start Code Detector will become apparent. A value register  receives image data over a line . The line  is eight bits wide, allowing for parallel transmission of eight bits at a time. The output from the value register  is passed serially over line  to a decode register . A first output from the decode register  is passed to a detector  over a line . The line  is twenty-four bits wide, allowing for parallel transmission of twenty-four bits at a time. The detector  detects the presence or absence of an image which corresponds to a standard-independent start code of 23 \u201czero\u201d values followed by a single \u201cone\u201d value. An 8-bit data value image follows a valid start code image. On detecting the presence of a start code image, the detector  transmits a start image over a line  to a value decoder .","A second output from the decode register  is passed serially over line  to a value decode shift register . The value decode shift register  can hold a data value image fifteen bits long. The 8-bit data value following the start code image is shifted to the right of the value decode shift register , as indicated by area . This process eliminates overlapping start code images, as discussed below. A first output from the value decode shift register  is passed to the value decoder  over a line . The line  is fifteen bits wide, allowing for parallel transmission of fifteen bits at a time. The value decoder  decodes the value image using a first look-up table (not shown). A second output from the value decode shift register  is passed to the value decoder  which passes a flag to an index-to-tokens converter  over a line . The value decoder  also passes information to the index-to-tokens converter  over a line . The information is either the data value image or start code index image obtained from the first look-up table. The flag indicates which form of information is passed. The line  is fifteen bits wide, allowing for parallel transmission of fifteen bits at a time. While 15 bits has been chosen here as the width in the present invention it will be appreciated that bits of other lengths may also be used. The index-to-tokens converter  converts the information to token images using a second look-up table (not shown) similar to that given in Table 12-3 of the Users Manual. The token images generated by the index-to-tokens converter  are then output over a line . The line  is fifteen bits wide, allowing for parallel transmission of fifteen bits at a time.","Referring to , a data stream  consisting of individual bits  is input to a Start Code Detector (not shown in FIG. ). A first start code image  is detected by the Start Code Detector. The Start Code Detector then receives a first data value image . Before processing the first data value image , the Start Code Detector may detect a second start code image , which overlaps the first data value image  at a length . If this occurs, the Start Code Detector does not process the first data value image , and instead receives and processes a second data value image .","Referring now to , a flag generator  receives data as a first input over a line . The line  is fifteen bits wide, allowing for parallel transmission of fifteen bits at a time. The flag generator  also receives a flag as a second input over a line , and receives an input valid image over a first two-wire interface . A first output from the flag generator  is passed over a line  to an input valid register (not shown). A second output from the flag generator  is passed over a line  to a decode index . The decode index  generates four outputs; a picture start image is passed over a line , a picture number image is passed over a line , an insert image is passed over a line , and a replace image is passed over a line . The data from the flag generator  is passed over a line . A header generator  uses a look-up table to generate a replace image, which is passed over a line . An extra word generator  uses the MPU to generate an insert image, which is passed over a line . Line , and line combine to form a line , which is first input to output latches . The output latches  pass data over a line . The line  is fifteen bits wide, allowing for parallel transmission of fifteen bits at a time.","The input valid register (not shown) passes an image as a first input to a first OR gate  over a line . An insert image is passed over a line  as a second input to the first OR gate . The output from the first OR gate  is passed as a first input to a first AND gate  over a line . The logical negation of a remove image is passed over a line  as a second input to the first AND gate  is passed as a second input to the output latches  over a line . The output latches  pass an output valid image over a second two-wire interface . An output accept image is received over the second two-wire interface  by an output accept latch . The output from the output accept latch  is passed to an output accept register (not shown) over a line .","The output accept register (not shown) passes an image as a first input to a second OR gate  over a line . The logical negation of the output from the input valid register is passed as a second input to the second OR gate  over a line . The remove image is passed over a line  as a third input to the second OR gate . The output from the second OR gate  is passed as a first input to a second AND gate  over a line . The logical negation of",{"@attributes":{"id":"p-0439","num":"0471"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 600"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Format","Image Received","Tokens Generated"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1.","H.261","SEQUENCE START","SEQUENCE START"]},{"entry":[{},"MPEG","PICTURE START","GROUP START"]},{"entry":[{},"JPEG","(None)","PICTURE START"]},{"entry":[{},{},{},"PICTURE DATA"]},{"entry":["2.","H.261","(None)","PICTURE END"]},{"entry":[{},"MPEG","(None)","PADDING"]},{"entry":[{},"JPEG","(None)","FLUSH"]}]}}]}}},"As set forth in Table 600 which shows a relationship between the absence or presence of standard signals in the certain machine independent control tokens, the detection of an image by the Start Code Detector  generates a sequence of machine independent Control Tokens. Each image listed in the \u201cImage Received\u201d column starts the generation of all machine independent control tokens listed in the group in the \u201cTokens Generated\u201d column. Therefore, as shown in line 1 of Table 600, whenever a \u201csequence start\u201d image is received during H.261 processing or a \u201cpicture start\u201d image is received during MPEG processing, the entire group of four control tokens is generated, each followed by its corresponding data value or values. In addition, as set forth at line 2 of Table 600, the second group of four control tokens is generated at the proper time irrespective of images received by the Start Code Detector .",{"@attributes":{"id":"p-0441","num":"0473"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"21pt","align":"center"}}],"thead":{"row":[{"entry":"TABLE 601"},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DISPLAY ORDER:","I1","B2","B3","P4","B5","B6","P7","B8","B9","I10"]},{"entry":["TRANSMIT ORDER:","I1","P4","B2","B3","P7","B5","B6","I10","B8","B9"]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}}}}},"As shown in line 1 of Table 601 which shows the timing relationship between transmitted pictures and displayed pictures, the picture frames are displayed in numerical order. However, in order to reduce the number of frames that an insert image is passed as a second input to the second AND gate  over a line . The output from the second AND gate  is passed over a line  to an input accept latch . The output from the input accept latch  is passed over the first two-wire interface . must be stored in memory, the frames are transmitted in a different order. It is useful to begin the analysis from an intraframe (I frame). The I1 frame is transmitted in the order it is to be displayed. The next predicted frame (P frame), P4, is then transmitted. Then, any bi-directionally interpolated frames (B frames) to be displayed between the I1 frame and P4 frame are transmitted, represented by frames B2 and B3. This allows the transmitted B frames to reference a previous frame (forward prediction) or a future frame (backward prediction). After transmitting all the B frames to be displayed between the I1 frame and the P4 frame, the next P frame, P7, is transmitted. Next, all the B frames to be displayed between the P4 and P7 frames are transmitted, corresponding to B5 and B6. Then, the next I frame, , is transmitted. Finally, all the B frames to be displayed between the P7 and I10 frames are transmitted, corresponding to frames B8 and B9. This ordering of transmitted frames requires only two frames to be kept in memory at any one time, and does not require the decoder to wait for the transmission of the next P frame or I frame to display an interjacent B frame.","Further information regarding the structure and operation, as well as the features, objects and advantages, of the invention will become more readily apparent to one of ordinary skill in the art from the ensuing additional detailed description of illustrative embodiment of the invention which, for purposes of clarity and convenience of explanation are grouped and set forth in the following sections:\n\n","Since the various compression standards, i.e., JPEG, MPEG and H.261, are well known, as for example as described in the aforementioned U.S. Pat. No. 5,212,742, the detailed specifications of those standards are not repeated here.","As previously mentioned, the present invention is capable of decompressing a variety of differently encoded, picture data bitstreams. In each of the different standards of encoding, some form of output formatter is required to take the data presented at the output of the spatial decoder operating alone, or the serial output of a spatial decoder and temporal decoder operating in combination, (as subsequently described herein in greater detail) and reformatting this output for use, including display in a computer or other display systems, including a video display system. Implementation of this formatting varies significantly between encoding standards and\/or the type of display selected.","In a first embodiment, in accordance with the present invention, as previously described with reference to  an address generator is employed to store a block of formatted data, output from either the first decoder (Spatial Decoder) or the combination of the first decoder (Spatial Decoder) and the second decoder (the Temporal Decoder), and to write the decoded information into and\/or from a memory in a raster order. The video formatter described hereinafter provides a wide range of output signal combinations.","In the preferred multi-standard video decoder embodiment of the present invention, the Spatial Decoder and the Temporal Decoder are required to implement both an MPEG encoded signal and an H.261 video decoding system. The DRAM interfaces on both devices are configurable to allow the quantity of DRAM required to be reduced when working with small picture formats and at low coded data rates. The reconfiguration of these DRAMs will be further described hereinafter with reference to the DRAM interface. Typically, a single 4 megabyte DRAM is required by each of the Temporal Decoder and the Spatial Decoder circuits.","The Spatial Decoder of the present invention performs all the required processing within a single picture. This reduces the redundancy within one picture.","The Temporal Decoder reduces the redundancy between the subject picture with relationship to a picture which arrives prior to the arrival of the subject picture, as well as a picture which arrives after the arrival of the subject picture. One aspect of the Temporal Decoder is to provide an address decode network which handles the complex addressing needs to read out the data associated with all of these pictures with the least number of circuits and with high speed and improved accuracy.","As previously described with reference to , the data arrives through the Start Code Detector, a FIFO register which precedes a Huffman decoder and parser, through a second FIFO register, an inverse modeller, an inverse quantizer, inverse zigzag and inverse DCT. The two FIFOs need not be on the chip. In one embodiment, the data does not flow through a FIFO that is on the chip. The data is applied to the DRAM interface, and the FIFO-IN storage register and the FIFO-OUT register is off the chip in both cases. These registers, whose operation is entirely independent of the standards, will subsequently be described herein in further detail.","The majority of the subsystems and stages shown in  are actually independent of the particular standard used and include the DRAM interface , the buffer manager  which is generating addresses for the DRAM interface, the inverse modeller , the inverse zig-zag  and the inverse DCT . The standard independent units within the Huffman decoder and parser include the ALU  and the token formatter .","Referring now to , the standard-independent units include the DRAM interface , the fork , the FIFO register , the summer  and the output selector . The standard dependent units are the address generator , which is different in H.261 and in MPEG, and the prediction filter , which is reconfigurable to have the ability to do both H.261 and MPEG. The JPEG data will flow through the entire machine completely unaltered.",{"@attributes":{"id":"p-0453","num":"0512"},"figref":"FIG. 13"},"The remainder of the circuitry embodied in the video formatter, including all of the color space conversion, the up-sampling filters and all of the gamma correction RAMs, is entirely independent of the particular compression standard utilized.","The Start Code Detector of the present invention is dependent on the compression standard in that it has to recognize different start code patterns in the bitstream for each of the standards. For example, H.261 has a 16 bit start code, MPEG has a 24 bit start code and JPEG uses marker codes which are fairly different from the other start codes. Once the Start Code Detector has recognized those different start codes, its operation is essentially independent of the compression standard. For instance, during searching, apart from the circuitry that recognizes the different category of markers, much of the operation is very similar between the three different compression standards.","The next unit is the state machine  () located within the Huffman decoder and parser. Here, the actual circuitry is almost identical for each of the three compression standards. In fact, the only element that is affected by the standard in operation is the reset address of the machine. If just the parser is reset, then it jumps to a different address for each standard. There are, in fact, four standards that are recognized. These standards are H.261, JPEG, MPEG and one other, where the parser enters a piece of code that is used for testing. This illustrates that the circuitry is identical in almost every aspect, but the difference is the program in the microcode for each of the standards. Thus, when operating in H.261, one program is running, and when a different program is running, there is no overlap between them. The same holds true for JPEG, which is a third, completely independent program.","The next unit is the Huffman decoder  which functions with the index to data unit . Those two units cooperate together to perform the Huffman decoding. Here, the algorithm that is used for Huffman decoding is the same, irrespective of the compression standard. The changes are in which tables are used and whether or not the data coming into the Huffman decoder is inverted. Also, the Huffman decoder itself includes a state machine that understands some aspects of the coding standards. These different operations are selected in response to an instruction coming from the parser state machine. The parser state machine operates with a different program for each of the three compression standards and issues the correct command to the Huffman decoder at different times consistent with the standard in operation.","The last unit on the chip that is dependent on the compression standard is the inverse quantizer , where the mathematics that the inverse quantizer performs are different for each of the different standards. In this regard, a CODING_STANDARD token is decoded and the inverse quantizer  remembers which standard it is operating in. Then, any subsequent DATA tokens that happen after that event, but before another CODING_STANDARD may come along, are dealt with in the way indicated by the CODING_STANDARD that has been remembered inside the inverse quantizer. In the detailed description, there is a table illustrating different parameters in the different standards and what circuitry is responding to those different parameters or mathematics.","The address generation, with reference to H.261, differs for each of the subsystems shown in FIG.  and FIG. . The address generation in , which generates addresses for the two FIFOs before and after the Hufffman decoder, does not change depending on the coding standards. Even in H.261, the address generation that happens on that chip is unaltered. Essentially, the difference between these standards is that in MPEG and JPEG, there is an organization of macroblocks that are in linear lines going horizontally across pictures. As best observed in , a first macroblock A covers one full line. A macroblock B covers less than a line. A macroblock C covers multiple lines. The division in MPEG is into slices , and a slice may be one horizontal line, A, or it may be part of a horizontal line B, or it may extend from one line into the next line, C. Each of these slices  is made up of a row of macroblocks.","In H.261, the organization is rather different because the picture is divided into groups of blocks (GOB). A group of blocks is three rows of macroblocks high by eleven macroblocks wide. In the case of a CIF picture, there are twelve such groups of blocks. However, they are not organized one above the other. Rather, there are two groups of blocks next to each other and then six high, i.e., there are 6 GOB's vertically, and 2 GOB's horizontally.","In all other standards, when performing the addressing, the macroblocks are addressed in order as described above. More specifically, addressing proceeds along the lines and at the end of the line, the next line is started. In H.261, the order of the blocks is the same as described within a group of blocks, but in moving onto the next group of blocks, it is almost a zig-zag.","The present invention provides circuitry to deal with the latter affect. That is the way in which the address generation in the spatial decoder and the video formatter varies for H.261. This is accomplished whenever information is written into the DRAM. It is written with the knowledge of the aforementioned address generation sequence so the place where it is physically located in the RAM is exactly the same as if this had been an MPEG picture of the same size. Hence, all of the address generation circuitry for reading from the DRAM, for instance, when forming predictions, does not have to comprehend that it is H.261 standard because the physical placement of the information in the memory is the same as it would have been if it had been in MPEG sequence. Thus, in all cases, only writing of data is affected.","In the Temporal Decoder, there is an abstraction for H.261 where the circuitry pretends something is different from what is actually occurring. That is, each group of blocks is conceptually stretched out so that instead of having a rectangle which is 11\u00d73 macroblocks, the macroblocks are stretched out into a length of 33 blocks (see ) group of blocks which is one macroblock high. By doing that, exactly the same counting mechanisms used on the Temporal Decoder for counting through the groups of blocks are also used for MPEG.","There is a correspondence in the way that the circuitry is designed between an H.261 group of blocks and an MPEG slice. When H.261 data is processed after the Start Code Detector, each group of blocks is preceded by a slice_start_code. The next group of blocks is preceded by the next slice_start code. The counting that goes on inside the Temporal Decoder for counting through this structure pretends that it is a 33 macroblock-long group that is one macroblock high. This is sufficient, although the circuitry also counts every 11th interval. When it counts to the 11th macroblock or the 22nd macroblock, it resets some counters. This is accomplished by simple circuitry with another counter that counts up each macroblock, and when it gets to 11, it resets to zero. The microcode interrogates that and does that work. All the circuitry in the temporal decoder of the present invention is essentially independent of the compression standard with respect to the physical placement of the macroblocks.","In terms of multi-standard adaptability, there are a number of different tables and the circuitry selects the appropriate table for the appropriate standard at the appropriate time. Each standard has multiple tables; the circuitry selects from the set at any given time. Within any one standard, the circuitry selects one table at one time and another table another time. In a different standard, the circuitry selects a different set of tables. There is some intersection between those tables as indicated previously in the discussion of FIG. . For example, one of the tables used in MPEG is also used in JPEG. The tables are not a completely isolated set.  illustrates an H.261 set, an MPEG set and a JPEG set. Note that there is a much greater overlap between the H.261 set and the MPEG set. They are quite common in the tables they utilize. There is a small overlap between MPEG and JPEG, and there is no overlap at all between H.261 and JPEG so that these standards have totally different sets of tables.","As previously indicated, most of the system units are compression standard independent. If a unit is standard independent, and such units need not remember what CODING_STANDARD is being processed. All of the units that are standard dependent remember the compression standard as the CODING_STANDARD token flows by them. When information encoded\/decoded in a first coding standard is distributed through the machine, and a machine is changing standards, prior machines under microprocessor control would normally choose to perform in accordance with the H.261 compression standard. The MPU in such prior machines generates signals stating in multiple different places within the machine that the compression standard is changing. The MPU makes changes at different times and, in addition, may flush the pipeline through.","In accordance with the invention, by issuing a change of CODING_STANDARD tokens at the Start Code Detector that is positioned as the first unit in the pipeline, this change of compression standard is readily handled. The token says a certain coding standard is beginning and that control information flows down the machine and configures all the other registers at the appropriate time. The MPU need not program each register.","The prediction token signals how to form predictions using the bits in the bitstream. Depending on which compression standard is operating, the circuitry translates the information that is found in the standard, i.e. from the bitstream into a prediction mode token. This processing is performed by the Huffman decoder and parser state machine, where it is easy to manipulate bits based on certain conditions. The Start Code Detector generates this prediction mode token. The token then flows down the machine to the circuitry of the Temporal Decoder, which as the device responsible for forming predictions. The circuitry of the spatial decoder interprets the token without having to know what standard it is operating in because the bits in it are invariant in the three different standards. The Spatial Decoder just does what it is told in response to that token. By having these tokens and using them appropriately, the design of other units in the machine is simplified. Although there may be some complications in the program, benefits are received in that some of the hard wired logic which would be difficult to design for multi-standards can be used here.","2. JPEG Still Picture Decoding","As previously indicated, the present invention relates to signal decompression and, more particularly, to the decompression of an encoded video signal, irrespective of the compression standard employed.","One aspect of the present invention is to provide a first decoder circuit (the Spatial Decoder) to decode a first encoded signal (the JPEG encoded video signal) in combination with a second decoder circuit (the Temporal Decoder) to decode a first encoded signal (the MPEG or H.261 encoded video signal) in a pipeline processing system. The Temporal Decoder is not needed for JPEG decoding.","In this regard, the invention facilitates the decompression of a plurality of differently encoded signals through the use of a single pipeline decoder and decompression system. The decoding and decompression pipeline processor is organized on a unique and special configuration which allows the handling of the multi-standard encoded video signals through the use of techniques all compatible with the single pipeline decoder and processing system. The Spatial Decoder is combined with the Temporal Decoder, and the Video Formatter is used in driving a video display.","Another aspect of the invention is the use of the combination of the Spatial Decoder and the Video Formatter for use with only still pictures. The compression standard independent Spatial Decoder performs all of the data processing within the boundaries of a single picture. Such a decoder handles the spatial decompression of the internal picture data which is passing through the pipeline and is distributed within associated random access memories, standard independent address generation circuits for handling the storage and retrieval of information into the memories. Still picture data is decoded at the output of the Spatial Decoder, and this output is employed as input to the multi-standard, configurable Video Formatter, which then provides an output to the display terminal. In a first sequence of similar pictures, each decompressed picture at the output of the Spatial Decoder is of the same length in bits by the time the picture reaches the output of the Spatial Decoder. A second sequence of pictures may have a totally different picture size and, hence, have a different length when compared to the first length. Again, all such second sequence of similar pictures are of the same length in bits by the time such pictures reach the output of the Spatial Decoder.","Another aspect of the invention is to internally organize the incoming standard dependent bitstream into a sequence of control tokens and DATA tokens, in combination with a plurality of sequentially-positioned reconfigurable processing stages selected and organized to act as a standard-independent, reconfigurable-pipeline-processor.","With regard to JPEG decoding, a single Spatial Decoder with no off chip DRAM can rapidly decode baseline JPEG images. The Spatial Decoder supports all features of baseline JPEG encoding standards. However, the image size that can be decoded may be limited by the size of the output buffer provided. The Spatial Decoder circuit also includes a random access memory circuit, having machine-dependent, standard independent address generation circuits for handling the storage of information into the memories.","As previously, indicated the Temporal Decoder is not required to decode JPEG-encoded video. Accordingly, signals carried by DATA tokens pass directly through the Temporal Decoder without further processing when the Temporal Decoder is configured for a JPEG operation.","Another aspect of the present invention is to provide in the Spatial Decoder a pair of memory circuits, such as buffer memory circuits, for operating in combination with the Huffman decoder\/video demultiplexor circuit (HD & VDM). A first buffer memory is positioned before the HD & VDM, and a second buffer memory is positioned after the HD & VDM. The HD & VDM decodes the bitstream from the binary ones and zeros that are in the standard encoded bitstream and turns such stream into numbers that are used downstream. The advantage of the two buffer system is for implementing a multi-standard decompression system. These two buffers, in combination with the identified implementation of the Huffman decoder, are described hereinafter in greater detail.","A still further aspect of the present multi-standard, decompression circuit is the combination of a Start Code Detector circuit positioned upstream of the first forward buffer operating in combination with the Huffman decoder. One advantage of this combination is increased flexibility in dealing with the input bitstream, particularly padding, which has to be added to the bitstream. The placement of these identified components, Start Code Detector, memory buffers, and Huffman decoder enhances the handling of certain sequences in the input bitstream.","In addition, off chip DRAMs are used for decoding JPEG-encoded video pictures in real time. The size and speed of the buffers used with the DRAMs will depend on the video encoded data rates.","The coding standards identify all of the standard dependent types of information that is necessary for storage in the DRAMs associated with the Spatial Decoder using standard independent circuitry.","3. Motion Picture Decompression","In the present invention, if motion pictures are being decompressed through the steps of decoding, a further Temporal Decoder is necessary. The Temporal Decoder combines the data decoded in the Spatial Decoder with pictures, previously decoded, that are intended for display either before or after the picture being currently decoded. The Temporal Decoder receives, in the picture coded datastream, information to identify this temporally-displaced information. The Temporal Decoder is organized to address temporally and spatially displaced information, retrieve it, and combine it in such a way as to decode the information located in one picture with the picture currently being decoded and ending with a resultant picture that is complete and is suitable for transmission to the video formatter for driving the display screen. Alternatively, the resultant picture can be stored for subsequent use in temporal decoding of subsequent pictures.","Generally, the Temporal Decoder performs the processing between pictures either earlier and\/or later in time with reference to the picture currently being decoded. The Temporal Decoder reintroduces information that is not encoded within the coded representation of the picture, because it s redundant and is already available at the decoder. More specifically, it is probable that any given picture will contain similar information as pictures temporally surrounding it, both before and after. This similarity can be made greater if motion compensation is applied. The Temporal Decoder and decompression circuit also reduces the redundancy between related pictures.","In another aspect of the present invention, the Temporal Decoder is employed for handling the standard-dependent output information from the Spatial Decoder. This standard dependent information for a single picture is distributed among several areas of DRAM in the sense that the decompressed output information, processed by the Spatial Decoder, is stored in other DRAM registers by other random access memories having still other machine-dependent, standard-independent address generation circuits for combining one picture of spatially decoded information packet of spatially decoded picture information, temporally displaced relative to the temporal position of the first picture.","In multi-standard circuits capable of decoding MPEG-encoded signals, larger logic DRAM buffers may be required to support the larger picture formats possible with MPEG.","The picture information is moving through the serial pipeline in 8 pel by 8 pel blocks. In one form of the invention, the address decoding circuitry handles these pel blocks (storing and retrieving) along such block boundaries. The address decoding circuitry also handles the storing and retrieving of such 8 by 8 pel blocks across such boundaries. This versatility is more completely described hereinafter.","A second Temporal Decoder may also be provided which passes the output of the first decoder circuit (the Spatial Decoder) directly to the Video Formatter for handling without signal processing delay.","The Temporal Decoder also reorders the blocks of picture data for display by a display circuit. The address decode circuitry, described hereinafter, provides handling of this reordering.","As previously mentioned, one important feature of the Temporal Decoder is to add picture information together from a selection of pictures which have arrived earlier or later than the picture under processing. When a picture is described in this context, it may mean any one of the following:\n\n","After the picture data information is processed by the Temporal Decoder, it is either displayed or written back into a picture memory location. This information is then kept for further reference to be used in processing another different coded data picture.","Re-ordering of the MPEG encoded pictures for visual display involves the possibility that a desired scrambled picture can be achieved by varying the re-ordering feature of the Temporal Decoder.","4. RAM Memory Map","The Spatial Decoder, Temporal Decoder and Video Formatter all use external DRAM. Preferably, the same DRAM is used for all three devices. While all three devices use DRAM, and all three devices use a DRAM interface in conjunction with an address generator, what each implements in DRAM is different. That is, each chip, e.g. spatial Decoder and Temporal Decoder, have a different DRAM interface and address generation circuitry even through they use a similar physical, external DRAM.","In brief, the Spatial Decoder implements two FIFOs in the common DRAM. Referring again to , one FIFO  is positioned before the Huffman decoder  and parser, and the other is positioned after the Huffman decoder and parser. The FIFOs are implemented in a relatively straightforward manner. For each FIFO, a particular portion of DRAM is set aside as the physical memory in which the FIFO will be implemented.","The address generator associated with the Spatial Decoder DRAM interface  keeps track of FIFO addresses using two pointers. One pointer points to the first word stored in the FIFO, the other pointer points to the last word stored in the FIFO, thus allowing read\/write operation on the appropriate word. When, in the course of a read or write operation, the end of the physical memory is reached, the address generator \u201cwraps around\u201d to the start of the physical memory.","In brief, the Temporal Decoder of the present invention must be able to store two full pictures or frames of whatever encoding standard (MPEG or H.261) is specified. For simplicity, the physical memory in the DRAM into which the two frames are stored is split into two halves, with each half being dedicated (using appropriate pointers) to a particular one of the two pictures.","MPEG uses three different picture types: Intra (I) Predicted (P) and Bidirectionally interpolated (B). As previously mentioned, B pictures are based on predictions from two pictures. One picture is from the future and one from the past. I pictures require no further decoding by the Temporal Decoder, but must be stored in one of the two picture buffers for later use in decoding P and B pictures. Decoding P pictures requires forming predictions from a previously decoded P or I picture. The decoded P picture is stored in a picture buffer for use decoding P and B pictures. B pictures can require predictions form both of the picture buffers. However, B pictures are not stored in the external DRAM.","Note that I and P pictures are not output from the Temporal Decoder as they are decoded. Instead, I and P pictures are written into one of the picture buffers, and are read out only when a subsequent I or P picture arrives for decoding. In other words, the Temporal Decoder relies on subsequent P or I pictures to flush previous pictures out of the two picture buffers, as further discussed hereinafter in the section on flushing. In brief, the Spatial Decoder can provide a fake I or P picture at the end of a video sequence to flush out the last P or I picture. In turn, this fake picture is flushed when a subsequent video sequence starts.","The peak memory band width load occurs when decoding B pictures. The worst case is the B frame may be formed from predictions from both the picture buffers, with all predictions being made to half-pixel accuracy.","As previously described, the Temporal Decoder can be configured to provide MPEG picture reordering. With this as picture reordering, the output of P and I pictures is delayed until the next P or I picture in the data stream starts to be decoded by the Temporal Decoder.","As the P or I pictures are reordered, certain tokens are stored temporarily on chip as the picture is written into the picture buffers. When the picture is read out for display, these stored tokens are retrieved. At the output of the Temporal Decoder, the DATA Tokens of the newly decoded P or I picture are replaced with DATA Tokens for the older P or picture.","In contrast, H.261 makes predictions only from the picture just decoded. As each picture is decoded, it is written into one of the two picture buffers so it can be used in decoding the next picture. The only DRAM memory operations required are writing 8\u00d78 blocks, and forming predictions with integer accuracy motion vectors.","In brief, the Video Formatter stores three frames or pictures. Three pictures need to be stored to accommodate such features as repeating or skipping pictures.","5. Bitstream Characteristics","Referring now particularly to the Spatial Decoder of the present invention, it is helpful to review the bitstream characteristics of the encoded datastream as these characteristics must be handled by the circuitry of the Spatial Decoder and the Temporal Decoder. For example, under one or more compression standards, the compression ratio of the standard is achieved by varying the number of bits that it uses to code the pictures of a picture. The number of bits can vary by a wide margin. Specifically, this means that the length of a bitstream used to encode a referenced picture of a picture might be identified as being one unit long, another picture might be a number of units long, while still a third picture could be a fraction of that unit.","None of the existing standards (MPEG 1.2, JPEG, H.261) define a way of ending a picture, the implication being that when the next picture starts, the current one has finished.","Additionally, the standards (H.261 specifically) allow incomplete pictures to be generated by the encoder.","In accordance with the present invention, there is provided a way of indicating the end of a picture by using one of its tokens: PICTURE_END. The still encoded picture data leaving the Start Code Detector consists of pictures starting with a PICTURE_START token and ending with a PICTURE_END token, but still of widely varying length. There may be other information transmitted here (between the first and second picture), but it is known that the first picture has finished.","The data stream at the output of the Spatial Decoder consists of pictures, still with picture-starts and picture-ends, of the same length (number of bits) for a given sequence. The length of time between a picture-start and a picture-end may vary.","The Video Formatter takes these pictures of non-uniform time and displays them on a screen at a fixed picture rate determined by the type of display being driven. Different display rates are used throughout the world, e.g. PAL-NTSC television standards. This is accomplished by selectively dropping or repeating pictures in a manner which is unique. Ordinary \u201cframe rate converters,\u201d e.g. 2-3 pulldown, operate with a fixed input picture rate, whereas the Video Formatter can handle a variable input picture rate.","6. Reconfigurable Processing Stage","Referring again to , the reconfigurable processing stage (RPS) comprises a token decode circuit  which is employed to receive the tokens coming from a two wire interface  and input latches . The output of the token decode circuit  is applied to a processing unit  over the two-wire interface  and an action identification circuit . The processing unit  is suitable for processing data under the control of the action identification circuit . After the processing is completed, the processing unit  connects such completed signals to the output, two-wire interface bus  through output latches .","The action identification decode circuit  has an input from the token decode circuit  over the two-wire interface bus  and\/or from memory circuits  and  over two-wire interface bus . The tokens from the token decode circuit  are applied simultaneously to the action identification circuit  and the processing unit . The action identification function as well as the RPS is described in further detail by tables and figures in a subsequent portion of this specification.","The functional block diagram in  illustrates those stages shown in ,  and  which are not standard independent circuits. The data flows through the token decode circuit , through the processing unit  and onto the two-wire interface circuit  through the output latches . If the Control Token is recognized by the RPS, it is decoded in the token decode circuit  and appropriate action will be taken. If it is not recognized, it will be passed unchanged to the output two-wire interface  through the output circuit . The present invention operates as a pipeline processor having a two-wire interface for controlling the movement of control tokens'through the pipeline. This feature of the invention is described in greater detail in the previously filed EPO patent application number 92306038.8.","In the present invention, the token decode circuit  is employed for identifying whether the token presently entering through the two-wire interface  is a DATA token or control token. In the event that the token being examined by the token decode circuit  is recognized, it is exited to the action identification circuit  with a proper index signal or flag signal indicating that action is to be taken. At the same time, the token decode circuit  provides a proper flag or index signal to the processing unit  to alert it to the presence of the token being handled by the action identification circuit .","Control tokens may also be processed.","A more detailed description of the various types of tokens usable in the present invention will be subsequently described hereinafter. For the purpose of this portion of the specification, it is sufficient to note that the address carried by the control token is decoded in the decoder  and is used to access registers contained within the action identification circuit . When the token being examined is a recognized control token, the action identification circuit  uses its reconfiguration state circuit for distributing the control signals throughout the state machine. As previously mentioned, this activates the state machine of the action identification decoder , which then reconfigures itself. For example, it may change coding standards. In this way, the action identification circuit  decodes the required action for handling the particular standard now passing through the state machine shown with reference to FIG. .","Similarly, the processing unit  which is under the control of the action identification circuit  is now ready to process the information contained in the data fields of the DATA token when it is appropriate for this to occur. On many occasions, a control token arrives first, reconfigures the action identification circuit  and is immediately followed by a DATA token which is then processed by the processing unit . The control token exits the output latches circuit  over the output two-wire interface  immediately preceding the DATA token which has been processed within the processing unit .","In the present invention, the action identification circuit, , is a state machine holding history state. The registers,  and  hold information that has been decoded from the token decoder  and stored in these registers. Such registers can be either on-chip or-off chip as needed. These plurality of state registers contain action information connected to the action identification currently being identified in the action identification circuit . This action information has been stored from previously decoded tokens and can affect the action that is selected. The connection  is going straight from the token decode  to the action identification block . This is intended to show that the action can also be affected by the token that is currently being processed by the token decode circuit .","In general, there is shown token decoding and data processing in accordance with the present invention. The data processing is performed as configured by the action identification circuit . The action is affected by a number of conditions and is affected by information generally derived from a previously decoded token or, more specifically, information stored from previously decoded tokens in registers  and , the current token under processing, and the state and history information that the action identification unit  has itself acquired. A distinction is thereby shown between Control tokens and DATA tokens.","In any RPS, some tokens are viewed by that RPS unit as being Control tokens in that they affect the operation of the RPS presumably at some subsequent time. Another set of tokens are viewed by the RPS as DATA tokens. Such DATA tokens contain information which is processed by the RPS in a way that is determined by the design of the particular circuitry, the tokens that have been previously decoded and the state of the action identification circuit . Although a particular RPS identifies a certain set of tokens for that particular RPS control and another set of tokens as data, that is the view of that particular RPS. Another RPS can have a different view of the same token. Some of the tokens might be viewed by one RPS unit as DATA Tokens while another RPS unit might decide that it is actually a Control Token, For example, the quantization table information, as far as the Huffman decoder and state machine is concerned, is data, because it arrives on its input as coded data, it gets formatted up into a series of 8 bit words, and they get formed into a token called a quantization table token (QUANT_TABLE) which goes down the processing pipeline. As far as that machine is concerned, all of that was data; it was handling data, transforming one sort of data into another sort of data, which is clearly a function of the processing performed by that portion of the machine. However, when that information gets to the inverse quantizer, it stores the information in that token a plurality of registers. In fact, because there are 64 8-bit numbers and there are many registers, in general, many registers may be present. This information is viewed as control information, and then that control information affects the processing that is done on subsequent DATA tokens because it affects the number that you multiply each data word. There is an example where one stage viewed that token as being data and another stage viewed it as being control.","Token data, in accordance with the invention is almost universally viewed as being data through the machine. One of the important aspects is that, in general, each stage of circuitry that has a token decoder will be looking for a certain set of tokens, and any tokens that it does not recognize will be passed unaltered through the stage and down the pipeline, so that subsequent stages downstream of the current stage have the benefit of seeing those tokens and may respond to them. This is an important feature, namely there can be communication between blocks that are not adjacent to one another using the token mechanism.","Another important feature of the invention is that each of the stages of circuitry has the processing capability within it to be able to perform the necessary operations for each of the standards, and the control, as to which operations are to be performed at a given time, come as tokens. There is one processing element that differs between the different stages to provide this capability. In the state machine ROM of the parser, there are three separate entirely different programs, one for each of the standards that are dealt with. Which program is executed depends upon a CODING_STANDARD token. In otherwords, each of these three programs has within it the ability to handle both decoding and the CODING_STANDARD standard token. When each of these programs sees which coding standard, is to be decoded next, they literally jump to the start address in the microcode ROM for that particular program. This is how stages deal with multi-standardness.","Two things are affected by the different standards. First, it affects what pattern of bits in the bitstream are recognized as a start-code or a marker code in order to reconfigure the shift register to detect the length of the start marker code. Second, there is a piece of information in the microcode that denotes what that start or marker code means. Recall that the coding of bits differs between the three standards. Accordingly, the microcode looks up in a table, specific to that compressor standard, something that is independent of the standard, i.e., a type of token that represents the incoming codes. This token is typically independent of the standard since in most cases, each of the various standards provide a certain code that will produce it.","The inverse quantizer  has a mathematical capability. The quantizer multiplies and adds, and has the ability to do all three compression standards which are configured by parameters. For example, a flag bit in the ROM in control tells the inverse quantizer whether or not to add a constant, K. Another flag tells the inverse quantizer whether to add another constant. The inverse quantizer remembers in a register the CODING_STANDARD token as it flows by the guantizer. When DATA tokens pass thereafter, the inverse guantizer remembers what the standard is and it looks up the parameters that it needs to apply to the processing elements in order to perform a proper operation. For example, the inverse quantizer will look up whether K is set to 0, or whether it is set to 1 for a particular compression standard, and will apply that to its processing circuitry.","In a similar sense the Huffman decoder  has a number of tables within it, some for JPEG, some for MPEG and some for H.261. The majority of those tables, in fact, will service more than one of those compression standards. Which tables are used depends on the syntax of the standard. The Huffman decoder works by receiving a command from the state machine which tells it which of the tables to use. Accordingly, the Huffman decoder does not itself directly have a piece of state going into it, which is remembered and which says what coding it is performing. Rather, it is the combination of the parser state machine and Huffman decoder together that contain information within them.","Regarding the Spatial Decoder of the present invention, the address generation is modified and is similar to that shown in , in that a number of pieces of information are decoded from tokens, such as the coding standard. The coding standard and additional information as well, is recorded in the registers and that affects the progress of the address generator state machine as it steps through and counts the macroblocks in the system, one after the other. The last stage would be the prediction filter  () which operates in one of two modes, either H.261 or MPEG and are easily identified.","7. Multi-standard Coding","The system of the present invention also provides a combination of the standard-independent indices generation circuits, which are strategically placed throughout the system in combination with the token decode circuits. For example, the system is employed for specifically decoding either the H.261 video standard, or the MPEG video standard or the JPEG video standard. These three compression coding standards specify similar processes to be done on the arriving data, but the structure of the datastreams is different. As previously discussed, it is one of the functions of the Start Code Detector to detect MPEG start-codes, H.261 start-codes, and JPEG marker codes, and convert them all into a form, i.e., a control token which includes a token stream embodying the current coding standard. The control tokens are passed through the pipeline processor, and are used, i.e., decoded, in the state machines to which they are relevant, and are passed through other state machines to which the tokens are not relevant. In this regard, the DATA Tokens are treated in the same fashion, insofar as they are processed only in the state machines that are configurable by the control tokens into processing such DATA Tokens. In the remaining state machines, they pass through unchanged.","More specifically, a control token in accordance with the present invention, can consist of more than one word in the token. In that case, a bit known as the extension bit is set specifying the use of additional words in the token for carrying additional information. Certain of these additional control bits contain indices indicating information for use in corresponding state machines to create a set of standard-independent indices signals. The remaining portions of the taken are used to indicate and identify the internal processing control function which is standard for all of the datastreams passing through the pipeline processor. In one form of the invention, the token extension is used to carry the current coding standard which is decoded by the relative token decode circuits distributed throughout the machine, and is used to reconfigure the action identification circuit  of stages throughout the machine wherever it is appropriate to operate under a new coding standard. Additionally, the token decode circuit can indicate whether a control token is related to one of the selected standards which the circuit was designed to handle.","More specifically, an MPEG start code and a JPEG marker are followed by an 8 bit value. The H.261 start code is followed by a 4 bit value. In this context, the Start Code Detector , by detecting either an MPEG start-code or a JPEG marker, indicates that the following 8 bits contain the value associated with the start-code. Independently, it can then create a signal which indicates that it is either an MPEG start code or a JPEG marker and not an H.261 start code. In this first instance, the 8 bit value is entered into a decode circuit, part of which creates a signal indicating the index and flag which is used within the current circuit for handling the tokens passing through the circuit. This is also used to insert portions of the control token which will be looked at thereafter to determine which standard is being handled. In this sense, the control token contains a portion indicating that it is related to an MPEG standard, as well as a portion which indicates what type of operation should be performed on the accompanying data. As previously discussed, this information is utilized in the system to reconfigure the processing stage used to perform the function required by the various standards created for that purpose.","For example, with reference to the H.261 start code, it is associated with a 4 bit value which follows immediately after the start code. The Start Code Detector passes this value into the token generator state machine. The value is applied to an 8 bit decoder which produces a 3 bit start number. The start number is employed to identify the picture-start of a picture number as indicated by the value.","The system also includes a multi-stage parallel processing pipeline operating under the principles of the two-wire interface previously described. Each of the stages comprises a machine generally taking the form illustrated in FIG. . The token decode circuit  is employed to direct the token presently entering the state machine into the action identification circuit  or the processing unit , as appropriate. The processing unit has been previously reconfigured by the next previous control token into the form needed for handling the current coding standard, which is now entering the processing stage and carried by the next DATA token. Further, in accordance with this aspect of the invention, the succeeding state machines in the processing pipeline can be functioning under one coding standard, i.e., H.261, while a previous stage can be operating under a separate standard, such as MPEG. The same two-wire interface is used for carrying both the control tokens and the DATA Tokens.","The system of the present invention also utilizes control tokens required to decode a number of coding standards with a fixed number of reconfigurable processing stages. More specifically, the PICTURE_END control token is employed because it is important to have an indication of when a picture actually ends. Accordingly, in designing a multi-standard machine, it is necessary to create additional control tokens within the multi-standard pipeline processing machine which will then indicate which one of the standard decoding techniques to use. Such a control token is the PICTURE_END token. This PICTURE_END token is used to indicate that the current picture has finished, to force the buffers to be flushed, and to push the current picture through the decoder to the display.","8. Multi-standard Processing Circuit\u2014Second Mode of Operation","A compression standard-dependent circuit, in the form of the previously described Start Code Detector, is suitably interconnected to a compression standard-independent circuit over an appropriate bus. The standard-dependent circuit is connected to a combination dependent-independent circuit over the same bus and an additional bus. The standard-independent circuit applies additional input to the standard dependent-independent circuit, while the latter provides information back to the standard-independent circuit. Information from the standard-independent circuit is applied to the output over another suitable bus. Table 600 illustrates that the multiple standards applied as the input to the standard-dependent Start Code Detector  include certain bit streams which have standard-dependent meanings within each encoded bit stream.","9. Start-code Detector","As previously indicated the Start Code Detector, in accordance with the present invention, is capable of taking MPEG, JPEG and H.261 bit streams and generating from them a sequence of proprietary tokens which are meaningful to the rest of the decoder. As an example of how multi-standard decoding is achieved, the MPEG (1 and 2) picture_start_code, the H.261 picture_start_code and the JPEG start_of_scan (SOS) marker are treated as equivalent by the Start Code Detector, and all will generate an internal PICTURE_START token. In a similar way, the MPEG sequence_start_code and the JPEG SOI (start_of_image) marker both generate a machine sequence_start_token. The H.261 standard, however, has no equivalent start code. Accordingly, the Start Code Detector, in response to the first H.261 picture_start_code, will generate a sequence_start token.","None of the above described images are directly used other than in the SCD. Rather, a machine PICTURE_START token, for example, has been deemed to be equivalent to the PICTURE_START images contained in the bit stream. Furthermore, it must be borne in mind that the machine PICTURE_START by itself, is not a direct image of the PICTURE_START in the standard. Rather, it is a control token which is used in combination with other control tokens to provide standard-independent decoding which emulates the operation of the images in each of the compression coding standards. The combination of control tokens in combination with the reconfiguration of circuits, in accordance with the information carried by control tokens, is unique in and of itself, as well as in further combination with indices and\/or flags generated by the token decode circuit portion of a respective state machine. A typical reconfigurable state machine will be described subsequently.","Referring again to Table 600, there are shown the names of a group of standard images in the left column. In the right column there are shown the machine dependent control tokens used in the emulation of the standard encoded signal which is present or not used in the standard image.","With reference to Table 600, it can be seen that a machine sequence_start signal is generated by the Start Code Detector, as previously described, when it decodes any one of the standard signals indicated in Table 600. The Start Code Detector creates sequence_start, group_start, sequence_end, slice_start, user-data, extra-data and PICTURE_START tokens for application to the two-wire interface which is used throughout the system. Each of the stages which operate in conjunction with these control tokens are configured by the contents of the tokens, or are configured by indices created by contents of the tokens, and are prepared to handle data which is expected to be received when the picture DATA Token arrives at that station.","As previously described, one of the compression standards, such as H.261, does not have a sequence_start image in its data stream, nor does it have a PICTURE_END image in its data stream. The Start Code Detector indicates the PICTURE_END point in the incoming bit stream and creates a PICTURE_END token. In this regard, the system of the present invention is intended to carry data words that are fully packed to contain a bit of information in each of the register positions selected for use in the practice of the present invention. To this end, 15 bits have been selected as the number of bits which are passed between two start codes. Of course, it will be appreciated by one of ordinary skill in the art, that a selection can be made to include either greater or fewer than 15 bits. In other words, all 15 bits of a data word being passed from the Start Code Detector into the DRAM interface are required for proper operation. Accordingly, the Start Code Detector creates extra bits, called padding, which it inserts into the last word of a DATA Token. For purposes of illustration 15 data bits has been selected.","To perform the Padding operation, in accordance with the present invention, binary 0 followed by a number of binary 1's are automatically inserted to complete the 15 bit data word. This data is then passed through the coded data buffer and presented to the Huffman decoder, which removes the padding. Thus, an arbitrary number of bits can be passed through a buffer of fixed size and width.","In one embodiment, a slice_start control token is used to identify a slice of the picture. A slice_start control token is employed to segment the picture into smaller regions. The size of the region is chosen by the encoder, and the Start Code Detector identifies this unique pattern of the slice_start code in order for the machine-dependent state stages, located downstream from the Start Code Detector, to segment the picture being received into smaller regions. The size of the region is chosen by the encoder, recognized by the Start Code Detector and used by the recombination circuitry and control tokens to decompress the encoded picture. The slice_start_codes are principally used for error recovery.","The start codes provide a unique method of starting up the decoder, and this will subsequently be described in further detail. There are a number of advantages in placing the Start Code Detector before the coded data buffer, as opposed to placing the Start Code Detector after the coded data buffer and before the Huffman decoder and video demultiplexor. Locating the Start Code Detector before the first buffer allows it to 1) assemble the tokens, 2) decode the standard control signals, such as start codes, 3) pad the bitstream before the data goes into the buffer, and 4) create the proper sequence of control tokens to empty the buffers, pushing the available data from the buffers into the Huffman Decoder.","Most of the control token output by the Start Code Detector directly reflect syntactic elements of the various picture and video coding standards. The Start Code Detector converts the syntactic elements into control tokens. In addition to these natural tokens, some unique and\/or machine-dependent tokens are generated. The unique tokens include those tokens which have been specifically designed for use with the system of the present invention which are unique in and of themselves, and are employed for aiding in the multi-standard nature of the present invention. Examples of such unique tokens include PICTURE_END and CODING_STANDARD.","Tokens are also introduced to remove some of the syntactic differences between the coding standards and to function in co-operation with the error conditions. The automatic token generation is done after the serial analysis of the standard-dependent data. Therefore, the Spatial Decoder responds equally to tokens that have been supplied directly to the input of the Spatial Decoder, i.e. the SCD, as well as to tokens that have been generated following the detection of the start-codes in the coded data. A sequence of extra tokens is inserted into the two-wire interface in order to control the multi-standard nature of the present invention.","The MPEG and H.261 coded video streams contain standard dependent, non-data, identifiable bit patterns, one of which is hereinafter called a start image and\/or standard-dependent code. A similar function is served in JPEG, by marker codes. These start\/marker codes identify significant parts of the syntax of the coded datastream. The analysis of start\/marker codes performed by the Start Code Detector is the first stage in parsing the coded data.","The start\/marker code patterns are designed so that they can be identified without decoding the entire bit stream. Thus, they can be used, in accordance with the present invention, to assist with error recovery and decoder start-up. The Start Code Detector provides facilities to detect errors in the coded data construction and to assist the start-up of the decoder. The error detection capability of the Start Code Detector will subsequently be discussed in further detail, as will the process of starting up of the decoder.","The aforementioned description has been concerned primarily with the characteristics of the machine-dependent bit stream and its relationship with the addressing characteristics of the present invention. The following description is of the bit stream characteristics of the standard-dependent coded data with reference to the Start Code Detector.","Each of the standard compression encoding systems employs a unique start code configuration or image which has been selected to identify that particular compression specification. Each of the start codes also carries with it a start code value. The start code value is employed to identify within the language of the standard the type of operation that the start code is associated with. In the multi-standard decoder of the present invention, the compatibility is based upon the control token and DATA token configuration as previously described. Index signals, including flag signals, are circuit-generated within each state machine, and are described hereinafter as appropriate.","The start and\/or marker codes contained in the standards, as well as other standard words as opposed to data words, are sometimes identified as images to avoid confusion with the use of code and\/or machine-dependent codes to refer to the contents of control and\/or DATA tokens used in the machine. Also, the term start code is often used as a generic term to refer to JPEG marker codes as well as MPEG and H.261 start codes. Marker codes and start codes serve the same purpose. Also, the term \u201cflush\u201d is used both to refer to the FLUSH token, and as a verb, for example when referring to flushing the Start Code Detector shift registers (including the signal \u201cflushed\u201d). To avoid confusion, the FLUSH token is always written in upper case. All other uses of the term (verb or noun) are in lower case.","The standard-dependent coded input picture input stream comprises data and start images of varying lengths. The start images carry with them a value telling the user what operation is to be performed on the data which immediately follows according to the standard. However, in the multi-standard pipeline processing system of the present invention, where compatibility is required for multiple standards, the system has been optimized for handling all functions in all standards. Accordingly, in many situations, unique start control tokens must be created which are compatible not only with the values contained in the values of the encoded signal standard image, but which are also capable of controlling the various stages to emulate the operation of the standard as represented by specified parameters for each standard which are well known in the art. All such standards are incorporated by reference into this specification.","It is important to understand the relationship between tokens which, alone or in combination with other control tokens, emulate the nondata information contained in the standard bit stream. A separate set of index signals, including flag signals, are generated by each state machine to handle some of the processing within that state machine. Values carried in the standards can be used to access machine dependent control signals to emulate the handling of the standard data and non-data signals. For example, the slice_start token is a two word token, and it is then entered onto the two wire interface as previously described.","The data input to the system of the present invention may be a data source from any suitable data source such as disk, tape, etc., the data source providing 8 bit data to the first functional stage in the Spatial Decoder, the Start Code Detector  (FIG. ). The Start Code Detector includes three shift registers; the first shift register is 8 bits wide, the next is 24 bits wide, and the next is 15 bits wide. Each of the registers is part of the two-wire interface. The data from the data source is loaded into the first register as a single 8 bit byte during one timing cycle. Thereafter, the contents of the first shift register is shifted one bit at a time into the decode (second) shift register. After 24 cycles, the 24 bit register is full.","Every 8 cycles, the 8 bit bytes are loaded into the first shift register. Each byte is loaded into the value shift register  (FIG. ), and 8 additional cycles are used to empty it and load the shift register . Eight cycles are used to empty it, so after three of those operations or 24 cycles, there are still three bytes in the 24 bit register. The value decode shift register  is still empty.","Assuming that there is now a PICTURE_START word in the 24 bit shift register, the detect cycle recognizes the PICTURE_START code pattern and provides a start signal as its output. Once the detector has detected a start, the byte following it is the value associated with that start code, and this is currently sitting in the value register .","Since the contents of the detect shift register has been identified as a start code, its contents must be removed from the two wire interface to ensure that no further processing takes place using these 3 bytes. The decode register is emptied, and the value decode shift register  waits for the value to be shifted all the way over to such register.","The contents now of the low order bit positions of the value decode shift register contains a value associated with the PICTURE_START. The Spatial Decoder equivalent to the standard PICTURE_START signal is referred to as the SD PICTURE_START signal. The SD PICTURE_START signal itself is going to now be contained in the token header, and the value is going to be contained in the extension word to the token header.","10. Tokens","In the practice of the present invention, a token is a universal adaptation unit in the form of an interactive interfacing messenger package for control and\/or data functions and is adapted for use with a reconfigurable processing stage (RPS) which is a stage, which in response to a recognized token, reconfigures itself to perform various operations.","Tokens may be either position dependent or position independent upon the processing stages for performance of various functions. Tokens may also be metamorphic in that they can be altered by a processing stage and then passed down the pipeline for performance of further functions. Tokens may interact with all or less than all of the stages and in this regard may interact with adjacent and\/or non-adjacent stages. Tokens may be position dependent for some functions and position independent for other functions, and the specific interaction with a stage may be conditioned by the previous processing history of a stage.","A PICTURE_END token is a way of signalling the end of a picture in a multi-standard decoder.","A multi-standard token is a way of mapping MPEG, JPEG and H.261 data streams onto a single decoder using a mixture of standard dependent and standard independent hardware and control tokens.","A SEARCH_MODE token is a technique for searching MPEG, JPEG and H.261 data streams which allows random access and enhanced error recovery.","A STOP_AFTER_PICTURE token is a method of achieving a clear end to decoding which signals the end of a picture and clears the decoder pipeline, i.e., channel change.","Furthermore, padding a token is a way of passing an arbitrary number of bits through a fixed size, fixed width buffer.","The present invention is directed to a pipeline processing system which has a variable configuration which uses tokens and a two-wire system. The use of control tokens and DATA Tokens in combination with a two-wire system facilitates a multi-standard system capable of having extended operating capabilities as compared with those systems which do not use control tokens.","The control tokens are generated by circuitry within the decoder processor and emulate the operation of a number of different type standard-dependent signals passing into the serial pipeline processor for handling. The technique used is to study all the parameters of the multi-standards that are selected for processing by the serial processor and noting 1) their similarities, 2) their dissimilarities, 3) their needs and requirements and 4) selecting the correct token function to effectively process all of the standard signals sent into the serial processor. The functions of the tokens are to emulate the standards. A control token function is used partially as an emulation\/translation between the standard dependent signals and as an element to transmit control information through the pipeline processor.","In prior art system, a dedicated machine is designed according to well-known techniques to identify the standard and then set up dedicated circuitry by way of microprocessor interfaces. Signals from the microprocessor are used to control the flow of data through the dedicated downstream components. The selection, timing and organization of this decompression function is under the control of fixed logic circuitry as assisted by signals coming from the microprocessor.","In contrast, the system of the present invention configures the downstream functional stages under the control of the control tokens. An option is provided for obtaining needed and\/or alternative control from the MPU.","The tokens provide and make a sensible format for communicating information through the decompression circuit pipeline processor. In the design selected hereinafter and used in the preferred embodiment, each word of a token is a minimum of 8 bits wide, and a single token can extend over one or more words. The width of the token is changeable and can be selected as any number of bits. An extension bit indicates whether a token is extended beyond the current word, i.e., if it is set to binary one in all words of a token, except the last word of a token. If the first word of a token has an extension bit of zero, this indicates that the token is only one word long.","Each token is identified by an address field that stares at bit 7 of the first word of the token. The address field is variable in length and can potentially extend over multiple words. In a preferred embodiment, the address is no longer than 8 bits long. However, this is not a limitation on the invention, but on the magnitude of the processing steps elected to be accomplished by use of these tokens. It is to be noted under the extension bit identification label that the extension bit in words 1 and 2 is a 1, signifying that additional words will be coming thereafter. The extension bit in word 3 is a zero, therefore indicating the end of that token.","The token is also capable of variable bit length. For example, there are 9 bits in the token word plus the extension bit for a total of 10 bits. In the design of the present invention, output buses are of variable width. The output from the Spatial Decoder is 9 bits wide, or 10 bits wide when the extension bit is included. In a preferred embodiment, the only token that takes advantage of these extra bits is the DATA token; all other tokens ignore this extra bit. It should be understood that this is not a limitation, but only an implementation.","Through the use of the DATA token and control token configuration, it is possible to vary the length of the data being carried by these DATA tokens in the sense of the number of bits in one word. For example, it has been discussed that data bits in word of a DATA Token can be combined with the data bits in another word of the same DATA token to form an 11 bit or 10 bit address for use in accessing the random access memories used throughout this serial decompression processor. This provides an additional degree of variability that facilitates a broad range of versatility.","As previously described, the DATA token carries data from one processing stage to the next. Consequently, the characteristics of this token change as it passes through the decoder. For example, at the input to the Spatial Decoder, DATA Tokens carry bit serial coded video data packed into 3 bit words. Here, there is no limit to the length of each token. However, to illustrate the versatility of this aspect of the invention (at the output of the Spatial Decoder circuit), each DATA Token carries exactly 64 words and each word is 9 bits wide. More specifically, the standard encoding signal allows for different length messages to encode different intensities and details of pictures. The first picture of a group normally carries the longest number of data bits because it needs to provide the most information to the processing unit so that it can start the decompression with as much information as possible. Words which follow later are typically shorter in length because they contain the difference signals comparing the first word with reference to the second position on the scan information field.","The words are interspersed with each other, as required by the standard encoding system, so that variable amounts of data are provided into the input of the Spatial Decoder. However, after the Spatial Decoder has functioned, the information is provided at its output at a picture format rate suitable for display on a screen. The output rate in terms of time of the spatial decoder may vary in order to interface with various display systems throughout the world, such as NTSC, PAL and SECAM. The video formatter converts this variable picture rate to a constant picture rate suitable for display. However, the picture data is still carried by DATA tokens consisting of 64 words.","11. DRAM Interface","A single high performance, configurable DRAM interface is used on each of the 3 decoder chips. In general, the DRAM interface on each chip is substantially the same; however, the interfaces differ from one to another in how they handle channel priorities. This interface is designed to directly drive the external DRAMs used by the Spatial Decoder, the Temporal Decoder and the Video Formatter. Typically, no external logic, buffers or components will be required to connect the DRAM interface to the DRAMs in those systems.","In accordance with the present invention, the interface is configurable in two ways:\n\n","In general, the DRAM interface is a standard-independent block implemented on each of the three chips in the system. Again, these are the Spatial Decoder, Temporal Decoder and video formatter. Referring again to ,  and , these figures show block diagrams that depict the relationship between the DRAM interface, and the remaining blocks of the Spatial Decoder, Temporal Decoder and video formatter, respectively. On each chip, the DRAM interface connects the chip to an external DRAM. External DRAM is used because, at present, it is not practical to fabricate on chip the relatively large amount of DRAM needed. Note: each chip has its own external DRAM and its own DRAM interface.","Furthermore, while the DRAM interface is compression standard-independent, it still must be configured to implement each of the multiple standards, H.261, JPEG and MPEG. How the DRAM interface is reconfigured for multi-standard operation will be subsequently further described herein.","Accordingly, to understand the operation of the DRAM interface requires an understanding of the relationship between the DRAM interface and the address generator, and how the two communicate using the two wire interface.","In general, as its name implies, the address generator generates the addresses the DRAM interface needs in order to address the DRAM (e.g., to read from or to write to a particular address in DRAM). With a two-wire interface, reading and writing only occurs when the DRAM interface has both data (from preceding stages in the pipeline), and a valid address (from address generator). The use of a separate address generator simplifies the construction of both the address generator and the DRAM interface, as discussed further below.","In the present invention, the DRAM interface can operate from a clock which is asynchronous to both the address generator and to the clocks of the stages through which data is passed. Special techniques have been used to handle this asynchronous nature of the operation.","Data is typically transferred between the DRAM interface and the rest of the chip in blocks of 64 bytes (the only exception being prediction data in the Temporal Decoder) Transfers take place by means of a device known as a \u201cswing buffer\u201d. This is essentially a pair of RAMs operated in a double-buffered configuration, with the DRAM interface filling or emptying one RAM while another part of the chip empties or fills the other RAM. A separate bus which carries an address from an address generator is associated with each swing buffer.","In the present invention, each of the chips has four swing buffers, but the function of these swing buffers is different in each case. In the spatial decoder, one swing buffer is used to transfer coded data to the DRAM, another to read coded data from the DRAM, the third to transfer tokenized data to the DRAM and the fourth to read tokenized data from the DRAM. In the Temporal Decoder, however, one swing buffer is used to write intra or predicted picture data to the DRAM, the second to read intra or predicted data from the DRAM and the other two are used to read forward and backward prediction data. In the video formatter, one swing buffer is used to transfer data to the DRAM and the other three are used to read data from the DRAM, one for each of luminance (Y) and the red and blue color difference data (Cr and Cb, respectively).","The following section describes the operation of a hypothetical DRAM interface which has one write swing buffer and one read swing buffer. Essentially, this is the same as the operation of the Spatial Decoder's DRAM interface. The operation is illustrated in FIG. .",{"@attributes":{"id":"p-0578","num":"0643"},"figref":"FIG. 23","b":["301","302","301","301"]},"A unique feature of the DRAM interface  is its ability to communicate independently with the address generator  and with the stages that provide or accept the data. For example, the address generator may generate an address associated with the data in the write swing buffer (FIG. ), but no action will be taken until the write swing buffer signals that there is a block of data ready to be written to the external DRAM. Similarly, the write swing buffer may contain a block of data which is ready to be written to the external DRAM, but no action is taken until an address is supplied on the appropriate bus from the address generator . Further, once one of the RAMs in the write swing buffer has been filled with data, the other may be completely filled and \u201cswung\u201d to the DRAM interface side before the data input is stalled (the two-wire interface accept signal set low).","In understanding the operation of the DRAM interface  of the present invention, it is important to note that in a properly configured system, the DRAM interface will be able to transfer data between the swing buffers and the external DRAM  at least as fast as the sum of all the average data rates between the swing buffers and the rest of the chip.","Each DRAM interface  determines which swing buffer it will service next. In general, this will either be a \u201cround robin\u201d (i.e., the next serviced swing buffer is the next available swing buffer which has least recently had a turn), or a priority encoder, (i.e., in which some swing buffers have a higher priority than others). In both cases, an additional request will come from a refresh request generator which has a higher priority than all the other requests. The refresh request is generated from a refresh counter which can be programmed via the microprocessor interface.","Referring now to , there is shown a block diagram of a write swing buffer. The write swing buffer interface includes two blocks of RAM, RAM and RAM. As discussed further herein, data is written into RAM and RAM from the previous stage, under the control of the write address  and control . From RAM and RAM, the data is written into DRAM . When writing data into DRAM , the DRAM row address is provided by the address generator, and the column address is provided by the write address and control, as described further herein. In operation, valid data is presented at the input  (data in). Typically, the data is received from the previous stage. As each piece of data is accepted by the DRAM interface, it is written into RAM and the write address control increments the RAM address to allow the next piece of data to be written into RAM. Data continues to be written into RAM until either there is no more data, or RAM is full. When RAM is full, the input side gives up control and sends a signal to the read side to indicate that RAM is now ready to be read. This signal passes between two asynchronous clock regimes and, therefore, passes through three synchronizing flip flops.","Provided RAM is empty, the next item of data to arrive on the input side is written into RAM. Otherwise, this occurs when RAM has emptied. When the round robin or priority encoder (depending on which is used by the particular chip) indicates that it is now the turn of this swing buffer to be read, the DRAM interface reads the contents of RAM and writes them to the external DRAM . A signal is then sent back across the asynchronous interface, to indicate that RAM is now ready to be filled again.","If the DRAM interface empties RAM and \u201cswings\u201d it before the input side has filled RAM , then data can be accepted by the swing buffer continually. Otherwise, when RAM is filled, the swing buffer will set its accept single low until RAM has been \u201cswung\u201d back for use by the input side.","The operation of a read swing buffer, in accordance with the present invention, is similar, but with the input and output data busses reversed.","The DRAM interface of the present invention is designed to maximize the available memory bandwidth. Each 8\u00d78 block of data is stored in the same DRAM page. In this way, full use can be made of DRAM fast page access modes, where one row address is supplied followed by many column addresses. In particular, row addresses are supplied by the address generator, while column addresses are supplied by the DRAM is interface, as discussed further below.","In addition, the facility is provided to allow the data bus to the external DRAM to be 8, 16 or 32 bits wide. Accordingly, the amount of DRAM used can be matched to the size and bandwidth requirements of the particular application.","In this example (which is exactly how the DRAM interface on the Spatial Decoder works) the address generator provides the DRAM interface with block addresses for each of the read and write swing buffers. This address is used as the row address for the DRAM. The six bits of column address are supplied by the DRAM interface itself, and these bits are also used as the address for the swing buffer RAM. The data bus to the swing buffers is 32 bits wide. Hence, if the bus width to the external DRAM is less than 32 bits, two or four external DRAM accesses must be made before the next word is read from a write swing buffer or the next word is written to a read swing buffer (read and write refer to the direction of transfer relative to the external DRAM).","The situation is more complex in the case of the Temporal Decoder and the Video Formatter. The Temporal Decoder's addressing is more complex because of its predictive aspects as discussed further in this section. The video formatter's addressing is more complex because of multiple video output standard aspects, as discussed further in the sections relating to the video formatter.","As mentioned previously, the Temporal Decoder has four swing buffers: two are used to read and write decoded intra and predicted (I and P) picture data. These operate as described above. The other two are used to receive prediction data. These buffers are more interesting.","In general, prediction data will be offset from the position of the block being processed as specified in the motion vectors in x and y. Thus, the block of data to be retrieved will not generally correspond to the block boundaries of the data as it was encoded (and written into the DRAM). This is illustrated in , where the shaded area represents the block that is being formed whereas the dotted outline represents the block from which it is being predicted. The address generator converts the address specified by the motion vectors to a block offset (a whole number of blocks), as shown by the big arrow, and a pixel offset, as shown by the little arrow.","In the address generator, the frame pointer, base block address and vector offset are added to form the address of the block to be retrieved from the DRAM. If the pixel offset is zero, only one request is generated. If there is an offset in either the x or y dimension then two requests are generated, i.e., the original block address and the one immediately below. With an offset in both x and y, four requests are generated. For each block which is to be retrieved, the address generator calculates start and stop addresses which is best illustrated by an example.","Consider a pixel offset of (1,1), as illustrated by the shaded area in FIG. . The address generator makes four requests, labelled A through D in the Figure. The problem to be solved is how to provide the required sequence of row addresses quickly. The solution is to use \u201cstart\/stop\u201d technology, and this is described below.","Consider block A in FIG. . Reading must start at position (1,1) and end at position (7,7). Assume for the moment that one byte is being read at a time (i.e., an 8 bit DRAM interface). The x value in the co-ordinate pair forms the three LSBs of the address, the y value the three MSB. The x and y start values are both 1, providing the address, . Data is read from this address and the x value is incremented. The process is repeated until the x value reaches its stop value, at which point, the y value is incremented by 1 and the x start value is reloaded, giving an address of . As each byte of data is read, the x value is again incremented until it reaches its stop value. The process is repeated until both x and y values have reached their stop values. Thus, the address sequence of , , , , , , ,  . . . , , , . . . ,  . . . , . . . , , . . . , is generated.","In a similar manner, the start and stop co-ordinates for block B are: (,) and (,), for block C: (,) and (,), and for block D: (,) and (,).","The next issue is where this data should be written. Clearly, looking at block A, the data read from address  should be written to address  in the swing buffer, while the data from address  should be written to address  in the swing buffer, and so on. Similarly, the data read from address  in block B should be written to address  in the swing buffer and the data from address  should be written to address  in the swing buffer. This function turns out to have a very simple implementation, as outlined below.","Consider block A. At the start of reading, the swing buffer address register is loaded with the inverse of the stop value. The y inverse stop value forms the 3 MSBs and the x inverse stop value forms the 3 LSB. In this case, while the DRAM interface is reading address  in the external DRAM, the swing buffer address is zero. The swing buffer address register is then incremented as the external DRAM address register is incremented, as consistent with proper prediction addressing.","The discussion so far has centered on an 8 bit DRAM interface. In the case of a 16 or 32 bit interface, a few minor modifications must be made. First, the pixel offset vector must be \u201cclipped\u201d so that it points to a 16 or 32 bit boundary. In the example we have been using, for block A, the first DRAM read will point to address , and data in addresses  through  will be read. Second, the unwanted data must be discarded. This is performed by writing all the data into the swing buffer (which must now be physically larger than was necessary in the 8 bit case) and reading with an offset. When performing MPEG half-pel interpolation, 9 bytes in x and\/or y must be read from the DRAM interface. In this case, the address generator provides the appropriate start and stop addresses. Some additional logic in the DRAM interface is used, but there is no fundamental change in the way the DRAM interface operates.","The final point to note about the Temporal Decoder DRAM interface of the present invention, is that additional information must be provided to the prediction filters to indicate what processing is required on the data. This consists of the following:\n\n","The last byte flag can be generated as the data is read out of the swing buffer. The other signals are derived from the address generator and are piped through the DRAM interface so that they are associated with the correct block of data as it is read out of the swing buffer by the prediction filter block.","In the Video Formatter, data is written into the external DRAM in blocks, but is read out in raster order. Writing is exactly the same as already described for the Spatial Decoder, but reading is a little more complex.","The data in the Video Formatter, external DRAM is organized so that at least 8 blocks of data fit into a single page. These 8 blocks are 8 consecutive horizontal blocks. When rasterizing, 8 bytes need to be read out of each of a consecutive blocks and written into the swing buffer (i.e., the same row in each of the 8 blocks).","Considering the top row (and assuming a byte-wide interface), the x address (the three LSBS) is set to zero, as is the y address (3 MSBS). The x address is then incremented as each of the first 8 bytes are read out. At this point, the top part of the address (bit  and above\u2212LSB=bit ) is incremented and the x address (3 LSBS) is reset to zero. This process is repeated until 64 bytes have been read. With a 16 or 32 bit wide interface to the external DRAM the x address is merely incremented by two or four, respectively, instead of by one.","In the present invention, the address generator can signal to the DRAM interface that less than 64 bytes should be read (this may be required at the beginning or end of a raster line), although a multiple of 8 bytes is always read. This is achieved by using start and stop values. The start value is used for the top part of the address (bit  and above), and the stop value is compared with the start value to generate the signal which indicates when reading should stop.","The DRAM interface timing block in the present invention uses timing chains to place the edges of the DRAM signals to a precision of a quarter of the system clock period. Two quadrature clocks from the phase locked loop are used. These are combined to form a notional 2x clock. Any one chain is then made from two shift registers in parallel, on opposite phases of the 2x clock.","First of all, there is one chain for the page start cycle and another for the read\/write\/refresh cycles. The length of each cycle is programmable via the microprocessor interface, after which the page start chain has a fixed length, and the cycle chain's length changes as appropriate during a page start.","On reset, the chains are cleared and a pulse is created. The pulse travels along the chains and is directed by the state information from the DRAM interface. The pulse generates the DRAM interface clock. Each DRAM interface clock period corresponds to one cycle of the DRAM, consequently, as the DRAM cycles have different lengths, the DRAM interface clock is not at a constant rate.","Moreover, additional timing chains combine the pulse from the above chains with the information from the DRAM interface to generate the output strobes and enables such as notcas, notras, notwe, notbe.","12. Prediction Filters","Referring again to , , , and more particularly to , there is shown a block diagram of the Temporal Decoder. This includes the prediction filter. The relationship between the prediction filter and the rest of the elements of the temporal decoder is shown in greater detail in FIG. . The essence of the structure of the prediction filter is shown in . A detailed description of the operation of the prediction filter can be found in the section, \u201cMore Detailed Description of the Invention.\u201d","In general, the prediction filter in accordance with the present invention, is used in the MPEG and H.261 modes, but not in the JPEG mode. Recall that in the JPEG mode, the Temporal Decoder just passes the data through to the Video Formatter, without performing any substantive decoding beyond that accomplished by the Spatial Decoder. Referring again to , in the MPEG mode the forward and backward prediction filters are identical and they filter the respective MPEG forward and backward prediction blocks. In the H.261 mode, however, only the forward prediction filter is used, since H.261 does not use backward prediction.","Each of the two prediction filters of the present invention is substantially the same. Referring again to  and more particularly to , there is shown a block diagram of the structure of a prediction filter. Each prediction filter consists of four stages in series. Data enters the format stage  and is placed in a format that can be readily filtered. In the next stage  an I-D prediction is performed on the X-coordinate. After the necessary transposition is performed by a dimension buffer stage , an I-D prediction is performed on the Y-coordinate in stage . How the stage perform the filtering is further described in greater detail subsequently. Which filtering operations are required, are defined by the compression standard. In the case of H.261, the actual filtering performed is similar to that of a low pass filter.","Referring again to , multi-standard operation requires that the prediction filters be reconfigurable to perform either MPEG or H.261 filtering, or to perform no filtering at all in JPEG mode. As with many other reconfigurable aspects of the three chip system, the prediction filter is reconfigured by means of tokens. Tokens are also used to inform the address generator of the particular mode of operation. In this way, the address generator can supply the prediction filter with the addresses of the needed data, which varies significantly between MPEG and JPEG.","13. Accessing Registers","Most registers in the microprocessor interface (MPI) can only be modified if the stage with which they are associated is stopped. Accordingly, groups of registers will typically be associated with an access register. The value zero in an access register indicates that the group of registers associated with that particular access register should not be modified. Writing 1 to an access register requests that a stage be stopped. The stage may not stop immediately, however, so the stages access register will hold the value, zero, until it is stopped.","Any user software associated with the MPI and used to perform functions by way of the MPI should wait \u201cafter writing a 1 to a request access register\u201d until 1 is read from the access register. If a user writes a value to a configuration register while its access register is set to zero, the results are undefined.","14. Micro-processor Interface","A standard byte wide micro-processor interface (MPI) is used on all circuits with in the Spatial Decoder and Temporal Decoder. The MPI operates asynchronously with various Spatial and Temporal Decoder clocks. Referring to Table A.6.1 of the subsequent further detailed description, there is shown the various MPI signals that are used on this interface. The character of the signal is shown on the input\/output column, the signal name is shown on the signal name column and a description of the function of the signal is shown in the description column. The MPI electrical specification are shown with reference to Table A.6.2. All the specifications are classified according to type and there types are shown in the column entitled symbol. The description of what these symbols represent is shown in the parameter column. The actual specifications are shown in the respective columns min, max and units.","The DC operating conditions can be seen with reference to Table A.6.3. Here the column headings are the same as with reference to Table A.6.2. The DC electrical characteristics are shown with reference to Table A.6.4 and carry the same column headings as depicted in Tables A.6.2 and A.6.3.","15. MPI Read Timing","The AC characteristics of the MPI read timing diagrams are shown with reference to FIG. . Each line of the Figure is labelled with a corresponding signal name and the timing is given in nano-seconds. The full microprocessor interface read timing characteristics are shown with reference to Table A.6.5. The column entitled Number is used to indicate the signal corresponding to the name of that signal as set forth in the characteristic column. The columns identified by MIN and MAX provide the minimum length of time that the signal is present the maximum amount of time that this signal is available. The Units column gives the units of measurement used to describe the signals.","16. MPI Write Timing","The general description of the MPI write timing diagrams are shown with reference to FIG. . This Figure shows each individual signal name as associated with the MPI write timing. The name, the characteristic of the signal, and other various physical characteristics are shown with reference to Table 6.6.","17. Keyhole Address Locations","In the present invention, certain less frequently accessed memory map locations have been placed behind keyhole registers. A keyhole register has two registers associated with it. The first register is a keyhole address register and the second register is a keyhole data register. The keyhole address specifies a location within a extended address space. A read or a write operation to a keyhole data register accesses the locations specified by the keyhole address register. After accessing a keyhole data register, the associated keyhole address register increments. Random access within the extended address space is only possible by writing in a new value to the keyhole address register for each access. A circuit within the present invention may have more than one keyhole memory maps. Nonetheless, there is no interaction between the different keyholes.","18. PICTURE-END","Referring again to , there is shown a general block diagram of the Spatial Decoder used in the present invention. It is through the use of this block diagram that the function of PICTURE_END will be described. The PICTURE_END function has the multi-standard advantage of being able to handle H.261 encoded picture information, MPEG and JPEG signals.","As previously described, the system of  is interconnected by the two wire interface previously described. Each of the functional blocks is arranged to operate according to the state machine configuration shown with reference to FIG. .","In general, the PICTURE_END function in accordance with the invention begins at the Start Code Detector which generates a PICTURE_END control token. The PICTURE_END control token is passed unaltered through the start-up control circuit to the DRAM interface. Here it is used to flush out the write swing buffers in the DRAM interface. Recall, that the contents of a swing buffer are only written to RAM when the buffer is full. However, a picture may end at a point where the buffer is not full, therefore, causing the picture data to become stuck. The PICTURE_END token forces the data out of the swing buffer.","Since the present invention is a multi-standard machine, the machine operates differently for each compression standard. More particularly, the machine is fully described as operating pursuant to machine-dependent action cycles. For each compression standard, a certain number of the total available action cycles can be selected by a combination of control tokens and\/or output signals from the MPU or they can be selected by the design of the control tokens themselves. In this regard, the present invention is organized so as to delay the information from going into subsequent blocks until all of the information has been collected in an upstream block. The system waits until the data has been prepared for passing to the next stage. In this way, the PICTURE_END signal is applied to the coded data buffer, and the control portion of the PICTURE_END signal causes the contents of the data buffers to be read and applied to the Huffman decoder and video demultiplexor circuit.","Another advantage of the PICTURE_END control token is to identify, for the use by the Huffman decoder demultiplexor, the end of picture even though it has not had the typically expected full range and\/or number of signals applied to the Huffman decoder and video demultiplexor circuit. In this situation, the information held in the coded data buffer is applied to the Huffman decoder and video demultiplexor as a total picture. In this way, the state machine of the Huffman decoder and video demultiplexor can still handle the data according to system design.","Another advantage of the PICTURE_END control token is its ability to completely empty the coded data buffer so that no stray information will inadvertently remain in the off chip DRAM or in the swing buffers.","Yet another advantage of the PICTURE_END function is its use in error recovery. For example, assume the amount of data being held in the coded data buffer is less than is typically used for describing the spatial information with reference to a single picture. Accordingly, the last picture will be held in the data buffer until a full swing buffer, but, by definition, the buffer will never fill. At some point, the machine will determine that an error condition exits. Hence, to the extent that a PICTURE_END token is decoded and forces the data in the coded data buffers to be applied to the Huffman decoder and video demultiplexor, the final picture can be decoded and the information emptied from the buffers. Consequently, the machine will not go into error recovery mode and will successfully continue to process the coded data.","A still further advantage of the use of a PICTURE_END token is that the serial pipeline processor will continue the processing of uninterrupted data. Through the use of a PICTURE_END token, the serial pipeline processor is configured to handle less than the expected amount of data and, therefore, continues processing. Typically, a prior art machine would stop itself because of an error condition. As previously described, the coded data buffer counts macroblocks as they come into its storage area. In addition, the Huffman Decoder and Video Demultiplexor generally know the amount of information expected for decoding each picture, i.e., the state machine portion of the Huffman decode and Video Demultiplexor know the number of blocks that it will process during each picture recovery cycle. When the correct number of blocks do not arrive from the coded data buffer, typically an error recovery routine would result. However, with the PICTURE_END control token having reconfigured the Huffman Decoder and Video Demultiplexor, it can continue to function because the reconfiguration tells the Huffman Decoder and Video Demultiplexor that it is, indeed, handling the proper amount of information.","Referring again to , the Token Decoder portion of the Buffer Manager detects the PICTURE_END control token generated by the Start Code Detector. Under normal operations, the buffer registers fill up and are emptied, as previously described with reference to the normal operation of the swing buffers. Again, a swing buffer which is partially full of data will not empty until it is totally filled and\/or it knows that it is time to empty. The PICTURE_END control token is decoded in the Token Decoder portion of the Buffer Manager, and it forces the partially full swing buffer to empty itself into the coded data buffer. This is ultimately passed to the Huffman Decoder and Video Demultiplexor either directly or through the DRAM interface.","19. Flushing Operation","Another advantage of the PICTURE_END control token is its function in connection with a FLUSH token. The FLUSH token is not associated with either controlling the reconfiguration of the state machine or in providing data for the system. Rather, it completes prior partial signals for handling by the machine-dependent state machines. Each of the state machines recognizes a FLUSH control token as information not to be processed. Accordingly, the FLUSH token is used to fill up all of the remaining empty parts of the coded data buffers and to allow a full set of information to be sent to the Huffman Decoder and Video Demultiplexor. In this way, the FLUSH token is like padding for buffers.","The Token Decoder in the Huffman circuit recognizes the FLUSH token and ignores the pseudo data that the FLUSH token has forced into it. The Huffman Decoder then operates only on the data contents of the last picture buffer as it existed prior to the arrival of the PICTURE_END token and FLUSH token. A further advantage of the use of the PICTURE_END token alone or in combination with a FLUSH token is the reconfiguration and\/or reorganization of the Huffman Decoder circuit. With the arrival of the PICTURE_END token, the Huffman Decoder circuit knows that it will have less information than normally expected to decode the last picture. The Huffman decode circuit finishes processing the information contained in the last picture, and outputs this information through the DRAM interface into the Inverse Modeller. Upon the identification of the last picture, the Huffman Decoder goes into its cleanup mode and readjusts for the arrival of the next picture information.","20. Flush Function","The FLUSH token, in accordance with the present invention, is used to pass through the entire pipeline processor and to ensure that the buffers are emptied and that other circuits are reconfigured to await the arrival of new data. More specifically, the present invention comprises a combination of a PICTURE_END token, a padding word and a FLUSH token indicating to the serial pipeline processor that the picture processing for the current picture form is completed. Thereafter, the various state machines need reconfiguring to await the arrival of new data for new handling. Note also that the FLUSH Token acts as a special reset for the system. The FLUSH token resets each stage as it passes through, but allows subsequent stages to continue processing. This prevents a loss of data. In other words, the FLUSH token is a variable reset, as opposed to, an absolute reset.","21. Stop-after Picture","The STOP_AFTER_PICTURE function is employed to shut down the processing of the serial pipeline decompressing circuit at a logical point in its operation. At this point, a PICTURE_END token is generated indicating that data is finished coming in from the data input line, and the padding operation has been completed. The padding function fills partially empty DATA tokens. A FLUSH token is then generated which passes through the serial pipeline system and pushes all the information out of the registers and forces the registers back into their neutral stand-by condition. The STOP_AFTER_PICTURE event is then generated and no more input is accepted until either the user or the system clears this state. In other words, while a PICTURE_END token signals the end of a picture, the STOP_AFTER_PICTURE operation signals the end of all current processing.","22. Multi-standard\u2014Search Mode","Another feature of the present invention is the use of a SEARCH_MODE control token which is used to reconfigure the input to the serial pipeline processor to look at the incoming bit stream. When the search mode is set, the Start Code Detector searches only for a specific start code or marker used in any one of the compression standards. It will be appreciated, however, that, other images from other data bitstreams can be used for this purpose. Accordingly, these images can be used throughout this present invention to change it to another embodiment which is capable of using the combination of control tokens, and DATA tokens along with the reconfiguration circuits, to provide similar processing.","The use of search mode in the present invention is convenient in many situations including 1) if a break in the data bit stream occurs; 2) when the user breaks the data bit stream by purposely changing channels, e.g., data arriving, by a cable carrying compressed digital video; or 3) by user activation of fast forward or reverse from a controllable data source such as an optical disc or video disc. In general, a search mode is convenient when the user interrupts the normal processing of the serial pipeline at a point where the machine does not expect such an interruption.","When any of the search modes are set, the Start Code Detector looks for incoming start images which are suitable for creating the machine independent tokens. All data coming into the Start Code Detector prior to the identification of standard-dependent start images is discarded as meaningless and the machine stands in an idling condition as it waits this information.","The Start Code Detector can assume any one of a number of configurations. For example, one of these configurations allows a search for a group of pictures or higher start codes. This pattern causes the Start Code Detector to discard all its input and look for the group_start standard image. When such an image is identified, the Start Code Detector generates a GROUP_START token and the search mode is reset automatically.","It is important to note that a single circuit, the Huffman Decoder and Video Demultiplex circuit, is operating with a combination of input signals including the standard-independent set-up signals, as well as, the CODING_STANDARD signals. The CODING_STANDARD signals are conveying information directly from the incoming bit stream as required by the Huffman Decoder and Video Demultiplex circuit. Nevertheless, while the functioning of the Huffman Decoder and Video Demultiplex circuit is under the operation of the standard independent sequence of signals.","This mode of operation has been selected because it is the most efficient and could have been designed wherein special control tokens are employed for conveying the standard-dependent input to the Huffman Decoder and Video Demultiplexer instead of conveying the actual signals themselves.","23. Inverse Modeller","Inverse modeling is a feature of all three standards, and is the same for all three standards. In general, DATA tokens in the token buffer contain information about the values of the quantized coefficients, and about the number of zeros between the coefficients that are represented (a form of run length coding). The Inverse Modeller of the present invention has been adapted for use with tokens and simply expands the information about runs of zeros so that each DATA Token contains the requisite 64 values. Thereafter, the values in the DATA Tokens are quantized coefficients which can be used by the Inverse Quantizer.","24. Inverse Quantizer","The Inverse Quantizer of the present invention is a required element in the decoding sequence, but has been implemented in such away to allow the entire IC set to handle multi-standard data. In addition, the Inverse Quantizer has been adapted for use with tokens. The Inverse Quantizer lies between the Inverse modeller and inverse DCT (IDCT).","For example, in the present invention, an adder in the Inverse Quantizer is used to add a constant to the pel decode number before the data moves on to the IDCT.","The IDCT uses the pel decode number, which will vary according to each standard used to encode the information. In order for the information to be properly decoded, a value of 1024 is added to the decode number by the Inverse Quantizer before the data continues on to the IDCT.","Using adders, already present in the Inverse Quantizer, to standardize the data prior to it reaching the IDCT, eliminates the need for additional circuitry or software in the IC, for handling data compressed by the various standards. Other operations allowing for multi-standard operation are performed during a \u201cpost quantization function\u201d and are discussed below.","The control tokens accompanying the data are decoded and the various standardization routines that need to be performed by the Inverse Quantizer are identified in detail below. These \u201cpost quantization\u201d functions are all implemented to avoid duplicate circuitry and to allow the IC to handle multi-standard encoded data.","25. Huffman Decoder and Parser","Referring again to , the Spatial Decoder includes a Huffman Decoder for decoding the data that the various compression standards have Huffman-encoded. While each of the standards, JPEG, MPEG and H.261, require certain data to be Huffman encoded, the Huffman decoding required by each standard differs in some significant ways. In the Spatial Decoder of the present invention, rather than design and fabricate three separate Huffman decoders, one for each standard, the present invention saves valuable die space by identifying common aspects of each Huffman Decoder, and fabricating these common aspects only once. Moreover, a clever multi-part algorithm is used that makes common more aspects of each Huffman Decoder common to the other standards as well than would otherwise be the case.","In brief, the Huffman Decoder  works in conjunction with the other units shown in FIG. . These other units are the Parser State Machine , the in shifter , the Index to Data unit , the ALU , and the Token Formatter . As described previously, connection between these blocks is governed by a two wire interface. A more detailed description of how these units function is subsequently described herein in greater detail, the focus here is on particular aspects of the Huffman Decoder, in accordance with the present invention, that support multi-standard operation.","The Parser State Machine of the present invention, is a programmable state machine that acts to coordinate the operation of the other blocks of the Video Parser. In response to data, the Parser State Machine controls the other system blocks by generating a control word which is passed to the other blocks, side by side with the data, upon which this control word acts. Passing the control word alongside the associated data is not only useful, it is essential, since these blocks are connected via a two-wire interface. In this way, both data and control arrive at the same time. The passing of the control word is indicated in  by a control line  that runs beneath the data line  that connects the blocks. Among other things, this code word identifies the particular standard that is being decoded.","The Huffman decoder  also performs certain control functions. In particular, the Huffman Decoder  contains a state machine that can control certain functions of the Index to Data  and ALU . Control of these units by the Huffman Decoder is necessary for proper decoding of block-level information. Having the Parser State Machine  make these decisions would take too much time.","An important aspect of the Huffman Decoder of the present invention, is the ability to invert the coded data bits as they are read into the Huffman Decoder. This is needed to decode H.261 style Huffman codes, since the particular type of Huffman code used by H.261 (and substantially by MPEG) has the opposite polarity then the codes used by JPEG. The use of an inverter, thereby, allows substantially the same table to be used by the Huffman Decoder for all three standards. Other aspects of how the Huffman Decoder implements all three standards are discussed in further detail in the \u201cMore Detailed Description of the Invention\u201d section.","The Index to Data unit  performs the second part of the multi-part algorithm. This unit contains a look up table that provides the actual Huffman decoded data. Entries in the table are organized based on the index numbers generated by the Huffman Decoder.","The ALU  implements the remaining parts of the multi-part algorithm. In particular, the ALU handles sign-extension. The ALU also includes a register file which holds vector predictions and DC predictions, the use of which is described in the sections related to prediction filters. The ALU, further, includes counters that count through the structure of the picture being decoded by the Spatial Decoder. In particular, the dimensions of the picture are programmed into registers associated with the counters, which facilitates detection of \u201cstart of picture,\u201d and start of macroblock codes.","In accordance with the present invention, the Token Formatter  (TF) assembles decoded data into DATA tokens that are then passed onto the remaining stages or blocks in the Spatial Decoder.","In the present invention, the in shifter  receives data from a FIFO that buffers the data passing through the Start Code Detector. The data received by the inshifter is generally of two types: DATA tokens, and start codes which the Start Code Detector has replaced with their respective tokens, as discussed further in the token section. Note that most of the data will be DATA tokens that require decoding.","The in shifter  serially passes data to the Huffman Decoder . On the other hand, it passes control tokens in parallel. In the Huffman decoder, the Huffman encoded data is decoded in accordance with the first part of the multi-part algorithm. In particular, the particular Huffman code is identified, and then replaced with an index number.","The Huffman Decoder  also identifies certain data that requires special handling by the other blocks shown in FIG. . This data includes end of block and escape. In the present invention, time is saved by detecting these in the Huffman Decoder , rather than in the Index to Data unit .","This index number is then passed to the Index to Data unit . In essence, the Index to Data unit is a look-up table. In accordance with one aspect of the algorithm, the look-up table is little more than the Huffman code table specified by JPEG. Generally, it is in the condensed data format that JPEG specifies for transferring an alternate JPEG table.","From the Index to Data unit , the decoded index number or other data is passed, together with the accompanying control word, to the ALU , which performs the operations previously described.","From the ALU , the data and control word is passed to the Token Formatter  (TF). In the Token Formatter, the data is combined as needed with the control word to form tokens. The tokens are then conveyed to the next stages of the Spatial Decoder. Note that at this point, there are as many tokens as will be used by the system.","26. Inverse Discrete Cosine Transform","The Inverse Discrete Cosine Transform (IDCT), in accordance with the present invention, decompresses data related to the frequency of the DC component of the picture. When a particular picture is being compressed, the frequency of the light in the picture is quantized, reducing the overall amount of information needed to be stored. The IDCT takes this quantized data and decompresses it back into frequency information.","The IDCT operates on a portion of the picture which is 8\u00d78 pixels in size. The math which performed on this data is largely governed by the particular standard used to encode the data. However, in the present invention, significant use is made of common mathematical functions between the standards to avoid unnecessary duplication of circuitry.","Using a particular scaling order, the symmetry between the upper and lower portions of the algorithms is increased, thus common mathematical functions can be reused which eliminates the need for additional circuitry.","The IDCT responds to a number of multi-standard tokens. The first portion of the IDCT checks the entering data to ensure that the DATA tokens are of the correct size for processing. In fact, the token stream can be corrected in some situations if the error is not too large.","27. Buffer Manager","The Buffer Manager of the present invention, receives incoming video information and supplies the address generators with information on the timing of the datas arrival, display and frame rate. Multiple buffers are used to allow changes in both the presentation and display rates. Presentation and display rates will typically vary in accordance with the data that was encoded and the monitor on which the information is being displayed. Data arrival rates will generally vary according to errors in encoding, decoding or the source material used to create the data. When information arrives at the Buffer Manager, it is decompressed. However, the data is in an order that is useful for the decompression circuits, but not for the particular display unit being used. When a block of data enters the Buffer Manager, the Buffer Manager supplies information to the address generator so that the block of data can be placed in the order that the display device can use. In doing this, the Buffer Manager takes into account the frame rate conversion necessary to adjust the incoming data blocks so they are presentable on the particular display device being used.","In the present invention, the Buffer Manager primarily supplies information to the address generators. Nevertheless, it is also required to interface with other elements of the system. For example, there is an interface with an input FIFO which transfers tokens to the Buffer Manager which, in turn, passes these tokens on to the write address generators.","The Buffer Manager also interfaces with the display address generators, receiving information on whether the display device is ready to display new data. The Buffer Manager also confirms that the display address generators have cleared information from a buffer for display.","The Buffer Manager of the present invention keeps track of whether a particular buffer is empty, full, ready for use or in use. It also keeps track of the presentation number associated with the particular data in each buffer. In this way, the Buffer Manager determines the states of the buffers, in part, by making only one buffer at a time ready for display. Once a buffer is displayed, the buffer is in a \u201cvacant\u201d state. When the Buffer Manager receives a PICTURE_START, FLUSH, valid or access token, it determines the status of each buffer and its readiness to accept new data. For example, the PICTURE_START token causes the Buffer Manager to cycle through each buffer to find one which is capable of accepting the new data.","The Buffer Manager can also be configured to handle the multi-standard requirements dictated by the tokens it receives. For example, in the H.261 standard, data maybe skipped during display. If such a token arrives at the Buffer Manager, the data to be skipped will be flushed from the buffer in which it is stored.","Thus, by managing the buffers, data can be effectively displayed according to the compression standard used to encode the data, the rate at which the data is decoded and the particular type of display device being used.","The foregoing description is believed to adequately describe the overall concepts, system implementation and operation of the various aspects of the invention in sufficient detail to enable one of ordinary skill in the art to make and practice the invention with all of its attendant features, objects and advantages. However, in order to facilitate a further, more detailed in depth understanding of the invention, and additional details in connection with even more specific, commercial implementation of various embodiments of the invention, the following further description and explanation is preferred.","This is a more detailed description for a multi-standard video decoder chip-set. It is divided into three main sections: A, B and C.","Again, for purposes of organization, clarity and convenience of explanation, this additional disclosure is set forth in the following sections.\n\n","The first description section covers the majority of the electrical design issues associated with using the chip-set.","A.1.1 Typographic Conventions","A small set of typographic conventions is used to emphasize some classes of information:\n\n","The Video decoder family provides a low chip count solution for implementing high resolution digital video decoders. The chip-set is currently configurable to support three different video and picture coding systems: JPEG, MPEG and H.261.","Full JPEG baseline picture decoding is supported. 720\u00d7480, 30 Hz, 4:2:2 JPEG encoded video can be decoded in real-time.","CIF (Common Interchange Format) and QCIF H.261 video can be decoded. Full feature MPEG video with formats up to 740\u00d7480, 30 Hz, 4:2:0 can be decoded.","Note: The above values are merely illustrative, by way of example and not necessarily by way of limitation, of one embodiment of the present invention. Accordingly, it will be appreciated that other values and\/or ranges may be used.","A.2.1 System Configurations","A.2.1.1 Output Formatting","In each of the examples given below, some form of output formatter will be required to take the data presented at the output of the Spatial Decoder or Temporal Decoder and re-format it for a computer or display system. The details of this formatting will vary between applications. In a simple case, all that is required is an address generator to take the block formatted data output by the decoder chip and write it into memory in a raster order.","The Image Formatter is a single chip VLSI device providing a wide range of output formatting functions.","A.2.1.2 JPEG Still Picture Decoding","A single Spatial Decoder, with no-off-chip DRAM, can rapidly decode baseline JPEG images. The Spatial Decoder will support all features of baseline JPEG. However, the image size that can be decoded may be limited by the size of the output buffer provided by the user. The characteristics of the output formatter may limit the chroma sampling formats and color spaces that can be supported.","A.2.1.3 JPEG Video Decoding","Adding off-chip DRAMs to the Spatial Decoder allows it to decode JPEG encoded video pictures in real-time. The size and speed of the required buffers will depend on the video and coded data rates. The Temporal Decoder is not required to decode JPEG encoded video. However, if a Temporal Decoder is present in a multi-standard decoder chip-set, it will merely pass the data through the Temporal Decoder without alteration or modification when the system is configured for JPEG operation.","A.2.1.4 H.261 Decoding","The Spatial Decoder and the Temporal Decoder are both required to implement an H.261 video decoder. The DRAM interfaces on both devices are configurable to allow the quantity of DRAM required for proper operation to be reduced when working with small picture formats and at low coded data rates. Typically, a single 4 Mb (e.g. 512k\u00d78) DRAM will be required by each of the Spatial Decoder and the Temporal Decoder.","A.2.1.5 MPEG Decoding","The configuration required for MPEG operation is the same as for H.261. However, as will be appreciated by one of ordinary skill in the art, larger DRAM buffers may be required to support the larger picture formats possible with MPEG.","Section A.3 Tokens","A.3.1 Token Format","In accordance with the present invention, tokens provide an extensible format for communicating information through the decoder chip-set. While in the present invention, each word of a Token is a minimum of 8 bits wide, one of ordinary skill in the art will appreciate that tokens can be of any width. Furthermore, a single Token can be spread over one or more words; this is accomplished using an extension bit in each word. The formats for the tokens are summarized in Table A.3.1.","The extension bit indicates whether a Token continues into another word. It is set to 1 in all words of a Token except the last one. If the first word of a Token has an extension bit of 0, this indicates that the Token is only one word long.","Each Token is identified by an Address Field that starts in bit  of the first word of the Token. The Address Field is of variable length and can potentially extend over multiple words (in the current chips no address is more than 8 bits long, however, one of ordinary skill in the art will again appreciate that addresses can be of any length).","Some interfaces transfer more than 8 bits of data. For example, the output of the Spatial Decoder is 9 bits wide (10 bits including the extension bit). The only Token that takes advantage of these extra bits is the DATA Token. The DATA Token can have as many bits as are necessary for carrying out processing at a particular place in the system. All other Tokens ignore the extra bits.","A.3.2 The DATA Token","The DATA Token carries data from one processing stage to the next. Consequently, the characteristics of this Token change as it passes through the decoder. Furthermore, the meaning of the data carried by the DATA Token varies depending on where the DATA Token is within the system, i.e., the data is position dependent. In this regard, the data may be either frequency domain or Pel domain data depending on where the DATA Token is within the Spatial Decoder. For example, at the input of the Spatial Decoder, DATA Tokens carry bit serial coded video data packed into 8 bit words. At this point, there is no limit to the length of each Token. In contrast, however, at the output of the Spatial Decoder each DATA Token carries exactly 64 words and each word is 9 bits wide.","A.3.3 Using Token Formatted Data","In some applications, it may be necessary for the circuitry that connect directly to the input or output of the Decoder or chip set. In most cases it will be sufficient to collect DATA Tokens and to detect a few Tokens that provide synchronization information (such as PICTURE_START). In this regard, see subsequent sections A.16, \u201cConnecting to the output of Spatial Decoder\u201d, and A.19, \u201cConnecting to the output of the Temporal Decoder\u201d.","As discussed above, it is sufficient to observe activity on the extension bit to identify when each new Token starts. Again, the extension bit signals the last word of the current token. In addition, the Address field can be tested to identify the Token. Unwanted or unrecognized Tokens can be consumed (and discarded) without knowledge of their content. However, a recognized token causes an appropriate action to occur.","Furthermore, the data input to the Spatial Decoder can either be supplied as bytes of coded data, or in DATA Tokens (see Section A.10, \u201cCoded data input\u201d). Supplying Tokens via the coded data port or via the microprocessor interface allows many of the features of the decoder chip set to be configured from the data stream. This provides an alternative to doing the configuration via the micro processor interface.",{"@attributes":{"id":"p-0692","num":"0784"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Summary of Tokens"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"10","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["7","6","5","4","3","2","1","0","Token Name","Reference"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["0","0","1",{},{},{},{},{},"QUANT_SCALE",{}]},{"entry":["0","1","0",{},{},{},{},{},"PREDICTION_MODE"]},{"entry":["0","1","1",{},{},{},{},{},"(reserved)"]},{"entry":["1","0","0",{},{},{},{},{},"MVD_FORWARDS"]},{"entry":["1","0","1",{},{},{},{},{},"MVD_BACKWARDS"]},{"entry":["0","0","0","0","1",{},{},{},"QUANT_TABLE"]},{"entry":["0","0","0","0","0","1",{},{},"DATA"]},{"entry":["1","1","0","0","0","0",{},{},"COMPONENT_NAME"]},{"entry":["1","1","0","0","0","1",{},{},"DEFINE_SAMPLING"]},{"entry":["1","1","0","0","1","0",{},{},"JPEG_TABLE_SELECT"]},{"entry":["1","1","0","0","1","1",{},{},"MPEG_TABLE_SELECT"]},{"entry":["1","1","0","1","0","0",{},{},"TEMPORAL_REFERENCE"]},{"entry":["1","1","0","1","0","1",{},{},"MPEG_DCH_TABLE"]},{"entry":["1","1","0","1","1","0",{},{},"(reserved)"]},{"entry":["1","1","0","1","1","1",{},{},"(reserved)"]},{"entry":["1","1","1","0","0","0","0",{},"(reserved) SAVE_STATE"]},{"entry":["1","1","1","0","0","0","1",{},"(reserved) RESTORE_STATE"]},{"entry":["1","1","1","0","0","1","0",{},"TIME_CODE"]},{"entry":["1","1","1","0","0","1","1",{},"(reserved)"]},{"entry":["0","0","0","0","0","0","0","0","NULL"]},{"entry":["0","0","0","0","0","0","0","1","(reserved)"]},{"entry":["0","0","0","0","0","0","1","0","(reserved)"]},{"entry":["0","0","0","0","0","0","1","1","(reserved)"]},{"entry":["0","0","0","1","0","0","0","0","SEQUENCE_START"]},{"entry":["0","0","0","1","0","0","0","1","GROUP_START"]},{"entry":["0","0","0","1","0","0","1","0","PICTURE_START"]},{"entry":["0","0","0","1","0","0","1","1","SLICE_START"]},{"entry":["0","0","0","1","0","1","0","0","SEQUENCE_END"]},{"entry":["0","0","0","1","0","1","0","1","CODING_STANDARD"]},{"entry":["0","0","0","1","0","1","1","0","PICTURE_END"]},{"entry":["0","0","0","1","0","1","1","1","FLUSH"]},{"entry":["0","0","0","1","1","0","0","0","FIELD_INFO"]},{"entry":["0","0","0","1","1","0","0","1","MAX_COMP_ID"]},{"entry":["0","0","0","1","1","0","1","0","EXTENSION_DATA"]},{"entry":["0","0","0","1","1","0","1","1","USER_DATA"]},{"entry":["0","0","0","1","1","1","0","0","DHT_MARKER"]},{"entry":["0","0","0","1","1","1","0","1","DQT_MARKER"]},{"entry":["0","0","0","1","1","1","1","0","(reserved) DNL_MARKER"]},{"entry":["0","0","0","1","1","1","1","1","(reserved) DRI_MARKER"]},{"entry":["1","1","1","0","1","0","0","0","(reserved)"]},{"entry":["1","1","1","0","1","0","0","1","(reserved)"]},{"entry":["1","1","1","0","1","0","1","0","(reserved)"]},{"entry":["1","1","1","0","1","0","1","1","(reserved)"]},{"entry":["1","1","1","0","1","1","0","0","BIT_RATE"]},{"entry":["1","1","1","0","1","1","0","1","VBV_BUFFER_SIZE"]},{"entry":["1","1","1","0","1","1","1","0","VBV_DELAY"]},{"entry":["1","1","1","0","1","1","1","1","PICTURE_TYPE"]},{"entry":["1","1","1","1","0","0","0","0","PICTURE_RATE"]},{"entry":["1","1","1","1","0","0","0","1","PEL_ASPECT"]},{"entry":["1","1","1","1","0","0","1","0","HORIZONTAL_SIZE"]},{"entry":["1","1","1","1","0","0","1","1","VERTICAL_SIZE"]},{"entry":["1","1","1","1","0","1","0","0","BROKEN_CLOSED"]},{"entry":["1","1","1","1","0","1","0","1","CONSTRAINED"]},{"entry":["1","1","1","1","0","1","1","0","(reserved) SPECTRAL_LIMIT"]},{"entry":["1","1","1","1","0","1","1","1","DEFINE_MAX_SAMPLING"]},{"entry":["1","1","1","1","1","0","0","0","(reserved)"]},{"entry":["1","1","1","1","1","0","0","1","(reserved)"]},{"entry":["1","1","1","1","1","0","1","0","(reserved)"]},{"entry":["1","1","1","1","1","0","1","1","(reserved)"]},{"entry":["1","1","1","1","1","1","0","0","HORIZONTAL_MBS"]},{"entry":["1","1","1","1","1","1","0","1","VERTICAL_MBS"]},{"entry":["1","1","1","1","1","1","1","0","(reserved)"]},{"entry":["1","1","1","1","1","1","1","1","(reserved)"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"This section documents the Tokens which are implemented in the Spatial Decoder and the Temporal Decoder chips in accordance with the present invention; see Table A.3.2.","Note:",{"@attributes":{"id":"p-0694","num":"0000"},"ul":{"@attributes":{"id":"ul0016","list-style":"none"},"li":{"@attributes":{"id":"ul0016-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0017","list-style":"none"},"li":["\u201cr\u201d signifies bits that are currently reserved and carry the value 0","unless indicated all integers are unsigned"]}}}},{"@attributes":{"id":"p-0695","num":"0788"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"322pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Tokens Implemented in the Spatial Decoder and Temporal Decoder"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["E","7","6","5","4","3","2","1","0","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["1","1","1","1","0","1","1","0","0","BIT_RATE test info only"]},{"entry":["1","r","r","r","r","r","r","b","b","Carries the MPEG bit rate parameter P. Generated by the"]},{"entry":["1","b","b","b","b","b","b","b","b","Huffman decoder when decoding an MPEG bitstream."]},{"entry":["0","b","b","b","b","b","b","b","b","b - an 18 bit integer as defined by MPEG"]},{"entry":["1","1","1","1","1","0","1","0","0","BROKEN_CLOSED"]},{"entry":["0","r","r","r","r","r","r","c","b","Carries two MPEG flag bits:"]},{"entry":[{},{},{},{},{},{},{},{},{},"c - closed_gap"]},{"entry":[{},{},{},{},{},{},{},{},{},"b - broken_link"]},{"entry":["1","0","0","0","1","0","1","0","1","CODING_STANDARD"]},{"entry":[{},"s","s","s","s","s","s","s","s","s - an 8 bit integer indicating the current coding standard"]},{"entry":[{},{},{},{},{},{},{},{},{},"The values currently assigned are:"]},{"entry":[{},{},{},{},{},{},{},{},{},"0 - H.261"]},{"entry":[{},{},{},{},{},{},{},{},{},"1 - JPEG"]},{"entry":[{},{},{},{},{},{},{},{},{},"2 - MPEG"]},{"entry":["1","1","1","0","0","0","0","c","c","COMPONENT_NAME"]},{"entry":["0","n","n","n","n","n","n","n","n","Communicates the relationship between a component ID and"]},{"entry":[{},{},{},{},{},{},{},{},{},"the component name. See also . . ."]},{"entry":[{},{},{},{},{},{},{},{},{},"c - 2 bit component ID"]},{"entry":[{},{},{},{},{},{},{},{},{},"n - 8 bit component \u201cname\u201d"]},{"entry":["1","1","1","1","1","0","1","0","1","CONSTRAINED"]},{"entry":["0","r","r","r","r","r","r","r","c","c - carries the constrained_parameters_flag decoded from an"]},{"entry":[{},{},{},{},{},{},{},{},{},"MPEG bitstream."]},{"entry":["1","0","0","0","0","0","1","c","c","DATA"]},{"entry":["1","d","d","d","d","d","d","d","d","Carries data through the decoder chip-set."]},{"entry":[{},{},{},{},{},{},{},{},{},"c - a 2 bit integer component ID (see A.3.5.1). This field is not"]},{"entry":[{},{},{},{},{},{},{},{},{},"defined for Tokens that carry coded data (rather than pixel"]},{"entry":["0","d","d","d","d","d","d","d","d","information)."]},{"entry":["1","1","1","1","1","0","1","1","1","DEFINE_MAX_SAMPLING"]},{"entry":["1","r","r","r","r","r","r","h","h","Max. Horizontal and Vertical sampling numbers. These"]},{"entry":["0","r","r","r","r","r","r","v","v","describe the maximum number of blocks horizontally\/vertically"]},{"entry":[{},{},{},{},{},{},{},{},{},"in any component of a macroblock. See A.3.5.2"]},{"entry":[{},{},{},{},{},{},{},{},{},"h - 2 bit horizontal sampling number"]},{"entry":[{},{},{},{},{},{},{},{},{},"v - 2 bit vertical sampling number"]},{"entry":["1","1","1","0","0","0","1","c","c","DEFINE_SAMPLING"]},{"entry":["1","r","r","r","r","r","r","h","h","Horizontal and Vertical sampling numbers for a particular"]},{"entry":[{},{},{},{},{},{},{},{},{},"colour"]},{"entry":["0","r","r","r","r","r","r","v","v","component. See A.3.5.2"]},{"entry":[{},{},{},{},{},{},{},{},{},"c - 2 bit component ID."]},{"entry":[{},{},{},{},{},{},{},{},{},"h - 2 bit horizontal sampling number"]},{"entry":[{},{},{},{},{},{},{},{},{},"v - 2 bit vertical sampling number."]},{"entry":["0","0","0","0","1","1","1","0","0","DHT_MARKER"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token"]},{"entry":[{},{},{},{},{},{},{},{},{},"that follows contains the specification of a Huffman table"]},{"entry":[{},{},{},{},{},{},{},{},{},"described using the JPEG \u201cdefine Huffman table segment\u201d"]},{"entry":[{},{},{},{},{},{},{},{},{},"syntax. This Token is only valid when the coding standard is"]},{"entry":[{},{},{},{},{},{},{},{},{},"configured as JPEG. This Token is generated by the start"]},{"entry":[{},{},{},{},{},{},{},{},{},"code detector during JPEG decoding when a DHT marker has"]},{"entry":[{},{},{},{},{},{},{},{},{},"been encountered in the data stream."]},{"entry":["0","0","0","0","1","1","1","1","0","DNL_ MARKER"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains the JPEG parameter NL which specifies the"]},{"entry":[{},{},{},{},{},{},{},{},{},"number of lines in a frame."]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token is generated by the start code detector during JPEG"]},{"entry":[{},{},{},{},{},{},{},{},{},"decoding when a DNL marker has been encountered in the data"]},{"entry":[{},{},{},{},{},{},{},{},{},"stream."]},{"entry":["0","0","0","0","1","1","1","0","1","DQT_MARKER"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains the specification of a quantisation table described"]},{"entry":[{},{},{},{},{},{},{},{},{},"using the JPEG \u201cdefine quantisation table segment\u201d syntax. This"]},{"entry":[{},{},{},{},{},{},{},{},{},"Token is only valid when the coding standard is configured as"]},{"entry":[{},{},{},{},{},{},{},{},{},"JPEG. The Video Demux generates a QUANT_TABLE Token"]},{"entry":[{},{},{},{},{},{},{},{},{},"containing the new quantisation table information."]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token is generated by the start code detector during JPEG"]},{"entry":[{},{},{},{},{},{},{},{},{},"decoding when a DQT marker has been encountered in the data"]},{"entry":[{},{},{},{},{},{},{},{},{},"stream."]},{"entry":["0","0","0","0","1","1","1","1","1","DRI_MARKER"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains the JPEG parameter Ri which specifies the"]},{"entry":[{},{},{},{},{},{},{},{},{},"number of minimum coding units between restart markers."]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token is generated by the start code detector during"]},{"entry":[{},{},{},{},{},{},{},{},{},"JPEG decoding when a DRI marker has been encountered"]},{"entry":[{},{},{},{},{},{},{},{},{},"in the data stream"]},{"entry":["1","0","0","0","1","1","0","1","0","EXTENSION_DATA JPEG"]},{"entry":["0","v","v","v","v","v","v","v","v","This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains extension data. See A.11.3 \u201cConversion of start"]},{"entry":[{},{},{},{},{},{},{},{},{},"codes to Tokens\u201d, and A.14.6. \u201cReceiving User and"]},{"entry":[{},{},{},{},{},{},{},{},{},"Extension data\u201d."]},{"entry":[{},{},{},{},{},{},{},{},{},"During JPEG operation the 8 bit field \u201cv\u201d carries the JPEG marker"]},{"entry":[{},{},{},{},{},{},{},{},{},"value. This allows the class of extension data to be identified."]},{"entry":["0","0","0","0","1","1","0","1","0","EXTENSION_DATA MPEG"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains extension data. See A.11.3. \u201cConversion of start"]},{"entry":[{},{},{},{},{},{},{},{},{},"codes to Tokens\u201d, and A.14.6. \u201cReceiving User and"]},{"entry":[{},{},{},{},{},{},{},{},{},"Extension data\u201d."]},{"entry":["1","0","0","0","1","1","0","0","0","FIELD_INFO"]},{"entry":["0","r","r","r","t","p","t","t","t","Carries information about the picture following to aid its display"]},{"entry":[{},{},{},{},{},{},{},{},{},"This funtion is not signalled by any existing coding standard."]},{"entry":[{},{},{},{},{},{},{},{},{},"t - if the picture is an interlaced frame this bit indicates if the upper"]},{"entry":[{},{},{},{},{},{},{},{},{},"field is first (t = 0) or second."]},{"entry":[{},{},{},{},{},{},{},{},{},"p - if pictures are fields this indicates if the next picture is upper"]},{"entry":[{},{},{},{},{},{},{},{},{},"(p = 0) or lower in the frame."]},{"entry":[{},{},{},{},{},{},{},{},{},"t - a 3 bit number indicating position of the field in the 8 field PAL"]},{"entry":[{},{},{},{},{},{},{},{},{},"sequence."]},{"entry":["0","0","0","0","1","0","1","1","1","FLUSH"]},{"entry":[{},{},{},{},{},{},{},{},{},"Used to indicate the end of the current coded data and to push the"]},{"entry":[{},{},{},{},{},{},{},{},{},"end of the data stream through the decoder."]},{"entry":["0","0","0","0","1","0","0","0","1","GROUP_START"]},{"entry":[{},{},{},{},{},{},{},{},{},"Generated when the group of pictures start code is found when"]},{"entry":[{},{},{},{},{},{},{},{},{},"decoding MPEG or the frame marker is found when decoding"]},{"entry":[{},{},{},{},{},{},{},{},{},"JPEG."]},{"entry":["1","1","1","1","1","1","1","0","0","HORIZONTAL_MBS"]},{"entry":["t","r","r","r","h","h","h","h","h","h - a 13 bit number integer indicating the horizontal width of the"]},{"entry":["0","h","h","h","h","h","h","h","h","picture in macroblocks."]},{"entry":["1","1","1","1","1","0","0","1","0","HORIZONTAL_SIZE"]},{"entry":["1","h","h","h","h","h","h","h","h","h - 16 bit number integer indicating the horizontal width of the"]},{"entry":["0","h","h","h","h","h","h","h","h","picture in pixels. This can be any integer value."]},{"entry":["1","1","1","0","0","1","0","c","c","JPEG_TABLE_SELECT"]},{"entry":["0","r","r","r","r","r","r","t","t","Informs the inverse quantiser which quantisation table to use on"]},{"entry":[{},{},{},{},{},{},{},{},{},"the specified colour component."]},{"entry":[{},{},{},{},{},{},{},{},{},"c - 2 bit component ID (see A.3.5.1)"]},{"entry":[{},{},{},{},{},{},{},{},{},"t - 2 bit integer table number."]},{"entry":["1","0","0","0","1","1","0","0","1","MAX_COMP_ID"]},{"entry":["0","r","r","r","r","r","r","m","m","m - 2 bit integer indicating the maximum value of component ID"]},{"entry":[{},{},{},{},{},{},{},{},{},"(see A.3.5.1) that will be used in the next picture."]},{"entry":["0","1","1","0","1","0","1","c","c","MPEG_DCH_TABLE"]},{"entry":["0","r","r","r","r","r","r","t","t","Configures which DC coefficient Huffman table should be used for"]},{"entry":[{},{},{},{},{},{},{},{},{},"colour component cc."]},{"entry":[{},{},{},{},{},{},{},{},{},"c - 2 bit component ID (see A.3.5.1)"]},{"entry":[{},{},{},{},{},{},{},{},{},"t - 2 bit integer table number."]},{"entry":["0","1","1","0","0","1","1","d","n","MPEG_TABLE_SELECT"]},{"entry":[{},{},{},{},{},{},{},{},{},"Informs the inverse quantiser whether to use the default or user"]},{"entry":[{},{},{},{},{},{},{},{},{},"defined quantisation table for intra or non - intra information."]},{"entry":[{},{},{},{},{},{},{},{},{},"n - 0 indicates intra information. 1 non - intra."]},{"entry":[{},{},{},{},{},{},{},{},{},"d - 0 indicates default table. 1 user defined."]},{"entry":["1","1","0","1","d","v","v","v","v","MVD_BACKWARDS"]},{"entry":["0","v","v","v","v","v","v","v","v","Carries one component (either vertical or horizontal) of the"]},{"entry":[{},{},{},{},{},{},{},{},{},"backwards motion vector."]},{"entry":[{},{},{},{},{},{},{},{},{},"d - 0 indicates x component, 1 the y component"]},{"entry":[{},{},{},{},{},{},{},{},{},"v - 12 bit two's complement number. The LSB provides half pixel"]},{"entry":[{},{},{},{},{},{},{},{},{},"resolution."]},{"entry":["1","1","0","0","d","v","v","v","v","MVD_FORWARDS"]},{"entry":["0","v","v","v","v","v","v","v","v","Carries one component (either vertical or horizontal) of the"]},{"entry":[{},{},{},{},{},{},{},{},{},"forwards motion vector."]},{"entry":[{},{},{},{},{},{},{},{},{},"d - 0 indicates x component, 1 the y component"]},{"entry":[{},{},{},{},{},{},{},{},{},"v - 12 bit two's complement number. The LSB provides half pixel"]},{"entry":[{},{},{},{},{},{},{},{},{},"resolution."]},{"entry":["0","0","0","0","0","0","0","0","0","NULL"]},{"entry":[{},{},{},{},{},{},{},{},{},"Does nothing"]},{"entry":["1","1","1","1","1","0","0","0","1","PEL_ASPECT"]},{"entry":["0","r","r","r","r","p","p","p","p","p - a 4 bit integer as defined by MPEG"]},{"entry":["0","0","0","0","1","0","1","1","0","PICTURE_END"]},{"entry":[{},{},{},{},{},{},{},{},{},"Inserted by the start code detector to indicate the end of the"]},{"entry":[{},{},{},{},{},{},{},{},{},"current picture."]},{"entry":["1","1","1","1","1","0","0","0","0","PICTURE_RATE"]},{"entry":["0","r","r","r","r","p","p","p","p","p - a 4 bit integer as defined by MPEG."]},{"entry":["1","0","0","0","1","0","0","1","0","PICTURE_START"]},{"entry":["0","r","r","r","r","n","n","n","n","Indicates the start of a new picture"]},{"entry":[{},{},{},{},{},{},{},{},{},"n - a 4 bit picture index allocated to the picture by the start code"]},{"entry":[{},{},{},{},{},{},{},{},{},"detector."]},{"entry":["1","1","1","1","0","1","1","1","1","PICTURE_TYPE MPEG"]},{"entry":["0","r","r","r","r","r","r","p","p","p - a 2 bit integer indicating the picture coding type of the picture"]},{"entry":[{},{},{},{},{},{},{},{},{},"that follows:"]},{"entry":[{},{},{},{},{},{},{},{},{},"0 - Intra"]},{"entry":[{},{},{},{},{},{},{},{},{},"1 - Predicted"]},{"entry":[{},{},{},{},{},{},{},{},{},"2 - Bidirectionally Predicted"]},{"entry":[{},{},{},{},{},{},{},{},{},"3 - DC Intra"]},{"entry":["1","1","1","1","0","1","1","1","1","PICTURE_TYPE H.261"]},{"entry":["1","r","r","r","r","r","r","0","1","Indicates various H.261 options are on (1) or off (0). These options"]},{"entry":[{},{},{},{},{},{},{},{},{},"are always off for MPEG and JPEG:"]},{"entry":["0","r","r","s","d","f","q","1","1","s - Split Screen Indicator"]},{"entry":[{},{},{},{},{},{},{},{},{},"d - Document Camera"]},{"entry":[{},{},{},{},{},{},{},{},{},"f - Freeze Picture Release"]},{"entry":[{},{},{},{},{},{},{},{},{},"Source picture format:"]},{"entry":[{},{},{},{},{},{},{},{},{},"q = 0 \u2212 QCIF"]},{"entry":[{},{},{},{},{},{},{},{},{},"q = 1 \u2212 CIF"]},{"entry":["0","0","1","0","h","y","x","b","f","PREDICTION_MODE"]},{"entry":[{},{},{},{},{},{},{},{},{},"A set of flag bits that indicate the prediction mode for the"]},{"entry":[{},{},{},{},{},{},{},{},{},"macroblocks that follow:"]},{"entry":[{},{},{},{},{},{},{},{},{},"f - forward prediction"]},{"entry":[{},{},{},{},{},{},{},{},{},"b - backward prediction"]},{"entry":[{},{},{},{},{},{},{},{},{},"x - reset forward vector predictor"]},{"entry":[{},{},{},{},{},{},{},{},{},"y - reset backward vector predictor"]},{"entry":[{},{},{},{},{},{},{},{},{},"h - enable H.261 loop filter"]},{"entry":["0","0","0","1","s","s","s","s","s","QUANT_SCALE"]},{"entry":[{},{},{},{},{},{},{},{},{},"Informs the inverse quantiser of a new scale factor"]},{"entry":[{},{},{},{},{},{},{},{},{},"s - a 5 bit integer in range 1 . . . 31 The value 0 is reserved."]},{"entry":["1","0","0","0","0","1","r","t","t","QUANT_TABLE"]},{"entry":["1","q","q","q","q","q","q","q","q","Loads the specified inverse quantiser table with 64 8 bit unsigned"]},{"entry":[{},{},{},{},{},{},{},{},{},"integers. The values are in zig-zag order."]},{"entry":["0","q","q","q","q","q","q","q","q","t - 2 bit integer specifying the inverse quantiser table to be loaded."]},{"entry":["0","0","0","0","1","0","1","0","0","SEQUENCE_END"]},{"entry":[{},{},{},{},{},{},{},{},{},"The MPEG sequence_end_code and the JPEG EOI marker cause"]},{"entry":[{},{},{},{},{},{},{},{},{},"this Token to be generated."]},{"entry":["0","0","0","0","1","0","0","0","0","SEQUENCE_START"]},{"entry":[{},{},{},{},{},{},{},{},{},"Generated by the MPEG sequence_start start code."]},{"entry":["1","0","0","0","1","0","0","1","1","SLICE_START"]},{"entry":["0","s","s","s","s","s","s","s","s","Corresponds to the MPEG slice_start, the H.261 GOB"]},{"entry":[{},{},{},{},{},{},{},{},{},"and the JPEG resync interval. The interpretation of 8 bit integer"]},{"entry":[{},{},{},{},{},{},{},{},{},"\u201cs\u201d differs between coding standards:"]},{"entry":[{},{},{},{},{},{},{},{},{},"MPEG - Slice Vertical Position - 1."]},{"entry":[{},{},{},{},{},{},{},{},{},"H.261 - Group of blocks Number - 1."]},{"entry":[{},{},{},{},{},{},{},{},{},"JPEG - resychronisation interval identification (4 LSBs only)."]},{"entry":["1","1","1","0","1","0","0","t","t","TEMPORAL_REFERENCE"]},{"entry":["0","t","t","t","t","t","t","t","t","t - carries the temporal reference."]},{"entry":[{},{},{},{},{},{},{},{},{},"For MPEG this is a 10 bit integer."]},{"entry":[{},{},{},{},{},{},{},{},{},"For H.261 only the 5 LSBs are used,"]},{"entry":[{},{},{},{},{},{},{},{},{},"the MSBs will always be zero."]},{"entry":["1","1","1","1","0","0","1","0","d","TIME_CODE"]},{"entry":["1","r","r","r","h","h","h","h","h","The MPEG time_code:"]},{"entry":["1","r","r","m","m","m","m","m","m","d - Drop frame flag"]},{"entry":["1","r","r","s","s","s","s","s","s","h - 5 bit integer specifying hours"]},{"entry":["0","r","r","p","p","p","p","p","p","m - 6 bit integer specifying minutes"]},{"entry":[{},{},{},{},{},{},{},{},{},"s - 6 bit integer specifying seconds"]},{"entry":[{},{},{},{},{},{},{},{},{},"p - 6 bit integer specifying pictures"]},{"entry":["1","0","0","0","1","1","0","1","1","USER_DATA JPEG"]},{"entry":["0","v","v","v","v","v","v","v","v","This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains user data See A.11.3, \u201cConversion of start"]},{"entry":[{},{},{},{},{},{},{},{},{},"codes to Tokens\u201d, and A.14.6, \u201cReceiving User and Extension"]},{"entry":[{},{},{},{},{},{},{},{},{},"data\u201d."]},{"entry":[{},{},{},{},{},{},{},{},{},"During JPEG operation the 8 bit field carries the JPEG marker"]},{"entry":[{},{},{},{},{},{},{},{},{},"value. This allows the class of user data to be identified."]},{"entry":["0","0","0","0","1","1","0","1","1","USER_DATA MPEG"]},{"entry":[{},{},{},{},{},{},{},{},{},"This Token informs the Video Demux that the DATA Token that"]},{"entry":[{},{},{},{},{},{},{},{},{},"follows contains user data. See A.11.3, \u201cConversion of start"]},{"entry":[{},{},{},{},{},{},{},{},{},"codes to Tokens\u201d, and A.14.6, \u201cReceiving User and Extension"]},{"entry":[{},{},{},{},{},{},{},{},{},"data\u201d"]},{"entry":["1","1","1","1","0","1","1","0","1","VBV_BUFFER_SIZE"]},{"entry":["1","r","r","r","r","r","r","s","s","s - a 10 bit integer as defined by MPEG."]},{"entry":["0","s","s","s","s","s","s","s","s"]},{"entry":["1","1","1","1","0","1","1","1","0","VBV_DELAY"]},{"entry":["1","b","b","b","b","b","b","b","b","b - a 16 bit integer as defined by MPEG"]},{"entry":["0","b","b","b","b","b","b","b","b"]},{"entry":["1","1","1","1","1","1","1","0","1","VERTICAL_MBS"]},{"entry":["1","r","r","r","v","v","v","v","v","v - a 13 bit integer indicating the vertical size of the picture in"]},{"entry":["1","r","r","r","v","v","v","v","v","macroblocks"]},{"entry":["1","1","1","1","1","0","0","1","1","VERTICAL_SIZE"]},{"entry":["1","v","v","v","v","v","v","v","v","v - a 16 bit integer indicating the vertical size of the picture in"]},{"entry":["0","v","v","v","v","v","v","v","v","pixels."]},{"entry":[{},{},{},{},{},{},{},{},{},"This can be any integer value."]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},"In accordance with the present invention, the Component ID number is a 2 bit integer specifying a color component. This 2 bit field is typically located as part of the Header in the DATA Token. With MPEG and H.261 the relationship is set forth in Table A.3.3.",{"@attributes":{"id":"p-0697","num":"0790"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Component ID for MPEG and H.261"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Component ID","MPEG or H 261 colour component"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Luminance (Y)"]},{"entry":["1","Blue difference signal (Cb\/U)"]},{"entry":["2","Red difference signal (Cr\/V)"]},{"entry":["3","Never used"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"With JPEG the situation is more complex as JPEG does not limit the color components that can be used. The decoder chips permit up to 4 different color components in each scan. The IDs are allocated sequentially as the specification of color components arrive at the decoder.","A.3.S.2 Horizontal and Vertical Sampling Numbers","For each of the 4 color components, there is a specification for the number of blocks arranged horizontally and vertically in a macroblock. This specification comprises a two bit integer which is one less than the number of blocks.","For example, in MPEG (or H.261) with 4:2:0 chroma sampling () and component IDs allocated as per Table A.3.4.",{"@attributes":{"id":"p-0701","num":"0794"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sampling numbers for 4:2:0\/MPEG"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Horizontal",{},"Vertical",{}]},{"entry":[{},"sampling","Width in","sampling","Height in"]},{"entry":["Component ID","number","blocks","number","blocks"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","1","2","1","2"]},{"entry":["1","0","1","0","1"]},{"entry":["2","0","1","0","1"]},{"entry":["3","Not used","Not used","Not used","Not used"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"With JPEG and 4:2:2 chroma sampling (allocation of component to component ID will vary between applications. See A.3.5.1. Note: JPEG requires a 2:1:1 structure for its macroblocks when processing 4:2:2 data. See Table A.3.5.",{"@attributes":{"id":"p-0703","num":"0796"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Sampling numbers for 4:2:2 JPEG"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Horizontal",{},"Vertical",{}]},{"entry":[{},"sampling","Width in","sampling","Height in"]},{"entry":["Component ID","number","Blocks","number","blocks"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"49pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Y","1","2","0","1"]},{"entry":["U","0","1","0","1"]},{"entry":["V","0","1","0","1"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In accordance with the present invention, tokens such as the DATA Token and the QUANT_TABLE Token are used in their \u201cextended form\u201d within the decoder chip-set. In the extended form the Token includes some data. In the case of DATA Tokens, they can contain coded data or pixel data. In the case of QUANT_TABLE tokens, they contain quantizer table information.","Furthermore, \u201cnon-extended form\u201d of these Tokens is defined in the present invention as \u201cempty\u201d. This Token format provides a place in the Token stream that can be subsequently filled by an extended version of the same Token. This format is mainly applicable to encoders and, therefore, it is not documented further here.",{"@attributes":{"id":"p-0706","num":"0799"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.3.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Tokens for different standards"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Token Name","MPEG","JPEG","H.251"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"BIT_RATE","\u2713",{},{}]},{"entry":[{},"BROKEN_CLOSED","\u2713"]},{"entry":[{},"CODING_STANDARD","\u2713","\u2713","\u2713"]},{"entry":[{},"COMPONENT_NAME",{},"\u2713"]},{"entry":[{},"CONSTRAINED","\u2713"]},{"entry":[{},"DATA","\u2713","\u2713","\u2713"]},{"entry":[{},"DEFINE_MAX_SAMPLING","\u2713","\u2713","\u2713"]},{"entry":[{},"DEFINE_SAMPLING","\u2713","\u2713","\u2713"]},{"entry":[{},"DHT_MARKER",{},"\u2713"]},{"entry":[{},"DNL_MARKER",{},"\u2713"]},{"entry":[{},"DQT_MARKER",{},"\u2713"]},{"entry":[{},"DRI_MARKER",{},"\u2713"]},{"entry":[{},"EXTENSION_DATA","\u2713","\u2713"]},{"entry":[{},"FIELD_INFO"]},{"entry":[{},"FLUSH","\u2713","\u2713","\u2713"]},{"entry":[{},"GROUP_START","\u2713","\u2713"]},{"entry":[{},"HORIZONTAL_MBS","\u2713","\u2713","\u2713"]},{"entry":[{},"HORIZONTAL_SIZE","\u2713","\u2713","\u2713"]},{"entry":[{},"JPEG_TABLE_SELECT",{},"\u2713"]},{"entry":[{},"MAX_COMP_ID","\u2713","\u2713","\u2713"]},{"entry":[{},"MPEG_DCH_TABLE","\u2713"]},{"entry":[{},"MPEG_TABLE_SELECT","\u2713"]},{"entry":[{},"MVD_BACKWARDS","\u2713"]},{"entry":[{},"MVD_FORWARDS","\u2713",{},"\u2713"]},{"entry":[{},"NULL","\u2713","\u2713","\u2713"]},{"entry":[{},"PEL_ASPECT","\u2713"]},{"entry":[{},"PICTURE_END","\u2713","\u2713","\u2713"]},{"entry":[{},"PICTURE_RATE","\u2713"]},{"entry":[{},"PICTURE_START","\u2713","\u2713","\u2713"]},{"entry":[{},"PICTURE_TYPE","\u2713","\u2713","\u2713"]},{"entry":[{},"PREDICTION_MODE","\u2713","\u2713","\u2713"]},{"entry":[{},"QUANT_SCALE","\u2713",{},"\u2713"]},{"entry":[{},"QUANT_TABLE","\u2713","\u2713"]},{"entry":[{},"SEQUENCE_END","\u2713","\u2713"]},{"entry":[{},"SEQUENCE_START","\u2713","\u2713","\u2713"]},{"entry":[{},"SLICE_START","\u2713","\u2713","\u2713"]},{"entry":[{},"TEMPORAL_REFERENCE","\u2713",{},"\u2713"]},{"entry":[{},"TIME_CODE","\u2713"]},{"entry":[{},"USER_DATA","\u2713","\u2713"]},{"entry":[{},"VBV_BUFFER_SIZE","\u2713"]},{"entry":[{},"VBV_DELAY","\u2713"]},{"entry":[{},"VERTICAL_MBS","\u2713","\u2713","\u2713"]},{"entry":[{},"VERTICAL_S1ZE","\u2713","\u2713","\u2713"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Each standard uses a different sub-set of the defined Tokens in accordance with the present invention; ss Table A.3.6.","Section A.4 The Two Wire Interface","A.4.1 Two-wire Interfaces and the Token Port","A simple two-wire valid\/accept protocol is used at all levels in the chip-set to control the flow of information. Data is only transferred between blocks when both the sender and receiver are observed to be ready when the clock rises.\n\n","If the sender is not ready (as in 3 Sender not ready above) the input of the receiver must wait. If the receiver is not ready (as in 2 Receiver not ready above) the sender will continue to present the same data on its output until it is accepted by the receiver.","When Token information is transferred between blocks the two-wire interface between the blocks is referred to as a Token Port.","A.4.2 Where Used","The decoder chip-set, in accordance with the present invention, uses two-wire interfaces to connect the three chips. In addition, the coded data input to the Spatial Decoder is also a two-wire interface.","A.4.3 Bus Signals","The width of the data word transferred by the two-wire interface varies depending upon the needs of the interface concerned (See , \u201cTokens on interfaces wider than 8 bits\u201d. For example, 12 bit coefficients are input to the Inverse Discrete Cosine Transform (IDCT), but only 9 bits are output.",{"@attributes":{"id":"p-0713","num":"0809"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.4.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Two wire interface data width"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Interface","Data Width (bits)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Coded data input to Spatial Decoder","8"]},{"entry":[{},"Output port of Spatial Decoder","9"]},{"entry":[{},"Input port of Temporal Decoder","9"]},{"entry":[{},"Output port of Temporal Decoder","8"]},{"entry":[{},"Input port of Image Formatter","8"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In addition to the data signals there are three other signals transmitted via the two-wire interface:\n\n","The extension signal corresponds to the Token extension bit previously described.","A.4.4 Design Considerations","The two wire interface is intended for short range, point to point communication between chips.","The decoder chips should be placed adjacent to each other, so as to minimize the length of the PCB tracks between chips. Where possible, track lengths should be kept below 25 mm. The PCB track capacitance should be kept to a minimum.","The clock distribution should be designed to minimize the clock slew between chips. If there is any clock slew, it should be arranged so that \u201creceiving chips\u201d see the clock before \u201csending chips\u201d.",{"@attributes":{"id":"p-0719","num":"0818"},"sup":"1 ","figref":"FIG. 38"},"All chips communicating via two wire interfaces should operate from the same digital power supply.","A.4.5 Interface Timing",{"@attributes":{"id":"p-0721","num":"0820"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.4.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Two wire interface timing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"30 MHz",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","Input signal set - up time","5",{},"ns",{}]},{"entry":["2","Input signal hold time","0",{},"ns"]},{"entry":["3","Output signal drive time",{},"23","ns"]},{"entry":["4","Output signal hold time","2",{},"ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"b","sub":"p"}}]}}]}},"br":{}},"The two-wire interface uses CMOS inputs anti output. Vis approx. 70% of Vand Vis approx. 30% of V. The values shown in Table A.4.3 are those for Vand Vat their respective worst case V. V=5.0\u22000.25V.",{"@attributes":{"id":"p-0723","num":"0822"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.4.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC electrical characteristics"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Input logic \u20181\u2019 voltage","3.68","V\u2212 0.5","V"]},{"entry":["V","Input logic \u2018O\u2019 voltage","GND \u2212 0.5","1.43","V"]},{"entry":["V","Output logic \u20181\u2019 voltage","V\u2212 0.1",{},"V"]},{"entry":[{},{},"V\u2212 0.4",{},"V"]},{"entry":["V","Output logic \u20180\u2019 voltage",{},"0.1","V"]},{"entry":[{},{},{},"0.4","V"]},{"entry":["I","Input leakage current",{},"\u00b110","\u03a6A"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a","sub":"OH"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b","sub":"OH"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"c","sub":"OL"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"d","sub":"OL"}}]}}]}},"br":{}},"In general, the clock controlling the transfers across the two wire interface is the chip's decoder_clock. The exception is the coded data port input to the Spatial Decoder. This is controlled by coded_clock. The clock signals are further described herein.","Section A.5 DRAM Interface","A.5.1 The DRAM Interface","A single high performance, configurable, DRAM interface is used on each of the video decoder chips. In general, the DRAM interface on each chip is substantially the same; however, the interfaces differ from one another in how they handle channel priorities. The interface is designed to directly drive the DRAM used by each of the decoder chips. Typically, no external logic, buffers or components will be necessary to connect the DRAM interface to the DRAMs in most systems.","A.5.2 Interface Signals",{"@attributes":{"id":"p-0726","num":"0825"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM interface signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DRAM_data [31:0]","I\/O","The 32 bit wide DRAM data bus."]},{"entry":[{},{},"Optionally this bus can be configured"]},{"entry":[{},{},"to be 16 or 8 bits wide. See section"]},{"entry":[{},{},"A.5.8."]},{"entry":["DRAM_addr [10:0]","O","The 22 bit wide DRAM interface"]},{"entry":[{},{},"address is time multiplexed over this"]},{"entry":[{},{},"11 bit wide bus."]},{"entry":["{overscore (RAS)}","O","The DRAM Row Address Strobe signal"]},{"entry":["{overscore (CAS)}","O","The DRAM Column Address Strobe"]},{"entry":[{},{},"signal. One signal is provided per byte"]},{"entry":[{},{},"of the interface's data bus. All the"]},{"entry":[{},{},"CAS signals are driven simultaneously."]},{"entry":["{overscore (WE)}","O","The DRAM Write Enable signal"]},{"entry":["{overscore (OE)}","O","The DRAM Output Enable signal"]},{"entry":["DRAM_enable","I","This input signal, when low,"]},{"entry":[{},{},"makes all the output signals on the"]},{"entry":[{},{},"interface go high impedance."]},{"entry":[{},{},"Note: on-chip data processing is not"]},{"entry":[{},{},"stopped when the DRAM interface is"]},{"entry":[{},{},"high impedance. So, errors will occur"]},{"entry":[{},{},"if the chip attempts to access DRAM"]},{"entry":[{},{},"while DRAM_enable is low."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In accordance with the present invention, the interface is configurable in two ways:\n\n","Generally, there are three groups of registers associated with the DRAM interface: interface timing configuration registers, interface bus configuration registers and refresh configuration registers. The refresh configuration registers (registers in Table A.5.4) should be configured last.","A.5.3.1 Conditions After Reset","After reset, the DRAM interface, in accordance with the present invention, starts operation with a set of default timing parameters (that correspond to the slowest mode of operation). Initially, the DRAM interface will continually execute refresh cycles (excluding all other transfers). This will continue until a value is written into refresh_interval. The DRAM interface will then be able to perform other types of transfer between refresh cycles.","A.5.3.2 Bus Configuration","Bus configuration (registers in Table A.5.3) should only be done when no data transfers are being attempted by the interface. The interface is placed in this condition immediately after reset, and before a value is written into refresh_interval. The interface can be re-configured later, if required, only when no transfers are being attempted. See the Temporal Decoder chip_access register (A.18.3.1) and the Spatial Decoder buffer_manager_access register (A.13.1.1).","A.5.3.3 Interface Timing Configuration","In accordance with the present invention, modifications to the interface timing configuration information are controlled by the interfacetiming_access register. Writing 1 to this register allows the interface timing registers (in Table A.5.2) to be modified. While interface_timing_access=1, the DRAM interface continues operation with its previous configuration. After writing 1, the user should wait until 1 can be read back from the interface_timing_access before writing to any of the interface timing registers.","When configuration is compete, 0 should be written to the interface_timing_access. The new configuration will then be transferred to the DRAM interface.","A.5.3.4 Refresh Configuration","The refresh interval of the DRAM interface of the present invention can only be configured once following reset. Until refresh_interval is configured, the interface continually executes refresh cycles. This prevents any other data transfers. Data transfers can start after a value is written to refresh_interval.","As is well known in the art, DRAMs typically require a \u201cpause\u201d of between 100 \u03bcs and 500 \u03bcs after power is first applied, followed by a number of refresh cycles before normal operation is possible. Accordingly, these DRAM start-up requirements should be satisfied before writing a value to refresh_interval.","A.5.3.5 Read Access to Configuration Registers","All the DRAM interface registers of the present invention can be read at any time.","A.5.4 Interface Timing (Ticks)","The DRAM interface timing is derived from a Clock which is running at four times the input Clock rate of the device (decoder_clock). This clock is generated by an on-chip PLL.","For brevity, periods of this high speed clock are referred to as ticks.",{"@attributes":{"id":"p-0738","num":"0839"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface timing configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["interface_timing_access","1","0","This function enable register allows access"]},{"entry":[{},"bit",{},"to the DRAM interface timing configuration"]},{"entry":[{},"rw",{},"registers. The configuration registers"]},{"entry":[{},{},{},"should not be modified while this register"]},{"entry":[{},{},{},"requests access to modify the configuration"]},{"entry":[{},{},{},"registers. After a 0 has been written to this"]},{"entry":[{},{},{},"register the DRAM interface will start to use"]},{"entry":[{},{},{},"the new values in the timing configuration"]},{"entry":[{},{},{},"registers."]},{"entry":["page_start_length","5","0","Specifies the length of the access start in"]},{"entry":[{},"bit",{},"ticks. The minimum value that can be used"]},{"entry":[{},"rw",{},"is 4 (meaning 4 ticks). 0 selects the"]},{"entry":[{},{},{},"maximum length of 32 ticks."]},{"entry":["transfer_cycle_length","4","0","Specifies the length of the fast page read or"]},{"entry":[{},"bit",{},"write cycle in ticks. The minimum value that"]},{"entry":[{},"rw",{},"can be used is 4 (meaning 4 ticks). 0"]},{"entry":[{},{},{},"selects the maximum length of 16 ticks."]},{"entry":["refresh_cycle_length","4","0","Specifies the length of the refresh cycle in"]},{"entry":[{},"bit",{},"ticks The minimum value that can be used"]},{"entry":[{},"rw",{},"is 4. (meaning 4 ticks). 0 selects the"]},{"entry":[{},{},{},"maximum length of 16 ticks."]},{"entry":["RAS_falling","4","0","Specifies the number of ticks after the start"]},{"entry":[{},"bit",{},"of the access start that {overscore (RAS)} falls. The"]},{"entry":[{},"rw",{},"minimum value that can be used is 4"]},{"entry":[{},{},{},"(meaning 4 ticks). 0 selects the maximum"]},{"entry":[{},{},{},"length of 16 ticks."]},{"entry":["CAS_falling","4","8","Specifies the number of ticks after the start"]},{"entry":[{},"bit",{},"of a read cycle, write cycle or access start"]},{"entry":[{},"rw",{},"that {overscore (CAS)} falls. The minimum value that"]},{"entry":[{},{},{},"can be used is 1 (meaning 1 tick). 0 selects"]},{"entry":[{},{},{},"the maximum length of 16 ticks."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0739","num":"0840"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interface bus configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["DRAM_data_width","2","0","Specifies the number of bits used on the"]},{"entry":[{},"bit",{},"DRAM interface data bus DRAM_data"]},{"entry":[{},"rw",{},"[31:0] See A.5.8."]},{"entry":["row_address_bits","2","0","Specifies the number of bits used for the"]},{"entry":[{},"bit",{},"row address portion of the DRAM"]},{"entry":[{},"rw",{},"interface address bus. See A.5.10."]},{"entry":["DRAM_enable","1","1","Writing the value 0 in to this register"]},{"entry":[{},"bit",{},"forces the DRAM interface into a high"]},{"entry":[{},"rw",{},"impedance state. 0 will be read from"]},{"entry":[{},{},{},"this register if either the DRAM_enable"]},{"entry":[{},{},{},"signal is low or 0 has been written to the"]},{"entry":[{},{},{},"register."]},{"entry":["CAS_strength","3","6","These three bit registers configure the"]},{"entry":["RAS_strength","bit",{},"output drive strength of DRAM interface"]},{"entry":["addr_strength","rw",{},"signals. This allows the interface to be"]},{"entry":["DRAM_data_strength",{},{},"configured for various different loads."]},{"entry":["OEWE_strength",{},{},"See A.5.13"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The DRAM interface uses fast page mode. Three different types of access are supported:\n\n",{"@attributes":{"id":"p-0741","num":"0845"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Refresh configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["refresh_interval","8","0","This value specifies the interval"]},{"entry":[{},"bit",{},"between refresh cycles in periods of 16"]},{"entry":[{},"rw",{},"decoder_clock cycles. Values in the"]},{"entry":[{},{},{},"range 1 . . . 255 can be configured. The"]},{"entry":[{},{},{},"value 0 is automatically loaded after"]},{"entry":[{},{},{},"reset and forces the DRAM interface to"]},{"entry":[{},{},{},"continuously execute refresh cycles"]},{"entry":[{},{},{},"until a valid refresh interval is"]},{"entry":[{},{},{},"configured. It is recommended that"]},{"entry":[{},{},{},"refresh_interval should be configured"]},{"entry":[{},{},{},"only once after each reset."]},{"entry":["no_refresh","1","0","Writing the value 1 to this register"]},{"entry":[{},"bit",{},"prevents execution of any refresh"]},{"entry":[{},"rw",{},"cycles."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Each access is composed of two parts:\n\n","In the present invention, each access begins with an access start and is followed by one or more data transfer cycles. In addition, there is a read, write and refresh variant of both the access start and the data transfer cycle.","Upon completion of the last data transfer for a particular access, the interface enters its default state (see A.5.7.3) and remains in this state until a new access is ready to begin. If a new access is ready to begin when the last access has finished, then the new access will begin immediately.","A.5.7.1 Access Start","The access start provides the page address for the read or write transfers and establishes some initial signal conditions. In accordance with the present invention, there are three different access starts:\n\n",{"@attributes":{"id":"p-0746","num":"0855"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM Interface timing parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["5","{overscore (RAS)} precharge period set","4","16","bcx",{}]},{"entry":[{},"by register RAS_falling"]},{"entry":["6","Access start duration set by register","4","32"]},{"entry":[{},"page_start_length"]},{"entry":["7","{overscore (CAS)} precharge length set","1","16",{},{"sup":"a"}]},{"entry":[{},"by register CAS_falling."]},{"entry":["8","Fast page read or write cycle","4","16"]},{"entry":[{},"length set by the register"]},{"entry":[{},"transfer_cycle_length."]},{"entry":["9","Refresh cycle length set","4","16"]},{"entry":[{},"by the register refresh_cycle."]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}}},"In each case, the timing of RAS and the row address is controlled by the registers RAS_falling and page_start_length. The state of OE and DRAM_data[:] is held from the end of the previous data transfer until **RAS falls. The three different access start types only vary in how they drive OE and DRAM_data[:] when RAS falls. See FIG. .","A.5.7.2 Data Transfer","In the present invention, there are different types of data transfer cycles:\n\n","A start of refresh can only be followed by a single refresh cycle. A start of read (or write) can be followed by one or more fast page read (or write) cycles. At the start of the read cycle CAS is driven high and the new column address is driven.","Furthermore, an early write cycle is used. WE is driven low at the start of the first write transfer and remains low until the end of the last write transfer. The output data is driven with the address.","As a CAS before RAS refresh cycle is initiated by the start of refresh cycle, there is no interface signal activity during the refresh cycle. The purpose of the refresh cycle is to meet the minimum RAS low period required by the DRAM.","A.5.7.3 Interface Default State","The interface signals in the present invention enter a default state at the end of an access:\n\n","The two bit register, DRAM_data_width, allows the width of the DRAM interface's data path to be configured. This allows the DRAM cost to be minimized when working with small picture formats.",{"@attributes":{"id":"p-0754","num":"0869"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuring DRAM_data_width"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"133pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DRAM_data_width"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{"sup":["\u2002","a"]},"8 bit wide data bus on DRAM_data[31:24]."]},{"entry":["1","16 bit wide data bus on DRAM_data[31:16]."]},{"entry":["2","32 bit wide data bus on DRAM_data[31:0]."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"b"}}]}}]}},"br":{}},"The number of bits that are taken from the middle section of the 24 bit internal address in order to provide the row address is configured by the register, row_address_bits.",{"@attributes":{"id":"p-0756","num":"0871"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuring row_address_bits"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["row_address_bits","Width of row address"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["1","10 bits on DRAM_addr[9:0]"]},{"entry":["2","11 bits on DRAM_addr[10:0]"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"On-chip, a 24 bit address is generated. How this address is used to form the row and column addresses depends on the width of the data bus and the number of bits selected for the row address. Some configurations do not permit all the internal address bits to be used and, therefore, produce \u201chidden bits)\u201d.","Similarly, the row address is extracted from the middle portion of the address. Accordingly, this maximizes the rate at which the DRAM is naturally refreshed.",{"@attributes":{"id":"p-0759","num":"0874"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"287pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Mapping between internal and external addresses"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["row","row address","data",{}]},{"entry":["address","translation","bus","column address translation"]},{"entry":["width","internal\u2003\u2003external","width","internal\u2003\u2003external"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["9","[14:6]\u2003\u2003[8:0]","8","[19:15]\u2003\u2003[10:6]","[5:0]\u2003\u2003[5:0]"]},{"entry":[{},{},"16","[20:15]\u2003\u2003[10:5]","[5:1]\u2003\u2003[4:0]"]},{"entry":[{},{},"32","[21:15]\u2003\u2003[10:4]","[5:2]\u2003\u2003[3:0]"]},{"entry":["10","[15:6]\u2003\u2003[9:0]","8","[19:16]\u2003\u2003[10:6]","[5:0]\u2003\u2003[5:0]"]},{"entry":[{},{},"16","[20:16]\u2003\u2003[10:5]","[5:1]\u2003\u2003[4:0]"]},{"entry":[{},{},"32","[21:16]\u2003\u2003[10:4]","[5:2]\u2003\u2003[3:0]"]},{"entry":["11","[16:6]\u2003\u2003[10:0]","8","[19:17]\u2003\u2003[10:6]","[5:0]\u2003\u2003[5:0]"]},{"entry":[{},{},"16","[20:17]\u2003\u2003[10:5]","[5:1]\u2003\u2003[4:0]"]},{"entry":[{},{},"32","[21:17]\u2003\u2003[10:4]","[5:2]\u2003\u2003[3:0]"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The least significant 4 to 6 bits of the column address are used to provide addresses for fast page mode transfers of up to 64 bytes. The number of address bits required to control these transfers will depend on the width of the data bus (see A.5.8).","A.5.10.2 Decoding Row Address to Access More DRAM Banks","Where only a single bank of DRAM is used, the width of the row address used will depend on the type of DRAM used. Applications that require more memory than can be typically provided by a single DRAM bank, can configure a wider row address and then decode some row address bits to select a single DRAM bank.","NOTE: The row address is extracted from the middle of the internal address. If some bits of the row address are decoded to select banks of DRAM, then all possible values of these \u201cbank select bits\u201d must select a bank of DRAM. Otherwise, holes will be left in the address space.","A.5.11 DRAM Interface Enable","In the present invention, there are two ways to make all the output signals on the DRAM interface become high impedance, i.e., by setting the DRAM_enable register and the DRAM-enable signal. Both the register and the signal must be at a logic  in order for the drivers on the DRAM interface to operate. If either is low then the interface is taken to high impedance.","Note: on-chip data processing is not terminated when the DRAM interface is at high impedance. Therefore, errors will occur if the chip attempts to access DRAM while the interface is at high impedance.","In accordance with the present invention, the ability to take the DRAM interface to high impedance is provided to allow other devices to test or use the DRAM controlled by the Spatial Decoder (or the Temporal Decoder) when the Spatial Decoder (or the Temporal Decoder) is not in use. It is not intended to allow other devices to share the memory during normal operation.","A.5.12 Refresh","Unless disabled by writing to the register, no_refresh, the DRAM interface will automatically refresh the DRAM using a {overscore (CAS)} before {overscore (RAS)} refresh cycle at an interval determined by the register, refresh_interval.","The value in refresh_interval specifies the interval between refresh cycles in periods of 16 decoder_clock cycles. Values in the range 1.255 can be configured. The value 0 is automatically loaded after reset and forces the DRAM interface to continuously execute refresh cycles (once enabled) until a valid refresh interval is configured. It is recommended that refresh_interval should be configured only once after each reset.","While {overscore (reset)} is asserted, the DRAM interface is unable to refresh the DRAM. However, the reset time required by the decoder chips is sufficiently short, so that it should be possible to reset them and then to re-configure the DRAM interface before the DRAM contents decay.","A.5.13 Signal Strengths","The drive strength of the outputs of the DRAM interface can be configured by the user using the 3 bit registers, CAS_strength, RAS_strength, addr_strength, DRAM_data_strength, and OEWE_strength. The MSB of this 3 bit value selects either a fast or slow edge rate. The two less significant bits configure the output for different load capacitances.","The default strength after reset is 6 and this configures the outputs to take approximately 10 ns to drive a signal between GND and Vif loaded with 24F.",{"@attributes":{"id":"p-0771","num":"0886"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Output strength configurations"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"strength value","Drive characteristics"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"0","Approx. 4 ns\/V into 6 pf load"]},{"entry":[{},"1","Approx. 4 ns\/V into 12 pf load"]},{"entry":[{},"2","Approx. 4 ns\/V into 24 pf load"]},{"entry":[{},"3","Approx. 4 ns\/V into 48 pf load"]},{"entry":[{},"4","Approx. 2 ns\/V into 6 pf load"]},{"entry":[{},"5","Approx. 2 ns\/V into 12 pf load"]},{"entry":[{},"6","Approx. 2 ns\/V into 24 pf load"]},{"entry":[{},"7","Approx. 2 ns\/V into 48 pf load"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"left"},"sup":"a"}]}]}}]}}},"When an output is configured appropriately for the load it is driving, it will meet the AC electrical characteristics specified in Tables A.5.13 to A.5.16. When appropriately configured, each output is approximately matched to its load and, therefore, minimal overshoot will occur after a signal transition.","A.5.14 Electrical Specifications","All information provided in this section is merely illustrative of one embodiment of the present invention and is included by example and not necessarily by way of limitation.",{"@attributes":{"id":"p-0774","num":"0889"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Maximum Ratings"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["V","Supply voltage relative","\u22120.5","6.5","V"]},{"entry":[{},"to GND"]},{"entry":["V","Input voltage on any pin","GND \u2212 0.5","V+ 0.5","V"]},{"entry":["T","Operating temperature","+10","+85","\u00b0 C."]},{"entry":["T","Storage temperature","\u221255","+150","\u00b0 C."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Table A.5.10 sets forth maximum ratings for the illustrative embodiment only. For this particular embodiment stresses below those listed in this table should be used to ensure reliability of operation.",{"@attributes":{"id":"p-0776","num":"0891"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Operating conditions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["V","Supply voltage relative","4.75","\u20025.25","V"]},{"entry":[{},"to GND"]},{"entry":["GND","Ground","0","\u20020","V"]},{"entry":["V","Input logic \u20181\u2019 voltage","2.0","V+ 0.5","V"]},{"entry":["V","Input logic \u20180\u2019 voltage","GND \u2212 0.5","\u20020.8","V"]},{"entry":["T","Operating temperature","0","70","\u00b0 C."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a"}}]}}]}}},{"@attributes":{"id":"p-0777","num":"0892"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Electrical characteristics"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{"sup":"V"},"Output logic \u20180\u2019 voltage",{},"0.4","V"]},{"entry":[{"sup":"V"},"Output logic \u20181\u2019 voltage","2.8",{},"V"]},{"entry":[{"sup":"I"},"Output current","\u00b1100",{},"\u03bcA"]},{"entry":[{"sup":"I"},"Output off state leakage current","\u00b120",{},"\u03bcA"]},{"entry":[{"sup":"I"},"Input leakage current","\u00b110",{},"\u03bcA"]},{"entry":[{"sup":"I"},"RMS power supply current",{},"500","mA"]},{"entry":[{"sup":"C"},"Input capacitance",{},"5","pF"]},{"entry":[{"sup":"C"},"Output\/IO capacitance",{},"5","pF"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a","sub":"OLmax "}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b"}}]}}]}},"br":{}},{"@attributes":{"id":"p-0778","num":"0893"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal values for a strobe"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["10","Cycle time","\u22122","+2","ns",{}]},{"entry":["11","Cycle time","\u22122","+2","ns"]},{"entry":["12","High pulse","\u22125","+2","ns"]},{"entry":["13","Low pulse","\u221211","+2","ns"]},{"entry":["14","Cycle time","\u22128","+2","ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}}},{"@attributes":{"id":"p-0779","num":"0894"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal values between two strobes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["15","Strobe to strobe delay","\u22123","+3","ns",{}]},{"entry":["16","Low hold time","\u221213","+3","ns"]},{"entry":["17","Strobe to strobe precharge","\u22129","+3","ns"]},{"entry":[{},"e.g. tCRP, tRCS, tRCH,"]},{"entry":[{},"tRRH, tRPC"]},{"entry":[{},"{overscore (CAS)} precharge pulse","\u22125","+2","ns"]},{"entry":[{},"between any two {overscore (CAS)} signals on"]},{"entry":[{},"wide DRAMs e.g. tCP, or between"]},{"entry":[{},"{overscore (RAS)} rising and {overscore (CAS)} falling e.g."]},{"entry":[{},"tRPC"]},{"entry":["18","Precharge before disable","\u221212","+3","ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}}},{"@attributes":{"id":"p-0780","num":"0895"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.15"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal between a bus and a strobe"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["19","Set up time","\u221212","+3 ","ns",{}]},{"entry":["20","Hold time","\u221212","+3","ns"]},{"entry":["21","Address access time","\u221212","+3","ns"]},{"entry":["22","Next valid after strobe","\u221212","+3","ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}}},{"@attributes":{"id":"p-0781","num":"0896"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.16"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal between a bus and a strobe"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["23","Read data set - up time before","0",{},"ns",{}]},{"entry":[{},"{overscore (CAS)} signal starts to rise"]},{"entry":["24","Read data hold time after","0",{},"ns"]},{"entry":[{},"{overscore (CAS)} signal starts to go high"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"When reading from DRAM, the DRAM interface samples DRAM_data[:] as the {overscore (CAS)} signals rise.",{"@attributes":{"id":"p-0783","num":"0898"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.5.17"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Cross-reference between \u201cstandard\u201d DRAM"},{"entry":"parameter names and timing parameter numbers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["parameter","parameter","parameter"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["name","number","name","number","name","number"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["tPC","10","tRSH","16","tRHCP","18"]},{"entry":[{},{},{},{},"tCPRH"]},{"entry":["tRC","11","tCSH",{},"tASR","19"]},{"entry":["tRP","12","tRWL",{},"tASC"]},{"entry":["tCP",{},"tCWL",{},"tDS"]},{"entry":["tCPN",{},"tRAC",{},"tRAH","20"]},{"entry":["tRAS","13","tOAC\/tOE",{},"tCAH"]},{"entry":["tCAS",{},"tCHR",{},"tDH"]},{"entry":["tCAC",{},"tCRP","17","tAR"]},{"entry":["tWP",{},"tRCS",{},"tAA","21"]},{"entry":["tRASP",{},"tRCH",{},"tRAL"]},{"entry":["tRASC",{},"tRRH",{},"tRAD","22"]},{"entry":["tACP\/tCPA","14","tRPC"]},{"entry":["tRCD","15","tCP"]},{"entry":["tCSR",{},"tRPC"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"A standard byte wide microprocessor interface (MPI) is used on all chips in the video decoder chip-set. However, one of ordinary skill in the art will appreciate that microprocessor interfaces of other widths may also be used. The MPI operates synchronously to various decoder chip clocks.","A.6.1 MPI Signals",{"@attributes":{"id":"p-0785","num":"0900"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MPI interface signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["{overscore (enable)}[1:0]","Input","Two active low chip enables. Both must"]},{"entry":[{},{},"be low to enable accesses via the MPI."]},{"entry":["r{overscore (w)}","Input","High indicates that a device wishes to read"]},{"entry":[{},{},"values from the video chip."]},{"entry":[{},{},"This signal should be stable while the chip is"]},{"entry":[{},{},"enabled."]},{"entry":["addr[n:0]","Input","Address specifies one of 2locations in the"]},{"entry":[{},{},"chip's  memory map."]},{"entry":[{},{},"This signal should be stable while the chip is"]},{"entry":[{},{},"enabled."]},{"entry":["data[7:0]","Output","8 bit wide data I\/O port. These pins are high"]},{"entry":[{},{},"impedance if either enable signal is high."]},{"entry":["{overscore (irq)}","Output","An active low, open collector, interrupt request"]},{"entry":[{},{},"signal."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0786","num":"0901"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Absolute Maximum Ratings"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Supply voltage relative to","\u22120.5","6.5","V"]},{"entry":[{},"GND"]},{"entry":["V","Input voltage on any pin","GND \u2212 0.5","V+ 0.5","V"]},{"entry":["T","Operating temperature","\u221240","+85","\u00b0 C."]},{"entry":["T","Storage temperature","\u221255","+150","\u00b0 C."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0787","num":"0902"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Operating conditions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Supply voltage relative","4.75","5.25","V"]},{"entry":[{},"to GND"]},{"entry":["GND","Ground","0","0","V"]},{"entry":["V","Input logic \u201c1\u201d voltage","2.0","V+ 0.5","V"]},{"entry":["V","Input logic \u201c0\u201d voltage","GND \u2212 0.5","0.8","V"]},{"entry":["T","Operating temperature","0","70","\u00b0 C."]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b"}}]}}]}}},{"@attributes":{"id":"p-0788","num":"0903"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Electrical characteristics"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Output logic \u201c0\u201d voltage",{},"0.4","V"]},{"entry":["V","Open collector output logic \u20180\u2019",{},"0.4","V"]},{"entry":[{},"voltage"]},{"entry":["V","Output logic \u201c1\u201d voltage","2.4",{},"V"]},{"entry":["I","Output current","\u00b1100",{},"\u03bcA"]},{"entry":["I","Open collector output current","4.0","8.0","mA"]},{"entry":["I","Output off state leakage current",{},"\u00b120","\u03bcA"]},{"entry":["I","Input leakage current",{},"\u00b110","\u03bcA"]},{"entry":["I","RMS power supply current",{},"500","mA"]},{"entry":["C","Input capacitance",{},"5","pF"]},{"entry":["C","Output\/IO capacitance",{},"5","pF"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a","sub":["O ","O\u221d min"]}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"c"}}]}}]}},"br":{}},{"@attributes":{"id":"p-0789","num":"0904"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Microprocessor interface read timing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["25","Enable low period","100",{},"ns",{}]},{"entry":["26","Enable high period","50",{},"ns"]},{"entry":["27","Address or r{overscore (w)} set-up","0",{},"ns"]},{"entry":[{},"to chip enable"]},{"entry":["28","Address or r{overscore (w)} hold","0",{},"ns"]},{"entry":[{},"from chip disable"]},{"entry":["29","Output turn-on time","20",{},"ns"]},{"entry":["30","Read data access time",{},"70","ns",{"sup":"b"}]},{"entry":["31","Read data hold time","5",{},"ns"]},{"entry":["32","Read data turn-off time",{},"20"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"b","sub":"p"}}]}}]}}},{"@attributes":{"id":"p-0790","num":"0905"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.6.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Microprocessor interface write timing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["33","Write data set-up time","15",{},"ns",{"sup":"a"}]},{"entry":["34","Write data hold time","0",{},"ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}},"br":{}},"In accordance with the present invention, \u201cevent\u201d is the term used to describe an on-chip condition that a user might want to observe. An event can indicate an error or it can be informative to the user's software.","There are two single bit registers associated with each interrupt or \u201cevent\u201d. These are the condition event register and the condition mask register.","A.6.3.1 Condition Event Register","The condition event register is a one bit read\/write register whose value is set to one by a condition occurring within the circuit. The register is set to one even if the condition was merely transient and has now gone away. The register is then guaranteed to remain set to one until the user's software resets it (or the entire chip is reset).\n\n","The condition mask register is one bit read\/write register which enables the generation of an interrupt request if the corresponding condition event register(s) is (are) set. If the condition event is already set when 1 is written to the condition mask register, an interrupt request will be issued immediately.\n\n","Unless stated otherwise a block will stop operation after generating an interrupt request and will re-start operation after either the condition event or the condition mask register is cleared.","A.6.3.3 Event and Mask Bits","Event bits and mask bits are always grouped into corresponding bit positions in consecutive bytes in the memory map (see Table A.9.6 and Table A.17.6). This allows interrupt service software to use the value read from the mask registers as a mask for the value in the event registers to identify which event generated the interrupt.","A.6.3.4 The Chip Event and Mask","Each chip has a single \u201cglobal\u201d event bit that summarizes the event activity on the chip. The chip event register presents the OR of all the on-chip events that have 1 in their mask bit.","A 1 in the chip mask bit allows the chip to generate interrupts. A 0 in the chip mask bit prevents any on-chip events from generating interrupt requests.","Writing 1 to 0 to the chip event has no effect. It will only clear when all the events (enabled by a 1 in their mask bit) have been cleared.","A.6.3.5 The irq Signal","The {overscore (irq)} signal is asserted if both the chip event bit and the chip event mask are set.","The {overscore (irq)} signal is an active low, \u201copen collector\u201d output which requires an off-chip pull-up resistor. When active the {overscore (irq)} output is pulled down by an impedance of 100 \u03a9 or less.","I will be appreciated that pull-up resistor of approximately 4 k\u03a9 should be suitable for most applications.","A.6.4 Accessing Registers","A.6.4.1 Stopping Circuits to Enable Access","In the present invention, most registers can only modified if the block with which they are associated is stopped. Therefore, groups of registers will normally be associated with an access register.","The value 0 in an access register indicates that the group of registers associated with that access register should not be modified. Writing 1 to an access register requests that a block be stopped. However, the block may not stop immediately and block's access register will hold the value 0 until it is stopped.","Accordingly, user software should wait (after writing 1 to request access) until 1 is read from the access register. If the user writes a value to a configuration register while its access register is set to 0, the results are undefined.","A.6.4.2 Registers Holding Integers","The least significant bit of any byte in the memory map is that associated with the signal data[].","Registers that hold integers values greater than 8 bits are split over either 2 or 4 consecutive byte locations in the memory map. The byte ordering is \u201cbig endian\u201d as shown in FIG. . However, no assumptions are made about the order in which bytes are written into multi-byte registers.","Unused bits in the memory map will return a 0 when read except for unused bits in registers holding signed integers. In this case, the most significant bit of the register will be sign extended. For example, a 12 bit signed register will be sign extended to fill a 16 bit memory map location (two bytes). A 16 bit memory map location holding a 12 bit unsigned integer will return a 0 from its most significant bits.","A.6.4.3 Keyholed Address Locations","In the present invention, certain less frequently accessed memory map locations have been placed behind \u201ckeyholes\u201d. A \u201ckeyhole\u201d has two registers associated with it, a keyhole address register and a keyhole data register.","The keyhole address specifies a location within an extended address space. A read or a write operation to the keyhole data register accesses the location specified by the keyhole address register.","After accessing a keyhole data register the associated keyhole address register increments. Random access within the extended address space is only possible by writing a new value to the keyhole address register for each access.","A chip in accordance with the present invention, may have more than one \u201ckeyholed\u201d memory map. There is no interaction between the different keyholes.","A.6.5 Special Registers","A.6.5.1 Unused Registers","Registers or bits described as \u201cnot used\u201d are locations in the memory map that have not been used in the current implementation of the device. In general, the value 0 can be read from these locations. Writing 0 to these locations will have no effect.","As will be appreciated by one of ordinary skill in the art, in order to maintain compatibility with future variants of these products, it is recommended that the user's software should not depend upon values read from the unused locations. Similarly, when configuring the device, these locations should either be avoided or set to the value 0.","A.6.5.2 Reserved Registers","Similarly, registers or bits described as \u201creserved\u201d in the present invention have un-documented effects on the behavior of the device and should not be accessed.","A.6.5.3 Test Registers","Furthermore, registers or bits described as \u201ctest registers\u201d control various aspects of the device's testability. Therefore, these registers have no application in the normal use of the devices and need not be accessed by normal device configuration and control software.","Section A.7 Clocks","In accordance with the present inventions, many different clocks can be identified in the video decoder system. Examples of clocks are illustrated in FIG. .","As data passes between different clock regimes within the video decoder chip-set, it is resynchronized (on-chip) to each new clock. In the present invention, the maximum frequency of any input clock is 30 MH. However, one of ordinary skill in the art will appreciate that other frequencies, including those greater than 30 MHz, may also be used. On each chip, the microprocessor interface (MPI) operates asynchronously to the chip clocks. In addition, the Image Formatter can generate a low frequency audio clock which is synchronous to the decoded video's picture rate. Accordingly, this clock can be used to provide audio\/video synchronization.","A.7.1 Spatial Decoder Clock Signals","The Spatial Decoder has two different (and potentially asynchronous) clock inputs:",{"@attributes":{"id":"p-0820","num":"0941"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.7.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Spatial Decoder clocks"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["coded_clock","Input","This clock controls data transfer in to the"]},{"entry":[{},{},"coded data port of the Spatial Decoder."]},{"entry":[{},{},"On-chip this clock controls the processing of"]},{"entry":[{},{},"the coded data until it reaches the coded"]},{"entry":[{},{},"data buffer."]},{"entry":["decoder_clock","Input","The decoder clock controls the majority of"]},{"entry":[{},{},"the processing functions on the Spatial"]},{"entry":[{},{},"Decoder."]},{"entry":[{},{},"The decoder clock also controls the transfer"]},{"entry":[{},{},"of data out of the Spatial Decoder through"]},{"entry":[{},{},"its output port."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The Temporal Decoder has only one clock input:",{"@attributes":{"id":"p-0822","num":"0943"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.7.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporal Decoder clocks"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["decoder_clock","Input","The decoder clock controls all of the"]},{"entry":[{},{},"processing functions on the Temporal Decoder."]},{"entry":[{},{},"The decoder clock also controls transfer of"]},{"entry":[{},{},"data in to the Temporal Decoder through its"]},{"entry":[{},{},"input port and out via its output port."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0823","num":"0944"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.7.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Input clock requirements"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"30 MHz",{},{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Note"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["35","Clock period","33",{},"ns",{}]},{"entry":["36","Clock high period","13",{},"ns"]},{"entry":["37","Clock low period","13",{},"ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0824","num":"0945"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.7.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Clock input conditions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["V","Input logic \u20181\u2019 voltage","3.68","V+ 0.5","V"]},{"entry":["V","Input logic \u20180\u2019 voltage","GND \u2212 0.5","1.43","V"]},{"entry":["I","Input leakage current",{},"\u00b110","\u03bcA"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The clock input signals are CMOS inputs. Vis approx. 70% of Vand Vis approx. 30% of V. The values shown in Table A.7.4 are those for Vand Vat their respective worst case V. V=5.0\u00b10.25V.","A.7.3.2 Stability of Clocks","In the present invention, clocks used to drive the DRAM interface and the chip-to-chip interfaces are derived from the input clock signals. The timing specifications for these interfaces assume that the input clock timing is stable to within \u00b1100 ps.","Section A.8 JTAG","As circuit boards become more densely populated, it is increasingly difficult to verify the connections between components by traditional means, such as in-circuit testing using a bed-of-nails approach. In an attempt to resolve the access problem and standardize on a methodology, the Joint Test Action Group (JTAG) was formed. The work of this group culminated in the \u201cStandard Test Access Port and Boundary Scan Architecture\u201d, now adopted by the IEEE as standard 1149.1. The Spatial Decoder and Temporal Decoder comply with this standard.","The standard utilizes a boundary scan chain which serially connects each digital signal pin on the device. The test circuitry is transparent in normal operation, but in test mode the boundary scan chain allows test patterns to be shifted in, and applied to the pins of the device. The resultant signals appearing on the circuit board at the inputs to the JTAG device, may be scanned out and checked by relatively simple test equipment. By this means, the inter-component connections can be tested, as can areas of logic on the circuit board.","All JTAG operations are performed via the Test Access Port (TAP), which consists of five pins. The {overscore (trst)} (Test Reset) pin resets the JTAG circuitry, to ensure that the device doesn't power-up in test mode. The tck (Test Clock) pin is used to clock serial test patterns into the tdi (Test Data Input) pin, and out of the tdo (Test Data Output) pin. Lastly, the operational mode of the JTAG circuitry is set by clocking the appropriate sequence of bits into the tms (Test Mode Select) pin.","The JTAG standard is extensible to provide for additional features at the discretion of the chip manufacturer. On the Spatial Decoder and Temporal Decoder, there are 9 user instructions, including three JTAG mandatory instructions. The extra instructions allow a degree of internal device testing to be performed, and provide additional external test flexibility. For example, all device outputs may be made to float by a simple JTAG sequence.","For full details of the facilities available and instructions on how to use the JTAG port, refer to the following JTAG Applications Notes.","A.8.1 Connection of JTAG Pins in Non-JTAG Systems",{"@attributes":{"id":"p-0832","num":"0953"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.8.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"How to connect JTAG inputs"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal","Direction","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["{overscore (trst)}d","Input","This pin has an internal pull-up, but must be taken"]},{"entry":[{},{},"low at power-up even if the JTAG features are not"]},{"entry":[{},{},"being used. This may be achieved by connecting"]},{"entry":[{},{},"{overscore (trst)} in common with the chip reset pin {overscore (reset)}."]},{"entry":["tdi","Input","These pins have internal pull-ups, and may be left"]},{"entry":["tms",{},"disconnected if the JTAG circuitry is not being used."]},{"entry":["tck","Input","This pin does not have a pull-up, and should be tied"]},{"entry":[{},{},"to ground if the JTAG circuitry is not used."]},{"entry":["tdo","Output","High impedance except during JTAG scan"]},{"entry":[{},{},"operations. If JTAG is not being used, this pin may"]},{"entry":[{},{},"be left disconnected."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":[{},{}]},"All rules are adhered to, although the following should be noted:",{"@attributes":{"id":"p-0834","num":"0955"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.8.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JTAG Rules"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Rules","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["3.1.1(b)","The {overscore (trst)} pin is provided."]},{"entry":["3.5.1(b)","Guaranteed for all public instructions (see IEEE 1149.1"]},{"entry":[{},"5.2.1(c))."]},{"entry":["5.2.1(c)","Guaranteed for all public instructions. For some private"]},{"entry":[{},"instructions, the TDO pin may be active during any of the"]},{"entry":[{},"states Capture-DR, Exit1-DR, Exit-2-DR & Pause-DR."]},{"entry":["5.3.1(a)","Power on-reset is achieved by use of the {overscore (trst)} pin."]},{"entry":["6.2.1(e, f)","A code for the BYPASS instruction is loaded in the"]},{"entry":[{},"Test-Logic-Reset state."]},{"entry":["7.1.1(d)","Un-allocated instruction codes are equivalent to BYPASS."]},{"entry":["7.2.1(c)","There is no device ID register."]},{"entry":["7.8.1(b)","Single-step operation requires external control of the"]},{"entry":[{},"system clock."]},{"entry":["7.9.1( . . . )","There is no RUNBIST facility."]},{"entry":["7.11.1( . . . )","There is no IDCODE instruction."]},{"entry":["7.12.1( . . . )","There is no USERCODE instruction."]},{"entry":["8.1.1(b)","There is no device identification register."]},{"entry":["8.2.1(c)","Guaranteed for all public instructions. The apparent length"]},{"entry":[{},"of the path from tdi to tdo may change under certain"]},{"entry":[{},"circumstances while private instruction codes are loaded."]},{"entry":["8.3.1(d-1)","Guaranteed for all public instructions. Data may be loaded"]},{"entry":[{},"at times other than on the rising edge of tck while private"]},{"entry":[{},"instructions codes are loaded."]},{"entry":["10.4.1(e)","During INTEST, the system clock pin must be controlled"]},{"entry":[{},"externally."]},{"entry":["10.5.1(c)","During INTEST, output pins are controlled by data shifted"]}]}}]}},"br":{}},{"@attributes":{"id":"p-0835","num":"0956"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.8.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Recommendations met"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Recommendation","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["3.2.1(b)","tck a a high-impedance CMOS input."]},{"entry":["3.3.1(c)","tms has a high impedance pull-up."]},{"entry":["3.6.1(d)","(Applies to use of chip)."]},{"entry":["3.7.1(a)","(Applies to use of chip)."]},{"entry":["6.1.1(e)","The SAMPLE\/PRELOAD instruction code is loaded"]},{"entry":[{},"during Capture-IR."]},{"entry":["7.2.1(f)","The INTEST instruction is supported."]},{"entry":["7.7.1(g)","Zeros are loaded at system output pins during"]},{"entry":[{},"EXTEST."]},{"entry":["7.7.2(h)","All system outputs may be set high-impedance."]},{"entry":["7.8.1(f)","Zeros are loaded at system input pins during"]},{"entry":[{},"INTEST."]},{"entry":["8.1.1(d.e)","Design-specific test data registers are not"]},{"entry":[{},"publicly accessible."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0836","num":"0957"},"tables":{"@attributes":{"id":"TABLE-US-00044","num":"00044"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.8.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Recommendations not implemented"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Recommendation","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["10.4.1(f)","During EXTEST, the signal driven into the on-chip"]},{"entry":[{},"logic from the system clock pin is that supplied"]},{"entry":[{},"externally."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0837","num":"0958"},"tables":{"@attributes":{"id":"TABLE-US-00045","num":"00045"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.8.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Permissions met"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Permissions","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["3.2.1(c)","Guaranteed for all public instructions."]},{"entry":["6.1.1(f)","The instruction register is not used to capture design-"]},{"entry":[{},"specific information."]},{"entry":["7.2.1(g)","Several additional public instructions are provided."]},{"entry":["7.3.1(a)","Several private instruction codes are allocated."]},{"entry":["7.3.1(c)","(Rule?) Such instructions codes are documented."]},{"entry":["7.4.1(f)","Additional codes perform identically to BYPASS."]},{"entry":["10.1.1(i)","Each output pin has its own 3-state control."]},{"entry":["10.3.1(h)","A parallel latch is provided."]},{"entry":["10.3.1(i, j)","During EXTEST, input pins are controlled by data"]},{"entry":[{},"shifted in via tdi."]},{"entry":["10.5.1(d, e)","3-state cells are not forced inactive in the Test-Logic-Reset"]},{"entry":[{},"state."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{},"ul":{"@attributes":{"id":"ul0039","list-style":"none"},"li":["30 MH, operation","Decodes MPEG, JPEG & H.261","Coded data rates to 25 Mb\/s","Video data rates to 21 MB\/s","Flexible chroma sampling formats","Full JPEG baseline decoding","Glue-less DRAM interface","Single \u22125V supply","208 pin PQFP package","Max. power dissipation 2.5 W","Independent coded data and decoder clocks","Uses standard page mode DRAM"]}},"The Spatial Decoder is a configurable VLSI decoder chip for use in a variety of JPEG, MPEG and H.261 picture and video decoding applications.","In a minimum configuration, with no off-chip DRAM, the Spatial Decoder is a single chip, high speed JPEG decoder. Adding DRAM allows the Spatial Decoder to decode JPEG encoded video pictures. 720\u00d7480, 30 Hz, 4:2:2 \u201cJPEG video\u201d can be decoded in real-time.","With the Temporal Decoder Temporal Decoder the Spatial Decoder can be used to decode H.261 and MPEG (as well as JPEG). 704\u00d7480, 30 Hz, 4:2:0 MPEG video can be decoded.","Again, the above values are merely illustrative, by way of example and not necessarily by way of limitation, of typical values for one embodiment in accordance with the present invention. Accordingly, those of ordinary skill in the art will appreciate that other values and\/or ranges may be used.","Section A.10 Coded Data Input","The system in accordance with the present invention, must know what video standard is being input for processing. Thereafter, the system can accept either pre-existing Tokens or raw byte data which is then placed into Tokens by the Start Code Detector.","Consequently, coded data configuration Tokens can be supplied to the Spatial Decoder via two routes:\n\n","The choice over which route(s) to use will depend upon the application and system environment. For example, at low data rates it might be possible to use a single microprocessor to both control the decoder chip-set and to do the system bitstream de-multiplexing. In this case, it may be possible to do the coded data input via the MPI. Alternatively, a high coded data rate might require that coded data be supplied via the coded data port.","In some applications it may be appropriate to employee a mixture of MPI and coded data port input.",{"@attributes":{"id":"p-0846","num":"0981"},"tables":{"@attributes":{"id":"TABLE-US-00046","num":"00046"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"308pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Spatial Decoder signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal Name","I\/O","Pin Number","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["coded_clock","I","182","Coded Data Port. Used to supply"]},{"entry":["coded_data[7:0]","I","172, 171, 169, 168, 167, 166, 164,","coded data or Tokens to the Spatial"]},{"entry":[{},{},"163","Decoder."]},{"entry":["coded_extn","I","174","See sections A.10.1 and"]},{"entry":["coded_valid","I","162","A.4.1"]},{"entry":["coded_accept","O","161"]},{"entry":["byte_mode","I","176"]},{"entry":["{overscore (enable)}[1:0]","I","126, 127","Micro Processor Interface (MPI)."]},{"entry":["r{overscore (w)}","I","125","See section A.5.1"]},{"entry":["addr[6:0]","I","136, 135, 133, 132, 131, 130, 128"]},{"entry":["data[7.0]","O","152, 151, 149, 147, 145, 143, 141,"]},{"entry":[{},{},"140"]},{"entry":["{overscore (irq)}","O","154"]},{"entry":["DRAM_data[31:0]","I\/O","15, 17, 19, 20, 22, 25, 27, 30, 31,","DRAM Interface."]},{"entry":[{},{},"33, 35, 38, 39, 42, 44, 47, 49, 57,","See section A.5.2"]},{"entry":[{},{},"59, 61, 63, 66, 68, 70, 72, 74, 76,"]},{"entry":[{},{},"79, 81, 83, 84, 85"]},{"entry":["DRAM_addr[10:0]","O","184, 186, 188, 189, 192, 193, 195,"]},{"entry":[{},{},"197, 199, 200, 203"]},{"entry":["{overscore (RAS)}","O","11"]},{"entry":["{overscore (CAS)}[3:0]","O","2, 4, 6, 8"]},{"entry":["{overscore (WE)}","O","12"]},{"entry":["{overscore (OE)}","O","204"]},{"entry":["DRAM_enable","I","112"]},{"entry":["out_data[8:0]","O","88, 89, 90, 92, 93, 94, 95, 97, 98","Output Port."]},{"entry":["out_extn","O","87","See section A.4.1"]},{"entry":["out_valid","O","99"]},{"entry":["out_accept","I","100"]},{"entry":["tck","I","115","JTAG port."]},{"entry":["tcl","I","116","See section A.8"]},{"entry":["tco","O","120"]},{"entry":["tms","I","117"]},{"entry":["{overscore (trst)}","I","121"]},{"entry":["decoder_clock","I","177","The main decoder clock. See section A.7"]},{"entry":["{overscore (reset)}","I","160","Reset."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0847","num":"0982"},"tables":{"@attributes":{"id":"TABLE-US-00047","num":"00047"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Spatial Decoder Test signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal Name","I\/O","Pin Num.","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["tph0ish","I","122","If override = 1 then tph0ish and tph1ish"]},{"entry":["tph1ish","I","123","are inputs for the on-chip two phase"]},{"entry":[{},{},{},"clock."]},{"entry":["override","I","110","For normal operation set override = 0."]},{"entry":[{},{},{},"tph0ish and tph1ish are ignored (so"]},{"entry":[{},{},{},"connect to GND or V)."]},{"entry":["chiptest","I","111","Set chiptest = 0 for normal operation."]},{"entry":["tloop","I","114","Connect to GND or Vduring normal"]},{"entry":[{},{},{},"operation."]},{"entry":["ramtest","I","109","If ramtest = 1 test of the on-chip"]},{"entry":[{},{},{},"RAMs is enabled."]},{"entry":[{},{},{},"Set ramtest = 0 for normal operation."]},{"entry":["pllselect","I","178","If pllselect = 0 the on-chip phase locked"]},{"entry":[{},{},{},"loops are disabled."]},{"entry":[{},{},{},"Set pllselect = 1 for normal operation."]},{"entry":["ti","I","180","Two clocks required by the DRAM"]},{"entry":["tq","I","179","interface during test operation."]},{"entry":[{},{},{},"Connect to GND or Vduring normal"]},{"entry":[{},{},{},"operation."]},{"entry":["pdout","O","207","These two pins are connections for an"]},{"entry":["pdin","I","206","external filter for the phase lock loop."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0848","num":"0983"},"tables":{"@attributes":{"id":"TABLE-US-00048","num":"00048"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Spatial Decoder Pin Assignments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Signal Name","Pin"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nc","208"]},{"entry":[{},"test pin","207"]},{"entry":[{},"test pin","206"]},{"entry":[{},"GND","205"]},{"entry":[{},"OE","204"]},{"entry":[{},"DRAM_addr[0]","203"]},{"entry":[{},"VDD","202"]},{"entry":[{},"nc","201"]},{"entry":[{},"DRAM_addr[1]","200"]},{"entry":[{},"DRAM_addr[2]","199"]},{"entry":[{},"GND","198"]},{"entry":[{},"DRAM_addr[3]","197"]},{"entry":[{},"nc","196"]},{"entry":[{},"DRAM_addr[4]","195"]},{"entry":[{},"VDD","194"]},{"entry":[{},"DRAM_addr[5]","193"]},{"entry":[{},"DRAM_addr[6]","192"]},{"entry":[{},"nc","191"]},{"entry":[{},"GND","190"]},{"entry":[{},"DRAM_addr[7]","189"]},{"entry":[{},"DRAM_addr[8]","188"]},{"entry":[{},"VDD","187"]},{"entry":[{},"DRAM_addr[9]","186"]},{"entry":[{},"nc","185"]},{"entry":[{},"DRAM_addr[10]","184"]},{"entry":[{},"GND","183"]},{"entry":[{},"coded_clock","182"]},{"entry":[{},"VDD","181"]},{"entry":[{},"test pin","180"]},{"entry":[{},"test pin","179"]},{"entry":[{},"test pin","178"]},{"entry":[{},"decoder_clock","177"]},{"entry":[{},"byte_mode","176"]},{"entry":[{},"GND","175"]},{"entry":[{},"coded_extn","174"]},{"entry":[{},"nc","173"]},{"entry":[{},"coded_data[7]","172"]},{"entry":[{},"coded_data[6]","171"]},{"entry":[{},"VDD","170"]},{"entry":[{},"coded_data[5]","169"]},{"entry":[{},"coded_data[4]","168"]},{"entry":[{},"coded_data[3]","167"]},{"entry":[{},"coded_data[2]","166"]},{"entry":[{},"GND","165"]},{"entry":[{},"coded_data[1]","164"]},{"entry":[{},"coded_data[0]","163"]},{"entry":[{},"coded_valid","162"]},{"entry":[{},"coded_accept","161"]},{"entry":[{},"reset","160"]},{"entry":[{},"VDD","159"]},{"entry":[{},"nc","158"]},{"entry":[{},"c","157"]},{"entry":[{},"nc","156"]},{"entry":[{},"nc","155"]},{"entry":[{},"{overscore (irq)}","154"]},{"entry":[{},"nc","153"]},{"entry":[{},"data[7]","152"]},{"entry":[{},"data[6]","151"]},{"entry":[{},"nc","150"]},{"entry":[{},"data[5]","149"]},{"entry":[{},"nc","148"]},{"entry":[{},"data[4]","147"]},{"entry":[{},"GND","146"]},{"entry":[{},"data[3]","145"]},{"entry":[{},"nc","144"]},{"entry":[{},"data[2]","143"]},{"entry":[{},"nc","142"]},{"entry":[{},"data[1]","141"]},{"entry":[{},"data[0]","140"]},{"entry":[{},"nc","139"]},{"entry":[{},"VDD","138"]},{"entry":[{},"nc","137"]},{"entry":[{},"addr[6]","136"]},{"entry":[{},"addr[5]","135"]},{"entry":[{},"GND","134"]},{"entry":[{},"addr[4]","133"]},{"entry":[{},"addr[3]","132"]},{"entry":[{},"addr[2]","131"]},{"entry":[{},"addr[1]","130"]},{"entry":[{},"VDD","129"]},{"entry":[{},"addr[0]","128"]},{"entry":[{},"{overscore (enable)}[0]","127"]},{"entry":[{},"{overscore (enable)}[1]","126"]},{"entry":[{},"r{overscore (w)}","125"]},{"entry":[{},"GND","124"]},{"entry":[{},"test pin","123"]},{"entry":[{},"test pin","122"]},{"entry":[{},"{overscore (trst)}","121"]},{"entry":[{},"tdo","120"]},{"entry":[{},"nc","119"]},{"entry":[{},"VDD","118"]},{"entry":[{},"tms","117"]},{"entry":[{},"tdi","116"]},{"entry":[{},"tck","115"]},{"entry":[{},"test pin","114"]},{"entry":[{},"GND","113"]},{"entry":[{},"DRAM_enable","112"]},{"entry":[{},"test pin","111"]},{"entry":[{},"test pin","110"]},{"entry":[{},"test pin","109"]},{"entry":[{},"nc","108"]},{"entry":[{},"nc","107"]},{"entry":[{},"nc","106"]},{"entry":[{},"nc","105"]},{"entry":[{},"nc","104"]},{"entry":[{},"nc","103"]},{"entry":[{},"nc","102"]},{"entry":[{},"VDD","101"]},{"entry":[{},"out_accept","100"]},{"entry":[{},"out_valid","99"]},{"entry":[{},"out_data[0]","98"]},{"entry":[{},"out_data[1]","97"]},{"entry":[{},"GND","96"]},{"entry":[{},"out_data[2]","95"]},{"entry":[{},"out_data[3]","94"]},{"entry":[{},"out_data[4]","93"]},{"entry":[{},"out_data[5]","92"]},{"entry":[{},"VDD","91"]},{"entry":[{},"out_data[6]","90"]},{"entry":[{},"out_data[7]","89"]},{"entry":[{},"out_data[8]","88"]},{"entry":[{},"out_extn","87"]},{"entry":[{},"GND","86"]},{"entry":[{},"DRAM_data[0]","85"]},{"entry":[{},"DRAM_data[1]","84"]},{"entry":[{},"DRAM_data[2]","83"]},{"entry":[{},"VDD","82"]},{"entry":[{},"DRAM_data[3]","81"]},{"entry":[{},"nc","80"]},{"entry":[{},"DRAM_data[4]","79"]},{"entry":[{},"GND","78"]},{"entry":[{},"nc","77"]},{"entry":[{},"DRAM_data[5]","76"]},{"entry":[{},"nc","75"]},{"entry":[{},"DRAM_data[6]","74"]},{"entry":[{},"VDD","73"]},{"entry":[{},"DRAM_data[7]","72"]},{"entry":[{},"nc","71"]},{"entry":[{},"DRAM_data[8]","70"]},{"entry":[{},"GND","69"]},{"entry":[{},"DRAM_data[9]","68"]},{"entry":[{},"nc","67"]},{"entry":[{},"DRAM_data[10]","66"]},{"entry":[{},"VDD","65"]},{"entry":[{},"nc","64"]},{"entry":[{},"DRAM_data[11]","63"]},{"entry":[{},"nc","62"]},{"entry":[{},"DRAM_data[12]","61"]},{"entry":[{},"GND","60"]},{"entry":[{},"DRAM_data[13]","59"]},{"entry":[{},"nc","58"]},{"entry":[{},"DRAM_data[14]","57"]},{"entry":[{},"VDD","56"]},{"entry":[{},"nc","55"]},{"entry":[{},"nc","54"]},{"entry":[{},"nc","53"]},{"entry":[{},"nc","52"]},{"entry":[{},"nc","51"]},{"entry":[{},"nc","50"]},{"entry":[{},"DRAM_data[15]","49"]},{"entry":[{},"nc","48"]},{"entry":[{},"DRAM_data[16]","47"]},{"entry":[{},"nc","46"]},{"entry":[{},"GND","45"]},{"entry":[{},"DRAM_data[17]","44"]},{"entry":[{},"nc","43"]},{"entry":[{},"DRAM_data[18]","42"]},{"entry":[{},"VDD","41"]},{"entry":[{},"nc","40"]},{"entry":[{},"DRAM_data[19]","39"]},{"entry":[{},"DRAM_data[20]","38"]},{"entry":[{},"nc","37"]},{"entry":[{},"GND","36"]},{"entry":[{},"DRAM_data[21]","35"]},{"entry":[{},"nc","34"]},{"entry":[{},"DRAM_data[22]","33"]},{"entry":[{},"VDD","32"]},{"entry":[{},"DRAM_data[23]","31"]},{"entry":[{},"DRAM_data[24]","30"]},{"entry":[{},"nc","29"]},{"entry":[{},"GND","28"]},{"entry":[{},"DRAM_data[25]","27"]},{"entry":[{},"nc","26"]},{"entry":[{},"DRAM_data[26]","25"]},{"entry":[{},"nc","24"]},{"entry":[{},"VDD","23"]},{"entry":[{},"DRAM_data[27]","22"]},{"entry":[{},"nc","21"]},{"entry":[{},"DRAM_data[28]","20"]},{"entry":[{},"DRAM_data[29]","19"]},{"entry":[{},"GND","18"]},{"entry":[{},"DRAM_data[30]","17"]},{"entry":[{},"nc","16"]},{"entry":[{},"DRAM_data[31]","15"]},{"entry":[{},"VDD","14"]},{"entry":[{},"nc","13"]},{"entry":[{},"{overscore (WE)}","12"]},{"entry":[{},"{overscore (RAS)}","11"]},{"entry":[{},"nc","10"]},{"entry":[{},"GND","9"]},{"entry":[{},"{overscore (CAS)}[0]","8"]},{"entry":[{},"nc","7"]},{"entry":[{},"{overscore (CAS)}[1]","6"]},{"entry":[{},"VDD","5"]},{"entry":[{},"{overscore (CAS)}[2]","4"]},{"entry":[{},"nc","3"]},{"entry":[{},"{overscore (CAS)}[3]","2"]},{"entry":[{},"nc","1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The pins labeled nc in Table A.9.3 are not currently used these pins should be left unconnected.","A.9.1.2 Vand GND Pins","As will be appreciated by one of ordinary skill in the art, all the Vand GND pins provided should be connected to the appropriate power supply. Correct device operation cannot be ensured unless all the Vand GND pins are correctly used.","A.9.1.3 Test Pin Connections for Normal Operation","Nine pins on the Spatial Decoder are reserved for internal test use.",{"@attributes":{"id":"p-0852","num":"0987"},"tables":{"@attributes":{"id":"TABLE-US-00049","num":"00049"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Default test pin connections"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Pin number","Connection"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Connect to GND for normal operation"]},{"entry":[{},{},"Connect to Vfor normal operation"]},{"entry":[{},{},"Leave Open Circuit for normal operation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"See section A.8.1","A.9.2 Spatial Decoder Memory Map",{"@attributes":{"id":"p-0854","num":"0989"},"tables":{"@attributes":{"id":"TABLE-US-00050","num":"00050"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Overview of Spatial Decoder memory map"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr. (hex)","Register Name","See table"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0x00 . . . 0x03","Interrupt service area","A.9.6"]},{"entry":["0x04 . . . 0x07","Input circuit registers","A.9.7"]},{"entry":["0x08 . . . 0x0F","Start code detector registers"]},{"entry":["0x10 . . . 0x15","Buffer start-up control registers","A.9.8"]},{"entry":["0x16 . . . 0x17","Not used"]},{"entry":["0x18 . . . 0x23","DRAM interface configuration registers","A.9.9"]},{"entry":["0x24 . . . 0x26","Buffer manager access and keyhole registers","A.9.10"]},{"entry":["0x27","Not used"]},{"entry":["0x28 . . . 0x2F","Huffman decoder registers","A.9.13"]},{"entry":["0x30 . . . 0x39","Inverse quantiser registers","A.9.14"]},{"entry":["0x3A . . . 0x3B","Not used"]},{"entry":["0x3C","Reserved"]},{"entry":["0x3D . . . 0x3F","Not used"]},{"entry":["0x40 . . . 0x7F","Test registers"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0855","num":"0990"},"tables":{"@attributes":{"id":"TABLE-US-00051","num":"00051"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interrupt service area registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},"Page"]},{"entry":["(hex)","num.","Register Name","references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x00","7","chip_event CED_EVENT_0",{}]},{"entry":[{},"6","not used"]},{"entry":[{},"5","illegal_length_count_event"]},{"entry":[{},{},"SCD_ILLEGAL_LENGTH_COUNT"]},{"entry":[{},"4","reserved may read 1 or 0"]},{"entry":[{},{},"SCD_JPEG_OVERLAPPING_START"]},{"entry":[{},"3","overlapping_start_event"]},{"entry":[{},{},"SCD_NON_ JPEG_OVERLAPPING"]},{"entry":[{},{},"START"]},{"entry":[{},"2","unrecognised_start_event"]},{"entry":[{},{},"SCD_UNRECOGNISED_START"]},{"entry":[{},"1","stop_after_picture_event"]},{"entry":[{},{},"SCD_STOP_AFTER_PICTURE"]},{"entry":[{},"0","non_aligned_start_event"]},{"entry":[{},{},"SCD_NON_ALIGNED_START"]},{"entry":["0x01","7","chip_mask CED_MASK_0"]},{"entry":[{},"6","not used"]},{"entry":[{},"5","illegal_length_count_mask"]},{"entry":[{},"4","reserved write 0 to this location"]},{"entry":[{},{},"SCD_JPEG_OVERLAPPING_START"]},{"entry":[{},"3","non_jpeg_overlapping_start_mask"]},{"entry":[{},"2","unrecognised_start_mask"]},{"entry":[{},"1","stop_after_picture_mask"]},{"entry":[{},"0","non_aligned_start_mask"]},{"entry":["0x02","7","idct_too_few_event IDCT_DEFF_NUM"]},{"entry":[{},"6","idct_too_many_event IDCT_SUPER_NUM"]},{"entry":[{},"5","accept_enable_event BS_STREAM_END"]},{"entry":[{},{},"EVENT"]},{"entry":[{},"4","target_met_event BS_TARGET_MET"]},{"entry":[{},{},"EVENT"]},{"entry":[{},"3","counter_flushed_too_early_event"]},{"entry":[{},{},"BS_FLUSH_BEFORE_TARGET_MET"]},{"entry":[{},{},"EVENT"]},{"entry":[{},"2","counter_flushed_event BS_ FLUSH"]},{"entry":[{},{},"EVENT"]},{"entry":[{},"1","parser_event DEMUX_EVENT"]},{"entry":[{},"0","huffman_event HUFFMAN_EVENT"]},{"entry":["0x03","7","idct_too_few_mask"]},{"entry":[{},"6","idct_too_many_mask"]},{"entry":[{},"5","accept_enable_mask"]},{"entry":[{},"4","target_met_mask"]},{"entry":[{},"3","counter_flushed_too_early_mask"]},{"entry":[{},"2","counter_flushed_mask"]},{"entry":[{},"1","parser_mask"]},{"entry":[{},"0","huffman_mask"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0856","num":"0991"},"tables":{"@attributes":{"id":"TABLE-US-00052","num":"00052"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start code detector and input circuit registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},"Page"]},{"entry":["(hex)","num.","Register Name","references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x04","7","coded_busy",{}]},{"entry":[{},"6","enable_mpi_input"]},{"entry":[{},"5","coded_extn"]},{"entry":[{},"4:0","not used"]},{"entry":["0x05","7:0","coded_data"]},{"entry":["0x06","7:0","not used"]},{"entry":["0x07","7:0","not used"]},{"entry":["0x08","7:1","not used"]},{"entry":[{},"0","start_code_detector_access"]},{"entry":[{},{},"also input_circuit_access"]},{"entry":[{},{},"CED_SCD_ACCESS"]},{"entry":["0x09","7:4","not used CED_SCD_CONTROL"]},{"entry":[{},"3","stop_after_picture"]},{"entry":[{},"2","discard_extension_data"]},{"entry":[{},"1","discard_user_data"]},{"entry":[{},"0","ignore_non_aligned"]},{"entry":["0x0A","7:5","not used CED_SCD_STATUS"]},{"entry":[{},"4","insert_sequence_start"]},{"entry":[{},"3","discard_all_data"]},{"entry":[{},"2:0","start_code_search"]},{"entry":["0x0B","7:0","Test register length_count"]},{"entry":["0x0C","7:0"]},{"entry":["0x0D","7:2","not used"]},{"entry":[{},"1:0","start_code_detector_coding_standard"]},{"entry":[{},{},"standard"]},{"entry":["0x0E","7:0","start_value"]},{"entry":["0x0F","7:4","not used"]},{"entry":[{},"3:0","picture_number"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0857","num":"0992"},"tables":{"@attributes":{"id":"TABLE-US-00053","num":"00053"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Buffer start-up registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},"Page"]},{"entry":["(hex)","num.","Register Name","references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x10","7:1","not used",{}]},{"entry":[{},"0","startup_access CED_BS_ACCESS"]},{"entry":["0x11","7:3","not used"]},{"entry":[{},"2:0","bit_count_prescale CED_BS_PRESCALE"]},{"entry":["0x12","7:0","bit_count_target CED_BS_TARGET"]},{"entry":["0x13","7:0","bit_count CED_BS_COUNT"]},{"entry":["0x14","7:1","not used"]},{"entry":[{},"0","offchip_queue CED_BS_QUEUE"]},{"entry":["0x15","7:1","not used"]},{"entry":[{},"0","enable_stream"]},{"entry":[{},{},"CED_BS_ENABLE_NXT_STM"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0858","num":"0993"},"tables":{"@attributes":{"id":"TABLE-US-00054","num":"00054"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM interface configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},"Page"]},{"entry":["(hex)","num.","Register Name","references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x18","7:5","not used",{}]},{"entry":[{},"4:0","page_start_length"]},{"entry":[{},{},"CED_IT_PAGE_START_LENGTH"]},{"entry":["0x19","7:4","not used"]},{"entry":[{},"3:0","read_cycle_length"]},{"entry":["0x1A","7:4","not used"]},{"entry":[{},"3:0","write_cycle_length"]},{"entry":["0x1B","7:4","not used"]},{"entry":[{},"3:0","refresh_cycle_length"]},{"entry":["0x1C","7:4","not used"]},{"entry":[{},"3:0","CAS_falling"]},{"entry":["0x1D","7:4","not used"]},{"entry":[{},"3:0","RAS_falling"]},{"entry":["0x1E","7:1","not used"]},{"entry":[{},"0","Interface_timing_access"]},{"entry":["0x1F","7:0","refresh_interval"]},{"entry":["0x20","7","not used"]},{"entry":[{},"6:4","DRAM_addr_strength[2:0]"]},{"entry":[{},"3:1","CAS_strength[2:0]"]},{"entry":[{},"0","RAS_strength[2]"]},{"entry":["0x21","7:6","RAS_strength[1:0]"]},{"entry":[{},"5:3","OEWE_strength[2:0]"]},{"entry":[{},"2:0","DRAM_data_strength[2:0]"]},{"entry":["0x22","7","ACCESS bit for pad strength etc.? not"]},{"entry":[{},{},"used CED_DRAM_CONFIGURE"]},{"entry":[{},"6","zero_buffers"]},{"entry":[{},"5","DRAM_enable"]},{"entry":[{},"4","no_refresh"]},{"entry":[{},"3:2","row_address_bits[1:0]"]},{"entry":[{},"1:0","DRAM_data_width[1:0]"]},{"entry":["0x23","7:0","Test registers CED_PLL_RES_CONFIG"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0859","num":"0994"},"tables":{"@attributes":{"id":"TABLE-US-00055","num":"00055"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Buffer manager access and keyhole registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},"Page"]},{"entry":[{},"(hex)","num.","Register Name","references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"0x24","7:1","not used",{}]},{"entry":[{},{},"0","buffer_manager_access"]},{"entry":[{},"0x25","7:6","not used"]},{"entry":[{},{},"5:0","buffer_manager_keyhole_address"]},{"entry":[{},"0x26","7:0","buffer_manager_keyhole_data"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0860","num":"0995"},"tables":{"@attributes":{"id":"TABLE-US-00056","num":"00056"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Buffer manager extended address space"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]},{"entry":[{},"0x00","7:0","not used",{}]},{"entry":[{},"0x01","7:2"]},{"entry":[{},{},"1:0","cdb_base"]},{"entry":[{},"0x02","7:0"]},{"entry":[{},"0x03","7:0"]},{"entry":[{},"0x04","7:0","not used"]},{"entry":[{},"0x05","7:2"]},{"entry":[{},{},"1:0","cdb_length"]},{"entry":[{},"0x06","7:0"]},{"entry":[{},"0x07","7:0"]},{"entry":[{},"0x08","7:0","not used"]},{"entry":[{},"0x09","7:0","cdb_read"]},{"entry":[{},"0x0A","7:0"]},{"entry":[{},"0x0B","7:0"]},{"entry":[{},"0x0C","7:0","not used"]},{"entry":[{},"0x0D","7:0","cdb_number"]},{"entry":[{},"0x0E","7:0"]},{"entry":[{},"0x0F","7:0"]},{"entry":[{},"0x10","7:0","not used"]},{"entry":[{},"0x11","7:0","tb_base"]},{"entry":[{},"0x12","7:0"]},{"entry":[{},"0x13","7:0"]},{"entry":[{},"0x14","7:0","not used"]},{"entry":[{},"0x15","7:0","tb_length"]},{"entry":[{},"0x16","7:0"]},{"entry":[{},"0x17","7:0"]},{"entry":[{},"0x18","7:0","not used"]},{"entry":[{},"0x19","7:0","tb_read"]},{"entry":[{},"0x1A","7:0"]},{"entry":[{},"0x1B","7:0"]},{"entry":[{},"0x1C","7.0","not used"]},{"entry":[{},"0x1D","7:0","tb_number"]},{"entry":[{},"0x1E","7:0"]},{"entry":[{},"0x1F","7:0"]},{"entry":[{},"0x20","7:0","not used"]},{"entry":[{},"0x21","7:0","buffer_limit"]},{"entry":[{},"0x22","7:0"]},{"entry":[{},"0x23","7:0"]},{"entry":[{},"0x24","7:4","not used"]},{"entry":[{},{},"3","cdb_full"]},{"entry":[{},{},"2","cdb_empty"]},{"entry":[{},{},"1","tb_full"]},{"entry":[{},{},"0","tb_empty"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0861","num":"0996"},"tables":{"@attributes":{"id":"TABLE-US-00057","num":"00057"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Video demux registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},{}]},{"entry":["(hex)","num.","Register Name","Page references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x28","7","demux_access CED_H_CTRL[7]",{}]},{"entry":[{},"6:4","huffman_error_code[2:0]"]},{"entry":[{},{},"CED_H_CTRL(6:4)"]},{"entry":[{},"3:0","private huffman control bits[3]"]},{"entry":[{},{},"selects special CBP, [2] selects"]},{"entry":[{},{},"4\/8 bit fixed length CBP"]},{"entry":["0x29","7:0","parser_error_code"]},{"entry":[{},{},"CED_H_DMUX_ERR"]},{"entry":["0x2A","7:4","not used"]},{"entry":[{},"3:0","demux_keyhole_address"]},{"entry":["0x2B","7:0","CED_H_KEYHOLE_ADDR"]},{"entry":["0x2C","7:0","demux_keyhole_data"]},{"entry":[{},{},"CED_H_KEYHOLE"]},{"entry":["0x2D","7","dummy_last_picture"]},{"entry":[{},{},"CED_H_ALU_REG0."]},{"entry":[{},{},"r_dummy_last_frame_bit"]},{"entry":[{},"6","field_info CED_H_ALU_REG0."]},{"entry":[{},{},"t_field_info_bit"]},{"entry":[{},"5:t","not used"]},{"entry":[{},"0","continue CED_H_ALU_REG0."]},{"entry":[{},{},"t_continue_bit"]},{"entry":["0x2E","7:0","rom_revision CED_H_ALU_REG1"]},{"entry":["0x2F","7:0","private register"]},{"entry":["0x2F","7","CED_H_TRACE_EVENT"]},{"entry":[{},{},"write 1 to single step. one will be read"]},{"entry":[{},{},"when the step has been completed"]},{"entry":[{},"6","CED_H_TRACE_MASK"]},{"entry":[{},{},"set to one to enter single"]},{"entry":[{},{},"step mode"]},{"entry":[{},"5","CED_H_TRACE_RST"]},{"entry":[{},{},"partial reset when sequenced"]},{"entry":[{},{},"1.0"]},{"entry":[{},"4:0","not used"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0862","num":"0997"},"tables":{"@attributes":{"id":"TABLE-US-00058","num":"00058"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Video demux extended address space"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},{}]},{"entry":["(hex)","num.","Register Name","Page references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0x00","7:0","not used",{}]},{"entry":"0.0F"},{"entry":["0x10","7:0","horiz_pels r_horiz_pels","124, 133"]},{"entry":["0x11","7:0"]},{"entry":["0x12","7:0","vert_pels r_vert_pels","124, 133"]},{"entry":["0x13","7:0"]},{"entry":["0x14","7:2","not used"]},{"entry":[{},"1:0","buffer_sizer_buffer_size","127"]},{"entry":["0x15","7:0"]},{"entry":["0x16","7:4","not used"]},{"entry":[{},"3:0","pel_aspect r_pel_aspect","127"]},{"entry":["0x17","7:2","not used"]},{"entry":[{},"1:0","bit_rate r_bit_rate","127"]},{"entry":["0x18","7:0"]},{"entry":["0x19","7:0"]},{"entry":["0x1A","7:4","not used"]},{"entry":[{},"3:0","pic_rate r_pic_rate","127"]},{"entry":["0x1B","7:1","not used"]},{"entry":[{},"0.00","constrained r_constrained","127"]},{"entry":["0x1C","7:0","picture_type","127"]},{"entry":["0x1D","7:0","h261_pic_type","127"]},{"entry":["0X1E","7:2","not used"]},{"entry":[{},"1:0","broken_closed","127"]},{"entry":["0x1F","7:5","not used"]},{"entry":[{},"4:0","prediction_mode","127"]},{"entry":["0x20","7:0","vbv_delay","127"]},{"entry":["0x21","7:0"]},{"entry":["0x22","7:0","private register MPEG full_pel_fwd,"]},{"entry":[{},{},"JPEG pending_frame_change"]},{"entry":["0x23","7:0","private register MPEG full_pel_bwd,"]},{"entry":[{},{},"JPEG restart_index"]},{"entry":["0x24","7:0","private register horiz_mb_copy"]},{"entry":["0x25","7:0","pic_number","127"]},{"entry":["0x26","7:1","not used"]},{"entry":[{},"1:0","max_h","124, 133"]},{"entry":["0x27","7:1","not used"]},{"entry":[{},"1:0","max_v","124, 133"]},{"entry":["0x28","7:0","private register scratch1"]},{"entry":["0x29","7:0","private register scratch2"]},{"entry":["0x2A","7:0","private register scratch3"]},{"entry":["0x2B","7:0","nf MPEG unused 1, H261 ingob","124"]},{"entry":["0x2C","7:0","private register MPEG first_group,"]},{"entry":[{},{},"JPEG first-scan"]},{"entry":["0x2D","7:0","private register MPEG in_picture"]},{"entry":["0x2E","7","dummy_last_picture","122"]},{"entry":[{},{},"r_rom_control"]},{"entry":[{},"6","field_info","122"]},{"entry":[{},"5:1","not used"]},{"entry":[{},"0.00","continue","122"]},{"entry":["0x2F","7:0","rom_revision","122"]},{"entry":["0x30","7:2","not used"]},{"entry":[{},"1:0","dc_huff_0","126"]},{"entry":["0x31","7:2","not used"]},{"entry":[{},"1:0","dc_huff_1","126"]},{"entry":["0x32","7:2","not used"]},{"entry":[{},"1:0","dc_huff_2","126"]},{"entry":["0x33","7:2","not used"]},{"entry":[{},"1:0","dc_huff_3","126"]},{"entry":["0x34","7:2","not used"]},{"entry":[{},"1:0","ac_huff_0","126"]},{"entry":["0x35","7:2","not used"]},{"entry":[{},"1:0","ac_huff_1","126"]},{"entry":["0x36","7:2","not used"]},{"entry":[{},"1:0","ac_huff_2","126"]},{"entry":["0x37","7:2","not used"]},{"entry":[{},"1:0","ac_huff_3","126"]},{"entry":["0x38","7:2","not used"]},{"entry":[{},"1:0","tq_0 r_tq_0","124"]},{"entry":["0x39","7:2","not used"]},{"entry":[{},"1:0","tq_1 r_tq_1","124"]},{"entry":["0x3A","7:2","not used"]},{"entry":[{},"1:0","tq_2 r_tq_2","124"]},{"entry":["0x3B","7:2","not used"]},{"entry":[{},"1:0","tq_3 r_tq_3","124"]},{"entry":["0x3C","7:0","component_name_0 r_c_0","124"]},{"entry":["0x3D","7:0","component_name_1 r_c_1","124"]},{"entry":["0x3E","7:0","_name_2 r_c_2","124"]},{"entry":["0x3F","7:0","component_name_3 r_c_3","124"]},{"entry":["0x40","7:0","private registers"]},{"entry":"0x63"},{"entry":["0x40","7:0","r_dc_pred_0"]},{"entry":["0x41","7:0"]},{"entry":["0x42","7:0","r_dc_pred_1"]},{"entry":["0x43","7:0"]},{"entry":["0x44","7:0","r_dc_pred_2"]},{"entry":["0x45","7:0"]},{"entry":["0x46","7:0","r_dc_pred_3"]},{"entry":["0x47","7:0"]},{"entry":["0x48","7:0","not used"]},{"entry":"0x4F"},{"entry":["0x50","7:0","r_prev_mhf"]},{"entry":["0x51","7:0"]},{"entry":["0x52","7:0","r_prev_mvf"]},{"entry":["0x53","7:0"]},{"entry":["0x54","7:0","r_prev_mhb"]},{"entry":["0x55","7:0"]},{"entry":["0x56","7:0","r_prev_mvb"]},{"entry":["0x57","7:0"]},{"entry":["0x58","7:0","not used"]},{"entry":["0x60","7:0","r_horiz_mbcnt"]},{"entry":["0x61","7:0"]},{"entry":["0x62","7:0","r_vert_mbcnt"]},{"entry":["0x63","7:0"]},{"entry":["0x64","7:0","horiz_macroblocks r_horiz_mbs"]},{"entry":["0x65","7:0"]},{"entry":["0x66","7:0","vert_macroblocks r_vert_mbs"]},{"entry":["0x67","7:0"]},{"entry":["0x68","7:0","private register r_restart_cnt"]},{"entry":["0x69","7:0"]},{"entry":["0x6A","7:0","restart_Interval r_start_int"]},{"entry":["0x6B","7:0"]},{"entry":["0x6C","7:0","private register r_blk_h_cnt"]},{"entry":["0x6D","7:0","private register r_blk_v-cnt"]},{"entry":["0x6E","7:0","private register r_compid"]},{"entry":["0x6F","7:0","max_component_id r_max_compid"]},{"entry":["0x70","7:0","coding_standard r_coding_std"]},{"entry":["0x71","7:0","private register r_pattern"]},{"entry":["0x72","7:0","private register r_fwd_r_size"]},{"entry":["0x73","7:0","private register r_bwd_r_size"]},{"entry":["0x74","7:0","not used"]},{"entry":"0x77"},{"entry":["0x78","7.2","not used"]},{"entry":[{},"1:0","blocks_h_0 r_blk_h_0"]},{"entry":["0x79","7:2","not used"]},{"entry":[{},"1:0","blocks_h_1 r_blk_h_1"]},{"entry":["0x7A","7:2","not used"]},{"entry":[{},"1:0","blocks_h_2 r_blk_h_2"]},{"entry":["0x7B","7:2","not used"]},{"entry":[{},"1:0","blocks_h_ 3 r_blk_h_3"]},{"entry":["0x7C","7:2","not used"]},{"entry":[{},"1:0","blocks_v_0 r_blk_v_0"]},{"entry":["0x7D","7:2","not used"]},{"entry":[{},"1:0","blocks_v_1 r_blk_v_1"]},{"entry":["0x7E","7:2","not used"]},{"entry":[{},"1:0","blocks_v_2 r_blk_v_2"]},{"entry":["0x7F","7:2","not used"]},{"entry":[{},"1:0","blocks_v_3 r_blk_v_3"]},{"entry":["0x7F","7:0","not used"]},{"entry":["0x100","7:0","dc_bits_0[15:0]"]},{"entry":[{},{},"CED_H_KEY_DC_CPB0"]},{"entry":["0x110","7:0","dc_bits_1[15:0]"]},{"entry":[{},{},"CED_H_KEY_DC_CPB1"]},{"entry":["0x120","7:0","not used"]},{"entry":["0x140","7:0","ac_bits_0[15:0]"]},{"entry":[{},{},"CED_H_KEY_AC_CPB0"]},{"entry":["0x150","7:0","ac_bits_1[15:0]"]},{"entry":["0x15F",{},"CED_H_KEY_AC_CP81"]},{"entry":["0x160","7:0","not used"]},{"entry":"0x17F"},{"entry":["0x180","7:0","dc_zssss_0 "]},{"entry":[{},{},"CED_H_KEY_ZSSSS_INDEX0"]},{"entry":["0x181","7:0","dc_zssss_1 "]},{"entry":[{},{},"CED_H_KEY_ZSSS_INDEX1"]},{"entry":["0x182","7:0","not used"]},{"entry":"0x187"},{"entry":["0x188","7:0","ac_eob_0"]},{"entry":[{},{},"CED_H_KEY_EOB_INDEX0"]},{"entry":["0x189","7:0","ac_eob_1"]},{"entry":[{},{},"CED_H_KEY_EOB_INDEX1"]},{"entry":["0x18A","7:0","not used"]},{"entry":"0x18B"},{"entry":["0x18C","7:0","ac_zrt_0"]},{"entry":[{},{},"CED_H_KEY_ZRL_INDEX0"]},{"entry":["0x18D","7:0","ac_zrt_1"]},{"entry":[{},{},"CED_H_KEY_ZRL_INDEX1"]},{"entry":["0x18E","7:0","not used"]},{"entry":"0x1FF"},{"entry":["0x200","7:0","ac_huffval_0[161:0]"]},{"entry":[{},{},"CED_H_KEY_AC_ITOD_0"]},{"entry":"0x2AF"},{"entry":["0x2B0","7:0","dc_huffval_0[11:0]"]},{"entry":[{},{},"CED_H_KEY_DC_ITOD_0"]},{"entry":"0x2BF"},{"entry":["0x2C0","7:0","not used"]},{"entry":"0x2FF"},{"entry":["0x300","7:0","dc_huffval_1[161:0] "]},{"entry":[{},{},"CED_H_KEY_AC_ITOD_1"]},{"entry":"0x3AF"},{"entry":["0x3B0","7:0","ac_huffval_1[11:0]"]},{"entry":[{},{},"CED_H_KEY_DC_ITOD_1"]},{"entry":"0x38F"},{"entry":["0x3C0","7:0","not used"]},{"entry":"0x7FF"},{"entry":["0x800","7:0","private registers"]},{"entry":"0xACF"},{"entry":["0x800","7:0","CED_KEY_TCOEFF_CPB"]},{"entry":"0x80F"},{"entry":["0x810","7:0","CED_KEY_CBP_CPB"]},{"entry":"0x81F"},{"entry":["0x820","7:0","CED_KEY_MBA_CPB"]},{"entry":"0x82F"},{"entry":["0x830","7:0","CED_KEY_MVD_CPB"]},{"entry":"0x83F"},{"entry":["0x840","7:0","CED_KEY_MTYPE_I_CPB"]},{"entry":"0x84F"},{"entry":["0x850","7:0","CED_KEY_MTYPE_P_CPB"]},{"entry":"0x85F"},{"entry":["0x860","7:0","CED_KEY_MTYPE_B_CPB"]},{"entry":"0x86F"},{"entry":["0x870","7.0","CED_KEY_MTYPE_H.251_CPB"]},{"entry":"0x88F"},{"entry":["0x880","7:0","not used"]},{"entry":"0x900"},{"entry":["0x901","7:0","CED_KEY_HDSTROM_0"]},{"entry":["0x902","7:0","CED_KEY_HDSTROM_1"]},{"entry":["0x903","7:0","CED_KEY_HDSTROM_2"]},{"entry":"0x90F"},{"entry":["0x910","7.0","not used"]},{"entry":"0xABF"},{"entry":["0xAC0","7:0","CED_KEY_DMX_WORD_0"]},{"entry":["0xAC1","7:0","CED_KEY_DMX_WORD_1"]},{"entry":["0xAC2","7:0","CED_KEY_DMX_WORD_2"]},{"entry":["0xAC3","7:0","CED_KEY_DMX_WORD_3"]},{"entry":["0xAC4","7:0","CED_KEY_DMX_WORD_4"]},{"entry":["0xAC5","7:0","CED_KEY_DMX_WORD_5"]},{"entry":["0xAC6","7:0","CED_KEY_DMX_WORD_6"]},{"entry":["0xAC7","7:0","CED_KEY_DMX_WORD_7"]},{"entry":["0xAC8","7:0","CED_KEY_DMX_WORD_8"]},{"entry":["0xAC9","7:0","CED_KEY_DMX_WORD_9"]},{"entry":["0xACA","7:0","not used"]},{"entry":"0xACB"},{"entry":["0xACC","7:0","CED_KEY_DMX_AINCR"]},{"entry":["0xACD","7:0"]},{"entry":["0xACE","7:0","CED_KEY_DMX_CC"]},{"entry":["0xACF","7:0"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0863","num":"0998"},"tables":{"@attributes":{"id":"TABLE-US-00059","num":"00059"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.14"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Inverse quantiser registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.","Bit",{},"Page"]},{"entry":["(hex)","num.","Register Name","references"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":[{},"7:1","not used",{}]},{"entry":["0x30","7:1","not used"]},{"entry":[{},"0","Iq_access"]},{"entry":["0x31","7:2","not used"]},{"entry":[{},"1:0","Iq_coding_standard"]},{"entry":["0x32","7:5","not used"]},{"entry":[{},"4:0","test register iq_scale"]},{"entry":["0x33","7:2","not used"]},{"entry":[{},"1:0","test register iq_component"]},{"entry":["0x34","7:2","not used"]},{"entry":[{},"1:0","test register"]},{"entry":[{},{},"inverse_quantiser_prediction_mode"]},{"entry":["0x35","7:0","test register jpeg_indirection"]},{"entry":["0x36","7:2","not used"]},{"entry":[{},"1:0","test register mpeg_indirection"]},{"entry":["0x37","7:0","not used"]},{"entry":["0x38","7:0","iq_table_keyhole_address"]},{"entry":["0x39","7:0","iq_table_keyhole_data"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0864","num":"0999"},"tables":{"@attributes":{"id":"TABLE-US-00060","num":"00060"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.9.15"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Iq table extended address space"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr.",{},{}]},{"entry":["(hex)","Register Name","Page references"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0x00:0x3F","JPEG inverse quantisation table 0",{}]},{"entry":[{},"MPEG default intra table"]},{"entry":["0x40:0x7F","JPEG inverse quantisation table 1"]},{"entry":[{},"MPEG default non-intra table"]},{"entry":["0x80:0x5F","JPEG inverse quantisation table 2"]},{"entry":[{},"MPEG down-loaded intra table"]},{"entry":["0xC0.0xFF","JPEG inverse quantisation table 3"]},{"entry":[{},"MPEG down-loaded non-intra table"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0865","num":"1000"},"tables":{"@attributes":{"id":"TABLE-US-00061","num":"00061"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.10.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Coded data port signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["coded_clock","Input","A clock operating at up to 30 MHz"]},{"entry":[{},{},"controlling the operation of the"]},{"entry":[{},{},"input circuit."]},{"entry":["coded_data[7:0]","Input","The standard 11 wires required to"]},{"entry":[{},{},"implement a Token Port transferring"]},{"entry":["coded_extn","Input","8 bit data values. See section"]},{"entry":["coded_valid","Input","A.4 for an electrical description of this"]},{"entry":["coded_accept","Output","interface."]},{"entry":[{},{},"Circuits off-chip must package the coded"]},{"entry":[{},{},"data into Tokens."]},{"entry":["byte_mode","Input","When high this signal indicates that"]},{"entry":[{},{},"informaton is to be transferred across the"]},{"entry":[{},{},"coded data port in byte mode rather than"]},{"entry":[{},{},"Token mode."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The coded data port in accordance with the present invention, can be operated in two modes: Token mode and byte mode.","A.10.1.1 Token Mode","In the present invention, if byte_mode is low, then the coded data port operates as a Token Port in the normal way and accepts Tokens under the control of coded_valid and coded_accept. See section A.4 for details of the electrical operation of this interface.","The signal byte_mode is sampled at the same time as data [:], coded_extn and coded_valid, i.e., on the rising edge of coded_clock.","A.10.1.2 Byte Mode","If, however, byte_mode is high, then a byte of data is transferred on data[:] under the control of the two wire interface control signals coded_valid and coded_accept. In this case, coded_extn is ignored. The bytes are subsequently assembled on-chip into DATA Tokens until the input mode is changed.\n\n","Tokens can be supplied to the Spatial decoder via the MPI by accessing the coded data input registers.","A.10.2.1 Writing Tokens via the MPI","The coded data registers of the present invention are grouped into two bytes in the memory map to allow for are in one location and the control registers, coded_busy, enable_mpi_input and coded_extn are in a second location. (See Table A.9.7)","When configured for Token input via the MPI, the current Token is extended with the current value of coded_extn each time a value is written into coded_data[:]. Software is responsible for setting coded_extn to 0 before the last word of any Token is written to coded_data[:].","For example, a DATA Token is started by writing 1 into coded_extn and then 0\u00d704 into coded_data[:]. The start of this new DATA Token then passes into the Spatial Decoder for processing.","Each time a new 8 bit value is written to coded_data[:], the current Token is extended. Coded_extn need only be accessed again when terminating the current Token, e.g. to introduce another Token. The last word of the current Token is indicated by writing 0 to coded_extn followed by writing the last word of the current Token into coded_data[:].",{"@attributes":{"id":"p-0875","num":"1013"},"tables":{"@attributes":{"id":"TABLE-US-00062","num":"00062"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.10.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Coded data input registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size\\","Reset",{}]},{"entry":["Register name","Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["coded_extn","1","x","Tokens can be supplied to the Spatial"]},{"entry":[{},"rw",{},"Decoder via the MPI by writing to"]},{"entry":["coded_data[7:0]","8","x","these registers."]},{"entry":[{},"w"]},{"entry":["coded_busy","1","1","The state of this registers indicates"]},{"entry":[{},{},{},"if the Spatial Decoder is able to"]},{"entry":[{},{},{},"accept Tokens written into"]},{"entry":[{},{},{},"coded_data[7:0]"]},{"entry":[{},"r",{},"The value 1 indicates that the"]},{"entry":[{},{},{},"interface is busy and unable to"]},{"entry":[{},{},{},"accept data Behaviour is"]},{"entry":[{},{},{},"undefined if the user tries"]},{"entry":[{},{},{},"to write to coded_data [7:0] when"]},{"entry":[{},{},{},"coded_busy = 1."]},{"entry":["enable_mpi-input","1","0","The value in this function enable"]},{"entry":[{},"rw",{},"registers controls whether coded data"]},{"entry":[{},{},{},"input to the Spatial Decoder is via"]},{"entry":[{},{},{},"the coded data port(0) or via"]},{"entry":[{},{},{},"the MPI (1)."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Each time before writing to coded_data[:], coded_busy should be inspected to see if the interface is ready to accept more data.","A.10.3 Switching Between Input Modes","Provided suitable precautions are observed, it is possible to dynamically change the data input mode. In general, the transfer of a Token via any one route should be completed before switching modes.",{"@attributes":{"id":"p-0878","num":"1016"},"tables":{"@attributes":{"id":"TABLE-US-00063","num":"00063"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.10.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Switching data input modes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Previous Mode","Next Mode","Behaviour"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Byte","Token","The on-chip circuitry will use the last"]},{"entry":[{},"MPI input","byte supplied in byte mode as the last"]},{"entry":[{},{},"byte of the DATA Token that it was "]},{"entry":[{},{},"constructing (i.e the extn bit will be"]},{"entry":[{},{},"set to 0). Before accepting the next token."]},{"entry":["Token","Byte","The off-chip circuitry supplying"]},{"entry":[{},{},"the Token in Token mode is responsible"]},{"entry":[{},{},"for completing the Token (ie with"]},{"entry":[{},{},"the extn bit of the last byte of"]},{"entry":[{},{},"information set to 0) before"]},{"entry":[{},{},"selecting byte mode"]},{"entry":[{},"MPI input","Access to input via the MPI will not"]},{"entry":[{},{},"be granted (i.e  coded_busy will"]},{"entry":[{},{},"remain set to 1) until the off-chip  circuitry"]},{"entry":[{},{},"supplying the Token in Token mode."]},{"entry":[{},{},"has completed the Token (i.e. with the"]},{"entry":[{},{},"extn bit of the last byte of information"]},{"entry":[{},{},"set to 0)."]},{"entry":["MPI input","Byte","The control software must have completed"]},{"entry":[{},{},"the Token (i.e with the extn bit of the"]},{"entry":[{},"MPI input","last byte of information set to 0)"]},{"entry":[{},{},"before enable_mpi_input is set to 0."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The MPI register bit, coded busy, and the signal, coded_accept, indicate on which interface the Spatial decoder is willing to accept data. Correct observation of these signals ensures that no data is lost.","A.10.4 Rate of Accepting Coded Data","In the present invention, the input circuit passes Tokens to the Start Code Detector (see section A.11). The Start code Detector analyses data in the DATA Tokens bit serially. The Detector's normal rate of processing is one bit per clock cycle (of coded_clock). Accordingly, it will typically decode a byte of coded data every 8 cycles of coded_clock. However, extra processing cycles are occasionally required, e.g., when a non-DATA Token is supplied or when a start code is encountered in the coded data. When such an event occurs, the Start Code Detector will, for a short time, be unable to accept more information.","After the Start Code Detector, data passes into a first logical coded data buffer. If this buffer fills, then the Start Code Detector will be unable to accept more information.","Consequently, no more coded data (or other Tokens) will be accepted on either the coded data port, or via the MPI, while the Start Code Detector is unable to accept more information. This will be indicated by the state of the signal coded_accept and the register coded_busy.","By using coded_accept and\/or coded_busy, the user is guaranteed that no coded information will be lost. However, as will be appreciated by one of ordinary skill in the art, the system must either be able to buffer newly arriving coded data (or stop new data for arriving) if the Spatial decoder is unable to accept data.","A.10.5 Coded Data Clock","In accordance with the present invention, the coded data port, the input circuit and other functions in the Spatial Decoder are controlled by coded_clock. Furthermore, this clock can be asynchronous to the main decoder_clock. Data transfer is synchronized to decoder_clock on-chip.","Section A.11 Start Code Detector","A.11.1 Start Codes","As is well known in the art, MPEG and H.261 coded video streams contain identifiable bit patterns called start codes. A similar function is served in JPEG by marker codes. Start\/marker codes identify significant parts of the syntax of the coded data stream. The analysis of start\/marker codes performed by the Start Code Detector is the first stage in parsing the coded data. The Start Code Detector is the first block on the Spatial Decoder following the input circuit.","The start\/marker code patterns are designed so that they can be identified without decoding the entire bitstream. Thus, they can be used in accordance with the present invention, to help with error recovery and decoder start-up. The Start Code Detector provides facilities to detect errors in the coded data construction and to assist the start-up of the decoder.","A.11.2 Start Code Detector Registers","As previously discussed, many of the Start Code Detector registers are in constant use by the Start Code Detector. So, accessing these registers will be unreliable if the Start Code Detector is processing data. The user is responsible for ensuring that the Start Code Detector is halted before accessing its registers.","The register start_code_detector_access is used to halt the Start Code Detector and so allow access to its registers. The Start Code Detector will halt after it generates an interrupt.","There are further constraints on when the start code search and discard all data modes can be initiated. These are described in A.11.8 and A.11.5.1.",{"@attributes":{"id":"p-0890","num":"1028"},"tables":{"@attributes":{"id":"TABLE-US-00064","num":"00064"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"343pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start code detector Registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["start_code_detector_access","1","0","Writing 1 to this register requests that the start"]},{"entry":[{},{},{},"code detector stop to allow access to its registers."]},{"entry":[{},"rw",{},"The user should wait until the value 1 can be read"]},{"entry":[{},{},{},"from this register indicating that operation has"]},{"entry":[{},{},{},"stopped and access is possible."]},{"entry":["illegal_length_count_event","1","0","An illegal length count event will occur if"]},{"entry":[{},{},{},"while decoding JPEG data, a length count"]},{"entry":[{},{},{},"field is found carrying a value less than 2."]},{"entry":[{},"rw",{},"This should only occur as the result of an"]},{"entry":["illegal_length_count_mask","1","0","error in the JPEG data."]},{"entry":[{},"rw",{},"If the mask register is set to 1 then an"]},{"entry":[{},{},{},"interrupt can be generated and the start"]},{"entry":[{},{},{},"code detector will stop. Behaviour"]},{"entry":[{},{},{},"following an error is not predictable if this"]},{"entry":[{},{},{},"error is suppressed (mask register set to"]},{"entry":[{},{},{},"0). See A.11.4.1."]},{"entry":["jpeg_overlapping_start_event","1","0","If the coding standard is JPEG and the"]},{"entry":[{},"rw",{},"sequence 0xFF 0xFF is found while"]},{"entry":["jpeg_overlapping_start_mask","1","0","looking for a marker code this event will"]},{"entry":[{},"rw",{},"occur. This sequence is a legal stuffing"]},{"entry":[{},{},{},"sequence. If the mask register is set to 1"]},{"entry":[{},{},{},"then an interrupt can be generated and the"]},{"entry":[{},{},{},"start code detector will stop. See"]},{"entry":[{},{},{},"A.11.4.2."]},{"entry":["overlapping_start_event","1","0","If the coding standard is MPEG or H.261"]},{"entry":[{},"rw",{},"and an overlapping start code is found"]},{"entry":[{},{},{},"while looking for a start code this event will"]},{"entry":["Overlapping_start_mask","1","0","occur. If the mask register is set to 1 then"]},{"entry":[{},"rw",{},"an interrupt can be generated and the start"]},{"entry":[{},{},{},"code detector will stop."]},{"entry":[{},{},{},"See A.11.4.2."]},{"entry":["unrecognised_start_event","1","0","If an unrecognised start code is"]},{"entry":[{},"rw",{},"encountered this event will occur. If the"]},{"entry":[{},{},{},"mask register is set to 1 then an interrupt"]},{"entry":["unrecognised_start_mask","1","0","can be generated and the start code"]},{"entry":[{},"rw",{},"detector will stop."]},{"entry":["start_value","8","x","The start code value read from the"]},{"entry":[{},{},{},"bitstream is available in the register"]},{"entry":[{},{},{},"start_value while the start code detector"]},{"entry":[{},{},{},"is halted. See A.11.4.3"]},{"entry":[{},"ro",{},"During normal operation start_value"]},{"entry":[{},{},{},"contains the value of the most recently"]},{"entry":[{},{},{},"decoded start\/marker code."]},{"entry":[{},{},{},"Only the 4 LSBs of start_value are used"]},{"entry":[{},{},{},"during H.261 operation. The 4 MSBs will"]},{"entry":[{},{},{},"be zero."]},{"entry":["stop_after_picture_event","1","0","If the register stop_after_picture is set to"]},{"entry":[{},"rw",{},"1 then a stop after picture event will be"]},{"entry":["stop_after_picture_mask","1","0","generated after the end of a picture has"]},{"entry":[{},"rw",{},"passed through the start code detector."]},{"entry":["stop_after_picture","1","0","If the mask register is set to 1 then an"]},{"entry":[{},"rw",{},"interrupt can be generated and the start"]},{"entry":[{},{},{},"code detector will stop. See A.11.5.1"]},{"entry":[{},{},{},"stop_after_picture does not reset to 0"]},{"entry":[{},{},{},"after the end of a picture has been"]},{"entry":[{},{},{},"detected so should be cleared directly."]},{"entry":["non_aligned_start_event","1","0","When ignore_non_aligned is set to 1, start"]},{"entry":[{},"rw",{},"codes that are not byte aligned are ignored"]},{"entry":[{},{},{},"(treated as normal data)"]},{"entry":[{},{},{},"When ignore_non_aligned is set to 0, H.261"]},{"entry":[{},{},{},"and MPEG start codes will be detected"]},{"entry":["non_aligned_start_mask","1","0","regardless of byte alignment and the non-"]},{"entry":[{},"rw",{},"aligned start event will be generated. If the"]},{"entry":[{},{},{},"mask register is set to 1 then the event will"]},{"entry":[{},{},{},"cause an interrupt and the start code"]},{"entry":[{},{},{},"detector will stop. See A.11.6."]},{"entry":["Ignore_non_aligned","1","0","If the coding standard is configured as"]},{"entry":[{},"rw",{},"JPEG Ignore_non_aligned is ignored and"]},{"entry":[{},{},{},"the non-aligned start event will never be"]},{"entry":[{},{},{},"generated."]},{"entry":["discard_extension_data","1","0","When these registers are set to 1 extension"]},{"entry":[{},"rw",{},"or user data that cannot be decoded by the"]},{"entry":["discard_user_data","1","0","Spatial Decoder is discarded by the start"]},{"entry":[{},"rw",{},"code detector. See A.11.3.3."]},{"entry":["discard_all_data","1","0","When set to 1 all data and Tokens are"]},{"entry":[{},"rw",{},"discarded by the start code detector. This"]},{"entry":[{},{},{},"continues until a FLUSH Token is supplied"]},{"entry":[{},{},{},"or the register is set to 0 directly."]},{"entry":[{},{},{},"The FLUSH Token that resets this register"]},{"entry":[{},{},{},"is discarded and not output by the start"]},{"entry":[{},{},{},"code detector. See A.11.5.1."]},{"entry":["Insert_sequence_start","1",{},"See A.11.7"]},{"entry":[{},"rw"]},{"entry":["start_code_search","3","5","When this register is set to 0 the start"]},{"entry":[{},"rw",{},"code detector operates normally. When"]},{"entry":[{},{},{},"set to a higher value the start code"]},{"entry":[{},{},{},"detector discards data until the specified"]},{"entry":[{},{},{},"type of start code is detected. When the"]},{"entry":[{},{},{},"specified start code is detected the"]},{"entry":[{},{},{},"register is set to 0 and normal operation"]},{"entry":[{},{},{},"follows. See A.11.8."]},{"entry":["start_code_detector_coding_standard","2","0","This register configures the coding"]},{"entry":[{},"rw",{},"standard used by the start code detector."]},{"entry":[{},{},{},"The register can be loaded directly or by"]},{"entry":[{},{},{},"using a CODING_STANDARD Token."]},{"entry":[{},{},{},"Whenever the start code detector"]},{"entry":[{},{},{},"generates a CODING_STANDARD"]},{"entry":[{},{},{},"Token (see A.11.7.4 on page 109) it"]},{"entry":[{},{},{},"carries its current coding standard"]},{"entry":[{},{},{},"configuration. This Token will then"]},{"entry":[{},{},{},"configure the coding standard used by all"]},{"entry":[{},{},{},"other parts of the decoder chip-set. See"]},{"entry":[{},{},{},"A.21.1 on page 180 and A.11.7."]},{"entry":["picture_number","4","0","Each time the start coded detector"]},{"entry":[{},"rw",{},"detects a picture start code in the data"]},{"entry":[{},{},{},"stream (or the H.261 or JPEG"]},{"entry":[{},{},{},"equivalent) a"]},{"entry":[{},{},{},"PICTURE_START Token is generated"]},{"entry":[{},{},{},"which carries the current value of"]},{"entry":[{},{},{},"picture_number. This register then"]},{"entry":[{},{},{},"increments."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0891","num":"1029"},"tables":{"@attributes":{"id":"TABLE-US-00065","num":"00065"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start code detector test registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Reset",{}]},{"entry":["Register name","Size\/Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["length_count","16","0","This register contains the current"]},{"entry":[{},"r0",{},"value of the JPEG length"]},{"entry":[{},{},{},"count. This register is modified"]},{"entry":[{},{},{},"under the control of the coded"]},{"entry":[{},{},{},"data clock and should only be"]},{"entry":[{},{},{},"read via the MPI when the start"]},{"entry":[{},{},{},"code detector is stopped."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In normal operation the function of the Start Code Detector is to identify start codes in the data stream and to then convert them to the appropriate start code Token. In the simplest case, data is supplied to the Start code Detector in a single long DATA Token. The output of the Start Code Detector is a number of shorter DATA Tokens interleaved with start code Tokens.","Alternatively, in accordance with the present invention, the input data to the Start Code Detector could be divided up into a number of shorter DATA Tokens. There is no restriction on how the coded data is divided into DATA Tokens other than that each DATA Token must contain 8\u00d7n bits where n is an integer.","Other Tokens can be supplied directly to the input of the Start Code Detector. In this case, the Tokens are passed through the Start Code Detector with no processing","to other stages of the spatial Decoder. These Tokens can only be inserted just before the location of a start code in the coded data.","A.11.3.1 Start Code Formats","Three different start code formats are recognized by the Start Code Detector of the present invention. This is configured via the register, start_code_detector_coding_standard.",{"@attributes":{"id":"p-0896","num":"1034"},"tables":{"@attributes":{"id":"TABLE-US-00066","num":"00066"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start code formats"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Coding Standard","Start Code Pattern (hex)","Size of start code value"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":[" MPEG","0x00 0x00 0x01 <value>","8 bit"]},{"entry":["JPEG","0xFF <value>","8 bit"]},{"entry":["H.261","0x00 0x01 <value>","4 bit"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Having detected a start code, the Start Code Detector studies the value associated with the start code and generates an appropriate Token. In general, the Tokens are named after the relevant MPEG syntax. However, one of ordinary skill in the art will appreciate that the Tokens can follow additional naming formats. The coding standard currently selected configures the relationship between start code value and the Token generated. This relationship is shown in Table A.11.4.",{"@attributes":{"id":"p-0898","num":"1036"},"tables":{"@attributes":{"id":"TABLE-US-00067","num":"00067"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Tokens from start code values"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Start Code Value"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MPEG","H.251","JPEG","JPEG"]},{"entry":["Start code Token generated","(hex)","(hex)","(hex)","(name)"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["PICTURE_START","0x00","0x00","0xDA","SCS"]},{"entry":["SLICE_START","0x01 to","0x01 to","0xD0 to","RSTto"]},{"entry":[{},"0xAF","0x0C","0xD7","RST"]},{"entry":["SEQUENCE_START","0xB3",{},"0xD8","SOI"]},{"entry":["SEQUENCE_END","0xB7",{},"0xD9","ECI"]},{"entry":["GROUP_START","0xB8",{},"0xC0","SCF"]},{"entry":["USER_DATA","0xB2",{},"0xE0 to","APPto"]},{"entry":[{},{},{},"0xEF","APP"]},{"entry":[{},{},{},"0xFE","COM"]},{"entry":["EXTENSION_DATA","0xB5",{},"0xCa","JPG"]},{"entry":[{},{},{},"0xF0 to","JPGto"]},{"entry":[{},{},{},"0xFD","JPG"]},{"entry":[{},{},{},"0xC2 to","RES"]},{"entry":[{},{},{},"0xBF",{}]},{"entry":[{},{},{},"0xC1 to","SCFto"]},{"entry":[{},{},{},"0xCB","SCF"]},{"entry":[{},{},{},"0xCC","DAC"]},{"entry":["DHT_MARKER",{},{},"0xC4","DHT"]},{"entry":["DNL_MARKER",{},{},"0xDC","DNL"]},{"entry":["DQT_MARKER",{},{},"0xDB","DQT"]},{"entry":["DRI_MARKER",{},{},"0xDD","DRI"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b"}}]}}]}},"br":{}},"The coding standards provide a number of mechanisms to allow data to be embedded in the data stream whose use is not currently defined by the coding standard. This might be application specific \u201cuser data\u201d that provides extra facilities for a particular manufacturer. Alternatively, it might be \u201cextension data\u201d. The coding standards authorities reserved the right to use the extension data to add features to the coding standard in the future.","Two distinct mechanisms are employed. JPEG precedes blocks of user and extension data with marker codes. However, H.261 inserts \u201cextra information\u201d indicated by an extra information bit in the coded data. MPEG can use both these techniques.","In accordance with the present invention, MPEG\/JPEG blocks of user and extension data preceded by start\/marker codes can be detected by the Start Code Detector. H.261\/MPEG \u201cextra information\u201d is detected by the Huffman decoder of the present invention. See A.14.7, \u201cReceiving Extra Information\u201d.","The registers, discard_extension_data and discard_user_data, allow the Start Code Detector to be configured to discard user data and extension data. If this data is not discarded at the Start Code Detector it can be accessed when it reaches the Video Demux see A.14.6, \u201cReceiving User and Extension data\u201d.","The Spatial Decoder of the present invention supports the baseline features of JPEG. The non-baseline features of JPEG are viewed as extension data by the Spatial Decoder. So, all JPEG marker codes that precede data for non-baseline JPEG are treated as extension data.","A.11.3.4 JPEG Table Definitions","JPEG supports down loaded Huffman and quantizer tables. In JPEG data, the definition of these tables is preceded by the marker codes DNL and DQT. The Start Code Detector generates the Tokens DHT_MARKER and DQT_MARKER when these marker codes are detected. These Tokens indicate to the Video Demux that the DATA Token which follows contains coded data describing Huffman or quantizer table (using the formats described in JPEG).","A.11.4 Error Detection","The Start Code Detector can detect certain errors in the coded data and provides some facilities to allow the decoder to recover after an error is detected (see A.11.8, \u201cStart code searching\u201d).","A.11.4.1 Illegal JPEG Length Count","Most JPEG marker codes have a 16 bit length count field associated with them. This field indicates how much data is associated with this marker code. Length counts of 0 and 1 are illegal. An illegal length should only occur following a data error. In the present invention, this will generate an interrupt if illegal_length_count_mask is set to 1.","Recovery from errors in JPEG data is likely to require additional application specific data due to the difficulty of searching for start codes in JPEG data (see A.11.8.1).","A.11.4.2 Overlapping Start\/marker Codes","In the present invention, overlapping start codes should only occur following a data error. An MPEG, byte aligned, overlapping start code is illustrated in FIG. . Here, the Start Code Detector first sees a pattern that looks like a picture start code. Next the Start Code Detector sees that this picture start code is overlapped with a group start. Accordingly, the Start Code Detector generates a overlapping start event. Furthermore, the Start Code Detector will generate an interrupt and stop if overlapping_start_mask is set to 1.","It is impossible to tell which of the two start codes is the correct one and which was caused by a data error. However, the Start Code Detector in accordance with the present invention, discards the first start code and will proceed decoding the second start code \u201cas if it is correct\u201d after the overlapping start-code event has been serviced. If there are a series of overlapped start codes, the Start Code Detector will discard all but the last (generating an event for each overlapping start code).","Similar errors are possible in non byte-aligned systems (H.261 or possibly MPEG). In this case, the state of ignore_non_aligned must also be considered.  illustrates an example where the first start code found is byte aligned, but it overlaps a non-aligned start code. If ignore_non_aligned is set to 1, then the second overlapping start code will be treated as data by the Start Code Detector and, therefore no overlapping start code event will occur. This conceals a possible data communications error. If ignore_non_aligned is set to 0, however the Start Code Detector will see the second, non aligned, start code and will see that it overlaps the first start code.","A.11.4.3 Unrecognized Start Codes","The Start Code Detector can generate an interrupt when an unrecognized start code is detected (if unrecognized_start_mask=1). The value of the start code that caused this interrupt can be read from the register start_value.","The start code value 0\u00d7B (sequence error) is used in MPEG decoder systems to indicate a channel or media error. For example, this start code may be inserted into the data by an ECC circuit if it detects an error that it was unable to correct.","A.11.4.4 Sequence of Event Generation","In the present invention, certain coded data patterns (probably indicating an error condition) will cause more than one of the above error conditions to occur within a short space of time. Consequently, the sequence in which the Start Code Detector examines the coded data for error conditions is:\n\n","Thus, if a non-aligned start code overlaps another, later, start code, the first event generated will be associated with the non-aligned start code. After this event has been serviced, the Start Code Detector's operation will proceed, detecting the overlapped start code a short time later.","The Start Code Detector only attempts to recognize the start code after all tests for non-aligned and overlapping start codes are complete.","A.11.5 Decoder Start-up and Shutdown","The Start Code Detector provides facilities to allow the current decoding task to be completed cleanly and for a new task to be started.","There are limitations on using these techniques with JPEG coded video as data segments can contain values that emulate marker codes (see A.11.8.1).","A.11.5.1 Clean End to Decoding","The Start Code Detector can be configured to generate an interrupt and stop once the data for the current picture is complete. This is done by setting stop_after_picture=1 and stop_after_picture_mask=1.","Once the end of a picture passes through the Start Code Detector, a FLUSH Token is generated (A.11.7.2), an interrupt is generated, and the Start Code Detector stops. Note that the picture just completed will be decoded in the normal way. In some applications, however, it may be appropriate to detect the FLUSH arriving at the output of the decoder chip-set as this will indicate the end of the current video sequence. For example, the display could freeze on the last picture output.","When the Start Code Detector stops, there may be data from the \u201cold\u201d video sequence \u201ctrapped\u201d in user implemented buffers between the media and the decode chips. Setting the register, discard_all_data, will cause the Spatial Decoder to consume and discard this data. This will continue until a FLUSH Token reaches the Start Code Detector or discard_all_data is reset via the microprocessor interface.","Having discarded any data from the \u201cold\u201d sequence the decoder is now ready to start work on a new sequence.","A.11.5.2 When to Start Discard All Mode","The discard all mode will start immediately after a 1 is written into the discard_all_data register. The result will be unpredictable if this is done when the Start Code Detector is actively processing data.","Discard all mode can be safely initiated after any of the Start Code Detector events (non-aligned start event etc.) has generated an interrupt.","A.11.5.3 Starting a New Sequence","If it is not known where the start of a new coded video sequence is within some coded data, then the start code search mechanism can be used. This discards any unwanted data that precedes the-start of the sequence. See A.11.8.","A.11.5.4 Jumping Between Sequences","This section illustrates an application of some of the techniques described above. The objective is to \u201cjump\u201d from one part of one coded video sequence to another. In this example, the filing system only allows access to \u201cblocks\u201d of data. This block structure might be derived from the sector size of a disc or a block error correction system. So, the position of entry and exit points in the coded video data may not be related to the filing system block structure.","The stop_after_picture and discard_all_data mechanisms allow unwanted data from the old video sequence to be discarded. Inserting a FLUSH Token after the end of the last filing system data block resets the discard_all_data mode. The start code search mode can then be used to discard any data in the next data block that precedes a suitable entry point.","A.11.6 Byte Alignment","As is well known in the art, the different coding schemes have quite different views about byte alignment of start\/marker codes in the data stream.","For example, H.261 views communications as being bit serial. Thus, there is no concept of byte alignment of start codes. By setting ignore_non_aligned=0 the Start Code Detector is able to detect start codes with any bit alignment. By setting non-aligned_start_mask=0, the start code non-alignment interrupt is suppressed.","In contrast, however, JPEG was designed for a computer environment where byte alignment is guaranteed. Therefore, marker codes should only be detected when byte aligned. When the coding standard is configured as JPEG, the register ignore_non_aligned is ignored and the non-aligned start event will never be generated. However, setting ignore_non_aligned=1 and non_aligned_start_mask=0 is recommended to ensure compatibility with future products.","MPEG, on the other hand, was designed to meet the needs of both communications (bit serial) and computer (byte oriented) systems. Start codes in MPEG data should normally be byte aligned. However, the standard is designed to be allow bit serial searching for start codes (no MPEG bit pattern, with any bit alignment, will look like a start code, unless it is a start code). So, an MPEG decoder can be designed that will tolerate loss of byte alignment in serial data communications.","If a non-aligned start code is found, it will normally indicate that a communication error has previously occurred. If the error is a \u201cbit-slip\u201d in a bit-serial communications system, then data containing this error will have already been passed to the decoder. This error is likely to cause other errors within the decoder. However, new data arriving at the Start Code Detector can continue to be decoded after this loss of byte alignment.","By setting ignore_non_aligned=0 and non_aligned_start_mask=1, an interrupt can be generated if a non-aligned start code is detected. The response will depend upon the application. All subsequent start codes will be non-aligned (until byte alignment is restored). Accordingly, setting non_aligned_start_mask=0 after byte alignment has been lost may be appropriate.",{"@attributes":{"id":"p-0933","num":"1074"},"tables":{"@attributes":{"id":"TABLE-US-00068","num":"00068"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuring for byte alignment"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"MPEG","JPEG","H.251"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ignore_non_aligned","0","1","0"]},{"entry":[{},"non_aligned_start_mask","1","0","0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In the present invention, most of the Tokens output by the Start Code Detector directly reflect syntactic elements of the various picture and video coding standards. In addition to these \u201cnatural\u201d Tokens, some useful \u201cinvented\u201d Tokens are generated. Examples of these proprietary tokens are PICTURE_END and CODING_STANDARD. Tokens are also introduced to remove some of the syntactic differences between the coding standards and to \u201ctidy up\u201d under error conditions.","This automatic Token generation is done after the serial analysis of the coded data (see , \u201cThe Start Code Detector\u201d). Therefore the system responds equally to Tokens that have been supplied directly to the input of the Spatial Decoder via the Start Code Detector and to Tokens that have been generated by the Start Code Detector following the detection of start codes in the coded data.","A.11.7.1 Indicating the End of a Picture","In general, the coding standards don't explicitly signal the end of a picture. However, the Start Code Detector of the present invention generates a PICTURE_END Token when it detects information that indicates that the current picture has been completed.","The Tokens that cause PICTURE_END to be generated are: SEQUENCE_START, GROUP_START, PICTURE_START, SEQUENCE_END and FLUSH.","A.11.7.2 Stop After Picture and Option","If the register stop_after_picture is set, then the Start Code Detector will stop after a PICTURE_END Token has passed through. However, a FLUSH Token is inserted after the PICTURE_END to \u201cpush\u201d the tail end of the coded data through the decoder and to reset the system. See A.11.5.1.","A.11.7.3 Introducing Sequence Start for H.261","H.261 does not have a syntactic element equivalent to sequence start (see Table A.11.4). If the register insert_sequence_start is set, then the Start Code Detector will ensure that there is one SEQUENCE_START Token before the next PICTURE_START, i.e., if the Start Code Detector does not see a SEQUENCE_START before a PICTURE_START, one will be introduced. No SEQUENCE_START will be introduced if one is already present.","This function should not be used with MPEG or JPEG.","A.11.7.4 Setting Coding Standard for Each Sequence","All SEQUENCE_START Tokens leaving the Start Code Detector are always preceded by a CODING_STANDARD Token. This Token is loaded with the Start Code Detector's current coding standard. This sets the coding standard for the entire decoder chip set for each new video sequence.","A.11.8 Start Code Searching","The Start Code Detector in accordance with the invention, can be used to search through a coded data stream for a specified type of start code. This allows the decoder to re-commence decoding from a specified level within the syntax of some coded data (after discarding any data that precedes it). Applications for this include:\n\n","For example, Table A.11.6 shows the MPEG start codes searched, for different configurations of start_code_search. The equivalent H.261 and JPEG start\/marker codes can be seen in Table A.11.4.",{"@attributes":{"id":"p-0944","num":"1087"},"tables":{"@attributes":{"id":"TABLE-US-00069","num":"00069"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.11.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start code search modes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["start_code_search","Start codes searched for . . ."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":[{"sup":["\u2009\u2009","a"]},"Normal operation"]},{"entry":["1","Reserved (will behave as discard data)"]},{"entry":"2"},{"entry":["3","sequence start"]},{"entry":["4","group or sequence start"]},{"entry":[{"sup":["\u2009\u2009","b"]},"picture, group or sequence start"]},{"entry":["6","slice, picture, group or sequence start"]},{"entry":["7","the next start or marker code"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"b"}}]}}]}}},"When a non-zero value is written into the start_code_search register, the Start Code Detector will start to discard all incoming data until the specified start code is detected. The start_code_search register will then reset to 0 and normal operation will continue.","The start code search will start immediately after a non-zero value is written into the start_code_search register. The result will be unpredictable if this is done when the Start Code Detector is actively processing data. So, before initiating a start code search, the Start Code Detector should be stopped so no data is being processed. The Start Code Detector is always in this condition if any of the Start Code Detector events (non-aligned start event etc.) has just generated an interrupt.","A.11.8.1 Limitations on Using Start Code Search with JPEG","Most JPEG marker codes have a 16 bit length count field associated with them. This field indicates the length of a data segment associated with the marker code. This segment may contain values that emulate marker codes. In normal operation, the Start Code Detector doesn't look for start codes in these segments of data.","If a random access into some JPEG coded data \u201clands\u201d in such a segment, the start code search mechanism cannot be used reliably. In general, JPEG coded video will require additional external information to identify entry points for random access.","Section A.12 Decoder Start-up Control","A.12.1 Overview of Decoder Start-up","In a decoder, video display will normally be delayed a short time after coded data is first available. During this delay, coded data accumulates in the buffers in the decoder. This pre-filling of the buffers ensures that the buffers never empty during decoding and, this, therefore ensures that the decoder is able to decode new pictures at regular intervals.","Generally, two facilities are required to correctly start-up a decoder. First, there must be a mechanism to measure how much data has been provided to the decoder. Second, there must be a mechanism to prevent the display of a new video stream. The Spatial Decoder of the invention provides a bit counter near its input to measure how much data has arrived and an output gate near its output to prevent the start of new video stream being output.","There are three levels of complexity for the control of these facilities:\n\n","With the output gate always open, picture output will start as soon as possible after coded data starts to arrive at the decoder. This is appropriate for still picture decoding or where display is being delayed by some other mechanism.","The difference between basic and advanced control relates to how many short video streams can be accommodated in the decoder's buffers at any time. Basic control is sufficient for most applications. However, advanced control allows user software to help the decoder manage the start-up of several very short video streams.","A.12.2 MPEG Video Buffer Verifier","MPEG describes a \u201cvideo buffer verifier\u201d (VBV) for constant data rate systems. Using the VBV information allows the decoder to pre-fill its buffers before it starts to display pictures. Again, this pre-filling ensures that the decoder's buffers never empty during decoding.","In summary, each MPEG picture carries a vbv_delay parameter. This parameter specifies how long the coded data buffer of an \u201cideal decoder\u201d should fill with coded data before the first picture is decoded. Having observed the start-up delay for the first picture, the requirements of all subsequent pictures will be met automatically.","MPEG, therefore, specifies the start-up requirements as a delay. However, in a constant bit rate system this delay can readily be converted to a bit count. This is the basis on which the start-up control of the Spatial Decoder of the present invention operates.","A.12.3 Definition of a Stream","In this application, the term stream is used to avoid confusion with the MPEG term sequence. Stream therefore means a quantity of video data that is \u201cinteresting\u201d to an application. Hence, a stream could be many MPEG sequences or it could be a single picture.","The decoder start-up facilities described in this chapter relate to meeting the VBV requirements of the first picture in a stream. The requirements of subsequent pictures in that stream are met automatically.",{"@attributes":{"id":"p-0959","num":"1105"},"tables":{"@attributes":{"id":"TABLE-US-00070","num":"00070"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"392pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.12.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Decoder start-up registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["startup_access","1","0","Writing 1 to this register requests that the bit"]},{"entry":["CED_BS_ACCESS","rw",{},"counter and gate opening logic stop to allow"]},{"entry":[{},{},{},"access to their configuration registers."]},{"entry":["bit_count","8","0","This bit counter is incremented as coded data"]},{"entry":["CED_BS_COUNT","rw",{},"leaves the start code detector. The number of"]},{"entry":["bit_count_prescale","3","0","bits required to increment bit_count once is approx."]},{"entry":["CED_BS_PRESCALE","rw",{},"2\u00d7 512."]},{"entry":[{},{},{},"The bit counter starts counting bits after a FLUSH"]},{"entry":[{},{},{},"Token passes through the bit counter."]},{"entry":[{},{},{},"It is reset to zero and then stops incrementing"]},{"entry":[{},{},{},"after the bit count target has been met."]},{"entry":["bit_count_target","8","x","This register specifies the bit count target. A"]},{"entry":["CED_BS_TARGET","rw",{},"target met event is generated whenever the"]},{"entry":[{},{},{},"following condition becomes true:"]},{"entry":[{},{},{},"bit_count>=bit_count_target"]},{"entry":["target_met_event","1","0","When the bit count target is met this event will be"]},{"entry":["BS_TARGET_MET_EVENT","rw",{},"generated. If the mask register is set to 1 then an"]},{"entry":["target_met_mask","1","0","interrupt can be generated, however, the bit counter"]},{"entry":[{},"rw",{},"will NOT stop processing data."]},{"entry":[{},{},{},"This event will occur when the bit counter"]},{"entry":[{},{},{},"increments to its target. It will also occur if a target"]},{"entry":[{},{},{},"value is written which is less than or equal to the"]},{"entry":[{},{},{},"current value of the bit counter."]},{"entry":[{},{},{},"Writing 0 to bit_count_target will"]},{"entry":[{},{},{},"always generate a target met event"]},{"entry":["counter_flushed_event","1","0","When a FLUSH Token passes through"]},{"entry":["BS_FLUSH_EVENT","rw",{},"the bit count circuit this event will occur."]},{"entry":["counter_flushed_mask","1","0","If the mask register is set to 1 then an"]},{"entry":[{},"rw",{},"interrupt can be generated and the bit"]},{"entry":[{},{},{},"counter will stop."]},{"entry":["counter_flushed_too_early_event","1","x","If a FLUSH Token passes through the bit"]},{"entry":["BS_FLUSH_BEFORE_TARGET_MET_EVENT","rw",{},"count circuit board and the bit count"]},{"entry":[{},{},{},"target has not been met this event will"]},{"entry":["counter_flushed-too-early-mask","1","0","occur. If the mask register is set to 1"]},{"entry":[{},"rw",{},"then an interrupt can be generated and"]},{"entry":[{},{},{},"the bit counter will stop."]},{"entry":[{},{},{},"See A.12.10."]},{"entry":["offchip_queue","1","0","Setting this register to 1 configures the"]},{"entry":["CED_BS_QUEUE","rw",{},"gate opening logic to require"]},{"entry":[{},{},{},"microprocessor support. When this"]},{"entry":[{},{},{},"register is set to 0 the output gate control"]},{"entry":[{},{},{},"logic will automatically control the"]},{"entry":[{},{},{},"operation of the output gate."]},{"entry":[{},{},{},"See sections A.12.6 and A.12.7."]},{"entry":["enable_stream","1","0","When an off-chip queue is in use writing"]},{"entry":["CED_BS_ENABLE_NXT_STM","rw",{},"to enable_stream controls the behaviour"]},{"entry":[{},{},{},"of the output gate after the end of a"]},{"entry":[{},{},{},"stream passes through it."]},{"entry":[{},{},{},"A one in this register enables the output"]},{"entry":[{},{},{},"gate to open."]},{"entry":[{},{},{},"The register will be reset when an"]},{"entry":[{},{},{},"accept_enable interrupt is generated."]},{"entry":["accept_enable_event","1","0.00","This event indicates that a FLUSH"]},{"entry":["BS_STREAM_END_EVENT","rw",{},"Token has passes through the output"]},{"entry":[{},{},{},"gate (causing it to close) and that an"]},{"entry":["accept_enable_mask","1","0.00","enable was available to allow the gate to"]},{"entry":[{},"rw",{},"open."]},{"entry":[{},{},{},"If the mask register is set to 1 then an"]},{"entry":[{},{},{},"interrupt can be generated and the"]},{"entry":[{},{},{},"register enable_stream will be reset."]},{"entry":[{},{},{},"See A.12.7.1."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The output gate can be configured to remain open. This configuration is appropriate where still pictures are being decoded, or when some other mechanism is available to manage the start-up of the video decoder.","The following configurations are required after reset (having gained access to the start-up control logic by writing 1 to startup_access):\n\n","(See A.12.7.1 for an explanation of why this holds the output gate open.)","A.12.6 Basic Operation","In the present invention, basic control of the start-up logic is sufficient for the majority of MPEG video applications. In this mode, the bit counter communicates directly with the output gate. The output gate will close automatically as the end of a video stream passes through it as indicated by a FLUSH Token. The gate will remain closed until an enable is provided by the bit counter circuitry when a stream has attained its start-up bit count.","The following configurations are required after reset (having gained access to the start-up control logic by writing 1 to startup_access):\n\n","The video demux (also known as the video parser) can generate an interrupt when it decodes the vbv_delay for a new video stream (i.e., the first picture to arrive at the video demux after a FLUSH). The interrupt service routine should compute an appropriate value for bit_count_target and write it. When the bit counter reaches this target, it will insert an enable into a short queue between the bit counter and the output gate. When the output gate opens it removes an enable from this queue.","A.12.6.1 Starting a New Stream Shortly after Another Finishes","As an example, the MPEG stream which is about to finish is called A and the MPEG stream about to start is called B. A FLUSH Token should be inserted after the end of A. This pushes the last of its coded data through the decoder and alerts the various sections of the decoder to expect a new stream.","Normally, the bit counter will have reset to zero, A having already met its start-up conditions. After the FLUSH, the bit counter will start counting the bits in stream B. When the Video Demux has decoded the vbv_delay from the first picture in stream B, an interrupt will be generated allowing the bit counter to be configured.","As the FLUSH marking the end of stream A passes through the output gate, the gate will close. The gate will remain closed until B meets its start-up conditions. Depending on a number of factors such as: the start-up delay for stream B and the depth of the buffers, it is possible that B will have already met its start-up conditions when the output gate closes. In this case, there will be an enable waiting in the queue and the output gate will immediately open. Otherwise, stream B will have to wait until it meets its start-up requirements.","A.12.6.2 A Succession of Short Streams","The capacity of the queue located between the bit counter and the output gate is sufficient to allow 3 separate video streams to have met their start-up conditions and to be waiting for a previous stream to finish being decoded. In the present invention, this situation will only occur if very short streams are being decoded or if the off-chip buffers are very large as compared to the picture format being decoded).","In  stream A is being decoded and the output gate is open). Streams B and C have met their start-up conditions and are entirely contained within the buffers managed by the Spatial Decoder. Stream D is still arriving at the input of the Spatial Decoder.","Enables for streams B and C are in the queue. So, when stream A is completed B will be able to start immediately. Similarly C can follow immediately behind B.","If A is still passing through the output gate when D meets its start-up target an enable will be added to the queue, filling the queue. If no enables have been removed from the queue by the time the end of D passes the bit counter (i.e., A is still passing through the output gate) no new stream will be able to start through the bit counter. Therefore, coded data will be held up at the input until A completes and an enable is removed from the queue as the output gate is opened to allow B to pass through.","A.12.7 Advanced Operation","In accordance with the present invention, advanced control of the start-up logic allows user software to infinitely extend the length of the enable queue described in A.12.6, \u201cBasic operation\u201d. This level of control will only be required where the video decoder must accommodate a series of short video streams longer than that described in A.12.6.2, \u201cA succession of short streams\u201d.","In addition to the configuration required for Basic operation of the system, the following configurations are required after reset (having gained access to the start-up control logic by writing 1 to startup access):\n\n","Two additional interrupt service routines are required:\n\n","When a target met interrupt occurs, the service routine should add an enable to its off-chip enable queue.","A.12.7.1 Output Gate Logic Behavior","Writing a 1 to the enable_stream register loads an enable into a short queue.","When a FLUSH (marking the end of a stream) passes through the output gate the gate will close. If there is an enable available at the end of the queue, the gate will open and generate an accept_enable_event. If accept_enable_mask is set to one, an interrupt can be generated and an enable is removed from the end of the queue (the register enable_stream is reset).","However, if accept_enable_mask is set to zero, no interrupt is generated following the accept_enable_event and the enable is NOT removed from the end of the queue. This mechanism can be used to keep the output gate open as described in A.12.5.","A.12.8 Bit Counting","The bit counter starts counting after a FLUSH Token passes through it. This FLUSH Token indicates the end of the current video stream. In this regard, the bit counter continues counting until it meets the bit count target set in the bit_count_target register. A target met event is then generated and the bit counter resets to zero and waits for the next FLUSH Token.","The bit counter will also stop incrementing when it reaches it maximum count (255).","A.12.9 Bit Count Prescale","In the present invention, 2\u00d7512 bits are required to increment the bit counter once. Furthermore, bit_count_prescale is a 3 bit register than can hold a value between 0 and 7.",{"@attributes":{"id":"p-0983","num":"1142"},"tables":{"@attributes":{"id":"TABLE-US-00071","num":"00071"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.12.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Example bit counter ranges"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["n","Range (bits)","Resolution (bits)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","0 to 252144","1024"]},{"entry":["1","0 to 524288","2048"]},{"entry":["7","0 to 31457280","122880"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"The bit count is approximate, as some elements of the video stream will already have been Tokenized (e.g., the start codes) and, therefore includes non-data Tokens.","A.12.10 Counter Flushed too Early","If a FLUSH token arrives at the bit counter before the bit count target is attained, an event is generated which can cause and interrupt (if counter_flushed_too_early_mask=1). If the interrupt is generated, then the bit counter circuit will stop, preventing further data input. It is ther responsibility of the user's software to decide when to output gate can be made to open by writing 0 as the bit count target. These circumstances should only arise when trying to decode video streams that last only a few pictures.","Section A.13 Buffer Management","The Spatial Decoder manages two logical data buffers: the coded data buffer (CDB) and the Token buffer (TB).","The CDB buffers coded data between the Start Code Detector and the input of the Huffman decoder. This provides buffering for low data rate coded video data. The TB buffers data between the output of the Huffman decoder and the input of the spatial video decoding circuits (inverse modeler, quantizer and DCT). This second logical buffer allows processing time to include a spread so as to accommodate processing pictures having varying amounts of data.","Both buffers are physically held in a single off-chip DRAM array. The addresses for these buffers are generated by the buffer manager.","A.13.1 Buffer Manager Registers","The Spatial Decoder buffer manager is intended to be configured once immediately after the device is reset. In normal operation, there is no requirement to reconfigure the buffer manager.","After reset is removed from the Spatial Decoder, the buffer manager is halted (with its access register, buffer_manager_access, set to 1) awaiting configuration. After the registers have been configured, buffer_manager_access can be set to 0 and decoding can commence.","Most of the registers used in the buffer manager cannot be accessed reliably while the buffer manager is operating. Before any of the buffer manager registers are accessed buffer_manager_access must be set to 1. This makes it essential to observe the protocol of waiting until the value 1 can be read from buffer_manager_access. The time taken to obtain and release access should be taken into consideration when polling such registers as cdb_full and cdb_empty to monitor buffer conditions.",{"@attributes":{"id":"p-0992","num":"1151"},"tables":{"@attributes":{"id":"TABLE-US-00072","num":"00072"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"357pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.13.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Buffer manager registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["buffer_manager_access","\u20021","1","This access bit stops the operation of the buffer manager"]},{"entry":[{},"rw",{},"so that its various registers can be accessed reliably. See"]},{"entry":[{},{},{},"A.6.4.1. Note: this access register is unusual as its default"]},{"entry":[{},{},{},"state after reset is 1. i.e. after reset the buffer manager is"]},{"entry":[{},{},{},"halted awaiting configuration via the microprocessor"]},{"entry":[{},{},{},"interface."]},{"entry":["buffer_manager_keyhole_address","\u20026","x","Keyhole access to the extended address space used for"]},{"entry":[{},"rw",{},"the buffer manager registers shown below. See A.6.4.3 for"]},{"entry":["buffer_manager_keyhole_data","\u20028","x","more information about accessing registers through a"]},{"entry":[{},"rw",{},"keyhole."]},{"entry":["buffer_limit","18","x","This specifies the overall size of the DRAM array attached"]},{"entry":[{},"rw",{},"to the Spatial Decoder. All buffer addresses are calculated"]},{"entry":[{},{},{},"MOD this buffer size and s will wrap round within the"]},{"entry":[{},{},{},"DRAM provided."]},{"entry":["cdb_base","18","x","These registers point to the base of the coded data (cdb)"]},{"entry":["tb_base","rw",{},"and Token (tb) buffers."]},{"entry":["cdb_length","18","x","These registers specify the length (i.e. size) of the coded"]},{"entry":["tb_length","rw",{},"data (cdb) and Token (tb) buffers."]},{"entry":["cdb_read","18","x","These registers hold an offset from the buffer base and"]},{"entry":["tb_read","ro",{},"indicate where data will be read from next."]},{"entry":["cdb_number","18","x","These registers show how much data is currently held in"]},{"entry":["tb_number","ro",{},"the buffers."]},{"entry":["cdb_full","\u20021","x","These registers will be set to 1 if the coded data (cdb) or"]},{"entry":["tb_full","ro",{},"Token (tb) buffer fills."]},{"entry":["cdb_empty","\u20021","x","These registers will be set to 1 if the coded data (cdb) or"]},{"entry":["tb_empty","ro",{},"Token (tb) buffer empties."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Typically, data is transferred between the Spatial Decoder and the off_chip DRAM in 64 byte bursts (using the DRAM's fast page mode). All the buffer pointers and length registers refer to these 64 byte (512 bit) blocks of data. So, the buffer manager's 18 bit registers describe a 256 k block linear address space (i.e., 128 Mb).","The 64 byte transfer is independent of the width (8, 16 or 32 bits) of the DRAM interface.","A.13.2 Use of the Buffer Manager Registers","The Spatial Decoder buffer manager has two sets of registers that define two similar buffers. The buffer limit register (buffer_limit) defines the physical upper limit of the memory space. All addresses are calculated modulo this number.","Within the limits of the available memory, the extent of each buffer is defined by two registers: the buffer base (cdb_base and tb_base) and the buffer length (cdb_length and tb_length). All the registers described thus far must be configured before the buffers can be used.","The current status of each buffer is visible in 4 registers. The buffer read register (cdb_read and tb_read) indicates an offset from the buffer base from which data will be read next. The buffer number registers (cdb_number and tb_number) indicate the amount of data currently held by buffers. The status bits cdb_full, tb_full, cdb_empty and tb_empty indicate if the buffers are full or empty.","As stated in A.13.1.1, the unit for all the above mentioned registers is a 512 bit block of data. Accordingly, the value-read from cdb_number should be multiplied by 512 to obtain the number of bits in the coded data buffer.","A.13.3 Zero Buffers","Still picture applications (e.g., using JPEG) that do not have a \u201creal-time\u201d requirement will not need the large off-chip buffers supported by the buffer manager. In this case, the DRAM interface can be configured (by writing 1 to the zero_buffers register) to ignore the buffer manager to provide a 128 bit stream on-chip FIFO for the coded data buffer and the Token buffers.","The zero buffers option may also be appropriate for applications which operate working at low data rates and with small picture formats.","Note: the zero_buffers register is part of the DRAM interface and, therefore, should be set only during the post-reset configuration of the DRAM interface.","A.13.4 Buffer Operation","The data transfer through the buffers is controlled by a handshake Protocol. Hence, it is guaranteed that no data errors will occur if the buffer fills or empties. If a buffer is filled, then the circuits trying to send data to the buffer will be halted until there is space in the buffer. If a buffer continues to be full, more processing stages \u201cup steam\u201d of the buffer will halt until the Spatial Decoder is unable to accept data on its input port. Similarly, if a buffer empties, then the circuits trying to remove data from the buffer will halt until data is available.","As described in A.13.2, the position and size of the coded data and Token buffer are specified by the buffer base and length registers. The user is responsible for configuring these registers and for ensuring that there is no conflict in memory usage between the two buffers.","Section A.14 Video Demux","The Video Demux or Video parser as it is also called, completes the task of converting coded data into Tokens started by the Start Code Detector. There are four main processing blocks in the Video Demux: Parser State Machine, Huffman decoder (including an ITOD), Macroblock counter and ALU.","The Parser or state machine follows the syntax of the coded video data and instructs the other units. The Huffman decoder converts variable length coded (VLC) data into integers. The Macroblock counter keeps track of which section of a picture is being decoded. The ALU performs the necessary arithmetic calculations.","A.14.1 Video Demux Registers",{"@attributes":{"id":"p-1006","num":"1165"},"tables":{"@attributes":{"id":"TABLE-US-00073","num":"00073"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"399pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Top level Video Demux registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"224pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register name","Size\/Dir.","Reset State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["demux_access","\u20021","0","This access bit stops the operation of the Video Demux so that its"]},{"entry":["CED_H_CTRL[7]","rw",{},"various registers can be accessed reliably. See A.6.4.1."]},{"entry":["huffman_error_code","\u20023",{},"When the Video Demux stops following the generation of a"]},{"entry":["CED_H_CTRL[6:4]","ro",{},"huffman_event interrupt request this 3 bit register holds a value indicating"]},{"entry":[{},{},{},"why the interrupt was generated. See A.14.5.1."]},{"entry":["parser_error_code","\u20028",{},"When the Video Demux stops following the generation of a parser_event"]},{"entry":["CED_H_DMUX_ERR","ro",{},"interrupt requests this 8 bit register holds a value indicating why the"]},{"entry":[{},{},{},"interrupt was generated. See A.14.5.2."]},{"entry":["demux_keyhole_address","12","x","Keyhole access to the Video Demux's extended address space. See"]},{"entry":["CED_H_KEYHOLE_ADDR","rw",{},"A.6.4.3 for more information about accessing registers"]},{"entry":["demux_keyhole_data","\u20028","x","through a keyhole."]},{"entry":["CED_H_KEYHOLE","rw",{},"Tables A.14.2, A.14.3 and A.14.4 describe the registers that can be"]},{"entry":[{},{},{},"accessed via the keyhole."]},{"entry":["dummy_last_picture","\u20021","0","When this register is set to 1 the Video Demux will generate information for"]},{"entry":["CED_H_ALU_REG0","rw",{},"a \u201cdummy\u201d intra picture as the last picture of an MPEG sequence. This"]},{"entry":["r_rom_control",{},{},"function is useful when the Temporal Decoder is configured for automatic"]},{"entry":["r_dummy_last_frame_bit",{},{},"picture re-ordering (see A.18.3.5, \u201cPicture sequence re-ordering\u201d) to flush"]},{"entry":[{},{},{},"the last P or I picture out of the Temporal Decoder."]},{"entry":[{},{},{},"No \u201cdummy\u201d picture is required if:"]},{"entry":[{},{},{},"\u2003the Temporal Decoder is not configured for re-ordering"]},{"entry":[{},{},{},"\u2003another MPEG sequence will be decoded immediately (as this will also"]},{"entry":[{},{},{},"\u2003flush out the last picture)"]},{"entry":[{},{},{},"\u2003the coding standard is not MPEG"]},{"entry":["field_info","\u20021","0","When this register is set to 1 the first byte of any MPEG"]},{"entry":["CEO_H_ALU_REG0","rw",{},"extra_information_picture is placed in the FIELD_INFO Token. See"]},{"entry":["r_rom_control",{},{},"A.14.7.1."]},{"entry":"r_field_info_bit"},{"entry":["continue","\u20021","0","This register allows user software to control how much extra, user or"]},{"entry":["CED_H_ALU_REG0","rw",{},"extension data it wants to receive when it is detected by the decoder. See"]},{"entry":["r_rom_control",{},{},"A.14.6 and A.14.7."]},{"entry":"r_field_continue_bit"},{"entry":["rom_revision","\u20028",{},"Immediately following reset this holds a copy of the microcode ROM"]},{"entry":["CEO_H_ALU_REG1","ro",{},"revision number."]},{"entry":["r_rom_revision",{},{},"This register is also used to present to control software data values read"]},{"entry":[{},{},{},"from the coded data See A.14.6, \u201cReceiving User and Extension data\u201d, on"]},{"entry":[{},{},{},"page 148 and A 14 7, \u201cReceiving Extra Information\u201d."]},{"entry":["huffman_event","\u20021","0","A Huffman event is generated if an error is found in the coded data. See"]},{"entry":[{},"rw",{},"A.14 5 1 for a description of these events."]},{"entry":["huffman_mask","\u20021","0","If the mask register is set to 1 then an interrupt can be generated and the"]},{"entry":[{},"rw",{},"Video Demux will stop. If the mask register is set to 0 then no interrupt is"]},{"entry":[{},{},{},"generated and the Video Demux will attempt to recover from the error."]},{"entry":["parser_event","\u20021","0","A Parser event can be in response to errors in the coded data or to the"]},{"entry":[{},"rw",{},"arrival of information at the Video Demux that requires software"]},{"entry":[{},{},{},"intervention See A.14.5.2 for a description of these events. If the mask"]},{"entry":[{},{},{},"register is set to 1 then an interrupt can be generated and the Video"]},{"entry":["parser_mask","12","x","Demux will stop. If the mask register is set to 0 then no interrupt is"]},{"entry":[{},"rw",{},"generated and the Video Demux will attempt to continue."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1007","num":"1166"},"tables":{"@attributes":{"id":"TABLE-US-00074","num":"00074"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"video demux picture construction registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"size\/","Reset",{}]},{"entry":["Register name","dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["component_name_0","\u20028","x","During JPEG operation the register"]},{"entry":["component_name_1","rw",{},"component_name_n holds an 8"]},{"entry":["component_name_2",{},{},"bit value indicating (to an"]},{"entry":["component_name_3",{},{},"application) which colour"]},{"entry":[{},{},{},"component has the component"]},{"entry":[{},{},{},"ID n."]},{"entry":["horiz_pels","16","x","These registers hold the horizontal"]},{"entry":[{},"rw",{},"and vertical dimensions of the"]},{"entry":["vert_pels","16","x","video being decoded in pixels."]},{"entry":[{},"rw",{},"See section A.14.2."]},{"entry":["horiz_macroblocks","16","x","These registers hold the horizontal"]},{"entry":[{},"rw",{},"and vertical dimensions of the"]},{"entry":["vert_macroblocks","16","x","video being decoded in macro-"]},{"entry":[{},"rw",{},"blocks."]},{"entry":[{},{},{},"See section A.14.2"]},{"entry":["max_h","\u20022","x","These registers hold the macro-"]},{"entry":[{},"rw",{},"block width and height in blocks"]},{"entry":["max_v","\u20022","x","(8 x 8 pixels)."]},{"entry":[{},"rw",{},"The values 0 to 3 indicate a worth\/"]},{"entry":[{},{},{},"height of 1 to 4 blocks."]},{"entry":[{},{},{},"See section A.14.2."]},{"entry":["max_component_id","\u20022","x","The values 0 to 3 indicate that 1 to"]},{"entry":[{},"rw",{},"4 different video components are"]},{"entry":[{},{},{},"currently being decoded."]},{"entry":[{},{},{},"See section A.14.2."]},{"entry":["Nf","\u20028","x","During JPEG operation this"]},{"entry":[{},"rw",{},"register holds the parameter Nf"]},{"entry":[{},{},{},"(number of image components in"]},{"entry":[{},{},{},"frame)."]},{"entry":["blocks_h_0","\u20022","x","For each of the 4 colour"]},{"entry":["blocks_h_1","rw",{},"components the registers"]},{"entry":["blocks_h_2",{},{},"blocks_h_n and blocks_v_n"]},{"entry":["blocks_h_3",{},{},"hold the number of blocks"]},{"entry":[{},{},{},"horizontally and vertically"]},{"entry":[{},{},{},"in a macroblock for the colour"]},{"entry":[{},{},{},"component with component ID n."]},{"entry":[{},{},{},"See section A.14.2."]},{"entry":["blocks_v_0","\u20022","x"]},{"entry":["blocks_v_1","rw"]},{"entry":"blocks_v_2"},{"entry":"blocks_v_3"},{"entry":["tq_0","\u20022","x","The two bit value held by the"]},{"entry":["tq_1","rw",{},"register tq_n describes which"]},{"entry":["tq_2",{},{},"inverse Quantisation table is to be"]},{"entry":["tq_3",{},{},"used when decoding data with"]},{"entry":[{},{},{},"component ID n."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Many of the registers in the Video Demux hold values that relate directly to parameters normally communicated in the coded picture\/video data. For example, the horiz_pels register corresponds to the MPEG sequence header information, horizontal_size, and the JPEG frame header parameter, X. These registers are loaded by the Video Demux when the appropriate coded data is decoded. These registers are also associated with a Token. For example, the register, horiz_pels, is associated with Token, HORIZONTAL_SIZE. The Token is generated by the Video Demux when (or soon after) the coded data is decoded. The Token can also be supplied directly to the input of the Spatial Decoder. In this case, the value carried by the Token will configure the Video Demux register associated with it.",{"@attributes":{"id":"p-1009","num":"1168"},"tables":{"@attributes":{"id":"TABLE-US-00075","num":"00075"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Video demux Huffman table registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size\/","Reset",{}]},{"entry":["Register Name","Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["dc_huff_0","2",{},"The two bit value held by the register"]},{"entry":["dc_huff_1","rw",{},"dc_huff_n describes which Huffman"]},{"entry":[{},{},{},"decoding table is to be used when"]},{"entry":["dc_huff_2",{},{},"decoding the DC coefficients of data"]},{"entry":["dc_huff_3",{},{},"with component ID n. Similarly"]},{"entry":["ac_huff_0","2",{},"ac_huff_n describes the table to be"]},{"entry":["ac_huff_1","rw",{},"used when decoding AC coefficients."]},{"entry":["ac_huff_2",{},{},"Baseline JPEG requires up to two"]},{"entry":["ac_huff_3",{},{},"Huffman tables per scan. The only"]},{"entry":[{},{},{},"tables implemented are 0 and 1."]},{"entry":["dc_bits_0","8",{},"Each of these is a table of 16, eight"]},{"entry":["[15:0]","rw",{},"bit values. They provide the BITS"]},{"entry":["dc_bits_1","8",{},"information (see JPEG Huffman table"]},{"entry":["[15:0]","rw",{},"specification) which form part of the"]},{"entry":["ac_bits_0",{},{},"description of two DC and two AC"]},{"entry":["[15:0]",{},{},"Huffman tables."]},{"entry":["ac_bits_1",{},{},"See section A.14.3.1."]},{"entry":"[15:0]"},{"entry":["dc_huffval_0","8",{},"Each of these is a table of 12, eight"]},{"entry":"[11:0]"},{"entry":["dc_huffval_1","rw",{},"bit values. They provide the"]},{"entry":["[1:0]",{},{},"HUFFVAL information (see JPEG"]},{"entry":[{},{},{},"Huffman table specification) which"]},{"entry":[{},{},{},"form part of the description of two"]},{"entry":[{},{},{},"AC Huffman tables."]},{"entry":[{},{},{},"See section A.14.3.1."]},{"entry":["ac_huffval_0","8",{},"Each of these is a table of 162, eight"]},{"entry":"(161:0)"},{"entry":["ac_huffval_1","rw",{},"bit values. They provide the"]},{"entry":["(161:0)",{},{},"HUFFVAL information (see JPEG"]},{"entry":[{},{},{},"Huffman table specification) which"]},{"entry":[{},{},{},"form part of the description of two"]},{"entry":[{},{},{},"DC Huffman tables."]},{"entry":[{},{},{},"See section A.14.3.1."]},{"entry":["dc_zssss_0","8",{},"These 8 bit registers hold values that"]},{"entry":["dc_zssss_1","rw",{},"are \u201cspecial cased\u201d to accelerate the"]},{"entry":["ac_eob_0","8",{},"decoding of certain frequency used"]},{"entry":[{},{},{},"JPEG VLCs."]},{"entry":["ac_eob_1","rw",{},"dc_ssss - magnitude of"]},{"entry":["ac_zrl_0","8",{},"DC coefficient is 0."]},{"entry":["ac_zrl_1","rw",{},"ac_eob - end of block"]},{"entry":[{},{},{},"ac_zrl - run of 16 zeros"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1010","num":"1169"},"tables":{"@attributes":{"id":"TABLE-US-00076","num":"00076"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"343pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Other Video Demux registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Reset",{}]},{"entry":["Register Name","Size\/Dir","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["buffer_size","10",{},"This register is loaded when decoding MPEG data with a value"]},{"entry":[{},"rw",{},"indicating the size of VBV buffer required in an ideal decoder."]},{"entry":[{},{},{},"This value is not used by the decoder chips. However, the value"]},{"entry":[{},{},{},"it holds may be useful to user software when configuring the"]},{"entry":[{},{},{},"coded data buffer size and to determine whether the decoder is"]},{"entry":[{},{},{},"capable of decoding a particular MPEG data file."]},{"entry":["pel_aspect","4",{},"This register is loaded when decoding MPEG data with a value"]},{"entry":[{},"rw",{},"indicating the pel aspect ratio. The value is a 4 bit integer that is"]},{"entry":[{},{},{},"used as an index into a table defined by MPEG."]},{"entry":[{},{},{},"See the MPEG standard for a definition of this table."]},{"entry":[{},{},{},"This value is not used by the decoder chips. However, the value"]},{"entry":[{},{},{},"it holds may be useful to user software when configuring a"]},{"entry":[{},{},{},"display or output device."]},{"entry":["bit_rate","4",{},"This register is loaded when decoding MPEG data with a value"]},{"entry":[{},"rw",{},"indicating the coded data rate. See the MPEG standard for a"]},{"entry":[{},{},{},"definition of this value. This value is not used by the decoder"]},{"entry":[{},{},{},"chips. However, the value it holds may be useful to user"]},{"entry":[{},{},{},"software when configuring the decoder start-up registers."]},{"entry":["pic_rate","4",{},"This register is loaded when decoding MPEG data with a value"]},{"entry":[{},"rw",{},"indicating the picture rate."]},{"entry":[{},{},{},"See the MPEG standard for a definition of this"]},{"entry":[{},{},{},"value. This value is not used by the decoder chips. However,"]},{"entry":[{},{},{},"the value it holds may be useful to user software when"]},{"entry":[{},{},{},"configuring a display or output device."]},{"entry":["Constrained","1",{},"This register is loaded when decoding MPEG data to indicate if"]},{"entry":[{},"rw",{},"the coded data meets MPEG's constrained parameters. See the"]},{"entry":[{},{},{},"MPEG standard for a definition of this flag."]},{"entry":[{},{},{},"This value is not used by the decoder chips. However, the value"]},{"entry":[{},{},{},"it holds may be useful to user software to determine whether the"]},{"entry":[{},{},{},"decoder is capable of decoding a particular MPEG data file."]},{"entry":["picture_type","2",{},"During MPEG operation this register holds the picture type of the"]},{"entry":[{},"rw",{},"picture being decoded."]},{"entry":["h_261_pic_type","8",{},"This register is loaded when decoding H.261 data. It holds"]},{"entry":[{},"rw",{},"information about the picture format."]},{"entry":[{},{},{},{"chemistry":{"@attributes":{"id":"CHEM-US-00001","num":"00001"},"img":{"@attributes":{"id":"EMI-C00001","he":"9.74mm","wi":"24.64mm","file":"US06910125-20050621-C00001.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":[{},{},{},"Flags:"]},{"entry":[{},{},{},"s - Split Screen Indicator"]},{"entry":[{},{},{},"d - Document Camera"]},{"entry":[{},{},{},"r - Freeze Picture Release"]},{"entry":[{},{},{},"This value is not used by the decoder chips. However, the"]},{"entry":[{},{},{},"information should be used when configuring horiz_pels, vert_pels"]},{"entry":[{},{},{},"and the display or output device."]},{"entry":["broken_closed","2",{},"During MPEG operation this register holds the broken_link and"]},{"entry":[{},"rw",{},"closed_gap"]},{"entry":[{},{},{},"information for the group of pictures being decoded."]},{"entry":[{},{},{},{"chemistry":{"@attributes":{"id":"CHEM-US-00002","num":"00002"},"img":{"@attributes":{"id":"EMI-C00002","he":"9.74mm","wi":"24.64mm","file":"US06910125-20050621-C00002.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":[{},{},{},"Flags:"]},{"entry":[{},{},{},"C - closed_gap"]},{"entry":["Prediction_mode","5",{},"During MPEG and H.261 operation this register holds the"]},{"entry":[{},"rw",{},"current value of prediction mode."]},{"entry":[{},{},{},{"chemistry":{"@attributes":{"id":"CHEM-US-00003","num":"00003"},"img":{"@attributes":{"id":"EMI-C00003","he":"9.74mm","wi":"24.64mm","file":"US06910125-20050621-C00003.TIF","alt":"embedded image","img-content":"table","img-format":"tif"}}}}]},{"entry":[{},{},{},"Flags:"]},{"entry":[{},{},{},"h - enable H.261 loop filter"]},{"entry":[{},{},{},"y - reset backward vector prediction."]},{"entry":["vbv_delay","16",{},"This register is loaded when decoding MPEF data with a value"]},{"entry":[{},"rw",{},"indicating the minimum start-up delay before decoding should start."]},{"entry":[{},{},{},"See the MPEG standard for a definition of this value."]},{"entry":[{},{},{},"This value is not used by the decoder chips. However, the value it"]},{"entry":[{},{},{},"holds may be useful to user software when configuring the decoder"]},{"entry":[{},{},{},"start-up registers."]},{"entry":["pic_number","8",{},"This register holds the picture number for the pictures that is currently"]},{"entry":[{},"rw",{},"being decoded by the Video Demux. This number was generated by"]},{"entry":[{},{},{},"the start code detector when this picture arrived there."]},{"entry":[{},{},{},"See Table A.11.2 for a description of the picture number."]},{"entry":["dummy_last_picture","1","0","These registers are also visible at the top level. See Table A.14.1"]},{"entry":[{},"rw"]},{"entry":["field_info","1","0"]},{"entry":[{},"rw"]},{"entry":["continue","1","0"]},{"entry":[{},"rw"]},{"entry":["rom_revision","8"]},{"entry":[{},"rw"]},{"entry":["coding_standard","2",{},"This register is loaded by the CODING_STANDARD Token to"]},{"entry":[{},"ro",{},"configure"]},{"entry":[{},{},{},"the Video Demux's mode of operation."]},{"entry":[{},{},{},"See section A 21.1."]},{"entry":["restart_interval","8",{},"This register is loaded when decoding JPEG data with a value"]},{"entry":[{},"rw",{},"indicating the minimum start-up delay before decoding should start."]},{"entry":[{},{},{},"See the MPEG standard for a definition of this value."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1011","num":"1170"},"tables":{"@attributes":{"id":"TABLE-US-00077","num":"00077"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"301pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Register to Token cross reference"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["register","Token","standard","comment"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["component_name_n","COMPONENT_NAME","JPEG","In coded data."]},{"entry":[{},{},"MPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["horiz_pels","HORIZONTAL_SIZE","MPEG","in coded data."]},{"entry":["vert_pels","VERTICAL_SIZE","JPEG"]},{"entry":[{},{},"H.261","automatically derived from picture"]},{"entry":[{},{},{},"type."]},{"entry":["horiz_macroblocks","HORIZONTAL_MBS","MPEG","control software must derive from"]},{"entry":["vert_macroblocks","VERTICAL_MBS","JPEG","horizontal and vertical picture size."]},{"entry":[{},{},"H.261","automatically derived from picture"]},{"entry":[{},{},{},"type."]},{"entry":["max_h","DEFINE_MAX_SAMPLING","MPEG","control software must configure."]},{"entry":["max_v",{},{},"Sampling structure is fixed by"]},{"entry":[{},{},{},"standard."]},{"entry":[{},{},"JPEG","in coded data."]},{"entry":[{},{},"H.261","automatically configured for 4 2.0"]},{"entry":[{},{},{},"video."]},{"entry":["max_component_id","MAX_COMP_ID","MPEG","control software must configure"]},{"entry":[{},{},{},"Sampling structure is fixed by"]},{"entry":[{},{},{},"standard."]},{"entry":[{},{},"JPEG","in coded data."]},{"entry":[{},{},"H.261","automatically configure for 4.2.0"]},{"entry":[{},{},{},"video."]},{"entry":["tq_0","JPEG_TABLE_SELECT","JPEG","in coded data."]},{"entry":["tq_1",{},"MPEG","not used in standard."]},{"entry":["tq_2",{},"H.261"]},{"entry":"tq_3"},{"entry":["blocks_h_0","DEFINE_SAMPLING","MPEG","control software must configure."]},{"entry":["blocks_h_1",{},{},"Sampling structure is fixed by"]},{"entry":["blocks_h_2",{},{},"standard."]},{"entry":["blocks_h_3",{},"JPEG","in coded data."]},{"entry":["blocks_v_0",{},"H.261","automatically configured for 4 2.0"]},{"entry":["blocks_v_1",{},{},"video."]},{"entry":"blocks_v_2"},{"entry":"blocks_v_3"},{"entry":["dc_huff_0","in scan header data","JPEG","in coded data."]},{"entry":["dc_huff_1","MPEG_DCH_TABLE","MPEG","control sofware must configure."]},{"entry":["dc_huff_2",{},"H.261","not used in standard."]},{"entry":"dc_huff_3"},{"entry":["ac_huff_0","in scan header data","JPEG","in coded data."]},{"entry":["ac_huff_1",{},"MPEG","not used in standard."]},{"entry":["ac_huff_2",{},"H.261"]},{"entry":"ac_huff_3"},{"entry":["dc_bits_0[15:0]","in DATA Token following","JPEG","in coded data."]},{"entry":["dc_bits_1[15:0]","DHT_MARKER Token"]},{"entry":["dc_huffval_0[11:0]",{},"MPEG","control software must configure."]},{"entry":["dc_huffval_1[11:0]",{},"H.261","not used in standard"]},{"entry":"dc_zssss_0"},{"entry":"dc_zssss_1"},{"entry":["ac_bits_0[15:0]","in DATA Token following","JPEG","in coded data."]},{"entry":["ac_bits_1[15:0]","DHT_MARKER Token"]},{"entry":["ac_huffval_0[161:0]",{},"MPEG","not used in standard."]},{"entry":["ac_huffval_1[161:0]",{},"H.261"]},{"entry":"ac_eob_0"},{"entry":"ac_eob_1"},{"entry":"ac_zrl_0"},{"entry":"ac_zrl_1"},{"entry":["buffer_size","VBV_BUFFER_SIZE","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["pel_aspect","PEL_ASPECT","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["bit_rate","BIT_RATE","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["pic_rate","PICTURE_RATE","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["constrained","CONSTRAINED","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["picture_type","PICTURE_TYPE","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["broken_closed","BROKEN_CLOSED","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["prediction_mode","PREDICTION_MODE","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["h_261_pic_type","PICTURE_TYPE","MPEG","not relevant"]},{"entry":[{},"(when standard is H.261)","JPEG"]},{"entry":[{},{},"H.261","in coded data."]},{"entry":["vbv_delay","VBV_DELAY","MPEG","in coded data."]},{"entry":[{},{},"JPEG","not used in standard"]},{"entry":[{},{},"H.261"]},{"entry":["pic_number","Carried by:","MPEG","Generated by start code detector."]},{"entry":[{},"PICTURE_START","JPEG"]},{"entry":[{},{},"H.261"]},{"entry":["coding_standard","CODING_STANDARD","MPEG","configured in start code by control"]},{"entry":[{},{},"JPEG","software detector."]},{"entry":[{},{},"H.261"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In the present invention, picture dimensions are described to the Spatial Decoder in 2 different units: pixels and macroblocks. JPEG and MPEG both communicate picture dimensions in pixels. Communicating the dimensions in pixels determine the area of the buffer that contains the valid data; this may be smaller than the total buffer size. Communicating dimensions in macroblocks determines the size of buffer required by the decoder. The macroblock dimensions must be derived by the user from the pixel dimensions. The Spatial Decoder registers associated with this information are: horiz_pels, vert_pels, horiz_macroblocks and vert_macroblocks.","The Spatial Decoder registers, blocks_h_n, blocks_v_n, max_h, max_v and max_component_id specify the composition of the macroblocks (minimum coding units in JPEG). Each is a 2 bit register than can hold values in the range 0 to 3. All except max_component_id specify a block count of 1 to 4. For example, if register max_h holds 1, then a macroblock is two blocks wide. Similarly, max_component_id specifies the number of different color components involved.",{"@attributes":{"id":"p-1014","num":"1173"},"tables":{"@attributes":{"id":"TABLE-US-00078","num":"00078"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuration for various macroblock formats"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2:1:1","4:2:2","4:2:0","1:1:1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"max_h","1","1","1","0"]},{"entry":[{},"max_v","0","1","1","0"]},{"entry":[{},"max_component_id","2","2","2","2"]},{"entry":[{},"blocks_h_0","1","1","1","0"]},{"entry":[{},"blocks_h_1","0","0","0","0"]},{"entry":[{},"blocks_h_2","0","0","0","0"]},{"entry":[{},"blocks_h_3","x","x","x","x"]},{"entry":[{},"blocks_v_0","0","1","1","0"]},{"entry":[{},"blocks_v_1","0","1","0","0"]},{"entry":[{},"blocks_v_2","0","1","0","0"]},{"entry":[{},"blocks_v_3","x","x","x","x"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"5","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},"In the invention, Huffman table descriptions are provided to the Spatial decoder via the format used by JPEG to communicate table descriptions between encoders and decoders. There are two elements to each table description: BITS and HUFFVAL. For a full description of how tables are encoded, the user is directed to the JPEG specification.","A.14.3.1.1 Bits","BITS is a table of values that describes how many different symbols are encoded with each length of VLC. Each entry is an 8 bit value. JPEG permits VLCs with up to 16 bits long, so there are 16 entries in each table.","The BITS[] describes how many different 1 bit VLCs exist while BITS[] describes how many different 2 bit VLCs exist and so forth.","A.14.3.1.2 HUFFVAL","HUFFVAL is table of 8 bit data values arranged in order of increasing VLC length. The size of this table will depend on the number of different symbols that can be encoded by the VLC.","The JPEG specification describes in further detail how Huffman coding tables can be encoded or decoded into this format.","A.14.3.1.3 Configuration by Tokens","In a JPEG bitstream, the DHT marker precedes the description of the Huffman tables used to code AC and DC coefficients. When the Start Code Detector recognizes a DHT marker, it generates a DHT_MARKER Token and places the Huffman table description in the following DATA Token (see A.11.3.4).","Configuration of AC and DC coefficient Huffman tables within the Spatial Decoder can be achieved by supplying","DATA and DHT_MARKER Tokens to the input of the Spatial Decoder while the Spatial Decoder is configured for JPEG operation. This mechanism can be used for configuring the DC coefficient Huffman tables required for MPEG operation, however, the coding standard of the Spatial Decoder must be set to JPEG while the tables are down loaded.",{"@attributes":{"id":"p-1023","num":"1182"},"tables":{"@attributes":{"id":"TABLE-US-00079","num":"00079"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"371pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Huffman table configuration via Tokens"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"11","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["E","7","6","5","4","3","2","1","0","Token Name",{}]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"11"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"10","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"11","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["1","0","0","0","1","0","1","0","1","CODING_STANDARD",{}]},{"entry":["0","0","0","0","0","0","0","0","1","1 = JPEG",{}]},{"entry":["0","0","0","0","1","1","1","0","0","DHT_MARKER",{}]},{"entry":["1","0","0","0","0","0","1","x","x","DATA",{}]},{"entry":["1","t","t","t","t","t","t","t","t","T-Value indicating which Huffman table is","This sequence can be"]},{"entry":[{},{},{},{},{},{},{},{},{},"to be loaded. JPEG allows 4 tables to be downloaded.","repeated to allow"]},{"entry":[{},{},{},{},{},{},{},{},{},"Values 0x00 and 0x01 specify DC","several tables to be"]},{"entry":[{},{},{},{},{},{},{},{},{},"coefficient coding tables 0 and 1","download to a single Token"]},{"entry":[{},{},{},{},{},{},{},{},{},"Values 0x10 and 0x11 specifies AC"]},{"entry":[{},{},{},{},{},{},{},{},{},"coefficient coding tables 0 and 1"]},{"entry":["1","n","n","n","n","n","n","n","n","L-16 words carrying BITS information"]},{"entry":["1","n","n","n","n","n","n","n","n"]},{"entry":["1","n","n","n","n","n","n","n","n","V-Words carrying HUFFVAL information (the"]},{"entry":["*","n","n","n","n","n","n","n","n","number of words depends on the number of different"]},{"entry":[{},{},{},{},{},{},{},{},{},"symbols)."]},{"entry":[{},{},{},{},{},{},{},{},{},"*-the extension bit will be 0 if this is the end of"]},{"entry":[{},{},{},{},{},{},{},{},{},"the DATA Token or 1 if another table description is"]},{"entry":[{},{},{},{},{},{},{},{},{},"contained in the same DATA Token."]},{"entry":{"@attributes":{"namest":"1","nameend":"11","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The AC and DC coefficient Huffman tables can also be written directly to registers via the MPI. See Table A.14.3.\n\n","The Video Demux supports the requirements of MPEG, JPEG and H.261. The coding standard is configured automatically by the CODING_STANDARD Token generated by the Start Code Detector.","A.14.4.1 H.261 Huffman Tables","All the Huffman tables required to decode H.261 are held in ROMs within the Spatial Decoder and more particular in the parser state machine of the Video demux and, therefore require no user intervention.","A.14.4.2 H.261 Picture Structure","H.261 is defined as supporting only two picture formats: CIF and QCIF. The picture format in use is signalled in the PTYPE section of the bitstream. When this data is decoded by the Spatial Decoder, it is placed in the h261_pic_type registers and the PICTURE_TYPE Token. In addition, all the picture and macroblock construction registers are configured automatically.","The information in the various registers is also placed into their related Tokens (see Table A.14.5), and this ensures that other decoder chips (such as the Temporal Decoder) are correctly configured.","A.14.4.3 MPEG Huffman Tables","The majority of the Huffman coding tables required to decode MPEG are held in ROMs within the Spatial Decoder (again, in the parser state machine) and, thus, require no user intervention. The exceptions are the tables required for decoding the DC coefficients of Intral macroblocks. Two tables are required, one for chroma the other for luma. These must be configured by user software before decoding begins.",{"@attributes":{"id":"p-1030","num":"1193"},"tables":{"@attributes":{"id":"TABLE-US-00080","num":"00080"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Automatic settings for H.261"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CIF\/",{},{},{}]},{"entry":["macroblock construction","QCIF","picture construction","CIF","DCIF"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["max_h","1","horiz_pels","352","176"]},{"entry":["max_v","1","vert_pels","288","144"]},{"entry":["max_component_id","2","horiz_macroblocks","22","11"]},{"entry":["blocks_h_0","1","vert_macroblocks","18","9"]},{"entry":["blocks_h_1","0"]},{"entry":["blocks_h_2","0"]},{"entry":["blocks_v_0","1"]},{"entry":["blocks_v_1","0"]},{"entry":["blocks_v_2","0"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},"Table A.14.10 shows the sequence of Tokens required to configure the DC coefficient Huffman tables within the Spatial Decoder. Alternatively, the same results can be obtained by writing this information to registers via the MPI.","The registers dc_huff_n control which DC coefficient Huffman tables are used with each color component. Table A.14.9 shows how they should be configured for MPEG operation. This can be done directly via the MPI or by using the MPEG_DCH_TABLE Token.",{"@attributes":{"id":"p-1033","num":"1196"},"tables":{"@attributes":{"id":"TABLE-US-00081","num":"00081"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE A.14.9"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MPEG DC Huffman table selection via MPI"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dc_huff_0","0"]},{"entry":[{},"dc_huff_1","1"]},{"entry":[{},"dc_huff_2","1"]},{"entry":[{},"dc_huff_3","x"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-1034","num":"1197"},"tables":{"@attributes":{"id":"TABLE-US-00082","num":"00082"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"MPEG DC Huffman table configuration"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["E","[7:0]","Token Name"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["1","0x15","CODING_STANDARD"]},{"entry":["0","0x01","1 = JPEG"]},{"entry":["0","0x1C","DHT_MARKER"]},{"entry":["1","0x04","DATA (could be any colour component,"]},{"entry":[{},{},"0 is used in this example)"]},{"entry":["1","0x00","0 indicates that this Huffman table"]},{"entry":[{},{},"is DC coefficient coding table 0"]},{"entry":["1","0x00","16 words carrying BITS information describing a total of 9"]},{"entry":["1","0x02","different VLCs:"]},{"entry":["1","0x03","2, 2 bit codes"]},{"entry":["1","0x01","3, 3 bit codes"]},{"entry":["1","0x01","1, 4 bit codes"]},{"entry":["1","0x01","1, 5 bit codes"]},{"entry":["1","0x01","1, 6 bit codes"]},{"entry":["1","0x00","1, 7 bit codes"]},{"entry":["1","0x00","If configuring via the MPI rather than with"]},{"entry":["1","0x00","Tokens these values would be written into the"]},{"entry":["1","0x00","dc_bits_0[15:0] registers."]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x01","9 words carrying HUFFVAL information"]},{"entry":["1","0x02","If configuring via the MPI rather than with"]},{"entry":["1","0x00","Tokens these values would be written into the"]},{"entry":["1","0x03","dc_huffval_0[11:0] registers."]},{"entry":["1","0x04"]},{"entry":["1","0x05"]},{"entry":["1","0x06"]},{"entry":["1","0x07"]},{"entry":["0","0x08"]},{"entry":["0","0x1C","DHT_MARKER"]},{"entry":["1","0x04","DATA (could be any colour component,"]},{"entry":[{},{},"0 is used in this example)"]},{"entry":["1","0x01","1 indicates that this Huffman table is"]},{"entry":[{},{},"DC coefficient coding table 1"]},{"entry":["1","0x00","16 words carrying BITS information describing a total of 9"]},{"entry":["1","0x03","different VLCs:"]},{"entry":["1","0x01","3, 2 bit codes"]},{"entry":["1","0x01","1, 3 bit codes"]},{"entry":["1","0x01","1, 4 bit codes"]},{"entry":["1","0x01","1, 5 bit codes"]},{"entry":["1","0x01","1, 6 bit codes"]},{"entry":["1","0x01","1, 7 bit codes"]},{"entry":["1","0x00","1, 8 bit codes"]},{"entry":["1","0x00","If configuring via the MPI rather than with"]},{"entry":["1","0x00","Tokens these values would be written into the"]},{"entry":["1","0x00","dc_bits_1[15:0] registers."]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00"]},{"entry":["1","0x00","9 words carrying HUFFVAL information"]},{"entry":["1","0x01","If configuring via the MPI rather than with"]},{"entry":["1","0x02","Tokens these values would be written into the"]},{"entry":["1","0x03","dc_huffval_1[11:0] registers."]},{"entry":["1","0x04"]},{"entry":["1","0x05"]},{"entry":["1","0x06"]},{"entry":["1","0x07"]},{"entry":["0","0x08"]},{"entry":["1","0x04","MPEG_DCH_TABLE"]},{"entry":["0","0x00","Configure so table 0 is used for component 0"]},{"entry":["1","0x05","MPEG_DCH_TABLE"]},{"entry":["0","0x01","Configure so table 1 is used for component 1"]},{"entry":["1","0x06","MPEG_DCH_TABLE"]},{"entry":["0","0x01","Configure so table 1 is used for component 2"]},{"entry":["1","0x15","CODING_STANDARD"]},{"entry":["0","0x02","2 = JPEG"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The macroblock construction defined for MPEG is the same as that used by H.261. The picture dimensions are encoded in the coded data.","For standard 4:2:0 operation, the macroblock characteristics should be configured as indicated in Table A.14.8. This can be done either by writing to the registers as indicated or by applying the equivalent Tokens (see Table A.14.5) to the input of the Spatial Decoder.","The approach taken to configure picture dimensions will depend upon the application. If the picture format is known before decoding starts, then the picture construction registers listed in Table A.14.8 can be initialized with appropriate values. Alternatively, the picture dimensions can be decoded from the coded data and used to configure the Spatial Decoder. In this case the user must service the parser error ERR_MPEG_SEQUENCE, see A.14.8, \u201cChanges at the MPEG sequence layer\u201d.","A.14.4.5 JPEG","Within baseline JPEG, there are a number of encoder options that significantly alter the complexity of the control software required to operate the decoder. In general, the Spatial Decoder has been designed so that the required support is minimal where the following condition is met:\n\n","Furthermore, JPEG allows Huffman coding tables to be down loaded to the decoder. These tables are used when decoding the VLCs describing the coefficients. Two tables are permitted per scan for decoding DC coefficients and two for the AC coefficients.","There are three different types of JPEG file: Interchange format, an abbreviated format for compressed image data, and an abbreviated format for table data. In an interchange format file there is both compressed image data and a definition of all the tables (Huffman, Quantization etc.) required to decode the image data. The abbreviated image data format file omits the table definitions. The abbreviated table format file only contains the table definitions.","The Spatial Decoder will accept all three formats. However, abbreviated image data files can only be decoded if all the required tables have been defined. This definition can be done via either of the other two JPEG file types, or alternatively, the tables could be set-up by user software.","If each scan uses a different set of Huffman tables, then the table definitions are placed (by the encoder) in the coded data before each scan. These are automatically loaded by the Spatial Decoder for use during this and any subsequent scans.","To improve the performance of the Huffman decoding, certain commonly used symbols are specially cased. These are: DC coefficient with magnitude , end of block AC coefficients and run of 16 zero AC coefficients. The values for these special cases should be written into the appropriate registers.","A.14.4.6.1 Table Selection","The registers dc_huff_n and ac_huff_n control which AC and DC coefficient Huffman tables are used with which color component. During JPEG operation, these relationships are defined by the TDand Tafields of the scan header syntax.","A.14.4.7 JPEG Picture Structure","There are two distinct levels of baseline JPEG decoding supported by the Spatial Decoder: up to 4 components per frame (N\u22664) and greater than 4 components per frame (N>4). If N>4 is used, the control software required becomes more complex.","A.14.4.7.1 Nf\u22664","The frame component specification parameters contained in the JPEG frame header configure the macroblock construction registers (see Table A.14.8) when they are decoded. No user intervention is required, as all the specifications required to decode the 4 different color components as defined.","For further details of the options provided by JPEG the reader should study the JPEG specification. Also, there is a short description of JPEG picture formats in \u00a7 A.16.1.","A.14.4.7.2 JPEG with More than 4 Components","The Spatial Decoder can decode JPEG files containing up to 256 different color components (the maximum permitted by JPEG). However, additional user intervention is required if more than 4 color component are to be decoded. JPEG only allows a maximum of 4 components in any scan. only allows a maximum of 4 components in any scan.","A.14.4.8 Non-standard Variants","As stated above, the Spatial Decoder supports some picture formats beyond those defined by JPEG and MPEG.","JPEG limits minimum coding units so that they contain no more than 10 blocks per scan. This limit does not apply to the Spatial Decoder since it can process any minimum coding unit that can be described by blocks_h_n, blocks_v_n, max_h and max_v.","MPEG is only defined for 4:2:0 macroblocks (see Table A.14.8). However, the Spatial Decoder can process three other component macroblock structures, (e.g., 4:2:2.","A.14.5 Video Events and Errors","The Video Demux can generate two types of events: parser events and Huffman events. See A.6.3, \u201cInterrupts\u201d, for a description of how to handle events and interrupts.","A.14.5.1 Huffman Events","Huffman events are generated by the Huffman decoder. The event which is indicated in huffman_event and huffman_mask determines whether an interrupt is generated. If huffman_mask is set to 1, an interrupt will be generated and the Huffman decoder will halt. The register huffman_error_code[:] will hold a value indicating the cause of the event.","If 1 is written to huffman_event after servicing the interrupt, the Huffman decoder will attempt to recover from the error. Also, if huffman_mask was set to 0 (masking the interrupt and not halting the Huffman decoder) the Huffman decoder will attempt to recover from the error automatically.","A.14.5.2 Parser Events","Parser events are generated by the Parser. The event is indicated in parser_event. Thereafter, parser_mask determines whether an interrupt is generated. If parser_mask is set to 1, an interrupt will be generated and the Parser will halt. The register parser_error_coder[:] will hold a value indicating the cause of event.","If 1 is written to huffman_event after servicing the interrupt, the Huffman decoder will attempt to recover from the error. Also, if huffman_mask was set to 0 (masking the interrupt and not halting the Huffman decoder) the Huffman decoder will attempt to recover form the error automatically.","If 1 is written to parser_event after servicing the interrupt, the Parser will start operation again. If the event indicated a bitstream error, the Video Demux will attempt to recover from the error.","If parser_mask was set to 0, the Parser will set its event bit, but will not generate an interrupt or halt. It will continue operation and attempt to recover from the error automatically.",{"@attributes":{"id":"p-1059","num":"1223"},"tables":{"@attributes":{"id":"TABLE-US-00083","num":"00083"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Huffman error codes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["huffman_error_code",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["[2]","[1]","[0]","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["0","0","0","No error. This error should not occur during"]},{"entry":[{},{},{},"normal operation"]},{"entry":["x","0","1","Failed to find terminal code in VLC within 15"]},{"entry":[{},{},{},"bits."]},{"entry":["x","1","0","Found serial data when Token expected"]},{"entry":["x","1","1","Found Token when serial data expected"]},{"entry":["1","x","x","Information describing more than 64"]},{"entry":[{},{},{},"coefficients for a single block was decoded"]},{"entry":[{},{},{},"indicating a bitstream error. The block"]},{"entry":[{},{},{},"output by the Video Demux will contain"]},{"entry":[{},{},{},"only 64 coefficients."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1060","num":"1224"},"tables":{"@attributes":{"id":"TABLE-US-00084","num":"00084"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Parser error codes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["parser_error_code[7:0]","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0x00","ERR_NO_ERROR"]},{"entry":[{},"No Parser error has occured, this event"]},{"entry":[{},"should not occur during normal operation."]},{"entry":["0x10","ERR_EXTENSION_TOKEN"]},{"entry":[{},"An EXTENSION_DATA Token has been"]},{"entry":[{},"detected by the Parser. The detection of"]},{"entry":[{},"this Token should preceed a DATA Token"]},{"entry":[{},"that contains the extension data. See A.14.6"]},{"entry":["0x11","ERR_EXTENSION_DATA"]},{"entry":[{},"Following the detection of an"]},{"entry":[{},"EXTENSION_DATA Token,"]},{"entry":[{},"a DATA Token containing the extension data"]},{"entry":[{},"has been detected. See A.14.6"]},{"entry":["0x12","ERR_USER_TOKEN"]},{"entry":[{},"A USER_DATA Token has been detected"]},{"entry":[{},"by the Parser. The detection of this Token"]},{"entry":[{},"should preceed a DATA Token that contains"]},{"entry":[{},"the user data. See A.14.6"]},{"entry":["0x13","ERR_USER_DATA"]},{"entry":[{},"Following the detection of a USER_DATA"]},{"entry":[{},"Token, a DATA Token containing the user"]},{"entry":[{},"data has been detedcted. See A.14.6"]},{"entry":["0x20","ERR_PSPARE"]},{"entry":[{},"H.261 PSARE information has been"]},{"entry":[{},"detected see A.14.7"]},{"entry":["0x21","ERR_GSPARE"]},{"entry":[{},"H.261 GSARE information has been"]},{"entry":[{},"detected see A.14.7"]},{"entry":["0x22","ERR_PTYPE"]},{"entry":[{},"The value of the H.261 picture type has"]},{"entry":[{},"changed. The register h_261_pic_type can be"]},{"entry":[{},"inspected to see what the new value is."]},{"entry":["0x30","ERR_JPEG_FRAME"]},{"entry":["0x31","ERR_JPEG_FRAME_LAST"]},{"entry":["0x32","ERR_JPEG_SCAN"]},{"entry":[{},"Picture size or Ns changed"]},{"entry":["0x33","ERR_JPEG_SCAN_COMP"]},{"entry":[{},"Component Change!"]},{"entry":["0x34","ERR_DNL_MARKER"]},{"entry":["0x40","ERR_MPEG_SEQUENCE"]},{"entry":[{},"One of the parameters communicated in the"]},{"entry":[{},"MPEG sequence layer has changed. See A.14.8"]},{"entry":["0x41","ERR_EXTRA_PICTURE"]},{"entry":[{},"MPEG extra_information_picture"]},{"entry":[{},"has been detected see A.14.7"]},{"entry":["0x42","ERR_EXTRA_SLICE"]},{"entry":[{},"MPEG extra_information_slice"]},{"entry":[{},"has been detected see A.14.7"]},{"entry":["0x43","ERR_VBV_DELAY"]},{"entry":[{},"The VBV_DELAY parameter for the first"]},{"entry":[{},"picture in a new MPEG video sequence"]},{"entry":[{},"has been detected by the Video Demux. The"]},{"entry":[{},"new value of delay is available in the register"]},{"entry":[{},"vbv_delay."]},{"entry":[{},"The first picture of a new sequence is defined"]},{"entry":[{},"as the first picture after a sequence end."]},{"entry":[{},"FLUSH or reset."]},{"entry":["0x80","ERR_SHORT_TOKEN"]},{"entry":[{},"An incorrectly formed Token has been"]},{"entry":[{},"detected. This error should not"]},{"entry":[{},"occur during normal operation."]},{"entry":["0x90","ERR_H.261_PIC_END_UNEXPECTED"]},{"entry":[{},"During H261 operation the end of a picture has"]},{"entry":[{},"been encountered at an unexpected position."]},{"entry":[{},"This is likely to indicate an error in the"]},{"entry":[{},"coded data."]},{"entry":["0x91","ERR_GN_BACKUP"]},{"entry":[{},"During H.261 operation a group of blocks"]},{"entry":[{},"has been encountered with a group number"]},{"entry":[{},"less than that expected. This is likely"]},{"entry":[{},"to indicate an error in the coded data."]},{"entry":["0x92","ERR_GN_SKIP_GOB"]},{"entry":[{},"During H.261 operation a group of blocks"]},{"entry":[{},"has been encountered with a group number"]},{"entry":[{},"greater than that expected. This is likely"]},{"entry":[{},"to indicate  an error in the coded data."]},{"entry":["0xA0","ERR_NBASE_TAB"]},{"entry":[{},"During JPEG operation there has been an"]},{"entry":[{},"attempt to down load a Huffman table that is"]},{"entry":[{},"not supported by baseline JPEG (baseline"]},{"entry":[{},"JPEG only supports tables 0 and 1 for"]},{"entry":[{},"entropy coding)."]},{"entry":["0xA1","ERR_QUANT_PRECISION"]},{"entry":[{},"During JPEG operation there has been an"]},{"entry":[{},"attempt to down load a quantisation table that"]},{"entry":[{},"is not supported by baseline JPEG (baseline"]},{"entry":[{},"JPEG only supports 8 bit precision in"]},{"entry":[{},"quantisation tables)."]},{"entry":["0xA2","ERR_SAMPLE_PRECISION"]},{"entry":[{},"During JPEG operation there has been an"]},{"entry":[{},"attempt to specify a sample precision greater"]},{"entry":[{},"than that supported by baseline JPEG (baseline"]},{"entry":[{},"JPEG only supports 8 bit precision)."]},{"entry":["0xA3","ERR_NBASE_SCAN"]},{"entry":[{},"One or more of the JPEG scan header para-"]},{"entry":[{},"meters Ss, Se. Ah and Al is set to a value \u201c0\u201d."]},{"entry":[{},"supported by baseline JPEG (indicating spectral"]},{"entry":[{},"selection and\/or successive approximation"]},{"entry":[{},"which are not supported in baseline JPEG)."]},{"entry":["0xA4","ERR_UNEXPECTED_DNL"]},{"entry":[{},"During JPEG operation a DNL marker has been"]},{"entry":[{},"encountered in a scan that is not the"]},{"entry":[{},"first scan in a frame."]},{"entry":["0xA5","ERR_EOS_UNEXPECTED"]},{"entry":[{},"During JPEG operation an EOS marker has"]},{"entry":[{},"been encountered in an unexpected place"]},{"entry":["0xA6","ERR_RESTART_SKIP"]},{"entry":[{},"During JPEG operation a restart marker has"]},{"entry":[{},"been encountered either in an unexpected"]},{"entry":[{},"place or the value of the restart marker is"]},{"entry":[{},"uexpected if a restart marker is not found"]},{"entry":[{},"when one is expected the Huffman event"]},{"entry":[{},"\u201cFound serial data when Token"]},{"entry":[{},"expected\u201d will be generated."]},{"entry":["0xB0","ERR_SKIP_INTRA"]},{"entry":[{},"During MPEG operation, a macro block with a"]},{"entry":[{},"macro block address increment greater"]},{"entry":[{},"than 1 has been found within an intra"]},{"entry":[{},"(I) picture. This is illegal and"]},{"entry":[{},"probably indicates a bitstream error."]},{"entry":["0xB1","ERR_SKIP_DINTRA"]},{"entry":[{},"During MPEG operation, a macro block with a"]},{"entry":[{},"macro block address increment greater than 1"]},{"entry":[{},"has been found within an DC only (D) picture."]},{"entry":[{},"This is illegal and probably indicates a"]},{"entry":[{},"bitstream error."]},{"entry":["0xB2","ERR_BAD_MARKER"]},{"entry":[{},"During MPEG operation, a marker bit did not"]},{"entry":[{},"have the expected value. This is probably"]},{"entry":[{},"indicates a bitstream error."]},{"entry":["0xB3","ERR_D_MBTYPE"]},{"entry":[{},"During MPEG operation, within a DC only (D)"]},{"entry":[{},"picture, a macroblock was found with a"]},{"entry":[{},"macroblock type other than 1. This is"]},{"entry":[{},"illegal and probably indicates a bitstream error."]},{"entry":["0xB4","ERR_D_MBEND"]},{"entry":[{},"During MPEG operation, within a DC only (D)"]},{"entry":[{},"picture, a macroblock was found with 0 in"]},{"entry":[{},"it's end of macroblock bit. This is illegal"]},{"entry":[{},"and probably indicates a bistream error."]},{"entry":["0xB5","ERR_SVP_BACKUP"]},{"entry":[{},"During MPEG operation, a slice has been"]},{"entry":[{},"encountered with a slice vertical position less"]},{"entry":[{},"than that expected. This is likely to indicate"]},{"entry":[{},"an error in the coded data"]},{"entry":["0xB6","ERR_SVP_SKIP_ROWS"]},{"entry":[{},"During MPEG operation, a slice has been"]},{"entry":[{},"encountered with a slice vertical position"]},{"entry":[{},"greater than that expected. This is likely to"]},{"entry":[{},"indicate an error in the coded data."]},{"entry":["0xB7","ERR_FST_MBA_BACKUP"]},{"entry":[{},"During MPEG operation, a macroblock has"]},{"entry":[{},"been encountered with a macroblock address"]},{"entry":[{},"less than that expected. This is likely"]},{"entry":[{},"to indicate an error in the coded data."]},{"entry":["0xB8","ERR_FST_MBA_SKIP"]},{"entry":[{},"During MPEG operation, a macoblock has been"]},{"entry":[{},"encountered with a macro block address greater"]},{"entry":[{},"than that expected. This is likely to indicate"]},{"entry":[{},"an error in the coded data."]},{"entry":["0xB9","ERR_PICTURE_END_UNEXPECTED"]},{"entry":[{},"During MPEG operation, a PICTURE_END"]},{"entry":[{},"Token has been encountered in an unexpected"]},{"entry":[{},"place. This is likely to indicate an error in the"]},{"entry":[{},"coded data."]},{"entry":["0xE0 . . . 0xEF","Errors reserved for internal test programs"]},{"entry":["0xE0","ERR_TST_PROGRAM"]},{"entry":[{},"Mysteriously arrived in the test program"]},{"entry":["0xE1","ERR_NO_PROGRAM"]},{"entry":[{},"If the test program is not compiled in"]},{"entry":["0xE2","ERR_TST_END"]},{"entry":[{},"End of Test"]},{"entry":["0xF0 . . . 0xFF","Reserved errors"]},{"entry":["0xF0","ERR_UCODE_ADDR"]},{"entry":[{},"fell of the end of the world"]},{"entry":["0xF1","ERR_NOT_IMPLEMENTED"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Each standard uses a different sub-set of the defined Parser error codes.",{"@attributes":{"id":"p-1062","num":"1226"},"tables":{"@attributes":{"id":"TABLE-US-00085","num":"00085"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.14.13"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Parser error codes and the different standards"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Token Name","MPEG","JPEG","H.261"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["ERR_NO_ERROR","\u2713","\u2713","\u2713"]},{"entry":["ERR_EXTENSION_TOKEN","\u2713","\u2713"]},{"entry":["ERR_EXTENSION_DATA","\u2713","\u2713"]},{"entry":["ERR_USER_TOKEN","\u2713","\u2713"]},{"entry":["ERR_USER_DATA","\u2713","\u2713"]},{"entry":["ERR_PSPARE",{},{},"\u2713"]},{"entry":["ERR_GSPARE",{},{},"\u2713"]},{"entry":["ERR_PTYPE",{},{},"\u2713"]},{"entry":["ERR_JPEG_FRAME",{},"\u2713"]},{"entry":["ERR_JPEG_FRAME_LAST",{},"\u2713"]},{"entry":["ERR_JPEG_SCAN",{},"\u2713"]},{"entry":["ERR_JPEG_SCAN_COMP",{},"\u2713"]},{"entry":["ERR_DNL_MARKER",{},"\u2713"]},{"entry":["ERR_MPEG_SEQUENCE","\u2713"]},{"entry":["ERR_EXTRA_PICTURE","\u2713"]},{"entry":["ERR_EXTRA_SLICE","\u2713"]},{"entry":["ERR_VBV_DELAY","\u2713"]},{"entry":["ERR_SHORT_TOKEN","\u2713","\u2713","\u2713"]},{"entry":["ERR_H261_PIC_END_UNEXPECTED",{},{},"\u2713"]},{"entry":["ERR_GN_BACKUP",{},{},"\u2713"]},{"entry":["ERR_GN_SKIP_GOB",{},{},"\u2713"]},{"entry":["ERR_NBASE_TAB",{},"\u2713"]},{"entry":["ERR_QUANT_PRECISION",{},"\u2713"]},{"entry":["ERR_SAMPLE_PRECISION",{},"\u2713"]},{"entry":["ERR_NBASE_SCAN",{},"\u2713"]},{"entry":["ERR_UNEXPECTED_DNL",{},"\u2713"]},{"entry":["ERR_EOS_UNEXPECTED",{},"\u2713"]},{"entry":["ERR_RESTART_SKIP",{},"\u2713"]},{"entry":["ERR_SKIP_INTRA","\u2713"]},{"entry":["ERR_SKIP_DINTRA","\u2713"]},{"entry":["ERR_BAD_MARKER","\u2713"]},{"entry":["ERR_D_MBTYPE","\u2713"]},{"entry":["ERR_D_MBEND","\u2713"]},{"entry":["ERR_SVP_BACKUP","\u2713"]},{"entry":["ERR_SVP_SKIP_ROWS","\u2713"]},{"entry":["ERR_FST_MBA_BACKUP","\u2713"]},{"entry":["ERR_FST_MBA_SKIP","\u2713"]},{"entry":["ERR_PICTURE_END_UNEXPECTED","\u2713"]},{"entry":["ERR_TST_PROGRAM","\u2713","\u2713","\u2713"]},{"entry":["ERR_NO_PROGRAM","\u2713","\u2713","\u2713"]},{"entry":["ERR_TST_END","\u2713","\u2713","\u2713"]},{"entry":["ERR_UCODE_ADDR","\u2713","\u2713","\u2713"]},{"entry":["ERR_NOT_IMPLEMENTED","\u2713","\u2713","\u2713"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"MPEG and JPEG use similar mechanisms to embed user and extension data. The data is preceded by a start\/marker code. The Start Code Detector can be configured to delete this data (see A.11.3.3) if the application has no interest in such data.","A.14.6.1 Identifying the Source of the Data","The Parser events, ERR_EXTENSION_TOKEN and ERR_USER_TOKEN, indicate the arrival of the EXTENSION_DATA or USER_DATA Token at the Video Demux. If these Tokens have been generated by the Start Code Detector, (see A.11.3.3) they will carry the value of the start\/marker code that caused the Start Code Detector to generate the Token (see Table A.11.4). This value can be read by reading the rom_revision register while servicing the Parser interrupt. The Video Demux will remain halted until 1 is written to parser_event (see A.6.3, \u201cInterrupts\u201d).","A.14.6.2 Reading the Data","The EXTENSION_DATA and USER_DATA Tokens are expected to be immediately followed by a DATA Token carrying the extension or user data. The arrival of this DATA Token at the Video Demux will generate either an ERR_EXTENSION_DATA or an ERR_USER_DATA Parser event. The first byte of the DATA Token can be read by reading the rom_revision register while servicing the interrupt.","The state of the Video Demux register, continue, determines behavior after the event is cleared. If this register holds the value 0, then any remaining data in the DATA Token will be consumed by the Video Demux and no events will be generated. If the continue is set to 1, an event will be generated as each byte of extension or user data arrives at the Video Demux. This continues until the DATA Token is exhausted or continue is set to 0.","Note:\n\n","H.261 and MPEG allow information extending the coding standard to be embedded within pictures and groups of blocks (H.261) or slices (MPEG). The mechanism is different from that used for extension and user data (described in Section A.14.6). No start code precedes the data and, thus, it cannot be deleted by the Start Code Detector.","During H.261 operation, the Parser events ERR_PSPARE and ERR_GSPARE indicate the detection of this information. The corresponding events during MPEG operation are ERR_EXTRA_PICTURE and ERR_EXTRA_SLICE.","When the Parser event is generated, the first byte of the extra information is presented through the register, rom_revision.","The state of the Video Demux register, continue, determines behavior after the event is cleared. If this register holds the value 0, then any remaining extra information will be consumed by the Video Demux and no events will be generated. If the continue is set to 1, an event will be generated as each byte of extra information arrives at the Video Demux. This continues until the extra information is exhausted or continue is set to 0.","Note:\n\n","During MPEG operation, if the register field_info is set to 1, the first byte of any extra_information_picture is placed in the FIELD_INFO Token. This behavior is not covered by the standardization activities of MPEG. Table A.3.2 shows the definition of the FIELD_INFO Token.","If field_info is set to 1, no Parser event will be generated for the first byte of extra_information_picture. However, events will be generated for any subsequent bytes of extra_information_picture. If there is only a single byte of extra_information_picture, no Parser event will occur.","A.14.8 Changes at the MPEG Sequence Layer","The MPEG sequence header describes the following characteristic of the video about to be decoded:\n\n","If any of these parameters change when the Spatial Decoder decodes a sequence header, the Parser event ERR_MPEG_SEQUENCE will be generated.","A.14.8.1 Change in Picture Size","If the picture size has changed, the user's software should read the values in horiz_pels and vert_pels and compute new values to be loaded into the registers horiz_macroblocks and vert_macroblocks.","Section A.15 Spatial Decoding","In accordance with the present invention, the spatial decoding occurs between the output of the Token buffer and the output of the Spatial Decoder.","There are three main units responsible for spatial decoding: the inverse modeler, the inverse quantizer and the inverse discrete cosine transformer. At the input to this section (from the Token buffer) DATA Tokens contain a run and level representation of the quantized coefficients. At the output (of the inverse DCT) DATA Tokens contain 8\u00d78 blocks of pixel information.","A.15.1 The Inverse Modeler","DATA Tokens in the Token buffer contain information about the values of quantized coefficients and the number of zeros between the coefficients that are represented. The Inverse Modeler expands the information about runs of zeros so that each DATA Token contains 64 values. At this point, the values in the DATA Tokens are quantized coefficients.","The inverse modelling process is the same regardless of the coding standard currently being used. No configuration is required.","For a better understanding of the modelling and inverse modelling function all requirements the reader can examine any of the picture coding standards.","A.15.2 Inverse Quantizer","In an encoder, the quantizer divides down the output of the DCT to reduce the resolution of the DCT coefficients. In a decoder, the function of the inverse quantizer is to multiply up these quantized DCT coefficients to restore them to an approximation of their original values.","A.15.2.1 Overview of the Standard Quantization Schemes","There are significant differences in the quantization scheme used by each of the different coding standards. To obtain a detailed understanding of the quantization schemes used by each of the standards the reader should study the relevant coding standards documents.","The register iq_coding_standard configures the operation of the inverse quantizer to meet the requirements of the different standards. In normal operation, this coding register is automatically loaded by the CODING_STANDARD Token. See section A.21.1 for more information about coding standard configuration.","The main difference between the quantization schemes is the source of the numbers by which the quantized coefficients are multiplied. These are outlined below. There are also detail differences in the arithmetic operations required (rounding etc.), which are not described here.","A.15.2.1.1 H.261 IQ Overview","In H.261, a single \u201cscale factor\u201d is used to scale the coefficients. The encoder can change this scale factor periodically to regulate the data rate produced. Slightly different rules apply to the \u201cDC\u201d coefficient in intra coded blocks.","A.15.2.1.2 JPEG IQ Overview","Baseline JPEG allows for a picture that contains up to 4 different color components in each scan. For each of these 4 color components, a 64 entry quantization table can be specified. Each entry in these tables is used as the \u201cscale\u201d factor for one of the 64 quantized coefficients.","The values for the JPEG quantization tables are contained in the coded JPEG data and will be loaded automatically into the quantization tables.","A.15.2.1.3 MPEG IQ Overview","MPEG uses both H.261 and JPEG quantization techniques. Like JPEG, 4 quantization tables, each with 64 entries, can be used. However, use of the tables is quite different.","Two \u201ctypes\u201d of data are considered: intra and non-intra. A different table is used for each data type. Two \u201cdefault\u201d tables are defined by MPEG. One is for use with intra data and the other with non-intra data (see Table A.15.2 and Table A.15.3). These default tables must be written into the quantization table memory of the Spatial Decoder before MPEG decoding is possible.","MPEG also allows two \u201cdown loaded\u201d quantization tables. One is for use with intra data and the other with non-intra data. The values for these tables are contained in the MPEG data stream and will be loaded into the quantization table memory automatically.","The value output from the tables is modified by a scale factor.","A.15.2.2 Inverse Quantizer Registers",{"@attributes":{"id":"p-1094","num":"1267"},"tables":{"@attributes":{"id":"TABLE-US-00086","num":"00086"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.15.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Inverse quantizer registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size\/","Reset",{}]},{"entry":["Register name","Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["iq_access","1","0","This access bit stops the operation"]},{"entry":[{},"rw",{},"of the inverse quantiser so that its"]},{"entry":[{},{},{},"various registers can be accessed"]},{"entry":[{},{},{},"reliably. See A.6.4.1"]},{"entry":["iq_coding_standard","2","0","The register configures the coding"]},{"entry":[{},"rw",{},"standard used by the inverse"]},{"entry":[{},{},{},"quantiser. The register can be"]},{"entry":[{},{},{},"loaded directly or by a"]},{"entry":[{},{},{},"CODING_STANDARD Token."]},{"entry":[{},{},{},"See A.21.1"]},{"entry":["iq_keyhole_address","8","x","Keyhole access to the which holds"]},{"entry":[{},"rw",{},"the 4 quantiser tables. See A.6.4.3"]},{"entry":[{},{},{},"for more information about"]},{"entry":[{},{},{},"accessing registers through a"]},{"entry":["iq_keyhole_data","8","x","keyhole."]},{"entry":[{},"rw"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"In the present invention, the iq_access register must be set before the quantization table memory can be accessed. The quantization table memory will return the value zero if an attempt is made to read it while iq_access is set to 0.","3 A.15.2.3 Configuring the Inverse Quantizer","In normal operation, there is no need to configure the inverse quantizer's coding standard as this will be automatically configured by the CODING_STANDARD Token.","For H.261 operation, the quantizer tables are not used. No special configuration is required. For JPEG operation, the tables required by the inverse quantizer should be automatically loaded with information extracted from the coded data.","MPEG operation requires that the default quantization tables are loaded. This should be done while iq_access is set to 1. The values in Table A.15.2 should be written into locations 0x00 to 0x3F of the inverse quantizer's extended address space (accessible through the keyhole registers iq_keyhole_address and iq_keyhole_data). Similarly, the values in Table A.15.3 should be written into locations 0x40 to 0x7F of the inverse quantizer's extended address space.",{"@attributes":{"id":"p-1099","num":"1272"},"tables":{"@attributes":{"id":"TABLE-US-00087","num":"00087"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.15.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Default MPEG table for intra coded blocks"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"W","i","W","i","W","i","W"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","8","16","27","32","29","48","35"]},{"entry":[{},"1","16","17","27","33","29","49","38"]},{"entry":[{},"2","16","18","26","34","27","50","38"]},{"entry":[{},"3","19","19","26","35","27","51","40"]},{"entry":[{},"4","16","20","26","36","29","52","40"]},{"entry":[{},"5","19","21","26","37","29","53","40"]},{"entry":[{},"6","22","22","27","38","32","54","48"]},{"entry":[{},"7","22","23","27","39","32","55","48"]},{"entry":[{},"8","22","24","27","40","34","56","46"]},{"entry":[{},"9","22","25","29","41","34","57","46"]},{"entry":[{},"10","22","26","29","42","37","58","56"]},{"entry":[{},"11","22","27","29","43","38","59","56"]},{"entry":[{},"12","26","28","34","44","37","60","58"]},{"entry":[{},"13","24","29","34","45","35","61","69"]},{"entry":[{},"14","26","30","34","46","35","62","69"]},{"entry":[{},"15","27","31","29","47","34","63","83"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"left"},"sup":"a"}]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"left"},"sup":"b"}]}]}}]}}},{"@attributes":{"id":"p-1100","num":"1273"},"tables":{"@attributes":{"id":"TABLE-US-00088","num":"00088"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.15.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Default MPEG table for non-intra coded blocks"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"W","i","W ","i","W ","i","W "]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"9"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"char","char":"."}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","16","16","16","32","16","48","16"]},{"entry":[{},"1","16","17","16","33","16","49","16"]},{"entry":[{},"2","16","18","16","34","16","50","16"]},{"entry":[{},"3","16","19","16","35","16","51","16"]},{"entry":[{},"4","16","20","16","36","16","52","16"]},{"entry":[{},"5","16","21","16","37","16","53","16"]},{"entry":[{},"6","16","22","16","38","16","54","16"]},{"entry":[{},"7","16","23","16","39","16","55","16"]},{"entry":[{},"8","16","24","16","40","16","56","16"]},{"entry":[{},"9","16","25","16","41","16","57","16"]},{"entry":[{},"10","16","26","16","42","16","58","16"]},{"entry":[{},"11","16","27","16","43","16","59","16"]},{"entry":[{},"12","16","28","16","44","16","60","16"]},{"entry":[{},"13","16","29","16","45","16","61","16"]},{"entry":[{},"14","16","30","16","46","16","62","16"]},{"entry":[{},"15","16","31","16","47","16","63","16"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"8","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"As an alternative to configuring the inverse quantizer tables via the MPI, they can be initialized by Tokens. These Tokens can be supplied via either the coded data port or the MPI.","The QUANT_TABLE Token is described in Table A.3.2. It has a two bit field tt which specifies which of the 4 (0 to 3) table locations is defined by the Token. For MPEG operation, the default definitions of tables 0 and 1 need to be loaded.","A.15.2.5 Quantization Table Values","For both JPEG and MPEG, the quantization table entries are 8 bit numbers. The values 255 to 1 are legal. The value 0 is illegal.","A.15.2.6 Number Ordering of Quantization Tables","The quantization table values are used in \u201czig-zag\u201d scan order (see the coding standards). The tables should be viewed as a one dimensional array of 64 values (rather than a 8\u00d78 array). The table entries at lower addresses correspond to the lower frequency DCT coefficients.","When quantization table values are carried by a QUANT_TABLE Token, the first value after the Token header is the table entry for the \u201cDC\u201d coefficient.","A.15.2.7 Inverse Quantizer Test Registers",{"@attributes":{"id":"p-1106","num":"1279"},"tables":{"@attributes":{"id":"TABLE-US-00089","num":"00089"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.15.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Inverse quantizer test registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size\/","Reset",{}]},{"entry":["Register Name","Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["iq_quant_scale","5",{},"This register holds the current"]},{"entry":[{},"rw",{},"value of the quantisation scale"]},{"entry":[{},{},{},"factor. It is loaded by the"]},{"entry":[{},{},{},"QUANT_SCALE Token."]},{"entry":[{},{},{},"This is not used during"]},{"entry":[{},{},{},"JPEG operation"]},{"entry":["iq_component","2",{},"This register holds the two bit"]},{"entry":[{},"rw",{},"component ID taken from the most"]},{"entry":[{},{},{},"recent DATA token head. This"]},{"entry":[{},{},{},"value is involved in the selection"]},{"entry":[{},{},{},"of the quantiser table."]},{"entry":[{},{},{},"The register will also hold the table"]},{"entry":[{},{},{},"ID after a QUANT_TABLE"]},{"entry":[{},{},{},"Token arrives to load the table."]},{"entry":["iq_prediction_mode","2",{},"This holds the two LSBs"]},{"entry":[{},"rw",{},"of the most recent"]},{"entry":[{},{},{},"PREDICTION_MODE Token."]},{"entry":["iq_jpeg_indirection","8",{},"This register relates the two bit"]},{"entry":[{},"rw",{},"component ID number of a DATA"]},{"entry":[{},{},{},"Token to the table number of the"]},{"entry":[{},{},{},"quantisation table that should be"]},{"entry":[{},{},{},"used. Bits 1:0 specify the table"]},{"entry":[{},{},{},"number that will be sued with"]},{"entry":[{},{},{},"component 0 Bits 3:2 specify the"]},{"entry":[{},{},{},"table number that will be sued with"]},{"entry":[{},{},{},"component 1"]},{"entry":[{},{},{},"Bits 5:4 specify the table number"]},{"entry":[{},{},{},"that will be sued with component 2"]},{"entry":[{},{},{},"Bits 7:6 specify the table number"]},{"entry":[{},{},{},"that will be sued with component"]},{"entry":[{},{},{},"3. This register is loaded by"]},{"entry":[{},{},{},"JPEG_TABLE_SELECT Tokens."]},{"entry":["iq_mpeg_indirection","8","0.00","This two bit register records"]},{"entry":[{},"rw",{},"whether to use default or down"]},{"entry":[{},{},{},"loaded quantisation tables with the"]},{"entry":[{},{},{},"intra and non-intra data."]},{"entry":[{},{},{},"A 0 in the bit position indicates"]},{"entry":[{},{},{},"that the default table should be"]},{"entry":[{},{},{},"used. A.1 indicates that a down"]},{"entry":[{},{},{},"loaded table should be used. Bit 0"]},{"entry":[{},{},{},"refers to intra data. Bit 1 refers"]},{"entry":[{},{},{},"to non-intra data. This register is"]},{"entry":[{},{},{},"normally loaded by the Token"]},{"entry":[{},{},{},"MPEG_TABLE_SELECT."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The inverse discrete transform processor of the present invention meets the requirements set out in CCITT recommendation H.261, the IEEE specification P1180 and complies with the requirements described in current draft revision of MPEG.","The inverse discrete cosine transform process is the same regardless of which coding standard is used. No, configuration by the user is required.","There are two events associated with the inverse discrete transform processor.",{"@attributes":{"id":"p-1110","num":"1283"},"tables":{"@attributes":{"id":"TABLE-US-00090","num":"00090"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.15.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Inverse DCT event registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Size\/","Reset",{}]},{"entry":["Register name","Dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["idct_too_few_event","1","0","The inverse DCT requires that"]},{"entry":[{},"rw",{},"all DATA Tokens contain"]},{"entry":["idct_too_few_mask","1","0","exactly 64 values. If less than 64"]},{"entry":[{},"rw",{},"values are found then the too-"]},{"entry":[{},{},{},"few event will be generated. If"]},{"entry":[{},{},{},"the mask register is set to 1 then"]},{"entry":[{},{},{},"an interrupt can be generated"]},{"entry":[{},{},{},"and the inverse DCT will halt."]},{"entry":[{},{},{},"This event should only occur"]},{"entry":[{},{},{},"following an error in the"]},{"entry":[{},{},{},"coded data."]},{"entry":["idct_too_many_event","1","0","The Inverse DCT requires that"]},{"entry":[{},"rw",{},"all DATA Tokens contain"]},{"entry":[{},{},{},"exactly 64 values. If more than"]},{"entry":[{},{},{},"64 values are found then the too-"]},{"entry":[{},{},{},"many event will be generated."]},{"entry":["idct_too_many_mask","1","0","If the mask register is set to 1"]},{"entry":[{},"rw",{},"then an interrupt can be"]},{"entry":[{},{},{},"generated and the inverse DCT"]},{"entry":[{},{},{},"will halt."]},{"entry":[{},{},{},"This event should only occur"]},{"entry":[{},{},{},"following an error in the"]},{"entry":[{},{},{},"coded data."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"For a better understanding of the DCT and inverse DCT function the reader can examine any of the picture coding standards.","Section A.16 Connecting to the Output of Spatial Decoder","The output of the Spatial Decoder is a standard Token Port with 9 bit wide data words. See Section A.4 for more information about the electrical behavior of the interface.","The Tokens present at the output will depend on the coding standard employed. By way of example, this section of the disclosure looks at the output of the Spatial Decoder when configured for JPEG operation. This section also describes the Token sequence observed at the output of the Temporal Decoder during JPEG operation as the Temporal Decoder doesn't modify the Token sequence that results from decoding JPEG.","However, MPEG and H.261 both require the use of the Temporal Decoder. See section A.19 for information about connecting to the output of the Temporal Decoder when configured for MPEG and H.261 operation.","Furthermore, this section identifies which of the Tokens are available at the output of the Spatial Decoder and which are most useful when designing circuits to display that output. Other Tokens will be present, but are not needed to display the output and, therefore, are not discussed here.","This section concentrates on showing:\n\n","This section provides an overview of some features of the JPEG syntax. Please refer to the coding standard for full details.","JPEG provides a variety of mechanisms for encoding individual pictures. JPEG makes no attempt to describe how a collection of pictures could be encoded together to provide a mechanism for encoding video.","The Spatial Decoder, in accordance with the present invention, supports JPEG's baseline sequential mode of operation. There are three main levels in the syntax: Image, Frame and Scan. A sequential image only contains a single frame. A frame can contain between 1 and 256 different image (color) components. These image components can be grouped, in a variety of ways, into scans. Each scan can contain between 1 and 4 image components (see  \u201cOverview of JPEG baseline sequential structure\u201d).","If a scan contains a single image component, it is non-interleaved, if it contains more than one image component, it is an interleaved scan. A frame can contain a mixture of interleaved and non-interleaved scans. The number of scans that a frame can contain is determined by the 256 limit on the number of image components that a frame can contain.","Within an interleaved scan, data is organized into minimum coding units (MCUs) which are analogous to the macroblock used in MPEG and H.261. These MCUs are raster ordered within a picture. In a non-interleaved scan, the MCU is a single 8\u00d78 block. Again, these are raster organized.","The Spatial Decoder can readily decode JPEG data containing 1 to 4 different color components. Files describing greater numbers of components can also be decoded. However, some reconfiguration between scans may be required to accommodate the next set of components to be decoded.","A. 16.2 Token Sequence","The JPEG markers codes are converted to an analogous MPEG named Token by the Start Code Detector (see Table A.11.4, see  \u201cTokenized JPEG picture\u201d).","Section A.17 Temporal Decoder",{"@attributes":{"id":"p-1124","num":"0000"},"ul":{"@attributes":{"id":"ul0071","list-style":"none"},"li":["30 MH, operation","Provides temporal decoding for MPEG & H.261 video decoders","H.261 CIF and QCIF formats","MPEG video resolutions up to 704\u00d7480, 30 Hz, 4:2:0","Flexible chroma sampling formats","Can re-order the MPEG picture sequence","Glue-less DRAM interface","Single +5V supply","208 pin PQFP package","Max. power dissipation 2.5 W","Uses standard page mode DRAM"]}},"The Temporal Decoder is a companion chip to the Spatial Decoder. It provides the temporal decoding required by H.261 and MPEG.","The Temporal Decoder implements all the prediction forming features required by MPEG and H.261. With a single 4 Mb DRAM (e.g., 512 k\u00d78) the Temporal Decoder can decode CIF and QCIF H.261 video. With 8 Mb of DRAM (e.g., two 256 k\u00d716) the 704\u00d7480, 30 Hz, 4:2:0 MPEG video can be decoded.","The Temporal Decoder is not required for Intra coding schemes (such as JPEG). If included in a multi-standard decoder, the Temporal Decoder will pass decoded JPEG pictures through to its output.","Note: The above values are merely illustrative, by way of example and not necessarily by way of limitation, of one embodiment of the present invention. It will be appreciated that other values and ranges may also be used without departing from the invention.\n\nA.17.1 Temporal Decoder Signals\n",{"@attributes":{"id":"p-1129","num":"1316"},"tables":{"@attributes":{"id":"TABLE-US-00091","num":"00091"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"329pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporal Decoder signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal Name","I\/O","Pin Number","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["in_data[8:0]","I","173, 172, 171, 169, 168, 167, 166, 164, 163","Input Port. This is a standard two wire"]},{"entry":["in_extn","I","174","interface normally connected to the"]},{"entry":["in_valid","I","162","Output Port of the Spatial Decoder"]},{"entry":["in_accept","O","161","See sections A.4 and A.181"]},{"entry":["{overscore (enable)}[1:0]","I","126, 127","Micro Processor Interface (MPI)"]},{"entry":["{overscore (rw)}","I","125","See A.6.1. on page 69"]},{"entry":["addr[7:0]","I","137, 136, 135, 133, 132, 131, 130, 128"]},{"entry":["data[7:0]","O","152, 151, 149, 147, 145, 143, 141, 140"]},{"entry":["irq","O","154"]},{"entry":["DRAM_data[31:0]","I\/O","15, 17, 19, 20, 22, 25, 27, 30, 31, 33, 35,","DRAM Interface."]},{"entry":[{},{},"38, 39, 42, 44, 47, 49, 57, 59, 61, 63, 66","See section A.5.2"]},{"entry":[{},{},"68, 70, 72, 74, 76, 79, 81, 83, 84, 85"]},{"entry":["DRAM_addr[10:0]","O","184, 186, 188, 189, 192, 193, 195, 197,"]},{"entry":[{},{},"199, 200, 203"]},{"entry":["{overscore (RAS)}","O","11"]},{"entry":["{overscore (CAS)}[3:0]","O","2, 4, 6, 8"]},{"entry":["{overscore (WE)}","O","12"]},{"entry":["{overscore (OE)}","O","204"]},{"entry":["DRAM_enable","I","112"]},{"entry":["out_data[7:0]","O","89, 90, 92, 93, 94, 95, 97, 98","Output Port this is a standard two"]},{"entry":["out_extn","O","87","wire interface."]},{"entry":["out_valid","O","99","See sections A.4"]},{"entry":["out_accept","I","100"]},{"entry":["tck","I","115","JTAG port."]},{"entry":["tdi","I","116","See section A.8"]},{"entry":["tdo","O","120"]},{"entry":["tms","I","117"]},{"entry":["{overscore (trst)}","I","121"]},{"entry":["decoder_clock","I","177","The main decoder clock. See Table"]},{"entry":["{overscore (reset)}","I","160","Reset."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1130","num":"1317"},"tables":{"@attributes":{"id":"TABLE-US-00092","num":"00092"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"Table A.17.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporal Decoder Test signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Signal",{},"Pin",{}]},{"entry":["Name","I\/O","Num.","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["tph0ish","I","122","If override = 1 then tph0ish and tph1ish are inputs"]},{"entry":["tph1ish","I","123","for the on-chip two phase clock."]},{"entry":["overide","I","110","For normal operation set override = 0. tph0ish and"]},{"entry":[{},{},{},"tph1ish are ignored (so connect to GND or V)."]},{"entry":["chiptest","I","111","Set chiptest = 0 for normal operation."]},{"entry":["tloop","I","114","Connect to GND or Vduring normal operation."]},{"entry":["ramtest","I","109","If ramtest = 1 test of the on-chip RAMs is enabled."]},{"entry":[{},{},{},"Set ramtest = 0 for normal operation."]},{"entry":["pllselect","I","178","If pllselect = 0 the on-chip phase locked loops"]},{"entry":[{},{},{},"are disabled. Set pllselect = 1 for normal operation."]},{"entry":["ti","I","180","Two clocks required by the DRAM interface during"]},{"entry":[{},{},{},"test operation."]},{"entry":["tq","I","179","Connect to GND or Vduring normal operation."]},{"entry":["pdout","O","207","These two pins are connections for an"]},{"entry":["pdin","I","206","external filter for the phase lock loop."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1131","num":"1318"},"tables":{"@attributes":{"id":"TABLE-US-00093","num":"00093"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporal Decoder Pin Assignments"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Signal Name","Pin"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"nc","208"]},{"entry":[{},"test pin","207"]},{"entry":[{},"test pin","206"]},{"entry":[{},"GND","205"]},{"entry":[{},"OE","204"]},{"entry":[{},"DRAM_addr[0]","203"]},{"entry":[{},"VDD","202"]},{"entry":[{},"nc","201"]},{"entry":[{},"DRAM_addr[1]","200"]},{"entry":[{},"DRAM_addr[2]","199"]},{"entry":[{},"GND","198"]},{"entry":[{},"DRAM_addr[3]","197"]},{"entry":[{},"nc","196"]},{"entry":[{},"DRAM_addr[4]","195"]},{"entry":[{},"VDD","194"]},{"entry":[{},"DRAM_addr[5]","193"]},{"entry":[{},"DRAM_addr[6]","192"]},{"entry":[{},"nc","191"]},{"entry":[{},"GND","190"]},{"entry":[{},"DRAM_addr[7]","189"]},{"entry":[{},"DRAM_addr[8]","188"]},{"entry":[{},"VDD","187"]},{"entry":[{},"DRAM_addr[9]","186"]},{"entry":[{},"nc","185"]},{"entry":[{},"DRAM_addr[10]","184"]},{"entry":[{},"GND","183"]},{"entry":[{},"nc","182"]},{"entry":[{},"VDD","181"]},{"entry":[{},"test pin","180"]},{"entry":[{},"test pin","179"]},{"entry":[{},"test pin","178"]},{"entry":[{},"decoder_clock","177"]},{"entry":[{},"nc","176"]},{"entry":[{},"GND","175"]},{"entry":[{},"in_extn","174"]},{"entry":[{},"in_data[8]","173"]},{"entry":[{},"in_data[7]","172"]},{"entry":[{},"in_data[6]","171"]},{"entry":[{},"VDD","170"]},{"entry":[{},"in_data[5]","169"]},{"entry":[{},"in_data[4]","168"]},{"entry":[{},"in_data[3]","167"]},{"entry":[{},"in_data[2]","166"]},{"entry":[{},"GND","165"]},{"entry":[{},"in_data[1]","164"]},{"entry":[{},"in_data[0]","163"]},{"entry":[{},"in_valid","162"]},{"entry":[{},"in_accept","161"]},{"entry":[{},"reset","160"]},{"entry":[{},"VDD","159"]},{"entry":[{},"nc","158"]},{"entry":[{},"nc","157"]},{"entry":[{},"nc","156"]},{"entry":[{},"nc","155"]},{"entry":[{},"irq","154"]},{"entry":[{},"nc","153"]},{"entry":[{},"data[7]","152"]},{"entry":[{},"data[6]","151"]},{"entry":[{},"nc","150"]},{"entry":[{},"data[5]","149"]},{"entry":[{},"nc","148"]},{"entry":[{},"data[4]","147"]},{"entry":[{},"GND","146"]},{"entry":[{},"data[3]","145"]},{"entry":[{},"nc","144"]},{"entry":[{},"data[2]","143"]},{"entry":[{},"nc","142"]},{"entry":[{},"data[1]","141"]},{"entry":[{},"data[0]","140"]},{"entry":[{},"nc","139"]},{"entry":[{},"VDD","138"]},{"entry":[{},"addr[7]","137"]},{"entry":[{},"addr[6]","136"]},{"entry":[{},"addr[5]","135"]},{"entry":[{},"GND","134"]},{"entry":[{},"addr[4]","133"]},{"entry":[{},"addr[3]","132"]},{"entry":[{},"addr[2]","131"]},{"entry":[{},"addr[1]","130"]},{"entry":[{},"VDD","129"]},{"entry":[{},"addr[0]","128"]},{"entry":[{},"{overscore (enable)}[0]","127"]},{"entry":[{},"{overscore (enable)}[1]","126"]},{"entry":[{},"r{overscore (w)}","125"]},{"entry":[{},"GND","124"]},{"entry":[{},"test pin","123"]},{"entry":[{},"test pin","122"]},{"entry":[{},"trst","121"]},{"entry":[{},"tdo","120"]},{"entry":[{},"nc","119"]},{"entry":[{},"VDD","118"]},{"entry":[{},"tms","117"]},{"entry":[{},"tdi","116"]},{"entry":[{},"tck","115"]},{"entry":[{},"test pin","114"]},{"entry":[{},"GND","113"]},{"entry":[{},"DRAM_enable","112"]},{"entry":[{},"test pin","111"]},{"entry":[{},"test pin","110"]},{"entry":[{},"test pin","109"]},{"entry":[{},"nc","108"]},{"entry":[{},"nc","107"]},{"entry":[{},"nc","106"]},{"entry":[{},"nc","105"]},{"entry":[{},"nc","104"]},{"entry":[{},"nc","103"]},{"entry":[{},"nc","102"]},{"entry":[{},"VDD","101"]},{"entry":[{},"out_accept","100"]},{"entry":[{},"out_valid","99"]},{"entry":[{},"out_data[0]","98"]},{"entry":[{},"out_data[1]","97"]},{"entry":[{},"GND","96"]},{"entry":[{},"out_data[2]","95"]},{"entry":[{},"out_data[3]","94"]},{"entry":[{},"out_data[4]","93"]},{"entry":[{},"out_data[5]","92"]},{"entry":[{},"VDD","91"]},{"entry":[{},"out_data[6]","90"]},{"entry":[{},"out_data[7]","89"]},{"entry":[{},"nc","88"]},{"entry":[{},"out_extn","87"]},{"entry":[{},"GND","86"]},{"entry":[{},"DRAM_data[0]","85"]},{"entry":[{},"DRAM_data[1]","84"]},{"entry":[{},"DRAM_data[2]","83"]},{"entry":[{},"VDD","82"]},{"entry":[{},"DRAM_data[3]","81"]},{"entry":[{},"nc","80"]},{"entry":[{},"DRAM_data[4]","79"]},{"entry":[{},"GND","78"]},{"entry":[{},"nc","77"]},{"entry":[{},"DRAM_data[5]","76"]},{"entry":[{},"nc","75"]},{"entry":[{},"DRAM_data[6]","74"]},{"entry":[{},"VDD","73"]},{"entry":[{},"DRAM_data[7]","72"]},{"entry":[{},"nc","71"]},{"entry":[{},"DRAM_data[8]","70"]},{"entry":[{},"GND","69"]},{"entry":[{},"DRAM_data[9]","68"]},{"entry":[{},"nc","67"]},{"entry":[{},"DRAM_data[10]","66"]},{"entry":[{},"VDD","65"]},{"entry":[{},"nc","64"]},{"entry":[{},"DRAM_data[11]","63"]},{"entry":[{},"nc","62"]},{"entry":[{},"DRAM_data[12]","61"]},{"entry":[{},"GND","60"]},{"entry":[{},"DRAM_data[13]","59"]},{"entry":[{},"nc","58"]},{"entry":[{},"DRAM_data[14]","57"]},{"entry":[{},"VDD","56"]},{"entry":[{},"nc","55"]},{"entry":[{},"nc","54"]},{"entry":[{},"nc","53"]},{"entry":[{},"nc","52"]},{"entry":[{},"nc","51"]},{"entry":[{},"nc","50"]},{"entry":[{},"DRAM_data[15]","49"]},{"entry":[{},"nc","48"]},{"entry":[{},"DRAM_data[16]","47"]},{"entry":[{},"nc","46"]},{"entry":[{},"GND","45"]},{"entry":[{},"DRAM_data[17]","44"]},{"entry":[{},"nc","43"]},{"entry":[{},"DRAM_data[18]","42"]},{"entry":[{},"VDD","41"]},{"entry":[{},"nc","40"]},{"entry":[{},"DRAM_data[19]","39"]},{"entry":[{},"DRAM_data[20]","38"]},{"entry":[{},"nc","37"]},{"entry":[{},"GND","36"]},{"entry":[{},"DRAM_data[21]","35"]},{"entry":[{},"nc","34"]},{"entry":[{},"DRAM_data[22]","33"]},{"entry":[{},"VDD","32"]},{"entry":[{},"DRAM_data[23]","31"]},{"entry":[{},"DRAM_data[24]","30"]},{"entry":[{},"nc","29"]},{"entry":[{},"GND","28"]},{"entry":[{},"DRAM_data[25]","27"]},{"entry":[{},"nc","26"]},{"entry":[{},"DRAM_data[26]","25"]},{"entry":[{},"nc","24"]},{"entry":[{},"VDD","23"]},{"entry":[{},"DRAM_data[27]","22"]},{"entry":[{},"nc","21"]},{"entry":[{},"DRAM_data[28]","20"]},{"entry":[{},"DRAM_data[29]","19"]},{"entry":[{},"GND","18"]},{"entry":[{},"DRAM_data[30]","17"]},{"entry":[{},"nc","16"]},{"entry":[{},"DRAM_data[31]","15"]},{"entry":[{},"VDD","14"]},{"entry":[{},"nc","13"]},{"entry":[{},"{overscore (WE)}","12"]},{"entry":[{},"{overscore (RAS)}","11"]},{"entry":[{},"nc","10"]},{"entry":[{},"GND","9"]},{"entry":[{},"{overscore (CAS)}[0]","8"]},{"entry":[{},"nc","7"]},{"entry":[{},"{overscore (CAS)}[1]","6"]},{"entry":[{},"VDD","5"]},{"entry":[{},"{overscore (CAS)}[2]","4"]},{"entry":[{},"nc","3"]},{"entry":[{},"{overscore (CAS)}[3]","2"]},{"entry":[{},"nc","1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The pins labelled nc in Table A.17.3 are not currently used in the present invention and are reserved for future products. These pins should be left unconnected. They should not be connected to V, GND, each other or any other signal.","A.17.1.2 Vand GND Pins","As will be appreciated all the Vand GND pins provided must be connected to the appropriate power supply. The device will not operate correctly unless all the Vand GND pins are correctly used.","A.17.1.3 Test Pin Connections for Normal Operation","Nine pins on the Temporal Decoder are reserved for internal test use.",{"@attributes":{"id":"p-1135","num":"1322"},"tables":{"@attributes":{"id":"TABLE-US-00094","num":"00094"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"Table A.17.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Default test pin connections"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Pin number","Connection"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Connect to GND for normal operation"]},{"entry":[{},{},"Connect to Vfor normal operation"]},{"entry":[{},{},"Leave Open Circuit for normal operation"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"See Section A.8.1.",{"@attributes":{"id":"p-1137","num":"1324"},"tables":{"@attributes":{"id":"TABLE-US-00095","num":"00095"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"Table A.17.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Overview of Temporal Decoder memory map"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Addr. (hex)","Register Name","See table"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0x00 . . . 0x01","Interrupt service area","A.17.6"]},{"entry":["0x02 . . . 0x07","Not used"]},{"entry":["0x08","Chip access","A.17.7"]},{"entry":["0x09 . . . 0x0F","Not used"]},{"entry":["0x10","Picture sequencing","A.17.8"]},{"entry":["0x11 . . . 0x1F","Not used"]},{"entry":["0x20 . . . 0x2E","DRAM interface configuration registers","A.17.9"]},{"entry":["0x2F . . . 0x3F","Not used"]},{"entry":["0x40 . . . 0x53","Buffer configuration","A.17.8"]},{"entry":["0x54 . . . 0x5F","Not used"]},{"entry":["0x60 . . . 0xFF","Test registers","A.17.11"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1138","num":"1325"},"tables":{"@attributes":{"id":"TABLE-US-00096","num":"00096"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Interrupt service area registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x00","7","chip_event"]},{"entry":[{},{},"6:2","not used"]},{"entry":[{},{},"1","chip_stopped_event"]},{"entry":[{},{},"0","count_error_event"]},{"entry":[{},"0x01","7","chip_mask"]},{"entry":[{},{},"6:2","not used"]},{"entry":[{},{},"1","chip_stopped_mask"]}]}}]}}},{"@attributes":{"id":"p-1139","num":"1326"},"tables":{"@attributes":{"id":"TABLE-US-00097","num":"00097"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Chip access register"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x08","7:1","not used"]},{"entry":[{},{},"0","chip_access"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-1140","num":"1327"},"tables":{"@attributes":{"id":"TABLE-US-00098","num":"00098"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Picture sequencing"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"70pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x10","7:1","not used"]},{"entry":[{},{},"0","MPEG_reordering"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-1141","num":"1328"},"tables":{"@attributes":{"id":"TABLE-US-00099","num":"00099"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM interface configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x20","7:5","not used"]},{"entry":[{},{},"4:0","page_start_length[4:0]"]},{"entry":[{},"0x21","7:4","not used"]},{"entry":[{},{},"3:0","read_cycle_length[3:0]"]},{"entry":[{},"0x22","7:4","not used"]},{"entry":[{},{},"3:0","write_cycle_length[3:0]"]},{"entry":[{},"0x23","7:4","not used"]},{"entry":[{},{},"3:0","refresh_cycle_length[3:0]"]},{"entry":[{},"0x24","7:4","not used"]},{"entry":[{},{},"3:0","CAS_falling[3:0]"]},{"entry":[{},"0x25","7:4","not used"]},{"entry":[{},{},"3:0","RAS_falling[3:0]"]},{"entry":[{},"0x26","7:1","not used"]},{"entry":[{},{},"0","interface_timing_access"]},{"entry":[{},"0x27","7:0","not used"]},{"entry":[{},"0x28","7:6","RAS_strength[2:0]"]},{"entry":[{},{},"5:3","OEWE_strength[3:0]"]},{"entry":[{},{},"2:0","DRAM_data_strength[3:0]"]},{"entry":[{},"0x29","7","not used"]},{"entry":[{},{},"6:4","DRAM_addr_strength[3:0]"]},{"entry":[{},{},"3:1","CAS_strength[3:0]"]},{"entry":[{},{},"0","RAS_strength[3]"]},{"entry":[{},"0x28","7","not used"]},{"entry":[{},{},"6:4","DRAM_addr_strength[3:0]"]},{"entry":[{},{},"3:1","CAS_strength[3:0]"]},{"entry":[{},{},"0","RAS_strength[3]"]},{"entry":[{},"0x29","7:6","RAS_strength[2:0]"]},{"entry":[{},{},"5:3","OEWE_strength[3:0]"]},{"entry":[{},{},"2:0","DRAM_data_strength[3:0]"]},{"entry":[{},"0x2A","7:0","refresh_interval"]},{"entry":[{},"0x2B","7:0","not used"]},{"entry":[{},"0x2C","7:6","not used"]},{"entry":[{},{},"5","DRAM_enable"]},{"entry":[{},{},"4","no_refresh"]},{"entry":[{},{},"3:2","row_address_bits[1:0]"]},{"entry":[{},{},"1:0","DRAM_data_width[1:0]"]},{"entry":[{},"0x2D","7:0","not used"]},{"entry":[{},"0x2E","7:0","Test registers"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-1142","num":"1329"},"tables":{"@attributes":{"id":"TABLE-US-00100","num":"00100"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Buffer configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x40","7:0","not used"]},{"entry":[{},"0x41","7:2"]},{"entry":[{},{},"1:0","picture_buffer_0[17:0]"]},{"entry":[{},"0x42","7:0"]},{"entry":[{},"0x43","7:0"]},{"entry":[{},"0x44","7:0","not used"]},{"entry":[{},"0x45","7:2"]},{"entry":[{},{},"1:0","picture_buffer_1[17:0]"]},{"entry":[{},"0x46","7:0"]},{"entry":[{},"0x47","7:0"]},{"entry":[{},"0x48","7:0","not used"]},{"entry":[{},"0x49","7:1"]},{"entry":[{},{},"0","component_offset_0[16:0]"]},{"entry":[{},"0x4A","7:0"]},{"entry":[{},"0x4B","7:0"]},{"entry":[{},"0x4C","7:0","not used"]},{"entry":[{},"0x4D","7:1"]},{"entry":[{},{},"0","component_offset_1[16:0]"]},{"entry":[{},"0x4E","7:0"]},{"entry":[{},"0x4F","7:0"]},{"entry":[{},"0x50","7:0","not used"]},{"entry":[{},"0x51","7:1"]},{"entry":[{},{},"0","component_offset_2[16:0]"]},{"entry":[{},"0x52","7:0"]},{"entry":[{},"0x53","7:0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-1143","num":"1330"},"tables":{"@attributes":{"id":"TABLE-US-00101","num":"00101"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.17.11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Test registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Addr.","Bit",{},{}]},{"entry":[{},"(hex)","num.","Register Name","Page references"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"4","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0x2E","7 . . . 4","PLL resistors"]},{"entry":[{},{},"3 . . . 0"]},{"entry":[{},"0x60","7 . . . 6","not used"]},{"entry":[{},{},"5 . . . 4","coding_standard[1:0]"]},{"entry":[{},{},"3 . . . 2","picture_type[1:0]"]},{"entry":[{},{},"1","H261_filt"]},{"entry":[{},{},"0","H261_s_f"]},{"entry":[{},"0x61","7 . . . 6","component_id"]},{"entry":[{},{},"5 . . . 4","prediction_mode"]},{"entry":[{},{},"3 . . . 0","max_sampling"]},{"entry":[{},"0x62","7 . . . 0","samp_h"]},{"entry":[{},"0x63","7 . . . 0","samp_v"]},{"entry":[{},"0x64","7 . . . 0","back_h"]},{"entry":[{},"0x65","7 . . . 0"]},{"entry":[{},"0x66","7 . . . 0","back_v"]},{"entry":[{},"0x67","7 . . . 0"]},{"entry":[{},"0x68","7 . . . 0","forw_h"]},{"entry":[{},"0x69","7 . . . 0"]},{"entry":[{},"0x6A","7 . . . 0","forw_v"]},{"entry":[{},"0x6B","7 . . . 0"]},{"entry":[{},"0x6C","7 . . . 0","width_in_mb"]},{"entry":[{},"0x6D","7 . . . 0"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},"The input data port of the Temporal Decoder is a standard Token Port with 9 bit wide data words. In most applications, this will be connected directly to the output Token Port of the Spatial Decoder. See Section A.4 for more information about the electrical behavior of this interface.","A.18.2 Automatic Configuration","Parameters relating to the coded video's picture format are automatically loaded into registers within the Temporal Decoder by Tokens generated by the Spatial Decoder.",{"@attributes":{"id":"p-1146","num":"1333"},"tables":{"@attributes":{"id":"TABLE-US-00102","num":"00102"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.18.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuration of Temporal Decoder via Tokens"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Token","Configuration performed"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["CODING_STANDARD","The coding standard of the Temporal"]},{"entry":[{},"Decoder is automatically configured by the"]},{"entry":[{},"CODING_STANDARD Token. This is"]},{"entry":[{},"generated by the Spatial Decoder each time a"]},{"entry":[{},"new sequence is started. See "]},{"entry":["DEFINE_SAMPLING","The horizontal and vertical chroma"]},{"entry":[{},"sampling information for each of the color"]},{"entry":[{},"components is automatically configured by"]},{"entry":[{},"DEFINE_SAMPLING Tokens."]},{"entry":["HORIZONTAL_MBS","The horizontal width of pictures in macro"]},{"entry":[{},"blocks is automatically configured by"]},{"entry":[{},"HORIZONTAL_MBS Token."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The user must configure (via the microprocessor interface) application dependent factors.","A18.3.1 When to Configure","The Temporal Decoder should only be configured when no data processing is taking place. This is the default state after reset is removed. The Temporal Decoder can be stopped to allow re-configuration by writing 1 to the chip_access register. After configuration is complete, 0 should be written to chip_access.","See Section A.5.3 for details of when to configure the DRAM interface.","A.18.3.2 DRAM Interface","The DRAM interface timing must be configured before it is possible to decode predictively coded video (e.g., H.261 or MPEG). See Section A.5, \u201cDRAM Interface\u201d.",{"@attributes":{"id":"p-1151","num":"1338"},"tables":{"@attributes":{"id":"TABLE-US-00103","num":"00103"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.18.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Temporal Decoder registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register",{},"Reset",{}]},{"entry":["Name","Size\/Dir.","Slate","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["chip_access","1","1","Writing 1 to chip_access"]},{"entry":["chip_stopped_event","1","0","requests that the Temporal"]},{"entry":[{},{},{},"Decoder halt operation to"]},{"entry":[{},{},{},"allow re-configuration. The"]},{"entry":[{},{},{},"Temporal Decoder will"]},{"entry":[{},{},{},"continue operating normally"]},{"entry":[{},{},{},"until it reaches the end of the"]},{"entry":[{},{},{},"current video sequence. After"]},{"entry":[{},{},{},"reset is removed"]},{"entry":[{},{},{},"chip_access = 1"]},{"entry":[{},{},{},"i.e. the Temporal Decoder is"]},{"entry":[{},{},{},"halted."]},{"entry":["chip_stopped_mask","1","0","When the chip stops a chip"]},{"entry":[{},{},{},"stopped event will occur. If"]},{"entry":[{},{},{},"chip_stopped_mask = 1 an"]},{"entry":[{},{},{},"interrupt will be generated."]},{"entry":["count_error_event","1","0","The Temporal Decoder has an"]},{"entry":[{},"rw",{},"adder that adds predictions"]},{"entry":["count_error_mask","1",{},"to error data. If there is a"]},{"entry":[{},"rw",{},"difference between the"]},{"entry":[{},{},{},"number of error data bytes"]},{"entry":[{},{},{},"and the number of prediction"]},{"entry":[{},{},{},"data bytes then a count error"]},{"entry":[{},{},{},"event is generated."]},{"entry":[{},{},{},"If count_error_mask = 1"]},{"entry":[{},{},{},"an interrupt will be generated"]},{"entry":[{},{},{},"and prediction forming will"]},{"entry":[{},{},{},"stop. This event should only"]},{"entry":[{},{},{},"arise following a hardware"]},{"entry":[{},{},{},"error."]},{"entry":["picture_buffer_0","18","x","These specify the base"]},{"entry":["picture_buffer_1","18","x","addresses for the picture"]},{"entry":[{},{},{},"buffers."]},{"entry":["component_offset_0","17","x","These specify the offset from"]},{"entry":["component_offset_1","17","x","the picture buffer pointer at"]},{"entry":[{},"rw",{},"which each of the colour"]},{"entry":["component_offset_2","17","x","components is stored. Data"]},{"entry":[{},{},{},"with component ID = n is"]},{"entry":[{},{},{},"stored starting at the position"]},{"entry":[{},{},{},"indicated by"]},{"entry":[{},{},{},"component_offset_n"]},{"entry":[{},{},{},"See A.3.5.1, \u201cComponent"]},{"entry":[{},{},{},"Identification number\u201d."]},{"entry":["MPEG_recording","1","0","Setting this register to 1"]},{"entry":[{},"rw",{},"makes the Temporal Decoder"]},{"entry":[{},{},{},"change the picture order from"]},{"entry":[{},{},{},"the non-causal MPEG picture"]},{"entry":[{},{},{},"sequence to the correct"]},{"entry":[{},{},{},"display order by the See"]},{"entry":[{},{},{},"A.18.3.5. This register should"]},{"entry":[{},{},{},"is ignored during JPEG and"]},{"entry":[{},{},{},"H.261 operation."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The picture buffer pointers (18 bit) and the component offset (17 bit) registers specify a block (8\u00d78 bytes) address, not a byte address.","A.18.3.4 Picture Buffer Allocation","To decode predictively coded video (either H.261 or MPEG) the Temporal Decoder must manage two picture buffers. See Section A.18.4 and A.18.4.4 for more information about how these buffers are used.","The user must ensure that there is sufficient memory above each of the picture buffer pointers (picture_buffer_ and picture_buffer_) to store a single picture of the required video format (without overlapping with the other picture buffer). Normally, one of the picture buffer pointers will be set to 0 (i.e., the bottom of memory) and the other will be set to point to the middle of the memory space.","A.18.3.4.1 Normal Configuration for MPEG or H.261","H.261 and MPEG both use a 4:1:1 ratio between the different color components (i.e., there are 4 times as many luminance pels as there are pels in either of the chrominance components).","As documented in Section A.3.5.1, \u201cComponent Identification number\u201d, component  will be the luminance component and components  and  will be chrominance.","An example configuration of the component offset registers is to set component_offset_ to  so that component  starts at the picture buffer pointer. Similarly, component_offset_ could be set to {fraction (4\/6)} of the picture buffer size and component_offset_ could be set to \u215a of the picture buffer size.","A.18.3.5 Picture Sequence Re-ordering","MPEG uses three different picture types: Intra (I), Predicted (P) and Bidirectionally interpolated (B). B pictures are based on predictions from two pictures: one from the future and one from the past. The picture order is modified at the encoder so that I and P picture can be decoded from the coded date before they are required to decode B pictures.","The picture sequence must be corrected before these pictures can be displayed. The Temporal Decoder can provide this picture re-ordering (by setting register MPEG_reordering=1). Alternatively, the user may wish to implement the picture re-ordering as part of his display interface function. Configuring the Temporal Decoder to provide picture re-ordering may reduce the video resolution that can be decoded, see Section A.18.5.","A.18.4 Prediction Forming","The prediction forming requirements of H.261 decoding and MPEG decoding are quite different. The CODING_STANDARD Token automatically configures the Temporal Decoder to accommodate the prediction requirements of the different standards.","A.18.4.1 JPEG Operation","When configured for JPEG operation no predictions are performed since JPEG requires no temporal decoding.","A.18.4.2 H.261 Operation","In H.261, predictions are only from the picture just decoded. Motion vectors are only specified to integer pixel accuracy. The encoder can specify that a low pass filter be applied to the result of any prediction.","As each picture is decoded, it is written in to a picture buffer in the off-chip DRAM so that it can be used in decoding the next picture. Decoded pictures appear at the output of the Temporal Decoder as they are written into the off-chip DRAM.","For full details of prediction, and the arithmetic operations involved, the reader is directed to the H.261 standard. The Temporal Decoder of the present invention is fully compliant with the requirements of H.261.","A.18.4.3 MPEG Operation (without Re-ordering)","The operation of the Temporal Decoder changes for each of the three different MPEG picture types (I, P and B).","\u201cI\u201d pictures require no further decoding by the Temporal Decoder, but must be stored in a picture buffer (frame store) for later use in decoding P and B pictures.","Decoding P pictures requires forming predictions from a previously decoded P or I picture. The decoded P picture is stored in a picture buffer for use in decoding P and B pictures. MPEG allows motion vectors specified to half-pixel accuracy. On-chip filters provide interpolation to support this half pixel accuracy.","B pictures can require predictions from both of the picture buffers. As with P pictures, half pixel motion vector resolution accuracy requires on chip interpolation of the picture information. B pictures are not stored in the off-chip buffers. They are merely transient.","All pictures appear at the output port of the Temporal Decoder as they are decoded. So, the picture sequence will be the same as that in the coded MPEG data (see the upper part of FIG. ).","For full details of prediction, and the arithmetic operations involved, the reader is directed to the proposed MPEG standard draft. These requirements are met by the Temporal Decoder of the present invention.","A.18.4.4 MPEG Operation (with Re-ordering)","When configured for MPEG operation with picture re-ordering (MPEG_reordering=1), the prediction forming operations are as described above in section A.18.4.3. However, additional data transfers are performed to re-order the picture sequence.","B picture decoding is as described in section A.18.4.3. However, I and P pictures are not output as they are decoded. Instead, they are written into the off-chip buffers (as previously described) and are read out only when a subsequent I or P picture arrives for decoding.","A.18.4.4.1 Decoder Start-up Characteristics","The output of the first I picture is delayed until the subsequent P (or I) picture starts to decode. This should be taken into consideration when estimating the start-up characteristics of a video decoder.","A.18.4.4.2 Decoder Shut-down Characteristics","The Temporal Decoder relies on subsequent P or I pictures to flush previous pictures out of its off-chip buffers (frame stores). This has consequences at the end of video sequences and when starting new video sequences. The Spatial Decoder provides facilities to create a \u201cfake\u201d I\/P picture at the end of a video sequence to flush out the last P (or I) picture. However, this \u201cfake\u201d picture will be flushed out when a subsequent video sequence starts.","The Spatial Decoder provides the option to suppress this \u201cfake\u201d picture. This may be useful where it is known that a new video sequence will be supplied to the decoder immediately after an old sequence is finished. The first picture in this new sequence will flush out the last picture of the previous sequence.","A.18.5 Video Resolution","The video resolution that the Temporal Decoder can support when decoding MPEG is limited by the memory bandwidth of its DRAM interface. For MPEG, two cases need to be considered: with and without MPEG picture re-ordering.","Sections A.18.5.2 and A.18.5.3 discuss the worst case requirements required by the current draft of the MPEG specification. Subsets of MPEG can be envisioned that have lower memory bandwidth requirements. For example, using only integer resolution motion vectors or, alternatively, not using B pictures, significantly reduce the memory bandwidth requirements. Such subsets are not analyzed here.","A.18.5.1 Characteristics of DRAM Interface","The number of cycles taken to transfer data across the DRAM interface depends on a number of factors:\n\n","See section A.5, \u201cDRAM Interface\u201d, for more information about the detail configuration of the DRAM interface.","Table A.18.3 shows how many DRAM interface \u201ccycles\u201d are required for each type of data transfer.",{"@attributes":{"id":"p-1180","num":"1373"},"tables":{"@attributes":{"id":"TABLE-US-00104","num":"00104"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.18.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Data transfer times for Temporal Decoder"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"form prediction ","form prediction"]},{"entry":["Data bus","read or write","(half pixel","(integer pixel"]},{"entry":["width (bits)","8 \u00d7 8 block","accuracy)","accuracy)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["8","1 page address +","4 page address +","4 page address +"]},{"entry":[{},"64 transfers","81 transfers","64 transfers"]},{"entry":["16","1 page address +","4 page address +","4 page address +"]},{"entry":[{},"32 transfers","45 transfers","40 transfers"]},{"entry":["32","1 page address +","4 page address +","4 page address +"]},{"entry":[{},"16 transfers","27 transfers","24 transfers"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Table A.18.4 takes the figures in Table A.18.3 and evaluates them for a \u201ctypical\u201d DRAM. In this example, a 27 MHz clock is assumed. It will be appreciated that while 27 MHz is used here, it is not intended as a limitation. The access start takes 11 ticks (102 ns) and the data transfer takes 6 ticks (56 ns).","A.18.5.2 MPEG Resolution without Re-ordering","The peak memory bandwidth load occurs when decoding B pictures. In a \u201cworst case\u201d scenario, the B frame may be formed from predictions from both the picture buffers with all predictions being to half pixel accuracy.",{"@attributes":{"id":"p-1183","num":"1376"},"tables":{"@attributes":{"id":"TABLE-US-00105","num":"00105"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.18.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Illustration with \u201ctypical\u201d DRAM"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"form prediction","form prediction"]},{"entry":["Data bus","read or write","(half pixel","(integer pixel"]},{"entry":["width (bits)","8 \u00d7 8 block","accuracy)","accuracy)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"56pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["8","3657 ns","4907 ns","3963 ns"]},{"entry":["16","1880 ns","2907 ns","2185 ns"]},{"entry":["32","\u2002991 ns","1907 ns","1741 ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Using the example figures from Table A.18.4, it can be seen that it will take the DRAM interface 3815 ns to read the data required for two accurate half pixel accurate predictions (via a 32 bit wide interface). The resolution that the Temporal Decoder can support is determined by the number of these predictions that can be performed within one picture time. In this example, the Temporal Decoder can process 8737 8\u00d78 blocks in a single 33 ms picture period (e.g., for 30 Hz video).","If the required video format is 704\u00d7480, then each picture contains 7920 8\u00d78 blocks (taking into consideration the 4:2:0 chroma sampling). It can be seen that this video format consumes approx. 91% of the available DRAM interface bandwidth (before any other factors such as DRAM refresh are taken into consideration). Accordingly, the Temporal Decoder can support this video format.","A.18.5.3 MPEG Resolution with Re-ordering","When MPEG picture re-ordering is employed the worst case scenario is encountered while P pictures are being decoded. During this time, there are 3 loads on the DRAM interface:\n\n","Using the example figures from Table A.18.3, we can find the time it takes for each of these tasks when a 32 bit wide interface is available. Forming the prediction takes 1907 ns\/n while the read and the write each take 991 ns, a total of 3889 ns. This permits the Temporal Decoder to process 8485 8\u00d78 blocks in a 33 ms period.","Hence, processing 704\u00d7480 video will use approximately 93% of the available memory bandwidth (ignoring refresh).","A.18.5.4 H.261","H.261 only supports two picture formats CIF (352\u00d7288) and QCIF (172\u00d7144) at picture rates up to 30 Hz. A CIF picture contains 2376 8\u00d78 blocks. The only memory operations required are the writing of 8\u00d78 blocks and the forming of predictions with integer accuracy motion vectors.","Using the example figures from Table A.18.4 for an 8 bit wide memory interface, it can be seen that writing each block will take 3657 ns while forming the prediction for one block will take 3963 ns\/n, a total of 7620 ns per block. Therefore, the processing time for a single CIF picture is about 18 ms, comfortably less than the 33 ms required to support 30 Hz video.","A.18.5.5 JPEG","The resolution of JPEG \u201cvideo\u201d that can be supported will be determined by the capabilities of the Spatial Decoder of the invention or the display interface. The Temporal Decoder does not affect JPEG resolution.","A.18.6 Events and Errors","A.18.6.1 Chip Stopped","In the present invention, writing 1 to chip_access requests that the Temporal Decoder halt operation to allow re-configuration. Once received, the Temporal Decoder will continue operating normally until it reaches the end of the current video sequence. Thereafter, the Temporal Decoder is halted.","When the chip halts, a chip stopped event will occur. If chip_stopped_mask=1, an interrupt will be generated.","A.18.6.2 Count Error","The Temporal Decoder, of the present invention, contains an adder that adds predictions to error data. If there is a difference between the number of error data bytes and the number of prediction data bytes, then a count error event is generated.","If count_error_mask=1 an interrupt will be generated and forming prediction will stop.","Writing 1 to count_error_event clears the event and allows the Temporal Decoder to proceed. The DATA Token that caused the error will then proceed. However, the DATA Token that caused the error will not be of the correct length (64 bytes). This is likely to cause further problems. Thus, a count error should only arise if a significant hardware error has occurred.","Section A.19 Connecting to the Output of the Temporal Decoder","The output of the Temporal Decoder is a standard Token Port with 8 bit wide data words. See Section A.4 for more information about the electrical behavior of the interface.","The Tokens present at the output of the Temporal Decoder will depend on the coding standard employed and, in the case of MPEG, whether the pictures are being re-ordered. This section identifies which of the Tokens are available at the output of the Temporal decoder and which are the most useful when designing circuits to display that output. Other Tokens will be present, but are not needed to display the output and, therefore they are not discussed here.","This section concentrates on showing:\n\n","The Token sequence output by the Temporal Decoder when decoding JPEG data is identical to that seen at the output of Spatial Decoder. Recall, JPEG does not require processing by the Temporal Decoder. However, the Temporal Decoder tests intra data Tokens for negative values (resulting from the finite arithmetic precision of the IDCT in the Spatial Decoder) and replaces them with zero.","See Section A.16 for further discussion of the output sequence observed during JPEG operation.","A.19.2 H.261 Output","A.19.2.1 Start and End of Sessions","H.261 doesn't signal the start and end of the video stream within the video data. Nevertheless, this is implied by the application. For example, the sequence starts when the telecommunication connection is made and ends when the line is dropped. Thus, the highest layer in the video syntax is the \u201cpicture layer\u201d.","The Start Code Detector of the Spatial Decoder in accordance with the invention, allows SEQUENCE_START and CODING_STANDARD Tokens to be inserted automatically before the first PICTURE_START. See sections A.11.7.3 and A.11.7.4.","At the end of an H.261 session (e.g., when the line is dropped) the user should insert a FLUSH Token after the end of the coded data. This has a number of effects (see Appendix A.31.1:\n\n","Each picture is composed of a hierarchy of elements referred to as layers in the syntax. The sequence of Tokens at the output of the Temporal Decoder when decoding H.261 reflects this structure.","A.19.2.1 Picture Layer","Each picture is preceded by a PICTURE_START Token and each is immediately followed by a PICTURE_END Token. H.261 doesn't naturally contain a picture end. This Token is inserted automatically by the Start Code Detector of the Spatial Decoder.","After the PICTURE_START Token, there will be TEMPORAL_REFERENCE and PICTURE_TYPE Tokens. The TEMPORAL_REFERENCE Token carries a 10 bit number (of which only the 5 LSBs are used in H.261) that indicates when the picture should be displayed. This should be studied by any display system as H.261 encoders can omit pictures from the sequence (to achieve lower data rates). Omission of pictures can be detected by the temporal reference incrementing by more than one between successive pictures.","Next, the PICTURE_TYPE Token carries information about the picture format. A display system may study this information to detect if CIF or QCIF pictures are being decoded. However, information about the picture format is also available by studying registers within the Huffman decoder.","<Xref to Huffman decoder section>","A.19.2.2.2 Group of Blocks Layer","Each H.261 picture is composed of a number of \u201cgroups of blocks\u201d. Each of these is preceded by a SLICE_START Token (derived from the H.261 group number and group start code). This Token carries an 8 bit value that indicates where in the display the group of blocks should be placed. This provides an opportunity for the decoder to resynchronize after data errors. Moreover, it provides the encoder with a mechanism to skip blocks if there are areas of a picture that do not require additional information in order to describe them. By the time SLICE_START reaches the output of the Temporal Decoder, this information is effectively redundant as the Spatial Decoder and Temporal Decoder have already used the information to ensure that each picture contains the correct number of blocks and that they are in the correct positions. Hence, it should be possible to compute where to position a block of data output by the Temporal Decoder just by counting the number of blocks that have been output since the start of the picture.","The number carried by SLICE_START is one less than the H.261 group of blocks number (see the H.261 standard for more information).  shows the positioning of H.261 groups of blocks within CIF and QCIF pictures. NOTE: in the present invention, the block numbering shown is the same as that carried by SLICE_START. This is different from the H.261 convention for numbering these groups.","Between the SLICE_START (which indicates the start of each group of blocks) and the first macroblock there may be other Tokens. These can be ignored as they are not required to display the picture data.","A.19.2.2.3 Macroblock Layer","The sequence of macroblocks within each group of blocks is defined by H.261. There is no special Token information describing the position of each macroblock. The user should count through the macroblock sequence to determine where to display each piece of information.",{"@attributes":{"id":"p-1213","num":"1415"},"figref":"FIG. 96"},"Each macroblock contains 6 DATA Tokens. The sequence of DATA Tokens in each group of 6 is defined by the H.261 macroblock structure. Each DATA Token should contain exactly 64 data bytes for an 8\u00d78 area of pixels of a single color component. The color component is carried in a 2 bit number in the DATA Token (see section A.3.5.1). However, the sequence of the color components in H.261 is defined.","Each group of DATA Tokens is preceded by a number of Tokens communicating information about motion vectors, quantizer scale factors and so forth. These Tokens are not required to allow the pictures to be displayed and, thus, can be ignored.","Each DATA Token contains 64 data bytes for an 8\u00d78 of a single color component. These are in a raster order.","A.19.3 MPEG Output","MPEG has more layers in its syntax. These embody concepts such as a video sequence and the group of pictures.","A.19.3.1 MPEG Sequence Layer","A sequence can have multiple entry points (sequence starts) but should have only a single exit point (sequence end). When an MPEG sequence header code is decoded, the Spatial Decoder generates a CODING_STANDARD Token followed by a SEQUENCE_START Token.","After the SEQUENCE_START, there will be a number of Tokens of sequence header information that describe the video format and the like. See the draft MPEG standard for the information that is signalled in the sequence header and Table A.3.2 for information about how this data is converted into Tokens. This information describing the video format is also available in registers in the Huffman decoder.","This sequence header information may occur several times within an MPEG sequence, if that sequence has several entry points.","A.19.3.2 Group of Pictures Layer","An MPEG group of pictures provides a different type of \u201centry\u201d point to that provided at a sequence start. The sequence header provides information about the picture\/video format. Accordingly, if the decoder has no knowledge of the video format used in a sequence, it must start at a sequence start. However, once the video format is configured into the decoder, it should be possible to start decoding at any group of pictures.","MPEG doesn't limit the number of pictures in a group. However, in many applications a group will correspond to about 0.5 seconds, as this provides a reasonable granularity of random access.","The start of a group of pictures is indicated by a GROUP_START Token. The header information provided after GROUP_START includes two useful Tokens: TIME_CODE and BROKEN_CLOSED.","TIME_CODE carries a subset of the SMPTE time code information. This may be useful in synchronizing the video decoder to other signals. BROKEN_CLOSED carries the MPEG closed_gap and broken_link bits. See Section A.19.3.8 for more on the implications of random access and decoding edited video sequences.","A.19.3.3 Picture Layer","The start of a new picture is indicated by the PICTURE_START Token. After this Token, there will be TEMPORAL_REFERENCE and PICTURE_TYPE Tokens. The temporary reference information may be useful if the Temporal Decoder is not configured to provide picture re-ordering. The picture type information may be useful if a display system wants to specially process B pictures at the start of an open GOP (see Section A. 19.3.8).","Each picture is composed of a number of slices.","A.19.3.4 Slice Layer","Section A.19.2.2.2 discusses the group of blocks used in H.261. The slice in MPEG serves a similar function. However, the slice structure is not fixed by the standard. The 8 bit value carried by the SLICE_START Token is one less than the \u201cslice vertical position\u201d communicated by MPEG. See the draft MPEG standard for a description of the slice layer.","By the time SLICE_START reaches the output of the Temporal Decoder, this information is effectively redundant since the Spatial Decoder and Temporal Decoder have already used the information to ensure that each picture contains the correct number of blocks in the correct positions. Hence, it should be possible to compute where to position a block of data output by the Temporal Decoder just by counting the number of blocks that have been output since the start of the picture.","See section A.19.3.7 for discussion of the effects of using MPEG picture re-ordering.","A.19.3.5 Macroblock Layer","Each macroblock contains 6 blocks. These appear at the output of the Temporal Decoder in raster order (as specified by the draft MPEG specification).","A.19.3.6 Block Layer","Each macroblock contains 6 DATA Tokens. The sequence of DATA Tokens in each group of 6 is defined by the draft MPEG specification (this is the same as the H.261 macroblock structure). Each DATA token should contain exactly 64 data bytes for an 8\u00d78 area of pixels of a single color component. The color component is carried in a 2 bit number in the DATA Token (see A.3.5.1). However, the sequence of the color components in MPEG is defined.","Each group of DATA Tokens is preceded by a number of Tokens communicating information about motion vectors, quantizer scale factors, and so forth. These Tokens are not required to allow the pictures to be displayed and, therefore, they can be ignored.","A.19.3.7 Effect of MPEG Picture Re-ordering","As described in A.18.3.5, the Temporal Decoder can be configured to provide MPEG picture re-ordering (MPEG_reordering=1). The output of P and I pictures is delayed until the next P\/I picture in the data stream starts to be decoded by the Temporal Decoder. At the output of the Temporal Decoder the DATA Tokens of the newly decoded P\/I picture are replaced with DATA Tokens from the older P\/I picture.","When re_ordering P\/I pictures, the PICTURE_START, TEMPORAL_REFERENCE and PICTURE_TYPE Tokens of the picture are stored temporarily on-chip as the picture is written into the off-chip picture buffers. When the picture is read out for display, these stored Tokens are retrieved. Accordingly, re-ordered P\/I pictures have the correct values for PICTURE_START, TEMPORAL_REFERENCE and PICTURE_TYPE.","All other tokens below the picture layer are not re-ordered. As the re-ordered P\/I picture is read-out for display it picks up the lower level non-DATA tokens of the picture that has just been decoded. Hence, these sub-picture layer Tokens should be ignored.","A.19.3.8 Random Access and Edited Sequences","The Spatial Decoder provides facilities to help correct video decoding of edited MPEG video data and after a random access into MPEG video data.","A.19.3.8.1 Open GOPs","A group of pictures (GOP) can start with B pictures that are predicted from a P picture in a previous GOP. This is called an \u201copen GOP\u201d.  illustrates this. Pictures  and  are B pictures at the start of the second GOP. If the GOP is \u201copen\u201d, then the encoder may have encoded these two pictures using predictions from the P picture  and also the I picture . Alternatively, the encoder could have restricted itself to using predictions from only the I picture . In this case, the second GOP is a \u201cclosed GOP\u201d.","If a decoder starts decoding the video at the first GOP, it will have no problems when it encounters the second GOP even if that GOP is open since it will have already decoded the P picture . However, if the decoder makes a random access and starts decoding at the second GOP it cannot decode B and B if they depend on P (i.e., if the GOP is open).","If the Spatial Decoder of the present invention encounters an open GOP as the first GOP following a reset or it receives a FLUSH Token, it will assume that a random access to an open GOP has occurred. In this case, the Huffman decoder will consume the data for the B pictures in the normal way. However, it will output B pictures predicted with (0,0) motion vectors off the I picture. The result will be that pictures B and B (in the example above) will be identical to I.","This behavior ensures correct maintenance of the MPEG VBV rules. Also, it ensures that B pictures exist in the output at positions within the output stream expected by the other data channels. For example, the MPEG system layer provides presentation time information relating audio data to video data. The video presentation time stamps refer to the first displayed picture in a GOP, i.e., the picture with temporal reference . In the example above, the first displayed picture after a random access to the second GOP is B.","The BROKEN_CLOSED Token carries the MPEG closed_gop bit. Hence, at the output of the Temporal Decoder it is possible to determine if the B pictures output are genuine or \u201csubstitutes\u201d have been introduced by the Spatial Decoder. Some applications may wish to take special measures when these \u201csubstitute\u201d pictures are present.","A.19.3.8.2 Edited Video","If an application edits an MPEG video sequence, it may break the relationship between two GOPs. If the GOP after the edit is an open GOP it will no longer be possible to correctly decode the B pictures at the beginning of the GOP. The application editing the MPEG data can set the broken_link bit in the GOP after the edit to indicate to the decoder that it will not be able to decode these B pictures.","If the Spatial Decoder encounters a GOP with a broken link, the Huffman decoder will decode the data for the B pictures in the normal way. However, it will output B pictures predicted with (0,0) motion vectors off the I picture. The result will be that pictures B and B (in the example above) will be identical to I.","The BROKEN_CLOSED Token carries the MPEG broken_link bit. Hence, at the output of the Temporal Decoder it is possible to determine if the B pictures output are genuine or \u201csubstitutes\u201d that have been introduced by the Spatial Decoder. Some applications may wish to take special measures when these \u201csubstitute\u201d pictures are present.","Section A.20 Late Write DRAM Interface","The interface is configurable in two ways:\n\n",{"@attributes":{"id":"p-1246","num":"1450"},"tables":{"@attributes":{"id":"TABLE-US-00106","num":"00106"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM interface signals"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Input\/",{}]},{"entry":["Signal Name","Output","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["DRAM_data[31:0]","I\/O","The 32 bit wide DRAM data bus."]},{"entry":[{},{},"Optionally this bus can be"]},{"entry":[{},{},"configured to be 16 or 8 bits wide."]},{"entry":["DRAM_addr[10:0]","O","The 22 bit wide DRAM interface"]},{"entry":[{},{},"address is time multiplexed over"]},{"entry":[{},{},"this 11 bit wide bus."]},{"entry":["{overscore (RAS)}","O","The DRAM Row Address"]},{"entry":[{},{},"Strobe signal"]},{"entry":["{overscore (CAS)}[3:0]","O","The DRAM Column Address"]},{"entry":[{},{},"Strobe signal. One signal is"]},{"entry":[{},{},"provided per byte of the"]},{"entry":[{},{},"interface's data bus. All the"]},{"entry":[{},{},"{overscore (CAS)} signals are driven"]},{"entry":[{},{},"simultaneously."]},{"entry":["{overscore (WE)}","O","The DRAM Write Enable signal"]},{"entry":["{overscore (OE)}","O","The DRAM Output Enable signal"]},{"entry":["DRAM_enable","I","This input signal, when low, makes"]},{"entry":[{},{},"all the output signals on the"]},{"entry":[{},{},"interface go high impedance and"]},{"entry":[{},{},"stops activity on the DRAM"]},{"entry":[{},{},"interface"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1247","num":"1451"},"tables":{"@attributes":{"id":"TABLE-US-00107","num":"00107"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.2 "}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DRAM Interface configuration registers"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Register","size\/","Reset",{}]},{"entry":["Name","dir.","State","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Modify_DRAM_timing","1 bit","0","This function enable register"]},{"entry":[{},"rw",{},"allows access to the DRAM"]},{"entry":[{},{},{},"interface timing configuration"]},{"entry":[{},{},{},"registers. The configuration"]},{"entry":[{},{},{},"registers should not be"]},{"entry":[{},{},{},"modified while this register"]},{"entry":[{},{},{},"holds the values zero. Writing"]},{"entry":[{},{},{},"a one to this register requests"]},{"entry":[{},{},{},"access to modify the"]},{"entry":[{},{},{},"configuration registers. After"]},{"entry":[{},{},{},"a zero has been written to this"]},{"entry":[{},{},{},"register the DRAM interface"]},{"entry":[{},{},{},"will start to use the new"]},{"entry":[{},{},{},"values in the timing"]},{"entry":[{},{},{},"configuration registers."]},{"entry":["page_start_length","5 bit","0.00","Specifies the length of the"]},{"entry":[{},"rw",{},"access start in ticks. The"]},{"entry":[{},{},{},"minimum value that can be"]},{"entry":[{},{},{},"used is 4 (meaning 4 ticks)."]},{"entry":[{},{},{},"0 selects the maximum length"]},{"entry":[{},{},{},"of 32 ticks."]},{"entry":["read_cycle_length","4 bit","0.00","Specifies the length of the"]},{"entry":[{},"rw",{},"fast page read cycle in ticks."]},{"entry":[{},{},{},"The minimum value that can"]},{"entry":[{},{},{},"be used is 4 (meaning 4 ticks)."]},{"entry":[{},{},{},"0 selects the maximum length"]},{"entry":[{},{},{},"of 16 ticks."]},{"entry":["write_cycle_length","4 bit","0.00","Specifies the length of the"]},{"entry":[{},{},{},"fast page late write cycle in"]},{"entry":[{},{},{},"ticks. The minimum value that"]},{"entry":[{},{},{},"can be used is 4 (meaning 4"]},{"entry":[{},{},{},"ticks). 0 selects the maximum"]},{"entry":[{},{},{},"length of 16 ticks."]},{"entry":["refresh_cycle_length","4 bit","0.00","Specifies the length of the"]},{"entry":[{},"rw",{},"refresh cycle in ticks. The"]},{"entry":[{},{},{},"minimum value that can be"]},{"entry":[{},{},{},"used is 4 (meaning 4 ticks)."]},{"entry":[{},{},{},"0 selects the maximum length"]},{"entry":[{},{},{},"of 16 ticks."]},{"entry":["RAS_falling","4 bit","0.00","Specifies the number of ticks"]},{"entry":[{},"rw",{},"after the start of the access"]},{"entry":[{},{},{},"start that falls. The minimum"]},{"entry":[{},{},{},"value that can be used is 4"]},{"entry":[{},{},{},"(meaning 4 ticks). 0 selects"]},{"entry":[{},{},{},"the maximum length of 16"]},{"entry":[{},{},{},"ticks."]},{"entry":["CAS_falling","4 bit","8","Specifies the number of ticks"]},{"entry":[{},"rw",{},"after the start of a read cycle,"]},{"entry":[{},{},{},"write cycle or access start that"]},{"entry":[{},{},{},"{overscore (CAS)} falls. The minimum"]},{"entry":[{},{},{},"value that can be used is 1"]},{"entry":[{},{},{},"(meaning 1 tick). 0 selects the"]},{"entry":[{},{},{},"maximum length of 16 ticks."]},{"entry":["DRAM_data_width","2 bit","0.00","Specifies the number of bits"]},{"entry":[{},"rw",{},"used on the DRAM interface"]},{"entry":[{},{},{},"data bus DRAM_data"]},{"entry":[{},{},{},"[31:0] See A.20.4"]},{"entry":["row_address_bits","2 bit","0.00","Specifies the number of bits"]},{"entry":[{},"rw",{},"used for the row address"]},{"entry":[{},{},{},"portion of the DRAM inter-"]},{"entry":[{},{},{},"face address bus. See A.20.5."]},{"entry":["DRAM_enable","1 bit","1","Writing the value 0 in to this"]},{"entry":[{},"rw",{},"register forces the DRAM"]},{"entry":[{},{},{},"interface into a high"]},{"entry":[{},{},{},"impedance state 0 will be read"]},{"entry":[{},{},{},"from this register if either the"]},{"entry":[{},{},{},"DRAM_enable signal is low"]},{"entry":[{},{},{},"or 0 has been written to the"]},{"entry":[{},{},{},"register."]},{"entry":"refresh_interval"},{"entry":["no_refresh","8 bit","0.00","This value specifies the"]},{"entry":[{},"rw",{},"interval between refresh"]},{"entry":[{},{},{},"cycles in periods of 16"]},{"entry":[{},{},{},"decoder_clock cycles. Values"]},{"entry":[{},{},{},"in the range 1 . . . 255 can be"]},{"entry":[{},{},{},"configured. The value 0 is"]},{"entry":[{},{},{},"automatically loaded after"]},{"entry":[{},{},{},"reset and forces the DRAM"]},{"entry":[{},{},{},"interface to continuously"]},{"entry":[{},{},{},"execute refresh cycles until"]},{"entry":[{},{},{},"a valid refresh interval is"]},{"entry":[{},{},{},"configured. It is recommended"]},{"entry":[{},{},{},"that refresh_interval should"]},{"entry":[{},{},{},"be configured only once after"]},{"entry":[{},{},{},"each reset."]},{"entry":["CAS_strength","1 bit","0.00","Writing the value 1 to this"]},{"entry":[{},"rw",{},"register prevents execution of"]},{"entry":[{},{},{},"any refresh cycles"]},{"entry":["RAS_strength","3 bit","6","These three bit registers"]},{"entry":["addr_strength","rw",{},"configure the output drive"]},{"entry":["DRAM_data_strength",{},{},"strength of DRAM interface"]},{"entry":["OEWE_strength",{},{},"signals. This allows the"]},{"entry":[{},{},{},"interface to be configured for"]},{"entry":[{},{},{},"various different loads"]},{"entry":[{},{},{},"See A.20.8."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In the present invention, the DRAM interface timing is derived from a clock which is running at four times the input clock rate of the device (decoder_clock). This clock is generated by an on-chip PLL.","For brevity, periods of this high speed clock are referred to as ticks.","A.20.2 Interface Operation","The interface uses of the DRAM fast page mode. Three different types of access are supported:\n\n","Each read or write access transfers a burst of between 1 and 64 bytes at a single DRAM page address. Read and write transfers are not mixed within a single access. Each successive access is treated as a random access to a new DRAM page.","A.20.3 Access Structure","Each access is composed of two parts:\n\n","Each access starts with an access start and is followed by one or more data transfer cycles. There is a read, write and refresh variant of both the access start and the data transfer cycle.","At the end of the last data transfer in an access the interface enters it's default state and remains in this state until a new access is ready to start. If a new access is ready to start when the last access finishes, then the new access will start immediately.","A.20.3.1 Access Start","The access start provides the page address for the read or write transfers and establishes some initial signal conditions. There are three different access starts:\n\n","In each case the timing of {overscore (RAS)} and the row address is controlled by the registers RAS_falling and page_start_length. The state of {overscore (OE)} and DRAM_data[:] is held from the end of the previous data transfer until {overscore (RAS)} falls. The three different access start types are only different in how they drive {overscore (OE)} and DRAM_data[:] when {overscore (RAS)} falls. See FIG. .",{"@attributes":{"id":"p-1257","num":"1469"},"tables":{"@attributes":{"id":"TABLE-US-00108","num":"00108"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Access start parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Characteristic","Min.","Max.","Unit","Notes"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":["38","{overscore (RAS)} precharge period set by register RAS_falling","4","16","tck",{}]},{"entry":["39","Access start duration set by register page_start_length","4","32"]},{"entry":["40","{overscore (CAS)} precharge length set by register CAS_falling.","1","15",{},{"sup":"a"}]},{"entry":["41","Fast page read cycle length set by the register","4","16"]},{"entry":[{},"read_cycle_length."]},{"entry":["42","Fast page write cycle length set by the register","4","16"]},{"entry":[{},"write_cycle_length."]},{"entry":["43","{overscore (WE)} falls one tick after {overscore (CAS)}."]},{"entry":["44","Refresh cycle length set by the register refresh_cycle.","4","16"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a"}}]}}]}},"br":{}},"There are three different types of data transfer cycle:\n\n","A start of refresh is only followed by a single refresh cycle. A start of read (or write) can be followed by one or more fast page read (or write) cycles.","At the start of the read cycle {overscore (CAS)} is driven high and the new column address is driven.","A late write cycle is used. {overscore (WE)} is driven low one tick after {overscore (CAS)}. The output data is driven one tick after the address.","As a {overscore (CAS)} before {overscore (RAS)} refresh cycle is initiated by the start of refresh cycle, there is no interface signal activity during a refresh cycle. The purpose of the refresh cycle is to meet the minimum {overscore (RAS)} low period required by the DRAM.","A.20.3.3 Interface Default State","The interface signals enter a default state at the end of an access:\n\n","The two bit register DRAM_data_width allows the width of the DRAM interfaces data path to be configured. This allows the DRAM cost to be minimized when working with small picture formats.",{"@attributes":{"id":"p-1265","num":"1483"},"tables":{"@attributes":{"id":"TABLE-US-00109","num":"00109"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuring DRAM_data_width"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"DRAM_data_width"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{"sup":["\u2009\u2009","a"]},"\u20028 bit wide data bus on DRAM_data[31:24]."]},{"entry":["1","16 bit wide data bus on DRAM_data[31:16]."]},{"entry":["2","32 bit wide data bus on DRAM_data[31:0]."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"a"}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"b"}}]}}]}},"br":{}},"On-chip, a 24 bit address is generated. How this address is used to form the row and column addresses depends on the width of the data bus and the number of bits selected for the row address. Some configurations do not permit all the internal address bits to be used (and) therefore, produce \u201chidden bits).","The row address is extracted from the middle portion of the address. This maximizes the rate at which the DRAM is naturally refreshed.","A.20.5.1 Low Order Column Address Bits","The least significant 4 to 6 bits of the column address are used to provide addresses for fast page mode transfers of up to 64 bytes. The number of address bits required to control these transfers will depend on the width of the data bus (see A.20.4).","A.20.5.2 Row Address Bits","The number of bits taken from the middle section of the 24 bit internal address to provide the row address is configured by the register row_address_bits.",{"@attributes":{"id":"p-1270","num":"1488"},"tables":{"@attributes":{"id":"TABLE-US-00110","num":"00110"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Configuring row_address_bits"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"row_address_bits","Width of row address"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0","\u20029 bits"]},{"entry":[{},"1","10 bits"]},{"entry":[{},"2","11 bits"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The width of row address used will depend on the type of DRAM used and whether the MSBs of the row address are decoded off-chip to access multiple banks of DRAM.","NOTE: The row address is extracted from the middle of the internal address. If some bits of the row address are decoded to select banks of DRAM, then all possible values of these \u201cbank select bits\u201d must select a bank of DRAM. Otherwise, holes will be left in the address space.",{"@attributes":{"id":"p-1273","num":"1491"},"tables":{"@attributes":{"id":"TABLE-US-00111","num":"00111"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Selecting a value for row_address_bits"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"DRAM"]},{"entry":["row_address_bits","row address bits","bank select","depth"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","DRAM_addr[8:0]",{},"256k"]},{"entry":["1","DRAM_addr[8:0]","DRAM_addr[9]","256k"]},{"entry":[{},"DRAM_addr[9:0]",{},"512k"]},{"entry":[{},"DRAM_addr[9:0]",{},"1024k\u2002"]},{"entry":["2","DRAM_addr[8:0]","DRAM_addr[10:9]","256k"]},{"entry":[{},"DRAM_addr[9:0]","DRAM_addr[10]","512k"]},{"entry":[{},"DRAM_addr[9:0]","DRAM_addr[10]","1024k\u2002"]},{"entry":[{},"DRAM_addr[10:0]",{},"2048k\u2002"]},{"entry":[{},"DRAM_addr[10:0]",{},"4096k\u2002"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"There are two ways to make all the output signals on the DRAM interface become high impedance. The DRAM_enable register and the DRAM_enable signal. Both the register and the signal must be at a logic 1 for the DRAM interface to operate. If either is low, then the interface is taken to high impedance and data transfers through the interface are halted.","The ability to take the DRAM interface to high impedance is provided in order to allow other devices to test or to use the DRAM controlled by the Spatial Decoder (or the Temporal Decoder) when the Spatial Decoder (or the Temporal Decoder) is not in use. It is not intended to allow other devices to share the memory during normal operation.","A.20.7 Refresh","Unless disabled by writing to the register, no_refresh, the DRAM interface will automatically refresh the DRAM using a {overscore (CAS)} before {overscore (RAS)} refresh cycle at an interval determined by the register refresh_interval.","The value in refresh_interval specifies the interval between refresh cycles in periods of 16 decoder_clock cycles. Values in the range 1 to 255 can be configured. The value 0 is automatically loaded after reset and forces the DRAM interface to continuously execute refresh cycles (once enabled) until a valid refresh interval is configured. It is recommended that refresh_interval should be configured only once after each reset.","A.20.8 Signal Strengths","The drive strength of the outputs of the DRAM interface can be configured by the user using the 3 bit registers, CAS_strength, RAS_strength, addr_strength, DRAM_data_strength, OEWE_strength. The MSB of this 3 bit value selects either a fast or slow edge rate. The two less significant bits configure the output for different load capacitances.","The default strength after reset is 6, configuring the outputs to take approximately 10 ns to drive signal between GND and Vif loaded with 12F.",{"@attributes":{"id":"p-1280","num":"1498"},"tables":{"@attributes":{"id":"TABLE-US-00112","num":"00112"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.7"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Output strength configurations"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["strength value","Drive characteristics"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0","Approx. 4 ns\/V into 6 pf load"]},{"entry":["1","Approx. 4 ns\/V into 12 pf load"]},{"entry":["2","Approx. 4 ns\/V into 24 pf load"]},{"entry":["3","Approx. 4 ns\/V into 48 pf load"]},{"entry":["4","Approx. 2 ns\/V into 6 pf load"]},{"entry":["5","Approx. 2 ns\/V into 12 pf load"]},{"entry":[{"sup":["\u2009\u2009","a"]},"Approx. 2 ns\/V into 24 pf load"]},{"entry":["7","Approx. 2 ns\/V into 48 pf load"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"left"},"sup":"a"}}]}}]}}},"When an output is configured approximately for the load it is driving, it will meet the AC electrical characteristics specified in Tables A.20.11 to Table A.20.12. When appropriately configured each output is approximately matched to it's load and, therefore, minimal overshoot will occur after a signal transition.","A.20.9 After Reset","After reset, the DRAM interface configuration registers are all reset to their default values most significant of these default configurations are:\n\n","The DRAM interface is set to it's slowest configuration.","Most DRAMs require a \u201cpause\u201d of between 100 \u03bcs and 500 \u03bcs after power is first applied, followed by a number of refresh cycles before normal operation is possible.","Immediately after reset, the DRAM interface is inactive until both the DRAM_enable signal and the DRAM_enable register are set. When these have been set, the DRAM interface will execute refresh cycles (approximately every 400 ns, depending upon the clock frequency used) until the DRAM interface is configured.","The user is responsible for ensuring that the DRAM's \u201cpause\u201d after power_up and for allowing sufficient time after enabling the DRAM interface to ensure that the required number of refresh cycles have occurred before data transfers are attempted.","While reset is asserted, the DRAM interface is unable to refresh the DRAM. However, the reset time required by the decoder chips is sufficiently short so that is should be possible to reset them and to then re-enable the DRAM interface before the DRAM contents decay. This may be required during debugging.",{"@attributes":{"id":"p-1287","num":"1507"},"tables":{"@attributes":{"id":"TABLE-US-00113","num":"00113"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Maximum Ratings"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Supply voltage relative","\u22120.5","6.5","V"]},{"entry":[{},"to GND"]},{"entry":["V","Input voltage on any pin","GND \u2212 0.5","V+ 0.5","V"]},{"entry":["T","Operating temperature","\u221240","+85","\u00b0 C"]},{"entry":["T","Storage temperature","\u221255","+150","\u00b0 C"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-1288","num":"1508"},"tables":{"@attributes":{"id":"TABLE-US-00114","num":"00114"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Operating conditions"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":["V","Supply voltage relative","4.75","5.25","V"]},{"entry":[{},"to GND"]},{"entry":["GND","Ground","0","0","V"]},{"entry":["V","Input logic \u20181\u2019 voltage","2.0","V+ 0.5","V"]},{"entry":["V","Input logic \u20180\u2019 voltage","GND + 0.5","0.8","V"]},{"entry":["T","Operating temperature","0","70","\u00b0 C"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a"}}]}}]}}},{"@attributes":{"id":"p-1289","num":"1509"},"tables":{"@attributes":{"id":"TABLE-US-00115","num":"00115"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"273pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.10"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DC Electrical characteristics"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Symbol","Parameter","Min.","Max.","Units"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["V","Output logic \u20180\u2019 voltage",{},"0.4","V"]},{"entry":["V","Output logic \u20181\u2019 voltage","2.8",{},"V"]},{"entry":["I","Output current","\u00b1100",{},"\u03bcA"]},{"entry":["I","Output off state leakage current","\u00b120",{},"\u03bcA"]},{"entry":["I","Input leakage current","\u00b110",{},"\u03bcA"]},{"entry":["I","RMS power supply current",{},"500","mA"]},{"entry":["C","Input capacitance",{},"5","pF"]},{"entry":["C","Output\/IO capacitance",{},"5","pF"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"a","sub":"OLmax "}},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"left"},"sup":"b"}}]}}]}},"br":{}},{"@attributes":{"id":"p-1290","num":"1510"},"tables":{"@attributes":{"id":"TABLE-US-00116","num":"00116"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.11"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal values for a strobe"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note "]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["45","Cycle time e.g. tPC","\u22122","\u22122","ns",{}]},{"entry":["46","Cycle time e.g. tRC","\u22122","\u22122","ns"]},{"entry":["47","High pulse e.g. tRP, tCP, tCPN","\u22125","\u22122","ns"]},{"entry":["48","Low pulse e.g. tRAS, tCAS,","\u221211","+2","ns"]},{"entry":[{},"tCAC, tWP, tRASP, tRASC"]},{"entry":["49","Cycle time e.g. tACP\/tCPA","\u22128","+2","ns"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a "}}]}}]}}},{"@attributes":{"id":"p-1291","num":"1511"},"tables":{"@attributes":{"id":"TABLE-US-00117","num":"00117"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE A.20.12"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Differences from nominal values between two strobes"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Num.","Parameter","Min.","Max.","Unit","Note "]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["50","Strobe to strobe delay e.g. tRCD,","\u22123","+3","ns",{}]},{"entry":[{},"tCSR"]},{"entry":["51","Low hold time e.g. tRSH, tCSH,","\u221213","+3","ns"]},{"entry":[{},"tRWL, tCWL, tRAC, tOAC\/OE,"]},{"entry":[{},"tCHR"]},{"entry":["52","Strobe to strobe precharge e.g.","\u22129","+3","ns"]},{"entry":[{},"tCRP, tRCS, tRCH, tRRH, tRPC"]},{"entry":[{},"{overscore (CAS)} precharge pulse","\u22125","+2","ns"]},{"entry":[{},"between any two"]},{"entry":[{},"{overscore (CAS)} signals on wide DRAMs"]},{"entry":[{},"e.g. tCP, or"]},{"entry":[{},"between {overscore (RAS)} rising and {overscore (CAS)} falling e.g."]},{"entry":[{},"tRPC"]},{"entry":["53","Precharge before disable e.g.","\u221212","+3","ns"]},{"entry":[{},"tRHCP\/CPRH"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"left"},"sup":"a "}}]}}]}},"br":[{},{}]},"As previously shown in , the Start Code Detector (SCD) is the first block on the Spatial Decoder. Its primary purpose is to detect MPEG, JPEG and H.261 start codes in the input data stream and to replace them with relevant Tokens. It also allows user access to the input data stream via the microprocessor interface, and performs preliminary formatting and \u201ctidying up\u201d of the token data stream. Recall, the SCD can receive either raw byte data or data already assembled in Token format.","Typically, start codes are 24, 16, and 8 bits wide for MPEG, H.261, and JPEG, respectively. The Start Code Detector takes the incoming data in bytes, either from the Microprocessor Interface (upi) or a token\/byte port and shifts it through three shift registers. The first register is an 8 bit parallel in serial out, the second register is of programmable length (16 or 24 bits) and is where the start codes are detected, and the third register is 15 bits wide and is used to reformat the data into 15 bit tokens. There are also two \u201ctag\u201d Shift Registers (SR) running parallel with the second and third SRs. These contain tags to indicate whether or not the associated bit in the data SR is good. Incoming bytes that are not part of a DATA Token and are unrecognized by the SCD, are allowed to bypass the shift registers and are output when all three shift registers are flushed (empty) and the contents output successfully. Recognized non-data tokens are used to configure the SCD, spring traps, or set flags. They also bypass the shift registers and are output unchanged.","B.1.2 Major Blocks","The hardware for the Start Code Detector consists of 10 state machines.","B.1.2.1 Input Circuit (scdipc.sch.iplm.M)","The input circuit has three modes of operation: token, byte and microprocessor interface. These modes allow data to be input either as a raw byte stream (but still using the two-wire interface), as a token stream, or by the user via the upi. In all cases, the input circuit will always output the correct DATA Tokens by generating DATA Token headers where appropriate. Transitions to and from upi mode are synchronized to the system clocks and the upi may be forced to wait until a safe point in the data stream before gaining access. The Byte mode pin determines whether the input circuit is in token or byte mode. Furthermore, initially informing the system as to which standard is being decoded (so a CODING_STANDARD Token can be generated) can be done in any of the three modes.","B.1.2.2 Token Decoder (scdipnew.sch, scdipnem.M)","This block decodes the incoming tokens and issues commands to the other blocks.",{"@attributes":{"id":"p-1297","num":"1517"},"tables":{"@attributes":{"id":"TABLE-US-00118","num":"00118"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.1.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Recognized input tokens"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Command",{}]},{"entry":["Input Token","issued","Comments"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["NULL","WAIT","NULLS are removed"]},{"entry":["DATA","NORMAL","Load next byte into first SR"]},{"entry":["CODING_STD","BYPASS","Flush shift registers, perform padding, output"]},{"entry":[{},{},"and switch to bypass moad Load"]},{"entry":[{},{},"CODING_STANDARD register."]},{"entry":["FLUSH","BYPASS","Flush SRs with padding, output and switch to"]},{"entry":[{},{},"bypass mode."]},{"entry":["ELSE","BYPASS","Flush SRs with padding, output and switch to"]},{"entry":["(unrecognised token)",{},"bypass mode."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Note: A change in coding standard is passed to all blocks via the two-wire interface after the SRs are flushed. This ensures that the change from one data stream to another happens at the correct point throughout the SCD. This principle is applied throughout the presentation so that a change in the coding standard can flow through the whole chip prior to the new stream.","B.1.2.3 JPEG (scdjpeg.sch scdjpegm.M)","Start codes (Markers) in JPEG are sufficiently different that JPEG has a state machine all to itself. In the present invention, this block handles all the JPEG marker detection, length counting\/checking, and removal of data. Detected JPEG markers are flagged as start codes (with v_not_t-see later text) and the command from scdipnew is overridden and forced to bypass. The operation is best described in code.",{"@attributes":{"id":"p-1300","num":"1520"},"tables":{"@attributes":{"id":"TABLE-US-00119","num":"00119"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"switch (state)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case (LOOKING):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (input == 0xff)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state = GETVALUE; \/*Found a marker*\/"]},{"entry":[{},"remove; \/*Marker gets removed*\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = LOOKING;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (GETVALUE);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (input == 0xff)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state = GETVALUE; \/*Overlapping markers*\/"]},{"entry":[{},"remove;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else if (input == 0x00)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"state = LOOKING;\/*Wasn't a marker*\/"]},{"entry":[{},"insert(0xff); \/*Put the 0xff back*\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"command = BYPASS; \/*override command*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(lc) \/* Does the marker have a length count*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = GETLC0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = LOOKING;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (GETLC0):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loadlc0; \/*Load the top length count byte*\/"]},{"entry":[{},"state = GETLC1;"]},{"entry":[{},"remove;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (GETLC1)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"loadlc1;"]},{"entry":[{},"remove;"]},{"entry":[{},"state = DECLC;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (DECLC):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"lcnt = lcnt \u2212 2"]},{"entry":[{},"state = CHECKLC;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (CHECKLC):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(lcnt == 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = LOOKING;\/*No more to do*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else if (lcnt < 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = LOOKING;\/*generate Illegal_Length_Error*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"else"]},{"entry":[{},"state = COUNT;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break;"]},{"entry":[{},"case (COUNT):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"decrement length count until 1"]},{"entry":[{},"if(lc <= 1)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"state = LOOKING;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The basic operation of this block is quite simple. This block takes a byte of data from the input circuit, loads the shift register and shifts it out. However, it also obeys the commands from the input decoder and handles the transitions to and from bypass mode (flushing the other SRs): On receiving a BYPASS command, the associated byte is not loaded into the shift register. Instead \u201crubbish\u201d (tag=1) is shifted out to force any data held in the other shift registers to the output. The block then waits for a \u201cflushed\u201d signal indicating that this \u201crubbish\u201d has appeared at the token reconstructor. The input byte is then passed directly to the token reconstructor.","B.1.2.5 Start Code Detector (scdetect.sch, scdetm.M)","This block includes two shift registers which are programmable to 16 or 24 bits, start code detection logic and \u201cvalid contents\u201d detection logic. MPEG start codes require the full 24 bits, whereas H.261 requires only 16.","In the present invention, the first SR is for data and the second carries tags which indicate whether the bits in the data SR are valid\u2014there are no gaps or stalls (in the two-wire interface sense) in the SRs, but the bits they contain can be invalid (rubbish) whilst they are being flushed. On detection of a start code, the tag shift register bits are set in order to invalidate the contents of the detector SR.","A start code cannot be detected unless the SR contents are all valid. Non byte-aligned start codes are detected and may be flagged. Moreover, when a start code is detected, it cannot be definitely flagged until an overlapping start code has been checked for. To accomplish this function, the \u201cvalue\u201d of the detected start code (the byte following it) is shifted right through scinshift, scdetect and into scoshift. Having arrived at scoshift without the detection of another start code, it is overlapping start codes have been eliminated and it is flagged as a valid start code.","B.1.2.6 Output Shifter (scoshift.sch, scoshm.M)","The basic operation of the output shifter is to take serial data (and tags) from scdetect, pack it into 15 bit words and output them. Other functions are:","B.1.2.6.1 Data Padding","The output consists of 15 bit words, but the input may consist of an arbitrary number of bits. In order to flush, therefore, we need to add bits to make the last word up to 15 bits. These extra bits are called padding and must be recognized and removed by the Huffman block. Padding is defined to be:","After the last data bit, a \u201czero\u201d is inserted followed by sufficient \u201cones\u201d to make up a 15 bit word.","The data word containing the padding is output with a low extension bit to indicate that it is the end of a data token.","B.1.2.6.2 Generation of \u201cFlushed\u201d","In accordance with the present invention, the generation of \u201cflushed\u201d operation involves detecting when all SRs are flushed and signalling this to the input shifter. When the \u201crubbish\u201d inserted by the input shifter reaches the end of the output shifter, and the output shifter has completed its padding, a \u201cflushed\u201d signal is generated. This \u201cflushed\u201d signal must pass through the token reconstructor before it is safe for the input shifter to enter bypass mode.","B.1.2.6.3 Flagging Valid Start Codes","If scdetect indicates that it has found a start code, padding is performed and the current data is output. The start code value (the next byte) is shifted through the detector to eliminate overlapping start codes. If the \u201cvalue\u201d arrives at the output shifter without another start code being detected, it was not overlapped and the value is passed out with a flag v_not_t (ValueNotToken) to indicate that it is a start code value. If, however, another start code is detected (by scdetect) whilst the output shifter is waiting for the value, an overlapping_start_error is generated. In this case, the first value is discarded and the system then waits for the second value. This value can also be overlapped, thus causing the same procedure to be repeated until a non-overlapped start code is found.","B.1.2.6.4 Tidying up After a Start Code","Having detected and output a good start code, a new DATA header is generated when data (not rubbish) starts arriving.","B.1.2.7 Data Stream Reconstructor (sctokrec.sch, sctokrem.M)","The Data Stream reconstructor has two-wire interface inputs: one from scinshift for bypassed tokens, and one from scoshift for packed data and start codes. Switching between the two sources is only allowed when the current token (from either source) has been completed (low extension bit arrived).","B.1.2.8 Start Value to Start Number Conversion (scdromhw.sch, schrom.M)","The process of converting start values into tokens is done in two stages. This block deals mainly with coding standard dependent issues reducing the 520 odd potential codes down to 16 coding standard independent indices.","As mentioned earlier, start values (including JPEG ones) are distinguished from all other data by a flag (value_not_token) If v_not_t is high, this block converts the 4 or 8 bit value, depending on the CODING_STANDARD, into a 4 bit start_number which is independent of the standard, and flags any unrecognized start codes.","The start numbers are as follows:",{"@attributes":{"id":"p-1316","num":"1536"},"tables":{"@attributes":{"id":"TABLE-US-00120","num":"00120"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.1.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Start Code numbers (indices)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Start\/Marker Code","Index (start_number)","Resulting Token"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["not_a_start_code","0","\u2014"]},{"entry":["sequence_start_code","1","SEQUENCE_START"]},{"entry":["group_start_code","2","GROUP_START"]},{"entry":["picture_start_code","3","PICTURE_START"]},{"entry":["slice_start_code","4","SLICE_START"]},{"entry":["user_data_start_code","5","USER_DATA"]},{"entry":["extension_start_code","6","EXTENSION_DATA"]},{"entry":["sequence_end_code","7","SEQUENCE_END"]},{"entry":"JPEG Markers"},{"entry":["DHT","8","DHT"]},{"entry":["DQT","9","DQT"]},{"entry":["DNL","10","DNL"]},{"entry":["DRI","11","DRI"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"JPEG markers that can be mapped onto tokens for MPEG\/H.261"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["SOS","picture_start_code","PICTURE_START"]},{"entry":["SOI","sequence_start_code","SEQUENCE_START"]},{"entry":["EOI","sequence_end_code","SEQUENCE_END"]},{"entry":["SOF0","group_start_code","GROUP_START"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"JPEG markers that generate extn or user data"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["JPG","extension_start_code","EXTENSION_DATA"]},{"entry":["JPGn","extension_start_code","EXTENSION_DATA"]},{"entry":["APPn","user_data_start_code","USER_DATA"]},{"entry":["COM","user_data_start_code","USER_DATA"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":"NOTE: "},{"entry":"All unrecognised JPEG markers generate an extn_start_code index "}]}}]}},"br":{}},"The second stage of the conversion is where the above start numbers (or indices) are converted into tokens. This block also handles token extensions where appropriate, discarding of extension and user data, and search modes.","Search modes are a means of entering a data stream at a random point. The search mode can be set to one of eight values:\n\n","Any non-zero search mode causes data to be discarded until the desired start code (or higher in the syntax) is detected.","This block also adds the token extensions to PICTURE and SLICE start tokens:\n\n","In the present invention, Data Stream Formatting relates to conditional insertion of PICTURE_END, FLUSH, CODING_STANDARD, SEQUENCE_START tokens, and generation of the STOP_AFTER_PICTURE event. Its function is best simplified and described in software:",{"@attributes":{"id":"p-1322","num":"1551"},"tables":{"@attributes":{"id":"TABLE-US-00121","num":"00121"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"switch (input_data)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case (FLUSH)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1. if (in_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = PICTURE_END"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2. output = FLUSH"]},{"entry":[{},"3. if (in_picture & stop_after_picture)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sap_error = HIGH"]},{"entry":[{},"in_picture = FALSE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"4. in_picture = FALSE;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break"]},{"entry":[{},"case (SEQUENCE_START)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1. if (in_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = PICTURE_END"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2. if (in_picture & stop_after_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2a. output = FLUSH"]},{"entry":[{},"2b. sap_error = HIGH"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in_picture = FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3. output = CODING_STANDARD"]},{"entry":[{},"4. output = standard"]},{"entry":[{},"5. output = SEQUENCE_START"]},{"entry":[{},"6. in_picture = FALSE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break"]},{"entry":[{},"case (SEQUENCE_END) case (GROUP_START):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1. if (in_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = PICTURE_END"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2. if (in_picture & stop_after_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2a. output = FLUSH"]},{"entry":[{},"2b. sap_error = HIGH"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in_picture = FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3. output = SEQUENCE_END or GROUP_START"]},{"entry":[{},"4. in_picture = FALSE;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"break"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case (PICTURE_END)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1. output = PICTURE_END"]},{"entry":[{},"2. if (stop_after_picture)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2a. output = FLUSH"]},{"entry":[{},"2b. sap_error = HIGH"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3. in_picture = FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break"]},{"entry":[{},"case (PICTURE_START)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"1. if (in_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = PICTURE_END"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"2. if (in_picture & stop_after_picture)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"2a. output = FLUSH"]},{"entry":[{},"2b. sap_error = HIGH"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"3. if (insert_sequence_start)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3a. output = CODING_STANDARD"]},{"entry":[{},"3b. output = standard"]},{"entry":[{},"3c. output = SEQUENCE_START"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"insert_sequence_start = FALSE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"4. output = PICTURE_START"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"in_picture = TRUE"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"break"]},{"entry":[{},"default: Just pass it through"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":[{},{}]},"This section describes the Huffman Decoder and Parser circuitry in accordance with the present invention.",{"@attributes":{"id":"p-1324","num":"1553"},"figref":"FIG. 118"},"In essence, the Huffman Decoder and Parser of the present invention consist of a number of dedicated processing blocks (shown along the bottom of the diagram) which are controlled by a programmable state machine.","Data is received from the Coded Data Buffer by the \u201cInshift\u201d block. At this point, there are essentially two types of information which will be encountered: Coded data which is carried by DATA Tokens and start codes which have already been replaced by their respective Tokens by the Start Code Detector. It is possible that other Tokens will be encountered but all Tokens (other than the DATA Tokens) are treated in the same way. Tokens (start codes) are treated as a special case as the vast majority of the data will still be encoded (in H.261, JPEG or MPEG).","In the present invention, all data which is carried by the DATA Tokens is transferred to the Huffman Decoder in a serial form (bit-by-bit). This data, of course, includes many fields which are not Huffman coded, but are fixed length coded. Nevertheless, this data is still passed to the Huffman Decoder serially. In the case of Huffman encoded data, the Huffman Decoder only performs the first stage of decoding in which the actual Huffman code is replaced by an index number. If there are N district Huffman codes in the particular code table which is being decoded, then this \u201cHuffman Index\u201d lies in the range 0 to N\u22121. Furthermore, the Huffman Decoder has a \u201cno op\u201d, i.e., \u201cno operation\u201d mode, which allows it to pass along data or token information to a subsequent stage without any processing by the Huffman Decoder.","The Index to Data Unit is a relatively simple block of circuitry which performs table look-up operations. It draws its name from the second stage of the Huffman decoding process in which the index number obtained in the Huffman Decoder is converted into the actual decoded data by a simple table look-up. The Index to Data Unit cooperates with the Huffman Decoder to act as a single logical unit.","The ALU is the next block and is provided to implement other transformations on the decoded data. While the Index to Data Unit is suitable for relatively arbitrary mappings, the ALU may be used where arithmetic is more appropriate. The ALU includes a register file which it can manipulate to implement various parts of the decoding algorithms. In particular, the registers which hold vector predictions and DC predictions are included in this block. The ALU is based around a simple adder with operand selection logic. It also includes dedicated circuitry for sign-extension type operations. It is likely that a shift operation will be implemented, but this will be performed in a serial manner; there will be no barrel shifter.","The Token Formatter, in accordance with the present invention, is the last block in the Video Parser and has the task of finally assembling decoded data into Tokens which can be passed onto the rest of the decoder. At this point, there are as many Tokens as will ever be used by the decoder for this particular picture.","The Parser State Machine, which is 18 bits wide and has been adopted for use with a two-wire interface has the task of coordinating the operation of the other blocks. In essence, it is a very simple state machine and it produces a very wide \u201cmicro-code\u201d control word which is passed to the other blocks.  shows that the instruction word is passed from block-to-block by the side of the data. This is, indeed, the case and it is important to understand that transfers between the different blocks are controlled by two-wire interfaces.","In the present invention, there is a two-wire interface between each of the blocks in the Video Parser. Furthermore, the Huffman Decoder works with both serial, data, the inshifter inputs data one bit at a time, and with control tokens. Accordingly, there are two modes of operation. If data is coming into the Huffman Decoder via a DATA Token, then it passes through the shifter one bit at a time. Again, there is a two-wire interface between the inshifter and the Huffman Decoder. Other tokens, however, are not shifted in one bit at a time (serial) but rather in the header of the token. If a DATA token is input, then the header containing the address information is deleted and the data following the address is shifted in one bit at a time. If it is not a DATA Token, then the entire token, header and all, is presented to the Huffman Decoder all at once.","In the present invention, it is important to understand that the two-wire interface for the Video Parser is unusual in that it has two valid lines. One line is valid serially and one line is valid tokenly. Furthermore, both lines may not be asserted at the same time. One or the other may be asserted or if no valid data exists, then neither may be asserted although there are two valid lines, it should be recognized that there is only a single accept wire in the other direction. However, this is not a problem. The Huffman Decoder knows whether it wants serial data or token information depending on what needs to be done next based upon the current syntax. Hence, the valid and accept signals are set accordingly and an Accept is sent from the Huffman Decoder to the inshifter. If the proper data or token is there, then the inshifter sends a valid signal.","For example, a typical instruction might decode a Huffman code, transform it in the Index to Data Unit, modify that result in the ALU and then this result is formed into a Token word. A single microcode instruction word is produced which contains all of the information to do this. The command is passed directly to the Huffman Decoder which requests data bits one-by-one from the \u201cInshift\u201d block until it has decoded a complete symbol. Control Tokens are input in parallel. Once this occurs, the decoded index value is passed along with the original microcode word to the Index to Data Unit. Note that the Huffman Decoder will require several cycles to perform this operation and, indeed, the number of cycles is actually determined by the data which is decoded. The Index to Data Unit will then map this value using a table which is identified in the microcode instruction word. This value is again passed onto the next block, the ALU, along with the original microcode word. Once the ALU has completed the appropriate operation (the number of cycles may again be data dependent) it passes the appropriate data onto the Token Formatting block along with the microcode word which controls the way in which the Token word is formed.","The ALU has a number of status wires or \u201ccondition codes\u201d which are passed back to the Parser State Machine. This allows the State Machine to execute conditional jump instructions. In fact, all instructions are conditional jump instructions; one of the conditions that may be selected is hard-wired to the value \u201cFalse\u201d. By selecting this condition, a \u201cno jump\u201d instruction may be constructed.","In accordance with the present invention, the Token Formatter has two inputs: a data field from the ALU and\/or a constant field coming from the Parser State Machine. In addition, there is an instruction that tells the Token Formatter how many bits to take from one source and then to fill in with the remaining bits from the other for a total of 8 bits. For example, HORIZONTAL_SIZE has an 8 bit field that is an invariant address identifying it as a HORIZONTAL_SIZE Token. In this case, the 8 bits come from the constant field and no data comes from the ALU. If, however, it is a DATA Token, then you would likely have 6 bits from the constant field and two lower bits indicating the color components from the ALU. Accordingly, the Token Formatter takes this information and puts it into a token for use by the rest of he system. Note that the number of bits from each source in the above examples are merely for illustration purposes and one of ordinary skill in the art will appreciate that the number of bits from either source can vary.","The ALU includes a bank of counters that are used to count through the structure of the picture. The dimensions of the picture are programmed into registers associated with the counters that appear to the \u201cmicroprogrammer\u201d as part of the register bank. Several of the condition codes are outputs from this counter bank which allows conditional jumps based on \u201cstart of picture\u201d, \u201cstart of macroblock\u201d and the like.","Note that the Parser State Machine is also referred to as the \u201cDemultiplex State Machine\u201d. Both terms are used in this document.","Input Shifter","In the present invention, the Input Shifter is a very simple piece of circuitry consisting of a two pipeline stage datapath (\u201chfidp\u201d) and controlling Zcells (\u201chfi\u201d).","In the first pipeline stage, Token decoding takes place. At this stage, only the DATA token is recognized. Data contained in a DATA token is shifted one bit at a time into the Huffman Decoder. The second pipeline stage is the shift register. In the very last word of a DATA token, special coding takes place such that it is possible to transmit an arbitrary number of bits through the coded data buffer. The following are all possible patterns in the last data word.",{"@attributes":{"id":"p-1342","num":"1571"},"tables":{"@attributes":{"id":"TABLE-US-00122","num":"00122"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Possible Patterns in the Last Data Word"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"16"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"12","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"13","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"14","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"15","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"16","colwidth":"42pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["E","D","C","B","A","9","8","7","6","5","4","3","2","1","0","No. of Bits"]},{"entry":{"@attributes":{"namest":"1","nameend":"16","align":"center","rowsep":"1"}}},{"entry":["0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","None"]},{"entry":["x","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]},{"entry":["x","x","0","1","1","1","1","1","1","1","1","1","1","1","1","2"]},{"entry":["x","x","x","0","1","1","1","1","1","1","1","1","1","1","1","3"]},{"entry":["x","x","x","x","0","1","1","1","1","1","1","1","1","1","1","4"]},{"entry":["x","x","x","x","x","0","1","1","1","1","1","1","1","1","1","5"]},{"entry":["x","x","x","x","x","x","0","1","1","1","1","1","1","1","1","6"]},{"entry":["x","x","x","x","x","x","x","0","1","1","1","1","1","1","1","7"]},{"entry":["x","x","x","x","x","x","x","x","0","1","1","1","1","1","1","8"]},{"entry":["x","x","x","x","x","x","x","x","x","0","1","1","1","1","1","9"]},{"entry":["x","x","x","x","x","x","x","x","x","x","0","1","1","1","1","10"]},{"entry":["x","x","x","x","x","x","x","x","x","x","x","0","1","1","1","11"]},{"entry":["x","x","x","x","x","x","x","x","x","x","x","x","0","1","1","12"]},{"entry":["x","x","x","x","x","x","x","x","x","x","x","x","x","0","1","13"]},{"entry":["x","x","x","x","x","x","x","x","x","x","x","x","x","x","0","14"]},{"entry":{"@attributes":{"namest":"1","nameend":"16","align":"center","rowsep":"1"}}}]}}]}}},"As the data bits are shifted left, one by one, in the shift register, the bit pattern \u201c0 followed by all ones\u201d is looked for (padding). This indicates that the remaining bits in the shift register are not valid and they are discarded. Note that this action only takes place in the last word of a DATA Token.","As described previously, all other Tokens are passed to the Huffman Decoder in parallel. They are still loaded into the second pipeline stage, but no shifting takes place. Note that the DATA header is discarded and is not passed to the Huffman at all. Two \u201cvalid\u201d wires (out_valid and serial_valid) are provided. Only one is asserted at a given time and it indicates what type of data is being presented at that moment.","B.2.2 Huffman Decoder","The Huffman Decoder has a number of modes of operation. The most obvious is that it can decode Huffman Codes, turning them into a Huffman Index Number. In addition, it can decode fixed length codes of a length (in bits) determined by the instruction word. The Huffman Decoder can also accept Tokens from the Inshift block.","The Huffman Decode includes a very small state machine. This is used when decoding block-level information. This is because it takes too long for the Parser State Machine to make decisions (since it must wait for data to flow through the Index to Data Unit and the ALU before it can make a decision about that data and issue a new command). When this State Machine is used, the Huffman Decoder itself issues commands to the Index to Data Unit and ALU. The Huffman Decoder State Machine cannot control all of the microcode instruction bits and, therefore, it cannot issue the full range of commands to the other blocks.","B.2.2.1 Theory of Operation","When decoding Huffman codes, the Huffman Decoder of the present invention uses an arithmetic procedure to decode the incoming code into a Huffman Index Number. This number lies between 0 and N\u22121 (for a code table that has N entries). Bits are accepted one by one from the Input shifter.","In order to control the operation of the machine, a number of tables are required. These specify for each possible number of bits in a code (1 to 16 bits) how many codes there are of that length. As expected, this information is typically not sufficient to specify a general Huffman code. However, in MPEG, H.261 and JPEG, the Huffman codes are chosen such that this information alone can specify the Huffman Code table. There is unfortunately just one exception to this; the Tcoefficient table from H.261 which is also used in MPEG. This requires an additional table that is described elsewhere (the exception was deliberately introduced in H.261 to avoid start code emulation).","It is important to realize that the tables used by this Huffman Decoder are precisely the same as those transmitted in JPEG. This allows these tables to be used directly while other designs of Huffman decoders would have required the generation of internal tables from the transmitted ones. This would have required extra storage and extra processing to do the conversion. Since the tables in MPEG and H.261 (with the exception noted above) can be described in the same way, a multi-standard decoder becomes practical.","The following fragment of \u201cC\u201d illustrates the decoding process;",{"@attributes":{"id":"p-1351","num":"1580"},"tables":{"@attributes":{"id":"TABLE-US-00123","num":"00123"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int table = 0;"]},{"entry":[{},"int s = 0;"]},{"entry":[{},"int bit = 0;"]},{"entry":[{},"unsigned long code = 0;"]},{"entry":[{},"int index = 0;"]},{"entry":[{},"while (index>=total)"]},{"entry":[{},"{"]},{"entry":[{},"if (bit<=max_bits)"]},{"entry":[{},"fail (\u201chuff_decode: ran off end of huff table\\n\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"code=(code<<1) Inext_bit0;"]},{"entry":[{},"index=code+s+total;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"total+=codes_per_bit[bit];"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s=(s+codes_per_bit[bit])<<1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bit++; "]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"0","align":"center","rowsep":"1"}}]}]}}]}}},"The process generally, is directly mapped into the silicon implementation although advantage is taken of the fact that certain intermediate values can be calculated in clock phases before they are required.","From the code fragment we see that;","\u2003total=total\u2003\u2003EQ 1.\n\n\u2032=2 (\u2032)\u2003\u2003EQ 2.\n\ncode=2code+bit\u2003\u2003EQ 3.\n\nindex=2code+bit+total\u2003\u2003EQ 4.\n","Unforunately in the hardware it proved easier to use a modified set of equations in which a variable \u201cshifted\u201d is use in place of the variable \u201cs\u201d. In this case;","In the hardware, however, it proved easier to use a modified set of equations in which a variable \u201cshifted\u201d is used in place of the variable \u201cs\u201d. In this case;\n\nshifted=2shifted\u2003\u2003EQ 5.\n\nIt turns out that:\n\n;=2shifted\u2003\u2003EQ 6.\n\nand so substituting this back into Equation 4 we see that:\n\nindex=2 (code\u2212shifted)+total+bit\u2003\u2003EQ 7.\n","In addition to calculating successive values of \u201cindex\u201d, it is necessary to know when the calculation is completed. From the \u201cC\u201d code fragment we see that we are done when:\n\nindex<total\u2003\u2003EQ 8.\n","Substituting from Equation 7 and Equation 1 we see that we are done when:\n\n2(code\u2212shifted)+bit<0\u2003\u2003EQ 9.\n","In the hardware implementation of the present invention, the common term in Equation 7 and Equation 9, (code\u2212shifted) is calculated one phase before the remainder of these equations are evaluated to give the final result and the information that the calculation is \u201cdone\u201d.","One word of warning. In various pieces of \u201cC\u201d code, notably the behavioral compiled code Huffman Decoder and the sm code projects, the \u201cC\u201d fragment is used almost directly, but the variable \u201cs\u201d is actually called \u201cshifted\u201d. Thus, there are two different variables called \u201cshifted\u201d. One in the \u201cC\u201d code and the other in the hardware implementation. These two variables differ by a factor of two.","B.2.2.1.1 Inverting the Data Bits","There is one other piece of information required to correctly decode the Huffman codes. This is the polarity of the coded data. It turns out that H.261 and JPEG use opposite conventions. This reflects itself in the fact that the start codes in H.261 are zero bits whilst the marker bytes in JPEG are one bits.","In order to deal with both conventions, it is necessary to invert the coded data bits as they are read into the Huffman Decoder in order to decode H.261 style Huffman codes. This is done in the obvious manner using an exclusive OR gate. Note that the inversion is only performed for Huffman codes, as when decoding fixed length codes, the data is not inverted.","MPEG uses a mix of the two conventions. In those aspects inherited from H.261, the H.261 convention is used. In those inherited from JPEG (the decoding of DC intra coefficients) the JPEG convention is used.","B.2.2.1.2 Transform Coefficients Table","When using the transform coefficients table in H.261 and MPEG, there are number of anomalies. First, the table in MPEG is a super-set of the table in H.261. In the hardware implementation of the present invention, there is no distinction drawn between the two standards and this means that an H.261 stream that contains codes from the extended part of the table (i.e., MPEG codes) will be decoded in the \u201ccorrect\u201d manner. Of course, other aspects of the compression standard may well be broken. For example, these extended codes will cause start code emulation in H.261.","Second, the transform coefficient table has an anomaly that means that it is not describable in the normal manner with the codes_per_bit tables. This anomaly occurs with the codes of length six bits. These code words are systematically substituted by alternate code words. In an encoder, the correct result is obtained by first encoding in the normal manner. Then, for all codes that are six bits or longer, the first six bits are substituted by another six bits by a simple table look-up operation. In a decoder, in accordance with the present invention, the decoding process is interrupted just before the sixth bit is decoded, the code words are substituted using a table look-up, and the decoding continues.","In this case, there are only ten possible six-bit codes so the necessary look-up table is very small. The operation is further helped by the fact that the upper two bits of the code are unaltered by the operation. As a result, it is not necessary to use a true look-up table. Instead a small collection of gates are hard-wired to give the appropriate transformation. The module that does this is called, \u201chftcfrng\u201d. This type of code substitution is defined herein as a \u201cring\u201d since each code from the set of possible codes is replaced by another code from that set (no new codes are introduced or old codes omitted).","Furthermore, a unique implementation is used for the very first coefficient in a block. In this case, it is impossible for an end-of-block code to occur and, therefore, the table is modified so that the most commonly occurring symbol can use the code that would otherwise be interpreted as end-of-block. This may save one bit. It turns out that with the architecture for decoding, in accordance with the present invention, this is easily accommodated. In short, for the first bit of the first coefficient the decoding is deemed \u201cdone\u201d if \u201cindex\u201d has the value zero. Furthermore, after decoding only a single bit there are only two possible values for \u201cindex\u201d, zero and one, it is only necessary to test one bit.","B.2.2.1.3 Register and Adder Size","The Huffman Decoder of the present invention can deal with Huffman codes that may be as long as 16 bits. However, the decoding machine is only eight bits wide. This is possible because we know that the largest possible value of the decoded Huffman Index number is 255. In fact, this could only happen in extended JPEG and, in the current application, the limit is somewhat lower (but larger than 128, so 7 bits will not suffice).","It turns out that for all legal Huffman codes, not only the final value of \u201cindex\u201d, but all intermediate values lie in the range 0 to 255. However, for an illegal code, i.e., an attempt to decode a code that is not in the current code table (probably due to a data error) the index value may exceed 255. Since we are using an eight bit machine, it is possible that at the end of decoding, the final value of \u201cindex\u201d does not exceed 255 because the more significant bits that tell us an error has occurred have been discarded. For this reason, if at any time during decoding the index value exceeds 255 (i.e., carry out of the adder that forms index) an error occurs and decoding is abandoned.","Twelve bits of \u201ccode\u201d are preserved. This is not necessary for decoding Huffman codes where an eight bit register would have been sufficient. These upper bits are required for fixed length codes where up to twelve bits may be read.","B.2.2.1.4 Operation for Fixed Length Codes","For fixed length codes, the \u201ccodes per bit\u201d value is forced to zero. This means that \u201ctotal\u201d and \u201cshifted\u201d remain at zero throughout the operation and \u201cindex\u201d is, therefore, the same as code. In fact, the adders and the like only allow an eight bit value to be produced for \u201cindex\u201d. Because of this, the upper bits of the output word are taken directly from the \u201ccode\u201d register when decoding fixed length codes. When decoding Huffman codes these upper bits are forced to zero.","The fact that sufficient bits have been read from the input is calculated in the obvious manner. A comparator compares the desired number of bits with the \u201cbit\u201d counter.","B.2.2.2 Decoding Coefficient Data","The Parser State Machine, in accordance with the present invention, is generally only used for fairly high-level decoding. The very lowest level decoding within an eight-by-eight block of data is not directly handled by this state machine. The Parser State Machine gives a command to the Huffman Decoder of the form \u201cdecode a block\u201d. The Huffman Decoder, Index to Data Unit and ALU work together under the control of a dedicated state machine (essentially in the Huffman Decoder). This arrangement allows very high performance decoding of entropy coded coefficient data. There are also other feedback paths operational in this mode of operation. For instance, in JPEG decoding where the VLCs are decoded to provide SIZE and RUN information, the SIZE information is fed back directly from the output of the Index to Data Unit to the Huffman Decoder to instruct the Huffman Decoder how many FLC bits to read. In addition, there are several accelerators implemented. For instance, using the same example all VLC values which yield a SIZE of zero are explicitly trapped by looking at the Huffman Index Value before the Index to Data stage. This means that in the case of non-zero SIZE values, the Huffman Decoder can proceed to read one FLC bit BEFORE the actual value of SIZE is known. This means that no clock cycles are wasted because this reading of the first FLC bit overlaps the single clock cycle required to perform the table look-up in the Index to Data Unit.","B.2.2.2.1 MPEG and H.261 AC Coefficient Data",{"@attributes":{"id":"p-1373","num":"1602"},"figref":"FIG. 127","b":"119"},"The process starts by reading a VLC code. In the normal course of events, the Huffman index is mapped directly into values representing the six bit RUN and the absolute value of the coefficient. A one bit FLC is then read giving the sign of the coefficient. The ALU assembles the absolute value of the coefficient with this sign bit to provide the final value of the coefficient.","Note that the data format at this point is sign-magnitude and, therefore, there is little difficulty in this operation. The RUN value is passed on an auxiliary bus of six bits while the coefficients value (LEVEL) is passed on the normal data bus.","Two special cases exist and these are trapped by looking at the value of the decoded index before the Index to Data operation. These are End of Block (EOB) and Escape coded data. In the case of EOB, the fact that this occurred is passed along through the Index to Data Unit and the ALU blocks so that the Token Formatter can correctly close the open DATA Token.","Escape coded data is more complicated. First six bits of RUN are read and these are passed directly through the Index to Data Unit and are stored in the ALU. Then, one bit of FLC is read. This is the most significant bit of the eight bits of escape that are described in MPEG and H.261 and it gives the sign of the level. The sign is explicitly read in this implementation because it is necessary to send different commands to the ALU for negative values versus positive values. This allows the ALU to convert the twos complement value in the bit stream into sign magnitude. In either case, the remaining seven bits of FLC are then read. If this has the value zero, then a further eight bits must be read.","In the present invention, the Huffman Decoder's internal state machine is responsible for generating commands to control itself and to also control the Index to Data Unit, the ALU and the Token Formatter. As shown in , the Huffman Decoder's instruction comes from one of three sources, the Parser State Machine, the Huffman State Machine or an instruction stored in a register that has previously been received from the Parser State Machine. Essentially, the original instruction from the Parser State Machine (that causes the Huffman State Machine to take over control and read coefficients) is retained in a register, i.e., each time a new VLC is required, it is used. All the other instructions for the decoding are supplied by the Huffman State Machine.","B.2.2.2.2 MPEG DC Coefficient Data","This is handled in the same way as JPEG DC Coefficient Data. The same (loadable) tables are used and it is the responsibility of the controlling microprocessor to ensure that their contents are correct. The only real difference from the MPEG standard is that the predictors are reset to zero (like in JPEG) the correction for this being made in the Inverse Quantizer.","B.2.2.2.3 JPEG Coefficient Data",{"@attributes":{"id":"p-1380","num":"1609"},"figref":"FIG. 120"},{"@attributes":{"id":"p-1381","num":"1610"},"figref":"FIG. 121"},"Dealing first with the process for AC Coefficients, the process starts by reading a VLC using the appropriate tables (there are two AC tables). The Huffman index is then converted into the RUN and SIZE values in the Index to Data Unit. Two values are trapped at the Huffman Index stage, these are for EOB and ZRL. These are the only two values for which no FLC bits are read. In the case when the decode index is neither of these two values, the Huffman Decoder immediately reads one bit of FLC while it waits for the Index to Data Unit to complete the look-up operation to determine how many bits are actually required. In the case of EOB, no further processing is performed by the Huffman State Machine in the Huffman Decoder and another command is read from the Parser State Machine.","In the case of ZRL, no FLC bits are required but the block is not completed. In this case, the Huffman decoder immediately commences decoding a further VLC (using the same table as before).","There is a particular problem with detecting the index values associated with ZRL and EOB. This is because (unlike H.261 and MPEG) the Huffman tables are downloadable. For each of the two JPEG AC tables, two registers are provided (one for ZRL and one for EOB). These are loaded when the table is downloaded. They hold the value of index associated with the appropriate symbol.","The ALU must convert the SIZE bit FLC code to the appropriate sign-magnitude value. These are loaded when the table is downloaded. They hold the value of index associated with the appropriate symbol.","The ALU must convert the SIZE bit FLC code to the appropriate sign-magnitude value. This can be done by first sign-extending the value with the wrong sign. If the sign bit is now set, then the remaining bits are inverted (ones complement).","In the case of DC Coefficients, the decision making in the Huffman Decoding Stage is somewhat easier because there is no equivalent of the ZRL field. The only symbol which causes zero FLC bits to be read is the one indicating zero DC difference. This is again trapped at the Huffman Index stage, a register being provided to hold this index for each of the (downloadable) JPEG DC tables.","The ALU of the present invention has the job of forming the final decoded DC coefficient by retaining a copy of the last DC Coefficient value (known as the prediction). Four predictors are required, one for each of the four active color components. When the DC difference has been decoded, the ALU adds on the appropriate predictor to form the decoded value. This is stored again as the predictor for the next DC difference of that color component. Since DC coefficients are signed (because of the DC offset) conversion from twos complement to sign magnitude is required. The value is then output with a RUN of zero. In fact, the instructions to perform some of the last stages of this are not supplied by the Huffman State Machine. They are simply executed by the Parser State Machine.","In a similar manner to the AC Coefficients, the ALU must first form the DC difference from the SIZE bits of FLC. However, in this case, a twos complement value is required to be added to the predictor. This can be formed by first sign extending with the wrong sign, as before. If the result is negative, then one must be added to form the correct value. This can, of course, be added at the same time as the predictor by jamming the carry into the adder.","B.2.2.3 Error Handling","Error handling deserves some mention. There are effectively four sources of error that are detected:\n\n","The first of these occurs in two situations. If the bit counter reaches sixteen (legal values being 0 to 15) then an error has occurred because the longest legal Huffman code is sixteen bits. If any intermediate value of \u201cindex\u201d exceeds 255 then an error has occurred as described in section B.2.2.1.3.","The second occurs when serial data is encountered when a Token was expected. The third when the opposite condition arises.","The last type of error occurs if there are too many coefficients in a block. This is actually detected in the Index to Data Unit.","When any of these conditions arises, the error is noted in the Huffman error register and the Parser state machine is interrupted. It is the responsibility of the Parser State Machine to deal with the error and to issue the commands necessary to recover.","The Huffman cooperates with the Parser State Machine at the time of the interrupt in order to assure correct operation. When the Huffman Decoder interrupts the Parser State Machine, it is possible that a new command is waiting to be accepted at the output of the Parser State Machine. The Huffman Decoder will not accept this command for two whole cycles after it has interrupted the Parser State Machine. This allows the Parser State Machine to remove the command that was there (which should not now be executed) and replace it with an appropriate one. After these two cycles, the Huffman Decoder will resume normal operation and accept a command if a valid command is there. If not, then it will do nothing until the Parser State Machine presents a valid command.","When any of these errors occur, the \u201cHuffman Error\u201d event bit is set and, if the mask bit is set, the block will stop and the controlling microprocessor will be interrupted in the normal manner.","One complication occurs because in certain situations, what looks like an error, is not actually an error. The most important place where this occurs is when reading the macroblock address. It is legal in the syntaxes of MPEG, H.261 and JPEG for a Token to occur in place of the expected macroblock address. If this occurs in a legal manner, the Huffman error register is loaded with zero (meaning no error) but the Parser State Machine is still interrupted. The Parser State Machine's code must recognize this \u201cno error\u201d situation and respond accordingly. In this case, the \u201cHuffman Error\u201d event bit will not be set and the block will not stop processing.","Several situations must be dealt with. First, the Token occurs immediately with no preceding serial bits. In this case, a \u201cToken when serial expected error\u201d would occur. Instead, a \u201cno error\u201d error occurs in the way just described.","Second, the Token is preceded by a few serial bits. In this case, a decision is made. If all of the bits preceding the Token had the value one (remember that in H.261 and MPEG the coded data is inverted so these are zero bits in the coded data file) then no error occurs. If, however, any of them were zero, then they are not valid stuffing bits and, thus, an error has occurred and a \u201cToken when serial expected\u201d error does occur.","Third, the token is preceded by many bits. In this case, the same decision is made. If all sixteen bits are one, then they are treated as padding bits and a \u201cno error\u201d error occurs. If any of them had been zero, then \u201cRan off Huffman Table\u201d error occurs.","Another place that a token may occur unexpectedly is in JPEG. When dealing with either Huffman tables or Quantizer tables, any number of tables may occur in the same Marker Segment. The Huffman Decoder does not know how many there are. Because of this fact, after each table is completed it reads another 4-bit FLC assuming it to be a new table number. If, however, a new marker segment starts, then a token will be encountered in place of the 4 bit: FLC. This requirement is not foreseen and, therefore, an \u201cIgnore Errors\u201d command bit has been added.","B.2.2.4 Huffman Commands","Here are the bits used by the Parser State Machine to control the Huffman Decoder block and their definitions. Note that the Index to Data Unit command bits are also included in this table. From the microprogrammer's point of view, the Huffman Decoder and the Index to Data Unit operate as one coherent logical block.",{"@attributes":{"id":"p-1403","num":"1636"},"tables":{"@attributes":{"id":"TABLE-US-00124","num":"00124"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Huffman Decoder Commands"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Bit","Name","Function"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["11","Ignore Errors","Used to disable errors in certain circumstances."]},{"entry":["10","Download","Either nominate a table for download"]},{"entry":[{},{},"or download data into that table."]},{"entry":["9","Alutab","Use information from the ALU registers"]},{"entry":[{},{},"to specify the table number (or number"]},{"entry":[{},{},"of bits of FLC)"]},{"entry":["8","Bypass","Bypass the index to Data Unit"]},{"entry":["7","Token","Decode a Token rather than FLC or VLC"]},{"entry":["6","First Coeff","Selects first coefficient tnex for Tcoeff"]},{"entry":[{},{},"table and other special modes."]},{"entry":["5","Special","if set the Huffman State machine should take over"]},{"entry":[{},{},"control."]},{"entry":["4","VLC (not FLC)","Specify VLC or FLC"]},{"entry":["3","Table[3]","Specify the table to use for VLC"]},{"entry":["2","Table[2]","or the number of bits to read for a FLC"]},{"entry":["1","Table[1]"]},{"entry":["0","Table[0]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In this mode, Ignore Errors, Download, Alutab, Token, First Coeff, Special and VLC are all zero. Bypass will be set so that no Index to Data translation occurs.","The binary number in Table[3:0] indicates how many bits are to be read.","The numbers 0 to 12 are legal. The value zero does indeed read zero bits (as would be expected) and this instruction is, therefore, the Huffman Decoder NOP instruction. The values 13, 14 and 15 will not work and the value  is used when the Huffman State Machine is in control to denote the use of \u201cSSSS\u201d as the number of bits of FLC to read.","B.2.2.4.2 Reading VLC","In this mode, Ignore Errors, Download, Alutab, Token, First Coefficient and Special are zero and VLC is one. Bypass will usually be zero so that Index to Data translation occurs.","In this mode Token, First Coefficient and Special are all zero, VLC is one.","The binary number in Table(3:0) indicates which table to use as shown:",{"@attributes":{"id":"p-1410","num":"1643"},"tables":{"@attributes":{"id":"TABLE-US-00125","num":"00125"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.3"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Huffman Tables"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Table[3:0]","VLC Table to use"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0000","TCoefficient (MPEG and H.261)"]},{"entry":["0001","CBP (Coded Block Pattern)"]},{"entry":["0010","MBA (Macroblock Address)"]},{"entry":["0011","MVD (Motion Vector Data)"]},{"entry":["0100","Intra Mtype"]},{"entry":["0101","Predicted  Mtype"]},{"entry":["0110","Interpolated Mtype"]},{"entry":["0111","H.261 Mtype"]},{"entry":["10x0","JPEG (MPEG) DC Table 0"]},{"entry":["10x1","JPEG (MPEG) DC Table 1"]},{"entry":["11x0","JPEG AC Table 0"]},{"entry":["11x1","JPEG AC Table 1"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Note that in the case of the tables held in RAM (i.e., the JPEG tables) bit 1 is not used so that the table selections occur twice. If a non-baseline JPEG decoder is built, then there will be four DC tables and four AC tables and Tables [1] will then be required.","If Tables [3] is zero, then the input data is inverted as it is used in order that the tables are read correctly as H.261 style tables. In the case of Table [3:0]=0, the appropriate Ring modification is also applied.","B.2.2.4.3 NOP Instruction","As previously described, the action of reading a FLC of zero bits is used as a No Operation instruction. No data is read from the input ports (either Token or Serial) and the Huffman Decoder outputs a data value of zero along with the instruction word.","B.2.2.4.4 TCoefficient First Coefficient","The H.261 and MPEG TCoefficient Table has a special non-Huffman code that is used for the very first coefficient in the block. In order to decode a TCoefficient at the start of a block, the First Coefficient bit may be set along with a VLC instruction with table zero. One of the many effects of the First Coefficient bit is to enable this code to be decoded.","Note that in normal operation, it is unusual to issue a \u201csimple\u201d command to read a TCoefficient VLC. This is because control is usually handed to the Huffman Decoder by setting the Special Bit.","B.2.2.4.5 Reading Token Words","In order to read Token words, the Token bit should be set to one. The Special and First Coefficient bits should be zero. The VLC bit should also be set if the Table [0] bit is to work correctly.","In this mode, the bits Table [1] and Table [0] are used to modify the behavior of the Token reading as follows:",{"@attributes":{"id":"p-1418","num":"1651"},"tables":{"@attributes":{"id":"TABLE-US-00126","num":"00126"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Bit","Meaning"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Table[0]","Discard padding bits of serial data"]},{"entry":[{},"Table[1]","Discard all serial data."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"If both Table [0] and Table [1] are zero, then the presence of serial data before the token is considered to be an error and will be signalled as such.","If Table [1] is set, then all serial data is discarded until a Token Word is encountered. No error will be caused by the presence of this serial data.","If Table [0] is set, then padding bits will be discarded. It is, of course, necessary to know the polarity of the padding bits. This is determined by Table [3] in exactly the same way as for reading VLC data. If Table [3] is zero, input data is first inverted and then any \u201cone\u201d bits are discarded. If Table [3] is set to one, the input data is NOT inverted and \u201cone\u201d bits are discarded. Since the action of inverting the data depending upon the Table [3] bit is conditional on the VLC bit, this bit must be set to one. If any bits that are not padding bits are encountered (i.e., \u201c1\u201d bits in H.261 and MPEG) an error is reported.","Note that in these instructions only a single Token word is read. The state of the extension bit is ignored and it is the responsibility of the Demux to test this bit and act accordingly. Instructions to read multiple words are also provided\u2014see the section on Special Instructions.","B.2.2.4.6 ALU Registers Specify Table","If the \u201cAlutab\u201d bit is set, registers in the ALU's register file can be used to determine the actual table number to use. The table number supplied in the command, together with the VLC bit, determines which ALU registers are used;",{"@attributes":{"id":"p-1424","num":"1657"},"tables":{"@attributes":{"id":"TABLE-US-00127","num":"00127"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.4"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ALU Register Selection"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["VLC","table[3:0]","ALU table"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0","x0xx","fwd_r_size"]},{"entry":["0","x1xx","bwd_r_size"]},{"entry":["1","x0xx","dc_huff[comprd]"]},{"entry":["1","x1xx","ac_huff[comprd]"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"In the case of fixed length codes, the correct number of bits are read for decoding the vectors. If r_size is zero, a NOP instruction results.","In the case of Huffman codes, the generated table number has table [3] set to one so that the resulting number refers to one of the JPEG tables.","B.2.2.4.7 Special Instructions","All of the instructions (or modes of operation) described thus far are considered as \u201cSimple\u201d instructions. For each command that is received, the appropriate amount of input data (of either serial of token data) is read and the resulting data is output. If no error is detected, exactly one output will be generated per command.","In the present invention, special instructions have the characteristic that more than one output word may be generated for a single command. In order to accomplish this function, the Huffman Decoder's internal State Machine takes control and will issue itself instructions as required until it decides that the instruction which the Parser requested has been complete.","In all Special instructions, the first real instruction of the sequence that is to be executed is issued with the Special bit set to one. This means that all sequences must have a unique first instruction. The advantage of this scheme is that the first real instruction of the sequence is available without a look-up operation being required based upon the command received from the Parser.","There are four recognized special instructions:\n\n","The first of these reads H.261 and MPEG Transform coefficients, and the like, until the end-of-block symbol is read. If the block is a non-intra block, this command will read the entire block. In this case, the \u201cFirst Coefficient\u201d bit should be set so that the first coefficient trick is applied. If the block is an intra block, the DC term should already have been read and the \u201cFirst Coefficient\u201d bit should be zero.","In the case of an intra block in H.261, the DC term is read using a \u201csimple\u201d instruction to read the 8 bits FLC value. In MPEG, the \u201cJPEG DC\u201d special instruction described below is used.","The \u201cJPEG DC\u201d command is used to read a JPEG style DC term (including the SSSS bits FLC indicated by the VLC). It is also used in MPEG. The First Coefficient bit must be set in order that a counter (counting the number of coefficients) in the Index to Data Unit is reset.","The \u201cJPEG AC\u201d command is used to read the remainder of a block, after the DC term until either an EOB is encountered or the 64coefficient is read.","The \u201cToken\u201d command is used to read an entire Token. Token words are read until the extension bit is clear. It is a convenient method of dealing with unrecognized tokens.","B.2.2.4.8 Downloading Tables.","In the present invention, the Huffman Decoder tables can be downloaded by using the \u201cDownload\u201d bit. The first step is to nominate which table to download. This is done by issuing a command to read a FLC with both the Download and First Coeff bits set. This is treated as an NOP so no bits are actually read, but the table number is stored in a register and is used to identify which table is being loaded in subsequent downloading.",{"@attributes":{"id":"p-1437","num":"1674"},"tables":{"@attributes":{"id":"TABLE-US-00128","num":"00128"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.5"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"JPEG Tables"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["table[3:0]","Table nominated"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["10xx","JPEG DC Codes per bit"]},{"entry":["11xx","JPEG AC Codes per bit"]},{"entry":["00xx","JPEG DC Index to Data"]},{"entry":["01xx","JPEG AC Index to Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"As the above table shows, either the AC or DC tables can be loaded and table [3] determines whether it is the codes-per-bit table (in the Huffman decoder itself) or the Index to Data table that is loaded.","Once the table is nominated, data is downloaded into it by issuing a command to read the required number of FLC (always 8 bits) with the Download bits set (and the First Coeff bit zero). This causes the decoded data to be written into the nominated table. An address counter is maintained, the data is written at the current address and then the address counter is incremented. The address counter is reset to zero whenever a table is nominated.","When downloading the Index to Data tables, the data and addresses are monitored. Note that the address is the Huffman Index number while the data loaded into that address is the final decoded symbol. This information is used to automatically load the registers that hold the Huffman index number for symbols of interest. Accordingly, in a JPEG AC table, when the data has the value corresponding to ZRL is recognized, the current address is written into the register CED_H_KEY_ZRL_INDEX0 or CED_H_KEY_ZRL_INDEX1 as indicated by the table number.","Since decoded data is written into the codes-per-bit table one phase after it has been decoded, it is not possible to read data from the table during this phase. Therefore, an instruction attempting to read a VLC that is issued immediately after a table download instruction will fail. There is no reason why such a sequence should occur in any real application (i.e., when doing JPEG). It is, however, possible to build simulation tests that do this.","B.2.2.5 Huffman State Machine","The Huffman State Machine, in accordance with the present invention, operates to provide the Huffman Decoder commands that are internally generated in certain cases. All of the commands that may be generated by the internal state machine may also be provided to the Huffman Decoder by the Demux.","The basic structure of the State Machine is as follows. When a command is issued to the Huffman Decoder, it is stored in a series of auxiliary latches so that it may be reused at a later time. The command is also executed by the Huffman Decoder and analyzed by the Huffman State Machine. If the command is recognized as being the first of a known instruction sequence and the SPECIAL bit is set, then the Huffman Decoder State Machine takes over control of the Huffman Decoder from the Parser State Machine.","At this point, there are three sources of instructions for the Huffman Decoder:\n\n","In case (2), it is possible that the table number is provided by feedback from the Index to Data Unit, this would then replace the field in the Huffman State Machine ROM.","In case (1), in certain instances, table numbers are provided by values obtained from the ALU register file (e.g., in the case of AC and DC table numbers and F-numbers). These values are stored in the auxiliary command storage, so that when that command is later reused the table number is that which has been stored. It is not recovered again from the ALU since, in general, the counters will have advanced in order to refer to the next block.","Since the choice of the next instruction that will be used depends upon the data that is being decoded, it is necessary for the decision to be made very late in a cycle. Accordingly, the general structure is one in which all of the possible instructions are prepared in parallel and multiplexing late in the cycle determines the actual instruction.","Note that in each case, in addition to determining the instruction that will be used by the Huffman Decoder in the next cycle, the state machine ROM also determines the instruction that will be attached to the current data as it passes to the Index to Data Unit and then onto the ALU. In exactly the same way, all three of these instructions are prepared in parallel and then a choice is made late in the cycle.","Again, there are three choices for this part of the instruction that correspond to the three choices for the next Huffman Decoder instruction above.\n\n","The EOB comparator's output essentially forces selection of the constant instruction to be presented to the Index to Data Unit and will also cause the next Huffman Instruction to be the next instruction from the Parser. The exact function of the comparator is controlled by bits in the Huffman State Machine ROM.","Behind the EOB comparator, there are four registers holding the index of the EOB symbol in the AC and DC JPEG tables. In the case of the DC tables, there is of course no End-Of-Block symbol but there is the zero-size symbol, that is generated by a DC difference of zero. Since this causes zero bits of FLC to be read in exactly the same way as the EOB symbol, they are treated identically.","In addition to the four index values held in registers, the constant value, 1, can also be used. This is the index number of the EOB symbol in H.261 and MPEG.","B.2.2.5.2 ZRL Comparator","In the present invention, this is the more general purpose comparator. It causes the choice of either the Huffman State Machine instruction or the original Instruction for use by the I to D.","Behind the ZRL comparator, there are four values. Two are in registers and hold the index of the ZRL code in the AC tables. The other two values are constants, one is the value zero and the other is 12 (the index of ESCAPE in MPEG and H.261).","The constant zero is used in the case of an FLC. The constant 12 is used whenever the table number is less than 8 (and VLC). One of the two registers is used if the table number is greater than 7 (and VLC) as determined by the low order bit of the table number.","A bit in the state machine ROM is provided to enable the comparator and another is provided to invert its action.","If the TOKEN bit in the instruction is set, the comparator output is ignored and replaced instead by the extn bit. This allows for running until the end of a Token.","B.2.2.5.3 Huffman State Machine ROM","The instruction fields in the Huffman State Machine are as follows:","nxtstate[:]","The address to use in the next cycle. This address may be modified.","statectl","Allows modification of the next state address. If zero, the state machine address is unmodified, otherwise the LSB of the address is replaced by the value of either of the two comparators as follows:",{"@attributes":{"id":"p-1463","num":"1706"},"tables":{"@attributes":{"id":"TABLE-US-00129","num":"00129"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"nxtstate[0]"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Replace Lsb by EOB match"]},{"entry":["1","Replace Lsb by ZRL match"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Note: in any case, if the next Huffman Instruction is selected as \u201cRe-run original command\u201d the state machine will jump to location , ,  or  as appropriate for the command.","eobct[:]","This controls the selection of the next Huffman instruction based upon the EOB comparator and extn bit as follows:",{"@attributes":{"id":"p-1467","num":"1710"},"tables":{"@attributes":{"id":"TABLE-US-00130","num":"00130"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"eobctl[1:0]"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00","No effect - see zrictl[1:0]"]},{"entry":["01","Take new (Parser) command if EOB"]},{"entry":["10","Take new (Parser) command if extn low"]},{"entry":["11","Unconditional Demux instruction"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"zrlct[:]","This controls the selection of the next Huffman instruction based upon the ZRL comparator. If the condition is met, then it takes the state machine instruction, otherwise it re-runs the original instruction. In either case, if an eobctl*+ condition takes a demux instruction then this (eobctl*+) takes priority as follows:",{"@attributes":{"id":"p-1470","num":"1713"},"tables":{"@attributes":{"id":"TABLE-US-00131","num":"00131"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"zrlctl[1:0]"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00","Never take SM (always re-run)"]},{"entry":["01","Always take SM command"]},{"entry":["10","SM if ZRL matches"]},{"entry":["11","SM if ZRL does not match"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"smtab[:]","In the present invention, this is the table number that will be used by the Huffman Decoder if the selected instruction is the state machine instruction. However, if the ZRL comparator matches, then the zrltab[:] field is used in preference.","If it is not required that a different table number be used depending upon whether a ZRL match occurs, then both smtab[:] and zrltab[:] will have the same value. Note, however, that this can lead to strange simulation problems in Lsim. In the case of MPEG, there is no obvious requirement to load the registers that indicate the Huffman index number for ZRL (a JPEG only construction). However, these are still selected and the output of the ZRL comparator becomes \u201cunknown\u201d despite the fact that both smtab[:] and zrltab[:] have the same value in all cases that the ZRL comparator may be \u201cunknown\u201d (so it does not matter which is selected) the next state still goes to \u201cunknown\u201d.","zrltab[:]","This is the table number that will be used by the Huffman decoder if the selected instruction is the state machine instruction. However, if the ZRL comparator matches then the zritab[:] field is used in preference.","If it is not required that a different table number be used depending upon whether a ZRL match occurs, then both smtab[:] and zrltab[:] will have the same value. Note, however, that this can lead to strange simulation problems in Lsim. In the case of MPEG, there is no obvious requirement to load the register that indicate the Huffman index number for ZRL (a JPEG only construction). However, these are still selected and the output of the ZRL comparator becomes \u201cunknown\u201d despite the fact that both smtab[:] and zrltab[:] have the same value in all cases that the ZRL comparator may be \u201cunknown\u201d (so it does not matter which is selected) the next state still goes to \u201cunknown\u201d.","zrltab[:]","This is the table number that will be used by the Huffman Decoder if the selected instruction is the state machine instruction and the ZRL comparator matches.","smvlc","This is the VLC bits used by the Huffman Decoder if the selected instruction is the state machine instruction.","aluzrl[:]","This field controls the selection of the instruction that is passed to the ALU. It will either be the command from the Parser State Machine (that was stored at the start of the instruction sequence) or the command from the state machine:",{"@attributes":{"id":"p-1483","num":"1726"},"tables":{"@attributes":{"id":"TABLE-US-00132","num":"00132"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"aluzrl[1:0]"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["00","Always take the saved Parser State Machine Command"]},{"entry":["01","Always take the Huffman State Machine Command"]},{"entry":["10","Take the Huffman SM command if not EOB"]},{"entry":["11","Take the Huffman SM command if not ZRL"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"alueob","This wire controls modification of the instruction passed to the ALU based upon the EOB comparator. This simply forces the ALU's output mode to \u201czinput\u201d. This is an arbitrary choice; any output mode apart from \u201cnone\u201d will suffice. This is to ensure that the end-of-lock command word is passed to the Token Formatter block where it controls the proper formatting of DATA Tokens:",{"@attributes":{"id":"p-1486","num":"1729"},"tables":{"@attributes":{"id":"TABLE-US-00133","num":"00133"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":"alueob"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["0","Do not modify ALU outsrc field"]},{"entry":["1","Force \u201czinput\u201d into outsrc if EOB match"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The remainder of the fields are the ALU instruction fields. These are properly documented in the ALU description.","B.2.2.5.4 Huffman State Machine Modification","In one embodiment of the state machine, the Index to Data Unit needs to \u201cknow\u201d when the RUN part of an escape-coded Tcoefficient is being passed to the Index to Data Unit. While this can be accomplished using an appropriate bit in the control ROM, but to avoid changing the ROM, an alternative approach has been used. In this regard, the address going into the ROM is monitored and the address value five is detected. This is the appropriate location designated in the ROM dealing with the RUN field. Of course, it will be apparent that the ROM could be programmed to use other selected address values. Moreover, the aforedescribed approach of using a bit in the control ROM could be utilized.","B.2.2.6 Guided Tour of Schematics","In the present invention, the Huffman Decoder is called \u201chd\u201d. Logically, \u201chd\u201d actually includes the Index to Data Unit (this is required by the limitations of compiled code generation). Accordingly, \u201chd\u201d includes the following major blocks;",{"@attributes":{"id":"p-1490","num":"1733"},"tables":{"@attributes":{"id":"TABLE-US-00134","num":"00134"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.6"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Huffman Modules"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Module Name","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"hddp","Huffman Decoder (Arithmetic) datapath"]},{"entry":[{},"hdstdp","Huffman State Machine Datapath"]},{"entry":[{},"hfitod","Index to Data Unit"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"The following description of the Huffman modules is accomplished by a global explanation of the various subsystem areas shown in greater detail in the drawings which are readily comprehended by one of ordinary skill in the art.","B.2.2.6.1 Description of \u201chd\u201d","The logic for the two-wire interface control usually includes three ports controlled by the two-wire interface; data input, data output and the command. In addition, there are two \u201cvalid\u201d wires from the input shifter; token_valid indicating that a Token is being presented on in_data[:] and serial_valid indicating that data is being presented on serial.","The most important signals generated are the enables that go to the latches. The most important being e which is the enable for the ph latches. The majority of ph latches are not enabled whilst two enables are provided for those that are; e associated with serial data and et associated with Token data.","In the present invention, the \u201cdone\u201d signals (done, notdone and their ph variants done and notdone) indicate when a primitive Huffman command is completed. In the case when a Huffman State Machine command is executed, \u201cdone\u201d will be asserted at the completion of each primitive command that comprises the entire state-machine command. The signal notnew prevents the acceptance of a new command from the Parser State Machine until the entire Huffman State Machine command is completed.","Regarding control of information received from the Index to Data Unit, the control logic for the \u201csize\u201d field is fed back to the Huffman decoder during JPEG coefficient decoding. This can actually happen in two ways. If the size is exactly one, this is fed back on the dedicated signal notfbone. Otherwise, the size is fed back from the output of the Index to data unit (out_data[:] and a signal fbvalid indicates that this is occurring. The signal muxsize is produced to control the multiplexing of the fed-back data into the command register (sheet ).","In addition, there is feedback that exactly 64coefficients have been decode. Since in JPEG the EOB is not coded in this situation, the signal forceeob is produced. By analogy, with the signals for feeding back size, as mentioned above, there are in fact two ways in which this is done. Either jpegeob is used (a ph signal) or jpegeob. Note that in the case when a normal feedback is made (jpegeob), the latch i_ is only loaded as the data is fed back and not cleared until a new Parser State Machine command is accepted. The signal forceeob does not actually get generated until a Huffman code is decoded. Thus, the fixed length code (i.e., size bits) is not affected, but the next Huffman coded information is replaced by the forced end of block. In the case when size is one and jpegeob is used, only one bit is read and, therefore, i_ and i_ delay the signal to the correct time. Note that it is impossible for a size of zero to occur in this situation since the only symbols with size zero are EOB and ZRL.","The decoding is fairly random decoding of the command to produce tcoeff_tab (Huffman decoding using Tcoeff table), mba_tab (Huffman decoding using the MBA table) and nop (no operation). There are several reasons for generating nop. A Fixed length code of size zero is one, the forceeob signal is another (since no data should be read from the input shifter even though an output is produced to signal EOB) and lastly table download nomination is a third.","notfrczero (generated by a FLC of size zero, a NOP) ensures that the result is zero when a NOP instruction is used. Furthermore, invert indicates when the serial bits should be inverted before Huffman decoding (see section B.2.2.1.1). ring indicates when the transform coefficient ring should be applied (see section B.2.2.1.2).","Decoding is also accomplished regarding addressing the codes-per-bit ROMs. These are built out of the small data-path ROMs. The signals are duplicated (e.g., csha and csla) purely to get sufficient drive by separating the ROMs into two sections. The address can be taken either from the bit counter (bit[:]) or from the microprocessor interface address (key-addr[:]) depending upon UPI access to the block being selected.","Additional decoding is concerned with the UPI reading of registers such as those that hold the Huffman index values for the JPEG tables (EOB, ZRL etc.). Also included is a tristate driver control for these registers and the UPI reading of the codes per bit RAMs.","Arithmetic datapath decoding is also provided for certain important bit numbers first_bit is used in connection with the Tcoeff first coefficient trick and bit_five is concerned with applying the ring in the Tcoeff table. Note the use of forceeob to simulate the action that the EOB comparator matches the decoded index value.","Regarding the extn bit, if a token is read from the input shifter, then the associated extn bit is read along with it. Otherwise, the last value of extn is preserved. This allows the testing of the extn bit by the microcode program at any time after a token has been read.","When zerodat is asserted, the upper four bits of the Huffman output data are forced to zero. Since these only have valid values when decoding fixed length codes, they are zeroed when decoding a VLC, a token or when a NOP instruction is executed for any reason.","Further circuitry detects when each command is completed and generates the \u201cdone\u201d signals. Essentially, there are two groups of reasons for being \u201cdone\u201d; normal reasons and exceptional reasons. These are each handled by one of the two three way multiplexers.","The lower multiplexer (i_) handles the normal reasons. In the case of a FLC, the signal ndnflc is used. This is the output of the comparator comparing the bit counter with the table number. In the case of a VLC, the signal ndnvlc is used. This is an output from the arithmetic datapath and reflects directly Equation 9. In the case of an NOP instruction or a Token, only one cycle is required and, therefore, the system is unconditionally \u201cdone\u201d.","In the present invention, the upper multiplexer (i_) handles exceptional cases. If the decoder is expecting a size to be fed back (fbexpctd) in JPEG decoding and that size is one (notfbone), then the decoder is done because only one bit is required. If the decoder is doing the first bit of the first coefficient using the Tcoeff table, it is done if bit zero of the current index is zero (see Section B.2.2.1.2). If neither of these conditions are met then there is no exceptional reason for being done.","The NOR gate (i_) finally resolves the \u201cdone\u201d condition. The condition generated by i- (i.e., that the data is not valid) forces \u201cdone\u201d. This may seem a little strange. It is used primarily just after reset to force the machine into its \u201cdone\u201d state in preparation for the first command (\u201cdone\u201d resets all counters, registers, etc.). Note that any error condition also forces \u201cdone\u201d.","The signal notdonex is required for use in detecting errors. The normal \u201cdone\u201d signals cannot be used since on detecting an error \u201cdone\u201d is forced anyway. The use of \u201cdone\u201d would give a combinatorial feedback loop.","Error detection and handling, is accomplished by circuitry which detects all of the possible error conditions. These are Red together in i_. In this case, i_, i- and i_ constitute the three bit Huffman error register. Note i_ and i- which disable the error in the cases when there is no \u201creal\u201d error (section B.2.2.3).","In addition, i_ and i_ along with the associated circuitry provide a simple state machine that controls the acceptance of the first command after an error is detected.","As previously indicated, control signals are delayed to match pipeline delays in the Index to Data Unit and the ALU.","Itod_bypass is the actual bypass signal passed to the Index to Data Unit. It is modified when the Huffman State Machine is in control to force bypass whenever a fixed length code is decoded.","Aluinstr[] is the bit that causes the ALU to feedback (condition codes) to the Parser State Machine. Furthermore, it is important when the Huffman State Machine is in control that the signals are only asserted once (rather than each time one of the primitive commands completes).","Aluinstr[] is the bit that allows the ALU to step the block counters (if other ALU instruction bits specify an increment too). This also must only be asserted once.","In addition, these bits must only be asserted for ALU instructions that output data to the Token Formatter. Otherwise, the counters may be incremented prior to the first output to the Token formatter causing an incorrect value of \u201ccc\u201d in a DATA token.","In the illustrated embodiment of the invention, either alunode[] or alunode[] will be low if the ALU will output to the Token Formatter.",{"@attributes":{"id":"p-1517","num":"1760"},"figref":["FIG. 118","FIG. 27"]},"Multiplexing is provided to deal with the case when the table number is specified by the ALU register file locations (see Section B.2.2.4.6).","The modification of aluinstr[:] deals with forcing the ALU outsrc instruction field to non-none (section B.2.2.5.3, description of alueob)","Regarding the command register for the Huffman Decoder block (x), each bit of the command has associated multiplexer which selects between the possible sources of commands. Four control signals control this selection:","Selhold causes the register to retain its current state.","Selnew causes a new command to be loaded from the Parser State Machine. This also enables loading of the registers that retain the original Parser State Machine command for later use.","Selold causes loading of the command from the registers that retain the original Parser State Machine command.","\/selsm causes loading of the command from the Huffman State Machine ROM.","In the case of the table number, the situation is slightly more complicated since the table number may also be loaded from the output data of the Index to Data Unit (selholdt and muxsize). Latches hold the current address in the Huffman state machine ROM. The logic detects which of the possible four commands are being executed. These signals are combined to form the lower two bits of the start address in the case of a new command.","Logic also detects when the output of the state machine ROM is meaningless (usually because the command is a \u201csimple\u201d command). The signal notignorerom effectively disables operation of the state machine, in particular, disabling any modification of the instruction passed to the ALU.","The circuitry generating fixstate controls the limited jumping capability of this state machine.","Decoding is also provided for driving the signals into the Huffman State Machine ROM. This is datapath-style combinatorial ROM.","The generation of escape_run is described in Section B.2.2.5.4.","Decoding also provides for the registers that hold the Huffman Index number for symbols such as ZRL and EOB. These registers can be loaded from the UPI or the datapath. The decoding in the center(es[:] and zs[:] is generating the select signals for the multiplexers that select which register or constant value to compare against the decode Huffman Index.","Regarding the control logic for the Huffman State Machine. Here the \u201cinstruction\u201d bits from the Huffman State Machine ROM are combined with various conditions to determine what to do next and how to modify the instruction word for the ALU.","In the present invention, the signals notnew, notsm and notold are used on sheet  to control the operation of the Huffman Decoder command register. They are generated here in an obvious manner from the control bits in the state machine ROM (described in Section B.2.2.5.3) together with the output of the Huffman Index comparators (neobmatch and nzrlmatch).","Selection is also accomplished of the source for the instruction passed to the ALU. The actual multiplexing is performed in the Huffman State Machine datapath \u201chfstdp\u201d. Four control signals are generated.","In the case when the end-of-block has not been encountered, one of aluseldmx (selecting the Parser State Machine instruction) or aluselsm (selecting the Huffman state machine instruction) will be generated.","In the case when the end-of-block has not been encountered, one of aluseleobd (selecting the Parser State Machine instruction) or aluseleobs (selecting the Huffman State Machine instruction) will be generated. In addition the \u201coutsrc\u201d field of the ALU instruction is modified to force it to \u201czinput\u201d.","A register holds the nominated table number during table download. Decoding is provided for the codes-per-bit RAMs. Additional decoding recognizes when symbols like EOB and ZRL are downloaded so that the Huffman Index number registers can be automatically loaded.","Regarding the bit counter, a comparator detects when the correct number of bits have been read when reading a FLC.","B.2.2.6.2 Description of \u201chddp\u201d","Comparators detect the specific values of Huffman Index. Registers hold the values for the downloadable tables. The multiplexers (meob[:] and mzr[:]) select which value to use and the exclusive-or gates and gating constitute the comparators.","Adders and registers directly evaluate the equations described in Section B.2.2.1. No further description is thought necessary here. An exclusive or is used for inverting the data (i_) described in Section B.2.2.1.1.","The \u201ccode\u201d register is 12 bits wide. A multiplexing arrangement implements the \u201cring\u201d substitution described in Section B.2.2.1.2.","Regarding the pipeline delays for data and multiplexing between decoded serial data (index[:]) and Token data (ntoken[:]), the Huffman index value is decided in ZRL and EOB symbols.","Codes-per-bit ROMs and their multiplexing are used for deciding which table to use. This arrangement is used because the table select information arrives late. All tables are then accessed and the correct table selected.","Regarding the codes-per-bit RAM, the final multiplexing of the codes-per-bit ROM and the output of the codes-per-bit RAM takes place inside the block \u201chdcpbram\u201d.","B.2.2.6.3 Description of \u201chdstdp\u201d","In the present invention, \u201cHdstdp\u201d comprises two modules. \u201chdstdel\u201d is concerned with delaying the Parser State Machine control bits until the appropriate pipeline stage, e.g., when they are supplied to the ALU and Token Formatter. It only processes about half of the instruction word that is passed to the ALU, the remainder being dealt with by the other module \u201chdstmod\u201d.","\u201cHdstmodt\u201d includes the Huffman State Machine ROM. Some bits of this instruction are used by the Huffman State Machine control logic. The remaining bits are used to replace that part of the ALU instruction word (from the Parser State Machine) that is not dealt with in \u201chdstdel\u201d.","\u201cHdstmod\u201d is obvious and requires no explanation\u2014there are only pipeline delay registers.","\u201cHdstdel\u201d is also very simple and is handled by a ROM and multiplexers for modifying the ALU instruction. The remainder of the circuitry is concerned with UPI read access to half of the Huffman State Machine ROM outputs. Buffers are also used for the control signals.","B.2.3 The Token Formatter","The Huffman Decoder Token Formatter, in accordance with the present invention, sits at the end of the Huffman block. Its function, as its name suggests, is to format the data from the Huffman Decoder into the propriety Token structure. The input data is multiplexed with data in the Microinstruction word, under control of the Microinstruction word command field. The block has two operating modes; DATA_WORD, and DATA_TOKEN.","B.2.3.1 The Microinstruction Word",{"@attributes":{"id":"p-1550","num":"1793"},"tables":{"@attributes":{"id":"TABLE-US-00135","num":"00135"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE B.2.7"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"The Microinstruction"},{"entry":"word consisting of seven fields"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Field Name","Bits"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Token","0:7"]},{"entry":[{},"Mask","\u20028:11"]},{"entry":[{},"Block Type (Bt)","12:13"]},{"entry":[{},"External Extn (Ee)","14"]},{"entry":[{},"Demux Extn (De)","15"]},{"entry":[{},"End of Block (Eb)","16"]},{"entry":[{},"Command (Cmd)","17"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u200217","16","15","14","\u200312","\u2003\u2003\u20038","\u2003\u2003\u2003\u20030"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]},{"entry":[{},"Cmd","Eb","De","Ee","Bt","Mask","Token"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"7","align":"center","rowsep":"1"}}]},{"entry":[{},"The Microinstruction word is governed by the same accept as the Data word. "]}]}}]}}},"The Microinstruction word is governed by the same accept as the Data word.","B.2.3.2 Operating Modes",{"@attributes":{"id":"p-1552","num":"1795"},"tables":{"@attributes":{"id":"TABLE-US-00136","num":"00136"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.8"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Bit Allocation"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"119pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Cmd","Mode"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["0","Data_Word"]},{"entry":["1","Data_Token"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In this mode, the top eight bits of the input are fed to the output. The bottom eight bits will be either the bottom eight bits of the input, the Token field of the Microinstruction word or a mixture of both, depending on the mask field. Mask represents the number of input bits in the mix, i.e.\n\n","When mask is set to 0\u00d78 or greater, the output data will equal the input data. This mode is used to output words in non-DATA Tokens. With mask set to 0, out_data[:] will be the Token field of the Microinstruction word. This mode is used for outputting Token headers that contain no data. When Token headers do contain data, the number of data bits is given by the mask field.","If External Extn(Ee) is set, out_extn=in_extn, otherwise out_extn=De.Bt and Eb are \u201cdon't care\u201d.","B.2.3.2.2 Data Token","This mode is used for formatting DATA Tokens and has two functions dependent on a signal, first coefficient. At reset, first coefficient is set. When the first data coefficient arrives along with a Microinstruction word that has cmd set to 1, out_data[:] is set to 0\u00d71 and out_data[:] takes the value of the Bt field in the Microinstruction word. This is the header of a DATA Token. When this word has been accepted, the coefficient that accompanied the command is loaded into a register, RL and first coefficient takes the value of Eb. When the next coefficient arrives, out_data[:] takes the previous coefficient, stored in RL. RL and first_coefficient are then updated. This ensures that when the end of the block is encountered and Eb is set, first_coefficient is set, ready for the next DATA Token, i.e.,",{"@attributes":{"id":"p-1557","num":"1802"},"tables":{"@attributes":{"id":"TABLE-US-00137","num":"00137"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (first_coefficient)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"out_data[16:2 ] = 0x1"]},{"entry":[{},"out_data[1:0 ] = Bt[1:0]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RL[16:0 ]= in_datat[16:0]"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"out_data[16:0 ]= RL[16:0]"]},{"entry":[{},"RL[16:0 ]= in_data[16:0]"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"out_extn = \u2212Eb"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"In accordance with the present invention, most of the instruction bits are supplied in the normal manner by the Parser State Machine. However, two of the fields are actually supplied by other circuitry. The \u201cBt\u201d field mentioned above is connected directly to an output of the ALU block. This two bit field gives the current value of \u201ccc\u201d or \u201ccolor component\u201d. Thus, when a DATA Token header is constructed, the lowest order two bits take the color component directly from the ALU counters. Secondly, the \u201cEb\u201d bit is asserted in the Huffman decoder whenever and End-of-block symbols id decoded (or in the case of JPEG when one is assumed because the last coefficient in the block is coded).","The in_extn signal is derived in the Huffman Decoder. It only has meaning with respect to Tokens when the extension bit is supplied along with the Token word in the normal way.","B.2.4 The Parser State Machine","The Parser State Machine of the present invention is actually a very simple piece of circuitry. The complication lies in the programming of the microcode ROM which is discussed in Section B.2.5.","Essentially the machine consists of a register which holds the current address. This address is looked up in the microcode ROM to produce the microcode word. The address is also incremented in a simple incrementer and this incremented address is one of two possible addresses to be used for the next state. The other address is a field in the microcode ROM itself. Thus, each instruction is potentially a jump instruction and may jump to a location specified in the program. If the jump is not taken, control passes to the next location in the ROM.","A series sixteen condition code bits are provided. Any one of these conditions may be selected (by a field in the microcode ROM) and, in addition, it may be inverted (again a bit in the microcode ROM). The resulting signal selects between either the incremented address or the jump address in the microcode ROM. One of the conditions is hard-wired to evaluate as \u201cFalse\u201d. If this condition is selected, no jump will occur. Alternatively, if this condition is selected and then inverted, the jump is always taken; an unconditional jump.",{"@attributes":{"id":"p-1563","num":"1808"},"tables":{"@attributes":{"id":"TABLE-US-00138","num":"00138"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE B.2.9"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Condition Code Bits"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Bit No.","Name","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["0","user[0]","Connected to a register programmable by the"]},{"entry":["1","user[1]","user from the microprocessor interface. They"]},{"entry":["2","CDD_eight","allow user defined condition codes that can be"]},{"entry":["3","CDD_special","tested with little overhead. Two are defined to"]},{"entry":[{},{},"control non-standard \u201cCoded block Pattern\u201d"]},{"entry":[{},{},"processing for experimental 4 block and 8"]},{"entry":[{},{},"block macroblock structures."]},{"entry":["4","he[0]","These bits connect directly to the Huffman"]},{"entry":["5","he[1]","decoders Huffman Error register."]},{"entry":["6","he[2]"]},{"entry":["7","Extn","The Extension bit (for Tokens)"]},{"entry":["8","Blkptn","The Block Pattern Shifter"]},{"entry":["9","MBstart","At Start of a Macroblock"]},{"entry":["10\u2002","Picstart","At Start of a Picture"]},{"entry":["11\u2002","Restart","At Start of a Restart Interval"]},{"entry":["12\u2002","Chngdet","The \u201cSticky\u201d Change Detect bit"]},{"entry":["13\u2002","Zero","ALU zero condition"]},{"entry":["14\u2002","Sign","ALU sign condition"]}]}}]}},"br":{}},"The two-wire interface control, in accordance with the invention, is a little unusual in this block. There is a two-wire interface between the Parser State Machine and the Huffman Decoder. This is used to control the progress of commands. The Parser State Machine will wait until a given command has been accepted before it proceeds to read the next command from the ROM. In addition, condition codes are fed back through a wire from the ALU.","Each command has a bit in the microcode ROM that allows it to specify that it should wait for feedback. If this occurs, then after that instruction has been accepted by the Huffman Decoder, no new commands are presented until the feedback wire from the ALU becomes asserted. This wire, fb_valid, indicates that the condition codes currently being supplied by the ALU are valid in the sense that they reflect the data associated with the command that requested the wait for feedback.","The intended use of the feature, in accordance with the present invention, is in constructing conditional jump commands that decide the next state to jump to as a result of decoding (or processing) a particular piece of data. Without this facility it would be impossible to test any conditions depending upon data in the pipeline since the two-wire control means that the time at which a certain command reaches a given processing block (i.e., the ALU in this case) is uncertain.","Not all instructions are passed to the Huffman Decoder. Some instructions may be executed without the need for the data pipeline. These tend to be jump instructions. A bit in the microcode ROM selects whether or not the instruction will be presented to the Huffman Decoder. If not, there is no requirement that the Huffman Decoder accept the instruction and, therefore, execution can continue in these circumstances even if the pipeline is stalled.","B.2.4.2 Event Handling","There are two event bits located in the Parser State Machine. One is referred to as the Huffman event and the other is referred to as the Parser Event.","The Parser Event is the simplest of these. The \u201ccondition\u201d being monitored by this event is simply a bit in the microcode ROM. Thus, an instruction may cause a Parser Event by setting this bit. Typically, the instruction that does this will write an appropriate constant into the rom_control register so that the interrupt service routine can determine the cause of the interrupt.","After servicing a Parser Event (or immediately if the event is masked out) control resumes at the point where it left off. If the instruction that caused the event has a jump instruction (whose condition evaluates true) then the jump is taken in the normal manner. Hence, it is possible to jump to an error handler after servicing by coding the jump.","A Huffman event is rather different. The condition being monitored is the \u201cOR\u201d of the three Huffman Error bits. In reality, this condition is handled in a very similar manner to the Parser Event. However, an additional wire from the Huffman Decoder, huffintrpt, is asserted whenever an error occurs. This causes control to jump to an error handler in the microcode program.","When a Huffman error occurs, therefore, the sequence involves generating interrupt and stopping the block. After servicing, control is transferred to the error handler. There is no \u201ccall\u201d mechanism and unlike a normal interrupt, it is not possible to return to the point in the microcode before the error occurred following error handling.","It is possible for huffintrpt to be asserted without a Huffman error being generated. This occurs in the special case of a \u201cno-error\u201d error as discussed in Section B.2.2.3. In this case, no interrupt (to the microprocessor interface) is generated, but control is still passed to the error handler (in the microcode). Since the Huffman error register will be clear in this case, the microcode error handler can determine that this is the situation and respond accordingly.","B.2.4.3 Special Locations","There are several special locations in the microcode ROM. The first four locations in the ROM are entry points to the main program. Control passes to one of these four locations on reset. The location jumped to depends upon the coding standard selected in the ALU register, coding_std. Since this location is itself reset to zero by a true reset control passes to location zero. However, it is possible to reset the Parser State Machine alone by using the UPI register bit CED_H_TRACE_RST in CED_H_TRACE. In this case, the coding_std register is not reset and control passes to the appropriate one of the first four locations.","The second four locations (0\u00d7004 to 0\u00d7007) are used when a Huffman interrupt takes place. Typically, a jump to the actual error handler is placed in each of these locations. Again, the choice of location is made as a result of the coding standard.","B.2.4.4 Tracing","As a diagnostic aid, a trace mechanism is implemented. This allows the microcode to be single-stepped. The bits CED_H_TRACE_EVENT and CED_H_TRACE_MASK in the register CED_H_TRACE control this. As their names suggest, they operate in a very similar fashion to the normal event bits. However, because of several differences (in particular no UPI interrupt is ever generated) they are not grouped with the other event bits.","The tracing mechanism is turned on when CED_H_TRACE_MASK is set to one. After each microcode instruction is read from the ROM, but before it is presented to the Huffman Decoder, a trace event occurs. In this case, CED_H_TRACE_EVENT becomes one. It must be polled because no interrupt will be generated. The entire microcode word is available in the registers CED_H_KEY_DMX_WORD0 through CED_H_KEY_DMXWORD_. The instruction can be modified at this time if required. Writing a one to CED_H_TRACE_EVENT causes the instruction to be executed and clears CED_H_TRACE_EVENT. Shortly after this time, when the next microcode word to be executed has been read from the ROM, a new trace event will occur.","B.2.5 The Microcode","The microcode is programmed using an assembler \u201chpp\u201d which is a very simple tool and much of the abstraction is achieved by using a macro preprocessor. A standard \u201cC\u201d preprocessor \u201ccpp\u201d may be used for this purpose.","The code is instructed as follows:","Ucode.u is the main file. First, this includes tokens.h to define the tokens. Next, regfile.h defines the ALU register map. The fields.u defines the various fields in the microcode word, giving a list of defined symbols for each possible bit pattern in the field. Next, the labels that are used in the code are defined. After this step, instr.u is included to define a large number of \u201ccpp\u201d macros which define the basic instructions. Then, errors.h defines the numbers which define the Parser events. Next, unword.u defines the order in which the fields are placed to build the microcode word.","The remainder of ucode.u is the microcode program itself.","B.2.5.1 The Instructions","In this section the various instructions defined in ucode.u are described. Not all instructions are described here since in many cases they are small variations on a theme (particularly the ALU instructions).","B.2.5.1.1 Huffman and Index to Data Instructions","In the invention, the H_NOP instruction is used by the Huffman Decoder. It is the No-operation instruction. The Huffman does nothing in the sense that no data is decoded. The data produced by this instruction is always zero. Accordingly, the associated instruction is passed onto the ALU.","The next instructions are the Token groups; H_TOKSRCH, H_TOKSKIP_PAD, H_TOKSKIP_JPAD, H_TOKPASS and H_TOKREAD. These all read a token or tokens from the Input Shifter and pass them onto the rest of the machine. H_TOKREAD reads a single token word. H_TOKPASS can be used to read an entire token, up to and including, the word with a zero extn bit. The associated command is repeated for each word of the Token. H_TOKSRCH discards all serial data preceding a Token and then reads one token word. H_TOKSKIP_PAD skips any padding bits (H.261 and MPEG) and then reads one Token word. H_TOKSKIP_JPAD does the same thing for JPEG padding.","H_FLC(NB) reads a fixed length code of \u201cNB\u201d bits.","H_VLC(TBL) reads a vic using the indicated table (passed as mnemonic, e.g., H_VLC(tcoeff)).","H_FLC_IE(NB) is like H_FLC, but the \u201cignore errors\u201d bit is set.","H_TEST_VLC(TBL) is like H_VLC, but the bypass bit is set so that the Huffman Index is passed through the Index to Data Unit unmodified.","H_FWD_R and H_BWD_R read a FLC of the size indicated by the ALU registers r_fwd_r_size and r_bwd_r_size, respectively.","H_DCJ reads JPEG style DC coefficients, the table number from the ALU.","H_DCH reads a H.261 DC term.","H_TCOEFF and H_DCTCOEFF read transform coefficients. In H_DCTCOEFF, the first coeff bit is set and is for non-intra blocks, whilst H_TCOEFF is for intra blocks after the DC term has already been read.","H_NOMINATE(TBL) nominates a table for subsequent download.","H_DNL(NB) reads NB bits and downloads them into th
