---
title: Smart card framework
abstract: A mechanism is disclosed for allowing an application to perform specified operations in response to occurrences of a specified event relative to a specified Smart Card-accessing device. A customized API is exposed to the application. The application invokes an “addEventListener” method of the API. The invocation of the method specifies, as parameters of the method, at least a Smart Card-accessing device, a type of event, and a function. The server computer executing the application detects the invocation of the “addEventListener” method. In response to detecting the invocation, the server determines the type of the event specified by the invocation, and starts a mechanism that executes the specified function each time that an event of the specified type occurs relative to the specified Smart Card-accessing device. Consequently, the application does not need to be programmed to poll the specified Smart Card-accessing device at specific times during the application's execution.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418717&OS=07418717&RS=07418717
owner: Sun Microsystems, Inc.
number: 07418717
owner_city: Santa Clara
owner_country: US
publication_date: 20031003
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENT(S)","System Overview","Sample Operation","Hardware Overview"],"p":["In its usual form, a Smart Card is a plastic card that contains an integrated circuit that may be accessed by a Smart Card-accessing device. Smart Card standards are provided in the International Organization for Standardization (ISO) Standard 7816. Smart Cards are useful for storing information concerning the Smart Card's owner. For example, a Smart Card may carry information about the Smart Card's owner's identity. Smart Card-accessing devices may retrieve and update the information stored by the Smart Card.","By inserting a Smart Card into a Smart Card-accessing device that is connected to a computer, the Smart Card's owner can provide information to the computer. Typically, such a computer executes an operating system and one or more applications that send information to and receive information from the Smart Card by invoking methods of an application programming interface (\u201cAPI\u201d) that the operating system exposes to the applications.","Different APIs comprise different methods for communicating with Smart Cards. Two different APIs that provide methods for communicating with Smart Cards are the Open Card Framework (\u201cOCF\u201d) API and the PC\/SC API.","Sometimes multiple Smart Card-accessing devices are connected to the same computer, which under such circumstances typically is called a server computer. Each of a plurality of users may concurrently access the server computer through his own separate user session. If one user instructs an application to access a Smart Card-accessing device that contains another user's Smart Card, then the former user may be able to read information from and write information to the latter user's Smart Card.","In accordance with one embodiment of the present invention, there is provided a mechanism for allowing an application to perform specified operations at the time of an occurrence of a specified event relative to a specified Smart Card-accessing device, even though the specified event may occur at any time during the application's execution. Additionally, in accordance with one embodiment of the present invention, there is provided a mechanism for preventing a user of a user session from causing an application to access a Smart Card-accessing device that is not associated with that user session.","In one embodiment, to allow an application to perform specified operations at the time of an occurrence of a specified event relative to a specified Smart Card-accessing device, a customized API is exposed to the application. The API comprises a plurality of methods that are implemented in one or more libraries. In one embodiment, the application invokes an \u201caddEventListener\u201d method of the API. The invocation of the \u201caddEventListener\u201d method specifies, as parameters of the method, at least a Smart Card-accessing device, a type of event, and a function.","The server computer executing the application detects the invocation of the \u201caddEventListener\u201d method. In response to detecting the invocation, the server computer determines the type of the event specified by the invocation. The server computer starts a mechanism, such as a thread, that executes the specified function each time that an event of the specified type occurs relative to the specified Smart Card-accessing device.","As a result, the application does not need to be programmed to poll the specified Smart Card-accessing device at specific times during the application's execution. The mechanism will execute the specified function in response to an occurrence of an event of the specified type regardless of the time at which the event occurs during the application's execution. This eliminates the possibility that an occurrence of the event will be missed while the application is busy performing other tasks, and simplifies the application code, making the application programmer's job easier.","As another result, the application can be programmed to respond to events that pertain to Smart Card-accessing devices as entities separate from Smart Cards. Therefore, an application can be programmed to respond to an event that occurs relative to a specified Smart Card-accessing device regardless of whether a Smart Card is present in the Smart Card-accessing device, and regardless of which Smart Card is present in the Smart-Card accessing device. This broadens the application's functionality.","Furthermore, in one embodiment, to prevent a user session from causing an application to access a Smart Card-accessing device that is not associated with that user session, the server computer associates each separate user session with a separate Smart Card-accessing device. In response to receiving a request to perform an operation relative to a particular Smart Card-accessing device, the server computer determines whether the particular user session in which the request was received is associated with the particular Smart Card-accessing device. If the server computer determines that the particular user session is not associated with the particular Smart Card-accessing device, then the server computer does not allow the operation to be performed.","As a result, a user of one Smart Card-accessing device is prevented from reading information from or writing information to Smart Cards that are present in other Smart Card-accessing devices, which may contain other users' Smart Cards.","With reference to , there is shown a functional block diagram of a sample computing system  in which one embodiment of the present invention may be implemented. As shown, system  comprises a server computer  coupled to log-in devices A-N. As used herein, a log-in device is any mechanism through which a user can log-in to a server computer. Although  shows log-in devices A-N coupled directly to server computer , it should be noted that log-in devices A-N may be coupled communicatively to server computer  through one or more networks, such as LANs, WANs, and\/or the Internet, and\/or through one or more wired\/wireless connections.","Each of log-in devices A-N may comprise a separate set of user input devices such as a mouse and a keyboard, through which user input may be received and transmitted to server computer . Each of log-in devices A-N also may comprise a separate monitor through which information received from server computer  may be displayed.","System  further comprises Smart Card-accessing devices A-N. Each of Smart Card-accessing devices A-N is coupled with a log-in device. A Smart Card-accessing device may be separate from its associated log-in device, or a Smart Card-accessing device may be part of a single physical unit that also comprises the Smart Card-accessing devices' associated log-in device.","Smart Card-accessing devices A-N are capable of reading information from and\/or writing information to Smart Cards that interface with Smart Card-accessing devices A-N. Typically, a Smart Card interfaces with a Smart Card-accessing device through the insertion of the Smart Card into a slot exposed by the Smart Card-accessing device.","In one embodiment, each Smart Card-accessing device may be a stand-alone computer with a central processing unit (\u201cCPU\u201d), memory (volatile and\/or non-volatile), user interface devices and output devices. Further embodiments could include a range of devices between a general-purpose computer and a specifically designed Smart Card interface device. These could include Sun Microsystems SunRay clients, Axalto Reflex readers, GemPlus GemConnect terminals, CardCom IC card terminals, Innovonics PC Pay devices, SCM Microsystems Smart Card readers, VeriFone Omni portable wireless terminals, etc.","Server computer  executes an operating system kernel . Typically distributed with operating system kernel  are API methods . API methods  may be implemented in any of a variety of programming languages, such as C, C++, Java, Perl, and BASIC. For example, when API methods  are implemented in C, then API methods  may be specified as functions in one or more dynamic link libraries (\u201cDLLs\u201d), shared objects, or other libraries. For another example, when API methods  are implemented in Java, then API methods  may be specified as methods of one or more classes in one or more packages.","Server computer  also executes application . Like API methods , application  may be implemented in any of a variety of programming languages, such as C, C++, Java, Perl, and BASIC. For example, if API methods  are implemented in C, then application  may comprise invocations of functions implemented in a DLL. For another example, if API methods  are implemented in Java, then application  may comprise invocations of methods of objects that are instantiated from classes specified in a package.","Application  is programmed to invoke one or more of API methods  according to a specified interface. Thus, the interface is exposed to application . When application  invokes one of API methods , server computer  detects the invocation of that method. The invocation of such a method may involve application  passing specified parameters to the method. When server computer  detects the invocation of such a method, server computer  executes the instructions that are specified by the method.","Session-Specific Device Access Control","A user can log-in to server computer  through one of log-in devices A-N that is associated with one or more of Smart Card-accessing devices A-N. Each Smart Card-accessing device is associated with the log-in device to which that Smart Card-device is coupled. A mechanism of server computer  maintains a table of associations between log-in devices and associated Smart Card-accessing devices.","When a user logs in to server computer  through a particular log-in device, a particular user session is established through the particular log-in device. Server computer  associates the particular user session with the particular log-in device through which the particular user session was established. Then, based on the table of associations between log-in devices and Smart Card-accessing devices, server computer  determines which of Smart Card-accessing devices A-N is associated with the particular log-in device. A mechanism executing on server computer  creates an association between the particular user session and the one or more Smart Card-accessing devices that are associated with the particular log-in device.","According to one embodiment, when a request to access a particular Smart Card-accessing device is received through a particular user session, a mechanism executing on server computer  determines whether the particular user session is associated with the particular Smart Card-accessing device, and fulfils the request only if the particular user session is associated with the particular Smart Card-accessing device. Similarly, according to one embodiment, when a request to list Smart Card-accessing devices is received through a particular user session, a mechanism executing on server computer  determines which of Smart Card-accessing devices A-N are associated with the particular user session, and lists only those Smart Card-accessing devices that are associated with the particular user session.","Device-Specific Event Listeners","According to one embodiment, API methods  comprise an \u201caddEventListener\u201d method. The invocation of the \u201caddEventListener\u201d method specifies, as parameters of the method, one of Smart Card-accessing devices A-N, a type of event, and a function. For example, the function may be specified as a pointer to a particular function. In one embodiment, the types of events include a \u201cdevice reset\u201d event, a \u201ccard inserted\u201d event, a \u201ccard removed\u201d event, a \u201cdevice closed\u201d event, a \u201ccommunication error\u201d event, a \u201ccard present\u201d event, and a \u201ccard absent\u201d event. One or more types of events may be specified in a single invocation of the \u201caddEventListener\u201d method.","The \u201cdevice reset\u201d event occurs relative to a particular Smart Card-accessing device whenever the particular Smart Card-accessing device receives a command to reset the particular Smart Card-accessing device.","The \u201ccard inserted\u201d event occurs relative to a particular Smart Card-accessing device whenever a Smart Card is inserted into the particular Smart Card-accessing device.","The \u201ccard removed\u201d event occurs relative to a particular Smart Card-accessing device whenever a Smart Card is removed from the particular Smart Card-accessing device.","The \u201cdevice closed\u201d event occurs relative to a particular Smart Card-accessing device in response to the particular Smart Card-accessing device receiving a command to close the particular Smart Card-accessing device. Typically, the particular Smart Card-accessing device does not receive commands after closing in response to a command to close the particular Smart Card-accessing device.","The \u201ccommunication error\u201d event occurs relative to a particular Smart Card-accessing device in response to a mechanism executing on server computer  detecting a loss of communication between server computer  and the particular Smart Card-accessing device. For example, the \u201ccommunication error\u201d event may occur relative to a particular Smart Card-accessing device if a specified period of time has passed since the particular Smart Card-accessing device responded to a signal from server computer , or if the particular Smart Card-accessing device has not responded to a specified number of signals from server computer .","The \u201ccard present\u201d and \u201ccard absent\u201d events are generated in response to the starting of an event listener, and indicate whether a card is currently present in a specified Smart Card-accessing device. The \u201ccard present\u201d and \u201ccard absent\u201d events are generated once for each separate event listener. Once a \u201ccard present\u201d or \u201ccard absent\u201d event has been generated for a particular event listener, that event is not generated for that particular event listener again.","In one embodiment, in response to detecting an invocation, by application , of the \u201caddEventListener\u201d method, server computer  starts a mechanism (an \u201cevent listener\u201d), such as a thread, that executes the specified function each time that an event of the specified type occurs relative to the specified Smart Card-accessing device. Through multiple invocations of the \u201caddEventListener\u201d method, multiple event listeners may be started. Each event listener may specify a different Smart Card-accessing device, one or more different events, and\/or a different function than those specified by any other event listener. Thus, multiple event listeners, specifying different events and functions, may be started relative to the same Smart Card-accessing device. According to one embodiment, a particular event listener executes until the particular event listener is stopped through the invocation of a \u201cremoveEventListener\u201d method as described below. Thus, a particular event listener may execute a specified function multiple times in response to multiple occurrences of a specified event.","According to one embodiment, each event listener indicates the state of the specified Smart Card-accessing device in response to that event listener being started. Thus, in one embodiment, when application  starts an event listener relative to a specified Smart Card-accessing device, the event listener indicates, once, to application , whether a Smart Card currently is present in the specified Smart Card-accessing device. The state of a Smart Card-accessing device may be indicated through the generation of an event (i.e., \u201ccard present\u201d or \u201ccard absent\u201d) that specifies the state of the Smart Card-accessing device.","According to one embodiment, API methods  further comprise a \u201cremoveEventListener\u201d method. The invocation of the \u201cremoveEventListener\u201d method specifies, as parameters of the method, one of Smart Card-accessing devices A-N, and a function. In one embodiment, in response to detecting an invocation, by application , of the \u201cremoveEventListener\u201d method, server computer  stops the event listener that corresponds to the specified function and the specified Smart Card-accessing device. Other event listeners that may be executing are not stopped. Therefore, event listeners that execute functions other than the specified function are not stopped, even if those event listeners also correspond to the specified Smart Card-accessing device. Furthermore, event listeners that correspond to Smart Card-accessing devices other than the specified Smart Card-accessing device are not stopped, even if those event listeners also execute the specified function. Thus, in one embodiment, only specified event listeners are stopped.","Device-Specific Device-State-Dependent Waiting","According to one embodiment, API methods  comprise a \u201cwaitForCardPresent\u201d method. The invocation of the \u201cwaitforCardPresent\u201d method specifies, as a parameter of the method, one of Smart Card-accessing devices A-N. In one embodiment, the invocation further specifies, as a parameter of the method, an amount of time. For example, the amount of time may be specified as a number that represents a number of seconds.","In one embodiment, in response to detecting an invocation, by application , of the \u201cwaitForCardPresent\u201d method, server computer  causes the thread (or process, if application  is single-threaded) of application  from which the method was invoked to begin waiting. Instructions following the invocation instruction in the thread are not executed until the thread stops waiting. The thread continues to wait until a Smart Card is present in the specified Smart Card-accessing device. In response to determining that a Smart Card is present in the specified Smart Card-accessing device, server computer  causes the thread to stop waiting. Instructions following the invocation instruction in the thread are executed after the thread stops waiting.","In one embodiment, server computer  starts a timer in response to the invocation of the \u201cwaitForCardPresent\u201d method. The timer expires when the specified amount of time has passed since the invocation. In response to detecting that the timer has expired, server computer  causes the thread to stop waiting, even if no Smart Card is present in the specified Smart Card-accessing device.","According to one embodiment, API methods  comprise a \u201cwaitForCardAbsent\u201d method. The invocation of the \u201cwaitforCardAbsent\u201d method specifies, as a parameter of the method, one of Smart Card-accessing devices A-N. In one embodiment, the invocation further specifies, as a parameter of the method, an amount of time.","In one embodiment, in response to detecting an invocation, by application , of the \u201cwaitForCardAbsent\u201d method, server computer  causes the thread (or process, if application  is single-threaded) of application  from which the method was invoked to begin waiting. The thread continues to wait until no Smart Card is present in the specified Smart Card-accessing device. In response to determining that no Smart Card is present in the specified Smart Card-accessing device, server computer  causes the thread to stop waiting.","In one embodiment, server computer  starts a timer in response to the invocation of the \u201cwaitForCardAbsent\u201d method. The timer expires when the specified amount of time has passed since the invocation. In response to detecting that the timer has expired, server computer  causes the thread to stop waiting, even if a Smart Card is present in the specified Smart Card-accessing device.","According to one embodiment, API methods  comprise a \u201cwaitForCardRemoved\u201d method. The invocation of the \u201cwaitforCardRemoved\u201d method specifies, as a parameter of the method, a Smart Card identifier. In one embodiment, the invocation further specifies, as a parameter of the method, an amount of time.","In one embodiment, in response to detecting an invocation, by application , of the \u201cwaitForCardRemoved\u201d method, server computer  causes the thread (or process, if application  is single-threaded) of application  from which the method was invoked to begin waiting. The thread continues to wait until the specified Smart Card is not present in a particular Smart Card-accessing device. In response to determining that the specified Smart Card is not present in the particular Smart Card-accessing device, server computer  causes the thread to stop waiting.","In one embodiment, server computer  starts a timer in response to the invocation of the \u201cwaitForCardRemoved\u201d method. The timer expires when the specified amount of time has passed since the invocation. In response to detecting that the timer has expired, server computer  causes the thread to stop waiting, even if the specified Smart Card is present in the particular Smart Card-accessing device.","With the above information in mind, samples of operation of the system  in accordance with one embodiment of the present invention will now be described. In the following discussion, reference will be made to the system diagram of  and the flow diagrams of .","Starting and Stopping an Event Listener",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["108","202","106","106","204","104","206","106","208"]},"Afterwards, an invocation of the \u201cremoveEventListener\u201d method by application  is detected (block ). The invocation specifies, as parameters, one of Smart Card-accessing devices A-N and a function. In response to the invocation of the \u201cremoveEventListener\u201d method, an event listener that corresponds to the specified Smart Card-accessing device and the specified function is stopped (block ).","For example, application  may invoke the \u201caddEventListener\u201d method with Smart Card-accessing device A, the \u201cdevice reset\u201d event type, and a first function as parameters. In response to detecting the invocation, server computer  indicates, to application , whether a Smart Card is currently present in Smart Card-accessing device A, and starts a first event listener that executes the first function each time that Smart Card-accessing device A receives a \u201creset\u201d command.","Continuing the example, application  may then invoke the \u201caddEventListener\u201d method with Smart Card-accessing device A, the \u201ccard inserted\u201d event type, and a second function as parameters, where the second function differs from the first function. In response to detecting the invocation, server computer  indicates, to application , whether a Smart Card is currently present in Smart Card-accessing device A, and starts a second event listener that executes the second function each time that a Smart Card is inserted into Smart Card-accessing device A.","Continuing the example, application  may then invoke the \u201caddEventListener\u201d method with Smart Card-accessing device B, the \u201cdevice reset\u201d event type, and the first function as parameters. In response to detecting the invocation, server computer  indicates, to application , whether a Smart Card is currently present in Smart Card-accessing device B, and starts a third event listener that executes the first function each time that Smart Card-accessing device B receives a \u201creset\u201d command.","Continuing the example, application  may then invoke the \u201cremoveEventListener\u201d method with Smart Card-accessing device A and the first function as parameters. In response to detecting the invocation, server computer  stops the first event listener, which corresponds to Smart Card-accessing device A and the first function. Because the second event listener corresponds to the second function rather than the first function, the second event listener is not stopped. Because the third event listener corresponds to Smart Card-accessing device B rather than Smart Card-accessing device A, the third event listener is not stopped. Thus, a specified event listener may be stopped while other event listeners continue.","Causing an Application to Begin Waiting and Stop Waiting",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3","b":["108","302","106","106","304","104","106","306"]},"While the thread is waiting, it is determined (block ) whether a Smart Card is present in the specified Smart Card-accessing device. If a Smart Card is present in the specified Smart Card-accessing device, then control passes to block . Otherwise, control passes to block .","If no Smart Card is present in the specified Smart Card-accessing device, then it is determined (block ) whether the specified amount of time has passed since the invocation of the \u201cwaitForCardPresent\u201d method. If the specified amount of time has passed, then control passes to block . Otherwise, control passes back to block  as the waiting thread continues to wait.","If the specified amount of time has passed, or if a Smart Card is currently present in the specified Smart Card-accessing device, then the waiting thread is made (block ) to stop waiting. Instructions following the invocation instruction in the thread are executed after the thread stops waiting.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4","b":["108","402","106","106","404","104","106","406"]},"While the thread is waiting, it is determined (block ) whether any Smart Card is present in the specified Smart Card-accessing device. If no Smart Card is present in the specified Smart Card-accessing device, then control passes to block . Otherwise, control passes to block .","If any Smart Card is present in the specified Smart Card-accessing device, then it is determined (block ) whether the specified amount of time has passed since the invocation of the \u201cwaitForCardAbsent\u201d method. If the specified amount of time has passed, then control passes to block . Otherwise, control passes back to block  as the waiting thread continues to wait.","If the specified amount of time has passed, or if no Smart Card is currently present in the specified Smart Card-accessing device, then the waiting thread is made (block ) to stop waiting. Instructions following the invocation instruction in the thread are executed after the thread stops waiting.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 5","b":["108","502","106","106","504","106","506"]},"While the thread is waiting, it is determined (block ) whether the specified Smart Card is present any of Smart Card-accessing devices A-N. If the specified Smart Card is not present in any of Smart Card-accessing devices A-N, then control passes to block . Otherwise, control passes to block .","If the specified Smart Card is present in any of Smart Card-accessing devices A-N, then it is determined (block ) whether the specified amount of time has passed since the invocation of the \u201cwaitForCardRemoved\u201d method. If the specified amount of time has passed, then control passes to block . Otherwise, control passes back to block  as the waiting thread continues to wait.","If the specified amount of time has passed, or if the specified Smart Card is not currently present in any of Smart Card-accessing devices A-N, then the waiting thread is made (block ) to stop waiting. Instructions following the invocation instruction in the thread are executed after the thread stops waiting.","Controlling Access to Smart Card-Accessing Devices",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 6","b":["602","102","104","604"]},"In a user session, server computer  receives (block ) a request to perform an operation relative to one of Smart Card-accessing devices A-N. In response to receiving the request, a mechanism executing on server computer  determines (block ) whether the user session in which the request was received is associated with the Smart Card-accessing device specified by the request. If the user session is associated with the specified Smart Card-accessing device, then control passes to block . Otherwise, control passes to block .","If the user session is associated with the specified Smart Card-accessing device, then the mechanism executing on server computer  allows the operation to be performed relative to the specified Smart Card-accessing device.","Otherwise, if the user session is not associated with the specified Smart Card-accessing device, then the mechanism executing on server computer  prevents the operation from being performed relative to the specified Smart Card-accessing device.","For example, a first user session may be established through a log-in device that is associated with Smart Card-accessing device A. Consequently, the first user session is associated with Smart Card-accessing device A. A second user session may be established through a log-in device that is associated with Smart Card-accessing device B. Consequently, the second user session is associated with Smart Card-accessing device B. If a request to read information from or write information to the Smart Card in Smart Card-accessing device A is received through the second user session, then the read\/write operation is not permitted. However, if a request to read information from or write information to the Smart Card in Smart Card-accessing device A is received through the first user session, then the read\/write operation is allowed.","In one embodiment, the various components shown in  (e.g. application , API methods , and operating system kernel ) are implemented as sets of instructions executable by one or more processors. These components may be implemented as part of an object oriented programming system, including but not limited to the JAVA\u2122 programming system manufactured by Sun Microsystems, Inc.  shows a hardware block diagram of a computer system  which may be used to execute these components. Computer system  includes a bus  or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  may also be further used to store temporary variables or other intermediate information during execution of instructions by processor . Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","According to one embodiment, the functionality of the present invention is provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or electromagnetic waves, such as those generated during radio-wave, infra-red, and optical data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the world wide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","At this point, it should be noted that although the invention has been described with reference to a specific embodiment, it should not be construed to be so limited. Various modifications may be made by those of ordinary skill in the art with the benefit of this disclosure without departing from the spirit of the invention. Thus, the invention should not be limited by the specific embodiments used to illustrate it but only by the scope of the issued claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
