---
title: Adaptive location data buffering for location-aware applications
abstract: A method of buffering location data on a mobile device. The method transmits location data packets via an unreliable protocol to a receiving device and buffers a copy of the location data packet. Periodically, the method also transmits a location data packet via a reliable protocol to the receiving device. When no acknowledgement is received from the receiving device, the location data sent via the reliable protocol is buffered to memory. Once an acknowledgement is received from the receiving device, all of the buffered location data is sent to the receiving device via an unreliable protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08718671&OS=08718671&RS=08718671
owner: University of South Florida
number: 08718671
owner_city: Tampa
owner_country: US
publication_date: 20110408
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","STATEMENT OF GOVERNMENT INTEREST","FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a Continuation of currently pending International Application No. PCT\/2009\/059985, filed Oct. 8, 2009, herein incorporated by reference, which claims priority to U.S. Provisional Patent Application No. 61\/103,767, filed Oct. 8, 2008, which is herein incorporated by reference.","This invention was made with Government support under Grant No. FDOT-BD-549, RPWO#35, NCTR-77709-00 awarded by the Florida Department of Transportation. The Government has certain rights in the invention.","This invention relates to wireless communication devices and, in particular, improving reliability of location data transmitted by location-aware applications.","Location-Aware applications are built on the knowledge of a mobile device's current geographic position as well as the knowledge of geographic positions of other users, places, or things. Mobile devices often recalculate their position very frequently, up to multiple times in a single second in some systems. Using positioning systems such as Global Positioning Systems (GPS) to frequently recalculate the position of the mobile device costs energy. Additionally, transferring that updated location data from the device to a server or another device through wireless communications also costs energy. Therefore, even though it is desirable to frequently update the system (including mobiles devices and servers) with the knowledge of the position of the device, there is a significant resource cost involved in both the position calculation and wireless transfer of data.","To save device resources, including power, during repeated transmissions of position data, \u201cunreliable\u201d or \u201cconnectionless\u201d protocols such as User Datagram Protocol (UDP) can be used. UDP does not verify the receipt of data packets or the order in which they are received, whereas \u201creliable\u201d or connection-oriented protocols, such as Transmission Control Protocol (TCP), do. However, UDP also avoids the extra transmission overhead that TCP requires in order to acknowledge the receipt of packets and request the re-submission of packets that were lost or corrupted. Therefore, UDP costs less energy per location data packet transferred than TCP and, therefore, is preferred when repeatedly transferring location data from (and to) a mobile device. Additionally, the entity (e.g. server or mobile device) receiving the data is not under as much of a strain because it does not have to acknowledge the receipt of each packet.","However, because UDP is unreliable, the receipt of location data by the receiving party is not guaranteed. In wireless systems that are highly likely to have lost or corrupted data packets, as well as a mobile device such as a mobile phone that may prevent the transfer or reception of data at certain times (i.e. during an active phone call, lack of cell phone signal), a large amount of data may be lost if the ordinary UDP protocol is used. Also, significant device battery life is unnecessarily wasted when transmitting via UDP if the other entity is not receiving the information.","The present invention includes an adaptive location data buffering method for location-aware applications, such as those running on GPS-enabled mobile phones. It uses a two-layer protocol approach: an unreliable, connection-less protocol, such as UDP, is utilized to transport frequently calculated (e.g. real-time) location data from one entity (e.g. mobile phone, PDA, server) to another (e.g. mobile phone, PDA, server), while a reliable, connection-oriented protocol, such as TCP, is utilized to determine the current quality of service for the unreliable protocol transmissions.","The adaptive location data buffering method transmits data via an unreliable protocol (e.g. UDP). A copy of this data is also stored for a period of time. Then, the method transmits via a reliable protocol (e.g. TCP) and awaits a response from the receiving device (e.g. a server or other mobile device). If no response is received, the data is buffered for a period of time until a transmission via reliable protocol is tried again and succeeds. Once a successful transmission via a reliable protocol is achieved, all of the buffered data is sent via an unreliable protocol and the buffer is cleared.","In the following detailed description of the preferred embodiments, reference is made to the accompanying drawings, which form a part hereof, and within which are shown by way of illustration specific embodiments by which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the invention.","The present invention includes an adaptive location data buffering method for location-aware applications, such as those running on GPS-enabled mobile phones. It uses a two-layer protocol approach: an unreliable, connection-less protocol, such as UDP, is utilized to transport frequently calculated (e.g. real-time) location data from one entity (e.g. mobile phone, PDA, server) to another (e.g. mobile phone, PDA, server), while a reliable, connection-oriented protocol, such as TCP, is utilized to determine the current quality of service for the unreliable protocol transmissions.","Using a connectionless protocol, such as UDP, provides the timeliness, efficiency, and scalability required for real-time location-aware systems because no acknowledgements, handshakes, or retransmissions occur. Utilizing a connection-oriented protocol such as TCP allows the system to occasionally check for quality of service issues (i.e. is location data getting to the server?). If there is a temporary problem with receiving transmission via an unreliable protocol, then the mobile device can temporarily buffer the data until it is determined that a there is a strong probability that unreliable protocol transmissions will again be able to reach the server. This maximizes the probability of unreliable protocol transmissions being properly received by the receiver without the heavy overhead of a reliable protocol. This method also prevents the device from unnecessarily wasting battery energy by transmitting packets via an unreliable protocol when they are not being received by the receiving party. Herein, UDP and TCP are used only as examples, any connectionless and connection-oriented protocols, respectively, can be utilized by this method.","In an embodiment, as shown in the flowchart in , which illustrates the method from the perspective of an application running on a mobile device, the method begins by initializing a reliable protocol connection (operation ). The Generic Connection Framework may be used to create and utilize reliable (and unreliable) connection(s). Then the location data is received or obtained in operation . This location data may be GPS data received from an on-board GPS or a remote GPS system. However, GPS data is an example, and any type of location data may be used. The location data may also be calculated remotely, such as at the server or at another mobile device, and then received by the mobile device. Under normal conditions, an unreliable protocol is used to efficiently transfer data to a receiving device (e.g. a server) (operation ). The position calculation may also be null if a position cannot currently be calculated. Before each unreliable protocol transmission, it is determined whether the device is in a state where data transmissions are possible (operation ). For example, on a mobile phone, device-side application programming interfaces (APIs) are checked to assess the current level of cellular signal and determine if a successful unreliable protocol transmission is probable (e.g. whether there is an active phone call or no cell signal). If not, the location data is buffered to either main memory or persistent storage (e.g. MIDP RecordStore) (operation ). Once it is detected that unreliable protocol transmissions are likely to succeed again, the buffered data is then sent via an unreliable protocol (e.g. UDP) and deleted on the device (operation ).","Occasionally, an end-to-end connection may be confirmed to determine if a UDP transmission is likely to be received by the receiving device.","If the IP address of the device is publically addressable, confirming an open end-to-end connection may be accomplished by having the receiving device occasionally send an \u201calive\u201d message via a single unreliable protocol (e.g. UDP) packet to the mobile device. The mobile device will continue to transmit data to the receiving device via an unreliable protocol as long as it continues to receive the scheduled \u201calive\u201d messages from the receiving device. If an \u201calive\u201d message is not received at the expected interval, (e.g. the phone is off-network, the user is on a voice call, the server is down), then the method begins buffering location data until the next \u201calive\u201d message is received. When an \u201calive\u201d message is again received, all buffered data is sent to the receiving device.","For security and capacity reasons, some cellular networks do not allow mobile phones to be publically addressed via an IP address. Therefore, a server-initiated unreliable protocol (e.g. UDP) packet to the phone may not be possible, or may be cost-prohibitive based on the carrier's cost model. In these situations, a reliable protocol (e.g. TCP) connection from the mobile device to the server can occasionally be opened to determine if there is a successful \u201calive\u201d response from the server. If there is no response (e.g. the mobile device is off-network, the user is on a voice call, the server is down), then location data is buffered until the next successful response via the reliable protocol. Upon the next successful response, all buffered location data is sent via the unreliable protocol. This is illustrated in the flowchart in .","In this embodiment, a copy of all data sent via the unreliable protocol is kept on the device in case the next transmission sent via reliable protocol fails, in which case the buffered data would be resent to the server upon the success of a reliable protocol transmission. As shown in , the method begins by receiving location data (operation ). It is then determined whether the device is in a state where data transmissions are possible (operation ). If transmissions are not possible, the location data is buffered to memory (operation ). If transmission are possible, it is then determined if a certain number of location data packets have been buffered to memory and if the most recent reliable transmissions failed (operation ). If the number of buffered location data packets is too small (e.g. unreliable_transmission_counter<threshold) or if the most recent reliable transmission was successful (e.g. reliable_transmission_failure=0), then the current location data is transmitted via an unreliable protocol (operation ) and a copy of the current location data is also buffered to memory (operation ).","Once a threshold number of location data packets have been buffered to memory (e.g. unreliable_transmission_counter\u2267threshold) or if the most recent reliable transmission failed (e.g. reliable_transmission_failure>0), then it is determined whether a reliable protocol transmission should be attempted (operation ). This determination may be based on the time elapsed since the last reliable protocol transmission or the statistics based on the success rate of the last N number of reliable protocol transmissions.","If it is determined that a reliable protocol transmission will not likely be successful, then a copy of the current location data is buffered to memory (operation ). If a reliable protocol transmission will likely be successful, then the current location data is transmitted via a reliable protocol (e.g. TCP) (operation ). It is then determined whether the reliable protocol transmission was acknowledged by the receiving device (operation ). If the reliable protocol transmission was not acknowledged, then the method tracks the number of failed reliable protocol transmissions (operation ) and buffers a copy of the location data to memory (operation ). If an acknowledgement is received, then it is determined if one or more of the consecutive previous reliable protocol transmissions failed (i.e. reliable_transmission_failure>0) (operation ). If the prior reliable protocol transmission was successful, then the buffered data is deleted from memory (operation ). However, if it was not, then all of the buffered data is transmitted via an unreliable protocol (operation ) before it is deleted from memory (operation ).","If storage space is limited on a device (e.g. a cell phone), data buffering may be limited to a certain number of location data packets. In the embodiment illustrated in the flowchart in , data is only buffered to memory after a failure of a reliable protocol transmission. In this manner, if the reliable protocol transmission fails, then the next group of data that would have to have been transmitted by the unreliable protocol will be buffered to avoid losing it in transit to the receiving device. However, unlike the embodiment shown in , it is assumed that any data already transmitted via the unreliable protocol (prior to the failure of the reliable protocol transmission) is lost and will not be-retransmitted because a copy of that data was not saved on the device. When the next reliable transmission succeeds, then all buffered data is sent the receiving device via the unreliable protocol. If on-board memory becomes full during the buffering process, then older location data in the buffer can be overwritten or the newest location data can be discarded, depending on the preference of the application.","As shown in , this embodiment is similar to the embodiment shown in  except that once a location data packet is transmitted via an unreliable protocol in operation , the method begins a new iteration at operation . A copy of location data packet is not buffered to memory (operation ), as it is done in the embodiment shown in .","A timeline illustrating an example execution of the embodiment shown in  is shown in . As shown in , if a reliable protocol transmission fails, then all future transmissions that would have occurred via the unreliable protocol are buffered until the next successful reliable protocol transmission. Upon the next successful reliable protocol transmission, all buffered data is sent to the receiving device using the unreliable protocol. Failures of transmissions via the unreliable protocol do not affect the method, because failed transmission via unreliable protocol are unknown at the mobile device. Therefore, the mobile device is improving the probability that the majority of data will arrive at the receiving device by occasionally \u201cprodding\u201d the receiving device to see if it is receiving data.","If there is very limited or no on-board memory accessible to the application for data storage (e.g. wireless sensor network), data buffering can be removed from the method completely, as illustrated in the embodiment shown in the flowchart in . In this embodiment, no data is buffered to memory. Occasionally, a location data packet is transmitted via a reliable protocol, so the mobile device will be aware of whether or not the receiving device is receiving the information.","As shown in , the method begins by receiving location data (operation ). It is then determined whether the device is in a state where data transmissions are possible (operation ). Once transmissions are possible, it is determined whether a certain number of location data packets have been transmitted via an unreliable protocol since the last reliable transmission was acknowledged (operation ). If the number of location data packets transmitted via an unreliable protocol is too small, then the current location data is transmitted via an unreliable protocol (operation ).","Once a threshold number of location data packets have been transmitted via unreliable protocol, then it is determined whether a reliable protocol transmission should be attempted (operation ). This determination may be based on the time elapsed since the last reliable protocol transmission or the statistics based on the success rate of the last N number of reliable protocol transmissions. If it is determined that a reliable protocol transmission will not likely be successful, then the method begins a new iteration. If a reliable protocol transmission will likely be successful, then the current location data is transmitted via a reliable protocol (e.g. TCP) (operation ). It is then determined whether the reliable protocol transmission was acknowledged by the receiving device (operation ). If the reliable protocol transmission was not acknowledged, then the method tracks the number of failed reliable protocol transmissions (operation ). If an acknowledgement is received, then the counters used to track the number of unreliable protocol transmissions and the number of failed reliable protocol transmissions are reset (operation ) and the method begins a new iteration.","Alternatively, the above embodiment may be adjusted to not transmit any location data if the reliable protocol transmission fails. This would allow the device to save battery energy by not transmitting until it is determined, by a successful reliable protocol transmission, that the communication via unreliable transmission would likely succeed. As show in , the method mirrors the embodiment shown in , except that an additional decision must be made (in operation ) following a determination that the number of transmissions sent via an unreliable protocol are less than a given threshold (operation ). In operation , it is determined if the most recent reliable transmission failed (e.g. reliable_transmission_failure>0). If not (i.e. the most recent reliable transmission was successful), then the method proceeds to operation  (as in ) and transmits the current location data packet via an unreliable protocol. However, if the most recent reliable transmission failed, then operation  is skipped and the method begins a new iteration.","Other methods such as the Critical Point Method (described in U.S. patent application Ser. No. 12\/196,673, herein incorporated by reference), can be used to filter the type of location data that is input into iterations of the current method. The Critical Point Method uses the change in direction between sequential location data points and the user's speed to filter non-critical location points from a set of location data points so that only the critical points, which represent the user's path, remain.","Confirmation or \u201calive\u201d messages from the server (or other receiving device) to the mobile device can also be used to increase system scalability by passing location data flow control instructions back to the mobile device (e.g. turn on Critical Point Algorithm) if the server becomes overwhelmed with location data. As illustrated in , once the method has completed an iteration (after operation  of FIGS. A and B or after operation  of ), the method determines if the server has sent instructions to send all future data or just critical points (operation ). Accordingly, either all location data packets (operation ) or only location data packets representing critical points (operation ) are passed as input into the current method (at operation  of  or operation  of ). The control portion of this module is implemented on the server.","This allows the device receiving the location data (e.g. server or mobile device) to provide some level of service to the transmitting device while avoiding or preventing the receiving device from being overwhelmed by location data. When the receiving device has additional resources to begin receiving all location data again, it can transmit an instruction back to the sending device and the sending device will begin transmitting all location data (i.e. not just critical points) again.","The Critical Point Method, or similar method, may also be used to determine whether a reliable or an unreliable protocol will be used to send each location data packet. As shown in , after receiving location data (in operation ), the method determines if the device is in a state where data transmissions are possible (operation ). If transmissions are not possible, the location data is buffered to memory (operation ). If transmissions are possible, it is then determined whether the location data represents a critical point (operation ). If the location data does not represent a critical point, then the current location data is transmitted via an unreliable protocol (operation ) and a copy of the current location data is also buffered to memory (operation ).","Once a critical point is passed into the method, then the current location data representing the critical point is transmitted via a reliable protocol (e.g. TCP) (operation ). It is then determined whether the reliable protocol transmission was acknowledged by the receiving device (operation ). If the reliable protocol transmission was not acknowledged, then the method tracks the number of failed reliable protocol transmissions (operation ) and buffers a copy of the location data to memory (operation ). If an acknowledgement was received, then it is determined if one or more of the consecutive previous reliable protocol transmissions failed (i.e. reliable_transmission_failure>0) (operation ). If the prior reliable protocol transmission was successful, then the buffered data is deleted from memory (operation ). However, if it was not, then all of the buffered data is transmitted via an unreliable protocol (operation ) before it is deleted from memory (operation ).","It will be seen that the advantages set forth above, and those made apparent from the foregoing description, are efficiently attained and since certain changes may be made in the above construction without departing from the scope of the invention, it is intended that all matters contained in the foregoing description or shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","It is also to be understood that the following claims are intended to cover all of the generic and specific features of the invention herein described, and all statements of the scope of the invention which, as a matter of language, might be said to fall there between."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a fuller understanding of the invention, reference should be made to the following detailed description, taken in connection with the accompanying drawings, in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2C","FIG. 2B"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
