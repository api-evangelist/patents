---
title: Extensible method for obtaining an historical record of data backup activity (and errors) and converting same into a canonical format
abstract: An extensible method and system for obtaining an historical record of data backup activity (and errors) from a plurality of data backup software devices, and converting the same into a canonical format, is disclosed. In the first aspect, a method comprises the steps of providing a late-binding mechanism that provides the invention with extensibility so that it can be made to inter-operate with an arbitrary variety of backup software devices. In the second aspect, an interface for requesting and returning a canonical backup activity log is disclosed. In the third aspect, an interface for requesting and returning a canonical backup error log is disclosed. In the fourth aspect, the use of a canonical format enables the data to be cross-referenced, consolidated and compared.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07457833&OS=07457833&RS=07457833
owner: Bocada, Inc.
number: 07457833
owner_city: Bellevue
owner_country: US
publication_date: 20030722
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","BACKGROUND\u2014FIELD OF THE INVENTION","FEDERALLY SPONSORED RESEARCH","MICROFICHE APPENDIX","BACKGROUND\u2014DESCRIPTION OF PRIOR ART","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION","Description\u2014Terms and Notation","Description\u2014Preferred Embodiment","ALTERNATIVE EMBODIMENTS"],"p":["Patent Application of Liam Scanlan and Cory Bear METHOD FOR EXTRACTING AND STORING HISTORICAL RECORDS OF DATA BACKUP ACTIVITY FROM A PLURALITY OF BACKUP DEVICES","Patent Application of Liam Scanlan and Cory Bear METHOD FOR VISUALIZING DATA BACKUP ACTIVITY FROM A PLURALITY OF BACKUP DEVICES","The present invention is related generally to electronic\/software data backup and more particularly to simultaneous and seamless examination of such backup activity performed across a plurality, of backup software devices.","No federally sponsored research was involved in the creation of this invention.","No microfiche has been submitted with this patent application.","Most data backup software devices in use today provide for the repeated, regular electronic transfer, over a network, of data from the point at which it is in regular use to a medium, such a magnetic tape, for the purposes of securing a fall-back situation should damage occur to the original data.","Included in the list of such software programs, are programs that work on relatively small amounts of data, sometimes on a one-computer-to-one-tape-drive basis, and others that work on very large amounts of data, with banks of tape drives that are used to back up data from potentially thousands of computers connected to a network.","Mostly, these data backup software products use what is known as a \u201cclient\/server\u201d model. In the context of data backup, this means that there is one computer (the \u201cserver\u201d) that controls and manages the actual data backup activity, and other computers (the \u201cclients\u201d) that get backed up by the \u201cserver\u201d. In this scenario, the data backup tape drives are usually connected directly to the backup \u201cserver\u201d. There is also usually more than one backup server, each of which is responsible for the backup of data of numerous clients.","A central function of the activity of data backup is the ability to \u201crestore\u201d data in the case of damage to the data that is in use. The backup server computer usually controls this restore process. Understandably, the time it takes to recover data, and the confidence that the data recovery process will succeed, are two critical aspects of the data backup and restore function as a whole.","Disk drive capacities and data volumes, and consequently the volumes of data to be backed up, have historically been increasing at a greater rate than the backup server speed, tape drive capacity and network bandwidth are increasing to handle it.","Accordingly, new technologies have been added to help. Such new technologies include fiber-optic cables (for fast data transfer across the network), faster chips, tape drives that handle more tapes, faster tape drives. \u201cStorage Area Networks\u201d and so on.","The activity of data backup has become more and more critical, as the importance of the data has increased. At the advent of the desktop \u201crevolution\u201d, that is, when people first started using personal computers (PCs), almost every piece of important data was still stored on one, single computer, possibly a mainframe or a minicomputer. As the numbers and types of computers proliferated, particularly on the desktop, and the purpose for which these desktops were now being used, making the data on such computers increasingly valuable, many different products designed to backup data were created and put into the marketplace. Now, there are some 50 or more data backup products in use by organizations and private individuals.","Generally, but not always, such data backup software devices (products) have a reputation for being difficult to use. When there is an exception to this, the data backup software product often has other, perhaps related, limitations (e.g. the amount of data is can back up is small).","Not all data backup software devices perform the same function. Thus, it is frequently necessary to have two or more different types of data backup software programs in use within the same organization, especially in large organizations. Anecdotally, one company has as many as 17 different data backup software devices in use somewhere in their organization. This is referred to as fragmentation.","In large organizations, is has become necessary to hire expensive expertise to manage such large data backup and restore services. The more varied their data backup devices, the more expensive this becomes. Also, for large organizations, it has become increasingly likely that scheduled data backup activities rill fail. Because of the extra complexity of running a variety of data backup software devices, and because of the sheer number of data backup activities that need to take place regularly, failed data backups often go unnoticed in a sea of less-relevant data backup information.","An additional problem is that beyond a certain number of hours, perhaps minutes, if identifying a failed data backup takes too long, then it often becomes too late for meaningful corrective action to be taken. As a result, large organizations often take an expensive \u201cbest guess\u201d approach. Anecdotally, the level of confidence that large organizations live with regarding data backup success is said to be about 80%. In other words, it is expected that no more that 4 out of 5 data backups will be successful. Almost every large organization will relate experiences where data was lost because they mistakenly believed the data was been backed up. Also, a problem that is of increasing significance is the fact that there is currently no practicable means of charging 3parties for data backup services rendered via most backup products, even though the sharp increase in organizations providing that service for pay is expected to continue.","Accordingly, what is needed is a means for quickly sifting through large numbers of data backup activities, in particular, across the activity of a plurality of data backup software programs, and to provide a uniform view of the those data backup activities, regardless of what data backup software product actually performed, or failed to perform, each backup.","Some backup products include reporting functionality that allows the administrative user to view historical records of backup activity. However, as each data backup product uses a notation that dissimilar from other data backup products, it is difficult or impossible to cross-reference or consolidate historical records of backup activity across a plurality of data backup products.","The consolidation of historical records of backup errors across a plurality of backup products is possible to some extent, by using a general-purpose network management framework, like Computer Associates Unicenter. This type of product is typically designed to use the simple network management protocol (SNMP) to obtain errors from an arbitrary variety of computer programs across a network including data backup products. However, while general-purpose network management frameworks can consolidate errors, they do not provide a method to obtain historical records of data backup activity across a plurality of data backup products.","Accordingly, what is needed is a method for obtaining from a variety of different data backup software devices, an historical record of data backup activity suitable for the cross-referencing, consolidation and comparison of this data. An important aspect of this method is that it must include a lingua franca or common notation for expressing an historical record of backup activity (and errors) and a convenient method or framework for combining software components that translate data obtained from a plurality of application programming interfaces (APIs) to the common notation. Another important aspect of this method is that it must be extensible so that it can be made to support additional backup software devices as the need arises by adding new modules but without requiring modification of the invention. The invention described in this document fulfils this requirements. It can then be used as an important component of software that analyses backup success and failures, generates billing reports and for other applications.","In accordance with the present invention an extensible software component with the ability to interface to a plurality of backup engines for the purpose of obtaining historical records of data backup activity in proprietary notations and translating same to a canonical backup activity log and canonical backup error log. Those aspects of this ability that are entirely specific to a particular backup engine are derived from the use, by the invention, of a backup engine plug-in. Therefore, the interface between the invention and a backup engine plug-in is also described in this document.","For the purpose of explanation, the following terms and conventions are used herein to describe embodiments of the invention.","a. The Term \u201cComponent Object Model\u201d or \u201cCOM\u201d","In this document there are several references to, and examples of, the term \u201ccomponent object model\u201d (COM). COM is well-known technology that, among other things, provides support for late binding using either a dynamically-linked library (DLL) or remote procedure calls (RPC). In this context, the term \u201clate binding\u201d means that the COM allows software components to be added to a program during its normal operation that may not have been available when that program was originally compiled. Another related feature of COM is that it allows a program to be incorporated as a component into another program by means of integrated development environment (IDE) tool\u2014a great convenience for software developers. All significant aspects of COM have been documented in books and magazines and are understood by those skilled in the art.","b. The Term \u201cInterface Definition Language\u201d or \u201cIDL\u201d","In this document there are several references to, and examples of, the term \u201cinterface definition language\u201d (IDL). IDL is used to make a precise specification of a COM \u201cinterface\u201d. A COM interface is an object-oriented programming construct consisting of one or more methods (software procedures). A key aspect of a COM interface is that it is a concise way to define the input\/output characteristics of a software component and how it can be connected to other software components and programs. Generally, a person skilled in the art will be able to fully implement a COM component based upon a specification of its COM interface, expressed in IDL, plus a sufficiently detailed description of the semantics of the methods in that COM interface.","There are several \u201cversions\u201d of IDL, but most versions are similar. In the preferred embodiment, the interface definition language used is the one supported by the MIDL EXE compiler included with Microsoft Visual Studio Version 6.0. All significant aspects of IDL have been documented in books and magazines and are understood by those skilled in the art.","c. The Term \u201cPlug-In\u201d","In this document there are several references to, and examples of, the use of the word \u201cplug-in\u201d. The use of this word in the context of this document is explained here.","Generally, software devices and programs may be built using multiple statically linked components like statically linked libraries and object files that are combined by a \u201clinker\u201d. A linker is a software development tool that is commonly used by software developers but may not be available to end-users of a software product. Additional software components can be added to a statically linked program only by using a linker. However, a linker will not work while a program is in operation so the program must be stopped before the new components can be added. For example, early versions of the popular Unix operating system required the use of a linker in order to add new device drivers to the operating system kernel. One necessary consequence of this design was that Unix vendors were forced to bundle software development tools with the operating system in order to allow users to add new device drivers. Another unpleasant consequence was that the operating system had to be stopped (rebooted) in order to add new device drivers.","Alternatively, software devices and programs may be built which use dynamically linked components including dynamically linked libraries (DLLs), remote procedure call (RPC) and remote method invocation (RMI) technologies. The advantage of this approach is that new components can be added during the normal operation of a program and without using a linker. The use of COM is one way to implement dynamically linked components.","A \u201cplug-in\u201d is a dynamically linked software component that is used to add new functionality to an existing software device, typically because the new functionality could not be implemented at the time that the software device was originally created. For example, the popular Netscape Navigator browser software uses plug-ins to add new browser functionality because the designers anticipated that users would want to add new browser functionality after the product was shipped.","d. The Term \u201cBackup Engine\u201d","In this document there are several references to, and examples of, the term \u201cbackup engine\u201d. Generally, a backup engine is a part of a data backup product. It is a software device that runs backup jobs which backup (or copy) original data (known as a \u201cbackup target\u201d) to a storage area (known as the \u201cbackup media\u201d).","A key characteristic of a backup engine, with respect to the invention, is that it will contain or make available historical records of backup activity and errors. Generally, this information is expressed in a notation or data structure that is unique to the backup engine that uses it.","e. The Term \u201cCanonical Backup Activity Log\u201d or \u201cCBAL\u201d","In this document there are several references to, and examples of, the term \u201ccanonical backup activity log\u201d (CBAL). A CBAL is a canonical notation for expressing historical records of data backup activity. In this context, the term \u201ccanonical\u201d means that the notation is uniform, generic and consistent way to express these records irrespective of what backup engine the information is obtained from.","Generally, different backup engines will use dissimilar notation to express descriptions of backup activity, which tends to make it impractical or even impossible to cross-reference, consolidate or compare this information unless the information is first translated into a common notation. The canonical backup activity log (CBAL) was invented (as a key part of the invention described in this patent) to serve the purpose of a lingua franca and thus allow historical records of backup activity from a plurality of backup engines to be expressed in a common, consistent notation that is suitable for cross-referencing, consolidation and comparison.","A canonical backup activity log (CBAL) contains a list of \u201cbackup job\u201d records. Each backup job record describes an attempt to by a backup engine to perform a data backup operation and contains information about the results of that operation. Specifically, a backup job record includes: the date that the backup attempt or operation took place; the proprietary and fully-qualified host name of the backup client; the number of bytes that were backed up (if any); the number of files (or objects) that were backed up (if any); the proprietary and canonical backup level names; a description of where the information in the backup job record was obtained; the number of seconds that elapsed during the backup operation (if any); the date and time that the backup will expire (if any); the logical target name; and the media label of the storage media that the backup is written to. Typically, the most essential information in a backup job record is the date that the backup attempt or operation took place; the fully-qualified host name of the backup client; and the number of bytes that were backed up (if any).","e. The Term \u201cCanonical Backup Error Log\u201d or \u201cCBEL\u201d","In this document there are several references to, and examples of, the term \u201ccanonical backup error log\u201d (CBEL). A CBEL is a canonical format for expressing historical records of errors, warnings and events encountered by a backup engine during data backup operations. In this context, the term \u201ccanonical\u201d means that the errors, warnings and events are expressed in a tabular format that is a uniform, generic and consistent way to express them irrespective of what backup engine the information is obtained from.","Generally, different backup engines will use dissimilar formats to express descriptions of backup errors, warnings and events, which tends to make it impractical to construct software devices that can display this information for a plurality of backup engines. The canonical backup activity log (CBEL) was invented (as a part of the invention described in this patent) to allow historical records of backup errors, warnings and events from a plurality of backup engines to be expressed in a common, consistent format.","g. The Term \u201cBX\u201d","In this document there are several references to, and examples of, the term \u201cBX\u201d. BX is an acronyms that stands for \u201cBackup Report OCX\u201d which is the name of the preferred embodiment. BX is a software component that may be added component palette of an integrated development environment (IDE) like Microsoft Visual Basic or Borland Delphi, and thereby utilized in a software device or program. BX is an extensible method and system for obtaining an historical record of data backup activity (and errors) from a plurality of data backup software devices, and converting the same into a canonical format.","h. The Term \u201cBackup Engine Plug-In\u201d or \u201cBEP\u201d","A Backup Engine Plug-In (BEP) is a dynamically linked software component that is used to add the ability to communicate with a particular backup engine for the specific purpose of downloading historical records of data backup activity (and errors) from that backup engine. Generally, the preferred embodiment (BX) will use several BEPs in order to download historical records of data backup activity from a plurality of backup engines and convert these same records into a canonical backup activity log (CBAL). Similarly, BX also uses these BEPs in order to download historical records of data backup errors, warnings and events from a plurality of backup engines and convert these into a canonical backup error log (CBEL).","The preferred embodiment (BX) uses a plug-in approach because it is not possible to predetermine exactly how many backup engines (or versions of backup engines) will need to be supported in the future, or what the precise characteristics of these backup engines will be. The plug-in approach allows BX to be extended at a later date with support for additional products simply by adding new BEPs without the need to update or re-install the BX software.","An important aspect of the preferred embodiment (BX) is that it interfaces to a BEP using an interface that is sufficiently general to support the variety of requirements necessitated by the need to communicate with a plurality of backup engines. Key to this is the use of the CBAL, which is implemented, in the preferred embodiment as a COM interface named \u201cIBackupLog\u201d. This COM interface essentially becomes the a lingua franca for expressing and representing an historical record of data backup activity. Similarly, the CBEL is implemented in the preferred embodiment as a COM interface named \u201cIBackupDetail\u201d. The key purpose of a BEP is to translate the data that is obtained from an application-programming interface (API) that is specific to a particular backup engine into a CBAL and CBEL.","As is often the case in a description of an object-oriented software program, in the discussion that follows the description of the data structures (in this case, the COM interfaces) precedes the discussion of the relevant procedures, algorithms and flowcharts.","a. Description of a COM Interface Named \u201cIBackupLog\u201d","In the preferred embodiment (BX), a canonical backup activity log (CBAL) is implemented as a COM interface named \u201cIBackupLog\u201d. Considerable effort was required in order to invent an interface or notation that is sufficiently expressive yet concise enough to include only relevant data. The meaning and definition of \u201ccanonical backup activity log\u201d (CBAL) was developed in conjunction with the development of the COM interface that implements it in BX.","The COM interface named \u201cIBackupLog\u201d is an interface to a data structure that contains a repository of historical records of data backup activity expressed as a CBAL. This data structure is implemented as an array of records such that each element in the array contains a backup job record. A backup job number, which ranges from zero to one less than the number of backup job records, is used to reference individual elements in the array.","The syntax of the COM interface named \u201cIBackupLog\u201d is described by an IDL specification as follows:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IBackupLog : IUnknown"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(1)] HRESULT CountBackupJobs([out, retval] int*"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"pnBackupJobCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(2)] HRESULT GetBackupDate([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] DATE* pdateBackedUp);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(3)] HRESULT GetByteCount([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] double* pnByteCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(4)] HRESULT GetCanonicalLevel([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrCanonicalLevel);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(5)] HRESULT GetClientName([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrClientName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(6)] HRESULT GetDescription([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrDescription);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(7)] HRESULT GetElapsedTime([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] int* pnSeconds);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(8)] HRESULT GetErrorCount([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] int* pnErrorCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(9)] HRESULT GetExpireDate([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] DATE* pdateExpires);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(10)] HRESULT GetFileCount([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] int* pnFileCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(11)] HRESULT GetFullyQualifiedName ([in] int nBackupJob,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out, retval] BSTR* pbstrFqName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(12)] HRESULT GetLevelName([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrLevelName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(13)] HRESULT GetLogicalTarget ([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrLogicalTarget);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(14)] HRESULT GetMediaLabel([in] int nBackupJob, [out,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"retval] BSTR* pbstrMediaLabel);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The \u201cCountBackupJobs\u201d method returns an integer that represents the number of backup job records in the CBAL.","The \u201cGetBackupDate\u201d method returns the date and time of the backup operation. This is expressed as a floating point number that contains the number of days and fractional days since the epoch (Dec. 30, 1899), one of the standard date notations that is used with COM technology.","The \u201cGetByteCount\u201d method returns the number of bytes that were backed up as a floating point number (or zero if no bytes were backed up).","The \u201cGetCanonicalLevel\u201d method returns the canonical backup level of the backup operation. All backup operations are classified according to one of these canonical backup levels: \u201cArchival\u201d; \u201cDifferential\u201d: \u201cFull\u201d; \u201cIncremental\u201d; and \u201cManual\u201d. The \u201cArchival\u201d backup level denotes a backup that is intended for archival purposes (that is, where the original is deleted and the backup copy is preserved indefinitely). The \u201cDifferential\u201d backup level denotes a backup that is useful or meaningful only in the context of a prior \u201cFull\u201d backup (because it expresses a difference between the present version of the original data and a prior copy of that same data). The \u201cFull\u201d backup level denotes a full (or complete) backup. An \u201cIncremental\u201d backup level denotes a backup of only those files or objects that can be identified as having been modified since the last \u201cFull\u201d backup. A \u201cManual\u201d backup level denotes a backup initiated by a user (in order to distinguish these backups from others that are initiated by an automated backup scheduler).","The \u201cGetClientName\u201d method returns the proprietary client name of the backup client that is involved in the backup operation. In the context, the word \u201cproprietary\u201d indicates that this client name is the host name of the backup client as it known to the backup engine. Often this is a host name is not fully-qualified. For example, the host name \u201cApollo\u201d is not a fully-qualified host name. In this context, the term \u201cfully-qualified\u201d means that the host name is all lowercase and contains the Internet domain name. In some cases, but not all cases, the host name is fully-qualified. For example, \u201capollo.backupreport.com\u201d is a fully-qualified host name. This inconsistency makes it difficult to cross-reference client names among a plurality of backup engines. Therefore, in order to cross-reference client names among a plurality of backup engines, the fully-qualified client name must be used and not the proprietary client name (note that the fully-qualified client name is obtained by using the \u201cGetFullyQualified\u201d method).","The \u201cGetDescription\u201d method returns the backup job description, typically a citation that is useful for finding out how the data in the backup job was obtained and where related information can be obtained from within the backup engine. The format of description can vary considerably and depends upon the backup engine. In some cases, the description may contain a reference number of a relevant record contained within a backup engine database. In other cases, it may contain a file name and line number of a flat file used by the backup engine to record relevant information.","The \u201cGetElapsedTime\u201d method returns the number of seconds that elapsed during the backup operation (or \u22121 if this information could not be obtained).","The \u201cGetErrorCount\u201d method returns the total number of errors and warnings that where identified by the backup engine during the backup operation (or \u22121 if this information could not be obtained).","The \u201cGetExpireDate\u201d method returns the date and time that the backup will expire, or the epoch (Dec. 30, 1899) if this information could not be determined. This date and time is expressed in the same notation used by the \u201cGetBackupDate\u201d method. Generally, backup copies expire after a few weeks when the backup media needs to be re-used in order to make newer backup copies.","The \u201cGetFileCount\u201d method returns the number of files (or objects) that were backed up during the backup operation (or \u22121 if this information could not be obtained).","The \u201cGetFullyQualifiedName\u201d method returns the fully-qualified host name of the backup client. In this context, the term \u201cfully-qualified\u201d means that the host name is all lowercase and contains the Internet domain name. For example, \u201cApollo\u201d is not a fully-qualified host name but \u201capollo.backupreport.com\u201d is a fully-qualified host name.","The \u201cGetLevelName\u201d method returns the proprietary backup level of the backup operation. Generally, backup engines will classify backup operations with a proprietary level name. In this context, the adjective \u201cproprietary\u201d is used to indicate that the backup level names used are expressed in a notion unique to a particular backup engine. The meaning of a particular word when used as a proprietary backup level name can vary considerably and depends upon the backup engine. In some cases, different words or used for similar meanings. For example, some backup engine vendors will design their backup engine to used the word \u201cnormal\u201d in a context where a different backup engine vendor might use the word \u201cfull\u201d. Therefore, in order to cross-reference backup level names among a plurality of backup engines, the canonical backup level must be used and not the proprietary backup level.","The \u201cGetLogicalTarget\u201d method returns the logical target name, a description of what files or objects are being backed up. The logical target is often a directory or file name, e.g. \u201cC:\\Foo\u201d. In some cases, the logical target is a mnemonic string or name that denotes a collection of directories and files.","The \u201cGetMediaLabel\u201d method returns the media label, a name or string that uniquely identifies a particular tape (or backup volume) that the backup copy was written to.","b. Description of a COM Interface Named \u201cIBackupDetail\u201d","In the preferred embodiment (BX), a canonical backup error log (CBEL) is implemented as a COM interface named \u201cIBackupDetail\u201d. The meaning and definition of \u201ccanonical backup error log\u201d (CBEL) was developed in conjunction with the development of the COM interface that implements it in BX.","The COM interface named \u201cIBackupDetail\u201d is an interface to a data stricture that contains a repository of historical records of data backup errors, warnings and events expressed as a CBEL. This data structure is implemented as a table of rows and columns; where each column has a title that describes it. A 2-dimensional array of elements is used for the table; a 1-dimensional array of strings is used for the titles; and a 1-dimensional array of integers is used for the column types. All elements in the table are stored using a string data type because a string can be readily converted either into an integer or date and time, as is required by the interface. A column number, which ranges from zero to one less than the number of columns, and a row number, which ranges from zero to one less than the number of rows, is used to reference individual elements in the table.","The syntax of the COM interface named \u201cIBackupDetail\u201d is described by an IDL specification as follows:",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IBackupDetail : IUnknown"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(1), helpstring(\u201cmethod CountColumns\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CountColumns([out, retval] int* pnColumnCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(2), helpstring(\u201cmethod CountRows\u201d)] HRESULT CountRows"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"([out, retval] int* pnRowCount);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(3), helpstring(\u201cmethod GetColumnTitle\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetColumnTitle([in] int nColumn, [out, retval] BSTR*"]},{"entry":[{},"pbstrTitle);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(4), helpstring(\u201cmethod GetColumnType\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetColumnType([in] int nColumn, [out, retval] int*"]},{"entry":[{},"pnColumnType);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(5), helpstring(\u201cmethod GetDateValue\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetDateValue([in] int nRow, [in] int nColumn, [out,"]},{"entry":[{},"retval] DATE* pdateValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(6), helpstring(\u201cmethod GetNumericValue\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetNumericValue([in] int nRow, [in] int nColumn, [out,"]},{"entry":[{},"retval] int* pnValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[id(7), helpstring (\u201cmethod GetStringValue\u201d)] HRESULT"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"GetStringValue([in] int nRow, [in] int nColumn, [out,"]},{"entry":[{},"retval] BSTR* pbstrValue);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The \u201cCountColumns\u201d method returns the number of columns in the CBEL.","The \u201cCountRows\u201d method returns the number of rows in the CBEL.","The \u201cGetColumnTitle\u201d method returns a string that contains the title or caption that describes the column.","The \u201cGetColumnType\u201d method returns an integer that describes the preferred data type of elements in the column. The term \u201cpreferred\u201d in this context indicates that certain data is best returned using a particular data type. For example, it is typically best to return an element that contains a date and time using a data type appropriate to time stamps, in order to leverage standard program libraries and internationalization tools. If the column is best returned as a date an time, the column type is 2; if the column is best returned as a number, the column type is 3; if the column is best displayed as a string, the column type is 6.","The \u201cGetDateValue\u201d method returns the value of an element in the form of a floating point number that contains the number of days and fractional days since the epoch (Dec. 30, 1899), one of the standard date notations that is used with COM technology. This method is to be used only when the column type indicates that the element contains a date and time.","The \u201cGetNumericValue\u201d method returns the value of an element in the form of an integer. This method is to be used only when the column type indicates that the element contains a number.","The \u201cGetStringValue\u201d method returns the value of an element in the form of a string. Any element can be expressed as a string, but it is usually best to use the \u201cGetDateValue\u201d method if the column type indicates that the element contains a date and time. Similarly, it is usually best to use the \u201cGetNumericValuc\u201d method if the column type indicates that the element contains a number.","c. Description of a COM Interface Named \u201cIBeProps\u201d","In order to communicate with a backup engine, it is sometimes necessary to have knowledge of certain properties that are specific to that backup engine. In this context, the word \u201cproperty\u201d is used to mean a (name, value) tuple used as a parameter. For example, \u201clogin name\u201d, \u201cpassword\u201d, and \u201cTCP\/IP port number\u201d are the names of properties that are typically found property list.","The COM interface named \u201cIBeProps\u201d is an interface to a data structure that contains a list of backup engine properties. This data structure is implemented as a 1-dimensional array, where each element of the array contains a property name and a property value. The property name and property value are both expressed using a string data type. A property number, which ranges from zero to one less than the number of properties in the array, is used to reference individual properties.","The syntax of the COM interface named \u201cIBeProps\u201d is described by an IDL specification as follows:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IBeProps : IUnknown"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT CountProperties ([out, retval] int* pnProperties);"]},{"entry":[{},"HRESULT GetPropertyName([in] int nProperty,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out, retval] BSTR* pbstrPropertyName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT GetPropertyValue([in] int nProperty,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"[out, retval] BSTR* pbstrPropertyValue);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cCountProperties\u201d method returns an integer that represents the number of properties.","The \u201cGetPropertyName\u201d method returns a string that contains the name of a property.","The \u201cGetPropertyValue\u201d method returns a string that contains the value of a property.","d. Description of a COM Interface Named \u201cIBePlug\u201d","A Backup Engine Plug-In (BEP) is a software component that is used to add the ability to communicate with a particular backup engine for the specific purpose of downloading historical records of data backup activity (and errors) from that backup engine. The COM interface named \u201cIBePlug\u201d is the mechanism by which the preferred embodiment (BX) accesses a backup engine plug-in (BEP). The use of a standard interface in this manner allows BX to be designed without knowledge of the implementation of a BEP, and vice versa. A backup engine plug-in (BEP) obtains historical records of backup activity (and errors) from applicationi-programming interface (API) that is specific to a particular backup engine. In this context, the term \u201capplication-programming interface\u201d denotes programming libraries supplied by the backup engine vendor; files generated by the backup engine in the course of its normal operation; command-line utilities included with the backup engine that can be run to produce relevant data; or any other software method that can be used to obtain the relevant data.","A backup engine plug-in (BEP) will translate the historical records of backup activity (and errors) obtained from a backup engine into a canonical backup activity log (CBAL) and canonical backup error log (CBEL). For example, some backup engines express dates and times in the Unix date format, a 32-bit integer that contains the number of milliseconds since an epoch of Jan. 1, 1970. This date format must be translated into the date format used in the canonical backup activity log (CBAL), a floating-point number that contains the number of days (including fractional days) since an epoch of Dec. 30, 1899. Similarly, some backup engines will express the number of bytes that have been backed up in kilobytes or megabytes, and this must be translated into the date format used in the CBAL. In general, the BEP will perform whatever translation is necessary in order to put the data into a format used in the CBAL.","The syntax of the COM interface named \u201cIBePlug\u201d is described by an IDL specification as follows:",{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"interface IBePlug : IUnknown"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT DownloadBackupDetail([in] BSTR bstrServerName,"]},{"entry":[{},"[in] BSTR"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bstrClientName, [in] DATE dateBackedUp, [in]"]},{"entry":[{},"IBeProps2000* serverProps, [out, retval] IBackupDetail**"]},{"entry":[{},"ppIBackupDetail);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HRESULT DownloadBackupLog([in] BSTR bstrServerName,"]},{"entry":[{},"[in] DATE"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dateFrom, [in] IBeProps2000* serverProps, [out, retval]"]},{"entry":[{},"IBackupLog2000** ppIBackupLog);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT GetEngineName ([out, retval] BSTR* pbstrEngineName);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The \u201cDownloadBackupDetail\u201d method returns a canonical backup error log (CBEL) expressed as a COM interface named \u201cIBackupDetail\u201d. The backup engine plug-in (BEP) will use the application programming interface (API) of the backup engine to obtain an historical record of backup errors, warnings and events and then will translate the same into a CBEL.","The \u201cDownloadBackupLog\u201d method returns a canonical backup activity log (CBAL) expressed as a COM interface named \u201cIBackupLog\u201d. The backup engine plug-in (BEP) will use the application programming interface (API) of the backup engine to obtain an historical record of backup activity and then will translate the same into a CBAL.","The \u201cGetEngineName\u201d method returns a string that contains the name of the kind of backup engine that the backup engine plug-in (BEP) can communicate with.","e. Description of a COM Interface Named \u201cIBackupReport\u201d","The COM interface named \u201cIBackupReport\u201d is used to access the functionality of the preferred embodiment (BX). BX is a software component that may be added component palette of an integrated development environment (IDE) like Microsoft Visual Basic or Borland Delphi, and thereby utilized in a software device or program. A programmer would use BX in combination with an IDE to create a new software device or program. The program would access BX via the COM interface named \u201cIBackupReport\u201d, and more specifically via the \u201cRequestBackupDetail\u201d and \u201cRequestBackupLog\u201d methods. In the course of using these two methods, other COM interfaces would like \u201cIBackupDetail\u201d, \u201cIBackupLog\u201d, etc., also come into play hence these interfaces are also described in this document.","Given the name of a backup engine and backup server, BX will return an historical record of data backup activity (and errors) expressed as a canonical backup activity log (CBAL) and canonical backup error log (CBEL). Thus, the format of the data returned is consistent regardless of what backup engine the data is obtained from, which allows the data to be cross-referenced, consolidated and compared.","The syntax of the COM interface named \u201cIBackupReport\u201d is described by an IDL specification as follows:",{"@attributes":{"id":"p-0091","num":"0090"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IBackupReport : IDispatch"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT RequestBackupDetail([in] int timeoutMillisecs,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] BSTR engineName, [in] BSTR serverName,"]},{"entry":[{},"[in] BSTR clientName, [in] DATE bkupDate,"]},{"entry":[{},"[in] IBeProps2000* serverProps,"]},{"entry":[{},"[out, retval] int* pTaskID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT RequestBackupLog([in] int timeoutMillisecs,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] BSTR engineName, [in] BSTR serverName,"]},{"entry":[{},"[in] DATE fromDate,"]},{"entry":[{},"[in] IBeProps2000* serverProps,"]},{"entry":[{},"[out, retval] int* pTaskID);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cRequestBackupDetail\u201d method has five parameters: an integer that represents the number of milliseconds before the method will time out; a backup engine name; a backup server name; the date (24-hour day) that the errors, warnings, and events were generated by the backup engine; and a list of backup server properties. The \u201cRequestBackupDetail\u201d method has one return value: a task identification number.","The parameter named \u201ctimeoutMillisecs\u201d is the number of milliseconds before the method will time out (the method is allowed only a limited period of time to complete successfully or it must abort on the grounds that the time out period has expired).","The parameter named \u201cengineName\u201d is a string of letters that contains a backup engine name, and thus uniquely identifies a backup engine. The backup engine name is used to find a backup engine plug-in (BEP) that is capable of communicating with the backup engine. For example, \u201cNetVault\u201d is a backup engine name.","The parameter named \u201cserverName\u201d is a string of letters that contains a backup server host name, and thus uniquely identifies which computer on the network is running the backup engine. For example, \u201capollo.backupreport.com\u201d is a host name.","The parameter named \u201cbkupDate\u201d is a floating-point number that contains the number of days (including fractional days) since the epoch (Dec. 30, 1899). This is one of the standard date notations used with COM. Only those errors, warnings and events from the specified day will be returned (that is, the 24-hour hour period from midnight to midnight that includes the specified date and time).","The parameter named \u201cserverProps\u201d is a repository of relevant backup server parameters expressed using a COM interface named \u201cIBeProps\u201d. This COM interface is described elsewhere in this document.","The return value named \u201cpTaskID\u201d is a number that contains a task identification code. A task identification code is a unique number that the operating system uses to name the \u201cworker thread\u201d that performs the","\u201cRequestBackupDetail\u201d task. The operation and worker thread for the \u201cRequestBackupDetail\u201d task arc explained elsewhere in this document in connection with the description of the flowchart shown in .","The \u201cRequestBackupLog\u201d method has five parameters: an integer that represents the number of milliseconds before the method will time out; a backup engine name; a backup server name; the \u201cfrom date\u201d (earliest date of interest); and a list of backup server properties. The \u201cRequestBackupLog\u201d method has one return value: a task identification number.","The parameter named \u201cfromDate\u201d is a floating-point number that contains the number of days (including fractional days) since the epoch (Dec. 30, 1899). This is one of the standard date notations used with COM. Only those historical records of backup activity that occurred on or after this date and time will be returned when BX fires the \u201cReceivedBackupLog\u201d event.","The other parameters of \u201cRequestBackupLog\u201d and return value have descriptions identical to those of the \u201cRequestBackupDetail\u201d method. The operation and worker thread for the \u201cRequestBackupLog\u201d task arc explained elsewhere in this document in connection with the description of the flowchart shown in ,","f. Description of a COM Interface Named \u201cIBxOutputEvents\u201d","The COM interface named \u201c_IBxOutputEvents\u201d is used, in the preferred embodiment (BX), to return the results of the asynchronous requests made using the COM interface named \u201cIBackupReport\u201d. A software device or program that uses BX must implement handlers for these events in order to receive the values returned in this way.",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dispinterface_IBxOutputEvents"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"properties:"]},{"entry":[{},"methods:"]},{"entry":[{},"HRESULT ReceivedBackupDetail([in] int taskID,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] int errorCode,"]},{"entry":[{},"[in] BSTR errorDetailString,"]},{"entry":[{},"[in] BSTR engineName, [in] BSTR serverName,"]},{"entry":[{},"[in] BSTR clientName, [in] DATE bkupDate,"]},{"entry":[{},"[in] IBackupDetail* backupDetail);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HRESULT ReceivedBackupLog([in] int taskID,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[in] int errorCode, [in] BSTR errorDetailString,"]},{"entry":[{},"[in] BSTR engineName, [in] BSTR serverName,"]},{"entry":[{},"[in] DATE fromDate,"]},{"entry":[{},"[in] IBackupLog* backupLog);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cReceivedBackupDetail\u201d event has eight parameters: an integer that contains the task identification number returned by the corresponding call to the \u201cRequestBackupDetail\u201d method; an integer that contains zero for success or non-zero for an error; an error detail string that contains helpful details about an error; the backup engine name that was passed to the corresponding call to the \u201cRequestBackupDetail\u201d method; the backup server name that was passed to the corresponding call to the \u201cRequestBackupDetail\u201d method; the backup date and time that was passed to the corresponding call to the \u201cRequestBackupDetail\u201d method; and the canonical backup error log expressed using a COM interface named \u201cIBackupDetail\u201d that is described elsewhere in this document. The \u201cReceivedBackupDetail\u201d event is fired when the \u201cworker thread\u201d initiated by the \u201cRequestBackupDetail\u201d method has completed, this is described elsewhere in this document in connection with the description of the flowchart in .","The \u201cReceivedBackupLog\u201d event has eight parameters: an integer that contains the task identification number returned by the corresponding call to the \u201cRequestBackupLog\u201d method; an integer that contains zero for success or non-zero for an error; an error detail string that contains helpful details about an error; the backup engine name that was passed to the corresponding call to the \u201cRequestBackupLog\u201d method; the backup server name that was passed to the corresponding call to the \u201cRequestBackupLog\u201d method; the from date and time that was passed to the corresponding call to the \u201cRequestBackupLog\u201d method; and the canonical backup activity log expressed using a COM interface named \u201cIBackupLog\u201d that is described elsewhere in this document. The \u201cReceivedBackupLog\u201d event is fired when the \u201cworker thread\u201d initiated by the \u201cRequestBackupLog\u201d method has completed, this is described elsewhere in this document in connection with the description of the flowchart in .","g. Description of the Flowchart Shown in .","The flowchart shown in  is a description of how, in the preferred embodiment (BX), the \u201cRequestBackupDetail\u201d method works and how the \u201cReceivedBackupDetail\u201d event is fired. The following text is an explanation of this flowchart.","When the \u201cRequestBackupDetail\u201d method is called, BX spawns two threads, a \u201cworker\u201d thread and a \u201ctimer\u201d thread. It then returns the task identification number of the \u201cworker\u201d thread. This task identification number is used as a unique reference number that is intended to match a call to the \u201cRequestBackupDetail\u201d method with a \u201cReceivedBackupDetail\u201d event (in case there is more than one call to the method, and there is confusion over which event corresponds to which call). In any case, the task identification number is set to unique thread identification number of the \u201cworker\u201d thread, which is easily obtained from the operating system.","As shown in the flowchart, simultaneous with the other threads of execution, the \u201ctimer\u201d thread waits until time out period, specified in a parameter to the \u201cReceievedBackupDetail\u201d method, has expired. When this happens, the timer thread aborts the \u201cworker\u201d thread if it has not already completed. If the worker thread is aborted, the \u201cReceievedBackupDetail\u201d event is fired with the error code parameter set to a non-zero value (to indicate that the request failed).","As shown in the flowchart, simultaneous with the other threads of execution, the \u201cworker\u201d thread accomplishes the major purposes of the request. First, it searches for a backup engine plug-in (BEP) that supports the backup engine name specified in a parameter to the \u201cRequestBackupDetail\u201d method. To do this, it looks in the directory where BX is installed, which can be determined from the operating system, and then it examines all files therein that are that are named with a \u201c.BEP\u201d suffix. For each of these files, the file is treated as a dynamically-linked library, and an attempt is made to connect with a COM interface named \u201cIBePlug\u201d. If this attempt is successful, and if the \u201cGetEngineName\u201d method of the COM interface nailed \u201cIBePlug\u201d then returns a backup engine name that matches the desired backup engine name, the BEP is found. Once the BEP has been found, all that remains is to call the \u201cDownloadBackupDetail\u201d method, take the canonical backup error log (CBEL) thereby obtained in the form of a COM interface named \u201cIBackupDetail\u201d, and then fire the \u201cReceivedBackupLog\u201d event with a zero error code to return this CBEL. However, in the case that the BEP is not found, then the \u201cReceivedBackupDetail\u201d method is fired with a non-zero error code.","h. Description of the Flowchart Shown in .","The flowchart shown in  is a description of how, in the preferred embodiment (BX), the \u201cRequestBackupLog\u201d method works and how the \u201cReceivedBackupLog\u201d event is fired. The following text is an explanation of this flowchart.","When the \u201cRequestBackupLog\u201d method is called, BX spawns two threads, a \u201cworker\u201d thread and a \u201ctimer\u201d thread. It then returns the task identification number of the \u201cworker\u201d thread. This task identification number is used as a unique reference number that is intended to match a call to the \u201cRequestBackupLog\u201d method with a \u201cReceivedBackupLog\u201d event (in case there is more than one call to the method, and there is confusion over which event corresponds to which call). In any case, the task identification number is set to unique thread identification number of the \u201cworker\u201d thread, which is easily obtained from the operating system.","As shown in the flowchart, simultaneous with the other threads of execution, the \u201ctimer\u201d thread waits until time out period, specified in a parameter to the \u201cReceievedBackupLog\u201d method, has expired. When this happens, the timer thread aborts the \u201cworker\u201d thread if it has not already completed. If the worker thread is aborted, the \u201cReceievedBackupLog\u201d event is fired with the error code parameter set to a non-zero value (to indicate that the request failed).","As shown in the flowchart, simultaneous with the other threads of execution, the \u201cworker\u201d thread accomplishes the major purposes of the request. First, it searches for a backup engine plug-in (BEP) that supports the backup engine name specified in a parameter to the \u201cRequestBackupLog\u201d method. To do this, it looks in the directory where BX is installed, which can be determined from the operating system, and then it examines all files therein that are that are named with a \u201c.BEP\u201d suffix. For each of these files, the file is treated as a dynamically-linked library, and an attempt is made to connect with a COM interfaced named \u201cIBePlug\u201d. If this attempt is successful, and if the \u201cGetEngineName\u201d method of the COM interface named \u201cIBePlug\u201d then returns a backup engine name that matches the desired backup engine name, the BEP is found. Once the BEP has been found, all that remains is to call the \u201cDownloadBackupLog\u201d method, take the canonical backup activity log (CBAL) thereby obtained in the form of a COM interface named \u201cIBackupLog\u201d, and then fire the \u201cReceivedBackupLog\u201d event with a zero error code to return this CBEL. However, in the case that the BEP is not found, then the \u201cReceivedBackupLog\u201d method is fired with a non-zero error code.",{"@attributes":{"id":"p-0115","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":["1. Minor modifications could be made to the canonical backup activity log (CBAL) described in this document without changing its fundamental purpose which is to provide a common notation for historical records of backup activity, suitable for the cross-referencing, consolidation and comparison of this data. For example, another date and time format could be used. Or the CBAL could be simplified to contain only the most essential information, that is: the date that the backup attempt or operation took place; the fully-qualified host name of the backup client; and the number of bytes that were backed up.","2. The preferred embodiment uses COM in order to provide the dynamic linking capability required to implement extensibility and backup engine plug-ins. A number of other technologies could be used to provide an equivalent dynamic linking capability."]}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
