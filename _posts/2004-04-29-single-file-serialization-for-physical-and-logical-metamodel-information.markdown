---
title: Single file serialization for physical and logical meta-model information
abstract: A technique for serializing both logical and physical meta-model information in a single file is disclosed. In an embodiment, the logical meta-model information is serialized in an Extensible Marking Language (XML) schema compliant format, and the physical meta-model information is inserted into the logical meta-model in suitable locations such that the mappings between the logical and physical meta-models are preserved. In an embodiment, an XML “appInfo” annotation is used to carry physical meta-model information used by multiple applications and suitably placed in a nested configuration with its corresponding logical meta-model information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09032002&OS=09032002&RS=09032002
owner: International Business Machines Corporation
number: 09032002
owner_city: Armonk
owner_country: US
publication_date: 20040429
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["COPYRIGHT NOTICE AND PERMISSION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS","EXAMPLE"],"p":["A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","When a meta-model is created, it may get \u201cserialized\u201d in two separate but interdependent files that store the logical meta-model and the physical meta-model, respectively. (As known to those skilled in the art, \u201cserialization\u201d in the present context is a process whereby the meta-model is flattened or collapsed for storage, to be regenerated into memory at a later time.) However, it may be difficult to compare two such serialized meta-models if there are both logical meta-model files and physical meta-model files to consider at the same time. Additionally, with such serialization, versioning a meta-model may also be more complex.","Thus, an improved technique for serializing logical and physical meta-model information for a meta-model would be desirable.","The present invention provides a technique for serializing both logical and physical meta-model information for a meta-model in a single file.","In an embodiment, logical meta-model information is serialized in an Extensible Markup Language (XML) schema compliant format, and physical meta-model information is inserted into the serialized logical meta-model in suitable locations such that mappings between the logical and physical meta-models are preserved for subsequent regeneration.","In an embodiment, an XML \u201cappInfo\u201d annotation (an XML extension mechanism that allows schema developers to include information specific to a particular application) is adapted and used to identify physical meta-model information usable by multiple platforms, applications, and wire formats.","In an aspect of the invention, there is provided a method of serializing a meta-model, said meta-model comprising logical meta-model information, physical meta-model information and mappings therebetween, said method comprising:\n\n","In an embodiment, each said insertion is made at a suitable location in said file to implicitly preserve said mappings between said logical and physical meta-models.","In an embodiment, said at least one annotation is an XML appInfo annotation, and said annotation identifying said physical meta-model information is suitably placed in a nested configuration relative to its corresponding logical meta-model information in said file.","In an embodiment, said converting said logical meta-model information into an XML schema compliant format comprises converting:\n\n","In an embodiment, inherited attributes from parent types are included.","In an embodiment, the name of said target class becomes the name of said nested element.","In an embodiment, if a relationship is named, then said name of said nested element includes the name of said target class, followed by the name of a corresponding instantiated class, followed by the name of said relationship.","In an embodiment, said association name becomes the name of said attribute, and the value of said attribute becomes a path of a target object.","In an embodiment, said method further comprises configuring said XML appInfo annotation to store physical meta-model information for more than one application.","In another aspect of the invention, there is provided a computer readable medium containing computer executable code for serializing a meta-model, said meta-model comprising logical meta-model information, physical meta-model information and mappings therebetween, said computer executable code comprising:\n\n","In an embodiment, said computer executable code further comprises code for inserting said physical meta-model information at suitable locations in said file to implicitly preserve said mappings between said logical and physical meta-models.","In an embodiment, said at least one annotation is an XML appInfo annotation, and said computer executable code further comprises code for identifying said physical meta-model information by suitably placing said at least one annotation in a nested configuration relative to its corresponding logical meta-model information in said file.","In an embodiment, said code for converting said logical meta-model information into an XML schema compliant format comprises code for converting:\n\n","In an embodiment, said code is configured to include inherited attributes from parent types.","In an embodiment, said code is configured to assign the name of said target class to the name of said nested element.","In an embodiment, if a relationship is named, then said code is configured to include in said name of said nested element the name of said target class, followed by the name of a corresponding instantiated class, followed by the name of said relationship.","In an embodiment, said code is configured to assign the name of said association to the name of said attribute, and the value of said attribute to a path of a target object.","In an embodiment, said code is configured to store in said XML appInfo annotation physical meta-model information for more than one application.","In another aspect of the invention, there is provided a system comprising a processor and computer readable memory, said memory storing code for serializing a meta-model, said meta-model comprising logical meta-model information, physical meta-model information and mappings therebetween, said code being adapted to:\n\n","In an embodiment, each said insertion is made at a suitable location in said file to implicitly preserve said mappings between said logical and physical meta-models.","In an embodiment, said at least one annotation is an XML appInfo annotation, and said code is adapted to place said annotation identifying said physical meta-model information in a nested configuration relative to its corresponding logical meta-model information in said file.","In an embodiment, said code is further adapted to store physical meta-model information for more than one application in said XML appInfo annotation.","The foregoing and other aspects of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention.","Referring to , shown is an exemplary computer system  that may provide an operating environment for exemplary embodiments of the invention. The computer system  may include a central processing unit (\u201cCPU\u201d)  connected to a storage unit  and to a random access memory (\u201cRAM\u201d) . The CPU  may execute a software program  which may be stored in the storage unit  and loaded into RAM  as required. A user  may interact with the computer system  using a video display  connected by a video interface , and various input\/output devices such as a keyboard , mouse , and disk drive  connected by an I\/O interface . The disk drive  may be configured to accept computer readable media . Optionally, the computer system  may be network enabled via a network interface . It will be appreciated that the computer system  of  is merely illustrative and is not meant to be limiting in terms of the type of system that may provide a suitable operating environment for the invention.","As will be appreciated by those skilled in the art, in order to fully define a model (or, as commonly referred to in the art, a \u201cmeta-model\u201d), both logical and physical information may be required. For the purposes of illustration consider, for example, a messaging meta-model for the transmission of messages between enterprises having disparate platforms, applications, and wire formats. In this example, a logical meta-model may define the logical structure of the message, while a physical meta-model may define various alternative wire formats of the message. The corresponding meta-model may thus provide an end-user with a view of the physical and logical information that pertains to a specific message that is being passed between the enterprises. One example of how such a meta-model may be formed is described in U.S. Pat. No. 7,559,052, the contents of which are hereby incorporated by reference.","In an embodiment, a user (e.g. user ) may be permitted to modify the meta-model by editing the corresponding logical and physical meta-model information contained in serialized files. The user may use various I\/O devices (e.g. video display , keyboard , and mouse ) for this purpose. In addition, the user may be permitted to retrieve physical information from the serialized file that is available for any given logical construct. To make this possible, the meta-model maintains a set of mappings that dictate how the physical meta-model information links to the logical meta-model information.","A possible process for serializing a meta-model  and subsequently regenerating it that does not use the teaching of this invention is shown schematically in  and , respectively. More specifically, in , a meta-model  residing in memory (e.g. in RAM  of ) includes a physical meta-model , a logical meta-model , and mappings  between the physical and logical meta-models , .","Using a suitable modeling and code generation tool, the logical and physical meta-models ,  may be serialized into files ,  which may be stored (e.g. in storage  of ). One such tool is the Eclipse Modeling Framework (\u201cEMF\u201d) which is a Java\/XML framework for generating tools and other applications based on simple class models. An EMF code generator can be used to turn models into customizable Java code. For more detailed information, the reader is directed to the following URL:http:\/\/www.eclipse.org\/emf\/.","For example, as shown in , EMF may be used to serialize the meta-model  into two files: (1) an \u201c.xsd\u201d file  which is an XML schema file serializing the logical meta-model , and (2) an \u201c.msd\u201d file  which is an XML Metadata Interchange (\u201cXMI\u201d) file serializing the physical meta-model  and the mappings  between physical meta-model  and logical meta-model . A corresponding process for regenerating the meta-model  from the .xsd file  and the .msd file  is shown in .","For the purposes of illustration, consider  and  in which an illustrative .xsd file  and an illustrative .msd file  for a \u201cmessaging\u201d meta-model are shown. (As previously noted, the \u201cmessaging\u201d meta-model may relate to, for example, messaging between enterprises having disparate platforms, applications, and wire formats.)","As shown in , illustrative .xsd file  contains declarations of a complex type called \u201ccomplexType1\u201d (line ) and an element called \u201cmessage1\u201d (line ). Looking at the corresponding .msd file  in , it is apparent that there are at least two mappings from the physical meta-model to the logical meta-model, namely: (1) \u201cMRGlobalElement1\u2192message1\u201d (lines -), and (2) \u201cMRComplexType1\u2192complexType1\u201d (lines -).","The first of these mappings contains physical meta-model information pertaining to an XML and a tag delimited string (\u201cTDS\u201d) representation of the element. (As known in the art, TDS is a common format for wire transfer.) That is, the XML representation provides the XML name \u201cmessage1XML\u201d (line ) for the element with logical name \u201cmessage1\u201d (line ). The TDS representation provides a tag=\u201ctheTag\u201d (line ) for the element with logical name \u201cmessage1\u201d (line ). In the present illustrative example, the second of these mappings does not contain any physical meta-model information.","As apparent from  and , the EMF generated format of the .xsd file  and the corresponding .msd file  may be difficult to interpret by visual inspection. Moreover, comparing the files ,  to other such files pertaining to similar messaging meta-models may be difficult.","As will now be described, in accordance with an embodiment of the present invention, a single file may be used to serialize both the logical and the physical meta-model information for a meta-model to improve readability, and therefore usability, of the meta-model.","In an embodiment of the invention, a logical meta-model is serialized in an XML schema compliant file which is annotated to include physical meta-model information and mappings. For example, the XML schema specification may provide support for two types of annotations: (1) documentation information; and (2) application specific information. It will be appreciated that it is possible for a user to create both annotation types at various levels of granularity throughout the XML schema file.","As previously mentioned, the XML appInfo annotation is an extension mechanism that allows schema developers to include information specific to a particular application. Consider the example in  where an IBM DB2\u2122 database uses an appInfo annotation (i.e. at lines ,  and ) to define a piece of application specific information, namely, a new simple type with the name \u201cCHAR\u201d (line ). When this schema is loaded by the DB2 application, the appInfo annotation contents are used to guide the DB2 application in selecting the proper native type.","As will become apparent, in accordance with one embodiment of the present invention, the appInfo annotation may be adapted from its original purpose of simply storing one piece of application specific information for one application, to store physical meta-model information for multiple applications. Advantageously, the resulting annotated XML schema contains information at a higher abstraction level that can be used by multiple applications running on various platforms and operating systems, and using different message formats.","In order to serialize both logical and physical meta-models into a single file, the following two issues need to be addressed:\n\n","With respect to the first issue, the physical meta-model may be implemented, for example, using EMF. As known to those skilled in the art, the default behavior of EMF is to serialize the contents of a model using XMI. An example of such a file is the .msd file shown in , referred to above.","With respect to the second issue, every construct in the physical meta-model should be mapped to one and only one construct in the logical meta-model. As will become apparent, in accordance with the teachings of the present invention, the mappings need not be explicitly stored in a schema file. Instead, the XML appInfo annotation of the corresponding logical element may be used to store the physical information. As a result, the mappings between the physical and logical meta-models become implicit rather than explicit.","In accordance with an embodiment of the invention, an EMF reflection application programming interface (API) is used to analyze the physical meta-model  (), discover the physical attributes that are set, and analyze all the references in order to extract all the physical information.","In accordance with an embodiment of the invention, the conversion process from an EMF model to XML constructs may be defined as follows, using unified modeling language or (\u201cUML\u201d) terminology:\n\n","In order to limit complexity, the following schema elements are not supported by the above conversion process:\n\n","By way of example, the conversion process defined above may be used to serialize an illustrative messaging meta-model , (shown in UML) in . As will be apparent from , a class  (\u201cMRBaseRep\u201d) has an \u201cassociation\u201d relationship with class  (\u201cMRInclusionRep\u201d), which in turn has an \u201cassociation\u201d relationship with class  (\u201cMRCWFInclusionRep\u201d). Class  (\u201cMRBaseInclude\u201d) has an \u201caggregation\u201d relationship with class , for a multiplicity of 0 . . . n. That is to say, there are 0 . . . n instances of class  in an \u201caggregation\u201d relationship with class . Class  also has an \u201cassociation\u201d relationship with class  (\u201cMRLocalElement\u201d).","Referring back to class , it is also apparent that class  has an \u201cassociation\u201d relationship with 0, or one, of class  (\u201cXSDFeature\u201d). In turn, class  has an \u201caggregation\u201d relationship with class  (\u201cMRCWBaseRep\u201d) with a multiplicity of 0 . . . 1. Also, class  has an \u201cassociation\u201d relationship with class  (\u201cMRCWFSimpleRep\u201d), and class  has an \u201caggregation\u201d relationship with class  (\u201cMRCWFSimpleTD\u201d) with a multiplicity of 1. Class  also has an \u201cassociation\u201d relationship with class  (\u201cMRCWFStringRep\u201d). Class , in turn, has \u201cassociation\u201d relationships with each of class  (\u201cMRCWFLengthInfo\u201d) and class  (\u201cStringTD\u201d). For the purposes of the present illustration, the classes, attributes and relationships shown in  collectively define, in part, an illustrative messaging meta-model .","An EMF model  is first generated from the meta-model  using EMF, as shown in . The EMF model is then converted to an XML schema compliant meta-model representation generated using the conversion process described above. The result of the conversion from EMF to XML is shown in the .mxsd file  of . As will be readily apparent, the XML schema compliant .msxd file  is easier to read in comparison to the EMF meta-model representation in .","Still referring to , it is apparent that a number of annotations have been placed in the .msxd file  in order to insert physical meta-model information, and to preserve mappings between the logical and physical meta-model information. For example, the element \u201cmessage1\u201d (line ) now contains an appInfo annotation at lines -. Also, \u201cmessage1\u201d contains two kinds of physical information: (1) an XML representation with xmlName=\u201cmessage1XML\u201d (line ), and (2) a TDS representation with a tag=\u201ctheTag\u201d (line ). Furthermore, it will be apparent that placement of the appInfo annotation in a nested configuration at this particular location may provide an implicit mapping between the physical meta-model information and the corresponding logical meta-model information. Using the various appInfo annotations inserted at suitable locations in the .msxd file , the physical meta-model information, as well as the mappings between logical and physical meta-models, may be regenerated from the single .msxd file .","By way of example, a process of serializing the physical meta-model information and logical meta-model information in a single .mxsd file in accordance with an embodiment of the invention is shown schematically in . A process for subsequently regenerating the information from the .mxsd file in accordance with an embodiment of the invention is shown in .","More particularly, by comparing  to , it is apparent that a single .mxsd file  now replaces the two files, namely the .msd file  and the .xsd file , of . Also, by comparing  to , it is seen that regenerating the logical and physical meta-models from the single .mxsd file  now involves generating intermediate representations of: (1) XML with physical information ; and (2) an intermediate representation of XML with logical and physical information .","Thus, as shown in , the logical meta-model  may be regenerated from the .msxd file , and the annotations in the .msxd file  can be analyzed to generate physical meta-model objects as needed. In an embodiment, in order to extract the physical and meta-model information from the appInfo annotations, each appInfo annotation is processed using EMF to generate an appropriate physical meta-model object in . These physical meta-model objects may then be inserted into a newly created physical meta-model . As the physical meta-model objects are being inserted into the newly created physical meta-model , the mappings in  may also be generated to link the logical meta-model and the physical meta-model.","Advantageously, using the single .mxsd file to regenerate the logical and physical meta-models avoids any difficulties associated with out of synch logical and physical meta-models serialized in separate files. Furthermore, comparison between meta-models and versioning of meta-models may become significantly easier.","While exemplary embodiments of the invention have been shown and described, it will be appreciated that various changes and modifications may be made without departing from the scope of the invention as defined in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures which illustrate exemplary embodiments of the invention:",{"@attributes":{"id":"p-0032","num":"0045"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0033","num":"0046"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0034","num":"0047"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0035","num":"0048"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0036","num":"0049"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0037","num":"0050"},"figref":"FIG. 3C"},{"@attributes":{"id":"p-0038","num":"0051"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0039","num":"0052"},"figref":["FIG. 4B","FIG. 4A"]},{"@attributes":{"id":"p-0040","num":"0053"},"figref":"FIG. 4C"},{"@attributes":{"id":"p-0041","num":"0054"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0042","num":"0055"},"figref":"FIG. 5B"}]},"DETDESC":[{},{}]}
