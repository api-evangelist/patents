---
title: Access of resources by way of hypertext transfer protocol
abstract: In an embodiment, a method is provided for accessing a resource. In this method, a HTTP request that defines an operation to be performed on an identified resource is received. The HTTP request is then parsed to extract an operation parameter from a header of the HTTP request. The HTTP request is executed based on the operation parameter to generate a result, and the result of the execution of the HTTP request is returned in an HTTP response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08725834&OS=08725834&RS=08725834
owner: SAP AG
number: 08725834
owner_city: Walldorf
owner_country: DE
publication_date: 20120316
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to data access. In an embodiment, the disclosure relates to access of resources by way of Hypertext Transfer Protocol.","In general, Hypertext Transfer Protocol (HTTP) is used to request and transmit resources (e.g., Webpages and Webpage components) over the Internet or other computer networks. For example, resources can be retrieved by invoking a GET method that retrieves whatever resources identified by an HTTP request. In another example, resources can be stored by invoking a PUT method that requests the storage of resources included in an HTTP request.","HTTP is a popularly-used protocol because HTTP has many useful built-in features, such as automatic authentication, and is platform independent. However, with use of HTTP to access resources, the access features built into HTTP can be rather limited.","The description that follows includes illustrative systems, methods, techniques, instruction sequences, and computing machine program products that embody illustrative embodiments. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident, however, to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general, well-known instruction instances, protocols, structures and techniques have not been shown in detail.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":["100","100","102","120","102","120","104","106","108","104","108","102","104","108","108","108"]},"In this example, the Web server module  is in communication with the repository module  that is configured to access resources  stored in one or more storage devices. In particular, the client computing device  initially opens an HTTP connection to the server computing device  and transmits an HTTP request  to the server computing device . An \u201cHTTP request,\u201d such as the HTTP request , refers to an HTTP message requesting information or operation to be performed. Examples of such an HTTP request  include \u201cGET,\u201d \u201cPUT,\u201d \u201cDELETE,\u201d or other requests. It should also be appreciated that \u201cHTTP\u201d refers to all variants of HTTP, such as HTTP with Secure Sockets Layer (HTTPS).","Upon receipt of the HTTP request , the repository module  executes the HTTP request  and returns the result of the execution to the client computing device  in an HTTP response . An \u201cHTTP response\u201d (e.g., HTTP response ) refers to an HTTP message generated in response to the HTTP request . The HTTP response  may include the resource  that was requested by the HTTP request . As explained in detail below, the repository module  executes the HTTP request  based on a particular operation parameter that is encapsulated in the HTTP request .","It should be appreciated that the server computing device  may include fewer, more, or different modules apart from those shown in . For example, in another embodiment, the repository module  may be integrated in the Web server module . In yet another embodiment, the server computing device  can also host an application server module (not shown in ). An application server module is an application server that delivers applications to client computing device . The application server module may handle, for example, business logic and data access of the applications hosted on the client computing device . Examples of the application server module include a JAVA application server, an Apache server, and an Advanced Business Application Programming (ABAP) Application Server.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"],"b":["106","106","106","100","106","120","106"]},"In reference to , this embodiment of the repository module  includes an HTTP messaging module  and execution engine module . The HTTP messaging module  generally handles communication to and from other computing devices and\/or modules by way of HTTP. For example, in a Netweaver ABAP Application Server, the HTTP messaging module  can be a part of a communication layer that provides server side communication on top of the HTTP\/HTTPS protocol. The HTTP messaging module  may also, for example, provide a standard interface for communication with other request-response based protocols. Additionally, the HTTP messaging module  can parse HTTP messages to extract operation parameters, as explained in detail below.","The execution engine module  is configured to execute the HTTP request to generate a result. That is, the execution engine module  executes various HTTP methods. For example, the execution engine module  can execute a GET method, which retrieves whatever resource that is identified by the HTTP request. In another example, the execution engine module  can execute a DELETE method, which requests that the server computing device delete the resource identified by the HTTP request. In an embodiment, the execution engine module  can execute the HTTP methods based on operation parameters extracted from HTTP messages, as explained in more detail below.","It should be appreciated that in other embodiments, the repository module  may include fewer or more modules apart from those shown in . For example, in an alternate embodiment, the HTTP messaging module  can be excluded from the repository module . The modules , , and  may be in the form of software that is processed by a processor. In another example, as explained in more detail below, the modules , , and  may be in the form of firmware that is processed by application specific integrated circuits (ASIC), which may be integrated into a circuit board. Alternatively, the modules , , and  may be in the form of one or more logic blocks included in a programmable logic device (for example, a field programmable gate array). The described modules , , and  may be adapted, and\/or additional structures may be provided, to provide alternative or additional functionalities beyond those specifically discussed in reference to . Examples of such alternative or additional functionalities will be discussed in reference to the flow diagrams discussed below.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 3","FIG. 1","FIG. 3"],"b":["300","300","106","120","302"]},"Upon receipt of the HTTP request, the repository module, at , parses the HTTP request to extract an operation parameter. As used herein, an \u201coperation parameter\u201d refers to a value that is separate from the input instances for an HTTP method invocation, but which affects how those input instances are processed. The operation parameter can affect the execution of various HTTP methods, such as GET method, DELETE method, PUT method, and other HTTP methods. For example, an operation parameter can define a format (discussed below) to package files in a GET method.","In one embodiment, the operation parameter is stored in the HTTP header of the HTTP request, and the repository module extracts the operation parameter from the HTTP header. An HTTP header field is one or more components of the message header of an HTTP request or HTTP response. The HTTP header field is transmitted after the request or response line, the first line of a message. The HTTP header field is a colon-separated name-value pair in clear-text string format, terminated by a carriage return (CR) and line feed (LF) character sequence. The end of the header fields is indicated by an empty field, resulting in the transmission of two consecutive CR-LF pairs.","After the operation parameter is extracted, the repository module executes, at , the HTTP request based on the extracted operation parameter. A result is generated as a result of the execution, and the repository module then returns the result in an HTTP response at .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4","b":["106","106","200","500"]},"Additionally, example embodiments also support the use of the GET method to retrieve folders. For example, the HTTP request can be instead \u201cHTTP:\/\/<repo>\/f1\/f2\u201d that requests all files stored in folder \u201cf1.\u201d That is, the HTTP request is requesting a resource in the form of a folder, which includes files. In the HTTP response, the repository module  returns a list of files from folder \u201cf1.\u201d in a particular format. In this embodiment, the operation parameter extracted from the HTTP request header defines a format to package the files. Examples of formats used to package the files include JavaScript Object Notation (JSON), Extensible Markup Language (XML), and Election Markup Language (EML). Accordingly, the use of operation parameters in HTTP messages allows access of files in HTTP similar to file system operations, the features of which are not available in existing, conventional RESTful web services. For example, example embodiments allow the retrieval of folders, but conventional HTTP requests can only retrieve individual files\u2014not folders.","In another embodiment, the HTTP header of the HTTP response can also store a different operation parameter that defines a format to compress the folder. Examples of such formats include ZIP, TAR, 7-ZIP (7z), GNU ZIP (GZIP), and Roshal Archive (RAR). For example, the operation parameter \u201cBatchCommand=zip\u201d will export requested folder as a zip file. With the operation parameter extracted, the repository module  can compress the files in the folder according to the format defined in the operation parameter and return the folder (with compressed files) by way of an HTTP response.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 5","FIG. 5"],"b":"106"},"The following Table A lists more example details of the use of GET methods in context of example embodiments:",{"@attributes":{"id":"p-0030","num":"0029"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"center"}}],"thead":{"row":{"entry":"TABLE A"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["HTTP Request",{},"HTTP Response"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HTTP",{},{},"Sample",{},{},"Content-"]},{"entry":["Method","Body","Header","URL","Return Code","Body","type"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Get",{},{},"HTTP:\/\/<repoURL>\/folder1\/folder2\/item","200 - if","If \u201citem\u201d is a folder:","text\/html"]},{"entry":[{},{},{},{},"\/folder1\/folder2\/item","JSON list of items in the",{}]},{"entry":[{},{},{},{},"exists in","folder",{}]},{"entry":[{},{},{},{},"repository","if \u201citem\u201d is a file: file","application\/"]},{"entry":[{},{},{},{},{},"content","zip"]},{"entry":[{},{},{},{},"200 - if\/","Body of the response","application\/"]},{"entry":[{},{},{},{},"folder1\/folder2\/item","received from URL read","zip"]},{"entry":[{},{},{},{},"do not exists in","from \u201c.redirectURL\u201d",{}]},{"entry":[{},{},{},{},"repository and there","with added rest of the",{}]},{"entry":[{},{},{},{},"is \u201c.redirectURL\u201d","path from where",{}]},{"entry":[{},{},{},{},"file in any of the","\u201c.redirectURL\u201d was",{}]},{"entry":[{},{},{},{},"parent folders of","found",{}]},{"entry":[{},{},{},{},"item or item name is","(if \u201c.redirectURL\u201d is in",{}]},{"entry":[{},{},{},{},"\u2018.redirectURL\u2019","\/folder1 folder, requested",{}]},{"entry":[{},{},{},{},{},"URL will be <read from",{}]},{"entry":[{},{},{},{},{},".redirectURL",{}]},{"entry":[{},{},{},{},{},"file>+\/folder2\/item)",{}]},{"entry":[{},{},{},{},"404 - if",{},"text\/html"]},{"entry":[{},{},{},{},"\/folder1\/folder2\/item",{},{}]},{"entry":[{},{},{},{},"do not exists in",{},{}]},{"entry":[{},{},{},{},"repository and there",{},{}]},{"entry":[{},{},{},{},"is no \u201c.redirectURL\u201d",{},{}]},{"entry":[{},{},{},{},"file in any of parent",{},{}]},{"entry":[{},{},{},{},"folders of item",{},{}]},{"entry":[{},{},{},{},"403 - If requested",{},{}]},{"entry":[{},{},{},{},"resource is outside",{},{}]},{"entry":[{},{},{},{},"repository (for",{},{}]},{"entry":[{},{},{},{},"example requested",{},{}]},{"entry":[{},{},{},{},"path contains",{},{}]},{"entry":[{},{},{},{},"\u201c . . . \/ . . . \/\u201d)",{},{}]},{"entry":[{},{},{},{},"500 - if error occurs","Error message if","text\/html"]},{"entry":[{},{},{},{},"on the server","available",{}]},{"entry":[{},{},{},"HTTP:\/\/<repoURL>\/folder1\/folder2\/item!\/file1","200 - if there is a","file1 content","application\/"]},{"entry":[{},{},{},{},"archive with name",{},"zip"]},{"entry":[{},{},{},{},"item1 and in this",{},{}]},{"entry":[{},{},{},{},"archive exist entry",{},{}]},{"entry":[{},{},{},{},"file1",{},{}]},{"entry":["Get",{},"\u2018BatchCommand=",{},"200 - if","Zipped content of","application\/"]},{"entry":[{},{},"zip\u2019",{},"\/folder1\/folder2\/item","\u2018\/folder1\/folder2\/item\u2019 if","zip"]},{"entry":[{},{},"in",{},"exists in","it is a folder,",{}]},{"entry":[{},{},"PRAGMA",{},"repository","METAINF\\MANIFEST.",{}]},{"entry":[{},{},"header",{},{},"MF file contains section",{}]},{"entry":[{},{},{},{},{},"with",{}]},{"entry":[{},{},{},{},{},"\u2018Name=JPaasRepository\u2019",{}]},{"entry":[{},{},{},{},{},"and property",{}]},{"entry":[{},{},{},{},{},"\u2018Path=\/folder1\/folder2\/item\u2019"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"In addition, the repository module  can also process DELETE methods. Here, in one embodiment, if some files cannot be deleted, the repository module  puts all the file names in the body of the HTTP response. The following Table B lists more example details of the use of DELETE methods in context of example embodiments.",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"center"}}],"thead":{"row":{"entry":"TABLE B"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["HTTP Request",{},"HTTP Response"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HTTP",{},{},"Sample",{},{},"Content"]},{"entry":["Method","Body","Header","URL","Return Code","Body","Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Delete",{},{},"HTTP:\/\/<repoURL>\/folder1\/folder2\/item","200 - if\/folder1\/\/item",{},"text\/html"]},{"entry":[{},{},{},{},"was deleted",{},{}]},{"entry":[{},{},{},{},"successfully (if item is",{},{}]},{"entry":[{},{},{},{},"folder all subfolders",{},{}]},{"entry":[{},{},{},{},"will be deleted)",{},{}]},{"entry":[{},{},{},{},"403 - if is requested",{},{}]},{"entry":[{},{},{},{},"resource outside",{},{}]},{"entry":[{},{},{},{},"repository (for example",{},{}]},{"entry":[{},{},{},{},"requested path contains",{},{}]},{"entry":[{},{},{},{},"\u201c . . . \/ . . . \/\u201d)",{},{}]},{"entry":[{},{},{},{},"500 - If there is a","comma","text\/html"]},{"entry":[{},{},{},{},"problem with delete","delimited list of",{}]},{"entry":[{},{},{},{},"operation","items that are not",{}]},{"entry":[{},{},{},{},{},"deleted"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"In addition to GET and DELETE methods, the repository module can also process PUT methods. It should be noted that the PUT method requests that an enclosed resource (e.g., file) in an HTTP request to be stored. In one embodiment, the operation parameter extracted from the header of the HTTP request can define a command to decompress a compressed file included in the body of the HTTP request. In another embodiment, the operation parameter can also define an option to overwrite an existing file with the compressed file that is located in the same directory path. In yet another embodiment, the operation parameter can define an option to create a directory path to store the compressed file if the directory path is absent. For example, a PUT method creates a file with path taken from URL HTTP:\/\/<repo>\/folder1\/file1 will create folder \u201cfolder 1\u201d and file \u201cfile 1\u201d if such a directory path is absent.","The following Table C lists more example details of the use of PUT methods in context of example embodiments.",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"center"}}],"thead":{"row":{"entry":"TABLE C"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["HTTP Request",{},"HTTP Response"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["HTTP",{},{},"Sample",{},{},"Content-"]},{"entry":["Method","Body","Header","URL","Return Code","Body","Type"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":["Put","file","Properties","HTTP:\/\/<repoURL>\/folder1\/folder2\/item","201 - if",{},"text\/html"]},{"entry":[{},"content","\u2018PathExists=",{},"\/folder1\/folder2\/item",{},{}]},{"entry":[{},{},"true\/false\u2019",{},"was successfully",{},{}]},{"entry":[{},{},"and",{},"written in repository",{},{}]},{"entry":[{},{},"\u2018Overwrite=",{},"200 - if",{},"text\/html"]},{"entry":[{},{},"true\/false\u2019",{},"\/folder1\/folder2\/item",{},{}]},{"entry":[{},{},"set in",{},"was successfully",{},{}]},{"entry":[{},{},"PRAGMA",{},"updated",{},{}]},{"entry":[{},{},"header (",{},"403 - if requested",{},{}]},{"entry":[{},{},"see client",{},"resource is outside",{},{}]},{"entry":[{},{},"API",{},"repository (for example",{},{}]},{"entry":[{},{},"\u2018upload\u2019",{},"requested path contains",{},{}]},{"entry":[{},{},"method for",{},"\u201c . . . \/ . . . \/\u201d)",{},{}]},{"entry":[{},{},"details)",{},"404 - if path do not",{},{}]},{"entry":[{},{},{},{},"exists in repository and",{},{}]},{"entry":[{},{},{},{},"provided via",{},{}]},{"entry":[{},{},{},{},"\u2018PathExists\u2019 path do",{},{}]},{"entry":[{},{},{},{},"not exists",{},{}]},{"entry":[{},{},{},{},"409 - if folder with the","Error message if","text\/html"]},{"entry":[{},{},{},{},"same name already","available",{}]},{"entry":[{},{},{},{},"exists",{},{}]},{"entry":[{},{},{},{},"412 - if \u2018Overwrite\u2019",{},{}]},{"entry":[{},{},{},{},"property set to false",{},{}]},{"entry":[{},{},{},{},"and file already exists",{},{}]},{"entry":[{},{},{},{},"500 - if error occurs","Error message if","text\/html"]},{"entry":[{},{},{},{},{},"available",{}]},{"entry":[{},{},"\u2018BatchCommand=",{},"200 - if unzip",{},"text\/html"]},{"entry":[{},{},"unzip\u2019",{},"operation has finished",{},{}]},{"entry":[{},{},{},{},"successfully. If exists",{},{}]},{"entry":[{},{},{},{},"old folder is deleted",{},{}]},{"entry":[{},{},{},{},"500 - error occurs","Error message if","text\/html"]},{"entry":[{},{},{},{},{},"available"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6","b":"600"},"The machine is capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term \u201cmachine\u201d shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.","The example of the processing system  includes a processor  e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  (e.g., random access memory), and static memory  (e.g., static random-access memory), which communicate with each other via bus . The processing system  may further include video display unit  (e.g., a plasma display, a liquid crystal display (LCD) or a cathode ray tube (CRT)). The processing system  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) navigation device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker), and a network interface device .","The disk drive unit  (a type of non-volatile memory storage) includes a machine-readable medium  on which is stored one or more sets of data structures and instructions  (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by processing system , with the main memory  and processor  also constituting machine-readable, tangible media.","The data structures and instructions  may further be transmitted or received over a computer network  via network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HyperText Transfer Protocol (HTTP)).","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., the processing system ) or one or more hardware modules of a computer system (e.g., a processor  or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a field programmable gate array (FPGA) or an application-specific integrated circuit (ASIC)) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor  or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term \u201chardware module\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor  configured using software, the general-purpose processor  may be configured as respective different hardware modules at different times. Software may accordingly configure a processor , for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.","Modules can provide information to, and receive information from, other modules. For example, the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times, communications between such modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple modules have access. For example, one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then, at a later time, access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).","The various operations of example methods described herein may be performed, at least partially, by one or more processors  that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors  may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors  or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors , not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processors  may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors  may be distributed across a number of locations.","While the embodiment(s) is (are) described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the embodiment(s) is not limited to them. In general, techniques for access of resources by way of HTTP may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations, modifications, additions, and improvements are possible.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations, and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment(s). In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the embodiment(s)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present disclosure is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
