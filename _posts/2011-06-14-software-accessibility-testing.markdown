---
title: Software accessibility testing
abstract: According to exemplary embodiments, method and systems for software accessibility testing are provided. Aspects of the exemplary embodiments include: obtaining accessibility information on content of a graphical user interface (GUI) of software under test, wherein accessibility information is content of the GUI for which describing text is available or content of the GUI which is accessible by keyboard use; determining content of the GUI which should not be available in a test due to a lack of accessibility information; restricting the GUI to restrict access to the content not available; and providing the restricted GUI to a user for testing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08667468&OS=08667468&RS=08667468
owner: International Business Machines Corporation
number: 08667468
owner_city: Armonk
owner_country: US
publication_date: 20110614
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of foreign priority under 35 USC \u00a7119, to EP Patent Application No. 10166048.8, filed Jun. 15, 2010, which is incorporated herein by reference.","This invention relates to the field of software accessibility testing. In particular, the invention relates to software accessibility testing using visual output.","Accessibility refers to the practice of making products (such as software, web sites, etc.) usable by people of all abilities and disabilities.","A screen reader is a software application that attempts to identify and interpret what is being displayed on a screen and re-presents the output to a user using audio output, or a Braille output device. This is useful to users who are blind, visually impaired, illiterate, or have learning disabilities.","One of the difficulties in accessibility testing of a product is reluctance or lack of training on the part of (able) testers to do the testing in a way that truly reflects the target user and their disability. This is specifically true for users who are unable to see visual aspects of the user interface and rely solely on screen reader technologies for feedback. To do such testing fairly and thoroughly the tester should only be listening via screen reader technology and operating the user interface with a keyboard. Unfortunately, sighted testers inevitably fall back to using their sight to read the graphical user interface and the mouse to interact with the user interface, so the standard of testing can be diminished.","Although provision of audio feedback and keyboard navigation broadens the target user base for the software, it can be a daunting task for a sighted tester to operate the user interface in this way. A blind person tends to be an expert user of the keyboard as a navigation tool, and generally can process audio from screen readers at a faster rate than sighted users. However, blind users are a scarce resource within a software organization (and those that are blind may not want to focus on accessibility testing) and so the accessibility testers are often people non-representative of this user group.","The current approach to accessibility testing is insufficient and prone to inconsistency in quality, where sighted testers lapse to their familiar graphical user feedback and mouse input device. This approach entails the (sighted) tester operating the user interface using only a screen reader and keyboard and attempting to complete a number of scenarios. Such an approach tends to result in (sighted) testers still looking at the user interface for a good portion of their testing, which runs the risk of them interpreting a visual cue that is not available to the unsighted target user.","According to exemplary embodiments, method and systems for software accessibility testing are provided. Aspects of the exemplary embodiments include: obtaining accessibility information on content of a graphical user interface (GUI) of software under test, wherein accessibility information is content of the GUI for which describing text is available or content of the GUI which is accessible by keyboard use; determining content of the GUI which should not be available in a test due to a lack of accessibility information; restricting the GUI to restrict access to the content not available; and providing the restricted GUI to a user for testing.","It will be appreciated that for simplicity and clarity of illustration, elements shown in the figures have not necessarily been drawn to scale. For example, the dimensions of some of the elements may be exaggerated relative to other elements for clarity. Further, where considered appropriate, reference numbers may be repeated among the figures to indicate corresponding or analogous features.","In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention. However, it will be understood by those skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, and components have not been described in detail so as not to obscure the present invention.","An approach is proposed similar to double-machine-language-translation applied to a screen output. That is, when a phrase is entered into an automatic translation engine to translate the phrase, say from English to French, then the output is translated back to the original language, say French to English. The new, translated English phrase can then be assessed and compared to how it matches the original meaning. Thus the test is carried out in the familiar language.","In the context of the problem of accessibility testing, the first translation is effectively a translation from screen to audio-reader and then the reverse translation is from audio-reader to screen. The output screen is then tested by a sighted user for content.","When the testing is applied, what remains visible on the screen to the sighted tester is just the content that a screen reader would have read. All portions of the screen which would not have been read are highlighted, or blacked out, to indicate they are not present to all users.","The accessibility testing is further enhanced by applying the same pattern to keyboard navigation. The majority of screen reader users do not use a mouse or other pointer device for input into the computer. Screen readers user a wide variety of keyboard commands to carry out different tasks. However, the screen access provided by keyboard navigation is not as extensive as by a pointer device. Therefore, in the described system pointer device access is restricted to reflect the access available using only keyboard navigation.","Referring to , a schematic diagram  of the aim of the described accessibility testing system. A screen  is shown which may display a graphical user interface (GUI) of an application, web browser, operating system, or other visual output of a computer. Pointer device access  represents the accessibility of the screen . A pointer device may be a mouse, a touch pad, or other navigation device operating an on-screen pointer or cursor.","A screen reader  would translate the screen  to audio output using the information of a subset of the screen content  available to assistive technologies  and a user would have keyboard access  to the screen .","An accessibility testing system  provides a screen  with limited GUI display reflecting the content available to assistive technologies . The accessibility testing system  also provides restricted pointer device access  reflecting the keyboard access .","In this way, a sighted tester can carry out accessibility testing on the equivalent of the output of a screen reader  using the screen  with limited GUI display reflecting screen content available to assistive technologies  and with restricted pointer device access  reflecting the keyboard access .","This means that, as in the language translation metaphor, the sighted tester performs testing in their familiar comfort zone of screen viewing. What they see is a representation of what the unsighted user would hear. They are not able to fallback on using their sight (either intentionally or unintentionally) in the way they would have previously because the content that is not read out would simply be invisible or marked as such.","Thus there are several types of visual content that can be inspected for accessibility to screen readers. Illustrative examples of problematic content are:\n\n","The described testing system works by interacting with a graphical user interface (GUI) in the same way that a screen reader technology does, to obtain information that would normally be used to produce the audio representation. However, instead of reading out this content it is used by the described test system to establish what is read out and what is not. Using this knowledge and access to the rest of the GUI components the system builds up a mask layer which covers those objects in the GUI which are not made available to the screen reader. When the described test system is enabled this mask is applied to the screen buffer. This creates a visual representation of what would be available audibly.","A screen reader is a program that uses a text to speech synthesizer to relay information about what is appearing on a GUI. Currently, most windows-based operating systems have screen readers use system hooks to gain access to keyboard input and menu and dialog box messages. It will call the operating system application programming interfaces (APIs) to determine some information about the current status. It monitors some API functions to catch changes to the cursor, focus, and other elements on the screen. Finally, it creates an off-screen model that contains information about each point on the screen (e.g. character, font, font size, class, etc.). The end user can then use a keystroke to access this information when he or she wants to find out about an element on the screen (e.g. the current title in the title bar). Some operating systems provide screen reader access to the display contents without maintaining an off-screen model by representing what is displayed and providing access to it via an API.","Referring to , a block diagram shows an embodiment of a first aspect of the described system .","A computer system  is used to provide software  to be tested for an appropriate operating system  with a GUI  displayable on a screen . The computer system  includes a keyboard  and a pointer device  for input. The computer system  also includes a screen buffer  in the form of memory on a graphics card that the computer writes the intended screen display to, the graphics card then presents it to the screen . The computer system  also includes a keyboard buffer  in the form of memory between the keyboard  and the computer. When a key is pressed on the keyboard  this byte of data is placed into the keyboard buffer , from which the computer collects it to interpret.","The operating system , and through it other software, makes available via a window content API  a textual description of a window's content. Calls may be made to the window content API  to gain information on the content of the window. This window content API  is used by a screen reader and the resulting content information is synthesized to audio output.","The described test generating system  includes a test screen component  for generating a simulation of the content of a screen available via a screen reader, and a test input component  for generating a pointer device simulation of the keyboard access of a non-mouse user of a screen reader.","The test screen component  includes a content obtaining component  which makes calls to the window content API  of the operating system  to obtain information on the content of a window of a GUI  of the software  under test. This information is equivalent to the information that a screen reader would obtain.","The test screen component  also includes a determining component  for determining the objects in the GUI  which are not available from the window content API  (and therefore would not be provided as audio output by a screen reader).","The test screen component  optionally includes a visual clues component  which determines objects in the GUI  which may provide visual clues to a user which would not be available to an unsighted user receiving a screen reader audio output. For example, color may provide clues and therefore may be made grayscale, and images may provide clues and may be replaced by only showing their alternative text, in a rectangle that represents the image.","A mask generating component  of the test screen component  generates a mask layer (mask layer )  to be applied to the screen buffer  when a test is applied. The mask layer (mask layer )  indicates the objects in the GUI  which are not available in the audio output of a screen reader including the objects from the determining component  and from the visual clues component . The indication may be a blanking out of the object or a highlighting of the object, or replacing of the object, for example with grayscale.","The test input component  determines what can be interacted with on the GUI  via the keyboard .","The test input component  includes a keyboard simulation component . The keyboard simulation component  inserts bytes upon the keyboard buffer  such that the computer thinks that the bytes came from the keyboard  simulating a keyboard key having been pressed to explore what artifacts of the screen can be reached via the keyboard (for example via multiple presses of the tab key). Automated tab ring analysis can be performed on the GUI . Tab rings refer to the topology of visual elements or controls that are reachable by continually pressing the tab key. This is non-invasive testing as it only involves interacting with the keyboard buffer .","The test input component  also includes a tab trap component  for determining if there are any tab-traps where a user tabs somewhere and then cannot tab back out again to a previous tab position.","The test input component  also includes a keyboard shortcut component  for determining if there are any shortcut keys available and which parts of the GUI  are accessed by the shortcuts. This may involve more invasive testing of the GUI  such as source code analysis.","The test input component  includes a data file generating component  for generating a data file  of artifacts of the GUI  can be interacted with via the keyboard . Alternatively, the data file  may contain the artifacts of the GUI  which cannot be interacted with via the keyboard ","The test input component  may include a visual highlighting component  for providing an additional mask layer (mask layer )  for GUI components which are not accessible and any tab-traps.","These artifacts of the GUI  which cannot be interacted with via the keyboard  can be made unavailable to the testing user, when the testing system is activated and the user is using a pointer device. Thus allowing the pointer device using sighted user to interact only with those artifacts that the keyboard could have accessed.","Referring to , a block diagram shows an embodiment of a second aspect of the accessibility testing system . An accessibility tester, which may be a sighted user, uses a computer system  as described in  to test the software  operating on the operating system  and having a GUI . The accessibility tester uses a pointer device .","A testing mechanism  is provided to simulate the content of a GUI  of the software  as it would be available to a user of a screen reader. The testing mechanism  also simulates inputs available to the accessibility tester by restricting the pointer device operations that can be made.","The testing mechanism  includes a mask applying component  for applying the mask layer (mask layer )  to the screen buffer  to restrict the GUI . The mask applying component  may also apply the additional mask layer (mask layer )  showing GUI components which are not accessible by the keyboard and any tab-traps.","The testing mechanism  includes a pointer device restricting component  for restricting the pointer device access via a pointer device management component  in accordance with the data file  of user interface artifacts which can or cannot be interacted with on the GUI .","The testing mechanism  may also include a reporting component  to export screenshots of violating screens, or reports including the screenshots, or to maintain a history of the screens.","When the accessibility tester enables the testing mechanism  it applies limitations to the tester's pointer device interactions to prevent them interacting with GUI components which would have not been available via the keyboard. The testing mechanism  may also include a visual indication component  providing indication to the tester when a pointer device interaction (click) is not allowed. Further to this it may also indicate visually any tab-traps as explained above. This creates a pointer device representation of what would be available via the keyboard.","Referring to , block diagrams show two embodiments of a further aspect of the described testing system when applied as a web service.","Where a GUI is provided by a web application rendering content in a web browser, a more invasive approach may be used inspecting the presentation logic. This is possible because in the case of the web browser the presentation language (HTML\u2014hypertext mark-up language) is sent to the browser in a form which can be processed (i.e. plain text).","This aspect places some code between the browser's presentation layer and the server software sending the HTML. In a first embodiment shown in , this is performed server side as a web proxy. In a second embodiment shown in , this is performed client side as a browser plug in.","In , a server A is provided with web server code A and an accessibility component A provided as a web proxy. A client computer A runs a web browser A for accessing the content served by web server code A.","In , a server B is provided with web server code B. A client computer B runs a web browser B for accessing the content served by web server code B and including the accessibility component B as a browser plug in.","In either case, the accessibility component A,B includes a test screen component A,B for generating a simulation of the content of a screen available via a screen reader and a test input component A,B for generating a pointer device simulation of the keyboard access of a non-mouse user of a screen reader.","The test screen component A,B includes an inspection component A,B for inspection of the HTML source code to ascertain the artifacts or elements of the web page that do not have accessibility information such as screen reader useable information (i.e. descriptive text). A modifying component A,B modifies the display properties of those elements that have no screen-reader usable information. The modification may make the elements invisible. This can be done by removal of links or via a style sheet property e.g. a format style defined as invisible.","As an HTML sample includes the source code (which a compiled binary program in the embodiment of  does not) it can see what accessibility information has been provided. For example here is the source for an inaccessible image:\n\n","In an alternative embodiment, the accessibility component may render the page in memory. This can be done by performing the same interpretation as the browser, changing the source code into a page a user could view. However, instead of rendering it on the screen, it could be done in memory only, where the accessible properties can then be analyzed. Once analyzed and modified, the page may be rendered by the browser and made available to an end user for testing.","Both of these implementations are only possible because the accessibility component A,B can be placed between the server and the end user and has access to the source.","The test input component A,B, again in either case, includes an inspection component A,B for inspection of the HTML source code to ascertain the artifacts or elements of the page that are unreachable via the keyboard. A modifying component A,B modifies the properties of those elements that are not reachable via the keyboard so as to make them unreachable via a pointer device. This can be done, for example, by removing links and by changing buttons into static images.","The intractability of artifacts or elements of the GUI can be achieved mid-flow between the server and the end user by source code analysis. In one embodiment, the source code may be rendered first at a location other than the end user's screen, in order to identify a non-reachable element and modify it. Subsequent presentation of the modified source code is provided to the end user's screen for testing.","The inspection and modifying of the source code can be done in one step with no need to separately record the analysis; however, the two stages of inspection and modifying could be done separately with a record kept of the artifacts\/elements identified. This may be done for performance reasons, so that a subsequent request for the page can be modified without need to re-identify the elements. To this end a recording A,B component may be provided.","A Document Object Model (DOM) is cross-platform and language-independent convention for representing and interacting with objects. DOM is used by scripts that wish to inspect and modify a web page dynamically. The accessibility component A,B can traverse the DOM dynamically and change the visual nature of inaccessible elements with a style change or by removing links.","Referring to , an exemplary system for implementing aspects of the invention includes a data processing system  suitable for storing and\/or executing program code including at least one processor  coupled directly or indirectly to memory elements through a bus system . The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","The memory elements may include system memory  in the form of read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS)  may be stored in ROM . System software  may be stored in RAM  including operating system software . Software applications  may also be stored in RAM .","The system  may also include a primary storage means  such as a magnetic hard disk drive and secondary storage means  such as a magnetic disc drive and an optical disc drive. The drives and their associated computer-readable media provide non-volatile storage of computer-executable instructions, data structures, program modules and other data for the system . Software applications may be stored on the primary and secondary storage means ,  as well as the system memory .","The computing system  may operate in a networked environment using logical connections to one or more remote computers via a network adapter .","Input\/output devices  can be coupled to the system either directly or through intervening I\/O controllers. A user may enter commands and information into the system  through input devices such as a keyboard, pointing device, or other input devices (for example, microphone, joy stick, game pad, satellite dish, scanner, or the like). Output devices may include speakers, printers, etc. A display device  is also connected to system bus  via an interface, such as video adapter .","Referring to , an example GUI  is shown as a sighted person sees it. Many different artifacts or objects may be included in a GUI and only a few are illustrated in . The GUI  includes various components including: text , selection buttons , check box , disable buttons , drop down menus , a numerical input box , tab labels  to other layers, OK button , image , etc.","A screen reader may process the GUI  and some of the interface (for example, elements -) may not be read out because they are not accessible. Also, some portions of the GUI  may not be reachable using the keyboard.","The sighted accessibility tester activates the described testing mechanism which may run in the background and applies changes to their screen buffer. As such they see the GUI  of  when testing.","In , parts of the GUI  that would not be read out by a screen reader are not visible to the sighted tester and are shown as masked blacked out areas , , , . In this example illustration, the disable buttons  are masked , the numerical input box  is masked , the tab labels  to other layers are masked , and the image  is masked .","In addition, the check box  is inaccessible with the mouse and this is visually indicated  (as shown in hashed) as this would not be accessible via the keyboard.","An alternative would be to have the blacked out areas slightly transparent or visible via some form of key press, to enable a user to view the underlying content. This may be used to establish what is missing.","Referring to , a flow diagram  shows an embodiment of an aspect of the described method of software accessibility testing by building a GUI testing mask.","The software to be tested is launched . The test system behaves  like a screen reader, interacting with the operating system and obtaining  accessibility information on all the artifacts of the GUI.","It is determined  the content of the GUI for which text is not included and therefore would not be included in an audio output of a screen reader. A mask layer is built  to mask the GUI content that is not included in the audio output. The mask layer may also obscure  other visual cues, such as colour (by making it grayscale) and images (by only showing their alternative text, in a rectangle that represents the image).","The mask layer is applied  to the screen buffer and a modified screen displayed  which has been modified to hide the artifacts which have no accessible content provided.","Referring to , a flow diagram  shows an aspect of the described method of software accessibility testing of restricting pointer device access during testing.","The software to be tested is launched . Each screen and panel is navigated using standard navigation keys. This is done by injecting key presses into the keyboard buffer. Automated keyboard access analysis is carried out  on the GUI to establish which parts of the interface can be accessed using the keyboard. Any tab traps are also established . In addition, parts of the GUI reachable by keyboard shortcuts are also established .","The gathered information is built  into a store of the parts of the GUI reachable by keyboard use only. This information is converted  to a data file of artifacts of the GUI to which access will (or will not) be allowed by the pointer device.","The data file of artifacts of the GUI to which access is allowed\/not allowed by the pointer device is used to apply  limitations to the tester's pointer device using the pointer device management component.","In addition, a visual indication is provided  on the GUI of areas which are not accessible, including any tab traps.","Referring to , a flow diagram  shows an aspect of the described method of software accessibility testing of using the test system.","A tester is provided  with a GUI of software to be tested simulated as provided by a screen reader. The generated mask layer (or layers) is applied  to the screen buffer of the GUI to reflect the output of the screen reader. This restricts the GUI to only components that would have been audibly provided.","The method reads  in the data file of artifacts of the GUI to which access is allowed by the pointer device and a pointer device management component is restricted to access to the GUI corresponding to keyboard access.","The software to be tested is launched . The tester navigates  around the GUI using his pointer device, by positioning the pointer over screen artifacts and clicking. The method prevents  clicks from being actioned upon artifacts it has determined are unreachable. This could be done, for example, by intercepting mouse instructions as they are passed to the operating system. Optionally, some visual indicator is displayed  to the tester to let them know their click was prevented for accessibility reasons (for example, the cursor flashes in a distinctive way).","The tester evaluates  the GUI and access and flags up any difficulties. A report may be generated  including export of a relevant GUI screen shot.","Referring to , a flow diagram  shows an aspect of the described method of software accessibility testing using a web service.","A web server code serves  a page to a user. The method intercepts  the page source (either client or server side as described in relation to ). The method inspects  the source and ascertains which displayed artifacts can be reached via the keyboard and locates any artifacts which to not provide accessibility text (such as images with no alternative text). The method modifies  the source to alter the visual display properties of unreachable or unreadable artifacts (to blank them out for example). This can be done using a style sheet property or by removing links. The modified source is presented  by the web browser to an accessibility tester.","The described method helps both formal testing ensuring that a piece of software complies with accessibility checklists and also informal testing by allowing developers to quickly see if a GUI they are developing has accessibility problems.","The accessibility test software visually highlights unreachable or not accessible GUI widgets in either an interactive session or output information about the unreachable components as some kind of report.","The described testing system behaves like a screen reader, gaining access to the same information and APIs as a screen reader. The testing system performs its own comparison between artifacts on a screen and artifacts verbalized, and is not trained with expected output. The testing system represents the output to a tester by modifying the existing screen to be a screen representation matching what a blind user would hear. This is a powerful demonstration of the value of adding accessibility. In addition, the testing system modifies\/limits navigation normally achievable via a pointer device to be representative of what a blind user can reach via the keyboard.","The testing system enables aspects of the GUI that are not compliant with accessibility to be determined. Testers do not need to be skilled in accessibility testing, for example, they do not need to be expert users of screen reader software. The impact of accessibility violations is demonstrated visually and developers can see at a glance which aspects of the GUI need to be addressed.","The invention can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment, the invention is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.","The invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer usable or computer readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus or device.","The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory (CD-ROM), compact disk read\/write (CD-R\/W), and DVD.","Improvements and modifications can be made to the foregoing without departing from the scope of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments of the present invention will now be described, by way of example only, and with reference to the following drawings:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
