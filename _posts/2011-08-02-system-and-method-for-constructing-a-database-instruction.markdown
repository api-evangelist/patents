---
title: System and method for constructing a database instruction
abstract: A system and method of the subject technology automatically constructs a database instruction from a template instruction, including one or more variable tokens, and one or more document object representations, each including an object type and a user-generated parameter. The one or more variable tokens in the template instruction are substituted by the user-generated parameter of a corresponding document object representation when the type of a respective variable token is matched to the type of the corresponding document object representation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09020972&OS=09020972&RS=09020972
owner: Google Inc.
number: 09020972
owner_city: Mountain View
owner_country: US
publication_date: 20110802
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The subject technology relates generally to database systems, namely, dynamically constructing database instructions.","Data of all varieties is stored in databases. Access to data through present systems requires knowledge of database query languages, database Application Programming Interfaces (APIs), and\/or programming languages. Querying a database for information requires a database administrator or other person with programming abilities to construct a database instruction to access and query the database for information. In the case of software programs written to interact with a database, the addition of new information requires the system code to be modified to retrieve the new information.","A computer implemented method of constructing a database instruction is disclosed. In one aspect, the method includes a system for constructing a database instruction. In one aspect, the system includes a memory including machine-executable instructions operable, when executed, to perform as a virtual query generation engine. The system further includes a presentation interface, and one or more processors operable to receive data from the presentation interface, execute the machine-executable instructions, and read and write to the memory. In this regard, the one or more processors are further operable to receive a machine-readable document template including a template instruction, the template instruction including a command keyword, a variable descriptor token associated with the command keyword, and a target clause, wherein the variable descriptor token includes a token attribute defining a variable type, and to receive a document object representation including an object type and an user-generated parameter, match the object type and the token attribute, and generate the database instruction from the template instruction, the database instruction including a command parameter generated by substituting the variable descriptor token with the user generated parameter.","A machine-readable medium is also disclosed, the machine-readable medium having machine-executable instructions stored thereon, which when executed by a machine or computer cause the machine or computer to perform a method for constructing a database instruction. In one aspect, the method includes receiving a machine-readable document template including a template instruction, the template instruction including a command keyword, a variable descriptor token associated with the command keyword, and a target clause, wherein the variable descriptor token includes a token attribute defining a variable type. The method further includes receiving a document object representation including an object type and an user-generated parameter, matching the object type and the token attribute, and generating the database instruction from the template instruction, the database instruction including a command parameter generated by substituting the variable descriptor token with the user generated parameter.","It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description, wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized, the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects, all without departing from the scope of the subject technology. Accordingly, the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.","This application is related to U.S. patent application Ser. No. 13\/105,016, filed May 11, 2011, which is incorporated by reference herein in its entirety. The detailed description set forth below is intended as a description of various configurations of the subject technology and is not intended to represent the only configurations in which the subject technology may be practiced. The appended drawings are incorporated herein and constitute a part of the detailed description. The detailed description includes specific details for the purpose of providing a thorough understanding of the subject technology. However, it will be apparent to those skilled in the art that the subject technology may be practiced without these specific details. In some instances, well-known structures and components are shown in block diagram form in order to avoid obscuring the concepts of the subject technology. Like components are labeled with identical element numbers for ease of understanding.","Current systems employing complex database queries must be preprogrammed with a specific database query structure prior to execution. A significant change to the structure typically requires further programming and\/or recompilation of system code, especially in instances where the query is complex and\/or incorporates one or more aggregate functions. Thus, there is a need for a system that has the ability to dynamically create complex database queries, including queries using aggregate functions, without reengineering or recompilation of system code. The subject technology provides a computer implemented system and method for enabling an end-user with little or no knowledge of database programming to create a complex database query that includes parameters selected from variable values at the time of creation. For example, the system may enable a user to select several date ranges from a user interface at runtime to include in a query of a sum of revenues. The query may return the sum of revenues stored in a database based on the selected date ranges, or compare the sum of revenues from two different ranges.","In one example, a report may be generated providing revenue in a time period together with last year's revenue of the same period. Normally, a user would need to create a table with a column to hold the revenue for each year:",{"@attributes":{"id":"p-0015","num":"0014"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Database Table Including Daily Revenue Over Two Years"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["date","revenue_this_year","revenue_last_year"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Nov. 1, 2010","100","98"]},{"entry":["Nov. 2, 2010","105","99"]},{"entry":["Nov. 3, 2010","104","97"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Table 1 includes three columns, a first column for date, a second column for the present year's revenue, and a third column for the last year's revenue. To create a report, a database query may take the form:\n\n","The previously described method, however, may limit resources by requiring daily revenue data to be stored in a separate column for each calendar year. One solution may define a variable which represents a user entered value, and\/or a function that calculates a value automatically (for example, an aggregate function that calculates a \u201cquarter end date\u201d or \u201cquarter start date\u201d). In this manner, the table may be defined with only one revenue column:",{"@attributes":{"id":"p-0018","num":"0019"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Exemplary Database Table Including Daily "},{"entry":"Revenue Over Two Years"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"date","revenue"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Nov. 1, 2009","\u200298"]},{"entry":[{},"Nov. 2, 2009","\u200299"]},{"entry":[{},"Nov. 3, 2009","\u200297"]},{"entry":[{},". . .",". . ."]},{"entry":[{},"Nov. 1, 2010","100"]},{"entry":[{},"Nov. 2, 2010","105"]},{"entry":[{},"Nov. 3, 2010","104"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"Thus, from Table 2, the following query may be constructed:\n\n",{"@attributes":{"id":"p-0020","num":"0022"},"figref":"FIG. 1","b":["101","102","103","104","105","101","106","107","106","101","104","108","105","101","103"]},"One or more servers  may include and\/or use a collection of one or more text-based document instruction templates, each providing the general format of a database query. The templates may be stored, for example, in a memory of one or more servers  and\/or in database . In one aspect, one or more servers  are operable to receive user-generated data values from user interface  (for example, via a form POST or QUERY command).","A user-generated data value may be defined as any data value and\/or variable received from user interface , including as a result of direct input or selection from user  or from an element of user interface  without the knowledge of user . In one aspect, user interface  may include a template of multiple elements, including variable elements (for example, drop down lists, text boxes, radio buttons, and the like, that may be mapped to one or more variables or memory-resident document objects (for example, a document object variable , described below). One or more servers  may be operable to associate the user-generated data values with a designated instruction template to create the database instruction. One or more servers  may then transmit the database instruction to database server  for execution to perform the instruction (for example, query) on database . In other aspects, user  may not be a person, but, rather, may be an external system (for example, another server or computer system) and user interface  may include a web-service or like interface for receiving data from external system .","A database instruction generated by one or more servers  may be a text base query, such as a Structured Query Language (SQL) statement. Thus, even though user  may not understand SQL or any other database query language, based on inputs from the user and the database instruction template, the instruction may be constructed. The instruction can then be executed at database server  to retrieve from and\/or store data to database . The results of the instruction (for example, when representative of a database query) may then be received by database server  and transmitted to user-interface  via one or more servers .","A database instruction template includes the general structure of a database instruction and includes certain database language keywords. For example, a SQL-based instruction template may include the keywords \u201cSELECT,\u201d \u201cFROM,\u201d \u201cWHERE,\u201d \u201cGROUP BY,\u201d \u201cHAVING,\u201d and the like. The instruction template may further include various template-tokens and variables. The values may be assigned to variables based on the input received through user interface . The template tokens define certain aspects of the transformation of the instruction template to the generated instructions. A template token may be associated, for example, with one or more variables, and the transformation of a specific template token is based on the assignment of a value to the variables associated with a specific token.",{"@attributes":{"id":"p-0025","num":"0027"},"figref":["FIG. 2","FIG. 4"],"b":["201","202","201","101","202","202","202"],"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["<dimensions>\n        \n        ","<\/dimensions>","<measures>\n        \n        ","<\/measures>"]}}}},"The above exemplary XML file includes two dimension mappings. Sample Dimension 1 is associated with the identification \u201csample_dimension1\u201d and the database column \u201ccolumn_name1.\u201d Sample Dimension 2 is associated with the identification \u201csample_dimension2\u201d and the database column \u201ccolumn_name2.\u201d Similarly, Sample measure 1 is associated with the identification \u201cmeasure1\u201d and the database column \u201ccolumn_name3.\u201d Sample measure 2 is associated with the identification \u201cmeasure2\u201d and the database column \u201ccolumn_measure4.\u201d","In some aspects, additional information concerning the data model of database  may be specified within the metadata mapping. For example, data constraints may be specified with respect to the various dimensions and measures. Constraint data such as the acceptable range of data in a particular dimension may also be specified. Additionally, the data type of each column may be specified, which may also be used as a data constraint. This constraint data may be used to validate user input received prior to generating the database report.","One exemplary instruction template  which may be used in conjunction with the above metadata mapping, may include:\n\n","This exemplary instruction template example includes template tokens $COLUMN_SPEC, $COLUMN_ALIAS, $RESTRICTION, and $OPTIONAL. The instruction template also includes variables $sample_measure1, $sample_measure2, $sample_dimension1, and $sample_dimension2.","$COLUMN_SPEC is a descriptor token and defines a measure or dimension within a report. For example, with respect to the text $COLUMN_SPEC:Ssample_dimension1, presented above, if user  has selected a database reference associated with $sample_dimension1, the transformation of the instruction template will replace the text with the column name associated with the $sample_dimension1. Thus, as defined by the above date metadata mappings, $COLUMN_SPEC:$sample_dimension1 may be replaced with the column name \u201ccolumn_name1.\u201d In further aspects, the metadata mapping may also assign an alias identifier to the column. If an alias identifier is assigned, the text $COLUMN_SPEC:$sample_dimension1, presented may be transformed to \u201ccolumn_name AS column_name_alias.\u201d If the variable $sample_dimension1is not selected, the text $COLUMN_SPEC:$sample_dimension1 may be omitted from the database instruction when the instruction template is transformed.","With respect to the token $COLUMN_SPEC, assignment of a value to an associated variable (for example, $sample_dimension1) may include a simple binary value to indicate whether the user desires that dimension or measure included in the resulting instructions. Thus, the values assigned may include, for example, \u201ctrue\u201d or \u201cfalse,\u201d \u201c1\u201d or \u201c0,\u201d or null or any non-null value.","The token $COLUMN_ALIAS refers to the alias of a column, and may be used, for example, in a SQL \u201cGROUP BY\u201d statement. Transformation of the instruction template to the database instruction replaces the text \u201c$COLUMN_ALIAS:$variable\u201d with the alias of the column defined in the metadata mapping. For example, $COLUMN_ALIAS:$sample_dimension1 may be replaced by \u201csample_dimension1.\u201d","$RESTRICTION is used to define a measure condition or dimension condition. The $RESTRICTION token may be associated with a default value to ensure the correctness of a Boolean expression in the database query. Thus, the $RESTRICTION token expression is typically written as $RESTRICTION:DEFAULT=TRUE:$variable or $RESTRICTION:DEFAULT=FALSE:$variable. If a value (for example, a string) is assigned to the meta data mapping associated with $variable, the $RESTRICTION token expression may be re-written during transformation based on the value assigned to the meta data mapping. If no value is assigned to $variable, the $RESTRICTION token express may be re-written during transformation as the default value.","For example, with reference to the above metadata mapping, if a value of \u201cis not \u2018X\u2019\u201d is assigned to the metadata mapping associated with $sample_dimension1, the text of $RESTRICTION:DEFAULT=TRUE:$sample_dimension1 will be replaced with the column name associated with $sample_dimension1 (for example, column_name1) and the value assigned to its respective metadata mapping (for example, \u201cis not \u2018X\u2019\u201d). However, with respect to the text $RESTRICTION:DEFAULT=TRUE:$sample_dimension2, if no value is assigned to $sample_dimension2, the text is replaced with the default value (for example, \u201cTRUE\u201d). Thus, if a user is only concerned with sample_dimension1 and is not concerned with sample_dimension2 (for example, no value is assigned to its respective metadata mapping), the \u201cWHERE\u201d expression of the above database query template will evaluate correctly because the restriction concerning sample_dimension2 will always evaluate as TRUE.","In some aspects, a $RESTRICTION token expression may also be assigned an alias. The token $RESTRICTION_ALIAS may be used to refer to that alias in a manner similar to that discussed above with respect to $COLUMN_ALIAS.","In further aspects, an $OPTIONAL token may be used to define an instruction template section. For example, a set of instruction template statements may be offset by a beginning (for example, $OPTIONAL:BEGIN) and an ending (for example, $OPTIONAL:END) to define an optional template section. If the template-tokens within the template-section are not selected (for example, values are not assigned to the variables associated with the template tokens), the template section may be omitted from the database instruction during transformation of instruction template . If any of the tokens within the template section have non-null values assigned to an associated variable, the template section may not be omitted.","In the previously described example, the database query template will be transformed to the following SQL query, which can then be issued to the local data store:\n\n","In one aspect, an instruction file (for example, an XML file) may store the metadata mapping and\/or may also store instruction template . For example, as illustrated above, the database query template may be identified as a bit_query element of an XML file (for example, the database query template is set off by <bit_query> opening tag and <\/bit_query> closing tag).","In a further aspect, a file may further include data regarding how to connect to the database. For example, the file may include the following information:\n\n","By incorporating the metadata mapping, database query template, and database connection information, an instruction file may encapsulate all the information needed to generate a report. One or more servers  may not require any intrinsic information about the database or the report, and may only need to understand and interpret the data contained in the instruction file. Thus, the execution of the database instruction (for example, the query generating the report) is completely abstracted from the generation of the database report. A database programmer can thereby expand report options available and databases available to an end user simply by modifying the instruction file and distributing the file to one or more servers . A database programmer may not be required to rewrite or modify any of the underlying infrastructure used to interpret the instruction template.","In one aspect, a $VARIABLE template token may also be included in the instruction template as a variable parameter:\n\n","With brief reference to , during runtime, user  may interact with user interface  to input one or more user-generated values. In one aspect, based on the user-generated value, a document object variable(s)  may be constructed at run-time by an application executed on one or more servers . In one aspect, object variable  may be generated by a presentation layer (for example, by JavaScript or server-side scripting) of programming code executed by one or more servers . In another aspect, object variable  may be generated from a business logic layer or the like. In a further aspect, document object variable  may be constructed using a language-independent convention for representing and interacting with objects in HTML, XHTML and XML documents (for example, a Document Object Model). For example, document object variable  may be defined in XML according to the following schema:\n\n","In one aspect, document object variable  includes an object type (for example, corresponding to attribute name=\u201ctype\u201d) and a user-generated value (for example, generated at user-interface ). Document object variable  is received  by query generation engine  from user interface . The subject technology may construct a database instruction (for example, a query) by associating one or more document object variables  with instruction template . In this regard, the user-generated values within the document object variables are substituted into to the database instruction for each variable token having a :variable_type equal to the object type of the substituted document object variable.","For example, query generation engine  may retrieve instruction template  and build a database query from template , substituting each variable token ($VARIABLE) with a user-generated value from a document object variable  having an object type that matches the token's :variable_type attribute. In this regard, multiple document object variables may be provided at runtime (for example, generated via the user interface) to accommodate several variables in an instruction template , all without any change to system code. The application then provides  the generated query to a database API  (for example, ODBC), and API  may then be used to query database .",{"@attributes":{"id":"p-0045","num":"0143"},"figref":["FIG. 3","FIG. 2"],"b":["301","302","303","304"]},"In one example, a computer system (for example, one or more servers  of ) may include a memory having machine-executable instructions stored thereon, which when executed by a machine or computer cause the machine or computer to perform as a virtual instruction generation engine . The system may include one or more processors (for example, processor  of ) operable to receive data from user interface , execute the machine-executable instructions, and read and write to the memory. The one or more processors may further be operable to receive a machine-readable document template , including a template instruction (for example, representative of a database instruction), the template instruction including a command keyword and a variable descriptor token (for example, previously described $VARIABLE) associated with the command keyword. The variable descriptor token may include a token attribute defining a variable type (for example, previously described :variable type). As previously described, the template instruction may further include a target clause. The one or more processors may also be operable to receive a document object representation  including the object type and an user-generated parameter received from user-interface , and to match the object type to a respective token attribute. In one aspect, the one or more processors may be operable to generate a database instruction from the template instruction. In this manner, the database instruction may include a command parameter generated by substituting the variable descriptor token with the user generated parameter.","In other aspects, the one or more processors may be operable to receive the user-generated parameter from user interface  and construct document object representation  in response to receiving the user-generated parameter, and, in accordance with query generation engine , process template  and the document object representation  to substitute the variable descriptor token with the user generated parameter. Once the database instruction has been constructed, the one or more processors may be operable to provide the database instruction to database server  and to receive a response from database server .","In some aspects, the command keyword may be a SELECT command wherein the variable descriptor token operates as a placeholder for a parameter of the SELECT command. Likewise, the target clause may include a FROM command. In some aspects, the template instruction may include a database query statement, and, in other aspects, the command keyword may defines an operation of the database query statement. The template instruction may further include more than one variable descriptor token. In this regard, a respective user-generated parameter may be substituted into the database query statement for each variable descriptor token having a token attribute equal to the object type of document object representation .","The database instruction may also include an aggregate function (for example, a Sum( ) or date( ) command or the like). More specifically, instruction template  may include a generalized query statement (for example, \u2018SELECT . . . FROM\u2019) which may also include, as a query parameter, an aggregate function (for example, sum( )). Accordingly, the aggregate function may further include the previously described command parameter of step . In some aspects, the template instruction may include more than one variable descriptor token. For example, a first descriptor token may include a first attribute defining a first date, and a second descriptor token may include a second attribute defining a second date. In this manner, a first object representation and a second object representation may be provided, the first object representation including a first user-generated date and a first object type representative of the first date, and a second object representation including a second user-generated date and a second object type representative of the second date (for example, the document object representation is one of the first and second object representations). Accordingly, generating the database instruction from the template instruction may include substituting the first descriptor token with the first user-generated date and substituting the second descriptor token with the second user-generated date.",{"@attributes":{"id":"p-0050","num":"0148"},"figref":["FIG. 4","FIG. 4"],"b":["400","101","102","102","110","401","402","403","404","405","406","401","407","406","400"]},"Processor  may be operable to execute code or instructions to perform the operations and functionality described herein, manage request flow and address mappings, and to perform calculations and generate commands. Processor  is configured to monitor and control the operation of the components in server . The processor may be a general-purpose microprocessor, a microcontroller, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a programmable logic device (PLD), a controller, a state machine, gated logic, discrete hardware components, or a combination of the foregoing. One or more sequences of instructions may be stored as firmware on a ROM within processor . Likewise, one or more sequences of instructions may be software stored and read from system memory , ROM , or received from a storage medium  (for example, via I\/O interface ). ROM , system memory , and storage medium  represent examples of machine or computer readable media on which instructions\/code may be executable by processor . Machine or computer readable media may generally refer to any medium or media used to provide instructions to processor , including both volatile media, such as dynamic memory used for system memory  or for buffers within processor , and non-volatile media, such as electronic media, optical media, and magnetic media.","In some aspects, processor  is configured to communicate with one or more external devices (for example, via I\/O interface ). Processor  is further configured to read data stored in system memory  and\/or storage medium  and to transfer the read data to the one or more external devices in response to a request from the one or more external devices. The read data may include one or more web pages and\/or other software presentation to be rendered on the one or more external devices. The one or more external devices may include a computing system such as a personal computer, a server, a workstation, a laptop computer, PDA, smart phone, and the like. Alternatively, one or more external devices may include an electronic device such as a digital camera, a digital audio player, a digital video recorder, and the like.","In some aspects, system memory  represents volatile memory used to temporarily store data and information used to manage server . According to one aspect of the subject technology, system memory  is random access memory (RAM) such as double data rate (DDR) RAM. Other types of RAM also may be used to implement system memory . Memory  may be implemented using a single RAM module or multiple RAM modules. While system memory  is depicted as being part of server , those skilled in the art will recognize that system memory  may be separate from server  without departing from the scope of the subject technology. Alternatively, system memory  may be a non-volatile memory such as a magnetic disk, flash memory, peripheral SSD, and the like.","I\/O interface  may be configured to be coupled to one or more external devices, to receive data from the one or more external devices and to send data to the one or more external devices. I\/O interface  may include both electrical and physical connections for operably coupling I\/O interface  to processor , for example, via the bus . I\/O interface  is configured to communicate data, addresses, and control signals between the internal components attached to bus  (for example, processor ) and one or more external devices (for example, a hard drive). I\/O interface  may be configured to implement a standard interface, such as Serial-Attached SCSI (SAS), Fiber Channel interface, PCI Express (PCIe), SATA, USB, and the like. I\/O interface  may be configured to implement only one interface. Alternatively, I\/O interface  may be configured to implement multiple interfaces, which are individually selectable using a configuration parameter selected by a user or programmed at the time of assembly. I\/O interface  may include one or more buffers for buffering transmissions between one or more external devices and bus  and\/or the internal devices operably attached thereto.","Those of skill in the art would appreciate that the various illustrative blocks, modules, elements, components, methods, and algorithms described herein may be implemented as electronic hardware, computer software, or combinations of both. To illustrate this interchangeability of hardware and software, various illustrative blocks, modules, elements, components, methods, and algorithms have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application. Various components and blocks may be arranged differently (for example, arranged in a different order, or partitioned in a different way) all without departing from the scope of the subject technology.","It is understood that the specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. Based upon design preferences, it is understood that the specific order or hierarchy of steps in the processes may be rearranged. Some of the steps may be performed simultaneously. The accompanying method claims present elements of the various steps in a sample order, and are not meant to be limited to the specific order or hierarchy presented.","The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. The previous description provides various examples of the subject technology, and the subject technology is not limited to these examples. Various modifications to these aspects will be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other aspects. Thus, the claims are not intended to be limited to the aspects shown herein, but is to be accorded the full scope consistent with the language claims, wherein reference to an element in the singular is not intended to mean \u201cone and only one\u201d unless specifically so stated, but rather \u201cone or more.\u201d Unless specifically stated otherwise, the term \u201csome\u201d refers to one or more. Pronouns in the masculine (for example, his) include the feminine and neuter gender (for example, her and its) and vice versa. Headings and subheadings, if any, are used for convenience only and do not limit the invention.","The predicate words \u201cconfigured to\u201d, \u201coperable to\u201d, and \u201cprogrammed to\u201d do not imply any particular tangible or intangible modification of a subject, but, rather, are intended to be used interchangeably. For example, a processor configured to monitor and control an operation or a component may also mean the processor being programmed to monitor and control the operation or the processor being operable to monitor and control the operation. Likewise, a processor configured to execute code may be construed as a processor programmed to execute code or operable to execute code.","A phrase such as an \u201caspect\u201d does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations, or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an \u201cembodiment\u201d does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments, or one or more embodiments. An embodiment may provide one or more examples. A phrase such as an \u201cembodiment\u201d may refer to one or more embodiments and vice versa. A phrase such as a \u201cconfiguration\u201d does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations, or one or more configurations. A configuration may provide one or more examples. A phrase such as a \u201cconfiguration\u201d may refer to one or more configurations and vice versa.","The word \u201cexemplary\u201d is used herein to mean \u201cserving as an example or illustration.\u201d Any aspect or design described herein as \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs.","All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover, nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed under the provisions of 35 U.S.C. \u00a7112, sixth paragraph, unless the element is expressly recited using the phrase \u201cmeans for\u201d or, in the case of a method claim, the element is recited using the phrase \u201cstep for.\u201d Furthermore, to the extent that the term \u201cinclude,\u201d \u201chave,\u201d or the like is used in the description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprise\u201d as \u201ccomprise\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A detailed description will be made with reference to the accompanying drawings:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
