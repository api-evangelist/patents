---
title: Asynchronous communication in web applications
abstract: An interactive web application framework allows a user to define user interface and logic of a web application and publish the web application. A first web application system can receive a message from a browser through a second web application system. The message can including metadata indicating that the second web application system received the data from the browser of a user device using a first connection between the second web application system and the browser. The first web application system can send the data to a database server as a request, and receive a response from the database server. Upon receiving the response, the first web application system can cause the second web application system to create a second connection between the second web application system and the browser based on the metadata. The response can be sent to the browser through the second connection asynchronously with the message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838808&OS=08838808&RS=08838808
owner: Apple Inc.
number: 08838808
owner_city: Cupertino
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Architecture","Exemplary Notification-Based Request Processing","Asynchronous Communication Layer","Smart Messages","Communication Between a Client and a Web Server","State Management","Exemplary Web Application User Interface","Exemplary Web Application Processes","Exemplary System Architecture"],"p":["This disclosure relates generally to database-backed web applications.","A web application can include an application program executing at a web site on a server, and accessible remotely from a user device through a communications network. The web site often includes a web server, an application server, and a database server. The web server can be configured to receive requests from a user device. The application server can be configured to perform logic operations of the web application. The database server can provide data for the web application.","The web application can be accessed through a software program (\u201cweb browser\u201d or simply \u201cbrowser\u201d) executing on the user device. The browser can be a client program configured to make a request to the web site, wait for a response from the web site, and render the response upon receiving the response.","Methods, program products, and systems of a notification-based web application framework are disclosed. A web application system implementing a notification-based web application framework can allow a user to manipulate not only data, but also logic and user interface for a web application. The system can create or modify the web application based on user input received through a browser, and publish the created or modified web application to other browsers. By applying asynchronous communication techniques, the system can push updates of data, user interface, and logic of the web application made in a first browser to a second browser without receiving a specific request for the updates from the second browser.","The disclosed techniques include an architecture that can bring behaviors typical of a desktop application to the web. The architecture can expose dynamic content stored in a database to a browser. The dynamic content stored in the database can include custom look and feel and application logic, which are conventionally built into an application server. The architecture utilizes multiple web application systems working in concert to facilitate communication between a web server and a database server. The multiple web application systems can be configured to allow asynchronous and two-way communication such that, for example, a server can initiate communication to a client and make requests to the client. The roles of \u201cclient\u201d and \u201cserver\u201d can be interchangeable.","In some implementations, a first web application system can receive database data from a database server. The first web application system can be optimized to communicate with the database server. The first web application system can process the received database data to generate publication data. A second web publication system can receive the publication data from the first web application system. The second web application system can be optimized to communicate with a web server. The second web application system can process the publication data to generate web data. The second web application system can send the generated web data to a web server for pushing to a web browser.","In some implementations, a web application system can receive a database notification from a database server. The database notification can indicate that an update of a user interface item has occurred in a database. The database notification can be generated from the database server in response to a request from a user device. The user device can include a browser. The request can be a request to receive information when a state change occurs at the database server. The web application system can initiate communication with the user device without responding to a specific request requesting the update from the user device. The web application system can generate instructions for refreshing the user interface item in the browser. The web application system can push the instructions to the user device for refreshing the user interface item as displayed in the browser according to the update in the database.","In some implementations, a first web application system can receive a message originated from a browser through a second web application system. The message can include data and metadata. The metadata can indicate that the second web application system received the data from the browser of a user system using a first connection between the second web application system and the browser. The first web application system can send the data to a database server as a request, and receiving a response from the database server. The first web application system, upon receiving the response, can cause the second web application system to create a second connection between the second web application system and the browser based on the metadata. The first web application system can send the response to the browser through the second connection asynchronously with the message.","The techniques described in this specification can be implemented to achieve the following exemplary advantages. A user interface item or logic operations of a web application can be edited in a browser environment. Thus, the browser can act as an interface of an integrated development environment (IDE). A user can use a browser as an integrated environment for data browsing, database design, as well as user interface design and business logic development. For example, a web application user browsing database data with a browser can change, on the fly, the way in which the data are laid out, the behavior of a user interface item (e.g., a button displayed in the browser), or the work flow of the web application. In addition, the techniques described can enable a collaborative work environment, where multiple people can work on a same layout, database schema, user interface system, and business logic.","The details of one or more implementations of the notification-based web application framework are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the notification-based web application framework will become apparent from the description, the drawings, and the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["102","104","106","102","104","106","108","110"]},"Web server  can include one or more computers programmed to perform operations of processing requests from browser  and delivering content to browser . Web server  can include a hypertext transfer protocol (HTTP) request handler  configured to receive a request from browser . HTTP request handler  can process the received request and identify one or more web application inputs from the received request. Web server  can provide the web application inputs to application server .","Application server  can include one or more computers programmed to generate user interface and conduct application logic operations of the web application. Application server  can include user interface manager  and logic component . User interface manager  can be a component of application server  configured to generate, configure, and manage user interface items (e.g., buttons, text boxes, or widgets) for display in browser . Logic component  can be a software component of application server  configured to apply application logic to link the user interface items with data and define and manage workflow of the web application. For example, when user interface manager  of application server  receives an input indicating that a user clicked on a widget in browser , user interface manager  can send the information to logic component . Logic component  of application server  can cause certain data to be retrieved or updated and sent to browser .","Database server  can include one or more computers programmed to perform operations of managing database . Database  can store data locally or remotely from database server , and manage the data using a relational, object oriented, or flat file paradigm. Database server  can receive data retrieval requests from application server  and provide the data in response, or receive data update requests from application server  and update the data in response.","In a conventional system for a database backed web application, communication between each component is typically synchronous. For example, when browser  sends a request to web server  through a connection, the connection becomes blocked. Browser  can wait for a response from web server  until a response is received at browser  or until the connection is otherwise terminated (e.g., closed by user or timed out). During the time the connection is blocked, interactions specific to the request and the response can occur between web server , application server , and database server . The communication between web server , application server , and database server  can be similarly blocked.","In addition, in a conventional system for a database backed web application, the roles of \u201cclient\u201d and \u201cserver\u201d are typically clearly designated. For example, browser  can be a client of web server , which can be a client of application server , which, in turn, can be a client of database server . Likewise, database server  can be a server of application server , which can be a server of web server , which, in turn, can be a server of browser .",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 2A","b":"220"},"An event notification (or simply \u201cnotification\u201d) can include a message sent from a sender to a receiver. The sender can send the message at any time, e.g., upon a state change at the sender. The message is operable to trigger an action at the receiver. A system implementing the notification-based web application framework can include web server , web-side application server , database-side application server , and database server . Web server , web-side application server , database-side application server , and database server  can be one or more computers programmed to provide services to an interaction-enabled client  through communications network . Client  can be a web 2.0 client. Client  can include, for example, a script (e.g., PHP script) or a browser having one or more plugin components for providing interactive and site-specific content. Communications network  can include a wired or wireless, wide area, local area, or personal area data network.","Web server  can include a software component executing on one or more computers and configured to cause the one or more computers to perform operations of delivering content to client . Web server  can include HTTP request handler  and IWP interface  configured to interface between web server  and web-side application server . IWP interface  can implement an IWP application programming interface (API). IWP interface  can be programmed to send one or more web application inputs identified from an HTTP request received by HTTP request handler  to web-side application server . The web application inputs can include requests to web-side application server .","Web-side application server  can include a software component executing on one or more computers and configured to cause the one or more computers to serve as a communication link between web server  and database-side application server . Web-side application server  can process the web application inputs from web server  as well as content from database-side application server . Web-side application server  can process web application inputs formatted according to XML Metadata Interchange (XMI) standards or other communication standards. Web-side application server  can handle communication including requests for data updates, requests for rendering custom user interface, and notifications from either web server  or database-side application server . The operations of processing notifications will be described in further details below in reference to . Web-side application server  can be a server based on C, C++, Java, or other programming languages.","Database-side application server  can be a software component executing on one or more computers and configured to cause the one or more computers to serve as an abstraction layer of database server . Database-side application server  can be a server based on C, C++, Java, or other programming languages. Database-side application server  can communicate with web-side application server  through asynchronous communication layer . Asynchronous communication layer  can include hardware and software configured to facilitate asynchronous communication between servers that are programmed in different languages, for example, between web-side application server  programmed in Java and database-side application server  programmed in C++.","Database server  can include one or more computers programmed to perform operations of managing database . Database  can store data locally or remotely from database server , and manage the data under a relational, object oriented, or flat file paradigm. Database  can store smart data . Smart data  can include conventional data items (e.g., numerical values, strings, or triggers) and active data items relating to user interface or logic.","Web-side application server , database-side application server , and asynchronous communication layer  can be designated as an IWP bridge. At least a portion of the IWP bridge, as well as at least a portion of web server  and client , can be implemented in a rich internet application (RIA) framework such as Vaadin\u2122 or Wicket\u2122.","The IWP bridge is configured to facilitate asynchronous communication between client  and database server  using notifications. The IWP bridge can manage blocking or unblocking of communication between client  and database server . When client  sends a request for a response through a connection, each of web server , web-side application server , database-side application server , and database server  can communicate with each other using event notifications. In addition, web server  can send to client  an event notification as a response to the request.","The event notification can be sent through a new connection, which can be initiated by web server . The IWP bridge can use an event-based communication paradigm that is different from a conventional client-server communication system, where a response is typically sent from a server to a client on a same connection through which a request is received. In addition, using the event-based communication paradigm, the IWP bridge can permit either client  or database server  to initiate communication by sending a request. The roles of \u201cserver\u201d and \u201cclient\u201d can be reversed. A response to a request can come at a later point of time through the new connection instead of coming over the same connection where the request is initiated.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2B","FIG. 2A"]},"Database  can store user interface definition , business logic , and passive content . User interface definition can include specifications (e.g., types, shapes, and locations) of one or more user interface items. Business logic can include scripts, data describing a relationship between user interface items and passive data, and data describing a relationship between user interface items and the scripts. Passive data can include text, numerical values, and multimedia data. The specifications of user interface definition can be stored in XML, text, or binary format.","Database-side application server  can communicate with database server  using an event-based communication paradigm. The event-based communication paradigm can be a cross-platform and cross-language communication paradigm where information is exchanged between two entities using an event notification. The communication can be facilitated using a common object request broker architecture (CORBA).","Database-side application server  can include state management subsystem  and database interface . State management subsystem  can include a software component configured to cause a computer of the system to detect, track, and manage states of various components of the system. The operations of state management system  will be described in further detail below in reference to . Database interface  can include a software component configured to server as an additional API layer to a database specific API (if any) that wraps around the database specific API. Database interface  can facilitate communication between the IWP bridge and multiple types of databases or databases having different database specific APIs.","Asynchronous communication layer  can be configured to manage asynchronous communications between web-side application server  and database-side application server . Managing the asynchronous communications can include managing the flow of event notifications using dispatchers and queues. The asynchronous communications can facilitate event notification between web-side application server  and database-side application server . The asynchronous communications are represented using dashed arrows in . The asynchronous communications can be implemented using XMI requests via Apache JServ protocol (AJP).","Web-side application server  can include web publishing engine  and interactive application module . Web publishing engine  can be a software component of web-side application server  configured to cause one or more computers to perform operations of processing event notifications to and from database-side application server . Interactive application module  can be a software component of web-side application server  configured to cause one or more computers to perform operations of communicating with IWP interface  of web server . Further details of interactions between components, including request processing based on notification, are described below in reference to .","Communication  between web server  and client  can include an HTTP or HTTPS request, an RIA call through HTTP or HTTPS, or and HTTP or HTTPS FMI\/XML request. Communication  can be facilitated using JavaScript Object Notation (JSON) data interchange format.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 3","b":["228","228","228","228"]},"The system can draw the user interface item at client , e.g., in a browser. When the user connects to database  and opens database , database server  can identify a layout, e.g., \u201cLayout A\u201d that includes definitions of one or more user interface items and specifies a \u201clook and feel\u201d specific to a web application. The layout can be stored in the database. The system can generate user interface (UI) definition  according to the layout. UI definition  can include a type, size, shape, and function of a user interface item, and can be implemented in any format, including markup language (e.g., XML), YAML, JSON, or free-style text.","At stage , database-side application server  can receive UI definition  from database server . Database-side application server  can generate notification  based on UI definition . Notification  can include a UI definition document (e.g., an XML document) that can be recognized and processed by web-side application server .","At stage , web-side application server  can receive notification . Web-side application server  can parse the UI definition document in notification . Based on result of the parsing, at stage , web-side application server  can make a call to exemplary function foo( ) to web server . The call to function foo( ) can cause web server  to instruct the browser to draw a user interface item (e.g., a button). At stage , web server  can instruct the browser to draw the user interface item and present the user interface item for display. Each user interface item can be associated with a unique identifier. When a user interacts with the user interface item, the identifier can facilitate identification of the user interface item by various servers.","The browser can now display the user interface item, which is interactive. In this example, the user interface item can be defined by or associated with a custom logic script configured to switch the user to a different layout, \u201cLayout B\u201d when clicked. The browser can receive a user input for interacting with the user interface item (e.g., a click on the button). At stage , the browser can send a request to web server . The request can include identifier  of the user interface item.","Upon receiving the response, at stage , web server  can send identifier  to web-side application server  in notification . In response, at stage , web-side application server  can send notification  to database-side application server . Notification  can include an exemplary function call bar(ID) in which identifier  is a parameter. By sending notification , web-side application server  can notify database-side application server  the occurrence of the user action on the user interface item.","Upon receiving notification , at stage , database-side application server  can send notification  to database server . Notification  is operable to inform database server  that the user interacted with the user interface item and a custom logic associated with the user interface item should apply. Notification  can include the identifier  and a reference to a script for applying Layout B. The script can be stored in database .","Database server  can execute the script and switch to Layout B. Database server  can, at stage , post notification . Notification  can include a message indicating that a state of database server  has changed. Notification  can have a label, e.g., \u201clayout_change\u201d that can identify a type of state change that triggered notification . Database server  can post multiple notifications about the state change.","Database-side application server  can receive notification . Upon reception of notification , database-side application server  can optimize, simplify, or translate notification . For example, database-side application server  can remove a duplicate notification, remove a first notification when a second notification makes the first notification obsolete, or translate a notification from a first format to a second format. Additionally, database-side application server  can generate another notification, e.g., notification , for sending to web-side application server . Notification  can include optimized, simplified, or translated notification .","At stage , web-side application server  can receive notification . Upon receiving notification , web-side application server  can changes the user's current layout from Layout A to Layout B. Web-side application server  can gather most recent information on configurations of Layout B. At stage , web-side application server  can make an RIA call (e.g., foo2( )) to web server  to draw a user interface according to Layout B. At stage , web server  can send the newly drawn user interface to the browser using push technology. The operations including stages  through , which are based on notifications, can make each of client  and database  unblocked while one request is processed. Accordingly, while the request is processed, each of client  and database  can be free to process other requests.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 4","b":["252","252","402","404","406"]},"Request dispatcher  is a software component of asynchronous communication layer  configured to cause one or more computers to perform operations of managing requests from client  received through web server  and web-side application server . Request dispatcher  can receive the requests, determine a priority of each request, and send the requests to inter-process communication layer  based on the priorities. Request dispatcher  can facilitate asynchronous communication. An order in which request dispatcher  sends requests to inter-process communication layer  can be based on the priorities, in addition or as an alternative to a temporal order in which request dispatcher  receives the request.","Inter-process communication layer  is a software component of asynchronous communication layer  configured to cause one or more computers to perform operations to facilitate cross-language communication between processes or services that are based on different languages. Inter-process communication layer  can include connection pool  for managing multiple connections between asynchronous communication layer  and database-side application server . Inter-process communication layer  can include other components that will be described in further detail below.","In some modes of communications, inter-process communication layer  can receive a request from and send a response to web-side application server  through connection . Connection  can be utilized to facilitate synchronous communication when synchronous communication is more effective. In some implementations, inter-process communication layer  can be implemented using Apache Thrift\u2122 technologies.","Event priority queue  is a component of asynchronous communication layer  programmed to perform operations of managing event notifications from database server  received through database-side application server  and inter-process communication layer . Event priority queue  can include a queue data structure configured to store event notifications and a managing component configured to manage the event notifications stored in the storage structure. The managing component of event priority queue  can receive the event notifications, determine a priority of each event notification, entering the event notifications into the queue data structure based on the priorities, and send the event notifications to web-side application server  from a head of the queue data structure. Event priority queue  can facilitate asynchronous communication. An order in which event priority queue  sends event notifications to web-side application server can be based on the priorities, in addition or as an alternative to a temporal order in which event priority queue  receives the event notifications.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 5","b":["506","502","504"]},"The framework described in this specification has a duality characteristic where each component of the framework can act as both a server and a client of another component, depending on who initiated a communication. Accordingly, each of sender  and receiver  can include any of client , web server , web-side application server , database-side application server , or database server .","An event notification from sender  to receiver  can include smart message . Smart message  can include metadata  and data . Metadata  can include information that provides instructions to receiver  as to which action can be performed regarding the event notification. Data  can include information that sender  requests to send to receiver . For example, data  can include a request, a response, or any other information to be passed by the event notification.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 6","b":["506","506","502","504"]},"Smart message  can include metadata  and data . Metadata  can include contextual information and meta information. Contextual information can include information generated by a sender of smart message . Contextual information can include user context . User context  can include user-specific information and application relation information. The user-specific information can include a user identifier and a user's privilege settings. The application relation information can include an application identifier identifying the web application currently being executed or modified, a session identifier identifying a current session, or both.","Meta information can include user interface object identifier . When smart message  carries data  that are related to a user interface item, user interface object identifier  can carry an identifier unique to the user interface item. The user interface item can be an item that causes smart message  to be sent (e.g., a button clicked), or an item that smart message  is designated to modify (e.g., a button to be drawn or changed).","Meta information can include model field identifier . A user interface item (e.g., one having a type \u201cfield\u201d) can map to a data field (e.g., a column in a table) in a data model of a database. Model field identifier  can include an identifier of the data field.","Meta information can include priority . Priority  can be a value indicating the priority according to which a receiver is responsible for processing smart message . In some implementations, the receiver can enter smart message  into a queue based on priority  or on a combination of priority  and a timestamp. A higher priority can cause a smart message to be entered at a position closer to the head of the queue.","Meta information can include message type . Message type  can be a value indicating a protocol-specific type of smart message . Based on message type , a receiver can perform type-specific actions to process smart message . Value of message type  (e.g., \u201csynchronous\u201d or \u201casynchronous\u201d) can include an indicator on whether smart message  has a synchronous type. The \u201csynchronous\u201d value of message type  can indicate to the receiver that the receiver is responsible for processing smart message  before processing a next smart message, and that the sender is blocked (waiting until processing is complete). The \u201casynchronous\u201d value of message type  can indicate to the receiver that the receiver can process smart message  at a later point in time, and that the sender is not blocked.",{"@attributes":{"id":"p-0077","num":"0076"},"figref":"FIG. 7","b":["228","242","228","702","702","228","242","702"]},"Web server  can include HTTP request handler , which can include server side RIA component  that extends functions of a conventional HTTP request handler such that HTTP request handler  can send a request to client . Working in coordination, browser side RIA component  and server side RIA component  can facilitate a first mode of communication where client  sends request  to web server , and receives response  from web server . In addition, browser side RIA component  and server side RIA component  can facilitate a second mode of communication where web server  sends request  to client , and receives response  from client . Request  and response  can be in a descriptive language such as XML, Ajax, or user interface description language (UIDL).","The first and second modes of communication can allow web server  (and other servers in the system) to have control of client . For example, web server  can be configured to drive a browser, include pausing, resuming, sending user interface to, and requesting response from, a dynamic component executing in the browser. From a user's perspective, client  can act as a server that can respond to a request from web server  and send state information to the web server .",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 8A","b":["228","248"]},"In a synchronous communication mode, web-side application server , as one of the intermediate components, can initiate communication with database-side application server , as another intermediate component, upon receiving a request from client  through web server . Web-side application server  can open connection  to database-side application server . Web-side application server  can generate smart message . Smart message  can have a format as described above in reference to . Smart message  can have a \u201csynchronous\u201d message type. Through connection  managed by an inter-process communication layer (e.g., inter-process communication layer as described above in reference to ), web-side application server  can send smart message  to database-side application server . Web-side application server  can then waits for a response from database-side application server .","While web-side application server  waits for a response, client  can be blocked from sending another request. Database-side application server  and database server  can perform operations based on data in smart message  and send a response through connection . Upon receiving the response from connection , web-side application server  can send a response to client  and unblock client . Client , now unblocked, can send another request.","In an asynchronous communication mode, web-side application server  can make dispatch request  upon receiving a client-initiated request. Web-side application server  can send dispatch request  to request dispatcher . Request dispatcher  can open connection  to database-side application server . Request dispatcher  can generate smart message . Smart message  can have a format as described above in reference to . Smart message  can have an \u201casynchronous\u201d message type. Through connection  managed by an inter-process communication layer (e.g., inter-process communication layer as described above in reference to ), request dispatcher  can send smart message  to database-side application server .","Database-side application server  and database server  can perform operations based on data in smart message  and send a response through connection . Upon receiving the response from connection , request dispatcher  can send a notification to web-side application server . Web-side application server  can initiate communication with client  through web server . Initiating the communication can include opening a new connection to client  and sending the notification as a request to client  through the new connection.","In the asynchronous communication mode, web-side application server  need not wait for a response from database-side application server . Request dispatcher  can send response  to web-side application server  informing web-side application server  that request  is processed, even when database-side application server  is still processing smart message . Upon receiving response , web-side application server  can unblock client . Response  can cause client  to be unblocked. In the asynchronous communication mode, client , once unblocked, can send another request before receiving a response to the first request.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 8B","b":["248","228"]},"In a synchronous communication mode, database-side application server  can initiate communication with web-side application server  upon receiving a request from database server . Database-side application server  can open connection  to web-side application server . Database-side application server  can generate smart message . Smart message  can have a format as described above in reference to . Smart message  can have a \u201csynchronous\u201d message type. Through connection  managed by an inter-process communication layer (e.g., inter-process communication layer as described in reference to ), database-side application server  can send smart message  to web-side application server . Database-side application server  can then wait for a response from web-side application server .","While database-side application server  waits for a response, web-side application server  can initiate communication with client  through web server . Web-side application server  can generate one or more user interface items and corresponding user interface item identifiers based on data in smart message . Web-side application server  can generate action logic to be associated with each user interface item. Web-side application server  can then send the user interface items and action logic client  through push operations. Web-side application server  can receive a response from client  (e.g., when a user performs an action on one of the user interface items in a browser). Upon receiving the response from client , web-side application server  can send a response to database-side application server  through connection .","While database-side application server  waits for a response, database server  can be blocked from sending another request. Database-side application server  and database server  can perform operations based on data in smart message  and send a response through connection . Upon receiving the response from connection , database-side application server  can send a notification to database server  and unblock database server . Database server , now unblocked, can send another request.","In an asynchronous communication mode, database-side application server  can receive a request from database server . Upon receiving the request, database-side application server  can send a notification to notification dispatcher . Notification dispatcher  can dispatch the notification, in the form of smart message , to event priority queue . Smart message  can have a format as described above in reference to . Smart message  can have an \u201casynchronous\u201d message type. Web-side application server  can receive smart message  from event priority queue . Through web server , web-side application server  can open a new connection to client . Based on data in smart message , web-side application server  can then send data or notification to client  for rendering.","In the asynchronous communication mode, database-side application server  need not wait for a response from web-side application server . Notification dispatcher  can send a response (in the form of a notification) to database-side application server  informing database-side application server  that smart message  is processed, even when web-side application server  is still processing smart message . Upon receiving the response, database-side application server  can unblock database server . In the asynchronous communication mode, database server , once unblocked, can send another request before receiving a response to the first request.",{"@attributes":{"id":"p-0092","num":"0091"},"figref":["FIG. 9","FIG. 2"],"b":["902","904","902","904","228","242","244","246","248"]},"Client  can send an initial request to server  using first connection  through request dispatcher . The initial request can be a smart message. Client  can automatically determine that the initial request is to be processed in asynchronous communication mode at run time, and upon making such determination, specifying the communication mode in metadata in the smart message as a message type of the smart message. After client  sends the initial request, client  can be unblocked from the initial request, and can send an additional request or receive an event notification from any connections. Request dispatcher  can return to client  first connection  through which request dispatcher  received the initial request, causing client  to free first connection  and to free an application thread managing first connection . Freeing first connection  and the application thread can unblock client .","Request dispatcher  can send smart message  to server , passing the metadata (including information on communication mode) to server . Request dispatcher  can send smart message  through synchronous connection . Upon receiving smart message , server  can trigger an event, including, for example, a changing of states of server . Server  can generate event notification  as a response. Upon generating event notification , server  can free synchronous connection .","Server  can send the response to client  asynchronously, after a delay from the time the request was received, and through a second connection. Server  can change states anytime (based on a backend event or an event from another browser). Accordingly, the response can appear to be occurring randomly. Server  can send the response to client  through notification dispatcher  and event priority queue . The original first connection  may or may not have been freed already. The response can be sent to client  through a new connection initiated by server , or reuse an existing connection if the existing connection has not been freed yet.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 10","FIG. 2"],"b":["902","904","902","904","228","242","244","246","248"]},"In the synchronous mode of communication, client  can initiate the communication. Client  can send a client request to server  at any time using synchronous connection . The client request can be in the form of smart message . Client  can automatically determine that the client request is to be processed in synchronous communication mode at run time. The decision as whether to use synchronous communication mode or to use asynchronous communication mode can be stored in the meta information in smart messages  as a message type. Server  can process the client request and provide a response through synchronous connection .","Likewise, server  can initiate communication and send a server request to client  through connection . The server request can be in the form of smart message . Client  can respond to the server request using connection . In communications between client  and server , a request and a response need not be sent in the same communication mode. Client  can send a request in synchronous communication mode, for which server can respond in asynchronous communication mode, and vice versa. The communication modes can be controlled by metadata in the smart messages.",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 11A"},"A web application executing on the system can be configured to perform an action based on a given user input. The action can include, for example, execution of a specific script trigger, e.g., a routine configured to monitor a specified event and cause a specified script to execute when the event occurs. Client  (e.g., a browser) can be configured to receive the user input. At the time client  receives the user input, client  can be in state . Upon receiving the user input, client  can send a first notification to server . At the time server  receives the notification, server  can be in state .","Upon receiving the user input, server  can execute the script trigger and enter state . At state , server  may request client  to perform certain actions (e.g., error checking, validation, or pausing). Server  can send a second notification to client . The second notification can be configured to cause client  to change from state  to state . In state , client  may or may not provide a display update in a browser to inform a user that client  is in state . Client  can perform the requested actions in state , and notify server  upon completion of the actions using a third notification.","Upon receiving the third notification, server  can continue processing and change from state  to state . Upon changing to state , server  can send a fourth notification to client . The fourth notification can include a result of executing the script trigger. Upon receiving the fourth notification, client  can change from state  to state . In state , client  can provide information for display in a browser.","Each of the first, second, third, and fourth notification can be sent in either synchronous or asynchronous mode. During the state changes at client  and server , client  can be blocked or unblocked at each stage of communication. At least one of server  or client  can maintain a state machine tracking the states of one or both of server  and client .",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 11B","b":["902","904","904","902","904"]},"Server  can execute the script upon receiving the notification. When server  executes the script, client  can enter state , which can be a \u201cpausing\u201d state. Client  can enter \u201cpausing\u201d state  when client  receives a user input to pause client , or when the script being executed sends a notification to pause client . In \u201cpausing\u201d state , a series of operations (e.g., updating multiple data fields) being performed on client  are paused. When client  is in \u201cpausing\u201d state , client  can send \u201cpause\u201d notification  to server  to request server  to pause execution of a script related to the series of operations being paused on client .","When server  receives \u201cpause\u201d notification , server  can enter state , which can be a \u201cpaused\u201d state. When server  is in \u201cpaused\u201d state , server  can pause the execution of the script. In some implementations, when server  enters \u201cpaused\u201d state , server  can send a notification to client  to inform client  that server  is in \u201cpaused\u201d state .","When client  receives the notification that server  is in paused state , client  can perform other actions. For example, client  can receive user input requesting saving data in the web application. In response, client  can enter state , which can be a \u201csaving\u201d state. When client  is in \u201csaving\u201d state , client  can send \u201csave data\u201d notification  to server . When server  receives \u201csave data\u201d notification , server  can determine whether there are any dirty data (e.g., data that have been modified since last save) to be saved, and if so, whether server  shall validate the dirty data. Based on the determination, server  can enter state , which can be a \u201cvalidating and saving\u201d state. Server  can be in multiple states concurrently (e.g., \u201cpaused\u201d state  and \u201cvalidating and saving\u201d state ). Server  can include a state manager managing the multiple states and transition between the states. The state manager can control execution of various procedures on server .","When server  is in \u201cvalidating and saving\u201d state , server  can perform operations of validating the data in preparation for saving, for example, when the data appears erroneous (e.g., out of range) to server . Based on characteristics of the data, server  can notify client  to validate the data, for example, by sending \u201cdata error\u201d notification  to client . \u201cData error\u201d notification  can include one or more identifiers indicating what data to validate and description of what operations are to be performed to validate the data. \u201cData error\u201d notification  is operable to cause client , upon reception, to enter state , which can be a \u201cvalidating\u201d state. In \u201cvalidating\u201d state , client  can perform data validation by performing the specified operations on the identified data. Client  can be in multiple states concurrently. For example, client  can, at the same time, be in \u201cpausing\u201d state , \u201csaving\u201d state , and \u201cvalidating\u201d state . Client  can include a state manager managing the multiple states and transition between the states. The state manager can control execution of various procedures on client .","Once client  performed the operations to validate the data, client  can send a second \u201csave data\u201d notification  to server . \u201cSave data\u201d notification  can include information indicating that client  validated the data to be saved. Upon receiving \u201csave data\u201d notification , server  can enter \u201csaving\u201d state . In \u201csaving\u201d state , server  can save the data. If, in \u201cvalidating and saving\u201d state , server  determines that the data need not be validated, server  can transition () from \u201cvalidating and saving\u201d state  to \u201csaving\u201d state  without requesting client  to validate the data.","Client  can receive a user input to resume from \u201cpausing\u201d state , for example, by resuming the paused series of operations. Upon receiving the user input, client  can enter \u201cresuming\u201d state . In \u201cresuming\u201d state , client  can send \u201cresume\u201d notification  to server . \u201cResume\u201d notification  is operable to cause server  to resume from a paused state (e.g., the last \u201cpaused\u201d state ), even when server  has gone through multiple interim states.","Upon receiving \u201cresume\u201d notification , server  can enter \u201cresuming\u201d state , in which a state manager resumes executing the script that was paused. When server  has resumed the execution, server  can send \u201cresumed\u201d notification  to client , indicating that the execution of the script has been resumed. Upon receiving \u201cresumed\u201d notification , client  can enter \u201cresumed\u201d state , in which execution of the series of operations is resumed. By using the notification mechanism, state managers on client  and server  can coordinate with each other such that client  and server  can toggle () between \u201cpaused\u201d and \u201cresumed\u201d states.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIGS. 12A and 12B","FIG. 12A","FIG. 2A"],"b":["1202","1222","1202","242","110","1202","1204","1206","1204","1204","1206","1206"]},"The user interface can include text box . Text box  can be an interactive user interface item internally linked to the data item in column X that is displayed in table . The link is represented as dashed arrows. A value of the data item can be displayed in text box . The user interface can include label  \u201cInput Field For Data Item X\u201d that is associated with text box . The user interface can allow a user to edit the value displayed in text box , for example, by receiving from the user a new value in text box . The user interface can include button  \u201cUpdate,\u201d which, when clicked, can cause the data item of column X as displayed in table  to be updated to the new value.","Browser , executing on a second user device, can be connected to web server . Browser  can display the same user interface as being displayed in browser .","In addition to allowing a user to edit the value displayed in text box , the user interface displayed in browser , being a front end of a system of notification-based web application framework, can allow a user to edit the look-and-feel of the web application, as well as logic of the web application. The logic can include relationship between first data and second data, relationship between data and a user interface item, behavior of a user interface item, and workflow. Upon receiving a user input for changing operating mode, e.g., a click on button , browser  can enter a customization mode, where browser  can accept inputs for customizing the web application.","In this example, the system can receive various user inputs through the user interface displayed in browser . Upon receiving a first user input for changing label , the web application can change label  from \u201cInput Field for Data Item X\u201d to \u201cInput Field for Column L.\u201d The system can facilitate the change by modifying a property (e.g., a \u201cstring value\u201d property) stored in a database table, the property being associated with a user interface item identifier of label .","Upon receiving a second user input for modifying which data item text box  represents, the system can modify the link between text box  and a data item as specified by the user input. For example, the system can terminate the link between the data item in column X of table , and create a new link linking text box  to the data item in column L of table  (as indicated by the dotted arrows). The system can facilitate the change to the links by modifying one or more properties stored in a database table, the one or more properties being associated with a user interface item identifier of text box . The one or more properties can specify a data source of text box .","Upon receiving a third user input for resizing text box , the system can resize text box  into text box . The system can facilitate the resizing by modifying one or more properties stored in a database table, the one or more properties being associated with a user interface item identifier of text box . The one or more properties can specify the location, height, and width of text box . Text box  can have a same user interface item identifier as text box .","Upon receiving a fourth user input for changing behavior and label of button , the system can change the behavior and label accordingly. For example, the user input can specify that when button  is clicked, instead of replacing the value of data item in column L of table  with the value in text box , the system can add the value in text box  to the data item in column L of table . The user input can additionally specify that the label on button  be changed from \u201cUpdate\u201d to \u201cAdd to.\u201d The system can change the behavior and label according to these specifications. The system can facilitate the change by modifying one or more properties stored in a database table, the one or more properties being associated with a user interface item identifier of button . The one or more properties can specify a script that the web application will execute when button  is clicked. In addition, the one or more properties can specify the label of button .",{"@attributes":{"id":"p-0120","num":"0119"},"figref":["FIG. 12B","FIG. 12A"],"b":["1202","1202","1242","1214","1206","1244","1244","1214","1206","1202","1246","1222","1222","1202","1202"]},"Each of browser  and browser  can allow customization and publication of the web application, if a user of each of browser  and browser  is authenticated and authorized to customize and publish. The web application framework can resolve potential conflicts using conventional conflict resolution mechanisms and the blocking communication mode as described above.",{"@attributes":{"id":"p-0122","num":"0121"},"figref":["FIG. 13","FIG. 2A","FIG. 2A"],"b":["1300","1302","248","246"]},"In some implementations, receiving () the database data from the database can include retrieving, at the first application server, the database data from the database server. Retrieving the database data can occur upon receiving a database notification from the database server by the first application server. The database notification can indicate that the database data are created, changed, or deleted at the database server.","The first application server can process () the received database data to generate publication data. The first application server can include a first web publishing engine based on a first language (e.g., C or C++). Processing the database data at the first application server to generate publication data can include optimizing the database notification to generate the publication data at the first application server. The publication data can include a publication notification that is a smart message configured to notify another server of a data change or a state change. Processing the database data at the first application server to generate publication data can include translating user interface data stored in a database into a document in plain text or in a text-based data interchange language. The text-based data interchange language can include at least one of a markup language (e.g., extensible markup language (XML) or YAML) or a Java-based scripting language (e.g., JavaScript Object Notation (JSON)).","A second application server can receive () the publication data from the first application server. Receiving the publication data from the first application server can include receiving, at the second application server, a publication notification from the first application server. Upon receiving the publication notification, the second application server can retrieve, from the first application server, the publication data.","The second application server can include web-side application server  as described above in reference to . The second application server can include a second web publishing engine based on a second language (e.g., Java) that is different from the first language. The second application server can be optimized to communicate with a web server. For example, in some implementations, at least a portion of the second application server can be implemented as an extension module of a web server.","The first application server can be programmed to communicate with the second application server using an inter-process communication component for communicating between a first process based on the first language and a second process based on the second language. The inter-process communication component can be a component configured to process notifications to facilitate asynchronous communications. For example, the inter-process communication component can include the asynchronous communication layer  as described above in reference to .","The second application server can process () the publication data to generate web data. Generating the web data can include generating a user interface item. The user interface item can include display specifications (e.g., type, size, or color). The user interface item can be associated with a user interface item identifier.","The second application server can provide () the web data to a web server for pushing to a web browser. The web server can compose at least a portion a web page (e.g., in HTML) that includes the user interface item having the display specifications. The web server can then send the portion of the web page or the web page in the entirety to a web browser.","In some implementations, at least one of the first application server or the second application server is programmed to perform notification queuing for asynchronous communication between the database server and the web browser. The notification queuing can be based on a timestamp of each notification, a priority of each notification, or both.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 14A","FIG. 2A"],"b":["1400","1402","246"]},"The database can store a configuration of the user interface item. The configuration can include at least one of a display configuration of the user interface item or a logical configuration of the user interface item. The update of the user interface item can include at least one of an update of the display configuration or an update of the logical configuration.","The display configuration can include a display specification of a characteristic, for example, a color, shape, size, pattern, label, or type, of the user interface item. The display specification can include an absolute or relative location at which the browser renders the user interface item. The logical configuration can include a logical specification of an identifier of the user interface item. The logical specification of an identifier of the user interface item can include an operation (e.g., an arithmetic operation, a logic operation, or a sorting operation) associated with the identifier. The logical configuration can include a reference to a procedure to be invoked when a user input is received through the user interface item. Additionally or alternatively, the logical configuration can include a relationship between the user interface item and a data item.","The web application system can initiate () communication with the user device. The communication need not be initiated in response to a specific user request from the user device. The specific user request can be a request for notification on a specific database update, e.g., a specified type of state change. Initiating communication with the user device can include sending a notification at a head of a notification queue managed by the web application system to an intermediate web application system. The intermediate web application system can include the web-side application server  as described above in reference to . The notification can be configured to cause the intermediate web application system to open a communication channel to the user device through a web server (e.g., web server  as described in reference to ), regardless of whether an existing communication channel is present.","The web application system can generate () instructions for refreshing the user interface item in the browser. The instructions can include instructions to bind the user interface item with the identifier of the user interface item and the reference to the procedure to be invoked. The instructions can include instructions operable to cause the browser to switch between states, for example, from a paused stated to a resumed state or from a resumed state to a paused state. The instructions can include instructions operable to disable the user interface item when the browser is in the paused state, and instructions operable to enable the user interface item when the browser is in the resumed state.","Generating the instructions for refreshing the user interface item in the browser can include generating a first instruction to instruct the browser to perform a first action of rendering the user interface item in a first state. Generating the instructions can include generating a second instruction to instruct the browser to perform a second action of rendering the user interface item in a second state. Generating the instructions can include determining a condition for sending the second instruction to the user device. Determining the condition for sending the second instruction to the user device can include determining the condition based on a logical configuration of the user interface item.","The web application system can push () the instructions to the user device for refreshing the user interface item as displayed in the browser according to the update in the database. Further details on the operations of pushing the instructions to the user device are described below in reference to .",{"@attributes":{"id":"p-0138","num":"0137"},"figref":["FIG. 14B","FIG. 2"],"b":["1408","246","228"]},"The web application system can send () a first notification to an intermediate web application system for opening a first communication channel to the user device. The intermediate web application system can include the web-side application server  as described in reference to .","The web application server can send () the first instruction to the browser of the user device through the first communication channel. The web application server can determine () whether a condition for sending the second instruction to the user device has been satisfied. When the condition is satisfied, the web application server can then send () a second notification to the intermediate web application system for opening a second communication channel to the user device. The web application server can then send () the second instruction to the browser of the user device through the second communication channel without receiving a request from the user device for the second instruction.",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIG. 15A","FIG. 2A","FIG. 2A","FIG. 2A"],"b":["1500","1502","246","244","242"]},"The metadata can include at least one of the following: a user context including user information and application information; an object identifier identifying a user interface item that caused the message to be sent from the browser to the second web application system; a field identifier identifying a data field in a database managed by the database server; a priority indicator indicating a priority of the message; or a message type indicating a protocol-specific type of the message. Upon receiving the message, the first web application system can terminate the first connection.","The first web application system can send () the data to a database server as a request, and receive a response from the database server. The database server can be database server  as described above in reference to . The first web application system can wait for the response from the database server when the database server processes the request from the first web application system. While waiting for the response, the first web application system causes the second web application system to unblock the browser. After the browser is unblocked, the first web application system can receive a second message from the unblocked browser through the second web application system while waiting for the response from the database server. The first web application system can create a job for processing the second message. The first web application system can enter the job into a request dispatcher that includes one or more jobs to be processed. The first web application system can send data in the second message to the database server as a second request upon receiving the response from the database server.","Upon receiving the response, the first web application system can cause () the second web application system to create a second connection between the second web application system and the browser based on the metadata. In some implementations, process  can include entering the response in an event priority queue before causing the second web application system to create a second connection between the second web application system and the browser based on the metadata.","The first web application system can send () the response to the browser through the second connection asynchronously with the message. In some implementations, the data of the message can include a request for database content. The response from the database server can include a notification that the database content is ready for fetching. Sending the response to the browser through the second connection can include notifying the second web application system that the database content is ready.","In some implementations, the first web application system can manage a state of the browser through the second web application system. The first web application system can manage a state of the database server. The operations of managing a state of the browser are described in further detail below in reference to .",{"@attributes":{"id":"p-0147","num":"0146"},"figref":["FIG. 15B","FIG. 2A","FIG. 2A"],"b":["1520","1522","246","244"]},"The first web application system can send the data to a database server as a request, and receive a response from the database server. The first web application system can determine () that a response from the database server includes a request to change the browser from the first state to a third state before setting the browser to the second state.","The first web application system can send () instructions to the browser through the second web application system. The instructions can be configured to change the browser from the first state to the third state. After the browser has changed to the third state, the browser can change from the third state to the second state. When the browser is in the third state, the browser can display an indicator that the browser is in the third state. In some implementations, the browser does not display an indicator, and the third state is a state invisible to a user.",{"@attributes":{"id":"p-0150","num":"0149"},"figref":["FIG. 16","FIGS. 1-15"],"b":["1600","1600","1602","1604","1606","1608","1612","1610"]},"The term \u201ccomputer-readable medium\u201d refers to any medium that participates in providing instructions to processor  for execution, including without limitation, non-volatile media (e.g., optical or magnetic disks), volatile media (e.g., memory) and transmission media. Transmission media includes, without limitation, coaxial cables, copper wire and fiber optics.","Computer-readable medium  can further include operating system  (e.g., Mac OS\u00ae server, Windows\u00ae NT server), network communication module , database server program , database-side application server program , web-side application server program , web server program , and communication management program . Operating system  can be multi-user, multiprocessing, multitasking, multithreading, real time, etc. Operating system  performs basic tasks, including but not limited to: recognizing input from and providing output to devices , ; keeping track and managing files and directories on computer-readable mediums  (e.g., memory or a storage device); controlling peripheral devices; and managing traffic on the one or more communication channels . Network communications module  includes various components for establishing and maintaining network connections (e.g., software for implementing communication protocols, such as TCP\/IP, HTTP, etc.).","Database server program  can include computer instructions that, when executed, cause processor  to perform operations of database server  as described above in reference to . Database server program  can include interfaces to one or more databases on a file system. The databases can be organized under a hierarchical folder structure, the folders mapping to directories in the file system. Database-side application server program  can include computer instructions that, when executed, cause processor  to perform operations of database-side application server  as described above in reference to . Web-side application server program  can include computer instructions that, when executed, cause processor  to perform operations of web-side application server  as described above in reference to . Web server program  can include computer instructions that, when executed, cause processor  to perform operations of web server  as described above in reference to . Communication management program  can include computer instructions that, when executed, facilitate synchronous and asynchronous communication between various components of the notification-based web application framework.","Architecture  can be implemented in a parallel processing or peer-to-peer infrastructure or on a single device with one or more processors. Software can include multiple software components or can be a single body of code.","The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language (e.g., Objective-C, Java), including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, a browser-based web application, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors or cores, of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.","A system of one or more computers can be configured to perform particular actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.","While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.","Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.","Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.","A number of implementations of the invention have been described. Nevertheless, it will be understood that various modifications can be made without departing from the spirit and scope of the invention. For instance, although most examples are described in reference to web publishing, the techniques described can be applied to any database-backed web applications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 2A and 2B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 11A and 11B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 12A and 12B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 13","b":"1300"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 14A and 14B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 15A"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 15B"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 16","FIGS. 1-15"]}]},"DETDESC":[{},{}]}
