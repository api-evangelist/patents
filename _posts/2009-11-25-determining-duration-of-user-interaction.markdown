---
title: Determining duration of user interaction
abstract: In some implementations, methods for determining a duration of user interaction include monitoring communication between a client computer and a server, identifying a message time period, during which messages are communicated between the client computer and the server, and monitoring activity of a processor of the client computer. A first time period of processor activity is identified, the first time period including a first start time and a first end time, the first end time being within the message time period. A second time period of processor activity is identified, the second time period including a second start time and a second end time, the second start time being within the message time period. The duration of user interaction is determined based on the first start time and the second end time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08316127&OS=08316127&RS=08316127
owner: SAP AG
number: 08316127
owner_city: Walldorf
owner_country: DE
publication_date: 20091125
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Software applications can be developed to meet a number of software requirements. In general, a requirement is a singular documented need of what a particular product or service should provide or perform. Software requirements may identify a necessary attribute, capability or characteristic of a system in order for the system to have value and utility to a user. In particular, software requirements may include functional requirements, non-functional requirements, and\/or constraint requirements. Software requirements are typically used by developers to implement useful and helpful software applications or services for a subset of users.","Developing requirements can be divided into a number of phases, including requirements elicitation (e.g., gathering the requirements from stakeholders), analysis (e.g., checking for consistency and completeness), specification (e.g., documenting the requirements), and validation (e.g., making sure the specified requirements are correct). The data gathered to create requirements or the requirements themselves may be used as inputs into the design of new products and\/or services. Accordingly, developers can implement products and services that meet or exceed particular requirements criteria.","Implementations of the present disclosure provide methods for determining a duration of user interaction. In some implementations, a method includes monitoring communication between a client computer and a server, identifying a message time period, during which messages are communicated between the client computer and the server, and monitoring activity of a processor of the client computer. A first time period of processor activity is identified, the first time period including a first start time and a first end time, the first end time being within the message time period. A second time period of processor activity is identified, the second time period including a second start time and a second end time, the second start time being within the message time period. The duration of user interaction is determined based on the first start time and the second end time.","In some implementations, the method further includes monitoring a plurality of timestamps associated with the messages, and identifying the message time period based on the plurality of timestamps.","In some implementations, the method further includes providing a proxy between the client computer and the server, the messages passing through the proxy.","In some implementations, the method further includes comparing the duration of user interaction to a predetermined threshold duration, and generating an alert when the duration of user interaction exceeds the predetermined threshold duration.","In some implementations, the messages comprise hypertext transfer protocol (HTTP) messages.","In some implementations, the duration of user interaction is determined as a difference between the first start time and the second end time.","In some implementations, the client computer executes a particular web client from a plurality of available web clients, and the duration is determined independently of the particular web client.","Implementations of the present disclosure further provide a computer-readable storage medium coupled to one or more processors and having instructions stored thereon which, when executed by the one or more processors, cause the one or more processors to perform operations in accordance with implementations of the methods provided herein.","Implementations of the present disclosure also provide a system including a client computer, a server in communication with the client computer, and one or more processors operable to execute instructions to perform operations in accordance with implementations of the methods provided herein.","The details of one or more implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features and advantages of the present disclosure will be apparent from the description and drawings, and from the claims.","Like reference symbols in the various drawings indicate like elements.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["10","10","10","10","10","10","10"]},"Measuring the activity of a processor on a client device may include measuring response patterns. For example, the architecture  can measure an elapsed time for a response to be rendered in a browser after a user clicks on, or otherwise selects an item in an application. Scheduled sampling and activity measuring of processor activities can be employed to assess whether an application is functioning within system guidelines. For example, analyzing activity measurements can be used to ensure an application quickly responds to a user's request without allowing additional time that may confuse, distract, or otherwise dissuade the user from using the application. That is, measuring the activity of a processor can provide a usability test that ensures the user does not deem the accessed application as slow or lacking in some manner.","At a high level, the architecture  may represent a client\/server system supporting multiple computer systems including a client , a client , and\/or one or more servers  that are connectively coupled for communication with one another over a network . In some implementations, the clients ,  may be directly connected to the server  (without connecting via network ) to monitor user interactions. For example, the client  may employ an HTTP proxy to communicate with the server . The HTTP proxy acts as an intermediary for requests from clients seeking resources from other servers.","The clients ,  are intended to represent various forms of processing devices including, but not limited to, a desktop computer, a laptop computer, a handheld computer, a personal digital assistant (PDA), a cellular telephone, a network appliance, a camera, a smart phone, an enhanced general packet radio service (EGPRS) mobile phone, a media player, a navigation device, an email device, a game console, or a combination of any two or more of these data processing devices or other data processing devices.","The server  is intended to represent various forms of servers including, but not limited to a web server, an application server, a proxy server, a network server, a server farm, etc. The server  can, for example, monitor communications between the client  and itself to determine the duration of a user interaction. The communication monitoring may include server  determining the duration of user interactions by analyzing one or more messages sent between the client  and the server . For example, the architecture  can determine the duration time of one or more user interactions in a number of applications executed on the web client  or the web client , for example, using the server . In some implementations, the server  runs an application that a user interacts with via a client. The client interacting with the server can determine a begin time and an end time of each interaction. The measurement of the processor activities and the timestamps of the communication can occur on the same client to ensure consistency in the timestamps, and obviate any issues based on unknown delays in the network and the unknown clock difference between client and server.","In operation, multiple clients (e.g., clients , ) can communicate with server  via network . In order to run an application, such as a browser-based application, for example, each client (e.g., clients , ) can establish a corresponding session with the server . Each session can involve two-way information exchange between the server  and each individual client , , or other clients not depicted in . In some implementations, a user can invoke applications available from the server  in a web browser running on client , . For example, each application on each client can establish a unique HTTP session with the server . Each application can individually access data from a number of database resources. The network  can be provided as a large computer network, such as a local area network (LAN), wide area network (WAN), the Internet, a cellular network, or a combination thereof connecting any number of mobile clients  and servers .","In some implementations, the client devices ,  may communicate wirelessly through a communication interface (not shown), which may include digital signal processing circuitry where necessary. The communication interface may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through a radio-frequency transceiver (not shown). In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver.","In some implementations, the architecture  can be a distributed client\/server system that spans one or more networks such as network . In some implementations, the network  can include the Internet, a wireless service network and may include the Public Switched Telephone Network (PSTN). In other implementations, the network  may include a corporate network (e.g., an intranet) and one or more wireless access points.","Referring now to , graphical representations of exemplar processor activity and user interactions are provided.  depicts a user interaction that instigate multiple message exchanges between a client and a server before a response is displayed to the user.  is a zoomed-in portion of the graphical representation of , and illustrates one user interaction that requires three message exchanges between the client and the server before a response is displayed to the user.  depicts a user interaction that instigates a message exchange between a client and a server before a response is displayed to the user.","With particular reference to , a graphical view  depicts a \u201cCPU time differences in milliseconds\u201d  versus \u201ctime\u201d  for CPU activities and message activities. , discussed below, presents a more detailed view of these activities.  can present all data from a measurement performed on the message activity in block , block , and block , of . Both processor events and the lack of processor events are shown. The lack of processor events, as shown by empty space , can be used to pinpoint a measurement beginning or ending, for example.","The graphical views depicted in  can, for example, be captured using a measurement application that analyzes processor activity and user interactions on a client device, or another device that is coupled for communication over the network . The measurement application can present graphical data (as shown in ), text data, empirical data (e.g., predictions), or other tabulated data. In effect, the measurement application provides one or more representations of an end-to-end time pertaining to a particular user interaction that previously occurred in a web client device. In some implementations, the measurement is performed in realtime and the resulting data is analyzed. In other implementations, the measurement data can be collected and broadcast in realtime to a server, administrator, user, or other requesting entity. In yet other implementations, the measurement data may be stored, graphed, emailed, uploaded, printed, or otherwise captured.","Typically, processor time (and other resources) can be tracked by a web browser (e.g., web client) such as Internet Explorer, FireFox, Safari, and the like. Specifically, each browser includes a corresponding application programming interface (API) that provides communication information (e.g., message exchange information including timestamps of beginning and end). However, each browser API is generally incompatible with the other browser APIs, and cannot be used to monitor the communication of a single application. As such, the architecture  can employ the measurement application to perform processor monitoring and measurements, such as user interactions, independent of the particular web browser. For example, the client  may execute a particular web client from any number of available web clients and determine the duration of a user interaction independently of which web client the client  is running.","The measurement application may be implemented on the client , for example. The client  can begin providing measurements upon receiving a particular signal. For example, a user can begin by moving a cursor, sending a request, or other action. One measurement method may include the user selecting a start button to begin the measurement application, moving the mouse position, waiting a short time, clicking and maneuvering in the browser, and clicking a stop button on the measurement application after results are rendered.  provides an example where a user moved the mouse position (), waited a short time period (), and clicked on an application input area to provide data to a server (). In this fashion, when the mouse moves, the processor performs, but when the mouse is still (e.g., when the user waits), the browser and processor does nothing user related. Providing a gap between the time period including moving the mouse (e.g., small activity) and the time period including sending messages to a server (e.g., large activity) can allow for a control point or mark point to begin baseline testing, for example.","With particular reference to , the view  includes one user interaction that requires three message exchanges between the client and the server. In particular, the user interaction results in separate messages (e.g., represented by blocks , , and ) sent to and from a server system. As a result, the client system can determine a total end-to-end time  by capturing individual metrics for each separate message activity.","Each block , , and  illustrate different activity times. For example, the blocks  and  represent activities with substantially shorter durations than the activity represented by block . Each activity includes a respective start time and an end time, as described above. However, the user interaction time can be calculated based on the activities. Accordingly, a user interaction start time  and a user interaction end time  may be calculated. The start time  and end time  may be calculated in a similar fashion as described with reference to  below.","In some implementations, the user interaction metrics can be used to improve processing efficiency and\/or performance speed of an application. For example, the metrics can be compared to system performance thresholds, browser performance thresholds, or other thresholds. In a specific example, the client  can use predetermined thresholds to determine whether the duration of a user interaction , , or  occurring on the client  exceeds a predetermined threshold duration. The predetermined threshold may include a particular maximum acceptable time for providing a response to a user interaction, for example. The maximum may pertain to a processing time such as 500 milliseconds, 1 second, or 4.3 seconds, for example.","The predetermined threshold can be used to optimize a user's interaction with one or more applications running on a server. For example, the architecture  can employ thresholds to ensure that the user interaction time for a particular user interaction with an application meets a specific threshold requirement. In particular, the client  can determine the duration of user interaction based on CPU time and messaging time and compare the duration to a predetermined threshold duration. The threshold duration may be implemented by an external server system, the client system, the application administrator, or other entity interested in providing optimization to the monitored application.","Each application can be analyzed for user interaction metrics. The metrics can be used to generate an alert when, for example, the duration of the user interaction exceeds the predetermined threshold duration. In a specific example, if the user interaction duration shown by end-to-end time  is longer than X seconds, an alert may be generated. For example, the end-to-end time of view  as 2.5 seconds. An alert can be generated to notify the system that a predetermined threshold of one second has been exceeded. Although environment  is used to monitor user interaction time in web based application software, other variables may also be monitored, including, but not limited to message responses, memory allocation and timing, or other processing times.","Referring now to , a graphical view  depicts processor activity and user interactions using a web client. In particular, the view  indicates relationships between central processing unit (CPU) activity and message communications between a client and a server. For example, the view  depicts \u201cCPU time differences in milliseconds\u201d  versus \u201ctime\u201d  for CPU activities and message activities. The view  includes a measurement graph that depicts six blocks of processor activity including blocks , , , , , and . The blocks , , , , , and  represent browser activity (e.g., client CPU activity), as shown in legend . The block  represents message activity, hypertext transfer protocol (HTTP) in particular, as shown in legend . Because the implementations of the present disclosure are independent of the communication protocol, only timestamps of the begin and end of a message exchange need be measured. Consequently, the present disclosure can be implemented with other messaging protocols including, but not limited to, remote procedure calls (RPC). Block  shows one message sent from a client to a server. While only a single message interaction is depicted in , any number of message interactions can be captured, graphed, and analyzed using architecture , for example.","CPU activities may include, but are not limited to, those that result from mouse movement, keyboard strokes, switching application windows on a display, or other processor activity that does not include an interaction between a client and a server. Message activities (e.g., user interactions) may include any communications occurring between a client and a server, such as server requests (e.g., entering data into application fields to trigger response requests), service requests (e.g., launching an application to access services), network connection (e.g., requesting a Wi-Fi network, requesting a printer), requesting an inventory change, or any other activity involving the request of a server to perform a task. In some implementations, the message activities include combinations of HTTP messages and RCP message communications.","The view  depicts a timeline  representing a user interaction duration that extends from time  (e.g., start time 11:43:44.000) to time  (e.g., end time 11:43:44.750). The user interaction duration (time  to time ) is an end-to-end time  for a particular user interaction. The end-to-end time  may be calculated as the difference between the start time of a user interaction and the end time of the same user interaction. The start time  signifies the beginning of processor activity on the client device corresponding to a particular user interaction. The end time  signifies the end of processor activity on the client device corresponding to the particular user interaction.","At some point during the detected CPU activity, message activity is detected in a message time period, as shown by block . For example, the client  can detect that a user entered a request that triggered a message to server . As is typical, initiating execution of a user interaction leads to some activity in the client device receiving user input. In some implementations, the client activity can be measured by sampling a consumed CPU time of a client process. The execution of the user interaction can trigger the sending of request messages to a server. For example, user input in client  can trigger a request message and send the request message to server . The message activity can continue for any amount of time. The message activities may include multiple request messages and corresponding responses to those messages.","Continuing with the above example, after the client  receives a final response message from the server , the client  is again actively displaying the response data (e.g., response rendering). In this example, the activity may be measured by sampling the consumed CPU time of the client process. In some implementations, an HTTP proxy server can be used if the communications between a particular client and server are performed using the HTTP protocol. Other protocols are possible.","Referring again to , a period of message activity , a first period of processor activity , and a second period of processor activity  are illustrated. The first period of processor activity  begins at a time  and ends at time . The time  overlaps the message time period . The second period of processor activity  begins at time  and ends at a time . The time  overlaps the message time period . The overlap between processor activity and message activity can be used to identify the relevant user interaction duration start and end times  and . For example, the start time  can be determined by identifying a time period of processor activity starting shortly before message time period . In particular, inspecting processor activity that ended at time  can be used to detect time  where the processor activity started. Consequently, the first period  can be identified as a period during which a user inputted data into the browser, for example.","In a similar fashion, the end time  can be determined by inspecting process activity shortly after time  and up to where the last processor action ends. Consequently, the second period  can be identified as a period during which the browser rendered a message responses from the server, for example. The user interaction duration time  can be determined based on the first start time  and the second end time  by inspecting activities just prior to an overlap in timing of processor activity and message activity. The duration time  represents the end-to-end time for a particular user interaction with an application.","In operation, the end-to-end time duration  can be captured using various techniques. In an example, the end-to-end time  can be captured using one client device such as client device . As described above, the end-to-end time  includes the time between the start time  and the end time . The start time  can be calculated using the timestamp of a sent message. For example, the client  can retrieve the time stamp of the beginning of the message activity . The client  can analyze the messaging and processor activity. The client  can determine the beginning of the processor activity (e.g., start time ), and can place a start time marker. Similarly, the end time  can be determined by using the timestamp after the last response from the server  arrived. Specifically, the timestamp can be used to search for an activity occurring shortly after the message activity. The CPU activities in blocks , , and  occur shortly after the message activity. As such, the end of block  represents the end time .","In some implementations, the measurement application can monitor and analyze system processes using operating system APIs, for example. The measurement application can use the information to report specific CPU activity for each monitored process. In some implementations, measuring and analyzing all user interactions on a client device may not be desirable. For example, it may not be useful to measure or analyze a cursor movement that occurs as a direct effect of moving a mouse. As such, the architecture  can distinguish between simple cursor movements (e.g., or other uninvolved processing tasks) and more complex message activity.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 5","FIG. 5"]},"In step , the process monitors communications between a client computer and a server, as well as the activity of a processor of the client computer. For example, the client  monitors communications between the client  and the server . The monitoring may include monitoring messages passed between the client  and the server , for example. The client  can monitor the activity of its own processor or another processor. The monitoring may include monitoring processing time, processor usage, memory usage, or another parameter.","In step , the process identifies a message time period, during which messages are communicated between the client computer and the server. For example, the client  identifies a message time period  () in which messages are sent to the server  and received at the client . The determination can be performed by monitoring a number of timestamps associated with sent and received messages pertaining to an application. The client  identifies the message time period based on the timestamps. In step , the process identifies a first time period of processor activity. As shown in , the first time period may correspond to time period . The first time period  includes a first start time  and a first end time . The first end time  is within the message time period .","In step , the process identifies a second time period of processor activity. As shown in , the second time period may correspond to time period . The second time period  includes a second start time  and a second end time . The second start time  is within the message time period . In step , the process determines a duration of user interaction based on the first start time  and the second end time  (). For example, the client  can determine the duration of the entire user interaction by calculating the difference between the first start time  and the second end time .","Referring now to , a schematic diagram of an exemplar computer system  is provided. The system  can be used for the operations described in association with the method described in  according to one implementation. For example, the system  may be included in any or all of the server , and the clients  or . The system  includes a processor , a memory , a storage device , and an input\/output device . Each of the components , , , and  are interconnected using a system bus . The processor  is capable of processing instructions for execution within the system . In one implementation, the processor  is a single-threaded processor. In another implementation, the processor  is a multi-threaded processor. The processor  is capable of processing instructions stored in the memory  or on the storage device  to display graphical information for a user interface on the input\/output device .","The memory  stores information within the system . In one implementation, the memory  is a computer-readable medium. In one implementation, the memory  is a volatile memory unit. In another implementation, the memory  is a non-volatile memory unit. The storage device  is capable of providing mass storage for the system . In one implementation, the storage device  is a computer-readable medium. In various different implementations, the storage device  may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, or a flash memory device. The input\/output device  provides input\/output operations for the system . In one implementation, the input\/output device  includes a keyboard and\/or pointing device. In another implementation, the input\/output device  includes a display unit for displaying graphical user interfaces.","The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.","Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.","The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include, e.g., a LAN, a WAN, and the computers and networks forming the Internet.","The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.","In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.","A number of implementations of the present disclosure have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the present disclosure. Accordingly, other implementations are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
