---
title: Goal-oriented predictive scheduling in a grid environment
abstract: A method for scheduling jobs in a networked computing grid is described. The method includes scheduling jobs to meet goals related to execution of the jobs within the computing grid. The jobs may be scheduled by evaluating job execution goals against available resource slots provided by the computing grid. Also disclosed are related methods for scheduling jobs in which the jobs are submitted to service classes having defined job execution goals, and wherein the jobs are scheduled according to the job execution goals of the service classes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844969&OS=07844969&RS=07844969
owner: Platform Computing Corporation
number: 07844969
owner_city: Markham, Ontario
owner_country: CA
publication_date: 20040617
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION","Deadline Example","Velocity Example","Throughput Example","Queue Time Example"],"p":["This application is related to U.S. patent application Ser. No. 10\/871,286, entitled \u201cJob-Centric Scheduling in a Grid Environment\u201d (Inventors: Bingfeng Lu, Jin Song Zhong, and Jason Lam), and U.S. Pat. No. 7,340,654, entitled \u201cAutonomic Monitoring in a Grid Environment\u201d (Inventors: David Bigagli and Xiaohui Wei), each of which were filed on the same day as the present application and each of which are hereby incorporated by reference.","Disclosed embodiments herein relate generally to computing grid environments, and more particularly to methods for scheduling jobs in such environments.","The increasing complexity of electronic tasks (e.g. executable programs such as computational tasks, command execution, data collection, etc.) has increased the demand for resources used in accomplishing such tasks. Resources may include hardware that aids in completing electronic tasks, such as servers, clients, mainframe computers, networks, network storage, databases, memory, CPU time, and scientific instruments. Resources may also include software, available network services, and other non-hardware resources.","One response to the increased demand for resources has been the development of networked computing grid systems, which operate to integrate resources from otherwise independent grid participants. Computing grid systems generally include hardware and software infrastructure configured to form a virtual organization comprised of multiple resources in often geographically disperse locations.","Electronic tasks, often referred to as \u201cjobs,\u201d typically require certain amounts and\/or types of resources for completion. Once a job is created, it is to be assigned, or scheduled, to sufficient and compatible resources within a computing grid system. However, jobs are often subject to specified goal requirements, which can complicate the scheduling of such jobs. For example, project planners may need to schedule jobs that should be completed by a predetermined deadline. In such instances, the fate of the project may depend on whether the job is appropriately scheduled.","Disclosed herein are methods for scheduling jobs within a grid environment. In one exemplary embodiment, a method for scheduling jobs is described in which the jobs are to be scheduled according to goal requirements. The method includes providing a mathematical model that represents the goal requirements in view of the available resources of the grid and solving the mathematical model to determine the optimum number of resources to meet the goal requirements. Upon determining the optimum number of resources, the jobs are scheduled in satisfaction of the goal requirements.","The goal requirements may be associated with a deadline goal, a velocity goal, a throughput goal, and\/or a queue time goal. The deadline goal is satisfied by scheduling jobs for execution by a certain deadline. The velocity goal is satisfied by scheduling jobs to meet a desired velocity. The throughput goal pertains to scheduling jobs for execution such that they are completed according to a configured throughput rate. The queue time goal relates to scheduling jobs within a certain queue time.","In some embodiments, methods are provided for scheduling jobs according to any combination of the above-described goals and\/or additional goals.","The present disclosure relates to goal-oriented predictive scheduling methods that may be used in distributed resource management, or grid, systems.  illustrate an exemplary grid architecture and associated software modules that enable grid participation, whereas the remaining figures disclose the goal-oriented predictive scheduling methods of the present disclosure.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["10","12","12","14","12","13","14","14","20","14","20","10"]},"Grid systems, such as the grid , are typically built by configuring each cluster  to facilitate resource sharing on the grid. Such configuration may occur by loading grid-enabling software onto the hosts  or other devices associated with the clusters . In doing so, the operating system services provided by the hosts  are extended to create a single system image for the cluster . The grid-enabling software of the present disclosure may be in the form of simple object access protocol (SOAP\/XML protocol) and may be configured to support operating systems such as Linux\u00ae, Windows\u00ae and Unix\u00ae by deploying software daemons that run on the preexisting operating systems provided for the cluster . The grid-enabling software may be broken down into various software modules, which include various processes for facilitating operation of the grid .","Referring now to , within the cluster  the grid-enabling software may be initially loaded onto a master host  selected for the cluster. The master host  may be a selected host  associated with the cluster , and is typically the host associated with an administrator of the cluster (hereinafter \u201csystem administrator\u201d). The software may be built in layers, beginning with a base system . The base system  generally provides dynamic load balancing and transparent access to resources available within the cluster . The base system  includes a load information manager (LIM) component , which collects resource information from slave hosts  within the cluster  as will be further described. As with the master host , the slave hosts  may be any hosts  within the cluster . The base system  further includes a process information manager (PIM) component , which gathers process information such as configuration data. Upon startup, the load information manager  may read configuration data compiled on the process information manager . The base system  also includes a remote execution server (RES) , which is responsible for executing jobs remotely and transparently within the cluster .","A batch system  is then loaded as a layer on top of the base system , and includes a slave batch daemon  and a master batch daemon . The slave batch daemon  includes processes for receiving and processing instructions provided by the master batch daemon . The master batch daemon  is a level higher than the slave batch daemon , and is configured to manage not only the slave batch daemon  of the master host , but each of the slave batch daemons associated with the plurality of slave hosts . Although only three slave hosts  are shown, the number of hosts associated with the cluster  can vary considerably.","Grid-enabling software is also deployed onto the slave hosts  to facilitate resource sharing on the grid . In particular, the base system  of the grid software is loaded onto the slave hosts . As such, the slave hosts  are configured with their own load information managers , process information managers  and remote execution servers . Additionally, the slave hosts  are provided with their own slave batch daemons , which receive instructions from the master batch daemon  and facilitate the execution of the jobs (via the remote execution server ) that are sent to the particular hosts.","Upon installation, the master batch daemon  can check the configuration of the cluster  and contact each of the slave batch daemons  of the slave hosts  to initiate host updates to the load information manager  of the master host . The host updates may be provided by the load information managers  of the slave hosts  and sent to the load information manager  of the master host , thereby aggregating resource data for the cluster . If a job is submitted to the master host , the master host can analyze the resource data for the cluster , and dispatch the job to a particular slave host  if the load information corresponds to the requirements of the job. Additionally, the slave batch daemons  of the slave hosts  can check resource usage for the slave hosts  and send such information to the master batch daemon  of the master host .","Referring now to , the master batch daemon  includes processes for generally functioning as a cluster workload, or resource, manager . For example, the resource manager  may allocate the collection of resources associated with the cluster  and match such resources with the resource requirements associated with a particular job to be executed on the grid . Accordingly, the resource manager  implemented within the master batch daemon  can receive job submissions  and transmit such jobs to slave batch daemons , which execute the jobs. In this manner, the master batch daemon  effectively enforces scheduling policies associated with the grid  as will be further described. Scheduling policies are typically driven by the requirements of particular jobs to be executed on the grid .","In some embodiments, a scheduler  is associated with the master batch daemon  and is configured to facilitate job scheduling within the cluster . In particular, the scheduler  may process a job submission  to evaluate the job's resource requirements, analyze the job's resource requirements against the resources provided by the hosts  within the cluster , and schedule the job to a compatible host or hosts. In other embodiments, the scheduler  may schedule jobs according to goal requirements defined for the jobs as will be further described. As discussed above, the number and type of resources provided by the individual hosts  within the cluster  may be determined by the submission of such data from the load information managers  associated with the hosts.","Various plug-in components may be provided as part of the scheduler . For example, reservation, parallel, and user-defined components may be provided as plug-in components to generally aid the scheduler  in making job-scheduling decisions. Various other plug-in components are contemplated as being provided with the scheduler .","Referring to , the hosts  and the resource managers  are shown in their associated clusters . Each cluster  may further include a resource manager adapter , which may be deployed onto the grid  to enable communication between the various clusters associated with the grid . For example, the resource manager adapter  may comprise a Java\u00ae application programming interface (API) and a simple object access protocol (SOAP) interface.","A job service component  is further provided with each cluster  to generally provide an interface for inputting jobs into the grid. The job service component  comprises software processes configured to receive input from an end-user and create a job based on the end-user's request. The job service component  may be deployed onto any machine associated with the grid , such as an end-user's PC. The grid  may include one or several job service components , depending on the particular parameters of the system. In some embodiments, jobs input into the grid  will have predetermined resource requirements, e.g., two Linux\u00ae servers with over 2 gigabytes of memory, and thus the jobs will need to be executed on the grid according to these resource requirements. If a job is to be executed on a particular cluster , the job can be sent to the resource manager , which can then schedule the job accordingly.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5","FIG. 5","FIG. 4"],"b":["100","100","100","82"]},"In one exemplary embodiment, the scheduling process  begins with a grid user submitting a job request (action ) that may include specified goal requirements. In practice, the job request is typically submitted via the job service component  () associated with the grid system .","After creation of a job (\u201cJob J\u201d) via the job service component , the scheduling process  first evaluates whether Job J has associated scheduling goals (action ). If Job J is created without specified goals, then no predictive scheduling is necessary and Job J may be scheduled (action ) by transferring Job J to a resource management scheduler associated with the grid system. The scheduler can then find appropriate resources to execute Job J and dispatch Job J accordingly (action ).","If Job J does have a specified goal requirement or multiple goal requirements, then a defined mathematical model is solved to calculate the optimum or sufficient number of resources to meet the goal(s) (action ). In some embodiments, goal requirements associated with scheduling of jobs may include deadline, velocity, throughput and\/or queue time goals. The mathematical models according to the present disclosure can be generally described as non-linear constrained optimization problems, which, when solved, aid in scheduling jobs to slots within the grid while minimizing the resources allocated to execute the jobs. The mathematical models (further described below) generally include computing models and associated algorithms having variables associated with the planned workload demanded by the jobs, the slots available on the grid system, the constraints on such resources and\/or the scheduling goal(s).","The scheduling process  further includes evaluating whether there are sufficient resources to execute Job J according to the goal requirements (action ). If sufficient resources are found, then Job J may be submitted to the scheduler, which can schedule Job J (action ) and dispatch Job J to the appropriate hosts (action ). If, however, there are insufficient resources to meet the goal requirements, a violation action may be triggered (action ). Upon the occurrence of a violation, the scheduling process  may evaluate whether other hosts are available (action ) by launching a program to petition other hosts to join the grid . The system administrators responsible for administering the grid  can configure additional hosts to join the grid. If additional hosts are provided (action ), the scheduling process  will cycle back to evaluate whether the additional hosts can provide sufficient resources to meet the goal requirements (action ). If additional hosts cannot be obtained, then the scheduling process  can notify an administrator (action ) of the particular cluster  associated with the submission of Job J.","Additionally, the scheduling process  according to the present disclosure may be invoked periodically after the expiration of a certain amount time, such as 5 seconds. Therefore, goal requirements may be satisfied after one cycle of the scheduling process , or alternatively, after several cycles of the scheduling process.","Exemplary goal requirements and associated methods for meeting such goal requirements will now be discussed in turn. However, the following descriptions are not meant to be an exhaustive listing of goals that can be addressed according to the methods of the present disclosure. Neither are the methods and architectures meant to be limited to the algorithms discussed below.","A. Deadline Goal","Referring to , a grid user may desire to schedule a job or a plurality of jobs (N) on a grid to meet a deadline goal (T). The scheduling process  includes solving a defined mathematical model to determine the optimum number of slots (s) that will ensure that the N job(s) are completed by time t(s) (action ). Accordingly, time t(s) should be optimized to be a time just prior to a deadline time (T):\n\n()>=0&&(1)<0.\n\nThe grid system can have a certain number of slots (K) available to run the N jobs. Moreover, the N jobs subject to the deadline can have an average run time (R). Thus, the following computing model is representative of the completion time required for the N jobs when executed on a specified number of slots (s):\n\n()=ceil()*; where 1\n","The optimum number of slots (s) to complete the N jobs by the specified deadline (T) is then determined by inserting various completion times t(s) into the following deadline algorithm, beginning with the completion time associated with one slot:",{"@attributes":{"id":"p-0043","num":"0042"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Action 1:","s = 1;"]},{"entry":["Action 2:","D = T \u2212 t(s);"]},{"entry":["Action 3:","if D < 0, then s = s + 1; go to Action 2;"]},{"entry":["Action 4:","if s <= K, then find the answer, exit; else cannot find s to"]},{"entry":[{},"meet the goal, trigger the goal violation action."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["124","132"]},"By way of example, it is desired that 6 pending jobs each having an average run time of 3 minutes be completed by a specified deadline of 7 minutes. In this example, the grid system has 6 slots available to run the jobs. As detailed above, the time t(s) for a given number of slots (s) is calculated, and then subtracted from the predetermined deadline time T to evaluate whether the deadline goal can be met with that particular number of slots (s). The optimum number of slots (s) required for completing the 6 jobs and meeting the deadline of 7 minutes is determined as follows:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Iteration 1:","t(1) = ceil(6\/1)*3 = 18"]},{"entry":[{},{},"D = 7 \u2212 18 = \u221211 < 0;"]},{"entry":[{},"Iteration 2:","t(2) = ceil(6\/2)*3 = 9"]},{"entry":[{},{},"D = 7 \u2212 9 = \u22122 < 0"]},{"entry":[{},"Iteration 3:","t(3) = ceil(6\/3)*3 = 6"]},{"entry":[{},{},"D = 7 \u2212 6 = 1 > 0."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"figref":"FIG. 7"},"B. Velocity Goal","Referring to , in another embodiment, a grid user may desire to schedule a number of jobs (N) on the grid to meet a velocity goal (V). For example, a grid user may desire that a fixed number of jobs (N) be running on the grid at any given time. Accordingly, the scheduling process  includes solving a defined mathematical model to determine the optimum number of jobs out of the N jobs that should be running at any given time to meet the specified velocity goal (V) (action ). The grid system can have a defined number of slots (K) available to run the N jobs. Additionally, the grid system can be running a specified number of jobs (C) at any given time. Accordingly, dispatch of the N jobs can be optimized to meet the velocity goal (V) by execution of the following velocity algorithm:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Action 1:","If V > K, then velocity goal cannot be achieved; trigger"]},{"entry":[{},"violation action;"]},{"entry":["Action 2:","If C < V, then dispatch min(V \u2212 C, N) jobs; else exit."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["132","124","140"]},"By way of example, it is desired that 7 pending jobs be executed on the grid while guaranteeing that 5 jobs are running at any given time. In this example, the grid system has 10 slots available to run the jobs and 3 slots are currently running jobs. Accordingly, the scheduling process  includes executing the above-described velocity algorithm:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action 1:","5 < 10, go to action 2;"]},{"entry":[{},"Action 2:","3 < 5, then dispatch min(2, 7) jobs."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"100"},"C. Throughput Goal","Referring to , in yet another embodiment, it may be desired to schedule jobs on a grid to meet a throughput goal. For example, a grid user may desire that jobs be scheduled such that a certain number of jobs (target throughput F) are completed per hour. The scheduling process  includes solving a defined mathematical model to determine the optimum number of jobs (n) to run on the grid to meet the specified throughput goal (F) (action ). Accordingly, the actual throughput f(n) should be optimized to meet the throughput goal (F):\n\n((1)>0 and (())<=0.\n","Actual throughput f(n) may be dependent on the estimated run time of each particular job (R) and the available number of slots (K) on the grid. In some embodiments, run time (R) will be variable amongst jobs, while in other embodiments run time may be uniform. Accordingly, actual throughput f(n) for a particular number of running jobs may be determined as follows:\n\n()=1+1+ . . . +1.\n","Various throughput data f(n) may then be evaluated against the target throughput F according to the following throughput algorithm:",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Action 1:","n = 1;"]},{"entry":["Action 2:","D = F \u2212 f(n);"]},{"entry":["Action 3:","if D > 0; n = n + 1; go to action 2;"]},{"entry":["Action 4:","if n <= K; then find the answer; exit"]},{"entry":[{},"else cannot find n to meet the goal, trigger the goal violation"]},{"entry":[{},"action."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"If the optimum number of jobs (n) is determined and is less than the number of slots (K) in the grid, the jobs can be sent to the resource management scheduler, which assigns the jobs to the appropriate number of slots (action ). However, if the optimum number of jobs (n) is greater than the available slots (K) in the system, then a violation action may be triggered (action ) and communicated to the grid user, such as by an email notification.","By way of example, it is desired that jobs be executed on the grid while guaranteeing a throughput of 20 jobs per hour. In this example, the grid system has 12 slots available to run the jobs and each job has an average runtime of 10 minutes. The optimum number of jobs (n) to meet the throughput goal of 20 jobs per hour is determined as follows:",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Action 1:","n = 1"]},{"entry":[{},"Action 2:","D = 20 \u2212 (1\/1\/10) = 10 > 0"]},{"entry":[{},"Action 3:","D = 20 \u2212 (1\/1\/10 + 1\/1\/10) = 0."]},{"entry":[{},"Action 4:","2 <= 12."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"D. Queue Time Goal","Referring to , in yet another embodiment, it may be desired to schedule N jobs on a grid to meet a queue time goal. For example, a grid user may desire that the N jobs be scheduled such that they remain in a queue for no longer than a specified time (T). Accordingly, the scheduling process  entails solving a defined mathematical model to determine the optimum waiting time (T) for a pending job to meet the queue time goal (T) (action ).","Queue time and dispatching of jobs according to queue time may be affected by the system maximum dispatch time (D), which is typically a constant value for each grid system. Accordingly, the actual waiting time Tshould be optimized to meet the queue time goal T:\n\n\n","Various waiting time data Tfor each pending job subject to the queue time goal may then be evaluated against the queue time goal Taccording to the following queue time algorithm:",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Action 1:","Sort(min(T\u2212 T))"]},{"entry":["Action 2:","if T\u2212 T<= D, dispatch job"]},{"entry":["Action 3:","repeat action 2 until find job T\u2212 T> D, then dispatch other"]},{"entry":[{},"priority jobs."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Upon determining the optimum waiting time Tfor meeting the queue time goal T, the pending job will be sent to the resource management scheduler, which will then assign the job to an appropriate slot (action ) prior to expiration of the waiting time T. If the jobs having a queue time goal Tare all dispatched or the system maximum dispatch time D is determined to be less than the difference between the queue time goal and the actual waiting time T, then scheduling process  may be configured to dispatch other priority jobs (action ).","By way of example, it is desired that a pending job remain in a queue for execution for no longer than 5 minutes. In this example, the grid system has a maximum dispatch time of 10 minutes. The optimum waiting time Tto meet the queue time goal of 5 minutes is determined as follows:",{"@attributes":{"id":"p-0066","num":"0065"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Action 1:","Sort(min(5-4, 5-1, 5-2)) where sample waiting times are 4"]},{"entry":[{},"minutes, 2 minutes and 1 minute;"]},{"entry":["Action 2:","5-4 <= 10, therefore dispatch job;"]},{"entry":["Action 3:","repeat action 2 for additional jobs."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}},"br":{},"sub":"w "},"Various jobs may be created to have multiple goal requirements. Thus, jobs may have any combination of the above-described goal requirements, as well as additional goal requirements. Also, the mathematical models associated with the above-described goals are exemplary in nature, and can be altered without departing from the scope of this disclosure.","In some embodiments, the grid user may have a service level agreement (SLA) with the computing grid administrator. Accordingly, jobs and associated goal requirements may be executed on the grid under various service classes associated with the SLA, thereby providing service treatment and privileges to the grid user's request as defined by the service class.","A preferred syntax associated with the service class may be available to the grid user through which job requests can be input into the grid system and assigned according to the goal requirements associated with the job requests. The syntax defines the service class by naming the service class, prioritizing the service class and associating job execution goals with the service class. Accordingly, the individual service classes can function as goal-oriented predictive schedulers. In one embodiment, the service class may be defined as follows:","Begin Service Class\n\n","End Service Class","The NAME parameter may be any name that identifies the service class and can be implemented as an ASCII string, including letters, digits, underscores and\/or dashes.","A PRIORITY parameter indicates the service class priority. In some embodiments, higher integer values assigned to the PRIORITY parameter will indicate higher levels of priority while lower integer values will indicate lower levels of priority. As such, the jobs within the service classes are able to access grid resources by level of priority. If multiple service classes have the same priority, the grid can run the jobs from these service classes in a first come, first serve order.","A GOAL parameter defines the service-level goals for the particular service class. The service class may have one or more goals, each of which may be active at varying times. For example, the service class may include a throughput goal active each day from 4 pm-9 pm. In this scenario, the 4 pm-9 pm time period may be referred to as a time window during which the jobs associated with the service class are scheduled to meet the throughput goal. Outside of the time window, the jobs are scheduled as if no service class has been defined. However, the time window is optional and no specified time period need be stated. Thus, when no time window is specified, the goal is always active. Additionally, several goals may be active at the same time. For example, a job may be scheduled to meet both a throughput goal and a velocity goal during the same time window or overlapping time windows.","The various goals may be defined for a particular service class as follows:\n\n","In still further embodiments, a CONTROL_ACTION parameter may be defined to effect an action command if satisfaction of the goal is delayed. The action command may be any specified action, such as a \u201cpageme\u201d action, which can cause a page to be sent to a grid user should job execution fail to meet the goal. For example, if a goal is delayed for a time period exceeding a defined goal period, such as a VIOLATION_PERIOD, then the pageme action will be invoked. In one example, it may be desired that a control action be invoked should the goal be in violation for a period exceeding five minutes. Accordingly, the CONTROL_ACTION parameter can be input as follows:\n\n","It may also be desired to provide a description of various service classes to enable a grid user to evaluate which service classes are appropriate for job execution. As such, a DESCRIPTION parameter may be utilized to provide information describing the particular features of the service class. Accordingly, grid users can view the description when picking a service class.","While various embodiments of a goal-oriented predictive scheduler according to the principles disclosed herein, and related methods of performing goal-oriented predictive scheduling, have been described above, it should be understood that they have been presented by way of example only, and not limitation. Thus, the breadth and scope of the invention(s) should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents. Moreover, the above advantages and features are provided in described embodiments, but shall not limit the application of the claims to processes and structures accomplishing any or all of the above advantages.","Additionally, the section headings herein are provided for consistency with the suggestions under 37 CFR 1.77 or otherwise to provide organizational cues. These headings shall not limit or characterize the invention(s) set out in any claims that may issue from this disclosure. Specifically and by way of example, although the headings refer to a \u201cTechnical Field,\u201d the claims should not be limited by the language chosen under this heading to describe the so-called technical field. Further, a description of a technology in the \u201cBackground\u201d is not to be construed as an admission that technology is prior art to any invention(s) in this disclosure. Neither is the \u201cBrief Summary\u201d to be considered as a characterization of the invention(s) set forth in the claims found herein. Furthermore, any reference in this disclosure to \u201cinvention\u201d in the singular should not be used to argue that there is only a single point of novelty claimed in this disclosure. Multiple inventions may be set forth according to the limitations of the multiple claims associated with this disclosure, and the claims accordingly define the invention(s), and their equivalents, that are protected thereby. In all instances, the scope of the claims shall be considered on their own merits in light of the specification, but should not be constrained by the headings set forth herein."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Reference is now made to the following descriptions taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
