---
title: Systems and methods for metamodel transformation
abstract: Some aspects relate to systems to determine a first metamodel conforming to a first meta-metamodel supporting metamodel class inheritance at the first metamodel level, identify one or more segments of an aggregation-free tree of nodes of the first metamodel, identify a lowest-level node of one of the one or more segments, identify all higher-level nodes of the one of the one or more segments, and consolidate attributes of each of the identified nodes of the one of the one or more segments into a node of a second metamodel conforming to a second meta-metamodel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732655&OS=08732655&RS=08732655
owner: SAP AG
number: 08732655
owner_city: Walldorf
owner_country: DE
publication_date: 20111229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["Some embodiments relate to the use of object models within an application platform. More specifically, some embodiments relate to the transformation between model content expressed by metamodels not supporting specialization\/inheritance and model content expressed by metamodels supporting specialization\/inheritance.","According to conventional business software terminology, a business object is an object model representing real-world items used during the transaction of business. For example, a business object may represent a business document such as a sales order, a purchase order, or an invoice. A business object may also represent items such as a product, a business partner, or a piece of equipment. Particular documents (e.g., SalesOrder SO435539) and\/or items (e.g., ACME corporation) are represented by instances of their representing business object, or business object instances.","A business process platform provides application programming interfaces to allow read and write access to business object instances. Notably, each specific business object (i.e., object model) conforms to a same metadata model (or, \u201cmetamodel\u201d). As a result, a business process platform may employ similar application programming interfaces, services, and persistencies to support all instances of each specific business object.","A business process platform may include other metamodels describing technical entities such as, but not limited to, a Web Service, a view, a floorplan (i.e., a user interface layout), a work center, UI texts, and process components. Each metamodel, including the business object metamodel, may in turn conform to a same meta-metamodel. More specifically, each metamodel may comprise an instance of a same meta-metadata model.","Some application development tools (e.g., Eclipse-based tools) operate based on specific metamodels (e.g., Eclipse Modeling Framework (EMF) models). These metamodels are instances of a specific meta-metamodel (e.g., eCore). As such, these tools are unable to utilize metamodels (and their instances) which conform to a different meta-metamodel. Moreover, application platforms which support the different meta-metamodel are unable to use metamodels (and their instances) which conform to the above-mentioned specific meta-metamodel.","In some cases, the native meta-metamodel (e.g., eCore) of a development tool exposes the same modeling unit types as another meta-metamodel (e.g., UML). Accordingly, desired metamodels of the other meta-metamodel may be directly mapped to metamodels of the native meta-metamodel for use by the development tool. Commonly-assigned U.S. patent application Ser. No. 12\/690,511 describes systems to map between metamodels of meta-metamodels which exhibit different modeling unit types.","However, neither of the foregoing mapping techniques supports mapping between metamodels of a first meta-metamodel which supports specialization\/inheritance on the metamodel level and metamodels of a second meta-metamodel which does not support specialization\/inheritance on the metamodel level.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","100","110","120","130","110","120","130","140","120","130"]},"First model  is an instance of the first metamodel and second model  is an instance of the second metamodel. Moreover, a first meta-metamodel of the first metamodel supports specialization\/inheritance on the metamodel level and a second meta-metamodel of the second metamodel does not support specialization\/inheritance on the metamodel level. For example, in some embodiments, the first meta-metamodel is the eCore meta-metamodel and the second meta-metamodel is the SAP APM3 meta-metamodel. For purposes of the present description, the term inheritance will be used to refer to the concepts of specialization and inheritance.","The elements of system  may be embodied using any combination of hardware and\/or software that is or becomes known. For example, model transformation engine  may comprise a general-purpose computer processor executing program code stored on a tangible medium to provide the functions described herein. Moreover, data store  may comprise a database storing data and\/or executable program code for facilitating the above-described transformation.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["200","200","210","200","201","202","204","206","208","202","206","206","200","208"]},"Data storage device  may comprise any appropriate information storage device, including combinations of magnetic storage devices (e.g., magnetic tape and hard disk drives), optical storage devices, and\/or semiconductor memory devices such as Random Access Memory (RAM) devices and Read Only Memory (ROM) devices.","Data storage device  stores program code for execution by processor . Model transformation engine  may comprise a set of such code, and may be executed by processor  to cause system  to operate as described above with respect to model transformation engine  of . This operation may initially include operation of communication device  to receive a first metamodel from an external system.","Data storage device  also stores mappings between metamodels . Mappings  may include mappings between first and second metamodels as described above. Mappings  may comprise any combination of data and\/or executable code.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["300","100","200","300","300","210","200"]},"Process  and all other processes mentioned herein may be embodied in processor-executable program code read from one or more non-transitory tangible computer-readable media, such as a fixed disk, a floppy disk, a CD-ROM, a DVD-ROM, a flash drive, and a magnetic tape, and then stored in a compressed, uncompiled and\/or encrypted format. In some embodiments, hard-wired circuitry may be used in place of, or in combination with, program code for implementation of processes according to some embodiments. Embodiments are therefore not limited to any specific combination of hardware and software.","Prior to S, it is assumed that an instruction is received to transform a first model of a first metamodel to a second model of a second metamodel. As described in the Background, the first metamodel may represent a business object or a technical entity such as a Web Service, a view, a floorplan (i.e., a user interface layout), a work center, UI texts, and a process component. Process  may be initiated to facilitate usage of an instance of the first metamodel (e.g., a SalesOrder business object model) within an application development tool that conforms to a second meta-metamodel. Accordingly, process  provides transformation from the first metamodel to the second metamodel, based on which the instances thereof may be transformed.","Initially, at S, one or more segments of an aggregation-free tree of nodes of the first metamodel are identified. The first metamodel is an instance of a first meta-metamodel supporting inheritance at the metamodel level.  illustrates process  according to some embodiments and will be referenced in the description thereof. Specifically, tree  includes nodes of the first metamodel distributed along two segments. Embodiments are not limited to the number of nodes or segments of tree .","A lowest-level node of one of the segments is identified at S. For purposes of the present example, it will be assumed that Class D of tree  is identified at S. Next, all higher-level nodes of the segment are identified at S. Continuing with the example, the identified nodes are Class B and Class A.","Next, at S, the attributes of the lowest-level node are consolidated with those of the identified high-level nodes into a node of a second metamodel. The second metamodel is an instance of a second meta-metamodel that does not support inheritance at the metamodel level.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4","b":["420","340","420","410","410","420","410","410","420","410","420"]},"At S, it is determined whether the aggregation-free tree includes additional segments. The present example of tree  includes an additional segment so flow returns to S, at which Class C is identified. Next, at S, Class A (i.e., the sole \u201chigher-level\u201d node of the segment) is identified.","Again, at S, the attributes of the lowest-level node are consolidated with those of the identified high-level nodes into a node of a second metamodel.  shows node  corresponding to Class C of tree . Node  includes the attributes of Class A and Class C of tree . According to the present example, flow terminates after S because no more segments of tree  remain.","Although process  describes transformation from the first metamodel to the second metamodel, embodiments also include transformation from the second metamodelt (i.e., not supporting inheritance) to the first metamodel (i.e., supporting inheritance). More particularly, the attributes of nodes  and  may be used to create tree  in some embodiments.","The first meta-metamodel and the second meta-metamodel may be associated with different modeling unit types as described in aforementioned U.S. patent application Ser. No. 12\/690,511. The present description will assume that, if mappings between modeling unit types are required to transform the first metamodel to the second metamodel, such mappings occur in conjunction with process , as described in U.S. patent application Ser. No. 12\/690,511 or otherwise. For example, when mapping a class with attributes of a first metamodel to a node with node elements of a second metamodel, node elements are created to correspond with attributes of the class as well as with attributes of any parent classes as described above.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 5","b":["500","500","100","200","300"]},"More specifically, tool development environment  is used to develop business tools\/applications based on metamodels of a native meta-metamodel, which will be referred to as the first meta-metamodel, supporting inheritance at the metamodel level. Environment  may be used to provide metamodels to AP backend . However, metamodels  conform to a second meta-metamodel which does not support inheritance at the metamodel level. Accordingly, AP backend  is unable to use metamodels developed in tool development environment  in their native format.","Metamodel exporter plug-in  of environment  may therefore implement system , apparatus  and\/or process  to transform a first metamodel of the native meta-metamodel to a second metamodel of the second meta-metamodel. According to some embodiments, the transformation results in a metamodel of metamodels  which can be used by AP backend  (e.g., to generate models for storage in model data ).","The above-described block diagrams illustrate logical architectures for describing some embodiments, and actual implementations may include more or different components arranged in any manner. Each device and method described herein may be implemented by any number of devices in communication via any number of other public and\/or private networks. Two or more of devices of may be located remote from one another and may communicate with one another via any known manner of network(s) and\/or a dedicated connection. Moreover, each device may comprise any number of hardware and\/or software elements suitable to provide the functions described herein as well as any other functions. Other topologies may be used in conjunction with other embodiments.","The embodiments described herein are solely for the purpose of illustration. Those in the art will recognize other embodiments may be practiced with modifications and alterations limited only by the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
