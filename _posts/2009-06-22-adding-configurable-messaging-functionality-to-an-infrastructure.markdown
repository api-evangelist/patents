---
title: Adding configurable messaging functionality to an infrastructure
abstract: A common infrastructure for management and one way message routing can accommodate a set of related but conceptually different message delivery protocols. Junctions can be simultaneously created and configured at a location within a namespace. As a result, messaging related functionality can be more efficiently and uniformly added to a namespace. Additionally, embodiments include junctions that indicate roles and store behaviors and constraints for roles locally. Thus, computer systems desiring to utilize messaging related functionality can access the junction and utilize messaging related functionality provided at the junction without having to refer to other locations in a namespace (e.g., to perform lookups). Thus, resource and network bandwidth consumption associated with adding and utilizing messaging related functionality to a network infrastructure is reduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135094&OS=09135094&RS=09135094
owner: Microsoft Technology Licensing, LLC
number: 09135094
owner_city: Redmond
owner_country: US
publication_date: 20090622
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","1. Background and Relevant Art","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["Not Applicable.","Computer systems and related technology affect many aspects of society. Indeed, the computer system's ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks (e.g., word processing, scheduling, accounting, etc.) that prior to the advent of the computer system were performed manually. More recently, computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. Accordingly, the performance of many computing tasks are distributed across a number of different computer systems and\/or a number of different computing environments. Further, objects for performing computing can also be located in different places within a computer network.","In many computing environments, a directory service is used to arrange, manage, and provide information for objects. For example, on a computer system a file system service can be used to arrange and manage files and provide users with information about files. In a network, directory servers (e.g., active directory (AD)) can be used to assign policies, deploy software, apply updates, etc., to resources, services, and users within the network.","Directory services can also provide a namespace that can be traversed to locate particular objects the directory service controls. For example, directory services can be arranged as a hierarchical framework of objects. Some objects (e.g., root or intermediate objects) can be containers for other objects (e.g., leaf objects). Each object can be identified by its name within the hierarchical framework (e.g., corp1\/deptA\/group7\/printer001). Thus, directory services are useful as they provide a way to organize and locate objects that is understandable to human users.","Most directory services also provide a management interface that can be used to add functionality to an underlying namespace. For example, the management interface for AD permits resource names, such as, for example, a queue name, to be added to a namespace. However, before an object name can be added, the object, such as, for example, a queue, must first be created, activated, and named.","Thus, adding an object (e.g., a queue) to AD typically includes management of least two distinct actions. First, the object is created somewhere, is activated, and is assigned a name. Second, the management interface is used to register the assigned name and resource properties for the object in AD. In response to registration, AD then activates a listener to listen on the assigned name. If communication is received (i.e., the resource \u201ccomes up\u201d), AD assumes that the resource is providing functionality in accordance with the registered properties on the assigned name. To access the resource's functionality, a user goes the AD to find the location of the object and then goes to the object to access the provided functionality (e.g., queuing or dequeuing a message).","Further, within many directory services, a user first goes to the directory to obtain a namespace location and operating semantics (from the registered properties) for an object (i.e., the user performs a lookup). The user then uses the namespace location to locate the object within namespace and access the object's functionality. Thus, accessing an object typically also requires two distinct actions, a lookup followed by accessing an object.","The present invention extends to methods, systems, and computer program products for adding configurable messaging functionality to an infrastructure. In some embodiments, messaging functionality is added to an overlay network. A hierarchical representation of a namespace accessed. The namespace represents the overlay network. A portion of the namespace, where the messaging related functionality is to be installed, is identified. The messaging related functionality is installed into the namespace at the identified portion of the namespace.","Installation of the messaging related functionality includes identifying hardware components that are to be used to implement the messaging functionality. Installation of the messaging related functionality also includes sending communication to the overlay network to implement the messaging functionality on the hardware components. Sending communication to the overlay network includes setting up the hardware components to operate within the namespace. Sending communication to the overlay network additionally includes requesting that the overlay network configure the hardware components with behaviors for implementing the messaging functionality in accordance with a specified policy in combination with setting up the hardware. Setting up the hardware components in combination with requesting configuration of the hardware components is performed in a unified manner. Accordingly, setup and configuration of the hardware components are both essentially simultaneously performed through interacting with the namespace.","In other embodiments, messaging functionality is added to a directory structure. A hierarchical representation of a namespace representing a directory structure is accessed. Communication with the directory structure is facilitated through a directory access protocol. A location within the namespace where an active component is to be installed into the namespace is identified. The identified location is where the messaging related functionality is to be added to the directory structure. A policy that defines how active components are to be added to the directory structure is accessed.","The active component is installed at the identified location within the namespace in accordance with the accessed policy. Thus, active component implements the messaging related functionality within the directory structure. Installation of the active component includes identifying hardware components that are to be used to implement the active component. Installation of the active component also includes sending communication to the directory structure to add the active component at the identified location within the namespace in accordance with the accessed policy. Installation of the active component further includes using the directory access protocol to communicate with the active component to activate the messaging related functionality at the active component. The messaging related functionality is activated subsequent to adding the active component to the identified location within the namespace.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Additional features and advantages of the invention will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","The present invention extends to methods, systems, and computer program products for adding configurable messaging functionality to an infrastructure. In some embodiments, messaging functionality is added to an overlay network. A hierarchical representation of a namespace accessed. The namespace represents the overlay network. A portion of the namespace, where the messaging related functionality is to be installed, is identified. The messaging related functionality is installed into the namespace at the identified portion of the namespace.","Installation of the messaging related functionality includes identifying hardware components that are to be used to implement the messaging related functionality. Installation of the messaging related functionality also includes sending communication to the overlay network to implement the messaging functionality on the hardware components. Sending communication to the overlay network includes setting up the hardware components to operate within the namespace. Sending communication to the overlay network additionally includes requesting that the overlay network configure the hardware components with behaviors for implementing the messaging functionality in accordance with a specified policy in combination with setting up the hardware. Setting up the hardware components in combination with requesting configuration of the hardware components is performed in a unified manner. Accordingly, setup and configuration of the hardware components are both essentially simultaneously performed through interacting with the namespace.","In other embodiments, messaging functionality is added to a directory structure. A hierarchical representation of a namespace representing a directory structure is accessed. Communication with the directory structure is facilitated through a directory access protocol. A location within the namespace where an active component is to be installed into the namespace is identified. The identified location is where the messaging related functionality is to be added to the directory structure. A policy that defines how active components are to be added to the directory structure is accessed.","The active component is installed at the identified location within the namespace in accordance with the accessed policy. Thus, active component implements the messaging related functionality within the directory structure. Installation of the active component includes identifying hardware components that are to be used to implement the active component. Installation of the active component also includes sending communication to the directory structure to add the active component at the identified location within the namespace in accordance with the accessed policy. Installation of the active component further includes using the directory access protocol to communicate with the active component to activate the messaging related functionality at the active component. The messaging related functionality is activated subsequent to adding the active component to the identified location within the namespace.","Embodiments of the present invention may comprise or utilize a special purpose or general-purpose computer including computer hardware, as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer-readable media for carrying or storing computer-executable instructions and\/or data structures. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer-readable media that store computer-executable instructions are physical storage media. Computer-readable media that carry computer-executable instructions are transmission media. Thus, by way of example, and not limitation, embodiments of the invention can comprise at least two distinctly different kinds of computer-readable media: computer storage media and transmission media.","Computer storage media includes RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.","A \u201cnetwork\u201d is defined as one or more data links that enable the transport of electronic data between computer systems and\/or modules and\/or other electronic devices. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a transmission medium. Transmissions media can include a network and\/or data links which can be used to carry desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media.","Further, upon reaching various computer system components, program code means in the form of computer-executable instructions or data structures can be transferred automatically from transmission media to computer storage media (or vice versa). For example, computer-executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module (e.g., a \u201cNIC\u201d), and then eventually transferred to computer system RAM and\/or to less volatile computer storage media at a computer system. Thus, it should be understood that computer storage media can be included in computer system components that also (or even primarily) utilize transmission media.","Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, or even source code. Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather, the described features and acts are disclosed as example forms of implementing the claims.","Within this description and the following claims, an \u201coverlay network\u201d is defined as a computer network that is built on top of another underlying network. Nodes in the overlay network, such as, for example, a peer-to-peer network, can be connected to one another by virtual or logical links through one or more physical links in an underlying network. Overlay networks can be constructed to abstract the addressing mechanism of the underlying network. For example, distributed hash tables (DHTs) can be used to route messages to nodes based on logical addresses when Internet Protocol (IP) addresses are not known in advance.","Within this description and the following claims, a \u201cresource\u201d is defined as a software or hardware component that can be utilized to provide messaging related functionality in a network infrastructure. A resource can include hardware components of a computer system, such as, for example, system memory and computer storage media. A resource can also include software components that interoperate with hardware components to cause the hardware components to perform a function, such as, for example, storing and removing messages from system memory.","Within this description and the following claims, a \u201cnamespace\u201d is defined as hierarchy of names that provides context for resources and facilitates disambiguation between resources.","Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including, personal computers, desktop computers, laptop computers, message processors, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, routers, switches, and the like. The invention may also be practiced in distributed system environments where local and remote computer systems, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.","Generally, the depicted and otherwise described components of the present invention can be connected to one another over (or be part of) a network and potentially also an overlay network. Networks can be virtually any network, such as, for example, a Local Area Network (\u201cLAN\u201d), a Wide Area Network (\u201cWAN\u201d), and even the Internet. Accordingly, each of the depicted and otherwise described components as well as any other connected computer systems and their components, can create messaging related data and exchange messaging related data (e.g., Internet Protocol (\u201cIP\u201d) datagrams and other higher layer protocols that utilize IP datagrams, such as, Transmission Control Protocol (\u201cTCP\u201d), Hypertext Transfer Protocol (\u201cHTTP\u201d), Simple Mail Transfer Protocol (\u201cSMTP\u201d), Simple Object Access Protocol (SOAP) etc.) over the network. Each of the depicted and otherwise described components as well as any other connected computer systems and their components can also use overlay network protocols for communicating on an overlay network.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1A","b":["100","101","103","102","103","103","106","104","104","103","101","101"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1B","b":["110","111","111","113","112","113","113","116","114","114","113"]},"As depicted, ring  represents an overlay network on top of another network, such as, for example, an underlying IP network. Ring  can include an ID space on the order of 2, where N is large enough to provide a unique ID for each node of the underlying network. A distributed hash table (DHT) can be used to facilitate routing in ring . For example, to route a message to a resource on ring , the namespace location of the resource within namespace  is hashed. The hashed value of the namespace represents an ID within the ID space of ring . The message is then routed to the represented ID, where a node responsible for the resource receives and processes the message.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 1C","b":["120","121","121","123","122","123","123","126","124","124","123","121"]},"Embodiments of the invention facilitate adding messaging related functionality within a namespace. In some embodiments, a \u201cjunction\u201d is added to a namespace to add new messaging capabilities, such as, for example, publish\/subscribe messaging, queue-based messaging, messaging related meta-data storage, etc. A junction is a management and message routing abstraction for controlling and routing messages to named locations within a namespace. For example, a junction can be used to facilitate controlling and routing messages to one-way messaging routers and messages queues at specific named locations in an overlay network namespace.","In some embodiments, a junction takes on the role of a queue. In that role, messages sent into the junction are stored inside the network infrastructure (e.g., in an overly network) and can be retrieved in a \u2018Pull\u2019 fashion. Various protocols that offer REST-based and SOAP-based Dequeue operations with long-polling support, as well as more sophisticated PeekLock\/Delete\/Release operations that allow for resilience against receive-side failures and a range of transport failures, can be used to Pull messages.","In other embodiments, a junction takes on the role of a unidirectional message router. A router is a long-lived message distribution point that interested receivers can subscribe to. A router can be constrained to a single subscriber (unicast), a particular (non-zero) number of subscribers or permit virtually unlimited subscriptions. Messages can be distributed to all subscribers (multicast) or to exactly one of the subscribers (anycast).","Subscriptions can take the form of a) long-lived Push subscriptions or b) short-lived Solicit\/Push subscriptions. Long-lived push subscriptions can be established by explicitly registering a message delivery endpoint with the network infrastructure (e.g., overlay network) to which messages will be pushed as they become available inside the network infrastructure. A short-lived solicit\/push subscription is a one-way message receiver that is registered with the router. Messages are pushed to a Solicit\/Push receiver only when there is an active connection that has been initiated by the receiver.","Intermediaries may be \u201cbuffered\u201d. For example, a buffered Router is backed by a queue inside the network infrastructure (e.g., overly network). Using a queue, a router can provide \u201conline\/offline\u201d support for solicit\/push receivers that are only occasionally connected. Thus, incoming messages are always sent into the backing queue and are pulled out of the queue and sent to the receiver when the receiver is online. Another usage for buffered intermediaries is to provide an \u2018elastic wire\u2019 for cases where the bandwidth distribution between sender and receiver is unfair (sender can send at a higher rate than the receiver), and where messages are sent in bursts. In this case, the buffer allows the sender to complete sending a sequence of messages as quickly as its bandwidth to the network infrastructure allows, without having to wait for the messages to be sent all the way down to a possibly much slower receiver.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 2A","b":["200","200","201","202","202","201","203","204","201","214","216"]},"Add junction message  includes role  and policy proposal . Role  defines a role that the junction  is to provide. Roles can include queue, message router, meta-data store, etc. Policy proposal  describes the behavior that is proposed for junction  and constraints that are to apply to junction . A policy proposal can define a variety behaviors and constraints common to any junction including: authorization, discoverability, expiration time, maximum message size, transport protection, and usage attribution. Other behaviors and constraints can be role specific. For example, behaviors and constraints for a router can further include: buffer timeout period, maximum buffer length, maximum buffer capacity, maximum subscribers, message distribution, overflow, push delivery retries, and push delivery timeout. Behaviors and constraints for a queue can further include: enqueue timeout, maximum concurrent readers, maximum dequeue retries, maximum message age, maximum queue length, maximum queue capacity, overflow, and poison message drop.","Upon receiving policy proposal , ring  can determine whether to accept proposal  as presented, accept proposal  with modifications, or reject proposal . For example, ring  can decide to accept policy proposal  for queue creation with a lower a maximum queue capacity than included in policy proposal . Alternately, ring  can reject policy proposal  for router creation when policy proposal  proposes a drop existing overflow behavior but ring  is configured to reject messages when buffers are at capacity to reduce chatter.","When ring  accepts a policy proposal, a junction is added to the namespace at the specified location. For example, upon ring  accepting policy proposal  (either as proposed or modified), junction  can be added to namespace  at location . Messages can then be submitted to location  to access messaging related functionality (represented in the combination of role  and (potentially modified) policy proposal ) provided by junction . For example, messages can be sent to location  to queue the messages, publish the messages to subscribers, or store meta-data contained in the messages.","A junction can represent resources within the underlying network infrastructure a namespace is based on (an internal resource) or resources outside the underlying network infrastructure a namespace is based on (an external resource). For example, junction  can represent resource  or resource .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 2B","b":["220","221","220","221","222","222","221","223","224","221","234","236","224","226","227","226","234","207","234","234"]},"Upon receiving policy proposal , directory structure  can determine whether to accept proposal  as presented, accept a modified proposal, or reject the proposal. For example, directory structure  can decide to accept policy proposal  for router creation with different authorization behavior than included in policy proposal . Alternately, directory structure  can reject policy proposal  for queue creation when policy proposal  for proposed behavior that, if implemented, would violate the configured system behavior of directory structure .","When directory structure  accepts a policy proposal, a junction is added to the namespace at the specified location. For example, when directory structure  accepts policy proposal  (either as proposed or modified), junction  can be added to namespace  at location . Messages can then be submitted to location  to access messaging related functionality (represented in the combination of role  and (potentially modified) policy proposal ) provided by junction . For example, messages can be sent to location  to queue the messages, publish the messages to subscribers, or store meta-data contained in the messages.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 3A","FIG. 3A"],"b":["300","301","303","301","303","301","301","306","304","303","303","301","306","303","304"]},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3B","FIG. 3B"],"b":["320","321","323","321","323","321","301","326","334","324","328","326","328","324"]},"Through the proxy functionality of a junction, external resources can be seamlessly integrated with internal resources. Thus, other resource in resources  can access external resource  without even knowing it is an external resource. For example, internal resource  can sent a message to junction  at location . In response, the message can be forwarded to external resource  to implement the role and behaviors and constraints for junction .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 2A"],"b":["400","400","200"]},"Method  includes an act of accessing a hierarchical representation of a namespace, the namespace representing an overlay network (act ). For example, computer system  can access namespace . Namespace  represents the resources of ring . Computer system  can be a node of ring  or can be a computer system external to ring . Method  includes an act of identifying a portion of the namespace where the messaging related functionality is to be installed (act ). For example, computer system  can identify location  \u201cROOT\/B\/ii\/z\u201d (i.e., adding \u2018z\u2019 to the path of location ) as the location in namespace  where messaging related functionality is to be installed. Messaging related functionality can include implementing a message queue, a message router, or storing meta-data. Meta-data storage can include storing a role and\/or policy for a junction at location  such that the junction role and policy can be discovered at location .","Method  includes an act of installing the messaging related functionality into the namespace at the identified portion of the namespace (act ). For example, computer system  can install junction  into namespace  at location  to represent role  and policy proposal  (or a modified version thereof).","Installing the messaging related functionality includes an act of identifying hardware components that are to be used to implement the messaging functionality (act ). For example, computer system can identify resource . Resource  can be used to implement role  in accordance with behaviors and constraints proposed in policy proposal .","Installing the messaging related functionality includes an act of sending communication to the overlay network to implement the messaging functionality on the hardware components (act ). For example, computer system  can send add junction message  to ring . Add junction message  requests implementation of role  in accordance with behaviors and constraints policy proposal  at location .","It may be that node  is responsible for resource  (e.g., due to resource 's proximity to node  in the ID space of ring ). Thus, ring  and\/or node  can determine if any aspects of policy proposal  violate system behaviors and constraints of ring  and\/or node . If not, policy proposal  can be implemented without modification. If so, policy proposal  can be modified or add junction message  can be rejected.","Sending communication to the overlay network includes an act of setting up the hardware components to operate within the namespace (act ). For example, resource  can be set up to implement role  to operate in namespace . For example, a portion of memory can be allocated to store messages for a message queue.","Sending communication to the overlay network includes requesting that the overlay network configure the hardware components with behaviors for implementing the messaging functionality in accordance with a specified policy in combination with setting up the hardware, setting up the hardware components in combination with requesting configuration of the hardware components performed in a unified manner such that setup and configuration of the hardware components are both essentially simultaneously performed through interacting with the namespace (act ). For example, computer system  can request that ring  configure resource  to implement role  in accordance with (potentially modified) behaviors and constraints from policy proposal . Setting up resource  for operation in namespace  and requesting configuration of resource  to implement role  can be performed in unified manner such that setup and configuration of the resource  are both essentially simultaneously performed through interacting with namespace .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 5","FIG. 2B"],"b":["500","500","220"]},"Method  includes an act of accessing a hierarchical representation of a namespace, the namespace representing the directory structure, communication with the directory structure facilitated through a directory access protocol (act ). For example, computer system  can access namespace . Namespace  represents the resources of directory structure . Communication with directory structure  can be facilitated through a directory protocol, such as, for example, Lightweight Directory Access Protocol (LDAP) or other suitable directory access protocols.","Method  includes an act of identifying location within the namespace where an active component is to be installed into the namespace to add the messaging related functionality to the directory structure (act ). For example, computer system  can identify location  \u201cROOT\/E\/vii\/X\u201d (i.e., adding \u2018X\u2019 to the path of location ) as the location in namespace  where messaging related functionality (e.g., a message queue, a message router, a meta-data storage location, etc.) is to be installed. Computer system  can be represented by an object in directory structure  or can be external to directory structure . Messaging related functionality can include implementing a message queue, a message router, or storing meta-data. Meta-data storage can include storing a role and\/or policy for a junction at location  such that the junction role and policy can be discovered at location .","Method  includes an act of accessing a policy that defines how active components are to be added to the directory structure (act ). For example, computer system  can send add junction message  to directory structure . Directory structure  can access policy proposal  from add junction message . Directory structure can determine if policy proposal  is to be accepted and potentially modified or rejected. When accepted, a resource defined in directory structure  can be used to implement role  in accordance with appropriate policies based on policy proposal .","Method  includes an act of installing the active component at the identified location within the namespace in accordance with the accessed policy to implement the messaging related functionality within the directory structure (act ). For example, computer system computer system  can install junction  at location . Junction  installed in accordance with appropriate policies based on policy proposal  to implement role  with directory structure .","Installing the active component at the identified location can include an act of identifying hardware components that are to be used to implement the active component (act ). For example, computer system  can identify resource  (or resource ) that is to be used to implement role  in accordance with appropriate policies based on policy proposal . Installing the active component at the identified location can include an act of sending communication to the directory structure to add the active component at the identified location within the namespace in accordance with the accessed policy (act ). For example, computer system  can send communication to directory structure  to add junction  at location  in accordance with appropriate policies based on policy proposal . Computer system  can also send communication to directory structure  to associate resource  (or resource ) with junction . A suitable directory access protocol such as, for example, LDAP, can be used for communication between computer system  and directory structure .","Installing the active component at the identified location can include an act of using the directory access protocol to communicate with the active component to activate the messaging related functionality at the active component, the messaging related functionality activated subsequent to adding the active component to the identified location within the namespace (act ). For example, a suitable directory access protocol, such as, for example, LDAP can be used to communicate with junction  to activate role  (e.g., a message queue, message router, meta-data storage, etc,) at junction . Role  can be activated in accordance with appropriate policies based on policy proposal . Role  can be activated subsequent to inserting junction  into namespace .","Once a junction is activated, the functionality of an active component (e.g., message queue, message router, meta-data store, etc.) represented at the junction can be utilized by sending a message to the namespace location of junction.  illustrates an example computer architecture  for using messaging related functionality of an overlay network. As depicted in computer architecture , ring  includes nodes A, B, C, and D. Message  is received at protocol head . Protocol head  indicates properties for messages routed on ring . Message  can have a destination of \u201chttp:\/\/solution.servicebus.windows.net\/app2\/ep2A\u201d. The destination http:\/\/solution.servicebus.windows.net\/app2\/ep2A can be hashed into an ID value within the ID space of ring . Message  can be sent to the ID value and the node responsible for the ID value can receive the message. For example, message  can be routed to node B. Ring binding listener  determines that message  is a junction related message.","If message  is for router that is not backed by a queue, message  can travel over pass-through  to push\/listen distributor  and into dispatch . Push delivery  can access messages from subscription manager  and push message  to push clients . On the other hand, if message  is for a queue or a router that is backed by a queue, message  can be placed in queue . For queued messages, queue clients  can dequeue messages, including message , from queue . For a queue backed router, dispatch  can dequeue messages, including message , as subscription manager and push delivery  are able to handle more messages. Push delivery  can then push messages, including message , to push clients . In some embodiments, dispatcher  is configured to dequeue messages only when there are active subscribers or if the distribution policy is multi-cast.","As previously described, a policy proposal describes the behavior that is proposed for junction  and constraints that are to apply to junction . More specifically, junctions can be managed by setting a junction policy on a particular name in a solution namespace. The junction policy is set on the name using an available Service Registry protocols, such as, for example, the Atom Publishing Protocol for REST-based access and the WS-Transfer protocol for SOAP-based access. In either case, the policy document is carried as a payload extension.","A junction policy describes the behavior of the junction and the constraints that apply to the junction. Except for the ExpirationInstant element, all Junction policy elements can be immutable once they are set. Thus, changing the policy of a junction can require deleting the junction and recreating the junction with a different policy. In some embodiments, creating or deleting a junction policy requires an explicit permission to be configured in the Access Control rules for the namespace. The required permission to create\/delete a junction policy on a particular name is \u2018Manage\u2019 (which may be distinct from the already existing \u2018Send\u2019 and \u2018Listen\u2019 permissions)","A Junction can take on one of a variety of roles (e.g, indicated in role ) including a router or queue. Roles can be mutually exclusive and thus the policies for individual roles are expressed as extensions (derives-from) of the baseline junction policy. A proposed policy, such as, for example, contained in policy proposal  and\/or policy proposal , can include one or more policy elements. Some policy elements are applicable to any type of role, including both message queues and message routers. For example, an Authorization element, Discoverability element, ExpirationInstance element, TransportProtection element, and UsageAttribtion element can be common to any type of junction.","An Authorization element of the junction policy specifies whether authorization is required for sending messages to a junction, receiving messages from a junction (via a listener, a push-subscription, or the dequeue endpoint), or neither, or both. Authorization can be required to manage the junction, i.e. to set or delete the junction policy. This policy element relates to the authorization requirements for senders and receivers.","The possible values for the Authorization Policy are:",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["NotRequired","Authorization is not required to send or receive"]},{"entry":[{},"messages from the junction."]},{"entry":["RequiredToSend","Authorization is required to send to the junction,"]},{"entry":[{},"but not to receive from it."]},{"entry":["RequiredToReceive","Authorization is required to receive from"]},{"entry":[{},"the junction, but not to send to it."]},{"entry":["Required","(Default) Authorization is required to send to and"]},{"entry":[{},"receive from the junction."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A Discoverability element of the junction policy determines whether and under what circumstances the junction is discoverable using an Atom feed and\/or via WS-Discovery elements.","The Discoverability Policy distinguishes between unrestricted \u2018Public\u2019 access that allows anyone to discover the endpoint using one of the supported protocols without any Authorization requirement and \u2018Private\u2019 access that limits discoverability to clients that, for example, volunteer an overlay network token with particular associated rights. Authorization is optional for discovery protocols, but the discovery result depends on whether a token is provided with the discovery call.",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Public","Junction to publicly discoverable"]},{"entry":["Manager","(Default) Junction is discoverable for Managers"]},{"entry":["ManagerReceiver","Junction is discoverable for Managers and"]},{"entry":[{},"Receivers"]},{"entry":["ManagerSender","Junction is discoverable for Managers and"]},{"entry":[{},"Senders"]},{"entry":["ManagerReceiverSender","Junction is discoverable for Managers, Senders"]},{"entry":[{},"and Receivers"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A ExpirationInstant element of the junction policy indicates an instant in time (e.g., expressed in UTC) when a junction will expire and be automatically removed from the system. As the policy is being set, the managing client may express any future date\/time for expiration, but it must expect that the system might only grant a shorter expiration time due to system policy constraints. The system will impose a limit on a junction's overall lifetime in order to allow for garbage collection of unused resources. The concrete definition of the maximum lifetime for a junction is subject to system configuration.","The ExpirationInstant is a mutable element of a Junction policy. Unlike all other elements, the ExpirationInstant can be extended to the maximum permissible lifetime by re-applying the entire policy to the junction.","A MaxMessageSize element is a 64-bit sized integer that indicates the maximum size of any individual message that can be sent into and handled by the junction. This property is subject to system constraints and, possibly, solution-scope constraints dependent on a customer's service plan. A solution may want to constrain the maximum message size further if it is known that one or more subscribers or one or more queue clients have inherent message size constraints. Thus, the concrete definition of the message size limit is subject to system configuration and metadata available on the customer's service plan.","A TransportProtection element indicates the transport protection requirements for messages flowing into and out of the junction. Transport protection means that the client and the Service Bus must establish a secure, transport-level communication channel for sending or retrieving messages depending on the concrete policy requirement.",{"@attributes":{"id":"p-0090","num":"0089"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["None","Messages can be sent into and received from the junction"]},{"entry":[{},"without any transport protection measures - both, sender"]},{"entry":[{},"and receiver can voluntarily opt to secure their individual"]},{"entry":[{},"message path."]},{"entry":["AllPaths","Messages must be sent into and received from the junction"]},{"entry":[{},"using a secure communication channel."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The TransportProtection element is covered by an enumeration and not a simple Boolean value since there may be additional choices to facilitate compatibility with other additional queue protocols, including those that not require transport-level communication path protection.","A UsageAttribution element specifies whether the usage\/cost for a particular message is attributed Junction's owner (manager), or the message's sender or the receiver.",{"@attributes":{"id":"p-0093","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Manager","All usage is attributed to the Manager"]},{"entry":[{},"(owner) of the Junction."]},{"entry":["IdentifiedSenderOrManager","The usage is attributed to identifiable"]},{"entry":[{},"senders or to the manager in case the"]},{"entry":[{},"senders cannot be identified (for instance"]},{"entry":[{},"if Authorization isn't enabled)"]},{"entry":["IdentifiedReceiverOrManager","The usage is attributed to identifiable"]},{"entry":[{},"receivers or to the manager in case the"]},{"entry":[{},"senders cannot be identified (for instance"]},{"entry":[{},"if Authorization isn't enabled)"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Other policy elements are more specifically applicable the router role of a junction and specify particular rules and constraints for a router.","If an Router is buffered, a BufferTimeout element represents a period that indicates how long a send operation into the junction is permitted to \u2018hang\u2019 and backpressure packets into the client in case the buffer currently is at capacity and can't take any more messages. Once the timeout expires and the message could not be placed into the queue, further message handling depends on the Overflow policy element.","The period will tie an inbound connection to a network infrastructure and should therefore be balanced between the need of reducing the risk of a Denial-Of-Service attack against the system and the ability to provide some elasticity for the solution to deal with temporary traffic spikes. The maximum permissible BufferTimeout value will be set in system configuration.","A MaxBufferLength element indicates how many messages a router's buffer may hold at any given point in time. Setting the maximum buffer length to zero disables buffering, setting this value to a non-zero (positive) number enables buffering on the Router\u2014if the MaxBufferCapacity sibling element is likewise set to a positive, non-zero value.","However, a system is free to adjust the maximum buffer length to a configuration imposed upper or lower boundary. The initial queue implementation, may, for instance not have the ability to constrain the maximum buffer length but merely be capable of turning the buffer on and off.","A MaxBufferCapacity element holds a 64-bit number indicating how many bytes a queue is permitted to hold overall\u2014including system-imposed overhead, message framing information, and framing headers. This capacity number cvan count towards a user's service plan allocation. The system can initially override any non-zero value provided for this value and set it to a system-inherent per-queue capacity limitation.","A MaxSubscribers element holds a 32-bit integer indicating how many subscribers are at most permitted on an router at any given point in time. The value of this element can be equal to or greater than 1 if the element is included in the policy. If the value is 1, the router is constrained to at most one current subscriber, providing unicast message distribution and potentially future the ability to provide an immediate response from the receiver back to the sender. If the value is greater than one, the message distribution strategy depends on the value of the MessageDistribution element. A client can request a virtually unlimited subscriber capacity by setting the value to the maximum positive 32-bit integer value. However, the system may override this to a configured system limitation.","A MessageDistribution element indicates how messages are distributed when more than one subscriber is present. If the value is OneSubscriber, the system will randomly pick one of the concurrent subscribers and route the message to it (anycast). If the value is AllSubscribers the message is routed to all subscribers that are present.",{"@attributes":{"id":"p-0102","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["OneSubscriber","The message is distributed to one of the subscribers"]},{"entry":[{},"currently registered with the Router. The system"]},{"entry":[{},"calculates a random number bounded by the number of"]},{"entry":[{},"subscribers and sends the message to the subscriber"]},{"entry":[{},"that has been picked. There is no guarantee for fair"]},{"entry":[{},"distribution of messages over a short period of time."]},{"entry":["AllSubscribers","The message is distributed to all subscribers currently"]},{"entry":[{},"registered with the Router."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"An Overflow element indicates the handling of messages in case the buffer reached capacity and the BufferTimeout expired. The options are to reject the incoming message, to remove and drop the message sitting at the top of the queue to make room for the incoming message or to drop the incoming message.",{"@attributes":{"id":"p-0104","num":"0103"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RejectIncomingMessage","Rejects the incoming message by faulting back"]},{"entry":[{},"to the sender."]},{"entry":["DropIncomingMessage","Accepts the incoming message towards the"]},{"entry":[{},"client, but the message is immediately"]},{"entry":[{},"discarded internally"]},{"entry":["DropExistingMessage","The topmost message(s) residing in the queue"]},{"entry":[{},"are dropped to make room for the incoming"]},{"entry":[{},"message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"A PushDeliveryRetries element is a 32-bit number indicating how many times a send-agent for a particular subscription will retry delivery of a single message until it gives up. A goal for permitting retries to address scenarios where the subscriber is restarting or sits inside a load balanced web service farm where one of the target systems is unavailable but not yet taken out of the load balancer rotation. When the number of delivery retries is exhausted and the message cannot be delivered, the subscription is considered stale and is automatically removed from the system. If the subscription was registered with an \u2018EndTo\u2019 notification endpoint, a termination notification is sent to the given endpoint.","A PushDeliveryTimeout element indicates the time-span permitted for delivering a message in a single Push delivery attempt. The maximum value should be informed by the least responsive and slowest expected subscriber, but must not exceed a system configured value that is informed by system constraints and the maximum permitted message size on the Junction.","Still other policy elements are more specifically applicable the router role of a junction and specify particular rules and constraints for a router.","An EnqueueTimeout element indicates how long a send operation into a Queue is permitted to \u2018hang\u2019 and backpressure packets into the client in case the queue currently is at capacity and can't take any more messages. Once the timeout expires and the message could not be placed into the queue, further message handling depends on the Overflow policy element. An EnqueueTimeout element ties an inbound connection to a network infrastructure and should therefore be balanced between the need of reducing the risk of a Denial-Of-Service attack against the system and the ability to provide some elasticity for the solution to deal with temporary traffic spikes.","A MaxConcurrentReaders element holds a 32-bit integer indicating how many readers are at most permitted on a queue at any given point in time. The value of this element must be equal to or greater than 1 if the element is included in the policy. If the value is 1 or is otherwise constrained to less than \u2018unlimited\u2019 readers, all readers will have to acquire a temporary reader-lease before they are permitted to read messages. Limiting the number of readers is essential if the system must avoid that messages may get processed out of order.","A MaxDequeueRetries element is a 32-bit number indicating how many times a particular message can be \u2018peek-locked\u2019 and released back into the queue. If the number of retries for a given message exceed this policy value, the message is considered to be \u2018poisonous\u2019. Poison messages are sent\u2014in a single try and with a fixed timeout\u2014to the Endpoint indicated by the PoisonMessageDrop endpoint-reference element.","A MaxMessageAge element indicates the maximum time-span a particular message may remain in a queue. If a message sits in the queue for longer than the indicated timeout the message is automatically removed. This is independent of an expiration time that may be set anywhere inside the message. Messages that are considered expired on the application level may still be delivered if they are not considered expired by the queue.","A MaxQueueLength element indicates how many messages the Queue may hold at any given point in time. The value must be a non-zero (positive) number. The system is free to adjust the maximum queue length to a configuration imposed upper or lower boundary. The initial queue implementation, may, for instance not have the ability to constrain the maximum buffer length but merely be capable of turning the buffer on and off.","A MaxQueueCapacity element holds a 64-bit number greater than zero indicating how many bytes a queue is permitted to hold overall\u2014including system-imposed overhead, message framing information, and framing headers. This capacity number is expected to count towards the user's service plan allocation. The system can initially override any non-zero value provided for this value and set it to a system-inherent per-queue capacity limitation.","An Overflow element indicates the handling of messages in case the buffer reached capacity and the BufferTimeout expired. The options are to reject the incoming message, to remove and drop the message sitting at the top of the queue to make room for the incoming message or to drop the incoming message.",{"@attributes":{"id":"p-0115","num":"0114"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["RejectIncomingMessage","Rejects the incoming message by faulting back"]},{"entry":[{},"to the sender."]},{"entry":["DropIncomingMessage","Accepts the incoming message towards the"]},{"entry":[{},"client, but the message is immediately"]},{"entry":[{},"discarded internally"]},{"entry":["DropExistingMessage","The topmost message(s) residing in the queue"]},{"entry":[{},"are dropped to make room for the incoming"]},{"entry":[{},"message."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The PoisonMessageDrop is an optional endpoint-reference element that provides the queue with a location where it can send messages that are considered poisonous. The endpoint-reference may point to an external, directly reachable drop location or to a different Service Bus Junction.","Embodiments of the invention provide a common infrastructure for management and one way message routing that can accommodate a set of related but conceptually different message delivery protocols. Embodiments facilitate the essentially simultaneous creation and configuration of a junction at a location within a namespace. As a result, messaging related functionality can be more efficiently and uniformly added to a namespace. Additionally, embodiments of the invention include junctions that indicate roles and store behaviors and constraints for roles locally. Thus, computer systems desiring to utilize messaging related functionality can access the junction and utilize messaging related functionality provided at the junction without having to refer to other locations in a namespace (e.g., to perform lookups). Accordingly, embodiments of the invention reduce the resource and network bandwidth consumption associated with adding and utilizing messaging related functionality to a network infrastructure.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In order to describe the manner in which the above-recited and other advantages and features of the invention can be obtained, a more particular description of the invention briefly described above will be rendered by reference to specific embodiments thereof which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments of the invention and are not therefore to be considered to be limiting of its scope, the invention will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
