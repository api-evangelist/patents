---
title: System and method for converting management models to specific console interfaces
abstract: A system and method for converting management models to specific console interfaces is provided. A plug-in builder process is used to read a management definition object. The plug-in builder process derives display information and method information from the management definition object. Console interface information is used to take the management definition object and transform it into a format suitable for the selected consoles. The management definition object information includes information used to display tree nodes in a management console. The plug-in builder process retrieves methods from the management definition object that corresponds to the displayed nodes. In this manner, when a user selects a tree node from a management console, the method included in the management definition object that was written to support the displayed node is executed. National language files can be used by the plug-in builder process in order to support various national languages used by users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07065744&OS=07065744&RS=07065744
owner: International Business Machines Corporation
number: 07065744
owner_city: Armonk
owner_country: US
publication_date: 20020114
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to the following co-pending U.S. Patent Applications filed on the same day as the present application: \u201cSystem and Method for Mapping Management Objects to Console Neutral User Interface,\u201d by Barker, Diller, Gay, Hedstrom, Persche, Salahshoor, and Thorpe (application Ser. No. 10\/046,940); \u201cSystem and Method for Managing Translatable Strings Displayed on Console Interfaces,\u201d by Barker, Diller, Hedstrom, Persche, Salahshoor, and Thorpe (application Ser. No. 10\/047,793); \u201cSystem and Method for Obtaining Display Names from Management Models,\u201d by Barker, Diller, Hedstrom, Persche, Salahshoor, and Thorpe (application Ser. No. 10\/047,784); and \u201cSystem and Method for Packaging and Installing Management Models with Specific Console Interfaces,\u201d by Barker, Diller, Hedstrom, Persche, Salahshoor, and Thorpe (application Ser. No. 10\/047,312). The present application and each of the related applications have been assigned to the IBM Corporation.","1. Field of the Invention","The present invention relates to a system and method for providing interfaces between management models and system consoles. More particularly, the present invention relates to a system and method for creating interface files to link a generic management model to one or more specific console interfaces.","2. Description of the Related Art","There is an industry trend toward using standardized software engineering tools and techniques to represent the design of systems to manage real world objects. One such approach is using the Unified Modeling Language (UML) and a derivative of UML called the Common Information Model (CIM). Using UML and CIM, developers can describe a computer information system that is not bound to a particular implementation or platform. CIM includes both a CIM Specification and a CIM Schema and UML is generally used to show the structure of the schemas.","The CIM Specification includes a language model, naming conventions, meta schema, and mapping techniques used to map the CIM data to other management models including SNMP, MIBs, DMTF, and MIFs. The CIM Schema includes a set of classes with associations that provide a well understood conceptual framework within which it is possible to organize the available information about the managed environment.","The CIM Schema includes three layers. First, the Core Schema includes an information model that captures notions that are applicable to all areas of management. Second, the Common Schema includes notions that are common to particular management areas but independent of a particular technology or implementation. There are generally five Common Schema areas: (1) systems, (2) applications, (3) networks, (4) devices, and (5) physical areas. The third CIM Schema layer is the Extension Schema area which includes technology specific extensions of the Common Schema. The Extension Schema area may be specific to a particular operating environment, such as a UNIX operating environment. The Extension Schema may further describe either a specific-general type of environment (i.e., an MS-Windows\u2122 environment, a UNIX-90 environment, etc.), or a product specific operating environment (i.e., Windows 2000 Professional\u2122, IBM AIX version 3.5, etc.).","While CIM includes notations and conventions that are widely agreed upon in industry, a CIM model does not provide information for product development because a CIM model is implementation independent, meaning that a common CIM model can be used as a design starting point to develop systems in a particular operating environment. A CIM model may be stored in a Managed Object Format (MOF) file, which is an ASCII file that includes a formal definition of the CIM Schema. The MOF is used as input to a MOF editor, parser, and compiler. CIM is produced by designers and developers to model a product. The CIM model is then used by others as input to management systems. However, the process of using a CIM model as input to management software is a resource intensive task. A challenge, therefore, with the prior art is the time and resources needed to design a system using CIM and write programs directed towards a particular operating environment.","Management consoles, such as the Microsoft Management Console (MMC), the AS\/400 System Console, the Tivoli Console, and WebSM\u2122, allow common applications from which a user views and manipulates data associated with a software program or device that is accessible by the console. Another challenge in the current art is that a CIM model that models a computer information system is generally unable to interface with a management console without writing separate programs that implement the computer information system and interface with one or more of the available management consoles. What is needed, therefore, is a system and method that allows developers to describe a system once in a model (such as a CIM model) and provides interfaces from the model to one or more management consoles without the need of additional programming.","It has been discovered that a framework for supporting multiple consoles addresses the aforementioned challenges. A plug-in builder process is used to read a management definition object, such as a CIM MOF file. The plug-in builder process derives display information and method information from the management definition object. The developer can specify one or more management consoles, such as the Microsoft Management Console (MMC), the Tivoli Console by IBM, the AS\/400 system console, and the AIX\u2122 system console (WebSM\u2122) The plug-in builder process includes information about management consoles, such as console interface information. This interface information is used to take the management definition object and transform it into a format suitable for the selected console(s).","The plug-in information is sent to customers for use with the customer's system. The customer can select from a list of available consoles that the customer wishes to use to manage a product corresponding to the management definition object. For example, one customer may choose to install the MMC plug-in files because he uses the Microsoft Management Console, while another customer may install the Tivoli Console plug in files for use by the Tivoli Console by IBM. In this manner, customers can use a preferred console.","The management definition object information includes information used to display tree nodes in a management console. The plug-in builder process also retrieves methods from the management definition object that corresponds to the displayed nodes. In this manner, when a user selects a tree node from a management console, the method included in the management definition object that was written to support the displayed node is executed.","In addition, national language files can be used by the plug-in builder process in order to support various national languages used by users. Display information is extracted from the management definition object and placed in translation template files. Manual and automated processes are performed on the translation template files translating the extracted display information into one or more national languages. The national language information is provided to the customer along with the console plug-in information so that the customer can choose a preferred national language to use along with a preferred management console.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention which is defined in the claims following the description.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1","b":["100","105","110","110"]},"Definition support files  include other files, such as national language support (NLS) files and graphical user interface displays that are external to MOF  yet used to create the distributable media. Console plug in data  includes information about specific management system consoles. This data is used to create an interface, or plug-in, between the distributable media and one or more management system consoles (management system consoles are products such as Microsoft Management Console (MMC), the Tivoli Console by IBM, the AS\/400 system console, and the AIX\u2122 system console (WebSM\u2122)). Extension files, as used herein, include the plug-in files which are asapted to interface with a particular console interface. Extension files are asapted to perform a generic management object on a selected console interface.","Create distributable media  is a process that uses management definition object , product properties , definition support files , and console plug-in data  to create distributable media (for details regarding create distributable media process  see ). The result of create distributable media process  is master media . Master media  is stored on a nonvolatile storage device, such as a hard drive, CD-R\/RW, optical or magnetic storage, or nonvolatile memory. Replicate distribution media  is a process that replicates master media . The replication may be onto another nonvolatile storage device, such as a CD-R\/RW or other removable media, or the replication can be made into a data stream for transmitting to a customer. Send copy of media to customers  is a process that sends a replicated copy of the distribution media resulting from process  to the customer. If a tangible, removable media is created, send process  may physically package the removable media and send product media  to the customer through the mail or other parcel service. On the other hand, if the media is a data stream, then send process  transmits the data stream that includes the product to the customer through a computer network, such as the Internet, or using a modem that connects the software manufacturer's computer system to the customer's computer system.","Customer process  commences with the customer receiving the product and running a setup program included with the product (step ). The receipt may be a tangible receipt of a removable nonvolatile storage device, such as a CD-R\/RW disc, that is placed in a customer device, such as a CD-ROM drive, in order to install the product. The receipt may also be by the receipt of a data stream over a computer network or modem connection through which the product data is stored on the customer's nonvolatile storage device, such as a hard drive or nonvolatile memory accessible by the customer's computer system.","Executing the setup program included with the product allows the customer to select from one or more available consoles (step ). The number of consoles the customer selects depends upon (i) the number of consoles for which the software manufacturer enabled the product to interface (defined by product properties  and console plug-in data ), and (ii) the number of consoles that the customer uses or plans to use. For example, if the software manufacturer enabled the product to be used with four consoles, those four consoles would be selectable by the customer. If the customer has a particular console of choice, such as the Tivoli console, then he selects his preferred console and does not install plug-in files associated with the other consoles. The selected console plug-in(s) are installed on the customer's computer system (step , see  for further customer installation details). The installed plug-in components are registered with the applicable consoles (step ) so that the consoles recognize the installed plug-in components and the installed product when used by the customer.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 2","FIGS. 8 and 9"],"b":["200","205","210","220","215","225","230"]},"A default set of NLS translation templates are generated (predefined process , see  for further processing details). NLS templates  are used by translators during translate step  in order to generate national language translations  that can be used to provide support for multiple languages.","A determination is made as to whether one or more of the automatically generated panels need to be modified (decision ). If one or more panels need to be modified, decision  branches to \u201cyes\u201d branch  whereupon a user modifies the panels (step ) stored in panel files data store . On the other hand, if none of the automatically created panels need to be modified, decision  branches to \u201cno\u201d branch  bypassing panel modification steps.","Console plug-in data  includes information describing interfaces to various consoles. This data is used to generate plug-in components that can operate with the selected consoles (predefined process , see  for further processing details). The generated plug-in components are stored in plug-in components data store  for eventual packaging.","When the panels have been created, the plug-in components have been created, and the translation strings have been translated into the desired languages, the plug-in components, panels, and languages are packaged (predefined process ) and stored onto distributable media package  for eventual distribution to customers. Note that predefined process  can be iteratively invoked. For example, a single-language version may be initially packaged. When translation is completed, other NLS versions can be created or a new version can be packaged that allows the customer to choose between the various available languages. In addition, it will be appreciated by those skilled in the art that some processing and packaging is performed at an early stage (i.e., before the code is delivered to the customer) in order to improve efficiency. It will be appreciated that many of the steps described above could be performed at runtime on the customer's computer system by reading the MOF file during runtime and processing the MOF file data accordingly. Create distributable media processing subsequently ends at .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":["300","305","310","330","340","325","340","340","330","330"]},"The first console for which plug-in components will be generated is selected (step ) from product properties data store . Specific runtime algorithms that apply to the selected console are read (step ) from specific console runtime algorithms data store . The generated console plug-in component is compiled into an executable entity (step ) that is able to use the mapping model from the management definition object (MOF) and interface with the selected console. The resulting executable entity is stored in executable plug-in components data store  for eventual packaging and distribution to a customer.","A determination is made as to whether there are more consoles for which executable plug-in components are needed (decision ). If there are more consoles, decision  branches to \u201cyes\u201d branch  whereupon the next console is selected (step ) from product properties data store  and processing loops back to process the selected console. This looping continues until there are no more consoles to process, at which point decision  branches to \u201cno\u201d branch  and processing ends at .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["400","400","410","410","400"]},"CIM Repository  (or \u201cCIM-OM\u201d for CIM Object Manager) receives data from transformation engine . While CIM Repository  is shown as a system, it may include only certain types of management object data depending which models have been loaded into the CIM-OM at a given time. In one embodiment, a set of Application Programming Interfaces (APIs) is used to extract the data shown from a MOF that includes a CIM model. These APIs, called CIM Object Manager (CIM-OM) APIs are able to extract various information from a CIM-OM that includes a CIM model.","The various types of information extracted from management data object  and included in CIM Repository  include relationship information , object properties information , categories information , product monitors information , product methods and operations information , life cycle information , and national language support (NLS) information .","Relationship information  includes information that can be used to display information in a tree control on a management console. For example, a root node may have zero, one, or more child nodes. The child nodes each describe a different aspect, or subject, pertaining to the root nodes. Each of the child nodes also has zero, one, or more child nodes (\u201cgrandchildren\u201d of the root node), which include more detailed information pertaining to their parent. These relationships and tree levels can be quite deep and include large quantities of information pertaining to the management data object. See  for further details regarding tree node processing.","Returning to , object properties information  include information about the various objects included in the management data object. Object properties may include the object's name, data type, and other information that pertains to individual objects. Object properties include data element names that correspond to the object. In addition, object properties also include qualifiers that are used to group one or more data elements. Other object properties may specify valid data types and values that correspond with one or more data elements, as well as list items that are used to allow the user to select from a list of valid values. These qualifiers, data element names, and data element attributes are used to display GUI panels from a management console allowing a user to view and manipulate values associated with the product (see  for an example GUI panel). Examples of properties include caption, description, node name, states (e.g., started, stopped), modes (e.g., Start Mode), and the names of parameters to a particular method. Property names are usually designated by designers of the CIM model, rather than being fixed or predetermined.","Category information  includes categorical information that pertains to the management data object. Examples of categories include Identification, Configuration Setting, Consumption, Status, Activity, and Unknown.","Product monitors information  include information used to monitor the management system described by the management data object. These monitors are used to gather information about the management system and display it to a user that is using a management console.","Product methods and operations information  include method and operation information about objects that are used to start the object, stop the object, add a new object, delete an instance of an object, etc. A user makes requests regarding objects displayed on a management console, such as in a tree view. Menus are dynamically created that allow the user to perform operations (start, stop, add, etc.) with the object. The identified methods are used to perform the operation requested by the user.","Lifecycle information  includes information regarding an object's current status that determine what operations can be performed against the object at a given point in time. For example, an object that is already started may be stopped but cannot be created because it has already been created. Other rules may be included in lifecycle information  so, for example, a given object, once it is started, may have to be stopped before it can be deleted.","National language support (NLS) information  includes information for accessing national language support data when enabled. National language support provides translated strings that are included on display panels in order to convey information to the user in a language of the user's choice. NLS information may include the various languages that are supported as well as information identifying the name and location of files that include the translated strings.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["505","510","515","520"]},"Console Plug-In Builder  processes the MOF files corresponding to the various products and creates plug-in components for various management consoles. Each product can be used to generate plug-in files for one or more of the available management consoles. For example, Product A  may be processed by Console Plug-In Builder  to create plug-in components (Product A files ) for all available consoles (in the example shown, the available consoles include Tivoli Console , AS\/400 Console , Microsoft Management Console , and WebSM\u2122 Console ). On the other hand, Product B  may be processed in order to create plug-in components (Product B files ) for Tivoli Console , AS\/400 Console , and WebSM Console . Product C  and Product n  may also be processed to create plug-in components (Product C files  and Product n files ) for all available consoles.","When a user installs the various products, a display is provided to allow the user to select which of the available management consoles the user wishes to use. If the user wishes to use the Tivoli Console, then plug-in components for Tivoli Console  are processed to interact with the Tivoli Console that is available on the user's computer system. In the example described above for Product A where plug-in components for four system consoles were created, the user can select which of the four consoles he wishes to use. The user may select to install the plug-in components for Tivoli Console  and Microsoft Management Console , in which case the selected console plug-in components are installed from plug-in components for Tivoli  and plug-in components for MMC .  includes details regarding the customer plug-in installation process.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 6","b":["600","610","605","620"]},"Upon running the setup program, the setup program displays a list of available consoles (step ) with which the product can interface. The list of available consoles depends upon which consoles the software manufacturer selected when performing console builder operations (see  for further details). The list of available consoles is displayed in display panel . In the example shown in display panel , the product that the customer is installing has plug-in components that allow the product to operate with the Tivoli Console, the AS\/400 Console, the Microsoft Management Console (MMC), and the WebSM Console. The customer selects one or more of the available consoles depending upon the consoles available on the customer's system or those consoles the customer is planning to install. In the example shown, the customer has selected the Tivoli Console and the Microsoft Management Console. When the customer is finished with his selections, he presses \u201cOK\u201d whereupon the setup program receives the customer's selections (step ).","The first console that was selected by the customer is processed (step ) whereby console files located on product media  are loaded onto the customer's computer system. After the console plug-in components are loaded onto the customer's computer system, APIs corresponding to the installed plug-in components are registered with the console (step ) so that the console is able to invoke the plug-in components and interface with plug-in component data.","A determination is made as to whether there are more consoles that the customer selected (decision ). If there are more selected consoles that need to be processed, decision  branches to \u201cyes\u201d branch  which loops back to process the next selected console (step ) by installing the console plug-in components and register the console plug-in components with the console. This looping continues until there are no more selected consoles, at which point decision  branches to \u201cno\u201d branch  and processing ends at .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 7","b":["700","705","710"]},"A selection is received from the user (step ). A determination is made as to whether the user requested to end console processing (decision ). If the user requested to end console processing, decision  branches to \u201cyes\u201d branch  whereupon the console is stopped and processing ends at . On the other hand, if the user's request is not to end console execution, decision  branches to \u201cno\u201d branch  in order to process the user's request.","A determination is made as to whether the user has selected to navigate the tree control displayed on the management console (decision ). If the user selected navigation of the tree control, decision  branches to \u201cyes\u201d branch  whereupon tree navigation is performed (step ) and processing loops back to receive the next user selection. On the other hand, if the user did not select navigation of the tree control, decision  branches to \u201cno\u201d branch  to identify and process the user's selection.","A determination is made as to whether the user has requested a menu (i.e., a popup menu) from the management console (decision ). If the user selected a menu, decision  branches to \u201cyes\u201d branch  whereupon the selected menu is displayed (step ) and processing loops back to receive the next user selection. On the other hand, if the user did not select a menu, decision  branches to \u201cno\u201d branch  to identify and process the user's selection.","A determination is made as to whether the user has requested a menu selection (i.e., a selection from a popup menu) from the management console (decision ). If the user did not select a menu selection, decision  branches to \u201cno\u201d branch  which loops back to identify and process the next user selection. On the other hand, if the user did select a menu selection, decision  branches to \u201cyes\u201d branch  to process the user's menu selection. Another determination is made as to whether more information is needed in order to process the user's selection (decision ). If more information is needed, decision  branches to \u201cyes\u201d branch  whereupon a GUI panel is displayed and additional information is received in order to process the selection (step ). In addition, step  may also communicate with the product's service provider, as shown, to obtain information included in the GUI panels. If no more information is needed, decision  branches to \u201cno\u201d branch  bypassing the generation and display of additional GUI panels.","The user's menu selection is executed (step ). Execution of the user's menu selection may include backend processing with a service supplied by the product being administered by the management console session (step ). For example, if the user chose a method to execute, a request is sent to the product's service provider requesting that the method be executed. The service provider executes the method on the product and returns the results for display to the user. For instance, if the user chooses to \u2018drop\u2019 a selected DB\/2 database table, the DB\/2 service provider is sent a request to drop the selected table. The actual dropping of the table is done by the service provider. The product returns the requested information and the information is displayed on the user's display, such as information retrieved and displayed in a popup menu. Processing loops back (loop ) to process the next user selection. This looping continues until the user selects to end the console process, at which time decision  branches to \u201cyes\u201d branch  and processing ends at .",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 8","b":["800","820","810"]},"Generic integration layer  includes generic representations of the management data. Transformation engine process  processes the CIM model or pseudo code to create formatted management data structure . In a CIM implementation, a variety of available APIs are used to transform the CIM model into a formatted representation (see  for details regarding the formatted representation). Translation engine process  is used to process formatted management data structure  to create generic constructs  that are independent of any specific console. Generic GUI constructs  include both display and processing constructs. In one embodiment, the display constructs include graphical user interface (GUI) panels in a generic format, such as using Java or extensible markup language (XML) that can be processed on a variety of computer systems irrespective of the operating environment, or operating system, used by the computer system.","Specific console display layer  manages the display and behavior of the management data on a specific console. Console plug-in builder process  processes generic constructs  to create specific plug-in components  that are built for a specific console. Application programming interfaces (APIs) used to invoke the specific plug-in components are registered with specific console application  so that the display and processing constructs included with the plug-in components are accessible from the specific console application. The user executes specific console application  whereby management data is displayed and manipulated by the user on console display  (see  for further details regarding display and handling of registered plug-in components).",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 9","b":["900","910","910","910","920","930"]},"Display panel  includes a number of display attributes that were originally derived from the management definition object written for the management system product. Display  shows a number of menu tabs  used as containers in order to group management data. Qualifier names from the management definition object are used to create tab values displayed on menu tabs . In one embodiment, qualifiers named \u201ccategory\u201d are used to form the tab values. In addition, if national language support (NLS) is being used, the values of qualifier names  are retrieved from translated strings within NLS data files.","Data element names  are displayed on display panel  within a given qualifier located within the management data object. If national language support is being used, data element names  are retrieved from translated strings within NLS data files. Values associated with the various data elements are displayed in text boxes  and list boxes . Data displayed in text boxes and list boxes is retrieved from the management information system. If permitted by the management information system, the user can manipulate the values. The extent that the user can change values can also be set by the management data object so that minimum, maximum values, data types (i.e., integer, numeric, alphanumeric, etc.) can be enforced as well as valid values (i.e., numeric value from 0 to 5). List boxes  retrieve list elements from the management data object. The list elements display the valid values from which the user can select. The user can select a different tab label () to view and manipulate the data elements and values that correspond to other qualifier values.","In addition, data from external data sources  can be retrieved from the management data system (e.g., from a database or other data store). In many cases, the product being administered is the provider of external data sources . For example, display panel  may show details of certain product status information. In such a case, external data sources  might be used to display status information related to the product being administered. Details regarding external data sources  is defined in the management data object. In this manner, dynamic data that represents operations currently taking place in the computer system can be displayed and manipulated through display .",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 10","b":["1000","1005"]},"There are two variations of this process, one is runtime, the other is used to make a one time traversal of the tree. The one time traversal is not necessary unless preprocessing is desired where NLS strings, dialogs, menus, helper code etc are generated at build time and then made available at run time. This root class (and any subclasses) are processed (step ). All associations that include the current class are identified (step ). An association as defined in CIM includes linkages between classes or instances of classes. These linkages are called Roles. Each role has a name and a class type as well as other qualifiers. One of the potential qualifiers used in this algorithm is the WEAK qualifier. The first identified association is processed (step ). A determination is made as to whether the source instance is weak (decision ). Again, \u201cWeak\u201d is a CIM definition used to describe a relationship. The weak part of an association is identified by the \u201cWEAK\u201d qualifier. Part of the definition of WEAK is that the weak object does not exist without the other object in the association. For example, Database Tables usually only exist inside a database. This association is checked to ensure that the Source class is not contained by the target class. Only associations where the Source class contains the target class (or associations where there is no containment) are followed for tree node processing. If the source instance is weak, processing ignores this association. In this case, decision  branches to \u201cyes\u201d branch  whereupon another decision is made as to whether there are more associations to process (decision ). If there are more associations, decision  branches to \u201cyes\u201d branch  whereupon processing loops back to handle the next association (). This looping continues until there are no more associations, at which point decision  branches to \u201cno\u201d branch  and processing ends at . However, if one-time traversal is being used, a record is kept for each target class that was processed. This list of target classes is then compared at this time to a list of classes processed as the root class. All those not having already been processed as a root are now processed, and the list of processed classes is updated.","Returning to decision , if the source class is not weak, decision  branches to \u201cno\u201d branch  to further process the association. A determination is made as to whether the association is a complex or a simple association (decision ). If the association is a complex association, decision  branches to \u201cyes\u201d branch . A complex association is one in which there are three or more classes in the association or an association between a class and itself. For example, groups can contain groups, so this would be a complex association. The complex association uses a tree model where the nodes in the tree represent the Association Name, a sub-node for each Role in the association, and finally nodes for instances of each class to which the Role points (predefined process ). A determination is made as to whether there is a loopback reference (decision ). A loopback reference is where a class is associated to itself as in the \u201cgroup\u201d example described above. A particular group can both be in a group, and, contain other groups. Because of these possibilities, all the Roles of the association are displayed, and thus the reason for decision . If there is a loopback reference, decision  branches to \u201cyes\u201d branch  whereupon the reference\/role that matches the source class is displayed (step ). If there is not a loopback reference, decision  branches to \u201cno\u201d branch  bypassing loopback reference processing.","Returning to decision , if the association is a simple association (rather than a complex association described above), decision  branches to \u201cno\u201d branch . The simple association is recorded and organized by target class (step ). A decision is made as to whether there are more associations to process (decision ). If there are more association, decision  branches to \u201cyes\u201d branch  whereupon processing loops back to handle the next association (). This looping continues until there are no more associations, at which point decision  branches to \u201cno\u201d branch  whereupon simple associations are processed (predefined process , see  for further details) and processing ends at .",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 11"},"Processing commences at  whereupon the first target class is identified for the association (step ). The number of associations to the target class is calculated (step ). The number of association can be calculated by incrementing the number of association for the given class. A determination is made as to whether there are more target classes (decision ). If there are more target classes, decision  branches to \u201cyes\u201d branch  which identifies the next target class (step ) and loops back to process the next target class. This looping continues until there are no more target classes, at which point decision  branches to \u201cno\u201d branch  (i.e., the number of associations to each target class has now been calculated).","The first target class is processed (step ). A determination is made as to whether there is only one association to the target class (decision ). If there is only one association to the target class (i.e., class.association=1), then decision  branches to \u201cyes\u201d branch  whereupon the target class refers to the last association (step ). In this case, a Node is added to the display tree representing the class. Any instances of the class are then added as nodes below this \u201cclass node.\u201d","On the other hand, if there is more than one association to the target class, decision  branches to \u201cno\u201d branch  whereupon the tree representation uses a class node (step ) Association nodes are added to the class module. Each association node contains the appropriate Role Nodes. Instance nodes of the classes are added under each Role node. The Role Node for the source class is not added.","A determination is made as to whether there are more target classes to process (decision ). If there are more target classes to process, decision  branches to \u201cyes\u201d branch  which retrieves the next target class (step ) and loops back to process the next target class. This looping continues until there are no more target classes to process, at which point decision  branches to \u201cno\u201d branch  and processing ends at .",{"@attributes":{"id":"p-0089","num":"0088"},"figref":["FIG. 12","FIG. 15"],"b":["1200","1205"]},"A determination is made as to whether it is possible to create other objects from this node (decision ). If it is possible to create other objects from this node, decision  branches to \u201cyes\u201d branch  whereupon the create menu options are included (step ) (i.e., the creatable menu items include the class of the source node itself, and any of its subclasses, etc.) and the creation method is included in the node's popup menu (step ). On the other hand, if it is not possible to create other objects from this node, decision  branches to \u201cno\u201d branch  bypassing the creation steps.","A determination is made as to whether there are any methods that should be included in the node's popup menu (decision ). If there are no methods, decision  branches to \u201cno\u201d branch  bypassing the method inclusion steps. On the other hand, if there are methods to include, decision  branches to \u201cyes\u201d branch  whereupon the first method in the menu is identified (step ) and included in the popup menu (step ). The methods are retrieved from the management model (e.g., MOF file). A determination is made as to whether there are more methods to include in the menu (decision ). If there are more methods in the menu, decision  branches to \u201cyes\u201d branch  which loops back to identify the next method in the menu (step ) and include the identified method in the popup menu (step ). This looping continues until there are no more methods to include in the popup menu, at which point decision  branches to \u201cno\u201d branch .","Another determination is made as to whether it is possible to delete nodes from the current node (decision ). If it is possible to delete nodes from the current node, decision  branches to \u201cyes\u201d branch  whereupon a class\/association is determined for the deletion method (step ), and the deletion method is included in the popup menu (step ). On the other hand, if it is not possible to delete nodes from the current node, decision  branches to \u201cno\u201d branch  bypassing the deletion steps. Tree node processing subsequently ends at .",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 13","b":["1310","1320","1350","1330"]},"Generated plug-in files  may include one or more containers, such as a directory or package file (i.e., a \u201czip\u201d file or a Java \u201cjar\u201d file) that contains multiple files. In the example shown, generated plug-in files  include First Jar , Second Jar , and Other Jar(s) . Each of the Jar files include a number of generated plug-in files that can be installed by a user to support various processing. For example, First Jar  may be configured to support a particular type of installation, for example a Tivoli Enterprise Console installation, and Second Jar  may be configured to support another type of installation, for example a Microsoft Management Console (MMC) installation. Other Jar(s)  may be configured to support other consoles or other types of installations.","Each Jar includes a number of different types of files, or objects. For example, each Jar can include a subdirectory that includes a number of executable files, another subdirectory that includes a number of dynamically linked libraries (DLLs), as well as other subdirectories that include text (including translated strings for NLS support), bitmaps, and other types of files. Generated plug-in files  may be stored on a distributable media, such as a removable nonvolatile storage media, for distribution to a customer. Generated plug-in files  may also be transmitted electronically through a computer network or other telecommunications means to a customer. The customer then uses generated plug in files to select desired installation options. Depending on the customer's chosen installation options, one or more Jars included in the generated plug-in files will be used to install plug-in files",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 14","b":["1400","1410"]},"One or more translation templates  are prepared depending upon the number of language translations included in the CIM model. A determination is made as to whether translation will be performed for other languages (decision ). If there will be no translations, then translation templates are optionally used and processing branches to \u201cno\u201d branch  and processing continues at . On the other hand, if the developers of the product wish to perform additional translations, decision  branches to \u201cyes\u201d branch  whereupon a translation process is performed (process ). During the translation process, the translation templates are used by translators to create translated strings in various languages. The various language translations are stored in various files. In the example shown, the translated national language support (NLS) files include translated files for country A , country B , and country C . In addition, the CIM specification allows for translated strings to exist inline within MOF file . These were extracted from the CIM model to create a language template for each language found in the model.","Generate runtime files process  is used to create runtime files using the logic found in MOF file  along with the translated strings found in NLS files (, , and ) as well as potential translated strings found in MOF file . A determination is made as to whether separate runtime files are needed for the various national language (decision ). In some cases separate runtime files are not needed for each country. In this case, decision  branches to \u201cno\u201d branch  and the translated files are added to a common file, such as Java resource bundle , which includes translations for all countries. In other cases, separate files are needed for each country. In this case, decision  branches to \u201cyes\u201d branch  whereupon separate runtime files are created for each country (runtime files for country A , country B , and country C ). When a customer installs the generated plug-in files he can now choose a national language from among the supported languages so that the national language of choice is used to display menus and other display panels to the user. The national language items for display will then either be pulled from a common resource bundle (i.e., Resource Bundle ), or from a runtime package that includes the selected language (i.e., runtime files for country A , country B , and country C ).",{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 15","b":["1500","1504","1505","1502","1515","1515","1518","1520"]},"If the element does include a predefined display name qualifier, decision  branches to \u201cyes\u201d branch  whereupon the appropriate NLS'd version of the display name qualifier from the CIM is used for the display name. On the other hand, if the predefined display name qualifier is not found, decision  branches to \u201cno\u201d branch  whereupon the appropriate NLS'd version of the CIM element name is used as the display name (step ).","To retrieve the appropriate NLS'd version of the display name (in each applicable process described herein), the system checks whether the CIMOM (CIM Object Manager) has a language translation for the name actually embedded in the CIM. If this is found, then the embedded name is used. If this is not found, then the NLS files are checked to see if the name is included for the appropriate language. If the name is included in an NLS file, the name found in the NLS file is used, otherwise the default version of the name is used.","Returning to decision , if the element is an instance element, decision  branches to \u201cyes\u201d branch  whereupon a determination is made as to whether the instance element includes a qualifier that defines the display name, in other words qualifier of \u201cDisplayName\u201d (decision ).","If the element does include a display name qualifier, decision  branches to \u201cyes\u201d branch  whereupon the NLS'd version of the display name qualifier is used for the display name. On the other hand, if there is no display name qualifier, decision  branches to \u201cno\u201d branch  whereupon a determination is made as to whether there are more than one non-propagated key properties (decision ). If there are more than one non-propagated key properties, decision  branches to \u201cyes\u201d branch  whereupon the display name is constructed from each non-propagated key (step ). A key property is part of a larger identifier that is used to uniquely identify an element. A non-propagated key value means that the particular value is not being passed down from a parent object to the element. The construction of the display name is performed by specifying the national language translated string corresponding to the key property name followed by an equal sign (\u201c=\u201d) which is followed by the value of the property with commas separating the name\/value pairs from one another. For example, in a database example with more than one database and table being used, a constructed display names may appear as \u201cDatabase=Sales,Table=Expenses\u201d and \u201cDatabase=Products,Table=Catalog.\u201d On the other hand, if there is not more than one non-propagated key property, decision  branches to \u201cno\u201d branch  whereupon the value of the property (e.g. \u201cExpenses\u201d) is used as the display name (step ).","After the element has been processed and the appropriate name has been retrieved as described above, the retrieved display name is returned (step ) to caller  through element response . Processing subsequently ends at .",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 16","b":["1600","1604"]},"A determination is made as to whether the tree node is an instance of an object (decision ). If it is an instance of an object, decision  branches to \u201cyes\u201d branch  whereupon a list of methods corresponding to the tree node are retrieved (step ). The tree node methods may be retrieved from a managed object format (MOF) file.","A determination is made as to whether there are methods to process corresponding to the tree node (decision ). If there are methods to process, decision  branches to \u201cyes\u201d branch  to process one of the methods. A generated display name is retrieved for the method. If there is a translated name for the method name, the translated name is retrieved (step ) from either the MOF file or from a separate translation file that includes translation strings for one or more languages. A menu item is created (step ) for the method using the retrieved method display name (obtained at step ). The menu item type is set to \u201cmethod\u201d (step ) indicating that the method item corresponds to an executable \u201cmethod.\u201d The menu item and menu item type are added to the menu's array for the tree node (step ). Processing loops back (loop ) to determine whether there are additional methods to process (decision ). This looping continues until there are no more methods to process, at which time decision  branches to \u201cno\u201d branch .","After all methods for the tree node have been processed and decision  branches to \u201cno\u201d branch , a menu item for a \u201cdelete\u201d function is created (step ). The created delete menu item is added to the array corresponding to the tree node (step ). A menu item is also created for a \u201cproperties\u201d function (step ). The created properties function menu item is also added to the array corresponding to the tree node (step ). Processing subsequently ends at .","Returning to decision , if the tree node is not an instance of an object, decision  branches to \u201cno\u201d branch . A list of creatable items is created from information included in the MOF file (step , see  for further details. A determination is made as to whether the list is empty indicating that the node has no creatable items (decision ). If the list is empty, decision  branches to \u201cyes\u201d branch  bypassing steps taken to process creatable items, whereupon an \u201cadd\u201d item is created for the tree menu (step ) along with a \u201cremove\u201d item (step ) before processing ends at .","On the other hand, if the list of creatable items is not empty, decision  branches to \u201cno\u201d branch  in order to process the list of creatable items. A determination is made as to whether there are more creatable items to process (decision ). If there are more creatable items to process, decision  branches to \u201cyes\u201d  to process the next creatable item. A display name is retrieved corresponding to the object that can be created from the tree node (step ). A translated version of the display name is retrieved from either a MOF file or a separate translation file if such a translation exists. An object class corresponding to the item that can be created is retrieved from the MOF file (step ). A menu item is created using the retrieved display name and the retrieved creation class (step ). The menu item is added to an array corresponding to the tree node for creatable items (step ). Processing loops back (loop ) to process the next creatable item. This looping continues until there are no more creatable items to process, at which time decision  branches to \u201cno\u201d branch . The create menu includes the creation of objects that are \u201cweak\u201d in the association, as well as all subclasses of that object.","A menu item is created for a \u201cNew\u201d function that can be performed from the tree node (step ). The array of creatable items that was created (see step ) is attached to the \u201cNew\u201d menu item (step ) so that a user can select \u201cNew\u201d from a context menu corresponding to the tree node and select from the list of creatable items that appear after the \u201cNew\u201d function is selected. The \u201cNew\u201d menu item is attached to the tree menu array. In addition, an \u201cAdd\u201d menu item is created for the tree menu (step ) along with a \u201cRemove\u201d menu item (step ) before processing ends at .",{"@attributes":{"id":"p-0112","num":"0111"},"figref":"FIG. 17","i":"a ","b":["1700","1710","1720","1710","1730","1720","1720","1725"]},"Tree view  shows various details regarding the products being administered by the console. For example, the selected SAMPLE database is shown to be an instance of \u201cDatabases\u201d which is shown to be included in the \u201cDB2\u201d database product. \u201cDB2\u201d is in turn contained by \u201cDatabase Manager\u201d which could include other database managers, such as LDAP and IMS. The \u201cDatabase Manager\u201d is contained by the \u201cIBM Database Sample.\u201d","Other nodes are shown to be contained by the SAMPLE database. For example, SAMPLE database  includes database tables  (table 1 and table 2). The SAMPLE database also includes database views  (view  and view ).","The selection of menu item  prompts the display of popup menu  shown in . Selection of menu item can be performed by a user clicking on the item with a mouse. Some systems use an alternative mouse click (i.e., a right button click) to display context sensitive popup menus. In addition, some systems allow a user to hold a mouse cursor over an item for a period of time whereupon the context menu is displayed. Furthermore, alternative selection means, such as with a keyboard, are also provided.","A variety of options to perform against the selected menu item are included in popup menu . Some of these options are included with the particular console being used. For example, menu items  includes console menu items that appear for nodes shown within the console. Other items are context specific, such as menu items . Each of the context specific menu items can be performed against the selected \u201cSAMPLE\u201d database. The context menu items are therefore database specific. For example, if the user wishes to view the properties for the SAMPLE database he selects \u201cProperties\u201d menu item within menu item group . Additional popup menu items may include \u201cHelp\u201d menu item  to display help (either specific to the selected database or more general help pertaining to the console), as well as \u201cProperties\u201d menu item  that provides more general properties that pertain to the console, rather than properties that pertain to the selected SAMPLE database.",{"@attributes":{"id":"p-0117","num":"0116"},"figref":"FIG. 18","b":["1801","1801","1800","1805","2","1810","1805","1815","1820","1825","1800","2","1810","1820","1805","1825","1830","1835","1825","1840","1845","1850","1855","1860","1862","1864","1866","1868","1870","1872","1840","1840"]},"BIOS  is coupled to ISA bus , and incorporates the necessary processor executable code for a variety of low-level system functions and system boot functions. BIOS  can be stored in any computer readable medium, including magnetic storage media, optical storage media, flash memory, random access memory, read only memory, and communications media conveying signals encoding the instructions (e.g., signals from a network). In order to attach computer system  another computer system to copy files over a network, LAN card  is coupled to PCI-to-ISA bridge . Similarly, to connect computer system  to an ISP to connect to the Internet using a telephone line connection, modem  is connected to serial port  and PCI-to-ISA Bridge .","While the computer system described in  is capable of executing the invention described herein, this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the copying process described herein.","One of the preferred implementations of the invention is an application, namely, a set of instructions (program code) in a code module which may, for example, be resident in the random access memory of the computer. Until required by the computer, the set of instructions may be stored in another computer memory, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive), or downloaded via the Internet or other computer network. Thus, the present invention may be implemented as a computer program product for use in a computer. In addition, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that is a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d; the same holds true for the use in the claims of definite articles."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 17","i":"a "},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 17","i":"b "},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 18"}]},"DETDESC":[{},{}]}
