---
title: Method of changing service attributes in a service logic execution environment
abstract: A method of directly changing a service attribute corresponding to a service component through a hypermedia document. The hypermedia document can provide an interface to a service logic execution environment (SLEE). The method can include providing a plurality of selections embodied in the hypermedia document. The plurality of selections can correspond to the service attribute. The method further can include receiving a user specified selection in the hypermedia document and generating a SLEE compatible event based on the user selection. The event can be of a type which the service component has been registered in the SLEE to receive. Also, the event can be routed to the service component via the SLEE. The service component can process the event and update service attribute information corresponding to the service attribute consistent with the event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07100107&OS=07100107&RS=07100107
owner: International Business Machines Corporation
number: 07100107
owner_city: Armonk
owner_country: US
publication_date: 20010530
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","This invention relates to the field of telecommunications, and more particularly, to a method of directly changing service attributes corresponding to service components.","2. Description of the Related Art","The development of the open network application programming interface (API) represents an important departure from the traditional method by which the architecture of the public switched telephone network (PSTN) was first opened. Traditionally, the Advanced Intelligent Network (AIN) architecture defined a call model which allowed the creation of telecommunications service applications outside of the switch environment. Telecommunications service applications are a la carte telecommunications applications which can perform enhanced services for a telecommunications session established among two or more parties. Exemplary service applications can include Call Waiting, Caller ID, Call Forwarding, Voice Activated Dialing, and Meet-me Conferencing.","When AIN first had been introduced, in terms of the service application creation process, the AIN architecture represented an important advance. AIN separated service development from switching, allowing service logic components to be developed more quickly and placed in specialized network elements attached to databases. Switches, in turn, being free from all service logic, could be optimized for speed and efficiency. Still, typical service applications which were developed to the AIN specification were written in specialized languages by specially trained programmers using specialized service creation environments.","Importantly, future telecommunications networks will be characterized by new and evolving network architectures where packet-switched, circuit-switched, and wireless networks are integrated to offer subscribers an array of innovative multimedia, multiparty applications. Equally important, it is expected that the process by which telecommunications applications are developed will change, and will no longer solely be the domain of the telecommunications network or service application provider. In fact, in order to provide a broad portfolio of novel, compelling applications rapidly, service application providers will increasingly turn to third-party applications developers and software vendors. Thus, application development in the telecommunications domain will become more similar to that of software and information technology in general, with customers reaping the benefits of increased competition, reduced time to market, and rapid leveraging of new technology as it is developed.","To make this vision a reality, the principles of AIN have been discarded in favor of a new service application component development paradigm. Specifically, it has been recognized that future integrated networks must offer application developers a set of standard, open APIs so that applications written for compatibility with one vendor's system can execute in the system of another vendor. In consequence, the cost of applications development can be amortized, reducing the final cost to the customer. JAVA programming language APIs for Integrated Networks (JAIN) fulfills the requirements of the new service application component development paradigm. Presently, JAIN includes standard, open published JAVA programming language APIs for next-generation systems consisting of integrated Internet Protocol (IP) or asynchronous transport mode (ATM) networks, PSTN, and wireless networks. The JAIN APIs include interfaces at the protocol level, for different protocols such as Media Gateway Control Protocol (MGCP), Session Initiation Protocol (SIP), and Transactional Capabilities Application Part (TCAP), as well as protocols residing in the higher layers of the telecommunications protocol stack.","JAIN includes a set of integrated network APIs for the JAVA programming language platform and an environment to build and integrate JAIN components into services or applications that work across PSTN, packet and wireless networks. The JAIN approach integrates wireline, wireless, and packet-based networks by separating service-based logic from network-based logic.  illustrates a conventional JAIN implementation. As shown in , a conventional JAIN implementation can include a protocol layer  which can include interfaces to IP, wireline and wireless signaling protocols. These protocols can include TCAP, ISUP, INAP, MAP, SIP, MGCP, and H.323. The JAIN implementation also can include a signaling layer  which can include interfaces to provide connectivity management and call control. The conventional JAIN implementation also can include an application layer  for handling secure network access and other external services. Finally, the conventional JAIN implementation can include a service layer  which can include a service creation and carrier grade service logic execution environment (SLEE) .","In JAIN, the protocol layer  and the signaling layer  are based upon a JAVA programming language standardization of specific signaling protocols and provide standardized protocol interfaces in an object model. Additionally, applications and protocol stacks can be interchanged all the while providing a high degree of portability to the applications in the application layer using protocol stacks from different sources. By comparison, the application layer  provides a single call model across all supported protocols in the protocol layer . Fundamentally, the application layer  provides a single state machine for multiparty, multimedia, and multiprotocol sessions for service components in the application layer . This state machine is accessible by trusted applications that execute in the application layer  through a call control API.","Notably, applications or services executing at the service level  can communicate directly with protocol adapters in the SLEE . Protocol adapters typically are class methods, callbacks, event or interfaces that encapsulate the underlying resources such as TCAP, MGCP, etc. The underlying resources can be implemented in many programming languages, but a JAIN-conformant protocol product must provide at least the relevant JAIN API. In contrast, an external application or service executing in the application layer  does not have to be aware of the underlying resources and can remain oblivious to the fact that some of its session or call legs may be using different protocols.","Service components  are the core JAIN components and can execute in the SLEE . More particularly, service components  are constructed according to a standard component model and, instantiations of component assemblies execute in coordination with the SLEE . Using information regarding the protocol layer  which can be incorporated into the SLEE , service components  can interact with the underlying protocol stacks without having specific knowledge of the protocol stack. Thus, service components  can use the call model provided by the signaling layer to implement telephony services. More importantly, the SLEE  can relieve the service components  of conventional lifecycle responsibilities by providing portable support for transactions, persistence, load balancing, security, and object and connection instance pooling. In this way, the service components  can focus on providing telephony services.","Presently, a user can change various aspects of a service such as call forwarding, call blocking, or messaging, through a Web-based interface such as a hypermedia document or HTML Web page running over the Internet. These service aspects can include service information such as telephone numbers to be blocked, times which particular numbers can be blocked, as well as other behavioral aspects of a service such as the type of message to be played to particular calling numbers or the number of rings before the messaging service answers the telephone. The service information and behavioral parameters of the service collectively can be referred to as service attributes and are conventionally stored within a separate database external to both the hypermedia document and the actual services which can be implemented with one or more service components . Once the user initiates changes to the service attributes from the hypermedia document, the service attribute information can be updated in a manner consistent with the user's desired changes.","As shown in , conventional systems for updating service attribute information typically are separate and distinct from the services which actually use the information. For example, once the user has requested a change to a service attribute, a hypermedia document  can access a database management component  to update the service attribute information in a service attribute database . Though the service components can contain service attribute information, the service component must access the service attribute information database  and synchronize its service attribute information with the updated information contained within the service attribute database . This synchronization process between the service component  and the service attribute database  often can require another separate and distinct component or service such as synchronization component . Notably, the database management component , the synchronization component , as well as the service attributes database , each operate external to the JSLEE .","The invention disclosed herein concerns a method and a system for providing a Web-based interface for directly changing service attributes and corresponding service attribute information. In particular, the invention disclosed herein can provide a common interface for both subscribers and service provider personnel for updating preferences of a subscriber's service. The service attributes and the service attribute information can be contained within a service component executing within a service logic execution environment (SLEE).","The invention can provide this functionality using a hypermedia document in conjunction with the service component without the aid of external applications or services. The hypermedia document can generate a SLEE compatible event responsive to a user request to alter or change service attributes of a service component. The service component can be configured to receive events generated by the hypermedia document interface via the SLEE. Upon receiving such an event, the service component can update service attribute information existing within the service component in a manner consistent with the received event. Accordingly, the service component can include the necessary functionality for updating any service attribute information contained therein and need not access an external database or an external component for accessing such an external database.","One aspect of the present invention can include a method of directly changing a service attribute corresponding to a service component through a hypermedia document. The hypermedia document can provide an interface to a SLEE. The method can include providing a plurality of selections embodied in the hypermedia document, wherein the plurality of selections can correspond to the service attribute. A user specified selection can be received in the hypermedia document and a SLEE compatible event can be generated based on the user selection. The event can be of a type which the service component has been registered in the SLEE to receive. The event can be routed to the service component via the SLEE. The service component can process the event and can update service attribute information corresponding to the service attribute consistent with the event. Also, an acknowledgment event can be received from the service component.","Another embodiment of the invention can include registering the service component with the SLEE for receiving a SLEE compatible event generated by the hypermedia document. The event can be posted to the SLEE and can be received by the service component. The method further can include updating service attribute information corresponding to the service attribute in the service component. The updating of service attribute information can be consistent with the received event. An acknowledgment event can be routed from the service component to a location in a computer communication network containing the hypermedia document.","Another aspect of the invention can include a machine readable storage, having stored thereon a computer program having a plurality of code sections executable by a machine for causing the machine to perform a series of steps. In that case, the steps can include providing a plurality of selections embodied in a hypermedia document, wherein the plurality of selections can correspond to a service attribute. The service attribute can correspond to a service component executing in a SLEE and the hypermedia document can provide an interface to the SLEE. The method also can include receiving a user specified selection in the hypermedia document and generating a SLEE compatible event based on the user selection. The event can be of a type which the service component has been registered in the SLEE to receive. Also, the event can be routed to the service component via the SLEE. The service component can process the event and update service attribute information corresponding to the service attribute consistent with the event. An acknowledgment event can be received from the service component.","Another embodiment of the invention can include registering a service component with a SLEE for receiving a SLEE compatible event generated by a hypermedia document. The hypermedia document can provide an interface to the SLEE. The event, being posted to the SLEE, can be received by a service component. Service attribute information corresponding to the service component executing in the SLEE can be updated. The updating of service attribute information can be consistent with the received event. Finally, an acknowledgment event can be routed from the service component to a location in a computer communications network containing the hypermedia document.","The invention disclosed herein concerns a method and a system for providing a Web-based interface for directly changing service attributes and corresponding service attribute information. The service attributes and the service attribute information can be contained within a service component executing within a service logic execution environment (SLEE). In particular, the invention can provide this functionality without the aid of external applications or services. The service component can be configured to receive events generated by the Web-based interface via the SLEE. Thus, upon receiving such an event, the service component can update service attribute information existing within the service component in a manner consistent with the received event. Accordingly, the service component can include the necessary functionality for updating any service attribute information contained therein and need not access an external database or an external component for accessing such an external database.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 2","b":["201","203","205","207","205","210"]},"The hypermedia document  can include subscriber information such as phone number lists, access codes, time of day or day of week information, and the like. Service execution options such as preference execution orders, precedence, exceptions, inclusions, and the like can be included as well. The preference execution order can specify the manner in which a service behaves. For example, the preferences for an answering machine service can specify that for particular incoming calls originating from a particular telephone number, a specific or customized message can be played. Thus, designated business associates can hear one message, designated family members another message, while particular friends can hear yet another message. Further, the preferences can specify an ordering of service features. In that case, the preferences can specify that a call should be screened first, a recording then can be offered, and for particular calling numbers, the called subscriber can be paged.","Precedence can specify particular cases wherein the normal ordering of service features can be defeated. For example, if a telephone call originates from a particular telephone number, the normal ordering of features and the behavior of the service can be altered. Exception and inclusion, which are known in the art, generally can refer to various exception conditions.","The hypermedia document  further can present a subscriber with current, real-time usage measurements of the individual service execution components as well as near real-time information. This data can be made available to subscribers in addition to historical data such that future decisions can be made based upon preferences or desired results from past service execution. Those skilled in the art will recognize that the hypermedia document  can provide a common interface for both subscribers and service provider personnel for changing service attributes of a subscriber's service.","The service layer  can include a SLEE server such as a JSLEE Server  which can be configured for compatibility with the JAIN specification. The protocol layer  can include one or more protocol stacks which can be configured to interact with the service components  executing in the JSLEE Server  through a signaling layer . Notably, the invention is not limited in regard to the number or type of protocol stacks. Rather, the JSLEE Server  can interact with any protocol stack, for example those protocol stacks configured in accordance with the JAIN specification.","The JSLEE Server  also can include several lifecycle management functions. In particular, the service components  can be properly loaded within the JSLEE Server  for execution. The JSLEE Server  can identify configuration and loading parameters associated with each service component  to be loaded. Subsequently, the JSLEE Server  can execute the service components  using the identified configuration and loading parameters. Finally, the service components  can register with an internal event handling component in the JSLEE Server  so that events can be transmitted to and from the service components  executing in the JSLEE Server .","In operation, the JSLEE Server  can transmit and receive events to and from the protocol stacks in the protocol layer . More particularly, the events can be transmitted and received in the event handling component included in the JSLEE Server . Likewise, service components  which are registered with the JSLEE Server can receive protocol stack events directed towards particular ones of the service components . More specifically, the event handling component can route received events to service components  which have registered with the JSLEE Server  to receive such events. The service components  further can post protocol stack events to the JSLEE Server .",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","310","310","320"]},"In step , the hypermedia document can receive one or more user specified selections. In step , the hypermedia document can generate a SLEE compatible event. For example, the hypermedia document can utilize servlet technology to dynamically generate such events responsive to one or more user selections. Once a SLEE compatible event is generated, the event can be routed to the SLEE server via HTTP and TCP\/IP with reference to the SLEE server's URL. After completion of step , the method can continue to step .","In step , the event can be posted to the SLEE server. A service component being registered with the SLEE server to receive such events can receive the event. In step , the service component can process or translate the received event such that the service attribute information within the service component can be updated according to the parameters within the received event. After completion of step , the method can proceed to step .","In step , the service component optionally can post an acknowledgment to the SLEE for routing to the Web server and hypermedia document contained therein. Accordingly, information contained within the acknowledgment can be presented to the user by dynamically creating a Web page for presenting that information. For example, the Web page can incorporate dynamic web content creation technology such as JAVA programming language Server Pages. In this manner, two-way communications can be established between the SLEE server and the Web server. Notably, the SLEE server can include service components for sending and receiving information to and from servers on the Internet, as well as service components which can contain and change service attributes. As previously mentioned, these service components can communicate with one another via the event handling component of the SLEE server.","The present invention can be realized in hardware, software, or a combination of hardware and software. A method and system for directly changing service attributes through a Web-based interface according to the present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system\u2014or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein. The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program means or computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a) conversion to another language, code or notation; b) reproduction in a different material form."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments of which are presently preferred, it being understood, however, that the invention is not so limited to the precise arrangements and instrumentalities shown, wherein:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
