---
title: Methods and systems for using derived user accounts
abstract: Methods, systems and articles of manufacture consistent with features of the present invention allow the generation and use of derived user accounts, or DUA, in a computer system comprising user accounts. In particular, derivation rules define how a DUA is linked to or created based on an existing original user account, or OUA. Derivation transformations may also update the state of a DUA based on its corresponding OUA or give feedback from the state of a DUA to the state of its corresponding OUA.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09516032&OS=09516032&RS=09516032
owner: GOOGLE INC.
number: 09516032
owner_city: Mountain View
owner_country: US
publication_date: 20140926
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Exemplary System Architecture"],"p":["This application is a continuation of U.S. application Ser. No. 14\/171,512, filed Feb. 3, 2014, now issued as U.S. Pat. No. 8,875,281, which is a continuation of U.S. application Ser. No. 13\/565,483, filed Aug. 2, 2012, now issued as U.S. Pat. No. 8,683,578, which is a continuation of U.S. application Ser. No. 10\/144,048, filed May 10, 2002, now issued as U.S. Pat. No. 8,261,095, which claims the benefit of U.S. provisional application 60\/335,894, filed Nov. 1, 2001, all of which are expressly incorporated herein by reference in their entireties.","This invention relates generally to user accounts in computer systems and, more particularly, to methods and systems for generating and using derived user accounts.","The high cost of equipment in the early days of computing led to the development of time-shared computing systems that allowed multiple concurrent users to simultaneously access the computer systems. User accounts encapsulate the information particular to each individual user, such as the user's name, password, area of transient and persistent storage, configuration information, resource-usage quotas and other properties to be enforced on the user's behavior. By using user accounts, time sharing could be implemented without compromising the systems usability. Whereas previous computer system operations always directly affected the global state of the machine, operations on a user's behalf in systems implementing user accounts typically affect only the information in the user's account. In this manner, each user's actions became isolated from other users since, for the most part, they only affected the individual user's account information.",{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},"Since their invention, user accounts have proven very useful. They enhance usability when multiple individuals simultaneously use a computing system and allow for segregation of system activity based on intent. For example, conventional systems may use a supervisor user account, called \u201croot,\u201d to run background services. Also, web-server activities may operate as \u201cnobody,\u201d that is, a user account with very limited privileges. Additionally, user accounts are integral to maintaining the security of a multiple user computer system since they may be used to control which data a user may access or actions a user may perform.","One key concern of IT professionals today is how to maintain the security of computer systems and data and prevent such systems and data from unauthorized access, modification, or corruption. Security breaches may occur when unauthorized activity results in access to or use of information stored in the computer. Another form of security breach occurs when unauthorized activity changes data or prevents an authorized user from accessing data by modifying permissions, causing a system \u201ccrash,\u201d or otherwise disrupting the operation of the computer system. Computer systems may also be corrupted unintentionally by, for example, installing or deleting new applications that have the effect of altering system files or configurations that other programs rely on.","One way to cause the system corruption and security breaches mentioned above is to surreptitiously or unintentionally modify the information accessible to a user account. Methods and systems for preventing unauthorized or unintentional modification of user account information will help increase computer system security and stability.","Consistent with the invention, methods and systems comprising an operating system receive a request to access a resource, initialize at least one derived user account based on at least one original user account and a set of rules; and access the resource based on the at least one derived user account. In some embodiments the at least one user account is initialized by generating the at least one derived user account using user account creation mechanisms of the operating system and populating the at least one derived user account based on the original user account and the set of rules. In other embodiments, the at least one user account is initialized by generating a token representing the at least one derived user account, wherein the token is based at least in part on the original user account. In still other embodiments, the at least one user account is initialized by annotating at least some of the activity of the original user account as belonging to the derived user account. In still further embodiments, the original user account is selectively modified selectively based on the set of rules and the at least one derived user account.","Methods, systems, and articles of manufacture consistent with features of the present invention allow the generation and use of derived user accounts (\u201cDUA\u201d) in a computer system comprising an operating system. In particular, certain aspects consistent with the present invention provide derivation rules that define, among other things, how a DUA is linked to an existing original user account \u201cOUA\u201d. Still further aspects consistent with the present invention provide derivation transformations which are computable functions for updating the state of a DUA based on its corresponding OUA or giving feedback from the state of a DUA to the state of its corresponding OUA.","Reference will now be made in detail to implementations of the invention, examples of which are illustrated in the accompanying drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.","As is well-known by those skilled in the computer software arts, a conventional general purpose computer has an operating system that performs basic tasks, such as controlling peripheral devices, managing data storage, and policing the execution of software programs that operate on the computer. For example, operating systems enforce process priorities and prevent one program from interfering with another program. Operating systems also provide a means for communication between software programs. Operating systems allocate hardware to various programs running within the computer and act on exceptional conditions that occur during execution of a program. Computer programs access various libraries, file editors, compilers and assemblers during execution under the direction of the operating system. The operating system also handles security issues, such as protection and access control. Exemplary operating systems include Microsoft's Windows\u00ae, UNIX\u00ae, Linux, MacIntosh OS X, Palm OS\u00ae, Pocket PC, and the EPOC platform by Symbian. Windows is a registered trademark of Microsoft Corporation. UNIX is a registered trademark of The Open Group. Palm OS is a registered trademark of Palm, Inc.","In conventional computer systems, operating systems perform the functions mentioned above and others with the help of user accounts. A user account defines the actions a user can perform in the operating system and how the actions are performed. User accounts also establish the privileges, permissions, and rights granted to each user in a network. For example, user accounts control such actions as logging on to a computer, creating or accessing files, running programs, and saving changes to files. User accounts may be limited to a specific user, or specific limited group of users, or be granted to a system administrator. System administrator user accounts are generally reserved for people who have permission to make system-wide changes to the computer, install programs, and access all (or most) files on the computer or network. Persons with a system administrator account with broad permissions may, for example, create and delete user accounts, change most computer settings such as, for example, account passwords and access permissions of limited user accounts, and delete important files.","During operation of a computer, an operating system controls access to files, devices, memory, peripherals, and other system resources based on the user account information. For example, Windows 2000 uses login session tokens to identify the user account and security context of a process, thread, or other activity. During logon, Windows 2000 creates an initial token based on access permissions specified in the user account and attaches the token to the user's logon process. All programs, threads, or other activity instigated by the user, or those impersonating the user, inherit a propagated pointer to the initial token.","When a computer application requests access to a resource, the operating system requires that the application specify up front what type of access it is requesting (such as read, write, delete, create or others). The operating system can also determine which user controls the application and what type of access the application should be granted based on the corresponding user account. In other words, access to resources is, in many cases, specific to individual users. Therefore, when the application performs operations involving the object, the operations are only carried out if the user has permission to access the object in the requested way.","Method","Methods consistent with the present invention allow the use of derived user accounts (DUAs) for certain system operations, DUAs may have all of the properties of traditional user accounts including, but not limited to, its own state, distinct privilege and access control rules, its own unique identifier (such as a security token), and ownership of any system resources (such as files, applications, processes, handles, etc.) In addition, DUAs are linked to at least one particular existing user account (the Original User Account, or OUA). Through use of a DUA, its OUA may be selectively isolated from system operations taking place in the DUA's context. Since the DUA is a legitimate user account, legacy processes will function correctly in a DUA context when modifications to the OUA can be limited through choice of derivation transformations (\u201cDTs\u201d) specified by a set of derivation rules (\u201cDRs\u201d).",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["210","220"]},"If the software application is not running in the context of the DUA, the application determines if a DUA should be \u201ccreated\u201d (step ). If the application determines that a DUA should not be created, the application continues normally as in step .","If it is determined that a DUA should be created (step ), a DUA may be created according to any of the following exemplary embodiments. In some embodiments consistent with the present invention, a DUA shell may be created by, for example, creating a new user account, \u201cuser , \u201d that may comprise a set different than, or a subset of, the rights and permissions afforded the original user. A DUA shell is the context and the mechanism for propagating the context. DUA shells allow for the automatic propagation of DUA context to all DUA activity, for example, processes or threads, whether they be created as a directly or indirectly as a result of DUA activity. The initial DUA shell may have been established before run-time or established dynamically during operation of the operating system. The creation of the DUA shell may have been invoked randomly or triggered by some event, such as a write access operation.","In this exemplary embodiment, the new user account may comprise rights and permissions that the original user does not have. The new user account, or DUA shell, may be created, for example, by using the existing user account mechanisms in the operating system. Additionally, the ownership of files or objects created or owned by user  may need to be modified post-creation to allow the corresponding OUA to have access, if access by OUA is desired. Similarly, user  may, by default, access to none or all of the files or objects created or owned by the OUA.","In another exemplary embodiment, a DUA shell may be created by creating a new, possibly restricted, login session or token for the OUA (called OUA\u2032, or \u201cQUA prime\u201d). OUA\u2032 is distinct and separate from the original OUA session or token, but may have all the same privileges for files and other resources as OUA, such as, for example, ability to use the same display. In some exemplary embodiments, OUA\u2032 may have fewer capabilities than QUA (for example, may not be able to shut down the machine or modify the screen resolution). However, by creating a DUA shell in this fashion in, for example, the Microsoft Windows operating system, the activity of OUA\u2032 may be discriminated as the associated token that is automatically propagated to any processes, thread, or other activity created directly or indirectly by OUA.","In yet another embodiment, a process group (in Windows 2000, a \u201cjob\u201d) may implement the DUA shell. As well as being able to implement a DUA shell, a process group or job may also enforce quotas on resource consumption and, in other ways, control access to resources. For example, a process group or job may perform the automatic context propagation needed for discrimination of the DUA activity.","In still another embodiment, a DUA shell may be created by annotating certain QUA activity as actually belonging to the DUA. Annotation occurs when new OUA activity (that actually belongs to the DUA) is initiated such as, for example, on the creation of a thread, process, or other activity, or the impersonation of the OUA. Annotation may take the form of unique bits or an arbitrary sequence of bits associated with the OUA activity. One example is the use of a distinguished entry in handle tables or file descriptor tables. The annotation may be placed on any one or more components of the OUA activity. In addition, the annotation may be placed on any information in the kernel thread control block (\u201cTCB\u201d) or kernel process control block (\u201cPCB\u201d), assuming execution in an operating system with a protected mode kernel. One benefit of annotating information in the kernel TCB or PCB is that the automation can not be compromised by DUA application activity. In certain embodiments, it is preferred that the annotations are not modified in the ordinary course of events.","In some embodiments where DUA shell implementations automatically propagate the context, the annotation may be done automatically. In other embodiments, such as the embodiment immediately above, new threads, processes, or other activity of the DUA, and those impersonating the DUA, may need to be intercepted and annotated as being in DUA, not OUA, context. In still further embodiments, annotation may involve a combination of automatic annotation and non-automatic annotation.","The DUA may be initialized and maintained based on derivation transformations (\u201cDTs\u201d) and derivation rules (\u201cDRs\u201d). Derivation rules are a set of rules that link any aspect of a DUA with the corresponding aspect of its OUA. The derivation rules for a resource, X, include derivation transformations, which are computable functions that take an input, modify the input, and return an output. An argument derivation transformation (\u201cADT\u201d) generally receives an argument as input, modifies the input, and returns a second argument as output, although in some embodiments, the ADT does not modify anything. A result derivation transformation (\u201cRDT\u201d) takes as input certain values, modifies the values, and returns modified values. An \u201cupdate DT\u201d or \u201cUDT\u201d may update the state of a DUA based on its corresponding OUA whereas a \u201cfeedback DT\u201d of \u201cFDT\u201d may give feedback from the state of a DUA to the state of its corresponding OUA.","The derivation rules and transformations may be authored by a developer or system administrator. In some embodiments, the derivation rules and transformations may be initially authored by a developer or system administrator but are later modified dynamically. Dynamic rules may be modified during run time according run time dependent conditions or other conditions.","In one embodiment, the derivation rules may take the form of script-like directives. For example, an author of rules may use a text editor or similar device to create a human-readable text file containing the rules. In other embodiments, the rules may be authored in semantic formats such as or similar to known scripting languages or high-level computer languages, or in other formats well known to those skilled in the computer software arts. In still other embodiments, the rules are compiled or otherwise processed by a rule generator into a machine-readable form, which is in turn used by the computer system at run time.","Following is one example of derivation rules consistent with the present invention. The first table comprises an exemplary set of rules for DUA events; the second table comprises an exemplary set of rules for OUA events. Each line in the tables represents a derivation rule which describes the actions that will take place for a particular resource access.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DUA TABLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["orgname","name1","name2","open","read","write","list","format"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}},{"entry":["\/AB","\/OUA\/","\/DUA\/","U:X","U:Z","F:Y","U:V",{}]},{"entry":[{},"A\/B","A\/B",{},"F:T"]},{"entry":["\/R\/S","\/MASQ\/","\/DUA\/","U:X\u2032"]},{"entry":[{},"RS","R\/S"]},{"entry":["\/DEV3","\/DEV\/","\/DEV\/",{},{},{},{},"U:K0"]},{"entry":[{},"NUL","HD!",{},{},{},{},"A:name1"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"OUA TABLE"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["orgname","scrname","destname","open","read","write","list","format"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\/AB","\/DUA\/A\/B","\/OUA\/A\/B",{},"F:Y","U:W"]},{"entry":{"@attributes":{"namest":"1","nameend":"6","align":"center","rowsep":"1"}}}]}}]}}},"As shown in the first line of the DUA table above, if an application operating in","DUA context refers to \/A\/B (\u201corgname\u201d), and the operation is \u201cread\u201d, an update derivation transformation, Z, will be performed using \/OUA\/A\/B as the source (\u201cname\u201d) and \/DUA\/A\/B as the destination (\u201cname\u201d), after which the actual read operation will be performed on the destination. This in one example of an ADT.","In the example above, the update transformation, Z, may also be followed or preceded by a feedback transformation, T, using \/DUA\/A\/B as the source (\u201cname\u201d) and \/OUA\/A\/B as the destination (\u201cname\u201d).","If an application refers to \/R\/S\/ and the operation is \u201copen\u201d, the UDT, V, will be performed taking \/MASQ\/RS as the input and \/DUA\/R\/S as the output, after which the open operation will actually be performed on \/DUA\/R\/S. \/MASQ\/RS is data introduced by the DUA mechanism or the rules and, as described below, may be unrelated to the OUA.","In some embodiments, whether or not a DT is specified, the operation is performed on an actual named resource or object, with the rules having as a default one of the names specified in the DUA table above. In this particular example, name represents the actual named resource accessed by all operations by default as specified by design. As shown in the third line of the DUA table, in some embodiments, the operation may be performed on name as specified, overriding the default case. This last example may be considered one example of an ADT, as the orgname is modified to name.","Referring now to the OUA table above, if OUA activity refers to \/A\/B, and the operation is \u201cread,\u201d the system will perform a feedback transformation, Y, using \/DUA\/A\/B as input and \/OUA\/A\/B as output before actually performing the read operation on \/OUA\/A\/B.","There are many possible types of derivation transformations, some examples of which are as follows. \u201cEquivalence DTs\u201d may be used to ensure certain parts of the DUA state and the OUA state remain identical. In this case, for example, the state of the DUA may be copied back to the OUA in an feedback DT or the state of the DUA may be refreshed, for example, by an update DT that copies over one or more aspects of the DUA with information from the OUA. Equivalence DTs may be useful in cases where it is desired to have changes in either the DUA or OUA automatically reflected in the other. For example, the system volume control state may need an equivalence DT if volume changes in a DUA are to have the expected effect.","A \u201ccopying DT\u201d can ensure that parts of DUA state are copies of the corresponding OUA state, and that any modifications are performed only on the DUA copy. Copying DTs may be used to limit the effects of operations in DUA context upon the information of its OUA. Copying DTs may be useful in situations where a user may wish to evaluate effects of operations on the system without applying them to the OUA. One example of this would be during installation of new software or during debugging of software. If errors occur while operating with a modified DUA, the original OUA is never actually modified. Thus, operations may revert to the original OUA, and the system may be very quickly and easy returned to the old state. In some embodiments, a user may wish to use a copy DT in non-experimental situations where the system is deliberately operated in the DUA context with no intentions of ever modifying the OUA. This may be useful, for example, for security or integrity reasons. In these embodiments, the DUA may be deliberately discarded after the requested action is performed without update to the OUA.","Yet another example of a derivation transformation is a \u201cmasquerading DT.\u201d Masquerading DTs can specify properties for certain parts of a DUA state, irrespective of the corresponding state of its OUA. Masquerading DTs can be used to perform operations in a DUA where certain states have values unrelated and (perhaps radically) different from that state's values in the OUA. In fact, a masquerading DT may specify that the data for the DUA may be taken from a source other than the OUA. This type of derivation transformation allows operations to be performed in a modified version of the OUA context. Masquerading DTs may be useful in cases of experimentation because the performance of the system using modified state information may be evaluated without modifying the OUA.","A \u201cpartitioning DT\u201d ensures that there is no overlap between certain aspects of the DUA and the OUA state, that is, partitioning their namespace or other sets of values. For example, a partitioning DT may assign a new name, Z, to the DUA and rename the resource, X, to be Y, defined as the concatenation of X with Z. Then, the application is allowed to access the resource Y without accessing the original resource X. Partitioning DTs may be necessary when multiple entities, such as the OUA and DUA, or even multiple DUAs, are concurrently sharing resources and each action must have access to, what appears to be, the full capabilities of that resource. One exemplary operation is the simultaneous access of transient or persistent storage by more than one application. Multiple DUAs can concurrently share state\u2014each believing it has full and exclusive access to that state\u2014as long as a partitioning DT creates a new partition of that namespace for each DUA.","A \u201cliveness DT\u201d changes lifetime properties of certain parts of DUA state from those of its OUA, that is, it may make state that is persistent in the OUA transient in the DUA. The OUA may even be purged at regularly timed intervals. Conversely, any other such state meta-information including, for example, access control attributes, may be set to differ using a liveness DT between the DUA and its OUA.","\u201cDynamic DTs\u201d may be used to specify an arbitrary relationship between a certain state value found in both the DUA and the OUA. For example, in one embodiment consistent with the present invention, a dynamic DT may remove the ability of a DUA to set volume to its maximum value, when still retaining the DUA's ability to perform operations affecting volume\u2014simply, the dynamic DT can set OUA volume value to 90%, if the DUA volume value is set to 90% or higher, otherwise effecting an equivalence DT. Similarly, a dynamic DT can effect the introduction of a named state to the DUA when that state is not found in the OUA, or the removal of a named state from the DUA when that state is found in the OUA. A dynamic DT may implement this, for example, by modifying the behavior of all state namespace enumeration operations\u2014and with the assistance of a partitioning DT, either account can create or remove such (introduced or removed) state independently.","Derivation transformations may also specify that if an original state value is within a range [A,B] specified by the derivation rule, than the corresponding state value in the DUA is the original state value of the OUA. If not, the state value of the DUA becomes either A or B, whichever is closer to the original state value. This update derivation transformation may be referred to as a \u201cBounded value\u201d DT. Feedback may also be bounded in a similar manner. In a feedback bounded value DT, for example, if a state value of the DUA is within a range [A,B] specified by the derivation rule, the OUA will get the state value of the DUA. Otherwise, the OUA will receive whichever of A or B is closer to the state value of the DUA.","Still other examples of derivation transformations consistent with the present invention operate on metadata. For example, it may be desired to initially provide access to all information in a data or file, but when copying is performed, it is desired to limit copying to the contents and not copy the metadata, such as access control permissions, time stamps and name of the file. The derivation rule may block the copying of the metadata but may provide different information in its place, that is, some or all of the metadata may be masked.","An \u201cenumeration\u201d transformation excludes or adds information to a list. An \u201cenumeration\u201d transformation is a variety of a masquerading transformation in the sense that it masks the real information by adding members to the real list or deleting actual members from the real list before allowing access to the list.","One skilled in the art will recognize that there exist many possible derivation transformations and derivation rules. The list above is only exemplary and not meant to comprise the universe of allowable derivation transformations and rules.","Referring back to , once a DUA is created, the application is executed using the DUA, not the original user account. If, for example, the DUA is a new user account, as described above, the application may be redirected to the DUA. If, in another example, the DUA is a token, as is also described above, the application may execute based on permissions in the DUA token. In still another example, the arguments of the application may be modified in accordance with the DUA so that the original application may execute on the modified arguments. The method continues from step .","If the application is already operating in DUA context (step ), the application is executed using the DUA (step ). The system determines whether the resource sought by the application relates only to a specific user account (that is, a \u201clocal\u201d resource) or is information that is shared between multiple user accounts (step ). If the resource is shared, or \u201cglobal,\u201d the DUA contains derived global system state (\u201cDGSS\u201d) information and derivation transformation rules that update or feedback to more than one user account.","In either case, the system determines the type of access requested (steps  and ). Additionally, the DUA or DGSS may optionally be updated by information from the OUA based on the applicable derivation rule before the requested activity is performed (steps  and ). These actions help ensure that the system will have access to the most current information in the OUA. After the DUA or DGSS are updated (steps  and ), the requested activity is performed by reading the DUA or DGSS (steps  and ). Depending on the type of access requested and the derivation transformation rules, the system may optionally communicate changes to the DUA or DGSS back to the OUA in a feedback transformation, if such feedback is indicated (steps  and ).","In each case, after the application performs the requested activity, the system (is returned to normal operations (step ).",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["310","320","330","330"]},"The above represents one exemplary embodiment of the present invention. In some embodiments, DUA events can also occur even though no access is being made to the DUA or OUA resources. In particular, DUA events may occur on a resource X at a specific time, or at specific timed intervals, or given the satisfaction of an arbitrary predicate on the system state or the system environment.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["400","404","414","440","444","404","404","404"]},"In some embodiments, a software application operating on client  may place a request that involves data stored on or instructions that are executed on Server A . Since client  is directly connected to Server A , for example, through a local area network, this request would not normally result in a transfer of data or instructions over what is shown as \u201cnetwork\u201d of FIG, . The \u201cnetwork\u201d of  represents, for example, the Internet, which is an interconnection of networks. A different request may involve data or instructions stored on Server B . In this case, the data may be transferred from Server B  through the network to Server A  and, finally, to computer . The distance between Server A  and Server B  may be very long, e.g. across states, or very short, e.g., a few inches. Further, in traversing the network the data may be transferred through several intermediate servers and many routing devices, such as bridges and routers.",{"@attributes":{"id":"p-0062","num":"0061"},"figref":"FIG. 5","b":["500","522","500","520","520","524","525","526","524","525","527","524","525","528","529"]},"Server system  also includes conventional components such as a processor , memory  (e.g. RAM), a bus  which couples processor  and memory , a mass storage device  (e.g. a magnetic or optical disk) coupled to processor  and memory  through an I\/O controller  and a network interface , such as a conventional modem. It will be appreciated from the description below that the present invention may be implemented in software with is stored as executable instructions on a computer readable medium on the client and server systems, such as mass storage devices  and  respectively, or in memories  and  respectively. Rules or derivation transformations may be stored in, for example, memory  or mass storage  on client system  or memory  or mass storage  on server system .","Processors  and  may be microprocessors such as the Pentium\u00ae family microprocessors manufactured by Intel Corporation. However, any other suitable microprocessor, micro-, mini-, or mainframe computer, may be used. Memories  and  may include a random access memory (RAM), a read-only memory (ROM), a video memory, or mass storage. Mass storage  and  may include both fixed and removable media (e.g., magnetic, optical, or magnetic optical storage systems or other available mass storage technology). Memories  and  may contain a program, such as an operating system, an application programming interface (API), and other instructions for performing the methods consistent with the invention.","Derived user accounts also may be generated and used in a system, such as that described in commonly assigned, co-pending application Ser. No. 10\/082,591, filed Feb. 22, 2002, entitled \u201cAltered States of Software Component Behavior,\u201d which is expressly incorporated herein by reference in its entirety.  illustrates one such exemplary system. As shown in , a software component , executing in computer memory  may request access to a resource, X. The request may comprise arguments , such as a source name or a destination name, and a requested action, such as, for example, open, read, write, list, or format. In one embodiment consistent with the present invention, the request may be intercepted by interception module , which may be understood as software code residing between predefined code  and the actual software code that is executed in response to the request. Interception module  captures the request, including arguments , and passes the request and arguments to derivation engine  which, as described below, manages the actual calling of code in response to the request.","Techniques for intercepting the request are well known to those of ordinary skill in the software arts. For example, interception of a hardware or software supported system call may comprise redirection of an interrupt service vector to alternative code. For library-based services, interception can take the form of the modification of dynamically-linked libraries (prior to loading or at link time, as desired). For any subroutine or function-based service, redirection of the subroutine call instruction, or machine-code patching of subroutine entry code can be employed. Any service dispatch mechanism based on dynamic name-resolution can be intercepted by a change in the service-lookup namespace.","In other embodiments consistent with the present invention, derivation engine  receives a request directly from software component . For example, software component  may call the derivation engine  or derivation engine  itself captures software component .","Once the request is received by derivation engine , either directly or indirectly, derivation engine  may consult derivation rules , which may be dynamic or static, for assistance in processing the request in accordance with the present invention. Derivation rules  comprise derivation transformations, as described above. Based on the derivation rules , derivation engine  determines how to direct access to a derived user account. For example, if the request specifies to write data to a location A specified by the request, in the DUA context, the arguments  of the request may be modified by derivation engine  in accordance with derivation rules . In one exemplary embodiment, as is described with reference to the DUA table shown above, if a request (which in this example is an application) requests that a read operation be performed on original name \u201c\/A\/B,\u201d and the appropriate derivation rule comprises the derivation transformation, Z, which specifies that read operations on \/OUA\/A\/B should instead be performed on \/DUA\/A\/B, the arguments of the request may be modified so that \/DUA\/A\/B is the source of the data for the read operation.","Once derivation engine  modifies arguments  in accordance with the derivation rules, derivation engine  may pass arguments  to predefined code  or alternative code . In addition, alternative code  may invoke predefined code  at some point during its execution. In some embodiments, alternative code  may modify data  or dynamic derivation rules . A result  may be returned from execution of predefined code  or alternative code  to derivation engine . Derivation engine , in turn, returns result  to software component .","The present invention also relates to computer readable media that include program instruction or program code for performing various computer-implemented operations based on the methods of the present invention. The program instructions may be those specially designed and constructed for the purposes of the invention, or they may be of the kind well-known and available to those having skill in the computer software arts. Examples of program instructions include for example machine code, such as produced by a computer, and files containing a high level code that can be executed by the computer using, for example, an interpreter or equivalent execution engine to facilitate execution of high level code.","Alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rattier than the foregoing description."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in, and constitute a part of the specification, illustrate implementations of the invention and, together with the detailed description, serve to explain the principles of the invention. In the drawings",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1","b":"100"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3","b":"300"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5","b":"100"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
