---
title: Method for improving performance in computer networks based on lossy channel
abstract: A method and system for improving networking performance in networks based on lossy channels. A selected file system call  is redirected by sending a file request to a server over a first protocol. Data is received from the server in response to the file request over a second protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07424544&OS=07424544&RS=07424544
owner: Cirrus Logic, Inc.
number: 07424544
owner_city: Austin
owner_country: US
publication_date: 20031223
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. Ser. No. 09\/543,853, (now U.S. Pat. No. 6,742,041), issued May 25, 2004, by Bhagwat, et al. entitled \u201cMETHOD FOR IMPROVING PERFORMANCE IN COMPUTER NETWORKS BASED ON LOSSY CHANNEL\u201d, filed Apr. 5, 2000, and is incorporated herein by reference.","The present invention relates to computer networks, and more specifically, to computer networks based on lossy channels.","In computer networks, it is necessary for applications to access files located on network servers. When an application tries to access a file over a network, a file system call  is sent by the application, which resides in a client, to a network server. Microsoft\u00ae (MS) networks have components at the file system level. Microsoft\u00ae also has proprietary protocols at the file system level to help get the files over the network. Protocols define how computers identify one another on a network, the format by which the data is sent, how the data should be processed once it reaches its final destination and procedures for handling lost or damaged transmissions or \u201cpackets.\u201d","File system calls, in MS-networks, go through an installable file system manager (IFSMGR), a Microsoft\u00ae component. The IFSMGR handles all calls from all of the applications\u2014including 32 bit, 16 bit, and DOS applications. Multiple file system providers may be installed on the system. One file system provider is a default file system provider, which is a Microsoft\u00ae network redirector. Each call is routed by the IFSMGR to the MS-network redirector, which constructs a network request and sends the request over the network. The MS-network redirector also encodes requests and decodes responses. The MS-network redirector works serially, which means that the redirector will send one request, wait for a response, and once it receives the response sends the next request. This system of processing file system calls is synchronous with application requests as well. In synchronous communications, each party is required to wait a specified interval before speaking\u2014in contrast to asynchronous communications where both parties can talk whenever they like.","Microsoft\u00ae uses a Server Message Block (SMB) protocol. SMB is a message format used by DOS and Windows to share files, directories and services. The MS-network redirector encodes the file system request into SMB format and sends it through Network Basic Input Output System (NetBIOS) on Transmission Control Protocol\/Internet Protocol (TCP\/IP). NetBIOS is an application programming interface that augments DOSBIOS by adding special functions for Local Area Networks (LANs). Thus, the actual transfer of data is done over TCP\/IP.","A characteristic of TCP\/IP is that every TCP packet must be acknowledged, which creates traffic in the reverse direction. In protocols having slotted architecture, each slot may have two nodes, node A and node B, such that when node A is transmitting, node B is receiving and vice versa. Therefore, when TCP\/IP is used to transmit data, some bandwidth must be allocated in the slot for the reverse channel to accommodate the traffic in the reverse direction, which lowers the amount of bandwidth that can be allocated for the forward channel.","Thus, network performance is lowered by the requirement of bandwidth for a backward channel and the system of processing file system calls being synchronous with application requests.","A method and system for improving networking performance in networks based on lossy channels are described. In one embodiment, a selected file system call  is redirected by sending a file request to a server over a first protocol. Data is received from the server in response to the file request over a second protocol.","A method and system for improved networking performance in networks based on lossy channels are described. In one embodiment, a selected file system call  is redirected by sending a file request to a server over a first protocol. Data is received from the server in response to the file request over a second protocol.","In the following detailed description of the present invention, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one skilled in the art that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d or \u201ccomputing\u201d or \u201ccalculating\u201d or \u201cdetermining\u201d or \u201cdisplaying\u201d or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIGS. 1 and 2","FIG. 1"],"b":["100","110","101","102","104","105","106","107","103","108","109","101","102","103","110","170"]},"As shown in , the file system hook  sits between the IFSMGR  and network redirector , which is a Microsoft\u00ae network redirector, in this case. In , the file system hook  checks to see if the file call  should be passed on to the Microsoft\u00ae network redirector  or redirected to a compliant server (not shown). A compliant server is one that is configured to interact with the file system hook  according to the present invention, as described below, for example with regard to .","When the IFSMGR transmits the file system call , file system hook  intercepts the file system call  before it is forwarded to the MS network redirector . The file system hook  then determines if there is a compliant server to which the file system call  is directed. The file system hook  also determines whether the file system call  is for a read file request.","If the file system call  is not a read file request or if the file system call  is not directed to a compliant server, the file system call  is passed on to the Microsoft\u00ae redirector . The MS redirector  then encodes the file system call  in server message block in block , and sends the encoded packet to NETBIOS using TCP as a transport protocol in block . The NETBIOS  sends the encoded file system call to the lower layer network components and Network Device Interface Specification (NDIS) wrapper . The lower layer network components and NDIS wrapper interfaces with the media access control layer .","However, if the file system call  is a read file request and a compliant server is present, the file system hook sends the file system call  to be encoded in a proprietary protocol in block . The file system call  is sent as a control packet encoded in TCP in block . The control packet is sent to transport driver interface (TDI) . The TDI sends the control packet to the lower layer network components and NDIS wrapper  and MAC (NDIS driver) . The TDI receives data from the lower layer network components and forwards the data it receives in block . The data is received in block  on user datagram protocol (UDP). UDP does not require acknowledgment for data sent. If there are any lost packets, the client performs a recovery mechanism in block . Because the client receives the data on UDP, the client does not need to send an acknowledgement (ACK) for each data packet sent. Thus, it is possible to maximize the bandwidth for the forward channel and minimize the backward channel.","The client  also includes a cache (not shown) for storing read-ahead data, as illustrated in A and B. In , a client sends a request, in step , to a server to indicate a new file transfer. In step , the client begins receiving data and stores the data in a cache in step . At the same time, applications will consume the data at the rate at which the applications require the data. The client will check if the cache is reaching full capacity by checking for a first particular level, or HIGH watermark. If the client decides, in step , that the cache has reached the HIGH watermark, the client will send a STOP_PUMPING request to the server in step , or else the client will continue to receive data in step . If the client sends the STOP_PUMPING request, the server will stop sending data. The applications will continue to consume the data, and the client will check, in step , if enough data has been consumed that a second particular level, or a LOW watermark, has been reached. If the client decides, in step , that the LOW watermark has been reached, it will send a RESUME_PUMPING request to the server in step , or else the client will continue to check for a low watermark in step . If the client sends a RESUME_PUMPING request in step , the client will continue to receive data in step , and continue repeating the steps in  as necessary until all the data has been received.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 6B","FIG. 6A","FIG. 6B"],"b":["611","621","661","661","622","661","691","622","691"]},"Thus, the server may send data at a faster rate than the application requesting it can consume it. Thus, if an application is consuming data at a low rate, the network performance will not be lowered by the server sending data at the same low rate. The cache will continue storing data until the cache starts reaching full capacity.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 3","FIG. 2","FIG. 2"],"b":["330","323","324","330","270","373","373","376","377","378","379"]},"Another aspect of the improved performance is the recovery mechanism, as illustrated in .  shows the client recovery mechanism. The client maintains packet window , which is split into two segments  and  by a threshold value. The window may have a size of, for example, 1,000 packets and the threshold may be 500 packets. Thus, the first segment  will contain packets 1 to 500 and the second segment , will contain packets 501 to 1,000. Thus in step  of , the client receives packets through, for example, UDP. When the window has crossed the threshold of 500 packets, for example, to 501 packets in step , the client will check to see if any packets have been lost in the first segment . If packets have been lost, the client will send a retry request in step  to the server for all the missing packets. Thus, with regard to , in block  the recovery mechanism will send a request to block  to encode the retry request in the proprietary protocol. The proprietary protocol is TCP for control packets, which will be encoded in block . The retry request will be transmitted by the server through TDI . TDI  will send the retry request through TCP in block  to the command packet handler .","The command packet handler will send the retry request through TCP this time in block  through TDI  to the client. The client will receive the packet over TCP in block , which it will send through block  to the file system hook . The client will then check to see if all the packets have been recovered in step  of . If not all the packets have been recovered the client will send a retry request through step  of .","Once all the packets have been recovered, or if no packets had been lost, as determined in step , the client will send an ACK signal for the first segment  in step . Then, the client will forward the window by the threshold amount in step  such that the first segment will contain packets 1,001 to 1500, for example, and the second segment will contain packets 501 to 1,000. The client will then, after the new threshold, for example, 1,000 has been crossed, examine if any packets are missing in the second segment  in step . If any packets are missing, the client will perform step and  as needed until all the packets have been recovered.","The server, as illustrated in , maintains a packet window  similar to that of the client and having the same packet size and threshold value. The server packet window  is also split into two segments, segment one  and segment two . In step , the server starts sending the packets of data over UDP. When the server reaches 1,000 packets, for example, or the end of the window, the server checks, in step , to see if an acknowledgement (ACK) has been received for the first segment  of the data sent over UDP. If no ACK has been received for the first segment , then in step , the server will wait for an ACK to arrive. The server will continue to check for an ACK in step  until one has been received.","Once the ACK signal has been received the server will advance the packet window by the threshold amount. In this case, the threshold amount is 500 packets, so that the first segment  will contain packets 1,001 to 1500 of the data to be transmitted. The server will also advance the window threshold by the threshold amount so that the new window threshold is 1,000 (or 500+500). Once the new window threshold of 1,000 has been crossed, the server will check if the second segment has been acknowledged in step . If the second segment has not been acknowledged, the server will wait in step  for an ACK for the second segment . The server will continually check for an ACK, and in step , once an ACK has been received, the server will again advance the window by the threshold amount and advance the window threshold by the threshold amount such that the new window threshold will be 1500 in step .","Once packets 1501 to 2,000 have been sent, the server will check in step  if the first segment  has been acknowledged. If the first segment has not been acknowledged, the server will wait in step  for the ACK for the first segment to be received, as described above. The server will continue to send packets and ensure that ACKs for each segment have been received until all the packets have been sent.","Because the underlying MAC protocol , takes care of reliable data transfer, the RETRY commands will not be used frequently, thus increasing the network performance. In case of RETRY, an ACK is sent after all the packets are recovered on the TCP channel.","Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the forgoing description, it is to be understood that the various embodiments shown and described by way of illustration are in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as essential to the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation in the figures of the accompanying drawings in which like reference numerals refer to similar elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6B"}]},"DETDESC":[{},{}]}
