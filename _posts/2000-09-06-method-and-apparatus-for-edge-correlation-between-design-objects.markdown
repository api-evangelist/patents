---
title: Method and apparatus for edge correlation between design objects
abstract: Computer implemented techniques for edge correlation between design objects in computer-aided design systems are provided. According to one embodiment, a source edge is exported from a source CAD system into a data representation in a global scene. The global scene is imported into a target CAD system so that one or more candidate target edges can be identified. Once the candidate target edges are identified, they are exported into a data representation of a local scene. Through a series of techniques, which can include an edge overlap algorithm, a region containment algorithm, an edge containment algorithm, and an edge extension algorithm, non-overlapping candidate target edges are removed from the local scene until a correlated set of target edges is produced. Design features, such a round or chamfer operation, can then be performed in the target CAD system on the correlated set of edges, just as they are in the source CAD system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06985835&OS=06985835&RS=06985835
owner: Proficiency Solutions Ltd.
number: 06985835
owner_city: 
owner_country: IL
publication_date: 20000906
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CAD Data Exchange","Pattern Matching","User Emulation","Edge Selection","Edge Overlap Algorithm","Edge Containment Algorithm","Finding an Initial Edge","Chain Extension Algorithm"],"p":["This application is related to U.S. patent application Ser. No. 09\/655,540, entitled \u201cDATA EXCHANGE BETWEEN COMPUTER AIDED DESIGN SYSTEMS\u201d, Ser. No. 09\/655,546, entitled \u201cUSER EMULATION FOR COMPUTER AIDED DESIGN DATA EXCHANGE\u201d, Ser. No. 09\/660,426, entitled \u201cPATTERN MATCHING FOR DATA EXCHANGE BETWEEN COMPUTER AIDED DESIGN SYSTEMS\u201d now U.S. Pat. No. 6,828,963, and PCT International Application Serial No. PCT\/US00\/24446, entitled \u201cMETHOD AND APPARATUS FOR EDGE CORRELATION BETWEEN DESIGN OBJECTS\u201d, all filed Sep. 6, 2000. This application is also related to U.S. patent application Ser. No. 09\/391,311, filed Sep. 7, 1999, entitled, \u201cMETHOD AND SYSTEM FOR THE EXCHANGE OF CAD DATA\u201d now U.S. Pat. No. 6,614,430, and U.S. Provisional Application Ser. No. 60\/099,340, filed Sep. 8, 1998, entitled, \u201cDATA EXCHANGE IN MECHANICAL COMPUTER-AIDED DESIGN\u201d. All of these applications are incorporated herein by reference in their entirety.","1. Field of the Invention","This application is related to computer data exchange, and more particularly to techniques for edge correlation between design objects.","2. Background Information","Modern engineers, and in particular engineers who design mechanical devices, utilize computer aided design equipment to assist in the design process. This equipment typically consists of a UNIX-based, or Microsoft Windows NT (\u2122)-based workstation or computer that includes a keyboard, a display, and a pointing device, such as a mouse. More particularly, the equipment includes computer aided design (hereinafter \u201cCAD\u201d) software that allows the engineer to create two- or three-dimensional drawings of the devices the engineer designs.","Occasionally the CAD software does more than simply allow the engineer to create drawings of these devices. The CAD software might also perform various solid modeling and\/or engineering manufacturing based analysis on the engineer's CAD model, as well as certain supply chain functionalities\u2014for example by integrating the CAD model into a sophisticated product data management (\u201cPDM\u201d), manufacturing resource planning (\u201cMRP\u201d), or enterprise resource planning (\u201cERP\u201d) database system.","There are two standard paradigms in which engineers enter data into a CAD system. For the sake of simplicity, one paradigm will be referred to as the \u201cexplicit geometry\u201d paradigm and the second will be referred to as the \u201cparametric feature-based\u201d paradigm.  shows an explicit geometry system, while  shows a parametric feature-based system.","In legacy CAD systems, explicit geometric specification of parts is performed. For example, images are created, sometimes in different layers, where rectangular or polar coordinates are specified for each point or line. While this method is cumbersome and painstakingly detailed, it is often a preferred data entry paradigm for engineers who design complex free-form surfaces. The strength of this paradigm is also its weakness: namely, the rigid and often unforgiving interdependencies between edges, connections, voids, and spatial geometry. For instance, moving a single line or point can disrupt the entire model.","In the not too distant past, a new approach to CAD design, called parametric feature-based (\u201cPFB\u201d) design was introduced. Parametric feature-based design is currently the leading design paradigm in the CAD industry. In this paradigm, which has been pioneered by companies such Parametric Technology Corporation (\u201cPTC\u201d), rather than explicitly reciting geometric points and the like, engineers start with certain shapes and define parameters for those shapes. Subsequent features are added to the shape that, when aggregated, form a complete CAD model. Referring to , it shows an exemplary feature list  for an object and the resulting sketch  of the object.","For instance, if an engineer were designing a new wheel for a car, she might start with a circle. Next, a feature is added to the circle making it a cylinder (e.g. an extrude operation). A shell could then be subtracted from the cylinder, thereby creating and overall contour for the visible part of the wheel. Finally, an array of small diameter cylinders could also be subtracted from the visible part of the wheel to create openings through which the wheel can be attached to the car. With each of the features added to the design, the engineer specifies a basic geometry and one or more parameters for the geometry (for example, radius, length, width, depth, material, etc.). In a competitive system, however, more complex shapes may be modeled. For instance, rather than starting with a baseline geometric feature, the competitive CAD system may allow cylinders, cones, or other complex three-dimensional features to be specified.","The strength of parametric feature-based design is that the engineer's design intent can be maintained, even though the details (parameters) change. This is to say that the overall design is preserved while giving the engineer the flexibility to simply test different parameters on her design. For instance, small changes to a feature on a PFB CAD model will not necessarily disrupt the stability of the entire design.","As of this writing, there are a number of major vendors of CAD software, and even more smaller vendors. These vendors include: PTC, Dassault Systemes (France), Unigraphics Solutions, SDRC, and Autodesk. Each of these vendors implements their design methodologies in a different manner and most treat their computational and algorithmic methodologies as proprietary. Not only are their methodologies secret, but the data structures that implement their methodologies are secret.","And herein lies a problem. When the users of different CAD systems need to share design data they are currently able to do so only to a limited extent. Typically the extent to which the users are able to share data is limited by the amount of co-operation between the various CAD vendors. Because the CAD vendors are head-to-head competitors, they share information only reluctantly\u2014lest their trade secrets or proprietary methodologies, which are the very core element that distinguishes vendor from vendor (apart from their user interface), become known by their competitors.","Nevertheless, the CAD vendors have implemented certain application programming interfaces (\u201cAPIs\u201d) that provide at least a partial solution to the problem. Using an API, a user or system integrator can make function calls to a particular CAD system together with the necessary processing information. The particular CAD system will process the function calls and may return either an explicit geometric expression of the desired part or feature, or it may return some sort of standard graphical representation of the desired part or feature.","But the APIs are functionally limited and often have significant problems exchanging complex design features and\/or information. And again, every additional function added to a CAD vendor's API provides a window through which the vendor's competitors can view, with an eye to reverse engineering, at least some portion of the vendor's trade secrets.","The problem is getting worse. Consolidation in certain industries, such as the automotive and aircraft industries, creates more CAD data exchange problems. For instance, Boeing Corporation recently acquired McDonnell Douglas Corporation. The formerly separate entities likely use different CAD systems. Moreover, each formerly separate entity has multiple tiers of suppliers\u2014each supplier using their own CAD system too. When an engineer at Boeing changes a part, that change must be communicated to the particular supplier that manufactures the part. The supplier may require the CAD model for the part. But because of incompatible file types and differing computational and algorithmic methodologies, the CAD model cannot be provided. Even worse, when Boeing decides to create design synergies between the two merged entities, the Boeing engineers and the McDonnell Douglas engineers might be completely unable to exchange complex CAD models. Of course, the same is true of Ford Motor Company, which recently purchased Jaguar and Volvo.  diagrammatically presents the communication problem.","The economies of scale desired by the merger of such entities are victims of the inevitable battles over sharing information and know-how between the CAD vendors. Moreover, the collaboration between engineers from separate entities (i.e., between original equipment manufacturers and first and second tier suppliers), under the current state-of-the-art, will be all but impossible\u2014as engineers waste time and money desperately trying to share design files made from disparate CAD systems. While standards may exist for exchanging raw data images (e.g., TIFF and JPEG) and boundary representations (e.g., IGES and STEP), these standards do not preserve the design intent of the engineer.","Computer implemented techniques for edge correlation between design objects in computer-aided design systems are provided. According to an aspect of the invention, a source edge is exported from a source CAD system into a data representation in a global scene. The global scene is imported into a target CAD system so that one or more candidate target edges can be identified. Once the candidate target edges are identified, they are exported into a data representation of a local scene. Through a series of techniques, which can include an edge overlap algorithm, a region containment algorithm, an edge containment algorithm, and an edge extension algorithm, non-overlapping candidate target edges are removed from the local scene until a correlated set of target edges is produced. Design features, such a round or chamfer operation, can then be performed in the target CAD system on the correlated set of edges, just as they are in the source CAD system.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["401","403","400","401","403","404","404","401","403","402","405","401","405","408","409","410","411"]},"In one embodiment, a bridge data structure \u2032 is created by the intermediate system . The bridge data structure \u2032 can be a separately created and persistently stored data structure, or the bridge structure \u2032 can be a purely temporal data structure that is used and then flushed from memory. If the bridge data structure \u2032 is a persistent data structure, then it can also be a part of the database .","An advantage of creating a persistent bridge data structure \u2032 is that version and extraction\/creation information, such as undo logs or rollback logs, can be created to back-out or re-write changes that fail when the CAD data exchange is taking place, or to recreate a particular instance of the CAD design. Rather than creating a single file for each version of the CAD design, a particular instance can be recreated in an incremental manner, thereby saving disk space. Moreover, preservation of the design intent can be easily maintained, as the database or intermediate data structure can provide an exchange means for preserving the parametrics, features, histories, etc. of the CAD design.","An underlying objective in the data exchange techniques described herein is that the design intent from the source CAD model should be preserved. What this means in practice is that the resultant CAD data structure for the target computer system preserves the ability of a subsequent engineer to manipulate, on a feature by feature basis, the target CAD data structure\u2014just as if the engineer were operating on the source CAD data structure. Of course, this level of manipulation will not always be possible, and indeed it is not even a necessary requirement of the invention, but it is preferred nonetheless.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 5A"},"In step , an application programmer interface (\u201cAPI\u201d) is called on either the source CAD system or the target CAD system. According to one embodiment, the target CAD system API is called first and if the API does not work, then the API on the source CAD system is called. However, in another embodiment, only the API on the target CAD system, or only the API on the source CAD system is called. For instance, if the export process is being performed, only the source CAD system API is used. However, if the import process is being performed, then only the target CAD system API is used.","In step , the result of the API is analyzed to determine if a failure has occurred. Generally, the API will return a failure notification, but other times the API failure might cause a sub-system crash, such as a page fault or a general protection fault. Thus, determining if a failure has occurred can include not only monitoring the output of the API, but monitoring performance of various operating parameters of the source and\/or target CAD systems, as well as the physical properties of the CAD data objects themselves (e.g., on a feature by feature basis).","Even if the API succeeded as tested in step , a second test is performed at step  to ensure that the design intent of source CAD data model is preserved when the target CAD data model is created. To this end, testing the design intent involves determining whether a particular target CAD feature can still be modified by an engineer. For instance, a test to determine whether the design intent is preserved is to examine the extent to which boundary representations have been employed in the CAD data model. Typically, when the target CAD data model is all boundary representations, then it is possible that the design intent has not been preserved. However, in some circumstances, a target CAD model can be represented by boundary representations and still partially preserve the design intent, for instance when the boundary representation is created on a feature by feature basis.","If the API successfully preserved the design intent from the source CAD system, then the API is used to create the particular feature for the target CAD system in step . If not, or if the API failed as a result of the test at step , then a pattern matching technique, which is described in detail below, is performed in step .","In general, the pattern matching technique is a method for mapping one or more functions of a particular feature from a source CAD data model into one or more corresponding functions for the target CAD data model. According to one embodiment, the pattern matching technique is used to enforce \u201cbest practice\u201d techniques or to enforce certain design constraints. Thus, typically, the pattern matching technique is used to find a coterminous sequences of operations in the source feature list and map them to a desired feature list for a target CAD system, which preserves the design intent. A more specific description of a pattern matching technique is described below with reference to .","In step , a test is performed to determine the result of the pattern matching in step . The pattern matching failed if no pattern that included a current feature could be matched with a match data record stored in the database. In step , assuming a successful pattern match, one or more equivalent operations are created for the target CAD model, or bridge structure as the case may be.","Step  shows a function mapping technique. In general, the difference between pattern matching and function matching is that pattern matching maps multiple operations into multiple equivalent operations, while function mapping is generally a one-to-one type matching between operations and does not necessarily enforce any design or practice constraints on the mapping. However, step  and any corresponding subsequent operations can be subsumed in the pattern matching technique\u2014the function mapping being a subset of the pattern matching. In step , a test is performed to determine whether the function mapping failed to find an equivalent operation. In step , if the function mapping was successful, then the equivalent operation is created for the target CAD model.","However, if the function mapping failed, then in step , a user emulation technique is performed. In general, the user emulation technique emulates the menu and\/or mouse operations of a user of the target CAD system or the source CAD system. For instance, the user emulation technique can be used to detect properties of either the target or source CAD object, or reveal additional attributes or comments concerning a particular feature. The user emulation technique can also be used to extract a particular feature from the source CAD system, or create the equivalent feature in the target CAD system. Specific details of the user emulation techniques are described below with reference to FIGS. A\u2013C and A\u2013D.","In step , a test is performed to determine whether the user emulation technique failed. If the user emulation technique did not fail, then in step , the target CAD model feature is created and the process continues to the next design feature of the source CAD model. However, if the user emulation technique did fail, then in step , a boundary representation (that is, an explicit geometry representation, as opposed to a PFB representation) is created. It is generally known in the art how to create a boundary representation (or \u201cbrep\u201d) of the particular feature. For instance, one or more API functions can be called in the source or target CAD systems to create an exportable brep. While it is generally known how to create a brep, what is unique here is the manner in which target CAD object is created with the brep: according to an embodiment of the invention, the brep of the source CAD object is created until the current feature is inclusive in the brep. Once the current feature is inclusive, then the brep technique  can stop creating the target CAD model and subsequent features can be created with other techniques.","After step , processing can continue to the next design feature of the source CAD model.","It is worth mentioning certain failure detection methods that can be performed in accordance with the invention. For this we turn to .","In step , a test is shown that determines whether the failure detection is initialized based upon an API call, or some other operation (e.g., pattern matching, function mapping, user emulation, or brep). If the failure detection process follows an API call, then in step  the intermediary system waits for a signal back from the API that is indicative of success or failure of the API call. Otherwise, the process continues to step .","In step , a test is performed to determine whether the API failed. If the API did fail, then a fail signal is returned to the data exchange process in step . If not, then step  is performed, which also follows step . In step , a physical and\/or geometric property analysis is undertaken wherein geometric and\/or physical properties of the source CAD model are compared with the target CAD model. For instance, a surface area calculation can be performed, a mass or density calculation can be performed, and\/or a line or perimeter calculation can be performed. Other solid or geometric modeling calculations can be performed too.","In step , the result of the comparison in step  is tested against accepted tolerances associated with the target CAD system. It is worth noting that the tolerances can not only be with respect to the source and target CAD model properties, but also just the target CAD object properties with respect to design or feature tolerances corresponding strictly to the target CAD system. If the result is within the tolerance of the target CAD system, then the process continues to step , which is described below. Otherwise, the process continues to step , where the target feature is adjusted. For instance, if it is detected that two lines do not meet in the target CAD object, one or both of the two lines can be extended towards the other in an attempt to create an intersection between the two lines. In step , the tolerances can again be tested, as is described above. However, if the test fails, then a failure notification is returned to the data exchange process in step .","If the test succeed, in step , then in step  undo information can be persistently stored in memory so that, if needed, the creation process can be undone. In practice, what is saved in the undo information is a synchronization point or marker for the source CAD model, as well as the corresponding operations for the target CAD model.","For example, assume a particular source CAD model has three features. When exchanging the source CAD model to the target CAD model, the first two features are successfully transferred, but the third fails. It is possible that the third feature exchange was not, in fact, a failure; rather the first or second feature exchange caused the third feature exchange to fail. In such a circumstance, when adjusting the particular target CAD feature (itself) does not successfully reproduce the source CAD feature, it is possible to back-out the second feature and then repeat the second feature exchange with a new technique. If adjusting the second feature exchange does not achieve a successful operation for the third feature exchange, then the first feature can be backed-out with the undo information.","In step , a \u201csuccess\u201d signal is returned to the main CAD data exchange process. While not an explicit step in the failure detection process, note  shows that a subsequent operation may identify a failure from a previous operation. In such an instance, the undo information saved in step  can be used to undo the previous operation\u2014and any subsequent operations to the previous operation. The failure detection process ends after steps  and .","Referring to the system shown in  and the method shown in , a typical data flow is as follows. The source CAD system  comprises PRO\/Engineer CAD software. An engineer working with the target CAD system , uses Catia CAD software. The engineer would like to take a CAD model designed with the PRO\/Engineer software and create a Catia CAD model. A CAD data exchange process is initialized by the by the engineer.","Returning to the data flow, first, a feature list or feature tree in the source CAD system  is examined by the intermediary system . The intermediary system can be a standalone system, or it can be a plug-in on either (or both) the source CAD system  and\/or the target CAD system .","An extraction process  begins by testing the API of the source CAD system  for functions that translate individual features to the target CAD system . If no API's exist in the source CAD system . In an iterative manner, the process continues after the API technique  so that the pattern recognition technique  (optional for extraction), the user emulation technique , and the boundary representation technique  are each used (only if the preceding technique failed) to create the CAD model for the target CAD system .","Once the source CAD data model has been extracted, then the creation process  begins. The creation process tests the API of the target CAD system  for functions that translate the individual features from the extraction process . In a similar, iterative manner, the process continues from the API technique , to the pattern matching technique , the user emulation technique , and finally to the boundary representation technique . Again, each technique being implemented if the previous technique failed, or, in some instances, in combination with a previous technique. For example, the pattern matching technique  can implement operations from the API technique  or user emulation technique , which will be apparent from the discussion below.","According to one embodiment, the database  stores data structures that hold patterns of match data for the pattern matching technique . The database can also store user interface data, such as graphical user interface mappings of a number of CAD systems. Moreover, the database can comprise various brep techniques that are most likely to succeed in a particular target CAD system .","In another embodiment, a bridge data structure \u2032 is created that can temporarily or persistently hold the CAD model for the target CAD system , as well as rollback and\/or undo logs for backing out particular features or unsuccessful operations. In still another embodiment, the bridge data structure \u2032 can be a universal file format that is itself converted by the target CAD system  to a native format. Such a universal file format has the advantage of removing the extraction stage  in subsequent CAD data exchange processes (the extraction stage  does need to be performed at least once)\u2014leaving only the creation stage  operations when more than one type of target CAD system  will be using the CAD model taken from the source CAD system .","Turning to , it depicts an operational overview of a pattern matching technique according to an embodiment of the invention. A volatile memory region  of a computer system holds portions of data from a persistent memory associated with, for instance database  and\/or source CAD system , which can partially reside on one or more persistent magnetic or optical storage devices.","The volatile memory region  comprises four sections of memory. A match data region  temporarily caches static match data that is part of the system knowledge base. The match data is a subset of the knowledge base that is a region of interest, or of higher statistical probability for finding a known pattern. A current object region  temporarily caches one or more portions of a feature list from a source CAD system \u2014this cache generally represents a set of data (or operations) that is sufficiently proportioned so that it is large enough to hold the largest source operation pattern.","Regions  and  are used primarily to reduce I\/O and associated disk access latencies. The regions can be of variable size, and, according to one embodiment, the memory  can further include a hash or index to expedite searches in larger record sets, or at least record sets that are beyond the bounds of the data stored in memory .","A current feature region  is smaller than the match data region . The current feature region  holds the source operation, drawn from the current object region  that is the basis of a query of the match data region .","The current match region  temporarily stores match data records, i.e., information from the records of the knowledge base  that indicate how the target CAD system is to construct the target CAD model\u2014or the target feature. The current match region  can be small, but if it is small, then the region should be frequently written to a persistent memory region and then flushed. Of course, if the region is large, the same is true, but the frequency could be decreased.","Although optional, a bridge structure \u2032 is shown in . The bridge structure \u2032 can be universal data type or product representation\u2014that is, an intermediate data type that is not, strictly speaking, the target data type. Thus, the bridge structure \u2032 can include additional information concerning the source CAD model, the target CAD model, and extraction and creation information that can be used for a lossless, two-way data exchange.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["402","708"]},"According to another embodiment, a conversion table  is not necessary. For instance, the CAD data exchange software is typically embodied in a plug-in to a third-party CAD system. The plug-in can be conversion specific, meaning that the plug in only converts files of type A to files of type B (and vice versa). In such an instance, the conversion table  information is already known, thus the table  is not necessary.","In an aspect of the pattern matching technique, match data records  are used to effectuate the pattern (or even the function) matching process. The match data records  include two areas. The first area  stores source function or operation information. The source function information corresponds to one or more operations or geometric structures in the source CAD system. The second area  stores target function information or geometric structures for the target CAD system\u2014for instance, a pointer to a function that does the desired action. The target function information corresponds to one or more operations in the target CAD system\u2014for instance, the target function information can include a function or pointer to a function for the API technique . An end of file area  can also be included so that match data records  are easily identifiable from one another, as it is possible that the records have a variable length. However, if fixed length match data records  are used, then the end of file area  is unnecessary.","Additional data structures can also be included. For instance, as was mentioned above with reference to , the match data records  can be broken into various hash buckets by using known hashing techniques, or a B-tree or other type of indexing structure can be used to expedite search operations. Moreover, it can be efficient to sort the match data records  prior to run-time or once the records have been updated. If the records are sorted then regions of memory with a high locality of reference (meaning that if a memory address X is called, then memory address Y is likely to be called too) can be grouped together, thereby reducing I\/O and read latencies.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 8","FIG. 8","FIGS. 6 and 7"],"b":["401","402","603"]},"In step , a current feature from the source feature list is read and loaded into a the current feature region . In step , the data in the current feature region  is compared against source functions  in the match data region  by searching the region  for a matching data record. In step , if a match was found, then the process continues to step , otherwise a fail signal is returned to the main CAD data exchange algorithm (e.g. see ).","In step , information corresponding to the current match data record  is saved in the current match region . The information can be current match record  itself, a pointer the current match record  in the knowledge base  or match data region , the target functions , or the target functions  translated with any supporting data (e.g., parameters for the target CAD system, and\/or additional information concerning the extraction or creation process).","In step , a test is performed to ensure that there are no additional functions in the source feature that need to be exchanged. If additional functions need to be processed, then the method continues to step . Otherwise, in step  the current match record  can be persistently saved (if not already) and the next function corresponding to the feature can be loaded in step  such that the search () and match () steps can be performed.","In step , it is possible the additional function(s) added to the search created an incompatible match. In step , this scenario is handled. According to one embodiment, any changes made or added to the target feature list are backed-out on feature by feature basis (step ). One reason this process may be implemented is that a subsequent attempt to handle the failed operation(s) may more efficiently model a series of operations (e.g., an entire feature) rather than a single operation. In another embodiment, the last saved match data record is used as the basis for the target feature list (step ), and the remaining functions can be exchanged with the target CAD system via an alternative method. In step , the match data record information is entered for the target CAD model.","Returning to step , if a match is found, then in step  information corresponding to the match data record  is saved. If there are more operations in the source CAD model at step , then processing returns to step . Otherwise, the saved target function list, which can comprise multiple sets of information corresponding to target functions , is entered into the target CAD model in step .","It is worth noting that while the pattern matching process described above was defined with reference to a particular feature, which is the preferred embodiment, it is possible to perform the pattern matching with respect to individual functions without regard to their overall relationship to a particular feature.","According to one embodiment, after a particular feature is created using the pattern matching technique, then a physical and\/or geometric property analysis (as is discussed above) is performed on the target feature and the properties are compared against physical\/geometric properties of the source feature. If the properties do not match, then the parameters of the target feature list can be adjusted until the properties are within an acceptable tolerance.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIGS. 9A\u2013C"},"For instance, the user emulation techniques described below can be used to collect attributes or callout information corresponding to a source or target feature, to perform geometric or physical property analyses, or to select a particular edge or face on the source or target CAD model. In still other embodiment, the user emulation techniques can be used to automate a process with a known user interface behavior.","Turning to , it is an architectural overview of an embodiment of the user emulation techniques. The figure is useful in understanding how the different software modules of a programmed computer interact.","CAD system software  includes a user interface. The user interface typically interacts with a user through a pointing device, such as a mouse, or keyboard controls. For purposes of this explanation, the mouse and keyboard controls will be called \u201cinterface inputs\u201d. In fact, however, the user interface does not directly interact with the interface inputs. In practice, interface inputs are passed through a device driver (not shown) and presented on a computer monitor (not shown). At the same time, information corresponding to the interface inputs are passed through, for instance, an X-server  to the CAD system . The user interface of the CAD system  in turn can respond to the interface inputs by sending data or commands back through the X-server , which are then output to the computer monitor.","It is noted that an X-server is only an exemplary graphical windowing module. Under certain operating systems, the role of the X-server is performed by other graphic images servers or modules. These modules can include, for instance, the USER.EXE and GDI.EXE executables in Microsoft Windows NT. In other environments additional executed or interpreted modules, such as interfaces created in Java Script or using various Java classes, could perform a similar functionality for the application or operating environment.","For example, a user may move a cursor (with a mouse) from position (x1, y1) to (x2, y2) and then performs a mouse click. The mouse sends the interface inputs to a device driver, which translates the movement into electrical signals. The interface inputs are sent to the X-server , which controls a bitmap display for the monitor. Electrical signals are also sent to the CAD system . The CAD system  receives the interface inputs and determines how the CAD software should respond (or change) to the interface inputs. The response can include changing the color of a particular menu item, presenting menu pull-down list, or selecting a feature of a particular object. Once the CAD system  determines how the display should change, the CAD software makes the corresponding state change internally and then sends additional information back to the X-server  so that the computer display can be changed appropriately.","According to the invention, the user interface does not interact with the X-server  directly. Instead, the user  interface interacts with one or more software modules, at least one of which is emulating a user. In an embodiment of the invention, a proxy  acts as a buffer between the CAD system  (and its user interface) and the X-server . Signals passing through the proxy  are passed off to an interpreter , which examines the signals and emulates a user response. The emulated user response can be sent back through the proxy  to the user interface or to the X-server . (It is worth noting that the proxy  and the interpreter  can be resident in a single software module, for instance a plug-in that is coupled through the CAD system .)","In an alternative embodiment, data and control signals between X-server  and the CAD system  can be captured by a plug-in to the CAD software. In responding to the captured signals, the plug-in can enter a state that is essentially a time delay. A second, sub-thread can then be spawned by the plug-in that processes the captured signals. Once the plug-in has processed the signals, it can store state information (in reserved memory associated with the plug-in) corresponding to the CAD system and signal the plug-in to terminate the wait state.","Meanwhile, the CAD system returns to normal processing under the assumption that the plug-in has terminated. The next time the signals are captured by the plug-in, the plug-in can again instruct the CAD system to invoke the plug-in and then resume processing in the sub-thread\u2014picking up the process where it left off. While this technique may not be thread safe, it is a useful method for executing two processes that are, in a normal operating environment, mutually exclusive.","According to one embodiment, before terminating the plug-in, the sub-thread initialized a timer. The timer can be used to detect when an external processing error occurs. If the timer expires before processing the state information by the sub-thread is resumed, then an error message can be returned so that the user emulation process can be canceled or backed-out.","According to an embodiment, the underlying CAD system, C library implementation, or platform does not allow safe cross-thread calls. To work around this prohibition, when the sub-thread needs to directly call the CAD system API, the sub-thread uses inter-process communication, remote procedure calls, or cross-thread messaging techniques to pass a request to the plug-in to perform the call on the sub-thread's behalf.",{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 9B","b":["905","912","910","909","909","908","905","906","907","907","913","911"]},{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 9C","b":["902","902","908","906"]},"For instance, the X-window text in the status indicator  may change colors depending on whether the system is waiting for a user response or processing a previous response. Another option is to scan text for dialogue boxes or pop-up windows for words indicative of a failure or success of a previous operation.",{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIGS. 10A\u2013D","b":"904"},"Turning first to , it depicts the primary steps for user emulation. In step , setup operations are performed so that the interpreter  can be calibrated to the windowing system. In step , a graphic element shown in windowing system is selected.","In step , a test is performed to verify that the correct (or desired) graphic element is selected. For instances, selecting and verifying the graphic element can involve stepping through a feature list in a CAD model and monitoring a signal from the X-server . Alternatively, emulated mouse movements and clicks can be sent to the X-server  and the resulting status signals returned to the CAD system  can be monitored for state transitions or text strings.","Once the correct graphic element is selected, then an operation is performed on the graphic element in step . The operation can be performing a property analysis, reading attributes corresponding to the graphic element, hiding or suppressing the graphic element, initiating an export command (e.g. creating a brep), or modifying attributes corresponding to the graphic element. In step , a test is performed to determine whether the operation failed. If the operation failed, then the next CAD data exchange method is attempted, otherwise the exchange method can be considered successful.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 10B","b":["1007","1008","913","907"]},"In step , a menu mapping is performed. Generally, the menu mapping involves reading the text of the main tool bar  options, sending a mouse click to each option and further mapping the sub-options. The results of the mapping are also stored in memory so that they can be aligned with future operations that are to be performed, such as if user emulation is used as part of the pattern matching techniques. The menu mapping can also be used to verify the (national) language or version of the CAD software.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 10C","b":"912"},"In step , a test is performed to verify that the graphic element is visible in the target window. If the graphic element is not in the target window, then the window positioning or vantage point can be adjusted, for instance by using the main tool bar . In step , one or more features other than the desired feature (e.g. those features directly adjacent to or near the desired feature) are hidden or suppressed. In an alternative embodiment, the one or more features are deleted, but only where they can be recovered later. Next, in step , a region of the target window is zoomed out (making the object smaller), and in step , the window is centered about the target graphic element. In step , a mouse click is sent to the center of the target window.","Turning to , it is a flowchart depicting a technique for verifying that the right element is selected. In step , a return string or state indicator from the X-server  is checked to verify that the correct graphic element was selected. According to one embodiment, if the correct graphic element, or any selection was not detected, then the process continues to step  (or step ) so that the target window can be re-centered about another point and\/or the zoom factor can be decreased (making the object larger).","However, as is depicted in step , if a failure is detected, then user emulation is canceled and processing continues to the next CAD data exchange technique. If a failure is not detected, then state information corresponding to the CAD object prior to any changes made by the user emulation process is persistently saved in step .","Step  shows a test for a failure of a subsequent operation, for instance in an operation that occurred outside of a user emulation technique\u2014an API, a pattern matching, a later user emulation, or a brep process\u2014when handling the CAD data object. If the subsequent operation failed, then it is possible that the user emulation from the previous operation was in fact a failure even though no immediate failure was detected (e.g. from a property analysis). Thus, in step , the state information stored in step  is backed out (e.g. a rollback process) from the CAD data model. If the subsequent operation did not fail, then in step  the state information is deleted.","Part of the CAD data exchange process can involve performing operations that require identification of some part or feature of a defined CAD model. To this end, the edge selection techniques described below provide a new and useful tool that can be used when performing such operations\u2014the techniques are used for the purpose of correlating source edges to target edges in a plurality of computer aided design systems. For instance, the operations can include a round or chamfer operation on a target CAD model, or selecting a face of an object. The process can be a stand-alone process, the process can integrate steps from the user emulation process (described above), or the process can be integrated into the user emulation process. Furthermore, it is noted that in the accompanying figures and description, abstractions of lines and shapes are used, as they might appear to they eye, even though what is actually operated on and used in the techniques are data representations of lines and shapes.",{"@attributes":{"id":"p-0102","num":"0101"},"figref":["FIGS. 11A\u2013D","FIG. 11A","FIG. 11B"],"b":["1101","1105","1106","1102","1102","1104","1102","1101","1101"]},"As is mentioned above, an underlying object of the CAD data exchange techniques is that the design intent from the source CAD model is preserved in the target CAD model. Accordingly, in some instances, finer granularity representations of source CAD model are often found in target CAD models, while in other circumstances, the opposite relationship exists.  show such a finer granularity representation of the source CAD model as embodied in the target CAD system. For instance, in object , the four faces that comprise edge  in object , now consist of eight faces, which include faces , ,  and , and now make edge \u2032. What is desired is to correlate the edge  with the edge \u2032 so that the feature  can be created in the target CAD system as feature \u2032.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 12","FIG. 12"],"b":["1202","1210","1208","1210","1206","1204","1212","1212","1212"]},"Once the local scene  (or a portion thereof) is exported, then the edge selector module  begins the correlation process. Edges in the target CAD system  that are unnecessary are removed from candidacy, while a mapping is maintained of the others, the mapping ideally representing an n:m, where n is greater than or equal to m, correspondence between the target CAD system  edges and the source CAD system  edges. Since the mapping is maintained, subsequent operations on edge \u201ca\u201d can be identified as applying to edges \u201cb\u201d and \u201cb\u201d. Following are multiple techniques that can be used independently or in combination for selecting an edge.","The underlying premise of the edge overlap algorithm is that two edges (i.e., from a source CAD model and a target CAD model\u2014the global and local scene) overlap if their intersection is topologically one dimensional (\u201c1-D\u201d). If the two edges overlap, then they lie on the same geometric carrier.","In one embodiment, the geometry of an edge is represented as a non-uniform rational B-spline (\u201cNURBS\u201d). Making a NURBS representation of the geometry of the edge gives each edge a start-point and an end-point. If the edge is closed (i.e., a circle) then the start-point and end-point coincide. While start-points and end-points are used according to one embodiment, it is also acceptable to use start- and end-vertices. Other embodiments of the invention are envisioned, thus another representation of an edge can also be discrete linear segments with corresponding Cartesian coordinates.","Turning to , it is a flowchart depicting the edge overlap algorithm. In step , the start- and end-points of the NURBS representing each edge are extracted from the NURBS.","In step , regions are determined in, for instance, the source edge. The regions represent the number of times the source edge is divided if the target edge start- and end-points are mapped onto it. Thus, if a single point in the target edge is found in the source edge, then the source edge has two regions. However, if two points in the target edge are found in the source edge, then the source edge has three regions. It is useful in step  to sort the extracted points\u2014the regions of the source edge are between every consecutive pair of distinct (sorted) points.",{"@attributes":{"id":"p-0110","num":"0109"},"figref":"FIG. 14","b":["1402","1404","1","1406","2","1408","3","1410","1404","1","2","3"]},"Returning to , in step , a region containment operation is performed. The region containment algorithm, of which step  is a part, assumes that the source edge and the target edge have the same geometric carrier. The region containment operation selects the midpoint of a region defined by the source edge. In step , a test is performed to determine whether the selected midpoint is within the target edge. In step , if the selected midpoint is within the target edge, then the source and target edges are said to overlap and the result is returned. If the midpoint is not within the target edge, then no overlap is assumed to exist, an appropriate response is returned in step .","It is noted that the above process does not require laser-like precision. It is appreciated by the inventors that different CAD systems may represent a non-linear segment in different ways. It is not the objective of the CAD data exchange system to re-create source CAD models exactly the same way in a target CAD model\u2014that is, with the same underlying know-how. Rather, it is the objective to create an acceptable target CAD model that respects the know-how of the source and target CAD systems. Thus, tolerance in determining whether a particular point on the source edge or target edge lies in the other is designed into the analysis. Accordingly, mathematical or statistical analyses can be used to model such a tolerance, or the tolerance can be hard-coded into the CAD data exchange system.","While the granularity of the target CAD model is ideally the same or finer than the source CAD model, it is possible that the target CAD model represents a particular edge in a manner that is more efficient than the source CAD model. In such a circumstance it is useful to perform an edge containment algorithm (as opposed to the region containment operations) to verify that all of the regions of the source edge are contained in the target edge. It is further noted that this process can be used to verify the overlap of two edges even though the target edge is represented in a finer granularity than the source edge.","As was the case with the edge overlap example, the source and target edges can be utilized from the global and local scenes (depicted in ). Depending on the verification desired (i.e., the target edge has more representative regions than the source edge or vice-versa), the input to the edge containment algorithm can be selected according to the desired output. Furthermore, the edge containment algorithm can be used in conjunction with the edge overlap algorithm, which is described above.","Here, for the purpose of explanation, it is assumed that the target edge has more representative regions than the source edge, as was the case above with reference to . Additionally, when a set of target edges overlap with a source edge \u201ce\u201d, this set of target edges will be referred to as a \u201cconnected\u201d set. Furthermore, a sequence of oriented edges, such that the end-point of each oriented edge is the starting point of its successor, will be referred to as a \u201cchain\u201d.","Turning to , it is a flowchart of the edge containment algorithm. In step , a sequence of memory locations representative of a chain of target edges (\u201cC\u201d) is flushed. In step , a first target edge is located, preferably from the local scene, and added to the set \u201cC\u201d. , which is described below, depicts an embodiment of one algorithm for finding the first target edge. According to another embodiment, the system searches for an edge within a given proximity of a source edge \u201ce\u201d.","In step , a test is performed to determine whether a target edge was found and whether the target edge overlaps the source edge \u201ce\u201d. If no target edge was found, or the edges do not overlap, then the target edge is removed from candidacy as a matching edge in step . Otherwise, in step  the target edge is extended forward to encompass a next, connected edge. In step , a test is performed to determine whether the newly extended edge is contained by the source edge \u201ce\u201d. In step , if the newly extended edge is contained by the source edge \u201ce\u201d, then the next, connected edge (extended above) is appended to the target edge and saved in the chain of edges \u201cC\u201d. The process repeats until the target edge can be extended forward no longer.","In step , the same process that was described above with reference to steps \u2013 is performed, but here, the target edge is extended backward in steps , , and . Moreover, if the extended edge is not contained by the source edge \u201ce\u201d, then processing continues to step .","It is noted that one embodiment of the edge extension process, which is depicted in steps ,  and , as well as steps , , and , is described in below with reference to .","In step , the chain of edges \u201cC\u201d is returned as the target edges that matches the source edge.","Turning to , it depicts an embodiment of a computer implemented method for finding the initial edge for the edge containment algorithm. In step , a point \u201cp\u201d is selected from the source edge \u201ce\u201d. The \u201cp\u201d can be an interior point of \u201ce\u201d, or it can be a start- or end-point. In step , a set of edges \u201cF\u201d (e.g., from the local scene) is created that contains the point \u201cp\u201d. (It is noted that the set of edges \u201cF\u201d may have already existed in the local scene, but additional members of the set \u201cF\u201d can be added at step \u2014since the creation of the local scene is an incremental process.)","In step , non-overlapping edges in set \u201cF\u201d are removed from set \u201cF\u201d. Generally, each edge in set \u201cF\u201d can be iteratively tested against the source edge \u201ce\u201d to verify that the two edges overlap.","In step , a test is performed to determine whether the set \u201cF\u201d is empty. If the set \u201cF\u201d is empty, then an error has occurred, as is indicated in step . If the set \u201cF\u201d is not empty, then in step  a test is performed to determine whether the set \u201cF\u201d holds more than 2 target edges. If the set \u201cF\u201d holds more than two target edges, then an error has occurred, as is indicated in step . If, however, the set \u201cF\u201d comprises one or two target edges, then one edge is returned for processing in step . (The second edge can be processed if the returned edge does not sufficiently overlap the source edge \u201ce\u201d.)","It is noted that step  can involve one or more error correction schemes whereby the particular error correction scheme selected may have an effect on steps , , and\/or . Those schemes can include selecting a new point \u201cp\u201d, or selecting a second point \u201cp\u2032\u201d\u2014the second point \u201cp\u2032\u201d being close to point \u201cp\u201d.","It is noted that  can short circuit the remainder of steps depicted in  if, for instance, a single target edge is identified that completely contains (and is itself completely contained by) the source edge.","Turning to , it depicts a computer implemented process for extending a chain of edges (\u201cC\u201d) representing the source edge \u201ce\u201d according to an embodiment of the invention. The method can be used as a substitute for the process described above with reference to  (steps , , and , or steps , , and ), or an adjunct to the process. Moreover, the chain extension algorithm can be applied equally to the process of extending a chain of edges forward or backward.","In step , a member of the set of edges, i.e., the chain of edges \u201cC\u201d, is made the last edge in the set. For purposes of explanation, this edge will be referred to as edge \u201cc\u201d. In step , a set of target edges adjacent to an end of \u201cc\u201d is identified. This set of adjacent edges will be referred to as set \u201cF\u201d. In step , edges in set \u201cF\u201d that do not overlap the source edge \u201ce\u201d are eliminated\u2014in accordance with any of the overlap or containment processes described above.","In step , a test is performed to determine whether the set \u201cF\u201d is empty. When \u201cF\u201d is empty, then the algorithm proceeds to step . If the set \u201cF\u201d is not empty, then in step  a test is performed to determine whether the set \u201cF\u201d includes more than one target edge. If step  results in a response indicative a set of \u201cF\u201d that is greater than one, then an error has occurred and step  is performed. Step  can include returning a failure result, or indicating that a new edge \u201cc\u201d should be selected, or the existing edge \u201cc\u201d should be extended another direction.","However, if there is exactly one edge adjacent to target edge \u201cc\u201d, then the one edge (edge \u201cf\u201d) is appended to the set \u201cC\u201d in step . In step , edge \u201cf\u201d is tested to determine whether it is the first edge in the set C (i.e., there are no more adjacent edges that are not members of set \u201cC\u201d). If edge \u201cf\u201d is not the first edge in set \u201cC\u201d, then in step , edge \u201cf\u201d is set as edge \u201cc\u201d, and the process continues to step . Otherwise, in step , set \u201cC\u201d is turned and the process is completed.","Finally, it is noted that it may be desired to repeat the above process in another direction\u2014as the process described above was only with reference to a single direction of extension, as is indicated in the representative embodiment described above with reference to .","The above techniques are intended to be embodied as one or more sequences of instructions, that is, a computer software or computer program product, that cause one or more processors or technical systems to perform the methods and transformations described herein. The computer software product can comprise executed object instructions and interpreted program code, or various scripting languages.","The computer software product can run on a stand-alone computer, for instance a computer system running Microsoft Windows NT (\u2122), and is an plug-in to an existing computer aided design system, such as ProEngineer 2000i2 (\u2122). However, in other embodiments, the processes can be separated in functionality. For instance, the extraction or export processes can run on a first computer system, while the creation or import processes can run on a second computer system. Further still, in another embodiment, a middleware system, operating in a server fashion (of a client-server system), can perform the processes either stand-alone (of course, using the APIs on either of two client systems), or as an intermediary between the various processes."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The figures in the accompanying drawings depict various elements corresponding to the subject invention. Like reference numerals in the drawings refer to like elements.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIGS. 6\u20138","FIG. 6","FIG. 7","FIG. 8"]},"FIGS. A\u2013C and A\u2013D are diagrams corresponding to user emulation. In particular:  generally shows a communication overview between exemplary system components;  is a screen shot detailing aspects of selecting an object;  depicts monitoring display control data for changes;  is a flowchart depicting the main steps for user emulation;  is a flowchart detailing exemplary set-up operations;  is a flowchart detailing exemplary element selection operations; and  is a flowchart detailing exemplary verification operations.","FIGS. A\u2013D and \u2013 depict edge selection techniques. In particular:  is a perspective view of a source object and an edge;  is a perspective view of the source object with a feature applied to the edge;  is a perspective view of a target object and an edge;  is a perspective view of the target object with the feature applied to the edge; and  is an operational overview of a computer implemented edge selection process.  is a flowchart depicting a method for detecting whether two edges overlap.  is a diagram of a source edge and a series of target edge candidates that illustrates a technique for determining regions.  is a flowchart depicting an edge containment algorithm.  is a flowchart depicting a method for detecting an initial edge.  is a flowchart depicting a chain extension algorithm."]},"DETDESC":[{},{}]}
