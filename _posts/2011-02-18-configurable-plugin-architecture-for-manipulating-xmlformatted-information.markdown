---
title: Configurable plug-in architecture for manipulating XML-formatted information
abstract: A method and system is described for building a document using a configurable plug-in architecture. In one example, a configuration file containing information of building the document with one or more components is received. The one or more components execute to modify or manipulate the document. The document may further be passed from one component to another component, where each of the components performs a function on the document. The sequence of execution of the components, the type of function or activity executed by each of the components, and/or configuration data of the components may be provided by the configuration file. The document may further be output to a user or stored.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856095&OS=08856095&RS=08856095
owner: Microsoft Corporation
number: 08856095
owner_city: Redmond
owner_country: US
publication_date: 20110218
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims benefit of and priority from U.S. patent application Ser. No. 11\/957,390, filed Dec. 14, 2007, that claims benefit of and priority from U.S. Provisional Patent Application 60\/945,552, filed Jun. 21, 2007, both of which are incorporated herein by reference in their entireties.","The creation and management of documents in any of a number of formats has become commonplace. These documents may range from free-form to highly structured data structures, schemas, etc. Also the documents may be generated based on information from different sources or input files.","However, typically document build systems lack the capacity to efficiently provide arbitrary output formats or to draw on multiple input files. Previous document build systems consist of a single monolithic application that generates a fixed sort of documentation from a fixed set of inputs. Such build systems do not allow the entire build logic to be changed in arbitrary ways. These systems and methods also lack versatility to effectively create documents of any type under variable scenarios. Thus, there is a need for a system or method with flexibility to manage different document scenarios as well as remain sufficiently unified to present a uniform interface for a user.","The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key\/critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.","In one example, a method for generating a document is described in which a component or group of components are used to modify a document based on a configuration file. For example, a first component and a second component may execute a function or action on a document in a sequence based on the configuration file.","In another example, the order or sequence of execution of the components may be modified. For example, the configuration file may be modified which may cause a corresponding change in the order of execution of the components in the generation of the document.","In yet another example, a plurality of components for modifying or manipulating a document is assembled based on a configuration file. Each of the components may execute a function or action on the document in a sequence indicated by the configuration file.","Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.","Like reference numerals are used to designate like parts in the accompanying drawings.","The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However, the same or equivalent functions and sequences may be accomplished by different examples. Systems described herein are provided as examples and not limitations. As those skilled in the art will appreciate, the present examples are suitable for application in a variety of different types of computing systems.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},"The method or system disclosed herein is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers (PCs), server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The method or system may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The method or system may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an example system for implementing the method or system includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read only memory (ROM), electrically erasable ROM (EEPROM), flash memory or other memory technology, compact disk-ROM (CD-ROM), digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Combinations of the any of the above should also be included within the scope of computer readable storage media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface  or . The term \u201ccomputer storage medium\u201d and the like as used herein refers specifically to a statutory article of manufacture that is not a signal or carrier wave per se.","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from additional operating systems, application programs, other program modules, and program data, for example, different copies of any of the elements. A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, pen, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface or graphics display interface . In addition to the monitor , computers may also include other peripheral output devices such as speakers (not shown) and printer (not shown), which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer. The remote computer may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation, remote application programs may reside on a memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In one example, a build engine may create documents of any type or number. For example, documents may include any free-form topic created by an author, a structured application programming interface (API), a schema, a protocol reference, etc. The following description is applicable to any form of document building. In addition, an output document may include information based on any number or type of sources. For example, an output document may include information derived from any number of multiple input files, authored source files, code sample files, or files containing API, schema or protocol metadata, to name a few.","In this example, a build engine or other system is described that may receive any number or type of output files to generate. For example, the build engine may receive a configuration file that may describe steps to be executed to produce a desired output document or any other such pertinent information for the build engine. The configuration file may also contain information for specifying components to be loaded or utilized in a document build, specifying the order in which components operate, and\/or providing configuration data for any of the components.","The build engine in this example may execute any number of steps for building a document. The steps may be executed in an order or sequence as indicated by corresponding configuration data in a configuration file. Also, each of the steps executed for building the document may be executed by any number or type of components in the build engine that may act in an arbitrary fashion on the document. For example, a first component in the build engine may receive a document and, based on information in the configuration file, may perform a desired function or action on the document to manipulate or modify the document. The first component may pass the modified document to a second component, which may also be indicated by at least a portion of the configuration data. The second component may receive the modified document from the first component and may perform an action or function on the received modified document. The action or function performed by the second component on the received modified document may, for example, be determined by at least a portion of data in the configuration file. The process may be repeated such that the document may be modified or manipulated by any number of components in a sequence to produce an output document.","In another example, the sequence of execution of the components in the build engine may be modified. Also, the functions or actions executed by any of the components may be modified such that a single component may perform any number and type of different functions or actions on a document. In this example, configuration data or settings of a component may be modified such that the component may perform a different function or action. In this case, a first component may modify a document based on configuration data and may further perform a different modification to the document based on different configuration data. Thus, in this example, the action of any individual component may be changed and any individual component may be reused with different configuration settings to perform a different function.","In another example, output files may be created and may be changed without requiring that the system be re-compiled. Also, any of the steps in the creation of the output file may be configured without re-compiling either the system or the step logic. In addition, a uniform framework may be used to control any of the variable aspects.","An engine may accept an arbitrary list of output files for generation.  is a block diagram illustrating one example of a system or build engine for creating output documents. In this example, the system includes an input  for receiving an arbitrary list of output files to generate. The arbitrary list of output files are analyzed in the analyzer  in which a configuration file may be read from a configuration module . Hence, in this example, the analyzer  receives a configuration file from the configuration module . The configuration file (not shown) may include information pertaining to output files. For example, the configuration file may include data corresponding to a sequence of steps to be performed for each output file. The steps may be executed, for example, by a file generator  that may produce a desired output document. In this example, the file generator  may include any number of component processors (not shown) that may receive a document from a previous component processor and execute an add-in component that may act in an arbitrary fashion on the received document. The component processor of the file generator  may further pass the document to a next component processor for further processing.","Any of the add-in components may be modified such that the steps for constructing a given document may be varied in any number of ways. For example, the order of components in a configuration file may be changed. In this example, a component may read configuration data in a configuration file. The configuration data that is read may further determine an action by the component.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 3"],"b":["304","305","301","303","301","302","303"]},"In this example, the configuration module  provides a configuration file for determining an order of add-in components and the action or function of the add-in components. Also, the configuration file may contain configuration data pertaining to each of the add-in components. The component constructor  may receive an object from an add-in component (e.g., add-in component ) based on data in the configuration file. For example, the configuration file may indicate that add-in component  is the first component for performing a desired action or function on a document. Also, the configuration file may provide configuration settings for add-in component  for performing the desired action or function.","The component constructor  in this example may receive an object from add-in component  which may include, for example, a component element. The component constructor  may use the object received from the add-in component  to read configuration data from the configuration module . In addition, a document may be created in the component constructor  corresponding to an output document. For example, the document may include an editable document (e.g., XML document) and\/or a string for indicating a topic being built. An add-in component (e.g., add-in component ) may be added as a component element by the component constructor. The add-in component (e.g., add-in component ) may include a module for manipulating or managing a document based on configuration data and may further pass the manipulated document to another component or add-in component. The other component may receive the manipulated document from the first component and may further manipulate or manage the document to create an output document or may pass the document to yet another component or component element.","In this example, based on the configuration file from the configuration module , add-in components may pass corresponding objects and component elements to the component constructor . The configuration file may further determine the sequence of execution of the add-in components. Hence, based on this information in the configuration file, each of the add-in components may perform a corresponding function or action on a document. Each of the actions or functions associated with the add-in component may be executed in a sequence that may be indicated by at least a portion of the configuration file. In one example to illustrate, the configuration file may indicate that the add-in components execute respective functions or actions on a document such that add-in component  performs an action first, add-in component  performs an action second and add-in component  performs an action third. The configuration file may further provide configuration settings for each of the add-in components to perform the respective functions or actions. Based on the configuration file, add-in component  may perform its action on a document first and may subsequently pass the document to the second add-in component . Add-in component  may perform its action\/function on the document received from the first add-in component  and subsequently pass the document to the third add-in component . The third add-in component  may receive the document from the second add-in component  and may further perform an action or function on the document. After each of the components performs a desired function or activity on the document, the document may be sent to an output  and may be output to a user. Alternatively or additionally, the document may be stored in memory or a storage device.","In another example, any of the add-in components may be re-configured or removed. For example, the configuration file from the configuration module  may be modified to indicate a different sequence of actions to be performed on a document. As one example to illustrate, the configuration file may contain data that indicates add-in component  to perform a function or action on the document first followed by add-in component . In this case, add-in component  performs a function on the document prior to add-in component . Add-in component  may, for example, send an object representing an associated component element to the component constructor . The component constructor  receives the object from add-in component  and may further execute an action or function on the received object based on the add-in component  and information from the configuration file. For example, the configuration file may include data indicating that add-in component  executes a particular step in a document build. Based on the data in the configuration file, the add-in component  may send an associated object to the component constructor  to execute an action or function on the document and pass the document to a next component, if desired.","In this example, add-in component  may modify the document based on execution of the component. Add-in component  may further pass the modified document to add-in component  in the system for further processing. Any of the steps executed by any of the components may be based on information in the configuration file. The order of execution of the components may also be modified by modifying the configuration file. For example, data in the configuration file may be modified to indicate that add-in component  executes prior to add-in component . In that case, the execution of the components may be modified accordingly.","Further, the functions or activities of any of the components may be changed via the configuration file. For example, the configuration file may indicate that add-in component  perform a first execution on the document followed by an execution of a function by add-in component . The configuration file may further indicate that add-in component  performs a second execution on the document following the execution or modification of the document by add-in component . The second execution of add-in component  may be different from the first execution of the add-in component . For example, the second execution of add-in component  may perform a different function or a different activity as that of the first execution of add-in component . In this case, the functionality of a component may be changed to perform different functions as needed.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 4"},"In one example to illustrate, a component may include a .NET managed type that implements an abstract class. For example, the build engine may include a console application. The console application may further define the abstract class implemented by each component. In addition, a pseudo-header may be used.  illustrates an example of a pseudo-header that includes aspects of the abstract class.","The build engine may further include a manifest file including any number or type of topic identifier (ID) strings and may repeat a specified cycle for any number of topics in the manifest file.","In addition, components may be divided into groups based on type. In one example, three types of components may be used. For example, one group of components may include action components for modifying a document. Another group of components may include flow control components for executing sub-steps any number of times in any number of different circumstances. Another group of components may include diagnostic components for checking the build system and determining if the build system is operating at various arbitrary intermediate points.","The action components may include any number or type of components for modifying the document. For example, action components may include a component for copying data from a file. In this example, the component may copy a node that is specified by a configurable source XPath expression from a configurable file. The component may further copy the node to a node in the document that is specified by a configurable target XPath expression.","In another example, the action components may include a component for copying data from an index. The component in this example may, for example, maintain an index of source nodes available in a document store. Thus, information may be copied from any document as needed while the information need not be stored in memory throughout the process. In addition, the component in this example may implement a caching mechanism. In this way, performance can be enhanced.","In another example, the action components may include a component for implementing logic specific to certain scenarios. For example, a component may resolve links to external API reference topics and may further generate link text appropriate to a referenced API.","In another example, the action components may include a component for transforming data. For example, the component in this example may apply a configurable transform (e.g., an extensible stylesheet language (XSL) transform) and\/or associated configurable arguments.","Also, the action components may include a component for saving a document. The component in this example may further save configurable subsections of the document to a path constructed via a configurable expression (e.g., configurable XPath expression).","The components may further include flow control components such as, for example, a component for executing a configurable set of sub-components depending on a result of a configurable XPath expression (e.g., an \u201cIfThen\u201d component) or a component for executing a configurable set of sub-components once for each node returned by a configurable XPath expression (e.g., a \u201cForEach\u201d component).","Also, the components may further include any number or type of diagnostic components. Some non-limiting examples of diagnostic components include a component for writing a document or any configurable subsections thereof, to a log or other storage (e.g., a print component) or a component for ensuring that a document conforms to a schema specified by a configurable file (e.g., a validation component). For example, the component may be used to ensure that only strictly compliant extensible hypertext markup language (XHTML) documentation is generated.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 6","b":["401","401"]},"In STEP , a component may be instantiated. In this case, the component instantiated may be based on information in the configuration data. For example, the configuration may identify a particular add-in component to be included in a build engine for performing a desired function or activity. In STEP , an object corresponding to the identified add-in component may be received at the build engine from the add-in component. In one example, the object received from the add-in component may include an editable document (e.g., an XML document) and additional information (e.g., a data string) to inform the topic being built.","In STEP , a method of a component may be executed to manipulate or modify the document. The execution may be based on the configuration data. For example, the configuration data may contain a specification of functions or activities to be performed on the document, the components for performing the functions, and\/or the order or sequence of the components or execution of functions\/activities by the components. Hence, based on the configuration data, the output document may be modified (e.g., by a component).","If additional components are desired (\u201cYes\u201d branch of STEP ), the next component or add-in component may be included in the build engine. In this example, the configuration data may contain an indication of a next component to perform a desired function or activity on the document (STEP ). As an example to illustrate, a second component may be indicated by the configuration data to perform a transform function on the document. In this case, the first component may pass the document to the second component (STEP ), which may be instantiated in the build engine (STEP ) and may pass an associated object (STEP ) to further modify the document (STEP ).","If a next component is not desired such that further modifications to the present topic of the document are not desired (\u201cNo\u201d branch of STEP ), then a determination of a next topic is made (STEP ). For example, a manifest including a flat file of topic ID strings may be included. If a next topic ID string is identified (\u201cYes\u201d branch of STEP  and STEP ), then a component for the next topic may be identified based on the configuration data. The component may be instantiated (STEP ) and the output document may be modified.","As described above, the process may be repeated such that components associated with the next topic may be instantiated to modify or manipulate the document. In one embodiment, components are instantiated once per run of the build engine. The build engine may process multiple documents in a single run. Thus, a component that has been previously instantiated that is called again by the configuration data is not re-instantiated.","The components may execute functions or actions based on configuration data from the configuration file and may also execute in a sequence based on data in the configuration file. When the final topic is complete (\u201cNo\u201d branch of STEP ), the output document may be output (STEP ). Alternatively or additionally, the output document may be saved in memory.","It is understood that aspects of the present description can take many forms and embodiments. The embodiments shown herein are intended to illustrate rather than to limit the description, it being appreciated that variations may be made without departing from the spirit of the scope of the invention. Although illustrative embodiments have been shown and described, a wide range of modification, change and substitution is intended in the foregoing disclosure and in some instances some features may be employed without a corresponding use of the other features. Accordingly, it is appropriate that the examples be construed broadly and in a manner consistent with the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The present description will be better understood from the following detailed description read in light of the accompanying drawings, wherein:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
