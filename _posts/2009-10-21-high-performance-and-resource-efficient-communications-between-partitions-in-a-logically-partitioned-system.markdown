---
title: High performance and resource efficient communications between partitions in a logically partitioned system
abstract: A mechanism is provided for communicating between a plurality of applications. An application programming interface (API) associated with an originating application running on a first logical partition in a plurality of logical partitions of a logically partitioned data processing system receives a request to send data to a destination application. The API sends a request to identify a location of the destination application to a virtualization management mechanism. Responsive to receiving a response from the virtualization management mechanism, the API determines whether the location of the destination application is in a second logical partition in the plurality of logical partitions of the logically partitioned data processing system. Responsive to the location being in the second logical partition, the API uses a bypass protocol to send the request from the originating application to the destination application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635632&OS=08635632&RS=08635632
owner: International Business Machines Corporation
number: 08635632
owner_city: Armonk
owner_country: US
publication_date: 20091021
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application relates generally to an improved data processing apparatus and method and more specifically to an apparatus and method for a high performance and resource efficient communications between partitions in a logically partitioned system.","In today's information technology infrastructure, many server systems support logical partitioning. Many logical partitions of a logically partitioned system execute operating systems on which applications are deployed. Such applications communicate with applications within the same partition, within the same logically partitioned system, with devices coupled to the logically partitioned system, and with other applications on other systems coupled to the logically partitioned system. The communication protocols required to support such communication must support connection oriented, in-order, reliable, and flow-controlled data delivery. Implementing protocols to meet these requirements leads to resource intensive implementation which requires increased performance. Delivering such performance requires sophisticated and expensive communication hardware. The requirements still remain in place even in virtualized server environments.","In one illustrative embodiment, a method, in a data processing system, is provided for communicating between a plurality of applications. The illustrative embodiment receives a request from an originating application to send data to a destination application. The illustrative embodiment sends a request to identify a location of the destination application to a virtualization management mechanism. The illustrative embodiment determines whether the location of the destination application is a second logical partition in the plurality of logical partitions of the logically partitioned data processing system in response to receiving a response from the virtualization management mechanism. The illustrative embodiment uses a bypass protocol to send the request from the originating application to the destination application in response to the location being the second logical partition.","In other illustrative embodiments, a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program, when executed on a computing device, causes the computing device to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","In yet another illustrative embodiment, a system\/apparatus is provided. The system\/apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which, when executed by the one or more processors, cause the one or more processors to perform various ones, and combinations of, the operations outlined above with regard to the method illustrative embodiment.","These and other features and advantages of the present invention will be described in, or will become apparent to those of ordinary skill in the art in view of, the following detailed description of the example embodiments of the present invention.","The illustrative embodiments provide a mechanism for a high performance and resource efficient communication among a plurality of applications running on logical partitions of a logically partitioned system. The performance of the communication is increased by providing a high throughput with a low latency. By increasing the throughput and decreasing latency, the logically partitioned system reduces the processing requirements of the logically partitioned system's components such as processing units, memory, input\/output bandwidth, or the like. The mechanism comprises a bypass transport protocol for communicating between logical partitions. Communication software within each operation system executing on the logical partition determines when the bypass transport protocol is to be deployed. Therefore, application programming interfaces are maintained thus supporting existing applications without change and supporting connection oriented, reliable, in-order, and flow-controlled data transfers.","Thus, the illustrative embodiments may be utilized in many different types of data processing environments including a distributed data processing environment, a single data processing device, or the like. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments,  are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. While the description following  will focus primarily on a single data processing device implementation of a high performance and resource efficient communication mechanism, this is only an example and is not intended to state or imply any limitation with regard to the features of the present invention. To the contrary, the illustrative embodiments are intended to include distributed data processing environments and embodiments in which a high performance and resource efficient communication mechanism may be implemented.","With reference now to the figures and in particular with reference to , example diagrams of data processing environments are provided in which illustrative embodiments of the present invention may be implemented. It should be appreciated that  are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.","In the illustrative embodiments, a computer architecture is implemented as a combination of hardware and software. The software part of the computer architecture may be referred to as microcode or millicode. The combination of hardware and software creates an instruction set and system architecture that the rest of the computer's software operates on, such as Basic Input\/Output System (BIOS), Virtual Machine Monitors (VMM), Hypervisors, applications, etc. The computer architecture created by the initial combination is immutable to the computer software (BIOS, etc), except through defined interfaces which may be few.","Referring now to the drawings and in particular to , there is depicted a block diagram of a data processing system with which aspects of the illustrative embodiments may advantageously be utilized. As shown, data processing system  includes processor units -. Each of processor units -includes a processor and a cache memory. For example, processor unit contains processor and cache memory , and processor unit contains processor and cache memory ","Processor units -are connected to main bus . Main bus  supports system planar  that contains processor units -and memory cards . System planar  also contains data switch  and memory controller\/cache . Memory controller\/cache  supports memory cards  that include local memory  having multiple dual in-line memory modules (DIMMs).","Data switch  connects to bus bridge  and bus bridge  located within native I\/O (NIO) planar . As shown, bus bridge  connects to peripheral components interconnect (PCI) bridges  and  via system bus . PCI bridge  connects to a variety of I\/O devices via PCI bus . As shown, hard disk  may be connected to PCI bus  via small computer system interface (SCSI) host adapter . Graphics adapter  may be directly or indirectly connected to PCI bus . PCI bridge  provides connections for external data streams through network adapter  and adapter card slots -via PCI bus .","Industry standard architecture (ISA) bus  connects to PCI bus  via ISA bridge . ISA bridge  provides interconnection capabilities through MO controller  having serial connections Serial 1 and Serial 2. A floppy drive connection, keyboard connection, and mouse connection are provided by NIO controller  to allow data processing system  to accept data input from a user via a corresponding input device. In addition, non-volatile RAM (NVRAM) , connected to ISA bus , provides a non-volatile memory for preserving certain types of data from system disruptions or system failures, such as power supply problems. System firmware  is also connected to ISA bus  for implementing the initial Basic Input\/Output System (BIOS) functions. Service processor  connects to ISA bus  to provide functionality for system diagnostics or system servicing.","The operating system (OS) is stored on hard disk , which may also provide storage for additional application software for execution by a data processing system. NVRAM  is used to store system variables and error information for field replaceable unit (FRU) isolation. During system startup, the bootstrap program loads the operating system and initiates execution of the operating system. To load the operating system, the bootstrap program first locates an operating system kernel image on hard disk , loads the OS kernel image into memory, and jumps to an initial address provided by the operating system kernel. Typically, the operating system is loaded into random-access memory (RAM) within the data processing system. Once loaded and initialized, the operating system controls the execution of programs and may provide services such as resource allocation, scheduling, input\/output control, and data management.","The illustrative embodiment may be embodied in a variety of data processing systems utilizing a number of different hardware configurations and software such as bootstrap programs and operating systems. The data processing system  may be, for example, a stand-alone system or part of a network such as a local-area network (LAN) or a wide-area network (WAN). As stated above,  is intended as an example, not as an architectural limitation for different embodiments of the present invention, and therefore, the particular elements shown in  should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.","With reference now to , a block diagram of an exemplary logically partitioned platform is depicted in which the illustrative embodiments may be implemented. The hardware in logically partitioned platform  may be implemented, for example, using the hardware of data processing system  in .","Logically partitioned platform  includes partitioned hardware , operating systems , , , , and virtual machine monitor . Operating systems , , , and  may be multiple copies of a single operating system or multiple heterogeneous operating systems simultaneously run on logically partitioned platform . These operating systems may be implemented, for example, using OS\/400, which is designed to interface with a virtualization mechanism, such as partition management firmware, e.g., a hypervisor. OS\/400 is used only as an example in these illustrative embodiments. Of course, other types of operating systems, such as AIX\u00ae and Linux\u00ae, may be used depending on the particular implementation. Operating systems , , , and  are located in logical partitions , , , and , respectively.","Hypervisor software is an example of software that may be used to implement platform (in this example, virtual machine monitor ) and is available from International Business Machines Corporation. Firmware is \u201csoftware\u201d stored in a memory chip that holds its content without electrical power, such as, for example, a read-only memory (ROM), a programmable ROM (PROM), an erasable programmable ROM (EPROM), and an electrically erasable programmable ROM (EEPROM).","Logical partitions , , , and  also include partition firmware loader , , , and . Partition firmware loader , , , and  may be implemented using IPL or initial boot strap code, IEEE-1275 Standard Open Firmware, and runtime abstraction software (RTAS), which is available from International Business Machines Corporation.","When logical partitions , , , and  are instantiated, a copy of the boot strap code is loaded into logical partitions , , , and  by virtual machine monitor . Thereafter, control is transferred to the boot strap code with the boot strap code then loading the open firmware and RTAS. The processors associated or assigned to logical partitions , , , and  are then dispatched to the logical partition's memory to execute the logical partition firmware.","Partitioned hardware  includes a plurality of processors -, a plurality of system memory units -, a plurality of input\/output (I\/O) adapters -, and storage unit . Each of the processors -, memory units -, NVRAM storage , and I\/O adapters - may be assigned to one of multiple logical partitions , , , and  within logically partitioned platform , each of which corresponds to one of operating systems , , , and .","Virtual machine monitor  performs a number of functions and services for logical partitions , , , and  to generate and enforce the partitioning of logical partitioned platform . Virtual machine monitor  is a firmware implemented virtual machine identical to the underlying hardware. Thus, virtual machine monitor  allows the simultaneous execution of independent OS images , , , and  by virtualizing all the hardware resources of logical partitioned platform .","Service processor  may be used to provide various services, such as processing of platform errors in logical partitions , , , and . Service processor  may also act as a service agent to report errors back to a vendor, such as International Business Machines Corporation. Operations of the different logical partitions may be controlled through a hardware system console . Hardware system console  is a separate data processing system from which a system administrator may perform various functions including reallocation of resources to different logical partitions.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["300","310","320","330","310","312","314","316","320","322","324","326","330","332","334","336","300","310","320","330"]},"LPARs , , and  may communicate with one another through virtualization layer . Virtualization layer  is software that performs communications and resource management to allow multiple instances of operating systems , , and  to run on logically partitioned data processing system  at the same time. Virtualization layer  performs tasks such as processor time slice sharing, memory allocation, or the like. Virtualization layer  may be, for example, a hypervisor.","Applications , , and  may include network applications that communicate with other network applications via network  or local data processing system applications that communicate with other applications in the same data processing system. For example, one of applications  communicating with one of applications . Applications , , and  may also have an associated set of application buffers , , and , respectively. When communicating to a network application through network , applications , , and  make transport protocol calls using a connection oriented, reliable, in-order delivery, flow-controlled protocol, such as TCP, which is part of TCP\/IP protocol suite, to APIs , , and , and operating systems , , and  that communicate through adapters , , and , respectively, to virtualization layer  and network layer  to network . Network layer  is software that performs tasks for network communication. Network layer  may perform tasks such as end-to-end packet delivery, quality of service maintenance, error control, and the like.","By applications , , and  accessing transport protocol using APIs , , and , applications , , and  are allowed to open connections to remote applications, queue data to be delivered, receive data, close connections on conclusion of data transfer, or the like. Thus, the transport protocol is resource intensive as the transport protocol needs a transport protocol layer, a network protocol layer, a link layer, and a communication adapter driver processing, which may be necessary for network communication but not for local communications.","The illustrative embodiments provide for high performance communications between applications , , and  running in LPARs , , and  of a virtualized server platform, such as logically partitioned data processing system . In addition to providing high performance (very high bandwidth and lower latency transport), the communications provided by the illustrative embodiments reduce resource requirements, such as central processing unit (CPU) usage, memory usage, input\/output (I\/O) bandwidth, or the like, for the communications. In order to provide high bandwidth communications, the illustrative embodiments provides a less resource intensive protocol, referred to herewith as a bypass transport protocol. The bypass transport protocol comprises many of the same attributes as the transport protocol used for network communications but leverages the fact that the communication is between applications , , and  running on logically partitioned data processing system  in LPARs , , and . Therefore, the transport protocol elements of discovering remote host application end points are preserved. A remote application end-point is characterized by a set of addressing elements which include hardware addresses of communication adapters. That is, the hardware address of communication adapters , , and , associated with the end-points of applications , , and  may be determined to be for one of LPARs , , and  within logically partitioned data processing system .","For example, when one of applications  makes a data send call to API , API  performs a check via adapter  with virtualization layer  to determine whether the application to be communicated with is within one of the LPARs of logically partitioned data processing system , such as LPAR  or . Since virtualization layer  provides LPAR-to-LPAR communications, virtualization layer  comprises knowledge of all the hardware addresses of network end-points, which may be comprised in a list of hardware addresses of network end-points. Therefore, virtualization layer  may determine whether a destination is internal or external to logically partitioned data processing system . If virtualization layer  responds that the application to be communicated with is, for example, one of applications  in LPAR , then API  identifies application  to be a local application, stores the identification, and uses the bypass transport protocol for application  to application  communications. API  only performs the identification once for the duration of communications between application  and application  therefore providing an added reduction in resource requirements. The bypass transport protocol uses data processing system hardware, such as the processor data move capability, as opposed to using full transport protocol, thus, delivering high bandwidth and low latency.","Once API  identifies the type of protocol to be used based on the identification received from virtualization layer , API  then transfers data from application buffers  associated with application  to remote application buffers  associated with application  if application  is ready to receive the data. If application  is not ready to receive data, then API  may send the data to a system buffer (not shown) associated with operating system . Thus, API  performs only those processes necessary to transport the packet internally from LPAR  to LPAR  thereby eliminating the resource intensive processes required with a transport protocol, such as transport protocol layer, a network protocol layer, a link layer, and a communication adapter driver processing, which may be necessary for network communication but not for local communications.","Therefore, using a bypass protocol maintains application data order and requires no additional processing for data integrity because a determination has already been made that the data is destined for a destination within logically partitioned data processing system . The bypass transport protocol supports flow-control via flow application capabilities of API , , and  and full compatibility of application API is maintained. For example, socket API has socket buffer capability that allows application data to be flow-controlled and socket based applications need not change to including the address family. That is, no changes or modifications to applications , , and  are required and applications , , and  close connections normally. Additionally, the socket information of APIs , , and  is preserved. Overall resource efficiency is achieved by using the bypass protocol, which is designed to minimize machine resource usage. Examples of the resource efficiencies provided by the bypass protocol may be larger layer packet size, no need for retry timers and algorithms, integrity checks, or the like, which are requirements for external communication protocols, such as TCP.","As will be appreciated by one skilled in the art, the present invention may be embodied as a system, method, or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium(s) having computer usable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CDROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction execution system, apparatus, or device.","Computer code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, radio frequency (RF), etc., or any suitable combination thereof.","Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java\u2122, Smalltalk\u2122, C++, or the like, and conventional procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer, or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus, or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","Referring now to , these figures provide flowcharts outlining example operations of high performance and resource efficient communications between partitions in a logically partitioned system.  depicts an operation performed by an application programming interface of a logical partition in accordance with an illustrative embodiment. As the operation begins, the application programming interface (API) receives a request from an originating application to send data to a destination application (step ). The API determines an identity of the destination application associated with the request (step ) and sends a location identification request to a virtualization management mechanism associated with the virtualization layer in order to identify the location of the destination application (step ). The API then receives a location identification of the destination application (step ) and determines whether the location of the destination application is another application in another LPAR of the same data processing system (step ). If at step  the destination application is another application in another LPAR of the same data processing system, then the API uses a bypass protocol to send the data from the originating application to the destination application in the second logical partition (step ), with the operation terminating thereafter. If at step  the destination application fails to be another application in another LPAR of the same data processing system, then the API uses a transport protocol to send the data from the originating application to the destination application in the second logical partition (step ), with the operation terminating thereafter.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","b":["502","504","504","506","508","504","510"]},"The flowchart and block diagrams in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Thus, the illustrative embodiments provide mechanisms for a high performance and resource efficient communications between partitions in a logically partitioned system. The bypass protocol transparently avoids transport protocol overhead for intra-system logical partition to logical partition communications. The bypass protocol supports flow control and in-order delivery of data, ensures the reliability and integrity of data through intra-system transfers, and efficient notification and handling of events. By increasing the throughput and decreasing latency, the logically partitioned system reduces the processing requirements of the logically partitioned system's components such as processing units, memory, input\/output bandwidth, or the like.","As noted above, it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment, the mechanisms of the illustrative embodiments are implemented in software or program code, which includes but is not limited to firmware, resident software, microcode, etc.","A data processing system suitable for storing and\/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.","Input\/output or I\/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I\/O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.","The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":["The invention, as well as a preferred mode of use and further objectives and advantages thereof, will best be understood by reference to the following detailed description of illustrative embodiments when read in conjunction with the accompanying drawings, wherein:",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
