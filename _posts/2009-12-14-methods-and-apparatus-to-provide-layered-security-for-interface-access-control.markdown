---
title: Methods and apparatus to provide layered security for interface access control
abstract: Example methods and apparatus to provide layered security for interface access control are disclosed. A disclosed example method includes receiving a connect message in a first server from a client application to access at least one server endpoint, in response to receiving the connect message, opening a session between the at least one server endpoint and the client application if the session is authorized to be opened, receiving a request from the client application to open an endpoint that provides at least one of read access, write access, or subscribe access to at least one resource, opening the endpoint within the open session after determining that the client application is authorized to access the at least one resource via the endpoint, receiving a request from the client application to assign a selection of the at least one authorized resource to the endpoint, assigning the at least one selected resource to the endpoint, and granting the client application access to the at least one resource via the endpoint.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887242&OS=08887242&RS=08887242
owner: Fisher-Rosemount Systems, Inc.
number: 08887242
owner_city: Round Rock
owner_country: US
publication_date: 20091214
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/169,199, filed Apr. 14, 2009, the entirety of which is incorporated by reference.","The present disclosure relates generally to data systems and, more particularly, to methods and apparatus to provide layered security for interface access control.","Data systems such as process control systems, manufacturing automation systems, and other industrial systems like those used in chemical, petroleum or other processes, typically include one or more centralized process controllers communicatively coupled to at least one host, operator, and\/or user workstation and to one or more field devices via analog, digital or combined analog\/digital buses. These systems utilize access control to grant access to the system based on the identity of a user. Access control techniques typically include user authentication, encryption, and\/or user-specific access control lists. An access control list identifies which system resources can be read, written, executed, etc. Additionally, an access control list may identify which resources of a system a user can access (e.g., read, write, and\/or execute). These resources may include, for example, data, alarms, events, and\/or functions. Typically, system procedures, functions, and\/or processes are organized into endpoints based on a type of resource being accessed. For example, there are separate endpoints for accessing current values of data, alarms, and events. There may also be separate endpoints for accessing historical values of data, alarms and events.","Data systems or process control systems may, by design, be isolated from outside network communications by having no physical and\/or wireless connectivity to routers, servers, switches, and\/or workstations that may be connected to the Internet and\/or one or more intranets. Other data systems or process control systems may intentionally include connectivity to the Internet and\/or one or more intranets to allow remote monitoring systems to monitor progress, quality, and\/or control operations of a process. Additionally, external connectivity of the data system or the process control system to outside networks permits individual components of the control system to receive periodic and\/or scheduled updates such as firmware updates or modified control routines. Although external connectivity of one or more systems may allow for external monitoring and control, such external connectivity may increase the threat of network intrusion to the system.","Example methods and apparatus to provide layered security for interface access control are described. In one example, a method includes receiving a connect message in a first server from a client application to access at least one server endpoint and in response to receiving the connect message, opening a session between the at least one server endpoint and the client application if the session is authorized to be opened. The example method further includes receiving a request from the client application to open an endpoint that provides at least one of read access, write access, or subscribe access to at least one resource, opening the endpoint within the open session after determining that the client application is authorized to access the at least one resource via the endpoint, and receiving a request from the client application to assign a selection of the at least one authorized resource to the endpoint. Additionally, the example method includes assigning the at least one selected resource to the endpoint and granting the client application access to the at least one resource via the endpoint.","An example apparatus includes a first server programmed to receive a connect message from a client application to access at least one server endpoint and in response to receiving the connect message, open a session between the at least one server endpoint and the client application if the session is authorized to be opened. The example apparatus is also to receive a request from the client application to open an endpoint that provides at least one of read access, write access, or subscribe access to at least one resource and open the endpoint within the open session after determining that the client application is authorized to access the at least one resource via the endpoint. Further, the example apparatus is to receive a request from the client application to assign a selection of the at least one authorized resource to the endpoint, assign the at least one selected resource to the endpoint, and grant the client application access to the at least one resource via the endpoint.","Although the following describes example methods and apparatus including, among other components, software and\/or firmware executed on hardware, it should be noted that such systems are merely illustrative and should not be considered as limiting. For example, it is contemplated that any or all of these hardware, software, and firmware components could be embodied exclusively in hardware, exclusively in software, or in any combination of hardware and software. Accordingly, while the following describes example methods and apparatus, persons of ordinary skill in the art will readily appreciate that the examples provided are not the only way to implement such methods and apparatus.","Access control to systems is typically based on the identity of a user. Access control techniques typically include user authentication, encryption, and\/or user-specific access control lists. An access control list identifies which system resources can be read, written, executed, etc. Additionally, an access control list may identify which resources of a system, such as functions, data, alarms, and\/or events, a user can access (e.g., read, write, and\/or execute).","Endpoints provide one or more access points to a system and\/or service. A client application sends messages to the endpoints of the system and\/or service to access resources associated with the system and\/or service. An endpoint includes an address, a binding element, and\/or a contract element. The address of the endpoint is a location that an application hosting a service uses to advertise the service. For example, an address may include a uniform resource locator (URL) containing the name of a directory that includes the service and the name of a file associated with that service as an endpoint. The binding element specifies a transport mechanism and\/or a protocol that may be used to access a service. For example, a binding element may specify basicHttpBinding as the protocol for accessing a service. The contract element indicates operations that may be accessed within a service and\/or parameters required to access resources accessible through an endpoint.","Endpoints may be implemented via object-oriented techniques, representational state transfer (REST)-based interfaces, and\/or service-contract interfaces. Typically, procedures, functions, and\/or processes are organized into endpoints based on a type of resource being accessed. For example, there are separate endpoints for accessing current values of data, alarms, or events and\/or historical values of data, alarms or events.","Currently, there are a growing number of threats to endpoints. Threats include viruses, Trojans, worms, distributed denial of service (DDoS) attacks, and\/or spyware. These threats may enable unauthorized third parties to view, manipulate, and\/or corrupt data within a process control system. A system may be disrupted by a threat that can reduce productivity, efficiency, and\/or revenue generated by the system.","Traditionally, endpoints are secured using security mechanisms that are independent of the resources being protected. These security mechanisms include user authentication, authorization, and\/or encryption. For example, to secure an endpoint that provides access to current data values, the user may be authenticated and then allowed to read or write specific data based on access control lists. Additionally, encryption may be used to protect the confidentiality of the data being accessed. This typical approach requires all operations supported by the endpoint to use the same security mechanisms. For example, if authentication is used as a security mechanism, the authentication is implemented on each message exchange. Similarly, if encryption is used as a security mechanism, the encryption is implemented for each message transfer. However, the performance penalties associated with these security mechanisms often result in operators and\/or users of the system turning off or otherwise disabling the security mechanism(s), thereby, leaving the endpoint open and vulnerable.","The example methods and apparatus described herein implement endpoints that are defined and organized by their security requirements. For example, endpoints typically defined to provide access to data, may be re-organized into separate read access endpoints, write access endpoints, and\/or subscribe access endpoints. The read, subscribe, and\/or write endpoints may be used for the retrieval and\/or updating of data, alarms, events, etc. The read endpoint provides a client application with one or more methods (e.g., functions) to retrieve (e.g., read, get, etc.) data, alarms, and\/or events within a server. The subscribe endpoint provides a client application with one or more methods (e.g., poll, callback, etc.) to periodically retrieve data changes, alarms, and\/or events within a server. The write endpoint provides a client application with one or more methods to change (e.g., write, put, update, modify, acknowledge, execute, etc.) a value or state of data, alarms, events, and\/or functions within a server.","The example methods and apparatus described herein implement access controls to endpoints based on security criteria that includes the identity and\/or role of the requester, the location of the requester, the identity of the workstation and\/or computer used by the requester, the network address of the requesting workstation and\/or computer, the identity and\/or type of a requesting application, protocols used by the requesting application to access the endpoint, and\/or a time that a request was received by the endpoint. The endpoint access controls may authenticate and\/or authorize request messages so that the request message may be processed by a receiving endpoint. Additionally, the endpoint access controls authorize contents of a list to be provided to a requesting client application, operator, and\/or user. These contents may include resources associated with a resource discovery endpoint and\/or resource discovery servers associated with a resource discovery endpoint. In some examples, the endpoint access control may send a security verification message to a requesting client application and\/or workstation to verify the identity of the client application and\/or the workstation. In other examples, the endpoint access control may send a security message to a third party computer (e.g., a Windows Active Directory Server) to obtain security information about the requestor.","The example methods and apparatus described herein provide layered security through a server discovery server and\/or one or more resource discovery servers. The server discovery server locates resource discovery servers. Additionally, the server discovery server maintains a list of resource discovery servers and may use access control criteria to determine which requesters have access to each resource discovery server. The server discovery server lists the resource discovery servers that a requester (e.g., a client, an operator, etc.) may select to access resources associated with the resource discovery server. Each resource discovery server may be accessed via a corresponding resource discovery endpoint. The server discovery server may provide resource discovery endpoints to the requestor or, alternatively, the server discovery server may provide an endpoint within each resource discovery server that provides resource discovery endpoints to the requestor.","Upon a requester accessing a resource discovery endpoint, the resource discovery server determines which resources are available to the requester and lists those resources and\/or the endpoints to those resources. The resource discovery server may use the access control criteria used to access the endpoint to determine which resources the requester may access. A requester may then select one or more of the available resources by registering to read, write, subscribe, and\/or execute the resource(s). The resource discovery server then grants the register request(s) by allowing the requester access to the resource(s) through read, write, and\/or subscribe endpoints that may be created, opened, and\/or associated with the resource(s) selected by the requestor.","The methods and apparatus described herein restrict resources from being accessed via a resource discovery endpoint. The resources may be discovered and registered for access through a resource discovery endpoint. The resource discovery server provides the requester information necessary to open and\/or create read, write and\/or subscribe endpoints and to assign registered resource(s) to the read, write, and\/or subscribe endpoints to access the registered resource(s). When the requester has assigned a resource to a read and\/or subscribe endpoint, the requester may view data associated with that resource. Additionally, when the requester has assigned a resource to a write endpoint, the requestor may write data to that resource, or otherwise modify or execute the resource based on the functions available through the write endpoint. In some examples, the read, write, and\/or subscribe endpoints may be created upon the requester selecting desired resources. In other examples, the read, write, and\/or subscribe endpoints may be created and\/or pre-configured by a server and opened by the requester.","The example methods and apparatus enable a requester to use the read, write, and\/or subscribe endpoints associated with the resource discovery endpoint until the requester terminates a session with the resource discovery endpoint. After the requester terminates the session, the read, write, and\/or subscribe endpoints created and\/or opened within the context of the session are deleted from the session in addition to unintelligible identifiers associated with the selected resources. The requester may subsequently access the resource discovery servers to create new sessions to access resources.","The example methods and apparatus described herein utilize unintelligible dynamically assigned identifiers to alias selected resources and their associated read, write, and\/or subscribe endpoints. This aliasing provides a different identifier for each read endpoint, write endpoint, subscribe endpoint, and\/or resource accessible through the read, write, and\/or subscribe endpoint. The requester and\/or the resource discovery server use the identifiers to access endpoints to view and\/or update data associated with selected resources. A resource identifier is created during the registration of the resources and an endpoint identifier is created during the opening and\/or creation of an endpoint. Additionally, the identifiers (e.g., the resource identifier and\/or the endpoint identifier) may not be used to identify a resource outside of the context of a session and\/or a corresponding read, write and\/or subscribe endpoint. The unintelligible identifiers used to identify resources and\/or endpoints make it more difficult for snooping and\/or sniffing applications to associate data values with the associated resources during communication between an operator and\/or user and the system. Thus, these unintelligible identifiers make it more difficult for snooping and\/or sniffing applications to cause security breaches. For example, a third party intercepting a message with an identifier will not recognize which resource is being identified and\/or how to interpret the data value being transferred.","Additionally, unintelligible identifier security may be enhanced by renewing the unintelligible identifiers after a time period. The renewal of identifiers enables operators, users, and\/or client applications to update unintelligible identifiers associated with resources periodically to inhibit traffic analysis that may be conducted by snooping and\/or sniffing applications. Furthermore, server discovery endpoints and\/or the resource discovery endpoints may use encryption in communications with the requester to prevent disclosure of the resources and\/or the unintelligible identifiers associated with each resource.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","102","104","102","102","106","108","112","102"],"i":["a","c"]},"The example process control plant  represents an example plant that may produce one or more products during one or more batch processes and\/or batch phases. In other examples, the process control plant  may include a power generation facility, an industrial facility, and\/or any other facility type that includes control and monitoring systems or information technology systems. The example local workstation  may serve as an operator and\/or user interface for the plant  and may be communicatively connected to one or more of the process control systems -via the LAN .","The example process control environment  includes remote workstations  and  coupled to the process control plant  via a Wide Area Network (WAN) . The WAN  may include any type of public switched telephone network (PSTN) system(s), public land-mobile network (PLMN) system(s), wireless distribution system(s), wired or cable distribution system(s), coaxial cable distribution system(s), fiber-to-the-home network(s), fiber-to-the-curb network(s), fiber-to-the-pedestal network(s), fiber-to-the-vault network(s), fiber-to-the-neighborhood network(s), Ultra High Frequency (UHF)\/Very High Frequency (VHF) radio frequency system(s), satellite or other extra-terrestrial system(s), cellular distribution system(s), power-line broadcast system(s), and\/or combinations and\/or hybrids of these devices, systems and\/or networks.","Additionally, the process control plant  includes a firewall  to determine, based on one or more rules, whether communication from the remote workstations  and  is to be permitted into the process control plant . The example remote workstations  and  may provide operators and\/or users that are not within the process control plant  access to resources within the process control plant . For example, a process control engineer located in the United States may use the remote workstation  to check the status of a manufacturing line (e.g., a resource) within the process control plant  located in Mexico. In other example implementations, a firewall may be located between each of the process control systems -and the workstations , , and\/or .","The example workstations , , and\/or  may be configured to perform operations associated with one or more information technology applications, user-interactive applications, and\/or communication applications. Additionally, the workstations , , and\/or  may include any computing device including a personal computer, a laptop, a server, a controller, a personal digital assistant (PDA), a micro computer, etc.","The example resource discovery servers -may be configured to perform operations associated with one or more applications, user-interactive applications, communication applications, and\/or one or more function blocks within the associated process control systems -. For example, the resource discovery servers -may be configured to perform operations associated with process control-related applications and communication applications that enable the resource discovery servers -and the respective controllers (e.g., a controller ) to communicate with other devices and\/or systems using any communication media (e.g., wireless, hardwired, etc.) and protocols (e.g., HTTP, SOAP, etc.). In other examples, each of the process control systems -may include one or more resource discovery servers.","Each resource discovery server -is communicatively coupled to a controller (e.g., the controller ). The example controller  may perform one or more process control routines that have been configured and\/or designed by a plant manager, process-control engineer, system engineer, a control system administrator, and\/or other operator and\/or user responsible for operation of the plant  and\/or the entire process control environment . The controller  may be, for example, a DeltaV\u2122 controller sold by Fisher-Rosemount Systems, Inc., an Emerson Process Management\u2122 company. However, any other controller could be used instead. Further, while only one controller  is shown in , additional controllers of any type or combination of types may be coupled to each of the resource discovery servers -. While the illustrated example of  describes, in part, a process control system, the methods and apparatus described herein may also apply to test and measurement environments, such as laboratory testing, audit testing, and\/or quality control analysis.","The controller  may be coupled to a plurality of field devices -and  via a controller bus  and\/or an I\/O device . During execution of a process control routine, the controller  may exchange information (e.g., commands, configuration information, measurement information, status information, etc.) with the field devices -and . For example, the controller  may be provided with a process control routine that, when executed by the controller , causes the controller  to send commands to the field devices -that cause the field devices -to perform specified operations (e.g., perform a measurement, open\/close a valve, turn on\/off a process pump, etc.) and\/or to communicate information (e.g., measurement data) via the controller . Additionally, the controller  may cause the field devices -and  to acquire measurement values (e.g., pressure values, temperature values, flow values, voltage values, current values, etc.), perform algorithms or calculations (e.g., integrals, derivatives, addition, subtraction, etc.), control instrumentation (e.g., opening\/closing valves, furnace adjustments, boiler adjustments, etc.), and\/or to perform any other function(s).","The server discovery server  and the resource discovery servers -provide the workstations , , and\/or  layered access to process control resources managed by controllers (e.g., the controller ). The server discovery server  may include endpoint access controls that limit access to itself and to its list of resource discovery endpoints -associated with the resource discovery servers -. The server discovery server  provides each user and\/or workstation , , and\/or  a list of resource discovery endpoints associated with the resource discovery servers -based on the level of endpoint access controls implemented by the server discovery server . For example, an operator and\/or user of the remote workstation  may be specified to have access only to the process control system and\/or to a specific resource discovery server (e.g., the server ) included within the process control system . As a result, the server discovery server  provides a list including only the resource discovery endpoint of resource discovery server when the operator and\/or user of the remote workstation  requests a list of resource discovery endpoints. Alternatively, the server discovery server  may provide each user and\/or workstation ,  and\/or  with a list of endpoints of resource discovery servers (e.g., the endpoints associated with the resource discovery servers -). The user and\/or the workstations , , and\/or  may then use these endpoints to retrieve a list of resource discovery endpoints directly from the resource discovery servers -","The example server discovery server  may provide a list of resource discovery endpoints associated with the resource discovery servers -to authorized workstations (e.g., the workstations ,  and\/or ). Alternatively, the example server discovery server  may provide a list of endpoints associated with the resource discovery servers -to authorized workstations (e.g., the workstations , , and\/or ). The authorized workstations may then use the list of endpoints to retrieve the resource discovery endpoints. Once the workstations , , and\/or  have received a resource discovery endpoint of a selected resource discovery server (e.g., the resource discovery server ), the workstations , , and\/or  may then access the resource discovery server (e.g., the server ) using the resource discovery endpoint. In some examples, the resource discovery server may determine if the workstations , , and\/or  are authorized to access the resource discovery endpoint. Upon the workstations , , and\/or  accessing the resource discovery server through the associated resource discovery endpoint, the resource discovery server may implement endpoint access controls to determine the resources authorized to be accessed by the workstations ,  and\/or . The resource discovery server may include resources associated with the field devices -and . An operator and\/or user of any of the workstations ,  and\/or  may select the authorized resources.","When the workstations ,  and\/or  first access a resource discovery endpoint, the associated resource discovery server creates a session. By the workstations ,  and\/or  selecting one or more resources provided by the resource discovery server , the workstations ,  and\/or  request the resource discovery server to create read, write, and\/or subscribe endpoints that are used by the workstations , , and\/or  to access the selected resources. If the workstations ,  and\/or  intend to read the resource, the workstations ,  and\/or  request a read endpoint from the resource discovery server . If the workstations ,  and\/or  intend to update and\/or execute (e.g., write) the resource, the workstations ,  and\/or  request a write endpoint from the resource discovery server . If the workstations , , and\/or  intend to subscribe to the resource, the workstations , , and\/or  request a subscribe endpoint from the resource discovery server ","The resource discovery server provides these endpoints to the workstations ,  and\/or  using an alias identifier to mask the identity of the endpoint and an alias identifier to mask the identity of each resource to be accessed through the endpoint. The alias for a resource may be proposed by the workstations ,  and\/or  and confirmed by the resource discovery server . The workstations , , and\/or  may use the endpoint identifier to access the read, write, and\/or subscribe endpoints and the resource identifiers of the selected resources to view and\/or modify those resources. If the session is to be closed for any reason, including a request by the workstations , , and\/or , the resource discovery server terminates the session and deletes and\/or closes any open read, write, and\/or subscribe endpoints, identifiers associated with the endpoints, and\/or identifiers associated with registered resources. Before the workstations ,  and\/or  can access the resource discovery server again after the session has been closed, the workstations ,  and\/or  may be required to establish a new session with the resource discovery server ","The server discovery server  and\/or the resource discovery servers -may also implement security protocols for encrypting, hash marking, and\/or signing communications with the workstations ,  and\/or . These security protocols used with the resource identifiers further protect the process control plant  from unauthorized parties and\/or entities attempting to view and\/or modify process control data transmitted from the resource discovery servers -and the workstations , , and\/or .","In an example, an operator and\/or user at the local workstation  sends a discover server request message to the server discovery server  to locate a resource discovery server from which the workstation  may use to obtain access to a pump speed of the pump field device  (e.g., a resource). The server discovery server  determines the resource discovery servers -that the operator, the user, and\/or the workstation  are authorized to access. The server discovery server  determines that the workstation  may access the resource discovery server and provides a list including the resource discovery endpoints of the resource discovery server and\/or an endpoint within the resource discovery server that the workstation  may access to retrieve resource discovery endpoints of the resource discovery server ","The workstation  then transmits a request message (e.g., a connect message) to open a session with the resource discovery server . The workstation  sends this message to the address of the newly acquired resource discovery endpoint to that server within the address field of the request message. The resource discovery server receives the request message and opens the session after performing any endpoint access controls to determine if the session is authorized. The workstation  then transmits a series of messages (e.g., find resource request messages, open endpoint request messages, and\/or register request messages) to discover the resources that the workstation , operator, and\/or user are authorized to access. The resource discovery server provides the resources, including the pump speed resource, within a list to the workstation . The pump speed resource may be identified by the pump name \u201cPDT: P321\u201d or, alternatively, by some other name such as the name of the pump speed parameter.","Upon the workstation  selecting the pump speed resource and requesting a read endpoint to access the pump speed resource, the resource discovery server creates and\/or opens a read endpoint and associates the pump speed with this newly created and\/or opened read endpoint. In other examples, the resource discovery server may associate the pump speed with an already created and\/or opened read endpoint. Alternatively, the workstation  may first request the creation and\/or opening of the read endpoint and then separately associate the pump speed parameter to the read endpoint. Alternatively, the workstation  may first add the pump speed parameter to a list of parameters and then add the list of parameters to the read endpoint. Additionally, if the operator and\/or user at the workstation  is authorized to create and\/or open a write and\/or a subscribe endpoint, a request could be sent from the workstation  to the resource discovery server to create and\/or open the write and\/or the subscribe endpoint and associate the pump speed with the newly created and\/or opened write endpoint.","Furthermore, the resource discovery server may generate an identifier such as \u201c1621545\u201d to read the pump speed resource and transmit the identifier to the workstation . Alternatively, the workstation  may provide the identifier. In another example implementation, two identifiers may be used for optimization purposes. For example, the workstation  may use an identifier to identify the pump speed when the workstation  sends requests for the pump speed to the server and the server may use a different identifier for sending values to the workstation . Additionally, the server may require separate identifiers for reading, writing, and\/or subscribing or, alternatively, the same identifiers could be used for reading, writing, and\/or subscribing. In the example of , the server uses the same pump speed identifier (e.g., 1621545) for reading and writing the pump speed. Alternatively, the resource discovery server may generate an identifier such as \u201c36285\u201d for the newly created and\/or opened read endpoint and an identifier such as \u201c88732\u201d for the newly created and\/or opened write endpoint and transmit those identifiers to the workstation .","The operator and\/or user at the workstation  may read the pump speed resource by sending a message including the pump speed identifier (e.g., 1621545) and the read endpoint identifier (e.g., 36285) in a message to the resource discovery server . The resource discovery server accesses the controller  for the current pump speed value (if the server has not cached the pump speed value) and transmits the pump speed value to the workstation  in a message using the pump speed identifier (e.g., 1621545). Additionally, the operator and\/or user at the workstation  may change the pump speed by generating a message with the new pump speed, the pump speed identifier (e.g., 1621545), and the write endpoint identifier (e.g., 88732) and transmitting the message to the resource discovery server . Upon receiving the message, the resource discovery server transmits the new pump speed to the controller  to set the speed of the pump  to the new specified pump speed. The operator and\/or user at the workstation  may then close the session with the resource discovery server . Upon closing, the resource discovery server terminates the session and deletes the identifiers for the resources, read endpoints, write endpoints, and\/or the subscribe endpoints.","The example process control system is provided to illustrate one type of system within which the example methods and apparatus described in greater detail below may be advantageously employed. However, the example methods and apparatus described herein may, without limitation, be advantageously employed in other systems of greater or less complexity and\/or different types of systems than the example process control system shown in . Furthermore, the read, write, and\/or subscribe endpoints may be implemented using additional methods and apparatus related to retrieving and\/or updating data, events, and alarms including, for example, polling and callback mechanisms.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2","FIG. 1"],"b":["108","114","108","114","202","202","202"],"i":["a ","a "]},"The client application  is used to access resources on behalf of an operator, user, and\/or automated user. The example client application  may include identification information associated with the user of the client application . The client application  may be operating on any of the workstations , , and\/or , and may include identification information. Furthermore, the client application  may be coupled to the server discovery server  and\/or the resource discovery server via the LAN  and\/or the WAN  of .","The example client application  of  transmits request messages to the server discovery server  and\/or the resource discovery server . The request messages may include messages to access endpoints to locate resources within the process control system . Additionally, the client application  may assign session-specific unintelligible identifiers to selected resources, read endpoints, write endpoints, and\/or subscribe endpoints. Alternatively, the client application  may receive a session-specific unintelligible identifier assignment from the resource discovery server for any resource, read endpoint, write endpoint, and\/or subscribe endpoint. Alternatively, the client application  and the resource discovery server may exchange respective session-specific unintelligible identifiers. The client application  stores the assigned identifier to a corresponding resource, read endpoint, write endpoint, and\/or subscribe endpoint. Thus, resource data received by the client application  is associated with a corresponding resource identifier that the client application  may use to identify the resource and\/or the endpoint associated with the encoded resource data. Furthermore, the client application  may include encryption deciphering capabilities to receive encrypted data from the resource discovery server . While  shows a single client application , in other examples, multiple client applications may access the servers  and ","To provide security measures such as encryption and\/or endpoint access controls to communications with the client application , the example server discovery server  includes a security processor . Additionally, to provide security such as encryption and\/or endpoint access controls measures to communications with the client application , the example resource discovery server includes a security processor . The example security processors -may include encryption processors and\/or digital signature generators to protect outgoing communications from unauthorized third parties. The encryption processors may use any type of encryption encoders to format communications destined for the client application  in a format unreadable to unauthorized users. The digital signature generator protects communications from being tampered with by unauthorized third parties. A digital signature generator may use any type of cryptographically secure signature generators (e.g. hash codes) that enable the detection of values that have been modified by an unauthorized third party between the client application  and the servers  and\/or . Additionally, the security processors -may include other forms of communication security including authentication mechanisms and\/or access controls.","The example security processors -may decode encrypted, and\/or signed communications originating from the client application . Upon decoding the communications, the security processors -transmit the communications to the intended destination within the respective servers  and . Additionally, the security processor may filter request messages originating from the client application  by identification information so that only authorized users may access the server discovery server . Alternatively, in some example implementations, the servers  and may not include the security processors -. In these examples, security functions associated with the security processors -may be included within a firewall (e.g., the firewall ) and\/or included elsewhere within the process control plant .","To manage discovery of resource discovery servers, the example server discovery server  includes a server discovery endpoint processor . The example server discovery endpoint processor  processes requests from the client application  so that only authorized requesters may discover resource discovery servers. The server discovery endpoint processor  receives request messages (e.g., discover server request messages) to discover resource discovery servers from client applications including the example client application .","Upon receiving a request message, the server discovery endpoint processor  uses information within and\/or associated with the request message to determine the identity of an operator and\/or user using the client application  and\/or an identity of the workstation operating the client application  and\/or other information associated with performing endpoint access control. For example, the server discovery endpoint processor  may check a user identification field within the request message to determine if the user identification value corresponds to an authorized user. Alternatively, the example server discovery endpoint processor  may check a workstation identification value, a client application type, a client application serial number, a client application location, and\/or a protocol type within the request message. Additionally, the example server discovery endpoint processor  may examine other information related to the message and\/or the client application  to assist in authorization processing of the message (e.g. if the message was transmitted from a centralized security computer).","The server discovery endpoint processor  may use an access control list to determine which resource discovery servers are available to the client application . Alternatively, the server discovery endpoint processor  may implement other functionally to determine security attributes associated with the received message. The access control list and\/or or the other functionally may include a list of approved users referenced to the resource discovery endpoints that each approved request is authorized to access. For example, system operators and\/or users assigned to the process control system may be authorized to access resource discovery endpoints associated with the process control system . Additionally, the access control list may include a list of workstations and\/or client applications referenced to resource discovery endpoints that each workstation and\/or client application is authorized to access. The access control list may be predetermined by managers and\/or controllers of the process control systems -and\/or the process control plant .","Upon referencing the identification information within a request message to an access control list, the server discovery endpoint processor  returns a list of the authorized resource discovery endpoints to the client application . The list of the resource discovery endpoints may include a name of a resource discovery endpoint, a name of a system that provides access for an endpoint, and\/or a type of information that the endpoint provides. Additionally, the amount of information provided in the list about each resource discovery endpoint may be limited by the server discovery endpoint processor  based on the client application  requesting the endpoint list. This limitation makes malicious profiling of the resource discovery endpoints by third parties and\/or interlopers relatively difficult. Malicious profiling may include examining attributes of a potential target (e.g. the resource discovery server ) to formulate an intrusion into the target. For example, if the client application  is remotely located from the process control plant , the server discovery endpoint processor  may only provide reference names for each resource discovery endpoint listed. Each resource discovery endpoint listed corresponds to a resource discovery server within the process control environment . For example, the server discovery endpoint processor  may provide the client application  a list of resource discovery endpoints corresponding to the resource discovery servers -","The example server discovery endpoint processor  of  provides the client application  with a list of resource discovery endpoints. The server discovery endpoint processor  may return the information necessary to submit a request (e.g., a connect message) to open a session within the resource discovery server or, alternatively, the server discovery endpoint processor  may return the identity of the resource discovery endpoints enabling the client application  to select a resource discovery endpoint. Upon the client application  selecting one or more of the resource discovery endpoints, the server discovery endpoint processor  transmits to the client application  the information to open a session with each of the selected resource discovery endpoints.","To manage access to resources, resource discovery endpoints, read endpoints, write endpoints, and\/or subscribe endpoints, the example resource discovery server includes a session controller , a resource discovery endpoint processor  and a read\/write\/subscribe endpoint processor .  shows only the resource discovery server coupled to the client application . In other examples, the client application  may be coupled to the resource discovery servers -that may include their own session controllers , resource discovery endpoint processors  and read\/write\/subscribe endpoint processors . The client application  receives the location and\/or information associated with the resource discovery endpoint from the server discovery endpoint processor . The client application  accesses the resource discovery server using this information to send a request message (e.g., a connect message) to the resource discovery endpoint associated with the resource discovery server ","The example session controller  of  manages a resource access session for the client application . The session represents an instance of a communication association between the client application  and the resource discovery server . Additionally, the session controller  may manage sessions for other client applications that may access the resource discovery server . The session controller  initiates a session upon receiving a connect message to open a session with the resource discovery endpoint associated with the server from the client application . Until a session is opened by the session controller , the session controller  may reject any other request from the client application . While the session is open, the session controller  routes each request message from the client application  to the resource discovery endpoint processor .","If the client application  selects resources and\/or resource endpoints from the resource discovery endpoint processor  and requests the creation of read, write, and\/or subscribe endpoints to access the selected resources (or to assign the selected resources to previously created and\/or opened read, write, or subscribe endpoints), the resource discovery endpoint processor  stores references to the selected resources and the associated read, write, and\/or subscribe endpoints. Additionally, the session controller  may store references to the selected resources and their associated read or write endpoints.","A read\/write\/subscribe endpoint processor (e.g., the read\/write\/subscribe endpoint processor ) may be created and\/or used for each read, write, and\/or subscribe endpoint that the client application  creates and\/or opens. For each of these read\/write\/subscribe endpoint processors, a security processor and\/or a session controller may also be created and\/or used. Creating and\/or using a processor may include allocating portions of a server to perform the functions associated with the processor. Alternatively, creating and\/or using a processor may include activating processors on one or more adjacent servers to perform the functions associated with each of the newly created processors. Creating and\/or using a security processor and\/or a session controller for each read\/write\/subscribe endpoint processor provides additional security by separating communication paths for messages transmitted between the resource discovery endpoint processor  for different sessions for different client applications. Additionally, separating communication paths provides additional security for messages transmitted to and\/or from the resource discovery endpoint processor  and messages transmitted to and\/or from a read endpoint, a write endpoint, and\/or a subscribe endpoint. The read\/write\/subscribe endpoint processors  may be implemented on a separate computing medium than the security processors and\/or the session controllers  to provide another separate layer of security. Alternatively, the read\/write\/subscribe endpoint processor  may be used to provide access to each read, write, and\/or subscribe endpoint.","For each read\/write\/subscribe endpoint processor , the resource discovery endpoint processor  and\/or the session controller  may transmit resources selected by the client application  and\/or associated unintelligible identifiers of those resources to the corresponding read\/write\/subscribe endpoint processor . These unintelligible identifiers may be assigned by the client application , by the resource discovery endpoint processor  or, alternatively, by both.","By storing identifier reference information, the example read\/write\/subscribe endpoint processor  manages which identifiers correspond to which resources for each client application . Thus, communications between the read\/write\/subscribe endpoint processor  and the client application  may use the identifiers as a form of protection against unauthorized parties or entities that may attempt to monitor the communications. In some examples, multiple client applications may use the same identifiers for different resources. Similarly, the same client may use the same identifiers for different resources accessed through different endpoints. Alternatively, different identifiers for the same resources may be used by the same client to access the resources through different endpoints. In these examples, the resource discovery endpoint processor  manages the assignment of these identifiers to resources and\/or to the read\/write\/subscribe endpoint processors . The read\/write\/subscribe endpoint processors  manage the use of the identifiers for each client application  to access the associated resources.","The example session controller  may also manage unintelligible identifiers for read endpoints, write endpoints, and\/or subscribe endpoints for the client application . For example, the session controller  may store each read, write, and\/or subscribe endpoint and the corresponding unintelligible identifier assigned by the resource discovery endpoint processor .","Furthermore, the example session controller  validates and directs request messages from the client application . Validation ensures that a session identified in the request message is valid and\/or authorized to access the intended processors  and\/or . Valid request messages intended for the resource discovery endpoint of the server may be routed by the session controller  to the resource discovery endpoint processor . Similarly, valid request messages intended for read endpoints, write endpoints, and\/or subscribe endpoints may be routed by the session controller  to the appropriate read\/write\/subscribe endpoint processor . Additionally, the session controller  may validate request messages by determining if a session identified within the message is valid and\/or by determining if an unintelligible identifier associated with a read, write, and\/or subscribe endpoint is valid. Valid request messages intended for read, write, and\/or subscribe endpoints are then routed by the session controller  to the corresponding read\/write\/subscribe endpoint processor .","The example session controller  of  terminates a session when the client application  sends a message indicating the client application  is to terminate access to the resource discovery server . Upon receiving a termination message, the session controller  deletes the stored session information including resources, read endpoints, write endpoints and\/or the corresponding identifiers. If the client application  attempts to access any of the resources and\/or endpoints from the deleted session, the client application  will be required to initiate a new session and reregister for each resource.","To manage and\/or control access to resources and associated endpoints, the example resource discovery server of  includes the resource discovery endpoint processor . The example resource discovery endpoint processor  receives request messages (e.g., find resource request messages, open endpoint request messages, and\/or register request messages) from the client application  via the session controller . Upon receiving a request message, the resource discovery endpoint processor  may use information within and\/or associated with the request message to control access to the resources that the client application  may discover and subsequently access. For example, the server discovery endpoint processor  may check a user identification field within the request message to determine which resources the client application  is authorized to access. Alternatively, the example resource discovery endpoint processor  may check a workstation identification value, a client application type, a client application serial number, a client application location, and\/or a protocol type within the request message.","The example resource discovery endpoint processor  may use an access list to determine which resources the client application  may access. The access list may include a list of authorized users, workstations and\/or client applications each referenced to a list of resources. In some example implementations, the list of resources may include a code that corresponds to a group of resources. Upon determining which resources the client application  is authorized to access, the resource discovery endpoint processor  provides that list of resources to the client application . The list may include names of the resources, information included within the resources, and\/or coded information about the resources. In some examples, the list may include resources grouped together in a set. In these examples, a client application may access some or all of the resources within the set by selecting the set.","The example resource discovery endpoint processor  provides the client application , if authorized, with a read, write, and\/or subscribe endpoint to which one or more selected resources may be assigned. Additionally, the resource discovery endpoint processor  adds each selected resource to a read, write, and\/or subscribe endpoint managed by a corresponding session controller (e.g., the session controller ) and\/or a shared read\/write\/subscribe endpoint processor . The resource discovery endpoint processor  may transmit each selected resource so that the read\/write\/subscribe endpoint processor  may add each resource to a read, write, and\/or subscribe endpoint.","Furthermore, the example resource discovery endpoint processor  generates identifiers for each selected resource and transmits the identifiers to the client application . For example, if the client application  selects a tank resource, the resource discovery endpoint processor  may assign the tank resource an unintelligible identifier of \u201cDM45.\u201d The resource discovery endpoint processor  transmits this DM45 identifier to the client application . Subsequent communications between the client application  and the resource discovery server may use the DM45 identifier when referring to the tank resource.","The example resource discovery endpoint processor  receives register request messages and\/or open endpoint request messages to create and\/or open one or more read, write, and\/or subscribe endpoints to which selected resources may be added. The resource discovery endpoint processor  determines if the client application  that generated the register request message is authorized to read, write, and\/or subscribe to the selected resources. Generally, if the client application  is provided access to a resource, the client application  is allowed read and\/or subscribe access to that resource. However, the client application  may not have write access to the resource.","The resource discovery endpoint processor  also determines if the client application  is authorized for write access by using endpoint access controls. For example, the endpoint access controls may employ an access control list that may include a list of authorized users and\/or client applications . If the client application  is authorized for write access, the resource discovery endpoint processor  creates and\/or opens one or more authorized write endpoints, as requested, for the resources selected by the client application . The resource discovery endpoint processor  then adds the selected resources that the client application  is authorized to write to the newly created and\/or opened write endpoints.","To manage read endpoints, write endpoints, subscribe endpoints and access to process control resources, the example resource discovery server of  includes the read\/write\/subscribe endpoint processor . The read\/write\/subscribe endpoint processor  determines if the client application  is authorized for read, write, and\/or subscribe access by using endpoint access controls for messages that request access to a resource. For example, the endpoint access controls may employ an access control list that may include a list of authorized users and\/or client applications . If the read\/write\/subscribe endpoint processor  receives a request to read, write, or subscribe to a given resource, the read\/write\/subscribe endpoint processor  verifies that the client application  is authorized for read, write, and\/or subscribe access to that resource.","Additionally, the example read\/write\/subscribe endpoint processor  provides and\/or grants access to resources via a communication path . For example, a selected resource could be located in the controller  of . When the client application  transmits messages to read, write, and\/or subscribe to selected resources, the example read\/write\/subscribe endpoint processor  uses the unintelligible identifiers within the message to access the resource within the controller . For messages sent to a read endpoint, the read\/write\/subscribe endpoint processor  retrieves the desired resource (e.g., a value, an alarm, and\/or an event). Similarly, for messages sent to a write endpoint, the read\/write\/subscribe endpoint processor  writes the data to the resource (e.g. the controller  of ).","To store endpoint access control information used by the server discovery endpoint processor , the resource discovery endpoint processor , and\/or the read\/write\/subscribe endpoint processor , the example servers  and of  are communicatively coupled to an access control database . In some examples, the access control database  may be included within the servers  and\/or . Alternatively, the example access control database  may be included within the process control systems -and\/or within the process control plant  of . Furthermore, the access control database  may be included within a central access control system in the process control plant . The example access control database  may be implemented by EEPROM, RAM, ROM, and\/or any other type of memory. Additionally, the access control database  may be implemented by a structured query language (SQL) server and\/or any other database technology. A security administrator or other authorized user may access the access control database  to update, add, delete, and\/or modify authorized users and their level of access within the access control lists.","While an example manner of implementing the server discovery server  and the resource discovery server is depicted in , one or more of the interfaces, data structures, elements, processes and\/or devices illustrated in  may be combined, divided, rearranged, omitted, eliminated and\/or implemented in any other way. For example, the example security processors -, the example server discovery endpoint processor , the example session controller , the example resource discovery endpoint processor , the example read\/write\/subscribe endpoint processor , and\/or the example access control database  illustrated in  may be implemented separately and\/or in any combination using, for example, machine-accessible or readable instructions executed by one or more computing devices and\/or computing platforms (e.g., the example processing platform  of ).","Further, the example security processors -, the example server discovery endpoint processor , the example session controller , the example resource discovery endpoint processor , the example read\/write\/subscribe endpoint processor , the example access control database  and\/or, more generally, the server discovery server  and\/or the resource discovery server may be implemented by hardware, software, firmware and\/or any combination of hardware, software and\/or firmware. Thus, for example, any of the example security processors -, the example server discovery endpoint processor , the example session controller , the example resource discovery endpoint processor , the example read\/write\/subscribe endpoint processor , the example access control database  and\/or, more generally, the server discovery server  and\/or the resource discovery server can be implemented by one or more circuit(s), programmable processor(s), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and\/or field programmable logic device(s) (FPLD(s)), etc.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 3","FIGS. 1 and 2","FIG. 2"],"b":["300","108","114","300","202","302","304","306","308","310","300","202","104"],"i":["a ","a. "]},"Initially, the client application  of  accesses the server discovery endpoint  of the server discovery server  of . The server discovery endpoint  includes a list of resource discovery servers available to the client application . Additionally, the hashed box adjacent to the list of servers within the server discovery endpoint  represents the security processor of . The list of resource discovery servers may be determined by matching the client application  to resource discovery servers that the client application  is authorized to access. The client application  may select one or more of the listed servers. By selecting a listed server, the server discovery endpoint  provides the client application  with the endpoint for the selected server. Alternatively, the server discovery endpoint  may provide the client application  with the resource discovery endpoint  of each resource discovery server at the same time.","Next, the client application  accesses the resource discovery endpoint  using an endpoint provided by the server discovery endpoint . Alternatively, in examples where the client application  is initially configured with the endpoint and\/or the address of the resource discovery endpoint , the client application  may access the resource discovery endpoint  without first accessing the server discovery endpoint . The resource discovery endpoint  includes a list of resources accessible by the client application . The list of resources may include groups of resources and\/or individual resources. Additionally, the hashed box adjacent to the list of servers within the resource discovery endpoint  represents the security processor of . In example implementations, the client application  may select one or more resources to register from the list of available resources. In these examples, the client application  requests the resource discovery endpoint  to create and\/or open one or more read endpoints , one or more write endpoints , and\/or one or more subscribe endpoints . Additionally, the client application specifies which of the selected resources are to be associated with the newly created and\/or opened read endpoint , the newly created and\/or opened write endpoint , and\/or the newly created and\/or opened subscribe endpoint . The client application may specify the resources at the time the endpoints are created and\/or opened, after the endpoints are created and\/or opened, and\/or during the creation and\/or opening of the endpoints.","Upon the client application  creating and\/or opening the read endpoint , the write endpoint , and\/or the subscribe endpoint , the resource discovery endpoint  provides the client application  with an unintelligible identifier associated with each of the newly created and\/or opened endpoints -. Additionally, upon selecting a resource and assigning the resource to the read endpoint , the write endpoint , and\/or the subscribe endpoint , the selected resource is included within a list of selected resources in the read endpoint , the write endpoint , and\/or the subscribe endpoint .","For each resource added to the read endpoint , the write endpoint , and\/or the subscribe endpoint , an unintelligible identifier or, alternatively, a pair of unintelligible identifiers (e.g., one assigned by the client application  and one assigned by the resource discovery endpoint ) corresponding to the resource is\/are transmitted to the client application  by the resource discovery endpoint . The client application  may read data (e.g., values, alarms, and\/or events) associated with a selected resource by accessing the resource data via the read endpoint . Similarly, the client application  may write data to a resource by accessing the resource via the write endpoint . The client application  may also subscribe to data of a resource by accessing the resource via the subscribe endpoint .",{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIGS. 4A and 4B","FIGS. 1","FIGS. 4A and 4B","FIGS. 4A and 4B","FIG. 5"],"b":["108","114","202","100","2","3","500"],"i":["a","c"]},"Processes comprise, for example, instructions and\/or data that cause a processor, a general-purpose computer, special-purpose computer, or a special-purpose processing machine to implement one or more particular processes. Alternatively, some or all of the example operations of  and\/or B may be implemented using any combination(s) of ASIC(s), PLD(s), FPLD(s), discrete logic, hardware, firmware, etc.","Also, one or more of the example operations of  and\/or B may instead be implemented using one or more manual operations or as any combination of any of the foregoing techniques, for example, any combination of firmware, software, discrete logic and\/or hardware. Further, many other processes of implementing the example operations of  and\/or B may be employed. For example, the order of execution of the blocks may be changed, and\/or one or more of the blocks described may be changed, eliminated, sub-divided, or combined. Additionally, any or all of the example operations of  and\/or B may be carried out sequentially and\/or carried out in parallel by, for example, separate processing threads, processors, devices, discrete logic, circuits, etc.","The example process  of  provides layered security for interface access control within the example process control environment  of . Additionally, the example process  may provide layered security for interface access control for other types of data systems including manufacturing automation systems, industrial systems, etc. Furthermore, the example process  may be performed for each request to access an endpoint within a server discovery server (e.g., the server discovery server  of ). For each request to access the server discovery server , the example process  may be operated in series and\/or in parallel with other instances of the example process .","The example process  begins when a discover server request message to access an endpoint within the server discovery server  is received (block ). The request message may have originated from a client application located at a remote workstation (e.g., the remote workstations  and\/or ) or, alternatively, from a local workstation (e.g., the local workstation ). The example process  determines if the server discovery server  is accessible or available to the request message by checking privileges associated with the request message (block ). For example, the process  may check a user identification field within the request message to determine if the user identification value corresponds to an authorized user. Alternatively, the example process  may check a workstation identification value, a client application type, a client application serial number, a client application location, and\/or a protocol used to transfer the message to determine if the originator of the request message is authorized to access the server discovery server .","If the example process  determines that the request message is not authorized to access the server discovery server  (block ), the process  generates and\/or transmits a response message to the client application (block ). The response message may reject the request to access the server discovery server . Upon generating and transmitting the response message (block ), the example process  ends.","However, if the example process  determines that the request message is authorized to access the server discovery server  (block ), the request message is received within the server discovery server  (block ). The example process  then determines which resource discovery servers (e.g., the resource discovery servers -) are authorized to be accessed by the client application associated with the request message (block ). The resource discovery servers available to the client application may be based on the identification field, the workstation identification value, the client application type, the client application serial number, the client application location, and\/or the protocol within and\/or associated with the request message.","If the example process  determines there are no authorized resource discovery servers (e.g., an empty list of authorized resource discovery endpoints), a message is generated and\/or transmitted to the client application indicating that there are no available resource discovery servers (block ). Upon transmitting the message (block ), the example process  ends.","However, if there is at least one authorized resource discovery server (block ), the example process  provides a list of the approved and\/or authorized resource discovery endpoints (e.g., resource discovery endpoints of the resource discovery servers -) to the client application (block ). In other examples, an endpoint may be provided for each resource discovery server that provides the client application with a list of resource discovery endpoints. Next, the client application selects one or more of the listed resource discovery endpoints (block ). In other examples, the client application may not select a resource discovery endpoint and\/or may end the example process .","The example process  continues when a request message to access the selected resource discovery endpoint (e.g., the resource discovery server ) is received (block ). Alternatively, in examples where the client application is initially configured with the resource discovery endpoint, the example process  may start when a request message (e.g., a connect message) to access the resource discovery endpoint is received (block ). The request message is generated and\/or transmitted from the client application. Additionally, when the example process  receives the request message to access a resource discovery endpoint, the example process  opens a session for the client application. In other examples, the client application may select a plurality of resource discovery endpoints. In these examples, the example process  may open a session for each selected resource discovery endpoint. Additionally, for each resource discovery endpoint selected, the example process  may operate separate instances of the blocks -.","Upon receiving a request message to access a resource discovery endpoint (block ), the example process  determines which resources of the selected resource discovery endpoint are available to the client application (block ). The resource(s) available to the client application may be based on the identification field, the workstation identification value, the client application type, the client application serial number, the client application location, and\/or the protocol within and\/or associated with the request message. Additionally, the available resources may be predefined for the client application by a manager, user, and\/or operator of the process control plant . The example process  then determines if there are available resources associated with the request message (block ). If there are no available and\/or authorized resources, the example process  may again provide the list of resource discovery endpoints so that the client application may select another resource discovery endpoint (block ). Additionally, the example process may close the session with the client application.","If there is at least one available resource (block ), the example process  then provides a list of available resources to the client application (block ). Next, the client application may request to register to access one of the listed resources (block ). Alternatively, the client application may request to register to access more than one of the listed resources in the same request. In other example implementations, the client application may select another resource discovery endpoint or end the example process .","Upon selecting a resource to register (block ), the client application transmits to the resource discovery endpoint an identifier for the selected resource (block ). The identifier is only known by the client application and the resource discovery server that includes the resource discovery endpoint of the selected resource. When the resource discovery endpoint receives an identifier from the client application, the resource discovery server associated with the resource discovery endpoint stores the transmitted identifier for the resource within the context of the session. These identifiers are unintelligible to unauthorized users that attempt to access communications between the client application (e.g., the workstations ,  and\/or ) and the resource discovery server (e.g., the resource discovery servers -). Next, the example process  determines if the client application has requested an additional resource (block ). If the client application has requested other resources, the client application sends a request for the resource to the resource discovery endpoint (block ). In other examples, upon the client application selecting a resource (block ), the example process  may transmit to the client application an identifier for the selected resource (block ). Then, upon receiving the identifier, the client application communicates with the resource discovery server using the identifier.","If the client application does not select additional resources to register (block ), the example process  determines if the client application has requested to create and\/or open a read, write, and\/or subscribe endpoint (block ). If the client application does not request to create and\/or open an endpoint, the example process  determines if the client application requests an assignment of the one or more resources to an already created endpoint (block ).","However, if the client application requests to create and\/or open a read, write, and\/or subscribe endpoint (block ), the client application sends a request to create and\/or open the endpoint. When the example process  receives the request, the example process  processes the request by determining if the client application is authorized to create and\/or open the endpoint based on security criteria (block ). The security criteria may include an identity and\/or job function of the requester, a network address of the requesting workstation and\/or computer, an identity and\/or type of the client application, protocols used by the client application to access the resource discovery endpoint, and\/or a time that the request was received by the endpoint. If the example process  authorizes the client application, the example method  creates and\/or opens the requested endpoint and transmits an associated identifier(s) to the client application (block ). The identifier(s) may be specific to the session and known only to the resource discovery endpoint and the client application.","Next, the example process  determines if the client application has requested to create and\/or open another read, write, and\/or subscribe endpoint (block ). If the client application has requested an additional endpoint, the example process  processes the request (block ). In some examples, the client application may be authorized to select resources and assign those resources to read endpoints, write endpoints, and\/or subscribe endpoints. In these cases, the example process  determines if the client application has requested an assignment of one or more resources to the requested read, write, and\/or subscribe endpoint (block ). If the client application has requested an assignment of one or more resources, the example process  processes the request by authorizing the request and assigning the selected resources to the requested opened and\/or created endpoint (block ). The example process  then provides and\/or grants access via the identifier(s) to the selected resources until the client application requests to terminate the session (block ). Additionally, if the client application has not requested an assignment of one or more resources (block ), the example process  provides and\/or grants access to the resources via the identifier(s) (block ). Further, the client application may submit additional requests as described in block , , and\/or  while the session is open. Upon receiving a request to terminate the session, the example process terminates the session and access to the endpoints and associated resources (block ). The example process  then ends.",{"@attributes":{"id":"p-0097","num":"0096"},"figref":["FIG. 5","FIGS. 1"],"b":["500","500","108","114","202","204","206","210","212","2","500","108","114","202","204","206","210","212"],"i":["a","c","a","b","a","c","a","b"]},"As shown in , the processor system  includes a processor  that is coupled to an interconnection bus . The processor  includes a register set or register space , which is depicted in  as being entirely on-chip, but which could alternatively be located entirely or partially off-chip and directly coupled to the processor  via dedicated electrical connections and\/or via the interconnection bus . The processor  may be any suitable processor, processing unit or microprocessor. Although not shown in , the system  may be a multi-processor system and, thus, may include one or more additional processors that are identical or similar to the processor  and that are communicatively coupled to the interconnection bus .","The processor  of  is coupled to a chipset , which includes a memory controller  and a peripheral input\/output (I\/O) controller . As is well known, a chipset typically provides I\/O and memory management functions as well as a plurality of general purpose and\/or special purpose registers, timers, etc. that are accessible or used by one or more processors coupled to the chipset . The memory controller  performs functions that enable the processor  (or processors if there are multiple processors) to access a system memory  and a mass storage memory .","The system memory  may include any desired type of volatile and\/or non-volatile memory such as, for example, static random access memory (SRAM), dynamic random access memory (DRAM), flash memory, read-only memory (ROM), etc. The mass storage memory  may include any desired type of mass storage device. For example, if the example processor system  is used to implement the server discovery server  and\/or the resource discovery server (), the mass storage memory  may include a hard disk drive, an optical drive, a tape storage device, etc. Alternatively, if the example processor system  is used to implement the access control database , the mass storage memory  may include a solid-state memory (e.g., a flash memory, a RAM memory, etc.), a magnetic memory (e.g., a hard drive), or any other memory suitable for mass storage in the access control database .","The peripheral I\/O controller  performs functions that enable the processor  to communicate with peripheral input\/output (I\/O) devices  and  and a network interface  via a peripheral I\/O bus . The I\/O devices  and  may be any desired type of I\/O device such as, for example, a keyboard, a display (e.g., a liquid crystal display (LCD), a cathode ray tube (CRT) display, etc.), a navigation device (e.g., a mouse, a trackball, a capacitive touch pad, a joystick, etc.), etc. The network interface  may be, for example, an Ethernet device, an asynchronous transfer mode (ATM) device, an 802.11 device, a DSL modem, a cable modem, a cellular modem, etc. that enables the processor system  to communicate with another processor system.","While the memory controller  and the I\/O controller  are depicted in  as separate functional blocks within the chipset , the functions performed by these blocks may be integrated within a single semiconductor circuit or may be implemented using two or more separate integrated circuits.","At least some of the above described example methods and\/or apparatus are implemented by one or more software and\/or firmware programs running on a computer processor. However, dedicated hardware implementations including, but not limited to, application specific integrated circuits, programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and\/or apparatus described herein, either in whole or in part. Furthermore, alternative software implementations including, but not limited to, distributed processing or component\/object distributed processing, parallel processing, or virtual machine processing can also be constructed to implement the example methods and\/or systems described herein.","It should also be noted that the example software and\/or firmware implementations described herein are stored on a tangible storage medium, such as: a magnetic medium (e.g., a magnetic disk or tape); a magneto-optical or optical medium such as an optical disk; or a solid state medium such as a memory card or other package that houses one or more read-only (non-volatile) memories, random access memories, or other re-writable (volatile) memories. Accordingly, the example software and\/or firmware described herein can be stored on a tangible storage medium such as those described above or successor storage media. To the extent the above specification describes example components and functions with reference to particular standards and protocols, it is understood that the scope of this patent is not limited to such standards and protocols. For instance, each of the standards for internet and other packet-switched network transmission (e.g., Transmission Control Protocol (TCP)\/Internet Protocol (IP), User Datagram Protocol (UDP)\/IP, HyperText Markup Language (HTML), HyperText Transfer Protocol (HTTP)) represent examples of the current state of the art. Such standards are periodically superseded by faster or more efficient equivalents having the same general functionality. Accordingly, replacement standards and protocols having the same functions are equivalents which are contemplated by this patent and are intended to be included within the scope of the accompanying claims.","Additionally, although this patent discloses example methods and apparatus including software or firmware executed on hardware, it should be noted that such systems are merely illustrative and should not be considered as limiting. For example, it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware, exclusively in software, exclusively in firmware or in some combination of hardware, firmware and\/or software. Accordingly, while the above specification described example methods, systems, and machine-accessible medium, the examples are not the only way to implement such systems, methods and machine-accessible medium. Therefore, although certain example methods, systems, and machine-accessible medium have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, systems, and machine-accessible medium fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIGS. 4A and 4B","FIGS. 1"],"b":["2","3"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
