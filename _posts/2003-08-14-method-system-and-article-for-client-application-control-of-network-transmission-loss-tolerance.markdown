---
title: Method, system and article for client application control of network transmission loss tolerance
abstract: A dynamically-enforceable application-controlled quasi-reliable extension to TCP permits a client application to dynamically set a percent loss tolerance for data transmission reliability through network input/output system calls to the TCP, thereby programming the transport layer to optimistically acknowledge non-critical missing frames. The reliability requirement can be dynamically set within TCP to the level of reliability required for specific data frames within the data stream during the data transfer. Based on this loss tolerance specified, the TCP layer makes a determination whether to trigger a retransmission or continue delivering out-of-order frames to the application. A forced acknowledgement frame is sent for each missing packet until the number missing packets causing forced acknowledgments within the current receive buffer frame exceeds the loss tolerance. This process avoids needless retransmissions and permits the TCP data flow and sliding window to advance uninterrupted, thereby providing substantial performance benefits to network throughput.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08578040&OS=08578040&RS=08578040
owner: International Business Machines Corporation
number: 08578040
owner_city: Armonk
owner_country: US
publication_date: 20030814
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to data transfers in data processing system networks and in particular to transfer of data blocks over the Internet or similar networks. Still more particularly, the present invention relates to implementing application-controlled, dynamic, quasi-reliable data transmission functionality for improved performance of data transfer over a network such as the Internet.","The Internet has become an important conduit for transmission and distribution of data (text, code, image, video, audio, or mixed) and software. Users connect to the backbone with broadly divergent levels of performance, ranging from 14.4 Kb\/s to more than 45 Mb\/s. Moreover, Transmission Control Protocol\/Internet Protocol (TCP\/IP) has become a widely implemented standard communication protocol in Internet\/Intranet technology, enabling broad heterogeneity between clients, servers, and the communications systems coupling them. Internet Protocol (IP) is the network layer protocol and Transmission Control Protocol (TCP) is the transport layer protocol. At the network level, IP provides a \u201cdatagram\u201d delivery service. By contrast, TCP builds a transport level service over the datagram service to provide guaranteed, sequential delivery of a byte stream between two IP hosts.","TCP flow control mechanisms operate exclusively at the end stations to limit the rate at which TCP endpoints emit data. However, TCP lacks explicit data rate control. The basic flow control mechanism is a \u201csliding window\u201d, superimposed on a range of bytes beyond the last explicitly acknowledged byte. The sliding window limits the maximum number of sequential bytes between the byte most recently sent from the server to the earliest byte for which a receipt acknowledgment has not yet been received from the client. This sliding operation limits the amount of unacknowledged transmissible data that a TCP endpoint can emit. A variety of algorithms automatically re-send packets and slowly restart data transmission when the sliding window limit is exceeded. Thus, if the link between the server and client is shut down in the middle of transmission of a data collection, the server will stop sending packets within one sliding window of the last packet acknowledged by the client. This use of a sliding window inherently limits the bandwidth of a data transfer through the network.","TCP\/IP is a connection-oriented reliable communications protocol that strictly enforces reliable data transfer such that loss of a single TCP frame can block delivery of all subsequent data in the TCP stream until the lost TCP frame is delivered. However, not all client applications require the strict sequence and reliable delivery provided by TCP, especially since this service comes at a cost to bandwidth. For example, video or image based applications do not require strictly reliable data delivery. In such applications, if certain parts of the data stream are lost, the video\/image can still be rendered effectively. Thus, the application is willing to tolerate some data loss in some cases if performance can be improved overall. However, TCP will automatically decrease bandwidth available to the application as it enforces the strict reliability.","One approach to avoid the strict reliability requirements of TCP is utilization of an unreliable transport such as User Datagram Protocol (UDP). UDP is a protocol, which defines a connectionless datagram service. A transport layer process or system implementing UDP may produce self-contained data packets, which include destination routing information. To use this approach, client applications must implement their own partial-reliability in layers above the UDP transport layer. However, an application's use of its own partial-reliability layer on top of the UDP transport layer tends to make the application very complex since it must insert its own headers in packets to order and sequence the packets.","Another approach has been to use a protocol like Stream Control Transmission Protocol (SCTP) that provides both a reliable and a partially-reliable data stream within the same connection. However, using SCTP involves changing both the server and the client-side applications to accommodate this unique protocol. Such a change to the server and client-side applications involves rewriting entire applications, which is not economical or always feasible.","It can be seen that there is a need for a communications protocol that provides quasi-reliable data transport, but that reduces the cost and complexity seen in previous solutions. It would be preferable for such a protocol to be easily incorporated into existing networks and to be dynamically controlled based on the data transfer reliability requirements of the client application.","In accordance with the present invention, improved methods, systems and articles of manufacture for managing transport of a data stream over a communication link for an application of a data processing system are disclosed. In one preferred method of the present invention, a loss tolerance for a data packet of a plurality of data packets being received over the communication link is specified, wherein loss tolerance is a maximum percent of the plurality of data packets that is permitted to be not received over the communication link for purposes of the application; when an indication is received that the data packet was not received over the communication link; it is determined if a number of data packets of the plurality of data packets not received over the communications link has exceeded the loss tolerance specified for the data packet. If the number of data packets of the plurality of data packets not received over the communications link has not exceeded the loss tolerance specified for the data packet, an acknowledgement is sent indicating that the data packet has been received by the data processing system. If the number of data packets of the plurality of data packets not received over the communications link has exceeded the loss tolerance specified for the data packet, an acknowledgement is sent indicating that the data packet has not been received by the data processing system.","All objects, features, and advantages of the present invention will become apparent in the following detailed written description.","This invention is described in a preferred embodiment in the following description with reference to the figures, in which like numbers represent the same or similar elements. While this invention is described in terms of the best mode for achieving this invention's objectives, it will be appreciated by those skilled in the art that variations may be accomplished in view of these teachings without deviating from the spirit or scope of the present invention.","With reference now to the figures, and in particular with reference to , a data processing system network in which a preferred embodiment of the present invention may be implemented is depicted. Data processing system network  includes at least one server system  coupled to at least one client system  via at least one network such as the Internet . Data transfers between the server system  and client system  conform to the TCP\/IP specification, as well as File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), or some similar communications protocol. Large data transfers are performed in parallel frames as described in further detail below. As will be appreciated, while only a single server system  and single client system  are shown, data processing system network  may include any number of server and client systems (not shown) interconnected by one or more connections and networks, including Internet .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2","b":["104","106","200","205","210","215","220","225","225","106"]},"In order to transfer data over a network, it is necessary to have a set of rules so that every portion of the transfer sequence is properly executed. Each of these rules is called a protocol, and a set of rules is called a protocol suite. The most common set of protocols that are used when transferring data over the Internet and various other networks such as LANs (local area networks) and WANs (wide area networks) is provided by the TCP\/IP (Transmission Control Protocol\/Internet Protocol) protocol suite. The TCP\/IP protocol suite allows a variety of different types of computers, running different operating systems, to communicate with each other. TCP\/IP forms the basis for the worldwide Internet, a wide area network of more than one million computers that literally spans the globe. There are many other network protocol suites in addition to the TCP\/IP suite, including IPX\/SPX (Internet Packet Exchange\/Sequenced Packet Exchange), and NetBios. Although originally developed by independent research groups, most network protocols are open (non-proprietary) standards, many of which are published as a series of numerically-ordered RFC (Request for Comment) papers. For example the IP protocol is RFC 791. The RFC papers are readily available on the Internet or at various libraries.","Although distinct, each of these network protocol suites are similar in structure, comprising a set of layers, with each layer responsible for a different facet of the communication task. For simplicity, the discussion below will primarily pertain to the use of the invention when using the TCP\/IP protocol. However, it should be recognized by those skilled in the art that although the principles of the invention are described in reference to the TCP\/IP protocol, the invention can also be applied to various other network protocols as well.","As shown in , TCP\/IP and similar protocols are utilized by a 4-layer communications architecture  overlaying the software architecture  within the server  and client , and comprising an application layer , a transport layer  a network layer , and a link layer . Each layer is responsible for handling various communications tasks, as follows. The link layer  (also referred to as the data-link layer or the network interface layer) normally includes the device driver in the operating system and the corresponding network interface card in the computer. Together they handle all the hardware details of physically interfacing with the network media being used, e.g. Ethernet cable, etc. The network layer  (also referred to as the internet layer) handles the movement of packets of data around the network. For example, the network layer handles the routing of the various packets of data that are transferred over the network. The network layer in the TCP\/IP suite is comprised of several protocols, including IP (Internet Protocol), ICMP (Internet Control Message Protocol), and IGMP (Internet Group Management Protocol).","The transport layer  provides an interface between the network layer  and the application layer  that facilitates the transfer of data between two host computers. In the TCP\/IP protocol suite there are two distinctly different transport protocols: TCP (Transmission Control Protocol) and UDP (User Datagram Protocol). It is concerned with things such as dividing the data passed to it from the application into appropriately sized chunks for the network layer below, acknowledging received packets, setting timeouts to make certain the other end acknowledges packets that are sent, etc. In accordance with the present invention, when using TCP, the application layer in the client sets the reliability requirements to be met by the transport layer. Conversely, UDP provides a much simpler service to the application layer. It merely sends packets of data called datagrams from one host to the other, without providing any mechanism for guaranteeing that the data is properly transferred. The reliability functionality must be performed by the application layer when using UDP.","The application layer  handles the details of the particular application. There are many common TCP\/IP applications that almost every implementation provides, including (1) Telnet for remote login; (2) FTP, the File Transfer Protocol; (3) SMTP, the Simple Mail Transfer protocol, for electronic mail, and (4) SNMP, the Simple Network Management Protocol.","Computer networks have developed from simple LANs comprising a handful of computers to complex WANs comprising a network of networked computers. The first computer networks were motivated by the realization that it would be advantageous to provide communication links between stand-alone computers. The concepts used in these original networks have fueled the development of today's internets, which comprise a network of networks that use the same protocol suite. Such internets allow a computer on one network to communicate with any one or more computers on the other networks, allowing the data across all of the computers comprising all of the networks to be shared.","The easiest way to build an internet is to connect two or more networks together with a router. Typical routers comprise a special-purpose hardware box with input and output connections and dedicated hardware and\/or embedded software that allow many different types of physical networks to be connected, such as Ethernet, token ring, point-to-point links, etc.  shows an internet comprising an Ethernet network  connected to a token ring network  by a router . Although  only shows two hosts in communication, any host on the Ethernet network can communicate with any host on the token ring network. The router  comprises a network layer module  (an IP module in this case), and appropriate network drivers for connecting to the host networks, namely an Ethernet driver  and a token ring driver .","As shown in , at the application layer, the network comprises an FTP client  and an FTP server . Most network applications are designed so that one end is the client and the other side is the server. The server provides some type of services to various clients, in this case, access to files on the server host. Each layer has one or more protocols for communicating with its peer at the same layer. These communication protocols include the FTP protocol  at the application layer, the TCP protocol  at the transport layer, the IP protocol  at the network layer, and the Ethernet protocol  and token ring protocol  at the link layer. It is common for the application layer to handle user processes, while the lower three layers (transport, network and link) are implemented in the kernel of the operating system, such as UNIX or Windows operating system. For example, the purpose of the network interface layer is to handle the details of the communication media (Ethernet, token ring, etc.), while the purpose of the application layer is to handle one specific user application (FTP, Telnet, etc.).","The application layer and the transport layer use end-to-end protocols (FTP protocol , TCP protocol ). The network layer provides a hop-to-hop protocol that is used on the two end systems and every intermediate system in between (for clarity only one intermediate system is shown here). For instance, the IP module  of the router  is connected to the two hosts by IP protocols . There are also link layer protocols that are specific to the various types of host networks that are connected to the router to handle communication between the networks and the router at the link layer. Thus, an Ethernet protocol  is used to handle communications between the Ethernet driver  in the router  and the Ethernet driver  of the hosts on the Ethernet network , while a token ring protocol  is used to handle communications between the token ring driver  of the router  and the token ring driver  of the hosts on the token ring network .","In the TCP\/IP protocol suite the network layer, IP, provides an unreliable service. It moves a packet of data from a source to a destination, but it provides no mechanism for guaranteeing delivery, or even being able to determine if a proper transfer has occurred. TCP provides reliability services to ensure that data is properly transmitted between two hosts, including dropout detection and retransmission services.","A router has two or more network interface layers (since it connects two or more networks). Any system with multiple interfaces is called multi-homed. A host can also be multi-homed, but unless it specifically forwards packets from one interface to another, it is not called a router. Also, routers need not be special hardware boxes that only move packets around an internet. Most TCP\/IP implementations allow a multi-homed host to act as a router, but the host needs to be specifically configured to support this use. In such instances, the system is either a host (when an application such as FTP or Telnet is being used) or a router (when it's forwarding packets from one network to another). Another way to connect networks is with a bridge. Bridges connect networks at the link layer, while routers connect networks at the network layer. Bridges make multiple LANs appear to the upper layers as a single LAN.","One of the most powerful features of an internet is the ability to hide all the details of the physical layout of the internet from the applications. This allows the application layer to be oblivious to the underlying structure of the network; in fact, it can't and doesn't care if there is a pair of networks connected by a single router, or a multitude of routers and bridges connecting multiple physically-distinct networks.","When an application sends data using TCP\/IP, the data is sent down a protocol stack, through each layer, until it is sent as a stream of bits across the network. As shown in , each layer adds information to the data by prepending headers (and sometimes adding trailer information) to the data that it receives. For instance, at the application layer an application header  is prepended to user data  to form application data . At the transport layer a transport protocol header is prepended to the application data. In the case of  the transport layer is TCP, and therefore a TCP header  is prepended to the application data , thereby forming a TCP frame  that is sent to the network layer IP. The TCP header  comprises twenty bytes. Similarly, at the network layer, a network layer header is prepended to the transport layer data. In the case of TCP\/IP, an IP header  is prepended to the TCP frame  to form an IP datagram . The IP header  also comprises twenty bytes. Finally, at the link layer a media header such as Ethernet header  is added to the data received from the network layer to form a frame of data. In some instances, such as when the media is Ethernet, a media trailer is also appended to the end of the data. For instance, in  an Ethernet trailer  is appended to the Ethernet Header  and the IP datagram  to form an Ethernet frame . The Ethernet frame comprises the stream of bits that flow across the network that correspond to the original application message data. The numbers (14, 20, 20, 4) at the bottom of the headers are typical sizes of the headers in bytes, e.g., the Ethernet header  comprises 14 bytes, etc. The size of the frame will be limited by the maximum transmission unit (MTU) of the type of network being used to transfer the data packet. For example, the MTU of an Ethernet network is 1500 bytes. The network layer automatically performs fragmentation (breaking the datagram up into smaller pieces), so that each fragment is smaller than the MTU of the network.","When the client detects that certain data frames are missing from the data transmission stream, the client will request that the server retransmit the missing frame by sending the sequence number of the first byte of the missing frame in the acknowledge frame. As seen in , the TCP send or retry message  typically comprises a media header , a protocol header , a received sequence number field , a send sequence number field , and a message body . The media header  will be particular to the type of network, e.g., an Ethernet header for an Ethernet network, etc. The protocol header  will depend on the transport and network layer protocol used, such as TCP\/IP, IPX\/SPX, Netbios, etc. The received sequence number field  provides an identifier to the last sequence number reliably received by the computer. The send sequence number  corresponds to the relative sequential number of the message. The message body  contains the application data that is being sent between the source and destination computers. The TCP acknowledge frame  comprises a media header , a protocol header , a received sequence number field , and a send sequence number field . These fields are analogous to the fields described above which share the same name. The acknowledge frame  is sent by the receiving computer to acknowledge receipt of a send or retry message. In accordance with TCP, upon receiving three consecutive acknowledge frames indicating a missing frame, the server would normally \u201cfast retransmit\u201d the missing frame starting with the sequence number that is missing. Such re-transmissions negatively impact performance as the server cuts back on its sliding window and reduces the amount of data it sends.","In accordance with the present invention, a dynamically enforceable application-controlled quasi-reliable extension to TCP permits a client application to dynamically set a level of data transmission reliability within TCP, thereby programming the transport layer to optimistically acknowledge non-critical missing frames. This reliability requirement can be set dynamically to the level of reliability required for specific data frames within the data stream during the data transfer. This process avoids needless retransmissions and permits the TCP data flow and sliding window to advance uninterrupted, thereby providing substantial performance benefits to network throughput.","With reference to , there is shown a flow diagram of a process  for setting the data transmission loss tolerance for a client application, in accordance with a preferred embodiment of the present invention. Process  begins at step , where an application  in client  initiates a network connection to the Internet  by invoking the protocol stack . At step , the client application  determines the data transmission reliability requirements for the particular data to be loaded in the receiver buffer (i.e., the receiver's byte range (RBR) measured by the length of the receiver buffer (\u201clen\u201d)). The process passes to step , where a client application  having the capability to utilize the TCP extension of the present invention sets the percent loss tolerance for the present connection or data frame to be received by making a system call through network input\/output system calls to the TCP layer . This is implemented in the client  with the application  making a system call via the \u201creceive\u201d (\u201crecv\u201d) command within the application programmer's interface (API) . In accordance with the preferred embodiment, a new option (\u201closs_t\u201d) to the \u201creceive\u201d system call used in the BSD (Berkeley) version of UNIX Socket API System Calls is set to the percent loss tolerance that is acceptable to the present application . As used herein, \u201closs tolerance\u201d is defined to mean the maximum percent or amount of data of a given data set that is permitted to be missing and still fulfill the data needs for purposes of the application that will consume the given data set. The percent loss tolerance would have acceptable values in the range 0-100. A loss tolerance value of \u201c0\u201d is equivalent to using standard, reliable TCP having zero tolerance for lost data, whereas a percent loss tolerance of 100 percent gives TCP a performance similar to UDP by never requiring a retransmission of a missing packet. The length (\u201clen\u201d) of the receiver buffer or total length of bytes the application wants to receive at the given loss tolerance is also specified in the \u201crecv\u201d call. \u201clen\u201d is equal to the receiver's byte range (RBR), which is the number of bytes the current application is willing to receive with the specified loss tolerance (\u201closs_t\u201d in the system call).","Representative formats for the \u201crecv\u201d system call as provided in the preferred embodiment are as follows:",{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int recv(s, buf, len, flags, loss_t)"]},{"entry":[{},"int s;"]},{"entry":[{},"void *buf;"]},{"entry":[{},"int len, flags, loss_t;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["where;",{}]},{"entry":["s","is socket descriptor"]},{"entry":["buf","is a pointer to the user (application) receive buffer"]},{"entry":["len","is the length of this receiver buffer"]},{"entry":["flags","special flags like MSG-00B (send or receive out-of-band data)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"MSG-PEEK etc."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["loss_t","is a new parameter that will be used to specify the percent loss"]},{"entry":[{},"tolerance of the application in the receive buffer range"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Loss tolerance is also represented in an absolute amount of data (LOSS-T) that the present application  can tolerate being lost within the RBR. LOSS-T is represented in kilobytes in the preferred embodiment and is stored in the memory of client  accessible by transport layer . LOSS-T is set directly by the application  or is calculated by the TCP layer  as follows:",{"@attributes":{"id":"p-0043","num":"0042"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"LOSS_T","mo":"=","mrow":{"mfrac":{"mrow":{"mi":["loss_","t"],"mo":["\u2062","\u2062"],"mstyle":{"mspace":{"@attributes":{"width":"0.3em","height":"0.3ex"}}}},"mn":"100"},"mo":"*","mrow":{"mrow":{"mo":["(",")"],"mi":"len"},"mo":["\u2062","[","]"],"mstyle":{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},"mi":"bytes"}}}}}},"In a preferred embodiment, the process calculates the LOSS-T as a number of data bytes within a 15-Kbyte RBR equal to the loss_t percent.","With reference back to , the process  proceeds from step  to decision block , where LOSS_T is set as a value stored in register  as seen in , and forced acknowledgments (F_ACK) (described below) is set to zero in register  as seen in . The process then passes to decision block  to determine if all bytes within the RBR have been received since the \u201crecv\u201d system call was made. If the determination is positive, the process passes to step , where the transport layer switches its operation to regular TCP and requests retransmission of all missing packets until the application issues a new receive system call. If the determination is negative, the process passes to step , where the client continues to operate its transport layer with the loss tolerance functionality of the preferred embodiment. Thereafter, the process returns to step  to determine if all bytes within the RBR have been received since the \u201crecv\u201d system call was made.","With reference now to , there is shown a flow diagram of the process for implementing application-controlled loss tolerant TCP functionality, in accordance with a preferred embodiment of the present invention. Based on the loss tolerance specified in process , the TCP layer  makes a determination in process  whether to trigger a retransmission or continue delivering out-of-order frames to the application , depending upon whether the loss tolerance specified for the application  has been exceeded in a receive bytes range. The process  begins at step , when a network connection is initiated between a server and a client.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 9","b":["900","106","312","805","900","810","106","815","820","622","104","810"]},"Returning to decision block , if it is determined that the received data packet is out of sequence, then one or more proceeding data frames in the data stream are missing. In that case, the process passes to decision block , where a determination is made whether the number of missing packets causing forced acknowledgments (F-ACK) within the receive bytes range has exceeded the LOSS-T set by the client application  for the RBR. This is implemented by determining if F_ACK stored in register  is greater than or equal to the LOSS_T stored in register  for the current RBR. As explained, the LOSS-T is an amount of data loss that is acceptable to maintain the reliability requirements of the present application . If the process has forced acknowledgment of a number of kilobytes in the RBR that exceeds the present LOSS-T number or if the received packet is outside the RBR, the process passes to step , where the client  sends an acknowledgment request  to re-transmit the missing packets of data, which includes the sequence number of the first byte of the missing frame that it expects to be re-transmitted. The client  proceeds to operate as is normal for TCP by blocking delivery of all subsequent data in the TCP stream until the lost TCP frame is delivered. Thereafter, the process returns to step  to await receipt of the next expected data packet over the network connection.","Returning to decision block , if it is determined that the number of missing packets causing forced acknowledgments within the RBR has not exceeded the LOSS-T, the process passes to step , where F_ACK in register  is incremented by the number of missing bytes in the missing packets, and then the process passes to step , where the client  forces an acknowledge frame  to be sent to the server that indicates that the missing packets have been received by the client  (a \u201cforced acknowledgement\u201d). Thus, even though the client application  has not received the missing data frames, the data stream can continue to flow uninterrupted because the application  has received sufficient data in the RBR to meet the reliability requirements of its present application. Passing from step , the process returns to step , where the client  awaits receipt of a data packet over the network connection having a sequence number following the missing packets causing the forced acknowledgment.","As can now be appreciated, for applications that can tolerate a certain amount of missing data, a network client can specify a data loss tolerance that is acceptable in the current application to provide quasi-reliable TCP functionality. For example, if an application  has set the loss_t at 10 percent, the TCP layer  will acknowledge (i.e., forced acknowledgment) up to 1500 bytes of a given 15 kilobyte (Kbyte) RBR even though they have not been received. Any missing bytes in excess of the specified loss_t percent within the RBR would not be optimistically acknowledged as received, and would require that the server retransmit the missing frames. A loss_t of 100 percent would never trigger retransmission from the server, thus making TCP tolerate any amount of packet losses over the network. A loss_t of 0 percent would require TCP to operate in its strict, reliable mode of operation, providing strictly reliable data transfer, where each consecutive TCP frame must be delivered consecutively.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 10","FIG. 10","FIG. 10"],"b":["700","800","1010","1","2","3","1","10","11","1010","4","9","910","905","4","10"]},"It will be appreciated by those skilled in the art that the present invention provides significant advantages for improved data transmission. This process successfully prevents communication stalls resulting from unnecessary reliability requirements being enforced for a given application. Further, the process prevents congestion in the network and avoids retransmissions, thereby permitting the data flow to continue when the application can tolerate a given percent of unreliable or missing transmitted data. Still further, it can be seen that the process is implemented in the client-side, thereby preventing significant and costly changes to the server-side systems. Instead, minimal modifications to client-side applications can be programmed to dynamically determine when a given client application will utilize the loss tolerance feature simply by setting an option in the receive system call. Using standard TCP, server-side systems and client applications that are unaware of the loss tolerance feature of the present invention can operate seamlessly with client systems enabled with the present invention. Still further, the loss tolerance feature of the preferred embodiment can be dynamically controlled by applications so that specified applications, or select parts of a particular data transfer, can take advantage of the loss tolerance feature of the present invention.","While the invention has been particularly shown and described with reference to a preferred embodiment, it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example, the present invention may be implemented using any combination of computer programming software, firmware or hardware. As a preparatory step to practicing the invention or constructing an apparatus according to the invention, the computer programming code (whether software or firmware) according to the invention will typically be stored in one or more machine readable storage mediums such as fixed (hard) drives, diskettes, optical disks, magnetic tape, semiconductor memories such as ROMs, PROMs, etc., thereby making an article of manufacture in accordance with the invention. The article of manufacture containing the computer programming code is used by either executing the code directly from the storage device, by copying the code from the storage device into another storage device such as a hard disk, RAM, etc. or by transmitting the code for remote execution. The method form of the invention may be practiced by combining one or more machine-readable storage devices containing the code according to the present invention with appropriate standard computer hardware to execute the code contained therein. An apparatus for practicing the invention could be one or more computers and storage systems containing or having network access to computer program(s) coded in accordance with the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
