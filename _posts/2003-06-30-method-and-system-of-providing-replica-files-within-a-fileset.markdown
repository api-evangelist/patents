---
title: Method and system of providing replica files within a fileset
abstract: A method and system of providing replica files within a fileset is disclosed. According to one embodiment, a method is provided which comprises associating a source file and a replica file of the source file within a fileset, wherein the replica file of the source file comprises a virtual copy of the source file. In another embodiment wherein the source file comprises a metadata file system object and the replica file of the source file comprises a replica metadata file system object, the associating comprises generating a reference within the replica metadata file system object to the metadata file system object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996361&OS=07996361&RS=07996361
owner: Symantec Operating Corporation
number: 07996361
owner_city: Mountain View
owner_country: US
publication_date: 20030630
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention relates to data storage and retrieval generally and more particularly to a method and system of providing replica files within a fileset.","2. Description of the Related Art","Information drives business. Companies today rely to an unprecedented extent on online, frequently accessed, constantly changing data to run their businesses. Duplicate copies as well as slightly altered versions or editions of such data are commonly made and maintained, for example, to facilitate independent and simultaneous data access by a number of users and\/or processes. Providing such copies or versions has until recently required data to be completely replicated for each copy or version made, often resulting in wasted storage space, particularly for infrequently-accessed and\/or modified data. Alternatively, links (e.g., hard links or symbolic links) may be used to reference a single data image. Use of such links fails however to provide an exclusive copy of the data to each user or process. In other words, a change or write operation made by one user or process is immediately visible to all users or processes with an associated loss of prior or original data.","More recently, methods (e.g., storage checkpoints) have become available for providing persistent frozen or \u201cpoint-in-time\u201d images of data using copy-on-write technology. In a storage checkpoint, only that data which has been modified or written-to in a checkpointed data image following the storage checkpoint's creation is stored. In conventional data storage and\/or processing systems however, such methods have been used primarily to facilitate off-host processing such as data backups and consequently, storage checkpointing or \u201ccloning\u201d has been typically performed on entire filesets as this is the most common level for performing backups, where a \u201cfileset\u201d is included in a conventional file system such as a Unix File System (UFS), NT File System (NTFS), File Allocation Table (FAT)-based file system or the like within a virtual file system (e.g., the Veritas File System provided by Veritas Software Corporation of Mountain View, Calif.) or a conventional, independent file system where no such virtual file system is present.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 1","FIG. 1","FIG. 1"],"b":["100","110","120","110","112","114","116","120","122","124","126","112","116","112","114","116","114","115","115","116","117","117"]},"In the illustrated example, storage checkpoint  is a so-called \u201cvirtual copy\u201d, logically identical to primary fileset  when storage checkpoint  is created, but lacks any associated allocated data blocks and initially stores no data. Instead, storage checkpoint  initially includes only namespace components - within a hierarchical directory structure identical to that of primary fileset  and associated references (e.g., pointers) to data blocks (e.g., data blocks  and ) associated with the primary fileset . One of skill in the art will recognize that such references may be implemented as one or more arrays of pointers to individual data blocks associated with primary fileset  or as one or more single pointers to a list of pointers to such data blocks. Storage checkpoint  is typically created within the free space available to primary fileset , and thereby minimizes the use of storage space. The following example describes creation and use of a storage checkpoint such as storage checkpoint  in further detail.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIGS. 2A-2B","FIG. 2A","FIG. 1","FIG. 2A"],"b":["200","210","220","210","212","214","213","215","214","212","213","215"]},"Storage checkpoint  of and includes sparse files  and  corresponding to files  and  of primary fileset  each in turn comprising one or more references (e.g., pointers) to data blocks associated with the primary fileset  and\/or allocated blocks associated with persistent storage. It should be noted that there is a one to one correspondence between files within the primary fileset and sparse files or similar namespace components within storage checkpoint . The blockmaps of sparse files  and  may initially include references A-E and A-E, as illustrated, respectively corresponding to each block (e.g., data blocks  and ) of files  and . In , the file system of  is illustrated following write operations to data blocks B, E, and C of primary fileset . In this example, prior to performing any write operation(s), data block(s) are allocated as needed within sparse files  and  to store the prior contents of data blocks B, E, and C of files  and .","After the prior data contents have been stored (e.g., \u201cpushed\u201d or \u201cpulled\u201d) within the newly allocated data blocks B, E, and C of sparse files  and , new data may be written to blocks B, E, and C of primary fileset  and the write operation may be completed. This process may be continued as additional write operations are performed on files  and  until all of the original data contents of the files has been transferred such that sparse files  and  become complete and independent files themselves.","Disclosed is a method and system of providing replica files within a fileset. Embodiments of the present invention may be used to reduce the replication of data and storage space requirements by extending existing storage checkpoint or \u201cclone\u201d facilities and associated copy-on-write techniques to individual files within a fileset.","According to one embodiment, a method is provided which comprises associating a source file and a replica file of the source file within a fileset, wherein the replica file of the source file comprises a virtual copy of the source file. In another embodiment wherein the source file comprises a metadata file system object and the replica file of the source file comprises a replica metadata file system object, the associating comprises generating a reference within the replica metadata file system object to the metadata file system object.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","The use of the same reference symbols in different drawings indicates similar or identical items.","Although the present invention has been described in connection with one embodiment, the invention is not intended to be limited to the specific forms set forth herein. On the contrary, it is intended to cover such alternatives, modifications, and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.","In the following detailed description, numerous specific details such as specific method orders, structures, elements, and connections have been set forth. It is to be understood however that these and other specific details need not be utilized to practice embodiments of the present invention. In other circumstances, well-known structures, elements, or connections have been omitted, or have not been described in particular detail in order to avoid unnecessarily obscuring this description.","References within the specification to \u201cone embodiment\u201d or \u201can embodiment\u201d are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. The appearance of the phrase \u201cin one embodiment\u201d in various places within the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover, various features are described which may be exhibited by some embodiments and not by others. Similarly, various requirements are described which may be requirements for some embodiments but not other embodiments.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["300","302","306"]},"Although namespace components - are arranged in a hierarchical manner in the fileset of , where namespace component  (\/root) references namespace components  (source) and  (replica), any number of namespace components arranged in any number of configurations are contemplated by alternative embodiments of the present invention. In the embodiment illustrated by , unlike in prior art file systems in which namespace components of a given fileset must each reference independent groups of data blocks, source and replica files such as namespace components  and  are provided which reference a single group of data blocks A-D using copy-on-write technology. According to one embodiment of the present invention, one or more similar or duplicate file indices (e.g., i-nodes) are created within fileset  to provide the described file replica functionality.","In the described fileset, no additional independent data blocks must be allocated and associated with namespace component  until such time as data is to be modified within the source file or replica file corresponding to namespace components  and , respectively. Additionally, the amount of storage (e.g., data storage blocks) which must be allocated is reduced to more accurately reflect the number and location of the modifications which occur. While data block-level granularity has been illustrated with respect to the embodiment of , all granularity levels (e.g., extent-level, file-level, etc.) are contemplated in alternative embodiments of the invention and the number of storage units (e.g., blocks, extents, etc.) which are allocated or transferred in response to a request to modify data within namespace components of fileset  may be varied according to other embodiments of the present invention. The described file-replica functionality may also be extended in a variety of other ways. For example, a replica of another replica or multiple replicas of a single file may be generated to provide increased operational and\/or storage efficiencies.","According to still more embodiments of the present invention, the described functionality may be implemented in any number of ways. For example, according to one embodiment, the described functionality is provided through a file system application programming interface (API) which intercepts or overwrites copy file system requests and commands such that a \u201ccopy\u201d command used to copy a file within a single fileset results in a source-replica relationship being established. Alternatively, a file system kernel may be modified to detect and re-direct file copy commands in a similar manner.","In another embodiment, a daemon system process may be used, as just one example, to determine and maintain file checksums within a centralized or distributed index. The index could then be used by the daemon or another process to scan for identical copies of files within a fileset so that a source-replica relationship could be established there between. According to the described embodiment, when a new file is created, its checksum is determined and compared to that of existing files to identify potential file copies. In another embodiment, the described daemon acts as a background process or utility, checking the index for previously created file copies or files which became similar or identical by operation of writes occurring after their creation. In yet another embodiment of the present invention, a file change log (e.g., a bitmap having a bit location corresponding to each block or region within a file to indicate whether that block or region has been modified since the log was created or reset) is used to quickly determine which files have recently changed and consequently need to be scanned for potential source-replica coalescing.","Such checksums may be periodically or constantly determined or updated and then used, for example, when a file is closed to identify such file copies. In on embodiment of the present invention, an extendible hash index is used to store the described checksums. In yet another embodiment, each file or other namespace component within a file set maintains a list of its replicas and to the source from which it depends.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIGS. 4","FIG. 4","FIG. 4"],"i":["a","c ","a ","a "],"b":["4","400","402","406","410","414","418","406","410","414","418","402","410","402","406"]},"Source file  of the described embodiment includes a number of associated data blocks -which are referenced by replica files , ,  and . As shown in , replica files , ,  and  are arranged in a chain structure and according to one embodiment, each replica file includes a file index (e.g., one or more i-nodes) with a pointer or reference to that replica file's immediate predecessor in the chain. It is to be appreciated that both the number of replica files and blocks within source file  depicted within are completely arbitrary and could comprise any numbers in alternative embodiments of the invention. Similarly, while blocks such as blocks -have been illustrated herein, other storage units or designators (e.g., extents) may be used interchangeably.","In the fileset embodiment illustrated by , a write operation to a portion of replica file  has been depicted with the associated changes to the dependency chain structure shown. More specifically, a block is allocated within replica file  and used to store data pulled from block of source file . Consequently, extents and are created (e.g., replacing a single prior extent linking replica file  and replica file ) to link portions of replica file  not associated with independent allocated blocks and therefore dependent on preceding replica file  with corresponding portions of that replica file. Similarly a block , used to store data associated with the described write operation, and extents and are created or allocated within replica file .","In the fileset embodiment illustrated by , a write operation to a portion of replica file  has been depicted with the associated changes to the dependency chain structure shown. More specifically, a block is allocated within replica file  and used to store data pulled from block of source file . Consequently, extent is created to link a portion of replica file  which is not associated with independent allocated block and therefore dependent on preceding replica file  with corresponding portions of that replica file. Similarly a block , used to store data associated with the described write operation, and extent are created or allocated within replica file .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","i":"a ","b":["501","502","503"]},"If the comparison was determined to be successful however, another determination is made whether the first and second files are already actually part of the same source-replica chain (process block ). If so, an indication is made that the source-replica relationship was successfully established (process block ). If it is determined that the first and second files are not already actually part of the same source-replica chain, a determination is next made whether the first file is part of a source-replica chain while the second file is not (process block ). If so, data blocks are deallocated from the second file as appropriate (process block ) and the second file is added just after the first file in its source-replica chain (process block ) before success of the operation is indicated (process block ). If it is not determined that the first file is part of a source-replica chain while the second file is not, a determination is made whether the second file is part of a source-replica chain while the first file is not (process block ). If so, data blocks are deallocated from the first file as appropriate (process block ) and the first file is added just after the second file in its source-replica chain (process block ) before success of the operation is indicated (process block ).","Subsequently, a determination is made whether the first and second files are each part of separate source-replica chains (process block ). If the first and second files are each part of separate source-replica chains, a sub-process illustrated by is performed which returns and indicates success as shown, otherwise a prospective successor file is selected from the first file and the second file and data blocks are deallocated from the prospective successor file as appropriate (process block ). According to one embodiment of the present invention, the selection of the prospective successor file is arbitrary or random. Thereafter the first file and the second file are appropriately linked to form a source-replica chain (process block ) as shown (e.g., the prospective successor file is added to the other file just behind it in the source-replica chain). Success is then indicated and the illustrated process terminates as shown.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 5","FIG. 5"],"i":["b ","a"],"b":["515","516","517","518"]},"Once the appropriate blocks, if any, have been deallocated from the first file, the portion of the first file's source-replica chain which includes the first file and all identical successor files (process block ) is removed from the first file's replica chain. This removed portion of the first file's source-replica chain is then added to the second file's source-replica chain immediately after the second file (process block ) as shown. In an alternative embodiment, files which are identical to the first file are disregarded and only the first file is moved to the second file's source-replica chain. While this described embodiment is simpler to implement, the resultant storage space savings are less than obtainable using the technique which is depicted in and described herein. Thereafter, the process illustrated by is re-entered as previously described herein. If a determination is made that the second file differs the most from its predecessor file the process elements (process blocks -) as previously described with respect to the first file are performed substituting the first and second files.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 5","i":"c ","b":["526","531","527","528","529","530","531"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 5","i":"d ","b":["532","533","534"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIGS. 6","FIG. 4"],"i":["a","d ","a"],"b":["6","400","402","406","410","414","418","402","406","410","414","414","400","402","414","402","410"]},"Source file  of the described embodiment includes a number of associated data blocks -which are referenced directly or indirectly by replica files , ,  and . In the illustrated embodiment, each replica file includes a file index (e.g., one or more i-nodes) with a pointer or reference to the \u201cparent\u201d or \u201croot\u201d file of the tree from which that replica file immediately depends. In the fileset embodiment illustrated by , a write operation to a portion of replica file  has been depicted with the associated result to the dependency chain structure shown.","More specifically, replica file  is removed from the described initial chain of replica files such that replica file  depends directly from source file  (e.g., using a single overlay extent) and a block , used to store data associated with the described write operation, is allocated within replica file  along with extents and to link portions of replica file  not associated with independent allocated blocks with preceding source file .","In the fileset embodiment illustrated by , a write operation to a portion of source file  has been depicted with the associated changes to the dependency tree structure shown. More specifically, a block is allocated within replica file  and used to store original data pushed\/pulled from block of source file . Consequently, extents and are created to link portions of replica file  not associated with independent allocated block and therefore dependent on preceding source file  with corresponding portions of that source file. The write operation may then be performed to allocated block with no additional changes to the dependency or allocated blocks of replica files ,  or .","In the fileset embodiment illustrated by , a write operation to a portion of replica file  has been depicted with the associated changes to the dependency tree structure shown. More specifically, replica file  is removed from the described initial chain of replica files such that replica file  depends directly from replica file  (e.g., using a single overlay extent) and a block , used to store data associated with the described write operation, is allocated within replica file  along with an extent to link the remainder of replica file  not associated with independent allocated blocks with preceding replica file .","In the fileset embodiment illustrated by , a write operation to a portion of replica file  has been depicted with the associated changes to the dependency tree structure shown. More specifically, replica file  is removed from the described initial chain of replica files such that the replica file chain is abolished and replica files  and  depend directly from source file  (e.g., using a single overlay extent) as shown. Moreover, data blocks and are allocated within replica files  and , respectively, to store copies of the data previously stored within data block as a result of this dependency change causing the creation or modification of extents , , , and as shown. Following the abolition of the replica file chain, write operations to any new portion of source file  will cause the displaced original data of the source file to be copied to each of the replica files following any necessary data block allocations before such write operations can complete.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","i":"a ","b":["701","702","703"]},"If the comparison was determined to be successful however, another determination is made whether the first and second files are already actually part of the same source-replica tree (process block ). If so, an indication is made that the source-replica relationship was successfully established (process block ). If it is determined that the first and second files are not already part of the same source-replica tree, a determination is next made whether the first file is part of a source-replica tree while the second file is not (process block ). If so, data blocks are deallocated from the second file as appropriate (process block ) and the second file is added as a dependent of the first file in its source-replica tree (process block ) before success of the operation is indicated (process block ). If it is not determined that the first file is part of a source-replica tree while the second file is not, a determination is made whether the second file is part of a source-replica tree while the first file is not (process block ). If so, data blocks are deallocated from the first file as appropriate (process block ) and the first file is added as a dependent of the second file in its source-replica tree (process block ) before success of the operation is indicated (process block ).","Subsequently, a determination is made whether the first and second files are each part of separate source-replica trees (process block ). If so, a sub-process illustrated by is performed which indicates success upon return as shown, otherwise a prospective branch file is selected from the first file and the second file and data blocks are deallocated from the prospective branch file as appropriate (process block ). According to one embodiment of the present invention, the selection of the prospective successor file is arbitrary or random. Thereafter the first file and the second file are appropriately linked to form a source-replica tree (process block ) as shown (e.g., the prospective branch or \u201cchild\u201d file is made dependent of the other file in its source-replica tree). Success is then indicated and the illustrated process terminates as shown.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"i":["b ","a","a "],"b":["715","716","717","718","716","718","719","721"]},{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 7","i":"c ","b":["722","725","726","723","724","725"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 7","i":"d ","b":["727","728","729"]},"While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims.","The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted, described, and is defined by reference to particular embodiments of the invention, such references do not imply a limitation on the invention, and no such limitation is to be inferred. The invention is capable of considerable modification, alteration, and equivalents in form and function, as will occur to those ordinarily skilled in the pertinent arts. The depicted and described embodiments are examples only, and are not exhaustive of the scope of the invention.","The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams, flowcharts, and examples. It will be understood by those within the art that each block diagram component, flowchart step, operation and\/or component illustrated by the use of examples can be implemented, individually and\/or collectively, by a wide range of hardware, software, firmware, or any combination thereof.","The present invention has been described in the context of fully functional data processing system or computer systems; however, those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of such signal bearing media include recordable media such as floppy disks and CD-ROM, transmission type media such as digital and analog communications links, as well as media storage and distribution systems developed in the future.","The above-discussed embodiments may be implemented using software modules which perform certain tasks. The software modules discussed herein may include script, batch, or other executable files. The software modules may be stored on a machine-readable or computer-readable storage medium such as a disk drive. Storage devices used for storing software modules in accordance with an embodiment of the invention may be magnetic floppy disks, hard disks, or optical discs such as CD-ROMs or CD-Rs, for example. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention may also include a semiconductor-based memory, which may be permanently, removably or remotely coupled to a microprocessor\/memory system. Thus, the modules may be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer-readable storage media may be used to store the modules discussed herein.","The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein, and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein, without departing from the scope of the invention.","Consequently, the invention is intended to be limited only by the scope of the appended claims, giving full cognizance to equivalents in all respects."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous features and advantages made apparent to those skilled in the art by referencing the accompanying drawings in which:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 2A-2B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 4","i":["a","c "],"b":"4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","i":"a "},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5","i":"b "},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5","i":"c "},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5","i":"d "},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 6","i":["a","d "],"b":"6"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7","i":"a "},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7","i":"b "},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 7","i":"c "},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7","i":"d "}]},"DETDESC":[{},{}]}
