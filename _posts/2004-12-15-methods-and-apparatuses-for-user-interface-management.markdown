---
title: Methods and apparatuses for user interface management
abstract: A data driven, no-refresh, high-interactivity user interface framework, which can be used in (or with) web browsers to provide user interface for accessing product and service configuration through network connection. For example, the user interface can be used with web-based customer order management or product configurator. In one embodiment, the user interface presented as a web document is updated using Document Object Model (DOM) to avoid refreshing. Updates to the user interface are driven by the data managed by the user interface. An event queue for user actions to be dispatched to the server is provided to improve usability of the user interface. A user interface level application program interface is provided for external applications/modules to improve configurability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08627344&OS=08627344&RS=08627344
owner: Siebel Systems, Inc.
number: 08627344
owner_city: San Mateo
owner_country: US
publication_date: 20041215
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNOLOGY FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["At least some embodiments of the present invention relate to user interfaces presented as web documents in a web browser, and more particular to interactivity of such user interfaces when server side processing is involved.","Developed and standardized by the International Organization for Standards (ISO) in 1986, Standard Generalized Markup Language (SGML) is a system for organizing and tagging elements of a document. SGML specifies the rules for tagging elements. The tags can be interpreted to format the tagged elements. Different programs may interpret the tags differently.","Similar to SGML, HyperText Markup Language (HTML) is a markup language used to create documents with hyperlinks, or links, that are portable from one platform to another. Hyperlinks allows one to jump from one document to another on the network, such as Internet, in a non-sequential way. Hyperlinks allows documents to be linked in a complex web of associations, forming the World Wide Web. Typically, hyperlinks are specified using Uniform Resource Locator\/Universal Resource Locator (URL), which points to a specific location on the network for the retrieval of a web page.","A web browser, such as Internet Explorer or Netscape Navigator, provides an interface to the World Wide Web. A web browser presents the web documents and accepts user inputs. When a link is selected, the web browser follows the link to retrieve the corresponding web document and present the document. A sophisticated web browser can present web documents of many different formats.","HyperText Markup Language (HTML) supports the submission of data from the web browser to a web server, which typically communicates with web browsers in HyperText Transfer Protocol (HTTP) over a network connection. A web browser may also retrieve web documents using other communication protocols.","For example, a web page may contain a number of user interface elements specified in HTML, such as text entry boxes, radio buttons, checkboxes, selection boxes, buttons, etc. A user can interact with the web browser to provide user data to the corresponding user interface elements. The web page can have one or more buttons, which when pressed cause the web browser to send user data, collected by the web browser for the web page, to the web server. In response, the web server can present a new web page in view of the submitted user data.","In this way, a user may interact with application programs running on the server through the use of web browsers and web servers. On the server side, the application programs communicate with the web server to present data and\/or collect user input. The web pages rendered in the web browser can be viewed as the user interfaces of the application programs running on the server.","Dynamic HTML combines HTML, style sheets, and scripts to make web pages more interactive. Cascading Style Sheets (CSS) allow web developers to control the style and layout of multiple web pages in a consistent way. Cascading Style Sheets provide templates for the appearance of one or more HTML elements. Scripts allow web developers to create programs running in the web browser for the associated web page to provide user interaction.","For example, a script may be used to check if the data entered by a user is of a correct type and inform the user when an error is detected. The script can be used to avoid the web browser sending erroneous data to the server and the server responding back a web page pointing out the error(s) which may be easily detected using the script in the web browser.","Extensible Markup Language (XML) is a dialect of SGML. XML allows designers to create their own customized tags, enabling the definition, transmission, validation, and interpretation of data between applications and between organizations. XML has been designed for ease of implementation and for interoperability with both SGML and HTML.","Document Object Model (DOM) is an Application Programming Interface (API) for documents, such as HTML and XML documents. DOM defines the logical structure of documents and the way a document is accessed and manipulated. For example, XML may be used to present data as a document; and DOM can be used to manage the data.","Using DOM, programmers can build documents, navigate their structure, and add, modify, or delete elements and content. Most elements found in an HTML or XML document can be accessed, changed, deleted, or added using DOM, such as graphics, text, headlines, styles, etc.","DOM is designed to be used with any programming language, such as Java, JavaScript, VBScript, ECMAScript (an industry-standard scripting language based on JavaScript and JScript), etc.","A hosting implementation of DOM provides an implementation of the API in accordance with DOM specification so that a client application of DOM can use the interface. Some examples of hosting implementations of DOM are browsers, editors and document repositories.","A client application of DOM uses the hosting implementation of DOM to manipulate documents. Some examples of client applications of DOM are scripts within an HTML or XML document.","The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of the present invention. However, in certain instances, well known or conventional details are not described in order to avoid obscuring the description of the present invention. References to one or an embodiment in the present disclosure are not necessarily references to the same embodiment; and, such references mean at least one.","Typically, a web server sends a web page to a web browser to present a user interface which can be used to present data and\/or collect data, such as order options or product\/service configurations. When the user selects a particular option, the user interface may need modifications.","For example, when a user selects a particular color for a car, it may be determined that certain options may not available for cars of the particular color; and certain other options may become available for the cars of the particular color. A friendly user interface evolves and changes as more information is received from the user.","Typically, the web page is modified at the server; and an updated version of the web page is sent to the web browser to show the updated user interface. The web browser reloads or refreshes the entire web page in the web browser.","The refresh process takes time to download the entire updated web page and to re-render the web page, even though only a small portion of the web page is updated.","Screen refresh can be uncomfortable to the user and undesirable and can degrade the usability of the user interface.","The delay in the refresh process may cause long user wait time after user interaction. Generating the entire updated web page increases the workload at the server; and downloading the entire updated web page generates more network traffic between the client and the server.","One embodiment of the present invention provides a data driven, no-refresh, high-interactivity user interface framework, which can be used in (or with) web browsers to provide user interface for accessing product and service configuration through network connection. For example, the user interface can be used with web-based customer order management or product configurator.","In one embodiment of the present invention, the user interface can be partially updated without refreshing the entire web document in the web browser, which improves usability of the user interface. Further, eliminating refresh can dramatically reduce the network traffic associated with downloading updated web pages which show the updated user interfaces.","In one embodiment of the present invention, a client application of DOM uses a hosting implementation of DOM in the web browser to dynamically update and modify the web document. The web document is presented in the web browser as a user interface to access the server application. In one embodiment, the client application includes a user interface rendering engine, which uses DOM to implement changes in the user interface.","In one embodiment of the present invention, an application program interface is provided to access the user interface rendering engine. The application program interface is at the user interface level so that custom programs can be easily developed to customize user interfaces that are presented as web documents in the web browser.","Thus, for example, one can develop custom logic functions to manipulate the web document at the user interface level. According to the user interface level requests received through the application program interface to the user interface rendering engine, the user interface rendering engine uses DOM to modify the web document and implement the user interface.","The application program interface to the user interface rendering engine increases the configurability of the user interface. To customize a user interface, one can use custom modules to adjust the appearance and\/or behavior of the user interface using the user interface level API. Further, external applications can access the user interface (UI) layer API to extend the functionality of the user interface rendering engine.","In one embodiment of the present invention, the user interface rendering engine is driven by data from the server. The server specifies the data for the user interface, such as the data to be presented or to be collected via the user interface. The user interface rendering engine determines the modifications to a web document to implement the user interface for the data. Thus, the user interface is data driven.","In one embodiment, instead of generating the user interface modifications at the server and sending the user interface modification to the web browser for implementation after user interaction, the server sends increment data updates for the user interface. The user interface rendering engine running on the client computer, on which the web browser is running, determines the modifications to the web document to implement a user interface that is suitable for the data.","In one embodiment, the data sent from the server includes the list of items for which user data will be collected and option sets for selection by the user. The data may further include default values and\/or previously collected user data. In response to user interaction, increment data updates are sent from the server. For example, instead of sending the entire list of items, only changes to the list is sent to reduce the amount of data that is transmitted over the network.","When the server sends the increment data updates to the user interface rendering engine, the user interface rendering engine determines the modifications to the user interface from the increment data updates.","In one embodiment of the present invention, a user interface framework uses an event queue to manage user events that require server side processing so that the browser do not have to wait for the response from the server before accepting and performing further user inputs. A user input action may require certain client side processing and response and certain server side processing and response. The use of an event queue improves the responsiveness of the user interface, since the user does not have to wait for the server side response before performing next input operation.","In one embodiment of the present invention, the client application running in (or with) a web browser includes: a DOM based user interface (UI) update engine, a user interface (UI) rendering engine, a local data cache, an event handler, and a communication manager. In one embodiment, the client application further includes user interface level application program interfaces for one or more custom modules to customize user interfaces which are presented as web pages in the web browser.","In one embodiment, a user interface (UI) update engine updates web documents to implement user interface through DOM. A user interface rendering engine renders user interface through the user interface update engine according to the data to be managed by the user interface. An event handler traps events from the web browser and queues and dispatches events to a server for processing. A communication manager manages communication with a remote server for HTML stream and increment data updates. A local data cache, separate from the typical browser cache, maintains the data managed by the user interface that is presented in the form of a web document.","In one embodiment, the DOM based UI update engine communicates with the event handler to perform client side processing of user actions and performs DOM updates. The UI rendering engine performs UI control painting and delegates operations to the DOM update engine. The event handler queues user actions and dispatches the user actions for processing. The communication manager manages both HTML and data channels where data are serialized into a format that suitable for network transmission.","In one embodiment, the client side modules are implemented using scripts executable in the web browser. Further, in one embodiment, user interface level application program interfaces are provided for customization modules which can be used to custom configure the user interface presented as a web document. For example, the user interface appearance and behavior can be configured through the use of custom scripts (e.g., JavaScript programs). Thus, the configurability of the user interface presented as a web document is improved according to one embodiment of the present invention.","In one embodiment, the server side includes: visible frame, hidden frames and user interface service. The visible frame uses template cache and placeholders for DOM to generate HTML documents. The hidden frames serve as conduit for UI service to client UI framework. The UI service maintains UI information and control cache to provide increment update services, such as determining data to be displayed, determining increment changes for configuration instance, handling methods invoked from the client side, etc.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 1","FIG. 1"],"b":["121","123","127","123","127","127","123","101"]},"The server system () may be one computer system, or a set of computers interconnected with network connections, such as a local area network.","In one embodiment, the user interfaces for the server application () are presented as web documents using the web server (). The server system () further includes a document data processor (), which processes the document data for a user interface that is presented as a web document. In one embodiment, document data includes data indicating data items to be collected, data values to be presented, options from which a user may select from, etc.","For example, according to currently collected data values the document data processor can determine whether an additional data item needs to be collected, whether an option becomes unavailable, whether available options for a parameter is changed, etc. Such data changes can lead to modifications to the user interface that is presented as the web document. In one embodiment, the modification to the user interface is determined using the document manager () running in the client system ().","In one embodiment, the client system () includes a web browser core (), which includes the functionality of a typical web browser, and supports at least HTML documents. The web browser core () renders the web document (), which is presented as the user interface for accessing the server application (). In one embodiment, the web browser core is in a web browser, such as Internet Explorer or Netscape Navigator.","In one embodiment of the present invention, the client system () further includes a document manager (). The document manager () can manipulate the web document () rendered by the web browser core (). Thus, the document manager () may modify the web document () to update the user interface without refreshing the entire web document.","In one embodiment, the document manager () includes a document update engine (), which can access the web document () for modifications. The document manager () further includes a document data manager () which can determine the changes to the document data for the web document (). For example, when the user provides new data values, the document data manager () can determine the changes with respect to the data that have been previously sent to the server so that only the increment update portion is sent to the server. Sending the increment update avoids unnecessary network traffic for data that have been previously sent to the server.","In one embodiment, the document manager () further includes a communication manager () which supports data communication between the document manager () and the server system (). For example, the communication manager () facilitates the transmission of increment updates for the document data to and from the document data processor () in a data channel (e.g., through remote procedure calls, or an HTTP transaction). In one embodiment, the communication manager () further controls an HTML stream for a user interface channel. For example, when a different user interface is to be loaded, the HTML stream can be used to load information for the new user interface for the document update engine ().","In one embodiment, the document manager () further includes an event handler () which manages a document event queue (). Some events can need the processing at the document manager () and the processing at the server system (). When an event needs the processing at the server system (), the document event is queued in the document event queue for transmission to the server system (). Thus, the document manager () does not have to hold off the processing of further events before the response from the server system is received. This can significantly increase the responsiveness of the user interface.","In one embodiment, when the user moved from one field to another in the user interface, the user input event causes the document manager () to validate the data in the field. When the data is changed, the data may be sent to the server system () for storage and for further processing by the document data processor () (e.g., determining changes to document data), which can lead to updates in the user interface.","In one embodiment, the document data processor () sends increment updates for the document data to the document manager, in view of increment updates received from the document manager (). The increment updates sent from the document data processor () drive the user interface changes. The document update engine () modifies the web document () without refreshing the web document in the web browser. For example, a user interface element can be added into, or deleted from, the web document without the web browser core () re-rendering the entire web document.","In one embodiment of the present invention, the document manager () is implemented using scripts within the web document (). For example, in one embodiment of the present invention, JavaScript is used to implement the client application of DOM for the user interface framework of the present invention. A JavaScript program runs in the web browser to manipulate the web document () through the host implementation of DOM on the web browser (e.g., web browser core ). JavaScript is supported on most variety of browsers; and many popular web browsers, such as Internet Explorer and Netscape Navigator, support DOM. Alternatively, Java, VBScript or ActiveX can also be used to implement the client application of DOM for the client side of the user interface framework.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 2"},"In , a web browser core (), such as Internet Explorer or Netscape Navigator, renders a web document (), which may be used to receive user selections for various options, such as an order form, a product configuration form, etc. The web document () includes various objects (e.g., , , . . . , ), which can be accessed by an application program via an implementation of document object model ().","In , document update logic () uses the document object model () to update the web document () maintained by the web browser core (). A document data manager () uses the document object model () to obtain the user data from the web document (). A data cache () is maintained so that increment changes in user data can be determined from comparing the data in the data cache () and the data retrieved from the web document via the document object model ().","In one embodiment, a user interface rendering engine () directs the document update logic () to implement user interfaces in the form of the web document (). The user interface rendering engine () is typically data driven. For example, when an increment update for document data is received from the remote server via the communication manager (), the user interface rendering engine () determines the modifications to the user interface and implements the user interface through modifying the web document using the document update logic ().","In one embodiment, an event handler () receives user input events from the web browser core (). For server processing, the events are queued in a document event queue (), which is separate from any event queue maintained by the web browser core (). The event handler () dispatches the events in the queue () to the remote server using the communication manager ().","In one embodiment, the communication manager () uses remote procedure calls for the communication of document data and HTML stream for the user interface specification.","In one embodiment, an application program interface () to the user interface rendering engine is provided. Using the application program interface (), a custom module and\/or external application can be used to customize the behavior of the user interface. The application program interface () shields the details of document object model () from the developers of custom modules\/programs so that the developers can focus on the user interface, instead of the web document.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 3"},"In , a web server () communicates with web browsers to send the web documents that represent the user interfaces for the configuration database (). An image cache () is used to allow fast access to graphics, icons, etc. A template cache () is used to provide a placeholder document () which is typically an HTML document. The placeholder document () allows the user interface conduit () to be loaded into an invisible frame of the web document served. The user interface conduit () may include user interface rendering engine and information specific for the definition of particular user interfaces. The placeholder document () allows various user interface elements to be inserted into various locations.","In one embodiment, a user interface service () includes increment update logic () and user interface information and control cache (). The user interface information and control cache () contains information about the user interface as presented at the web browser. The increment update logic () determines increment changes to document data based on the collected user input data, the user interface information and control cache (), and the configuration database ().",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 4","b":["401","403","405"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 5","b":["411","413","415"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 6","b":["421","423","425","427"]},"When operation  determined that events can be dispatched for server processing (e.g., when the communication channel is available, a response for a previous request is received, etc.), operation  sends events from the event queue to a server for processing for the web document. Operation  receives responses from the server. Operation  optionally modifies the web document according to the responses (e.g., through an implementation of a Document Object Model (DOM)). For example, if the response from the server indicates a change in the data to be collected or presented by the user interface, the web document is modified to change the user interface accordingly.","If temporarily an event cannot be dispatched to the server for processing, operation  performs other tasks; and further user input events can be accepted for client side processing (e.g., operations -). For example, an event may not be dispatched temporarily to the server because the communication manager is expecting a response for a previous event from the server or the network connection is temporarily unavailable.","While the communication manage is dispatching a previous event and expecting a response from the server, operations - can be performed for subsequent events so that the user interface appears to be responsive to the user inputs.","For example, the user may fill out a first data entry and move to other data entries. When the communication manager sends the data value collected for the first data entry for validation, for implicit commitment into a database or a server side cache, and for the determination of any increment changes to the data for the user interface, the user is free to move into other data entries and provide data values or selections. Thus, the user is allowed to enter data in a way asynchronous with the server side processing of the collected data.","If the data value for the first data entry causes changes to data for the user interface, the server then sends the increment changes to the communication manager, which causes the user interface rendering engine and the user interface update logic to change the user interface. The user interface can be changed through modifying the web document using DOM.","For example, when the data value for the first data entry opens a further option for the configuration of the product, the server indicates to the communication manage that an additional data item is to be collected. Thus, the user interface rendering engine and the user interface update logic inserts an additional data entry field to collect data value for the additional data item. Further, a customization module can use the user interface level API to the user interface rendering engine to customize the appearance of the additional data entry field.","If, according to the data value for the first data entry, the server sends a message indicating that a second option is no long available, the user interface rendering engine and the user interface update logic remove the data entry field for the second option.","A system according to embodiments of the present invention can significantly improve the performance of the user interface in response time and scalability. A quick response time results from the reduced time in generating the update information at the server, transmitting the information over the network, and updating the web document without re-rendering the entire web document in the web browser. Since the server sends the increment data update, instead of the entire update web page, a given capacity of the server and the network can accommodate more users.","For example, consider a configuration form that has 10 option items which require server side processing. Loading the configuration form may take 60 seconds; and finally submitting the completed form and receiving a confirmation page may take 35 seconds. In a traditional approach where the entire refreshing web page is sent for each data entry, each data entry operation can take 30 seconds. Thus, completing the configuration form can take 395 seconds in total.","When the change in the user interface is driven by the increment data change, the time to transmit the server response can be significantly reduced. For example, the time for each data entry operation may be reduced to only 1 second, while the time for loading the configuration form and submitting the complete from may be about the same as the traditional approach. Thus, completing the configuration form using a user interface framework according to one embodiment of the present invention may take only 105 seconds.","Thus, the efficiency of an operator employed to filling out the configuration form can be significantly increased. Certain businesses have full time operators employed to fill out configuration forms using web browsers, the improved efficiency can reduce cost and improve productivity significantly.","In one embodiment of the present invention, a user interface level API for external applications and modules increases configurability of the user interface system. External business logic\/service call can be implemented. In one embodiment, the user interface framework at the client side is implemented using JavaScript; and JavaScript programs can be used to configure the user interface that is presented as a web document, allowing more control on user interface rendering. The user interface level API further allows configurable event handling.","Minimal screen refresh increases usability. Since the web document is not refreshed, the user does not lose focus area; and keyboard capabilities are enhanced. Since the events for server processing is queue, there is no perceived wait for user. Requests for server processing are submitted implicitly. Thus, the user interface allows fast data entry.","Since the workload for the server is reduced, the number of application server computers can be reduced. Since the network traffic is reduced, less network bandwidth is required. In one embodiment, standard web technologies, such as DOM and JavaScript are used for the implementation of client side framework, typically JavaScript programmers can customize it, allowing easy customizability and easy troubleshooting.","Many of the methods of the present invention may be performed with a digital processing system, such as a conventional, general-purpose computer system. Special purpose computers, which are designed or programmed to perform only one function, may also be used.",{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIG. 7","FIG. 7","FIG. 7"]},"As shown in , the computer system , which is a form of a data processing system, includes a bus  which is coupled to a microprocessor  and a ROM  and volatile RAM  and a non-volatile memory .","The microprocessor  is coupled to cache memory  as shown in the example of . The bus  interconnects these various components together and also interconnects these components , , , and  to a display controller and display device  and to peripheral devices such as input\/output (I\/O) devices which may be mice, keyboards, modems, network interfaces, printers, scanners, video cameras and other devices which are well known in the art.","Typically, the input\/output devices  are coupled to the system through input\/output controllers .","The volatile RAM  is typically implemented as dynamic RAM (DRAM) which requires power continually in order to refresh or maintain the data in the memory. The non-volatile memory  is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other type of memory systems which maintain data even after power is removed from the system. Typically, the non-volatile memory will also be a random access memory although this is not required.","While  shows that the non-volatile memory is a local device coupled directly to the rest of the components in the data processing system, it will be appreciated that the present invention may utilize a non-volatile memory which is remote from the system, such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface.","The bus  may include one or more buses connected to each other through various bridges, controllers and\/or adapters as is well known in the art. In one embodiment the I\/O controller  includes a USB (Universal Serial Bus) adapter for controlling USB peripherals, and\/or an IEEE-1394 bus adapter for controlling IEEE-1394 peripherals.","It will be apparent from this description that aspects of the present invention may be embodied, at least in part, in software. That is, the techniques may be carried out in a computer system or other data processing system in response to its processor, such as a microprocessor, executing sequences of instructions contained in a memory, such as ROM , volatile RAM , non-volatile memory , cache  or a remote storage device.","In various embodiments, hardwired circuitry may be used in combination with software instructions to implement the present invention. Thus, the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system.","In addition, throughout this description, various functions and operations are described as being performed by or caused by software code to simplify description. However, those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor, such as the microprocessor .","A machine readable medium can be used to store software and data which when executed by a data processing system causes the system to perform various methods of the present invention. This executable software and data may be stored in various places including for example ROM , volatile RAM , non-volatile memory  and\/or cache  as shown in . Portions of this software and\/or data may be stored in any one of these storage devices.","Thus, a machine readable medium includes any mechanism that provides (i.e., stores and\/or transmits) information in a form accessible by a machine (e.g., a computer, network device, personal digital assistant, manufacturing tool, any device with a set of one or more processors, etc.). For example, a machine readable medium includes recordable\/non-recordable media (e.g., read only memory (ROM); random access memory (RAM); magnetic disk storage media; optical storage media; flash memory devices; etc.), as well as electrical, optical, acoustical or other forms of propagated signals (e.g., carrier waves, infrared signals, digital signals, etc.); etc.","In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are, accordingly, to be regarded in an illustrative sense rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example and not limitation in the figures of the accompanying drawings in which like references indicate similar elements.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
