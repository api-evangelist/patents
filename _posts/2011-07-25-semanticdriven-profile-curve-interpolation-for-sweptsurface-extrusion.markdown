---
title: Semantic-driven profile curve interpolation for swept-surface extrusion
abstract: A method, apparatus, system, and computer readable storage medium provide the ability to transition between two different profile curves in a swept surface extrusion. Each curve has section sequences that include consecutive sections, which in turn include constant attributes, which in turn include graphic attributes and semantic attributes. The section sequences define a semantic pattern for each profile curve. A globally optimal match is computed between the sections of the different curves. Adapted curves are generated that are structurally identical but geometrically resemble their respective original curves. An actual profile curve is computed for a given position on an extrusion line using a one-to-one vertex position morphing based on the adapted curves. The swept surface extrusion is performed and the result is displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08872831&OS=08872831&RS=08872831
owner: Autodesk, Inc.
number: 08872831
owner_city: San Rafael
owner_country: US
publication_date: 20110725
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","CONCLUSION"],"p":["1. Field of the Invention","The present invention relates generally to creating three-dimensional (3D) geometry from two-dimensional (2D) line data, and in particular, to a method, apparatus, and article of manufacture for transitioning between two different profile curves during a swept surface extrusion operation used to create 3D geometry.","2. Description of the Related Art","Swept surface extrusion is a well-known operation for generating 3D objects from line data. It uses a, usually 2D, profile curve that is conceptually moved along lines to form 3D geometry. The profile curve is oriented orthogonally relative to the respective line. In many situations, the profile curve may vary during the extrusion. For example, the curve may transition from one profile curve (having a first number of points) to another profile curve (having a second number of points) during the sweep operation. Prior art methods fail to automatically and efficiently transition between two profile curves that have different numbers of points. Instead, prior art methods transition using linear interpolation and\/or require a manual configuration and interpolation configuration. Such problems may be better understood with a description of prior art 3D creation and profile extrusion transitions.","There is abundant prior art in the field of swept surface extrusion. This includes surfaces of revolution as well as extrusions along (not necessarily straight) lines. In the context of the present invention, the focus is on extrusions along lines with the goal of computing triangles (for a 3D mesh) and the attributes of the resulting surface.","An exemplary use case in the context of the present invention is that of the generation of road geometry from a road network. The geometry is derived using an attributed profile curve with attributes, such as normal, texture, and purpose. The attributes are assigned to sections of the profile curve and can be used, e.g., for controlling the visual appearance of the resulting road. When the style changes within a road or at road connections, a suitable transition needs to be generated. For example, driving lanes in both styles need to be seamlessly connected in order to enable travelling cars.  illustrates an example transition between two road styles. Each road style  and  is represented by an attributed profile curve. Methods must be able to identify and connect matching profile curve sections (such as roadway, bikeway, and sidewalk). In the example of , the curb  between bikeway  and roadway  (in the undivided road ) fades out while a new curb  between bikeway  and green-space  fades in (in the divided road ).","The prior art fails to provide the ability to create a smooth transition from the undivided road  to the divided road  in an automated fashion. Such a transition is also known in the prior art as morphing. Morphing is a common technique for transitioning between two different profile curves in swept surface extrusion. Morphing interpolates vertex coordinates of one profile curve along the transition such that it becomes identical to the other profile curve. For road styles, this approach cannot guarantee a suitable transition that enables a seamless transition.","In the context of 3D geometry, morphing transforms geometric representations. Typically, morphing denotes the smooth transformation of one 3D object's geometry into another 3D object's geometry. A frequent usage is the blending of key frame geometry for animation. There exists a large number of morphing techniques, optimized for various use cases and focusing on certain properties of the objects. For example, morphing can preserve volume, minimize curvature or texture distortion, consider appearance information, or prevent self-intersections. Also, changes in topology can be handled differently. With respect to geo-data in street networks, the focus is on one-to-one vertex position morphing. Such an approach requires both objects to contain the same number of vertices in the same topology. Then, the morphed object can be formed by using the common topology and interpolating the positions of corresponding vertices in both objects. Correspondence can be simply defined by an identical vertex number. The interpolation can employ any desired function, typically linear or smoothstep interpolation.","Some prior art techniques may apply a profile curve morphing within a transition zone. However, the prior art employs a simple priority-based profile curve matching and thus fails to find an optimal section matching. Alternative prior art techniques provide corridors as a means for generating roads. Such corridors are generated from an alignment (2D centerline), a profile (elevation of the centerline), and an assembly (profile curve). An assembly consists of subassemblies representing different road sections such as roadway, curb, or sidewalk. While the prior art may provide large freedom for assemblies along an alignment, there is no matching of similar sections\/categories (e.g., roadway, curb, sidewalk, etc.). Instead, the prior art relies on the user to fine tune transitions using respective subassemblies. In yet another prior art system, objects extrude arbitrary cross sections along a path using generic morphing between cross sections. However, cross sections need to have identical vertex count for morphing\u2014a matching of some sort is not applied. Similar extrusion objects or swept surface objects may be available in various 3D content creation tools.","While morphing contains some building blocks for enabling a smooth transition (e.g., adjusting matching sections, or inserting collapsed sections), using a string edit distance for matching may improve results. String edit distances can be used to compare two strings, typically genome or protein sequences, through the use of string manipulations (e.g., character insertion, deletion, or substitution). Two strings are considered more similar the fewer manipulations it takes to convert one into the other. A well-known string edit distance is the Levenshtein distance, which weights all manipulations equally. Other string edit distances differ in the allowed manipulations and weighting schemes.","Consequently, as described above, the prior art fails to provide an efficient and simple mechanism for morphing\/transitioning between two profile curves on a road\/street network. Thus, what is needed is the ability to enable sound, automatic, and smooth transitions between arbitrary attributed profile curves. Such a capability that is well suited for processing large road networks with only small user interaction is also desirable.","Embodiments of the invention enable the automatic creation of a transition between differing profile curves based on semantic attributes through the use of an optimization technique and improves on other profile curve morphing techniques.","In particular, embodiments of the invention can be used for road geometry generation from line data. In such a scenario, there is a catalogue of road styles, each being an attributed profile curve. For each line, a style is selected and 3D geometry is generated using swept-surface extrusion. Connections between changing styles need to result in smooth and sound transitions, which may require seamlessly connected surfaces for the various road users (e.g., cars, bikes, or pedestrians). Moreover, there is an importance related to such connections, e.g., a seamless surface for cars is more important than for pedestrians. Such an importance is used to resolve conflicts.","Examples for road style changes are:","1) a road changing into a bridge,","2) a road changing into a tunnel,","3) a road changing the number of driving lanes, or","4) a divided road changing into a regular road at a city entrance.","Embodiments of the invention can also be used to handle style transitions between adjacent roads at intersections.","To provide for such transitions, embodiments of the invention first compute a globally optimal match between profile curve sections based on their attributes. Then, missing sections are inserted into either profile curve. The insertion collapses a section to a single point such that the newly created profile curves match the original profile curves in terms of geometry. Finally, morphing is applied within each section. As the result, matching sections seamlessly transition into each other while mismatching sections emerge from or collapse into a single point.","In the following description, reference is made to the accompanying drawings which form a part hereof, and which is shown, by way of illustration, several embodiments of the present invention. It is understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","Overview","Embodiments of the invention concentrate on the connection between differing profile curves during swept-surface extrusion. As used herein, roads are used as an example use case for description purposes. Other non-road based implementations are intended to be within the scope of the invention. Roads are represented by a center line and a profile curve. The 3D representation is created by sweeping the profile curve along the center line, thus creating 3D geometry. Embodiments assume that attributed profile curves and such curves are separated into sections of identical attributes, such as surface normal, color, texture, type, or purpose. These attributes can be used to guide visualization (e.g., texture) or traffic simulations (e.g., type). In embodiments of the invention, the attributes are used to determine matching sections that need to be seamlessly connected.","The connection between two roads of differing styles or a style change within a road is mapped to a one-dimensional interpolation problem. Thus, the connection requires some transition zone, in which the start profile curve (P) transitions smoothly into the end profile curve (P). This transition zone is defined in terms of length along the centerline with a parameter t running from 0.0 at the start to 1.0 at the end of the transition zone. T is used for interpolating between the start and end profile curves (P and P) within the transition zone, such that the sweep operation uses a location-dependent profile curve.","Embodiments of the invention generate a parameterized profile curve, that is then applied during the swept-surface extrusion within the transition zone. The parameterization uses a simple one-to-one vertex morphing approach between two suitably adapted profile curves P\u2032 and P\u2032. The original profile curves P and P are, in general, not suited for such a morphing as they differ in their sections and vertex count.","Based on the above, the profile curves P and P are prepared for the morphing. The goal is identifying matching sections in P and P, and then inserting non-matching sections of P into P and vice versa. In other words, the missing sections from P are inserted into P and vice versa. Consequently, in the end, the adapted profile curves P\u2032 and P\u2032 consist of the same arrangement of sections and the same number of vertices (while retaining identical appearance with P and P). Such a creation of adapted profile curves P\u2032 and P\u2032 requires finding the optimal match between sections from P and P according to the aforementioned attributes. Semantic information about the sections' purpose (such as roadway, bikeway, sidewalk, etc.) is of particular interest, where each attribute value has an associated importance. The optimal match is determined using an adapted string edit distance function (e.g., Needleman & Wunsch function\u2014see en.wikipedia.org\/wiki\/Needleman-Wunsch_algorithm or the Smith-Waterman function\u2014see en.wikipedia.org\/wiki\/Smith-Waterman_algorithm, both of which are incorporated by reference herein). In such an adapted function, a distance is employed that allows only insertions and deletions and weights matches according to their attributes while it penalizes consecutive sequences of insertions (or deletions) with the square of their length. The computation of such distances requires exhaustive search of all possible manipulations. It can be efficiently implemented using dynamic programming. However, embodiments may not use the actual edit distance, but derive the corresponding sequence of manipulations needed to transform one input string into the other. Conceptually, from the sequence of manipulations, a new string is built that contains both input strings in a (suitably defined) optimal way.","Using the optimal match, P and P are split into sequences of matching and mismatching sections. Accordingly, the result of this matching is an ordered list of matching section pairs along with subsequent, ordered mismatches from P and P. For creating P\u2032, all mismatching sections from P are collapsed into a single point and inserted into P at the appropriate locations. P\u2032 is generated similarly. In other words, to create P\u2032, the result list is iterated. For each entry, first the matching section from P is copied to P\u2032 and adjusted to have the same number of vertices as the matching section from P. Second, the mismatches are added one by one. Either the next mismatch from P or from P is chosen based on their importance. A mismatch from P is simply copied to P\u2032. A mismatch from P is first collapsed into the current endpoint of P\u2032 and then added to P\u2032. This collapsing only manipulates the vertex positions of the profile curve section and no other attributes. The resulting P\u2032 is a profile curve that contains all sections from P plus mismatched sections from P, which are collapsed into a single point. Thus, P\u2032 and P have identical appearance. P\u2032 is constructed from the result list accordingly. In the end, P\u2032 and P\u2032 contain the same arrangement of sections and the same number of vertices, prepared for morphing.","Hardware Environment",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 2","b":["200","202","202","202","204","204","204","206","202","214","216","228","202","232"]},"In one embodiment, the computer  operates by the general purpose processor A performing instructions defined by the computer program  under control of an operating system . The computer program  and\/or the operating system  may be stored in the memory  and may interface with the user and\/or other devices to accept input and commands and, based on such input and commands and the instructions defined by the computer program  and operating system  to provide output and results.","Output\/results may be presented on the display  or provided to another device for presentation or further processing or action. In one embodiment, the display  comprises a liquid crystal display (LCD) having a plurality of separately addressable liquid crystals. Alternatively, the display  may comprise a light emitting diode (LED) display having clusters of red, green and blue diodes driven together to form full-color pixels. Each liquid crystal or pixel of the display  changes to an opaque or translucent state to form a part of the image on the display in response to the data or information generated by the processor  from the application of the instructions of the computer program  and\/or operating system  to the input and commands. The image may be provided through a graphical user interface (GUI) module A. Although the GUI module A is depicted as a separate module, the instructions performing the GUI functions can be resident or distributed in the operating system , the computer program , or implemented with special purpose memory and processors. In one or more embodiments, the display  is integrated with\/into the computer  and comprises a multi-touch device having a touch sensing surface (e.g., track pod or touch screen) with the ability to recognize the presence of two or more points of contact with the surface. Examples of a multi-touch devices include mobile devices (e.g., iPhone\u2122, Nexus S\u2122, Droid\u2122 devices, etc.), tablet computers (e.g., iPad\u2122, HP Touchpad\u2122), portable\/handheld game\/music\/video player\/console devices (e.g., iPod Touch\u2122, MP3 players, Nintendo 3DS\u2122, PlayStation Portable\u2122, etc.), touch tables, and walls (e.g., where an image is projected through acrylic and\/or glass, and the image is then backlit with LEDs).","Some or all of the operations performed by the computer  according to the computer program  instructions may be implemented in a special purpose processor B. In this embodiment, the some or all of the computer program  instructions may be implemented via firmware instructions stored in a read only memory (ROM), a programmable read only memory (PROM) or flash memory within the special purpose processor B or in memory . The special purpose processor B may also be hardwired through circuit design to perform some or all of the operations to implement the present invention. Further, the special purpose processor B may be a hybrid processor, which includes dedicated circuitry for performing a subset of functions, and other circuits for performing more general functions such as responding to computer program instructions. In one embodiment, the special purpose processor is an application specific integrated circuit (ASIC).","The computer  may also implement a compiler  which allows an application program  written in a programming language such as COBOL, Pascal, C++, FORTRAN, or other language to be translated into processor  readable code. After completion, the application or computer program  accesses and manipulates data accepted from I\/O devices and stored in the memory  of the computer  using the relationships and logic that was generated using the compiler .","The computer  also optionally comprises an external communication device such as a modem, satellite link, Ethernet card, or other device for accepting input from and providing output to other computers .","In one embodiment, instructions implementing the operating system , the computer program , and the compiler  are tangibly embodied in a computer-readable medium, e.g., data storage device , which could include one or more fixed or removable data storage devices, such as a zip drive, floppy disc drive , hard drive, CD-ROM drive, tape drive, etc. Further, the operating system  and the computer program  are comprised of computer program instructions which, when accessed, read and executed by the computer , causes the computer  to perform the steps necessary to implement and\/or use the present invention or to load the program of instructions into a memory, thus creating a special purpose data structure causing the computer to operate as a specially programmed computer executing the method steps described herein. Computer program  and\/or operating instructions may also be tangibly embodied in memory  and\/or data communications devices , thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with the computer .",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["300","302","202","306","302","202","306"]},"A network  such as the Internet connects clients  to server computers . Network  may utilize ethernet, coaxial cable, wireless communications, radio frequency (RF), etc. to connect and provide the communication between clients  and servers . Clients  may execute a client application or web browser and communicate with server computers  executing web servers . Such a web browser is typically a program such as MICROSOFT INTERNET EXPLORER\u2122, MOZILLA FIREFOX\u2122, OPERA\u2122, APPLE SAFARI\u2122, etc. Further, the software executing on clients  may be downloaded from server computer  to client computers  and installed as a plug in or ACTIVEX\u2122 control of a web browser. Accordingly, clients  may utilize ACTIVEX\u2122 components\/component object model (COM) or distributed COM (DCOM) components to provide a user interface on a display of client . The web server  is typically a program such as MICROSOFT'S INTERNET INFORMATION SERVER\u2122.","Web server  may host an Active Server Page (ASP) or Internet Server Application Programming Interface (ISAPI) application , which may be executing scripts. The scripts invoke objects that execute business logic (referred to as business objects). The business objects then manipulate data in database  through a database management system (DBMS) . Alternatively, database  may be part of or connected directly to client  instead of communicating\/obtaining the information from database  across network . When a developer encapsulates the business functionality into objects, the system may be referred to as a component object model (COM) system. Accordingly, the scripts executing on web server  (and\/or application ) invoke COM objects that implement the business logic. Further, server  may utilize MICROSOFT'S\u2122 Transaction Server (MTS) to access required data stored in database  via an interface such as ADO (Active Data Objects), OLE DB (Object Linking and Embedding DataBase), or ODBC (Open DataBase Connectivity).","Generally, these components - all comprise logic and\/or data that is embodied in\/or retrievable from device, medium, signal, or carrier, e.g., a data storage device, a data communications device, a remote computer or device coupled to the computer via a network or via another data communications device, etc. Moreover, this logic and\/or data, when read, executed, and\/or interpreted, results in the steps necessary to implement and\/or use the present invention being performed.","Although the term \u201cuser computer\u201d, \u201cclient computer\u201d, and\/or \u201cserver computer\u201d is referred to herein, it is understood that such computers  and  may include thin client devices with limited or full processing capabilities, portable devices such as cell phones, notebook computers, pocket computers, and\/or any other device with suitable processing, communication, and input\/output capability.","Of course, those skilled in the art will recognize that any combination of the above components, or any number of different components, peripherals, and other devices, may be used with computers  and .","Software Embodiment Overview","Embodiments of the invention are implemented as a software application on a client  or server computer . Further, as described above, the client  or server computer  may comprise a thin client device or a portable device that has a multi-touch-based display.","The generation of the geometry has three components:\n\n","The result of the morphing can be seen in  which illustrates a wireframe view of . Matching sections (roadway, bikeway, sidewalk) are connected seamlessly while mismatching sections (curbs, greenspaces) emerge from a single point.","The three steps are described in more detail in the following sections.","Profile Curve Matching","The profile curves consist of sections with constant attributes. Such attributes include graphics attributes, such as normals or texture, and semantic attributes, such as purpose or type.  illustrates an attributed profile curve (style) for the undivided road  in . Each circle  marks a profile curve vertex. As illustrated, every two vertices form a section. The labels denote the same semantic attribute for each section (there are two sidewalk sections, two bikeway sections, four curb sections [two vertical and two horizontal], a left roadway, and a right roadway).","The main matching step considers semantic information only. For matching semantic information, consecutive sections with constant semantic attributes (but possibly varying other attributes) are treated as a single section sequence. For the road example, semantic attributes can be purpose (roadway, emergency lane, bikeway, sidewalk, curb, greenspace) and\/or road side (left, median, right).","The section sequences build up a semantic pattern for each profile curve.  illustrates the semantic patterns for the situation in . These patterns are used as input to the string edit distance function.","Embodiments of the invention may use a variation of the Needleman & Wunsch function, that uses a weighting function for matches and string manipulations. Embodiments of the invention then search for the manipulation sequence that maximizes the total weight. The length of runs of consecutive identical manipulations (or identical matches) are tracked in order to allow for run-length-dependent weights.","For the road example illustrated in the , and -, the following weighting scheme may be utilized:\n\n",{"@attributes":{"id":"p-0058","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}},{"entry":[{},"Emergency",{},"Side-",{},{},{}]},{"entry":["Roadway","lane","Bikeway","walk","Curb","Greenspace","Other"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["10000","9000","8000","7000","6000","5000","1000"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}}},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["Insertion into the longer pattern: weight 0","Insertion into the shorter pattern: weight=\u2212run length","Substitutions are not allowed (infinite negative weight)"]}}}},"The edit distance is computed using a standard dynamic programming approach. For patterns S of length m and S of length n, it creates a table of size (m+1)*(n+1). Cell (0,0) is initialized with weight 0. Thus, continuing with the example of , and -, Table A may be used:",{"@attributes":{"id":"p-0060","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"16"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"11","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"12","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"13","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"14","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"15","colwidth":"21pt","align":"center"}}],"thead":{"row":[{"entry":[{},"TABLE A"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"15","align":"center","rowsep":"1"}}]},{"entry":[{},"G","S","G","C","B","R","C","G","C","R","B","C","G","S","G"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"15","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"231pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"0",{}]},{"entry":"S"},{"entry":"B"},{"entry":"C"},{"entry":"R"},{"entry":"R"},{"entry":"C"},{"entry":"B"},{"entry":"S"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}}},"Each cell stores a weight, a pointer to the predecessor, and a run length. After filling the table, each cell (i, j) will contain the edit distance between the shortened patterns S (length i) and S (length j). The pointer in each cell allows for backtracking the exact manipulations necessary for reaching this edit distance. The weight in each cell (i, j) is the maximum of three candidate weights:\n\n","The predecessor of cell (i, j) is determined by the case that created the maximum. Ties are broken using the listed order.","Based on the above,  illustrates the filled in table with the edit distances. After the Table of  has been completed\/filled, the sequence of manipulations is determined via backtracking from cell (m, n) to cell (0, 0) using the stored predecessor information and converted into partitions of S and S, such that each match starts a new partition. The table of  illustrates the backtracking for the example in .","Both partitions are stored together in a partition list with each entry containing the matching element of S and S together with the subsequent non-matching elements. If S or S start with non-matching elements, the first entry in the partition list contains not-in-list (NIL) markers as matching elements. Table B is an exemplary partition list resulting from matching the patterns in  and the backtracking from the table above:",{"@attributes":{"id":"p-0065","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"8"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"8","colwidth":"21pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE B"},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Match (S1 and S2):","NIL","S","B","R","R","B","S"]},{"entry":["Mismatches (S1):",{},{},"C",{},"C"]},{"entry":["Mismatches (S2):","G","GC",{},"CGC",{},"CG","G"]},{"entry":{"@attributes":{"namest":"1","nameend":"8","align":"center","rowsep":"1"}}}]}}}},"br":{}},"From the partition list, new profile curves P\u2032 and P\u2032 are built. Both profile curves are to contain the same sections, but match their originating profile curve's geometry. This is achieved by concatenating all sections from elements from the partition list for one profile curve and inserting the mismatches from the other profile curve appropriately. The build-up has three major components:\n\n","Aligning Sections within Pattern Matches","Pattern elements consist of a sequence of profile curve sections. Two matching pattern elements with a differing number of sections require another matching before building the resulting profile curves. For that purpose, the same string edit distance function described above may be employed but with a different pattern creation and weighting scheme. Now, each section becomes a pattern entry. The weighting ignores semantic attributes (as all sections share the same semantic attribute values), but incorporates other attributes, such as texture, normal, and width for determining a match weight (insertion and mismatch weighting does not change). For the road example, the following match weight table may be used:",{"@attributes":{"id":"p-0069","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Texture","Normal","Width"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["+200","+100 (in the present example, each","+50\/(2 * abs(width1 \u2212"]},{"entry":[{},"section may have a constant","width2) + 1)"]},{"entry":[{},"normal)"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The weights are added in case of multiple matching attributes. Using this weighting scheme, a partition list is computed. The partition list controls how profile curve sections are appended to the resulting profile curves. For a partition list entry, first the matching sections, if valid, are adjusted (as described in \u201cAdjusting Matching Sections\u201d below) and appended to P\u2032 and P\u2032 respectively. Then, the mismatching P sections are appended to P\u2032 and after collapsing them appended to P\u2032 (as described in \u201cAdding Mismatches\u201d below). Finally, the mismatching P sections are appended to P\u2032 and after collapsing them, appended to P\u2032. These steps are applied for each partition list entry.","The extra alignment step could be merged into the main profile curve matching. However, weights would have to be chosen such that a sequence of multiple low-weight matches cannot outweigh a single high-weight match. In the road example, multiple curb sections must not weight higher than a single roadway match. Otherwise, the curbs would be connected rather than the roadway. Ensuring this property requires sufficient weight differences, which easily exceeds 32 bit integer range and thus becomes impractical. Additionally, separating matching and alignment improves efficiency as the tables used during dynamic programming become significantly smaller.","Adjusting Matching Sections","The goal of this adjustment is to equalize the vertex count of two profile curve sections C and C. For this, new vertices are added to both sections such that the vertex distribution relative to the curve length is similar. The implementation first parameterizes the vertices of the sections relative to the curve length, leading to a function p(v) and p(v). Then, new vertices are added to C such that for each vertex vin C exists a vertex vin C with p(v)=p(v). Vertex attributes are interpolated linearly between neighboring vertices, if applicable. Similarly, new vertices are added to C.","Adding Mismatches","Mismatching sections need to collapse to a single point at the opposite profile curve. Thus, a mismatching section C from P is appended to P\u2032 unchanged, but needs to be collapsed into a single point before appending it to P\u2032. For the collapsing, the rightmost point of P\u2032 is determined and all vertex locations of C to this point are updated. Other attributes remain unchanged. The result forms a new section C\u2032, that is appended to P\u2032. Mismatching sections from P are handled similarly.","Profile Curve Morphing","The adapted profile curves P\u2032 and P\u2032 can be used directly for morphing. Due to the construction, each vertex in P\u2032 has a corresponding vertex in P\u2032. The swept surface extrusion applies the profile curve to selected positions on the extrusion line. Within the transition zone, an interpolation parameter t is computed from the relative position according to the curve length. This parameter can be additionally transformed by a function f: [0,1]\u2192[0,1], such as the smooth-step function, which smoothes the beginning and end of the transition. The value f(t) is used for linear interpolation of all suitable attributes of the corresponding vertices, such as position, normal, and color. It can also be used as a blending factor between differing textures. For attributes that cannot be interpolated, such as semantic attributes, a threshold (e.g., 0.5) can be defined for when to switch between the values.","The interpolated profile curve is used for the extrusion. Usually, this includes orienting the profile curve according to the extrusion line tangent space. Then, the profile curve vertex locations and normals are transformed into world space and finally the new vertices are connected to vertices from the previous extrusion location to form triangles. The resulting mesh can be optimized in terms of triangle count (e.g., by using the Douglas-Peucker function\u2014see en.wikipedia.org\/wiki\/Ramer-Douglas-Peucker_algorithm which is incorporated by reference herein).",{"@attributes":{"id":"p-0078","num":"0090"},"figref":["FIGS. 7 and 8","FIG. 7","FIG. 8"]},"Logical Flow",{"@attributes":{"id":"p-0079","num":"0091"},"figref":"FIG. 9"},"At step , the first profile curve and second profile curve are obtained. The two profile curves are different from each other. Further, each profile curve contains one or more section sequences that have one or more consecutive sections. Each consecutive section has two or more constant attributes (that include graphic attributes and semantic attributes). In addition, each section sequence defines a semantic pattern for each profile curve.","At step , a globally optimal match between the consecutive sections of the two profile curves is computed (based on the semantic pattern). The globally optimal match may be computed based on a string edit distance function. Such a match is computed by utilizing a weighting function (for matches and string manipulations) and searching for a manipulation sequence that maximizes a total weight. The length of runs of consecutive identical manipulations or identical matches may be tracked to allow for run-length-dependent weights. Further, the weighting function may use a look-up table to define weights for each semantic attribute, a weight of zero for insertion into a longer pattern, a weight of \u2212run length for insertion into a shorter pattern, and substitutions may not be allowed (e.g., infinite negative weight). The output of the match may be a partition list with each entry containing a matching element of the first profile curve and the second profile curve together with subsequent non-matching elements.","At step , an adapted first profile curve and an adapted second profile curve are generated. Each adapted curve is structurally identical but geometrically resembles the profile curves on which they are based (i.e., the first and second profile curves). The adapted profile curves may be generated by aligning sections with pattern matches, adjusting a vertex count in each section to allow for one-to-one vertex morphing, adding a first mismatching section from the first profile curve to the adapted first profile curve, and collapsing the first mismatching section in the adapted first profile curve to a single first point of the second adapted profile curve.","At step , an actual profile curve for a given position is computed on an extrusion line using a one-to-one vertex position morphing based on the adapted profile curves. The transition between the two adapted profile curves may be generated based on an interpolation parameter t that is computed from a relative position on the extrusion line according to a curve length. The parameter t is transformed by a smoothing function that smoothes a beginning and an end of the transition zone. For the constant attributes that can be interpolated (e.g., position, normal, and color), the smoothing function linearly interpolates the constant attributes in the transition zone. For the constant attributes that cannot be interpolated (e.g., semantic attributes), the smoothing function utilizes a threshold value for when to switch between values of the constant attributes.","At step , the swept surface extrusion is performed on the extrusion line based on the actual profile curve.","At step , the drawing containing the swept surface extrusion is displayed on a display device. Alternatively, the mesh that is produced from the swept surface extrusion is saved to disk, transmitted to a recipient, further edited, etc.","In summary, line data from a street network may be used to create 3D geometry to display a 3D environment to a user. Such 3D geometry is created from line data during an extrusion operation when sweeping a profile along the extrusion line to produce the 3D geometry\/road. However, with differing profiles\/profile curves, there is a need to create a smooth transition and to interpolate data in the transition zone between the two styles. In a first step of embodiments of the invention, only the profiles themselves are considered (i.e., not the geometry but the profile and semantic categories\/sections are used). The goal is to come up with a common profile that is shared between the two profile curves. In other words, a full complete pattern that represents both profile curves needs to be generated (e.g., a profile curve with all the semantic attributes but may have a zero-width for one section).","To create the complete profile, the first step involves determining what is similar in both patterns (e.g., computing the match step ). Various methods may be used to determine a matching curve including string edit distance functions. Different weights may be applied in such a system to ensure that sections cannot be substituted and can only be inserted. Once the match\/alignment from the two curves has been determined, new adapted curves are generated that geometrically resemble their respective originals. For example, each adapted profile curve has the missing sections from the other curve but such missing sections are collapsed into a single point (e.g., zero-width). Thereafter, the adapted curves can be used to morph from one adapted curve to the other based on the attributes that change between the curves (e.g., position, normal, color, etc.).","This concludes the description of the preferred embodiment of the invention. The following describes some alternative embodiments for accomplishing the present invention. For example, any type of computer, such as a mainframe, minicomputer, or personal computer, or computer configuration, such as a timesharing mainframe, local area network, or standalone personal computer, could be used with the present invention.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 11","FIG. 6"]}]},"DETDESC":[{},{}]}
