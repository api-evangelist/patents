---
title: Device, method, and system for generating per-pixel light values using texture parameters
abstract: A method for applying texture mapping in per-pixel operations includes receiving a plurality of parameters. The parameters define a pixel value at a pixel in a graphics primitive. From among these parameters, a set of parameters is selected to be associated with textures. The parameters that are not selected define a set of unselected parameters that have constant values over the primitive. A texture value is then determined for each of the selected parameters by accessing a set of textures, with the texture value for the selected parameters varying over the primitive. The pixel value at the pixel is then evaluated using the constant unselected parameters and the texture values for the selected parameters. A device and system for applying texture mapping in per-pixel operations also are described.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07733349&OS=07733349&RS=07733349
owner: Microsoft Corporation
number: 07733349
owner_city: Redmond
owner_country: US
publication_date: 19990309
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This application is related to U.S. patent application Ser. No. 09\/265,507 filed Mar. 9, 1999 and entitled \u201cMethod and Device for Generating Per-Pixel Light Values,\u201d by inventor David C. Tannenbaum et al., the disclosure of which is incorporated herein by reference. This application is also related to U.S. patent application Ser. No. 09\/265,487 filed Mar. 9, 1999 and entitled \u201cMethod and Device for Associating a Pixel with One of a Plurality of Regions in a Logarithm or Cosine Space,\u201d by inventor David C. Tannenbaum, the disclosure of which is incorporated herein by reference. Both of these related applications are assigned to the assignee of the present application.","The present invention relates to the field of computer graphics and, more particularly, to the application of texture mapping to generate pixel values.","Rendering of realistic images (e.g., two- or three-dimensional images) is one of the main goals of graphics system designers. Rendering images of real or imaginary objects typically involves generating geometric models (e.g., polygons) of objects and applying lighting effects to polygonal surfaces. In computer graphics, surfaces of an object are generally modeled by a polygonal mesh, which is a collection of vertices, edges, and\/or polygons. A mesh of polygons may be produced from a variety of sources such as an application, tesselated NURBS surfaces, spheres, cones, etc. The vertices may be connected by edges and a sequence of edges or vertices may define one or more polygons.","Rendering of realistic 3D graphics requires accurate and efficient modeling of 3D surfaces based upon the position, orientation, and characteristics of the surfaces and the light sources illuminating them. In particular, the interaction between lights and surfaces must be modeled for rendering. To accurately model lighting effects, conventional computer graphics systems have typically implemented a variety of lighting models and shading techniques to generate light values at individual pixels of a graphics primitive such as a polygon. A co-pending U.S. patent application Ser. No. 09\/265,507, entitled \u201cMethod and Device for Generating Per-Pixel Light Values,\u201d by inventor David C. Tannenbaum et al., describes several exemplary lighting models and shading techniques.","Conventional lighting models typically model one or more lighting effects such as ambient light, diffuse reflection, specular reflection, and spotlighting, each of which is well known in the art. The ambient light accounts for a lighting effect resulting from multiple reflections of light from the surfaces present in a scene. On the other hand, the diffuse reflection models reflection of light off a dull, matte surface. In this model, the reflected light from the surface falls off uniformly as a function of an angle between N and L, where N is a normal vector at a surface point and L is a light vector. The diffuse light fall off in the diffuse reflection model is typically modeled by using a dot product term N\u00b7L.","Similarly, the specular reflection accounts for reflection of light off a shiny surface. When light from a light source is reflected off a surface, the reflected light falls off approximately exponentially from the direction of reflection vector R as seen from the direction of view vector V. For example, the fall off may be modeled by cos\u03b1, where s is a surface material's specular reflection coefficient and \u03b1 is an angle between the vectors R and V. In practice, a dot product power term (N\u00b7H)is often used in place of cos\u03b1 to model specular reflection at a surface point, where N is a normal vector and H is a half-angle vector. Both the diffuse and specular reflection models assume that a light source (e.g., L vector) radiates light uniformly in all directions.","In contrast, the spotlight model adds a direction to a positional light source to allow modeling of directional lights. That is, a spotlight is a special type of light source that has a direction as well as a position. For example, a positional light source may function as a spotlight by restricting the shape of the light to a cone. The direction of the spotlight is the direction in which the light points. The spotlight thereby simulates a cone of light, which may have a fall-off in intensity based upon the distance from the center of the cone of light.","The ambient, diffuse, specular, and spotlight models are well known and are described in greater detail in by James D. Foley et al., Addison-Wesley (1996), ISBN 0-201-84840-6, which is incorporated herein by reference and constitutes a portion of the background against which the present invention was developed. Additionally, the OpenGL\u2122 (versions 1.1 and 1.2) application programming interface (API) describes various lighting models such as spotlighting, diffuse light reflection, specular light reflection, and related parameters for implementing such models. The OpenGL\u2122 (versions 1.1 and 1.2) graphics application programming interface is commercially available from Silicon Graphics, Inc., the assignee of the present application, and is incorporated herein by reference.","By way of example, the OpenGL\u2122 graphics application programming interface, version 1.1 evaluates a light value C at a pixel by implementing an exemplary lighting equation as follows:\n\n*spot[+()+()]\u2003\u2003Eq. (1)\n\nThe parameters in Equation (1) are defined as follows:\n","e=emission material color,","a=ambient material color,","a=global ambient light color,","att=attenuation factor,","spot=spotlight effect,","a=ambient light color,","d=diffuse material color,","d=diffuse light color,","s=specular material color,","s=specular light color,","s=specular exponent,","N=outward surface normal vector at the pixel,","L=light-source vector (pointing from pixel to light) at the pixel, and","H=half-angle vector between light-source vector and eye vector at the pixel.","In Equation (1), the attenuation factor att can be further defined as 1\/[k+kd+kd], where d is the distance between a light's position and a pixel, krepresents constant attenuation, kis linear attenuation, and krepresents quadratic attenuation. Those skilled in the art will appreciate that Equation (1) may be evaluated for each light source illuminating a pixel of interest.","In implementing a light equation to evaluate light color values, conventional techniques have typically assigned constant values for many of the parameters in the equations. For instance, conventional techniques typically assign a constant value to material parameters such as the ambient, diffuse, specular, and emission material colors. That is, all pixels within a graphics primitive (e.g., polygon) are assigned the same constant value for a given material parameter. The assignment of constant parameter values is relatively easy and inexpensive to implement in a computer system.","Unfortunately, while the constant modeling technique is simple and inexpensive to implement, it does not produce highly realistic surfaces. The reason for this is that the constant assignment scheme is based on the assumption that the entire surface of the primitive is constant. In reality, however, many surfaces of objects are not constant. Instead, the surface of a graphics primitive often has characteristics that vary over the surface of the primitive.","By way of example, a marble tabletop may not be equally shiny everywhere on its surface. As another example, consider a light shining through dense vegetation such as trees in a forest. In such a case, the conventional constant parameter assignment scheme may not be able to render a substantially realistic image of the light shining through the trees.","To model a surface that varies over the associated primitive, one prior art method has used a non-constant surface description to model the varying diffuse material properties of the surfaces such as the trees and marble tabletop. In this method, a unique color is assigned to each vertex of the polygon and then interpolated to obtain a per-pixel color. However, while the modeling of varying diffuse lights somewhat improves rendering of a varying surface, it does not adequately model other parameters that may vary over the surface. For example, parameters such as the ambient, specular, and emission material color may also vary over the surface. In addition, the parameters in the dot product terms of lighting Equation (1) such as the normal vector N, the specular exponent s, and the like generally vary over a surface in practice.","Thus, what is needed is a method, device, and system that can generate per-pixel color values by modeling parameters that vary over a surface of a graphics primitive.","Broadly speaking, the present invention fills these needs by providing a method, a device, and a system for efficiently generating pixel values using texture parameters. It should be appreciated that the present invention can be implemented in numerous ways, including as a process, an apparatus, a system, a device, a method, or a computer readable medium.","In one aspect of the invention, a method for generating per-pixel values by applying texture mapping in per-pixel operations is provided. In this method, a plurality of parameters is received. The received parameters define a pixel value at a pixel in a graphics primitive. Among these parameters, a set of parameters is selected to be associated with texture values. The parameters that are not selected define a set of unselected parameters that have constant values over the primitive. Next, a texture value is determined for each of the selected parameters by accessing a set of textures, where the texture value for the selected parameters may vary over the primitive. The pixel value at the pixel is then evaluated using the constant unselected parameters and the texture values for the selected parameters. In a preferred embodiment, the plurality of parameters defines a lighting model such that the generated pixel value is a light value at the pixel.","In another aspect of the invention, a device for generating per-pixel values of pixels in a primitive by using texture parameters is provided. The pixel values in the primitive are defined by a plurality of parameters. The device includes a texture memory for storing a set of texture maps. A texture unit receives texture coordinates for accessing a set of texture maps in the texture memory. The set of texture maps is associated with a set of selected parameters selected from among the plurality of parameters that define a pixel value in the primitive. The texture unit generates a texture value associated with the pixel from each of the selected texture maps. The parameters that are not selected from the plurality of parameters define a set of unselected parameters. A rendering unit generates the pixel value in response to the texture values of the selected parameters and to the unselected parameters.","In yet another aspect of the invention, a system for generating per-pixel values for pixels in a primitive is provided. The system includes a processor coupled to a bus, a main memory coupled to the bus, a storage unit coupled to the bus, and a graphics subsystem coupled to receive a plurality of parameters that define the pixel values for the pixels in a primitive. The graphics subsystem includes a means for selecting a set of parameters from the plurality of parameters. The selected parameters are associated with texture values and the parameters that are not selected define a set of unselected parameters that have constant values over the primitive. The graphics subsystem also includes a means for determining a texture value for each of the selected parameters by accessing a set of textures. The texture value for the selected parameters varies over the primitive. The graphics subsystem further includes a means for evaluating the pixel value by using the unselected parameters and the texture values.","The present invention advantageously provides a method, device, and system that can efficiently generate per-pixel light values in a primitive by using textures for one or more parameters. In particular, the present invention enables the generation of pixel values that vary over the surface of a primitive by using a set of texture maps. Each of the texture maps models varying characteristics of a parameter over a surface. By using the texture values instead of constant parameters in rendering a pixel, the present invention enables the rendering of a more realistic surface. In addition, by providing textures that can be selectively associated with one or more parameters, the present invention provides substantial flexibility in rendering an image of a surface. Other aspects and advantages of the invention will become apparent from the following detailed description, taken in conjunction with the accompanying drawings, illustrating by way of example the principles of the invention.","Reference will now be made to the present preferred embodiments of the invention, examples of which are illustrated in the accompanying drawings.","In the following detailed description of the present invention, which includes a method, a device, and a system for generating per-pixel light values using texture parameters, numerous specific details are set forth to provide a thorough understanding of the present invention. It will be obvious to one skilled in the art, however, that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail to avoid unnecessarily obscuring certain aspects of the present invention.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","100","100"]},"The computer graphics system  may be any computer-controlled graphics system suitable for generating complex 2D or 3D images. The computer graphics system  includes a bus  for transmitting information between the various parts of the computer system. One or more processors  for processing information are coupled to the bus . The information, together with the instructions for processing the information, is stored in a hierarchical memory system comprised of a mass storage device , a read only memory (ROM) , and a main memory . The mass storage device  is used to store a vast amount of data and may include one or more hard disk drives, floppy disk drives, optical disk drives, tape drives, CD-ROM drives, or any number of other types of storage devices having media for storing data. The ROM  is used to store data on a permanent basis, such as instructions for the microprocessors. The main memory  is used for storing data on an intermediate basis. The main memory  may be DRAM, SDRAM, RDRAM, or any other suitable memory for storing data.","A graphics subsystem  may be included in the computer graphics system . The processor  provides the graphics subsystem  with graphics data, such as drawing commands and primitives, which are preferably polygons. The primitives are defined by a set of vertices. Vertex data define the vertices and include vertex colors, coordinates, normals, texture coordinates, etc. For example, the vertex data may include parameters such as pixel color, an outward normal vector N, a light vector L, a view vector V, and the like. As such, the vectors N, L, and V are referred to herein as per-vertex parameters that are specified at each vertex of a primitive. The spotlight source direction vector S, although associated with the light vector L, is a per light-source vector (i.e., constant for a given light source). In contrast, other parameters are per-primitive parameters defined for a primitive as a whole. Some examples of per-primitive parameters are as follows: emission material color e, ambient material color a, global ambient light color a, attenuation factor art, ambient light color a, diffuse material color d, diffuse light color d, specular material color s, specular light color s, specular exponent , environment map, shadow, and a surface normal vector.","As will be described in more detail below, the present invention selects a set of parameters from one or both of the per-primitive and per-vertex parameters and generates texture values for the selected parameters. The parameters for which texture values may be substituted in a lighting equation may be varied, but preferably include the normal vector N and all of the per-primitive parameters. These parameters are selectable from the superset of per-primitive and per-vertex parameters and are referred to herein as \u201cselectable parameters.\u201d The unselected parameters may be used without modification in evaluating a light equation to determine a pixel value. The generated texture values and the unselected parameters may then be used in evaluating a pixel value in accordance with any suitable light equation. It should be appreciated by those skilled in the art that in addition to the above-described parameters, texture values may be generated for other parameters in a lighting model or equation for evaluating a pixel light value.","With continuing reference to , a display device  is coupled to the graphics subsystem  to receive image data (e.g., pixel data) for display. Alternatively, the display device  may be coupled to the computer graphics system  via the bus . As used herein, the display device  includes any suitable device for displaying or recording graphics data.","Other devices may also be coupled to the computer graphics system . For example, an alphanumeric keyboard  may be used for entering commands and other information to processor  via the bus . Another type of user input device is cursor control device  (e.g., mouse, trackball, joystick, and touchpad) used for positioning a movable cursor and selecting objects on a computer screen.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 2","b":["112","202","204","206","104"]},"The method continues to operation , where the drawing primitives are converted into graphics primitives, which are preferably defined by per-vertex data. The graphics primitives are preferably polygons, and more preferably triangles. Each of the polygons is defined by the per-vertex and per-primitive parameters described above. After the conversion into graphics primitives, a set of parameters is selected from the selectable per-vertex and per-primitive parameters for generating texture values in operation . In a preferred embodiment, up to four parameters may be selected to generate four texture values. Preferably, one texture value is generated for each selected parameter. Next, in operation , each of the primitives is rasterized to generate a set of pixels. The rasterization process, which is well known in the art, essentially converts the primitives into corresponding pixels.","After rasterization, in operation , texture values are generated and substituted for the selected parameters in a lighting equation. Then, for each pixel in a primitive, a pixel value is determined by evaluating the light equation using the generated texture values and the unselected parameters in operation . As each pixel value is generated, the pixel value is stored into a frame buffer for display in operation . The method then terminates in operation . This method is carried out on a per-pixel basis for each pixel in a primitive. It is contemplated that the present invention can apply equally to subpixels as in supersampling.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 3","b":["112","112","112","302","304","306","308"]},"In this configuration, the geometry subsystem  receives drawing primitives in object coordinate space and texture download commands. The geometry subsystem converts the drawing primitives in object coordinates into graphics primitives in screen coordinate space (e.g., (x, y, z)). In addition, the geometry subsystem  also may perform transformations including tessellation, clipping, state management, and the like.","The resulting graphics primitives in screen coordinate space are then provided to the rasterization subsystem , which is coupled to the geometry subsystem . The rasterization subsystem  rasterizes the received graphics primitives in coordinate screen space into pixels and determines pixel values at each of the pixels by evaluating a lighting equation. At this stage, the rasterization subsystem  also may perform well-known operations such as Z-buffering, blending, and antialiasing.","The rasterization subsystem  stores the generated pixel data values into a frame buffer . The display subsystem  is coupled to receive pixel data from the frame buffer  for subsequent display or storage. For example, the display subsystem  may convert the pixel data into analog signals for display on a display device.","The rasterization subsystem  of  further includes a scan converter , a texture unit , a texture memory , and a rendering unit . The scan converter  receives the graphics primitives from the geometry subsystem  and converts the primitives into individual pixels. The texture memory  stores a set of texture maps for use in generating texture values for one or more selected parameters.","The texture unit  is coupled to receive the texture coordinates of one or more parameters selected for texture mapping. Specifically, the texture unit  converts the texture coordinates associated with the selected parameters into one or more texture addresses. Based on the texture addresses, the texture unit  accesses a texture map stored in the texture memory . The texture map thus accessed includes a plurality of texels, which are texture samples. The texture unit  also may perform a texture filtering operation by mapping the received texel samples into an associated texel element. Techniques for mapping a texture onto a surface of a primitive are well known in the art. The filtered texture (i.e., texture value) for the pixel is then transmitted to the rendering unit  for computing a pixel value for each pixel.","With continuing reference to , the rendering unit  is coupled to the scan converter  to receive per-vertex data such as the N, L, and V vectors, attenuation factor, pixel color, and barycentric coordinates (as will be discussed further below) along with other unselected parameters for computing pixel values in accordance with a lighting equation. The rendering unit  is also coupled to the texture unit  to receive the generated textures associated with the selected parameters. Based on the texture values and the unselected parameters, the rendering unit  determines a pixel value at the associated pixel by evaluating a lighting equation. The pixel value is then transmitted to the frame buffer  for storage.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 4","b":["310","402","404"]},"In operation , a pixel is selected within the primitive for determining pixel data values. Preferably, the pixel is selected in accordance with well-known scan conversion methods. In operation , the barycentric coordinates (A, B) are computed for the selected pixel. Barycentric coordinates are well known in the art and are described, for example, in Curves and Surfaces for Computer-Aided Geometric Design, Fourth Ed., ISBN 0-12-249054-1, by Gerald Farin. Although the use of barycentric coordinates is described herein, those skilled in the art will recognize that any coordinate space suitable for computing a pixel value also may be used.","After computing the barycentric coordinates (A, B) for the selected pixel, the values of the N, L, and V vectors, and the attenuation factor are evaluated, in operation , at the selected pixel using the barycentric coordinate for the pixel. The method may be repeated for each of the pixels in the primitive and thereafter terminates in operation .","The rendering unit  (see ) receives the texture values associated with the selected parameters from the texture unit  and uses the texture values in rendering the associated pixel.  illustrates a more detailed block diagram of the rendering unit  in accordance with one embodiment of the present invention. The rendering unit  includes a barycentric evaluator , a vector dot product term evaluator , and a lighting unit . The barycentric evaluator  receives the per-vertex parameter data and the barycentric coordinates (A, B) associated with a given pixel. Based on the per-vertex and barycentric coordinate data, the barycentric evaluator  computes per-pixel parameters at the given pixel such as the N, L, and V vectors. Preferably, the barycentric evaluator  computes the per-pixel parameter values for only those parameters that have not been selected for texture substitution.","The vector dot product term evaluator  is coupled to the barycentric evaluator  to receive the per-pixel parameters. In addition, the vector dot product term evaluator  receives a spotlight source direction vector S and texture values of the selected parameters for computing one or more dot product terms such as the diffuse dot product term (N\u00b7L), the specular dot product power term (N\u00b7L), and the spotlight dot product power term (S\u00b7L). When a parameter to be used in the vector dot product term evaluator  is a selected parameter, the vector dot product term evaluator  receives the texture value of the selected parameter from the texture unit . For example, when the normal vector N and the specular exponent s are selected to be replaced by texture parameters, the texture values corresponding to the normal vector and the specular exponent are received from the texture unit . Then, the received texture parameters are used in lieu of conventional N and s values in computing the specular dot product term. Dot product term evaluators are described in more detail in the co-pending U.S. Parent application Ser. No. 09\/265,507 entitled \u201cMethod and Device for Generating Per-Pixel Light Values,\u201d by Tannenbaum et al.","The lighting unit  of  receives the per-pixel dot product term values and the texture parameters of the selected parameters for computing a pixel value at the associated pixel. In addition, the lighting unit  also receives other parameters that were not selected for texture replacement. That is, the unselected parameters are parameters other than those used in the vector dot product term evaluator  and the texturized parameters. Using the per-pixel dot product term values, the texture parameter values, and the unselected parameter values, the lighting unit  computes the pixel color value at the pixel associated with these parameters. Although the use of both constant per-primitive parameters and texture parameters is described herein, it should be appreciated that, if desired, texture parameters may be used in place of all the constant parameters. The generated pixel data is then transmitted to the frame buffer  for storage.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 6","b":["506","602","604","606","608","610","612","606","614"]},"The present invention thus provides a method, device, and system that can efficiently generate per-pixel light values in a primitive by using textures for one or more parameters. As illustrated above, the present invention enables the generation of pixel values that vary over the surface of a primitive by using a set of texture maps. Each of the texture maps models varying characteristics of a parameter over a surface. By using the texture values instead of constant parameters in rendering a pixel, the present invention enables the rendering of a more realistic surface. In addition, by providing textures that can be selectively associated with one or more parameters, the present invention provides substantial flexibility in rendering an image of a surface.","The invention has thus been described herein in terms of several preferred embodiments. Other embodiments and equivalents of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention. The embodiments and preferred features described above should be considered exemplary, with the invention being defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings, which are incorporated in and form a part of this specification, illustrate embodiments of the invention and, together with the description, serve to explain the principles of the invention.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
