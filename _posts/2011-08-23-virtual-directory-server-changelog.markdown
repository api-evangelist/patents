---
title: Virtual directory server changelog
abstract: Techniques for providing a consolidated view of directory changes across different directory servers. In one set of embodiments, a changelog record can be received from a directory server, where the directory server is associated with a proprietary changelog format, and where the changelog record is formatted according to the proprietary changelog format. The received changelog record can then be translated into a virtualized changelog record that is formatted according to a standard changelog format, and the virtualized changelog record can be sent to a consuming client. With this virtualization capability, the client does not need to be concerned with, or even aware of, the proprietary changelog mechanisms/formats that may be used by different directory servers in a multi-server deployment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745072&OS=08745072&RS=08745072
owner: Oracle International Corporation
number: 08745072
owner_city: Redwood Shores
owner_country: US
publication_date: 20110823
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure is related to the following commonly assigned, co-pending U.S. patent application, which is incorporated herein by reference in its entirety for all purposes: application Ser. No. 13\/216,072, filed concurrently with the present application, entitled \u201cGLOBALLY UNIQUE IDENTIFICATION OF DIRECTORY SERVER CHANGELOG RECORDS.\u201d","Embodiments of the present invention relate in general to directory servers, and in particular to techniques for providing a consolidated view of directory changes across different directory servers.","In the field of computer software, a directory is a set of data records (referred to herein as directory entries), typically organized according to a hierarchical structure. Each directory entry generally includes a unique identifier, known as a distinguished name, and a set of associated attributes. For instance, a corporate user directory may comprise a hierarchical grouping of directory entries corresponding to users\/employees in a corporation, where each entry includes, e.g., user name, telephone, email, and manager name attributes for a particular user.","A directory server is a software and\/or hardware-based system that stores, organizes, and provides access to information in a directory. For example, a directory server may allow a client to browse, query, modify, add, and\/or delete directory entries. There are a number of different directory server implementations developed by different vendors, such as Oracle Internet Directory (developed by Oracle Corporation), Active Directory (developed by Microsoft Corporation), Sun Java System Directory Server (developed by Sun Microsystems, Inc.), and the like. These various implementations generally conform to one or more versions of Lightweight Directory Access Protocol (LDAP), a standard protocol for accessing distributed directory services over IP networks.","Certain directory server implementations can keep track of changes (e.g., additions, modifications, deletions) that are made to a directory via a changelog. However, since change tracking is not formally part of the LDAP standard, each implementation generally uses a proprietary changelog mechanism and format. For instance, Oracle Internet Directory generates a separate changelog record for each change to a directory entry, and uses a unique \u201cchangenumber\u201d attribute associated with the changelog record to identify the change. In contrast, Active Directory updates a \u201cuSNchanged\u201d attribute on a directory entry (rather than generating a separate changelog record object) to record a change to the entry.","These disparate approaches to change tracking can cause various problems in an enterprise deployment that includes different types of directory servers. For example, client applications that are configured to consume directory changelog information must be programmed to understand the various changelog mechanisms\/formats implemented by different vendors and to handle those formats appropriately. Further, since the changelog identification scheme for each directory server implementation is self-contained, there is no way to uniquely identify changelog records across different server implementations or to provide a global changelog state for all directory servers in the deployment.","Embodiments of the present invention provide a consolidated view of directory changes across different directory servers. In one set of embodiments, a changelog record can be received from a directory server, where the directory server is associated with a proprietary changelog format, and where the changelog record is formatted according to the proprietary changelog format. The received changelog record can then be translated into a virtualized changelog record that is formatted according to a standard changelog format, and the virtualized changelog record can be sent to a consuming client. With this virtualization capability, the client does not need to be concerned with, or even aware of, the proprietary changelog mechanisms\/formats that may be used by different directory servers in a multi-server deployment. Rather, the client need only recognize a single, standard changelog format.","In a further set of embodiments, a \u201cchangelog cookie\u201d can be generated for a virtualized changelog record prior to sending the record to a client. In various embodiments, the changelog cookie can act as a globally unique identifier\u2014i.e., an identifier that distinguishes the virtualized changelog record from other virtualized changelog records (and thus, uniquely identifies the record across all directory servers in a deployment). With such a cookie, a client can easily determine the directory server that a given virtualized changelog record originated from. In certain embodiments, changelog cookies can also be used to determine the latest, global changelog state of all directory servers in a deployment and to query for any incremental changes that have occurred since that global changelog state.","According to one embodiment of the present invention, a method is provided that comprises receiving, by a computer system, a plurality of changelog records from a plurality of directory servers, where each changelog record is formatted according to a proprietary changelog format associated with the directory server from which the changelog record is received, and where each directory server is associated with a different proprietary changelog format. The method further comprises virtualizing, by the computer system, the plurality of changelog records such that the virtualized changelog records are formatted according a standard changelog format, and returning, by the computer system, the virtualized changelog records.","In one embodiment, virtualizing the plurality of changelog records comprises, for each changelog record, mapping attributes in the changelog record from the proprietary changelog format to the standard changelog format.","In one embodiment, each changelog record identifies a change to a base directory entry maintained by the directory server from which the changelog record is received.","In one embodiment, each virtualized changelog record includes a first attribute representing an identifier of the virtualized changelog record that is unique to the directory server from which the changelog record is received; a second attribute identifying the type of change made to the base directory entry; a third attribute identifying all of the changes made to the base directory entry; and a fourth attribute identifying the base directory entry.","In one embodiment, each directory server is associated with a changelog adapter executing on the computer system, and the virtualizing of changelog records received from the directory server is performed by the changelog adapter.","In one embodiment, virtualizing the plurality of changelog records comprises, for each changelog record, adding a new attribute to the changelog record, the new attribute reflecting a name of the changelog adapter.","In one embodiment, virtualizing the plurality of changelog records comprises, for each changelog record, determining whether the base directory entry is a standalone entry or a shadow entry; and if the base directory entry is a standalone entry, mapping the fourth attribute of the virtualized changelog record to a distinguished name of the standalone entry.","In one embodiment, if the base directory entry is a shadow entry and if the second attribute of the virtualized changelog record identifies the type of change as a modify or add attribute operation, the method further comprises determining a primary entry associated with the shadow entry and mapping the fourth attribute of the virtualized changelog record to a distinguished name of the primary entry.","In one embodiment, determining the primary entry associated with the shadow entry comprises determining a base adapter associated with the changelog adapter, the base adapter being configured to join the primary entry with the shadow entry to present a single directory entry to a client requesting the primary entry; and determining the distinguished name of the primary entry from the base adapter.","In one embodiment, if a first directory server in the plurality of directory servers is an Active Directory server, changelog records received from the Active Directory server correspond to base directory entries with a uSNChanged attribute, and virtualizing a changelog record received from the Active Directory server comprises mapping the value of the uSNChanged attribute to the first attribute in the virtualized changelog record.","In one embodiment, virtualizing a changelog record received from the Active Directory server further comprises including all of the attributes in the base directory entry within the third attribute in the virtualized changelog record.","According to another embodiment of the present invention, a non-transitory computer readable storage medium is provided. The non-transitory computer readable storage medium has stored thereon program code executable by a processor, the program code comprising code that causes the processor to receive a plurality of changelog records from a plurality of directory servers, each changelog record being formatted according to a proprietary changelog format associated with the directory server from which the changelog record is received, each directory server being associated with a different proprietary changelog format; code that causes the processor to virtualize the plurality of changelog records such that the virtualized changelog records are formatted according a standard changelog format; and code that causes the processor to return the virtualized changelog records.","According to another embodiment of the present invention, a system is provided that comprises a processor. In various embodiments, the processor is configured to receive a plurality of changelog records from a plurality of directory servers, each changelog record being formatted according to a proprietary changelog format associated with the directory server from which the changelog record is received, each directory server being associated with a different proprietary changelog format; virtualize the plurality of changelog records such that the virtualized changelog records are formatted according a standard changelog format; and return the virtualized changelog records.","A further understanding of the nature and advantages of the embodiments disclosed herein can be realized by reference to the remaining portions of the specification and the attached drawings.","In the following description, for the purposes of explanation, numerous details are set forth in order to provide an understanding of embodiments of the present invention. It will be apparent, however, to one of ordinary skill in the art that certain embodiments can be practiced without some of these details.","Embodiments of the present invention provide a consolidated view of directory changes across different directory servers. In one set of embodiments, a changelog record can be received from a directory server, where the directory server is associated with a proprietary changelog format, and where the changelog record is formatted according to the proprietary changelog format. The received changelog record can then be translated into a virtualized changelog record that is formatted according to a standard changelog format, and the virtualized changelog record can be sent to a consuming client. With this virtualization capability, the client does not need to be concerned with, or even aware of, the proprietary changelog mechanisms\/formats that may be used by different directory servers in a multi-server deployment. Rather, the client need only recognize a single, standard changelog format.","In a further set of embodiments, a \u201cchangelog cookie\u201d can be generated for a virtualized changelog record prior to sending the record to a client. In various embodiments, the changelog cookie can act as a globally unique identifier\u2014i.e., an identifier that distinguishes the virtualized changelog record from other virtualized changelog records (and thus, uniquely identifies the record across all directory servers in a deployment). With such a cookie, a client can easily determine the directory server that a given virtualized changelog record originated from. In certain embodiments, changelog cookies can also be used to determine the latest, global changelog state of all directory servers in a deployment and to query for any incremental changes that have occurred since that global changelog state.","Embodiments of the present invention can be used in a variety of different domains and contexts. For example, certain embodiments can be incorporated into a virtual directory server such as Oracle Virtual Directory (developed by Oracle Corporation), thereby enabling the virtual directory server to provide a virtual interface to both directory information and changelog information maintained by various, disparate data sources (e.g., directory servers, relational databases, etc.). Embodiments of the present invention can also be applied to any other type of data integration service or server.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 1","b":["100","100","106","1","106","2","106","3","104","104","102","1","102","2"]},"Directory servers -, -, - can be software and\/or hardware-based systems that are configured to store, organize, and provide access to information in data stores referred to as directories. As used herein, a directory is a set of data records (i.e., directory entries), typically organized according to a hierarchical structure. A directory is similar in some respects to a conventional database, but is also distinguishable in that a directory is optimized for data reading (since it is assumed that data writes, in comparison to data reads, are rare). Each directory entry can include a unique identifier, known as a distinguished name, and a set of attributes. The set of attributes can define the various pieces of information that are associated with the entry. By way of example, in a corporate user directory, each directory entry can correspond to a user\/employee in the organization and can include user name, telephone, email, and manager name attributes for that user.","In one set of embodiments, directory servers -, -, - can expose various operations for accessing the data stored in their respective directories. Examples of such operations including browsing, querying, modifying, adding, and deleting directory entries. In one embodiment, these operations can be exposed through LDAP, a standard protocol for accessing distributed directory services over IP networks. Alternatively, these operations can be exposed through any other type of communication protocol.","In certain embodiments, directory servers -,--, - can also track changes made to their respective directories and can expose operations for accessing that change information. For example, in one embodiment, each directory server -,--, - can maintain a changelog comprising a sequence of records, where each record identifies a particular directory change such as an entry modification, addition, or deletion. These changelog records can be accessed by other entities (e.g., clients -, -) for various purposes such as directory replication, reconciliation, maintaining application compatibility, and so on.","As noted in the Background section, there are a number of different directory server implementations developed by different vendors, such as Oracle Internet Directory (OID), Active Directory (AD), Sun Java System Directory Server (SJSDS), and the like. Since change tracking is not formally part of the LDAP standard (or any other widely adopted directory access standard), each implementation generally uses a proprietary changelog mechanism and format. For instance, OID generates a separate changelog record for each change to a directory entry, and uses a unique \u201cchangenumber\u201d attribute associated with the changelog record to identify the change. In contrast, AD updates a \u201cuSNchanged\u201d attribute on a directory entry (rather than generating a separate changelog record object) to record a change to the entry.","These various approaches to change tracking can be problematic in a multi-server deployment as shown in . For example, assume that directory server - is an instance of OID, directory server - is an instance of AD, and directory server - is an instance of SJSDS. In this scenario, clients that are designed to consume directory changelog information from -, -, and - (e.g., clients -, -) must be programmed to understand the various changelog mechanisms\/formats used by OID, AD, and SJSDS and to handle those formats appropriately. Further, since OID, AD, and SJSDS each employ a different (and possibly overlapping) changelog identification scheme, clients -, - may be unable to easily determine which directory server a particular changelog record originated from.","To address these (and other similar) problems, requests for changelog information from clients -, - and corresponding responses from directory servers -, -, - can be routed through an intermediary entity\u2014virtual directory server . In various embodiments, virtual directory server  can translate, or virtualize, changelog requests and responses that are communicated between clients -, - and directory servers -, -, -, thereby providing a standardized and consolidated interface for accessing changelog information across different directory server implementations. In a particular embodiment, virtual directory server  can be an instance of Oracle Virtual Directory. In other embodiments, virtual directory server  can be implemented using any other type of virtual directory or data integration service.","As shown in , virtual directory server  can include a virtual directory UI , a changelog consolidation plugin , and a number of changelog adapters -, -, -. Virtual directory UI  is a user interface layer that can receive requests, such as queries for changelog records, from clients -, - and pass those requests to downstream components of virtual directory server  (e.g., changelog consolidation plugin ). Virtual directory UI  can also receive responses to those requests and generate a user interface for presenting that information to clients -, -.","In some embodiments, virtual directory UI  can be replaced (or supplemented) by a programmatic layer, such as a library of application programming interfaces (APIs). This programmatic layer can allow clients -, - to communicate with components of virtual directory server  via API calls rather than a user interface.","Changelog consolidation plugin  and changelog adapters -, -, - can operate in concert to carry out various changelog virtualization functions provided by virtual directory server . For instance, in one set of embodiments, changelog adapters -, -, - can translate changelog records received from directory servers -, -, - into a standard, virtualized format. Changelog consolidation plugin  can then generate an identifier for each virtualized changelog record (i.e., changelog cookie) that enables clients (e.g., -, -) to unique identify the record.","By way of example, assume that client - or - is interested in querying one or more changelog records maintained by directory servers -, -, -. Changelog consolidation plugin  can receive an appropriate query from the client (e.g., via virtual directory UI ) and forward the query to changelog adapters -, -, -. In various embodiments, each changelog adapter is configured to provide virtualization functions for an associated directory server implementation. For example, in the embodiment of , changelog adapter - is configured to provide virtualization functions for directory server - (e.g., an OID implementation), changelog adapter - is configured to provide virtualization functions for directory server - (e.g., an AD implementation), and changelog adapter - is configured to provide virtualization functions for directory server - (e.g., an SJSDS implementation). Accordingly, upon receiving the query from changelog consolidation plugin , each changelog adapter -, -, - can convert the query into a format understood by its associated directory server and send the converted query to the directory server.","Once the queries have been processed by directory servers -, -, -, each changelog adapter can receive from its associated directory server a set of changelog records, where the changelog records are formatted according to a proprietary changelog format used by that directory server. For instance, changelog adapter - can receive from directory server - changelog records formatted according a proprietary format specific to OID, changelog adapter - can receive from directory server - changelog records formatted according to a proprietary format specific to AD, and changelog adapter - can receive from directory server - changelog records formatted according to a proprietary format specific to SJSDS.","Each changelog adapter -, -, - can then translate, or virtualize, the received changelog records into a standard changelog format. The virtualization process can include, for example, mapping attributes from the proprietary changelog format of the received record to the standard changelog format. The virtualization process can also include other types of processing, such as handling \u201csplit profile\u201d deployment scenarios, that are described in further detail below. In one set of embodiments, the standard changelog format can be based on a draft LDAP format, such as the draft format described at http:\/\/tools.ietf.org\/html\/draft-good-ldap-changelog-04, which is incorporated herein by reference for all purposes. In other embodiments, the standard changelog format can be any other changelog format that is uniformly implemented by the changelog adapters of virtual directory server .","Upon receiving the virtualized changelog records from changelog adapters -, -, -, changelog consolidation plugin  can generate, for each virtualized changelog record, an identifier referred to as a changelog cookie. The changelog cookie can serve a number of functions. In one set of embodiments, the changelog cookie can uniquely identify the virtualized changelog record across all directory servers in a deployment. Thus, the cookie can be used to determine which directory server the record originated from. In a further set of embodiments, the changelog cookie can also include information pertaining to the changelog states of other directory servers in the deployment. Accordingly, in certain embodiments, changelog cookies can be used to identify a latest, global changelog state for all directory servers, and to query for changes that have occurred since that global changelog state.","By way of example, a changelog cookie can be a string that has the following format:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<changelogAdapter1>:<changenumber1>;<changelogAdapter2>:<changenumber2>;"},{"entry":"<changelogAdapter3>:<changenumber3>;..."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The first \u201c<changelogAdapter>:<changenumber>;\u201d pair in the string can identify the name of the changelog adapter that a virtualized changelog record was received from and the changelog identifier (e.g., \u201cchangenumber\u201d) assigned to the record by the associated directory server. For example, if a virtualized changelog record is received from changelog adapter -, the first pair can identify the name of adapter - and the changelog identifier assigned to the record by directory server -. The remaining \u201c<changelogAdapterX>:<changenumberX>;\u201d pairs in the changelog cookie can identify the names of other changelog adapters and the latest changelog identifiers that have been received for those adapters\/directory servers. Returning to the example above, the remaining pairs can identify the names of changelog adapters - and - (i.e., the adapters in virtual directory server  other than -) and the latest changelog identifiers received assigned by directory servers - and -. Thus, these pairs can indicate the changelog states of servers - and -.","Once changelog cookies have been generated for the virtualized changelog records received from changelog adapters -, -, -, changelog consolidation plugin  can include the cookies in the records and return the records to the requesting client (e.g., via virtual directory UI ). The client can then process the records as needed.","With the functionality described above, clients -, - do not need to be concerned with the specific proprietary changelog mechanisms\/formats implemented by directory servers -, -, - when processing changelog records; from the client's perspective, the changelog records appear to originate from a single, standard directory server implementation. Thus, the problems associated with managing directory change information in a multi-server deployment are significantly reduced or eliminated. Further, in certain embodiments, the changelog cookie mechanism can enable clients to determine the latest, global changelog state for all directory servers in a deployment and to query for incremental changes that may have occur since that global changelog state.","It should be appreciated that system  of  is illustrative and not intended to limit embodiments of the present invention. For example, the various entities depicted in system  can have other capabilities or include other components that are not specifically described. One of ordinary skill in the art will recognize other variations, modifications, and alternatives.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","110","112","1","112","2","112","3","200","200"]},"At block , changelog consolidation plugin  can receive a query for all changelog records maintained by a group of directory servers in a deployment (e.g., directory servers -, -, -), where each directory server corresponds to a different directory server implementation (e.g., OID, AD, SJSDS, etc.), and thus each directory server implements a different changelog mechanism\/format. The query can be received from, e.g., client - or - via virtual directory UI , or from another source not depicted in . In a particular embodiment, the query can be expressed in a standard format understood by changelog consolidation plugin , such as a query for all changelog identifiers greater than or equal to a base identifier (e.g., \u201cchangenumber>=0\u201d).","At block , changelog consolidation plugin  can enter a loop for each changelog adapter that is part of virtual directory server  (e.g., changelog adapters -, -, -). At block , changelog consolidation plugin  can forward the query to the current changelog adapter in the loop (e.g., changelog adapter -X).","At block , changelog adapter -X can convert the query into a format that is understood by its associated directory server (e.g., directory server -X). For example, if the associated directory server is an instance of OID, the adapter can convert the query into a format understood by OID. Adapter -X can then send the converted query to the directory server (block ).","Once directory server -X has processed the query and begun returning changelog records, changelog adapter -X can enter a loop for each returned record (block ). Within this loop, adapter -X can translate, or virtualize, the record from the proprietary changelog format supported by directory server -X to a standard changelog format (block ). This virtualization process can include, for example, mapping attributes from the proprietary format to the standard format, and adding an \u201cadaptername\u201d attribute to the record that identifies changelog adapter -X. The virtualization process can also include other steps, such as generating a new changelog record from a base directory entry (in the case of AD), or accounting for \u201csplit profile\u201d deployment scenarios, that are described in detail with respect to  below. The output of block \u2014a virtualized changelog record\u2014can be sent to changelog consolidation plugin , and block  can be repeated until all changelog records received from directory server -X have been processed (block ).","At block , changelog consolidation plugin  can enter a loop for each virtualized changelog record received from changelog adapter -X, and at block  can generate a changelog cookie for the current virtualized changelog record. As described above, the changelog cookie can act as a globally unique identifier\u2014in other words, an identifier that distinguishes the virtualized changelog record from other virtualized changelog records (and thus, uniquely identifies the record across all directory servers -, -, -). In a particular embodiment, the changelog cookie can comprise a series of \u201cchangelogAdapter\u201d and \u201cchangenumber\u201d pairs, where the first pair identifies the changelog adapter (e.g., -X) that the current record was received from and the changelog identifier assigned by the associated directory server (e.g., -X) to the changelog record. The remaining pairs can identify the other changelog adapters in virtual directory server  and the latest changelog identifiers assigned by their associated directory servers.","Once the changelog cookie has been generated, changelog consolidation plugin  can assign the cookie to a changelog identifier attribute (e.g., \u201cchangenumber\u201d) of the virtualized changelog record (block ). Plugin  can also remove from the record the \u201cadaptername\u201d attribute that was added at block  by changelog adapter -X (block ). The virtualized changelog record can then be returned to the original requestor (block ). At block , the for loop for the virtualized changelog records received from changelog adapter -X can end, and at block  the for loop for the changelog adapters can end.","It should be appreciated that process  is illustrative and that variations and modifications are possible. Steps described as sequential can be executed in parallel, order of steps can be varied, and steps can be modified, combined, added, or omitted. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.","As noted above, the changelog cookies generated by changelog consolidation plugin  can not only identify the directory server that a particular virtualized changelog record originated from, but can also identify the changelog states of other directory servers. Thus, in certain embodiments, the changelog cookie mechanism can be used to provide to clients (e.g., -, -) the latest, global changelog state for all directory servers in a deployment. This functionality can be useful if, for example, clients -, - need to recover such state information after a bootstrap or encountering an error condition due to an invalid cookie.  is a flow diagram of a process  for retrieving a latest, global changelog state according to an embodiment of the present invention. Like process  of , process  can be carried out by changelog consolidation plugin  and changelog adapters -, -, - of . Process  can be implemented in hardware, software, or a combination thereof As software, process  can be encoded as program code encoded on a non-transitory computer readable storage medium.","At block , changelog consolidation plugin  can receive a query for the latest, global changelog state of directory servers -, -, -. In a particular embodiment, the query can be expressed in a standard format understood by changelog consolidation plugin , such as a query for \u201clastChangeNumber.\u201d","At block , changelog consolidation plugin  can enter a loop for each changelog adapter that is part of virtual directory server  (e.g., changelog adapters -, -, -). At block , plugin  can forward the query to the current changelog adapter in the loop (e.g., changelog adapter -X).","At block , changelog adapter -X can convert the query into a format that is understood by its associated directory server (e.g., directory server -X). For example, if the associated directory server is an instance of OID, the adapter can convert the query into a format understood by OID. Adapter -X can then send the converted query to directory server -X (block ).","Once directory server -X has processed the query, changelog adapter -X can receive from directory server -X a changelog identifier (e.g., a changelog number) that identifies the last change that was made to the directory server. This changelog identifier is then communicated to changelog consolidation plugin  (block ).","At block , changelog consolidation plugin  can receive the changelog identifier from changelog adapter -X and can store the identifier in memory. At block , the for loop for changelog adapters can end. Once changelog consolidation plugin  has received and stored changelog identifiers for every adapter, plugin  can generate a changelog cookie based on stored changelog identifiers (block ). In various embodiments, this changelog cookie represents the latest, global changelog state of directory servers -, -, -.","By way of example, if changelog number  is received from adapter - (\u201cAdapted\u201d), changelog number  is received from adapter - (\u201cAdapter\u201d), and changelog number  is received from adapter - (\u201cAdapter\u201d), the resulting changelog cookie can be expressed as:","<Adapter>:<>;<Adapter>:<>;<Adapter>:<>;","At block , changelog consolidation plugin  can return the changelog cookie generated at block  to the original requestor.","It should be appreciated that process  is illustrative and that variations and modifications are possible. Steps described as sequential can be executed in parallel, order of steps can be varied, and steps can be modified, combined, added, or omitted. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.","Once client - or - has received a changelog cookie representing the latest, global changelog state of directory servers -, -, -, the client can use that cookie to retrieve changes that have occurred to servers -, -, - since that global changelog state. This process () is depicted in . Like processes  and , process  can be carried out by changelog consolidation plugin  and changelog adapters -, -, - of . Process  can be implemented in hardware, software, or a combination thereof. As software, process  can be encoded as program code encoded on a non-transitory computer readable storage medium.","At block , changelog consolidation plugin  can receive a query for all changelog records that have been created by directory servers -, -, - since a global changelog state identified by a particular cookie. For example, the query can request all changelog records created since a global changelog state identified by the cookie generated and returned in process . In a particular embodiment, the query can be expressed in a standard format understood by changelog consolidation plugin , such as a query for \u201cchangenumber>=<changelogcookie>.\u201d","At block , changelog consolidation plugin  can parse the cookie included in the query to identify the <changelogAdapter>, <changenumber> pairs in the cookie. Plugin  can then enter a for loop for each changelog adapter that is part of virtual directory server  (e.g., -, -, -), and can generate a query for the current changelog adapter based on the information parsed at block  (blocks , ). For example, if plugin  determines that the changelog identifier for a given changelog adapter -X in the changelog cookie is , plugin  can generate a query such as \u201cchangenumber>=\u201d and pass the query to adapter -X.","At blocks -, changelog adapter -X can process the query in a manner substantially similar to blocks - of . For instance. adapter -X can send the query to associated directory server -X and then virtualize the changelog records that are received from the directory server.","At blocks -, changelog consolidation plugin  can process the received virtualized changelog records in a manner substantially similar to blocks - of . For instance, changelog consolidation plugin  can generate and assign an appropriate changelog cookie to each record, and then return the record to the original requestor.","It should be appreciated that process  is illustrative and that variations and modifications are possible. Steps described as sequential can be executed in parallel, order of steps can be varied, and steps can be modified, combined, added, or omitted. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 5","FIGS. 2 and 4"],"b":["500","112","214","416","500","500"]},"At block , changelog adapter -X can map attributes of a received changelog record from the proprietary format of the record to a standard changelog format. For example, the proprietary changelog formats that are supported by different directory server implementations may specify attribute names or restrictions that are slightly (or significantly) different from each other. Thus, this mapping process can ensure that the changelog records generated by these different implementations are translated into a standard and consistent format. Once this mapping process is performed, a virtualized changelog record is created.","The following is an example of a virtualized changelog record::",{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dn: changenumber=2171867,cn=changelog"]},{"entry":[{},"changeType: modify"]},{"entry":[{},"changeNumber: 2171867"]},{"entry":[{},"targetGuid: 30584484-712311e0-80dad76d-e983e523"]},{"entry":[{},"changes: replace: description"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"description: This is a second user for the test"]},{"entry":[{},"-"]},{"entry":[{},"replace: modifiersname"]},{"entry":[{},"modifiersname: cn=directory manager"]},{"entry":[{},"-"]},{"entry":[{},"replace: modifytimestamp"]},{"entry":[{},"modifytimestamp: 20110427230802Z"]},{"entry":[{},"targetGuid: 30584484-712311e0-80dad76d-e983e523"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"targetDN: cn=mary7,dc=oracle,dc=com"]},{"entry":[{},"objectclass: top"]},{"entry":[{},"objectclass: changelog"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As shown, the virtualized changelog record can include a number of standard attributes including \u201cchangeNumber,\u201d \u201cchangeType,\u201d \u201cchanges,\u201d and \u201ctargetDN.\u201d The changeNumber attribute can be populated with the changelog identifier assigned to the record by directory server -X. As described with respect to , this attribute value can be replaced by a changelog cookie value generated by changelog consolidation plugin  prior to returning the record to a client. The changeType attribute can indicate the type of directory changes that are reflected by the current record. For example, the changeType can be a modify, delete, or add change. The changes attribute describes the changes themselves, such as a new description or a replacement name. And the targetDN attribute identifies the distinguished name of the directory entry in directory server -X that was affected by the change (referred to herein as the base directory entry).","It should be appreciated that the virtualized changelog record shown above is provided for illustration purposes only and may include more or few attributes than shown. Further, the attribute names and formats may differ depending on the standard changelog format that is chosen.","In certain embodiments, the changelog record received by changelog adapter -X from directory server -X may not be a changelog record per se, but rather a base directory entry with change information embedded in the entry. For instance, AD records a directory change by updating a \u201cuSNchanged\u201d attribute on a directory entry that has been modified (rather than generating a separate changelog record object). In these embodiments, the processing at block  may include parsing the base directory entry and using the information in the entry to generate a new virtualized changelog record. For example, in the case of AD, changelog adapter -X can extract the value of \u201cuSNchanged\u201d attribute from the base directory entry and use that value as the \u201cchangenumber\u201d attribute for a new virtualized changelog record. Changelog adapter -X can also extract certain attribute values from in the base directory entry and record those values in the \u201cchanges\u201d attribute of the virtualized changelog record. Since AD directory entries do not clearly indicate which attributes have been modified and\/or added, in certain embodiments all of the attribute values from the entry can be incorporated into the \u201cchanges\u201d attribute, thereby enabling a client application to determine which portions of the entry have changed (e.g., by comparing the latest version with a prior version).","Once a virtualized changelog record has been generated at block , adapter -X can add an \u201cadapterName\u201d attribute to the record and can populate the attribute with the name of adapter -X (block ). As described with respect to , this adapter name information can be used by changelog consolidation plugin  to construct a changelog cookie for the record.","The remainder of process  deals with steps that can be performed to account for a directory deployment scenario where the primary attributes for a directory entry (including the distinguished name for the entry) are stored\/maintained by a primary directory server, and secondary (e.g., extended) attributes for the same directory entry are stored\/maintained by a secondary directory server. In various embodiments, this is referred to as a \u201csplit profile\u201d deployment scenario.","At block , changelog adapter -X can determine whether the base directory entry for the current virtualized changelog record is a regular entry or a \u201cshadow entry\u201d\u2014in other words, an entry comprising secondary attributes in a split profile scenario. If the base directory entry is not a shadow entry, the distinguished name of the base directory entry will be readily available from the changelog information received from directory server -X, and thus the distinguished name can be mapped to the \u201ctargetDN\u201d attribute of the virtualized changelog record (block ). The record can then be sent to changelog consolidation plugin .","However, if the base directory entry is a shadow entry, the distinguished name of the primary entry may not be available from the changelog information received from directory server -X (because the shadow entry may have a different distinguished name than the primary entry). In this case, changelog adapter -X can determine whether the change being made to the base directory entry is an add or modify operation (block ). If the change is an add or modify, the primary entry corresponding to the shadow entry can be determined (block ). Changelog adapter -X can then retrieve the distinguished name of the primary entry and map the distinguished name to the targetDN attribute of the virtualized changelog record (block ). In this manner, the virtualized changelog record can always identify a single directory entry (i.e., the primary entry) as the target of a directory change, regardless of whether the change has occurred to the primary or secondary attributes of the entry in a split profile scenario.","The mechanism for determining the distinguished name of the primary entry can be implemented in various ways. In certain embodiments, virtual directory server  may already include one more virtualization components for joining primary and shadow entries in a split profile scenario. For example,  illustrates a system  that is substantially similar to system  of , but includes user adapters -, -, - and user shadow join adapter . User adapters -, -, - are configured to virtualize directory information maintained by directory servers -, -, - and to provide a consolidated view of that directory information to clients -, -. In the embodiment of , directory servers - and - are primary and second directory servers, where directory server - is configured to store primary directory entries comprising primary attributes, and where directory server - is configured to store shadow entries comprising secondary attributes of the primary entries stored by -. In order to present a consolidated view of directory entries from servers -, - to clients -, -, user shadow join adapter  can include logic for receiving a shadow entry from server -, determining a primary entry from server - corresponding to the shadow entry, joining the two entries into a single entry (with the distinguished name of the single entry being the distinguished name of the primary entry), and returning the single entry to the clients.","Since user shadow join adapter  is already capable determining a primary entry based on a shadow entry, this capability can be leveraged by changelog adapters -, -, - to determine the distinguished name of a primary entry based on a changelog record for a shadow entry. This process () is depicted in . At block , changelog adapter -X can identify a base adapter associated with the changelog adapter, where the base adapter is configured to join the primary entry and the shadow entry into a single, consolidated entry. For example, the base adapter in this case can correspond to user shadow join adapter .","Once the base adapter has been identified, changelog adapter -X can provide the distinguished name of the shadow entry to the base adapter. In response, the base adapter can lookup the distinguished name of the primary entry based on the distinguished name of the shadow entry, and provide the distinguished name of the primary entry to changelog adapter -X (block ). Changelog adapter -X can then map this distinguished name the \u201ctargetDN\u201d attribute of the virtualized changelog record.","t should be appreciated that processes  and  are illustrative and that variations and modifications are possible. Steps described as sequential can be executed in parallel, order of steps can be varied, and steps can be modified, combined, added, or omitted. One of ordinary skill in the art would recognize many variations, modifications, and alternatives.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 8","FIG. 1"],"b":["800","800","802","1","802","2","802","3","802","4","802","1","802","2","802","3","802","4","102","1","102","1","104"]},"Client computing devices -, -, -, - can be general purpose personal computers (e.g., personal computers and\/or laptop computers running various versions of Microsoft Windows and\/or Apple Macintosh operating systems), cell phones or PDAs (running software such as Microsoft Windows Mobile and being Internet, e-mail, SMS, Blackberry, or other communication protocol enabled), and\/or workstation computers running any of a variety of commercially-available UNIX or UNIX-like operating systems (including without limitation the variety of GNU\/Linux operating systems). Alternatively, client computing devices -, -, -, - can be any other electronic device capable of communicating over a network, such as network  described below. Although system environment  is shown with four client computing devices, it should be appreciated that any number of client computing devices can be supported.","System environment  can further include a network . Network  can be any type of network familiar to those skilled in the art that can support data communications using a network protocol, such as TCP\/IP, SNA, IPX, AppleTalk, and the like. Merely by way of example, network  can be a local area network (LAN), such as an Ethernet network, a Token-Ring network and\/or the like; a wide-area network; a virtual network, including without limitation a virtual private network (VPN); the Internet; an intranet; an extranet; a public switched telephone network (PSTN); an infra-red network; a wireless network (e.g., a network operating under any of the IEEE 802.11 suite of protocols, the Bluetooth protocol known in the art, and\/or any other wireless protocol); and\/or any combination of these and\/or other networks.","System environment  can further include one or more server computers -, - which can be general purpose computers, specialized server computers (including, e.g., PC servers, UNIX servers, mid-range servers, mainframe computers, rack-mounted servers, etc.), server farms, server clusters, or any other appropriate arrangement and\/or combination. Servers -, - can run an operating system including any of those discussed above, as well as any commercially available server operating system. Servers -, - can also run any of a variety of server applications and\/or mid-tier applications, including web servers, FTP servers, CGI servers, Java virtual machines, and the like. In one set of embodiments, server -, - can run a virtual directory server application such as virtual directory server , and or a directory server application such as directory servers -, -, - of .","System environment  can further include one or more databases . In one set of embodiments, databases  can be configured to store any information that is used or accessed by server computers -, - and\/or client computing devices -, -, -, -. Databases  can reside in a variety of locations. By way of example, databases  can reside on a storage medium local to (and\/or resident in) one or more of computers -, -, -, -, -, -. Alternatively, databases  can be remote from any or all of computers -, -, -, -, -, -, and\/or in communication (e.g., via network ) with one or more of these. In one set of embodiments, databases  can reside in a storage-area network (SAN) familiar to those skilled in the art.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 9","b":["900","900","802","1","802","2","802","3","802","4","804","1","804","2","800","900","924","902","904","906","900","908","908"]},"Computer system  can additionally include a computer-readable storage media reader , a communications subsystem  (e.g., a modem, a network card (wireless or wired), an infra-red communication device, etc.), and working memory , which can include RAM and ROM devices as described above. In some embodiments, computer system  can also include a processing acceleration unit , which can include a digital signal processor (DSP), a special-purpose processor, and\/or the like.","Computer-readable storage media reader  can be connected to a computer-readable storage medium , together (and, optionally, in combination with storage device(s) ) comprehensively representing remote, local, fixed, and\/or removable storage devices plus storage media for temporarily and\/or more permanently containing computer-readable information. Communications system  can permit data to be exchanged with network  and\/or any other computer described above with respect to system environment .","Computer system  can also comprise software elements, shown as being currently located within working memory , including an operating system  and\/or other code , such as an application program (which may be a client application, Web browser, middle tier\/server application, etc.). It should be appreciated that alternative embodiments of computer system  can have numerous variations from that described above. For example, customized hardware can be used and particular elements can be implemented in hardware, software, or both. Further, connection to other computing devices such as network input\/output devices can be employed.","Computer readable storage media for containing code, or portions of code, executable by computer system  can include any appropriate media known or used in the art, such as but not limited to volatile\/non-volatile and removable\/non-removable media. Examples of computer-readable storage media include RAM, ROM, EEPROM, flash memory, CD-ROM, digital versatile disk (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, an any other medium that can be used to store data and\/or program code and that can be accessed by a computer.","Although specific embodiments of the invention have been described above, various modifications, alterations, alternative constructions, and equivalents are within the scope of the invention. For example, although embodiments of the present invention have been described with respect to certain flow diagrams and steps, it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described diagrams\/steps.","Further, although embodiments of the present invention have been described using a particular combination of hardware and software, it should be recognized that other combinations of hardware and software are also within the scope of the present invention.","The specification and drawings are, accordingly, to be regarded in an illustrative rather than restrictive sense. It will be evident that additions, subtractions, and other modifications may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
