---
title: Apparatus and method for configuring data plane behavior on network forwarding elements
abstract: A method and apparatus for configuring data plane behavior on network forwarding elements are described. In one embodiment, the method includes receiving, within a network element control plane, protocol configuration information extracted from a protocol application utilizing a network protocol application programming interface (API). Once the protocol configuration information is received, the protocol configuration information is processed using a control interface corresponding to the network protocol implemented by the protocol application. Once the protocol configuration information is processed, the control interface programs one or more data plane forwarding elements of the network element according to protocol configuration information. Accordingly, by providing similar control interfaces for multiple, network protocols, inter-operability between components from multiple vendors is enabled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07646759&OS=07646759&RS=07646759
owner: Intel Corporation
number: 07646759
owner_city: Santa Clara
owner_country: US
publication_date: 20030107
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION"],"p":["One or more embodiments of the invention relate generally to the field of network communications and protocols. More particularly, one or more of the embodiments of the invention relate to a method and apparatus for configuring data plane behavior on network forwarding elements.","Today, numerous independent hardware vendors (IHV) produce networking Applications Specific Integrated Circuits (ASIC) to perform a myriad of packet processing tasks. Unfortunately, the current interface to such ASICs are generally memory mapped registers that have corresponding bit level behavior and documentation. However, not all IHVs limit their products to register level descriptions, some offer C-level or other software interfaces to the hardware. However, these interfaces are merely a convenient reflection of the underlying registers and, therefore, differ from one IHV to another.","Furthermore, the register level descriptions or their software interfaces to the hardware ASICs make these various products very difficult to use. In fact, these register level models represent a steep learning curve and tight coupling from an original equipment manufacturer (OEM) or an independent software vendor (ISV) that desires to use the ASIC or networking silicon in a product. At such a micro-level description (i.e., the register bits), it is difficult to write code that is reusable across these various ASICs. In addition, it is also difficult to decipher the micro-level functionality of the ASIC's networking silicon.","A recent trend in the networking industry is the replacement of ASIC, which are relatively inflexible, with more programmable but still performance oriented network devices such as network processors. Unfortunately, network processors are generally in their infancy stages and do not have an abstract programming model or do not have one expressive and flexible enough to grow with advances in the processor itself. Generally, network elements such as switches and routers can be classified into three logical operation components: the control plane, the forwarding plane and the management plane.","In general, the control plane executes different signaling and\/or routing protocols and provides all the routing information to the forwarding plane. The forwarding plane makes decisions based on this information and performs operations on packets such as forwarding classification, filtering and so on. An orthogonal management plane manages the control and forwarding planes. However, the introduction of standardized application programming interfaces (API) within the above-mentioned planes can help system vendors OEMs and end users of these network elements to mix and match components available from different vendors to achieve a device of their choice.","A method and apparatus for configuring data plane behavior on network forwarding elements are described. In one embodiment, the method includes receiving, within a network element control plane, protocol configuration information extracted from a network protocol stack (protocol application) utilizing a network protocol application programming interface (API). Once the protocol configuration information is received, the protocol configuration information is processed using a corresponding control interface of the control plane.","Once the protocol configuration information is processed, the control interface programs one or more data plane forwarding elements of the network element according to the received protocol configuration information. Accordingly, by providing similar control interfaces for multiple network protocols, inter-operability between components from multiple vendors is enabled. As a result, vendor independence is achieved which results in a quicker time to market, improved efficiency, lower costs and greater innovation for future network elements.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments of the present invention. It will be apparent, however, to one skilled in the art that the various embodiments of the present invention may be practiced without some of these specific details. In addition, the following description provides a subset of possible embodiments, and the accompanying drawings thereof, rather than to provide an exhaustive list of all possible implementations of the embodiments of the present invention. In other instances, well-known structures and devices are shown in block diagram form in order to avoid obscuring the details of the various embodiments of the present invention.","System Architecture",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","102","140","140","1","140","102","140","102","140"]},"As a result, the emergence of such multimedia and real-time applications, which utilize networks such, as depicted in , have driven the demand for improving, as well as varying quality of service (QoS), switching, routing and the like from available networks. Likewise, various information (packets), which may be routed through network , may require various specialized, protocol activity. Unfortunately, networks, as depicted in , utilize a traditional best effort service model which does not pre-allocate bandwidth for handling network traffic, but simply routes packets utilizing current available bandwidth on a best effort basis. As a result, varying queuing delays and congestion across the Internet are quite common.","The best effort service model implemented by network  is based on the transmission control protocol (TCP) Internet protocol (IP) (TCP\/IP). Specifically, the protocol implementation refers to Internet protocol version 4 (IPv4). In general, IPv4 is the most widely installed level of Internet protocol in use today. As known to those skilled in the art, an IP address is a 32-bit number that identifies each sender or receiver of information that is sent in packets across the Internet. An IP address generally has two parts: an identifier of a particular network on the Internet; and an identifier of the particular device within the network.","As such, the Internet is an interconnection of many individual networks, and IPv4 is a set of rules for one network communicating with another, provided that the network knows its own Internet address and that of any other networks with which it communicates. Unfortunately, the 32-bit IP address specified by IPv4 is very close to being exceeded. In other words, the Internet's growth makes it likely that without some new architecture, the number of possible network addresses using the addressing scheme provided by IPv4 may soon be exceeded. Likewise, the best effort service model provided by current TCP\/IP is insufficient for various current, as well as future networking applications.","Accordingly, a next generation version of the Internet protocol has been implemented. As known to those skilled in the art, this next generation Internet protocol is referred to as \u201cInternet protocol version 6\u201d (IPv6). The most obvious improvement in IPv6 over IPv4 is that the IP addresses are lengthened from 32-bits to 128-bits. As a result, this extension anticipates considerable future growth of the Internet and provides relief for what was perceived as an impending shortage of network addresses. Furthermore, IPv6 describes rules for three types of addressing: uni-cast (one host to another host); any cast (one host to the nearest of multiple hosts); and multicast (one host to multiple hosts).","In addition, IPv6 provides various enhancements. For example, IPv6 enables an identification mechanism for packets deemed to require a higher QoS relative to other network traffic packets. In other words, packets belonging to an end-to-end path (or \u201cflow\u201d) can be identified as a part of, for example, a multimedia presentation that requires real-time arrival. As a result, by providing this identification, packets requiring real-time delivery or which are sensitive to delay may be given a higher QoS relative to standard network traffic.","For example,  is a block diagram further illustrating the network of  depicted to illustrate the various network elements between, for example, a real-time application server (source computer) , and a destination computer . Due to the fact that the network is configured according to, for example, the IPv4 routing protocol, received network traffic is forwarded based on the best effort service model. As a result, transmission of packetized data  between the real-time application server  and a destination computer  incurs various routing delays due to the fact that congestion across the Internet is quite common as a result of the increasing widespread use of the Internet. For example, during peak hours, transmission of real-time packetized data would incur such substantial delays as to render the application unusable at the destination source computer.","A current network protocol (model) for providing service differentiation (varying QoS) for traffic flows is the differentiated services (DiffServ) model. The DiffServ model provides qualitative differentiation to flow aggregates unlike the hard guarantees such as delay bounds and assured bandwidth provided by the integrated service (IntServ) model. For example, the qualitative differentiation provided by the DiffServ model may be configured to provide Class A higher priority than Class B. Furthermore, the DiffServ model provides data path elements (DPE) including, but not limited to, classifiers, meters, droppers, queues and schedulers.","A further network protocol which may be utilized to, for example, speed up network traffic in order to implement applications which are very sensitive to queuing delays and congestion within the network such as, for example, audio and voice applications, is the multi-protocol label switching protocol (MPLS). The MPLS protocol is a standard approved technology for speeding network traffic flow, as well as simplified management thereof. MPLS involves setting up a specific path for a given sequence of packets identified by a label put into each packet. As a result, time is saved which is generally required for a router to look up the address to the next node to forward the packet.","In addition, MPLS is referred to as a multi-protocol because it works with the Internet protocol, asynchronous transfer mode (ATM) protocol and the frame relay network protocol, as known in the art. Furthermore, MPLS allows most packets to be forwarded at the layer-2 (switching) level, rather than the layer-3 (routing) level. Moreover, in addition to moving traffic faster, MPLS provides simplified management of a network for quality of service (QoS) and Traffic Engineering. Accordingly, networks implementing the MPLS protocol are able to adequately provide sufficient quality of service to different mixtures of network traffic. As described herein, the various routing, switching and QoS protocols described above are collectively referred to as \u201cnetwork protocols.\u201d","Referring now to ,  is a conventional network element  as utilized within network , as shown in . As illustrated, the network element includes a forwarding plane  which uses an ingress filter block , a forwarding decision block  and an egress filter block  to route incoming packets  (-, . . . , -N) to a destination as output packets  (-, . . . , -N), as dictated by the control plane . Unfortunately, network element  provides tightly coupled forwarding and control planes within a single device. As a result, implementing varying QoS, as required by delay sensitive applications, within network element  generally requires intimate knowledge of a proprietary interface used within the device.","However, a recent trend in the networking industry is the replacement of conventional network elements, which are relatively inflexible, with more programmable, but still performance oriented, network devices such as network processors. Unfortunately, network processors are generally in their infancy stages and do not have an abstract programming model or do not have one expressive and flexible enough to grow with advances in the processor itself.","Generally, network elements such as switches and routers can be classified into three logical operation components: the control plane, the forwarding plane and the management plane. For example, the control plane executes different signaling or routing protocols and provides all routing information to the forwarding plane. The forwarding plane makes decisions based on this information and performs operations on packets such as forwarding, classification, filtering and so on. An orthogonal management plane manages the control and forwarding planes.","However, the introduction of standardized application programming interfaces (API) within the above-mentioned planes can help system vendors, OEMs and end users of these network elements to mix and match components available from different vendors to achieve a device of their choice. Accordingly,  is a block diagram illustrating a network element  comprised of a separate control plane  and data plane  coupled together via interconnect , in accordance with one embodiment of the present invention.","In one embodiment, the control interface  enables queries of the data plane for determining information required to program the forwarding element of the data plane . This allows for a larger degree of generality in controlling the specific behavior in network forwarding elements. As described herein, the various parameters and information for generating a tables and populating their entries for implementing the respective protocol, is collectively referred to herein as \u201cprotocol configuration information.\u201d","Accordingly, control interface  is able to program a selected data plane forwarding element (e.g. forwarding elements  \/) to implement third party network protocol stacks (protocol applications , ,  and ) within data plane , regardless of the vendor source of the data plane. In one embodiment, the control interface  programs the data plane  according to protocol configuration information extracted from the protocol application by an API corresponding with the protocol. For example, network element  is illustrated as implementing the IPv4, IPv6 routing protocols, as well as the MPLS and DiffServ network protocols (\u201cnetwork protocols\u201d), via applications  and . Likewise, management\/configuration application  is also provided.","In order to enable the various protocol applications from different third party developers, one embodiment of the present invention provides APIs for, for example, the IPv4 routing protocol, IPv6 routing protocol, MPLS network protocol and DiffServ network protocol. However, various APIs for additional protocols desired may be implemented in accordance with embodiments of the present invention. Accordingly, by utilizing an API in accordance with embodiments of the present invention, a third party protocol applications may be loaded with a vendor A control plane to implement a specific protocol as desired by the third party software developer within a vendor B data plane.","In one embodiment, communication interfacing, as well as implementation of the protocol within the data plane , is handled by the respective protocol API. In other words, control interface  exposes APIs for the protocols described above. As a result, incorporating a corresponding API into a conventional protocol application provides platform independent protocol applications. As such, in one embodiment, the corresponding API provides protocol configuration information extracted from the protocol application to control plane .","In one embodiment, the control plane  uses this protocol configuration information to program the data plane  forwarding elements to implement the protocol. In addition, communication between the control interface  and the data plane  is achieved using, for example, an interconnect message protocol, or the like. For example, the IPv6 routing protocol may be implemented within forwarding element . As illustrated, IPv6 forwarding tables, as well neighbor table  is formed within forwarding element  during device boot-up. In addition, as dictated by the protocol configuration information, the interface-specific table entries ( and ) are generated and populated within the respective table () in order to dictate routing of received packets via interfaces .","Likewise, MPLS includes forward equivalence class (FEC) to next hop label-forwarding entry (NHLFE) tables, which are referred to herein as FEC to NHLFE (FTN) tables. MPLS also includes incoming label map (ILM) tables. In the embodiments described, FTN and ILM (FTN\/ILM) tables may also be implemented within forwarding element  with specific entries (, ,  and ). The specific entries are dictated by the corresponding Label Distribution Protocol (LDP) application in order to control behavior of forwarding elements when receiving corresponding packets via interfaces . Likewise, the IPv4 routing protocol using IPv4 prefix\/nexthop table , as well as the DiffServ routing protocol using Diffserv PHB table , may be implemented within forwarding element .","This capability is provided due to the fact that in one embodiment, the control interface  provides the mechanism to target one of many specific elements within the data plane . That is, a single, specific table entry within the one or more tables within one of multiple forwarding elements may be addressed. Likewise, in one embodiment, the control interface provides a mechanism for control plane components (protocol applications) to query the forwarding elements to determine parameters and capabilities of the data plane.","Accordingly,  is a block diagram illustrating a network  utilizing network elements , as depicted in , in accordance with one embodiment of the present invention. As illustrated, a real-time application server  is able to receive improved\/varying QoS provided by, for example, the DiffServ network protocol within network element . Likewise, other various source computers may require a separate routing\/network protocol such as, for example, IPv4 (for legacy applications) and IPv6 routing protocols, MPLS network, or the like. These protocols may be implemented within the network element using, for example, third party protocol applications including a corresponding protocol API according to an embodiment of the present invention.","Furthermore, the control interface  within network elements  is designed to be completely asynchronous in nature to support any kind of interconnect technology for interconnect  between the control and data planes. Control planes and data planes can be connected using network technologies such as Ethernet, cable line, a bus or optical fiber. Likewise, the connection between the control and data plane could be accomplished via bus technology such as compact PCI (peripheral component interconnect) or the control and data plane could be co-located and connected via interprocess communications. Procedural methods for implementing embodiments of the present invention are now described.","Operation",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6","FIG. 4"],"b":["600","400","602"]},"In one embodiment, the protocol API supports network protocols such as, for example, the DiffServ network protocol, MPLS network protocol, as well as IPv4 and IPv6 routing protocols. Accordingly, implementation of the respective protocol specified by the received protocol configuration information is hidden from the application programmer. Once the protocol configuration information application is received, at process block  the received protocol configuration information is processed using a control interface corresponding to the protocol implemented by the received protocol application.","For example, as depicted with reference to , control interface  is comprised of control interfaces IPv4, IPv6, MPLS and DiffServ control interfaces. As a result, control interface  determines a corresponding protocol interface for processing the application received from, for example, a third party developer. As such, once selected, at process block , one or more data plane forwarding elements of the network element are programmed according to the protocol configuration information extracted from the protocol application, for example, as illustrated in .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 7","FIG. 6"],"b":["606","604","608","420","440"]},"Next, at process block , one or more interface-specific tables are determined that require formation within the selected forwarding element. Once determined at process block , one or more entries within the interface-specific (or protocol-specific) tables are determined by the control interface, according to the protocol configuration information. As a result, a forwarding element containing the interface-specific tables determines routing decisions according to entries within the interface-specific tables. For example, entries - of MPLS table  in addition to entries  and  of IPv6 table  are determined.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 8","FIG. 6"],"b":["622","620","624"]},"At process block  the control interface selects the forwarding element from one or more forwarding elements of the network data plane such as, for example, forwarding element  (). Next, at process block  one or more interface-specific tables, generated within the selected forwarding element at device boot-up, are selected. Once selected at process block , the control interface generates one or more entries within the interface-specific tables of the selected forwarding element, as dictated by the protocol configuration information extracted from a received protocol application by a corresponding protocol API.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 9","FIG. 6"],"b":["632","620","634","636","638"]},"Next, at process block , a forwarding element within the data plane is selected to implement an IPv4 routing protocol. At process block  it is determined whether a request is received from the protocol application, which may include route update requests and ARP update request. When a route request is received, at process block , IPv4 routing entries are either added or deleted within the forwarding table according to the received update request. When an ARP request is received, at process block , IPv4 entries are either added or deleted within the address resolution table according to the received request. Accordingly, process blocks - are repeated until programming of the forwarding elements is complete.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 10","FIG. 6"],"b":["650","620","652","654","656"]},"Next, at process block , a forwarding element is selected from the network element data plane. At process block  it is determined whether a request is received from the protocol application, which may include route update requests and neighbor table update requests. When a route request is received, at process block  IPv6 routing entries are either added or deleted within the forwarding table according to the received request. When a neighbor table update request is received, at process block  IPv6 neighbor entries are either added or deleted in the neighbor table according to the received request. Accordingly, process blocks - are repeated until programming of the forwarding elements is complete.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 11","FIG. 6"],"b":["670","620","672","674","676"]},"Once generated, at process block , an ILM DiffServ context table is generated within the selected forwarding element during device boot-up. Once generated, at process block , it is determined whether a protocol application request is received. When an FTN request is received, process blocks  and  are performed. However, when an ILM request is received, process blocks  and  are formed. Otherwise, control flow returns to process block  (), which generally occurs once programming of the data plane forwarding elements is complete by repeating of process blocks - for each protocol application request.","Accordingly, at process block  MPLS FTN entries are either added or deleted within the FTN table when an MPLS FTN entry request is received. Likewise, at process block , MPLS E-LSP (explicit route label switch path) configuration entries are added or deleted in the FTN DiffServ context tables when an MPLS E-LSP configuration entry request is received. Otherwise, at process block  MPLS ILM entries are either added or deleted within the ILM table when an MPLS ILM entry request is received. Likewise, at process block , MPLS E-LSP pre-configuration entries are added or deleted within the ILM DiffServ context table when an MPLS E-LSP pre-configuration entry request is received.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 12","FIG. 6"],"b":["690","620","692","694","696"]},"Furthermore, at process block , marker entries within a DiffServ marker table are added, modified or deleted when a marker table entry request is received. At process block , dropper entries are added, modified or deleted within a DiffServ algorythmic dropper table generated within the selected forwarding element when a dropper entry request is received. At process block  query entries within a DiffServ queue are added, modified or deleted when a queue entry request is received. Finally, at process block , scheduler entries within a DiffServ scheduler table are either added, modified or deleted when a scheduler table entry request is received.","Finally,  is a flow chart illustrating a method  for behavior of, for example, a network element implementing a control interface in accordance with one embodiment of the present invention. At process block  it is determined whether a packet is received. Once received at process block , it is determined whether an event is triggered by the received packet, such as a \u201cprotocol unsupported\u201d event. When an event is triggered process block  is performed. At process block  a forward element application, implementing the network protocol corresponding to the received packet, is notified of the event. In one embodiment, notification may include forwarding of the received packet to a responsible forwarding element.","Otherwise at process block , a forwarding element, programmed with one or more interface-specific tables corresponding to the network protocol associated with the packet, is determined. Once determined, at process block , at it is determined whether an event is triggered by table look-up, such as a \u201cmissing entry\/no entry found\u201d event. When an event is triggered process block  is performed. At process block  a forward element application, implementing the network protocol corresponding to the received packet, is notified of the event. In one embodiment a \u201cno entry found\u201d event could cause a DROP action of the received packet by the forwarding element.","Otherwise, at process block  the forwarding element processes the packet according to an interface-specific table entry corresponding to the network protocol associated with the packet and populated according to corresponding protocol configuration information. In one embodiment, communication between the control plane and the data plane is provided via, for example, an interconnect messaging protocol as known in the art. In alternative embodiments, additional messaging or communciation protocols between the control plane and data plane may be utilized.","Accordingly, utilizing embodiments of the present invention third party protocol application development for, for example, network processors may be implemented regardless of the vendor source of either the control plane or data plane elements of the forwarding elements such as a network processor. In other words, use of control interfaces and corresponding APIs, in accordance with embodiments of the present invention, allow interoperability between components of multiple vendors for implementing network elements to provide improved, as well as varying quality of service to a plurality of varying network traffic.","Accordingly, by isolating network\/routing protocol implementations within data planes from third party protocol application developers, platform independence is achieved which results in quicker time to market of products, improved efficiency and lower costs and greater innovation. Furthermore, the control interface provided is designed to be completely asynchronous in nature to support any kind of internet interconnect technology between the control and data plane. As a result, control and data planes can be connected using network technologies such as, for example, Ethernet fiber.","Likewise, the connection (interconnect link) between the control and data planes can be made via bus technology such as compact PCI or the control and data plane can be co-located and connected via interprocess communication. Furthermore, the control interfaces provide an easy to use, scaleable and robust interface to configure IPv4\/IPv6\/MPLS\/DiffServ behavior in a network processor data plane. In one embodiment a network processor, for example, as manufactured by the Intel Corporation of Santa Clara, Calif., is used for the management, applications and routing\/MPLS\/QoS applications running in the control plane. Furthermore, integration of third party routing stacks and management applications are also easily implemented utilizing a control interface in accordance with embodiments of the present invention.","Alternate Embodiments","Several aspects of one implementation of the control interface and API for configuring multiple data plane behavior have been described. However, various implementations of the control interface and API provide numerous features including, complementing, supplementing, and\/or replacing the features described above. Features can be implemented as part of the control plane or as part of a network element in different embodiment implementations. In addition, the foregoing description, for purposes of explanation, used specific nomenclature to provide a thorough understanding of the embodiments of the invention. However, it will be apparent to one skilled in the art that the specific details are not required in order to practice the embodiments of the invention.","In addition, although an embodiment described herein is directed to a control interface and APIs for a network element, it will be appreciated by those skilled in the art that the embodiments of the present invention can be applied to other systems. In fact, systems for supporting multiple protocols with a network element fall within the embodiments of the present invention, as defined by the appended claims. The embodiments described above were chosen and described in order to best explain the principles of the embodiments of the invention and its practical applications. These embodiments were chosen to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.","It is to be understood that even though numerous characteristics and advantages of various embodiments of the present invention have been set forth in the foregoing description, together with details of the structure and function of various embodiments of the invention, this disclosure is illustrative only. In some cases, certain subassemblies are only described in detail with one such embodiment. Nevertheless, it is recognized and intended that such subassemblies may be used in other embodiments of the invention. Changes may be made in detail, especially matters of structure and management of parts within the principles of the embodiments of the present invention to the full extent indicated by the broad general meaning of the terms in which the appended claims are expressed.","Having disclosed exemplary embodiments and the best mode, modifications and variations may be made to the disclosed embodiments while remaining within the scope of the embodiments of the invention as defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The various embodiments of the present invention are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
