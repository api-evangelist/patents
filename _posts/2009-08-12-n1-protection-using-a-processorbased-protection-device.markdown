---
title: N+1 protection using a processor-based protection device
abstract: In an N+1 protection scheme for a router in a data or telecommunications network, a processor-based protection unit has a replica device handle, corresponding to each of the N working units, stored in the protection unit's local memory. Each replica device handle is an image of the connections provided by the corresponding working unit. In one implementation, upon detection of a failure of one of the working units, the router's controller unit sends a single command to instruct the protection unit to reconfigure itself using the corresponding locally stored replica device handle to assume the routing functions of the failed working unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08059526&OS=08059526&RS=08059526
owner: LSI Corporation
number: 08059526
owner_city: Milpitas
owner_country: US
publication_date: 20090812
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of the filing date of U.S. provisional application No. 61\/162,409, filed on Mar. 23, 2009 as the teachings of which are incorporated herein by reference in its entirety.","1. Field of the Invention","The present invention relates to data and telecommunications networks, and, in particular, to protection switching for such networks.","2. Description of the Related Art","The traditional approach for N+1 protection switching in a data or telecommunications network is achieved using a switching matrix that is agnostic to the type of connection being routed, and the protection switch is accomplished by reloading the switching matrix via direct writes to the controlling registers. Modern communication devices are typically processor based and rely on a command\/response handshake to set up each connection. The command\/response handshake dictates a serial process for setting up multiple connections and does not lend itself well to protection-switching applications where the timing requirements for the protection switch are typically of the order of tens of milliseconds. A conventional serial command\/response method for protection switching would involve sending several hundred commands, which would take on the order of seconds to execute, a far greater time than is acceptable for a protection switch.","In one embodiment, the present invention is a system comprising one or more working units, a processor-based protection unit, and a controller unit. Each working unit is configurable to provide a set of signal-routing connections. The processor-based protection unit is configurable to provide the set of signal-routing connections of any one of the working units. The controller unit detects failure of one of the working units and transmits a protection-switch command to the protection unit to make a protection switch. The protection unit comprises a multi-service processor (MSP) device, a local memory, and a programmable processor. The MSP device is configurable to provide signal-routing connections. The local memory stores, for each working unit, a replica device handle representing the set of signal-routing connections of the working unit. In response to receipt of the protection-switch command from the controller unit, the programmable processor causes (i) the replica device handle for the failed working unit to be retrieved from the local memory and (ii) the MSP device to be reconfigured based on the replica device handle to provide the set of signal-routing connections of the failed working unit.","In another embodiment, the present invention is the processor-based protection unit for the system described in the previous paragraph.","In yet another embodiment, the present invention is a method for the processor-based protection unit described in the previous paragraph. The method comprises storing, for each working unit, a replica device handle in a local memory of the protection unit, each replica device handle corresponding to the set of signal-routing connections of the working unit. Notice of failure of one of the working units is received and the replica device handle for the failed working unit is retrieved from the local memory. The protection unit is reconfigured to support the set of signal-routing connections of the failed working unit based on the retrieved replica device handle.","In an N+1 protection scheme, the protection unit has to be able to take on the functionality and configuration of any working unit during a protection switch. In one implementation, the protection unit contains a physical multi-service processor (MSP) device and a plurality of replica MSP devices, where each replica MSP device contains the buffered connection image (a.k.a. \u201creplica device handle\u201d) of each working unit that the protection unit is protecting. When a protection switch occurs, the physical MSP device takes on the configuration of the replica MSP device corresponding to the failed working unit. According to certain embodiments of the present invention, in one single command-response handshake, the hundreds of existing connections on the physical MSP device are removed, and the buffered replica connections for the protected MSP device are then physically established. In order to allow a hierarchy of protection switching to occur, the protection unit's device manager can maintain a RAM copy for the active connections for the currently active physical MSP device.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","110","120","130","100","130","120","110"]},"As described in further detail below in conjunction with , protection unit  is a processor-based unit that includes an MSP device and a device manager that controls the operations of the MSP device. As used herein, the term \u201cprocessor-based unit\u201d implies that the unit's device manager is implemented using a programmable processor, such as a general-purpose microprocessor or a field-programmable gate array (FPGA), that can be programmed and reprogrammed with software and\/or firmware to provide different sets of functions. This is different from a \u201chardware-based unit\u201d whose MSP device is controlled by a non-programmable device manager, such as an application-specific integrated circuit (ASIC).","Note that the MSP devices of both hardware-based units and processor-based units can be configured and reconfigured to support different routing connections. This reconfigurability of the MSP device is different from the programmability of the device manager that controls the MSP device.","Each of working units  and protection unit  has an MSP device that can be programmed to route a particular set of incoming signals arriving at the MSP device inputs to a particular set of outgoing signals presented at the MSP device outputs. As represented in , each working unit  has a corresponding device handle , which represents the connections that need to be made within its MSP device to support the desired signal routing. For each device handle  of a working unit , protection unit  stores, in its local memory, a corresponding replica device handle .","Each replica device handle  is a buffered connection image that represents the same connections provided by the corresponding working unit . When a replica device handle  is created, global configuration parameters are copied from the controller-provided source device handle . Specific application programming interfaces (APIs) can be executed with an out-of-service replica device handle. A replica device handle contains a pointer to a block of RAM memory in order to support storing un-processed firmware commands.","The term \u201cout-of-service\u201d device handle is used herein to describe any device handle that is not currently directly servicing any active physical MSP device. The term \u201cin-service\u201d device handle is used herein to describe any device handle that is servicing a physical MSP device. For N+1 protection, \u201cN\u201d out-of-service replica device handles  are created on protection unit  to directly support the \u201cN\u201d working units.","In addition, protection unit  also has its own in-service device handle , which enables protection unit  to provide pre-failure routing of lower-priority signals.","If and when controller unit  determines that one of working units  has failed, controller unit  instructs protection unit  to reprogram itself to provide the signal routing previously provided by the now-failed working unit. In response, protection unit  retrieves the corresponding replica device handle  from its local memory to perform the appropriate MSP device reprogramming.","If and when controller unit  determines that the failed working unit  is ready to resume its signal routing, controller unit  can instruct protection unit  reprogram itself to resume its pre-failure routing of lower-priority signals. In response, protection unit  retrieves its own device handle  from its local memory to perform the appropriate MSP device reprogramming.","Each of replica device handles  is programmed to contain the database of the respective working unit's global configuration details and connection information. Each time a connection is created\/deleted\/modified on any working unit , controller unit  instructs protection unit  to update the corresponding replica device handle  on the protection unit. The application on protection unit  calls already-existing protocol specific APIs, but with the replica device handle that corresponds to the working unit. This keeps replica device handles  of the working units that reside on protection unit  in sync with the actual device handles  residing on the active working units . This synchronization is the responsibility of controller unit .","When calling APIs with out-of-service replica device handles, the command information is not sent to firmware. The command information is saved in pre-allocated RAM memory for use later.","When a protection switch occurs, one device handle (e.g., device handle ) is taken out of service, and a replica device handle  is placed in service. The replica device handle, which already is configured with an image of the failed working unit's connection information (and global configuration information), switches state to become an in-service replica device handle. The firmware first executes a block delete to remove all existing connections from the MSP device, and then the connection-creation commands in RAM are executed to program the MSP device on the protection unit with the failed working unit's connection configuration.","With this solution, the MSP device manager execution overhead is removed, since the replica device handles are maintained and populated during normal operation, rather than at the instant a protection switch is needed. The primary overhead now becomes simply the firmware executing the connection-add commands that are already formulated in RAM memory.","This design also handles restoring the protection unit to its original state when the protection switch is undone. This design does not assume that the protection unit is not doing anything if it is not protecting any working unit. Such being the case, device handle  of the protection unit is a device handle that gets created with a state of in service since it is actively servicing an MSP device (i.e., the protection unit's MSP device). A block of RAM is allocated for firmware-connection commands associated with the protection unit when the protection unit is routing its own low-priority signals. When the protection switch is undone, the protection unit is re-configured to resume its activities.","Essentially all device handles on the protection unit are created as replica device handles so that the replica device handles can be switched in service and out of service, and commands will be available to the firmware to configure and reconfigure the MSP device to the desired state. It is the controller unit's responsibility to maintain synchronous working unit database and RAM images for each out-of-service, replica device handle on the protection unit. It is the MSP device manager's responsibility to maintain synchronous images of RAM for an in-service, replica device handle.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","120","130","200","210","220","210","220"]},"MSP device  includes:\n\n",{"@attributes":{"id":"p-0033","num":"0041"},"figref":["FIG. 3","FIG. 2","FIG. 3"],"b":["200","200","310","320","330","310","210","320","226","320","330","225"]},"MSP protocol stack  includes:\n\n","DAPI firmware  includes:\n\n",{"@attributes":{"id":"p-0036","num":"0053"},"figref":["FIG. 4","FIG. 1","FIG. 4","FIG. 4"],"b":"100","ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["Controller unit (CU) application  represents the application-level software running on controller unit  of ;","Working unit (WU) applications  collectively represent the application-level software running on the four working units  of ;","Protection unit (PU) application  represents the application-level software running on host processor  of  when routing unit  is used to implement protection unit  of ; and","PU device manager  represents the MSP device-manager software running on host processor  of  when routing unit  is used to implement protection unit  of .\n\nNote that PU application  and PU device manager  are represented collectively in  as application code . In , arrows - represent communications and actions associated with protection-switch setup, while arrows - represent communications and actions associated with protection-switch execution.\n"]}}}},"In particular, the processing of  begins with CU application  sending commands  and  instructing WU applications  and PU application  to configure working units  and protection unit , respectively, for normal operations. As described earlier, working units  respond by configuring their respective MSP devices to support the signal routing dictated by their respective device handles . In , arrow  represents all of the communications between CU application  and WU applications  involved in configuring working units  for normal operations. Similarly, arrows  and  represent all of the communications between CU application  and PU application  involved in configuring protection unit  for normal operations.","In response to command(s) , PU application  sends command(s)  to PU device manager  to set up the device manager implemented by host processor . This includes specifying (i) the number of replica device handles  that will be stored in protection unit  and (ii) an optional boolean value that indicates whether or not command images for the current in-service device handle  should be maintained (i.e., whether or not protection unit  needs to save a device handle corresponding to its own current pre-failure routing configuration). If the boolean value is not implemented, then protection unit  will always save a device handle corresponding to its own current pre-failure routing configuration.","In response () to command(s) , PU device manager  allocates random access memory (RAM) for the specified number of replica device handles  and, if dictated by the specified boolean value, allocates RAM for a device handle  corresponding to its pre-failure signal-routing configuration. PU device manager  sends message  to PU application  confirming whether or not the device manager was set up properly.","Assuming that the device manager was properly set up, PU application  sends command(s)  to PU device manager  to create each replica device handle  as needed. In response, PU device manager  sets up () each replica device handle  and sends message(s)  confirming whether or not each replica device handle  was created properly. Assuming that each replica device handle  was properly created, PU application  maintains () a mapping of replica device handles  corresponding to the different working units .","For each signal-routing channel of each working unit , CU application  sends command(s)  to PU application  identifying the channel, and PU application  sends corresponding command(s)  to PU device manager , which responds by (i) storing () that channel information in the appropriate replica device handle  in embedded RAM memory  of  and (ii) sending message(s)  (a) confirming whether or not the channel was stored properly and (b) providing PU application  with a connection handle for the channel. PU application  maintains () mappings of the connection handles for the different channels in the different working units .","If and when a working unit  fails, CU application  detects that event, either by receiving an explicit failure message  from the failed working unit  or via some other means (e.g., failure to receive an expected message from the failed working unit  within a specified amount of time). Note that it cannot be assumed that controller unit  can communicate with a working unit  at the time that the working unit is faulty. In response, CU application  sends command  to PU application  informing PU application  that the particular working unit  has failed. In response, PU application  sends command  to PU device manager  for the device manager to reconfigure MSP device  based on the corresponding replica device handle  stored in embedded RAM memory . In response (), PU device manager  controls MSP device  to be reconfigured based on that retrieved replica device handle . This involves calling the MSP firmware to remove the current channel configuration and create the appropriate new channels. PU device manager  sends message(s)  to PU application  confirming whether or not the protection switch was completed properly.","Because the replica device handles  were previously stored in the protection unit's memory , in certain embodiments of the present invention, only a single command (i.e., command ) is required to be transmitted from CU application  to PU application  to implement a protection switch. This compares with certain prior-art embodiments that require, after the failure of a working unit, an individual command to be transmitted from the controller unit to the protection unit for each channel connection of the failed working unit. In certain implementations, the ability to implement protection-switching with only a single command represents a protection-switch execution-time improvement of two orders of magnitude from seconds down to 10 s of milliseconds.","Note that, prior to failure of a working unit and the corresponding protection switch, the sets of connection commands represented in replica device handles  stored in the protection unit's embedded memory , can be modified at any time up to the actual protection switch to mirror dynamically the tear-down and set-up of connections in the working units.","In one possible implementation, all of the working units  have the same priority level. In that case, protection unit  is able to assume the routing functions of the working unit that fails first. If another working unit fails before the first-failed working unit is able to resume its functions, then no protection switching will be available for the second-failed working unit. In another possible implementation, the working units  have different priority levels. In that case, if the second-failed working unit has a higher priority level than the first-failed working unit, then the protection unit can be commanded to switch from providing the routing functions of the first-failed, lower-priority working unit to providing the routing functions of the second-failed, higher-priority working unit.","In one possible N+1 protection switch architecture, the MSP global device configurations of the protection unit and all \u201cN\u201d working units are identical. Nevertheless, the connection configuration is unique for each of the working units.","Although the present invention has been described in the context of a router having four working units protected by a single protection unit, the invention is not so limited. In general, the present invention can be implemented in the context of any suitable number of working units and any suitable number of protection units in a router or other suitable type of network node.","The present invention has been described in the context of a router having processor-based working units and a processor-based protection unit. In alternative embodiments, one or more or even all of the working units can be hardware-based units.","The present invention may be implemented as (analog, digital, or a hybrid of both analog and digital) circuit-based processes, including possible implementation as a single integrated circuit (such as an ASIC or an FPGA), a multi-chip module, a single card, or a multi-card circuit pack. As would be apparent to one skilled in the art, various functions of circuit elements may also be implemented as processing blocks in a software program. Such software may be employed in, for example, a digital signal processor, micro-controller, or general-purpose computer.","The present invention can be embodied in the form of methods and apparatuses for practicing those methods. The present invention can also be embodied in the form of program code embodied in tangible media, such as magnetic recording media, optical recording media, solid state memory, floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of program code, for example, whether stored in a storage medium, loaded into and\/or executed by a machine, or transmitted over some transmission medium or carrier, such as over electrical wiring or cabling, through fiber optics, or via electromagnetic radiation, wherein, when the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus for practicing the invention. When implemented on a general-purpose processor, the program code segments combine with the processor to provide a unique device that operates analogously to specific logic circuits.","Unless explicitly stated otherwise, each numerical value and range should be interpreted as being approximate as if the word \u201cabout\u201d or \u201capproximately\u201d preceded the value of the value or range.","It will be further understood that various changes in the details, materials, and arrangements of the parts which have been described and illustrated in order to explain the nature of this invention may be made by those skilled in the art without departing from the scope of the invention as expressed in the following claims.","The use of figure numbers and\/or figure reference labels in the claims is intended to identify one or more possible embodiments of the claimed subject matter in order to facilitate the interpretation of the claims. Such use is not to be construed as necessarily limiting the scope of those claims to the embodiments shown in the corresponding figures.","It should be understood that the steps of the exemplary methods set forth herein are not necessarily required to be performed in the order described, and the order of the steps of such methods should be understood to be merely exemplary. Likewise, additional steps may be included in such methods, and certain steps may be omitted or combined, in methods consistent with various embodiments of the present invention.","Although the elements in the following method claims, if any, are recited in a particular sequence with corresponding labeling, unless the claim recitations otherwise imply a particular sequence for implementing some or all of those elements, those elements are not necessarily intended to be limited to being implemented in that particular sequence.","Reference herein to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular feature, structure, or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment, nor are separate or alternative embodiments necessarily mutually exclusive of other embodiments. The same applies to the term \u201cimplementation.\u201d"],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Other aspects, features, and advantages of the present invention will become more fully apparent from the following detailed description, the appended claims, and the accompanying drawings in which like reference numerals identify similar or identical elements.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
