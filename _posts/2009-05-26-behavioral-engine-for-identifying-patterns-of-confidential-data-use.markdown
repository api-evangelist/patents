---
title: Behavioral engine for identifying patterns of confidential data use
abstract: A client device hosts a behavioral engine. Using the behavioral engine, the client device analyzes behavior of a client application with respect to confidential information. The client device assigns a rating indicative of risk to the client application based on the behavior of the client application. The client device performs an action to mitigate risk of data loss if the rating exceeds a threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08752180&OS=08752180&RS=08752180
owner: Symantec Corporation
number: 08752180
owner_city: Mountain View
owner_country: US
publication_date: 20090526
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PRESENT INVENTION"],"p":["Embodiments of the invention relate to malware detection, and more particularly to the detection of malware that operates on confidential information.","Traditional antivirus software that uses signatures to detect malware offers limited protection for uncharacterized threats (known as 0-day exploits). Malware is software that is designed to infiltrate or damage a computer system without the informed consent of a user or administrator. Malware includes computer viruses, worms, Trojan horses, rootkits, spyware, adware, crimeware (a class of malware designed to automate financial or political crime), and other dishonest or unwanted software. Such antivirus software typically does not detect or remove malware until a signature for the malware has been written and distributed to the antivirus software. This delay poses a serious threat for computer systems.","Heuristic engines have been developed by antivirus vendors to detect malware without using signatures. However, these heuristic engines examine how potential malware interacts with the operating system on which they operate (e.g., hooking application programming interfaces (APIs), injecting code, modifying registry keys, etc. These heuristic engines analyze the code of the potential malware to determine if the actions that it takes are typical of malware. Conventional antivirus heuristic engines do not have any information regarding whether data contains confidential information, nor do conventional heuristic engines analyze how potential malware behaves with regards to confidential information.","A client device hosts a behavioral engine. Using the behavioral engine, the client device analyzes behavior of a client application with respect to confidential information. The client device assigns a rating indicative of risk to the client application based on the behavior of the client application. The client device performs an action to mitigate risk of data loss if the rating exceeds a threshold.","A method and apparatus for preventing malware from stealing confidential information is described. In one embodiment, a client device hosts a behavioral engine. Using the behavioral engine, the client device analyzes behavior of a client application with respect to confidential information. Analyzing the behavior of the client application may include detecting operations of the client application on data that includes confidential information and\/or identifying a pattern of how the client application uses confidential data. The client device assigns a rating indicative of risk to the client application based on the behavior of the client application. The rating may be a risk rating, a security rating, or some other rating indicative of risk. The rating may be assigned based on one or more operations that the client application has performed on data that includes confidential information and\/or based on the pattern of how the client application uses confidential information. The client device performs one or more actions to mitigate risk of data loss if the rating exceeds a threshold. The performed actions may include quarantining the client application, blocking access (e.g., network access) to the client application, terminating the client application, notifying a system administrator of the client application, requesting a detailed scan of the client application, and so on.","In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed description that follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201canalyzing\u201d, \u201cdetecting\u201d, \u201cperforming\u201d, \u201cdetermining\u201d, \u201cdisplaying\u201d or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1","b":["100","100","102","106","104","104","115","104","115"]},"Each client  may be a personal computer (PC), a laptop, a mobile phone, a server, or any other computing device. One or more clients  may host a client-based malware prevention system (MPS)  that monitors operations of client applications . A client application  is an application that runs on the client . The client-based MPS  monitors operations of the applications  that store, transform and\/or transmit data, as well as other operations on data.","In one embodiment, the client-based MPS  includes a file system monitor  to monitor operations that are performed via a file system. In one embodiment, the file system monitor  includes a file system hook that intercepts commands to access, store, modify, etc. files stored remotely on network storage  and locally on local storage . The file system monitor  may also include one or more drivers (e.g., file system filter drivers, device drivers, etc.) and\/or kernel modules. For example, the file system monitor  may include one or more file system filter drivers that can determine which applications  start or stop executing (e.g., by intercepting OS calls for process creation or deletion), and that can identify I\/O requests (including the file being accessed, the application accessing the file, an indication as to whether the file being accessed is stored on a remote or local storage device, etc.) of executing applications .","In one embodiment, the client-based MPS  includes a network monitor  to monitor operations that are performed by a client application  over the private network . The network monitor  inspects network communications such as email, instant messages, web traffic (e.g., via hypertext transport protocol (HTTP)), file transfer protocol (FTP) traffic, point-to-point (P2P) traffic, generic transmission control protocol\/internet protocol (TCP\/IP) traffic, and so on. In one embodiment, the network monitor  includes a network analyzer for monitoring network communications. In one embodiment the network analyzer includes a packet analyzer and\/or packet sniffer.","When either the file system monitor  or the network monitor  detects an operation on data, the client-based MPS  analyzes the data to determine whether the data contains confidential information. If the data does contain confidential information, then the client-based MPS  performs a behavioral analysis on the application  performing the operation to determine whether that application  may be designed to steal confidential information. If, based on the behavioral analysis, the client-based MPS  determines that the application  is or may be malware, then the client-based MPS  implements one or more policies to mitigate the risk posed by the application . The client-based MPS  is discussed in greater detail below with reference to .","In one embodiment, the client-based MPS  reports the violation of the policies to a sever based MPS  hosted by server . Such reports may be sent in real-time, periodically, based on some administrator designed trigger, etc.","Server  may be any computing device capable of communicating with clients  and performing operations described herein. Server-based MPS  defines data loss prevention (DLP) policies for preventing leakage of confidential information and\/or malware policies for the prevention and removal of malware such as viruses, Trojan horses, worms, and so forth. Based on the DLP policies and malware policies, the server-based MPS  monitors traffic (e.g., email messages, text messages, web requests, etc.) incoming to, and outgoing from, the clients  to determine whether any transmitted content includes confidential information protected by the DLP policies, and whether any transmitted content includes malware and\/or is transmitted by malware. In one embodiment, the server-based MPS  performs all of the functions described with reference to the client-based MPS . In addition, the server-based MPS  receives reports from the clients  that identify violations of the DLP policies and malware policies that are detected on the clients  by client-based MPS . The server-based MPS  then takes appropriate actions with respect to the policy violations. For example, the server-based MPS  can report the policy violations to a system administrator, instruct client-based malware prevention systems  to blacklist client-based applications  violating the policies, etc.","In an example, assume that a client-based MPS  detects a client application  that is transmitting confidential information to a location outside the private network  (e.g., somewhere within public network ). This client-based MPS  sends a report of the client application  to the server-based MPS . The server-based MPS  blacklists the client application , and notifies all client-based malware prevention systems  on the private network  that the client application  has been blacklisted. Therefore, if the application  spreads to other clients , they will automatically take measures to mitigate any risk that the application  will steal confidential information.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 1"],"b":["200","200","202","204","206","208","210","212","200","200","206","208","210","212","206","210","202","204","130","135","200","112","200","114"]},"The DLP agent  receives reports identifying operations on data from the file system monitor  and\/or the network monitor  whenever the file system monitor  or network monitor  detect such operations. Operations on data include communications (e.g., IM, FTP, email, etc.), file system operations (e.g., read operations, write operations, etc.), operations to transform data (e.g., to compress or encrypt data), and so on. The DLP agent  analyzes all identified operations on data by scanning the contents of the data to determine whether the data contains confidential information. For example, the DLP agent  may identify whether data contains social security numbers, credit card numbers, and so on. If the DLP agent  detects an operation on data that includes confidential information, it notifies the behavioral engine  of the operation. In one embodiment, the notification includes an identification of what confidential data was operated on. The notification may also include an identification of the amount of confidential information, the application performing the operation, the type of operation, etc.). If the scanning shows that the data does not include confidential information protected by a DLP policy, the DLP agent  ignores the operation.","The behavioral engine  is a heuristic engine that determines whether applications are using confidential data for legitimate or illegitimate purposes. The behavioral engine  analyzes detected usage of confidential information, and compares this usage to one or more usage models or profiles. If the usage is similar to a usage signature of malware, then in one embodiment the behavioral engine  assigns a high risk rating to the application. In another embodiment, a low security rating may be assigned if the usage is similar to a usage signature of malware. Alternatively, some other appropriate rating value that is indicative of a high risk may be assigned if another rating system is used.","In one embodiment, the behavioral engine  profiles the activities of trusted applications and\/or other legitimate applications to develop a model or models of legitimate and illegitimate usage of confidential information. Behavioral engine  may also profile the activities of malware applications, such as crimeware, that are designed to steal or otherwise misuse confidential information. In one embodiment, behavioral engine  is preprogrammed with one or more profiles of legitimate and\/or malware applications and\/or models based on such profiles.","Profiles of legitimate applications identify different types of benign behavior. For example, a profile of a word processing application may include a few read and write operations to data that includes confidential information if a user normally uses the word processing application to open and\/or write a few documents containing confidential information a day. The profile may also include an even distribution of folders from which files are accessed, and other characteristics of standard word processor activity. If the behavioral engine  detects an application that is reading and writing dozens of documents that include confidential information in a day, this may raise an alarm based on the profile and\/or a model that includes the profile.","In one embodiment, at least some legitimate application profiles are based on patterns of how users access email, access files, send email, move confidential data across endpoints, etc. The behavioral engine  considers the information accessed, how the data is being accessed, the rate at which confidential information is being accessed, the percentage of data that is being accessed that contains confidential information, etc. Behavioral engine  may also consider the types of files being operated on, how recently the files being operated on were modified, and\/or whether an application is reading an entire file or just examining metadata.","In the case of intercepted communications, the behavioral engine  examines where the client application is moving data to (e.g., whether it is attempting to transmit data to a location that is external to a private network on which the client hosting the local application resides).","In the case of intercepted commands to transform data, the behavioral engine  determines whether the client application is attempting to manipulate data in such a way to conceal the confidential information, such as compressing or encrypting the data. The behavioral engine may also look at whether the application is copying confidential data to a container (e.g., a protected container). If data with confidential information is transformed, then the behavioral engine may generate a flag for the transformed data indicating that it contains confidential information. Therefore, it may be easier to later determine that the transformed data contains confidential information.","In the case of intercepted commands for file system operations, the behavioral engine  may consider the location from which the confidential information was read and\/or the location to which it is saved. The behavioral engine  may also consider the locations of data frequently operated on by the client application and\/or the locations of data frequently operated on by other applications. For example, if the application only attempts to access data that is stored in locations that are more likely to include confidential information (e.g., the My Documents folder in Windows, specific network locations, etc.), then a likelihood that the application is malware is increased. Additionally, different locations (e.g., directories) may only be accessible to certain applications and\/or user accounts. Behavioral engine  may consider whether the application is accessing confidential information that it is not entitled to access, whether the application is running from a user account that is not entitled to access the confidential information.","In one embodiment, the behavioral engine examines characteristics and statistics of the application itself to better determine whether the application is malware. For example, behavioral engine  may consider how many clients include an application. Enterprise approved applications will typically be present on many clients, while at least some types of malware applications have a tendency to only be present on a few clients.","In one embodiment, the behavioral engine  examines circumstances surrounding the application's attempt to perform an operation on confidential information. For example, the behavioral engine  may determine whether a user is present on the client when the confidential information is being accessed (e.g., based on keyboard and mouse activity), whether the user was directing the application to perform the operation, or whether the application performed the operation without user involvement.","In one embodiment, for applications that include plugins and\/or extensions, the behavioral engine  separately monitors the behavior of each plugin and\/or extension. For example, Internet Explorer by Microsoft, Inc. often includes a variety of plugins, some of which may be browser helper objects (BHOs) that are designed to steal confidential information. The behavioral engine  may separately identify the BHOs, and assign high risk ratings to them, while assigning low risk ratings to legitimate plugins such as a pdf reader or Quicktime media player.","In one embodiment, before the behavioral engine  assigns a risk rating to an application, the behavioral engine  determines whether the application is a trusted application. A trusted application is an application that has been verified as a legitimate application by a security certificate authority such as Verisign. Trusted applications may include office suite applications (e.g., Microsoft\u00ae Word\u00ae, Open Office, etc.), file manager programs (e.g., Windows\u00ae Explorer\u00ae, Universal Explorer\u00ae, etc.), command line interpreter programs (e.g., Windows\u00ae PowerShell\u00ae, Unix Shell, etc.), or any other known commercial applications. Applications that are not trusted applications may be internal applications developed in house by an enterprise, malware, or other unknown applications. In one embodiment, the behavioral engine  determines whether an application is a trusted application by examining a certificate of the application that has been signed by a security certificate authority such as Verisign.","In one embodiment, the behavioral engine  maintains records of each of the client applications. As a client application performs more operations, a more accurate determination of the threat posed by the client application can be made. In one embodiment, the behavioral engine  assigns a high risk rating to newly identified applications upon first detecting them performing operations on confidential data. This risk rating may later be lowered as the application performs additional operations that are not suspicious, or after an administrator indicates that the application is not malware. In another embodiment, the behavioral engine  initially assigns a low risk rating, and increases the risk rating as the application is detected to exhibit additional suspicious behavior.","In one embodiment, the behavioral engine  determines that it needs to generate a new profile based on the behavior of the application, and generates a new profile. The new profile may be a new profile of a malicious application or a new profile of a benign application. The new profile may be used to update a model of legitimate and\/or illegitimate usage of confidential information. As the number of profiles increases, and the amount of information available to generate and refine the profiles increases, the behavioral engine can improve the effectiveness of distinguishing legitimate applications from malware applications.","In one embodiment, antivirus agent  receives information on the activities of applications from file system monitor  and\/or network monitor . The information may include information on operations performed by applications on data and\/or other activities of the application. The antivirus agent  includes a malware detector (not shown) that uses a signature based malware detection engine and\/or a heuristic malware detection engine. The signature based malware detection engine may determine whether the application performing the operation is known malware for which a signature has been created. The heuristic based malware detection engine monitors behavior of the application with regards to how it interacts with an operating system hosting the MPS . The heuristic malware detection engine identifies processes opened by the application, whether the application modifies registry keys, hooks APIs, injects code, or performs other process or operating system related activities. The heuristic malware detection engine looks at activities related to processes, and is not data content aware. The heuristic malware detection engine in one embodiment generates a risk rating that is distinct from the risk rating calculated by the behavioral engine.","In one embodiment, the behavioral engine  is integrated into the antivirus agent . The behavioral engine  may be separate from the heuristic malware detection engine of the antivirus agent , or the heuristic malware detection engine may be modified to include the functionality of the behavioral engine .","The policy enforcer  receives threat assessment information (e.g., risk ratings) from the behavioral engine  and\/or antivirus agent . The policy enforcer  includes one or more policies for preventing malware from stealing confidential information. The policy enforcer  determines whether any of the policies indicate that actions should be taken based on the reported threat level of the application. In one embodiment, the policy enforcer  considers both the risk ratings received from the antivirus agent  and from the behavioral engine  when determining whether any policies have been violated. Alternatively, the policy enforcer  considers only the risk rating provided by the behavioral engine . Actions that may be taken by the policy enforcer include blacklisting the client application, blocking network access to the client application, terminating the client application, notifying an administrator of the client application, and so on.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","300","200"]},"Referring to , processing logic begins with detecting an operation of a client operation on data at block . The operation may be an operation to save the data to a local or network storage, transmit the data, transform the data (e.g., compress or encrypt the data), etc.","At block , a malware prevention system scans the data to determine whether it contains any confidential information. If the data does not contain any confidential information, then the method ends. If the data does contain confidential information, the method proceeds to block .","At block , the malware prevention system determines whether the client application is a trusted application. In one embodiment, this determination is made by checking a digital certificate of the client application. If the client application has a digital certificate signed by a security authority, then the client application is a trusted application. If the client application is not a trusted application, the method continues to block . In one embodiment, if the client application is a trusted application, the method ends. Alternatively, if the client application is a trusted application, the method may still continue to block . For example, some trusted applications are known to have security flaws that enable malware to easily infest the trusted application. An example is the internet explorer application provided by Microsoft, Inc, which is fairly easy to infect with browser helper objects (BHOs) or other injectable code. In one embodiment, if the trusted application is known to have such security flaws, the method will continue to block .","At block , the malware prevention system analyzes the behavior of the client application that performed the operation. In one embodiment, the malware prevention system maintains a record of operations performed by the client application. The record may include a record of both operations on data that does not contain confidential information and on data that does contain confidential information, or may only include a record of those operations that were on data that included confidential information.","In one embodiment, the malware prevention system determines previous operations of the client application on other data that included confidential information (block ). The malware prevention system can then identify a pattern of how the client application uses confidential information (block ). Based on current and historical use of confidential information by the client application, at block  the malware prevention system assigns a rating indicative of risk to the client application. In one embodiment, the malware prevention system assigns a risk rating to the client application. A low risk rating indicates that the application poses a low risk, and a high risk rating indicates that the application poses a high risk. In another embodiment, the malware prevention system assigns a security rating to the client application. A low security rating indicates that the application poses a high risk and a high security rating indicates that the application poses a low risk. Other types of ratings that are indicative of risk posed by the client application may also be used.","The assigned rating depends on the type of operations performed on the confidential information, the frequency with which the client application performs operations on confidential information, the amount of confidential information that the client application has performed operations on, etc. For example, if a client application has stored a lot of confidential information to disk, a rating indicative of a high risk (e.g., a high risk rating) might be assigned to the application. Alternatively, if the client application has transferred just one or a few documents that contain confidential information to a server outside of a private network (e.g., to a server known to host malicious software), then a rating indicative of a high risk may also be applied.","At block , the malware prevention system determines whether there are any policies that are associated with the calculated rating. If there are policies that are associated with the calculated rating, the method proceeds to block  and actions indicated by those policies are performed. Such actions may include blacklisting the client application, blocking network access to the client application, terminating the client application, notifying an administrator of the client application, etc. If there are no policies associated with the calculated rating (e.g., if a risk rating is assessed to be a zero), then the method ends without any actions being performed.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 4","b":"400"},"The exemplary computer system  includes a processor , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a secondary memory  (e.g., a data storage device), which communicate with each other via a bus .","Processor  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processor  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Processor  is configured to execute instructions  (e.g., processing logic) for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The secondary memory  may include a machine-readable storage medium (or more specifically a computer-readable storage medium)  on which is stored one or more sets of instructions  (e.g., software) embodying any one or more of the methodologies or functions described herein. The instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system , the main memory  and the processing device  also constituting machine-readable storage media.","The machine-readable storage medium  may also be used to store the user malware prevention system  of , and\/or a software library containing methods that call the malware prevention system. While the machine-readable storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable storage medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-readable storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
