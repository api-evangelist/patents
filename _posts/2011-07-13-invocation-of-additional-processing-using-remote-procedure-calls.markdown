---
title: Invocation of additional processing using remote procedure calls
abstract: In one embodiment, a method for invoking additional processing at a remote computing device using remote procedure calls (RPCs) is provided. In this method, a list of functions supported by the remote computing device is received from the remote computing device. From the list of functions, a function that requires metadata about the function is identified. The metadata and argument required by the function is accessed, and an RPC message that includes the metadata and the argument is composed. The RPC message is then transmitted to the remote computing device. Here, the RPC message is transmitted to call the function with the argument as input and to invoke the additional processing based on the metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009740&OS=09009740&RS=09009740
owner: Adobe Systems Incorporated
number: 09009740
owner_city: San Jose
owner_country: US
publication_date: 20110713
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS"],"p":["The present disclosure relates generally to inter-process communication. In one example embodiment, the disclosure relates to the invocation of additional processing using remote procedure calls.","A remote procedure call (RPC) is a protocol that a program can use to request a service from a program located in another computing device on a shared network without a programmer explicitly coding details for this remote interaction. That is, RPC is an inter-process communication mechanism that enables data exchange and invocation of functionality residing in a different process. With RPC enabled, the programmer writes essentially the same code whether the subroutine is remote or local to the executing program.","RPC is especially well suited for client-server interaction where a requesting program is a client and a service-providing program is a server. The client can initiate an RPC by transmitting a request message to a remote server to execute a function with supplied parameters. In turn, the remote server can transmit a response to the client as a result of the execution of the requested function.","In standard RPC, the functions provided by a standard client run-time library have fixed application programming interfaces that require strict contracts for implementation. Particularly, other than the processing needed to move data to and from a client, a remote server cannot perform additional processing other than the processing resulting from the execution of the requested function. As a result, many existing RPC protocols cannot be integrated into, for example, existing enterprise systems that provide many different or additional functionalities that are not supported by standard RPC protocols.","In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of an example embodiment of the present disclosure. It will be evident, however, to one skilled in the art that the present disclosure may be practiced without these specific details.","Embodiments provide various techniques for invoking additional processing using remote procedure calls. One technique involves the addition of metadata to an RPC message. This metadata is different from parameters required in the execution of a function. As explained below, the metadata provides information about the invocation of processes that enable additional features, which are not supported by standard RPC protocols. The different types of additional processes that can be invoked are explained in more detail below.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1","b":["100","100","110","102","104","110","102","110","110","150","112","113"]},"The applications  running on the server computing device  are accessible from one or more client computing devices  (e.g., desktop computers, mobile phones, laptops, tablet computers, and personal digital assistants) through thin client interfaces, such as a Web browser. The applications  are computer programs that provide a variety of functionalities that may be based on the access of data stored in the database . Examples of applications  include social networking websites, video sharing websites, hosted services, web applications, and other applications.","Each of these applications  relies on one or more enterprise applications , which refer to the underlying structure supporting communications among units of work (also referred to as services) executed on behalf of the applications . An example of an enterprise application  is the ADOBE LIVECYCLE Data Services ES, which is a framework used in the development of various enterprise applications  that automate a broad range of business processes. Such enterprise applications  can, for example, provide data capture (e.g., create and deploy Extensible Markup Language (XML) based form templates such as ADOBE PDF or HyperText Markup Language (HTML) for use with the ADOBE READER, ADOBE FLASH Player, and web browsers), information assurance (e.g., digital signatures and rights management), document output (e.g., ADOBE PDF Generator, form generators, and output production prints), content services, and process management to deliver business processes such as account opening, services and benefits enrollment, correspondence management, requests for proposal processes, and other business-related workflows.","The applications  communicate with enterprise applications  over one or more interfaces provided by the enterprise applications . The applications  may, in turn, support client applications executed by client computing devices . Such a client application may, for example, include a Web browser to access and display reports generated by the applications . In this regard, the server computing device  may, for example, be a Web server that manages interactions with the client computing devices .","In this enterprise system , the server computing device  is configured to process RPCs. An RPC is a protocol that a program can use to request a service from a program located in another computing device on a shared network without a programmer explicitly coding details for this remote interaction. Particularly, an RPC is an inter-process communication mechanism that enables a program to cause a function (e.g., subroutine and procedure) to execute in another computing device on a shared network. In the enterprise system  depicted in , a client computing device  can initiate an RPC, thereby sending an RPC message to a known remote server computing device  requesting execution of a specified function with supplied parameters. The remote server computing device  may transmit a response to the client computing device  based on the execution of the function. Examples of RPC protocols include XML-RPC, Simple Object Access Protocol (SOAP), and Java Remote Method Invocation (JAVA-RMI).","In accordance with embodiments of the present invention, additional metadata may be included in one or more RPC messages transmitted from the client computing devices  to the server computing device . As explained in more detail below, in one embodiment, the metadata may be embodied as an annotation in a function definition. This metadata can invoke additional processing at the client computing devices  and\/or server computing device , the additional processing of which is not supported by standard RPC protocols. As also explained in detail below, examples of additional processing include paging, load associated property on demand, notifications of modifications, change objects on updates, changes made to objects, and a variety of other different processes.","It should be appreciated that other system topologies may be used in conjunction with other embodiments, and that the computing devices  and  may include other elements that are not shown and may be used during operation thereof, such as any suitable program code, scripts, or other functional data that are executable to interface with other elements of the enterprise system , other applications, other data files, operating system files, and device drivers. Furthermore, two or more elements of the enterprise system  may be located remote from one another and may communicate with one another via the network  and\/or a dedicated connection. Moreover, each displayed element of enterprise system  may comprise any number of hardware and\/or software elements, some of which are located remote from each other element. The elements described herein as communicating with one another are directly or indirectly capable of communicating over any number of different systems for transferring data, including, but not limited to, shared memory communication, a local area network (LAN), a wide area network (WAN), a telephone network, a cellular network, a fiber-optic network, a satellite network, an infrared network, a radio frequency network, and any other type of network  that may be used to transmit information between computing devices. Additionally, communication between systems or computing devices (e.g., between client computing device  and server computing device ) may proceed over any one or more transmission protocols that are or become known, such as Asynchronous Transfer Mode (ATM), Internet Protocol (IP), Hypertext Transfer Protocol (HTTP) and Wireless Application Protocol (WAP).",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1","FIG. 1","FIG. 2"],"b":["102","102","102","100","102"]},"As depicted in , the client computing device  includes client application , client RPC service module , and client data management service module . The client RPC service module  enables the client application  to make asynchronous requests to remote services that process the requests and then returns data directly to the client computing device . For example, the client application  can access data through client RPC service module  that includes HTTP GET or POST (HTTP services), SOAP (web services), or Java objects (remote object services). In an embodiment, the client RPC service module  can also embed metadata in RPC messages to invoke additional processing, which is explained in more detail below. In addition to calling a remote service, the client RPC service module  can store the response data from the service, from which the client application  can obtain the data.","The client data management service module  is configured to call methods on a server computing device. Additionally, this module  can also fill client-side data collections with data from remote data sources and synchronize the client and server versions of data. The client data management service module  can also automatically track changes made to the data at the client side using property change events, thereby allowing the creation of applications that work with distributed data. Large collections of data and nested data relationships, such as one-to-one and one-to-many relationships, can be managed using the client data management service module . Accordingly, by using the client data management service module , client applications  can be built that provide real-time data synchronization, data replication, on-demand data paging, and occasionally connected application services.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 1","FIG. 1","FIG. 3"],"b":["110","110","1110","100","110"]},"As depicted in , the server computing device  is configured to host enterprise applications , which, in one example embodiment, include server RPC service module  and a data service module . When the server computing device  receives an RPC message, the server RPC service module  converts the RPC message from a network transmission format to a format required by the server computing device . Thereafter, the server RPC service module  calls the function, which is requested by the RPC message, in the server computing device . The function then executes, possibly generating output data, which the server RPC service module  may then return to the client computing device. Embodiments of the server RPC service module  can also extract metadata from the RPC message. As explained in more detail below, this metadata can be used to invoke additional processing that is otherwise not provided by the execution of the function.","The data service module  generally processes messages from a client computing device. For example, the data service module  may control the creation, maintenance, and the use of data stored in, for example a database. Particularly, the data service module  provides facilities for controlling data access, enforcing data integrity, and managing concurrency control. Additionally, the data service module  can invoke a variety of different processing performed on the input and\/or output of the functions based on the extracted metadata, some of the processing of which are described below.","It should be appreciated that in other embodiments, the computing devices  and  may include fewer or more modules apart from those shown in . For example, in an alternate embodiment, the server RPC service module  depicted in  can be instead embodied as two separate modules, namely an RPC module and a remote messaging service module. The modules , , , and  may be in the form of software that is processed by a processor. In another example, as explained in more detail below, the modules , , , and  may be in the form of firmware that is processed by application specific integrated circuits (ASICs), which may be integrated into a circuit board. Alternatively, the modules , , , and  may be in the form of one or more logic blocks included in a programmable logic device (for example, a field programmable gate array (FGPA)). The described modules , , , and  may be adapted, and\/or additional structures may be provided, to provide alternative or additional functionalities beyond those specifically discussed in reference to . Examples of such alternative or additional functionalities will be discussed in reference to the flow diagrams discussed below.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIGS. 1 and 2","FIG. 2","FIG. 4"],"b":["400","400","203","206","102","402","404"]},"In one embodiment, the list received from the remote computing device includes descriptions of the functions supported by the remote computing device. Alternatively, the descriptions may include or describe the metadata required by the functions. Accordingly, the function that requires metadata can be identified from the descriptions, and once the function is identified, the client computing device can then access the metadata and arguments required by the function at . The client computing device then composes an RPC message at  that includes both the metadata and the argument required by the function. As explained in more detail below, the metadata can, in one embodiment, be defined within a function definition. The client computing device then transmits the RPC message to the remote computing device at  to call the execution of the particular function at the remote computing device, which calls the function with the argument as input and also invokes additional processing based on the metadata.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 5","FIGS. 1 and 3","FIG. 3","FIG. 5"],"b":["500","500","304","306","110","502","504"]},"Thereafter, the server computing device executes the requested function at , based on arguments included in the function call. Additionally, the server computing device may invoke, at , additional processing based on the extracted metadata. It should be noted that this invocation of additional processing is separate from the execution of the function. In one embodiment, the additional processing is performed on the argument that is input into the function, and such additional processing before execution of the function is referred to as \u201cpre-processing.\u201d For example, the metadata sent by the client computing device can be provided as context to the execution of a function.","In another embodiment, additional processing is performed on the output from the execution of the function, and such additional processing after the execution of the function is referred to as \u201cpost-processing.\u201d The server computing device can invoke a variety of different pre-processing and post-processing of data. As explained in more detail below, such processes can include paging, load associated property on demand, notifications of modifications, change objects on updates, changes made to objects, and a variety of other different processes.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 6","FIGS. 2 and 3","FIG. 6"],"b":["600","600","202","203","206","102","600","306","304","110"]},"Initially, the server RPC service module  transmits a list  of functions that are supported by the server computing device  to the client RPC service module . As explained above, this list  may be in the form of a client runtime library that includes a mapping of client functions to remote functions supported by the server computing device . It should be noted that this list  may not include all supported functions. Instead, the list  may include a number of functions that can be processed in a particular way by the client application . In one embodiment, the list  includes descriptions about the metadata that are required by one or more of the listed functions. For example, the description can define the particular metadata required for each function included in the list . As a result, the client RPC service module  can identify the metadata required for a function from the descriptions.","The client application  can make a call  for a local function. Instead of containing the actual code that implements the remote function, the client RPC service module  accesses or retrieves the required arguments from a client address space. The client RPC service module  also identifies the required metadata from the descriptions included in the received list and accesses or retrieves the required metadata. The client RPC service module  then composes an RPC message  calling a function, and this RPC message includes the metadata and the arguments required by the function. In one embodiment, the metadata may be added or included in a function definition, which includes a function declaration and a body of a function. For example, the metadata may be embodied as an annotation in a function definition. As used herein, an \u201cannotation\u201d provides data about a function that is not part of the function itself. Such annotations have no direct effect on the operation of the code they annotate. It should be appreciated that annotations can be applied to a function's declarations of classes, fields, methods, and other program elements. The following Table A depicts an annotation in JAVA that is embodied in a function definition:",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE A"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"@Delete"},{"entry":"public void closeAccount (Account account) throws Exception"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"If (account == null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"throw new Exception (\u201cYou forgot to specify an account. Try"]},{"entry":[{},"again.\u201d);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"accountDAO.deleteAccount (account);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"In an alternate embodiment, the metadata may be embodied or collected within a configuration file. An XML configuration file is an example of a configuration file where a user may create such an XML configuration file to store his preferences and, in this embodiment, also the metadata.","The client RPC service module  then calls the function in the client runtime library and transmits the RPC message  requesting the function to the server computing device  by way of the client data management service module . At the server computing device , the data service module  receives the RPC message  and forwards it to the server RPC service module . It should be appreciated that the data service module  is configured to processes messages from the client application . Here, the data service module  converts messages from their binary form to an internal message form. After the conversion, the data service module  examines the messages to determine which service and destination within the service to route each message.","Still referring to , the server RPC service module  then extracts the metadata from the RPC message and invokes additional pre-processing and\/or post-processing based on the extracted metadata. As an example, the RPC service module  may invoke additional pre-processing on the input arguments before the server computing device  executes the function. In another example, the server RPC service module  may invoke additional post-processing on the output from an executed function.","It should be noted that in alternative embodiments, the client RPC service module  and the server RPC service module  can communicate with each other directly without going through the client data management service module  and the data service module . As a result, in this alternate embodiment, the client RPC service module  can transmit the RPC message  directly to the server RPC service module , and in response, the server RPC service module  can transmit a response message directly to the client RPC service module .",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 7","FIG. 5","FIG. 3"],"b":["700","700","304","110"]},"For example, a client computing device can transmit a request to a server requesting for a collection of objects. In response, the server computing device transmits some, but not all, the properties of the requested objects to the client computing device. The client computing device then requests a property value that was not transmitted to the client computing device in the original request. In particular, the client RPC service module, for example, may automatically invoke the correct function on the server computing device, as indicated in the metadata, to retrieve the property value from the server computing device. As depicted in , upon receipt of the request as embodied in an RPC message at , the server computing device invokes the requested function that can access the requested object property at . Instead of transmitting all properties of a particular object, the server computing device, at , transmits only the requested object property to the client computing device in response to the request from the RPC message.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 8","FIG. 5","FIG. 3"],"b":["800","800","304","110"]},"As depicted in , upon receipt of the RPC message with such instructions, the server computing device is configured to detect a modification of data at  and identify one or more different client computing devices that have copies of the same data at . If a modification is detected, the server computing device transmits, at , notifications of the modification to all the identified client computing devices having copies of the same data. The client computing devices that receive such notifications may then take various actions regarding the modified data, such as blocking the data from being modified or notifying the user that the data has been modified.","In addition to the additional processing described in , the server computing device (as well as the client computing device) can also invoke other processing. In yet another embodiment, paging can be invoked where a collection of data can be broken up into \u201cpages,\u201d which are subsets of data that are transmitted when requested by the client computing device. As an example, in a list of data, only the first ten elements of the data are visible to the client computing device. As a result, the client computing device does not need the entire data set. The client computing device can therefore request additional \u201cpages\u201d from the server computing device when the user scrolls down the list. In this example, the metadata included in an RPC message can define a subset of data to be included in a response. An example of such a subset definition can include a range, such as a page range (e.g., pages 1-10). Upon receipt of such a request, the server computing device accesses and transmits only the subset of data in a response to the client computing device, which requested the subset.","In still another embodiment, automatic updates of modified data can be invoked where modifications made to objects resulting from the execution of a function can be tracked. The server computing device that tracks the modifications can automatically push the modification to other client computing devices that have copies of the same data. These other client computing devices can update their copies of the data accordingly. In this example, the metadata included in an RPC message can include instructions to track modifications made by the execution of a function, which is requested in the RPC message.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 9","FIG. 2","FIG. 3"],"b":["900","102","110"]},"As depicted in , the machine is capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term \u201cmachine\u201d shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein.","The example of the computing device  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  (e.g., random access memory), and a static memory  (e.g., static random-access memory), which communicate with each other via bus . The computing device  may further include video display unit  (e.g., a plasma display, a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computing device  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) navigation device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker), and a network interface device .","The disk drive unit  (a type of non-volatile memory storage) includes a machine-readable medium  on which is stored one or more sets of data structures and instructions  (e.g., software) embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by computing device , with the main memory  and processor  also constituting machine-readable, tangible media.","The data structures and instructions  may further be transmitted or received over a computer network  via network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP).","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., the computing device ) or one or more hardware modules of a computer system (e.g., a processor  or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","In various embodiments, a hardware module may be implemented mechanically or electronically. For example, a hardware module may comprise dedicated circuitry or logic that is permanently configured (e.g., as a special-purpose processor, such as a FPGA or an ASIC) to perform certain operations. A hardware module may also comprise programmable logic or circuitry (e.g., as encompassed within a general-purpose processor  or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in dedicated and permanently configured circuitry, or in temporarily configured circuitry (e.g., configured by software) may be driven by cost and time considerations.","Accordingly, the term \u201chardware module\u201d should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired) or temporarily configured (e.g., programmed) to operate in a certain manner and\/or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one instance in time. For example, where the hardware modules comprise a general-purpose processor  configured using software, the general-purpose processor  may be configured as respective different hardware modules at different times. Software may accordingly configure a processor , for example, to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.","Modules can provide information to, and receive information from, other modules. For example, the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously, communications may be achieved through signal transmission (e.g., over appropriate circuits and buses) that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times, communications between such modules may be achieved, for example, through the storage and retrieval of information in memory structures to which the multiple modules have access. For example, one module may perform an operation, and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then, at a later time, access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices, and can operate on a resource (e.g., a collection of information).","The various operations of example methods described herein may be performed, at least partially, by one or more processors  that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors  may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may, in some example embodiments, comprise processor-implemented modules.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors  or processor-implemented modules. The performance of certain of the operations may be distributed among the one or more processors , not only residing within a single machine, but deployed across a number of machines. In some example embodiments, the processors  may be located in a single location (e.g., within a home environment, an office environment or as a server farm), while in other embodiments the processors  may be distributed across a number of locations.","While the embodiment(s) is (are) described with reference to various implementations and exploitations, it will be understood that these embodiments are illustrative and that the scope of the embodiment(s) is not limited to them. In general, techniques invoking additional processes using RPC may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations, modifications, additions, and improvements are possible.","Plural instances may be provided for components, operations or structures described herein as a single instance. Finally, boundaries between various components, operations, and data stores are somewhat arbitrary, and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the embodiment(s). In general, structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the embodiment(s)."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present disclosure is illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 4","FIGS. 1 and 2"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIGS. 1 and 3"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 6","FIGS. 2 and 3"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 8","FIG. 5"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 9","FIG. 2","FIG. 3"]}]},"DETDESC":[{},{}]}
