---
title: Task-based access control in a virtualization environment
abstract: Methods, systems, and techniques for task-based access control are provided. Example embodiments provide a task-based access control system “TBACS,” which provides task-based permissions management using proxy task objects. In one example embodiment, the proxy task objects encapsulate activities, comprising one or more privileges, each associated with an object upon which the privilege can act. In some examples, proxy task objects may be used with a virtualization infrastructure to delegate permissions to delegate users, real or automated. Proxy task objects may also be associated with their own user interfaces for performance of the corresponding activities.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08595824&OS=08595824&RS=08595824
owner: VMware, Inc.
number: 08595824
owner_city: Palo Alto
owner_country: US
publication_date: 20110304
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. provisional application 61\/311,482 filed Mar. 8, 2010 and entitled \u201cvBots: Embodiment of Access Control,\u201d which is hereby incorporated by reference.","The present disclosure relates to methods, techniques, and systems for generating and managing task-based access control and, for example, to methods, techniques, and systems for generating and managing task-based access control in a virtualization environment using proxy task objects.","The permissions model that defines access control in existing virtualization environments is object centric. In particular, each object has privileges associated with it that are required to manipulate it. For a delegated user (e.g., a user given proper authorizations from, for example, a systems administrator) to acquire access to an object, the user needs to be given the proper set of privileges\u2014ones that match what the object expects in order to take some action with respect to that object. These privileges are used by the virtualization environment to determine whether a specific user at a particular time has access authority to perform an action that the user desires to perform. In some virtualization systems and in other computing environments, such privileges (e.g., access rights and the like) are grouped into \u201croles,\u201d and a user is allocated (e.g., designated, granted, assigned, directed etc.) roles based upon what activities he or she likely needs to perform within the infrastructure. A role tends to group together a large set of privileges, comprising many different activities a delegate user may need to perform over time. For example, a user acting in a system administrator role may need to perform different activities than a user acting in a software tester role.","For example, in a company with many employees that use virtual machines as testing environments for their software under development, it may be desirable to give access to each user to power on or off a particular virtual machine within the data center that has been configured for a particular test. Powering on a virtual machine might require one set of privileges, but a different task, such as moving the virtual machine to another host might require another set of privileges. It is not necessary in many such instances, or even desirable, that every user who has the ability to power on a virtual machine also be granted the ability to move his or her virtual machine to a different host in the infrastructure, as movement of virtual machines is often reserved to users involved in some aspect of the administration of the datacenter. Accordingly, on a frequent basis, especially in very large datacenters, system administrators need to define who has access to what within the virtualization infrastructure and exactly what those delegate users can do on various parts of the infrastructure. To properly grant access proactively, they therefore must predict ahead of time what roles various users will play with respect to the objects that are managed within the datacenter (sometimes referred to herein as managed inventory objects). Sometimes it is difficult to identify the full set of privileges necessary for a user to perform a particular task because many different, seemingly unrelated privileges may be necessary to perform that task. In addition, in some virtualization environments, permissions are propagated through complex inheritance structure rules, and thus it may be difficult for the administrator to understand exactly what permissions a particular user has been given at any time.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIGS. 1A-1I","FIG. 1A"],"b":["101","102","102","101","122","122","121","101","112","112","111","121","112","112","111","101","121","111","101","100","121","120","111","110"],"i":["a","d","a","d ","a","d","a","d "]},"In order to grant access to a user, under this system, the administrator either assigns an existing role to a user or defines a new role.  illustrates use of the user interface , here shown as dialog  in the vSphere client window , to define a new role called \u201cVMs Only.\u201d \u201cVM\u201d here refers to a virtual machine. As shown in , the administrator selects which privileges, for example privilege \u201cpower on\u201d  in the vApp category  for powering on a virtualized application. After selecting all of the desired privileges, the new role \u201cVMs Only\u201d  appears in the roles window of  as not yet in use (output text ) since it has yet to be assigned to a particular user.","The administrator now needs to determine to which object to associate the role using user interface  ().  illustrates that the administrator has selected an object in the datacenter \u201cBobby's VMs\u201d (a folder) to which the new role will be assigned. The current set of roles already allocated to the object \u201cBobby's VMs\u201d are shown under the permissions tab . To add the newly developed role \u201cVMs Only,\u201d the administrator brings up the assign permissions dialog through add permissions menu  or other user interface (UI) control. The assign permissions dialog , as shown in , allows the administrator to select the newly defined role  from a roles menu . The administrator also can indicate using UI control  whether objects further down in the object definition hierarchy will inherit this role as well. For example, all virtual machines (VMs) in Bobby's folder may inherit this role assignment because the UI control  has been selected. When the administrator indicates that the administrator is done (by, for example, pressing the \u201cOK\u201d button ), the administrator can then select the users and\/or groups who will be assigned the new role.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 1F","FIG. 1A","FIG. 1G","FIG. 1H","FIG. 1I"],"b":["160","110","161","171","150","172","182","181","134","191"]},"Unfortunately, without asking Bobby to actually try out his newly assigned permissions, the administrator has little idea whether Bobby's new role will work as intended. If Bobby tries to add a new virtual machine and it doesn't operate as expected (e.g., he receives an error message), then the administrator must cycle through some number of the dialogs again to add more privileges and\/or assign them to different inventory objects, round and round, until Bobby is successful. Moreover, because of the intricate structure of the propagation and inherency of roles across the infrastructure, it may be difficult to determine which roles are in actuality accessible to Bobby.","Embodiments described herein provide enhanced computer- and network-based methods, systems, and techniques for task-based access control, in particular as applied to virtualization environments. Example embodiments provide a task-based access control system (\u201cTBACS\u201d), which enables system administrators and other such users to assign privileges to delegate users based upon the tasks they wish to allow them to do and not based upon who the user is (i.e., what role the user has been assigned). This enables administrators of the system to be purposeful and accurate when they enable a delegate user to perform some activity. In summary, the techniques encapsulate privileges along with the objects they can act on in order to accomplish a task (e.g., one or more activities), so that the delegate user is assigned a privilege-object pair directed to a particular portion of the virtualization infrastructure. These encapsulations are referred to in this description as \u201cproxy task objects\u201d since they represent a proxy for accomplishing one or more tasks. In addition, proxy task objects may be executed in an automated manner, without actual assignment to human users (the delegate users may be physical human beings or virtual or automated users). Proxy task objects may be cloned, moved, shared, and the like, as with other objects in the system. In addition, they can be placed \u201con loan,\u201d for example, when a particular delegate user is on vacation. Also, they can be temporarily enabled or disabled after being assigned to a delegate user. Since tasks are typically performed many times, once the administrator \u201cdebugs\u201d an encapsulation of these privilege-object pairs, the administrator can be assured that the delegate user will have sufficient, and likely only the necessary, privileges to accomplish the desired, already tested, task. Also, the TBACS paradigm may overlay an existing role-based permissions system so as to not require underlying changes to the system security model.","Although the techniques, methods, and systems described herein are described relative to virtualization infrastructures and environments, these techniques also may be useful to grant (e.g., allocate, assign, give, render etc.) permissions in a variety of other environments.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1A"],"b":["201","204","200","101"]},"Proxy task object  is an example proxy task object for the activity \u201cCreate VM\u201d (create a virtual machine) defined by activity . In one example embodiment, proxy task objects such as object  are referred to as \u201cvBots\u201d (virtualization robots) and the terms as used herein are interchangeable. Initially, a proxy task object such as object  is created without resolving (e.g., linking, assigning, associating, binding, etc.) the privileges - to specific objects (i.e., objects in the managed object inventory of a virtualization infrastructure). The privileges may be created as being applicable to particular object types, but not necessarily resolved to specific named objects. In such a state, the proxy task object may be referred to as a \u201cprototype,\u201d since it can be used as a master key to create proxy task objects of that \u201ctype,\u201d analogous to creating keys for different doors.","In , the proxy task object  (vBot) contains privileges - for one activity, the Create VM activity . Each privilege - of each activity  is resolved to an object upon which it can act, here objects -, which represent objects from the virtualization infrastructure. In some embodiments, proxy task objects can be bound to a variety of objects, entities, controls, or processes in a virtualization infrastructure, including, for example: alarms, datacenters, data stores, distributed virtual port groups, distributed virtual switches, extensions, folders, globals, host common information modes, host configurations, host inventories, host local operations, host profiles, networks, performance, permissions, resources, scheduled tasks, sessions, tasks, virtual applications, virtual machine configurations, virtual machine interactions, virtual machine inventories, virtual machine provisioning, virtual machine states, or the like. Of note, one or more privileges, here privileges  and  can be associated with the same object . In one embodiment, each privilege is bound to no more than one object. Other embodiments may support one-to-many relationships. Once the proxy task object  has all of its privileges resolved to particular objects, it can be deployed and hence assigned to delegate user .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 3","FIG. 2","FIG. 3","FIGS. 9A-9J"],"b":["300","300","310","320","315","321","322","323","324","330","310","311","312","313","310","313","320"]},"The proxy task object authoring engine  and associated authoring user interface  are responsible for generating proxy task object prototypes (e.g., vBot prototypes) with activities having one or more privileges associated with them. When initially generated, the privileges may be associated with particular types of objects, but they may not yet be in deployable form\u2014i.e., bound to a specific inventory managed object associated with a respective privilege. Proxy task object prototypes may be generated from scratch, cloned and edited from existing proxy task objects or proxy task object prototypes, and the like.","The proxy task object deployment engine  and associated deployment user interface  are responsible for resolving the object type references of each privilege of each activity of the proxy task object to specific objects of the managed object inventory. When each privilege is resolved (i.e., associated with an assigned object), the proxy task object is releasable for assignment as a proxy task object to be assigned to users. In embodiments outside the virtualization environment context, other objects (other than objects from the managed object inventory) may similarly be bound to proxy task objects.","The proxy task object assignment interface  and associated assignment user interface  is responsible for allowing the proxy task object (with its privilege\u2014object pair associations) to be assigned to a user. As indicated above, proxy task objects may be assigned to one or more users or groups of users based upon the task the user desires to perform.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 4","FIG. 3","FIG. 4","FIGS. 5","FIG. 8","FIGS. 9A-9J"],"b":["401","405","401","6","7","403","405","405","403","407","401"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 5","FIG. 6"],"b":["501","503","505"]},"As mentioned, one of the first steps in authoring a proxy task object is to determine appropriate privileges for the desired task.  is an excerpt from table listing privileges for performing common tasks in an example virtualization environment. This example excerpt is from a table in Chapter 18 of the VMware, Inc., \u201cvSphere Basic System Administration Guide for vCenter Server 4.0, ESX 4.0, ESXI 4.0,\u201d CA 2010, part EN-000105-06, which is incorporated herein by reference in its entirety. Table  describes several common tasks, for example \u201ccreate a virtual machine\u201d task  and \u201cdeploy a virtual machine from a template\u201d task . For each such task, the table lists required privileges, e.g., privileges -. These privileges can be used as a sort of checklist to make sure the correct privileges are created and then bound (e.g., resolved, assigned, etc.) to appropriate objects in the infrastructure.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 7","FIG. 6"],"b":["700","701","710","720","702","705","712","715","722","725"]},"As mentioned with respect to block  of , once created, a proxy task object may be deployed by associating each privilege with an object of the type indicated by the privilege. (Privileges may be thought of as corresponding to a particular object type.)  is an example block diagram of a representation of a deployed proxy task object (e.g., a vBot). In , the activities , , and  of  are shown as activities , , and  with their respective privileges bound to corresponding objects. For example, privilege  is associated with object  via link  and privilege  is associated with object  via link . As another example (where a single object is referred to or associated with two different privileges), for activity , privilege  is associated with object  via link  and privilege  is associated with object  via link .","As mentioned with respect to block  of , a deployed proxy task object may be assigned to one or more delegate (physical, virtual, or automated) users. Examples of such assignment are described with reference to portions of an example user interface for vBots below.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIGS. 9A-9J","FIG. 9A","FIG. 9B"],"b":["900","901","905","910","911","912","914","912","913","912","900","915","916","917","917","918"]},"Selection of the prototype  for the FactoryBot in  allows the administrator to author (e.g., create, generate, etc.) a new FactoryBot.  illustrates the new FactoryBot , with icon  and name . The three activities defined for the vBot are shown on the right side of the display : create virtual machine ; deploy virtual machine from a template , and install guest operating system on a virtual machine . In addition, each activity is displayed with its corresponding (unassigned) privileges. For example, the create virtual machine activity  comprises four privileges . The icons show the type of infrastructure object that needs to be assigned to each privilege. Thus, a kind of \u201ctype-checking\u201d is offered by the interface.","In order to deploy a vBot, this particular interface allows the administrator to drag the privilege using direct manipulation (e.g, drag an input device such as a mouse) from the privilege to an object representation in the infrastructure hierarchy to make the association: to bind the privilege to an object. In , the cursor  is shown being dragged () to an object of the same type  to bind the privilege (described as Resource.Assign Virtual Machine to Resource Pool  corresponding to a host) to an actual host, represented by , in the infrastructure. The checkmarks, for example, checkmark  on a privilege of activity  signify that the privilege was correctly assigned to an inventory object. Of note, in some embodiments, certain privileges may be linked so that they apply to the same objects (e.g., to the same destination host). That is, some activities in a vBot may be linked as related, i.e., applicable to the same object. In such a case, the interface may automatically update the binding of linked objects to the same object.","Once deployed, the vBots may be assigned to one or more users or groups of users.  illustrate this process. In particular, in , it is desired to assign the new FactoryBot  created to the group VC Users . According to display , the group VC Users  has been selected by the administrator. The currently assigned vBots assigned to this user  are shown in assigned vBot list . When the list is organized instead by activities (by invoking a sort UI control), the VC Dev FactoryBot entity  is seen under at least two of the activities.","In display , as illustrated in , the administrator has selected the new FactoryBot  and its details may be shown using tab . In display , as illustrated in , the administrator has selected the \u201cZone\u201d tab  to see where the vBot has been deployed (on what objects). In display , illustrated in , the administrator has selected the activities tab to see a list  of the (3) activities for that vBot.","In display , illustrated in , the administrator's cursor  is shown dragging the icon  corresponding to the new deployed vBot to the assigned vBots list  for the group VC Users . Finally, in display , illustrated in , an indication of the new vBot  is shown in the list of vBots assigned to VC Users. The assignment of the new vBot has now been completed.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIGS. 10A-10B","FIG. 10A"],"b":["1000","1001","1003","1005","1007"]},"In , when the list of proxy task objects is sorted by activities using sort button  and name using sort button , then a list of activities  is displayed, with the corresponding vBots (e.g. FactoryBot ) and objects to which the vBot is assigned (e.g., objects ). The display on the right hand side  now shows information relative to the selection on the left\u2014here an infrastructure object from the managed object inventory. Other user interfaces may be incorporated similarly.","Example embodiments described herein provide applications, tools, data structures and other support to implement a task-based access control system to be used for delegating permissions in a virtualization environment. Other embodiments of the described techniques may be used for other purposes, including for delegating permissions in a non-virtualized computing system environment. In the following description, numerous specific details are set forth, such as data formats and code sequences, etc., in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein, or with other specific details, such as changes with respect to the ordering of the code flow, different code flows, etc. Thus, the scope of the techniques and\/or functions described is not limited by the particular order, selection, or decomposition of steps described with reference to any particular routine. Also, although certain terms are used primarily herein, other terms could be used interchangeably to yield equivalent embodiments and examples. In addition, terms may have alternate spellings which may or may not be explicitly mentioned, and all such variations of terms are intended to be included.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 11"},"The computing system  may comprise one or more server and\/or client computing systems and may span distributed locations. As illustrated, the computing system  shows a set of components that may be used to implement task-based access control. Some of these components may in whole or in part reside on one or more server systems; some may in whole or in part reside on one or more client computing systems; and some may in whole or in part have both server and client portions. For example, client-side user interface components for engines , , and  may run in addition to the server-side engines. In addition, each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover, the various blocks of the task-based access control system  may physically reside on one or more machines, which use standard (e.g., TCP\/IP) or proprietary interprocess communication mechanisms to communicate with each other.","In the embodiment shown, computer system  comprises one or more computer memories (\u201cmemory\u201d) , a display , one or more Central Processing Units (\u201cCPU\u201d) , Input\/Output devices  (e.g., keyboard, mouse, CRT or LCD display, etc.), other computer-readable media , and one or more network connections . The TBACS  is shown residing in memory . In other embodiments, some portion of the contents, some of, or all of the components of the TBACS  may be stored on and\/or transmitted over the other computer-readable media . The components of the task-based access control system  preferably execute on one or more CPUs  and manage the generation and use of proxy task objects (e.g., vBots), as described herein. Other code or programs  and potentially other data repositories, such as data repository , also reside in the memory , and preferably execute on one or more CPUs . Of note, one or more of the components in  may not be present in any specific implementation. For example, some embodiments embedded in other software may not provide means for user input or display.","In a typical embodiment, the TBACS  includes one or more proxy task object authoring engines , one or more proxy task object deployment engines , and one or more proxy task object assignment interfaces . As described above, the proxy task object authoring engines  are responsible for building objects with activities having one or more privileges associated with them. When authored, the privileges may be associated with particular types of objects, but they may not yet be in deployable form\u2014with a specific inventory managed object associated with a respective privilege.","The proxy task object deployment engines  are responsible for resolving the object type references of each privilege of each activity of the object to specific objects of the managed object inventory. When each privilege is resolved (i.e., associated with an assigned managed inventory object), the proxy task object is releasable for assignment as a proxy task object to be assigned to delegate users.","The proxy task object assignment interface  is responsible for allowing the proxy task object (with its privilege\u2014object pair associations) to be assigned to a user. As indicated above, proxy task objects may be assigned to one or more users or groups of users based upon the task the user desires to perform.","In at least some embodiments, the authoring engine  is provided external to the TBACS and is available, potentially, over one or more networks . Other and\/or different modules may be implemented. In addition, the TBACS may interact via a network  with application or client code , for example web browsers, automation code, other virtualization applications and the like, that uses the objects generated by the task-based access control system ; one or more proxy task object user interfaces  specifically designed to be executed with particular proxy task objects, for example; and\/or one or more third-party proxy task object providers , such as purveyors of information used in permissions (security) data repository . Also, of note, the virtualization infrastructure data repository  may be provided external to the TBACS as well, for example in a knowledge base accessible over the one or more networks .","In an example embodiment, components\/modules of the TBACS  are implemented using standard programming techniques, including object-oriented techniques, distributed techniques, and the like. A range of programming languages known in the art may be employed for implementing such example embodiments, including representative implementations of various programming language paradigms, including but not limited to, object-oriented (e.g., Java, C++, C#, Smalltalk, etc.), functional (e.g., ML, Lisp, Scheme, etc.), procedural (e.g., C, Pascal, Ada, Modula, etc.), scripting (e.g., Perl, Ruby, Python, JavaScript, VBScript, etc.), declarative (e.g., SQL, Prolog, etc.), etc.","The embodiments described above may also use well-known or proprietary synchronous or asynchronous client-server computing techniques. However, the various components may be implemented using more monolithic programming techniques as well, for example, as an executable running on a single CPU computer system, or alternately decomposed using a variety of structuring techniques known in the art, including but not limited to, multiprogramming, multithreading, client-server, or peer-to-peer, running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an TBACS implementation. Also, other steps could be implemented for each routine, and in different orders, and in different routines, yet still achieve the functions of the task-based access control system.","In addition, application programming interfaces  to the data stored as part of the task-based access control system  (e.g., in the data repositories  and ) can be available by standard means such as through C, C++, C#, and Java APIs; libraries for accessing files, databases, or other data repositories; through scripting languages such as XML; or through Web servers, FTP servers, or other types of servers providing access to stored data. The data repositories  and  may be implemented as one or more database systems, file systems, or any other method known in the art for storing such information, or any combination of the above, including implementation using distributed computing techniques.","Also the example TBACS  may be implemented in a distributed environment comprising multiple, even heterogeneous, computer systems and networks. For example, in one embodiment, the proxy task object authoring engine , the proxy task object deployment engine , and the permissions data repository  are all located in physically different computer systems. In another embodiment, various modules of the TBACS  are hosted each on a separate server machine and may be remotely located from the tables which are stored in the data repositories  and . Also, one or more of the modules may themselves be distributed, pooled or otherwise grouped, such as for load balancing, reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP\/IP sockets, RPC, RMI, HTTP, Web Services (XML-RPC, JAX-RPC, SOAP, etc.) etc. Other variations are possible. Also, other functionality could be provided by each component\/module, or existing functionality could be distributed amongst the components\/modules in different ways, yet still achieve the functions of an TBACS.","Furthermore, in some embodiments, some or all of the components of the TBACS may be implemented or provided in other manners, such as at least partially in firmware and\/or hardware, including, but not limited to one or more application-specific integrated circuits (ASICs), standard integrated circuits, controllers (e.g., by executing appropriate instructions, and including microcontrollers and\/or embedded controllers), field-programmable gate arrays (FPGAs), complex programmable logic devices (CPLDs), etc. Some or all of the system components and\/or data structures may also be stored (e.g., as executable or other machine readable software instructions or structured data) on a computer-readable medium (e.g., a hard disk; a memory; a network; or a portable media article to be read by an appropriate drive or via an appropriate connection). Some or all of the components and\/or data structures may be stored on tangible storage mediums. Some or all of the system components and data structures may also be transmitted in a non-transitory manner via generated data signals (e.g., as part of a carrier wave or other analog or digital propagated signal) on a variety of computer-readable transmission mediums, such as media , including wireless-based and wired\/cable-based mediums, and may take a variety of forms (e.g., as part of a single or multiplexed analog signal, or as multiple discrete digital packets or frames. Such computer program products may also take other forms in other embodiments. Accordingly, embodiments of this disclosure may be practiced with other computer system configurations.","As described, the example task-based access control system may be implemented as an overlay on a role-based system, or other object-centric system. In particular, overlaying the existing system may be made possible by implementing the task-based access control system as an interface to data already stored according to other paradigms.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 12","FIG. 12"],"b":["1201","1210"]},"Existing access control data structure  comprises at least two dimensions: objects  shown as columns and privileges  shown as rows. Each cell, understood to be the intersection of an object with a privilege, when assigned, is populated by an indication of one or more users (or groups, or other designations) that have been assigned that particular privilege for that particular object. For example, cell  indicates that users Uand Uhave the permissions indicated by the position of the intersection of object  with privilege . As shown here, there is a cell for every object-privilege combination. In some systems, access control information may be stored using sparse data techniques.","The proxy task object (e.g., vBot) data structure  stores how activities (i.e., groups of privileges) are bound to objects and assigned to users. For example, as shown in , vBot  contains (three different) activities bound to various managed inventory objects, for example objects  and , in the virtualization infrastructure. Each activity is stored as a group of privileges. For example, activity , shown marked with a dashed oval line, is bound to object  and is a group containing privilege  and privilege . The activity bound to object  (not marked) is a group containing privilege  and . Thus, data structure  stores (shown as rows -) the union of all of the privileges that are present in all of the activities authored in a proxy task object. When the proxy task object is first authored, it may only consist of activities (groups of privileges) with a \u201ccolumn\u201d for each activity. When the proxy task object is deployed, the activities are stored bound to objects. (Columns may be replicated for each object, or, in some embodiments, shared between multiple objects). Before assignment to a user, each \u201ccell\u201d (each privilege of each activity) can be considered assigned to an abstract user (for example, represented by a \u201c?\u201d or an \u201cx\u201d). When the proxy task object is assigned to a user, the \u201ccells\u201d indicating a privilege-object intersection are assigned to a specific user (e.g., user U) and the data structure appropriately altered so that each proxy task object cell with data can be mapped to an underlying cell (object-privilege combination) in the existing access control data structure .","A task-based access control mechanism such as that described herein also may be overlaid upon techniques for storing access control information other than those illustrated in . Also, although shown as tables with rows and columns, it is understood that any equivalent or substitute data structures may be used, including, for example, matrices, sparse-matrix structures, linked lists, hash tables, arrays, other objects, and the like.","All of the above U.S. patents, U.S. patent application publications, U.S. patent applications, foreign patents, foreign patent applications and non-patent publications referred to in this specification and\/or listed in the Application Data Sheet, including but not limited to U.S. Provisional Patent Application No. 61\/311,482, entitled \u201cvBOTS: EMBODIMENT OF ACCESS CONTROL,\u201d filed Mar. 8, 2010, is incorporated herein by reference, in its entirety.","From the foregoing it will be appreciated that, although specific embodiments have been described herein for purposes of illustration, various modifications may be made without deviating from the spirit and scope of the present disclosure. For example, the methods, systems, and techniques for performing task-based access control discussed herein are applicable to other architectures other than a virtualization architecture. Also, the methods and systems discussed herein are applicable to differing protocols, communication media (optical, wireless, cable, etc.) and devices (such as wireless handsets, electronic organizers, personal digital assistants, portable email machines, game machines, pagers, navigation devices such as GPS receivers, etc.)."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 1A-1I"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 9A-9J"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 10A-10B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
