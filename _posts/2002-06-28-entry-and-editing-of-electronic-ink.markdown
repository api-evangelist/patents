---
title: Entry and editing of electronic ink
abstract: A control and its associated programming interface for allowing entry of electronic ink, editing and other manipulation of the ink, and/or recognition of the ink. Ink may be stored in a data structure such as an ink object that permits later retrieval by applications. As is the case with text that may be bolded, underlined, italicized, and the like, the describe control and its programming interface may permit ink information to be manipulated as easily as text, while providing the richness of handwritten ink.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925987&OS=07925987&RS=07925987
owner: Microsoft Corporation
number: 07925987
owner_city: Redmond
owner_country: US
publication_date: 20020628
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["This application claims priority to U.S. Provisional Application Ser. Nos. 60\/379,749 and 60\/379,781, both filed on May 14, 2002, both entitled \u201cInterfacing With Ink,\u201d both expressly incorporated by reference herein as to their entire contents including their appendices.","Aspects of the present invention are directed generally to interfaces between software applications and\/or data structures. More particularly, aspects of the present invention are directed to interfaces for exchanging information with electronic ink and\/or for allowing entry and\/or editing of electronic ink.","Typical computer systems, especially computer systems using graphical user interface (GUI) systems such as Microsoft WINDOWS, are optimized for accepting user input from one or more discrete input devices such as a keyboard for entering text, and a pointing device such as a mouse with one or more buttons for driving the user interface. The ubiquitous keyboard and mouse interface provides for fast creation and modification of documents, spreadsheets, database fields, drawings, photos and the like. However, there is a significant gap in the flexibility provided by the keyboard and mouse interface as compared with the non-computer (i.e., standard) pen and paper. With the standard pen and paper, a user edits a document, writes notes in a margin, and draws pictures and other shapes and the like. In some instances, a user may prefer to use a pen to mark-up a document rather than review the document onscreen because of the ability to freely make notes outside of the confines of the keyboard and mouse interface.","Some computer systems permit a user to draw on a screen. For example, the Microsoft READER application permits one to add electronic ink (also referred to herein as \u201cink\u201d) to a document. The system stores the ink and provides it to a user when requested. Other applications (for example, drawing applications as known in the art are associated with the Palm 3.x and 4.x and PocketPC operating systems) permit the capture and storage of drawings. Also, various drawing applications such as Coral Draw and photo and editing applications such as Photoshop may be used with stylus based input products, such as the Wacom tablet product. These drawings include other properties associated with the ink strokes used to make up the drawings. For instance, line width and color may be stored with the ink. One goal of these systems is to replicate the look and feel of physical ink being applied to a piece of paper. However, physical ink on paper may have significant amounts of information not captured by the electronic collection of a coordinates and connecting line segments. Some of this information may include the thickness of the pen tip used (as seen through the width of the physical ink) or angle of the pen to the paper, the shape of the pen tip, the speed at which the ink was deposited, and the like.","Another problem has arisen with electronic ink. It has been considered part of the application in which it is written. This leads to a fundamental inability to provide the richness of electronic ink to other applications or environments. While text may be ported between a variety of application (through use, for example, of a clipboard), ink fails to have this ability of being able to interact with the ink. For example, one could not create an image of a figure eight, copy and paste the created image into a document by means of the clipboard, and then make the ink bold. One difficulty is the non-portability of the image between applications.","Software developers in general are familiar with the conventional Win32 RichEdit control that allows a user to enter and edit formatted text. Aspects of the present invention are directed to extending the functionality of the RichEdit control to further provide the ability to accept electronic ink handwriting. The handwriting may further be recognized and converted to text, either automatically after a time delay, or at a later time upon request. Where the ink is not converted to text, the original electronic ink may be stored, such as in an object-type data structure. Accordingly, aspects of the present invention may aid in the addition of electronic ink support to existing and future applications.","Further aspects of the present invention provide a flexible and efficient interface for interacting with properties, invoking methods and\/or receiving events related to electronic ink, thereby solving one or more of the problems identified with conventional devices and systems. Some aspects of the present invention relate to improving the content of stored ink. Other aspects relate to modifying stored ink. Still further aspects relate to providing for the interoperability of ink and text.","These and other features of the invention will be apparent upon consideration of the following detailed description of preferred embodiments.","Below is described a way to capture, recognize, interface with, edit or otherwise manipulate, and\/or display electronic ink.","General Computing Platforms",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","110","130","120","140","150"]},"A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during startup, is stored in the ROM . The computer  also includes a hard disk drive  for reading from and writing to a hard disk (not shown), a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . It will be appreciated by those skilled in the art that other types of computer readable media that can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may also be used in the example operating environment.","A number of program modules can be stored on the hard disk drive , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules , and program data . A user can enter commands and information into the computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). Further still, these devices may be coupled directly to the system bus  via an appropriate interface (not shown). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices (not shown), such as speakers and printers. In a preferred embodiment, a pen digitizer  and accompanying pen or stylus  are provided in order to digitally capture freehand input. Although a direct connection between the pen digitizer  and the processing unit  is shown, in practice, the pen digitizer  may be coupled to the processing unit  via a serial port, parallel port or other interface and the system bus  as known in the art. Furthermore, although the digitizer  is shown apart from the monitor , it is preferred that the usable input area of the digitizer  be co-extensive with the display area of the monitor . Further still, the digitizer  may be integrated in the monitor , or may exist as a separate device overlaying or otherwise appended to the monitor .","The computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  can be a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing a communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device.","It will be appreciated that the network connections shown are illustrative and other techniques for establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["201","201","202","203","204","201","204"]},"A stylus could be equipped with buttons or other features to augment its selection capabilities. In one embodiment, a stylus could be implemented as a \u201cpencil\u201d or \u201cpen\u201d, in which one end constitutes a writing portion and the other end constitutes an \u201ceraser\u201d end, and which, when moved across the display, indicates portions of the display are to be erased. Other types of input devices, such as a mouse, trackball, or the like could be used. Additionally, a user's own finger could be used for selecting or indicating portions of the displayed image on a touch-sensitive or proximity-sensitive display. Consequently, the term \u201cuser input device\u201d, as used herein, is intended to have a broad definition and encompasses many variations on well-known input devices.","Electronic Ink and the Concept of an Ink Object","Ink as used herein refers to electronic ink. The electronic ink may be structured as a sequence or set of strokes, where each stroke includes a sequence or set of points. A sequence of strokes and\/or points may be ordered by the time captured and\/or by where the strokes and\/or points appear on a page. A set of strokes may include sequences of strokes and\/or points, and\/or unordered strokes and\/or points. The points may be represented using a variety of known techniques including Cartesian coordinates (X, Y), polar coordinates (r, \u0398), and other techniques as known in the art. A stroke may alternatively be represented as a point and a vector in the direction of the next point. A stroke is intended to encompass any representation of points or segments relating to ink, irrespective of the underlying representation of points and\/or what connects the points. Ink collection typically begins at a digitizer (such as the digitizer of the display surface ). A user may place a stylus on the digitizer and begin to write or draw. At that point, new ink packets (i.e., packets of ink-related data) may be generated. The user may also move the stylus in the air proximate enough to the digitizer so as to be sensed by the digitizer. When this occurs, packets of data (called herein \u201cin-air packets\u201d) may be generated according to the sensed in-air movements of the stylus. Packets may include not only position information but also stylus pressure and\/or angle information.","To store ink, an ink object may be created that represents the original strokes of ink drawn by the stylus  upon the display surface  and\/or other input. The collected strokes of ink may be collected from anywhere on the display surface  or only from a defined portion thereof, such as a particular window. The Ink object is essentially a container of ink data. The particular format of how ink is stored in the ink object is not important to the present invention. It is preferable, however, that the ink strokes as originally drawn are stored in the ink object.","Two illustrative types of ink objects may be defined. A tInk object (the \u201ct\u201d meaning \u201ctext\u201d) may be embodied as an OLE object representing ink that is expected to form letters or words. The tInk object allows the handwritten ink to be converted to text, such as by a text recognizer. The tInk object may be referred to as an ink object that relates to ink and having a textual context. The color and\/or font size of the textual ink, as well as whether the textual ink should be underlined, bold, italic, and\/or the like may be set programmatically and may be based on the attributes of the text around the tInk object. In other words, the ambient properties at the tInk object's intended insertion point may be applied to the tInk object. In one embodiment, the tInk object contains only a single word for submission to the text recognizer, such that a sentence may contain multiple tInk objects. On the other hand, an sInk object (the \u201cs\u201d meaning \u201csketch\u201d) may also be defined as an object representing ink that is not expected to form words. The sInk object may also be an OLE object. An sInk object may therefore be interpreted as a drawing or any other non-textual context. A sInk object may also be useful for representing multiple words. An ink-compatible application (and\/or the user) may mark certain Ink objects as tInk objects and others as sInk objects. For the purposes of description, the two types of ink are described herein as \u201ctInk\u201d and \u201csInk.\u201d It is appreciated, however, that other names may be used to represent the various types of ink object that may be used. Also, alternative types of objects may be used to store electronic ink in any desired format.","InkCollector Object","An object (called herein an \u201cInkCollector\u201d object) may be defined and used to capture ink from an ink input device and\/or deliver ink to an application. The InkCollector object acts, in a sense, as a faucet that \u201cpours\u201d ink into one or more different and\/or distinct ink objects by collecting the ink as one or more ink strokes and storing the ink in one or more associated ink objects. The InkCollector object may attach itself to a known application window. It then may provide real-time inking on that window by using any or all available tablet devices (which may include the stylus  and\/or a mouse). To use the InkCollector object, the developer may create it, assign which window to collect drawn ink in, and enable the object. After the InkCollector object is enabled, it may be set to collect ink in a variety of ink collection modes, in which ink strokes and\/or gestures are collected. A gesture is a movement or other action of the stylus  that is interpreted not as rendered ink but as a request or command to perform some action or function. For example, a particular gesture may be performed for the purpose of selecting ink, while another gesture may be for the purpose of italicizing ink. For every movement of a stylus upon or proximate to the digitizer input, the InkCollector object will collect a stroke and\/or a gesture.","InkEdit Control","A control may be defined, herein called an \u201cInkEdit\u201d control, that provides an easy way to capture, recognize, and\/or display ink (e.g., in text form). The InkEdit control may further support displaying ink as an embedded object (e.g., as a tInk embedded object, programmatically accessible via an ink selection property) with ink-formatting and\/or text-formatting capabilities, such as bold, underline, italics, superscript, subscript, justification, and the like. The primary intended use of this control is to allow entry of ink and to display either the ink or the text recognized from the ink. This control may further allow editing and\/or formatting of the ink and\/or the recognized text.","A well-known Microsoft WINDOWS user interface is the edit control (i.e., RichEdit and RichTextBox). Embodiments of the InkEdit control provide developers an extended ink version of these controls they are already familiar with and are likely already using in their applications, and add various features to the existing RichEdit control to accept text from a stylus, mouse, and\/or other pointer, in addition to the existing ability to accept text from a keyboard. For example, in one embodiment, the InkEdit control provides the ability to accept electronic ink handwriting and recognize and convert that ink to text. The InkEdit control may further provide the ability to accept handwriting as ink for later recognition, such that the handwriting itself is editable.","To use the InkEdit control, a developer need simply instantiate the InkEdit control. The developer and\/or runtime user may further apply one or more modes to the InkEdit control various features. For example, one mode may indicate whether ink should be inserted as ink or text. The InkEdit control may manage many of the internal mundane details of establishing a tablet context, listening for digitizer events, collecting strokes, feeding the strokes into a recognizer, and\/or feeding the results of recognition (which may be, e.g., OLE embedded objects) into the InkEdit control for display and later persistence.","In one illustrative embodiment, the InkEdit control may be implemented in ActiveX and Win32 and be based on a conventional Microsoft Win32 Rich Edit control. In another illustrative embodiment, the InkEdit control may be implemented in Microsoft .NET and be based on the Win32 InkEdit and RichEdit controls, as well as the Microsoft .NET RichTextBox control. As is well known, the Microsoft RichEdit and RichTextBox controls allow a user to enter, edit, format, print, and save text while providing various advanced formatting features (such as text font, color, formatting, etc.). The InkEdit control of the present invention may thus have many of the features provided by the RichEdit and RichTextBox controls, except that these features may now be applied to ink as well as to conventional text. Ink may become a first-class citizen in and of itself. As is the case with text that may be bolded, underlined, italicized, and the like, the InkEdit control and its programming interface may permit ink information to be manipulated as easily as text, while providing the richness of handwritten ink.","In some embodiments, the InkEdit control is designed to work well in a form scenario for single line as well as multi-line text entry and editing. The InkEdit control may get ink input from a user in the form of textual handwriting. The ink input may be recognized and printed text may be inserted in its place. The default user interface for InkEdit may resemble that of the conventional RichTextBox control, except when the user is inking. The InkEdit control may display either original ink or recognized text (or both). The displayed ink may be scaled to the current input font size of the InkEdit control and may be displayed inline with other text, and\/or may otherwise be altered in its position, size, and\/or color. Alternatively, the displayed ink may retain its original position, size, and\/or color.","In one illustrative embodiment, the default behavior for the InkEdit control is to recognize and convert the ink into text after a brief recognition timeout has expired. This recognition timeout may be any amount of time as desired, such as about 2000 milliseconds, or in the range of about 100 milliseconds to about 5000 milliseconds, or in the range of about 200 milliseconds to about 2000 milliseconds. Where the recognition timeout is set to zero, this may disable automatic recognition. Because the InkEdit control may be a super-class of Rich Edit, it may further be possible to embed and display ink within the InkEdit control. Each ink word may be inserted into the control as an Ink object (e.g., a tInk object). The Ink object may contain the ink and one or more properties associated with the ink.","When inserted, the ink may be scaled to the current font size and other ambient properties, such as italics or bold, are applied. Should the user choose to edit the text of an Ink object, the user may first convert the ink to text.","Referring to , the InkEdit control may appear on the display in association with a graphical user interface . The graphical user interface  may include one or more display spaces  for receiving drawn ink data and\/or for displaying ink and\/or text. The graphical user interface may receive data, such as ink data drawn by the stylus  in the display space , and the InkEdit may interpret that data as ink. The InkEdit control may further associate the ink with one or more properties such as bold, underline, italics, superscript, subscript, justification, color, size, and\/or the like, as chosen by the application developer, the user, and\/or automatically. As shown in , some of the ink may be selected and provided a property, where, for example, the handwritten ink words \u201cconceived in liberty\u201d are selected and then italicized, and the handwritten ink words \u201ccreated equal\u201d are selected (shown by the broken box in ) and then increased in size. The InkEdit control may further cause the ink and its associated properties to be stored as an ink object. Thus, for example, the ink in the display space  may be stored in one or more ink objects, and the words \u201cconceived in liberty\u201d may be stored in the ink object to be associated with an italics property. In response to the ink data being received, the InkEdit control may cause the ink to be displayed. In one embodiment, the ink is displayed in the display space  at, e.g., the same location(s) within the display space  where the ink data is received.","The ink may remain displayed (i.e., persist) within the display space , or the ink may be recognized and\/or converted into text. This recognition and\/or conversion may take place immediately, after the recognition timeout, and\/or upon command (e.g., from a user or from an application). Where the ink is recognized and\/or converted to text in response to a timeout condition, the recognition timeout may be for any amount of time desired, such as about 2000 milliseconds, or in the range of about 100 milliseconds to about 5000 milliseconds, or in the range of about 200 milliseconds to about 2000 milliseconds. A timer for timing the recognition timeout may start in response to the stylus  lifting off the display surface  and\/or in response to a stroke ending, and may be canceled upon the stylus  returning to the display surface  before the timeout condition occurs. Other events that may cause the timer to start include the stylus  stopping movement upon the display surface , a gesture from the stylus , another input such as a button, and\/or the like. The ink may or may not be recognized and\/or displayed as printed text depending upon the setting of one or more mode switches. The one or more mode switches may be associated with one or more displayed elements (e.g., displayed element ) or may be hidden from the user (i.e., not shown on the display). Where the switch is in a first setting, the ink will not be recognized or displayed as text. In some embodiments, the ink may still be recognized and\/or displayed as text in response to a particular command. Where the switch is in a second setting, the ink may be recognized and\/or displayed as text (either immediately, after a timeout, or upon command as discussed herein). Where the ink is displayed as text, the text that results from the recognition may be displayed to replace the ink in the display space  such that the ink being replaced is no longer displayed in the display space .  illustrates a portion of the ink in the display space  having been recognized and converted to text, and  illustrates all of the ink in the display space  having been recognized and converted to text. In these illustrative figures, the script writing represents the original handwritten ink and the printed font represents the recognized text.","The ink may be recognized by a single recognizer or by a plurality of recognizers, such as a collection of recognizers. The recognizers may include one or more gesture recognizers and\/or text recognizers. A selection of ink to be recognized may further be associated with a particular recognition context, which may include a so-called \u201cfactoid\u201d property, along with one or more various recognition properties. The factoid property may be considered a set of \u201chints\u201d that are provided to the recognition context to assist in more accurate contextual recognition of ink. A recognizer context object may be defined that represents the ability to perform ink recognition, retrieve the recognition result, and\/or retrieve alternate recognition results. The recognizer context object may enable the various recognizers installed on a system to process input appropriately by performing ink recognition. At least two types of recognition may be performed including background recognition or foreground recognition. Background recognition occurs in the background processing of the system and may be stopped due to other system events (created by the user or otherwise). In contrast, foreground recognition is generally initiated by a user and does not stop until the recognition is completed. The recognition context object may receive ink strokes that are to be recognized and the factoid property may define the constraints and\/or other parameters on the input ink and the desired recognition output. For example, constraints that may be set include the language, dictionary, and\/or grammar to be used during recognition. Where the InkEdit control is used in connection with a form, a different recognizer context and\/or factoid may be set for each data entry field in the form. The various data entry fields may be specific to certain sets of information, such as telephone number fields having numbers, plus signs, dashes and parentheses; zip code fields having numbers and dashes only; state abbreviations having capital letters only; universal resource locators (URLs); and the like.","One potential benefit of having different recognizer contexts and\/or factoids is that, in some embodiments, the timeframe that recognition occurs, or what triggers recognition, may be adjusted. For example, for name or comment fields in a form, it may be desired that recognition occur at the end of each word. However, when using state, street\/apartment number, or zip code fields (for example), it may be desired that recognition occur after each character is written. In some instances, this character-by-character recognition may be used to provide greater recognition accuracy than may be achieved by recognizing a group of characters together.","The InkEdit control may further provide gesture support, and may generate events responsive to gestures. Referring to , various gestures may be supported, such as the illustrative gestures - as shown. For example, gesture  may represent a carriage return, gesture  may represent a tab command, gesture  may represent a space character, and gesture  may represent a backspace command. Many other gestures are possible.","The InkEdit control may further provides a correction user interface that allows users to view alternate recognition results, use an on-screen keyboard, and\/or use character, letter, and\/or block text recognizers as desired. Also, the InkEdit control may allow persistence and loading of its data using the same save and load mechanisms as the conventional Windows Forms RichTextbox control.","InkEdit API","The InkEdit control exposes a variety of functionality to the user through its application programming interface (API). Depending upon the host application, various flavors of the InkEdit API may be provided. Referring to , an illustrative system may include one or more of the following: An ActiveX Host Application , a Win32 Host Application , and\/or Common Language Runtime (CLR) Host Application . In addition, an InkEdit ActiveX control  may be defined and may interface with the ActiveX Host Application . An InkEdit Win32 control  may further be defined and may interface with the Win32 Host Application . An InkEdit WinForms control  may be defined and may interface with the CLR Host Application . Finally, a RichEdit 4.5 Win32 control  may be defined that interfaces with any or all of the various flavors of InkEdit controls , , . The InkEdit Win32 control  may be the basis for the other two controls (ActiveX control  and Winforms control ). In one embodiment, key functionality may be implemented in the Win32 control  such as the collection of ink, the interaction with the recognizer(s), and\/or subclassing the RichEdit Win32 control . The ActiveX InkEdit control  may use C++ classes defined by the Win32 InkEdit control  and may build on that functionality to create ActiveX support. The Winforms InkEdit control  may derive from a Winforms RichTextBox  and may extend it with inking functionality as discussed herein. The Winform InkEdit control  may extend functionality by, e.g., first loading a Win32 InkEdit control instead of the RichEdit control and adding new methods, properties, and\/or events as desired on top of the existing API elements provided by the RichTextBox . Note that  depicts an illustrative set of relations between controls in various hosting environments, and as such the arrows between the controls are not intended to be limiting in any way.","An illustrative API for the InkEdit control is now discussed with reference to . In , an InkEdit control  is represented by a box, and various elements (or functionally-grouped elements) of an API are shown as labeled arrows - emerging from and\/or entering the box representing the InkEdit control . In general, arrows entering the InkEdit control  box refer to API elements (or functionally-grouped elements) that for the most part modify the InkEdit control  (e.g., by changing one of its properties) and\/or otherwise provide information to the InkEdit control . Arrows emerging from the InkEdit control  box refer to API elements (or functionally-grouped elements) that for the most part represent a flag or some other information that is provided by the InkEdit control  to its environment. However, the directions of the arrows are illustrative and not intended to be limiting, and so an arrow entering the InkEdit control  is not prevented from also representing information provided by the InkEdit control  to its environment. Likewise, an arrow emerging from the InkEdit control  is not prevented from also modifying or providing information to the InkEdit control .  further shows a plurality of properties - of the InkEdit control . The below-discussed API elements may be utilized in any combination or subcombination for any flavor of an InkEdit-type control, including but not limited to the Win32, ActiveX, and NET flavors discussed herein.","The InkEdit API in the illustrative embodiment has some or all of the following enumerations and structures (not shown), in any combination or subcombination. For example, an appearance enumeration defines one or more values that specify whether the InkEdit control  appears flat or in three-dimensional when displayed. A border-style enumeration defines one or more values that specify whether the InkEdit control  has a border. An ink-mode enumeration defines one or more values that specify the collection mode settings for drawn ink\u2014whether ink collection is disabled, whether only ink is to be collected, or whether both ink and gestures are to be collected. An insert-mode enumeration defines one or more values that specify how ink is inserted onto the InkEdit control , either as ink or as recognized text. An InkEdit status enumeration defines one or more values that specify whether the InkEdit control  is idle, collecting ink, or recognizing ink. A load\/save enumeration defines one or more values that specify whether a file is loaded and\/or saved as a Rich Text Format (RTF) file, a text file, or a file in other format. A mouse-button enumeration defines one or more values that specify which mouse button was, or is being, pressed. Note that, unless otherwise specified, all references to a mouse or a mouse button herein may equally apply to a stylus and a stylus button. A scrollbars enumeration defines one or more values that specify whether the InkEdit control has horizontal and\/or vertical scrollbars. An alignment enumeration defines one or more values that specify whether a paragraph as displayed is aligned along the left or right margins of the InkEdit control, or between the left and right margins. A stroke-information structure contains information about a specific stroke, such as which cursor was used to create the stroke and where the stroke is stored (e.g., as a particular stroke object). A gesture-information structure contains information about a specific gesture, such as which cursor was used to create the gesture, the strokes that make up the gesture, and\/or where the gesture is stored (e.g., as a particular gesture object). The stroke-information and gesture-information structures may be used with particular success in the Win32 flavor of the InkEdit control. A recognition-results structure contains information regarding the results of text recognition and is send in response to a recognition result being ready. The notification as to where some or all of these herein-discussed structures are used may be provided via, e.g., a separate notification message.","The InkEdit API in the illustrative embodiment also has one or more of the following properties, in any combination or subcombination, that can be set and that can return the information they represent. For example, an appearance property  represents whether the InkEdit control  is displayed as being flat or in three dimensions. A background-color property  represents the background color for the InkEdit control . A border-style property  represents whether the InkEdit control  has a border. A create-parameters property  represents creation parameters when the InkEdit control  handle is created. A cursor property  represents the cursor that is displayed when the mouse pointer is over the InkEdit control . Drawing-attributes properties  represent the default drawing attributes to use when drawing and displaying ink (ink that has not yet been recognized as text) in the InkEdit control  or the drawing attributes to apply to ink as it is drawn. A scroll-bars-disabled property  represents whether scroll bars in the InkEdit control  are enabled or disabled. A drag-icon property  represent the icon to be displayed as the pointer in a drag-and-drop operation. A factoid property  represents the factoid (discussed further herein) that a recognizer uses to constrain its search for the recognition result. Various font and text properties  represent the font of the text displayed by the InkEdit control , as well as the font name and size of the currently-selected text or at the insertion point. Other font and text properties  represent whether the currently-selected text (or at the insertion point) is bold, italicized, or underlined. Still other font and text properties  represent whether the currently-selected text (or at the insertion point) appears on the baseline, as superscript, or as subscript, the alignment of the same, as well as the color of the currently-selected text or at the insertion point. Various ink-mode properties  represent how ink is collected when drawn on the control and whether ink collection is disabled, whether only ink is to be collected, or whether both ink and gestures are to be collected. A control-lock property  represents whether the contents of the InkEdit control  can be edited. Various mouse properties  represent the current custom mouse icon to be displayed and the type of mouse pointer displayed when the mouse pointer is over the graphical depiction of the InkEdit control . A multiline property  represents whether the InkEdit control  is a multiline control. Various recognizer properties  represent which recognizer is to be used for recognition, and the amount of time after an ink stroke has ended that text recognition is to begin. A scrollbar property  represents the type of scrollbars to display in the InkEdit control . An ink-object property  represents the Ink object(s) that are within the currently-selected text. Setting this ink-object property may cause the current selection to be replaced with the results of the recognition from recognizing the list of ink objects passed in. Various selected-text properties  represent the currently-selected text within the InkEdit control , the number of characters selected, the selected Rich Text Format (RTF) formatted text, and the starting point of the selected text. Various text-in-control properties  represent the current text displayed in the text box of the InkEdit control  as well as the text in the InkEdit control  including all RTF formatted codes. A status property  represents whether the InkEdit control  is idle, collecting ink, or recognizing ink.","The InkEdit API in the illustrative embodiment also has a plurality of associated messages, events, and methods, in any combination or subcombination. Since the InkEdit control is a super class of the RichEdit control, every RichEdit message is passed directly on (in most cases) to have the same effect as in RichEdit. This also applies to event notification messages, which notify the InkEdit control's parent window that a particular event has occurred.","For example, a cursor-down message  is sent responsive to the cursor tip (e.g., the tip of stylus ) physically contacting the digitizing surface (e.g., surface ). A stroke-completed message  is sent, and a stroke-completed event occurs, responsive to a stroke being completed. A stroke-completed method occurs responsive to a stroke-completed event occurring. A gesture-completed message  is sent responsive to a gesture being completed, which may be indicated by a gesture-completed event.","The InkEdit API may further have recognition-related events, methods, and messages . Such recognition-related messages are sent responsive to recognition having occurred, or get or set the recognizer that is used. Another recognition-related message specifically forces recognition prior to the recognition timeout would otherwise cause recognition to occur. Recognition-related events occur responsive to an application-specific gesture being recognized, and in response to recognition in general. Recognition-related methods occur responsive to the recognition event being raised, or specify that a collection of strokes should be recognized and that recognition results are to be returned.","The InkEdit API may further have an event  that occurs responsive to the InkEdit control  being clicked upon, events  that occur responsive to a key being pressed or released, events  that occur responsive to the mouse pointer and\/or stylus being over the InkEdit control  and being pressed, released, or double-clicked, and an event  that occurs responsive to the mouse pointer being moved over the InkEdit control .","The InkEdit API may further have a message  it uses for retrieving the status of the InkEdit control  based on the values defined in the ink edit status enumeration, methods  that load a specific type of file into the InkEdit control  or save the contents of the InkEdit control  to a specific type of file, and a method  for processing Windows messages.","The InkEdit API may further have messages  that retrieve or set the inking mode of the InkEdit control  based on the values defined in the ink mode enumeration, and messages  that retrieve or set the ink insertion mode of the InkEdit control , based on the values defined in the ink insert mode enumeration.","The InkEdit API may further have messages  that retrieve the current drawing attributes or set the future drawing attributes to be used in the InkEdit control , and messages  that retrieve or set the recognition timeout of the InkEdit control . The recognition timeout may be measured in, e.g., milliseconds.","The InkEdit API may further have gesture-status-related messages and methods . Gesture-status-related messages are defined that retrieve or set the gesture status for the InkEdit control . Gesture-status-related methods use the state of the gesture status to limit the set of gestures that may be recognized by the InkEdit control .","The InkEdit API may further have messages  that retrieve or set the recognizer to be used by the InkEdit control , messages  that retrieve or set the factoid to use for recognition, messages  that retrieve or set the currently-selected ink, messages  that retrieve or set the mouse icon that is displayed, and messages  that retrieve or set the mouse pointer to be displayed.","The InkEdit API may further have a constructor  for creating a new InkEdit control, and a method  that occurs when a handle is created for the InkEdit control . In the NET flavor of the InkEdit control, this method may be considered a constructor. the InkEdit API may further have a selection-changed event that occurs responsive to the selection of text within the control changing.","While illustrative systems and methods as described herein embodying various aspects of the present invention are shown by way of example, it will be understood, of course, that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination with elements of the other embodiments. Although the invention has been defined using the appended claims, these claims are illustrative in that the invention is intended to include the elements and steps described herein in any combination or sub combination. Accordingly, there are any number of alternative combinations for defining the invention, which incorporate one or more elements from the specification, including the description, claims, and drawings, in various combinations or sub combinations. It will be apparent to those skilled in the relevant technology, in light of the present specification, that alternate combinations of aspects of the invention, either alone or in combination with one or more elements or steps defined herein, may be utilized as modifications or alterations of the invention or as part of the invention. It is intended that the written description of the invention contained herein covers all such modifications and alterations. Also, it should be recognized that although various names of objects and other API elements are provided herein, such names are merely illustrative and any names may be used without departing from the scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary of the invention, as well as the following detailed description of preferred embodiments, is better understood when read in conjunction with the accompanying drawings, which are included by way of example, and not by way of limitation with regard to the claimed invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIGS. 3-6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
