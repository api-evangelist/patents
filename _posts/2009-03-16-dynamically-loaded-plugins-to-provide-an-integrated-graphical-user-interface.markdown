---
title: Dynamically loaded plug-ins to provide an integrated graphical user interface
abstract: A method of providing an integrated graphical user interface can include responsive to executing a host computer program, displaying, within a graphical user interface of the host computer program, a visual element of a plug-in that executes in cooperation with the host computer program without loading a functional component of the plug-in within program execution memory of a computer system executing the host computer program. At least a portion of the functional component of the plug-in can be loaded within program execution memory responsive to a selection of the visual element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146757&OS=09146757&RS=09146757
owner: XILINX, INC.
number: 09146757
owner_city: San Jose
owner_country: US
publication_date: 20090316
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF THE DRAWINGS"],"p":["The embodiments disclosed herein relate to the use of plug-ins within a computer program. More particularly, the embodiments relate to dynamically loading plug-ins and\/or portions of plug-ins within the computer program to facilitate an integrated graphical user interface.","Modern computer programs can provide a complex graphical user interface (GUI) that may be formed from one or more plug-ins. Generally, a plug-in refers to a computer program that interacts with a host computer program to provide a particular function. In some instances, a plug-in executes cooperatively with the host computer program, but need not execute within an execution environment or framework provided by the host computer program. In other cases, the plug-in does execute within an execution environment provided by the host computer program.","For example, a GUI for an electronic design automation (EDA) computer program may utilize one plug-in to provide users with the ability to edit text documents and another plug-in to provide users with the ability to edit schematic diagrams of circuits. Plug-ins also are utilized within Internet browsers and electronic mail clients to expand functionality of the host computer program. Within browsers, for example, plug-ins are used to play particular types of digital content or files.","A plug-in typically is executed as a binary file at startup of the host computer program. Once the plug-in is executing, the plug-in can provide different visual elements that may be integrated into the GUI of the host computer program. These visual elements can include menus items, toolbar buttons, preference controls, or the like. Accordingly, a plug-in must be executed, and therefore loaded into memory of the computer system executing the host computer program (host computer system), for visual elements of the plug-in to be incorporated or displayed within the GUI of the host computer program. Thus, whether or not the functionality provided by the plug-in is utilized within the host computer program, the plug-in still consumes memory of the host computer system. Depending upon the number and complexity of the plug-ins within the host computer program, the amount of memory of the host computer system consumed by the plug-ins may be significant.","In addition, the process of loading and initializing each plug-in within the host computer program requires time. This increases the amount of time needed for the host computer program to finish loading and initialization, thereby increasing the amount of time that a user must wait prior to using the host computer program after launch.","In other cases, the plug-in may not be loaded until such time that the plug-in is needed. For example, when opening a particular type of file within a browser, the plug-in may not be executed until such time that a request to open or otherwise process the type of file handled by the plug-in is issued. Still, because the plug-in is not executing, controls, settings, and other visual elements of the plug-in are not displayed within the GUI of the host computer program and are, therefore, not available to the user until the plug-in is executed. There is no visual integration of the controls or settings, for example, of the plug-in within the GUI of the host computer program until the plug-in is executed.","The embodiments disclosed within this specification relate to the use of plug-ins within a computer program and to dynamically loading plug-ins within the computer program to facilitate an integrated graphical user interface (GUI). One embodiment of the present invention can include a computer-implemented method of providing an integrated GUI. The method can include, responsive to executing a host computer program, displaying, within a GUI of the host computer program, a visual element of a plug-in that executes in cooperation with the host computer program without loading a functional component of the plug-in within program execution memory of a computer system executing the host computer program. The method further can include, responsive to a selection of the visual element, loading at least a portion of the functional component of the plug-in within program execution memory of the computer system.","Loading at least a portion of the functional component of the plug-in within program execution memory can include executing the at least a portion of the functional component of the plug-in.","Displaying, within a GUI of the host computer program, a visual element of a plug-in can include determining that the plug-in is registered with the host computer program, identifying a plug-in description file associated with the plug-in, and initially loading the plug-in description file without loading the functional component of the plug-in associated with the plug-in description file. Each visual element to be displayed for the plug-in can be determined from the plug-in description file.","The functional component of the plug-in can include a plurality of functions. Each of the plurality of functions can be associated with a visual element displayed within the GUI of the host computer program. In that case, loading the plug-in within program execution memory can include loading a particular function, selected from the plurality of functions, that is associated with the selected visual element.","Displaying, within a GUI of the host computer program, a visual element of a plug-in can include selectively enabling the visual element for display according to an operational state of the host computer program and\/or selectively displaying the visual element according to an operational state of the host computer program. Displaying, within a GUI of the host computer program, a visual element of a plug-in also can include modifying an appearance of the visual element according to an operational state of the host computer program.","The computer-implemented method also can include dereferencing the plug-in within the host computer program and unloading the at least a portion of the functional component of the plug-in from program execution memory after dereferencing of the plug-in.","Another embodiment of the present invention can include a computer-implemented method of providing an integrated GUI including, responsive to executing a host computer program, locating a plug-in description file associated with a plug-in registered with the host computer program, determining at least one visual element of the plug-in to be displayed within a GUI of the host computer program from the plug-in description file, displaying the visual element within the GUI of the host computer program without executing a functional component of the plug-in, and responsive to a selection of the visual element, executing at least a portion of the functional component of the plug-in.","Displaying the visual element within the GUI of the host computer program without executing the functional component of the plug-in can include selectively displaying the visual element according to an operational state of the host computer program.","The computer-implemented method also can include modifying an appearance of the visual element according to an operational state of the host computer program.","Yet another embodiment of the present invention can include a computer program product including a computer-usable medium having computer-usable program code that, when executed by a computer system, causes the computer system to perform the various steps and\/or functions disclosed herein.","While the specification concludes with claims defining the features of the invention that are regarded as novel, it is believed that the invention will be better understood from a consideration of the description in conjunction with the drawings. As required, detailed embodiments of the present invention are disclosed herein; however, it is to be understood that the disclosed embodiments are merely exemplary of the invention, which can be embodied in various forms. Therefore, specific structural and functional details disclosed herein are not to be interpreted as limiting, but merely as a basis for the claims and as a representative basis for teaching one skilled in the art to variously employ the inventive arrangements in virtually any appropriately detailed structure. Further, the terms and phrases used herein are not intended to be limiting but rather to provide an understandable description of the invention.","The embodiments disclosed herein relate to providing an integrated graphical user interface (GUI) for a computer program. In accordance with the embodiments disclosed within this specification, various aspects of a plug-in that is to execute cooperatively with a host computer program can be segmented or divided into different components. For example, visual elements of the plug-in may be specified independently of the functionality of the plug-in itself. By separating the visual elements from the functionality of the plug-in, the visual elements of the plug-in may be determined, loaded, and displayed within the GUI of the host computer program independently of executing the plug-in or loading the plug-in into memory of the computer system that executes the host computer program (host computer system). Separating the visual elements from the functionality of the plug-in allows the loading of the plug-in to be delayed until such time that the functionality of the plug-in is actually invoked or requested by a user, e.g., responsive to selecting a visual element that has been integrated into the GUI of the host computer program. Accordingly, more memory of the host computer system remains available for use by other processes and\/or computer programs.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","145","100","105","110"]},"Program execution memory  can refer to random access memory (RAM) or other forms of memory from which the processor of the host computer system  can directly execute program code. Typically, program execution memory  will be implemented as volatile memory, but this need not be the case. Program execution memory  may also be implemented as, or include, non-volatile memory in some computer systems. In other cases, program execution memory  may also refer to one or more cache memories which provide temporary storage of at least some computer program code. Cache memory can reduce the number of times program code must be retrieved from bulk storage memory  during execution of a computer program.","Bulk storage memory  can refer to a larger memory that typically is persistent, e.g., non-volatile, from which program code may be loaded into program execution memory  for execution by the processor of the host computer system . For example, bulk storage memory  can be some form of disc drive, whether magnetic, optical, or based upon some other technology.","Input\/output (I\/O) devices such as, for example, a keyboard , a display , a pointing device (not shown), etc., can be coupled to the host computer system  either directly or through intervening I\/O controllers. Network adapters may also be coupled to the host computer system  to enable the host computer system  to become coupled to other host computer systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems, and Ethernet cards are just a few of the currently available types of network adapters.","The host computer system  can execute a host computer program . The host computer program  can be a program that is capable of executing cooperatively with one or more plug-ins such as plug-in  and plug-in . As used herein, \u201cexecuting cooperatively\u201d can refer to the host computer program  providing an execution environment for a plug-in where the plug-in effectively runs within the host computer program . The phrase \u201cexecuting cooperatively\u201d further can refer to the situation in which the host computer program  executes concurrently with a plug-in. In that case, the host computer program  and the plug-in can communicate through an application programming interface (API) provided by the host computer program .","The host computer system  can execute the host computer program . Accordingly, the host computer program  is displayed within the program execution memory . As the host computer program  executes, each plug-in that is registered with the host computer program  can be identified. In this example, plug-in  and plug-in  each can be registered with the host computer program  and stored within the bulk storage memory .","In general, each of plug-ins  and  can be subdivided into several different components that allow the visual elements of each plug-in to be handled independently of the functional components of each plug-in. As shown, for example, plug-in  can include a plug-in description file  and a functional component . Similarly, plug-in  can include a plug-in description file  and a functional component .","Each of plug-in description files  and  can specify one or more visual elements that are to be displayed within a GUI of host computer program  as part of plug-ins  and  respectively. A visual element can refer to any sort of graphic interface element, whether a control panel, check-box, button, toolbar, menu item, etc. In addition to specifying each visual element of plug-ins  and , each of plug-in description files  and  can specify the placement of each visual element of plug-ins  and  respectively within the GUI of host computer program  as well as any conditions, e.g., operational states of host computer program , in which one or more or all of the visual elements specified by description files  and  are to be presented or displayed. Other visual data such as tool tip text or status bar text to be displayed within the GUI of host computer program  in association with the visual elements of each of plug-ins  and  may also be specified within the plug-in description files  and .","In one embodiment, the functional component  of plug-in  and the functional component  of plug-in  each can be implemented as a compiled binary file, e.g., a dynamically linked library (DLL). Other implementations of the functional components  and  may be used depending upon the particular operating environment provided by the host computer program . For example, in some instances the functional components  and  may be specified in bytecode or other forms that do not require compilation.","It should be appreciated that originally the host computer program  may have been stored, and continue to be stored, within the bulk storage memory . The host computer program  is not illustrated as being stored within the bulk storage memory  to more clearly illustrate the embodiments disclosed within this specification, but may be.","When host computer program  executes and identifies plug-in  and plug-in  as being registered plug-ins, the plug-in description files  and  associated with each of respective plug-ins  and  can be identified or determined according to the registration data for each of plug-ins  and . When host computer program  executes, rather than load each plug-in that is registered with the host computer program  into program execution memory  in its entirety, or otherwise begin executing each plug-in, the plug-in description files  and  can be identified, loaded into program execution memory , and read. By initially loading the plug-in description files  and , e.g., responsive to the execution or launch of host computer program , the time required for initializing host computer program  is reduced. Each of plug-ins  and , and particularly functional components  and , need not be initialized. This translates into reduced time before a user may begin using host computer program  after launch since the plug-ins  and , or at least functional components  and  of plug-ins  and , need not be initially loaded or executed.","Thus, as shown, each of plug-in description files  and  is illustrated as having been loaded into program execution memory . Plug-ins  and  themselves, e.g., functional components  and  in reference to the program code that specifies or implements the functionality of each respective plug-in, is not initially loaded into program execution memory . Rather, each of functional components  and  can remain stored in bulk storage memory .","Host computer program  can read each of plug-in description files  and  and identify any visual elements that are specified within each of plug-in description files  and  that correspond to plug-ins  and  respectively. For example, each of plug-in description files  and  can specify locations at which the various visual elements, e.g., graphic images for buttons or the like, are stored so that host computer program  can retrieve the various visual elements and present those visual elements within a GUI without executing plug-ins  and . As described within this specification, the execution of a plug-in requires the loading of that plug-in, or at least the loading of the functional component, or a portion of the functional component, of that plug-in, into program execution memory  from bulk storage memory .","Thus, within GUI  of host computer program , visual elements , which correspond to plug-in  can be displayed. Visual elements , in this case a series of radio buttons for options -A, -B, -C, -A, -B, and -C, is specified by plug-in description file . Visual elements , which correspond to plug-in , can be displayed. Visual elements , in this case the menu bar including the menu items \u201cComponent\u201d and \u201cConnectors\u201d and the toolbar including selectable button visual elements, can be specified by plug-in description file .",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1","b":["120","150","155","125","135","130","140"]},"Responsive to a user input selecting a visual element, e.g., a visual element from either the group of visual elements  or the group of visual elements , the plug-in, or portion thereof, associated with the selected visual element can be loaded into program execution memory . For example, responsive to a user input selecting visual element A, functional component  of plug-in , or a function (portion) of functional component , can be executed. In that case, functional component , or a portion thereof, of plug-in  that is associated with visual element A can be loaded in program execution memory  and executed. The plug-in description file  can specify a mapping or association of visual elements with the functional component  or portions thereof, e.g., functions, or entry points, of the associated plug-in.","The embodiments presented with reference to  allow users to access controls and preferences of plug-ins from within host computer program  without first having to execute the plug-in or load the plug-in into memory. The separation of visual components from functional components of the plug-ins can save a significant amount of memory resources within host computer system  that may be used for other computing purposes beyond execution of host computer program . Further, as noted, this can reduce the amount of time needed for the host computer program  to begin executing and be initialized for use by a user.","While the plug-in description files are depicted as being part of each plug-in, this need not be the case. In another embodiment, for example, each plug-in description file, while being associated with a plug-in, can exist as an independent file, e.g., as a contract that exists between the host computer program  and the plug-in, but which is not actually part of the plug-in. Further, the various visual elements described with reference to  can be stored within bulk storage memory  or within another data storage device, whether local to, or remotely located from, host computer system .","In another embodiment, the host computer program  can be configured, on a per-plug-in basis, for example, to selectively load each plug-in upon startup. This allows some plug-ins to be loaded in the conventional manner so that the plug-in is immediately available for use, while one or more other plug-ins can be handled in the manner described where the functional components are not loaded until a selection of a graphic element associated with that functional component is made by the user.","Allowing independent handling of plug-ins as described also facilitates a save\/restore function in which users can be provided an option that restarts the host computer program  in the same state that existed upon exit of the host computer program  in a prior session. In illustration, if the functional component  of plug-in  was used in a prior session of the host computer program , but plug-in  was not used, the next time that host computer program  is started, the functional component  of plug-in  can be automatically loaded, e.g., plug-in  can be automatically loaded as in a conventional system. Plug-in , however, and particularly the functional component  of plug-in , will not be loaded until such time that the user selects a visual element associated with functional component .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["200","200","200"]},"Upon executing the host computer program, the host computer program can determine that the plug-in \u201cguiLightPlugin\u201d is a registered plug-in. Accordingly, the host computer program can identify and load the plug-in description file  associated with the registered plug-in. The host computer program can determine or identify the various visual elements that are to be displayed within the GUI of the host computer program. The visual elements may be, for example, entire menus, entire toolbars, or individual controls such as buttons for existing toolbars of the host computer program or menu items for existing menus of the host computer program.","The plug-in description file  references a plug-in called \u201cguiLightPlugin,\u201d which is the plug-in associated with plug-in description file . In this example, the plug-in has been separated into two different DLLs. This need not be the case, however, as the plug-in may be implemented as a single DLL, two DLLs, or as more than two DLLs. In any case, one DLL is referenced as \u201clibGui_GfqTestPlugin,\u201d e.g., within segment  of the plug-in description file . The other DLL is referenced as \u201clibGui_LightPluginPref,\u201d e.g., within segment .","Segment  defines the command \u201cte-launch-plugin\u201d for \u201clibGui_GfqTestPlugin\u201d and specifies a visual element in the form of a menu item that can be displayed within the GUI of the host computer program. In this case, that menu item is \u201cLaunch Plugin,\u201d the selection of which will execute the command \u201cte-launch-plugin.\u201d Segment  further specifies the tool tip text \u201cLaunch Plugin\u201d that may be displayed when a pointer hovers over the displayed menu item. Segment  further specifies whether an icon is associated with the menu item \u201cLaunch Plugin.\u201d In this case, the value \u201cfalse\u201d indicates that no icon is to be presented with the menu item. If, however, an icon is specified, a path to the icon file can be specified. In that case, the host computer program can locate the icon file and display the icon as a visual element proximate to, or next to, the text \u201cLaunch Plugin\u201d of the menu item when the appropriate menu is accessed within the GUI of the host computer program.","Segment  specifies that the command \u201cte-launch-plugin\u201d is to be accessible or listed beneath the \u201cEdit\u201d menu within the menu bar of the host computer program. Thus, as \u201cte-launch-plugin\u201d has been defined in segment , the visual element \u201cLaunch Plugin\u201d will be displayed as a menu item beneath the \u201cEdit\u201d menu within the menu bar of the host computer program. Selection of the \u201cLaunch Plugin\u201d menu item beneath the \u201cEdit\u201d menu will load the \u201clibGui_GfqTestPlugin\u201d DLL and call the entry point function for that DLL.","Segment  defines a toolbar button type of visual element that can be added to a toolbar that is displayed within the host computer program. The toolbar button also can be associated with the command \u201cte-launch-plugin.\u201d Accordingly, activation of the toolbar button will execute the \u201cte-launch-plugin\u201d command, which loads the \u201clibGui_GfqTestPlugin\u201d DLL and call the entry point function for that DLL.","Segment  adds a filter to the \u201cOpen\u201d function accessible from the \u201cFile\u201d menu within the host computer program. In this example, responsive to a user selection of \u201cFile\u201d menu from the menu bar and the \u201cOpen\u201d menu item beneath the \u201cFile\u201d menu, a filter allowing only text files, or files with a \u201ctxt\u201d file extension will be displayed. That is, the file type portion of the file open dialog that is typically presented to a user within the host computer program can be set, or pre-filled with the allowable file extensions, so that only allowable file types, in this case text files, are shown.","Segment  specifies that when a new file is being created, e.g., when a user selects the menu item \u201cNew\u201d from the \u201cFile\u201d menu in the menu bar, the default file name will be \u201cTest Plugin\u201d as a new document is created.","Segment  specifies the DLL \u201clibGui_LightPluginPref\u201d through which a user may specify one or more settings, e.g., preferences, that dictate the manner in which the \u201clibGui_GfqTestPlugin\u201d DLL functions. Segment  includes the closing tag for the \u201cguiLightPlugin\u201d plug-in description file .","By loading the plug-in description file  and determining the various visual elements to be incorporated into the GUI of the host computer program, the visual elements can be displayed or displayed when appropriate, e.g., according to state of the host computer program. For example, a menu item such as \u201cLaunch Plugin\u201d that is beneath the \u201cEdit\u201d menu in the menu bar of the host computer program would only be viewable when the host computer program is placed in a state corresponding to the user providing an input that selects the \u201cEdit\u201d menu. Accordingly, the operating state of the host computer program would be such that the \u201cEdit\u201d menu has been selected in order to display the \u201cLaunch Plugin\u201d menu item.","The visual elements described with reference to  can be displayed within the host computer program without loading or executing the plug-in itself, e.g., the binary file or DLL. The plug-in may be loaded into memory, e.g., program execution memory, responsive to a user selecting a visual element of the plug-in. At that point, an entry function of the plug-in may be called.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":["300","300","305"]},"In step , the system can identify the plug-in that is registered with the host computer program. As noted, each plug-in that may be executed by the host computer program can be registered, e.g., identified on a list of plug-ins that are executable by the host computer-program. The list may be maintained by the system. The registration may specify one or more file types, e.g., file extensions, that may be launched or handled by each plug-in registered with the system.","In one embodiment, the host computer program can include a plug-in manager. The plug-in manager can identify those plug-ins registered with the host computer program. Further, the plug-in manager can handle queries from different functions of the host computer program that are tasked with menu construction, toolbar construction, or the like, e.g., those functions that display the visual elements within the host computer program. The plug-in manager can determine the visual elements to be displayed from the plug-in description files and optionally other parameters such as the operational state of the host computer program responsive to queries from the functions as disclosed within this specification and respond to each querying function as may be required with any visual elements, or references thereto, to be displayed.","In step , the system can identify the plug-in description file associated with the plug-in identified in step  and load the plug-in description file into program execution memory. The plug-in description file for each respective plug-in may be specified within the list maintained by the system that specifies registered plug-ins. In step , the system can determine, from the plug-in description file, the visual element(s) that are to be displayed within the GUI of the host computer program. As noted, the plug-in description file can specify the different visual elements to be displayed within the GUI of the host computer program, the circumstances under which each visual element is to be displayed, e.g., the operating state of the host computer program when each visual element is displayed, the location within the GUI of the host computer program in which each visual element is to be displayed, as well as one or more programmatic actions to be performed responsive to a selection of each visual element, e.g., execution of the functional component of the plug-in or a particular function of the functional component of the plug-in.","In step , the system can display the visual elements for the plug-in that are determined from the plug-in description file within the GUI of the host computer program. The visual elements can be located from a data storage unit as determined from the plug-in description file without loading the plug-in into program execution memory. In step , the system can monitor for a user input selecting of one or more of the visual elements of the plug-in displayed within the GUI of the host computer program.","In step , the system can determine whether a user input selecting a visual element of the plug-in has been detected. When a user input selecting a visual element of the plug-in is detected, the method can continue to step . When no user input selecting a visual element of the plug-in is detected, the method can loop back to step  and continue monitoring for a user input selecting a visual element of the plug-in.","In step , responsive to the user input selecting a visual element of the plug-in, the system can load and execute the functional component of the plug-in associated with the visual element as specified by the plug-in description file. As noted, the system can load and execute the entire functional component or any portion thereof that has been associated with the selected visual element within the plug-in description file.","The method  of  has been described with reference to a single plug-in being registered with the host computer program for the purpose of illustration. The embodiments disclosed within this specification are not intended to be limited to such an example. Accordingly, it should be appreciated that method  can be implemented with a plurality of plug-ins being registered with the host computer program.","The method  of  illustrates how the presentation of visual elements of a plug-in may be separated from the loading and execution of the functional component of the plug-in into program execution memory of the host computer system. This separation allows program execution memory that would otherwise be used to execute the functional component of the plug-in, despite no functionality of the plug-in being used or accessed, to be available for other purposes, e.g., other computer programs or functions as the case may be.","It should be appreciated that steps - can be performed automatically by the system responsive to execution of the host computer program. Loading and\/or execution of the plug-in is performed responsive to a user input selecting a displayed visual element of the plug-in.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 4","FIGS. 1 and 2"],"b":["400","400","405","410","415"]},"In step , the system can determine the GUI elements for each registered plug-in from the plug-in description file associated with each respective registered plug-in. In step , the system can determine the operational state of the host computer program. Accordingly, in step , the system can enable selected visual element(s) specified by the plug-in description files according to the operational state of the host computer program determined in step . As noted, the plug-in description file for each plug-in can specify the particular operational state in which visual elements for the plug-in associated with the plug-in description file are to be displayed. As used herein, the term \u201cenable\u201d can refer to designating a visual element as one that is to be displayed in response to determining that the host computer program is in a particular operating state. Conversely, a visual element that is not enabled is one that may not be displayed as the host computer program is not in the correct operating state in which that visual element is to be displayed.","In step , the system can selectively display any of the visual elements of the registered plug-ins as determined according to the operational state of the host computer program and the plug-in description files for the registered plug-ins. That is, the system can display those visual elements that have been enabled. For example, when a plug-in description file for a plug-in specifies a menu item type of visual element to be added to the \u201cFile\u201d menu of the host computer program, the visual element will only be enabled, and therefore displayed, when the operational state of the host computer program indicates that a user input selecting the \u201cFile\u201d menu has been received thereby causing the display of the menu items beneath the \u201cFile\u201d menu within the GUI of the host computer program.","In some cases, a visual element of a plug-in that is not enabled may still be displayed, albeit in a manner that indicates that the functionality of the visual element is not available to the user in the current operational state. In that case, for example, a user may select the \u201cFile\u201d menu. While an menu item for a plug-in may be displayed beneath the \u201cFile\u201d menu, the operational state of the host computer program may be such that the menu item corresponding to the plug-in is not available. In that case, the visual element, e.g., the menu item, may be displayed beneath the \u201cFile\u201d menu, but in a dimmed state, or with an altered appearance, indicating that the user may not select the menu item.","As noted, though the plug-in description files associated with the registered plug-ins are loaded into program execution memory of the system and read by the system, the functional component of the plug-ins associated with the plug-in description files are not loaded into program execution memory and are not executed until a user input selecting a visual element of the plug-ins is detected. Accordingly, the visual elements of each registered plug-in can be displayed within the GUI of the host computer program without concurrent execution of the functional component of the registered plug-in.","In step , the system can monitor for a user input selecting a visual element of a registered plug-in of the host computer program. The system can perform steps - automatically and in response to execution of the host computer program.","In step , the system can determine whether a user input selecting a visual element of a registered plug-in has been received. When such a user input is received, the method can proceed to step . When no user input is received that selects a visual element of a registered plug-in of the host computer program, the method can loop back to step  and continue executing as described. In step , the system can load and execute the functional portion of the plug-in, or portion thereof, that is associated with the selected visual element, as specified within the plug-in description file.","In another embodiment, the host computer program can be programmed to dereference each plug-in responsive to an event indicating that the plug-in has completed a processing task or is otherwise no longer needed by the host computer program. By dereferencing the plug-in when execution of the plug-in is complete, the plug-in, and particularly any functional component of the plug-in, can be unloaded from program execution memory, thereby freeing the program execution memory for use by other computer programs and\/or plug-ins as the case may be.","In still another embodiment, plug-ins can be hierarchical in that one plug-in description file can reference one or more other plug-in description files. This allows a first plug-in, for example, to load the description file and access visual elements of a second plug-in without having to load the functional component of the second plug-in.","In addition, while each plug-in has been illustrated with its own plug-in description file, in another embodiment, a plurality of plug-ins, or functional components, can be associated with a single plug-in description file. Such a structure allows, for example, a plurality of plug-ins or functional components to share one or more visual elements, but implement different functionality. In illustration, a single plug-in description file can be associated with a first plug-in that provides particular functionality and a second plug-in that provides the same or similar functionality, albeit at a higher or more detailed level. For example, the first plug-in may provide basic functionality in a lightweight implementation whereas the second plug-in provides more detailed and in depth functionality in a heavier, e.g., more resource intensive, implementation. Through various preferences established in the host computer program, the particular plug-in that is used or loaded can be specified though at least some, if not all, of the visual elements for each of the first and second plug-ins are shared as each can be referenced by the same plug-in description file.","The use of plug-in description files allows separation of visual elements of the plug-ins from the functionality of the plug-ins. In addition to the various benefits described within this specification, the use of plug-in description files lends each plug-in to modern searching and indexing functions. This allows users to search for particular functionality in plug-ins, as specified by the plug-in description files, and, optionally, load only those plug-ins that may be desired upon launch of the host computer program. This also allows new plug-ins to be added to a computer program, but still provide the user with the ability to selectively load only those that are desired. For example, responsive to a query, only those plug-ins having a plug-in description file that matches or corresponds to the query can be loaded or executed responsive to program launch by the plug-in manager. In addition, implementation of plug-ins in accordance with the embodiments described within this specification facilitates the updating of plug-ins without having to update the entire host computer program.","The flowcharts in the figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowcharts may represent a module, segment, or portion of code, which comprises one or more portions of computer-usable program code that implements the specified logical function(s).","It should be noted that, in some alternative implementations, the functions noted in the blocks may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It also should be noted that each block of the flowchart illustrations, and combinations of blocks in the flowchart illustrations, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions.","Embodiments of the present invention can be realized in hardware, software, or a combination of hardware and software. The embodiments can be realized in a centralized fashion in one data processing system or in a distributed fashion where different elements are spread across several interconnected data processing systems. Any kind of data processing system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general-purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","Embodiments of the present invention further can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein. The computer program product can include a computer-usable or computer-readable medium having computer-usable program code which, when loaded in a computer system, causes the computer system to perform the functions described herein. Examples of computer-usable or computer-readable media can include, but are not limited to, optical media, magnetic media, computer memory, or the like.","The terms \u201ccomputer program,\u201d \u201csoftware,\u201d \u201capplication,\u201d \u201ccomputer-usable program code,\u201d variants and\/or combinations thereof, in the present context, mean any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form. For example, a computer program can include, but is not limited to, a subroutine, a function, a procedure, an object method, an object implementation, an executable application, an applet, a servlet, a source code, an object code, a shared library\/dynamic load library and\/or other sequence of instructions designed for execution on a computer system.","The terms \u201ca\u201d and \u201can,\u201d as used herein, are defined as one or more than one. The term \u201cplurality,\u201d as used herein, is defined as two or more than two. The term \u201canother,\u201d as used herein, is defined as at least a second or more. The terms \u201cincluding\u201d and\/or \u201chaving,\u201d as used herein, are defined as comprising, i.e., open language. The term \u201ccoupled,\u201d as used herein, is defined as connected, although not necessarily directly, and not necessarily mechanically, e.g., communicatively linked through a communication channel or pathway or another component or system.","The embodiments disclosed herein can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the various embodiments of the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
