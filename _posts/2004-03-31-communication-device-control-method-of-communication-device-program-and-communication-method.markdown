---
title: Communication device, control method of communication device, program and communication method
abstract: The present invention provides a means for reflecting modifications made in a server to data with regard to a scope of rights, which are granted to an application program operable in a communication device such as a mobile station, on data stored in the communication device. To achieve the aim, in a system according to the present invention, Java-AP software is provided to a mobile station by transmitting an ADF, a SDF and a JAR file from servers to the mobile station in that order. The SDF is a file containing data indicating restrictions of behavior of a Java-AP in a mobile station. The SDF also contains data indicating a validity state of the SDF, namely ‘valid’ or ‘invalid’, which is managed by management server device . Before a mobile station runs a Java-APP which is installed in the mobile station, the mobile station accesses management server device  and checks whether a SDF corresponding to the Java-APP is valid. When the SDF is valid, the mobile station runs the Java-APP following the restrictions indicated in the SDF.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421577&OS=07421577&RS=07421577
owner: NTT DoCoMo, Inc.
number: 07421577
owner_city: Tokyo
owner_country: JP
publication_date: 20040331
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"p":["This application claims priority under 35 U.S.C. \u00a7119 to Japanese Patent Application No. 2003-096015 filed Mar. 31, 2003, the entire content of which is hereby incorporated by reference.","The present invention relates to a technology for granting application behavior rights.","Recently, many new functions for use in mobile stations have been developed. These include, for example, functions for downloading software containing application programs written in Java (registered trademark) programming language (the application program will be referred to as \u2018Java-APP\u2019, and the software will be referred to as \u2018Java-AP software\u2019 hereinafter), through communication networks, and also functions for running Java-APPs.","Behavior of applications, which are groups of functions realized in mobile stations when Java-APPs are run (the application will be referred to as \u2018Java-AP\u2019 hereinafter) is generally subject to greater restriction than that of native application programs, which application programs are installed in mobile stations prior to distribution to users; and include email communication applications, and the like. (For example, refer to Japanese patent laid-open No. 10-254783.)","Specifically, Java-APs are generally not permitted to access confidential data, such as telephone directory data stored in a mobile station. The rationale for restricting the behavior of Java-APs in this way is to prevent leakage or falsification of confidential data by Java-APs which are realized by Java-APPs containing either malicious code or code errors.","However, imposing strict behavior restriction on all Java-APs makes it impossible to meet demands of users who wish to use a variety of new and useful functions of Java-APs. Similarly, such comprehensive restriction also makes it impossible for Contents Providers (referred to as \u2018CPs\u2019 hereinafter) to provide to users Java-APPs which are capable of providing a variety of such functions.","In a case that reasonable security (reliability) of such Java-APPs can be assured, it is likely that users would not object to Java-APs being able to access personal data stored in a mobile station in which they are run. Moreover, it would be desirable for CPs to be able to provide users with more functional Java-APPs than is currently the case, and which can provide various functions in utilizing personal data stored in mobile stations.","To meet the demands explained above, different systems have been proposed, such as the one outlined below.","In this example, a carrier which provides communication services to users of mobile stations grants rights of behavior with fewer restrictions to Java-APs, than those that are normally applied; and the carrier informs the mobile stations of the kind of rights that have been granted to the Java-APs. The carrier would normally be one that is considered to be reliable in terms of security by users; thus, in this explanation the expression \u2018reliable agency\u2019 is used. In the system in question, restriction of behavior of Java-APs is controlled at a mobile station on the basis of rights informed to the mobile station by the reliable agency.","However, this system suffers from a problem. Namely, during use, the reliable agency informs mobile stations of those rights of behavior for which restrictions are relaxed for Java-APPs operable in the mobile stations. Then, the mobile stations accordingly set restrictions for the behavior of the Java-APs. However, it may become necessary for the reliable agency to modify information about such behavior rights. This would be the case, say, in a situation where it is retrospectively realized that a behavior right relaxation of a Java-AP is having a detrimental effect on users. Such a case could include that in which a Java-AP reads out personal data stored in a mobile station memory and transmits the data to an external device without the consent of the owner. In this case, it would be necessary for the reliable agency to immediately modify allowable behavior of the Java-AP. Simply put, there will be occasions on which to ensure data security it becomes necessary to (rapidly) modify rights of behavior granted by a reliable agency to a Java-AP.","In consideration of such problems, the present invention has been made to provide a system which enables modifications of rights, which have been granted to communication devices such as mobile stations, to be reflected as restrictions of behaviors in the communication devices.","To solve the problem of the conventional art described above, the object of the present invention is to provide a communication device comprising: an executing means for executing software; a permission data storing means for storing permission data indicating permissible behavior for an application, which is a group of functions provided by execution of the software; a checking means for checking, by accessing an external device before the software is executed, whether the permission data are valid; and an execution control means for permitting the executing means to execute the software when, on the basis of a result of the check carried out by the checking means, the permission data are determined to be valid, and for not permitting the executing means to execute the software when, on the basis of the result of the check executed by the checking means, the permission data are determined to be invalid.","According to the communication device of the present invention, since a validity of permission data is checked by accessing an external device before software is executed, secure execution of software can be realized.","In a preferred embodiment, the present communication device further comprises a determining means for determining whether it is necessary to carry out the check by the checking means, the determining means either carrying out or not carrying out the check on the basis of a determination made by the determination means.","As will be apparent from the foregoing description, in the communication device of the present invention, it is possible to determine whether a check is actually required. As a result, communication operations can be simplified in comparison with a system in which a check must be conducted each time software is to be executed.","In another preferred embodiment, in the present communication device, the determining means comprises: a counting means for counting a number of executions of the software; and a frequency data storing means for storing frequency data indicating how frequently it is necessary to carry out the check; and wherein, the determining means determines, on the basis of a number of executions of the software, as counted by the counting means, and on the basis of the frequency data stored in the frequency data storing means, whether it is necessary to carry out a check by the checking means.","According to the present communication device, the check is carried out on the basis of a number of execution times of the software.","In another preferred embodiment, in the communication device, the determining means comprises: a timer means for providing time data indicating a present time; and a time interval data storing means for storing time interval data indicating a time interval at which it is necessary to carry out the check; and wherein, the determining means calculates, on the basis of time data provided by the timer, a time period between a present time and a time recorded at a most recent execution of the software, and determines whether it is necessary to carry out the check by the checking means on the basis of the calculated time period and the time interval data stored in the time interval data storing means.","Thus, according to the present communication device, the check is carried out on the basis of a determined time interval.","In another preferred embodiment, the communication device further comprises count data storing means for storing count data indicating a count of times that the software is allowed to be executed in a condition that the checking means is unable to make the check; and the execution control means permits the executing means to execute the software in a condition that the checking means is unable to make the check up to a number of times which is indicated by the count data stored in the count data storing means.","According to the present communication device, especially when the communication device is a mobile station which communicates with an external device wirelessly, a user can start the software up to a certain number of times even when the communication device is unable to make the check in a situation, for example, where a communication failure of some sort occurs, which is not uncommon in wireless systems.","In another preferred embodiment, the communication device further comprises an updating means for obtaining update data from the external device, and updating the permission data stored in the permission data storing means on the basis of the update data.","In another preferred embodiment, in the present communication device, the updating means transmits, to the external device, update timing data indicating a timing of a most recent update of the permission data stored in the permission data storing means, when the checking means makes the check; receives update data transmitted from the external device in response to the transmission of the update timing data; and updates the permission data stored in the permission data storing means on the basis of the update data.","In another preferred embodiment, the communication device further comprises a terminating means for instructing the executing means to terminate execution of the software when the application attempts to conduct behavior which the application is not permitted to conduct.","In another preferred embodiment, in the communication device, the permission data contain information on usage of at least one of an internal hardware resource of the communication device, an external hardware resource of the communication device, a software resource and a communication network resource.","The present invention also aims to provide a method for controlling a communication device comprising: a step for transmitting to the communication device permission data, which indicates permissible behavior for an application, which is a group of functions provided by execution of software in the communication device; a step for checking, by communicating data between the communication device and an external device, whether the permission data are valid, before the software is executed in the communication device; and a step for permitting the software to be executed only when the permission data are determined to be valid on the basis of a result of the check.","The present invention also aims to provide a program for instructing a computer to execute: a process for storing, in a storing means, permission data indicating permissible behavior for an application, which is a group of functions provided by execution of software; a process for checking, by accessing an external device, whether the permission data are valid, before the software is executed; and a process for permitting the software to be executed only when the permission data are determined to be valid on the basis of a result of the check.","The present invention further aims to provide a communication method comprising: a step for transmitting from a communication system comprising (a) a software data providing server device which stores software data containing software for providing a group of functions forming an application, (b) a management server device which stores security descriptor data containing permission data indicating permissible behavior for the application, and (c) an application descriptor data providing server device which stores application descriptor data indicating a storage location of the software data and a storage location of the security descriptor data, to the communication device the application descriptor data; a step for transmitting the application descriptor data from the communication system to the communication device; a step for transmitting data indicating the storage location of the security descriptor data contained in the application descriptor data from the communication device to the communication system; a step for transmitting the security descriptor data from the communication system to the communication device on the basis of the data indicating the storage location of the security descriptor data; a step for storing the security descriptor data in the communication device; a step for transmitting data indicating the storage location of the software data contained in the security descriptor data from the communication device to the communication system; a step for transmitting the software data from the communication system to the communication device on the basis of the data indicating the storage location of the software data; a step for installing, in the communication device, the software contained in the software data transmitted from the communication system to the communication device; a step for checking, by communicating data between the communication device and the communication system before the software is executed in the communication device, whether the security descriptor data stored in the communication device are valid; and a step for permitting the software to be executed in the communication device only when the security descriptor data are determined to be valid on the basis of a result of the check.","As mentioned above, according to the present invention, software which should not be executed is prevented from executing in a communication device such as a mobile station, since it is checked whether permission data, indicating behavior, which an application realized by the software is permitted to conduct, is valid or not by accessing an external device; and according to a result of the check, undesirable software is not permitted to be started.","In the following, an embodiment of the present invention will be explained with reference to the drawings. In the drawings, common components are referred to by the same reference numerals.","First, procedures which are followed by a mobile station for downloading Java-AP software in a known communication system will be explained. The mobile station first receives an Application Descriptor File or an Application Description File (referred to as \u2018ADF\u2019 hereinafter) from a server device contained in World Wide Web (referred to as \u2018WWW\u2019 hereinafter). Then, the mobile station receives a Java Archive file (referred to as \u2018JAR file\u2019 hereinafter).","An ADF contains data depending on a corresponding JAR file. For example, the ADF contains data showing a URL indicating a location where the JAR file is stored (referred to as \u2018package URL\u2019 hereinafter), data showing a size of the JAR file, data showing last update time of the JAR file, and so on. These data are indispensable to the ADF. After the mobile station receives the ADF, the mobile station determines whether a Java-APP to be downloaded, which is contained in the JAR file, is installable in the mobile station by referring to data contained in the ADF, checking available memory capacity, and so on. When the mobile station determines that the Java-APP is installable, the mobile station receives the JAR file from a server device in WWW using a package URL contained in the ADF. The mobile station completes the download processes when it receives the JAR file which contains the Java-APP. After the completion of the download, the downloaded Java-APP is installed in the mobile station and it becomes possible to be run. Usually, ADFs and JAR files are prepared by CPs who provide Java-AP. \u2018Java-AP software\u2019 is a term for describing a combination of an ADF and a JAR file in the known communication system.","On the other hand, when a Java-APP is downloaded into a mobile station in the present embodiment, first an ADF corresponding to Java-APP which a user of the mobile station wishes to download is delivered to the mobile station, then a Security Descriptor File or a Security Description File (referred to as \u2018SDF\u2019 hereinafter) which corresponds to the Java-APP is delivered to the mobile station, and finally a JAR file, which contains the Java-APP, is delivered to the mobile station. In short, three different files of ADF, SDF and JAR file are delivered to the mobile station in this order. ADF and JAR file are prepared by a CP who provides the Java-APP in the same way as in the known communication system. However, SDF is prepared by the above-mentioned carrier, following a contract made between the carrier and the CP. In the present embodiment, \u2018Java-AP software\u2019 is also used for describing a combination of an ADF, a SDF and a JAR file.","A SDF is a file describing a scope of rights which are granted to a corresponding Java-APP stored in a mobile station, and a mobile station runs Java-APP following a scope of rights described in a SDF. A server in the communication network stores data indicating whether each SDF is in a valid state or in an invalid state. Before a mobile station runs a Java-APP which is installed in the mobile station, the mobile station accesses the above-mentioned server to verify whether the SDF corresponding to the Java-APP is valid or invalid. In the following explanations this verification process will be called \u2018SDF check\u2019. If a result of the SDF check is \u2018in a valid state\u2019, the mobile station runs Java-APP following the scope of rights described in the SDF. On the other hand, if the result of the SDF check is \u2018in an invalid state\u2019, the mobile station is not allowed to run the Java-APP.","As explained above, since a state of validity with regard to each SDF can be changed in the server in the communication network, the carrier can easily prevent harmful Java-APP from being run in mobile stations only by setting the SDF corresponding to the Java-APP as in an invalid state.","\u2018Harmful Java-APP\u2019 means, for example, a Java-APP which may instruct a mobile station to execute an operation which is not expected by a user of the mobile station, such as reading secret data stored in a memory of the mobile station without consent of the user and transmitting the data to an external device. When the carrier finds any harmful Java-APP, the carrier has to only set the state of the SDF of the harmful Java-APP as in an invalid state. When a contract made between a CP and the carrier becomes invalid, for example, because a period of the contract has expired or the CP has not paid the charge indicated in the contract within the deadline, the carrier can also make the Java-APP so as to not be run just by setting a state of the SDF of the Java-APP as in an invalid state. Moreover, in a case that Java-APP is provided for a trial use only during a specified period, the carrier can make the Java-APP to not be run in the same way as explained above when the period for the trial use has passed.","Conversely, a state of a SDF which is set as in an invalid state may be changed to in a valid state when the carrier wants to allow a Java-APP corresponding to the SDF to be run.","In the following explanation, to describe a situation where a CPU runs a Java-APP to provide a group of functions, namely a Java-AP, the expression \u2018a Java-AP is realized\u2019 will be used.","(1) Configuration","In the following, configurations of the communication system according to the present embodiment will be explained.","As shown in , the communication system comprises CP server device  connected to Internet , mobile packet communication network  which is used by the carrier to provide mobile packet communication services to mobile stations, mobile station  which can exchange data packets wirelessly with mobile packet communication network  for communicating with an external device through mobile packet communication network , gateway server device  which interconnects Internet  and mobile packet communication network , and management server device  which is connected to gateway server device  via dedicated lines. Practically, the communication system may comprise plural mobile stations and plural CP server devices, but only one of mobile stations  and one of CP server devices  are shown in  to simplify the figure.","In the following, details of each component of the communication system will be explained.","(1-1) CP Server Device","CP server device  has hardware components and features of a general WWW server device. Nonvolatile memory A of CP server device  stores several JAR files, each of which contains a group of programs written in Java programming language, namely a Java-APP, and several ADFs, each of which contains data with regard to a corresponding JAR file.","In the communication system according to the present embodiment, some Java-APPs are allowed whose corresponding SDFs do not exist. Behavior of a Java-AP which is realized by a Java-APP whose SDF exists is restricted on the basis of its corresponding SDF. Such a Java-APP is called, in this specification, \u2018trusted Java-APP\u2019 since its reliability is guaranteed by the carrier according to a contract made between the carrier and a CP who provides the Java-APP. Similarly, in this specification a Java-AP which is realized by a trusted Java-APP is called a \u2018trusted Java-AP\u2019. A Java-APP whose ADF does not exist is a usual Java-APP used in a known communication system, and is called, in this specification, \u2018untrusted Java-APP\u2019 since its reliability is not guaranteed. In the same way, a Java-AP which is realized by an untrusted Java-APP is called, in this specification, an \u2018untrusted Java-AP\u2019. CP server device  can store both ADFs for trusted Java-APPs and ADFs for untrusted Java-APPs.","An ADF for a trusted Java-APP contains the same data which are contained in an ADF for an untrusted Java-APP such as a package URL indicating a storage location of a JAR file in WWW, data indicating size of the JAR file, data indicating last update time of the JAR file, and so on. An ADF for a trusted Java-APP further contains data called \u2018APID\u2019 for uniquely identifying the JAR file of the trusted Java-APP, and URL called \u2018SDF-URL\u2019 for indicating a storage location of a corresponding SDF in WWW. Mobile station  obtains an ADF corresponding to a trusted Java-APP from CP server device , and obtains a corresponding SDF using SDF-URL contained in the ADF.","In the following explanation of the present embodiment, as mentioned above, \u2018Java-AP software\u2019 may mean a combination of an ADF, a SDF and a JAR file when the Java-APP contained in the JAR file is a trusted Java-APP, or a combination of an ADF and a JAR file when the Java-APP is an untrusted Java-APP.","(1-2) Gateway Server Device","Gateway server device  is managed by the above-mentioned carrier, and has hardware components and features of a general gateway server device which interconnects a mobile packet communication network and Internet. Gateway server device  relays data mutually communicated between mobile packet communication network  and Internet .","(1-3) Management Server Device","Management server device  is managed by the above-mentioned carrier, and has hardware components and features of a general WWW server device. Nonvolatile memory A of management server device  stores several SDFs each corresponding to a trusted Java-APP. Each SDF contains, as explained above, data indicating a scope of rights which are granted to the trusted Java-APP. Each SDF further contains data which indicates whether the SDF is valid or invalid. Before mobile station  runs a trusted Java-APP, mobile station  needs to access management server device  and check if the SDF is valid or invalid. On the basis of a result of the check, mobile station  determines to execute or not to run the trusted Java-APP.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 2","b":["18","16"]},"The line starts with \u2018Content-Type\u2019 shown in , which is a field indicating a type of entity body of the HTTP message. In this case, the field contains a parameter of \u2018application\/x-sdf\u2019 which indicates that the entity body relates to a SDF.","Parameter \u2018Sts\u2019 is for indicating whether the SDF is valid or invalid, and called \u2018SDF status\u2019 in the following explanation. When SDF status is \u201800\u2019, it means the SDF is valid, and when SDF status is \u201810\u2019, it means the SDF is invalid. For example, in the example shown in , since the parameter \u2018Sts\u2019 is \u201800\u2019, the SDF is valid. The parameter \u2018Package URL\u2019 is the same package URL as contained in an ADF as explained above.","Parameter \u2018CheckCnt\u2019 is for indicating a number of times up to which a mobile station is allowed to run the trusted Java-APP in succession without carrying out a SDF check, and the number of times is called \u2018count for SDF check\u2019 in the following explanation. From a different point of view, a count for SDF check is frequency data showing how frequently a mobile station is required to carry out SDF checks.","In the present embodiment, for example, a count for SDF check is one of integral numbers between 1 and 999. In the example shown in , the parameter \u2018CheckCnt\u2019 is \u2018005\u2019, and it means that mobile station  is allowed to run the trusted Java-APP in succession up to 5 times without carrying our a SDF check.","Parameter \u2018Checklnt\u2019 is for indicating a time interval between timings when SDF checks should be carried out, and called \u2018interval for SDF check\u2019 in the following explanation. More concretely, an interval for SDF check means number of days during which mobile station  is allowed to run the trusted Java-APP without carrying out a SDF check after the last SDF check. In the present embodiment, for example, an interval for SDF check is one of integral numbers between 1 and 999. In the example shown in , the parameter \u2018Checklnt\u2019 is \u2018020\u2019, and it means that mobile station  is allowed to run the trusted Java-APP without executing a SDF check for 20 days once mobile station  carries out a SDF check, but when 20 days pass after the last SDF check, mobile station  is required to carry out a SDF check prior to running the trusted Java-APP.","Parameter \u2018SuspendedCnt\u2019 is for indicating a number of times up to which a mobile station is allowed to run the trusted Java-APP in succession in a case that the mobile station is not able to carry out a SDF check, and the number of times is called \u2018expanded count for SDF check\u2019 in the following explanation.","Mobile station  accesses management server device  wirelessly and carries out SDF checks. Accordingly, it may become impossible for mobile station  to carry out a SDF check when, for example, mobile station  is outside the service area of mobile packet communication network , namely when it is not reachable, or when a communication failure occurs which may happen more frequently in wireless communications than in cable communications. Therefore, if there is no parameter like \u2018SuspendedCnt\u2019, it may not be possible for a user to use a trusted Java-APP when the user wishes to use it because of a temporary communication failure, and so on, which is highly inconvenient to the user. To avoid such inconvenience, in the present embodiment, it is allowed for a mobile station to run a trusted Java-APP for a limited number of times in succession without carrying out a SDF check even when the mobile station is unable to carry out a SDF check since it is unreachable or in a state of communication failure. In the present embodiment, for example, an expanded count for SDF check is one of integral numbers between 1 and 999. In the example shown in , the parameter \u2018SuspendedCnt\u2019 is \u2018005\u2019, and it means that mobile station  is allowed to run the trusted Java-APP without carrying out a SDF check up to 5 times in succession even if it is unable to carry out a SDF check.","Parameter \u2018Lmd\u2019 is for indicating a time and date when the SDF was updated last in management server device , and the time and date is called \u2018last update time\u2019 in the following explanation.","In the example shown in , the parameter \u2018Lmd\u2019 is \u201820020614120552\u2019, and it means that the SDF was last updated 5 minutes and 52 seconds past 12 o'clock on Jun. 14th in year 2002. Last update times are used by management server device  for determining whether it is necessary to reflect updated contents of SDFs to data in mobile station .","Parameter \u2018GetPrivateInfo\u2019, \u2018UserMail\u2019, \u2018MessageApp\u2019, \u2018SetPhoneTheme\u2019, \u2018SetLaunchTime\u2019 and \u2018AllowedHost\u2019 are for indicating a scope of rights which are granted to the trusted Java-APP run in mobile station , and they are called \u2018permission data\u2019 in the following explanation.","For example, parameter \u2018GetPrivateInfo\u2019 is for indicating whether a trusted Java-AP realized by the trusted Java-APP is allowed to use a trusted Application Programming Interface (referred to as \u2018trusted API\u2019 hereinafter), which is called indispensably by the Java-AP when it needs to refer to confidential data stored in mobile station  such as telephone directory data and unread emails. When the trusted Java-AP is allowed to read confidential data, the parameter \u2018GetPrivatelnfo\u2019 is set as \u2018Yes\u2019. Similarly, parameters \u2018UserMail\u2019, \u2018MessageApp\u2019, \u2018SetPhoneTheme\u2019 and \u2018SetLaunchTime\u2019 are for indicating whether the trusted Java-AP is allowed to call trusted APIs, each of which corresponds to the respective parameter, and when it is allowed, the parameter is set as \u2018Yes\u2019. In the example shown in , all the parameters are set as \u2018Yes\u2019, and it means that the trusted Java-AP is allowed to call the corresponding trusted APIs.","Parameter \u2018AllowedHost\u2019 is for indicating URLs of communication devices which a mobile station is allowed to access while the trusted Java-APP is run in the mobile station, and the URLs are called \u2018access permitted URLs\u2019 in the following explanation.","A Java-APP which is downloaded to mobile station  is usually run following a security model which is generally called a sandbox model. According to the sandbox model, while mobile station  is running a Java-APP, mobile station  is allowed to communicate only with a server from which the Java-APP was downloaded. Under such a strict restriction, it is difficult to provide various kinds of application programs to a user of mobile station . Therefore, in the present embodiment, when a trusted Java-APP is run, mobile station  is permitted to communicate with certain external communication devices which are specified in advance, in addition to the server from which the trusted Java-APP was downloaded. The parameter \u2018AllowedHost\u2019 shows URLs of external communication devices with which a mobile station is permitted to communicate. In the example shown in , the parameter shows that a mobile station is permitted to communicate with external communication devices whose URLs contain \u2018http:\/\/aaa.co.jp\u2019 or \u2018http:\/\/bbb.co.jp\u2019 using the port of \u20188080\u2019.","When the parameter of access permitted URLs is set as \u2018any\u2019, it means that a mobile station is permitted to communicate with any external communication device while the trusted Java-APP is run. Since it may become difficult to keep security of data stored in the mobile station if the mobile station is permitted to communicate with any external communication device following the parameter \u2018any\u2019, it is also possible to specify URLs of certain external communication devices with which a mobile station is not permitted to communicate. Parameter \u2018DisallowedHost\u2019 is prepared for the purpose, and URLs of external communication devices with which a mobile station is not permitted to communicate, which are called \u2018access prohibited URLs\u2019 in the following explanation, are set to the parameter.","(1-4) Mobile Station","Mobile station  comprises, as illustrated in , Operating System (referred to as \u2018OS\u2019 hereinafter) software, ROM A which stores a Java environment program for constructing an environment for making Java-APPs operable and several other native application programs, CPU B which runs programs stored in ROM A, display unit C, nonvolatile memory D, RAM E, communicating unit F, operating unit G and timer H. These components are connected to one another through a data bus.","Display unit C comprises, for example, a liquid crystal display panel and a panel driver circuit, and displays images following data which are provided by CPU B. Communicating unit F comprises an antenna and a wireless communication unit, wirelessly communicates data packets with mobile packet communication network , and relays data packets between CPU B and mobile packet communication network . Communicating unit F comprises a CODEC, a microphone and a speaker for voice communications, and enables mobile station  to conduct voice communications through a mobile telephone network (not shown) which has a line switching system. Operating unit G comprises hardware such as keypad for operations of a user, and provides CPU B with certain signals in accordance with operations done by the user. Timer H keeps the present year, month, date and time (referred to just as \u2018present time\u2019 hereinafter). To make timer H keep the correct present time, mobile station  may regularly receive data indicating the accurate present time using a control channel from a base station (not shown) in mobile packet communication network , and adjust the time kept by timer H.","Nonvolatile memory D is, for example, a Static Random Access Memory (SRAM) or an Electrically Erasable and Programmable Read Only Memory (EEPROM). Nonvolatile memory D stores Java-AP software which are downloaded from servers comprised in WWW.","Details of an ADF and a SDF of trusted Java-AP software, which are stored in nonvolatile memory D, will be explained below.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 4","FIG. 2","FIG. 4"],"b":["16","16"]},"A number of execution times indicates a number of times that mobile station  ran the trusted Java-APP after the most recent execution of a SDF check. After the number of execution times reaches the count for SDF check, namely 5 in the example case shown in , mobile station  determines that it is required to carry out a SDF check before it runs the trusted Java-APP the next time.","A number of passed days indicates a time period, namely number of days, which passed after the most recent execution of a SDF check by mobile station . The passed days are calculated on the basis of the time kept by timer H continuously. After the number of passed days reaches the interval for SDF check, namely 20 in the example case shown in , mobile station  determines that it is required a SDF check to be carried out before it runs the trusted Java-APP the next time. A used expanded count for SDF check means a number of times that mobile station  ran the trusted Java-APP without carrying out SDF check when a SDF check is required since mobile station  was not able to carry out a SDF check. After the used expanded count for SDF check reaches the expanded count for SDF check, namely 5 in the example case shown in , mobile station  does not run the trusted Java-APP unless it carries out a SDF check successfully.","When a power supply (not shown) of mobile station  is turned on, CPU B reads the OS program stored in ROM A and runs the OS program using RAM E as a work area. Following instructions of the OS program, CPU B establishes an OS environment in mobile station  as illustrated in . After the OS environment is established, CPU B is enabled to identify instructions given by the user on the basis of signals provided by operating unit G, and execute required data processing in accordance with the instructions.","In the following, when a description like \u2018the OS executes an operation\u2019 is used, it means that CPU B executes the operation following instructions provided by the OS program. In the same way, when a description like \u2018the application executes an operation\u2019 is used, it means that CPU B runs the application program and executes the operation following instructions provided by the application program. Several applications shown in , such as Java-AP, Java Application Manager (referred to as \u2018JAM\u2019 hereinafter) and telephone directory AP are examples of such application.","When the user instructs mobile station  to run a communication program, which is one of native application programs, the OS starts the communication program and realizes a communication AP in mobile station . Once the communication AP is realized, the user is able to make a voice call to an external communication device. When the user instructs mobile station  to run a telephone directory program, which is also one of native application programs, the OS starts the telephone directory program and realizes a telephone directory program in mobile station . The user is able to make mobile station  display, use and edit the data of telephone directory (referred to as \u2018telephone directory data\u2019 hereinafter) stored in nonvolatile memory D by using telephone directory AP. When the user instructs mobile station  to run a Web browser program, which is also one of native application programs, the OS starts the Web browser program and realizes a Web browser in mobile station .","When the user instructs mobile station  to run a JAM program, which is also one of the native application programs, the OS starts the JAM program and realizes a JAM in mobile station . JAM shows the user a list of Java-APPs which are installed in mobile station , and executes one of the Java-APPs which is selected by the user. More concretely, if the instruction provided by the user is a request for starting one of the Java-APPs, first a Java-AP environment program is executed to establish a Java-AP environment in mobile station , then the Java-APP selected by the user is run to realize the Java-AP in the Java-AP environment. A Java-AP environment contains, for example, K Virtual Machine (KVM) which is a lightweight Java virtual machine tuned for a mobile communication device such as mobile station , and APIs which provide several functions to Java-APs. APIs which are prepared for Java-APs are categorized into trusted APIs which only trusted Java-APs, namely Java-APs which are realized by trusted Java-APPs, are permitted to use, and untrusted Java-APIs which all Java-APs are permitted to use.","The JAM further provides functions for managing behavior of Java-APs.","For example, when the JAM receives a request for running a Java-APP, the JAM determines whether a SDF check is required with regard to the SDF of the Java-APP, and if the JAM determines that the SDF check is required, it carries out the SDF check. For the purpose, the JAM provides functions for generating and updating data indicating the number of execution times, the number of passed days and the used expanded count for SDF check which are to be stored in nonvolatile memory D. Moreover, when a result of the SDF check indicates that the SDF is valid, the JAM permits the Java-APP to be run, and after the Java-AP is realized, the JAM restricts behavior of the Java-AP according to permission data contained in the SDF. On the other hand, when the result of the SDF check indicates that the SDF is invalid, the JAM does not permit the Java-APP to be run. When the JAM determines on the basis of the result of the SDF check that it is necessary to update the SDF, the JAM again accesses management server device , obtains the updated SDF, and updates data stored in mobile station .","(2) Operation","In the following, operations of the communication system, whose configurations are described above, will be explained.","(2-1) Installation of Java-APP","When the JAM receives a request for downloading a Java-APP from the Web browser, the JAM starts a series of processes for installing the Java-APP into mobile station .  illustrates a flow of the processes.","As illustrated in , the JAM first downloads from CP server device  an ADF corresponding to the Java-APP to be downloaded (step S). More concretely, the JAM generates a HTTP request containing an ADF-URL, transmits the HTTP request to CP server device , and receives a HTTP response containing the ADF from CP server device  in response to the HTTP request. In this process, an ADF-URL contained in a HTTP request may be input manually by the user, or selected by the user from candidate URLs embedded in a web page described in HyperText Markup Language (referred to as \u2018HTML\u2019 hereinafter). The JAM instructs nonvolatile memory D to store data contained in the downloaded ADF such as an APID, a package URL and a SDF-URL an ADF-URL as shown in .","Next, the JAM determines whether it is possible for the Java-APP to be downloaded and installed into mobile station  on the basis of the data of the ADF stored in nonvolatile memory D (step S). The JAM may carry out the determination in the same way as in the known system such as by comparing the size of a JAR file indicated in the ADF and available Free space of nonvolatile memory D where the JAR file is to be stored.","If the JAM determines that the installation is possible (step S; Yes), the JAM determines whether the Java-APP to be downloaded is a trusted Java-APP or an untrusted Java-APP (step S). More concretely, the JAM checks whether an APID and a SDF-URL are contained in the data stored in step S, and if they are contained, the JAM determines that there is a SDF corresponding to the Java-APP, which means that the Java-APP is a trusted Java-APP. Contrarily, if an APID and a SDF-URL are not contained, the JAM determines that the Java-APP is an untrusted Java-APP. Now it is supposed that an APID and a SDF-URL are contained in the downloaded ADF, and the JAM determines that the Java-APP to be downloaded is a trusted Java-APP (step S; Yes).","The JAM receives a SDF corresponding to the trusted Java-APP from management server device  (step S). More concretely, the JAM establishes a TCP connection between management server device , generates a HTTP request containing the SDF-URL obtained from the ADF, transmits the HTTP request to management server device , receives a HTTP response (please refer to ) in response to the HTTP request, and disconnects the TCP connection.","The JAM verifies whether the received SDF contains appropriate data (step S). More concretely, the JAM checks whether the received SDF is described following a certain format, checks whether an APID contained in the SDF and the APID stored in nonvolatile memory D matches, and so on, and all results of the checks are affirmative, the JAM determines that the received SDF contains correct appropriate data (step S; Yes). Then, the JAM instructs nonvolatile memory D to store the data contained in the SDF as shown in .","The JAM downloads the JAR file from CP server device  (step ). More concretely, the JAM generates a HTTP request containing the package URL stored in nonvolatile memory D, transmits the HTTP request to CP server device  and receives a HTTP response containing the JAR file from CP server device  in response to the HTTP request.","The JAM instructs the received JAR file to store nonvolatile memory D and installs the trusted Java-APP contained in the JAR file following normal procedures for installing a Java-APP (step S). Then the JAM notifies to the user that the installation is completed successfully (step S).","After the installation is completed, when the trusted Java-APP is run, the JAM monitors behavior of the trusted Java-AP which is realized by the Java-APP, and restricts the trusted Java-AP to using only certain trusted APIs according to permission data contained in the SDF and stored in nonvolatile memory D.","During the above-mentioned processes, when it is determined that the Java-APP is unable to be installed (step S; No), or when the SDF does not contain appropriate data (step S; No), the JAM notifies the user that the installation failed (step S), and restores software configurations in mobile station  to a state previous to step S.","During the above-mentioned processes, when it is determined that the Java-APP to be installed is an untrusted Java-APP (step S; No), the JAM downloads the JAR file from CP server device  according to a package URL contained in the ADF following an ordinary procedure (step S), and installs an untrusted Java-APP contained in the JAR file following normal procedures for installing a Java-APP (step S). Then the JAM notifies to the user that the installation is completed successfully (step S).","(2-2) Starting of Java-APP","In the following, operations for starting a Java-APP will be explained with reference to .","When the JAM receives from the user a request for starting a Java-APP, the JAM determines whether the Java-APP to be started is a trusted Java-APP or an untrusted Java-APP (step S). When it is determined that a trusted Java-APP is to be started (step S; Yes), the JAM determines whether a SDF check is required (step S). More concretely, the JAM checks data stored in nonvolatile memory D, and determines that a SDF check is required when the number of execution times is more than the count for SDF check, or when the number of passed days is more than the interval for SDF check. On the other hand, the JAM determines that a SDF check is not required when both of the conditions are not met.","For example, according to the data shown in , both of the above-mentioned conditions are not met, the JAM determines that a SDF check is not required (step S; No). Then, the JAM adds 1 to the number of execution times and updates the number stored in nonvolatile memory D (step S), and starts the trusted Java-APP (step S).","After the same trusted Java-APP is repeatedly started by the JAM as explained above, the number of execution times may become the same as the count for SDF check. In the case, the JAM determines that a SDF check is required (step S; Yes), generates a HTTP request for requesting a SDF check operations, and transmits the HTTP request to management server device  (step S). The HTTP request contains an APID and data indicating last update time of the SDF corresponding to the trusted Java-APP to be started, namely the value of parameter \u2018Lmd\u2019.","After receiving the HTTP request, management server device  extracts the APID from the HTTP request, reads a SDF containing the APID stored in nonvolatile memory A and checks a validity status of the SDF. Management server device  also extracts the last update time from the HTTP request, compares the extracted last update time and a last update time contained in the SDF read from nonvolatile memory A, and determines whether it is necessary to update the SDF stored in mobile station . More concretely, management server device  determines that the update is necessary if the last update time extracted from the HTTP request is older than the last update time in the SDF stored in nonvolatile memory A, and determines that the update is not necessary if both of the last update times are the same. According to a result of the above-mentioned determination, management server device  generates a HTTP response containing data indicating a validity status of the SDF, and transmits the HTTP response to mobile station  as a SDF check response.",{"@attributes":{"id":"p-0112","num":"0111"},"figref":["FIG. 8","FIG. 9"]},{"@attributes":{"id":"p-0113","num":"0112"},"figref":["FIG. 8","FIG. 8","FIG. 9","FIG. 9"],"b":["16","18"]},"When mobile station  receives the SDF check response (step S; Yes), the JAM checks the contents of the SDF check response (step S).","For example, when the JAM receives a SDF check response as shown in , the JAM determines that the SDF is valid (step S; valid), clears the number of execution times, the number of passed days and the used expanded count for SDF check stored in nonvolatile memory D (step S), and starts the trusted Java-APP (step S).","On the other hand, when the JAM receives a SDF check response as shown in , the JAM determines that the SDF is invalid (step S; invalid), displays a message that the Java-APP is unable to be started, and restores software configurations in mobile station  to a state previous to step S (step S).","When the received SDF check response indicates that the SDF is updated, the JAM determines that the SDF stored in nonvolatile memory D is required to be updated (step S; update), and carries out procedures for updating the SDF (step S). More concretely, similarly to operations in step S of , the JAM receives data of the updated SDF from management server device , verifies that the received data of the updated SDF are appropriate, and stores the data of the updated SDF in nonvolatile memory D.","During the above-mentioned operations, if the JAM is unable to start or fails to complete a SDF check because, for example, mobile station  is in an unreachable state or a communication failure happens (step S; No), the JAM checks the data stored in nonvolatile memory D and determines whether the used expanded count for SDF check is less than the expanded count for SDF check (step S).","When the used expanded count for SDF check is less than the expanded count for SDF check (step S; Yes), the JAM adds 1 to the used expanded count for SDF check and updates the count stored in nonvolatile memory D (step S). Then, the JAM starts the trusted Java-APP (step S).","On the other hand, when the used expanded count for SDF check is the same as or more than the expanded count for SDF check (step S; No), the JAM displays a message that it is unable to carry out a SDF check and the Java-APP is unable to be started, and restores software configurations in mobile station  to a state previous to step S (step S).","(2-3) Example of Operations of the Overall Communication System for Making a Trusted Java-APP Operable","In the following, an example of a series of operations for making a trusted Java-APP operable, which follows the above-mentioned steps, will be explained with reference to .","In the following explanation, operations which are carried out by the JAM or other applications, such as Java-APs, are described as operations which are carried out by \u2018mobile station \u2019.","In , when mobile station  receives from the user a request for downloading a Java-APP, mobile station  generates HTTP request m which contains an ADF-URL of an ADF corresponding to the Java-APP to be downloaded, and transmits HTTP request m to CP server device .","In response to HTTP request m, CP server device  generates HTTP response m which contains the corresponding ADF, and transmits HTTP response m to mobile station .","After receiving HTTP response m, mobile station  stores data of the ADF in nonvolatile memory D. If mobile station  determines that it is possible to install the Java-APP into mobile station , mobile station  generates HTTP request m which contains a SDF-URL of a SDF, and transmits HTTP request m to management server device .","After receiving HTTP request m, management server device  generates HTTP response m which contains the SDF, and transmits HTTP response m to mobile station  in response to HTTP request m.","After receiving HTTP response m, mobile station  verifies that contents of the SDF are appropriate, and stores the SDF in nonvolatile memory D. Then, mobile station  generates HTTP request m which contains a package URL, and transmits HTTP request m to CP server device .","In response to HTTP request m, CP server device  generates HTTP response m which contains a JAR file, and transmits HTTP response m to mobile station . The JAR file contains the trusted Java-APP to be downloaded.","After receiving HTTP response m, mobile station  stores the received JAR file in nonvolatile memory D, and carries out procedures for installing the trusted Java-APP.","After the installation of the trusted Java-APP is completed, when mobile station  receives an instruction for starting the Java-APP, mobile station  determines whether a SDF check is required or not, and if it is determined that a SDF check is required, mobile station  transmits HTTP request m which contains an APID and a last update time of the SDF to management server device  as a SDF check request.","After receiving HTTP request m, management server device  generates HTTP response m which contains data indicating a validity status of the SDF corresponding to the APID contained in HTTP request m, and transmits HTTP response m to mobile station  as a SDF check response.","After receiving HTTP response m, mobile station  checks the contents of the SDF check response. For example, when the SDF check response indicates that it is necessary for the SDF to be updated, mobile station  updates the SDF. Namely, mobile station  generates HTTP request m which contains the SDF-URL, and transmits HTTP request m to management server device .","After receiving HTTP request m, management server device  generates HTTP response m which contains the SDF identified by the SDF-URL contained in HTTP request m, and transmits HTTP response m to mobile station .","After receiving HTTP response m, mobile station  starts the Java-APP, and runs the Java-APP according to the contents of the updated SDF.","(2-4) Behavior Management of Mobile Station  while Java-APP is Run","In the following, management of behavior of mobile station  when the above-mentioned Java-APP is run will be explained.","(2-4-1) Untrusted Java-AP","After an untrusted Java-APP is installed in mobile station  according to the above-mentioned procedures for installation, the untrusted Java-APP is started, which results in an untrusted Java-AP being realized in mobile station . Then, the following behavior management is conducted by mobile station .","When an API which is requested to be used by the untrusted Java-AP is an untrusted API, mobile station  permits the untrusted Java-AP to use the untrusted API, since, as explained above, untrusted API is permitted to be used by any sort of Java-AP. In short, the untrusted Java-AP is allowed to call the untrusted API.","When an API which is requested to be used by the untrusted Java-AP is a trusted API, mobile station  checks whether a SDF corresponding to the Java-AP is stored in nonvolatile memory D. Since no SDF corresponding to the untrusted Java-AP is stored in nonvolatile memory D, mobile station  prohibits the untrusted Java-AP to use the trusted API. In short, the untrusted Java-AP is not allowed to call the trusted API.","(2-4-2) Trusted Java-AP","After a trusted Java-APP is installed in mobile station , the trusted Java-APP is started, and a trusted Java-AP is realized in mobile station , the following behavior management is conducted by mobile station .","When an API which is requested to be used by the trusted Java-AP is an untrusted API, as a matter of course, mobile station  permits the trusted Java-AP to use the untrusted API as explained above. In short, the trusted Java-AP is allowed to call the untrusted API.","When an API which is requested to be used by the trusted Java-AP is a trusted API, since a SDF corresponding to the trusted Java-AP is stored in nonvolatile memory D, mobile station  may permit the trusted Java-AP to use the trusted API. However, in the case, behavior of the trusted Java-AP is restricted according to permission data contained in the SDF.","For example, if parameter \u2018GetPrivateInfo\u2019 in the permission data is set as \u2018Yes\u2019, the trusted Java-AP is allowed to read the telephone directory data and the data containing unread emails stored in nonvolatile memory D. At the same time, the trusted Java-AP is allowed to communicate with only external devices whose URLs are contained in parameter \u2018AllowedHost\u2019 in the permission data.","As explained above, mobile station  permits behavior of the trusted Java-AP which meet conditions indicated in the permission data contained in the SDF corresponding to the trusted Java-AP, and prohibits behavior which does not meet the conditions. Accordingly, the user can use not only Java-APs in the known system, namely untrusted Java-APs, but also trusted Java-APs, which are allowed to behave more flexibly than untrusted Java-APs, thus enjoying a far greater degree of convenience.","In the communication system according to this embodiment, mobile station  receives an ADF, a SDF and a JAR file separately in this order, which also bring some effects as follows.","As explained above, Java-AP software, each of which comprises an ADF and a JAR file, are usually designed and made by CPs, and each CP offers, in their own site (CP server device  in ) on the Internet, to provide their Java-AP software to any user. Accordingly, a user usually decides to download or not to download Java-AP software after accessing sites of CPs and reading introductory explanations of their Java-AP software shown on pages of the sites. When the user decides to download certain Java-AP software, the user needs to operate his\/her mobile station for instructing it to carry out download procedures. For the purpose, the above-mentioned pages of the sites usually contain URLs of the files to be downloaded along with anchor tags. From a viewpoint of CPs, it is the easiest way to embed URLs of ADFs in their pages since ADFs are managed by CPs and URLs of ADFs are well known by CPs. On the other hand, for embedding URLs of SDFs in pages of CPs, CPs have to obtain the URLs from the carrier and keep updating the URLs. However, if an ADF, a SDF and a JAR file are delivered to a mobile station separately in this order, there is no need for a CP to obtain, embed and update a URL of a SDF, which is quite convenient.","Moreover, the above-mentioned method of delivering three sorts of files in a certain order is suitable when procedures for upgrading Java-AP software in the known communication system are taken into account. In the known communication system currently used, when a user requests upgrading Java-AP software, his\/her mobile station first checks data contained in an ADF corresponding to the Java-AP software, and tries to obtain an upgraded version of the JAR file using a package URL contained in the ADF. Namely, a mobile station first checks an ADF, then downloads a target JAR file.","Compared to the procedures for upgrading Java-AP software currently adopted as explained above, the procedures for upgrading Java-AP software adopted in the communication system according to the present embodiment have a similar flow. Namely, in the communication system according to the present embodiment, a mobile station first checks an ADF in the same way as in the known system, and after obtaining a SDF-URL contained in the ADF, the mobile station obtains a JAR file using the SDF-URL in a similar way to that of the known system. Accordingly, it is possible to introduce a communication system according to the present embodiment without making significant changes to the system which is currently used. Compared to the method proposed above, if a SDF, an ADF and a JAR file are delivered to a mobile station in this order when Java-AP software is upgraded, once the mobile station obtains the ADF, the mobile station may obtain an upgraded version of the JAR file the next time by referring to the ADF obtained before, namely without referring to the most recent SDF. Since the SDF may be modified when the upgraded version of the JAR file is downloaded into the mobile station, the upgraded version of the JAR file without referring to the most recent SDF may cause security problems. Therefore, an ADF, a SDF and a JAR file should be delivered to a mobile station in this order.","(3) Modification","The present invention is not limited to the embodiment as explained above, and it may be modified within the technical scope of the present invention. Following are examples of such modifications.","In the above-mentioned communication system, behavior of Java-APs is managed with regard to APIs which are used by Java-APs and external devices with which Java-APs communicate, but any other sort of conditions on resources may be set for managing the behavior. \u2018Resources\u2019 may be software resources such as APIs, communication network resources such as communication device with which the Java-AP communicates with, and hardware resources.","\u2018Hardware\u2019 may be hardware which a mobile station comprises such as a memory, a speaker, a microphone, an infrared radiation controller and Light Emitting Diode (LED), and \u2018hardware\u2019 may also be external devices which operates cooperatively with the mobile station such as User Identity Module (UIM) and Subscriber Identity Module (SIM).","As a matter of course, \u2018communication network resources\u2019 should not be limited to resources in the communication network such as communication devices with which the mobile station communicates. As mentioned above, the mobile station communicates with mobile communication network wirelessly. During the wireless communications, the mobile station uses wireless communication resources such as wireless channels assigned by the mobile communication network. The wireless communication resources may also be used as the above-mentioned \u2018communication network resources\u2019. At the same time, the mobile station may use communication resources such as transmission paths for data packet communications and communication paths of a line switching system for voice communications on communication protocol layers which are located higher than the communication protocol layer on which wireless communication resources are used. The communication resources on the higher communication protocol layers may also be used as the above-mentioned \u2018communication network resources\u2019.","\u2018Software resources\u2019 may be APIs, classes, packages, and so on, as explained above. Software resources may provide various kinds of functions, and data processing functions such as encrypting data and data communicating functions such as transmitting and receiving data with other applications such as a Web browser are typical functions. In the present invention, software resources comprised by the above-mentioned external devices may also be used as parameters of conditions for restricting behavior of Java-APs.","In the above-mentioned embodiment, the JAM prohibits certain types of behavior of trusted Java-APs before they behave according to permission data. However, the JAM may manage the behavior of the Java-APs by compulsorily terminating processes of the trusted Java-APs when the JAM detects that the trusted Java-APs attempt to behave in a manner which does not meet conditions indicated in the permission data.","In the above-mentioned communication system, software is delivered to mobile stations, but software may be delivered to other types of communication devices.","In the above-mentioned communication system, the carrier may function as a CP. Namely, a management server device and a CP server device may be located in the same communication node.","The above-mentioned programs run by a CPU of a mobile station, such as JAM program and an OS program, and their related data, may be provided being stored in recording media from which the CPU is able to read the programs and the data, such as magnetic recording media, optical recording media, and ROM. The programs and the data may also be provided to mobile stations through communication networks such as the Internet."],"heading":["TECHNICAL FIELD","BACKGROUND ART","DISCLOSURE OF THE INVENTION","PREFERRED EMBODIMENTS FOR CARRYING OUT THE INVENTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
