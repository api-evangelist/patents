---
title: Protocol for efficient exchange of XML documents with a network device
abstract: A method and apparatus for the configuration of a network device through the exchange of XML documents is provided. A network device transmits multiple chunks of an XML document to a client in response to the size of the XML document being larger than a configurable size. The client does not receive any XML documents from network device that exceed the configurable size, and may abort receiving additional chunks of the XML document. The client and the network device may each discover which version of a data schema each other is using to reference components of the network device. The exchanged XML documents include version data that identifies a version for a plurality of data schemas that are each associated with a component of network device. The client and the network device may thus avoid exchanging ambiguous communications due to inconsistent versions of a data schema.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07853676&OS=07853676&RS=07853676
owner: Cisco Technology, Inc.
number: 07853676
owner_city: San Jose
owner_country: US
publication_date: 20040610
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND","DETAILED DESCRIPTION","Functional Overview","Architecture Overview","Retrieving XML Documents Using a Transport Independent Iterator","Example 1","Example 2","Example 3","Example 4","Example 5","Example 6","Example 7","Example 8","Example 9","Implementing Mechanisms","APPENDIX A"],"p":["This application is related to co-pending U.S. patent application Ser. No. 10\/866,338, filed Jun. 10, 2004, invented by Mark Freskos et al., entitled \u201cTransport-Independent Pluggable Operation Type Handler Framework For Servicing Management Requests,\u201d the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.","This application is also related to co-pending U.S. patent application Ser. No. 10\/866,067, filed Jun. 10, 2004, invented by Jiong Sun et al, entitled \u201cA Generic Framework For Deploying EMS Provisioning Services,\u201d the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.","This application is also related to co-pending U.S. patent application Ser. No. 10\/866,647, filed Jun. 10, 2004, invented by Mark Freskos et al, entitled \u201cTwo-Stage Network Device Configuration Model,\u201d the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.","This application is also related to co-pending U.S. patent application Ser. No. 10\/866,528, filed Jun. 10, 2004, invented by Kapil Jain et al, entitled \u201cConfiguration Commit Database Approach And Session Locking Approach In A Two-Stage Network Device Configuration Process,\u201d which is a continuation of co-pending U.S. patent application Ser. No. 10\/866,647, the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.","The present invention generally relates to communication between a client and a network device through the exchange of XML documents.","Contemporary network device communication systems may provide responses using structured electronic documents, such as XML documents. A user may retrieve the configuration of a network device by issuing a request, and the network device responds with an XML document that contains its then-current configuration. Responses, such as XML documents, from network devices are often of a large size, which may lead to increased burden on client, the network device, and the network itself. Further, in some environments a network device, server, or other element that stores and delivers a large XML document as a response, has limited memory available for storing the document. To address these issues, having a way to break up large response documents is desirable.","One approach to solve this problem is to use a transport dependent mechanism that can communicate documents in chunks, such as Blocks Extensible Exchange Protocol (BEEP). In this approach, if both communicating parties (e.g., the client and the network device) support the transport protocol that implements BEEP, a first party may request and receive only a portion of a communication from the second party. However, both parties must be configured to communicate using the transport protocol and BEEP. As most networks today are evolving at an accelerated pace and consist of a variety of clients and network devices, it is undesirable to require each client and each network device in the network to be configured to communicate using a specific transport protocol, as it may be impossible or impracticable for one or more clients and\/or network devices to be configured to communicate using the specific transport protocol. Further, BEEP requires that the entire XML response is created or known in advance of transport.","In another approaches, a receiving client provides instructions for retrieving data in portions. The client instructions specify a range of desired data or a set of desired portions for retrieval. When those portions are retrieved, the client provides further instructions to retrieve the next portions in order. However, in these approaches, the client needs to know the contents or structure of the data it is retrieving, and may need to calculate how many items the client can retrieve at once. The client may also need to know the names of items that are retrieved. Further, in most approaches, there is no potential for a responding network device or server to break up a response when the network device or server knows that the receiving client will need a relatively long time to process the response.","Another problem encountered when configuring network devices over a network is that the client may use a different version of a data schema for a particular component on the network device than the network device uses for that same component. This may happen when a data schema associated with either the client or the network device is updated without updating the corresponding data schema on the other. When the client and the network device each expect configuration data in a particular data schema to be represented differently, a request from a client to update the configuration using that particular data schema may result in either the operation being unable to be processed on the network device or it may result in the introduction of errors in the configuration of the network device.","One approach in solving this problem is for the network device to associate a version number with an Application Programming Interface (API) that allows the client to communicate with the network device. The client may use the API version number to determine if the commands and requests that client is using are current or out of date. However, this approach is problematic in that the version number applies to the API as a whole, and must be updated each time that there is any change in any way the network device interacts with the client. Consequently, there are many false occurrences of version incompatibility in this approach, as a request from a client using a particular API call with an out-of-date version number may still be compatible, since the call may only invoke functions or software components of the network device that have not changed since that version.","In another approach, exemplified by Simple Network Management Protocol (SNMP), no version numbers are used, but each new version must handle all previous versions transparently. Thus, old functions are not removed, and only new functions are added. However, this approach is problematic because those who develop or maintain a new version also must support all old versions. Further, if a response to a GET request appears to be missing a data element, an application may be unable to determine if the responding network device omitted the element because no data is available, or because that element is no longer supported.","Consequently, there is a need in the art to configure a network device through the exchange of communications without encountering the problems associated with the approaches discussed above. The approaches described in this section are approaches that could be pursued, but not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated, it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the embodiments disclosed herein. It will be apparent, however, that the embodiments described herein may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the description of the embodiments disclosed herein.","1. Large XML Documents. Techniques are presented for the configuration of network devices using XML documents. The burden placed on clients, network device, and networks from communications of large size may be avoided using embodiments of the invention. Further, embodiments address the restriction of memory overhead on the server for storing the XML response; provide the potential ability for the server to break up a response if it knows that the next section will take a long time to process; and do not require the client to know anything about the contents or structure of the data that the client is retrieving.","In an embodiment, a request from a client is received at a network device. The network device generates response data that indicates a result of performing the request, and constructs a XML document that contains the response data. The network device determines that the XML document exceeds a configurable threshold. The purpose of the configurable threshold is to ensure that the size of all XML documents transmitted from the network device to the client is under a certain size. An administrator may configure the configurable threshold to be any size.","The network device transmits only a portion of the XML document to the client along with an identifier. The portion transmitted is of a smaller, manageable size. The identifier included in the portion indicates to the client that the client has not received the entire XML document. The client may then issue another request to the network device for another portion of the XML document. The network device transmits one or more other portions of the XML document to the client. When the client receives the last portion of the XML document to the client, the network device does not include the identifier, thus signaling to the client that the client has received the last portion of the XML document. In this way, the client may receive the entire XML document in one or more portions whose size does not exceed a configurable threshold.","2. Versioning of XML Documents. In another embodiment, the client and the network device may avoid exchanging ambiguous communications due to inconsistent versions of a data schema used by the client and the network device. XML documents exchanged between the client and the network device may include version data. Version data identifies a version of a plurality of data schemas that are each associated with a component of the network device. The network device may have a plurality of components, and the version data may identify a version of a data schema associated with each component. The network device may determine whether to perform or not perform a request received from a client based on a comparison of version data identified in the request and version data maintained by the network device.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1","b":["100","100","110","120","122","130","140"]},"A client, such as client , may be implemented by any medium or mechanism that provides for the transmission of a command or request to a network device. Client  may be implemented in software or in hardware. Examples of client  include, without limitation, a web browser, a software application executing on a machine, a wireless device, and a management console. While only client  is shown in , embodiments may include any number of clients in system .","Communications link  may be implemented by any medium or mechanism that provides for the exchange of data between client  and network device . Communications link  may be implemented by any medium or mechanism that provides for the exchange of data between network device  and persistent store . Examples of communications links  and  include, without limitation, a network such as a Local Area Network (LAN), Wide Area Network (WAN), Ethernet or the Internet, or one or more terrestrial, satellite or wireless links.","A network device, such as network device , may be implemented by a device that is accessible to a network and is capable of being configured. Examples of network device  include, without limitation, a router, a server, a PC, a wireless device, a firewall, and a cell phone. While only one network device  is shown in  for purposes of illustrating a simple example, other embodiments may include any number of network devices in system .","Network device  includes a request interface , an iterator manager , a version manager , and one or more components . A request interface, such as request interface , may be implemented by any software component executing on network device  that is capable of exchanging communications with client . Request interface  may exchange communications using a variety of transport protocols. Request interface  may also process communications encoded using a variety of formats, grammars, or protocols, including, but not limited to, XML.","An iterator manager, such as iterator manager , may be implemented by any software component executing on network device  that is capable of determining if a XML document exceeds a configurable threshold. The operation of iterator manager  is described in further detail below in the section entitled \u201cRetrieving XML Documents using a Transport Independent Iterator.\u201d","A version manager, such as a version manager , may be implemented by any software component executing on network device  that is capable of comparing version data contained within a received request with version data maintained at network device  to determine whether to perform one or more operations identified by the received request. The operation of the version manager  is described in further detail below in the section entitled \u201cRetrieving XML Documents using Version Data.\u201d","A component, such as component A, B, and C, refers to any hardware or software component of network device  that may be separately configurable. Examples of component A, B, and C include, without limitation, a line card, a route processor, and a software module.","A persistent store, such as persistent store , as broadly used herein, refers to any medium or mechanism that provides for the persistent storage of data. Examples of persistent store  include, without limitation, non-volatile memory, disk storage, a relational database, an object-oriented database, a multidimensional database, a hierarchical database, a file server, and an EPROM chip. Note that persistent store  may be implemented on network server  (not shown in ), but for ease of explanation, persistent store  is described as a separate component from network device , although it need not be.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 2"],"b":["130","110","130","110","110"]},"In step , a request is received from client  at request interface  of network device . The request requires that response data be transmitted to client  in a XML document. Response data is data that describes a result of performing the received request on network device .","The request of step  may be directed to a variety of activities, e.g., the request may be to retrieve data describing the operational state of network device  or to retrieve a current configuration about network device . Indeed, the request of step  may be any request for any activity that, as a result of processing the request on network device , a set of response data is generated and transmitted to client  in a XML document. A XML document is any communication sent from network device  to client  that conforms to the XML standard, e.g., it is a text-based document composed of tags and associated values.","The request of step  may be transmitted from client  to network device  in an XML document. Example 1 illustrates a request transmitted from client  to network device  in an XML document that requests information about the current configuration of a BGP component of network device .",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"]},{"entry":[{},"<Request MajorVersion = \u201c1\u201d MinorVersion = \u201c0>"]},{"entry":[{},"\u2003<Get>"]},{"entry":[{},"\u2003\u2003<Configuration>"]},{"entry":[{},"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/Configuration>"]},{"entry":[{},"\u2003<\/Get>"]},{"entry":[{},"<\/Request>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"After the request of step  is received at network device , the request is processed on network device  to generate the response data. For example, as a result of receiving the request of Example 1, response data is generated at network device  that describes information about the current configuration of a BGP component of network device . After the performance of step , processing proceeds to step .","In step , a XML document that contains the response data is generated, and a determination is made as to whether the size of the XML document exceeds a configurable threshold. In one embodiment, determining whether the size of the XML document exceeds a configurable threshold involves determining whether the size of the XML document when expressed in ASCII is greater than a specified size. In other embodiments, the XML text could be compressed before transmission, and the compressed size could be considered. In an embodiment, generating the response data does not involve generating the entirety of an XML document response. Instead, as an XML document is generated, the process determines whether the size of the XML document has reached a particular threshold size. If so, then the process stops adding any further XML text to the XML documents. State information is saved, so that when a future iterator request is received, the process can continue at the point at which it stopped. In this approach, excess memory overhead is avoided. Various functional components of network device  may generate a XML document that includes the response data in tags and\/or associated values of the XML document. For example, iterator manager  may create a XML document that contains the response data that was created in step .","Iterator manager  determines if the size of the XML document exceeds a configurable threshold. The purpose of the configurable threshold is to ensure that the size of all XML documents transmitted from network device  to client  is under a certain size. An administrator may configure the configurable threshold to be any size, e.g., 64 K. An administrator may assign the configurable threshold based on the capabilities of the network device  and of the communications link .","If the size of the XML document created in step  does not exceed the configurable threshold, then processing proceeds to step . However, if the size of the XML document does exceed the configurable threshold, then processing proceeds to step .","In step , the XML document is transmitted to client  by request interface . As the size of the XML document is under the configurable threshold, there is no concern that the XML document is too large in size to place a burden on either communications link  or client .","In step , a chunk of the XML document is identified and transmitted to client . The purpose of step  is to send only a chunk of the XML document at a time, since the entire XML document may be too large for client  to efficiently process at once as the size of the XML document exceeds the configurable threshold, to address the restriction of memory overhead on the server for storing the XML response, to break up a response if a responding element knows that the next section will take a long time to process, etc. The portion that is transmitted to client  at step  is a complete XML document; it is called a \u201cchunk\u201d or \u201cportion\u201d only because it is a subset of the XML document.","Iterator manager  may identify the chunk of the XML document transmitted to client  in step  based on a configurable intended size of the chunk. For example, an administrator may configure an intended size of chunks of the XML documents transmitted from network device  to client , e.g., a size of 48 K bytes. The administrator may set the size of chunks of the XML document to be equal to the threshold used in step . The size of chunks may be established, by an administrator, to be any size equal or less than the size of the threshold. Iterator manager  determines the chunk of the XML document transmitted to client  in step  by determining a part of the XML document that has a size that is less than the size of the chunk. An administrator may configure different sizes of the chunk for different transport protocols.","The iterator manager  may process the XML document in sequence, i.e., the iterator manager  may determine the chunk of step  by taking the first part of the XML document that corresponds with the configurable intended size of the chunk.","Iterator manager  includes an identifier in the chunk transmitted to client . The identifier indicates that the entire XML document has not been transmitted to the client . Thus, when client  receives the chunk with the identifier, the identifier indicates to client  that the chunk is not the complete XML document, but rather there are one or more additional chunks of the XML document that have not been transmitted to client . The identifier may be included in a particular tag or attribute of the chunk. Example 2 is an illustration of a tag that may be included in the chunk to indicate the identifier.","<Identifier=\u201c5734\u201d>","Note in Example 2, the value of the identifier (5734), uniquely identifies the XML document.","Example 3 is an illustration of the chunk of the XML document that is transmitted from network device  to client  in step .",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<?xml version = \u201c1.0\u201d encoding =\u201cUTF-8\u201d?>"},{"entry":"<Response MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d Identifier =\u201c5734\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"},{"entry":"\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003lblock of response data resides here."},{"entry":"\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003<\/BGP>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Response>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["240","250"]},"In step , a request from client  is received at request interface  for another chunk of the XML document. The request of step  contains the identifier, thus allowing iterator manager  to determine the XML document to which the request is associated. For example, Example 4 illustrates a request from client  to receive another chunk of the XML document.",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<?xml version = \u201c1.0\u201d encoding =\u201cUTF-8\u201d?>"]},{"entry":[{},{},"<Request MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},{},"\u2003<GetNext Identifier = \u201c5734\u201d\/>"]},{"entry":[{},{},"<\/Request>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["250","260"]},"In step , iterator manager  determines if the remaining part of the XML document that was not transmitted to the client in step  exceeds the configurable threshold. If iterator manager  determines that the remaining part of the XML document that was not transmitted to the client in step  does not exceed the configurable threshold, then processing proceeds to step . On the other hand, if iterator manager  determines that the remaining part of the XML document that was not transmitted to the client in step  does exceed the configurable threshold, then processing proceeds to step .","In step , the remaining chunk of the XML document is transmitted to client  without the inclusion of the identifier. Since the remaining chunk of the XML document was received at client  without the inclusion of the identifier, client  is informed that this chunk is the last chunk of the XML document. Consequently, at the conclusion of step , client  has received the entire XML document in two or more chunks that each has a size less than the configurable threshold.","In step , another chunk of the part of the XML document that was not transmitted to the client in step  is identified and subsequently transmitted to client . As in step , iterator manager  may determine the next chunk of the remainder of the XML document that was not transmitted to client  based on the configurable intended size of the chunk.","After the next chunk is transmitted to client  in step , client  may determine that client  has not yet received the entire XML document because the chunk transmitted the client in step  includes the identifier. Client  may thereafter issue another request for the remaining chunks of the XML document that it has not received yet. Once network device  receives another request from client  for another chunk of the XML document, processing proceeds to step . In this way, client  may issue requests to network device  to retrieve additional chunks of the XML document until the last chunk (the chunk whose size is less than the configurable intended size of the chunk) is received in step .","Note that in some embodiments, client  may issue an abort request. An abort request indicates that client  no longer wishes to receive additional chunks of the XML document. The abort request advantageously allows client  to avoid receiving the entire XML document if client  determines that the whole XML document is not needed. After network device  receives an abort request from client , network device  does not transmit any chunk of the XML document to client , and may assign a state to the remaining chunk of the XML document that indicates that the remaining chunk may be deleted. In other words, the network device  may free up its resources, as there is no need to store the remaining chunk of the XML document, as it is no longer needed.","The abort request may be implemented by using an XML tag in an XML document. Example 5 is an illustration of an abort request issued by client .",{"@attributes":{"id":"p-0058","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<?xml version = \u201c1.0\u201d encoding =\u201cUTF-8\u201d?>"]},{"entry":[{},{},"<Request MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},{},"\u2003<GetNext Identifier = \u201c5734\u201d Abort = \u201cTrue\u201d\/>"]},{"entry":[{},{},"<\/Request>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Appendix A describes an illustrative exchange of communications between client  and network device  according to an embodiment. The communications of Appendix A show client  requesting all BGP configuration data of network device , and the resulting XML document containing the BGP configuration data is so large four separate communications, each communication containing a chunk of the XML document, are required to transmit the XML document to client .","Retrieving XML Documents Using Version Data",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 3","FIG. 3"],"b":["110","130","130","110","130","130","110","130","110","130"]},"In step , a request, from client , is received at request interface  of network device . The request is to perform one or more operations on one or more components of a plurality of components of network device . The request of step  may be contained within an XML document.","Each component of the plurality of components refers to any functional component, either in hardware or software, of network device , which may be separately configured. For example, each component  of the plurality of components may be associated with its own data schema. In an alternate embodiment, two or more components  of the plurality of components may be associated with the same data schema.","The request of step  contains a first set of version data that identifies, for each component of network device  identified in the request, a version of each data schema associated with the component. The request may identify a component when the request specifies that an operation is to be performed against the component. For example, if the request of step  specifies that an operation is to be performed against three different components of network device , then the request includes a set of version data that identifies a version of a data schema associated with each of the three components.","In one embodiment, version data may comprise a major version value and a minor version value. Both the major version value and the minor version value identify a state of the data schema. The major version value is incremented when the state of a particular data schema is changed in a manner that is not backward compatible, e.g., a data item is deleted or a semantic change is made to the data schema. On the other hand, a minor version value is incremented when the state of a particular data schema is changed in a manner that is backward compatible, e.g., a data item is added to the data schema.","To illustrate, consider Example 1 described above. In the request of Example 1, version data is contained within the tags of the XML document. More specifically, the data schema associated with the request of Example 1 has a major version value of 1, and a minor version value of 0. As Example 1 indicates, the major version value and the minor version value may be included in the tags of an XML document exchanged between client  and network device . Note that network device  maintains a set of version data that may identify a version of the data schema independent from client ; consequently, network device  may have a different major version value and\/or a different minor version value than that identified in the request of Example 1. After the performance of step , processing proceeds to step .","In step , the first set of version data contained within the request of step  is compared to a second set of version data that is maintained by network device . Version manager  may maintain the second set of version data. The second set of version data identifies a state of a plurality of data schemas that are each associated with all components of network device . Thus, the first set of version data contained within the request of step  may identify a state of data schemas associated with components of network device  that are involved in the request, while the second set of version data maintained by network device  identifies a state of data schemas associated with all components of network device . As with the first set of version data, the second set of version data maintained by network device  may comprise a major version value and a minor version value for each data schema identified by the version data. Version manager  may store the version values in volatile memory for temporary use, or in persistent store . Version manager  may initially acquire values within a schema that has been previously loaded and parsed by version manager , or through a configuration command.","Version manager  may make the comparison of step  by comparing, for each data schema associated with a component of network device  that is referenced by the request of step , the first set of version data contained with the request of step  with the second set of version data maintained by version manager . After the performance of step , processing proceeds to step .","In step , each operation identified in the request of step  is performed or not performed based on the comparison of the first set of version data and the second set of version data of step . For a particular data schema identified by the first set of version data, if the first set of version data and the second set of version data identify the same state (or version) of the data schema, then the request is performed by network device . For a particular data schema identified by the first set of version data, if there is a discrepancy between the first set of version data and the second set of version data involving a change that is not backward compatible or if a data schema identified in the request of step  has been updated relative to the corresponding data schema maintained by network device , then the operation on that data schema fails (the operation is not performed). On the other hand, for a particular data schema identified by the first set of version data, the operation to be performed on that particular data schema is attempted by network device  if the network device  has updated its data schema in a manner that is backward compatible.","In an embodiment wherein both the first set of version data and the second set of version data contain a major version value and a minor version value, each operation identified in the request of step  is performed or not performed based on the comparison of the major version value and the minor version value of both the first set of version data and the second set of version data of step . If both the first set of version data contained in the request from client  and the second set of version data maintained by network device  reference the same major version value and the same minor version value, then both client  and network device  are referencing the same state of a data schema, and the operation may be performed against that data schema by network device . If there is a difference in the major version values of the first set of version data and the second set of version data, then the operation fails.","For a particular operation to be performed against a data schema identified by a request received by network device , if the minor version value of the first set of version data contained within the request from client  is a lesser value than the minor version value of the second set of version data maintained by network device  (a condition identified as minor version lag), then the operation is attempted by network device .","For a particular operation to be performed against a data schema identified by a request received by network device , if the minor version value of the first set of version data contained within the request from client  is a greater value than the minor version value of the second set of version data maintained by network device  (a condition identified as minor version creep), then the operation is not performed by network device .","In this manner, client  and network device  may avoid exchanging ambiguous communications due to inconsistent versions of a data schema used by client  and network device  since each communication may identify the version of the data schema that client  or network device  is currently referencing. If an operation of a request is not performed by network device , network device  may communicate the reason to client  so that client  may be notified that there is an inconsistency in the versions of data schemas being referenced by client  and network device .","Client  may issue a request to determine the version of any particular data schema maintained by network device . Such a request may be processed on network device  using the second set of version data maintained by version manager . Example 6 is an illustration of a request from client  to retrieve version data associated with a BGP component of network device . Example 7 is an illustration of the response from network device  after receiving the request of Example 6.",{"@attributes":{"id":"p-0074","num":"0073"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d>"]},{"entry":[{},{},"<Request MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},{},"\u2003<GetVersionInfo>"]},{"entry":[{},{},"\u2003\u2003<Configuration>"]},{"entry":[{},{},"\u2003\u2003\u2003<BGP\/>"]},{"entry":[{},{},"\u2003\u2003<\/Configuration>"]},{"entry":[{},{},"\u2003<\/GetVersionInfo>"]},{"entry":[{},{},"<\/Request>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d>"]},{"entry":[{},"<Response MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},"\u2003<GetVersionInfo>"]},{"entry":[{},"\u2003\u2003<Configuration>"]},{"entry":[{},"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003<\/Configuration>"]},{"entry":[{},"\u2003<\/GetVersionInfo>"]},{"entry":[{},"<\/Response>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The response of Example 7, and all other responses, includes a major version number and a minor version number. Client  may issue a request to determine the version of all data schemas maintained by network device . Such a request may be processed on network device  using the second set of version data maintained by version manager . Example 8 is an illustration of a request from client  to retrieve version data associated with all configuration data schemas maintained by network device . Example 9 is an illustration of the response from network device  after receiving the request of Example 8.",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"]},{"entry":[{},{},"<Request MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},{},"\u2003<GetVersionInfo>"]},{"entry":[{},{},"\u2003\u2003<Configuration\/>"]},{"entry":[{},{},"\u2003<\/GetVersionInfo>"]},{"entry":[{},{},"<\/Request>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"]},{"entry":[{},"<Response MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},"\u2003<GetVersionInfo>"]},{"entry":[{},"\u2003\u2003<Configuration>"]},{"entry":[{},"\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003<MPLS_LSD MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<MPLS_TE MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<OUNI MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<OLM MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<CDP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003<RSVP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003<InterfaceConfiguration>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<CDP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<SONET MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<PPP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003<IPCP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"]},{"entry":[{},"\u2003\u2003\u2003\u2003<\/PPP>"]},{"entry":[{},"\u2003\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003\u2003<\/InterfaceConfiguration>"]},{"entry":[{},"\u2003\u2003\u2003. . ."]},{"entry":[{},"\u2003\u2003<\/Configuration>"]},{"entry":[{},"\u2003<\/GetVersionInfo>"]},{"entry":[{},"<\/Response>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In still another embodiment, Client  may issue a request that does not contain either a major version number or minor version number. Network device  detects the absence of version values as part of step  or step . Network device  assumes, in such a case, that its own data schema at a default or native version level is to be used. Network device  does not issue an error message, but instead attempts to respond to the request from the client according to that data schema. If the network device  encounters any XML in the request of the client  that the network device cannot process or does not recognize, then the network device fails processing and issues an appropriate error message.","In yet another embodiment, the iterator approach and the versioning approach described herein are integrated. In the integrated approach, a client  sends a request to network device  that requires the network device to create a large XML document as a response. The client  receives a first chunk of a response XML document from network device , and the response document includes a major version number and minor version number. The client  determines that the major version number and minor version number contained in the response XML document do not match the version numbers of the data schema that the client is using. The client  then does not issue any subsequent requests for further chunks of the response XML document. As described above, the network device  does not create an entire response XML document before sending the first chunk. Thus, this approach prevents needless use of server or network device memory resources in the case when a client aborts retrieval of the XML document because of a version incompatibility as described here.","In one embodiment, the following schema may be used to define version numbers. The version numbers are carried in the XML instances using the \u201cMajorVersion\u201d and \u201cMinorVersion\u201d attributes. The following example shows the relevant portion of the complex type definition for an element that carries version information.",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\u2003<xsd:complexType name=\u201cipv4_bgp_cfg_BGP_type\u201d>"]},{"entry":[{},{},"\u2003\u2003<xsd:annotation>"]},{"entry":[{},{},"\u2003\u2003\u2003<xsd:documentation>Global\u2003\u2003\u2003\u2003 BGP"]},{"entry":[{},{},"config<\/xsd:documentation>"]},{"entry":[{},{},"\u2003\u2003\u2003<xsd:appinfo>"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003<MajorVersion>1<\/MajorVersion>"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003<MinorVersion>0<\/MinorVersion>"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003<TaskIdInfo TaskGrouping=\u201cSingle\u201d>"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003\u2003<TaskName>bgp<\/TaskName>"]},{"entry":[{},{},"\u2003\u2003\u2003\u2003<\/TaskIdInfo>"]},{"entry":[{},{},"\u2003\u2003\u2003<\/xsd:appinfo>"]},{"entry":[{},{},"\u2003\u2003<\/xsd:annotation>"]},{"entry":[{},{},"\u2003\u2003\u2003. . ."]},{"entry":[{},{},"\u2003\u2003<xsd:attributeGroup ref=\u201cVersionAttributeGroup\u201d\/>"]},{"entry":[{},{},"\u2003\u2003\u2003. . ."]},{"entry":[{},{},"\u2003<\/xsd:complexType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The attribute group \u201cVersionAttributeGroup\u201d is defined as:",{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003<xsd:attributeGroup name \u201cVersionAttributeGroup\u201d>"]},{"entry":[{},"\u2003\u2003<xsd:annotation>"]},{"entry":[{},"\u2003\u2003\u2003<xsd:documentation>"]},{"entry":[{},"\u2003\u2003\u2003\u2003Common version information attibutes"]},{"entry":[{},"\u2003\u2003\u2003<\/xsd:documentation>"]},{"entry":[{},"\u2003\u2003<\/xsd:annotation>"]},{"entry":[{},"\u2003\u2003<xsd:attribute\u2003\u2003\u2003\u2003\u2003\u2003\u2003 name=\u201cMajorVersion\u201d"]},{"entry":[{},"type=\u201cxsd:unsignedInt\u201d use=\u201crequired\u201d\/>"]},{"entry":[{},"\u2003\u2003<xsd:attribute\u2003\u2003\u2003\u2003\u2003\u2003\u2003 name=\u201cMinorVersion\u201d"]},{"entry":[{},"type=\u201cxsd:unsignedInt\u201d use=\u201crequired\u201d\/>"]},{"entry":[{},"\u2003<\/xsd:attributeGroup>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Client  and network device  may be implemented on a computer system.  is a block diagram that illustrates a computer system  upon which an embodiment may be implemented. Computer system  includes a bus  or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (RAM) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system  further includes a read only memory (ROM)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (CRT), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for implementing the techniques described herein. According to one embodiment of the invention, those techniques are performed by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another machine-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201cmachine-readable medium\u201d as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system , various machine-readable media are involved, for example, in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of machine-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punch cards, paper tape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of machine-readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (ISDN) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (LAN) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (ISP) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface .","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","In the foregoing specification, embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to be the invention, is the set of claims that issue from this application, in the specific form in which such claims issue, including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","Appendix A describes an illustrative exchange of communications between client  and network device  according to an embodiment. The communications of Appendix A show client  requesting all BGP configuration data of network device  for a particular BGP autonomous system, and the resulting XML document containing the BGP configuration data is so large four separate communications, each communication containing a portion of the XML document, are required to transmit the XML document to client . Each chunk provided by the network device to the client is a complete, well-formed XML document.",{"@attributes":{"id":"p-0097","num":"0096"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Communication from client 110 to network device 130"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Request MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d\/>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Request>"},{"entry":"Communication from network device 130 to client 110"},{"entry":"<Response MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d Identifier = \u201c1\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u20031block of response data returned here."},{"entry":"\u2003\u2003\u2003\u2003 . . ."},{"entry":"\u2003\u2003\u2003<\/BGP>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Response>"},{"entry":"Communication from client 110 to network device 130"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Request MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d>"},{"entry":"\u2003<GetNext Identifier = \u201c1\u201d\/>"},{"entry":"<\/Request>"},{"entry":"Communication from network device 130 to client 110"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Response MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d Identifier = \u201c1\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u20032block of response data returned here."},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003<\/BGP>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Response>"},{"entry":"Communication from client 110 to network device 130"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Request MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d>"},{"entry":"\u2003<GetNext Identifier = \u201c1\u201d\/>"},{"entry":"<\/Request>"},{"entry":"Communication from network device 130 to client 110"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Response MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d Identifier = \u201c1\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u20033block of response data returned here."},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003<\/BGP>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Response>"},{"entry":"Communication from client 110 to network device 130"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Request MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d>"},{"entry":"\u2003<GetNext Identifier = \u201c1\u201d\/>"},{"entry":"<\/Request>"},{"entry":"Communication from network device 130 to client 110"},{"entry":"<?xml version = \u201c1.0\u201d encoding = \u201cUTF-8\u201d?>"},{"entry":"<Response MajorVersion = \u201c1\u201d MinorVersion =\u201c0\u201d>"},{"entry":"\u2003<Get>"},{"entry":"\u2003\u2003<Configuration>"},{"entry":"\u2003\u2003\u2003<BGP MajorVersion = \u201c1\u201d MinorVersion = \u201c0\u201d>"},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003\u2003Final block of response data returned here."},{"entry":"\u2003\u2003\u2003\u2003. . ."},{"entry":"\u2003\u2003\u2003<\/BGP>"},{"entry":"\u2003\u2003<\/Configuration>"},{"entry":"\u2003<\/Get>"},{"entry":"<\/Response>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Embodiments described herein are illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
