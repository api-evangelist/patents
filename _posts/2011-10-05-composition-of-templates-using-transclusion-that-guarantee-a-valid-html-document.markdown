---
title: Composition of templates using transclusion that guarantee a valid HTML document
abstract: A system, method and computer-readable medium for composing a valid HTML document using template transclusion. A system includes a memory configured to store a transcluded template file, the transcluded template file includes a transcluded template and a transcluding template file, the transcluding template file including a transcluding template, the transcluding template including credentials to the transcluded template. The system also includes a template building module configured to build a transcluded template object from the transcluded template and a transcluding template object from the transcluding template, where the transcluded template object and the transcluding template object generate a valid HTML document that is sent for display on a browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021348&OS=09021348&RS=09021348
owner: Google Inc.
number: 09021348
owner_city: Mountain View
owner_country: US
publication_date: 20111005
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/431,735, filed on Jan. 11, 2011 and is incorporated by reference in its entirety. This application also claims the benefit of U.S. Provisional Application No. 61\/449,550 filed on Mar. 4, 2011 and is incorporated by reference in its entirety.","The emergence and development of computer networks and protocols, such as the Internet and the World Wide Web (or simply \u201cweb\u201d or \u201cWeb\u201d), allows a user to use their computing devices to download and display a webpage on the user's computing device. When a webpage includes many different sections or identical sections are included in different webpages, those sections may be represented using templates.","Conventional template processing systems, however, cannot render a template within a template on a webpage and guarantee a valid HTML document. When a conventional system, includes a template within a template the included template is treated as HTML text. As a result, even when individual templates produce a valid HTML document, the conventional template processing system cannot guarantee that the produced HTML document that includes transcluded templates is valid.","Methods, systems, and computer program products are disclosed for composing a valid HTML document using template transclusion.","According to an embodiment, a method for composing a valid HTML document using template transclusion is provided. In an embodiment, the method retrieves a transcluded template file, the transcluded template file includes the transcluded template. The method also retrieves a transcluding template file, the transcluding template file includes a transcluding template and credentials to the transcluded template file and the transcluded template. The method also builds a transcluded template object from the transcluded template and a transcluding template object from the transcluding template, wherein the transcluded template object and the transcluding template object generate a valid HTML document that is sent for display on a browser.","In an embodiment, a system for composing a valid HTML document using template transclusion is provided. A system includes a memory configured to store a transcluded template file, the transcluded template file includes a transcluded template and a transcluding template file, the transcluding template file includes a transcluding template, the transcluding template includes credentials to the transcluded template. The system also includes a template building module configured to build a transcluded template object from the transcluded template and a transcluding template object from the transcluding template, where the transcluded template object and the transcluding template object generate a valid HTML document that is sent for display on a browser.","According to another embodiment, an article of manufacture including a computer-readable medium having instructions stored thereon that, when executed by a computing device, cause the computing device to perform operations composing a valid HTML document using template transclusion is provided. In an embodiment, the computer-readable medium includes operations for retrieving a transcluded template file, the transcluded template file including the transcluded template. The computer-readable medium also includes operations for retrieving a transcluding template file, the transcluding template file includes a transcluding template and credentials to the transcluded template file and the transcluded template. The computer-readable medium also includes operations for building a transcluded template object from the transcluded template and a transcluding template object from the transcluding template, wherein the transcluded template object and the transcluding template object generate a valid HTML document that is sent for display on a browser.","Further features and advantages of the present invention, as well as the structure and operation of various embodiments thereof, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","While the present invention is described herein with reference to illustrative embodiments for particular applications, it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings herein will recognize additional modifications, applications, and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","102","104","106","102","106","104","100","104","106"]},"Network  may be any network or combination of networks that can carry data communication. Such a network  may include, but is not limited to, a local area network, metropolitan area network, and\/or wide area network such as the Internet. Network  can support protocols and technology including, but not limited to, World Wide Web protocols and\/or services. Intermediate web servers, gateways, or other servers may be provided between components of the system shown in  depending upon a particular application or environment.","Web server  is an electronic device capable of sending, receiving and storing resources. Resources can be provided over network . Resources include data inserted into hypertext markup language (HTML) pages, word processing documents, portable document format (PDF) documents, images, video, and feed sources, to name only a few. Web server  also includes input data . Input data  is data content that client  requests from web server .","In an embodiment, web server  includes an interpreter . Interpreter  and template building module (described below) are components of a template processing system that builds and compiles programs that produce a valid HTML documents. When web server  receives a hypertext transfer protocol (HTTP) request from client , web server  uses interpreter  to generate a valid HTML document that includes valid HTML and valid input data .","Backend server  is a database or a storage repository that stores input data . In an embodiment, web server  retrieves input data from web server  when it receives an HTTP request for a webpage . Web server  uses network  to retrieve input data  from backend server .","Client  is an electronic computing device capable of requesting and receiving resources over network . Example clients  are personal computers, mobile communication devices, (e.g. smart phones, tablet computing devices, notebooks), set-top boxes, game-console embedded systems, and other devices that can send and receive input data  over network . To display input data , client  may execute an application, such as a browser .","Browser  is an application that executes on client . Browser  displays HTML documents as webpages  to a user. In an embodiment, browser  can be a browser such as CHROME browser from Google, Inc.","In one embodiment, browser  also includes interpreter . Interpreter  processes custom attributes that web server  may include in the valid HTML document, and generates webpage  that browser  displays on a display screen. On client  side, browser  may have a plug-in for interpreter . In another embodiment, browser  includes interpreter  when browser  is installed on client . In another embodiment, interpreter  may be built into browser . In another embodiment, interpreter  may be a library that is included in webpage  and delivered to browser  from web server .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","204","109","204","201","204","116"]},"Unlike conventional systems, template processing system decouples the template building and compilation process from the rendering process. During the building and compilation process, template building module  uses templates  in template files  to generate abstract syntax trees (ASTs) , template classes  and template objects . ASTs  and template objects  are uploaded to web server  and are executed by interpreter  when web server  receives a request, such as an HTTP request, for webpage , from browser . When web server  receives such a request, interpreter  initiates a rendering process. During the rendering process, interpreter  combines template objects  with input data  and creates a valid HTML document. Browser  uses this HTML document to render webpage .","In an embodiment, template object  is created from template  in template file . Template  typically includes formatted code, such as HTML markup code, processing instructions, expressions and custom attributes that are interpreted by template building module . Template  may be statically modified by being loaded into an HTML editor or browser  prior to the building and compilation process.","Template building module  compiles and builds a template object  from template . During the compilation and building process, template building module  binds the input parameters included in template  to the definitions of the typed data structures that hold input data  during execution. In an embodiment, a typed data-structure is defined in protocol buffer definition file (\u201c.proto\u201d file) .","Each data structure in \u201c.proto\u201d file  defines a record of information in series of name-value pairs fields with a specific data-type for each name. For example, each name is a type-defined primitive, such as an integer, a float, a string, etc., or another typed data structure. A compiler (not shown) compiles the data structure defined in \u201c.proto\u201d file  into a protocol buffer. During execution, the protocol buffer may be used as a protocol buffer message . Compiler also creates an application programming interface (API) that allows interpreter  to manipulate input data  stored in protocol buffer fields during runtime. A person skilled in the art will appreciate that the actual implementation of the API depends on the programming language, such as C++, Java or Python.","For example, \u201c.proto\u201d file \u201cresult.proto\u201d below, includes protocol buffer \u201cResult\u201d and protocol buffer \u201cLine Snippet.\u201d Protocol buffer \u201cResult\u201d includes a protocol buffer of data-type \u201cLineSnippet.\u201d Protocol buffer \u201cLineSnippet\u201d includes data-types \u201cstring\u201d and an unsigned integer, such as \u201cint32\u201d.\n\n","A developer identifies data structures that pass input data  to template objects  by including a path to the file defining the data structure, such as \u201c.proto\u201d file .","When template building module  attempts to compile and build template object , it identifies the location of \u201c.proto\u201d file  and a data-type of the included data structures and its fields. Template building module  binds the data types of the data-structure and its field to the input parameters included in templates  that are set to receive input data  from the data structure. The binding causes the input parameter to inherit the data-type of the data structure, and as a result have a data-type. The binding eliminates data-type mismatches during runtime and guarantees to produce a valid HTML document.","Template  also includes custom attributes. Each custom attribute includes template processing directives. In a non-limiting example, custom attributes may include, as explained in further detail below, jsimport, jstemplate, jscontent, jsselect, jsvar and jsif, to name only a few. Exemplary template processing directives include static expressions that may be a subset of JavaScript. During runtime, interpreter  uses processing instructions to evaluate input data  and determine the placement of input data  in the valid HTML document. Template processing directives may also determine whether some, all or no input data  is displayed by the valid HTML document.","One example of a custom attribute is jsimport. Jsimport stores a location of \u201c.proto\u201d file  that template  uses to obtain input data . For example,\n\n","In the example above, \u201cmaps\/jslayout\/result.proto\/\u201cspecifies a path to\u201d \u201c.proto\u201d file  from which type definitions may be accessed.","Another example of a custom attribute is jstemplate. Jstemplate is a custom attribute that identifies template  to template building module  during build time.","Jstemplate also declares protocol buffer message  that compiled template object  expects to receive during runtime. For example,\n\n","In the example above, template \u201csnippet\u201d expects input data  from protocol buffer message \u201cLineSnippet\u201d included in namespace maps_jslayout.","Custom attribute jstemplate also indicates for template building module  to bind the data-type of the input parameter in template  to the typed data structure. For example, template building module  should bind the input parameter \u201csnippet\u201d to protocol buffer message \u201cLineSnippet.\u201d As a result, input parameter \u201csnippet\u201d inherits the data-type of protocol buffer message \u201cLineSnippet.\u201d","Another example of a custom attribute is jscontent. During execution, custom attribute jscontent indicates to interpreter  to substitute the content of HTML element in template  with a value of input data  specified in protocol buffer message . For example,\n\n","In the example above, the text that is inserted between HTML tag <span> and <\/span> is the value of field \u201ctext\u201d, in the input parameter \u201csnippet\u201d. As described herein, input parameter \u201csnippet\u201d may be used because template building module  bound it to data-type defined for protocol buffer \u201cLineSnippet.\u201d","Another example of a custom attribute is jsvalues. Jsvalues sets an HTML attribute to a value of the field in the input parameter. For example,\n\n","In the example above, tag <div> includes text that has values from the field \u201ctype\u201d and the value from the field \u201cid\u201d included in the input parameter \u201csnippet.\u201d","In another example, a combination of custom attributes jsif and jscontent may specify conditions when specific template sections may be omitted or hidden in the valid HTML document. For example:\n\n","In the example above, valid HTML document displays the value of the fields \u201ctext\u201d \u201ctype\u201d and \u201cid\u201d from the input parameter \u201csnippet\u201d if the field \u201cid\u201d is set to a value.","Another example of a custom attribute is jsselect. Jsselect is an example of a for loop inside template . For example, jsselect iterates over an array in a protocol buffer \u201cResult\u201d and produces lines of input data , different input data  included on each line. For example,\n\n","In the example above, the data-type of jstemplate input parameter \u201cresult_message\u201d is bound to the data-type of the protocol buffer message \u201cResult.\u201d Custom attribute jsselect iterates over the field \u201cline_snippet_array\u201d in the input parameter \u201cresult_message.\u201d The value of the field \u201cresult_message\u201d is written into the input parameter \u201csnippet.\u201d Jsselect uses \u201ci\u201d as a counter to keep track of the number of iterations performed on the input parameter \u201cresult_message.\u201d In the example above, for each snippet in \u201cresult_message\u201d interpreter  generates a line \u201c\u2018snippet\u2019+(1+i)+\u2018of\u2019+total\u201d where \u2018i\u2019 indicates the number of snippets in the valid HTML document.","In another example, custom attributes are used to access compiled functions. For example, template  may specify a service, such as a remote procedure call (RPC) service, and pass protocol buffer message  to that service. During processing, interpreter  may render different content based on the result of an RPC call to a given service. In an embodiment, RPC service may return input data  in protocol buffer message  as a result. For example,\n\n","In the example above, template  renders a <div> tag only when browser  is of type \u2018X\u2019.","In an embodiment, the interface for the RPC service may also be defined in \u201c.proto\u201d file . For the example above, an interface:\n\n","In another embodiment, a developer uses custom attributes in template  to compose output from multiple templates (also known as \u201ctransclusion\u201d). Transclusion occurs when a content of an element, such as an HTML element in one template, replaces content from an element from another template. During the compilation and building process, when template building module  performs a transclusion, it guarantees that when the transcluded template is transcluded into a transcluding template, the data-type of the input parameters of the transcluded template match the data-types passed to the transcluded template. As a result, template building module  produces template objects that are guaranteed to generate a valid HTML document.","For example, in template file , such as \u201cresult_template_file.html\u201d below, a developer defines a transcluding template.",{"@attributes":{"id":"p-0055","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html jsimport=\u2033template\/prototemplate\/jslayout\/examples\/snippet\/"},{"entry":"result.proto\u2033>"},{"entry":"\u2003<div jstemplate=\u2033result_template; result_message:maps_jslayout.Result\u2033>"},{"entry":"\u2003\u2003Snippets:"},{"entry":"\u2003\u2003<div jsvars=\u2033total:size(\u2032result_message.line_snippet_array\u2032)\u2033"},{"entry":"\u2003\u2003\u2003\u2003jsselect=\u2033snippet, i: result_message.line_snippet_array\u2033>"},{"entry":"\u2003\u2003\u2003<span jscontent=\u2033\u2032snippet\u2032 + (1 + i) + \u2032 of\u2032 + total\u2033>"},{"entry":"\u2003\u2003\u2003\u2003Text here is replaced with \u2033snippet X of Y\u2033"},{"entry":"\u2003\u2003\u2003<\/span>"},{"entry":"\u2003\u2003\u2003<div use=\u2033line_snippet_file.html#line_snippet_template\u2033>"},{"entry":"\u2003\u2003\u2003\u2003Text here is replaced with transcluded and processed template."},{"entry":"\u2003\u2003\u2003<\/div>"},{"entry":"\u2003\u2003<\/div>"},{"entry":"\u2003<\/div>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Template \u201cresult_template\u201d in template file \u201cresult_template_file.html\u201d is a transcluding template. A transcluding template is template  that includes a transcluded template. A transcluded template is template  that can render a valid HTML output stream, but that may also be included in a transcluding template. A transcluded template may be included in the same or different template file  as a transcluding template.","In an embodiment, custom attribute \u201cuse\u201d in the transcluding template includes credentials that identify the transcluded template file and the transcluded template. In an embodiment, an application developer sets custom attribute \u201cuse\u201d to a uniform resource locator (URL) that includes a path to the transcluded file, such as \u201cline_snippet_file.html\u201d described below.",{"@attributes":{"id":"p-0058","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<html jsimport=\u2033template\/prototemplate\/jslayout\/examples\/snippet\/"},{"entry":"result.proto\u2033>"},{"entry":"\u2003<div jstemplate=\u2033line_snippet_template;"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003snippet:maps_jslayout.LineSnippet\u2033>"},{"entry":"\u2003\u2003<div jsif=\u2033has(\u2032snippet.id\u2032)\u2033"},{"entry":"\u2003\u2003\u2003\u2003jscontent=\u2033snippet.text\u2033"},{"entry":"\u2003\u2003\u2003\u2003jsvalues=\u2033id:snippet.type + snippet.id\u2033>"},{"entry":"\u2003\u2003\u2003This text is replaced with snippet text."},{"entry":"\u2003\u2003<\/div>"},{"entry":"\u2003<\/div>"},{"entry":"<\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The URL further contains an identifier, such as \u201c#\u201d, followed by the name of the transcluded template. For example, \u201c#line_snippet_template\u201d identifies a transcluded template \u201cline_snippet_template,\u201d in template file \u201cline_snippet_file.html\u201d.","In transclusion, the transcluded template retains the rendering credentials, such as the cascading style sheets (CSS) rules and JavaScript that are associated with the transcluded template, even when those rendering credentials are included outside of the transcluded template in the transcluded template file. For example, CSS rules may be included in the header of template file  and are outside of the definition of template . A person skilled in the art will appreciate that the CSS rules that specify a style for template  when it is displayed on browser .","In an embodiment, during transclusion, template building module  identifies the rendering credentials that are associated with the transcluded template, and inserts the rendering credentials into the transcluding file. For example, CSS rules that are associated with the transcluded template may be inserted into the transcluding template with the identifier that corresponds to the transcluded template. As a result, when the transcluded template is being rendered in the transcluding file, the transcluded template is governed by the associated CSS rules.","A person skilled in the art will appreciate that custom attributes and their corresponding utilization described herein are given by way of example and not limitation, and that there are other ways custom attributes may be utilized to expand dynamic functionality in template .","Template building module  includes a parser , an optimizer , a code generator  and a compiler . Parser  parses the HTML syntax in each template  included in template file , verifies that data-types of the input parameters are consisted with the data-types for input data , that paths to \u201c.proto\u201d files  and other external files are correct and that fields specified in template  for protocol buffer messages  exist in \u201c.proto\u201d file .","When parser  encounters a custom attribute in template , parser  also performs a syntactic analysis of the custom attribute. For example, parser  verifies that the syntax of each custom attribute is compatible with the format described herein.","Additionally, parser  parses the content of external files, such as external CSS files, referenced in template file . Parser  may indicate to compiler  to inline the content of the CSS files in template objects , such that when the HTML document is created, the output stream contains the CSS from the external CSS files directly, and not by reference to the CSS.","Because parser  verifies that the data-type of each input parameter is consistent with the data-type of the data structure assigned to it, and the HTML syntax in each template , template processing system guarantees that compiled templates  produce a valid HTML document. In the valid HTML document input data  is properly nested when the HTML document is being displayed as a webpage  and when HTML tags are properly closed.","When parser  determines that template  is a transcluding template, parser  verifies that the transcluded template file exists and is accessible to the transcluding template. For example, parser  determines whether the transcluded template file exists using the URL specified by the custom attribute, such as \u201cuse.\u201d If the transcluded template file exists, parser  also verifies that the transcluded template is defined in the transcluded template file. For example, parser  verifies that the transcluded template identified using the identifier \u201c#\u201d included in custom attribute \u201cuse\u201d is defined in the transcluded template.","In transclusion, parser  verifies that the data-type of an input parameter in the transcluding template that receives the transcluded template has the same data-type as the transcluded template. For example, parser  determines the data-type of the input parameter in the transcluding template \u201cresult_template file.html\u201d that receives the transcluded template. In the example above, the input parameter is \u201csnippet\u201d which inherits the data-type of \u201cresult_message.line_snippet_array\u201d which is \u201cLineSnippet\u201d as defined in the \u201cresult.proto\u201d file described herein. Parser  also determines the data-type of the transcluded template \u201cline_snippet_template.\u201d As described herein, the data-type of template \u201cline_snippet_template\u201d is the data-type of a protocol buffer \u201cmaps_jalayout.LineSnippet\u201d that is defined in \u201cresult.proto\u201d file, and is \u201cLineSnippet.\u201d If the data-type of the input parameter in the transcluding template and the data-type of the transcluded template do not match, parser  generates an error message. In an embodiment, the error message may be displayed to an application developer on a display screen of a computing device.","Parser  also generates AST  from template file . In an embodiment, AST  may be represented in a text file. In another embodiment, AST  may be a compiled, binary representation. In an embodiment, AST  may be represented as protocol buffer message . In an embodiment, code generator  generates an AST  for a transcluding template and a transcluded template.","The nodes in AST  include HTTP tags, expressions and custom attributes included in template . Node in AST  may contain tags to other AST . During execution, interpreter  traverses AST  in order to render HTML syntax.","In transclusion, parser  may generate AST  for the transcluding template and the transcluded template. In AST  for the transcluding template, parser  inserts a tag next to a custom attribute, such as \u201cuse\u201d that identifies the transcluded template. In an embodiment, the tag includes an indication to interpreter  to parse AST  tree associated with the transcluded template prior to traversing to the next node in AST associated with the transcluding template.","After parser  parses template  and validates the data-type definitions between the input data  and input parameters, parser  passes the parsed template  to optimizer .","In an embodiment, optimizer  optimizes expressions and processing instructions in templates  so that the code generated from the expressions is efficient in terms of speed and system resources, such as memory and control processing unit (CPU) time when template objects  are executed.","Code generator  converts template  into a template class . In an embodiment, template class  has the same name as template . A person skilled in the art will appreciate that code generator  may generate template class  in C++, Java, Python or any other object oriented programming language known to a person skilled in the art.",{"@attributes":{"id":"p-0075","num":"0112"},"figref":["FIG. 3","FIG. 3"],"b":["300","304","302","306"]},"In an embodiment, definitions and declarations for each template class  generated from each template  are stored in the definition and declaration files that correspond to the name of template . For example, in C++, code generator  generates template class LineSnippetTemplate  that is included in files \u201cline_snippet_file.cc\u201d and \u201cline_snippet_file.h\u201d from template file \u201cline_snippet_file.html\u201d . A person skilled in the art will appreciate that a \u201c.h\u201d file includes declaration of classes, subroutines, variable and other identifiers, while a \u201c.cc\u201d file includes actual implementation of the classes.","In an embodiment, code generator  generates a namespace for templates  included in template file . A person skilled in the art will appreciate that a namespace avoids a building conflict, such as, a conflict when compiler  attempts to compile templates  having the same name that are included in different template files  and template classes  that have the same name but different processing directives. In a further embodiment, namespace for template file  may be the name of template file . For example, for template file line_snippet_file.html\u201d , code generator  generates namespace line_snippet_file . Namespace line_snippet_file  includes class LineSnippetTemplate ","In template class , code generator  includes a declaration for each protocol buffer message  included in template  in the \u201c.h\u201d file such as \u201cline_snippet_file.h\u201d . For example, protocol buffer message \u201cLineSnippet\u201d may be declared as class LineSnippet .","In an embodiment, code generator  generates a Fill( ) method and a Render( ) method for each template class . The Fill( ) method passes protocol buffer message  to template class  during execution. Once template class  obtains protocol buffer message , template class  may retrieve input data  from fields included in protocol buffer message  and use input data  to evaluate expressions in custom attributes such as jsselect, jsif and jsvalues. For example, class LineSnippetTemplate  includes a Fill( ) method  that passes protocol buffer message LineSnippet  to template class LineSnippetTemplate .","The Render( ) method renders an output stream that, includes HTML and input data  received using protocol buffer messages . For example, class LineSnippetTemplate  includes a Render( ) method  that renders a valid HTML document .","In an embodiment, code generator generates template classes  for a transcluding template and a transcluded template.","Going back to , compiler  converts (compiles) template classes  and template rendering code  into template objects . In an embodiment, compiler  may be a C++ compiler. However, a person skilled in the art will appreciate that a compiler for other languages, such as Java may be used. Template objects  are binary objects that include computer executable code that reads and manipulates input data .","In addition to template classes , a template application developer writes front end rendering code . Front end rendering code  references a declaration for each template class , a code to initialize and compose protocol buffer message  that include input data , a call to a Fill( ) method that passes protocol buffer message  to template object  and a call to a Render( ) method to create an output string that composes a valid HTML document. , includes an example front end rendering code  for class LineSnippetTemplate .","In front end rendering code , a protocol buffer message \u201cLineSnippet\u201d is declared by \u201cmapsjslayout::LineSnippet snippet.\u201d Front end rendering code  also declares protocol buffer message \u201cLineSnippet\u201d  that may be used to retrieve input data . After input data  is retrieved, protocol buffer messages \u201cLineSnippet\u201d  is passed to the LineSnippetTemplate's template object  using the \u201ctpl.Fill( )\u201d method . Subsequently, front end rendering code  uses \u201ctpl.Render( )\u201d method  to render an output stream that contains a valid HTML document .","In an embodiment, in transclusion, a developer writes front end rendering code  that includes a template object  for the transcluding template.","Going back to , after application developer completes writing frontend rendering code , front end rendering code  is compiled using compiler  and is stored as a front end rendering object .","Once created, in one embodiment, ASTs , template objects  and front end rendering object  may be uploaded to web server  or another computing device that includes a interpreter .","System memory  stores compiled objects and other computing applications on a computing device. For example, once template building module  generates template objects  and abstract syntax trees , they may be stored in system memory  before being uploaded to web server . In another example, system memory  may store protocol buffer messages  and front end rendering object .",{"@attributes":{"id":"p-0089","num":"0126"},"figref":"FIG. 4","b":["400","400","109","208","218","211","213"]},"When web server  receives an HTTP request  for webpage , web server  passes the HTTP request  to frontend rendering object . In response to the HTTP request, frontend rendering object  retrieves input data . In an embodiment, input data  may be stored on web server  or on, for example, backend server  that communicates with web server  using network .","After front end rendering object  retrieves input data , front end rendering object  passes input data  to template object  using protocol buffer message . For example, front end rendering object  passes protocol buffer message  to template object  by executing template object's  Fill( ) method. In transclusion, front end rendering object  retrieves input data  for the transcluding template and transcluded template, and passes the received protocol buffer  to the transcluding template object.","After front end rendering object  passes protocol buffer message  to template object , front end rendering object  renders HTML output stream  by executing the Render( ) method. For example, when front end rendering object  executes the Render( ) method, template object  passes protocol buffer message  and the associated AST  to interpreter .","Interpreter  traverses AST  and generates HTML output stream . In an embodiment, interpreter  includes textual expressions embedded in the node of AST  in HTML output stream . In another embodiment, interpreter  evaluates processing instructions and processing directives included in custom attributes embedded in AST's  node using input data  included in protocol buffer message . Based on the evaluation, interpreter  also generates HTML output stream .","In an embodiment, interpreter  begins traversing AST  associated with the transcluding template. When interpreter  encounters a \u201cuse\u201d custom attribute in AST , interpreter  accesses AST  associated with transcluded template and completes traversing that AST , prior to traversing the next node in AST  associated with the transcluding template.","In an embodiment, interpreter  may execute on client . Client  may activate interpreter  when a user opens template file  using a file managing application, such as WINDOWS EXPLORER or APPLE FINDER. When executing on client , interpreter  may also make a request to retrieve input data  from storage are located on client  and proceed as described herein.","After interpreter  renders HTML output stream , interpreter  sends HTML output stream  to browser . The HTML output stream  generates a valid HTML document that browser  displays as webpage .","In an embodiment, HTML output stream  is output stream . Output stream includes valid HTML syntax and input data . When browser  receives output stream , browser  displays webpage  on a display screen of client . With HTML output stream , browser  makes another HTTP request to web server  to update webpage , and, in response receives another output stream  with updated input data .","In another embodiment, HTML output stream  is output stream . Output stream includes custom attributes included in output stream . Included, custom attributes do not interfere with browser  displaying webpage  on the display screen. The included custom attributes allow browser  to issue update request to update input data . For example, custom attribute may include a remote procedure call (RPC) function. Interpreter  installed on browser , as described herein, can execute the RPC and issue an RPC request for updated input data  to web server . In an embodiment, browser  makes an RPC service call using asynchronous JavaScript and XML (AJAX) applications. In response to the RPC request, web server  sends input data  to client . Once client  receives input data , interpreter  inserts the input data  into webpage , without re-rendering the webpage.",{"@attributes":{"id":"p-0099","num":"0136"},"figref":"FIG. 5","b":"500"},"At stage , the transcluding template file is accessed by, for example, template building module . In an embodiment, a transcluding template file includes a transcluding template and a custom attribute, such as a \u201cuse\u201d.","At stage , the transcluded file is accessed by, for example, template building module . In an embodiment, the transcluded template file includes template  that may be the transcluded into the transcluding template of stage .","At stage , it is verified that the transcluding template file can assess the transcluded template file. This verification may be performed by, for example, parser . In an embodiment, parser  verifies that the transcluded template file exists at a URL path specified in a custom attribute \u201cuse\u201d in the transcluding template. At stage , parser , for example, also verifies whether the transcluded template exists in the transcluded file. For example, parser  verifies the name of the template that follows the identifier provided in custom attribute \u201cuse,\u201d against the name of the transcluded template.","At stage , parser , for example, verifies whether the data-type of the input parameter in the transcluding template matches the data-type of the transcluded template. If the data-type of the input parameter does not match to the data-type of the transcluded template, the flowchart ends.","At stage , the transcluding template and the transcluded template are optimized, by, for example optimizer  as described herein.","At stage , template classes for the transcluding and transcluded template are generated. For example, a transcluding template class and a transcluded template class are generated as described herein, by, for example code generator  from the transcluding template and transcluded template. At stage , ASTs are also generated for the transcluding and transcluded template, by, for example, code generator .","At stage , template objects are generated. For example, compiler  compiles a transcluding template object and a transcluded template object from template classes generated in stage .","At stage , front end rendering object is generated. For example, after developer has written the front end rendering code  that renders a valid HTML output stream from the transcluded and transcluding template. In an embodiment, front end rendering object  is generated using a C++ or another compiler, as described herein from the front end rendering code . As described herein, stage , may be performed prior to, during or after the template object building process.","When template objects of stage  and front end rendering object of stage  are generated, they may be uploaded, to, for example, web server .",{"@attributes":{"id":"p-0109","num":"0146"},"figref":"FIG. 6","b":"600"},"At stage , a web server  receives an HTTP request from a client .","At stage , input data is retrieved. For example, front end rendering object  issues a request to retrieve input data  from web server  or back end server , and, in response, receives input data  in a form of protocol buffer message .","At stage , input data is passed to the template objects. For example, front end rendering object  passes protocol buffer message  received in stage  to the transcluding template object using the Fill( ) method.","At stage , front end rendering object begins the rendering process. For example, front end rendering object  executes the transcluding template object's Render( ) method. When the Render( ) method is executed, the transcluding template object passes protocol buffer message  received in step  and ASTs  associated with the transcluding template object to interpreter . For example, AST  associated with the transcluding template object and the transcluded template object are passed to interpreter .","At stage , a valid HTML document, is generated, by for example, interpreter . Interpreter  traverses AST  associated with the transcluding template. At each node in AST , interpreter  retrieves textual expressions or evaluates processing instructions included in the node using input data  included in protocol buffer message . When interpreter , encounters a \u201cuse\u201d custom attribute, interpreter  begins to parse AST  associated with the transcluded template object before returning to AST  associated with the transcluding template object. Interpreter  generates HTML output stream  that represents a valid HTML document from the textual expressions retrieved from the nodes in ASTs  and textual expressions that are based on the evaluated processing instructions.","At stage , the valid HTML document is sent to the browser. For example, web server  sends HTML output stream  that represents a valid HTML document generated in stage  to browser .","At stage , browser displays the valid HTML document. For example, browser  displays the valid HTML document on a display screen of client .",{"@attributes":{"id":"p-0117","num":"0154"},"figref":["FIG. 7","FIGS. 1-6"],"b":["700","100","700"]},"Web server  and client  can include one or more computing devices. According to an embodiment, web server  and client  can include one or more processors , one or more non-volatile storage mediums , one or more memory devices , a communication infrastructure , a display screen  and a communication interface . Processors  can include any conventional or special purpose processor, including, but not limited to, digital signal processor (DSP), field programmable gate array (FPGA), and application specific integrated circuit (ASIC). Non-volatile storage  can include one or more of a hard disk drive, flash memory, and like devices that can store computer program instructions and data on computer-readable media. One or more of non-volatile storage device  can be a removable storage device. Memory devices  can include one or more volatile memory devices such as, but not limited to, random access memory. Communication infrastructure  can include one or more device interconnection buses such as Ethernet, Peripheral Component Interconnect (PCI), and the like.","Typically, computer instructions executing on web server  or client  are executed using one or more processors  and can be stored in non-volatile storage medium  or memory devices .","Display screen  allows results of the computer operations to be displayed to a user or an application developer.","Communication interface  allows software and data to be transferred between computer system  and external devices. Communication interface  may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like. Software and data transferred via communication interface  may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by communication interface . These signals may be provided to communication interface  via a communications path. Communications path carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.","Embodiments also may be directed to computer program products comprising software stored on any computer-useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein. Embodiments of the invention employ any computer-useable or readable medium. Examples of computer-useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nanotechnological storage device, etc.).","The embodiments have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.","The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can, by applying knowledge within the skill of the art, readily modify and\/or adapt for various applications such specific embodiments, without undue experimentation, without departing from the general concept of the present invention. Therefore, such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments, based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation, such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.","The Summary section may set forth one or more but not all exemplary embodiments as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.","The breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["Reference will be made to embodiments of the invention, examples of which may be illustrated in the accompanying figures. These figures are intended to be illustrative, not limiting. Although the invention is generally described in the context of these embodiments, it should be understood that it is not intended to limit the scope of the invention to these particular embodiments.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
