---
title: Method and apparatus for tracking changes in a system
abstract: A method for analyzing a target system that includes obtaining a plurality of characteristics from the target system using a characteristics extractor, wherein the plurality of characteristics is associated with a characteristics model, storing each of the plurality of characteristics in a characteristics store using a tracking mechanism, and analyzing the target system by issuing a query to the characteristics store to obtain an analysis result, wherein the query uses tracking information associated with the tracking mechanism.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07703074&OS=07703074&RS=07703074
owner: Oracle America, Inc.
number: 07703074
owner_city: Redwood Shores
owner_country: US
publication_date: 20050520
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","EXAMPLE 1","Query using Time-Related Attribute","EXAMPLE 2","Query using Time-Related Attribute","EXAMPLE 3","Query using Sub-Characteristics Stores"],"p":["The present application contains subject matter that may be related to the subject matter in the following U.S. patent applications filed on May 20, 2005, and assigned to the assignee of the present application: \u201cMethod and Apparatus for Transparent Invocation of a Characteristics Extractor for Pattern-Based System Design Analysis\u201d Ser. No. 11\/134,154; \u201cMethod and Apparatus for Generating Components for Pattern-Based System Design Analysis Using a Characteristics Model\u201d Ser. No. 11\/133,717; \u201cMethod and Apparatus for Pattern-Based System Design Analysis\u201d Ser. No. 11\/134,062; \u201cMethod and Apparatus for Cross-Domain Querying in Pattern-Based System Design Analysis\u201d Ser. No. 11\/133,507; \u201cMethod and Apparatus for Pattern-Based System Design Analysis Using a Meta Model\u201d Ser. No. 11\/134,021; \u201cPattern Query Language\u201d Ser. No. 11\/133,660; and \u201cMethod and Apparatus for Generating a Characteristics Model for Pattern-Based System Design Analysis Using a Schema\u201d Ser. No. 11\/133,714.","As software technology has evolved, new programming languages and increased programming language functionality has been provided. The resulting software developed using this evolving software technology has become more complex. The ability to manage the quality of software applications (including design quality and architecture quality) is becoming increasingly more difficult as a direct result of the increasingly complex software. In an effort to manage the quality of software applications, several software development tools and approaches are now available to aid software developers in managing software application quality. The following is a summary of some of the types of quality management tools currently available.","One common type of quality management tool is used to analyze the source code of the software application to identify errors (or potential errors) in the source code. This type of quality management tool typically includes functionality to parse the source code written in a specific programming language (e.g., Java\u2122, C++, etc.) to determine whether the source code satisfies one or more coding rules (i.e., rules that define how source code in the particular language should be written). Some quality management tools of the aforementioned type have been augmented to also identify various coding constructs that may result in security or reliability issues. While the aforementioned type of quality management tools corrects coding errors, it does not provide the software developer with any functionality to verify the quality of the architecture of software application.","Other quality management tools of the aforementioned type have been augmented to verify that software patterns have been properly implemented. Specifically, some quality management tools of the aforementioned type have been augmented to allow the software developer to indicate, in the source code, the type of software pattern the developer is using. Then the quality management tool verifies, during compile time, that the software pattern was used\/implemented correctly.","In another implementation of the aforementioned type of quality management tools, the source code of the software is parsed and the components (e.g., classes, interfaces, etc.) extracted from the parsing are subsequently combined in a relational graph (i.e., a graph linking all (or sub-sets) of the components). In a subsequent step, the software developer generates an architectural design, and then compares the architectural design to the relational graph to determine whether the software application conforms to the architectural pattern. While the aforementioned type of quality management tool enables the software developer to view the relationships present in the software application, it does not provide the software developer with any functionality to conduct independent analysis on the extracted components.","Another common type of quality management tool includes functionality to extract facts (i.e., relationships between components (classes, interfaces, etc.) in the software) and subsequently displays the extracted facts to the software developer. While the aforementioned type of quality management tool enables the software developer to view the relationships present in the software application, it does not provide the developer with any functionality to independently query the facts or any functionality to extract information other than facts from the software application.","Another common type of quality management tool includes functionality to extract and display various statistics (e.g., number of lines of code, new artifacts added, software packages present, etc.) of the software application to the software developer. While the aforementioned type of quality management tool enables the software developer to view the current state of the software application, it does not provide the developer with any functionality to verify the quality of the architecture of the software application.","In general, in one aspect, the invention relates to a method for analyzing a target system, comprising obtaining a plurality of characteristics from the target system using a characteristics extractor, wherein the plurality of characteristics is associated with a characteristics model, storing each of the plurality of characteristics in a characteristics store using a tracking mechanism, and analyzing the target system by issuing a query to the characteristics store to obtain an analysis result, wherein the query uses tracking information associated with the tracking mechanism.","In general, in one aspect, the invention relates to a system, comprising a characteristics model defining at least one artifact and a plurality of characteristics associated with the at least one artifact, a target system comprising at least one of the plurality of characteristics defined in the characteristics model, at least one characteristics extractor configured to obtain at least one of the plurality of characteristics from the target system, a characteristics store configured to store the at least one of the plurality of characteristics obtained from the target system using a tracking mechanism, and a query engine configured to analyze the target system by issuing a query to the characteristics store and configured to obtain an analysis result in response to the at least one query, wherein the query uses tracking information associated with the tracking mechanism.","In general, in one aspect, the invention relates to a computer readable medium comprising software instructions for analyzing a target system, comprising software instructions to obtain a plurality of characteristics from the target system using a characteristics extractor, wherein the plurality of characteristics is associated with a characteristics model, store each of the plurality of characteristics in a characteristics store using a tracking mechanism, and analyze the target system by issuing a query to the characteristics store to obtain an analysis result, wherein the query uses tracking information associated with the tracking mechanism.","Other aspects of the invention will be apparent from the following description and the appended claims.","Exemplary embodiments of the invention will be described with reference to the accompanying drawings. Like items in the drawings are shown with the same reference numbers.","In the exemplary embodiment of the invention, numerous specific details are set forth in order to provide a more thorough understanding of the invention. However, it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances, well-known features have not been described in detail to avoid obscuring the invention.","In general, embodiments of the invention relate to a method and apparatus for pattern-based system design analysis. More specifically, embodiments of the invention provide a method and apparatus for using one or more characteristics models, one or more characteristics extractors, and a query engine configured to query the characteristics of a target system to analyze the system design. Embodiments of the invention provide the software developer with a fully configurable architectural quality management tool that enables the software developer to extract information about the characteristics of the various artifacts in the target system, and then issue queries to determine specific details about the various artifacts including, but not limited to, information such as: number of artifacts of the specific type present in the target system, relationships between the various artifacts in the target system, the interaction of the various artifacts within the target system, the patterns that are used within the target system, etc.","Further, embodiments of the invention provide a method and apparatus for tracking changes in a target system. More specifically, embodiments of the invention provide tracking mechanisms to track changes in the target system. The changes in the target system may include, but are not limited to, adding\/removing\/modifying artifacts from the target system, adding\/removing\/modifying characteristics within the target system, and adding\/removing\/modifying relationships within the system, etc.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","102","104","106","108","110","112"]},"In one embodiment of the system, the characteristics model () describes artifacts (i.e., discrete components) in a particular domain. In one embodiment of the invention, the domain corresponds to any grouping of \u201crelated artifacts\u201d (i.e., there is a relationship between the artifacts). Examples of domains include, but are not limited to, a Java\u2122 2 Enterprise Edition (J2EE) domain (which includes artifacts such as servlets, filters, welcome file, error page, etc.), a networking domain (which includes artifacts such as web server, domain name server, network interface cards, etc), and a DTrace domain (described below). In one embodiment of the invention, each characteristics model includes one or more artifacts, one or more relationships describing the interaction between the various artifacts, and one or more characteristics that describe various features of the artifact. An example of a characteristics model () is shown in . Those skilled in the art will appreciate that the system may include more than one characteristics model ().","In one embodiment of the invention, the use of a characteristics model () enables a user to analyze the target system () with respect to a specific domain. Further, the use of multiple characteristics models allows the user to analyze the target system () across multiple domains. In addition, the use of multiple characteristics models allows the user to analyze the interaction between various domains on the target system ().","In one embodiment of the invention, the characteristics extractors (e.g., characteristics extractor A (A), characteristics extractor N (N)) are used to obtain information about various artifacts (i.e., characteristics) defined in the characteristics model (). In one embodiment of the invention, the characteristics extractors (characteristics extractor A (A), characteristics extractor B (N)) are generated manually using the characteristics model ().","In one embodiment of the invention, the characteristics extractor (e.g., characteristics extractor A (A), characteristics extractor B (N)) corresponds to an agent loaded on the target system () that is configured to monitor and obtain information about the artifacts in the target system (). Alternatively, the characteristics extractor (e.g., characteristics extractor A (A), characteristics extractor B (N)) may correspond to an interface that allows a user to manually input information about one or more artifacts in the target system (). In another embodiment of the invention, the characteristics extractor (e.g., characteristics extractor A (A), characteristics extractor B (N)) may correspond to a process (or system) configured to obtain information about one or more artifacts in the target system () by monitoring network traffic received by and sent from the target system (). In another embodiment of the invention, the characteristics extractor (e.g., characteristics extractor A (A), characteristics extractor B (N)) may correspond to a process (or system) configured to obtain information about one or more artifacts in the target system () by sending requests (e.g., pinging, etc.) for specific pieces of information about artifacts in the target system () to the target system (), or alternatively, sending requests to the target system and then extracting information about the artifacts from the responses received from target system (). Those skilled in the art will appreciate that different types of characteristics extractors may be used to obtain information about artifacts in the target system ().","Those skilled in the art will appreciate that each characteristics extractor (or set of characteristics extractors) is associated with a particular characteristics model (). Thus, each characteristics extractor typically only retrieves information about artifacts described in the characteristics model with which the characteristics extractor is associated. Furthermore, if there are multiple characteristics models in the system, then each characteristics model may be associated with one or more characteristics extractors.","The information about the various artifacts in the target system () obtained by the aforementioned characteristics extractors (e.g., characteristics extractor A (A), characteristics extractor N (N)) is stored in the characteristics store () via the characteristic store API (). In one embodiment of the invention, characteristics store API () provides an interface between the various characteristics extractors (characteristics extractor A (A), characteristics extractor N (N)) and the characteristics store (). Further, the characteristics store API () includes information about where in the characteristics store () each characteristic obtained from the target system () should be stored.","In one embodiment of the invention, the characteristics store () corresponds to any storage that includes functionality to store characteristics in a manner that allows the characteristics to be queried. In one embodiment of the invention, the characteristics store () may correspond to a persistent storage device (e.g., hard disk, etc). In one embodiment of the invention, the characteristics store () corresponds to a relational database that may be queried using a query language such as Structure Query Language (SQL). Those skilled in the art will appreciate that any query language may be used. In one embodiment of the invention, if the characteristics store () is a relational database, then the characteristics store () includes a schema associated with the characteristics model () that is used to store the characteristics associated with the particular characteristics model (). Those skilled in the art will appreciate that, if there are multiple characteristics models, then each characteristics model () may be associated with a separate schema.","In one embodiment of the invention, if the characteristics store () is a relational database that includes a schema associated with the characteristics model (), then the characteristics store API () includes the necessary information to place characteristics obtained from target system () in the appropriate location in the characteristics store () using the schema.","In one embodiment of the invention, the query engine () is configured to issue queries to the characteristics store (). In one embodiment of the invention, the queries issued by the query engine () enable a user (e.g., a system developer, etc.) to analyze the target system (). In particular, in one embodiment of the invention, the query engine () is configured to enable the user to analyze the presence of specific patterns in the target system as well as the interaction between various patterns in the target system.","In one embodiment of the invention, the query engine () includes functionality to issue queries using a tracking mechanism. More specifically, the query engine () includes functionality to issue a query to the characteristics store () that includes tracking information associated with the tracking mechanism. More specifically, the query engine () allows a user to determine changes in the system overtime by issuing queries that leverage tracking information associated with the tracking mechanism(s) used to store the characteristics in the characteristics store (). Examples of such queries are discussed below.","In one embodiment of the invention, a pattern corresponds to a framework that defines how specific components in the target system () should be configured (e.g., what types of information each component should manage, what interfaces should each component expose), and how the specific components should communicate with each other (e.g., what data should be communicated to other components, etc.). Patterns are typically used to address a specific problem in a specific context (i.e., the software\/system environment in which the problem arises). Said another way, patterns may correspond to a software architectural solution that incorporates best practices to solve a specific problem in a specific context.","Continuing with the discussion of , the query engine () may also be configured to issue queries about interaction of specific patterns with components that do not belong to a specific pattern. Further, the query engine () may be configured to issue queries about the interaction of components that do not belong to any patterns.","In one embodiment of the invention, the query engine () may include pre-specified queries and\/or enable to the user to specify custom queries. In one embodiment of the invention, both the pre-specified queries and the custom queries are used to identify the presence of one or more patterns and\/or the presence of components that do not belong to a pattern in the target system (). In one embodiment of the invention, the pre-specified queries and the custom queries are specified using a Pattern Query Language (PQL). In one embodiment of the invention, PQL enables the user to query the artifacts and characteristics of the artifacts stored in the characteristics store () to determine the presence of a specific pattern, specific components of a specific pattern, and\/or other components that are not part of a pattern, within the target system ().","In one embodiment of the invention, the query engine () may include information (or have access to information) about the characteristics model () that includes the artifact and\/or characteristics being queried. Said another way, if the query engine () is issuing a query about a specific artifact, then the query engine () includes information (or has access to information) about the characteristics model to which the artifact belongs. Those skilled in the art will appreciate that the query engine () only requires information about the particular characteristics model () to the extent the information is required to issue the query to the characteristics store ().","Those skilled in the art will appreciate that the query engine () may include functionality to translate PQL queries (i.e., queries written in PQL) into queries written in a query language understood by the characteristics store () (e.g., SQL). Thus, a query written in PQL may be translated into an SQL query prior to being issued to the characteristics store (). In this manner, the user only needs to understand the artifacts and\/or characteristics that the user wishes to search for and how to express the particular search using PQL. The user does not need to be concerned with how the PQL query is handled by the characteristics store ().","Further, in one or more embodiments of the invention, PQL queries may be embedded in a programming language such as Java\u2122, Groovy, or any other programming language capable of embedding PQL queries. Thus, a user may embed one or more PQL queries into a program written in one of the aforementioned programming languages. Upon execution, the program issues one or more PQL queries embedded within the program and subsequently receives and processes the results prior to displaying them to the user. Those skilled in the art will appreciate that the processing of the results is performed using functionality of the programming language in which the PQL queries are embedded.","In one embodiment of the invention, the results of the individual PQL queries may be displayed using the visualization engine (). In one embodiment of the invention, the visualization engine () is configured to output the results of the queries on a display device (i.e., monitor, printer, projector, etc.).","In one embodiment of the invention, the system may include tracking mechanisms to tracking changes in the target system. More specifically, the system includes functionality to use a tracking mechanism to store characteristics within the system. In one embodiment of the invention, the tracking mechanism corresponds to associating each characteristic stored in the characteristics store () with a time-related attribute. (See ) Alternatively, the tracking mechanism corresponds to using sub-characteristics stores to store characteristics associated with an instance of the target system (e.g., a particular version, the target system at a given time, etc.). (See ).","In one embodiment of the invention, the query engine () is configured to issue queries to the characteristics store () using tracking information associated with the tracking mechanisms used to the store the characteristics within the characteristics store (). For example, if the characteristics are stored with a time-related attribute, then the query engine may issue queries that specify a particular timeframe, version, etc. Thus, only characteristics that have a time-related attributed within the range specified by the query are considered. Alternatively, if sub-characteristics stores are used, then the query may specify a particular sub-characteristics store (e.g., queries that specify the name of the particular sub-characteristics store) within the characteristics store () to issue the queries to.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2","FIG. 2"],"b":["114","116","116","116","116","106"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 3"],"b":["106","118","118","118","118","118","118","118","118","118","118","118","118"]},"As discussed above, each characteristics model defines one or more artifacts, one or more relationships between the artifacts, and one or more characteristics for each artifact. The following is an example of a DTrace characteristics model. In the example, the DTrace characteristics model includes the following attributes: DTraceProject, Network, Computers, CPUs, Processes, Threads, Callstacks, and FunctionCalls. The DTrace characteristics model defines the following relationships between the aforementioned artifacts: DTraceProject includes one or more Networks, each Network includes one or more Computer, each Computer includes one or more CPUs, each CPU runs (includes) one or more Processes, each Process includes one or more Threads, each Thread includes one or more CallStacks, and each CallStacks includes one or more FunctionCalls.","The following characteristics are used in the DTrace characteristics model: id (i.e., unique CPU id), probeTimestamp (i.e., the performance probe timestamp), memoryCapacity (i.e., the memory available to artifact), cpuNumber (i.e., the number of this CPU in the Computer), usagePercentIO (i.e., the total IO usage percent), usagePercentCPU (i.e., the total CPUusage percent), usagePercentMemory (i.e., the total memory usage percent), usagePercentNetwork (i.e., the total network bandwidth usage percent), usagePercentIOKernel (i.e., the kernel IO usage percent), UsagePercentCPUKernel (i.e., the kernel CPUusage percent), UsagePercentMemoryKernel (i.e., the kernel memory usage percent), and usagePercentNetworkKernel (i.e., the kernel network bandwidth usage percent).","The following is a DTrace characteristics model in accordance with one embodiment of the invention.",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"DTrace Characteristics Model"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u20031\u2003\u2002persistent class DTraceProject {"},{"entry":"\u20032\u2003\u2002Long id;"},{"entry":"\u20033\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u20034\u2003\u2002String name;"},{"entry":"\u20035\u2003\u2002owns Network theNetworks(0,n) inverse theDTraceProject(1,1);"},{"entry":"\u20036\u2003\u2002} \/\/ class DTraceProject"},{"entry":"\u20037"},{"entry":"\u20038\u2003\u2002persistent class Computer {"},{"entry":"\u20039\u2003\u2002Long id;"},{"entry":"\u200210\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200211\u2003\u2002String name;"},{"entry":"\u200212\u2003\u2002Long numberOfCPUs;"},{"entry":"\u200213\u2003\u2002Long memoryCapacity;"},{"entry":"\u200214\u2003\u2002Float usagePercentIO;"},{"entry":"\u200215\u2003\u2002Float usagePercentCPU;"},{"entry":"\u200216\u2003\u2002Float usagePercentMemory;"},{"entry":"\u200217\u2003\u2002Float usagePercentNetwork;"},{"entry":"\u200218\u2003\u2002Float usagePercentIOKernel;"},{"entry":"\u200219\u2003\u2002Float usagePercentCPUKernel;"},{"entry":"\u200220\u2003\u2002Float usagePercentMemoryKernel;"},{"entry":"\u200221\u2003\u2002Float usagePercentNetworkKernel;"},{"entry":"\u200222\u2003\u2002owns CPU theCPUs(0,n) inverse theComputer(1,1);"},{"entry":"\u200223\u2003\u2002} \/\/ class Computer"},{"entry":"\u200224"},{"entry":"\u200225\u2003\u2002persistent class CPU {"},{"entry":"\u200226\u2003\u2002Long id;"},{"entry":"\u200227\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200228\u2003\u2002Long cpuNumber;"},{"entry":"\u200229\u2003\u2002Long memoryCapacity;"},{"entry":"\u200230\u2003\u2002Float usagePercentIO;"},{"entry":"\u200231\u2003\u2002Float usagePercentCPU;"},{"entry":"\u200232\u2003\u2002Float usagePercentMemory;"},{"entry":"\u200233\u2003\u2002Float usagePercentNetwork;"},{"entry":"\u200234\u2003\u2002Float usagePercentIOKernel;"},{"entry":"\u200235\u2003\u2002Float usagePercentCPUKernel;"},{"entry":"\u200236\u2003\u2002Float usagePercentMemoryKernel;"},{"entry":"\u200237\u2003\u2002Float usagePercentNetworkKernel;"},{"entry":"\u200238\u2003\u2002owns Process theProcesss(0,n) inverse theCPU(1,1);"},{"entry":"\u200239\u2003\u2002} \/\/ class CPU"},{"entry":"\u200240"},{"entry":"\u200241\u2003\u2002persistent class Network {"},{"entry":"\u200242\u2003\u2002Long id;"},{"entry":"\u200243\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200244\u2003\u2002String name;"},{"entry":"\u200245\u2003\u2002Long totalCapacity;"},{"entry":"\u200246\u2003\u2002Float usagePercent;"},{"entry":"\u200247\u2003\u2002owns Computer theComputers(0,n) inverse theNetwork(1,1);"},{"entry":"\u200248\u2003\u2002} \/\/ class Network"},{"entry":"\u200249"},{"entry":"\u200250\u2003\u2002persistent class Process {"},{"entry":"\u200251\u2003\u2002Long id;"},{"entry":"\u200252\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200253\u2003\u2002String name;"},{"entry":"\u200254\u2003\u2002String commandLine;"},{"entry":"\u200255\u2003\u2002Integer priority;"},{"entry":"\u200256\u2003\u2002owns Thread theThreads(0,n) inverse theProcess(1,1);"},{"entry":"\u200257\u2003\u2002references Process theProcesss(0,n) inverse theProcess(1,1);"},{"entry":"\u200258\u2003\u2002} \/\/ class Process"},{"entry":"\u200259"},{"entry":"\u200260\u2003\u2002persistent class CallStack {"},{"entry":"\u200261\u2003\u2002Long id;"},{"entry":"\u200262\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200263\u2003\u2002Float usagePercentIO;"},{"entry":"\u200264\u2003\u2002Float usagePercentCPU;"},{"entry":"\u200265\u2003\u2002Float usagePercentMemory;"},{"entry":"\u200266\u2003\u2002Float usagePercentNetwork;"},{"entry":"\u200267\u2003\u2002Float usagePercentIOKernel;"},{"entry":"\u200268\u2003\u2002Float usagePercentCPUKernel;"},{"entry":"\u200269\u2003\u2002Float usagePercentMemoryKernel;"},{"entry":"\u200270\u2003\u2002Float usagePercentNetworkKernel;"},{"entry":"\u200271\u2003\u2002owns FunctionCall theFunctionCalls(0,n) inverse"},{"entry":"\u2003\u2003\u2003theCallStack(1,1);"},{"entry":"\u200272\u2003\u2002} \/\/ class CallStack"},{"entry":"\u200273"},{"entry":"\u200274\u2003\u2002persistent class Thread {"},{"entry":"\u200275\u2003\u2002Long id;"},{"entry":"\u200276\u2003\u2002String name;"},{"entry":"\u200277\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200278\u2003\u2002Long priority;"},{"entry":"\u200279\u2003\u2002Float usagePercentIO;"},{"entry":"\u200280\u2003\u2002Float usagePercentCPU;"},{"entry":"\u200281\u2003\u2002Float usagePercentMemory;"},{"entry":"\u200282\u2003\u2002Float usagePercentNetwork;"},{"entry":"\u200283\u2003\u2002Float usagePercentIOKernel;"},{"entry":"\u200284\u2003\u2002Float usagePercentCPUKernel;"},{"entry":"\u200285\u2003\u2002Float usagePercentMemoryKernel;"},{"entry":"\u200286\u2003\u2002Float usagePercentNetworkKernel;"},{"entry":"\u200287\u2003\u2002owns CallStack theCallStacks(0,n) inverse theThread(1,1);"},{"entry":"\u200288\u2003\u2002} \/\/ class Thread"},{"entry":"\u200289"},{"entry":"\u200290\u2003\u2002persistent class FunctionCall {"},{"entry":"\u200291\u2003\u2002Long id;"},{"entry":"\u200292\u2003\u2002String name;"},{"entry":"\u200293\u2003\u2002Timestamp probeTimestamp;"},{"entry":"\u200294\u2003\u2002Float usagePercentIO;"},{"entry":"\u200295\u2003\u2002Float usagePercentCPU;"},{"entry":"\u200296\u2003\u2002Float usagePercentMemory;"},{"entry":"\u200297\u2003\u2002Float usagePercentNetwork;"},{"entry":"\u200298\u2003\u2002Float usagePercentIOKernel;"},{"entry":"\u200299\u2003\u2002Float usagePercentCPUKernel;"},{"entry":"100\u2003\u2002Float usagePercentMemoryKernel;"},{"entry":"101\u2003\u2002Float usagePercentNetworkKernel;"},{"entry":"102\u2003\u2002references FunctionCall theFunctionCalls(0,n) inverse"},{"entry":"\u2003\u2003\u2003theFunctionCall(1,1);"},{"entry":"103\u2003\u2002} \/\/ class FunctionCall"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the above DTrace Characteristics Model, the DTraceProject artifact is defined in lines -, the Network artifact defined in lines -, the Computer artifact is defined in lines -, the CPU artifact is defined in lines -, the Processes artifact is defined in lines -, the Thread artifact is defined in lines -, the Callstacks artifact is defined in -, and the FunctionCall artifacts is defined in lines -.","A graphical representation of the aforementioned DTrace characteristics model is shown in . Specifically, the graphical representation of the DTrace characteristics model shows each of the aforementioned artifacts, characteristics associated with each of the aforementioned artifacts, and the relationships (including cardinality) among the artifacts. In particular, box () corresponds to the DTraceProject artifact, box () corresponds to the Network artifact, box () corresponds to the Computer artifact, box () corresponds to the CPU artifact, box () corresponds to the Process artifact, box () corresponds to the Thread artifact, box () corresponds to the CallBack artifact, and box () corresponds to the FunctionCall artifact.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 5","b":"100"},"Continuing with the discussion of , a schema for the characteristics store is subsequently created and associated with characteristics model (ST). One or more characteristics extractors associated with characteristics model are subsequently created (ST). Finally, a characteristics store API is created (ST). In one embodiment of the invention, creating the characteristics store API includes creating a mapping between characteristics obtained by the characteristics extractors and tables defined by the schema configured to store the characteristics in the characteristics store.","Those skilled in the art will appreciate that ST-ST may be repeated for each characteristics model. In addition, those skilled in the art will appreciate that once a characteristics store API is created, the characteristics store API may only need to be modified to support additional schemas in the characteristics data store and additional characteristics extractors. Alternatively, each characteristics model may be associated with a different characteristics store API. Those skilled in the art will appreciate that a determination may be made during the setup of the system as to the tracking mechanism to use. Once the tracking mechanism is selected, the appropriate modifications are made to the system. These changes may include modifications to the characteristics store API(s) to store the extracted characteristics in the appropriate sub-characteristics store, modifications to the characteristics extractors to extract additional information from the target system (e.g., time-related attribute information or information used to determine the particular sub-characteristics store a particular characteristic is to be stored), changes to the schema (as well as the underlying implementation in the characteristics store) to support the storage of time-related attributes and\/or sub-characteristics stores.","At this stage, the system is ready to analyze a target system.  shows a flowchart in accordance with one embodiment of the invention. Initially, characteristics are obtained from the target system using one or more characteristics extractors (ST). In one embodiment of the invention, the characteristics extractors associated with a given characteristics model only obtain information about characteristics associated with the artifacts defined in the characteristics model.","Continuing with the discussion of , the characteristics obtained from the target system using the characteristics extractors are stored in the characteristics store using the characteristics store API and a tracking mechanism (ST). Depending on the tracking mechanism, the characteristics extracted from the target system may be stored in the appropriate sub-characteristics store and\/or with a time-related attribute. Those skilled in the art will appreciate that the characteristics extractors will include functionality to obtain the necessary information (e.g., time, timestamp, version, etc.) as required by the tracking mechanism.","Continuing with the discussion of , once the characteristics are stored in the characteristics store, the target system may be analyzed using the characteristics model (or models), a query engine, and the characteristics stored in the characteristics store (ST). In one embodiment of the invention, the user uses the query engine to issue queries to characteristics store. As discussed above, the query engine may include information (or have access to information) about the characteristics models currently being used to analyze the target system. In addition, the query may use the tracking information associated with the tracking mechanisms to track changes in the target system. The results of the analysis are subsequently displayed using a visualization engine (ST).","Those skilled in the art will appreciate that ST-ST may be performed concurrently with ST-ST. In addition, steps in , may be performed concurrently with the steps in .","As discussed above, the query engine may issue queries that use the tracking information to analyze changes within the target system. More specifically, the query engine may issue queries that use the time-related attributes or the sub-characteristics stores to track the changes within the target system. The following are two examples of queries that use the time-related attribute to track changes within the target system:",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT c.name FROM JClass c WHERE c.system.time_stamp >"]},{"entry":[{},"\u20182005-04-01 10:00\u2019"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The above query is used to determine all Java\u2122 classes added to the system since 2005-04-01 10:00.",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"SELECT c.name FROM JClass c WHERE c.system.version > \u20185.1\u2019"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"The above query is used to determine all Java\u2122 classes added to the system since version 5.1.","The following is an example of a query that uses the sub-characteristics stores to track changes within the target system:",{"@attributes":{"id":"p-0064","num":"0063"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SELECT c.name FROM classes branch1.c"]},{"entry":[{},"WHERE (c instanceof \u201cjavax.servlet.http.HttpServlet\u201d"]},{"entry":[{},"\u2003\u2002OR c instanceof \u201cjavax.servlet.http.GenericServlet\u201d)"]},{"entry":[{},"\u2003AND branch1.c NOT IN"]},{"entry":[{},"\u2003\u2002(SELECT c.name FROM classes branch2.c"]},{"entry":[{},"\u2003\u2002\u2009WHERE c instanceof \u201cjavax.servlet.http.HttpServlet\u201d"]},{"entry":[{},"\u2003\u2003\u2002OR c instanceof \u201cjavax.servlet.http.GenericServlet\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"The above query is used to determine all servlets that are in sub-characteristics store  (denoted as branch in the query) and not in sub-characteristics store  (denoted as branch in the query). Thus, the above query may be used to determine which servlets were added to the target system between the time sub-characteristics store  was populated and the time the sub-characteristics store  was populated.","An embodiment of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example, as shown in , a networked computer system () includes a processor (), associated memory (), a storage device (), and numerous other elements and functionalities typical of today's computers (not shown). The networked computer () may also include input means, such as a keyboard () and a mouse (), and output means, such as a monitor (). The networked computer system () is connected to a local area network (LAN) or a wide area network via a network interface connection (not shown). Those skilled in the art will appreciate that these input and output means may take other forms. Further, those skilled in the art will appreciate that one or more elements of the aforementioned computer () may be located at a remote location and connected to the other elements over a network. Further, software instructions to perform embodiments of the invention may be stored on a tangible computer readable medium such as a compact disc (CD), a diskette, a tape, or any other tangible computer readable storage device.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this discloser, will appreciated that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. According, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5 and 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
