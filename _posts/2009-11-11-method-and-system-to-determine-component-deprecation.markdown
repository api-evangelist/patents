---
title: Method and system to determine component deprecation
abstract: A method and system of marking the deprecation status of components, such as services, processes, operations, and data types that may be used in a computing application, and displaying this status to developers within the computing application is provided. Components may be marked as deprecated, or they may include information reflecting a sunset policy, which consists of either a specific date or an upcoming version number of the application or programming language the computing application supports. The sunset policy determines when a component has reached its end of life and is either no longer supported or will be removed from the underlying product. Using this deprecation status information, the computing application may be configured to dynamically notify developers of when components will be deprecated. The computing application may further be configured to provide automated migration support by recommending alternative components and assisting in their configurations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436444&OS=09436444&RS=09436444
owner: ADOBE SYSTEMS INCORPORATED
number: 09436444
owner_city: San Jose
owner_country: US
publication_date: 20091111
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to the technical field of interactive software development environments and, in one example embodiment, to a method and system to determine component deprecation in a computer application.","The approaches described in this section could be pursued, but are not necessarily approaches that have been previously conceived or pursued. Therefore, unless otherwise indicated herein, the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.","Today's enterprise-level programming environments offer access to thousands of libraries, classes, and services that are regularly updated, replaced, and deprecated. In computer software standards and documentation, the term deprecated is applied to software features that are superseded and should be avoided. Currently, these environments contain limited means to notify developers that they are using deprecated services, which makes the transition to a new version of an application programming interface (API) error prone and difficult. It is also unclear to users how long a deprecated service will remain supported and whether it can safely be used.","In the Java\u2122 programming language, identifying deprecated classes requires a developer to read the Javadoc\u2122 documentation. The maintainer of the class library must also manually update the documentation in order to communicate to the developers whenever a class is deprecated. The developer of a computing application must then perform any required changes manually if functionality being used in the application may no longer be available or compatible. This manual method also does not identify any information about when a class may be deprecated in the future or when a deprecated class will be removed altogether. Unless a developer learns from an outside source that a class is being deprecated, he or she may not learn of the deprecation until the day it happens in a version update.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of the claimed subject matter. However, it will be understood by those skilled in the art that the claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the detailed description which follow are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","A method and system of marking the deprecation status of components, such as services, processes, operations, and data types that may be used in a computer application, and displaying this status to developers within a computing application, such as an integrated development environment (IDE), is described. Components may be marked as deprecated, or they may include information reflecting a sunset policy, which consists of either a specific date or an upcoming version number of the application or programming language the computing application supports. The sunset policy determines when a component has reached its end of life and is either no longer supported or will be removed from the underlying product.","Using this deprecation status information, the computing application is able to dynamically notify developers if and when components will be deprecated within a computing application. This functionality allows deprecation data for components to be much more discoverable than searching through documentation, which makes updating and maintaining software easier for developers. The computing application can further provide automated software migration support by recommending alternative components and assisting in their configurations, for example, in order to ease transition between new product versions. Previous methods of showing deprecation only inform developers that they should no longer use a class or component and that it may be removed in the future.","An example computing application within which component deprecation may be determined is Adobe\u00ae LiveCycle\u00ae offered by Adobe Systems Incorporated (\u201cLiveCycle\u00ae\u201d). It will be noted that while embodiments of the deprecation system are described with reference to LiveCycle\u00ae, a deprecation manager may be utilized advantageously to manage deprecation information within any IDE or computing application with similar functionality. As one example implementation of determining component deprecation, the deprecation manager receives deprecation data, configures the component with the deprecation data, and stores the component in a format suitable for generating a visual representation of the component utilizing the deprecation data.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","110","112","112","110","112","110","112","114","116"]},"The client machine , in an example embodiment, is connected to a server machine  via a network . The network  may be a public network (e.g., the Internet, a wireless network, a public switched telephone network (PSTN), etc.) or a private network (e.g., a local area network, a wide area network, an intranet, etc.). The server machine  includes management applications  that interact with the computing application  and the deprecation manager . For example, the management applications  may keep the deprecation information stored locally on the client machine  up to date if there are changes made by the server machine  or another master system on the network . In an example embodiment, the server machine  also connects to a component repository  that holds a master set of components that may be accessed by the computing application  on the client machine . Although  illustrates the client machine  as part of a networked environment , other example embodiments include the ability for the client machine  to operate in a stand-alone environment without a network connection. In these cases, the computing application  only has access to locally stored components and deprecation information.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 2","FIG. 2","FIG. 1","FIG. 1"],"b":["114","112","114","202","114","204","206","116","106","206","114","208","210"]},"To manage replacement components, the deprecation manager  includes a replacement component identification module  to identify a replacement component associated with the deprecation data and a replacement component interface module  to receive replacement configuration data associated with the replacement component from a user. The deprecation manager  also includes a replacement component configuration module  to configure the replacement component with the replacement configuration data and a process template module  to update a process template by replacing the component with the replacement component.","Various operations performed by the deprecation manager , according to an example embodiment, are discussed with reference to .",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 3","FIG. 2"],"b":["300","300"]},"As shown in , the method  to determine component deprecation commences with operation , where the deprecation manager  receives deprecation data. This deprecation data, in one example embodiment, is entered by a user through a user interface, either within the computing application  or through a separate tool. The deprecation data may also be received from the server machine  across the network , or may be loaded from a file on the client machine  updated through other means, such as an extensible markup language (XML) editor. At operation , the component configuration module  configures the component with the received deprecation data by modifying its attributes. In one example embodiment, these attributes are stored in a component XML file (shown in more detail in ). At operation , the storage module  stores the configured component in the component database  or, in another example embodiment, transmits the component to the server machine  to be stored in the component repository . Various operations performed by modules illustrated in  in order to display deprecated components may be discussed with reference to .","As shown in , a method  to display deprecated components and optionally replace the deprecated components with replacement components commences at operation , where the selection interface module  of the deprecation manager  receives a selection request from a developer associated with a deprecated component (which may be done through the user interfaces shown in ). At operation , the display module  displays a visual representation of the deprecated component (shown in more detail in ). This visual representation may contain a warning to the developer of a sunset policy, which indicates that the chosen component is deprecated and may not be available at a later date. Depending on the time until the component is removed from the computing application  entirely, known as the sunset date, this warning may change in severity. For example, if a chosen application programming interface (API) is expected to be removed in a certain version (e.g., version 11.1) of the computing application , the display module  may provide an explicit warning to the developer in a preceding version (e.g., version 10.0). In version 11.0, the display module  may switch the warning to an error informing the developer to remove the deprecated component entirely. The sunset policy may be based on an application version number, date, or other indication. Dates and version numbers for the sunset policy may be chosen by the author or maintainer of the application, then the deprecation manager  may create the sunset policy and associate it with the component.","If the developer chooses to replace the deprecated component at decision , the replacement component identification module  identifies a replacement component at operation . In an example embodiment, replacement components are listed as an attribute in the component XML. Generally, a replacement component will provide at least the same functionality as the component it is replacing, plus additional features. However, the replacement component may require additional configuration in order to utilize the additional features or to be compatible with the base functionality. For example, deprecated component A may have two string data types and an integer, but the component which replaces it, component B, may require two strings and two integers. Therefore, in order to replace component A with component B, component B needs an additional value for its extra integer data type.","The replacement component interface module  receives configuration data for the replacement component (if necessary from the user, or it may be automatically filled in an example embodiment) at operation . This replacement configuration data, in one example embodiment, is solicited from the developer by the computing application . The replacement component interface module  may display an interface that fills in known attributes and allows the developer to input values for the new attributes. In some instances, the replacement component configuration module  may be able to fill in default values or determine correct values for the replacement component attributes without prompting the developer. At operation , the replacement component configuration module  configures the replacement component with the replacement configuration data, and at operation , the process template module  updates a process template by replacing the deprecated component with the replacement component. The user interface is then updated to reflect the change. The method  terminates at end point .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 5","b":["500","500","500"]},"The process canvas  example shown in  includes a programmatic start point  which marks the beginning of execution on the canvas. The start new process arrow  indicates the starting point of a process, which has \u201cactivity \u201d block  as its first activity. Using the above example, activity  may control the form the employee fills out, such as presenting the correct form to the employee and receiving it after the employee has completed filling it out. After activity  is complete, the process assigns a task at block , which is marked as deprecated to flag to the developer that the chosen task to be assigned is deprecated. This warning informs the developer than he or she may want to choose a replacement activity. The assign task  block  and activity  block  are also programmed to be performed after activity  is complete. Assign task , for example, may involve the employee's manager reviewing the form, and activity  may be filing the form in a database or performing other indexing functions.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 6","FIG. 5"],"b":["600","600","602","0","1","604","606","608","610","612","614"]},{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":"700"},"The component XML file here defines a first service named \u201cDeprecatedService\u201d. The deprecation manager  that processes the component XML file may read that the deprecated status is set to true, and therefore \u201cDeprecatedService\u201d is deprecated in the current version of the computing application . The \u201creplaced-by\u201d attribute indicates the name of a replacement service that may be suggested to a developer as an alternative to the deprecated service. In this example, the replacement service is simply named \u201creplacement service.\u201d The component XML also defines the sunset clause with the \u201csunsetting-on\u201d attribute, which indicates a date, software version number, or other indication of when the service will no longer be included in the computing application . In this component XML file, \u201cDeprecatedService\u201d will sunset in version 10.1 of the computing application . Furthermore, the \u201cdeprecated-since\u201d attribute includes an indication of when the service was first deprecated, in this case version 9.1.","The component XML file shown in  further defines a deprecated operation and an undeprecated service with an undeprecated operation. Additionally, in an example embodiment, these attributes cascade. If a service is deprecated, all operations under the service are automatically marked as deprecated as well.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 8","b":"800"},"The example computer system  includes a microprocessor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)). The computer system  also includes an alphanumeric input device  (e.g., a keyboard), a user interface (UI) cursor control device  (e.g., a mouse), a disk drive unit , a signal generation device  (e.g., a speaker) and a network interface device .","The disk drive unit  includes a computer-readable (or machine-readable) medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the microprocessor  during execution thereof by the computer system , the main memory  and the microprocessor  also constituting machine-readable media.","The software  may further be transmitted or received over a network  via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., Hyper Text Transfer Protocol (HTTP)).","While the machine-readable medium  is shown in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the claimed subject matter, or that is capable of storing or encoding data structures utilized by or associated with such a set of instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical and magnetic media. Such medium may also include, without limitation, hard disks, floppy disks, flash memory cards, digital video disks, random access memory (RAM), read only memory (ROM), and the like.","Thus, a method and system to determine component deprecation been described. The method and system are proposed to store a visual representation of components of a computing application. While some example approaches described herein may be used with a suite of Adobe\u00ae products, the techniques described herein may be utilized beneficially with various programs for determining the deprecation status of components within a product or a suite of products.","The embodiments described herein may be implemented in an operating environment comprising software installed on a computer, in hardware, or in a combination of software and hardware. Although embodiments have been described with reference to specific example embodiments, it is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["Embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8"}]},"DETDESC":[{},{}]}
