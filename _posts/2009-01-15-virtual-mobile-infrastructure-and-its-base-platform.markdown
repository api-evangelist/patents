---
title: Virtual mobile infrastructure and its base platform
abstract: A virtual mobile infrastructure (VMI) includes a base platform that has a plurality of hosts. On a host operation system (OS), a quick emulator (QEMU) process is used to virtualize at least one guest cell phone operating system. A data center manages these cell phone OSes generated by this base platform, allocates the OSes to users, and allows communication between cell phone client and server via mobile terminal protocol. A virtual machine (VM) switch contains a method to use the VMI, and to acquire adapted cell phone screen and inexpensive cell phone VM. A VMI product is able to encapsulate the third-party virtual desktop infrastructure (VDI) products (such as Citrix XenDesktop, LeoStream, etc.), henceforth to acquire screens from PC VM as well. Moreover, a VM manager allows administrators of enterprises to manage thousands of VMs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081601&OS=09081601&RS=09081601
owner: TRANSOFT (SHANGHAI) INC.
number: 09081601
owner_city: Shanghai
owner_country: CN
publication_date: 20090115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","Architecture"],"p":["This application claims priority to Chinese Application No. 200810204286.X, filed on Dec. 10, 2008, the entire contents of which is incorporated herein by reference.","The invention involves a virtual mobile infrastructure. The infrastructure involves how the cell phone user obtains a (PC and cell) virtual mobile (VM) in the data center and the screen of applications running on the VM, specifically how cell phone VM is generated via the QEMU of the data-center server, and how the VM pool is used to manage large amount of VMs.","With the advance of computer and internet technology, there appears a trend for the virtualization of personal computer (PC) OS. The PC OS no longer runs on the local real machine, instead is centrally managed in a remote data center where large amount of OSes are virtualized. Meanwhile, the desktop of the OS is delivered to the terminals via network. As an applied area of PC OS virtualization, this is called Virtual Desktop Infrastructure, or briefly VDI.","The VDI management software controls a large number of PC VMs in pooling in the data center, while a connection broker sends out RDP screen to desktop thin clients. The technology from VMWare ESXi, Citrix Xen, and Microsoft Hyper-V serves as the VDI foundation.","On the other hand, today's high-end Smartphone is starting to become similar to a personal computer. For example, a mobile handheld device such as the Blackberry or iPhone in today's market can go online, check e-mail, play music, stream videos, take pictures, navigate driving, or simply make a phone call. The demand of cell phone capabilities keeps on increasing. This leads to a high cost of cell phone manufacturing. Therefore, recently the concept of virtual mobile is proposed, namely the virtualization of large number of cell phone OSes with the resources and fix net of the data center, and the delivery of screen to cell phone terminal.","Compared to the traditional cell phone technology, virtual mobile has the advantages (1) a quick expansion of IT automation to anyone who carries a cell phone, with lots of old PC applications and new mobile applications executed on the VMs in the data center and screen-transmitted to cell phones. (2) Enabling virtualization will also allow the mobile devices to be more secure against virus attacks or lose of the physical device. (3) The screen of Mobile VM is much more adapted to the cell phone as a client, plus it requires much less transfer data, hence lower wireless bandwidth. (4) The cell phone client is able to take advantage of huge inexpensive resources of CPU, memory, disk, and fix net in the data center.","Under this virtual mobile background, a viable, highly effective Virtual Mobile Infrastructure (VMI) becomes an urgently-needed solution to the domain problem.","The purpose of this invention is to provide a virtual mobile infrastructure. Specifically, it involves the infrastructure for the enterprises or mobile service providers to deliver PC and\/or cell phone screen to the cell phone.","With the features of a VM switch, a method utilizes this invention's VMI to obtain an adapted cell phone screen and an inexpensive VM. In one embodiment, the system can encapsulate the third-party VDI products (e.g. Citrix XenDesktop, LeoStream, etc.), henceforth to obtain the screen of a PC VM. Additionally, through the VM management method, the administrators of the enterprises or mobile service providers are able to manage thousands of VMs.","To fulfill the above goal, this invention uses a virtual mobile infrastructure, including:","a base platform, including several hosts, each running a QEMU process to virtualize at least one guest operating system and its memory as a cell phone VM;","a data management center, to manage the cell phone VMs generated by the said base platform and to allocate the said cell phone VM to the user;","a VM switch, to connect the said base platform and the said data management center. The said VM switch allows the user select cell phone OS and cell phone application that runs on the cell phone VM, according to the user requests from cell phone client; and","a server, based on the mobile terminal protocol, to interact with the cell phone client.","In one embodiment of this invention, the base platform further includes: a method for the QEMU process and kernel of the guest operating system to share host memory.","In one embodiment of this invention, the base platform further includes: a performance agent to acquire the performance statistics of the host and\/or its child processes.","In one embodiment of this invention, the base platform further includes: a method to improve QEMU's soft MMU, where the system uses a page lookup to find the physical address of the virtual address of the guest OS memory region, and further takes this physical address as an offset to mask out the address in an assembly instruction.","In one embodiment of this invention, the base platform further includes: A preprocessor to debug virtualized I\/O device drivers, based on the openness of the source code of guest OS and its platform building tool. For complete openness, a re-build of source code can run directly on x86 platform; if the platform building tool is acquired, then I\/O driver can be debugged with the tool; otherwise, the development hardware board and BSP must be used to help the reverse engineering work.","In one embodiment of this invention, the said MTP-based server runs on top of the host operating system of the said base platform.","In one embodiment of this invention, the said MTP-based server further includes:","A method to adapt the screen proportionally to the cell phone screen size by shrinking, expanding, rotating, and compressing the screen image before it is sent to the client;","A method to detect image change, recognize text, and deliver text and changed square region only, before the image is sent to the client.","In one embodiment of this invention, the said cell phone client includes: A method to deliver GPS longitude and latitude data through data channel to the said MTP server, support echo canceling, and negotiate the optimal method from multiple audio codecs, based on the wireless bandwidth and cell phone hardware capability.","In one embodiment of this invention, the said data management center further includes:","A VM allocator, to build session, acquire optimal VM from a VM pool, and allocate VM to cell phone clients;","A VM pool manager, to select optimal VM in the pool, return VM to the pool, check VM state, and use a background worker to continuously check pool status in order to match the rules from a rule engine;","A VM server manager, to manage multiple hosts and use platform API to interact with the said base platform; and","A management console, to unify the management of the composition of the following resources: human organization, template, virtual machine, application, package, and platform server.","In one embodiment of this invention, the said rule engine includes the control rules of VM generation, destroy, start and stop. The said rules can be created, edited, loaded, saved, and deleted by administrators with high-level computer language.","In one embodiment of this invention, the said VM switch includes: connection broker, to provide access for cell phone client, and deliver OS screen and application screen to the client.","In one embodiment of this invention, the client access through the said connection broker, further includes: unified authentication and authorization to complete the Kerberos security protocol and single sign-on (SSO).","In one embodiment of this invention, the said VM switch includes: personnel and organization databases, application and package databases, as well as VM server and template management databases.","In one embodiment of this invention, it further includes a method to manage template. The template is used to bind one or more of the following configuration items: VM, memory, CPU, application, host, and cell phone OS.","In one embodiment of this invention, it further includes a VDI socket, where the said VM switch can encapsulate a third-party VDI product via VDI socket, so that a user is able to select PC VM and PC application running on an external VDI product.","In one embodiment of this invention, the said VDI socket further includes:","A PC connection broker, to inform external VDI product that after user login, which application will be run on the selected VM, and to inform cell phone client to get ready to receive application screen via MTP after PC application agent activates the said application.","A PC application agent, installed on the VM of external VDI product beforehand. When the VM starts, the application agent itself is activated, and then activates the requested PC application. The application agent then informs PC connection broker the failure or success of the activation. If successful, the application screen is delivered to the cell phone client. When cell phone client disconnects, PC application agent shuts down the application.","On the other hand, this invention proposes a virtual mobile base platform, including:","Several hosts, each including:","At least one QEMU emulator running on the host OS, to virtualize at least one guest operating system;","A method that allows the QEMU process and kernel of the guest OS share host memory;","A performance agent that acquires performance statistics of child process and\/or host;","An MTP-based server, to interact with cell phone client.","In one embodiment of this invention, the aforementioned virtual mobile base platform further includes:","A method to improve QEMU soft MMU, where the system uses a page lookup to find the physical address of the virtual address of the guest OS memory region, and further takes this physical address as an offset to mask out the address in an assembly instruction.","In one embodiment of this invention, the said virtual mobile base platform further includes:","A preprocessor to debug virtualized I\/O device drivers, based on the openness of the source code of guest OS and its platform building tool. For complete openness, a re-build of source code can run directly on x86 platform; if the platform building tool is acquired, then I\/O driver can be debugged with the tool; otherwise, the development hardware board and BSP must be used to facilitate the reverse engineering work.","This invention provides a method to subscribe application on a mobile network for enterprises and mobile service providers. This method is based on the cell phone OS virtualization, to build a MTP client, so that user is able to access, acquire VM, run application, obtain cell application screen, and henceforth run any cell operating system and cell application. Additionally, because it can encapsulate the third-party VDI products, it can also run any PC operating system and PC application.","In this invention, a user uses Smartphone instead of dumb terminal, thereby obtain screen via remote desktop protocol (RDP) or RDP-compatible mobile terminal (MTP). The screen can come from not only (a) PC VM (the backend is the same as VDI, but with cell screen adaptor); but also (b) cell VM in the data center.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":"FIG. 1A","b":["12","13","14","15","14"]},"In , cell phone as a client  uses VM switch  to obtain cell phone screen from Transoft data management center . Data management center  interacts with QVisor platform  where QVisor host  supplies multiple cell phone VMs. In one embodiment, cell phone client  may also obtain PC VM screen from third-party VDI products .","The purpose of VM switch  is to deliver application screen from VDI PC VM and VMI cell VM platforms to cell phone client . A typical VMI configuration is like this: VM switch is installed at a geographical node, simultaneously controls multiple aforementioned data management center  and multiple VDI products . Here, VM switch  may allow user to select an application running on VMI (cell VM) or third-party VDI (PC VM) backend systems.","In one embodiment, VDI system may also combine with applicant's patent \u201cA generalized application virtualization method for business use on the web, and the mini server using this method\u201d (US patent publish No. US 2008\/0183641A1 and China patent publish No. CN101231731A). The applicant's product TRANSOD's client and server may also run in the data management center, to facilitate automatic application deployment.","VM switch  has a connection broker  managing connections from VDI products or VMI data management center. Connection broker  consists of PC connection broker  and cell connection broker . The VM switch  also manages the database of personnel and organization , database of application and package , and database of VM server and templates . The operations of these databases are not detailed here. VM switch  decides if the user has the privilege to obtain the screen of the subscribed application. VM switch  also decides if the application is from the third-party VDI backend, or from the data management center QVisor backend, thus to take proper action to adapt the screen for the cell phone client.","VDI third-party product  employs PC application agent  and PC connection broker  to become part of the VMI architecture.  and  thus forms the so-called \u201cVDI socket\u201d.","Data management center  is the management system of cell phone VM, including VM allocator , management console , pool manager , VM performance monitor , VM management server , and QVisor APIs . The data management center contains the current states of all VMs. It is able to acquire and allocate VMs from QVisor via the VM pool manager. The acquisition of a VM needs access to QVisor API via VM server manager. QVisor API includes: create and destroy VM, start and stop VM, get VM, list VM, list running VM, list off VM, and get VM performance.","QVisor platform  is the base technology of VMI. The platform contains multiple QVisor hosts . Each QVisor host runs host operating system . On top of the host OS, there are MTP server , performance agent  and multiple QEMU child processes . A cell phone operating system  runs on top of QEMU. The cell phone operating system can be Win Mobile, gPhone, iPhone, etc. As the cell phone OS boots, the cell application agent  automatically starts. QVisor platform  has a layering architecture as shown in . QVisor platform executes performance monitoring, shared QEMU and kernel, memory paging optimization, and I\/O device debugging preprocessor.","To realize VMI, it is necessary to have MTP client  talks with MTP server  via the MTP protocol. MTP client  is the software downloaded to the cell phone. MTP server  runs on top of Linux of the QVisor host . MTP protocol is detailed as follows:","Mobile Terminal Protocol (MTP) client is installed on the cell phone (no need to install if Win Mobile cell phone already comes with RDP (remote desktop protocol) 6.0 client, or iPhone already comes with Safari browser). On the client, the subscribed application list in the package appears. If the user clicks one of the applications in the package, the VM switch  contains user id information for authentication. Afterwards, the data management center  acquires a VM frp, QVisor platform  via QVisor API . At this junction the application agent  activates the application. The MPT server then delivers the first application screen to the user's cell phone.","VM Switch",{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 2","b":"12"},"Step , user enters VM Switch with user login request (user id and password) and subscribed application;","Step , see if user subscribes any app. If yes, enter Step . Otherwise, enter Step  first then Step ;","Step , launch default mobile application on default cell phone VM. Practically allow user to obtain the OS desktop of mobile VM;","Step , decide if the subscription is a PC application. If yes, enter Step . Otherwise, enter Step ;","Step , enter PC connection broker . Find best-fit PC VM and start it. PC connection broker is further illustrated in ;","Step , inform PC agent  to launch PC application. PC application agent is further illustrated in . In one embodiment, if a third-party VDI product is encapsulated, this application may be streamed (activated) to PC VM by applicant's patent CN10123173A \u201cA generalized application virtualization method for business use on the web, and the mini server using this method\u201d;","Step , enter mobile connection broker : find best-fit mobile VM and start it. Inform cell application agent  to launch mobile application on VM; the flowchart of mobile connection broker is further illustrated in ;","Step , MTP server  sends the 1st application screen to client.",{"@attributes":{"id":"p-0103","num":"0102"},"figref":["FIG. 2","FIG. 3","FIG. 4","FIG. 3","FIG. 3","FIG. 4","FIG. 5"],"b":"202"},"Data Management Center",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 3","b":["142","142"]},"Step , administrator enters management console . The console provides an interactive interface for administrator operations;","Step , see if the operation is to manage personnel\/organization. If yes, enter Step . Otherwise, enter Step ;","Step , proceed with Light-weighted Directory Protocol (LDAP), where the personnel and organization database  of the VM switch  is accessed;","Step , see if the operation is to manage application\/package. If yes, enter Step . Otherwise, enter Step ;","Step , access application and package database  of VM switch ;","Step , see if the operation is to manage VM. If yes, enter Step . Otherwise, enter Step ;","Step , enter VM Server manager. For details see . The summarized process is to enter Step , QVisor API , then enter Step  to execute host OS commands in QVisor host ;","Step , the various functions coming from the VM server manager of Step  will use QVisor API  via web services to create, start, stop, delete . . . VM;","Step , in QVisor host , execute the creation or destroy of the child process of QEMU  and the guest OS  on the QEMU;","Step , see if the operation is to manage QVisor host. If yes, enter Step . Otherwise, enter Step ;","Step , access QVisor host database;","Step , proceed to manage template. For details see  next and its related description.","Template Management",{"@attributes":{"id":"p-0119","num":"0118"},"figref":"FIG. 4"},"Step , administrator enters template management;","Step , see if the operation is to create template. If yes, enter Step . Otherwise, enter Step ;","Step , from the console interface, obtain template name, image ID (related to the path of image storage location), template type (i.e. different cell OS), memory, CPU, application, and the host designated by the user to store the template information as a template record in the template database table;","Step , see if the operation is template search. If yes, enter Step . Otherwise, enter Step ;","Step , see if search by name or type. If by name, enter Step . Otherwise, enter Step ;","Step , use name to filter template database table;","Step , user type to search template database table;","Step , decide if the operation is to change memory or CPU. If yes, enter Step . Otherwise, enter Step ;","Step , enter VM server management. For details see  and its related description. The summarized process is to enter Step , QVisor API , then enter Step  to change memory and CPU in the QVisor host ;","Step , the memory-and-CPU-changing functions coming from the VM server manager of Step  will use QVisor API  via web services to change memory and CPU;","Step , change the configuration of guest OS memory size and number in the QVisor host ;","Step , report illegal operation.","Connection Broker",{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 5","b":"1211"},"Step , user login request sent to server with username\/password\/application;","Step , see if the user passes UAAS authentication and authorization. For details see . If yes, enter Step . Otherwise, enter Step ;","Step , tell cell phone client to display error message;","Step , call VM allocator  to get a VM. For details see ;","Step , find the application ID from the application list;","Step , connect to the application: (a) tell Application agent  on the VM the subscribed application ID, (b) wait until the application is launched or failed, (c) inform MTP client  to receive the first screen or report error.",{"@attributes":{"id":"p-0140","num":"0139"},"figref":"FIG. 6"},"Step , a user sends a request to the Data Center Server asking for a VM;","Step , the Telco Server finds that the user has no available ticket. It then send a request to the UAAS Server to ask the URL of the Proxy Server of the user's company;","Step , the UAAS Server replies with the URL (Uniform Resource Locator) of the Proxy Server of the user's company;","Step , the Telco Server asks the user to redirect the UAAS Proxy Server to the URL of his company's Proxy Server;","Step , the user submits the credential of his authorization;","Step , the UAAS proxy server handles the authorization of the company for the user;","Step , the Company DC returns the TGT of the user. DC is the brief for LDAP's Domain component;","Step , the UAAS proxy server sends the ID and the TGT of the user to the UAAS Server to complete the authorization;","Step , the UAAS Server returns the Proxy Server PGT;","Step , the UAAS proxy server returns the TGT and the PGT of the user;","Step , the user submits the PGT to the Telco Server;","Step , Telco Server returns the RDP URL of the VM;","Step , the user submits the TGT and logs-on to the VM.","VM Management and Allocation",{"@attributes":{"id":"p-0155","num":"0154"},"figref":"FIG. 7","b":["141","143"]},"Step , connection broker  sends the authenticated user to VM allocator ;","Step , VM allocator  builds session for the user;","Step , see if static or dynamic VM. If static VM, enter Step . Otherwise, enter Step ;","Step , get assigned static VM info for the user;","Step , find best-fit VM from pool manager. For details see ;","Step , allocate the VM to user (Start of this VM automatically starts an application agent on VM, as shown in ).",{"@attributes":{"id":"p-0162","num":"0161"},"figref":"FIG. 8"},"Step , see if the VM pool manager is in Initialization time. If yes, enter Step . Otherwise, enter Step ;","Step , spawn a background thread to continuously check and control the pool size;","Step , acquire load balancing or energy saving policy from policy manager. For details see ;","Step , see if pool policy matched. If yes, enter Step . Otherwise enter Step ;","Step , create, start, stop or remove VM (for details see ) to match policy;","Step , see if the service of VM pool manager is to get VM. If yes, enter Step . Otherwise, enter Step ;","Step , host counter is set to 0;","Step , template counter is set to 0;","Step , see if the next host is out of range. If yes, enter Step . Otherwise, enter Step ;","Step , VM counter is set to 0;","Step , see if the next template is out of range. If yes, enter Step . Otherwise, enter Step ;","Step , see if the next VM is out of range. If yes, enter Step . Otherwise, enter Step ;","Step , see if the given VM matches requirements. If yes, enter Step . Otherwise, enter Step ;","Step , VM found for some template and host. Decrement one VM from pool;","Step , call VM server manager to update current VM state;","Step , log & report error \u201cCannot find proper VM\u201d;","Step , see if the service of VM pool manager is to return VM. If yes, enter Step . Otherwise, enter Step ;","Step , increment one VM to pool & update status;","Step , see if the service of VM pool manager is to check VM state. If yes, enter Step . Otherwise, enter Step ;","Step , VM pool checker to return some VM status;","Step , see if the service of VM pool manager is to check VM pool. If yes, enter Step . Otherwise, enter Step ;","Step , VM pool checker to return current pool size;","Step , report illegal operation.",{"@attributes":{"id":"p-0186","num":"0185"},"figref":"FIG. 9"},"Step , enter rule engine;","Step , see if the operation is to create rule. If yes, enter Step . Otherwise, enter Step ;","Step , display edit screen;","Step , save rule;","Step , see if the operation is to load rule. If yes, enter Step . Otherwise, enter Step ;","Step , display rule list;","Step , load rule to edit screen;","Step , see if the operation is to edit rule. If yes, enter Step . Otherwise, enter Step ;","Step , display rule list;","Step , load rule to edit screen;","Step , edit rule;","Step , save rule;","Step , see if the operation is to delete rule. If yes, enter Step . Otherwise, enter Step ;","Step , display rule list;","Step , when a rule is selected by the user, highlight this rule;","Step , delete rule;","Step , report illegal operation.",{"@attributes":{"id":"p-0204","num":"0203"},"figref":"FIG. 10","b":["145","145","151"]},"Step , enter with VM operation;","Step , see if the operation is to clone VM. If yes, enter Step . Otherwise, enter Step ;","Step , look for host from database by VM Id;","Step , clone VM via the QVisor API . For details see ;","Step , bind the cloned VM to user;","Step , see if the operation is to start VM. If yes, enter Step . Otherwise, enter Step ;","Step , look for host from database by VM Id;","Step , look for VM from database by user name;","Step , start VM via QVisor API . For details see ;","Step , generate MTP address;","Step , see if the operation is to stop VM. If yes, enter Step . Otherwise, enter Step ;","Step , look for host from database by VM Id;","Step , look for VM from database by user name;","Step , stop VM via QVisor API . For details see ;","Step , see if the operation is to destroy VM. If yes, enter Step . Otherwise, enter Step ;","Step , look for host from database by VM Id;","Step , look for VM from database by user name;","Step , remove VM binding to user;","Step , delete VM via QVisor API . For details see ;","Step , see if the operation is to create VM. If yes, enter Step . Otherwise, enter Step ;","Step , find an available host from database;","Step , create VM via QVisor API . For details see ;","Step , proceed to bind created VM and the user;","Step , proceed to other operations such as get VM state, list VM, get VM performance, etc.","QVisor APIs",{"@attributes":{"id":"p-0230","num":"0229"},"figref":"FIG. 11-21","b":"146"},{"@attributes":{"id":"p-0231","num":"0230"},"figref":"FIG. 11"},"Step , get image path and platform name of the VM;","Step , from database, get platform record to obtain the values of kernel, memory, machine, and exe file name;","Step , look for the maximum tapNumber (sequence number of virtual network card);","Step , generate uuid and MAC number; UUID (Universal Unique Identifier) is the number generated on the host to guarantee the uniqueness in the same time and space, for all hosts. MAC (Media Access Control) address is burned in the Network Interface Card (NIC), also known as hardware address.","Step , Add this VM to QVisor table with uuid, mac #, platform, image path, tapNumber, and state=POWERED-OFF;","Step , return generated VM.",{"@attributes":{"id":"p-0238","num":"0237"},"figref":"FIG. 12"},"Step , report error if VM to be cloned has no uuid;","Step , report error if VM to be cloned has a RUNNING state;","Step , create VM with given VM's platform & image path;","Step , report error if VM cannot be created;","Step , add the created VM to VM list;","Step , return.",{"@attributes":{"id":"p-0245","num":"0244"},"figref":"FIG. 13"},"Step. , report error if cannot find VM uuid;","Step , return if VM is already running;","Step , get exec command name, machine, memory size, kernel, image name, keyboard & mouse devices;","Step , get MAC address, tap, country, QEMU path, and mtp port;","Step , execute a child process with the above arguments to execute QEMU and its guest OS; the execution uses Linux command fork or Windows system call createProcess( ). These command build QEMU a child proces, while this process in turn launch its guest OS with these arguments.","Step , add the created VM to VM list;","Step , return.",{"@attributes":{"id":"p-0253","num":"0252"},"figref":"FIG. 14"},"Step , report error if the given uuid does not exist in the VM list;","Step , return if VM already powered off;","Step , get Linux process ID (PID) for the VM;","Step , kill the child process of PID; execution uses Linux command \u201ckill\u201d. \u201cKill\u201d terminates QEMU along with its guest OS. For Windows operating system, use system call TerminateProcess( ).","Step , wait until the process is completely killed;","Step , set VM state to POWERED-OFF and MTP port to nil;","Step , return.",{"@attributes":{"id":"p-0261","num":"0260"},"figref":"FIG. 15"},"Step , report error if given VM's state is RUNNING;","Step , return error if no such uuid;","Step , delete VM with given uuid;","Step , free VM memory space;","Step , delete VM record from database QVisor table;","Step , delete VM from VM list;","Step , return.",{"@attributes":{"id":"p-0269","num":"0268"},"figref":"FIG. 16"},"Step , see if VM is found in the list. If yes, enter Step . Otherwise, enter Step ;","Step , return VM state=N\/A;","Step , switch to the VM state found. If the state is RUNNING, enter Step . If the state is POWERED-OFF, enter Step . If the state is N\/A, enter Step ;","Step , set VM state as RUNNING;","Step , set VM state as POWERED-OFF;","Step , set VM state as N\/A;","Step , return.",{"@attributes":{"id":"p-0277","num":"0276"},"figref":"FIG. 17"},"Step , find VM from VM list with given uuid;","Step , see if found in the list. If yes, enter Step . Otherwise, enter Step ;","Step , convert VM found to proper Web service format and return it; Step , return null.",{"@attributes":{"id":"p-0281","num":"0280"},"figref":"FIG. 18"},"Step , set temp pointer to the beginning of the internal VM list;","Step , see if the current pointer is null. If yes, enter Step . Otherwise, enter Step ;","Step , convert current VM to proper Web service format;","Step , add VM to the linked list;","Step , set current pointer to the next item in the internal VM list, then enter Step ;","Step , return linked list.",{"@attributes":{"id":"p-0288","num":"0287"},"figref":"FIG. 19"},"Step , set current pointer to the beginning of the internal VM list;","Step , see if current point is null. If yes, enter Step . Otherwise, enter Step ;","Step , see if current VM state is RUNNING. If yes, enter Step . Otherwise, enter Step ;","Step , convert current VM to proper Web service format;","Step , add VM to the linked list;","Step , set temp pointer to the next item in the internal VM list, then enter Step ;","Step , return linked list.",{"@attributes":{"id":"p-0296","num":"0295"},"figref":"FIG. 20"},"Step , set current pointer to the beginning of the internal VM list;","Step , see if current pointer is null. If yes, enter Step . Otherwise, enter Step ;","Step , see if current VM state is POWERED-OFF. If yes, enter Step . Otherwise, enter Step ;","Step , convert current VM to proper Web service format;","Step , add VM to the linked list;","Step , set temp pointer to the next item in the internal VM list, then enter Step ;","Step , return linked list.",{"@attributes":{"id":"p-0304","num":"0303"},"figref":"FIG. 21"},"Step , enter with requested VM and\/or host;","Step , see if the VM state is RUNNING. If yes, enter Step . Otherwise, enter Step ;","Step , get process ID with given VM (PID);","Step , call performance agent with PID. For details see ;","Step , return with CPU, memory, and heartbeat info for a particular VM or the entire host;","Step , return error.","QVisor Platform",{"@attributes":{"id":"p-0312","num":"0311"},"figref":["FIG. 22-25","FIG. 25"]},{"@attributes":{"id":"p-0313","num":"0312"},"figref":"FIG. 22","b":["154","151"]},"Step , enter with PID and\/or host id;","Step , see if the child process PID is still running. If yes, enter Step . Otherwise, enter Step ;","Step , execute Linux command line of ps, top, & vmstat; ps is a Linux system command to display process states. The appended argument \u201cux\u201d tells the utilization of CPU and memory for a running process. \u201cTop\u201d is another Linux system command with similar function to display process states, but in an interactive mode. \u201cVmstat\u201d may be used to display more kernel threads, as well as statistical information of IO, virtual memory, and CPU Trap. If the host OS is Windows XP or Vista, the functions in the Windows Management Instrumentation (WMI) such as CollectingHighCPUUtilizationEvents( ) may be used to acquire the process states.","Step , return with CPU, memory, and heartbeat info for this particular process or the entire host;","Step , return with error.",{"@attributes":{"id":"p-0319","num":"0318"},"figref":"FIG. 23"},"Step , Allocate physical memory for QEMU & kernel;","Step , see if open kernel & QEMU file OK. If OK, enter Step . Otherwise, enter Step ;","Step , report error \u201ccannot open file\u201d;","Step , use lseek( ) to find the size of QEMU+kernel files; use ftok( ) to calculate the key for memory sharing. lseek( ) is a function of C programming language, and can obtain the length of a file using its offset value, while ftok( ) is Linux system function to get key for a subsequent call to shmget( ) to share memory;","Step , see if the value of Key is \u22121. If yes, enter Step . Otherwise, enter Step ;","Step , report ftok error;","Step , calculate argument value for Shmat( ): Loading_address=ram base+(physical_page_descriptor+start_loading_address) & target_page_mask)+kernel_QEMU_load_address; This means the absolute memory address of guest OS is the sum of the following three quantities: (1) base address of cell phone random access memory (RAM), (2) the absolute address of translated physical memory address page, and (3) kernel\/QEMU loading address;","Step , shmget( ) is a Linux system function, usable to acquire or create a IPC shared memory segment associated with the value of the argument key. If the return value of Shmget (key, size, IPC_Creat) is EEXIST, enter Step . Otherwise, enter Step ;","Step , shared memory already exists (i.e. the calling child process is not the first child process on this host);","Step , shmat( ) is a Linux system function, usable to attach a shared memory for a child process. Thus the subsequently-created child processes may use Shmat (shm_id, loading_address) to share memory with the first child process;","Step , calling child process is the first child process on this host. Return.","Steps - provide a kernel-sharing solution for Linux. If the host runs Windows XP or Vista, the system services of memory management in the Win32 development environment is used to take guest OS and QEMU as a single child process, and then take function CreateFileMapping( ) to get its file handle. Subsequently, other child processes uses function OpenFileMapping( ) and the file handle obtained in the CreateFileMapping( ) function call to share the memory of the first child process.",{"@attributes":{"id":"p-0332","num":"0331"},"figref":"FIG. 24"},"Step , enter QEMU SoftMMU;","Step , see if the operation is to create VM. If yes, enter Step . Otherwise, enter Step ;","Step , allocate a memory region for the guest OS;","Step , see if the operation is to translate address for guest OS. If yes, enter Step . Otherwise, enter Step ;","Step , Page table lookup for the virtual address of the start of guest OS region;","Step , see if OS region virtual address is found. If yes, enter Step . Otherwise, enter Step ;","Step , report out-of-bound error;","Step , Set the physical address with repect to the virtual adddress in the page table as Guest_OS_offset;","Step , see if the operation is other non-regional translation operations. If yes, enter Step . Otherwise, enter Step ;","Step , other ops (e.g. mem protection);","Step , mask the Guest_OS_offset to the destination address of the assembly instruction.",{"@attributes":{"id":"p-0344","num":"0343"},"figref":"FIG. 25"},"Step , see if the device size is appropriate. If yes, enter Step . Otherwise, enter Step ;","Step , change to data-center large-size device (e.g. SD is replaced with hard disk, 64M RAM is expanded to 128 M, etc.), then proceed to Step ;","Step , see if the source code of the cell phone OS is completely open. If yes, enter Step . Otherwise, enter Step ;","Step , recompile the source, and adjust I\/O devices, so that the guest OS can run directly on X86 host;","Step , install on-board BSP tool and guest OS platform building tools, if any;","Step , see if the guest OS has platform building tools. If yes, enter Step . Otherwise, enter Step ;","Step , start guest OS platform building tools;","Step , reverse engineering to obtain guest OS I\/O IRQ number and interrupt addresses;","Step , complete on-board peripheral driver debugging;","Step , debug the driver of the hardware device emulated by QEMU;","Step , see if QEMU can run guest OS. If yes, enter Step . Otherwise, enter Step ;","Step , complete QEMU debugging.","Mobile Terminal Protocol",{"@attributes":{"id":"p-0358","num":"0357"},"figref":["FIGS. 26","FIG. 26","FIG. 27","FIG. 28"],"b":["27","28"]},{"@attributes":{"id":"p-0359","num":"0358"},"figref":"FIG. 26"},"Step , see if PC VM or cell VM. If PC VM, enter Step . If cell VM, enter Step ;","Step , screen may be the original PC screen, or adapted PC screen generated by the technology from applicant's China patent CN101231731A Proceed to Step ;","Step , obtain the http head of cell phone request;","Step , see if device database contains cell phone information. If yes, enter Step . Otherwise, enter Step ;","Step , report error and record in the server log file, to facilitate future updates for the device database. Currently there is no way to adapt the screen.  Step ;","Step , lookup and obtain cell phone screen height and width from server device database. Compare the screen image with actual cell phone height and width;","Step , see if needed to rotate  degrees. If yes, enter Step . Otherwise, enter Step ;","Step , changeDisplaySetting(height, width) becomes changeDisplaySetting(width, height);","Step , shrink or enlarge screen image proportionally;","Step , deliver screen to cell phone client.",{"@attributes":{"id":"p-0370","num":"0369"},"figref":"FIG. 27"},"Step , obtain screen image;","Step , compare with the previous frame to detect the change portion of the image;","Step , recognize text;","Step , transmit text characters via data channel;","Step , transmit regions of remaining changed images via image channel;","Step , transmit the unchanged background if the first screen;","Step , return.",{"@attributes":{"id":"p-0378","num":"0377"},"figref":"FIG. 28"},"Step , see if GPS or audio data. If GPS data, enter Step . If audio data, enter Step ;","Step , transmit GPS longitudinal and latitudinal data through data channel. Proceed to Step ;","Step , negotiate audio standard with server (based on bandwidth on both ends and cell phone capabilities to select optimized audio codec.);","Step , see if negotiation successful. If yes, use the negotiated standard and proceed to Step . Otherwise use G.722 standard and proceed to Step ;","Step , see if transmitting or receiving. If transmitting, enter Step . If receiving, enter Step ;","Step , use negotiated result standard to encode;","Step , transmit coded voice through audio channel;","Step , send out the data to server via multiple channels;","Step , receive the data from voice channel;","Step , use negotiated result standard to decode;","Step , handle echo cancellation.","VDI Socket",{"@attributes":{"id":"p-0391","num":"0390"},"figref":"FIG. 29","b":["131","157"]},"Step , initialize itself when VM is started;","Step , request from connection broker the app Id, given VM IP & user ID;","Step , receive application ID from connection broker;","Step , see if default application. If yes, enter Step . Otherwise, enter Step ;","Step , display default app's welcome screen;","Step , agent acquires mobile or PC application's exe pathname & launch it;","Step , see if application launch successful. If yes, enter Step . Otherwise, enter Step ;","Step , Inform connection broker app launched, which in turn tells MTP client to get ready receiving the first screen;","Step , Inform connection broker app launch failed, which in turn tells MTP client to report error.",{"@attributes":{"id":"p-0401","num":"0400"},"figref":["FIG. 30","FIG. 30"],"b":["111","1212","153","156","157"]},"Step , the cell application agent , after activated and connected to the VM starting on the host, stay in a wait state;","Step , MTP client  sends user id and application name to cell connection broker ;","Step , cell connection broker  after authenticated, acquire the VM, and proceed to send application name to the host;","Step , VM's host sends the application name to the cell application agent ;","Step , cell application agent  launches the application. If successful, enter . Otherwise, enter ;","Step , application launch is successful. Inform MTP server  to deliver application screen;","Step , MTP server  connects to MTP client  successfully, and display the screen of the application running on VM;","Step , application launch fails. Inform cell connection broker ;","Step , cell connection broker  inform MTP client  that application launch fails;","Step , client  disconnects. Inform cell connection broker ;","Step , cell connection broker  inform the host of the VM;","Step , VM's host inform cell application agent;","Step , cell application agent  shuts down the application.","In the real-world deploying environment, it is entirely possible to deploy the VM switch  and data management center  in a telco data center, or entirely in a enterprise. It is also possible to deploy the VM switch  in telco, while data management center  in enterprise. The I\/O device debugging pre-processor related to this invention may be usable to any cell phone OS virtualization.","The illustration of the above flow charts and sequence diagram explain virtual mobile infrastructure (VMI). On one hand, VMI provides an application subscription method on the mobile network for the telco. The method is based on cell phone OS being virtualized, with the improved mobile terminal protocol, to allow user access, VM acquisition, application running, and screen delivery, thereby can be operated on any cell OS and cell application. On the other hand, because of the encapsulation of third-party VDI products, the method also allows a cell phone to run any PC OS and PC application.","As a summary, this invention combines cell phone on-board debugging technology, QEMU emulation technology, OS virtualization technology, and virtual desktop infrastructure technology. It provides a virtual mobile infrastructure for enterprises and telcos.","While this invention has been particularly shown and described with references to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the drawing,",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIG. 1A"],"b":"12"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 3","FIG. 1A","FIG. 1"],"b":["142","122","123","124"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 3"],"b":"312"},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 5","FIG. 1A"],"b":"121"},{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 6","FIG. 5"],"b":"502"},{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIG. 1A"],"b":"141"},{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 8","FIG. 1A"],"b":"143"},{"@attributes":{"id":"p-0061","num":"0060"},"figref":["FIG. 9","FIG. 8"],"b":"802"},{"@attributes":{"id":"p-0062","num":"0061"},"figref":["FIG. 10","FIG. 1A"],"b":"145"},{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 11","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIG. 12","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 13","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0066","num":"0065"},"figref":["FIG. 14","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 15","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 16","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 17","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 18","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 19","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 20","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 21","FIG. 1A"],"b":"146"},{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 22","FIG. 1B"],"b":"155"},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 23","FIG. 1A"],"b":"151"},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 24","FIG. 1A"],"b":"151"},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 25","FIG. 1A"],"b":"151"},{"@attributes":{"id":"p-0078","num":"0077"},"figref":["FIG. 26","FIG. 1B"],"b":"152"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 27","FIG. 1B"],"b":"152"},{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 28","FIG. 1A"],"b":"111"},{"@attributes":{"id":"p-0081","num":"0080"},"figref":["FIG. 29","FIG. 1B"],"b":"154"},{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 30"}]},"DETDESC":[{},{}]}
