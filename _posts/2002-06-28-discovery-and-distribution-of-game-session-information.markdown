---
title: Discovery and distribution of game session information
abstract: Discovery and distribution of game session security information includes receiving a request to generate a new game session from a computing device and maintaining a record of a game session identifier for the new game session and a game session key for the new game session, and making the new game session available for other computing devices to join. A request for information describing one or more of a plurality of game sessions may also be received and responded to with the information describing the one or more game sessions as well as a session key that can be used to communicate with at least one of the one or more other computing devices that are part of the game session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07803052&OS=07803052&RS=07803052
owner: Microsoft Corporation
number: 07803052
owner_city: Redmond
owner_country: US
publication_date: 20020628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to game consoles, and particularly to discovery and distribution of game session information.","Traditionally, gaming systems with a dedicated console were standalone machines that accommodated a limited number of players (e.g., 2-4 players). Personal computer-based gaming grew in popularity in part due to the ability to play games online with many remote players over the Internet. Thus, one trend for dedicated gaming consoles is to provide capabilities to facilitate gaming over a network, such as Internet-based online gaming.","Network-based or online gaming can be implemented in a centralized-server approach or a peer-to-peer approach. In the centralized-server approach, gaming systems connect to one or more centralized servers and interact with one another via this centralized server(s). In the peer-to-peer approach, gaming systems connect to one another and interact with one another directly. However, even in the peer-to-peer approach, a centralized server(s) may be employed to assist in the communication.","One problem encountered in employing such a centralized server(s) is to protect network traffic between the gaming systems from tampering or observation by other devices on the network. Gamers are notorious for developing creative cheating mechanisms, making the network traffic a ripe target for such users. Unfortunately, previous console-based gaming systems typically did not provide for secure communications with one another.","The discovery and distribution of game session information described below solves these and other problems.","Discovery and distribution of game session information is described herein.","According to one embodiment, a request to generate a new game session is received from a computing device. A record of a game session identifier for the new game session and a game session key for the new game session are maintained, and the new game session is made available for other computing devices to join.","According to another embodiment, a request is received from a computing device for information describing one or more of a plurality of game sessions that are being hosted by one or more other computing devices and that are currently available for play. The request is responded to with the information describing the one or more game sessions as well as a session key that can be used to communicate with at least one of the one or more other computing devices that are part of the game session.","According to yet another embodiment, an identifier of a location where game data is stored is received from a computing device. A record of the location and a game session key are maintained, and the game data location and game session key are made available to other computing devices.","The discussion herein assumes that the reader is familiar with basic cryptography principles, such as encryption, decryption, authentication, hashing, and digital signatures. For a basic introduction to cryptography, the reader is directed to a text written by Bruce Schneier and entitled, \u201cApplied Cryptography: Protocols, Algorithms, and Source Code in C,\u201d published by John Wiley & Sons, copyright 1994 (second edition 1996), which is hereby incorporated by reference.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","102","1","102","104","102","104","102","104","102","102","102","104"],"i":"c"},"Computing devices  allow their respective users to play games with one another. Online gaming typically refers to two or more game consoles communicating with one another to allow the user(s) of the consoles to play games with one another. This communicating is typically performed over the Internet, but could alternatively be over other networks as well (in place of or in addition to the Internet).","Match making system  maintains information about multiple game sessions being hosted by the computing devices , allowing players to search for game sessions, create new game sessions, join game sessions, quit game sessions, and obtain information used by the computing devices to communicate data to one another. The hosting device of a game session is the device responsible for initiating a game session, such as by having match making system  (or alternatively some other device) create a new game session. A game session refers to one instance of a game title including one or more players. When all players of the game session have ended the session (e.g., quit the game session, logged out of system , powered-down their devices, etc.), then the game session ends. A game session can include multiple rounds of play, or alternatively a new game session may be created for each round of play. Information regarding multiple game sessions for each of multiple different game titles can be maintained by system  concurrently. Players can leave (quit) a game session and join a game session. Once the session reaches a particular point in the gameplay, the ability to join the session can be restricted, or alternatively players may be able to join and leave the game session at will during gameplay, so that the players at the end of the game session can be different than the players at the beginning of the game session. Restrictions on the ability to join and leave the game session can vary by game title, based on the desires of the game title designer.","When a player using a computing device joins a game session, that computing device is also referred to as joining the game session. The device being used by each player that is playing a game session is also referred to as a member of the game session.","Computing device  can be a dedicated game console, a game console incorporating additional functionality (e.g., digital video recording functionality so that it can operate as a digital VCR, channel tuning functionality so that it can tune and decode television signals (whether they be broadcast signals, cable signals, satellite signals, etc.), and so forth), a desktop PC, a workstation, a portable computer, a cellular telephone, an Internet appliance, a server computer, etc. Additionally, different types of devices  may use match making system  concurrently. For example, a user on a dedicated game console may join a game session and play against a user on a portable computer, or a user on a dedicated game console manufactured by one manufacturer may join a game session and play against a user on a dedicated game console manufactured by another manufacturer.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["104","104","120","122","120","120","122","120","122"]},"Match making database  maintains multiple records  storing information regarding the various game sessions that are currently being managed by match making system . The game sessions managed by match making system  are typically those game sessions that are created by match making system . Some game sessions managed by match making system  may be open and thus additional players can join the sessions, while other game sessions may be closed and thus additional players cannot join the sessions. The records  can be maintained using any of a variety of data structures. In one exemplary implementation, the information regarding each game session is stored as an entry in one of one or more tables.","Match making system  is designed to facilitate establishing of game sessions between or among computing devices. In most of the discussions herein, match making system  is described as managing game sessions but not managing the transfer of data between or among the member devices of the game session. Rather, the computing devices transfer the data between or among themselves, or via another server device (not shown in ). Alternatively, some game data transfer may occur via match making system .","A variety of different information can be maintained in records  for each game session. In one implementation, this information includes at least a game session ID (XNKID) and a game session key (XNKEY). The game session ID uniquely identifies a particular game session managed by match making system . The game session key is a cryptographic key associated with the game session. This cryptographic key is made available to all of the members of the game session, and is used by the members of the game session to securely communicate data to one another. It should be noted that an additional key may be used by each of the computing devices to communicate securely with match making system ; however, this additional key(s) is different than the game session key illustrated in .","The game session ID as well as the game session key can be generated by match making system  or the hosting computing device . Alternatively, one of the game session ID and the game session key may be generated by match making system  and the other generated by the hosting computing device .","Although a single database  is illustrated in , it is to be appreciated that the records maintained by database  may be distributed across multiple server devices (referred to as partitioning). Partitioning can be performed in a variety of manners, and in one implementation is performed by using one or more fields in a given row of a table and applying an algorithm, such as a hash function, to the data in that field(s) in order to generate a partition number for a particular record. Different fields can be used, such as the game title identifier, game session ID, game session key, combinations thereof, and so forth. The partition number identifies the one of the multiple server devices on which the record is stored (or to be stored).",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIGS. 1 and 2"],"b":["160","160","104","160","160"]},"Initially, the host computing device sends an identifier of itself as well as a description of the game for which the new session is to be created to match making system  (act ). The host identifier includes, for example, a network address structure for the host computing device that can be communicated to other computing devices that join the game session in order to allow those computing devices to communicate with the host device. In one implementation this host identifier is a fully qualified address (XNADDR), which is discussed in more detail below.","The description of the game includes the title of the game as well as one or more attributes of the game. An attribute is a piece of data associated with a game session, or a player in a game session. The attributes of the game can vary by game based on the desires of the game title designer. For example, the attributes may indicate the skill level of the player that initiates creating the new session, the desired skill level of other players that may join the new session, the game location where the play will occur (for example, during the day, at night, at a particular stadium, in a particular city, on a particular track, weather conditions, etc.), objects to be used during play (for example, types of cars, types of airplanes or spaceships, etc.), characteristics of the various characters in the game (for example, special powers that are available, magical spells that are available, etc.), and so forth. Additionally, rather than including the game title, the game title may be inherent in the request (for example, a different request type may be used for each game title).","The host computing device  can identify its desire to create a new game session in a variety of different manners. In one implementation, a predefined session ID value is sent in act  to indicate to match making system  that a new game session is to be created (for example, a session ID value of zero). Alternatively, a special command may be defined for use by host computing device  to request creation of a new game session. In yet another alternative, the request may be inherent in some other command, or due to the result of another operation. For example, if a computing device requests to join a game session with a set of attributes for which no current game session satisfies, then match making system  may automatically create a new game session with that set of attributes.","Match making system  then generates a new game session ID and game session key (act ). The new game session ID can be generated in a variety of different manners. In one implementation, match making interface  generates a random number or pseudo random number to use as the game session ID (e.g., using the cryptographically strong random number generator in the Win32\u00ae application programming interface). In the event that the random number is the same as another game session ID currently being used by match making system , then match making interface  generates a new random number to use as the game session ID (this generation of new random numbers continues until a random number is generated that is not the same as another game session ID currently being used by match making system ).","The new game session key generated in act  can also be generated in a variety of different manners. In one exemplary implementation, match making interface  generates a random number or pseudo random number to use as the game session key (e.g., using the cryptographically strong random number generator in the Win32\u00ae application programming interface). Alternatively, any of a variety of conventional cryptographic processes can be used to generate the game session key.","Match making system  then advertises the new game session, along with the game description, as being available (act ). In one implementation, this advertising comprises adding a record of the game session to its database and thus making the game session available for searching by other computing devices. Alternatively, this advertising may comprise pushing the game session to one or more computing devices. For example, a computing device may register search criteria (e.g., game sessions with a particular player, particular skill level, or other attributes) with match making interface , requesting interface  to send a notification of any new game session that satisfies the search criteria to the computing device.","Match making system  returns the game session ID and the game session key to the host computing device (act ). By returning the game session ID and the session key to the host computing device, the host computing device can identify the newly created game session, such as when receiving subsequent communications regarding the game session from other members of the session. Alternatively, in situations where the computing device is permitted to host only a single game session at a time, the game session ID need not be returned to the host computing device and the host device can simply assume that any subsequent communications received regarding a hosted game session are for this newly created game session.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 4","FIGS. 1 and 2"],"b":["200","200","102","200","200"]},"Initially, the host computing device  generates a new game session ID and a new game session key for a new game session (act ). The desire to create a new game session can be identified by the host computing device  in a variety of manners analogous to act  discussed above with reference to . The new game session ID and new game session key can be generated in a variety of manners, analogous to act  discussed above with reference to . The host computing device  then sends an identifier of the host computing device , a description of the game for the new game session, as well as the game session ID and game session key generated in act , to match making system  (act ). Match making system  receives this information from the host computing device  and advertises the new game session with the game description as being available (act ). This advertising can be performed in a variety of manners, analogous to act  discussed above with reference to .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 5","FIGS. 1 and 2"],"b":["230","230","160"]},"A computing device desiring to join a game session sends a game session search request to match making system  (act ). In one implementation, this game session search request includes the desired game title as well as one or more additional search parameters. Alternatively, the desired game title need not be included (for example, in a situation where a player indicates that he or she simply wants to play any game). In another alternative, the one or more additional search parameters need not be included (for example, in a situation where a player indicates that he or she wants to play a particular game title without concern for any attributes of the game).","Match making system  receives the game session search request and identifies zero or more current game sessions that satisfy the search request parameters (act ) and that have open slots for players to fill. In one implementation, match making system  returns only game sessions having a number of open slots equal to or greater than the number of current players using the computing device. If greater than a threshold number of game sessions satisfy the search request parameters, then a subset of those game sessions are returned. Match making system  then returns, to the requesting computing device, information describing the identified game sessions (act ). This information includes the game session key for each of the identified game sessions, thereby allowing the computing device to communicate securely with the other computing device(s) in the game session. This information also includes the descriptive information provided by the host computing device when creating the game session (e.g., in act  of  or act  of ). Thus, the descriptive information returned can include additional attributes of the game beyond what were indicated in the search request parameters.","It should be noted that multiple acts may also be performed in place of act . For example, rather than returning the game session keys for all of the identified game sessions, only the game identifiers and descriptive information may be returned to the computing device. A player at the computing device can select one of the identified game sessions, in response to which the computing device sends a request for the game session key for the selected game session to the match making system . The match making system  then returns the requested game session key to the computing device.","Returning to , a user of a computing device  may be able to invite a particular user of another computing device (e.g., a friend of the user's) to join a game session. Such an invitation may be sent via match making system , or alternatively another system (e.g., such as a presence and notification system, discussed below with reference to ). An invitation to join a game session includes the game session ID for the session, allowing the invited user to search for and have identified the appropriate game session.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 6","FIGS. 1 and 2"],"b":["260","260","260"]},"Initially, a computing device receives an invitation to join a game session hosted by a hosting computing device (act ). The computing device sends an acceptance of the invitation to the matchmaking system  (act ). The acceptance in act  may be a specific type of request, or alternatively may be a game search request with a single search parameter that is the game session ID of the game session the computing device was invited to join. The matchmaking system  responds by sending the game session key for that game session to the computing device (act ).","In one implementation, a host computing device is able to have a game session created that includes both public and private slots. As part of the creation process, the host computing device identifies to match making system  how many public slots are to be included for the game session and how many private slots are to be included for the game session. Each slot can be filled by a single player. Match making system  maintains a record of these different slots, and allows a public slot to be filled by searching (e.g., per process  of ) and allows a private slot to be filled by invitation (e.g., per process  of ). Thus, when the game session is created, the user can set aside particular slots in the game for his or her friends (whom he or she can subsequently invite), without fear of all the slots being filled by strangers. Match making system  may alternatively allow variations on these rules, such as allowing an invited user to fill a public slot if all of the private slots have been filled, allow a non-invited user to fill a private slot if the private slot has been empty for at least a threshold amount of time, and so forth.","In addition to maintaining a record of game sessions, match making system  (or alternatively another system operating in cooperation with system ), can maintain records of other information stored on the individual computing devices . For example, certain games titles maintain information about the game play (e.g., various characteristics about the environment of the game, such as the number of fish or obstacles in particular parts of a lake, a number of extra computer-generated characters or animals that are part of a particular scene, weather patterns (e.g., how rough water is in a particular location), and so forth). The computing devices that are playing in this environment typically want to share this information for uniformity of game play amongst the various players, even though the players may not be playing against one another in a head-to-head environment.","Match making system  can facilitate the exchange of information for such game titles by maintaining a record of identifiers of the information to be shared as well as indications of where the information is stored (e.g., do all computing devices store the information, or do only selected ones of the computing devices (and if so, which computing devices store the information)). These identifiers can be stored, for example, as attributes of a game session. Thus, rather than performing a search request to obtain information describing game sessions that the user may join, a search request for this game data location(s) may be performed in response to a request from a computing device (which may or may not already be in the game session). The game session key can also be returned to the various computing devices playing the game, in order to allow the devices to exchange the game data directly in a secure manner if necessary. A computing device, having obtained a location(s) for game data from match making system , can then access the location(s) (e.g., the computing devices at those locations) to obtain the data from the location. In one implementation, the location is a fully qualified address (XNADDR) of a computing device.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 7","FIGS. 1 and 2"],"b":["300","300","300"]},"Initially, a computing device sends a request for game data exchange information to match making system  (act ). The request can identify a particular game session by its game session ID, for example. The match making session identifies the game session corresponding to the request (act ), and identifies the location of the desired game data (act ). The location of the desired game data can be, for example, a particular one or more of the computing devices in the game session. The match making system then sends the location and game session key to the computing device (act ), giving the computing device the information it can use to obtain the game data with the appropriate computing device via a secure connection. Alternatively, if the session key has already been communicated to the computing device, then the session key need not be sent in act .","Returning to , various attributes can be stored in records , and used by match making system  in creating and searching game sessions. An attribute is a piece of data associated with a game session or a player in a game session. In one implementation, each attribute has an attribute value that is identified by an attribute ID. An example format of a 32-bit attribute ID is shown in Table I below. The attribute ID uniquely identifies the attribute within a game session, and different bit-ranges of the ID also describe the attribute. The description can specify what entity the attribute relates to, what kind of data is used to represent attribute values and what namespace the attribute is associated with.","In one implementation, an attribute can be associated with a global namespace or a title-specific namespace. Global attributes are those attributes predefined by the match making system, and have a common meaning across games. Title-specific attributes are defined by the game and only have meaning within that game. Thus, it is possible for two different game titles to use the same attribute ID to refer to two different and unrelated attributes. As these title-specific attributes are scoped by the title ID, the attributes are not confused with one another.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Field","Bits(s)","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Namespace","31","Indicates whether the attribute is title-specific"]},{"entry":[{},{},"(e.g., a value of 0) or global (e.g., a value of"]},{"entry":[{},{},"1)."]},{"entry":["Reserved","28-30","Reserved for future use."]},{"entry":["Attribute Type","24-27","Indicates the type of attribute (e.g., 0001 for"]},{"entry":[{},{},"user attribute and 0000 for game session attri-"]},{"entry":[{},{},"bute). Other values are reserved for future use."]},{"entry":["Attribute Data","20-23","Indicates the type of data stored in the attribute"]},{"entry":["Type",{},"value (e.g., 0000 for integer, 0001 for string,"]},{"entry":[{},{},"0010 for binary, 1111 for null). Other values"]},{"entry":[{},{},"are reserved for future use."]},{"entry":["Reserved","16-19","Reserved for future use."]},{"entry":["Attribute","\u20020-15","Unique identifier of the attribute within its"]},{"entry":["Specifier",{},"namespace (title-defined for attributes in the"]},{"entry":[{},{},"title-specific namespace)."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0064","num":"0063"},"figref":["FIGS. 8-12","FIG. 1"],"b":["102","104"]},{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 8","b":["350","102","104","350"]},"The host address field contains an address structure of the host computing device. In one implementation, this address structure is referred to as a fully qualified address (XNADDR) for the host computing device. The fully qualified address of the host computing device includes sufficient information to allow other computing devices to access the host computing device even though the host computing device may be situated behind a network address translation (NAT) device, such as a network router.","The fully qualified address for a computing device includes: the Ethernet MAC address for the computing device; the local IP address of the computing device (this is the IP address that the computing device believes it has, and may be different than the IP address from which the match making system receives data packets from the computing device (e.g., due to a NAT device, such as a router, situated between the computing device and the match making system (or an intermediary acting on behalf of the match making system, such as security gateway  of , discussed below)); the IP address and port from which the match making system (or intermediary) receives data packets from the computing device (this may be the same as the local IP address of the computing device, or alternatively different (e.g., the address of a NAT device)); a logical device number (an identifier assigned to the match making system (or intermediary) to uniquely identify the match making system (or intermediary) within a cluster of multiple match making systems (or intermediaries)); a Security Parameters Index (SPI) value (e.g., SPI, and\/or SPI); and a computing device id. The contents of the fully qualified address can be determined based on information embedded in data packets received from the computing device as well as information received in establishing a secure connection between the computing device and the match making system (or intermediary).","The value SPIrefers to a value generated by the computing device that the device includes in the header of each data packet sent via a secure communications channel to the match making system (or intermediary). The first data packet sent by the game console to the match making system (or intermediary) to establish a secure communications channel includes an SPIvalue of zero to indicate to match making system (or intermediary) that a new communications channel is to be established. Subsequent data packets include a non-zero value generated by the game console. Similarly, the match making system (or intermediary) generates a value SPIthat it includes in the header of each data packet sent via the secure communications channel to the game console. The SPIvalue allows the game console to identify the secure communications channel between the game console and the match making system (or intermediary) as the particular channel to which the data packets sent by the game console correspond, and the SPIvalue similarly allows the match making system (or intermediary) to identify the secure communications channel between the game console and the match making system (or intermediary) as the particular channel to which the data packets sent by the match making system (or intermediary) correspond. Each secure communications channel, even though between the same game console and match making system (or intermediary), typically has different SPI values.","The available public slots field specifies the number of searchable player slots available in this game. As players join or leave the game, the value in the available public slots field is updated accordingly. The available private slots field specifies the number of private player slots available in this game. As players join or leave the game, the value in the available private slots field is updated accordingly. A private player slot can be taken only by a player that has received an invitation to the game session.","The currently filled public slots field specifies the number of public slots that are currently filled by players. As players join or leave the game, the value in this currently filled public slots field is updated accordingly. The currently filled private slots field specifies the number of private slots that are currently filled by players. As players join or leave the game, the value in this currently filled private slots field is updated accordingly. The number of attributes field specifies the number of attributes associated with this game session. The attributes offset fields specify the offsets to the attributes associated with this game session. The attributes can be arranged in any order. Each attribute offset identifies (e.g., is a pointer to) a region of the message that includes the attribute ID and attribute value.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 9","b":["360","104","102"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 10","b":["370","102","104","370"]},{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 11","b":["380","102","104","380"]},"The number of parameters field specifies the number of parameters that are being sent with this game session search request. The parameters can be arranged in any order. Each parameter includes a data type indicator followed by the parameter data.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 12","b":["390","104","102","390"]},"The available public slots field specifies the number of searchable player slots available in this game. The available private slots field specifies the number of private player slots available in this game. The currently filled public slots field specifies the number of public slots that are currently filled by players. The currently filled private slots field specifies the number of private slots that are currently filled by players. The number of additional attributes field specifies the number of attributes associated with this game session. The attributes can be arranged in any order. Each attribute offset identifies (e.g., is a pointer to) a region of the message that includes the attribute ID and attribute value.","In one implementation, match making database  of  uses multiple tables to store the data for various game sessions. These tables and the data stored in each is discussed below in Tables II-X below. These tables include: a match sessions table (Table II) that includes a master list of all game sessions being managed by match making system ; a match attributes table (Table III) that includes a list of session attributes for all current game sessions being managed by match making system ; a match attribute information table (Table IV) that includes a list of valid, title-specific attributes used to monitor the number of title-specific attributes a given title is using (an attribute limit may optionally be imposed on titles, or fees charged based on number of attributes); a match titles table (Table V) that includes information about each game title certified to use match making system ; a match session security gateway lookup table (Table VI) that includes information that allows a reverse lookup from the security gateway address to the associated game session ID (security gateways are discussed in more detail below with reference to ); a match configuration table (Table VII) includes configuration information used by the match making database application; a match zones table (Table VIII) includes a complete list of network zones (e.g., a set of network zones established within a network in which match making system  of  is implemented, such as data center  of ); a match zone map (Table IX) includes definitions of which network address prefixes reside in which zones; and a match zone distances table (Table X) includes distances (e.g., network latencies) between pairs of zones.",{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_session_id","Contains the game session ID that uniquely"]},{"entry":[{},"identifies the game session within the scope of"]},{"entry":[{},"the title ID."]},{"entry":["i_title_id","Identifies the game title being played in this"]},{"entry":[{},"session."]},{"entry":["b_host_address","Contains an XNADDR structure."]},{"entry":["I_zone_id","Host Address mapped to a proximity zone."]},{"entry":["b_key_exchange_key","Game session key-shared by all participants"]},{"entry":[{},"in the session. Can be used to secure communi-"]},{"entry":[{},"cations among participants, or establish add-"]},{"entry":[{},"itional peer-to-peer keys among participants."]},{"entry":["i_public_available","Number of public slots open for this session."]},{"entry":["i_private_available","Number of private slots open for this session."]},{"entry":["i_public_current","Current number of players occupying public"]},{"entry":[{},"slots."]},{"entry":["i_private_current","Current number of players occupying private"]},{"entry":[{},"slots."]},{"entry":["dt_session_expiration","Specifies the time when this session will"]},{"entry":[{},"be removed from the database, if it is"]},{"entry":[{},"not proactively removed by the host."]},{"entry":["f_selection_probability","Contains a selection probability that is adjusted"]},{"entry":[{},"over time as this session is returned"]},{"entry":[{},"in search results. The probability also"]},{"entry":[{},"decays over time."]},{"entry":["dt_change_probability","Contains the last time that the selection pro-"]},{"entry":[{},"bability was updated."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0079","num":"0078"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE III"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_attribute_id","Contains the attribute ID that uniquely identifies this"]},{"entry":[{},"attribute within the session."]},{"entry":["i_title_id","Identifies the game title that the attribute (and the"]},{"entry":[{},"session) is associated with."]},{"entry":["sv_value","Contains the attribute value."]},{"entry":["bi_session_id","Contains the session ID that uniquely identifies the"]},{"entry":[{},"session that this attribute is associated with."]},{"entry":["bi_user_puid","User ID (e.g., a Passport User ID (PUID) assigned by"]},{"entry":[{},"Microsoft\u2009\u00ae Passport) of the player that this attribute is"]},{"entry":[{},"associated with. If this is a session attribute, then this"]},{"entry":[{},"column will contain zero."]},{"entry":["i_user_flags","Guest account information related to bi_user_puid."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0080","num":"0079"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE IV"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_title_id","Identifies the game title that defines this attribute."]},{"entry":["i_attribute_id","Contains the attribute ID that uniquely identifies the"]},{"entry":[{},"attribute for the title."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0081","num":"0080"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE V"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_title_id","Unique identifier for the title."]},{"entry":["i_publisher_id","Unique identifier of the publisher of this title."]},{"entry":["i_maximum_attributes","Maximum number of attributes that this title is"]},{"entry":[{},"allowed to define and store."]},{"entry":["i_session_expiration","Specifies the expiration time for all sessions"]},{"entry":[{},"created for this title."]},{"entry":["vc_db_list","Semi-colon separated list of db names."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE VI"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_sg_ip","IP Address of the security gateway."]},{"entry":["b_id","Remainder of SGADDR minus the SG IP address."]},{"entry":["i_title_id","Title ID of the associated session."]},{"entry":["bi_session id","Session ID of the association session."]},{"entry":["vc_db_list","Semi-colon separated list of db names."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0083","num":"0082"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE VII"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"vc_name","Name of the configuration item."]},{"entry":[{},"vc_value","Value of the configuration item."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE VIII"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Field","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"i_zoneID","Unique identifier for the zone."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE IX"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_prefix","Network address prefix."]},{"entry":["ti_prefix_length","Number of bits in i_prefix that are significant."]},{"entry":["i_zoneID","Zone that this prefix resides in."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0086","num":"0085"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE X"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["i_zoneID1","Source zone ID."]},{"entry":["i_zoneID2","Destination zone ID."]},{"entry":["i_distance","The distance (network latency) between the two zones."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one implementation, a set of application programming interfaces (APIs) are made available to the game titles to employ the match making functionality. These APIs are exposed to the game titles on the computing devices and allow game sessions to be created and searched. A set of game session host APIs to support hosting of game sessions includes:\n\n","The game title on a computing device host of a game session first calls XOnlineMatchSessionCreate to create a new game session. The base session information and a structure containing any desired attributes are passed in. The API will format and send the game session request to the match making system. An online task handle is returned. After the session create task has completed, the caller can then use the task handle to retrieve the game session ID and game session key (key exchange key) using the XOnlineMatchGetSessionInfo API. If the session information or attributes change, XOnlineMatchSessionUpdate can be called to send the updates to the server. Again, a task handle is returned. XOnlineMatchSessionDelete is called when the host no longer wishes to advertise the game session on the server.","XOnlineMatchSessionCreate","This function initializes a hosted game session and returns an asynchronous task handle.\n\n","XOnlineMatchSessionCreate Parameters","dwPublicCurrent\u2014The number of players in the session currently occupying public slots.","dwPublicAvailable\u2014The number of available public slots.","dwPrivateCurrent\u2014The number of players in the session currently occupying private slots.","dwPrivateAvailable\u2014The number of available private slots.","dwNumAttributes\u2014The number of attributes that will be advertised for this session. This number should take into account user-specific attributes that may be duplicated in the case that multiple users are sitting at the console.","pAttributes\u2014An array of attribute structures describing the attributes of the session.","hWorkEvent\u2014This is the handle to a caller-created event object. The caller can periodically check this event to determine if there is work to do. The caller can also pass in NULL if they plan on using a polling model.","phTask\u2014On input this parameter should point to a valid task handle variable. On successful return, this variable will be filled in with a valid handle.","XOnlineMatchSessionCreate Return Value","S_OK\u2014Game session was successfully created, handle is returned in phTask.","XOnlineMatchSessionUpdate","This function is used to change session information and attributes on the server after a session has already been created.\n\n","XOnlineMatchSessionUpdate Parameters","SessionID\u2014Identifies the session that is being updated. This value can be retrieved from XOnlineMatchSessionGetInfo.","dwPublicAvailable\u2014The number of available public slots.","dwPrivateCurrent\u2014The number of players in the session currently occupying private slots.","dwPrivateAvailable\u2014The number of available private slots.","dwNumAttributes\u2014The number of attributes that will be advertised for this session. This number should take into account user-specific attributes that may be duplicated in the case that multiple users are sitting at the console.","pAttributes\u2014An array of attribute structures describing the attributes of the session.","hWorkEvent\u2014This is the handle to a caller-created event object. The caller can periodically check this event to determine if there is work to do. The caller can also pass in NULL if they plan on using a polling model.","phTask\u2014On input this parameter should point to a valid task handle variable. On successful return, this variable will be filled in with a valid handle.","XOnlineMatchSessionUpdate Return Value","S_OK\u2014The function was successful.","XOnlineMatchSessionDelete","This function is used to remove a session and all of its attributes from the server.\n\n","XOnlineMatchSessionDelete Parameters","SessionID\u2014Identifies the session being deleted. This value is retrieved from XOnlineMatchSessionGetInfo after a session is created.","hWorkEvent\u2014This is the handle to a caller-created event object. The caller can periodically check this event to determine if there is work to do. The caller can also pass in NULL if they plan on using a polling model.","phTask\u2014On input this parameter should point to a valid task handle variable. On successful return, this variable will be filled in with a valid handle.","XOnlineMatchSessionDelete Return Value","S_OK\u2014The function was successful.","XOnlineMatchGetSessionInfo","This function is used to retrieve the session information from a task handle after XOnlineMatchSessionCreate has successfully completed.\n\n","XOnlineMatchGetSessionInfo Parameters","hTask\u2014Online task handle returned by XOnlineMatchSessionCreate.","pSessionID\u2014Address of an XNKID variable that will receive the session ID.","pKeyExchangeKey\u2014Address of an XNKEY variable that will receive the key exchange key.","XOnlineMatchGetSessionInfo Return Value","S_OK\u2014The session ID and key were successfully returned.","To perform a game search, a game title calls XOnlineMatchSearch. The game title passes in the procedure index, the maximum number of search results it wishes to receive and any parameters to be passed to the search stored procedure on the database. The game also specifies the maximum buffer size that the search results can occupy. This buffer size is allocated internally by the API, and any search results that do not fit in this buffer will be dropped. The game title can optionally specify an event handle that will be signaled when there is any work to do.","XOnlineMatchSearch returns an online task handle. When the search task has indicated completion, the game can retrieve an array of search results by calling XOnlineMatchSearchGetResults with the task handle. The search results can be accessed individually at this point. Any extended attributes returned can be parsed using XOnlineMatchSearchParse. The game knows beforehand the order and types of the attributes returned. Each individual search result contains the XNADDR, XNKID and XNKEY used to connect to the game session host.","In the case where a specific game session ID is already known via some out-of-band mechanism such, the XOnlineMatchSessionFindFromID API can be used to retrieve a single session using the session ID. Once this task has completed, the caller uses XOnlineMatchSearchGetResults to retrieve the XNADDR, XNKID and XNKEY of the requested session.","XOnlineMatchSearch","This function creates a new game session search, sends it to the server and returns an asynchronous task handle for monitoring the progress of the request. This function allocates a buffer for the search results internally, using the size passed in by the caller.\n\n","XOnlineMatchSearch Parameters","dwProcedureIndex\u2014Identifies the stored procedure for this title that will be run on the database to execute the search.","dwNumResults\u2014Specifies that maximum number of search results that the game is interested in processing.","dwNumAttributes\u2014The number of parameters that will be passed as part of this request, and ultimately passed to the stored procedure.","pAttributes\u2014An array of parameter values.","dwResultsLen\u2014This parameter specifies the amount of buffer space that this API will allocate to hold search results. These APIs will attempt to fill up the buffer space specified by this parameter.","hWorkEvent\u2014This is a handle to a caller-created event object. This object becomes signaled when there is work to do. This parameter is optional and the caller may pass in NULL instead, indicating that the caller will poll.","phTask\u2014Upon successful return, this parameter will point to a handle that uniquely identifies this search. This handle is used in subsequent API calls.","XOnlineMatchSearch Return Value","S_OK\u2014Search was created successfully.","XOnlineMatchSessionFindFromID","This function retrieves information for a single, specified session. This function assumes that the session ID is retrieved via some out-of-band mechanism, such as invitations. This function is essentially a short-hand form of XOnlineMatchSearch, where the procedure index, parameters and maximum results are fixed. All of the events that occur under the covers for XOnlineMatchSearch, will also occur for this API. The returned task handle is used to allow the API to periodically perform its work. It is identical to the handle returned by XOnlineMatchSearch.\n\n","XOnlineMatchSessionFindFromID Parameters","SessionID\u2014The XNKID of the session to get.","hWorkEvent\u2014This is a handle to a caller-created event object. This object becomes signaled when there is work to do. This parameter is optional and the caller may pass in NULL instead, indicating that the caller will poll.","phTask\u2014Upon successful return, this parameter will point to a handle that uniquely identifies this search. This handle is used in subsequent search API calls.","XOnlineMatchSessionFindFromID Return Value","S-OK\u2014Search request was sent successfully.","XOnlineMatchSearchGetResults","This function is used to retrieve a set of search results for a specified search request. This function is called after the task handle obtained from a previous call to XOnlineMatchSearch indicates successful completion.\n\n","XOnlineMatchSearchGetResults Parameters","hTask\u2014An online task handle returned from a previous call to XOnlineMatchSearch.","prgpSearchResults\u2014Receives a pointer to an array of search result structures.","pdwReturnedResults\u2014Receives the number of search result structures pointed to by prgpSearchResults.","XOnlineMatchSearchGetResults Return Value","S_OK\u2014Search results were successfully returned.","XOnlineMatchSearchParse","This function is used to retrieve extended attributes from a particular search result. The caller must know the exact order and type of the extended attributes.\n\n","XOnlineMatchSearchParse Parameters","pSearchResult\u2014Specifies the search result being parsed.","dwNumSessionAttributes\u2014Specifies the number of extended attributes in the search result.","pSessionAttributeSpec\u2014Identifies the types of each of the attributes.","pQuerySession\u2014Buffer to contain the attributes.",{"@attributes":{"id":"p-0161","num":"0224"},"figref":"FIG. 13","b":["400","402","1","402","2","402","404","406","406","406","406","406","406"],"i":"n"},"In some situations, network  includes a LAN (e.g., a home network), with a routing device situated between game console  and security gateway . This routing device may perform network address translation (NAT), allowing the multiple devices on the LAN to share the same IP address on the Internet, and also operating as a firewall to protect the device(s) on the LAN from access by malicious or mischievous users via the Internet.","Security gateway  operates as a gateway between public network  and a private network . Private network  can be any of a wide variety of conventional networks, such as a local area network. Private network , as well as other devices discussed in more detail below, is within a data center  that operates as a secure zone. Data center  is made up of trusted devices communicating via trusted communications. Thus, encryption and authentication within secure zone  is not necessary. The private nature of network \u2014refers to the restricted accessibility of network \u2014access to network  is restricted to only certain individuals (e.g., restricted by the owner or operator of data center ).","Security gateway  is a cluster of one or more security gateway computing devices. These security gateway computing devices collectively implement security gateway . Security gateway  may optionally include one or more conventional load balancing devices that operate to direct requests to be handled by the security gateway computing devices to appropriate ones of those computing devices. This directing or load balancing is performed in a manner that attempts to balance the load on the various security gateway computing devices approximately equally (or alternatively in accordance with some other criteria).","Also within data center  are: one or more monitoring servers ; one or more presence and notification front doors , one or more presence servers , and one or more notification servers  (collectively implementing a presence and notification service); one or more match making front doors  (e.g., interfaces  of ) and one or more match making servers  (e.g., databases  of ) (collectively implementing a match making system); and one or more statistics front doors  and one or more statistics servers  (collectively implementing a statistics service). The servers , , , and  provide services to game consoles , and thus can be referred to as service devices. Other service devices may also be included in addition to, and\/or in place of, one or more of the servers , , , and . Additionally, although only one data center is shown in , alternatively multiple data centers may exist with which game consoles  can communicate. These data centers may operate independently or alternatively may operate collectively (e.g., to make one large data center available to game consoles ).","Game consoles  are situated remotely from data center , and access data center  via network . A game console  desiring to communicate with one or more devices in the data center establishes a secure communication channel between the console  and security gateway . Game console  and security gateway  encrypt and authenticate data packets being passed back and forth, thereby allowing the data packets to be securely transmitted between them without being understood by any other device that may capture or copy the data packets without breaking the encryption. Each data packet communicated from game console  to security gateway , or from security gateway  to game console  can have data embedded therein. This embedded data is referred to as the content or data content of the packet. Additional information may also be inherently included in the packet based on the packet type.","The secure communication channel between a console  and security gateway  is based on a security ticket. Console  authenticates itself and the current user(s) of console  to a key distribution center  and obtains, from key distribution center , a security ticket. Console  then uses this security ticket to establish the secure communication channel with security gateway . In establishing the secure communication channel with security gateway , the game console  and security gateway  authenticate themselves to one another and establish a session security key that is known only to that particular game console  and the security gateway . This session security key is used to encrypt data transferred between the game console  and the security gateway cluster , so no other devices (including other game consoles ) can read the data. The session security key is also used to authenticate a data packet as being from the security gateway  or game console  that the data packet alleges to be from. Thus, using such session security keys, secure communication channels can be established between the security gateway  and the various game consoles .","Once the secure communication channel is established between a game console  and the security gateway , encrypted data packets can be securely transmitted between the two. When the game console  desires to send data to a particular service device in data center , the game console  encrypts the data and sends it to security gateway  requesting that it be forwarded to the particular service device(s) targeted by the data packet. Security gateway  receives the data packet and, after authenticating and decrypting the data packet, encapsulates the data content of the packet into another message to be sent to the appropriate service via private network . Security gateway  determines the appropriate service for the message based on the requested service(s) targeted by the data packet.","Although discussed herein as primarily communicating encrypted data packets between security gateway  and a game console , alternatively some data packets may be partially encrypted (some portions of the data packets are encrypted while other portions are not encrypted). Which portions of the data packets are encrypted and which are not can vary based on the desires of the designers of data center  and\/or game consoles . For example, the designers may choose to allow voice data to be communicated among consoles  so that users of the consoles  can talk to one another\u2014the designers may further choose to allow the voice data to be unencrypted while any other data in the packets is encrypted. Additionally, in another alternative, some data packets may have no portions that are encrypted (that is, the entire data packet is unencrypted). It should be noted that, even if a data packet is unencrypted or only partially encrypted, all of the data packet can still be authenticated.","Similarly, when a service device in data center  desires to communicate data to a game console , the data center sends a message to security gateway , via private network , including the data content to be sent to the game console  as well as an indication of the particular game console  to which the data content is to be sent. Security gateway  embeds the data content into a data packet, and then encrypts the data packet so it can only be decrypted by the particular game console  and also authenticates the data packet as being from the security gateway .","Each security gateway device in security gateway  is responsible for the secure communication channel with typically one or more game consoles , and thus each security gateway device can be viewed as being responsible for managing or handling one or more game consoles. The various security gateway devices may be in communication with each other and communicate messages to one another. For example, a security gateway device that needs to send a data packet to a game console that it is not responsible for managing may send a message to all the other security gateway devices with the data to be sent to that game console. This message is received by the security gateway device that is responsible for managing that game console and sends the appropriate data to that game console. Alternatively, the security gateway devices may be aware of which game consoles are being handled by which security gateway devices\u2014this may be explicit, such as each security gateway device maintaining a table of game consoles handled by the other security gateway devices, or alternatively implicit, such as determining which security gateway device is responsible for a particular game console based on an identifier of the game console.","Monitoring server(s)  operate to inform devices in data center  of an unavailable game console  or an unavailable security gateway device of security gateway . Game consoles  can become unavailable for a variety of different reasons, such as a hardware or software failure, the console being powered-down without logging out of data center , the network connection cable to console  being disconnected from console , other network problems (e.g., the LAN that the console  is on malfunctioning), etc. Similarly, a security gateway device of security gateway  can become unavailable for a variety of different reasons, such as hardware or software failure, the device being powered-down, the network connection cable to the device being disconnected from the device, other network problems, etc.","Each of the security gateway devices in security gateway  is monitored by one or more monitoring servers , which detect when one of the security gateway devices becomes unavailable. In the event a security gateway device becomes unavailable, monitoring server  sends a message to each of the other devices in data center  (servers, front doors, etc.) that the security gateway device is no longer available. Each of the other devices can operate based on this information as it sees fit (e.g., it may assume that particular game consoles being managed by the security gateway device are no longer in communication with data center  and perform various clean-up operations accordingly). Alternatively, only certain devices may receive such a message from the monitoring server  (e.g., only those devices that are concerned with whether security gateway devices are available).","Security gateway  monitors the individual game consoles  and detects when one of the game consoles  becomes unavailable. When security gateway  detects that a game console is no longer available, security gateway  sends a message to monitoring server  of the unavailable game console. In response, monitoring server  sends a message to each of the other devices in data center  (or alternatively only selected devices) that the game console is no longer available. Each of the other devices can then operate based on this information as it sees fit.","Presence server(s)  hold and process data concerning the status or presence of a given user logged in to data center  for online gaming. Notification server(s)  maintains multiple queues of outgoing messages destined for a player logged in to data center . Presence and notification front door  is one or more server devices that operate as an intermediary between security gateway  and servers  and . One or more load balancing devices (not shown) may be included in presence and notification front door  to balance the load among the multiple server devices operating as front door . Security gateway  communicates messages for servers  and  to the front door , and the front door  identifies which particular server  or particular server  the message is to be communicated to. By using front door , the actual implementation of servers  and , such as which servers are responsible for managing data regarding which users, is abstracted from security gateway . Security gateway  can simply forward messages that target the presence and notification service to presence and notification front door  and rely on front door  to route the messages to the appropriate one of server(s)  and server(s) .","Match making server(s)  hold and process data concerning the matching of online players to one another, as discussed above. Match front door  includes one or more server devices (and optionally a load balancing device(s)) and operates to abstract match server(s)  from security gateway  in a manner analogous to front door  abstracting server(s)  and server(s) .","Statistics server(s)  hold and process data concerning various statistics for online games. The specific statistics used can vary based on the game designer's desires (e.g., the top ten scores or times, a world ranking for all online players of the game, a list of users who have found the most items or spent the most time playing, etc.). Statistics front door  includes one or more server devices (and optionally a load balancing device(s)) and operates to abstract statistics server(s)  from security gateway  in a manner analogous to front door  abstracting server(s)  and server(s) .","Thus, it can be seen that security gateway  operates to shield devices in the secure zone of data center  from the untrusted, public network . Communications within the secure zone of data center  need not be encrypted, as all devices within data center  are trusted. However, any information to be communicated from a device within data center  to a game console  passes through security gateway cluster , where it is encrypted in such a manner that it can be decrypted by only the game console  targeted by the information.",{"@attributes":{"id":"p-0179","num":"0242"},"figref":"FIG. 14","b":["500","500","500","500"]},"Computer environment  includes a general-purpose computing device in the form of a computer . Computer  can be, for example, a match making system  or computing device  of , a match making interface  or match making database  of , a server , , , , and\/or  of , or a front door , , or  of . The components of computer  can include, but are not limited to, one or more processors or processing units  (optionally including a cryptographic processor or co-processor), a system memory , and a system bus  that couples various system components including the processor  to the system memory .","The system bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","Computer  typically includes a variety of computer readable media. Such media can be any available media that is accessible by computer  and includes both volatile and non-volatile media, removable and non-removable media.","The system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently operated on by the processing unit .","Computer  may also include other removable\/non-removable, volatile\/non-volatile computer storage media. By way of example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from and\/or writing to a removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are each connected to the system bus  by one or more data media interfaces . Alternatively, the hard disk drive , magnetic disk drive , and optical disk drive  can be connected to the system bus  by one or more interfaces (not shown).","The disk drives and their associated computer-readable media provide non-volatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the example illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes or other magnetic storage devices, flash memory cards, CD-ROM, digital versatile disks (DVD) or other optical storage, random access memories (RAM), read only memories (ROM), electrically erasable programmable read-only memory (EEPROM), and the like, can also be utilized to implement the exemplary computing system and environment.","Any number of program modules can be stored on the hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of example, an operating system , one or more application programs , other program modules , and program data . Each of such operating system , one or more application programs , other program modules , and program data  (or some combination thereof) may implement all or part of the resident components that support the distributed file system.","A user can enter commands and information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to the processing unit  via input\/output interfaces  that are coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , other output peripheral devices can include components such as speakers (not shown) and a printer  which can be connected to computer  via the input\/output interfaces .","Computer  can operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, the remote computing device  can be a personal computer, portable computer, a server, a router, a network computer, a peer device or other common network node, game console, and the like. The remote computing device  is illustrated as a portable computer that can include many or all of the elements and features described herein relative to computer .","Logical connections between computer  and the remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When implemented in a LAN networking environment, the computer  is connected to a local network  via a network interface or adapter . When implemented in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the wide network . The modem , which can be internal or external to computer , can be connected to the system bus  via the input\/output interfaces  or other appropriate mechanisms. It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link(s) between the computers  and  can be employed.","In a networked environment, such as that illustrated with computing environment , program modules depicted relative to the computer , or portions thereof, may be stored in a remote memory storage device. By way of example, remote application programs  reside on a memory device of remote computer . For purposes of illustration, application programs and other executable program components such as the operating system are illustrated herein as discrete blocks, although it is recognized that such programs and components reside at various times in different storage components of the computing device , and are executed by the data processor(s) of the computer.","Various modules and techniques may be described herein in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Typically, the functionality of the program modules may be combined or distributed as desired in various embodiments.","An implementation of these modules and techniques may be stored on or transmitted across some form of computer readable media. Computer readable media can be any available media that can be accessed by a computer. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d and \u201ccommunications media.\u201d","\u201cComputer storage media\u201d includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","\u201cCommunication media\u201d typically embodies computer readable instructions, data structures, program modules, or other data in a modulated data signal, such as carrier wave or other transport mechanism. Communication media also includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared, and other wireless media. Combinations of any of the above are also included within the scope of computer readable media.",{"@attributes":{"id":"p-0197","num":"0260"},"figref":["FIG. 15","FIG. 1"],"b":["600","600","102","600","601","602","604","606","608","609","601","610","612"]},"CPU , memory controller , and various memory devices are interconnected via one or more buses, including serial and parallel buses, a memory bus, a peripheral bus, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures can include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, and a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus.","As one suitable implementation, CPU , memory controller , ROM , and RAM  are integrated onto a common module . In this implementation, ROM  is configured as a flash ROM that is connected to the memory controller  via a PCI (Peripheral Component Interconnect) bus and a ROM bus (neither of which are shown). RAM  is configured as multiple DDR SDRAM (Double Data Rate Synchronous Dynamic RAM) that are independently controlled by the memory controller  via separate buses (not shown). The hard disk drive  and portable media drive  are connected to the memory controller via the PCI bus and an ATA (AT Attachment) bus .","A 3D graphics processing unit  and a video encoder  form a video processing pipeline for high speed and high resolution graphics processing. Data is carried from the graphics processing unit  to the video encoder  via a digital video bus (not shown). An audio processing unit  and an audio codec (coder\/decoder)  form a corresponding audio processing pipeline with high fidelity and stereo processing. Audio data is carried between the audio processing unit  and the audio codec  via a communication link (not shown). The video and audio processing pipelines output data to an A\/V (audio\/video) port  for transmission to the television or other display. In the illustrated implementation, the video and audio processing components - are mounted on the module .","Also implemented on the module  are a USB host controller  and a network interface . The USB host controller  is coupled to the CPU  and the memory controller  via a bus (e.g., PCI bus) and serves as host for the peripheral controllers ()-(). The network interface  provides access to a network (e.g., Internet, home network, etc.) and may be any of a wide variety of various wire or wireless interface components including an Ethernet card, a modem, a Bluetooth module, a cable modem, and the like.","The game console  has two dual controller support subassemblies () and (), with each subassembly supporting two game controllers ()-(). A front panel I\/O subassembly  supports the functionality of a power button  and a media drive eject button , as well as any LEDs (light emitting diodes) or other indicators exposed on the outer surface of the game console. The subassemblies (), (), and  are coupled to the module  via one or more cable assemblies .","Eight memory units ()-() are illustrated as being connectable to the four controllers ()-(), i.e., two memory units for each controller. Each memory unit  offers additional storage on which games, game parameters, and other data may be stored. When inserted into a controller, the memory unit  can be accessed by the memory controller .","A system power supply module  provides power to the components of the game console . A fan  cools the circuitry within the game console .","A console user interface (UI) application  is stored on the hard disk drive . When the game console is powered on, various portions of the console application  are loaded into RAM  and\/or caches ,  and executed on the CPU . Console application  presents a graphical user interface that provides a consistent user experience when navigating to different media types available on the game console.","Game console  implements a cryptography engine to perform common cryptographic functions, such as encryption, decryption, authentication, digital signing, hashing, and the like. The cryptography engine may be implemented as part of the CPU , or in software stored on the hard disk drive  that executes on the CPU, so that the CPU is configured to perform the cryptographic functions. Alternatively, a cryptographic processor or co-processor designed to perform the cryptographic functions may be included in game console .","Game console  may be operated as a standalone system by simply connecting the system to a television or other display. In this standalone mode, game console  allows one or more players to play games, watch movies, or listen to music. However, with the integration of broadband connectivity made available through the network interface , game console  may further be operated as a participant in online gaming, as discussed above.","Various processes are illustrated by way of flowcharts herein. It should be noted that the acts involved in these processes can be performed in the order shown in the flowcharts, or alternatively in different orders. For example, in , the acts may be performed in the order shown, or alternatively in different orders (e.g.,  may be performed prior to or concurrent with act ). By way of another example, in , the acts may be performed in the order shown, or alternatively in different orders (e.g., act  may be performed prior to or concurrent with act ).","Although the description above uses language that is specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the document to reference like components and\/or features.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
