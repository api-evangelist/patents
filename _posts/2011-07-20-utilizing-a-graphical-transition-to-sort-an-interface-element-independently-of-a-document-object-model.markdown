---
title: Utilizing a graphical transition to sort an interface element independently of a document object model
abstract: One or more elements can be rendered within a canvas of an interface. The elements can be associated with an element attribute and an element data. The elements can be user interface elements. The elements can be associated with a document object model of a markup language document. The interface can be a Web browser. The elements can be visually sorted differently via a graphical transition effect. The transition effect can execute to sort the elements without modifying objects of the document object model, without changing the elements as specified in a mark document being rendered, and without changing the element data of the elements being sorted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08739023&OS=08739023&RS=08739023
owner: International Business Machines Corporation
number: 08739023
owner_city: Armonk
owner_country: US
publication_date: 20110720
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates to the field of graphical effects and replacement or sorting of visual information and, more particularly, to utilizing a graphical transition to sort an interface element independently of a document object model.","Traditionally, sorting of user interface (e.g., text fields, labels) elements of a Web document (e.g., Web page) requires manipulating the document object model (DOM) associated with the document. For example, JavaScript is often utilized to dynamically alter text field positioning of a Web page by modifying the document object model of the Web page. This process typically triggers deconstruction\/reconstruction of elements and\/or data transfer between elements. For example, when moving an interface element within a DOM, the element can be copied into memory, repositioned within the DOM, and deleted from the original position. Consequently, memory and processor usage can be significantly increased during this process. The problem is further compounded when several subsequent renderings (e.g., multiple sorts) on elements are performed.","One aspect of the present invention can include an apparatus, a system, a computer program product, and method for utilizing a graphical transition to sort an interface element independently of a document object model. One or more elements can be rendered within a canvas of an interface. The elements can be associated with an element attribute and an element data. The elements can be user interface elements. The elements can be associated with a document object model of a markup language document. The interface can be a Web browser. The elements can be visually sorted differently via a graphical transition effect. The transition effect cannot modify the document object model, the elements, or the element data.","Another aspect of the present invention can include an apparatus, a computer program product, a system, and a method for utilizing a graphical transition to sort an interface element independently of a document object model. A transition effect associated with a markup language document can be identified. The transition effect can include a non-native transition property. The non-native transition property can be translated into a native transition property. The native transition property can be associated with a Web browser revision and\/or a rendering engine. The transition effect can be run within the Web browser. The transition effect can visually change the layout of one or more user interface elements and cannot manipulate the document object model of the markup language document.","Yet another aspect of the present invention can include an apparatus, a computer program product, a method, and a system for utilizing a graphical transition to sort an interface element independently of a document object model. A rendering engine can be able to execute a transition effect upon a markup language document. The markup language document can include one or more user interface elements. The markup language document can be associated with a document object model. The transition effect can visually modify the user interface elements and the document object model can be unaffected. The present invention can include a data store able to persist a data set associated with the transition effect. The transition effect can be associated with a duration value and a delay value.","The present disclosure is a solution for utilizing a graphical transition to manipulate an interface element independent of a document object model. In the solution, a graphical transition effect can be performed to alter the visual presentation of interface elements of a markup language document (e.g., Web page). The visual presentation can include, element ordering, element position, and the like. For example, a traditional element sort functionality can be \u201cshort circuited\u201d by visually sorting elements without manipulating the document object model (DOM) structure. In one embodiment, a Cascading Style Sheet transition effect can be utilized to dynamically alter the visual presentation of interface elements in a Web page. In the embodiment, an element (e.g., <div>) can be repositioned using an offset value (e.g., margin-left: \u221235px) from a home position of the element via the transition effect properties.","As will be appreciated by one skilled in the art, aspects of the present invention may be embodied as a system, method or computer program product. Accordingly, aspects of the present invention may take the form of an entirely hardware embodiment, an entirely software embodiment (including firmware, resident software, micro-code, etc.) or an embodiment combining software and hardware aspects that may all generally be referred to herein as a \u201ccircuit,\u201d \u201cmodule\u201d or \u201csystem.\u201d Furthermore, aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium(s) having computer readable program code embodied thereon.","Any combination of one or more computer readable medium(s) may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be, for example, but not limited to, an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system, apparatus, or device, or any suitable combination of the foregoing. More specific examples (a non-exhaustive list) of the computer readable storage medium would include the following: an electrical connection having one or more wires, a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), an optical fiber, a portable compact disc read-only memory (CD-ROM), an optical storage device, a magnetic storage device, or any suitable combination of the foregoing. In the context of this document, a computer readable storage medium may be any tangible medium that can contain, or store a program for use by or in connection with an instruction processing system, apparatus, or device.","A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein, for example, in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms, including, but not limited to, electro-magnetic, optical, or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate, propagate, or transport a program for use by or in connection with an instruction processing system, apparatus, or device.","Program code embodied on a computer readable medium may be transmitted using any appropriate medium, including but not limited to wireless, wireline, optical fiber cable, RF, etc., or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages, including an object oriented programming language such as Java, Smalltalk, C++ or the like and procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The program code may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider).","Aspects of the present invention are described below with reference to flowchart illustrations and\/or block diagrams of methods, apparatus (systems) and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and\/or block diagrams, and combinations of blocks in the flowchart illustrations and\/or block diagrams, can be implemented by computer program instructions.","These computer program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.","These computer program instructions may also be stored in a computer readable medium that can direct a computer, other programmable data processing apparatus, or other devices to function in a particular manner, such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function\/act specified in the flowchart and\/or block diagram block or blocks.","The computer program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other devices to cause a series of operational steps to be performed on the computer, other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions\/acts specified in the flowchart and\/or block diagram block or blocks.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","200","300","100","111","110","130","110","110","130","111","132","130","112","116","110","112","110","112","130","1","110","112","130"]},"It should be appreciated that the disclosure is distinct from traditional solutions which manipulate the underlying data organization to present a different view of interface elements. The disclosure can utilize a graphical transition effect to visually change interface elements within a rendered view  leaving data within data model view  unaffected. That is, the disclosure leverages the separation of content and presentation principles of markup languages to efficiently reorganize interface elements without affecting the document object model of a document. For example, data model view  shows the application of transition  results in document  remaining unchanged (e.g., element order is unchanged).","In flow , a transition  can be utilized to visually reorganize (e.g., sort) the layout of interface elements - within interface  based on a sort ordering. For example, transition  can change the z-ordering of elements - via a z-index property presenting elements - from a row to a three dimensional stack (e.g., layout ). The transition  can be a DOM independent graphical effect manipulating the visualization of interface elements over a duration of time. Transition  can be associated with one or more transition effects of a Cascading Style Sheet (CSS) transition (e.g., CSS3), Dynamic Hypertext Markup Language (DHTML) transition, and the like. Transition  can be associated with one or more properties including, but not limited to, duration, delay, height, length, margin, padding, and the like. Transition  can be triggered from an event including, but not limited to, onclick, hover, focus, and the like.","Transition  can be customizably modified to arbitrarily affect layout of elements -. In rendered view , the application of a transition  can occur as reordering via transition  action. The action can be triggered automatically and\/or manually based on transition  configuration. Over duration , elements - can be manipulated within interface  via transition . Duration  can conform to a timing value including a static value, a dynamic value, and the like. For example, duration  can be a cubic-bezier timing function. In one embodiment, duration  can be set to minimize intermediate positions of elements -, so that the no visual motion is shown upon a display. In other words, a transition  can be established that effectively causes a visual re-sorting or re-positioning (e.g., visual movement of elements - within a display) to occur without visual effects of the transitions being seen by an end-user.","In one embodiment, transition  can be an implicit transition able to modify CSS properties over a duration of time. In the embodiment, transition  can include multiple properties associated with a CSS language. For example, transition  can move elements - to the bottom of interface  using the bottom property.","Transition  can perform traditional sorting functionality (e.g., alphabetical sort) on interface elements and\/or element values. That is, transition  can dynamically present a sorting of interface elements without requiring DOM manipulation. For example, transition  can present interface elements - sorted by descending order of the element name. In one embodiment, element - values can be evaluated and a sort order can be determined. In the embodiment, sort order can be visually represented and presented within an interface. That is, the disclosure can reduce memory and processor consumption typically associated with interface element sorting of a markup language document.","As used herein, a markup language document can be associated with a Uniform Resource Identifier. Markup associated with markup language document can include, but is not limited to, presentational markup, procedural markup, descriptive markup, and the like. Markup language document can include, but is not limited to, HTML, Extensible HTML (XHTML), Extensible Markup Language (XML), Standard Generalized Markup Language (SGML), and the like.","Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. The disclosure can permit a \u201csort preview\u201d functionality which can be quickly modified with minimal computing resource usage. That is, multiple applications of transitions can allow customized views of interface elements - without necessitating mutable access to the DOM. It should be appreciated that transition  can be temporary and layout  can be reset utilizing traditional interface interactions. For example, a browser page reload action can cause layout  to be reset to an original rendering layout conforming to the DOM.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 2","b":["200","200","100","300","200","230","220","260","230","264","262"]},"Rendering engine  can be a hardware\/software component for presenting markup language document  within an interface . Engine  functionality can include, but is not limited to, document object model processing, logic processing, layout rendering, formatting, and the like. Engine  can conform to a Hypertext Markup Language (HTML), Extensible HTML (XHTML), Extensible Markup Language (XML), and the like. Engine  can be a component of a Web browser, electronic mail client, visualization application, and the like. That is, engine  can be a localized rendering component able to visually sort elements within a markup language document. Engine  can conform to traditional and\/or proprietary rendering engines including, but not limited to, APPLE SAFARI WEBKIT, GECKO, and the like.","Sorter  can be a hardware\/software entity able to arrange an interface element  based on a ordering and\/or a category. Sorter  functionality can include, but is not limited to, sort order selection, sort category selection, algorithm selection, element position determination, and the like. Sorter  can perform traditional and non-traditional sorting including, but not limited to, alphabetical sort, alphanumeric sort, numeric sort, shuffling, and the like. Sorter  functionality can be arbitrarily complex permitting extensible sort capabilities. In one instance, sorter  can sort elements by name, distance, metrics, and the like.","Translation component  can be a hardware\/software element able to compute visual positioning information for interface elements based on sort data . Component  can utilize data obtained from document object model  (e.g., element height, element width) and sort data  to compute a layout positioning for element . For example, entry  can indicate the reordering for an element A which can be used to generate a visual position. Component  can be used to compute a position for the element based on the sort which can be a relative offset. For example, in transition property , element A can be repositioned at an offset of twice the height of the element.","Transition manager  can be a hardware\/software entity able to evaluate and\/or perform transition . Manager  functionality can include, transition property evaluation, syntax evaluation, transition management, transition processing, and the like. Manager  can be utilized to store transition  for application upon any document . That is, a library of previously established transitions can be maintained to perform sorting functions. For example, manager  can permit selection of multiple sorts such as element value based sort and a metric based sort.","Transition  can be a graphical effect associated with document . Transition  can include, but is not limited to, a stylesheet, an algorithmic function, and the like. In one instance, transition  can be an embedded style sheet within document . In another instance, transition  can be an external style sheet programmatically linked to document . Transition  can include multiple transition properties conforming to a World Wide Web Consortium (W3C) transition. Properties can include static values, dynamic values, and the like. For instance, transition  can include DOM derived values including, but not limited to, height, width, position, margin, and the like. Transition  can be associated with an element, an element container, an event, and the like. For example, transition  can be run when a cursor hovers over a selected element.","The transition  can be triggered based on any definable event, such as an event associated with a selection of a sort option. For example, a sort button can appear on a screen, and a transition  that effectuates the sort can fire whenever the sort button is selected. Sort criteria can also be implemented, when implementing the transition that results in a visual sorting of elements.","Markup language document  can be an annotated digital artifact which can be syntactically distinguishable from text. Document  can include, but is not limited to, an HTML file, an XML file, and the like. In one instance, document  can be associated with transition . For example, document  can be a Web page constructed from HTML markup and Cascading Style Sheet (CSS) data. Document  can be stored within device , data store , a communicatively linked data store, and the like.","Document object model  can be a cross-platform and language-independent model for representing and interacting with markup language objects (e.g., interface element ). Model  can conform to World Wide Web Consortium (W3C) DOM specifications. Model  can include position  information which can be utilized to visually reorganize element . Position  can be implicitly and\/or explicitly defined within the DOM. For example, position of an element A can be determined by analyzing the location within the DOM structure (e.g., first element in the DOM).","Interface element  can be a markup language object which can be presented within interface . Element  can include, but is not limited to, text fields, text areas, checkboxes, radio dialogs, interface buttons, labels, and the like. It should be appreciated that interface element  can include non-renderable elements including, but not limited to, hidden fields, non-renderable tags, and the like. Element  can include a data value, an attribute, a property and the like. For example, element  can be a text field with a corresponding value of A. In one instance, interaction with element  can trigger transition  to be processed.","Interface  can be a user interactive component permitting interaction with a markup language document  and\/or a transition . Interface  can be present within the context of a Web browser application, an electronic mail application, a file manager application, and the like. Interface  capabilities can include a graphical user interface (GUI), voice user interface (VUI), mixed-mode interface, touch sensitive interface, and the like. Interface  can be communicatively linked to computing device .","Sort data  can be one or more data sets for determining a sort order for elements within . Sort data  can include, but is not limited to, element identifier, home positioning information, sort order information, and the like. Sort data  can be utilized to visually reorganize elements within interface . Sort data  can be stored within data store , computing device , engine , and the like.","Data store  can be a hardware\/software component able to store sort data . Data store  can be a Storage Area Network (SAN), Network Attached Storage (NAS), and the like. Data store  can conform to a relational database management system (RDBMS), object oriented database management system (OODBMS), and the like. Data store  can be communicatively linked to computing device  in one or more traditional and\/or proprietary mechanisms.","Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. Configuration setting  can be one or more options for configuring system  behavior. Setting  can include, but is not limited to, sorter  settings, translation component  options, transition manager  parameters, and the like. System  functionality can be embodied within an application programming interface (API), plug-in, and the like. It should be appreciated that sort data  can be temporarily persisted for the duration of the transition .","It should be understood that one or more components of system  can be optionally omitted providing system  functionality is maintained.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["300","300","100","200","300","300"]},"In step , a document object model (DOM) associated with a markup language document can be selected. In step , DOM interface elements can be rendered within an interface. In step , an element can be selected based on a sort ordering. Selection can be based on DOM element ordering, element values, an element container, and the like. For example, a portion of a markup language document (e.g., a subset of elements) can be visually sorted and presented. Sort ordering can be automatically and\/or manually determined. For example, a user can select a sort ordering (e.g., alphabetical) from a pop-up dialog. In step , the home position of an element can be determined. The position can be determined utilizing conventional markup language processing. For example, attribute values specifying the default position of an interface element can be obtained during DOM processing and\/or initial rendering (e.g., step ).","In step , a transition value can be calculated for the element. The transition value can be an offset value of the home position obtained within step . In step , the element can be visually rendered using a transition effect and the translation value without modifying the DOM. The transition effect can include multiple graphical effects including, but not limited to, element hue manipulation, background changes, wipes, fades, blurs, and the like. In step , if there are more elements present, the method can continue to step , else return to step . Steps - can be continuously run for each element within the DOM to be visually sorted. In step , the method can end.","Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that the document object model can be unmodified during the method handling operations.","The flowchart and block diagrams in the  illustrate the architecture, functionality, and operation of possible implementations of systems, methods and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of code, which comprises one or more executable instructions for implementing the specified logical function(s). It should also be noted that, in some alternative implementations, the functions noted in the block may occur out of the order noted in the figures. For example, two blocks shown in succession may, in fact, be processed substantially concurrently, or the blocks may sometimes be processed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and\/or flowchart illustration, and combinations of blocks in the block diagrams and\/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts, or combinations of special purpose hardware and computer instructions."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
