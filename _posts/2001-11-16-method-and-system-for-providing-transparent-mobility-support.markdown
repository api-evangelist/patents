---
title: Method and system for providing transparent mobility support
abstract: A system and method for providing transparent mobility support employs a mobile service in an API layer of an operating system to leverage the capability of a session establishment service that implements the Session Initiation Protocol or the like for locating a remote node for session setup and detecting address change of the remote node. When an application on a correspondent host (CH) wants to communicate with a second application on a mobile host (MH), the mobility service of the CH uses the session establishment service to locate the mobile host and set up a session with it, and then sets up a transport data channel for the session. When the MH changes its network address, the session establishment service of the CH finds out the new address through the operation of the session establishment protocol and reestablishes the session with the MH. The new address of the MH is then communicated to the CH's mobility service, which resets the data channel to connect to the new address, thereby allowing communication data from the first application to continue to flow to the MH.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07146418&OS=07146418&RS=07146418
owner: Microsoft Corporation
number: 07146418
owner_city: Redmond
owner_country: US
publication_date: 20011116
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["This invention relates generally to network communications involving mobile devices, and more particularly to the handling of network communications between a user computer and a mobile device when the network address of the mobile device changes.","With the rapid developments in wireless networking, mobile devices, such as laptop computers, personal digital assistant (PDA) devices, high-end cellular phones, etc., are playing an increasingly important role in network communications. Mobile devices typically communicate with other devices by transmitting and receiving data over radio frequency (RF) channels. The wireless nature of the RF communications allows the devices to be mobile, i.e., to move from one place to another without losing network connectivity.","Although the mobility of mobile devices provides great freedom and convenience to their users, there are technical challenges in supporting device mobility. One major issue is how to maintain communication continuity when a mobile device moves around. When a mobile device crosses a boundary between subnets, it may be assigned a new network address. When the mobile device changes its address, all the computers it has network connections with (called \u201ccorrespondent hosts\u201d) lose communication with it. The term \u201cnetwork connection\u201d is used in a generic way to refer to a data stream. This data stream may be connection oriented or connectionless. They have to rediscover the address of the mobile host and to restart their communications with it. Thus, the address change of the mobile host can be disruptive to the operation of many applications.","Conventionally, in order to deal with such disruption, an application has to include code to handle the mobility of the mobile devices. Alternatively, to keep mobility transparent to the applications, schemes such as Mobile IP (for TCP\/IP networks) are employed that require mapping between a permanent address of the mobile host (also called the home address of the mobile host) and its current address (also called care of address of the mobile host) and the use of encapsulation or extension headers for continued communication between the mobile host and the nodes it had active sessions with. Code for mobility aware applications can be complex with high operational overhead, and having to develop the code to support mobility handling is burdensome to developers of the software applications. On the other hand, a scheme such as Mobile IP results in a packet overhead for the life of the session after the address has changed. It also requires that a mapping of the home address to the current address of the mobile host be permanently maintained.","Accordingly, there is currently a need for a mobility support scheme that does not require applications to include extensive code for mobility support or to be concerned with the details of the mobility support operation and to avoid the permanent packet and context overhead borne by schemes that keep mobility transparent to the applications.","In view of the foregoing, the present invention provides a system and method for a user computer that has a first application communicating with a second application on a mobile host (MH) to handle, in a way that is transparent to the applications, an address change of the mobile host (MH) to avoid disrupting the communications between the two applications. Each of the user computer and the mobile host has a mobility service module for handling the mobility support operation. The mobility service is implemented in an Application Programming Interface (API) layer of the operating system such that an application can easily use it for handling network communication operations as they would with a conventional API component over TCP\/IP calls. The mobility service interacts with a session establishment service that implements a protocol for session establishment and handling such as the Session Initiation Protocol (SIP), that is capable of locating a remote party to set up a session and tracking address changes of the remote party. The protocol for session establishment and handling are referred to hereinafter for the sake of brevity as the \u201csession establishment protocol.\u201d","When the first application on the user computer wants to communicate with the second application on the mobile host, it calls the mobility service of the user computer to set up the communication channel. The mobility service of the user computer uses the session establishment service to locate the mobile host and to set up a session with it. Once a session is set up, the mobility service of the user computer sets up a transport data channel of a type specified by the application for the session. Communications between the two applications are then sent over the transport data channel.","When the mobile host changes its network address, the session establishment service of the user computer automatically finds out the new address through the operation of the session establishment protocol and reestablishes the session with the mobile host using the new address. The new address of the mobile host is also communicated to the mobility service of the user computer. The mobility service resets the transport data channel to connect to the new address, thereby allowing communication data from the first application to continue to flow to the mobile host. Any data buffered during the mobility transition phase is resent on the new data channel to the mobile host.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The following description begins with a description of a general-purpose computing device that may be used in an exemplary system for implementing the invention, and the invention will be described in greater detail with reference to . Turning now to , a general purpose computing device is shown in the form of a conventional personal computer , including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the personal computer , such as during start-up, is stored in ROM . The personal computer  further includes a hard disk drive  for reading from and writing to a hard disk , a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk , a removable magnetic disk , and a removable optical disk , it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories, read only memories, storage area networks, and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk , magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more applications programs , other program modules , and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and a pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB) or a network interface card. A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, personal computers typically include other peripheral output devices, not shown, such as speakers and printers.","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the personal computer  typically includes a modem  or other means for establishing communications over the WAN . The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","In the description that follows, the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers, unless indicated otherwise. As such, it will be understood that such acts and operations, which are at times referred to as being computer-executed, include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer, which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However, while the invention is being described in the foregoing context, it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operations described hereinafter may also be implemented in hardware.","Referring now to , the present invention is directed to a scheme for providing transparent user\/application mobility support for communications involving a mobile device. As shown in , a user application  on a first computer  communicates over a network , such as the Internet, with another application  running on a second computer . In accordance with an aspect of the invention, the second computer  is a mobile device, whose network address may change from time to time as its location changes. The second computer  is hereinafter referred to as the mobile host (MH), while the first computer  is referred to as the correspondent host (CH).","During the course of communication between the user application  on the correspondent host and the application  on the mobile host, the mobile host  may move to a different subnet and, as a result, obtain a new network address. Conventionally, if the operating systems of the two computers do not support transparent mobility, when the mobile host  changes its address, all of its correspondent hosts lose their communication connections with it. They have to somehow discover the new address of the mobile host and restart their communication sessions. This operation is disruptive to many applications.","The present invention solves this problem by providing a scheme for transparent mobility support that automatically locates the new address of the mobile host and reestablishes the data channel between the two computers based on the new address, without requiring the attention of the applications conducting the communications. This scheme leverages the implementation of a session establishment protocol, such as the Session Initiation Protocol (SIP), that supports automatic finding of the address of a session participant, setting up sessions, and tracking address changes of the session participant. As shown in , each of the mobile host and correspondent host has a session establishment service  or  that implements the session establishment protocol. Each host is further provided with a mobility service component  or  for interacting with the session establishment service to achieve transparent mobility support.","In accordance with a feature of the invention, the mobility service  or  is implemented in the Application Programming Interface (API) layer of the operating system of the computers. By putting the mobility service in the API layer, an application can easily use the mobility service to handle network communication operations by simply calling functions exposed by the mobility service, similar to the way an API component over a TCP\/IP driver is conventionally used by applications for network communications. The mobility service uses the infrastructure of the network implementing the session establishment protocol for handling client mobility. It forms a \u201cmobility-aware\u201d layer between the client (i.e., the application) and the data transport. As described in greater detail below, this \u201cmobility-aware\u201d layer handles data channel maintenance during mobility transition of the mobile device. The session establishment service, on the other hand, handles the setting and resetting of a session as one or both parties of the session move and change their addresses.","In accordance with another feature of the mobility support scheme of the invention, each node or application involved in the communications is identified by a unique name rather than by its routable network address. Thus, for example, the application  on the correspondent host  intending to talk to the application  on the mobile host  identifies the application or the mobile host by a name instead of the current network address of the mobile host. In other words, the application  (which is the client of the mobility service ) binds to a name and communicates with a name. It stays oblivious of mobility-caused address changes, which are handled by the mobility service  leveraging the session establishment service .","It will be appreciated that the name used by the application  on the correspondent host to refer to a remote communication party may identify the remote application or the node (i.e., the mobile host) on which the remote application runs. It is not a critical point whether the name is that of the remote application or the mobile host, as long as the name can be used through the aid of network directory services to obtain the network address of the node to enable delivery of communication data to the intended remote application. Since in a general sense the mobile host and the applications or services running thereon are both \u201cmobile,\u201d the term \u201cmobile entity\u201d is uses herein to mean either a mobile node or an application or service on the mobile node. The name used to identify a mobile entity may be, for example, something similar to an e-mail moniker (e.g., Fred@abcd.com) or a fully qualified domain name (FQDN). Of course, other types of names may be used. An important advantage of identifying a mobile entityby a name is that a name provides a higher level of abstraction than an address and can stay constant while the mobile host or the remote application changes its address due to mobility. A network address of a mobile entity does not really identify the mobile entity. Rather, it only identifies the mobile entity's current physical point of attachment. For network communications involving mobile entities, the address by which a mobile entity is reachable can change any time, and it is not easy for an end application communicating with that mobile entity to constantly adapt itself to the address changes. By allowing an application to identify the remote party by a name, the mobility service is able to hide all name-to-address mapping from the application, thereby relieving the application of the burden of handling mobility","Still referring to , when the application  on the correspondent host  wants to communicate with the application  on the mobile host , it calls the mobility service  to set up a connection with the mobile host, which is identified by its unique name. The mobility service  translates the name to an address using the Domain Name Service (DNS) or some other name service that machine is configured to use. It then uses the session establishment service  to locate the mobile host  and to set up a session with the mobile host. Once the session is set up, the mobility service  sets up a data channel for the session using the transport protocol specified by the user, such as the TCP or UDP. Communications between the application  on the correspondent host and the application  on the mobile host are then conducted over that data channel.","When the mobile host  changes its address, the session establishment service  of the correspondent host  automatically finds out the new address of the mobile host through the infrastructure and operation of the session establishment protocol. Upon learning of the address change, the session establishment service  reestablishes the session with the mobile host. Once the session is reestablished, the new address of the mobile host is communicated to the mobility service  of the correspondent host. The mobility service  then resets the data channel to connect the correspondent host to the new address. Any data buffered during the mobility transition phase (i.e., the period between the mobile host's changing its address and the correspondent host's resetting the data channel for the new address) is then resent over the reset data channel to the application  on the mobile host . Since the application  identifies the intended recipient of its communication data by the name of the remote application rather than by the address of the mobile host, it is not affected by the address change and does not have to do anything in response to the address change. The application  on the mobile host also does not have to be aware of or do anything to handle the address change. Thus, the mobility support is carried out transparently to the applications  and .","In a preferred embodiment as illustrated in , the session establishment service implements the Session Initiation Protocol (SIP), which is defined in Request for Comments (RFC)  of the Internet Engineering Task Force (IETF), and is hereinafter referred to as the SIP service . Moreover, the mobility service component is implemented in the Winsock interface  of the Windows operating system of the Microsoft Corporation and is hereinafter referred to as the \u201cWinsock over SIP\u201d (WISP) module . The Winsock interface  is part of the API layer of the operating system disposed between applications and the TCP\/IP or UDP\/IP stack  for handling data communications via the TCP\/IP or UDP\/IP.","By way of example,  are provided for illustrating how the WISP module  in the embodiment of  with the help of the SIP service  locates a remote party and sets up a data channel for communications with it, and how the WSIP module handles the address change of the remote party to provide mobility support that is transparent to the application using the data channel. In this example, the application  on the correspondent host  identifies itself by the name of Fred@abcd.com (hereinafter referred to as \u201cFred\u201d for simplification) and identifies the remote application  it wants to communicate with as Bob@wxyz.com (hereinafter referred to as \u201cBob\u201d for simplification).","Referring to , the application  (i.e., Fred) on the correspondent host  asks that a TCP connection be set up with Bob. In response to the application's request, the WSIP module  calls the SIP service  with appropriate parameters to set up a SIP session. The parameters passed by the WSIP  to the SIP service  indicates that the SIP session is to be set up for supporting a TCP connection with Bob. In response, the SIP service  of the correspondent host  sends out a SIP INVITE request message  intended for Bob. This request message  carries Fred's IP address and the port to be used for the TCP connection. The TCP connection information is sent in the Session Description Protocol (SDP) description  carried in the SIP INVITE request message . The request message  goes to a local server  at company ABCD (e.g., sip@abcd.com). The local server  recognizes that the request  is not meant for it and forwards it to the local server  for the company WXYZ (e.g., sip.wxyz.com). A Domain Name System (DNS) SRV record is used to look up this server  in this forwarding operation.","The server  (sip.wxyz.com) of the WXYZ local network has the current address of mobile host on which Bob runs at any time in its database. When it receives the SIP INVITE message, the server  directs the message to the current address (shown as \u201cADDRESS\u201d in ) of the mobile host. As illustrated in , the mobile host  is currently linked to a subnet  at b.wxyz.com.","In response to the SIP INVITE message request, the mobile host returns a response message  to the correspondent host. The response message  contains the network address of the mobile host and specifies the port to be used for data communication with Fred. This information is in the SDP description  in the response  to the SIP INVITE request. The correspondent host  then exchanges SIP acknowledgment (ACK)  with the mobile host . The SIP session is now set up. The WSIP module  of the correspondent host gets the SDP information from the SIP service  and extracts the current IP address and port information about Bob. It then uses the TCP\/IP driver  () to set up a TCP connection to the current network address of the mobile host and sends the application data  over this TCP connection.","The way the WSIP  handles mid-call mobility (i.e., the case where the remote party, in this case Bob, moves while there is an ongoing SIP session and TCP channel with it) is now described with reference to . Continuing the above example, Fred@abcd.com (Fred) and Bob@wxyz.com (Bob) have a SIP session already set up, and Bob@wxyz.com is mobile. As Bob's node (i.e., the mobile host ) moves its location from one subnet (b.wxyz.com) to another subnet  (c.wxyz.com), it receives a new network address (shown in  as \u201cADDRESS\u201d). For simplicity and clarity of illustration, some of the network components between the correspondent and mobile hosts are not shown in . In response to the address change, the SIP service  of the mobile host sends a SIP INVITE request  to Fred's node (i.e., the correspondent host ) without going through any intermediate SIP proxy server. The SIP INVITE request  contains an updated SDP description  with the new IP address of the mobile host. This SIP INVITE request is a one-way message. As a result of receiving this request, the SIP service  on the correspondent host  notes the new address and uses it to reset the SIP session. The SIP service  then informs the mobility service  about the address change of the mobile host.","The mobility service  of the correspondent host extracts the new IP address of the mobile host from the SDP description, and makes an I\/O control (IOCTL) call into the TCP driver  () to get the buffered data on the connection based on the old address of the mobile host from the buffer . This prevents the buffered data from being lost when the TCP connection is terminated. The mobility service  sets up a new TCP connection using the new address of the mobile host . Any new application data received from the application between the termination of the old connection and the setup of the new connection is buffered by the mobility service behind the data unbuffered by it from the old connection for the purpose of sending it on the new connection. It should be noted that the setting up of the new TCP connection may be performed by the mobility service of Bob. The unbuffering of the data from the old connection end point and buffering of any data received from the local application during the switchover behind the unbuffered data is still done as part of moving over to the new connection at the correspondent host. Once the new connection is set up, the old TCP connection is terminated. The setting up of the new connection and the termination of the old is referred to as resetting of the TCP connection.","After resetting the TCP connection, the mobility service  sends the buffered data  over the new TCP connection. All new communication data  generated by the application  now flows over this new TCP connection. In this way, the transition to a connection for the new mobile host address is completed, and this transition is transparent to the application  and the application .","It should be noted that in the process described above those TCP data buffered at the correspondent host and waiting for acknowledgment from the mobile host will not reach the mobile host over the old connection due to its changed address and is therefore resent when the new connection is set up using the new address. The transition time, i.e., the time elapsed between the mobile host's changing its address and the setting up of the new connection, may represent a delay that is considered too long for some real-time clock (RTC) applications, such as voice-over-IP (VoIP) telephony applications. To avoid this delay, an alternative embodiment uses IP layer tunneling of data packets to ensure session continuity during the transition period. Specifically, in this embodiment, a node monitors its TCP connections. When the mobile host changes its IP address, the WSIP  of the mobile host  notifies all of its TCP peers (i.e., correspondent hosts participating in sessions with the mobile host) about the new address using the SIP INVITE messages. It keeps the context for the old TCP connection intact so as to continue to accept any packets that are received for it. In response, the correspondent host  sets up a tunneling entry in its routing table  based on the old and new IP addresses of the mobile host. Due to this tunneling entry in the routing table, packets for the mobile device have the new address in the outer IP header and the old address in the inner IP header. The correspondent host uses tunneling to transmit the packets of an on-going TCP connection to the new IP address while it sets up a new TCP connection, one using the new address. The tunneling entry is removed from the routing table and the old TCP connection is terminated when the new TCP connection is ready. Likewise, the mobile host removes the old TCP connection completely when the new one has been formed.","Although the example above shows the TCP connection setup done by the correspondent node, it could be done by the mobile node also. The node responsible for doing it, whether it is the mobile node or the correspondent node, can be specified in the SDP sent in the SIP INVITE as the proposed initiator of the connection. In case there is a scenario where both nodes initiate the INVITE and specify different initiators for the connection, some criteria such as the \u201cnode with the lower IP address wins\u201d for instance can be used to resolve the contention. Also, each node, if it has data buffered on the old connection, would extract it at its end in order to send it on the new connection once it gets set up.","When the application  (i.e., Fred) wants to terminate the connection with the other application  (i.e., Bob), it makes an API call to the WSIP module . In response, the WSIP  terminates the TCP connection. It also terminates the SIP session through an API call into the SIP service . As a result, the SIP service  terminates the session with Bob, through a BYE request , and the connection is now gone.","In the embodiment described above in connection with , the transport protocol involved is the TCP. It will be appreciated, however, other transport protocols, such as the UDP, may also be used. The difference between TCP and UDP transport protocol handling that in case of UDP, there is no buffered data kept on a UDP socket by UDP, unlike the case with TCP. Therefore data that was sent during the window between the mobile host changing its address and the correspondent host switching to the new address for the data communication is lost. The rest of the operation for the transparent handling of mobility is still the same. An intelligent buffering scheme at the mobility service, at the cost of some complexity, can be used to reduce the loss of such data to a minimum.","Also, although the description above is directed to a \u201cdevice mobility\u201d scenario where a remote node, namely the mobile host, has moved, the mobility support scheme of the invention can also handle an \u201capplication mobility\u201d scenario where the remote application has been moved to a different node. In the \u201capplication mobility scenario,\u201d because the remote application is identified by a name (e.g., Bob in the example of ), an application (e.g., Fred in ) that wants to communicate with the remote application does not have to know that the remote application is now at a different location. For example, when Fred wants to talk to Bob, it calls the WSIP module , which then uses the SIP service  to set up a session with Bob. The SIP INVITE message sent out by the SIP service  will be routed to Bob's new location by means of the operation of the infrastructure of the SIP implementation. A session is then set up, and a transport data channel is set up in that session for Fred and Bob to send communication packets to each other.","Also, although the scheme is explained in terms of mobility of just one node, it will work when both nodes move simultanously. In this case, each will send the INVITE to other. These INVITEs will be directed to the new location of the peer node by the proxy servers thus enabling session reinitiation to succeed.","The following description lists several functions of the mobility service in the embodiment of  to be supported for performing the mobility support operation.\n\n","This function does a SIP INVITE to setup the control connection with the remote user. When the SIP INVITE call is successful, it sets up a TCP connection with the remote user.\n\n","This function listens for a SIP INVITE and a connection request. It accepts or denies a SIP INVITE based on SIP and SDP parameters.\n\n","This function accepts the TCP connection corresponding to the accepted SIP call. It opens a new socket for the TCP connection end point and returns it as its return value\n\n","This function sends data on the TCP connection\n\n","This function receives data on the TCP connection\n\n","This function closes the SIP endpoint. This action closes the SIP call and terminates the TCP connection associated therewith.\n\n","This function shuts down the SIP endpoint for sending, receiving, or both. It does the same to the TCP socket.","The Select and Ioctlsocket calls are not given above but will apply to the SIP-enabled data socket in a manner similar to the above functions.","In view of the many possible embodiments to which the principles of this invention may be applied, it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example, those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore, the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["While the appended claims set forth the features of the present invention with particularity, the invention, together with its objects and advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings of which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 5","FIG. 3"]}]},"DETDESC":[{},{}]}
