---
title: Render engine for spreadsheet
abstract: A render engine for a spreadsheet application is described. The render engine facilitates the rendering of cell regions containing data that are maintained by both a spreadsheet application (user-defined cell region) and/or a third-party application (application-defined cell region). In particular, an embodiment of the render engine facilitates the repositioning of one or more existing cell regions within a spreadsheet interface, when the insertion of a new cell region is determined to cause a layout conflict with one or more existing cell regions. Repositioning of the existing cell regions is achieved without overwriting any cell information, and without breaking any formulas contained within an affected cell.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08707156&OS=08707156&RS=08707156
owner: Business Objects, S.A.
number: 08707156
owner_city: Levallois-Perret
owner_country: FR
publication_date: 20090402
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure generally relates to spreadsheet applications. Some example embodiments relate more specifically to methods and apparatuses for rendering regions of cells within a spreadsheet.","Spreadsheet applications (e.g., MICROSOFT EXCEL, GOOGLE DOCS, OPEN OFFICE) are primarily designed for performing computations on numeric values and presenting numeric data. Typically, a spreadsheet application displays multiple cells that together make up a grid consisting of rows and columns. Each spreadsheet cell may be associated with a variety of cell properties. For instance, a cell may contain a simple data value including alphanumeric text or a numeric value. Similarly, a cell may contain a formula for calculating a numeric value. When a spreadsheet cell contains a formula, the formula defines how the contents of that cell are to be calculated from the contents of any other cell (or combination of cells) each time any cell is updated. Finally, a cell may be associated with one or more cell properties defining how the data (directly defined, or derived by formula) are to be formatted when displayed.","The data displayed within the cells of a spreadsheet are typically stored within one or more data structures (e.g., cell objects) that are maintained and managed by the spreadsheet application, or in some cases, a third-party application. The spreadsheet component that reads the data from the spreadsheet application's native cell storage structure(s) and generates a visual representation of the data is referred to as a render engine. It is the render engine, for example, that processes the various cell properties (e.g., data, formulas and formatting directives) associated with each spreadsheet cell to generate a visual representation of the data associated with each cell. When a user changes the data value of a cell, the render engine updates the visual representation of that cell, as well as any other cells with formulas that are dependent upon the updated cell.","Recently, software application vendors\u2014particularly vendors with software applications used for managing, presenting and reporting business information, such as financial data\u2014have been increasingly providing a mechanism for presenting application data within a cell region of a spreadsheet in a spreadsheet application. To distinguish between cell regions that display data maintained and managed by a third-party application and cell regions that display data maintained and managed by the spreadsheet application, those cell regions displaying data maintained and managed by a third-party application are referred to herein as application-defined cell regions, while those cell regions displaying data that are maintained and managed by the spreadsheet application are referred to herein as user-defined cell regions.","Unfortunately, the native render engine of many spreadsheet applications is not designed to adequately handle some of the advanced data processing and presentation techniques that are made available by third-party applications. Specifically, in a situation where a third-party application is configured to present data via the interface of a spreadsheet application, when the processing of certain commands results in the insertion of a new cell region or the appendage of new cells to an existing cell region, the native render engine of the spreadsheet application may not generate a proper visual representation of the affected cells. In some cases, the insertion of a new cell region, or the appendage of new cells to an existing cell region, results in the overwriting of the cells of another existing cell region. This may occur, for example, as a result of processing a data insertion command, a data refresh command, or a command associated with an advanced data presentation method. In any case, oftentimes the result is that cell properties of an existing cell are overwritten and lost. This may have a domino effect as it impacts not only those cells which are directly overwritten, but also any cells that contain formulas that reference a cell that is overwritten. The following examples provide a more precise description of the nature of the problem.","In , two tables (i.e., Table A and Table B) are shown prior to, and after, a data refresh command is processed by the native render engine of a spreadsheet application. In this example, Table A contains and displays data that are managed and maintained by a third-party application. As such, Table A is an application-defined cell region and is subject to being asynchronously and dynamically refreshed by the third-party software application. When the data refresh command is processed, the data set increases and additional rows of data are appended to the bottom of Table A. For example, the rows in Table A associated with ID's ,  and  are appended to the bottom of Table A as a result of processing the refresh command. Consequently, the first three columns of the four columns in Table B are shifted downward by three cells to accommodate the addition of the three rows to Table A. As illustrated in , as a result of processing the data refresh command, the rows of Table B are incorrectly displayed. In this example, only the layout of the cell region comprising Table B appears to be broken. However, it should be readily apparent that the problem is compounded when formulas are involved. For instance, if any data displayed in Table B are derived from a formula, the repositioning of the cells of Table B may break the formula, resulting in incorrect data being displayed. Similarly, when the cells of another cell region (e.g., other than Table B) derive their values from the data in the cells of Table B, the repositioning of cells in Table B will break the formulas associated with those other cells and again cause incorrect data to be displayed.","To address the problem illustrated in , in some scenarios, the user of the spreadsheet application may be left with no choice but to resolve the layout issue manually, for example, by anticipating the potential size of Table A, and ensuring that the destination region is large enough to display any future cells appended to Table A. However, when Table A is an application-defined cell region, such that the underlying data is maintained and managed by a third-party software application, it may be difficult, if not impossible, for the user to anticipate future changes to the data and the ultimate size of the data set. Accordingly, the data presented in Table A may be automatically and dynamically refreshed, thereby increasing or decreasing the size of Table A.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 2","FIG. 2"]},"A render engine for a spreadsheet and methods for rendering cell regions within a spreadsheet interface are described. In some embodiments, the render engine facilitates the rendering of cell regions containing data that are maintained and managed by either a spreadsheet application (user-defined cell region) or a third-party application (application-defined cell region). In particular, some embodiments of the render engine facilitate the repositioning of one or more existing cell regions within a spreadsheet interface, when a command is being processed that will result in the insertion of a new cell region, and the insertion of the new cell region will cause a layout conflict with an existing cell region. The repositioning of the existing cell regions is achieved without overwriting any cell information, and without breaking any formulas contained within a cell of an affected cell region. Additionally, in some embodiments, a single cell movement strategy is selected from several cell movement strategies, based on a determination that the selected strategy meets some predefined criteria, such as, limiting the overall impact on the layout of existing cell regions.","Other aspects of the invention will become apparent from the detailed description that follows.","Methods and systems for rendering data within a spreadsheet application are described. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of example embodiments of the present invention. It will be evident, however, to one skilled in the art that the present invention may be practiced without these specific details.","Consistent with an embodiment of the invention, a render engine for use with a spreadsheet application is provided. The render engine facilitates methods that allow for cell regions (application-defined or user-defined) to be rendered (e.g., repositioned and displayed) upon detecting that the processing of certain commands will cause those cell regions to be overwritten. Because repositioning one cell region may require that one or more other cell regions be repositioned, in some embodiments the new offset position and the order of the cell region movements are computed to minimize the number of affected cell regions. In some embodiments, the render engine may be implemented to replace the spreadsheet application's native render engine. Alternatively, in some embodiments, the render engine may be implemented to work in conjunction with a spreadsheet application's native render engine. In some embodiments, the render engine may be implemented to work as an add-on (e.g., an extension, plug-in, or snap-in) to a spreadsheet application. Alternatively, in other embodiments, the render engine may be implemented as a native component of the spreadsheet application.","In the context of the present disclosure, a cell region is any group of cells which belong to the same entity or object and\/or share in common the same data source. For instance, in some cases, all of the cells that make up an individual table are part of the same cell region. It is possible that a single cell may be considered a cell region.","In some embodiments, to avoid a layout conflict among various cell regions during the insertion of a new cell region, the process of repositioning one or more cell regions affected by the insertion of the new cell region, or the appending of new cells to an existing cell region, occurs in two phases. The first phase is a pre-processing or design time phase, during which the cell properties of all cell regions are read and a render engine data structure is generated to store the cell information for the cell regions. The render engine data structure is an intermediate storage structure used by the render engine for storing the cell properties of the cell regions for use in establishing, and ultimately processing or executing, a group of procedures for repositioning cell regions affected by the insertion of a new cell region.","The second phase, which can be referred to as the runtime phase, is itself a three stage or three step process. In the first stage of the second phase (i.e., the runtime phase), the states (e.g., positions) of the cell regions are analyzed to establish all possible combinations of cell region movements that are possible to avoid layout conflicts that would otherwise result from inserting the new cell region, or appending new cells to an existing cell region, in the spreadsheet. A cell region movement is referred to herein as a cell region repositioning operation, or simply, repositioning operation. A collection of repositioning operations that will yield the desired result\u2014that is, no layout conflicts between an existing cell region and the new cell region being inserted, and no layout conflicts between any two existing cell regions\u2014is referred to herein as a repositioning plan. In addition to indicating various repositioning operations, a cell region repositioning plan identifies the order in which the repositioning operations are to be executed or processed, and thus the order in which the cell regions are to be moved. Accordingly, the first stage of the second phase consists of identifying all unique repositioning plans yielding the desired result\u2014no layout conflicts between cell regions.","In some embodiments, the output of the first stage is a decision tree. For example, in some embodiments, generating a plurality of repositioning plans for repositioning the existing cell regions of the spreadsheet includes generating a decision tree that has a root node representing the initial state of the spreadsheet with any layout conflicts that exist as a result of the new cell region being inserted. Each child node of the root node represents the state of the spreadsheet after an existing cell region has been moved (e.g., in accordance with a repositioning operation) to a new position to avoid a conflict with the new cell region. If the repositioning of an existing cell region causes a layout conflict with another existing cell region, then another repositioning operation is proposed, and a second level sibling node is generated to represent the repositioning of the existing cell region. This is continued until the repositioning of a cell region results in a spreadsheet state where no two cell regions have a layout conflict. Accordingly, each internal node of the decision tree represents the state of the spreadsheet after performing a repositioning operation to move one existing cell region from its original position to a new position. Each leaf node represents the state of the spreadsheet having no layout conflicts existing between the new cell region and another existing cell region, or any two existing cell regions, after having performed one or more cell movements in accordance with one or more repositioning operations. Finally, the path between the root node and each leaf node represents a unique repositioning plan indicating the cell movements that can be made to achieve the desired result\u2014no layout conflicts between cell regions.","In the second stage of the second phase, a repositioning plan is selected from the several repositioning plans generated in the first phase. The repositioning plan selected includes a combination of cell movements (e.g., repositioning operations) that meets some predefined criteria. For instance, in some embodiments, the predefined criteria will be established to ensure that the repositioning of the cell regions has the least overall impact on the original cell region layout. The criteria for selecting the repositioning plan used to reposition the cell regions may vary from one embodiment to another, and some examples are described in greater detail below.","Finally, in the third stage of the second phase, the proposed repositioning operations of the selected repositioning plan are processed or executed, in the order specified by the repositioning plan, to effectuate the repositioning of the affected cell regions, and the new cell region is inserted. In some embodiments, a render engine data structure is utilized to remap the cell references of the affected cell regions to their new cell references, without breaking any formulas or other cell properties associated with a cell of an affected cell region. Accordingly, if a cell in the spreadsheet is associated with a formula that references a cell that is being repositioned, the formula is updated to reflect the new cell reference of the repositioned cell.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3"],"b":["10","12","14","16","18","18","10","12","18","10","12","10","12","14","16"]},"In the right portion (i.e., the AFTER view) of , the tables , ,  and  are shown in their new positions, after having been processed and rendered by the render engine, upon inserting the new table  in the cell region defined by box  (in the BEFORE view). As illustrated in , the tables , ,  and  have been repositioned to accommodate table , while generally preserving the layout of the document and without overwriting any cell properties or breaking any formulas.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 4","FIG. 4"],"b":["48","50","56","54","42","40","42","44","40","46","48","48","50","50","52","50","52","50","52","50","56","54"]},"In , the server machine  includes an application  and an application data source . The application  is shown to include a spreadsheet data provider interface . Accordingly, in some embodiments, the spreadsheet data provider interface  serves as a mechanism by which the application  causes application data from the application data source  to be presented by the spreadsheet application . The application  residing and executing at the server  may provide the spreadsheet application  with enhanced data processing and presentation functionality. For instance, as briefly noted above, the application  residing on the server  may facilitate the presentation of interactive data, enabling a user to \u201cdrill down\u201d to expose, or hide, additional data by selecting certain cells in a cell region. In some embodiments, the spreadsheet data provider interface  may be associated with or implemented based on an application programming interface. The application , in some embodiments, may periodically and automatically communicate a command and data to the spreadsheet application  to update a data set associated with a cell region of the spreadsheet application's displayed spreadsheet interface. Some examples of specific third-party applications that may be utilized on the server side include, but are certainly not limited to, LIVE OFFICE, VOYAGER and\/or EXPLORER, developed by and available from SAP AG.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["60","62","64","64","60","64","60","66","68","70","72"]},"As its name suggests, the user interface module  serves as an interface between the spreadsheet application and a user of the spreadsheet application. For example, the user interface module  facilitates the receiving and processing of user input. In some embodiments, the user interface module  may operate in close conjunction with a user interface component included in the operating system . In addition, the user interface module  may operate in conjunction with the render engine  and\/or the native render engine  to facilitate displaying data via a graphical user interface.","The command processing module  receives and processes commands. For example, when a user selects a command from a drop-down menu, the selection of the command will be processed by the command processing module . In addition, commands may be received from third-party applications. In particular, a third-party application may communicate a data insertion or data refresh command to the spreadsheet application, which affects the layout of one or more existing cell regions. In some embodiments, the command processing module  may determine that a command is to be processed by the render engine , or the native render engine . Accordingly, the command processing module  will, upon receiving a command, identify the appropriate process (e.g., function, instructions or sub-routine) for processing the received or requested command.","In some embodiments, the spreadsheet application  stores cell information such as cell references and associated cell properties within an internally managed data structure or data structures\u2014such data structures referred to herein as cell objects . For instance, when a spreadsheet document is first opened, the data in the document may be read and stored in the cell objects . Accordingly, when, as a result of processing a command, the cell properties of a particular cell are manipulated, the cell properties may be read from, processed, and written to a cell object for the particular cell. As described in greater detail below, certain commands that result in the repositioning of one or more cell regions are first processed via an intermediary storage structure (e.g., the render engine data structure ), prior to the data being serialized with the spreadsheet application's native cell storage structures, for example, the cell object or objects . The process of serializing cell information involves updating (e.g., writing to) cell information to the spreadsheet application's native cell storage structures, for example, cell objects .","The render engine  includes a render engine data structure generator  for generating a render engine data structure . In general, the render engine data structure generator  performs the pre-processing or design time phase of the process for repositioning cell regions. The render engine data structure generator  generates the render engine data structure , which is used as an intermediary storage structure for storing cell references and the corresponding cell properties of cell regions when those cell regions are being processed for the purpose of repositioning the cell regions. Accordingly, the data structure generator  generates the render engine data structure  by reading cell properties from the spreadsheet application's native storage structure for cells (e.g., the cell objects ) or from an external data source associated with a third-party application. In some embodiments, the render engine data structure  is generated when a spreadsheet document is first opened. For example, the opening of a spreadsheet document may trigger the render engine data structure generator  to read the relevant cell references and cell properties from the cell objects  and external data sources, and store the relevant information in the render engine data structure . In other embodiments, other events may trigger the generation of the render engine data structure .","The layout calculation engine  performs the processing required for repositioning one or more cell regions, when the processing of a data insertion or data refresh command would otherwise result in a layout conflict. Accordingly, the layout calculation engine  performs the three stages or steps involved in the second phase (e.g., the runtime phase) of the process for repositioning cell regions. The layout calculation engine  includes a repositioning plan generator , a repositioning plan selection module , and a repositioning plan processing module .","As indicated above, in some embodiments, the procedure for repositioning one or more cell regions to avoid a layout conflict consists of three phases. The first phase, performed by the repositioning plan generator , involves identifying all strategies that might be utilized to reposition those cell regions affected by the insertion of a new cell region, or appending new cells to an existing cell region. In this case, each strategy represents a unique group of cell movements and order of cell movements, and is embodied in a repositioning plan. Because the repositioning of one cell region may cause a layout conflict with another cell region, the process of identifying layout conflicts must be repeated after every proposed cell region movement is determined until no layout conflicts exist. The repositioning plan generator  receives as input, the position and size of the new cell region to be inserted, and provides as output several repositioning plans, each consisting of a group of repositioning operations to be executed in a particular order to avoid any layout conflicts. As described in greater detail below, in one embodiment, generating the repositioning plans involves generating a decision tree, such that the path between the root node and each leaf node of the decision tree represents a unique repositioning plan.","The repositioning plan selection module  performs the second phase or step by selecting for execution a single repositioning plan from all of the repositioning plans generated by the plan generator  in the first phase or step. The selection of the repositioning plan to be executed is based on the selected plan satisfying some predefined criteria. For instance, in some embodiments, the repositioning plan that has the least impact on the initial layout of the cell regions is selected. For instance, if one repositioning plan requires that three cell regions be repositioned, while another repositioning plan requires that only two cell regions be repositioned, then the plan with fewer cell region movements may be selected. In other embodiments, the number of cells affected and the distance those cells must be moved from their original position may be considered when determining which of several repositioning plans to select for execution. As described in greater detail below, in some embodiments, selecting the repositioning plan includes traversing a decision tree to identify a repositioning plan represented by the path from the root node of the tree to a leaf node of the tree.","In any case, once a repositioning plan has been selected, in the third phase, the repositioning plan processing module  executes the various repositioning operations of the selected repositioning plan. The repositioning operations are processed in an order as indicated by the repositioning plan. For example, in the case where the repositioning plan is represented in the form of a decision tree, the repositioning operations are associated with nodes of the tree, and are processed in reverse order, for example, leading from a leaf node to the root node. In other embodiments, the order of the repositioning operations may simply be indicated by a number. Once each cell region has been repositioned, in accordance with a repositioning operation of the repositioning plan, the new cell region can be inserted into the spreadsheet. To effectuate the repositioning of each cell region, the repositioning processing module manipulates the cell references and\/or cell properties stored in the render engine data structure . For instance, to move a cell region from one position to another, the cell properties associated with the initial cell references must be reassigned to the cell references representing the cells of the new position for the cell region. In some embodiments, this cell information processing is initially accomplished using the render engine data structure . Once each repositioning operation has been processed, and the underlying cell data structures have been updated to reflect the movement of each cell region, the cell information in the render engine data structure  is serialized with the cell objects . For example, the cell information in the render engine data structure  is written to the appropriate cell object  of the spreadsheet application.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 6"],"b":["76","90","76","76","76","76","76","92","74","92"]},"Next, at method operation  the render engine data structure  is populated with the cell information for the active cell regions of the active spreadsheet document. Finally, at method operation , the cell information in the render engine data structure  is serialized (e.g., written) into the spreadsheet application's native cell storage structures (e.g., cell objects ). This ensures that the render engine data structure  corresponds with the spreadsheet application's internal representation of the active cell regions.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 7","b":"100"},"At method operation , the cell range (e.g., position and size) for the new cell region to be inserted, which will result from the processing of the command identified at method operation , is determined. In some cases, the new cell region will represent an entirely new data entity, such as a table. In other cases, the insertion of a new cell region involves the expansion of an existing cell region, for example, as part of a data refresh command, or as part of a command that expands a portion of an existing cell region to display additional data.","Next at method operation , the optimal repositioning strategy is identified. In some embodiments, this involves identifying several repositioning plans, each consisting of several steps or moves for repositioning a particular cell region, and then selecting the plan that has the least impact on the layout of the affected cell regions. A more detailed example of the various steps or operations involved with method operation  is provided and described in connection with .","At method operation , after identifying the best strategy or plan for repositioning the affected cell regions, the individual steps (e.g., repositioning operations) associated with the best strategy or plan are executed to reposition the affected cell regions. Repositioning a cell region in accordance with a cell repositioning operation may include, for example, calculating for each cell a new cell reference based on an offset that indicates both a cell movement direction and distance (e.g., measured in rows or columns.) At method operation , a process is performed to ensure that the cell properties of the affected cell regions are updated, for example, to accurately reflect any cell references included in formulas, in view of a cell region being repositioned. For example, if a cell that is being repositioned is referenced in the formula of another cell (in the same or a different cell region), the cell reference in the formula is updated to reflect the new cell reference of the cell that is being repositioned. Accordingly, in some embodiments, each time a cell of a cell region is moved, a check is done to determine if the cell is referenced in a formula of any other cell. If so, the formula is updated to reflect the repositioning of the cell. As a cell region may be moved multiple times, a cell containing a formula that references another cell may need to be updated several times in the course of processing the various repositioning operations that make up the repositioning plan.","Finally, at method operation  the cell information corresponding to the new positions of each affected cell region are serialized with the spreadsheet application's native cell storage structures (e.g., cell objects  in .) In some embodiments, the visual representation of the cells is changed only at the point when the cell information in the spreadsheet application's native cell structures is modified or updated. In addition, in some embodiments, when the cell information is serialized with the spreadsheet application's native cell storage structures, a verification process may be performed to ensure that no formulas have been broken as a result of repositioning the affected cell regions.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 8","FIG. 8","FIGS. 9 and 10"],"b":["112","0"]},"Beginning from this initial state, State , a recursive approach is undertaken to enumerate all possible combinations of cell region movements (e.g., repositioning operations) based on the given initial state. For instance, referring again to the box labelled \u201cState \u201d in , there are five existing cell regions, A, B, C, D and E, and the user or an application is going to insert a new cell region, cell region F, in the position indicated by the box with reference letter \u201cF\u201d. Cell regions A and B are then detected to be affected by the insertion of cell region F, so the render engine needs to move the affected cell regions into another position to avoid having those cell regions overwritten by cell region F.","Under this scenario, there are a few options for moving the affected cell regions. For example, cell region B could be shifted to the right by an offset to make enough space for the insertion of cell region F, without having cell region F overwrite the cells of cell region B when inserted. In , the box with label \u201cState -\u201d represents this option, and cell region B is shown in its new location, shifted to the right. Note that now cell region C is affected by the movement of cell region B, and another cell region movement or repositioning operation will be required. Instead of shifting cell region B to the right, cell region B could also be shifted down to avoid having cells in cell region B overwritten when cell region F is inserted. In , this option is indicated by the box with label, \u201cSTATE -.\u201d Note, as illustrated in the box with label, \u201cSTATE -\u201d in , shifting cell region B down causes a layout conflict between cell region B and cell regions D and E. Thus, at least two additional cell region movements or repositioning operations will be required.","The process outlined above is recursively repeated until there are no layout conflicts that exist between any two cell regions. For instance, after every possible cell region repositioning operation, the process is repeated for any new layout conflict that exists as a result of moving a cell region. The result of the process is a decision tree as illustrated in . Accordingly, each child node of the root node of the decision tree represents the state of the spreadsheet after an existing cell region has been moved (e.g., in accordance with a repositioning operation) to a new position to avoid a conflict with the new cell region being inserted. If the repositioning of an existing cell region causes a layout conflict with another existing cell region, such as the layout conflict that exists between cell region B and cell region C in the box labelled, \u201cState -\u201d in , then another repositioning operation is proposed, and a second level sibling node is generated to represent the repositioning of the existing cell region. This is continued until the repositioning of a cell region results in a spreadsheet state where no two cell regions have a layout conflict. Therefore, each internal node of the decision tree represents the state of the spreadsheet after performing a repositioning operation to move one existing cell region from its original position to a new position. Each leaf node represents the state of the spreadsheet having no layout conflicts existing between the new cell region and another existing cell region, or any two existing cell regions, after having performed one or more cell movements in accordance with one or more repositioning operations. Finally, by associating a repositioning operation with each node, the path between the root node and each leaf node represents a unique set of cell movements that will result in no layout conflicts. Such a combination of cell movements or repositioning operations is referred to herein as a repositioning plan.","Referring again to , after a decision tree has been generated, a weight may be assigned to each repositioning operation based on the distance between a cell region's initial position and the cell region's new position that results from moving the cell region in accordance with a repositioning operation. For example, the distance may simply reflect the number of columns or rows that the cell region is shifted. Alternatively, the weight assigned to the repositioning operation may take into consideration the size of the cell region being repositioned. For instance, the distance may be multiplied by the number of cells (rows and columns) in the cell region, such that the weight assigned to the repositioning operation reflects, to some extent, the size of the cell region being repositioned. Accordingly, if a larger cell region is being repositioned, its greater impact on the overall layout of the spreadsheet interface will be reflected in the weight assigned to the cell region repositioning operation for moving that particular cell region.","After each repositioning operation has been assigned a weight, at method operation , the sum of the weights for each repositioning operation in a particular repositioning plan are determined to derive an overall weight for each repositioning plan. Next, at method operation , the repositioning plan with the lowest weight, reflecting the lowest overall impact to the existing layout of a spreadsheet interface, is selected. Finally, at method operation , the repositioning operations of the selected repositioning plan are carried out. The repositioning operations are processed in reverse order, with the repositioning operation associated with the leaf node being processed first. For example, with the decision tree illustrated in , the repositioning operation associated with the node labelled, \u201cSTATE ---\u201d might be processed, followed by the repositioning operation associated with the node labelled, \u201cSTATE --,\u201d and so on, until finally, there is space for the new cell region to be inserted, without causing any layout conflicts between cell regions. In some embodiments, the processing of the repositioning operations is accomplished by first processing the cell information as it is stored in the render engine data structure  (), and then, once the cell information has been updated in the render engine data structure  to reflect the relocation of the cell regions, the cell information in the render engine data structure  is written to the spreadsheet application's native cell storage structures, for example, the cell objects .","It will be appreciated that the method operations of the methods illustrated herein and described above may be altered to a certain degree without departing from the spirit of the invention. For example, in some embodiments, the distinct method operations illustrated herein may be combined in some manner. Additionally, one or more of the method operations may occur in an order different from what is proposed herein. For example, with regard to the method of , method operation  may occur as a sub-step of method operation , such that, as each repositioning operation is identified, the weight associated with the repositioning operations is also determined.","The various operations of example methods described herein may be performed, at least partially, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily or permanently configured, such processors may constitute processor-implemented modules, engines, processes, applications or generators (e.g., repositioning plan generator ) that operate to perform one or more operations or functions. The modules, engines, processes, applications and generators referred to herein may, in some example embodiments, comprise processor-implemented modules, engines, processes, applications and generators.","Similarly, the methods described herein may be at least partially processor-implemented. For example, at least some of the operations of a method may be performed by one or more processors or processor-implemented modules, engines, processes, applications and generators. The performance of certain operations may be distributed among the one or more processors, not only residing within a single machine or computer, but deployed across a number of machines or computers. In some example embodiments, the processor or processors may be located in a single location (e.g., within a home environment, an office environment or at a server farm), while in other embodiments the processors may be distributed across a number of locations.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 11"},"The example computer system  includes a processor  (e.g., a central processing unit (CPU), a graphics processing unit (GPU) or both), a main memory  and a static memory , which communicate with each other via a bus . The computer system  may further include a display unit , an alphanumeric input device  (e.g., a keyboard), and a user interface (UI) navigation device  (e.g., a mouse). In one embodiment, the display, input device and cursor control device are a touch screen display. The computer system  may additionally include a storage device  (e.g., drive unit), a signal generation device  (e.g., a speaker), a network interface device , and one or more sensors , such as a global positioning system sensor, compass, accelerometer, or other sensor.","The drive unit  includes a machine-readable medium  on which is stored one or more sets of instructions and data structures (e.g., software ) embodying or utilized by any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-readable media.","While the machine-readable medium  is illustrated in an example embodiment to be a single medium, the term \u201cmachine-readable medium\u201d may include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more instructions. The term \u201cmachine-readable medium\u201d shall also be taken to include any tangible medium that is capable of storing, encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention, or that is capable of storing, encoding or carrying data structures utilized by or associated with such instructions. The term \u201cmachine-readable medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media. Specific examples of machine-readable media include non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.","The software  may further be transmitted or received over a communications network  using a transmission medium via the network interface device  utilizing any one of a number of well-known transfer protocols (e.g., HTTP). Examples of communication networks include a local area network (\u201cLAN\u201d), a wide area network (\u201cWAN\u201d), the Internet, mobile telephone networks, Plain Old Telephone (POTS) networks, and wireless data networks (e.g., Wi-Fi\u00ae and WiMax\u00ae networks). The term \u201ctransmission medium\u201d shall be taken to include any intangible medium that is capable of storing, encoding or carrying instructions for execution by the machine, and includes digital or analog communications signals or other intangible medium to facilitate communication of such software.","Although an embodiment has been described with reference to specific example embodiments, it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the invention. Accordingly, the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof, show by way of illustration, and not of limitation, specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom, such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description, therefore, is not to be taken in a limiting sense, and the scope of various embodiments is defined only by the appended claims, along with the full range of equivalents to which such claims are entitled."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["Some embodiments are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
