---
title: Distributed computing management
abstract: Management of distributed computing systems is required, for example, to carry out activities using shared resources such as computational tasks, in-silico experiments and other tasks. In an embodiment a distributed computing graph represents processes executing in the distributed computing system in order to carry out the activity and this graph is available to entities in the distributed computing system. For example, a user interface at an entity in the distributed computing system enables a user to view a local representation of the distributed computing graph and to control the activity using that local representation which maps dynamically to and from the underlying distributed computing graph. In examples, the local representation of the distributed computing graph enables live control of the activity without the need for compilation. In examples the distributed computing graph is shared through the distributed computing system using peer-to-peer distribution or using a replication mechanism.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832156&OS=08832156&RS=08832156
owner: Microsoft Corporation
number: 08832156
owner_city: Redmond
owner_country: US
publication_date: 20090615
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Management of distributed computing systems is required in many application domains. For example, computational science, management of distributed database systems, management of distributed computing systems for bio-informatics, image analysis, or other applications in which very large amounts of data are to be processed or huge amounts of computational resources are required.","The use of distributed computing systems is becoming more widespread. Often computational tasks are decomposed into multiple subtasks which are executed on different computing systems or computational tasks are divided into fragments and the fragments are spread over multiple systems to be computed. Management of these distributed computing systems is typically carried out by a single entity which \u201cowns\u201d the computational task and there is a general need to simplify and improve the manner in which the management is achieved. For example, existing tools to manage scientific workflows enable a scientist to make use of remote computing resources to carry out in-silico experiments. However, it is difficult to enable the experiments to be managed by multiple users working on different computers at the same time in a simple and effective manner. In addition, existing approaches are often unsuited to novice users who have little or no knowledge of remote computing resources that may be used.","Existing software tools are available to manage scientific workflows which may use components on both remote and local machines in distributed computing systems. The workflows enable the specification and execution of ad-hoc in-silico experiments using informatics resources. Such a workflow-based approach allows scientists to describe and carry out their experimental processes in a structured, repeatable and verifiable way. There is a desire to improve the functionality of such software tools such that management of distributed computing systems is facilitated.","The embodiments described below are not limited to implementations which solve any or all of the disadvantages of known distributed computing management systems.","The following presents a simplified summary of the disclosure in order to provide a basic understanding to the reader. This summary is not an extensive overview of the disclosure and it does not identify key\/critical elements of the invention or delineate the scope of the invention. Its sole purpose is to present some concepts disclosed herein in a simplified form as a prelude to the more detailed description that is presented later.","Management of distributed computing systems is required, for example, to carry out activities using shared resources such as computational tasks, data processing tasks, in-silico experiments and other tasks. In an embodiment a distributed computing graph represents processes executing in the distributed computing system in order to carry out the activity and this graph is available to entities in the distributed computing system. For example, a user interface at an entity in the distributed computing system enables a user to view a local representation of the distributed computing graph and to control the activity using that local representation which maps dynamically to and from the underlying distributed computing graph. In examples, the local representation of the distributed computing graph enables live control of the activity without the need for compilation. In examples the distributed computing graph is shared through the distributed computing system using peer-to-peer distribution or using a replication mechanism.","Many of the attendant features will be more readily appreciated as the same becomes better understood by reference to the following detailed description considered in connection with the accompanying drawings.","Like reference numerals are used to designate like parts in the accompanying drawings.","The detailed description provided below in connection with the appended drawings is intended as a description of the present examples and is not intended to represent the only forms in which the present example may be constructed or utilized. The description sets forth the functions of the example and the sequence of steps for constructing and operating the example. However, the same or equivalent functions and sequences may be accomplished by different examples.","Although the present examples are described and illustrated herein as being implemented in a distributed computing system for computational science, the system described is provided as an example and not a limitation. As those skilled in the art will appreciate, the present examples are suitable for application in a variety of different types of distributed computing systems.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 1","FIG. 1"],"b":["109","101","109","105","107","108","106"]},"The entities in the distributed computing system are arranged to enable activities to be carried out in the distributed computing system under the control of one or more distributed computing graphs. An activity is one or more tasks which are associated with an aim or objective. For example, the activity may be an experiment, a data centre management task, a computational computing objective or other group of tasks associated with an objective. Each activity has an associated distributed computing graph which controls entities in the distributed computing system in order to carry out the activity. For example, this is achieved by assigning tasks to graphs. Entities in the distributed computing system are aware of the distributed computing graph and this is achieved in any suitable manner. For example, the distributed computing graph may be replicated at the entities. It is also possible for the distributed computing graph to be shared amongst the entities using a peer-to-peer distribution system of any suitable type. As described in more detail below, each entity has a local view of the distributed computing graph and is aware of communication protocols, addresses and contracts associated with the tasks assigned to the distributed computing graph.","The term \u201cdistributed computing graph\u201d is used to refer to a data structure storing a plurality of nodes connected by links where each node represents a process at a specified entity in a distributed computing system. For example, the process may be a computational process which takes data from one or more sources (which could also be other tasks) and produces output. It is also possible for the process to be one which retrieves data from a source and reformats or pre-processes that data so that it is suitable for a later computation process. In this case the data sourc(es) are specified at the node representing the process. Entities in the distributed computing system are arranged to carry out the represented processes (which may be parallel, concurrent or sequential) using the specified entities and data sources. Each distributed computing graph is associated with an activity as described above.","In an example, a data source such as a text file exists on a local machine operated by a user. The user is able to create or modify a local view of a distributed computing graph using the user interface  to add a task. This is achieved by connecting a node representing the text file to one or more other nodes representing other entities in the distributed computing system and in this way a task is added to the graph. For example, these other entities may comprise a remote web service. The edge in the graph created between the text file node and the web service node may be implemented using a SOAP call to the web service to send the text file data to the web service for processing. However, this is not essential, any suitable method of implementing the edge in the graph may be used. Another task may then be added to the local view of the distributed computing graph. For example, this task may be a local executable file which is added as a node to the local view by connecting it to the node representing the web service. This connection may be implemented using a SOAP call to the web service to pull the processed text file data from the web service. Another task may be created and a node representing it connected to the node representing the executable file. This newly added task may represent a file comprising the pulled data and is interpreted as a file by the distributed computing system. In this way a file system is effectively used to perform the task making use of remote web service. The file system and web service are examples only and may be substituted by any other suitable technology. For example, databases, custom executable files for computational tasks, reading and writing to and from files.","Within the distributed computing system tasks are able to notify each other. This is implemented using any suitable notification mechanism, for example, using push and pull notification mechanisms or publish and subscribe mechanisms. Once a task is completed, for example, the web service call is finished in the above example, the local representation of the task within the graph engine  actively sends out (to all entities in the distributed computing system) a notification to indicate this using the particular notification mechanism being used.","Any suitable methods may be used to enable the tasks and the local graph nodes to communicate. For example, an application programming interface is provided to the graph engine . This may be used by a programmer to link a task to a local graph item. For example, the application programming interface provides a set of contracts and communication mechanisms to be used by local representations of tasks (in the local views) to communicate with one another in the distributed computing system. In this way the local view of a task may be thought of as a wrapper which enables a task to talk to one or more other graph items. Thus task events such as task notification, task error, task completion may be communicated to other graph items. Whether two tasks are able to communicate may be specified by details in the wrappers.","In some embodiments one or more communities are specified in the distributed computing system although this is not essential. For example, the entities within the dotted line  in  may be considered as forming a community. For example, a scientist may require to carry out a new experiment and may set up a community comprising users, resources and data. The users may comprise the scientist and his or her assistant. The resources may comprise the scientist's research computer, home computer, laptop and the assistant's research computer. The scientist specifies one or more data sources. The scientist may belong to a plurality of different communities. In the example of , database  and entity  are outside the community  and are unable to access any resources of the community. However, entities within the community may be able to access database  and entity  outside the community by using appropriate credentials or in other manners.","An entity in the distributed computing system may comprise a user interface which provides a facility to view and modify communities. For example,  shows an example user interface display  which may be provided at local machine A  of  for example. In this example, the user at local machine A is a member of two communities ,  which are illustrated schematically. The user interface display provides details  about the communities such as the number of members in a community, the number of workspaces a given community has, and an average daily population of active members in the community. A workspace is associated with one or more activities (such as an experiment or other computational computing activity) and a given community may comprise one or more workspaces. Each activity has its own distributed computing graph and is able to access all resources within its associated community. A distributed computing graph is limited to the scope of its associated activity and so is not part of two different activities.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 3","FIG. 1"],"b":["100","101","301","303","302","301","303","302"]},{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 1","FIG. 1","FIG. 1"],"b":["400","401","404","403","101","401","404","402"]},{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 5","FIG. 6","FIG. 6","FIG. 6"],"b":["500","501","502","503","500","504"]},"As mentioned above, each participant in an activity has access to the associated distributed computing graph even if that participant does not host any parts of that activity. For example, a participant may require only to view the output of an experiment. In this case the participant connects to the distributed computing graph concerned but does not provide any input data, storage, processing capabilities or other resources for sharing.","The distributed computing graph in  comprises a node  representing a process carried out at entity A that uses data represented by a node . It also comprises nodes  representing processes carried out at entity B using data represented by a node . Another node  represents a process at entity C using data from nodes .","The local view from entity C comprises user interface elements , ,  connected by links. User interface element  represents node  of the distributed computing graph. Because this node  is associated with a process occurring at entity C itself the corresponding user interface element  is not enclosed in an outer region. In contrast, user interface element  which represents the process at A is enclosed in an outer region  to indicate that entity A is remote of the local entity C. Similarly, user interface elements  which represent processes at B are enclosed in an outer region  to indicate that entity B is remote of the local entity C. In this way different instances or \u201clocal views\u201d of the distributed computing graph are able to run at the same time on different computers. This enables different entities in a distributed computing system to investigate the same activity at the same time but each in a manner appropriate to that entity's point of view.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["701","700","700","701","703","704","702","705"]},"The view from entity C is different in that the processes ,  at A are now remote and so are enclosed in an outer region. Also, the process  at C is no longer remote and so is not enclosed in an outer region.","An entity in the distributed computing system is arranged to monitor the distributed computing graph as illustrated in  at step . For example, the graph is replicated at entities in the distributed computing system using any suitable process and\/or the graph is shared using a peer-to-peer distribution system. If the entity detects  a change in the graph then it updates its local view of the graph and displays that updated local view at a user interface associated with the entity. It is arranged to react to changes in the distributed computing graph.","The user interface  is informed of changes in the local view of the distributed computing graph by the graph engine  using any suitable notification mechanism.","The entities in the distributed computing system propagate their changes to one another in any suitable manner. For example, this may be implemented using a data synchronization system using any suitable data feed or using a peer-to-peer mechanism.","For example, if a new computational task is added to the distributed computing system at another entity then the change is actively propagated in the distributed computing graph. Information about the change (e.g. the new task) may then be provided at the user interface by updating the local view of the graph. As mentioned above, this may be achieved by a notification mechanism between the graph engine  and user interface . Also, if certain tasks become unavailable perhaps due to faults (temporary or permanent) in the distributed computing system then notification of this is available at entities in the distributed computing system through the local views of the graph.","A user at an entity is able to modify the local view of the distributed computing graph at that entity in order to control and\/or manage the distributed computing system. For example, as now described with reference to  an entity in the distributed computing system receives  user input at its user interface modifying a local view of the distributed computing graph. The entity saves  this local view in memory and continues to execute processes as specified by the distributed computing graph. That is, all the underlying computing tasks continue executing both for local and remote processes. The entity loads  the saved local view of the distributed computing graph and compares the saved local view with the current distributed computing graph to identify changes. The entity then attempts  to connect to an entity or task in the distributed computing graph corresponding to the saved local view. As mentioned above, whether two tasks are able to connect (or communicate) may be specified by details in the wrappers.","If such a corresponding graph cannot be found and no connection can be established, then the entity starts  the corresponding distributed computing graph. That is, it triggers the start of any processes that are specified in the graph as being local to the entity and also triggers the start of any other processes. In this way, if the local entity is willing to share resources (such as computing cycles) then those resources are made available to the overall distributed computing system. In this way no \u201cplay\u201d or \u201crun\u201d button is required for activation by a user. Rather an activity executes automatically and this simplifies operation for end users and makes the system suitable for operation by novices who have little or no knowledge of the distributed computing system being used.","If the connection is successfully established then the entity proceeds to update  the user interface elements according to the distributed computing graph to which it has connected. For example, the entity indicates whether any tasks in the graph are not running or are unavailable. It may indicate whether any tasks are no longer part of the distributed computing graph. Also, it may indicate whether any newly available tasks are present.","In some embodiments a plurality of local views of the same activity are available at the same physical machine. For example, this may be the case where a virtual machine operates at the physical machine and where multiple processors are available at the physical machine.","A user is able to make changes to a local view of the distributed computing graph in order to manage the distributed computing system. For example with reference to , an entity in the distributed computing system monitors  its local view of the distributed computing graph and detects  any change to the location of a user interface element representing a task in that local view. The dynamic mapping between the local view and the distributed computing graph occurs  and the entity stops  the task on that task's origin system and starts it on a target system for the task. This is illustrated with respect to  which shows a local view before moving a task from entity B to entity A (upper part of ) and a local view after that change (lower part of ). Before the change the local view shows user interface elements for two tasks one of which is shaded  on remote entity B  and shows one task  on remote entity A. The shaded task is moved to entity A by dragging and dropping the user interface element onto the region for entity A as illustrated at  in . When moving the task to entity A it is not specified on which physical entity within entity  the task should be executed. For example, entity  may comprise a cluster of physical entities or another community. The dynamic mapping between the local view and the distributed computing graph occurs and this enables live interaction with the distributed computing system itself. For example, there is no need to stop the activity before making modifications to that activity and no need to carry out any compilation or recompilation of processes.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 12","b":"1200"},"The computing-based device  comprises one or more inputs  which are of any suitable type for receiving media content, Internet Protocol (IP) input, or any input from other entities in a distributed computing system of which the entity is part. The device also comprises communication interface  to enable the device to communicate with other entities in a communications network.","Computing-based device  also comprises one or more processors  which may be microprocessors, controllers or any other suitable type of processors for processing computing executable instructions to control the operation of the device in order to operate as an entity in a distributed computing system. Platform software comprising an operating system  or any other suitable platform software may be provided at the computing-based device to enable application software  to be executed on the device.","The computer executable instructions may be provided using any computer-readable media, such as memory . The memory is of any suitable type such as random access memory (RAM), a disk storage device of any type such as a magnetic or optical storage device, a hard disk drive, or a CD, DVD or other disc drive. Flash memory, EPROM or EEPROM may also be used.","An output is also provided such as an audio and\/or video output to a display system integral with or in communication with the computing-based device. The display system may be controlled using a display interface  which may provide a graphical user interface, or other user interface of any suitable type although this is not essential.","The term \u2018computer\u2019 is used herein to refer to any device with processing capability such that it can execute instructions. Those skilled in the art will realize that such processing capabilities are incorporated into many different devices and therefore the term \u2018computer\u2019 includes PCs, servers, mobile telephones, personal digital assistants and many other devices.","The methods described herein may be performed by software in machine readable form on a tangible storage medium. The software can be suitable for execution on a parallel processor or a serial processor such that the method steps may be carried out in any suitable order, or simultaneously.","This acknowledges that software can be a valuable, separately tradable commodity. It is intended to encompass software, which runs on or controls \u201cdumb\u201d or standard hardware, to carry out the desired functions. It is also intended to encompass software which \u201cdescribes\u201d or defines the configuration of hardware, such as HDL (hardware description language) software, as is used for designing silicon chips, or for configuring universal programmable chips, to carry out desired functions.","Those skilled in the art will realize that storage devices utilized to store program instructions can be distributed across a network. For example, a remote computer may store an example of the process described as software. A local or terminal computer may access the remote computer and download a part or all of the software to run the program. Alternatively, the local computer may download pieces of the software as needed, or execute some software instructions at the local terminal and some at the remote computer (or computer network). Those skilled in the art will also realize that by utilizing conventional techniques known to those skilled in the art that all, or a portion of the software instructions may be carried out by a dedicated circuit, such as a DSP, programmable logic array, or the like.","Any range or device value given herein may be extended or altered without losing the effect sought, as will be apparent to the skilled person.","It will be understood that the benefits and advantages described above may relate to one embodiment or may relate to several embodiments. The embodiments are not limited to those that solve any or all of the stated problems or those that have any or all of the stated benefits and advantages. It will further be understood that reference to \u2018an\u2019 item refers to one or more of those items.","The steps of the methods described herein may be carried out in any suitable order, or simultaneously where appropriate. Additionally, individual blocks may be deleted from any of the methods without departing from the spirit and scope of the subject matter described herein. Aspects of any of the examples described above may be combined with aspects of any of the other examples described to form further examples without losing the effect sought.","The term \u2018comprising\u2019 is used herein to mean including the method blocks or elements identified, but that such blocks or elements do not comprise an exclusive list and a method or apparatus may contain additional blocks or elements.","It will be understood that the above description of a preferred embodiment is given by way of example only and that various modifications may be made by those skilled in the art. The above specification, examples and data provide a complete description of the structure and use of exemplary embodiments of the invention. Although various embodiments of the invention have been described above with a certain degree of particularity, or with reference to one or more individual embodiments, those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The present description will be better understood from the following detailed description read in light of the accompanying drawings, wherein:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
