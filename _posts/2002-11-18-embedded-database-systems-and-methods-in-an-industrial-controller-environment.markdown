---
title: Embedded database systems and methods in an industrial controller environment
abstract: The present invention relates to systems and processes that provide network database interactions in an industrial controller environment. A database protocol component operating in a control environment is provided to convert control or factory protocols to a native language format associated with a network database. Such databases may be accessed in a structured format, wherein one or more control components may be adapted in a client and/or server configuration to freely exchange data in the structured format associated with the database. The database protocol component sends commands and/or data in the structured format when exchanging data with the database while converting the structured format to one or more protocols associated with an industrial control system when receiving commands and/or data therefrom.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07467018&OS=07467018&RS=07467018
owner: Rockwell Automation Technologies, Inc.
number: 07467018
owner_city: Mayfield Heights
owner_country: US
publication_date: 20021118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to industrial control systems, and more particularly to a system and methodology to facilitate data distribution in an industrial control environment.","Industrial controllers are special-purpose computers utilized for controlling industrial processes, manufacturing equipment, and other factory automation, such as data collection or networked systems. In accordance with a control program, the industrial controller, having an associated processor (or processors), measures one or more process variables or inputs reflecting the status of a controlled system, and changes outputs effecting control of such system. The inputs and outputs may be binary, (e.g., on or off), as well as analog inputs and outputs assuming a continuous range of values.","Measured inputs received from such systems and the outputs transmitted by the systems generally pass through one or more input\/output (I\/O) modules. These I\/O modules serve as an electrical interface to the controller and may be located proximate or remote from the controller including remote network interfaces to associated systems. Inputs and outputs may be recorded in an I\/O table in processor memory, wherein input values may be asynchronously read from one or more input modules and output values written to the I\/O table for subsequent communication to the control system by specialized communications circuitry (e.g., back plane interface, communications module). Output modules may interface directly with one or more control elements, by receiving an output from the I\/O table to control a device such as a motor, valve, solenoid, amplifier, and the like.","At the core of the industrial control system, is a logic processor such as a Programmable Logic Controller (PLC) or PC-based controller. Programmable Logic Controllers for instance, are programmed by systems designers to operate manufacturing processes via user-designed logic programs or user programs. The user programs are stored in memory and generally executed by the PLC in a sequential manner although instruction jumping, looping and interrupt routines, for example, are also common. Associated with the user program are a plurality of memory elements or variables that provide dynamics to PLC operations and programs. These variables can be user-defined and can be defined as bits, bytes, words, integers, floating point numbers, timers, counters and\/or other data types to name but a few examples.","Transmitting, receiving, and storing Programmable Logic Controller (PLC) data generally involves working with a plurality of various protocols\u2014often times proprietary, when accessing such data across various communications networks. Thus, data transactions often involve developing a communications driver and associated software known as middleware to interact with PLCs across networks such as the Ethernet. As one example, if a remote node were to try and retrieve data from a PLC, a middleware communications product would first have to be loaded on the remote node and a driver would have to be configured for the particular network\/PLC protocol being employed before a data transaction could occur. Often times, a third software product would have to be installed before such activities as presenting, storing and manipulating such data could occur. Although this type of transaction may work for one particular type of PLC and one particular protocol, this model often breaks down if different PLCs are involved and\/or communicate over different networks from the remote node trying to access\/manipulate such data. Thus, trying to maintain and access data from various PLC sources employing many different protocols can be exceedingly time consuming to configure and can lead to considerable expense when installing many different software packages in order to attempt to access PLC data.","The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is intended to neither identify key or critical elements of the invention nor delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.","The present invention relates to a system and methodology to facilitate data transactions in a networked industrial controller environment utilizing standard database application programming interfaces (API) and protocols. PLCs and\/or communications modules having access thereto are adapted to support client API calls, examples of these API's and underlying protocols are ADO, RDO, DAO, Embedded SQL and VBSQL, OLE-DB, Oracle Objects for OLE (OO4O), PL\/SQL, ODBC, DB-Library, TDS (Tabular Data Stream) format, Server DB Interface (Open Data Services\u2014ODS), and network protocols like NW Link IPX\/SPX, NetBEUI, TCP\/IP, AppleTalk, and Banyan VINES. These will allow client or server devices to transfer data via standard database protocols such as SQL, XML, XMLSQL, to databases, such as relational databases such as Miscrosoft SQL, MySQL, IAnywhere, Sybase Oracle, and Oracle8i, for example.","Modules adapted in accordance with the present invention employ controller tags and\/or schema that specify desired elements or data to be stored\/accessed and are designed to interact with remote clients and\/or servers in the native language or protocol of such systems. In this manner, a PLC or module operating in the controller environment is viewed as a common database node to remote systems attempting data access. Since these modules employ standard database protocols, complex integrations, configurations, and expensive middleware or software packages for accessing controller data is mitigated. Moreover, the communications architecture of the present invention facilitates a more seamless integration between business functions of an enterprise and operations in automated manufacturing centers since the architecture would enable a business software package to acquire and\/or send plant-floor data without having to be specially adapted to understand the intricacies of PLC protocols.","The following description and the annexed drawings set forth in detail certain illustrative aspects of the invention. These aspects are indicative, however, of but a few of the various ways in which the principles of the invention may be employed and the present invention is intended to include all such aspects and their equivalents. Other advantages and novel features of the invention will become apparent from the following detailed description of the invention when considered in conjunction with the drawings.","The present invention relates to systems and processes that provide network database interactions in an industrial controller environment. A database protocol component operating in a control environment (e.g., adapted on a programmable controller or communications module) is provided to convert control or factory protocols to a native language format associated with a network database. Such databases may be accessed in a structured format, wherein one or more control components may be adapted in a client and\/or server configuration to freely exchange data in the structured format associated with the database. The database protocol component sends commands and\/or data in the structured format when exchanging data with the database while converting the structured format to one or more protocols associated with an industrial control system when receiving commands and\/or data therefrom. In this manner, applications such as a business or enterprise planning software can interact with the control components in a language suitable for the application. As such, control of higher-level factory processes and automated management of an enterprise can be provided without having to integrate middleware software in order to interact and communicate with the control components.","It noted that as used in this application, terms such as \u201ccomponent,\u201d \u201cprotocol converter,\u201d \u201ccommand interpreter,\u201d and the like are intended to refer to a computer-related entity, either hardware, a combination of hardware and software, software, or software in execution. For example, a component may be, but is not limited to being, a process running on a processor, a processor, an object, an executable, a thread of execution, a program and a computer. By way of illustration, both an application running on a server and the server (or control related devices) can be components. One or more components may reside within a process and\/or thread of execution and a component may be localized on one computer and\/or distributed between two or more computers or control devices. In another example, a protocol converter can be a process executable on a computer or control device to adapt PLC communications formats in accordance with an application that employs network database formats.","Referring initially to , a remote database and control system  for an industrial control environment is illustrated in accordance with an aspect of the present invention. A remote system  interacts with one or more industrial control components  via a network . In the local case, industrial control components  may have the database application  installed locally and an internal messaging\/communication component in lieu of network . The remote system  can include substantially any type of hardware and\/or software (e.g., database application, editing tool, programming tool, communications component, monitoring component) that may interact with the industrial control components  which can include programmable logic controllers (PLCs), communications modules and\/or I\/O modules, whereas the network  can include local factory networks (e.g., Ethernet, ControlNet, DeviceNet) and\/or public networks such as NW Link IPX\/SPX, NetBEUI, TCP\/IP, AppleTalk, Banyan VINES or the Internet, for example.","When access is attempted across the network  by the remote system , a database application  can exchange data  (e.g., a structured database format such as SQL) with the industrial control components  via a protocol converter . The protocol converter  receives\/sends the data  in a language associated with the database application  and translates the data  into a control data format  employable by the industrial control components  (e.g., PLC data table format, CIP, factory network protocols). Thus, the database application  exchanges the data  with the industrial control components  in a language suitable for storage in a local storage or cache  and\/or in a remote storage location  such as a database server (e.g., store data in a structured row and column format). It is noted that if industrial control component  interactions are stored locally, that a subsequent transfer of the local storage can be achieved by transferring files or data from the local storage  to the remote storage . The interface component  can also create\/manipulate files, schemas, and\/or other data structures (not shown) in the local or remote storage  and , and tag the files with an identifier relating to the industrial control component  that has been accessed. For example, a tag or file name may be created for PLCA, PLCB, Communications module C, I\/O module D . . . and so forth.","In one aspect of the present invention, the protocol converter  is adapted to exchange the data  via standard database API's SQL, XML, XMLSQL, ADO, RDO, DAO, Embedded SQL and VBSQL, OLE-DB, Oracle Objects for OLE (OO4O), PL\/SQL, ODBC, DB-Library, TDS (Tabular Data Stream) format, Server DB Interface (Open Data Services\u2014ODS), and network protocols like NW Link IPX\/SPX, NetBEUI, TCP\/IP, AppleTalk, Banyan VINES. This will allow the protocol converter  to support the direct connection between applications on control components , and database applications  such as relational databases like Miscrosoft SQL, MySQL, IAnywhere, Sybase, Oracle, and Oracle8i, for example. This can include utilizing controller tags, data types and\/or schema that specify desired elements or data to be stored\/accessed and are designed to interact with remote clients and\/or servers in the native language or protocol of such systems. In this manner, the industrial control component  is viewed as a common database node to the remote system  attempting data access. Since the industrial control components  employ standard database protocols, complex integrations, configurations, and expensive middleware or software packages for accessing controller data is mitigated. Furthermore, the communications architecture of the present invention facilitates a more seamless integration between business functions of an enterprise and operations in automated manufacturing centers since the architecture can enable the database application  to acquire and\/or send plant-floor data without having to be specially adapted to understand the intricacies of industrial control protocols.","Referring now to , a protocol conversion system  is illustrated in accordance with an aspect of the present invention. A protocol converter  is an application(s) that translates\/exchanges data and\/or commands from one or more database protocols  to\/from data formats utilized by industrial control system components. For example, the database protocols and API's  can be in a Structured Query Language (SQL), Extensible Markup Language (XML), SQLXML, ADO, RDO, DAO, Embedded SQL and VBSQL, OLE-DB, ODBC, DB-Library and\/or other database language or interface protocol. The protocol converter  converts the database protocols  to a protocol or data type employed in an industrial control system and\/or converts industrial control system protocols to the database protocols . One example of an industrial control system protocol or format is a common data table format at  employed in programmable logic controllers (PLC) (or modules associated therewith) (e.g., tags, timers, counters integers, floats, binaries, and so forth). Another industrial protocol is a Control and Information Protocol (CIP) at .","Control and Information Protocol  is a message-based protocol that implements a relative path to send a message from one or more \u201cproducing\u201d devices in a control bus back plane to one or more \u201cconsuming\u201d devices. The producing device includes path information that directs the messages to reach the consumers. Since the producing device holds the path information, other devices along the path can simply pass this information. As such, Control and Information Protocol  employs a \u201cproducer\/consumer\u201d networking model. In traditional I\/O systems, controllers poll input modules to obtain their input status. In a CIP system, digital input modules are not polled by a controller, for example. Instead, these modules produce (\u201cmulticast\u201d) associated data either upon a change of state (COS) and\/or periodically. The frequency of update depends upon options selected during configuration and where on the network the input module resides. The input module, therefore, is a producer of input data and the controller and\/or communications module is a consumer of the data. The controller can also produce data for other controllers to consume and\/or can produce data for other modules in the back plane to consume such as an output module, for example. The produced and consumed data can be accessible by multiple controllers over a back plane and\/or over a network.","In another example, the protocol converter  converts\/translates the database protocols to other factory protocols at  (and vice versa). Such protocols  can include Ethernet, ControlNet, DeviceNet, remote I\/O protocols, Data Highway and Data Highway+ protocols, Fieldbus, Modbus, Profibus, OLE for Process Control (OPC) and so forth. It is to be appreciated that substantial any database protocol can be converted to\/from an industrial control system protocol by the protocol converter  and in accordance with the present invention.","Referring to , an exemplary industrial control and database system  is illustrated in accordance with an aspect of the present invention. The system  includes an industrial controller  communicating to one or more client\/server systems  across a local factory network (e.g., DeviceNet, ControlNet, Ethernet, DH+, Intranet) and\/or a public network  such as the Internet. This can also include other communications options such as phone connections and\/or wireless interactions. A processor  (or processors) in the controller  executes from an associated memory subsystem  that can include an operating system (e.g., Microsoft\u00ae Windows\u00ae NT\/2000\/XP, Windows CE, Linux, .NET, OS-9, UNIX, VRTX, QNX, VxWorks, CE.NET, custom-designed). The controller  can also communicate to and control various Input\/Output subsystems  and\/or other networks (e.g., Analog, Digital, Programmed\/Intelligent I\/O modules, other programmable controllers, communications modules, networks).","The client\/server system  (can be client and\/or server system) includes at least one application  that interacts with a client\/server communications component  (e.g., database software) to exchange data with the controller  via a communications component  suitably adapted to transfer information on the network  via a database protocol , wherein the communications component  includes a protocol converter as described above. As illustrated, control data  can be exchanged (e.g., data sent or received) to\/from the controller  (or other control components, databases) in response to instructions or commands executed by the application  and\/or controller . The application  can include substantially any type of software for manipulating the database protocol  such as an editor tool, database application, or interface component, for example, whereby the database protocol  is generally processed on a local memory or storage device . It is noted that the controller  can be adapted in a client and\/or server configuration to exchange the database protocol  with the client\/server system .","In accordance with one aspect of the present invention, an access component  is provided to interact with the application  and exchange\/store data in a database format as described above. This data can be stored on the local memory  and\/or on a server database  (e.g., can include commercially available SQL server). It is noted that transactions with the server database  can also be attempted even though the transactions may not affect the controller  (e.g., operate in accordance with database protocols  in an offline manner). It is to be appreciated that the database protocols  can be stored as database elements  (e.g., SQL elements, XML schema, data structures) describing controller functions and associated data affecting the controller and\/or other industrial control components. In addition, metadata can be associated with the database elements  that describe supervisory aspects of the present invention such as for control and security purposes, for example.","It is noted that the access component  (e.g., API set to access database) can act as an intermediary component between the application  and the database . As such, a separate communications network  (or software channel\/socket) can exist between the access component  and database , if desired. In another aspect, the access component  can communicate through the client\/server communications component  and network  to transfer information to and from the database . In addition, the access component  can be provided as a re-locatable object wherein the object is operated on various or different platforms\/applications to exchange data, control and\/or monitor industrial control activities. As one example, the access component  can be located and\/or operated in the memory subsystem  of the controller .","In another aspect of the present invention, the database protocols  can be generated by and\/or operated upon via one or more auxiliary control systems or control support systems (suitably adapted with an associated protocol converter) illustrated at reference numeral . For example, the systems at  which can also exchange data base protocols  stored and retrieved from the database  include CAD systems, drives, and\/or other control systems such as modeling systems, robotic systems, and\/or advanced manufacturing cells.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 4","b":["400","400","410","420","424","424","430","434","440","430","444"]},"The command interpreter  interacts with a row\/column buffer , wherein SQL data from the database  is translated as the data table and\/or network data  via a row\/column to data table converter  (e.g., code that associates row\/column data with an industrial control component data format). Similarly, if data is to be sent from the data table and\/or network format , a data table to row\/column converter  (e.g., code that associates an industrial control component data format with row\/column format) is employed to transmit industrial control component data to the row\/column buffer  for subsequent storage in the database  and\/or interaction with the database application . The command interpreter  thus controls a bi-directional dataflow between the database application , database , and respective industrial control components in a native language of the database . To illustrate an example of how the commands  may be processed by the command interpreter , the following discussion describes some exemplary SQL commands, operators, clauses, and\/or functions. It is to be appreciated however, that the present invention is not limited by the following examples, wherein other database formats and\/or functions may be employed in accordance with the database and\/or protocol conversion principles described herein.","Structured Query Language (SQL) is one example of a database protocol utilized to communicate with a database. According to ANSI (American National Standards Institute), it is generally considered the standard language for relational database management systems. SQL statements (described below) are employed to perform tasks such as update data on a database, or retrieve data from a database. Some common relational database management systems that use SQL are: Oracle, Sybase, Microsoft SQL Server, Access, Ingres, and so forth. Although many database systems employ some form of SQL, many of these systems also have additional proprietary extensions that are applicable to the respective database system. However, many standard SQL commands such as \u201cSelect\u201d, \u201cInsert\u201d, \u201cUpdate\u201d, \u201cDelete\u201d, \u201cCreate\u201d, and \u201cDrop\u201d can be utilized to achieve many database interactions.","A relational database system generally contains one or more objects called tables. Data or information for the database is typically stored in these tables. Tables are uniquely identified by their names and are comprised of columns and rows. Columns contain a column name, data type, and other attributes for the column. Rows contain the records or data for the columns. The following illustrates some example SQL commands that may be employed for accessing such databases.","A select statement is used to query the database and retrieve selected data that match criteria that is specified such as:","select \u201ccolumn\u201d","[,\u201ccolumn\u201d,etc]","from \u201ctablename\u201d","[where \u201ccondition\u201d];","[ ]=optional","Column names that follow the select keyword determine which columns will be returned in the results. This can include selecting multiple column names, or using a \u201c*\u201d to select all columns. The table name that follows a keyword from specifies the table that will be queried to retrieve the desired results. A where clause (optional) specifies which data values or rows will be returned or displayed, based on the criteria described after the keyword where.","Conditional selections used in the where clause may include:","= Equal","> Greater than","< Less than",">= Greater than or equal","<= Less than or equal","< > Not equal to","LIKE *See note below","A LIKE pattern matching operator can also be used in the conditional selection of the where clause. Like is an operator that enables selections of rows that are \u201clike\u201d what is specified. A percent sign \u201c%\u201d can be utilized as a wild card to match possible characters that might appear before or after the characters specified.","For purposes of brevity one or more of the following commands and\/or operators can also be employed in accordance with the present invention and as are readily understood with regards to SQL database languages. These commands can include create table statements having associated constraints if desired, insert statements, update statements, delete statements, drop table commands, aggregate functions such as:",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["MIN","returns the smallest value in a given column"]},{"entry":["MAX","returns the largest value in a given column"]},{"entry":["SUM","returns the sum of the numeric values in a given column"]},{"entry":["AVG","returns the average value of a given column"]},{"entry":["COUNT","returns the total number of values in a given column"]},{"entry":["COUNT(*)","returns the number of rows in a table"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Other possible examples commands or functions include group by clauses, having clauses, order by clauses, conditional and\/or boolean operators for accessing desired rows and\/or columns, in and between clauses, mathematical operators, modulo operators, and\/or join functions or operators to facilitate relational operations with a database.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["500","500","1","1","500","1","2","1","1","1","1","2","500"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["610","620","630","600","630","610","640","644","640","644","620","650","654","650","630","660","664"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["700","710","720","728","730","738","710","730","738","720","724","700","730","738","730","738","720","728"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8","b":["800","804","810","814","820","814"]},"SqlXmlCommand at  is employed to send a Transact-SQL statement to the database , execute a stored procedure, or query the database via other technologies such as annotated schemas\/other XML views at  and retrieve results as XML.","SqlXmlParameter (not shown) specifies a value for a parameter in the command class and\/or other class. This can be a parameter to control another class, an ad hoc query, stored procedure, XPath query at , Xquery at , and\/or XML template at .","SqlXmlAdapter at  is employed to populate a DataSet object with an XML result set, or update the database .","The SqlXmlCommand class  is employed when retrieving data from the SQL Server  in XML format. This class  enables users\/systems to send queries to the database and retrieve the results as a stream or XmlReader object at , and\/or to send the output into another stream. The query can be parameterized, and via the SqlXmlParameter class, users\/systems can specify values for the parameters. Remote systems can execute queries via ad hoc Transact-SQL statements, stored procedures, annotated schemas, Xpath , Xquery  and templates . XML data can be returned from the database or server , or alternatively a conversion to XML on the client side can be performed by setting a property in the managed class . In addition, the SqlXmlCommand can automatically apply a style sheet to an XML result set, performing a transformation between data structures.","Other operations performed by the command class  include retrieving XML data via an ExecuteStream method which returns XML data from SQL Server  as a managed code stream instance. One reason for returning results as a stream may be to perform an operation on a document as a whole without substantial regard for its contents. Such an operation could include compressing or encrypting the result set. In this case, the XML results are generally not treated as an actual XML document, but rather as a stream of bytes. In another instance, rather than return XML data from SQL Server  as a Stream object, an XML result can be sent directly to the destination  and  without modification. In this case, an ExecuteToStream method sends resulting XML to a FileStream object, a NetworkStream object, and\/or a Response object.","An ExecuteXmlReader method, which returns an XmlReader object at  is a high-performance object that can iterate through one or more nodes in an XML result set. If random access is needed to the XML results, XmlReader can be passed as an argument to a constructor of an XmlDocument object (not shown). The XmlDocument object can be employed with a Document Object Model (DOM), for example, for manipulating the result set.","In some cases, existing stored procedures may not be edited to return an XML result set. For example, consider the following stored procedure:","Generating XML on the client side generally involves the following acts:","Setting a ClientSideXml property of the SqlXmlCommand object to true at .","A CommandText property updated to contain \u201cFOR XML NESTED\u201d or \u201cFOR XML RAW\u201d or \u201cFOR XML Explicit\u201d. This clause is intercepted by an OLE DB (or other type) provider at reference numeral , and indicates that the result set should be converted to XML. Though the stored procedure may not have not been modified, an XmlReader object can be instantiated on the client or remote system.","If ad hoc queries or stored procedures are employed to query the SQL Server , columns in the result set can be serialized as attributed in a resulting XML document. There is also an element-centric mode for returning XML via NESTED, AUTO or RAW XML modes. If the format of returned XML should be changed, an annotated schema can be employed to define which columns will be expressed as elements, and which columns will be expressed as attributes. Annotated schemas enable modifying the result set via Xpath at . An annotated schema is an XML schema document that specifies tables and columns to query in SQL, and the structure of a resulting XML format. A SchemaPath property specifies a physical path to a schema file. This path can be relative to the location of the executable. The schema file maps resulting XML to tables and columns in the database. A CommandText property specifies an XPath query  that defines an XML result set, wherein XPath syntax at  searches for matching elements and can limit a resultant set of data. XPath  can be employed in conjunction with XSL Transformations (XSLT) to select specified nodes from an input XML document for transformation or rendering. XPath can also be utilized with DOM to select a subset of nodes to work with programmatically.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 9"},"Referring now to , and proceeding to , a protocol converter is installed on an industrial control component. As noted above, the protocol converter can reside in the industrial control component and\/or be associated with the industrial control component such as reside on a communications module or I\/O module, or interface system that interacts with a PLC. At , one or more database commands are interpreted by the industrial control components. Such commands can be encoded in substantially any data type or format. If desired, such encoding can include various encryption techniques (e.g., encrypt control file with a 168 bit encryption key). As noted above, the encoding can be in an SQL, XML, SQLXML and the like, if desired. At , data translations occur between industrial control formats and database formats. As noted above, such translations can be provided by the protocol converter that can translate between row\/column format and industrial control component data table format and\/or other network formats, for example. At , data is exchanged between one or more control components and one or more database systems utilizing a database language.","What has been described above are preferred aspects of the present invention. It is, of course, not possible to describe every conceivable combination of components or methodologies for purposes of describing the present invention, but one of ordinary skill in the art will recognize that many further combinations and permutations of the present invention are possible. Accordingly, the present invention is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
