---
title: Systems and methods for providing security through sessions
abstract: Systems and methods are described for providing security through sessions. In an implementation, a method includes initiating a session, by an operating system, in which operating system services are executable and initiating another session, by the operating system, in which a user-interactive application is executable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005959&OS=08005959&RS=08005959
owner: Microsoft Corporation
number: 08005959
owner_city: Redmond
owner_country: US
publication_date: 20041012
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["The present application claims priority under 35 U.S.C. \u00a7120 as a continuation of U.S. patent application Ser. No. 10\/939,954, filed Sep. 13, 2004, and titled \u201cSystems and Method for Providing Security Through Sessions\u201d, the disclosure of which is hereby incorporate by reference in its entirety.","The present invention generally relates to the field of security and more particularly relates to systems and methods for providing security through sessions.","An operating system, when executed, may include a plurality of operating system services to perform system related functions. For example, operating system services may be configured to provide system-level support, such as a system event log, a task scheduler, telephony, and so on. Thus, operating system services may provide the \u201cbackbone\u201d of an operating system and provide critical functionality to the execution of the operating system.","A variety of different type of operating system services may be executed on a computing device. A first type of operating system service is a non-interactive service which is configured for execution without user interaction. For instance, a non-interactive service may be executed without providing a user interface. A second type of operating system service is a user-interactive service that does provide for interaction with the user, such as by providing a user interface for interaction with the user.","Typically, operating system services are executed by the operating system in an elevated security context, such as \u201cLocalSystem\u201d, and therefore have high privileges in the execution of the operating system. Privileges define rights to perform specific tasks. For example, a \u201chigh\u201d privilege may define a right to perform tasks that affect operation of an entire computer system, while a \u201clow\u201d privilege may define a right to interact with a particular programming object. Because some operating system services are user-interactive, however, a malicious user may utilize the user-interactive services to run malicious code at a higher privilege than would otherwise be possible and therefore attack the operation of a computing device which executes the operating system.","An operating system, for instance, may provide an interactive desktop that acts as a security boundary such that any application executed on the interactive desktop can interact with any window that is provided on the interactive desktop, even if that window is invisible. Consequently, a user-interactive service that opens a window on the interactive desktop exposes itself to applications executed by any logged-on user, even a malicious user. For instance, a user-interactive service which provides a window in the interactive desktop may be utilized to elevate code written by the malicious user to the elevated security context of that service. As a result, the code, when elevated, may attack and take control of the user-interactive service to disrupt execution of the operating system.","Accordingly, there is a continuing need for systems and methods that afford security for operating system services provided through execution of an operating system.","Systems and methods are described for providing security through sessions. The sessions may be utilized to isolate execution of different functionality of the computing device, one from another, to protect the operation of the computing device. For example, during the boot process of an operating system on a computing device, a first session and a second session may be initiated. The first session is configured to contain operating system services, while the second session is configured to contain one or more applications. The first and second sessions thereby isolate the operating system services from the one or more applications, thereby protecting the operating system services from attack. For instance, the first session may prohibit interactive user logon such that a malicious user cannot access the first session to interfere with the operating system services.","In another example, sessions may be utilized to provide multi-level security to a plurality of applications. Each of the plurality of applications, for instance, may have different security considerations for execution on a computing device. A session may be provided for each of the different applications such that each session provides access to the functionality of the computing device according to the differing security considerations. For instance, a first application may be configured to provide administrative functions on the computing device and therefore is executed in a first session which permits access to all of the functionality of the computing device. A second application may be obtained from a trustworthy source and therefore executed in a second session which permits access a portion of the functionality of the computing device that, while significant, is less than the portion permitted by the first session. A third application, on the other hand, may be obtained from an untrustworthy source, and therefore executed in a third session which provides restricted access to computing device functionality, thereby protecting against malicious use. In other words, the first session provides \u201chigher\u201d or \u201cgreater\u201d access privileges for the computing device functionality that the second and third sessions. Likewise, the second session provides higher privileges than the third session, and so on. Thus, each session may be utilized to isolate the execution of the first, second, and third applications, one from another, to protect against an elevation of privilege attack that was made possible through concurrent execution of applications on an interactive desktop, as previously described.","The same reference numbers are utilized in instances in the discussion to reference like structures and components.","Overview","System and methods are described for providing security through sessions. In an implementation, separate sessions are initiated by the operating system for execution of operating system services and for execution of applications. The execution of the operating system services in one session is isolated from the execution of the applications in another session.","The operating system services, for instance, may be executed in a first session that does not permit interactive user logon. An application which is user-interactive is executed in a second session that does permit interactive user logon. Hence, the application having a lower privilege (i.e., more restricted access to tasks capable of being performed by the operating system) cannot be executed in the first session to attack the higher-privileged operating system services. In this way, the first and second sessions may be utilized to protect against an attack from a malicious user that was previously made possible through execution of the operating system services and the applications on an interactive desktop. For instance, because the user's applications are executed in a different session from the higher-privileged operating system services, a malicious application may not attack a vulnerability existing in the higher privileged operating system service to gain elevation of privilege as was previously described.","Sessions may also be utilized to provide a variety of additional security functionality. For example, a plurality of sessions may be provided for execution of applications. Each session may be provided based on different security considerations in the execution of the respective applications. The operating system, for instance, may dynamically create a different security level for execution of a specific application by creating a new session. Each session may automatically contain the execution of the application in the session, thereby controlling permissible and non-permissible interaction of the application with other applications being executed in other session. For instance, the sessions may be linked through pre-defined channels which characterize permissible read\/write access between applications being executed in the sessions. Thus, the execution of the applications may be controlled without requiring active monitoring of communications sent between the applications, thereby conserving hardware, software and network resources. Further discussion of the use of sessions and channels for execution of a plurality of applications may be found beginning in relation to .","Exemplary Environment",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["100","100","102","104","102","102","102","104","102","102","104"]},"The computing device  has a processor  and memory  (e.g., a computer-readable storage media). The processor  is not limited by the materials from which it is formed or the processing mechanisms employed therein. For example, the processor  may be formed from semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors, and thus of or for a computing device, may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth. Additionally, although a single memory  is shown, a wide variety of types and combinations of memory may be employed, such as random access memory (RAM), hard disk memory, removable medium memory, and so forth.","An operating system  is illustrated as being executed on the processor  and is storable in memory . The operating system  is software (which may be provided by one or more modules) that controls the allocation and usage of hardware resources of the computing device , such as memory , processor , peripheral devices (e.g., the display device ), and so on. The operating system  is foundation software on which programs, such as word processors, spreadsheets, browsers, and so on, may employ to access the hardware resources. For instance, the computing device  may include a plurality of applications (m), where \u201cm\u201d can be any integer from one through \u201cM\u201d, which are illustrated as stored in memory  and are executable on the processor . Each of the plurality of applications (m) is executable to provide a variety of functionality to a user, such as a word processor, a spreadsheet, a browser, and so on. The operating system  may provide one or more application programming interfaces (APIs) which \u201chide\u201d the details of allocation and usage of the hardware resources of the computing device  from the applications (m). In this way, a software developer that creates one or more of the plurality of applications (m) may write the applications (m) without having to be aware of the specific implementation details of the hardware which will be utilized to execute the applications (m).","As previously described, the operating system  may include a plurality of operating system services (j), where \u201cj\u201d can be any integer from one to \u201cJ\u201d. Each of the plurality of operating system services (j) (hereinafter \u201cservices\u201d) may be interactive or non-interactive. Non-interactive services are configured for execution without user interaction and therefore generally do not provide a user interface. User-interactive services, on the other hand, do provide for interaction with the user and therefore may include a user interface.","The operating system  includes a session manager module  (hereinafter \u201csession manager\u201d) which is executable to provide a plurality of sessions (k), where \u201ck\u201d can be any integer from one to \u201cK\u201d. Each of the sessions (k) may be configured to contain execution of one or more of the plurality of services (j), one or more of the plurality of applications (m), and so on. For instance, the operating system , when booting, may initiate a first one of the plurality of sessions (k) to contain the plurality of services (j) and another one of the plurality of sessions (k) to contain one or more of the applications (m). The sessions (k) isolate the execution of the plurality of services (j) from the applications (m), further discussion of which may be found beginning in relation to .","Generally, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, or a combination of software and firmware. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, such as the memory  as previously described. The features of the sessions described herein are platform-independent, meaning that the strategies may be implemented on a variety of commercial computing platforms having a variety of processors.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","102","116","114","112","118","116","116","118","118","116"]},"The session manager , for instance, may be executed on the processor  during a boot process of the operating system  to initiate first and second sessions (), (). The first session (), in this instance, is initiated to contain execution of the plurality of services (j), and the second session () is initiated to contain execution of the application (m). Although the first and second sessions (), () are illustrated as executed on the processor , each of the sessions may also include a respective portion of the memory , which is illustrated through the use of dashed lines in . The respective portions of the memory  may be utilized to store data for processing and as a result of processing performed within the respective sessions. For example, the second session () may include an execution of the application (m), data contained in memory  for processing by the application (m), and data that was processed by the application (m).","In an implementation, applications, services and data within a session are accessible by other applications and services within that session. For example, one of the plurality of services (j) may be accessible by another one of the plurality of services (j) in the first session (). Each of the plurality of services (j), however, are not directly accessible by the application (m) that is being executed in the second session (). However, the application (m) can communicate with services (j) in the other session via InterProcessCommunication (IPC) paradigms like Remote Procedure Call (RPC), Local Procredure Call (LPC), and so on, to obtain desired data. Since the application (m) and services (j) do not share the same interactive desktop, however, communication of window messages and other desktop-level interactions are not possible. Thus, the first and second sessions (), () provide isolation of the services (j) from the application (m), and vice versa. The services (j) may also be isolated, one from another, through the use of sessions, further discussion of which may be found in relation to the following figure.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIG. 3","FIG. 1","FIG. 2"],"b":["300","102","116","114","112","118","1","118","2","118","1","118","2"]},"The first session (), for instance, may include a collection  of non-interactive services, which is illustrated in  as including services ()-( j). As previously described, non-interactive services are configured for execution without user interaction. For instance, a non-interactive service may be executed without providing a user interface, such as a corresponding window on a desktop. The second session () includes a collection  of user-interactive services, which is illustrated in  as including services (j+1)-(J). The user-interactive services (j+1)-(J) may provide a user interface for user interaction, such as by providing a window on a desktop. By separating the user-interactive services ()-(j) from the non-interactive services (j+1)-(J), the first and second sessions (), () protect the non-interactive services ()-(j) from access by a malicious user via the user-interactive services (j+1)-(J).",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 1","FIG. 2","FIG. 3"],"b":["400","102","116","114","112","118","1","118","2","118","1","118","114"]},"The plurality of sessions ()-(K) may be utilized to provide multi-level security for execution of the corresponding applications ()-(K). Multi-level security refers to the classification of data, such as into hierarchical levels (e.g., restricted, secret, top-secret, and so on), groupings (e.g., \u201cOperation Overlord\u201d), and so on. For example, multi-level security may be utilized to provide mandatory access control (MAC) to enforce security classification and releasability of data, such as to control data flow between levels, groupings, and so on.","The computing device , for instance, may execute the session manager  to initiate a plurality of sessions ()-(K). During boot of the operating system , for example, the session manager  may be executed to create a session () for containing execution of the services (j) and a session () for containing an execution of an application (). The session manager  may also be executed to provide multi-level security for a plurality of applications (), . . . , (k), . . . , (K) through respective sessions (), . . . , (k), . . . , (K). For instance, the plurality of sessions ()-(K) may provide a hierarchy based on security considerations of the respective applications ()-(K). The hierarchy  is illustrated through use of an arrow such that session () has greater security access  (e.g., access to a greater portion of the functionality of the computing device ) that session (k), which has lesser security access . In , parentheticals are utilized to indicate correspondence of the applications with their respective sessions, such as application () and session (), and so on.","The session manager  may expose internal application programming interfaces (APIs) to other operating system  modules to dynamically create new sessions and start new applications in the newly created session. For example, the operating system , through execution of the session manager , may create session (k) for application (k) to isolate application (k) in its own \u201ccontainer\u201d from the other applications (e.g., applications (), (k)) being executed on the computing device .","The session manager  may determine whether to initiate a new session in a variety of ways. For example, the session manager  may access a session creation table  which includes a plurality of application identifiers (x), where \u201cx\u201d can be any integer from one to \u201cX\u201d, which are utilized to locate corresponding one of a plurality of security parameters (x). For example, the session manager  may receive a request to initiate an application and find a corresponding one of the plurality of applications identifiers (x) in the session creation table  to locate the security parameters (x) for that application. The session manager  may then utilize the located security parameters (x) to determine whether to create a new session for the application, execute the application in a pre-existing session, and so on. Although execution of the session manager  to make the determination has been described, this functionality may be provided separately by another component, such as an operating system component referred to as a \u201ckernel\u201d to execute a module called \u201cCreateProcess\u201d. For instance, based on the determination made through execution of the \u201cCreateProcess\u201d module, the kernel may call the session manager  to cause the new session to be created. Further discussion of creation of a session based on security considerations of an application may be found in relation to .","In an implementation, the session manager  may create the session (k) as a \u201cchild\u201d from a parent session (e.g., session ()). The parent\/child session relationship may provide a variety of functionality. For instance, a parent\/child session relationship between sessions (), (k) may be utilized such that execution of the application (k) in session (k) is synchronized with execution of the application () in session (), a logoff initiated in either of the sessions (), (k) is effective the other one of the sessions (), (k), and so on.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":["500","502","1","502","502","118","1","118","118","118","1","118","502","1","502","118","1","112","1","112","2","504","1","504","2","118","112","504","118","112","504","502","1","502","118","1","118"]},"Security level (), for example, may be configured as a hierarchical level in a multi-level security system for \u201ctop secret\u201d access to applications (), () and data (), (). Security level (y) is configured as another hierarchical level for \u201csecret\u201d access to applications (y) and data (y). Likewise, security level (Y) is configured as an additional hierarchical level for \u201cconfidential\u201d access to applications (Y) and data (Y). Therefore, a user that logs on to session () has \u201ctop secret\u201d access to the applications (), () and data (), () included at that security level ().","To provide access to applications and data contained in other sessions, a plurality of channels , ,  are included in the system  which define permissible data flow between the sessions ()-(Y). The plurality of channels - are illustrated as arrows in  which indicate the permissible direction that data may flow between sessions ()-(Y). For example, channel , located between sessions (), (y), indicates that data may flow from session (y) to session (), but not the other way. Application (), for instance, may have \u201cread access\u201d to the application (y) and data (y) contained in session (y), but cannot write data to the session (y). Therefore, a user utilizing application () may access the application (y) and data (y) in the session (y) for processing, but may only store a result of the processing in session (). Thus, in this example, the processed data remains in that session (), thereby preserving the \u201ctop secret\u201d nature of data processed in the session (). Likewise, channel  may be utilized to provide access from session (y) to session (Y) and channel  may be utilized to provide access from session () to session (Y). In an implementation, the channels are configured such that data may not flow between multiple sessions to a destination session. For example, session () may access session (y) through channel , but may not access session (Y) through channel . Therefore, channel  is provided to permit such access from session () to session (Y). In another implementation, data flow between multiple sessions is permissible such that session () may access session (Y) through session (y) by utilizing channels , .","The channels - may be configured to automatically route data between sessions ()-(Y) without requiring active monitoring to protect against impermissible dissemination of data as was previously required utilizing traditional techniques. For instance, when data (e.g., messages) were sent between users utilizing traditional techniques, the messages were monitored to ensure that the transfer of the message was permitted. However, in the current implementation, such monitoring is not needed because the channels - define permissible transfer of data. Therefore, the channels - may be utilized to route the data without requiring active monitoring of the data. Active monitoring, however, may still be performed such that the channels do not serve as a \u201cbackdoor\u201d for interchanging messages which are not permissible.","A variety of techniques may be utilized by the sessions ()-(Y) to provide isolation, one from another. For example, each of the plurality of sessions ()-(Y) may include a respective one of a plurality of viewer modules (), . . . , (y), . . . , (Y). Each of the viewer modules ()-(Y) is responsible for user interaction with the sessions ()-(Y), such as by performing windows management, reading inputs from input devices, rendering graphics, and so on. Since each session ()-(Y) has its own instance of the viewer module ()-(Y), a separation (i.e., isolation) is provided between one session and another, thereby providing a security boundary between sessions. For instance, session (y) is not able to read inputs associated with session (), application (Y) is not able to communicate with application (y) by sending a window message, and so on. In another implementation, the viewer modules ()-(Y) are executed in a parent session and are able to display data from a child session, an example of which is shown in the following figure.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 6","FIG. 1","FIG. 5"],"b":["600","104","602","604","512","1","512","602","118","1","512","1","112","1","504","1","512","1","602"]},"Additionally, because session () can access session (y) via channel  of , the viewer module () may also be executed to display application (y) and data (y) from session (y). Thus, the viewer module () may display data (y) from a child session (e.g., session (y)). Since session (Y) does not have access to any other session, the viewer module (Y) of session (Y) provides window  for user interaction with the application (Y) and data (Y) from that particular session (Y). Although isolation provided through execution of separate viewer modules for each session has been described, a variety of other techniques may also be utilized to provide isolation between sessions ()-(Y), such as unique object namespaces, use of a different networking stack for each session, and so forth.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 7","FIG. 5"],"b":["700","702","1","702","2","702","3","118","1","118","2","118","3","500","702","1","702","2","702","3","700"]},"The system , for example, may be configured for use in a hospital to address the Health Insurance Portability and Accountability Act of 1997 (hereinafter \u201cHIPAA\u201d). HIPAA specifies a set of standards to protect dissemination of patient information, such as by defining permissible uses for patient information. The system  may be configured such that the sessions ()-() are interconnected in accordance with HIPAA to provide permissible access to data.","Session (), for instance, is configured according to a policy grouping () for doctors. The session () may include an application () configured to chart patient data, which is then stored as data (). Session () is configured according to another policy grouping () for a pharmacy, which includes an application () which is executable to process prescriptions and data () containing patient prescriptions and available pharmaceuticals. Session () is configured according to a policy grouping () for a finance department, and includes an application () which is executable to process billing information and data () describing costs of services. Each of the sessions ()-() includes a respective viewer module ()-(), which is executable to provide interaction with a user that is \u201clogged on\u201d to the respective session ()-().","The sessions ()-() are interconnected via a plurality of channels -. As previously described, the channels - define permissible data flow in the system . For example, channels , ,  are illustrated as solid lines which correspond to the solid line of the policy grouping () and channel  is illustrated a finely-dashed line which corresponds to the finely-dashed line of policy grouping (). Session () has both read and write access to session () as illustrated by the respective channels , . Therefore, a doctor, when logged on to the session (), may access the application () and data () of the session (), such as to write a prescription and read which pharmaceuticals are available. Session (), however, does not have access to the session (), and therefore cannot obtain patient data written by the doctor in the session (). Sessions (), () both have write access to session () via respective channels ,  to provide billing information for processing by the finance department. In this way, the plurality of sessions ()-() are configured to provide access to applications ()-() and data ()-() according to policy groupings ()-(). Although policy groupings that were configured to define permissible dissemination of patent data were described, the policy groupings may be configured to provide security of data and application access for a variety of other settings, such as network access for company employees, and so on.","Exemplary Procedures","The following discussion describes sessions that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 8","b":["800","110","102","802","110","108","106"]},"In response to the commencement of the operating system , a session () is initiated for inclusion of a plurality of services (j) (block ). For instance, the session () may be executed to include services which are non-interactive. In another instance, the session () is executed to include both user-interactive and non-interactive services.","Another session () is also initiated for containing execution of an application (block ). For example, the other session () is illustrated in  as apart from session () and the services (j) contained therein. The application (m) is then executed in the other session () such that it is isolated from the services (j) which are executable in session () (block ). In an implementation, the initiating of the session () and the other session () is performed during the boot process of the operating system  on the computing device .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 9","b":["900","902"]},"A determination is then made as to whether there is another pre-existing session being executed (decision block ) that is suitable for containing the execution of the application. For example, the session manager may have been previously executed to initiate the other session for containing an execution of another application. As previously described, the other session may be utilized to isolate the services from the execution of the other application.","If there is not another pre-existing session (decision block ), the session manager is executed to initiate an additional session (block ), in which, the application is then executed (block ). Thus, if there is not another session which is suitable for containing execution of the application (i.e., a session other than the session which contains the services), the session manager is automatically executed to generate such a session.","If there is another pre-existing session (decision block ), a determination is made as to whether the application is suitable for being executed in the pre-existing session based on one or more security considerations (decision block ). For example, the session manager may access a database, such as the session creation table  of , to determine which privileges should be given to the application to access software and hardware resources of the computing device. A first application, for instance, may be provided from a trusted source that has a significant amount of included security procedures which protect the first application from tampering. A second application, on the other hand, may be downloaded from an untrustworthy website. Different sessions may be provided which supply various degrees of access to the resources of the computing device according to the respective security considerations. Therefore, the determination may be made based on whether the pre-existing session addresses the security considerations of the application (decision block ), and if so, the application is executed in the pre-existing session (block ). If the pre-existing session does not address the security considerations of the application (decision block ), another session is initiated by the session manager (block ) which does address the security considerations. For example, the other session may be configured to provide nearly-unlimited access to an administrative application that is indicated by an administrator of the computing device as trustworthy. The application may then be executed in the other session (block ). Thus, in this example three sessions may be provided, a first session for execution of the services, a second session for execution of a pre-existing application which addresses security considerations of the pre-existing application, and a third session for execution of the requested application which addresses the security considerations of the requested application. In this way, the session may be provided to isolate the services from the applications and also provide multi-level security for the execution of the applications.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":"FIG. 10","b":["1000","1002"]},"A user then interacts with the application in the second session (block ), such as to read email, browse the Internet, generate a document, and so on. During the user's interaction with the application, the user may decide to access administrative functions of the computing device. For example, the user may be a network administrator in charge of the functioning of a network that includes the computing device. While reading an email, the user may notice that the computing device is not functioning properly, which may require that the user access administrative functions of the computing device to correct the malfunction. Therefore, the user may utilize an input device to request initiation of the administrative functions on the computing device.","The operating system may then receive the request from the user to interact with the administrative functions of the computing device (block ). In response to the request, the operating system causes initiation of a third session to contain the execution of the administrative functions such that the execution thereof is isolated from application and the services (block ). For instance, the administrative functions may have greater access privileges to the resources of the computing device to administer operation of software on the computing device. To protect the administrative functions from attack by a malicious user and\/or malicious code, the administrative functions are given their own session separate from the sessions utilized to contain the applications. Thus, the user may utilize both the administrative functions and the other application on the computing device, yet still protect the execution of the administrative functions.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 6","FIG. 1","FIG. 5"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
