---
title: Systems and methods for automatically testing an application
abstract: Systems and methods for performing automated load and usability testing via an application delivery appliance can include methods where a browser having a unique identifier is detected and a script is injected into the HTML response generated by the page displayed within the browser. The injected script renders the page and the links on the page, and then selects a link within the rendered page. Upon selecting a link, the script then waits for a period of time before calling a function associated with the selected link. In situations where the browser is a control browser, the calling of a function associated with the link is followed by the spawning of one or more slave browsers, where each slave browser further executes the above-listed steps beginning with the execution of the injected script and ending with the calling of the function associated with the selected link.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700763&OS=08700763&RS=08700763
owner: Citrix Systems, Inc.
number: 08700763
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20090519
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This U.S. Patent Application claims priority to U.S. Provisional Patent Application Ser. No. 61\/054,320, filed on May 19, 2008, the disclosure of which is considered part of the disclosure of this application and is herein incorporated by reference in its entirety.","This application relates generally to monitoring a user's experience whilst the user engages with an application. In particular, this application relates to systems and methods for automating a process for performing load and usability testing.","There exist a number of applications and methods to monitor the load placed on an appliance or web-application. There also exist a number of applications and methods for monitoring the reliability of a particular appliance or web-application. Some of these methods include recording a series of actions or requests issued to a particular application or appliance and then replaying the recorded sequence at a high rate of speed to determine the affect on the appliance or application in question. These methods often do not actually execute web page contents, but rather replay the sequence of recorded requests.","A current need exists for a load testing solution that integrates seamlessly into pre-existing technology for monitoring the application experience of an end user. A further need exists for a load testing solution that interacts directly with an application or appliance rather than replay a recorded script.","In its broadest interpretation, this disclosure illuminates one or more embodiments of systems and methods for performing automated load and usability testing on an application delivery appliance. Testing the load on a particular application or appliance can require creating a separate testing program that often times cannot integrate with existing applications. For example, these testing programs often do not actually interact with web applications displayed within a browser, rather they can either replay a set of actions or execute a pre-determined set of commands. There exists a need for methods and systems that automate load and usability testing, this disclosure describes such methods and systems that automate testing by injecting a script into a browser when it is determined that said browser should be tested. Once the script is injected into the browser, the page is rendered and a link within the page is selected. The script then waits for either a random or pre-determined amount of time and proceeds to either call the a function or event associated with the link, or navigate to the page associated with the link. In many embodiments, if the browser in question is a control browser, then multiple slave browsers are spawned once the function or event is called or the browser navigates to the page associated with the link. Each slave browser is further configured to carry out the steps of executing the script, rendering the page and the links, selecting a link, waiting for a period of time, and then either calling the function or event, or navigating to the page associated with the selected link.","In one instance, described herein is an embodiment of a method for automatically testing load on an application delivery appliance. The method includes identifying, by a load testing client executing on an application delivery appliance, a browser having a predetermined feature, and executing, by the application delivery appliance, a load generating module within the identified browser. The load generating module can then select a first link within a page displayed in the identified browser and determine that the identified browser is either a control browser type or a slave browser type. Based in part on this determination, the load generating module can then spawn slave browsers responsive to determining the identified browser is a control browser type. Each spawned slave browser can then execute the load generating module to select the first link, and determine the browser type of the spawned slave browser.","In one embodiment, the method can further comprise a load testing client that injects the load generating module into the identified browser after identifying the browser. Still other embodiments can include a load generating module that renders the page displayed within the identified browser prior to selecting the first link. The page can in some embodiments comprise a plurality of links, and in some embodiments selecting the first link further comprises selecting the first link from the plurality of links.","The load generating module, in some embodiments, determines the identified browser is a slave browser and responsively stops execution of the load generating module.","In another embodiment, the method can further comprise navigating to a page associated with the first link after selecting the first link.","In some embodiments the method can further comprise calling an event associated with the first link after selecting the first link. In another embodiment, the method can further comprise a load generating module that waits a predetermined period of time after selecting the first link.","In other embodiments, the method can further comprise selecting either a random first link or a predetermined first link. Still other embodiments can include spawning either a predetermined number of slave browsers or a random number of slave browsers.","Some embodiments include supplying form input to a web form displayed within the page and submitting the web form. In other embodiments, selecting the first link further comprises validating a link destination associated with the first link against a list of excluded link destinations. Selecting the first link can further comprise establishing a destination location weighting. The number of spawned slave browsers, in such an embodiment, can be determined by the destination location weighting such that the slave browsers are spawned according to the destination location weighting.","In some embodiments, selecting the first link can comprise selecting the first link according to a selection rate. The application delivery appliance, in some embodiments, can dynamically vary the load generating module to match one of either capabilities of the browser, and a structure of the page.","In other instances, described herein a computer readable medium having instructions executable by a processor to implement the methods described above.","In still other instances, described herein is a system for automatically testing load on an application delivery appliance. The system includes an application delivery appliance executing a load generating module within a browser. Also included is a load testing client executing on an application delivery application, where the load testing client: identifies the browser having a predetermined feature; selects a first link within a page displayed within the identified browser; and determines the identified browse is one of either a control browser type and as a slave browser type. The system also includes a load generating module that spawns slave browsers responsive to determining that the identified browser is a control browser type. Each spawned slave browser can execute the load generating module to select the first link, and determine the browser type of the spawned slave browser.","For purposes of reading the description of the various embodiments of the present invention below, the following descriptions of the sections of the specification and their respective contents may be helpful:","Section A describes network environments and computing environments;","Section B describes embodiments of a system and appliance architecture for accelerating delivery of a computing environment to a remote user;","Section C describes embodiments of a method and system for performing automated load and usability testing.","Section A: Network and Computing Environment","Prior to discussing the specifics of embodiments of the systems and methods of an appliance and\/or client, it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to , an embodiment of a network environment is depicted. In brief overview, the network environment comprises one or more clients -(also generally referred to as local machine(s) , or client(s) ) in communication with one or more servers -(also generally referred to as server(s) , or remote machine(s) ) via one or more networks , \u2032 (generally referred to as network ). In some embodiments, a client  communicates with a server  via an appliance .","Although  shows a network  and a network \u2032 between the clients  and the servers , the clients  and the servers  may be on the same network . The networks  and \u2032 can be the same type of network or different types of networks. The network  and\/or the network \u2032 can be a local-area network (LAN), such as a company Intranet, a metropolitan area network (MAN), or a wide area network (WAN), such as the Internet or the World Wide Web. In one embodiment, network \u2032 may be a private network and network  may be a public network. In some embodiments, network  may be a private network and network \u2032 a public network. In another embodiment, networks  and \u2032 may both be private networks. In some embodiments, clients  may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network  to the servers  located at a corporate data center.","The network  and\/or \u2032 be any type and\/or form of network and may include any of the following: a point to point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. In some embodiments, the network  may comprise a wireless link, such as an infrared channel or satellite band. The topology of the network  and\/or \u2032 may be a bus, star, or ring network topology. The network  and\/or \u2032 and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.","As shown in , the appliance , which also may be referred to as an interface unit  or gateway , is shown between the networks  and \u2032. In some embodiments, the appliance  may be located on network . For example, a branch office of a corporate enterprise may deploy an appliance  at the branch office. In other embodiments, the appliance  may be located on network \u2032. For example, an appliance  may be located at a corporate data center. In yet another embodiment, a plurality of appliances  may be deployed on network . In some embodiments, a plurality of appliances  may be deployed on network \u2032. In one embodiment, a first appliance  communicates with a second appliance \u2032. In other embodiments, the appliance  could be a part of any client  or server  on the same or different network ,\u2032 as the client . One or more appliances  may be located at any point in the network or network communications path between a client  and a server .","In some embodiments, the appliance  comprises any of the network devices manufactured by Citrix Systems, Inc. of Ft. Lauderdale Fla., referred to as Citrix NetScaler devices. In other embodiments, the appliance  includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the DX acceleration device platforms and\/or the SSL VPN series of devices, such as SA 700, SA 2000, SA 4000, and SA 6000 devices manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In yet another embodiment, the appliance  includes any application acceleration and\/or security related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco ACE Application Control Engine Module service software and network modules, and Cisco AVS Series Application Velocity System.","In one embodiment, the system may include multiple, logically-grouped servers . In these embodiments, the logical group of servers may be referred to as a server farm . In some of these embodiments, the servers  may be geographically dispersed. In some cases, a farm  may be administered as a single entity. In other embodiments, the server farm  comprises a plurality of server farms . In one embodiment, the server farm executes one or more applications on behalf of one or more clients .","The servers  within each farm  can be heterogeneous. One or more of the servers  can operate according to one type of operating system platform (e.g., WINDOWS NT, manufactured by Microsoft Corp. of Redmond, Wash.), while one or more of the other servers  can operate on according to another type of operating system platform (e.g., Unix or Linux). The servers  of each farm  do not need to be physically proximate to another server  in the same farm . Thus, the group of servers  logically grouped as a farm  may be interconnected using a wide-area network (WAN) connection or medium-area network (MAN) connection. For example, a farm  may include servers  physically located in different continents or different regions of a continent, country, state, city, campus, or room. Data transmission speeds between servers  in the farm  can be increased if the servers  are connected using a local-area network (LAN) connection or some form of direct connection.","Servers  may be referred to as a file server, application server, web server, proxy server, or gateway server. In some embodiments, a server  may have the capacity to function as either an application server or as a master application server. In one embodiment, a server  may include an Active Directory. The clients  may also be referred to as client nodes or endpoints. In some embodiments, a client  has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients -","In some embodiments, a client  communicates with a server . In one embodiment, the client  communicates directly with one of the servers  in a farm . In another embodiment, the client  executes a program neighborhood application to communicate with a server  in a farm . In still another embodiment, the server  provides the functionality of a master node. In some embodiments, the client  communicates with the server  in the farm  through a network . Over the network , the client  can, for example, request execution of various applications hosted by the servers -in the farm  and receive output of the results of the application execution for display. In some embodiments, only the master node provides the functionality required to identify and provide address information associated with a server \u2032 hosting a requested application.","In one embodiment, the server  provides functionality of a web server. In another embodiment, the server receives requests from the client , forwards the requests to a second server and responds to the request by the client  with a response to the request from the server . In still another embodiment, the server  acquires an enumeration of applications available to the client  and address information associated with a server  hosting an application identified by the enumeration of applications. In yet another embodiment, the server  presents the response to the request to the client  using a web interface. In one embodiment, the client  communicates directly with the server  to access the identified application. In another embodiment, the client  receives application output data, such as display data, generated by an execution of the identified application on the server .","Referring now to , an embodiment of a network environment deploying multiple appliances  is depicted. A first appliance  may be deployed on a first network  and a second appliance \u2032 on a second network \u2032. For example a corporate enterprise may deploy a first appliance  at a branch office and a second appliance \u2032 at a data center. In another embodiment, the first appliance  and second appliance \u2032 are deployed on the same network  or network . For example, a first appliance  may be deployed for a first server farm , and a second appliance  may be deployed for a second server farm \u2032. In another example, a first appliance  may be deployed at a first branch office while the second appliance \u2032 is deployed at a second branch office\u2032. In some embodiments, the first appliance  and second appliance \u2032 work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server","Referring now to , another embodiment of a network environment deploying the appliance  with one or more other types of appliances, such as between one or more WAN optimization appliance , \u2032 is depicted. For example a first WAN optimization appliance  is shown between networks  and \u2032 and s second WAN optimization appliance \u2032 may be deployed between the appliance  and one or more servers . By way of example, a corporate enterprise may deploy a first WAN optimization appliance  at a branch office and a second WAN optimization appliance \u2032 at a data center. In some embodiments, the appliance  may be located on network \u2032. In other embodiments, the appliance \u2032 may be located on network . In some embodiments, the appliance \u2032 may be located on network \u2032 or network \u2033. In one embodiment, the appliance  and \u2032 are on the same network. In another embodiment, the appliance  and \u2032 are on different networks. In another example, a first WAN optimization appliance  may be deployed for a first server farm  and a second WAN optimization appliance \u2032 for a second server farm \u2032","In one embodiment, the appliance  is a device for accelerating, optimizing or otherwise improving the performance, operation, or quality of service of any type and form of network traffic, such as traffic to and\/or from a WAN connection. In some embodiments, the appliance  is a performance enhancing proxy. In other embodiments, the appliance  is any type and form of WAN optimization or acceleration device, sometimes also referred to as a WAN optimization controller. In one embodiment, the appliance  is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In other embodiments, the appliance  includes any of the product embodiments referred to as BIG-IP link controller and WANjet manufactured by F5 Networks, Inc. of Seattle, Wash. In another embodiment, the appliance  includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks, Inc. of Sunnyvale, Calif. In some embodiments, the appliance  includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco, Calif. In other embodiments, the appliance  includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland, N.J. In one embodiment, the appliance  includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino, Calif., such as the PacketShaper, iShared, and SkyX product embodiments provided by Packeteer. In yet another embodiment, the appliance  includes any WAN related appliances and\/or software manufactured by Cisco Systems, Inc. of San Jose, Calif., such as the Cisco Wide Area Network Application Services software and network modules, and Wide Area Network engine appliances.","In one embodiment, the appliance  provides application and data acceleration services for branch-office or remote offices. In one embodiment, the appliance  includes optimization of Wide Area File Services (WAFS). In another embodiment, the appliance  accelerates the delivery of files, such as via the Common Internet File System (CIFS) protocol. In other embodiments, the appliance  provides caching in memory and\/or storage to accelerate delivery of applications and data. In one embodiment, the appliance  provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment, the appliance  provides transport layer protocol optimizations, flow control, performance enhancements or modifications and\/or management to accelerate delivery of applications and data over a WAN connection. For example, in one embodiment, the appliance  provides Transport Control Protocol (TCP) optimizations. In other embodiments, the appliance  provides optimizations, flow control, performance enhancements or modifications and\/or management for any session or application layer protocol.","In another embodiment, the appliance  encoded any type and form of data or information into custom or standard TCP and\/or IP header fields or option fields of network packet to announce presence, functionality or capability to another appliance \u2032. In another embodiment, an appliance \u2032 may communicate with another appliance \u2032 using data encoded in both TCP and\/or IP header fields or options. For example, the appliance may use TCP option(s) or IP header fields or options to communicate one or more parameters to be used by the appliances , \u2032 in performing functionality, such as WAN acceleration, or for working in conjunction with each other.","In some embodiments, the appliance  preserves any of the information encoded in TCP and\/or IP header and\/or option fields communicated between appliances  and \u2032. For example, the appliance  may terminate a transport layer connection traversing the appliance , such as a transport layer connection from between a client and a server traversing appliances  and \u2032. In one embodiment, the appliance  identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance  via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance \u2032 via a second transport layer connection.","Referring now to , a network environment for delivering and\/or operating a computing environment on a client  is depicted. In some embodiments, a server  includes an application delivery system  for delivering a computing environment or an application and\/or data file to one or more clients . In brief overview, a client  is in communication with a server  via network , \u2032 and appliance . For example, the client  may reside in a remote office of a company, e.g., a branch office, and the server  may reside at a corporate data center. The client  comprises a client agent , and a computing environment . The computing environment  may execute or operate an application that accesses, processes or uses a data file. The computing environment , application and\/or data file may be delivered via the appliance  and\/or the server .","In some embodiments, the appliance  accelerates delivery of a computing environment , or any portion thereof, to a client . In one embodiment, the appliance  accelerates the delivery of the computing environment  by the application delivery system . For example, the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location, such as a branch office of the company. In another embodiment, the appliance  accelerates transport layer traffic between a client  and a server . The appliance  may provide acceleration techniques for accelerating any transport layer payload from a server  to a client , such as: 1) transport layer connection pooling, 2) transport layer connection multiplexing, 3) transport control protocol buffering, 4) compression and 5) caching. In some embodiments, the appliance  provides load balancing of servers  in responding to requests from clients . In other embodiments, the appliance  acts as a proxy or access server to provide access to the one or more servers . In another embodiment, the appliance  provides a secure virtual private network connection from a first network  of the client  to the second network \u2032 of the server , such as an SSL VPN connection. It yet other embodiments, the appliance  provides application firewall security, control and management of the connection and communications between a client  and a server .","In some embodiments, the application delivery management system  provides application delivery techniques to deliver a computing environment to a desktop of a user, remote or otherwise, based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques, a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment, the application delivery system  may reside or execute on a server . In another embodiment, the application delivery system  may reside or execute on a plurality of servers -. In some embodiments, the application delivery system  may execute in a server farm . In one embodiment, the server  executing the application delivery system  may also store or provide the application and data file. In another embodiment, a first set of one or more servers  may execute the application delivery system , and a different server may store or provide the application and data file. In some embodiments, each of the application delivery system , the application, and data file may reside or be located on different servers. In yet another embodiment, any portion of the application delivery system  may reside, execute or be stored on or distributed to the appliance , or a plurality of appliances.","The client  may include a computing environment  for executing an application that uses or processes a data file. The client  via networks , \u2032 and appliance  may request an application and data file from the server . In one embodiment, the appliance  may forward a request from the client  to the server . For example, the client  may not have the application and data file stored or accessible locally. In response to the request, the application delivery system  and\/or server  may deliver the application and data file to the client . For example, in one embodiment, the server  may transmit the application as an application stream to operate in computing environment  on client .","In some embodiments, the application delivery system  comprises any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122 and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application delivery system  may deliver one or more applications to clients  or users via a remote-display protocol or otherwise via remote-based or server-based computing. In another embodiment, the application delivery system  may deliver one or more applications to clients or users via steaming of the application.","In one embodiment, the application delivery system  includes a policy engine  for controlling and managing the access to, selection of application execution methods and the delivery of applications. In some embodiments, the policy engine  determines the one or more applications a user or client  may access. In another embodiment, the policy engine  determines how the application should be delivered to the user or client , e.g., the method of execution. In some embodiments, the application delivery system  provides a plurality of delivery techniques from which to select a method of application execution, such as a server-based computing, streaming or delivering the application locally to the client  for local execution.","In one embodiment, a client  requests execution of an application program and the application delivery system  comprising a server  selects a method of executing the application program. In some embodiments, the server  receives credentials from the client . In another embodiment, the server  receives a request for an enumeration of available applications from the client . In one embodiment, in response to the request or receipt of credentials, the application delivery system  enumerates a plurality of application programs available to the client . The application delivery system  receives a request to execute an enumerated application. The application delivery system  selects one of a predetermined number of methods for executing the enumerated application, for example, responsive to a policy of a policy engine. The application delivery system  may select a method of execution of the application enabling the client  to receive application-output data generated by execution of the application program on a server . The application delivery system  may select a method of execution of the application enabling the local machine  to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment, the application delivery system  may select a method of execution of the application to stream the application via the network  to the client .","A client  may execute, operate or otherwise provide an application, which can be any type and\/or form of software, program, or executable instructions such as any type and\/or form of web browser, web-based client, client-server application, a thin-client computing client, an ActiveX control, or a Java applet, or any other type and\/or form of executable instructions capable of executing on client . In some embodiments, the application may be a server-based or a remote-based application executed on behalf of the client  on a server . In one embodiments the server  may display output to the client  using any thin-client or remote-display protocol, such as the Independent Computing Architecture (ICA) protocol manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. or the Remote Desktop Protocol (RDP) manufactured by the Microsoft Corporation of Redmond, Wash. The application can use any type of protocol and it can be, for example, an HTTP client, an FTP client, an Oscar client, or a Telnet client. In other embodiments, the application comprises any type of software related to VoIP communications, such as a soft IP telephone. In further embodiments, the application comprises any application related to real-time data communications, such as applications for streaming video and\/or audio.","In some embodiments, the server  or a server farm  may be running one or more applications, such as an application providing a thin-client computing or remote display presentation application. In one embodiment, the server  or server farm  executes as an application, any portion of the Citrix Access Suite\u2122 by Citrix Systems, Inc., such as the MetaFrame or Citrix Presentation Server\u2122, and\/or any of the Microsoft\u00ae Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment, the application is an ICA client, developed by Citrix Systems, Inc. of Fort Lauderdale, Fla. In other embodiments, the application includes a Remote Desktop (RDP) client, developed by Microsoft Corporation of Redmond, Wash. Also, the server  may run an application, which for example, may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond, Wash., a web or Internet server, or a desktop sharing server, or a collaboration server. In some embodiments, any of the applications may comprise any type of hosted service or products, such as GoToMeeting\u2122 provided by Citrix Online Division, Inc. of Santa Barbara, Calif., WebEx\u2122 provided by WebEx, Inc. of Santa Clara, Calif., or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond, Wash.","Still referring to , an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service  may include monitoring, measurement and\/or management software and\/or hardware, including data collection, aggregation, analysis, management and reporting. In one embodiment, the performance monitoring service  includes one or more monitoring agents . The monitoring agent  includes any software, hardware or combination thereof for performing monitoring, measurement and data collection activities on a device, such as a client , server  or an appliance , . In some embodiments, the monitoring agent  includes any type and form of script, such as Visual Basic script, or Javascript. In one embodiment, the monitoring agent  executes transparently to any application and\/or user of the device. In some embodiments, the monitoring agent  is installed and operated unobtrusively to the application or client. In yet another embodiment, the monitoring agent  is installed and operated without any instrumentation for the application or device.","In some embodiments, the monitoring agent  monitors, measures and collects data on a predetermined frequency. In other embodiments, the monitoring agent  monitors, measures and collects data based upon detection of any type and form of event. For example, the monitoring agent  may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example, the monitoring agent  may collect data upon detection of any user input events, such as a mouse click. The monitoring agent  may report or provide any monitored, measured or collected data to the monitoring service . In one embodiment, the monitoring agent  transmits information to the monitoring service  according to a schedule or a predetermined frequency. In another embodiment, the monitoring agent  transmits information to the monitoring service  upon detection of an event.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any network resource or network infrastructure element, such as a client, server, server farm, appliance , appliance , or network connection. In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any transport layer connection, such as a TCP or UDP connection. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures network latency. In yet one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures bandwidth utilization.","In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures end-user response times. In some embodiments, the monitoring service  performs monitoring and performance measurement of an application. In another embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of any session or connection to the application. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a browser. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of HTTP based transactions. In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a Voice over IP (VoIP) application or session. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of a remote display protocol application, such as an ICA client or RDP client. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of any type and form of streaming media. In still a further embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a hosted application or a Software-As-A-Service (SaaS) delivery model.","In some embodiments, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of one or more transactions, requests or responses related to application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures any portion of an application layer stack, such as any .NET or J2EE calls. In one embodiment, the monitoring service  and\/or monitoring agent  monitors and measures database or SQL transactions. In yet another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures any method, function or application programming interface (API) call.","In one embodiment, the monitoring service  and\/or monitoring agent  performs monitoring and performance measurement of a delivery of application and\/or data from a server to a client via one or more appliances, such as appliance  and\/or appliance . In some embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a virtualized application. In other embodiments, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a streaming application. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of delivery of a desktop application to a client and\/or the execution of the desktop application on the client. In another embodiment, the monitoring service  and\/or monitoring agent  monitors and measures performance of a client\/server application.","In one embodiment, the monitoring service  and\/or monitoring agent  is designed and constructed to provide application performance management for the application delivery system . For example, the monitoring service  and\/or monitoring agent  may monitor, measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example, the monitoring service  and\/or monitoring agent  monitors individual ICA sessions. The monitoring service  and\/or monitoring agent  may measure the total and per session system resource usage, as well as application and networking performance. The monitoring service  and\/or monitoring agent  may identify the active servers for a given user and\/or user session. In some embodiments, the monitoring service  and\/or monitoring agent  monitors back-end connections between the application delivery system  and an application and\/or database server. The monitoring service  and\/or monitoring agent  may measure network latency, delay and volume per user-session or ICA session.","In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors memory usage for the application delivery system , such as total memory usage, per user session and\/or per process. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors CPU usage the application delivery system , such as total CPU usage, per user session and\/or per process. In another embodiments, the monitoring service  and\/or monitoring agent  measures and monitors the time required to log-in to an application, a server, or the application delivery system, such as Citrix Presentation Server. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors the duration a user is logged into an application, a server, or the application delivery system . In some embodiments, the monitoring service  and\/or monitoring agent  measures and monitors active and inactive session counts for an application, server or application delivery system session. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors user session latency.","In yet further embodiments, the monitoring service  and\/or monitoring agent  measures and monitors measures and monitors any type and form of server metrics. In one embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to system memory, CPU usage, and disk storage. In another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to page faults, such as page faults per second. In other embodiments, the monitoring service  and\/or monitoring agent  measures and monitors round-trip time metrics. In yet another embodiment, the monitoring service  and\/or monitoring agent  measures and monitors metrics related to application crashes, errors and\/or hangs.","In some embodiments, the monitoring service  and monitoring agent  includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems, Inc. of Ft. Lauderdale, Fla. In another embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto, Calif. In one embodiment, the performance monitoring service  and\/or monitoring agent  includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco, Calif. In other embodiments, the performance monitoring service  and\/or monitoring agent  includes any portion of the business service management products, such as the BMC Performance Manager and Patrol products, manufactured by BMC Software, Inc. of Houston, Tex.","The client , server , and appliance  may be deployed as and\/or executed on any type and form of computing device, such as a computer, network device or appliance capable of communicating on any type and form of network and performing the operations described herein.  depict block diagrams of a computing device  useful for practicing an embodiment of the client , server  or appliance . As shown in , each computing device  includes a central processing unit , and a main memory unit . As shown in , a computing device  may include a visual display device , a keyboard  and\/or a pointing device , such as a mouse. Each computing device  may also include additional optional elements, such as one or more input\/output devices -(generally referred to using reference numeral ), and a cache memory  in communication with the central processing unit .","The central processing unit  is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments, the central processing unit is provided by a microprocessor unit, such as: those manufactured by Intel Corporation of Mountain View, Calif.; those manufactured by Motorola Corporation of Schaumburg, Ill.; those manufactured by Transmeta Corporation of Santa Clara, Calif.; the RS\/6000 processor, those manufactured by International Business Machines of White Plains, N.Y.; or those manufactured by Advanced Micro Devices of Sunnyvale, Calif. The computing device  may be based on any of these processors, or any other processor capable of operating as described herein.","Main memory unit  may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor , such as Static random access memory (SRAM), Burst SRAM or SynchBurst SRAM (BSRAM), Dynamic random access memory (DRAM), Fast Page Mode DRAM (FPM DRAM), Enhanced DRAM (EDRAM), Extended Data Output RAM (EDO RAM), Extended Data Output DRAM (EDO DRAM), Burst Extended Data Output DRAM (BEDO DRAM), Enhanced DRAM (EDRAM), synchronous DRAM (SDRAM), JEDEC SRAM, PC100 SDRAM, Double Data Rate SDRAM (DDR SDRAM), Enhanced SDRAM (ESDRAM), SyncLink DRAM (SLDRAM), Direct Rambus DRAM (DRDRAM), or Ferroelectric RAM (FRAM). The main memory  may be based on any of the above described memory chips, or any other available memory chips capable of operating as described herein. In the embodiment shown in , the processor  communicates with main memory  via a system bus  (described in more detail below).  depicts an embodiment of a computing device  in which the processor communicates directly with main memory  via a memory port . For example, in  the main memory  may be DDRRAM.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 1F","FIG. 1E","FIG. 1F","FIG. 1F"],"b":["101","140","101","140","150","140","122","101","130","150","101","130","124","101","124","100","101","130","101","130","130"]},"The computing device  may support any suitable installation device , such as a floppy disk drive for receiving floppy disks such as 3.5-inch, 5.25-inch disks or ZIP disks, a CD-ROM drive, a CD-R\/RW drive, a DVD-ROM drive, tape drives of various formats, USB device, hard-drive or any other device suitable for installing software and programs such as any client agent , or portion thereof. The computing device  may further comprise a storage device , such as one or more hard disk drives or redundant arrays of independent disks, for storing an operating system and other related software, and for storing application software programs such as any program related to the client agent . Optionally, any of the installation devices  could also be used as the storage device . Additionally, the operating system and the software can be run from a bootable medium, for example, a bootable CD, such as KNOPPIX\u00ae, a bootable CD for GNU\/Linux that is available as a GNU\/Linux distribution from knoppix.net.","Furthermore, the computing device  may include a network interface  to interface to a Local Area Network (LAN), Wide Area Network (WAN) or the Internet through a variety of connections including, but not limited to, standard telephone lines, LAN or WAN links (e.g., 802.11, T1, T3, 56 kb, X.25), broadband connections (e.g., ISDN, Frame Relay, ATM), wireless connections, or some combination of any or all of the above. The network interface  may comprise a built-in network adapter, network interface card, PCMCIA network card, card bus network adapter, wireless network adapter, USB network adapter, modem or any other device suitable for interfacing the computing device  to any type of network capable of communication and performing the operations described herein.","A wide variety of I\/O devices -may be present in the computing device . Input devices include keyboards, mice, trackpads, trackballs, microphones, and drawing tablets. Output devices include video displays, speakers, inkjet printers, laser printers, and dye-sublimation printers. The I\/O devices  may be controlled by an I\/O controller  as shown in . The I\/O controller may control one or more I\/O devices such as a keyboard  and a pointing device , e.g., a mouse or optical pen. Furthermore, an I\/O device may also provide storage  and\/or an installation medium  for the computing device . In still other embodiments, the computing device  may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry, Inc. of Los Alamitos, Calif.","In some embodiments, the computing device  may comprise or be connected to multiple display devices -, which each may be of the same or different type and\/or form. As such, any of the I\/O devices -and\/or the I\/O controller  may comprise any type and\/or form of suitable hardware, software, or combination of hardware and software to support, enable or provide for the connection and use of multiple display devices -by the computing device . For example, the computing device  may include any type and\/or form of video adapter, video card, driver, and\/or library to interface, communicate, connect or otherwise use the display devices -. In one embodiment, a video adapter may comprise multiple connectors to interface to multiple display devices -. In other embodiments, the computing device  may include multiple video adapters, with each video adapter connected to one or more of the display devices -. In some embodiments, any portion of the operating system of the computing device  may be configured for using multiple displays -. In other embodiments, one or more of the display devices -may be provided by one or more other computing devices, such as computing devices and connected to the computing device , for example, via a network. These embodiments may include any type of software designed and constructed to use another computer's display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device  may be configured to have multiple display devices -","In further embodiments, an I\/O device  may be a bridge  between the system bus  and an external communication bus, such as a USB bus, an Apple Desktop Bus, an RS-232 serial connection, a SCSI bus, a FireWire bus, a FireWire 800 bus, an Ethernet bus, an AppleTalk bus, a Gigabit Ethernet bus, an Asynchronous Transfer Mode bus, a HIPPI bus, a Super HIPPI bus, a SerialPlus bus, a SCI\/LAMP bus, a FibreChannel bus, or a Serial Attached small computer system interface bus.","A computing device  of the sort depicted in  typically operate under the control of operating systems, which control scheduling of tasks and access to system resources. The computing device  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices, or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include: WINDOWS 3.x, WINDOWS 95, WINDOWS 98, WINDOWS 2000, WINDOWS NT 3.51, WINDOWS NT 4.0, WINDOWS CE, and WINDOWS XP, all of which are manufactured by Microsoft Corporation of Redmond, Wash.; MacOS, manufactured by Apple Computer of Cupertino, Calif.; OS\/2, manufactured by International Business Machines of Armonk, N.Y.; and Linux, a freely-available operating system distributed by Caldera Corp. of Salt Lake City, Utah, or any type and\/or form of a Unix operating system, among others.","In other embodiments, the computing device  may have different processors, operating systems, and input devices consistent with the device. For example, in one embodiment the computer  is a Treo 180, 270, 1060, 600 or 650 smart phone manufactured by Palm, Inc. In this embodiment, the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five-way navigator device. Moreover, the computing device  can be any workstation, desktop computer, laptop or notebook computer, server, handheld computer, mobile telephone, any other computer, or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.","Section B. Appliance Architecture",{"@attributes":{"id":"p-0079","num":"0078"},"figref":["FIG. 2A","FIG. 2A","FIG. 2"],"b":["200","200","200","206","202","204"]},"Hardware layer  provides the hardware elements upon which programs and services within kernel space  and user space  are executed. Hardware layer  also provides the structures and elements which allow programs and services within kernel space  and user space  to communicate data both internally and externally with respect to appliance . As shown in , the hardware layer  includes a processing unit  for executing software programs and services, a memory  for storing software and data, network ports  for transmitting and receiving data over a network, and an encryption processor  for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments, the central processing unit  may perform the functions of the encryption processor  in a single processor. Additionally, the hardware layer  may comprise multiple processors for each of the processing unit  and the encryption processor . The processor  may include any of the processors  described above in connection with . In some embodiments, the central processing unit  may perform the functions of the encryption processor  in a single processor. Additionally, the hardware layer  may comprise multiple processors for each of the processing unit  and the encryption processor . For example, in one embodiment, the appliance  comprises a first processor  and a second processor \u2032. In other embodiments, the processor  or \u2032 comprises a multi-core processor.","Although the hardware layer  of appliance  is generally illustrated with an encryption processor , processor  may be a processor for performing functions related to any encryption protocol, such as the Secure Socket Layer (SSL) or Transport Layer Security (TLS) protocol. In some embodiments, the processor  may be a general purpose processor (GPP), and in further embodiments, may be have executable instructions for performing processing of any security related protocol.","Although the hardware layer  of appliance  is illustrated with certain elements in , the hardware portions or components of appliance  may comprise any type and form of elements, hardware or software, of a computing device, such as the computing device  illustrated and discussed herein in conjunction with . In some embodiments, the appliance  may comprise a server, gateway, router, switch, bridge or other type of computing or network device, and have any hardware and\/or software elements associated therewith.","The operating system of appliance  allocates, manages, or otherwise segregates the available system memory into kernel space  and user space . In example software architecture , the operating system may be any type and\/or form of Unix operating system although other can be used. As such, the appliance  can be running any operating system such as any of the versions of the Microsoft\u00ae Windows operating systems, the different releases of the Unix and Linux operating systems, any version of the Mac OS\u00ae for Macintosh computers, any embedded operating system, any network operating system, any real-time operating system, any open source operating system, any proprietary operating system, any operating systems for mobile computing devices or network devices, or any other operating system capable of running on the appliance  and performing the operations described herein.","The kernel space  is reserved for running the kernel , including any device drivers, kernel extensions or other kernel related software. As known to those skilled in the art, the kernel  is the core of the operating system, and provides access, control, and management of resources and hardware-related elements of the application . In accordance with an embodiment of the appliance , the kernel space  also includes a number of network services or processes working in conjunction with a cache manager , sometimes also referred to as the integrated cache, the benefits of which are described in detail further herein. Additionally, the embodiment of the kernel  will depend on the embodiment of the operating system installed, configured, or otherwise used by the device .","In one embodiment, the device  comprises one network stack , such as a TCP\/IP based stack, for communicating with the client  and\/or the server . In one embodiment, the network stack  is used to communicate with a first network, such as network , and a second network . In some embodiments, the device  terminates a first transport layer connection, such as a TCP connection of a client , and establishes a second transport layer connection to a server  for use by the client , e.g., the second transport layer connection is terminated at the appliance  and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments, the device  may comprise multiple network stacks, for example  and \u2032, and the first transport layer connection may be established or terminated at one network stack , and the second transport layer connection on the second network stack \u2032. For example, one network stack may be for receiving and transmitting network packet on a first network, and another network stack for receiving and transmitting network packets on a second network. In one embodiment, the network stack  comprises a buffer  for queuing one or more network packets for transmission by the appliance .","As shown in , the kernel space  includes the cache manager , a high-speed layer - integrated packet engine , an encryption engine , a policy engine  and multi-protocol compression logic . Running these components or processes , , ,  and  in kernel space  or kernel mode instead of the user space  improves the performance of each of these components, alone and in combination. Kernel operation means that these components or processes , , ,  and  run in the core address space of the operating system of the device . For example, running the encryption engine  in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel, thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example, data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode, such as from a kernel level data structure to a user level data structure. In another aspect, the number of context switches between kernel mode and user mode are also reduced. Additionally, synchronization of and communications between any of the components or processes , , ,  and  can be performed more efficiently in the kernel space .","In some embodiments, any portion of the components , , ,  and  may run or operate in the kernel space , while other portions of these components , , ,  and  may run or operate in user space . In one embodiment, the appliance  uses a kernel-level data structure providing access to any portion of one or more network packets, for example, a network packet comprising a request from a client  or a response from a server . In some embodiments, the kernel-level data structure may be obtained by the packet engine  via a transport layer driver interface or filter to the network stack . The kernel-level data structure may comprise any interface and\/or data accessible via the kernel space  related to the network stack , network traffic or packets received or transmitted by the network stack . In other embodiments, the kernel-level data structure may be used by any of the components or processes , , ,  and  to perform the desired operation of the component or process. In one embodiment, a component , , ,  and  is running in kernel mode  when using the kernel-level data structure, while in another embodiment, the component , , ,  and  is running in user mode when using the kernel-level data structure. In some embodiments, the kernel-level data structure may be copied or passed to a second kernel-level data structure, or any desired user-level data structure.","The cache manager  may comprise software, hardware or any combination of software and hardware to provide cache access, control and management of any type and form of content, such as objects or dynamically generated objects served by the originating servers . The data, objects or content processed and stored by the cache manager  may comprise data in any format, such as a markup language, or communicated via any protocol. In some embodiments, the cache manager  duplicates original data stored elsewhere or data previously computed, generated or transmitted, in which the original data may require longer access time to fetch, compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element, future use can be made by accessing the cached copy rather than refetching or recomputing the original data, thereby reducing the access time. In some embodiments, the cache memory element can comprise a data object in memory  of device . In other embodiments, the cache memory element may comprise memory having a faster access time than memory . In another embodiment, the cache memory element may comprise any type and form of storage element of the device , such as a portion of a hard disk. In some embodiments, the processing unit  may provide cache memory for use by the cache manager . In yet further embodiments, the cache manager  may use any portion and combination of memory, storage, or the processing unit for caching data, objects, and other content.","Furthermore, the cache manager  includes any logic, functions, rules, or operations to perform any embodiments of the techniques of the appliance  described herein. For example, the cache manager  includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client  or server . In some embodiments, the cache manager  may operate as a program, service, process or task executing in the kernel space , and in other embodiments, in the user space . In one embodiment, a first portion of the cache manager  executes in the user space  while a second portion executes in the kernel space . In some embodiments, the cache manager  can comprise any type of general purpose processor (GPP), or any other type of integrated circuit, such as a Field Programmable Gate Array (FPGA), Programmable Logic Device (PLD), or Application Specific Integrated Circuit (ASIC).","The policy engine  may include, for example, an intelligent statistical engine or other programmable application(s). In one embodiment, the policy engine  provides a configuration mechanism to allow a user to identify, specify, define or configure a caching policy. Policy engine , in some embodiments, also has access to memory to support data structures such as lookup tables or hash tables to enable user-selected caching policy decisions. In other embodiments, the policy engine  may comprise any logic, rules, functions or operations to determine and provide access, control and management of objects, data or content being cached by the appliance  in addition to access, control and management of security, network traffic, network access, compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.","In some embodiments, the policy engine  may provide a configuration mechanism to allow a user to identify, specify, define or configure policies directing behavior of any other components or functionality of an appliance, including without limitation the components described in  such as vServers , VPN functions , Intranet IP functions , switching functions , DNS functions , acceleration functions , application firewall functions , and monitoring agents . In other embodiments, the policy engine  may check, evaluate, implement, or otherwise act in response to any configured policies, and may also direct the operation of one or more appliance functions in response to a policy.","The encryption engine  comprises any logic, business rules, functions or operations for handling the processing of any security related protocol, such as SSL or TLS, or any function related thereto. For example, the encryption engine  encrypts and decrypts network packets, or any portion thereof, communicated via the appliance . The encryption engine  may also setup or establish SSL or TLS connections on behalf of the client -, server -, or appliance . As such, the encryption engine  provides offloading and acceleration of SSL processing. In one embodiment, the encryption engine  uses a tunneling protocol to provide a virtual private network between a client -and a server -. In some embodiments, the encryption engine  is in communication with the Encryption processor . In other embodiments, the encryption engine  comprises executable instructions running on the Encryption processor .","The multi-protocol compression engine  comprises any logic, business rules, function or operations for compressing one or more protocols of a network packet, such as any of the protocols used by the network stack  of the device . In one embodiment, multi-protocol compression engine  compresses bi-directionally between clients -and servers -any TCP\/IP based protocol, including Messaging Application Programming Interface (MAPI) (email), File Transfer Protocol (FTP), HyperText Transfer Protocol (HTTP), Common Internet File System (CIFS) protocol (file transfer), Independent Computing Architecture (ICA) protocol, Remote Desktop Protocol (RDP), Wireless Application Protocol (WAP), Mobile IP protocol, and Voice Over IP (VoIP) protocol. In other embodiments, multi-protocol compression engine  provides compression of Hypertext Markup Language (HTML) based protocols and in some embodiments, provides compression of any markup languages, such as the Extensible Markup Language (XML). In one embodiment, the multi-protocol compression engine  provides compression of any high-performance protocol, such as any protocol designed for appliance  to appliance  communications. In another embodiment, the multi-protocol compression engine  compresses any payload of or any communication using a modified transport control protocol, such as Transaction TCP (T\/TCP), TCP with selection acknowledgements (TCP-SACK), TCP with large windows (TCP-LW), a congestion prediction protocol such as the TCP-Vegas protocol, and a TCP spoofing protocol.","As such, the multi-protocol compression engine  accelerates performance for users accessing applications via desktop clients, e.g., Microsoft Outlook and non-Web thin clients, such as any client launched by popular enterprise applications like Oracle, SAP and Siebel, and even mobile clients, such as the Pocket PC. In some embodiments, the multi-protocol compression engine  by executing in the kernel mode  and integrating with packet processing engine  accessing the network stack  is able to compress any of the protocols carried by the TCP\/IP protocol, such as any application layer protocol.","High speed layer - integrated packet engine , also generally referred to as a packet processing engine or packet engine, is responsible for managing the kernel-level processing of packets received and transmitted by appliance  via network ports . The high speed layer - integrated packet engine  may comprise a buffer for queuing one or more network packets during processing, such as for receipt of a network packet or transmission of a network packer. Additionally, the high speed layer - integrated packet engine  is in communication with one or more network stacks  to send and receive network packets via network ports . The high speed layer - integrated packet engine  works in conjunction with encryption engine , cache manager , policy engine  and multi-protocol compression logic . In particular, encryption engine  is configured to perform SSL processing of packets, policy engine  is configured to perform functions related to traffic management such as request-level content switching and request-level cache redirection, and multi-protocol compression logic  is configured to perform functions related to compression and decompression of data.","The high speed layer - integrated packet engine  includes a packet processing timer . In one embodiment, the packet processing timer  provides one or more time intervals to trigger the processing of incoming, i.e., received, or outgoing, i.e., transmitted, network packets. In some embodiments, the high speed layer - integrated packet engine  processes network packets responsive to the timer . The packet processing timer  provides any type and form of signal to the packet engine  to notify, trigger, or communicate a time related event, interval or occurrence. In many embodiments, the packet processing timer  operates in the order of milliseconds, such as for example 100 milliseconds, 50 milliseconds or 25 milliseconds. For example, in some embodiments, the packet processing timer  provides time intervals or otherwise causes a network packet to be processed by the high speed layer - integrated packet engine  at a 10 millisecond time interval, while in other embodiments, at a 5 millisecond time interval, and still yet in further embodiments, as short as a 3, 2, or 1 millisecond time interval. The high speed layer - integrated packet engine  may be interfaced, integrated or in communication with the encryption engine , cache manager , policy engine  and multi-protocol compression engine  during operation. As such, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed responsive to the packet processing timer  and\/or the packet engine . Therefore, any of the logic, functions, or operations of the encryption engine , cache manager , policy engine  and multi-protocol compression logic  may be performed at the granularity of time intervals provided via the packet processing timer , for example, at a time interval of less than or equal to 10 milliseconds. For example, in one embodiment, the cache manager  may perform invalidation of any cached objects responsive to the high speed layer - integrated packet engine  and\/or the packet processing timer . In another embodiment, the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer , such as at every 10 millisecond.","In contrast to kernel space , user space  is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space  directly and uses service calls in order to access kernel services. As shown in , user space  of appliance  includes a graphical user interface (GUI) , a command line interface (CLI) , shell services , health monitoring program , and daemon services . GUI  and CLI  provide a means by which a system administrator or other user can interact with and control the operation of appliance , such as via the operating system of the appliance  and either is user space  or kernel space . The GUI  may be any type and form of graphical user interface and may be presented via text, graphical or otherwise, by any type of program or application, such as a browser. The CLI  may be any type and form of command line or text-based interface, such as a command line provided by the operating system. For example, the CLI  may comprise a shell, which is a tool to enable users to interact with the operating system. In some embodiments, the CLI  may be provided via a bash, csh, tcsh, or ksh type shell. The shell services  comprises the programs, services, tasks, processes or executable instructions to support interaction with the appliance  or operating system by a user via the GUI  and\/or CLI .","Health monitoring program  is used to monitor, check, report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program  comprises one or more programs, services, tasks, processes or executable instructions to provide logic, rules, functions or operations for monitoring any activity of the appliance . In some embodiments, the health monitoring program  intercepts and inspects any network traffic passed via the appliance . In other embodiments, the health monitoring program  interfaces by any suitable means and\/or mechanisms with one or more of the following: the encryption engine , cache manager , policy engine , multi-protocol compression logic , packet engine , daemon services , and shell services . As such, the health monitoring program  may call any application programming interface (API) to determine a state, status, or health of any portion of the appliance . For example, the health monitoring program  may ping or send a status inquiry on a periodic basis to check if a program, process, service or task is active and currently running. In another example, the health monitoring program  may check any status, error or history logs provided by any program, process, service or task to determine any condition, status or error with any portion of the appliance .","Daemon services  are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments, a daemon service may forward the requests to other programs or processes, such as another daemon service  as appropriate. As known to those skilled in the art, a daemon service  may run unattended to perform continuous or periodic system wide functions, such as network control, or to perform any desired task. In some embodiments, one or more daemon services  run in the user space , while in other embodiments, one or more daemon services  run in the kernel space.","Referring now to , another embodiment of the appliance  is depicted. In brief overview, the appliance  provides one or more of the following services, functionality or operations: SSL VPN connectivity , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall  for communications between one or more clients  and one or more servers . Each of the servers  may provide one or more network related services -(referred to as services ). For example, a server  may provide an http service . The appliance  comprises one or more virtual servers or virtual internet protocol servers, referred to as a vServer, VIP server, or just VIP -(also referred herein as vServer ). The vServer  receives, intercepts or otherwise processes communications between a client  and a server  in accordance with the configuration and operations of the appliance .","The vServer  may comprise software, hardware or any combination of software and hardware. The vServer  may comprise any type and form of program, service, task, process or executable instructions operating in user mode , kernel mode  or any combination thereof in the appliance . The vServer  includes any logic, functions, rules, or operations to perform any embodiments of the techniques described herein, such as SSL VPN , switching\/load balancing , Domain Name Service resolution , acceleration  and an application firewall . In some embodiments, the vServer  establishes a connection to a service  of a server . The service  may comprise any program, application, process, task or set of executable instructions capable of connecting to and communicating to the appliance , client  or vServer . For example, the service  may comprise a web server, http server, ftp, email or database server. In some embodiments, the service  is a daemon process or network driver for listening, receiving and\/or sending communications for an application, such as email, database or an enterprise application. In some embodiments, the service  may communicate on a specific IP address, or IP address and port.","In some embodiments, the vServer  applies one or more policies of the policy engine  to network communications between the client  and server . In one embodiment, the policies are associated with a VServer . In another embodiment, the policies are based on a user, or a group of users. In yet another embodiment, a policy is global and applies to one or more vServers -, and any user or group of users communicating via the appliance . In some embodiments, the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication, such as internet protocol address, port, protocol type, header or fields in a packet, or the context of the communication, such as user, group of the user, vServer , transport layer connection, and\/or identification or attributes of the client  or server .","In other embodiments, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to access the computing environment , application, and\/or data file from a server . In another embodiment, the appliance  communicates or interfaces with the policy engine  to determine authentication and\/or authorization of a remote user or a remote client  to have the application delivery system  deliver one or more of the computing environment , application, and\/or data file. In yet another embodiment, the appliance  establishes a VPN or SSL VPN connection based on the policy engine's  authentication and\/or authorization of a remote user or a remote client  In one embodiment, the appliance  controls the flow of network traffic and communication sessions based on policies of the policy engine . For example, the appliance  may control the access to a computing environment , application or data file based on the policy engine .","In some embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client  via the client agent . In one embodiment, the vServer  listens for and receives communications from the client . In other embodiments, the vServer  establishes a transport layer connection, such as a TCP or UDP connection with a client server . In one embodiment, the vServer  establishes the transport layer connection to an internet protocol address and port of a server  running on the server . In another embodiment, the vServer  associates a first transport layer connection to a client  with a second transport layer connection to the server . In some embodiments, a vServer  establishes a pool of transport layer connections to a server  and multiplexes client requests via the pooled transport layer connections.","In some embodiments, the appliance  provides a SSL VPN connection  between a client  and a server . For example, a client  on a first network  requests to establish a connection to a server  on a second network \u2032. In some embodiments, the second network \u2032 is not routable from the first network . In other embodiments, the client  is on a public network  and the server  is on a private network \u2032, such as a corporate network. In one embodiment, the client agent  intercepts communications of the client  on the first network , encrypts the communications, and transmits the communications via a first transport layer connection to the appliance . The appliance  associates the first transport layer connection on the first network  to a second transport layer connection to the server  on the second network . The appliance  receives the intercepted communication from the client agent , decrypts the communications, and transmits the communication to the server  on the second network  via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such, the appliance  provides an end-to-end secure transport layer connection for the client  between the two networks , \u2032.","In one embodiment, the appliance  hosts an intranet internet protocol or intranetIP  address of the client  on the virtual private network . The client  has a local network identifier, such as an internet protocol (IP) address and\/or host name on the first network . When connected to the second network \u2032 via the appliance , the appliance  establishes, assigns or otherwise provides an IntranetIP, which is network identifier, such as IP address and\/or host name, for the client  on the second network \u2032. The appliance  listens for and receives on the second or private network \u2032 for any communications directed towards the client  using the client's established IntranetIP . In one embodiment, the appliance  acts as or on behalf of the client  on the second private network . For example, in another embodiment, a vServer  listens for and responds to communications to the IntranetIP  of the client . In some embodiments, if a computing device  on the second network \u2032 transmits a request, the appliance  processes the request as if it were the client . For example, the appliance  may respond to a ping to the client's IntranetIP . In another example, the appliance may establish a connection, such as a TCP or UDP connection, with computing device  on the second network  requesting a connection with the client's IntranetIP .","In some embodiments, the appliance  provides one or more of the following acceleration techniques  to communications between the client  and server : 1) compression; 2) decompression; 3) Transmission Control Protocol pooling; 4) Transmission Control Protocol multiplexing; 5) Transmission Control Protocol buffering; and 6) caching.","In one embodiment, the appliance  relieves servers  of much of the processing load caused by repeatedly opening and closing transport layers connections to clients  by opening one or more transport layer connections with each server  and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as \u201cconnection pooling\u201d.","In some embodiments, in order to seamlessly splice communications from a client  to a server  via a pooled transport layer connection, the appliance  translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as \u201cconnection multiplexing\u201d. In some embodiments, no application layer protocol interaction is required. For example, in the case of an in-bound packet (that is, a packet received from a client ), the source network address of the packet is changed to that of an output port of appliance , and the destination network address is changed to that of the intended server. In the case of an outbound packet (that is, one received from a server ), the source network address is changed from that of the server  to that of an output port of appliance  and the destination address is changed from that of appliance  to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client  on the appliance's  transport layer connection to the client . In some embodiments, the packet checksum of the transport layer protocol is recalculated to account for these translations.","In another embodiment, the appliance  provides switching or load-balancing functionality  for communications between the client  and server . In some embodiments, the appliance  distributes traffic and directs client requests to a server  based on layer  or application-layer request data. In one embodiment, although the network layer or layer  of the network packet identifies a destination server , the appliance  determines the server  to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment, the health monitoring programs  of the appliance  monitor the health of servers to determine the server  for which to distribute a client's request. In some embodiments, if the appliance  detects a server  is not available or has a load over a predetermined threshold, the appliance  can direct or distribute client requests to another server .","In some embodiments, the appliance  acts as a Domain Name Service (DNS) resolver or otherwise provides resolution of a DNS request from clients . In some embodiments, the appliance intercepts' a DNS request transmitted by the client . In one embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by the appliance . In this embodiment, the client  transmits network communication for the domain name to the appliance . In another embodiment, the appliance  responds to a client's DNS request with an IP address of or hosted by a second appliance \u2032. In some embodiments, the appliance  responds to a client's DNS request with an IP address of a server  determined by the appliance .","In yet another embodiment, the appliance  provides application firewall functionality  for communications between the client  and server . In one embodiment, the policy engine  provides rules for detecting and blocking illegitimate requests. In some embodiments, the application firewall  protects against denial of service (DoS) attacks. In other embodiments, the appliance inspects the content of intercepted requests to identify and block application-based attacks. In some embodiments, the rules\/policy engine  comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities, such as one or more of the following: 1) buffer overflow, 2) CGI-BIN parameter manipulation, 3) form\/hidden field manipulation, 4) forceful browsing, 5) cookie or session poisoning, 6) broken access control list (ACLs) or weak passwords, 7) cross-site scripting (XSS), 8) command injection, 9) SQL injection, 10) error triggering sensitive information leak, 11) insecure use of cryptography, 12) server misconfiguration, 13) back doors and debug options, 14) website defacement, 15) platform or operating systems vulnerabilities, and 16) zero-day exploits. In an embodiment, the application firewall  provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following: 1) required fields are returned, 2) no added field allowed, 3) read-only and hidden field enforcement, 4) drop-down list and radio button field conformance, and 5) form-field max-length enforcement. In some embodiments, the application firewall  ensures cookies are not modified. In other embodiments, the application firewall  protects against forceful browsing by enforcing legal URLs.","In still yet other embodiments, the application firewall  protects any confidential information contained in the network communication. The application firewall  may inspect or analyze any network communication in accordance with the rules or polices of the engine  to identify any confidential information in any field of the network packet. In some embodiments, the application firewall  identifies in the network communication one or more occurrences of a credit card number, password, social security number, name, patient code, contact information, and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences, in one embodiment, the application firewall  may take a policy action on the network communication, such as prevent transmission of the network communication. In another embodiment, the application firewall  may rewrite, remove or otherwise mask such identified occurrence or confidential information.","Still referring to , the appliance  may include a performance monitoring agent  as discussed above in conjunction with . In one embodiment, the appliance  receives the monitoring agent  from the monitoring service  or monitoring server  as depicted in . In some embodiments, the appliance  stores the monitoring agent  in storage, such as disk, for delivery to any client or server in communication with the appliance . For example, in one embodiment, the appliance  transmits the monitoring agent  to a client upon receiving a request to establish a transport layer connection. In other embodiments, the appliance  transmits the monitoring agent  upon establishing the transport layer connection with the client . In another embodiment, the appliance  transmits the monitoring agent  to the client upon intercepting or detecting a request for a web page. In yet another embodiment, the appliance  transmits the monitoring agent  to a client or a server in response to a request from the monitoring server . In one embodiment, the appliance  transmits the monitoring agent  to a second appliance \u2032 or appliance .","In other embodiments, the appliance  executes the monitoring agent . In one embodiment, the monitoring agent  measures and monitors the performance of any application, program, process, service, task or thread executing on the appliance . For example, the monitoring agent  may monitor and measure performance and operation of vServers A-N. In another embodiment, the monitoring agent  measures and monitors the performance of any transport layer connections of the appliance . In some embodiments, the monitoring agent  measures and monitors the performance of any user sessions traversing the appliance . In one embodiment, the monitoring agent  measures and monitors the performance of any virtual private network connections and\/or sessions traversing the appliance , such an SSL VPN session. In still further embodiments, the monitoring agent  measures and monitors the memory, CPU and disk usage and performance of the appliance . In yet another embodiment, the monitoring agent  measures and monitors the performance of any acceleration technique  performed by the appliance , such as SSL offloading, connection pooling and multiplexing, caching, and compression. In some embodiments, the monitoring agent  measures and monitors the performance of any load balancing and\/or content switching  performed by the appliance . In other embodiments, the monitoring agent  measures and monitors the performance of application firewall  protection and processing performed by the appliance .","Section C. Automation of Load and Usability Testing","Illustrated in  is an embodiment of a method  of performing automated load and usability testing on an application delivery appliance. This method  includes first detecting a browser having a pre-determined feature indicating that the browser should be tested (Step ). The predetermined feature is then identified and a script is injected into the browser (Step ) and permitted to execute (Step ). The page within the browser is rendered as are the links included within the page (Step ). A link within the page displayed within the browser is selected (Step ) upon which the script waits for a pre-determined period of time (Step ). The script then either navigates to the page associated with the selected link, or calls an event associated with the link (Step ). A determination is then made as to whether the current browser is a control browser or a slave browser (Step ). If the current browser is a control browser, then slave browsers are spawned (Step ) and the method  executes within each spawned browser starting at the step where the script is permitted to execute (Step ). If the current browser is a slave browser, then the script exits (Step ).","Further referring to , and in more detail, the script detects whether a particular browser contains a pre-determined feature (Step ). In one embodiment, this step includes identifying a flag or other characteristic associated with the browser that indicates that the browser should be tested. Other embodiments may review the contents of the browser, whether it be graphical, textual or any other informational content, to determine whether testing should be performed on either or both of the browser and the content within the browser. In one embodiment, the predetermined feature is identified by a load testing client (Not Shown) executing on the appliance . In some embodiment, the load testing client can execute within the health monitoring programs , while in other embodiments, the load testing client can execute within the kernel space .","In some embodiments, a pre-determined feature is identified upon which a script is injected into the browser (Step ). A script is injected into the browser by injecting the script into the HTML response stream. For example, under the section of the HTML code identifying the header, i.e. <HEAD>, a tag may be inserted identifying the scripting language to be used followed by the script code and a closing tag indicative of the end of the script code. In some embodiments the script code may be placed in between a beginning and ending tag that identify a script section, but that does not identify the scripting language to be used, i.e. <SCRIPT>, <\/SCRIPT>. In still other embodiments, the script may be inserted into a section of the HTML code that is different from that of the header section. A script, in some embodiments, is an executable section of code or software commands designed to interact with the HTML code within which it is placed. In other embodiments, a script is a section of code designed to execute in conjunction with the display of an HTML page within a browser and possibly able to direct the display or functionality of the browser. Injection of the script into the HTML stream may, in some embodiments, be carried out by an appliance  or an application executing on an appliance . In other embodiments, injection of the script into the HTML stream may be carried out by any of the following: a server , a client , an application executing on the network , a virtual machine, or an application executing on a virtual machine.","In some embodiments, the load testing client can inject the script (Step ) into the browser. The script, in some embodiments can be a load generating module that when executed, generates load on the appliance . Thus, upon injecting the script or load generating module into the browser, the application delivery application  can execute the load generating module within the context of the browser.","The script is permitted to execute (Step ) in some embodiments. Permitting the script to execute (Step ), may in some embodiments include preventing other scripts within the page from executing. Still other embodiments may permit a script to execute (Step ) by placing the browser, the HTML page displayed within the browser, or some other aspect of the computing environment in a state amenable to the execution of the script. In many embodiments, permitting the script to execute  includes allowing the script to register for events emitted by the browser and indicative that the HTML of the page in question has loaded, and that the page has fully rendered. Still other embodiments include allowing the script to render a page displayed within the identified browser. The script, in many embodiments, can be executed by the application delivery appliance  either with or without the guidance of the load testing client.","The page within the browser can be rendered by the load generating module, as are the links included on the page (Step ). Rendering of the page and the links on the page may, in some embodiments, be controlled in part by the script. Other embodiments may render the page and the links on the page in such a way that aspects of the links indicate which link should be selected by the executing script. While some embodiments include a page that is rendered by the load generating module, other embodiments include a page rendered by another graphics processing application or engine executing on the application delivery appliance . Still other embodiments include a browser able to render the page. When the page is rendered, is some embodiments, a plurality of links are displayed within the rendered page. Each link, in some embodiments, is logically connected to another page or network location such that selection of the link can either cause the browser to navigate away from the current page, or open another tab or window to display the page or network location associated with the selected link.","Once the links are rendered, a displayed link is selected (Step ). The selection of a link (Step ), can in some embodiments be done according to a configuration parameter set by a user via a user interface. In other embodiments, selection of a link (Step ) may be done at random such that each time a page loads, a link is randomly chosen. Still other embodiments may include selecting a link (Step ) based on a database which tracks which links were previously selected. In such an embodiment, the choice of a link may be determined by reviewing prior database entries of previously chosen links and determining based on characteristics of these entries which link to select. The selection of a link, in such an embodiment, may be based on a determination that a particular link is of interest because it is a common point of failure, or based on a determination that a particular link is of interest because it is a link most often chosen by customers. Still other embodiments can include the selection of a link (Step ) based on a learning algorithm that uses previously chosen links to determine the next link to choose, or a non-deterministic policy engine that chooses a link based on a set of policies that conclude which link to choose based on environmental input into the policy engine. In most embodiments, the link chosen is a link within the same web domain as the page on which the link resides. Still other embodiments include the selection of a link subsequent to the rendering of the page within the browser and the processing of the HTML DOM for the page.","In one embodiment, the selection of a link (Step ) occurs after the page is rendered. The load generating module or script, can in some embodiments select the link (Step ), and can sometimes select the link from amongst a plurality of links displayed on the page. In one embodiment, the load generating module or script can select a first link (Step ) and then select a second link or third link, and so on.","The script can in some embodiments select the first link (Step ) according to a selection rate. This selection rate can be hard-coded into the appliance  or the script by a user. Other embodiments include an experimentally derived selection rate based on an average time required by most users to select a link. In still other embodiments, the selection rate can be a rate selected by the load generation module or script according to a rate that will place the most or a significant amount of load on the appliance . In still other embodiments, the page displayed within the browser navigates to a page associated with the first link upon selection of the first link (Step ), while in other embodiments an event is called upon selection of the first link (Step ). Selecting the first link can further comprise, in some embodiments, supplying input to a web form where the web form is displayed within the page displayed within the browser. The input supplied to the web form can include input entered by a user. When the first link is selected, the contents of the web form can be submitted to the page such that the page navigates to another page with the contents of the web form. In still other embodiments, selecting the first link can include validating the first link against a list of excluded link destinations. Included on the appliance , in some embodiments, can be a table or list of link destinations that are not permitted or allowed. When the load generating module or script selects a first link, the script can first obtain a path associated with the link and compare that path with the table or list of forbidden link destinations. If the path is included within the list of forbidden destinations, then the load generating module can return an error indicating that the link is forbidden or in some embodiments exit (Step ). The list of forbidden or excluded destinations can include any of the following: a list of forbidden domains; a list of forbidden functions; a list of forbidden web addresses; a list of forbidden content; or any other listing of forbidden pages, addresses, functions or content. In some embodiments, selecting a link (Step ) can further include establishing destination location weighting which can include selecting a link based on which destination has not been chosen.","In most embodiments, the script will wait a pre-determined period of time (Step ) once a link is selected. This pre-determined period of time can be configured by a user via a user configuration interface, or the pre-determined period of time can be hard coded into the script code. Still other embodiments may include a script that waits for a random period of time that can be bounded within a range of acceptable wait-time values. It can be advantageous, in some embodiments, to utilize a script that determines a pre-determine period of time based in part on what period of time will place the most load on the appliance .","Once the script waits for a period of time, then either an event is called, or the browser navigates to the page associated with the link (Step ). In some embodiments, the script calls an event such as an on-click event associated with the selected link. This on-click event, in some embodiments, can either perform a function or execute another script, or navigate to a page specified within the on-click event when the link is selected. In other embodiments where an on-submit event is called once the link is selected, a web form is submitted once the link is selected. Embodiments where an on-submit event is called can include a step of obtaining data entered into the page and querying a database based on the data obtained. Further, the page in such an embodiment can, in some embodiments, be a web form able to generate queries based in part on data entered into the web form. In still other embodiments, any other event able to associate with a link and causing an action to occur may be called by the script. If an event is not called, then in some embodiments the script will navigate directly to the page associated with the link. Executing the event can, in some embodiments, ensure that any web application specific script, query, or action is executed as part of the load generation, and further ensure that the testing of the website is substantially similar to the actions performed by an actual user.","In many embodiments, a determination is made as to whether the browser in question is a control browser (Step ). This determination can be made by the load generating module or script, and can in some embodiments include determining that the identified browser is either a control browser or a slave browser. In many embodiments, if the browser is not a control browser then the browser in question is a slave browser and the script is directed to exit (Step ). When the browser is determined to be a control browser, the load generating module can spawn slave browsers responsive to this determination. In embodiments where the script spawns slave browsers responsive to determining the browser is a control browser, the number of spawned browser can be a pre-determined number. Each slave browser can, in most embodiments, execute the entire load generation script or load generating module which can comprise causing the script or load generating module to select a first link and determine the browser type of at least one of the spawned slave browsers. The control browser, in some embodiments, is the browser that the user executing the test uses to access the page being tested. Another name for the control browser is the master browser.","In some embodiments, when the load generating module or script determines that the identified browser is a control browser (Step ), the load generating module can cease executing. By ceasing execution, the load generating module can allow for the control browser to remain inactive while slave browsers are spawned. In some embodiments, the load generating module does not cease executing until after slave browsers are spawned.","The number of slave browsers spawned by the control browser, in some embodiments, is a configuration able to be changed by a user via a user configuration interface. In other embodiments, the number of slave browsers spawned by the control browser is a number hard-coded into the script.","In some embodiments, the method  can be executed by an appliance  within a network . Such an embodiment allows the automated load and usability testing to be platform, operating system and browser independent in the sense that no application needs to be installed on a server or client because the automated testing is a configurable aspect of the appliance  and not an application. Further, the use of an appliance  to implement automated load and usability testing negates the need for client side elements to be installed, as well as the need to know scripting languages, or information about the web application being tested. Still further embodiments that use an appliance  to automate load and usability testing negate the need for software to be installed or generated for the purpose of generating load. Other embodiments may include an automated load and usability testing system and method that is implemented in any one of the following ways: via installation on a client, server or other appliance, computing machine or virtual machine; via an application installed on the network ; or via a configurable aspect of a computing machine or other appliance other than the ones described above. In one embodiment, the method  is executed by an appliance  such as the Citrix Net Scaler or another application delivery solution that is substantially similar to the Citrix Net Scaler. Still another embodiment contemplates implementation of the method by applications within the Citrix Edge Sight suite including: Edge Sight for Endpoints; Edge Sight for XenApp; Edge Sight for Load Testing; or Edge Sight for Net Scaler. In another embodiment the method  can work in conjunction with any of the above-mentioned Edge Sight products.","Illustrated in  is an embodiment of the configurations  available for a system and method of automating the load and usability testing performed in part by the appliance . Possible configurations  include those dedicated to activating and de-activating the ability of the appliance  to automatically perform load and usability testing . In some embodiments the configurations can include any of the following configurable features: whether to call an event after a link is chosen  or navigate directly to a page associated with a chosen link ; the process for choosing a link within the browser ; the number of slave browsers to spawn ; the wait time after a link is chosen ; and the feature that triggers the automated testing of load and usability .","Referring to , and in more detail, the configurations  are available, in one embodiment, as a way to configure an appliance or application for providing automated testing of load and the usability of an application. Other embodiments may include providing the configurations  in a separate application that executes contemporaneously with an appliance  or application the tests the load on and the usability of a particular web application.","In some embodiments, the call an event  configuration, the navigate directly to a page associated with the selected link  configuration, and the turn automated testing of load and web-application usability on configuration; are configurations having a Boolean on or off state. In said embodiments, these aspects of the appliance may be configured by stating whether or not these features should be placed in an \u201con\u201d or \u201coff\u201d state. For example, to ensure that the script will call the event associated with the selected link after waiting a pre-determined period of time, one could configure the call event  configuration such that it is in an \u201con\u201d state, and the navigate directly to a page associated with a link  configuration such that it is in an \u201coff\u201d state.","Embodiments can include a call event  configuration that provides a list of events that may be called once a link is selected. In these embodiments, the list of events may be provided in any of the following ways: hard-coded into the script; detected via a review of the page selected for testing; a search through a database storing lists of possible events; or a list generated by a learning algorithm that tracks previously detected events. Other embodiment may include a call event  configuration that is provided by the user via a user interface. Still other embodiments may include a call event  configuration that does not provide the ability to indicate which event should be called.","The wait time  configuration can, in some embodiments, be configurable such that a user may specify a triggering embodiment via a user interface that allows the user to perform such configurations. In other embodiments, the wait time  may be chosen at random. Still other embodiments include a wait time  that must be chosen within a specified range, but that can be chosen at random within that range.","Similarly, in some embodiments, the number of slave browsers to spawn  may be a number that can be chosen at random. In other embodiments the number of slave browsers  may be chosen as a number from within a list of specified numbers. Still other embodiments may include a configurable number of slave browsers  that may be any number from within a specified range of values.","An additional embodiment includes implementation of the systems and methods described herein such that they are executed in combination with any of the following: Symphoniq monitoring technology, Gomez ActualExperienceXF products; testing products that employ mechanisms which utilize client side monitoring to determine the actual user experience with a web application; monitoring applications published by Coradiant, TeaLeaf, b-hive, Oracle (Moniforice), or any other application that utilizes server side network monitoring to profile network requests into a user experience metric.","The present disclosure may be provided as one or more computer-readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk, a hard disk, a compact disc, a digital versatile disc, a flash memory card, a PROM, a RAM, a ROM, a computer readable medium having instructions executable by a processor, or a magnetic tape. In general, the computer-readable programs may be implemented in any programming language. Some examples of languages that can be used include C, C++, C#, or JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.","While various embodiments of the methods and systems have been described, these embodiments are exemplary and in no way limit the scope of the described methods or systems. Those having skill in the relevant art can effect changes to form and details of the described methods and systems without departing from the broadest scope of the described methods and systems. Thus, the scope of the methods and systems described herein should not be limited by any of the exemplary embodiments and should be defined in accordance with the accompany claims and their equivalents."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The following figures depict certain illustrative embodiments of the invention in which like reference numerals refer to like elements. These depicted embodiments are to be understood as illustrative of the invention and not as limiting in any way.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 1E and 1F"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
