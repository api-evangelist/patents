---
title: Simultaneously driving a hardware device and a software model during a test
abstract: An apparatus generally comprising a circuit and an interface device is disclosed. The circuit may be configured to (i) generate a plurality of test signals to simultaneously stimulate a device and a model of the device during a test and (ii) receive a plurality of model signals generated by the model in response to the test signals. The interface device may be configured to receive a plurality of device signals generated by the device in response the test signals.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07017097&OS=07017097&RS=07017097
owner: Cypress Semiconductor Corp.
number: 07017097
owner_city: San Jose
owner_country: US
publication_date: 20020924
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to a method and\/or architecture for testing hardware devices generally and, more particularly, to a method and\/or apparatus for simultaneously driving a hardware device and software model during a test to enable co-verification of the hardware device against the software model.","Software programmers have difficulty preparing code for hardware that has not yet completed a design stage. Debugging software coding for undeveloped hardware is nearly impossible to do with a high level of confidence that the debugged software will function properly on a prototype version of the hardware under development. Conventional approaches involve waiting to run tests against a hardware device (i.e., silicon) to see how the software operates. When the hardware is available, the tests are applied to the prototype silicon and the results are compared. If there are defects in the software code, much time is wasted in the development stage waiting for functional software to be developed after the hardware is ready.","A second conventional approach is to develop a hardware model (i.e., a field programmable gate array) of the hardware device under development with which code debugging tests are run before the silicon is ready. Such tests include sort tests, class tests, and tests using evaluation boards. The tests are generally developed blindly before the hardware is available. When the silicon version of the hardware is ready, the tests are applied to the silicon hardware.","A third conventional approach involves developing a software model (i.e., register transfer language (RTL) simulation) with which to run functional tests before a prototype of the silicon is ready. Functional tests are then applied when the silicon is ready. Following the functional tests, a simulation versus silicon analysis is performed to see if the silicon behaves in the same manner as the simulations and if the code written is functional with the prototype. If the test fails, debugging\/comparing the results of the functional simulations and silicon operation can be time consuming and error prone.","Disadvantages of the conventional approaches include spending a considerable amount of time debugging software tests. Time elapses before the tests are sufficiently debugged to be helpful to the developer. The developer may have to wait until a hardware prototype is available before debugging the software. Waiting for the hardware presents a bottleneck in the silicon characterization process, delays product release and is a competitive disadvantage. Additionally, errors often arise in developing software simulations before hardware is available for comparison. Problems involved in comparing the results of the silicon and software result in delayed characterization and a long time to market for the development cycle. With conventional solutions, stepping through tests on both hardware and software models simultaneously is not possible. Comparing hardware tests with RTL simulations during functional verification and debug stages is slow and unwieldy and presents a bottleneck to the debug and correction process.","The present invention concerns an apparatus generally comprising a circuit and an interface device. The circuit may be configured to (i) generate a plurality of test signals to simultaneously stimulate a device and a model of the device during a test and (ii) receive a plurality of model signals generated by the model in response to the test signals. The interface device may be configured to receive a plurality of device signals generated by the device in response the test signals.","The objects, features and advantages of the present invention include providing a method and\/or apparatus for simultaneously driving a hardware device and a software model to enable co-verification of the hardware device against the software model that may (i) offer significant advantages to a user in terms of ease of debugging and co-verification of the hardware device and the software model, (ii) be a dedicated register simulator model of a relevant device, (iii) include an register transfer language (RTL) code that may be used to produce the hardware device, (iv) provide an actual operation of the hardware silicon to be verified against the RTL code or an accurate model thereof and\/or (v) allow a software developer to develop and test software against the register simulator model with a high degree of confidence that the software code may work on the real silicon.","Referring to , a block diagram of an apparatus  is shown in accordance with a preferred embodiment of the present invention. The apparatus  generally comprises a circuit , a circuit , a circuit , a circuit  and a circuit . The circuit  may be configured to present signals (e.g., TEST) simultaneously to the circuit  and the circuit . The circuit  may present model result signals (e.g., MOD_RSLT) back to the circuit  based upon the test signals TEST. The circuit  may present device result signals (DEV_RSLT) back to the circuit  based upon the test signals TEST.","The circuit  may be implemented as a personal computer (PC), workstation or similar computing platform. The circuit  may be implemented as a second PC, workstation or similar computing platform. The circuit  may be implemented as user hardware, an evaluation board or a similar board.","The circuit  may be implemented as a display coupled to the first computer . The circuit  may generate an image or signal (e.g., DEV_IMG) viewable by a user . The circuit  may be implemented as another display coupled to the second computer . The circuit  may generate an image or signal (e.g., MOD_IMG) viewable by the user.","The first computer  generally comprises a software program , a software program , a software program , a software program , a port circuit  and a storage medium . The software program  may be configured as a software driver. The software driver  may be executed by the first computer  to generate the test signals TEST, receive the device result signals DEV_RSLT (also referred to as device signals) and receive the model result signals MOD_RSLT (also referred to as model signals). The storage medium  may be a computer readable media suitable for storing software programs such as the software program , the software program  and the software program .","The software program  may be implemented as a device driver program. The device driver program  may provide access to low level registers (not shown) within the second computer  and the circuit . The device driver program  may also service interrupts generated by the second computer  and\/or the circuit .","The software program  may be implemented as an application programming interface (API) program. The API program  may provide interface and format conversions between the software driver program  and the device driver program . The API program  may provide a standard or predetermined interface to the software driver program  generally allowing for portability of the software driver program  among various PCs, workstations and\/or other computing resources.","The software program  may be implemented as a protocol definition unit (PDU) program. The PDU program  may provide interface and formatting conversions to send and receive data through the port circuit . The PDU program  may be arranged to drive the second computer  and the circuit  in parallel. The PDU program  may also be configured to receive data from the second computer  and\/or the circuit .","The port circuit  may be implemented as one or more a communication ports. The communication port  may be a serial port and\/or parallel port. The communication port  generally establishes a communications link  capable of transferring data to and from the second computer  and the circuit  substantially simultaneously and in parallel.","The second computer  generally comprises a circuit  and a model . The circuit  may be implemented as a PDU interpreter circuit. The PDU interpreter circuit  may provide translations to and from registers in the model . The PDU interpreter circuit  may be operational to execute the model  for simulation of the hardware device  operation.","The model  may be implemented as an ideal model of the a device being developed. The model may be implemented as a register transfer language (RTL) model (e.g., a Verilog model), a programming language model (e.g., a C model) or other type of software model of the ideal device. When implemented in software, the model  may be executed by the second computer . The model  may also be implemented as a hardware model. For example, one or more field programmable gate array (FPGA) circuits, a programmable logic devices (PLD), complex programmable logic devices (CPLD), and\/or memory circuits may be programmed to emulate the ideal device. In one embodiment, the hardware model may be programmed with the software model.","The circuit  generally comprises an interface device  for communicating with a hardware device . The interface device  may be implemented as a socket, a set of probes, a connector and\/or other device suitable for connecting to the hardware device . Generally, the hardware device  may be implemented as a hardware (e.g., silicon) implementation of the model . In one embodiment, the device  may be implemented as one or more FPGAs, PLDs, CPLDs and\/or memory circuits programmed in accordance with the model .","During operation, the software driver program  may generate the test signals TEST. The test signals TEST may be useful in testing and\/or debugging the hardware device  through a user comparison of a hardware device performance against the software model performance. The test signals TEST may flow from the software driver program  through the API program , the device driver program  and the PDU program  to the communication port circuit . From the communication port circuit , the test signals TEST may be driven simultaneously to the PDU interpreter circuit  and the interface device . The test signals TEST may thus be applied substantially simultaneously to both the model  and the hardware device .","The model result signals MOD_RSLT generated by the model  may be provided back to the PDU interpreter circuit  for conversion and transmission to the software driver program  and\/or to the display circuit . The display circuit  may display model result signals MOD_RSLT data as the image MOD_IMG in a user friendly and understandable format such as waveforms, voltages, times, and\/or the like.","The device result signals DEV_RSLT generated by the hardware device  may be provided through the interface device  back to the evaluation board  for conversion and transmission to the software driver program . The software driver program  may progress the device result signals DEV_RSLT into a format suitable for the display circuit . The display circuit  may display the device result signals DEV_RSLT data as the image DEV_IMG in a user friendly and understandable format such as waveforms, voltages, times and\/or the like.","While viewing the images DEV_IMG and MOD_IMG, the user  may manually compare the output of the software model  against the output of the hardware device . The comparison may be used for debug and\/or test of the software model . The comparison may also be used for debug and\/or test of the hardware device  as compared with the software model . The visual comparison may be particularly suited to hardware device  and\/or evaluation board  characterization.","In one embodiment, the model result signals MOD_RSLT may be transferred back to the software driver program . The software driver program  may convert the model result signals MOD_RSLT into a viewable format for display by the display . Generally, the first computer  may accept and process a single set of result signals at a time between the model result signals MOD_RSLT and the device result signals DEV_RSLT for display. Functionality for accepting one set of result signals and rejecting\/holding the other set may be allocated to the device driver program . Other allocations may be made to meet a criteria of a particular application.","Referring to , a block diagram of a second example apparatus  is shown. The apparatus  generally comprises a the first computer , the display , the second computer  the circuit  and the communications link . A software program  executed by the first computer  may be arranged to generate the test signals TEST for both the model  and the hardware device  simultaneously. The software program  may be implemented as a software driver program.","Bi-directional flows of information may be possible between (i) the model  and the software driver program  and (ii) the hardware device  and the software driver program . The first computer  may be arranged such that the user may be able to logically and\/or physically switch on and off software model  and\/or hardware device .","The software driver program  may provide automated functions useful in testing and debugging the hardware device  and\/or the model . For example, the software driver program  may perform one or more automated comparisons of the data in the model result signals MOD_RSLT with the data in the device result signals DEV_RSLT. In another example, the software driver program  may generate a sequence of test vectors that may be conveyed to the model  and the hardware device  through the test signals TEST. The software driver program  may control stepping through the set of test vectors in realtime, semi-realtime, one step at a time, manually, and\/or the like. Breakpoints operations may be included in the software driver program  functionality. The breakpoints may allow the test vectors to be halted so that internal states of the model  and\/or hardware device  may be examined.","Referring to , a block diagram of a third example apparatus  is shown. The apparatus  generally comprises a circuit , the display , the circuit , and a communication link . The circuit  may be implemented as a personal computer, workstation or similar computing platform. The communication link  may be arranged to link the computer  with the circuit . The communication link  generally carries the test signals TEST and the device result signals DEV_RSLT.","The computer  generally comprises the software driver program , the device driver program , the API program , the port circuit , the PDU interpreter circuit , the model  and the storage medium . The software driver program  may be executed by the computer  to both drive and read from the API program  for both the PDU interpreter circuit  and the actual hardware device . Bi-directional flows of information may be possible between the software model  and hardware model  and the software driver program . The user may be able to switch on and off (e.g., enable and disable) the software model  and\/or hardware device model  at will.","The present invention may offer the user a feature allowing code testing on both real silicon versions of the hardware (e.g., evaluation board or other developmental prototype) and the software model in parallel. The parallel operation may offer the user a significant degree of confidence that the code developed on the model (before a prototype arrives) may work the same way on the silicon once fabricated. The parallel operation may also offer the user a significant time to market advantage in a development process for the silicon. Alternatively, an implementation using the device RTL synthesized to a programmable logic (e.g., a field programmable gate array) may be used instead of either the hardware device  and\/or the model . In one example, a user\/developer may be provided with an evaluation board comprising a field programmable gate array programmed with the (possibly encrypted) RTL of a device, which may be used to test code before the silicon prototype becomes available.","Providing users and developers with the opportunity to test code on both software RTL simulated versions of the hardware under development and physical electronics in parallel may allow the users\/developers to identify errors in software and\/or hardware models, remedy errors, and have functional code ready for the silicon version of the hardware under development once ready. The redundancy of testing software and hardware designs in parallel may allow for a high degree of confidence that the developed code may be functional and that the hardware and software prototypes may be valid.","The present invention may include a computer product which may be a storage medium including instructions which can be used to program a computer to perform a process in accordance with the present invention. The storage medium can include, but may not be limited to, any type of disk including floppy disk, optical disk, CD-ROM, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, Flash memory, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","Portions of the present invention may also be implemented by the preparation of ASICs, FPGAs, CPLDs, PLDs or by interconnecting an appropriate network of conventional component circuits, as is described herein, modifications of which will be readily apparent to those skilled in the art(s). As used herein, the term \u201csimultaneously\u201d is meant to describe events that share some common time period but the term is not meant to be limited to events that begin at the same point in time, end at the same point in time, or have the same duration.","While the invention has been particularly shown and described with reference to the preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["These and other objects, features and advantages of the present invention will be apparent from the following detailed description and the appended claims and drawings in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"}]},"DETDESC":[{},{}]}
