---
title: Method and system for reducing service overhead in service oriented architectures
abstract: A system and method for processing service request in service oriented architectures to minimize service overhead is provided. The method includes invoking a software service by a client by sending service request to a server hosting the software service. The method further includes receiving the software service request by the server and determining whether one or more portions of service logic software code should be executed by the client, based on information related to client capabilities. Thereafter, service logic software code is streamed to the client partly or in-total. The client executes service logic software code provided by the server. The server is pre-configured to execute or transfer one or more portions of service logic software code to the client based on client capability information and extent of affinity of the service for server-specific resources. The server executes the software service partly or in-total based on the configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874640&OS=08874640&RS=08874640
owner: Infosys Limited
number: 08874640
owner_city: Bangalore, Karnataka
owner_country: IN
publication_date: 20110328
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention relates generally to the field of service oriented architectures. More particularly, the present invention enables dynamic transfer of service logic across system and process boundaries in order to improve performance of software services.","Service-oriented architecture (SOA) is a specific implementation of software architecture wherein one or more services are configured to be inter-operable and reusable within diverse software platforms and applications. Typically, in an SOA implementation, business processes are deployed within and across organizations as inter-operable services which can be used by applications without warranting any knowledge of service logic implementation. A characteristic of a software service in an SOA is use of the concept of \u201cloose coupling\u201d wherein the software service functionality is decoupled from a requesting application or service.","For implementation of business activities in SOA architecture, coordination of two or more services may be required. The coordination of services is achieved by employing means to connect the services with each other, such as by using Web Services. Since Web Services use standard protocols that are independent of platforms and programming languages, the protocols are used to describe service logic and to pass messages between applications. However, the decoupling of software service functionality carries a performance cost due to network and runtime service overhead. Whenever a client application requires the use of a service, it does so by sending a request message to a server hosting the service \u201cover the wire\u201d and the requested service is executed remotely at the server. In the case where frequently occurring transactions are implemented as services, system performance may be sufficiently degraded due to frequent service requests and executions. An example of a frequently occurring transaction may be identification of type of credit or debit card used during processing of point-of-sale transactions which requires a lookup on a Bank Identification Number (BIN) file.","The basic goal of an SOA is to minimize duplication of commonly used logic in multiple applications by implementing the logic as a reusable service. However, an SOA should be designed so as to minimize number of service requests by client applications in order to reduce service performance deterioration. Further, during architecting and implementing SOA architectures, issues of latency and service overhead need to be addressed with an attempt to minimize them.","A system, method and computer program product for processing service requests in a service oriented architecture is provided. The system and method of the present invention facilitates reduction of service overhead. The method includes invoking a software service by a client, wherein the software service is invoked by sending a service request to a server hosting the software service. The software service request is received by the server and it is determined whether the software service should be executed by the client. The determination is made by ascertaining whether the software service is enabled for client-side execution and is capable of being executed by the client. The method further includes providing service logic software code to the client for processing the service request, if it is determined that the software service is enabled for client-side execution and is capable of being executed by the client. In an embodiment of the present invention, the software service is executed by the client upon receipt of service logic software code from the server. In another embodiment of the present invention, the requested software service is executed by the server if it is determined that the software service is not enabled for client-side execution or is not capable of being executed by the client.","In an embodiment of the present invention, following the receipt of service logic software code, subsequent requests for the software service are executed by the client. The client regularly receives updates of the service logic software code from the server.","In an embodiment of the present invention, the service logic software code is streamed to the client by a service container application at the server hosting the code.","In various embodiments of the present invention, the service logic software code is deployed within the service container application in a programming language mutually supported by the client and the server. In another embodiment of the present invention, the service logic software code is deployed within the service container application in a programming language that can be executed in a plurality of software platforms.","In an embodiment of the present invention, the software service is enabled for being executed by the client partly or in-total based on the extent of affinity the service has for server-specific resources, wherein the enablement is configured at the server by a system administrator.","In an embodiment of the present invention, the software service is enabled for being executed by the client partly or in-total based on information about client capabilities, wherein the enablement is automatically configured by the server.","In various embodiments of the present invention, the service logic software code includes one or more portions of the entire software code required for executing the service, wherein the one or more portions are developed and deployed within the service container application based on information about client capabilities.","In an embodiment of the present invention, determining whether the software service is capable of being executed by the client comprises determining whether the client has the necessary resources and libraries for executing the service logic software code and determining whether runtime execution of service logic software code is supported by the client.","In an embodiment of the present invention, determination regarding client capability for service execution is made by the server upon receiving client-capability information from the client as part of software handshake process.","In an embodiment of the present invention, the service logic software code is executed by the client using a software plug-in. In another embodiment of the present invention, the service logic software code is executed by the client using a sandbox. In yet another embodiment of the present invention, the service logic software code is executed by an intermediate infrastructure such as a proxy server.","In an embodiment of the present invention, the system for processing a service request includes a client system including an XML marshaller configured to receive a service request and further configured to convert request objects into XML-formatted data. The client system further includes a SOAP\/Service Logic Binding component configured to encapsulate XML-formatted data within a SOAP message and further configured to define rules for binding the SOAP message to a service request message. A Service Logic Invoker is configured to send the service request message to at least one of a server and a client container application based on determining whether the service can be executed at the client system. Further, a client container application configured to download service logic software code streamed from the server and further configured to execute the code in order to process the service request.","In various embodiments of the present invention, a server is configured to stream service logic software code to the client system. The server includes a service platform configured to host service logic software code corresponding to complete execution of service request, wherein the service logic software code is deployed at the service platform by a developer. The server further includes a service container application configured to host one or more portions of service logic software code that are client-compatible, wherein the client-compatible code corresponds to partial execution of the service request, further wherein the service container application is further configured to determine portions of service logic software code that are client-compatible.","The disclosure is provided in order to enable a person having ordinary skill in the art to practice the invention. Exemplary embodiments herein are provided only for illustrative purposes and various modifications will be readily apparent to persons skilled in the art. The general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the invention. The terminology and phraseology used herein is for the purpose of describing exemplary embodiments and should not be considered limiting. Thus, the present invention is to be accorded the widest scope encompassing numerous alternatives, modifications and equivalents consistent with the principles and features disclosed herein. For purpose of clarity, details relating to technical material that is known in the technical fields related to the invention have been briefly described or omitted so as not to unnecessarily obscure the present invention.","In an SOA, software applications are implemented as software services, published over a computer network, such as the Internet, and accessed by client applications. Typically, SOA services are executed at server-side which results in service access overhead which in turn eventually leads to service performance degradation. Examples of service access overhead include network latency and other service\/protocol related overheads. The performance degradation is considerable in the case of frequently accessed applications. Exemplary embodiments of the method and system of the present invention provide a virtualization software framework layer that easily integrates with traditional SOA infrastructure and facilitates SOA services to run locally in-part or totally local to client (consumer) applications. This is achieved by enabling dynamic transfer of service logic software code across server and client platforms. Dynamic Transfer of software code is largely unconstrained by software platform limitations, the only limitations being resource affinity on the server side and client-side limitations.","The present invention would now be discussed in context of embodiments as illustrated in the accompanying drawings.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 1","b":["102","102","104","106","105","105","104","108","110","106","112","114"]},"Service provider  is responsible for creating one or more software services required by one or more clients and publishing its interface information to a service registry. The interface information may include location information (such as network addresses) of services within Service provider  so that client programs can access the services, when required. In a case where web services are used to implement SOA services, the interface information may be contained within a Web Services Description Language (WSDL) file published in a service registry by a service provider. The service registry is accessible to client applications and clients may be able to locate service details in the registry using a protocol such as Universal Description, Discovery and Integration (UDDI). Software services offered by Service provider  may be consumed by Service consumer  via Client .","Service Infrastructure A  and Service Infrastructure B  within Server  and Client  respectively are configured to provide functionality to ensure proper execution of SOA services. Significant software modules hosted within Service Infrastructure A  and Service Infrastructure B  may include, but are not limited to, a service bus, a messaging module, a business process management module, an event processing module, a data interoperability module, an event processing module, a mainframe integration module etc. SOA  is designed such that modules operating within Service Infrastructure A  and Service Infrastructure B  only need to execute their specific functions and are not required to be aware of other service details and client specific details. For example, a service bus carries out the functions of data transformation and routing and is agnostic about implementation aspects of service consumer . Further, modules within Service Infrastructure A  and Service Infrastructure B  do not take into consideration specifics such that whether Service consumer  is a thin client or a thick client, when executing functions such as message passing, event execution etc. Since infrastructural requirements vary based on type of client, this leads to a sub-optimal utilization of resources across components involved in service interaction.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2"},"For accessing a web service, a client application marshals the request using XML marshaller . XML marshaller  converts request objects into XML-formatted data. XML data is then encapsulated within a SOAP message and is forwarded to a server hosting the required web service. Since the SOAP message is transmitted over the Internet, the underlying transport protocol used for transmitting the message is Hypertext Transfer Protocol (HTTP). Firstly, a SOAP\/HTTP binding component  defines rules for binding the SOAP message to the HTTP header. The binding details specified include details related to content-type, content-length, desired action, SOAP processor identification, message intent etc. The actual message is then encapsulated as body of the HTTP message and HTTP invoker  makes the service request in HTTP protocol format.","Upon receiving the service response, HTTP response processor  processes the response and delivers the SOAP message to SOAP response interpreter . SOAP response interpreter  extracts XML-formatted data from the SOAP message and delivers it to XML Unmarshaller . XML Unmarshaller then extracts the response object from the XML-formatted data.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 3","b":["302","304"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1. The first criterion is, whether the particular service is enabled for being executed at client-side. In an embodiment of the present invention, a developer\/system can enable a specific service (in total or in-part) for being executed at client-side based on the extent of affinity the particular service has for server-specific resources. The enablement can be pre-configured by a system administrator or may be decided automatically by the server based on the dependency the service has on server resources.","2. Secondly, it is determined whether the client is resource-enabled for executing the particular service. For example, the client should have the necessary libraries and\/or resources to execute a service logic software code. In an exemplary embodiment of the present invention, a thin client may not have the resources for executing the service logic software code. In such a scenario, the service is a regular SOA service executed at the server-side. In an embodiment of the present invention, the client provides information about its capabilities to the service container application as part of a software handshake.","3. The third criterion used by the service container application to determine whether the service is client-side executable is if runtime execution of service logic code is supported by the client. For example, a client may not be .NET compatible but may support execution of .NET software code through plug-ins. This information is also provided to the service container application by the client as part of the handshake process."]}}}},"Further, for determining whether the service is capable of being executed by the client, the service container application determines whether additional requirements conforming to service security and validity (duration) of service are met by the client application. In an exemplary embodiment of the present invention, the service container application determines whether standard methodologies used for handling the requirements are implemented by the client application. An example of a methodology for conforming to service validity requirement may include use of response header to indicate how long the service code is valid. This is to avoid an older version of the service code from being cached and executed on the client side. A critical security requirement is to conform whether the level of trust between the service provider and the consumer is sufficient to determine if the service logic software code can be exchanged between the server and the client application. In various embodiments of the present invention, the service container application may conform that communication between the server and the client application is realized using a secure protocol such as Secure Sockets Layer (SSL) protocol.","In addition to above mentioned criteria of service security, validity and client capability, other criteria to be considered are service latency and network availability. In an exemplary embodiment of the present invention, the service container application estimates total system load before deciding whether the service request is to be executed locally. In various embodiments of the present invention, the client application may be running in a resource constrained environment and it may not be feasible for the client application to execute the service. Hence, if it is determined that the service is not capable of being executed by the client application, at step , the service request is executed by the server. However, if it is determined that the service is capable of being executed by the client application, at step  service logic software code is provided to the client (service consumer) platform by the service container application. In an embodiment of the present invention, the service logic software code is an executable code streamed by the server to the client platform.","In an embodiment of the present invention, for achieving interoperability, the service logic software code is realized using a programming language that can be executed in multiple software platforms. An example of a programming language in which it is implemented is an ECMAScript. In another embodiment of the present invention, the server is configured to stream the service logic software code in a programming language mutually supported by the server and the client. The programming language for streaming the code can be decided by the service container application based on information about client capabilities exchanged during handshake. In yet another embodiment of the present invention, a plug-in approach is used by the client container application for supporting heterogeneous environments. For example, if the client platform is Java-based and the requested service is a .NET component, the client container application can use .NET plug-in to execute the service.","The client platform comprises a client container application that stores the service logic software code. In an embodiment of the present invention, the client container application implements a sandbox for executing the code which is isolated from other client applications. An example of a sandbox may be a Java Virtual Machine (JVM) container. Another example of a sandbox may be a .NET container. However, as illustrated by the aforementioned embodiments, if the server and client are in a mutually compatible technology or in case the client supports service execution through a plug-in, no separate implementation is required for the service execution to be enabled.","Subsequently, at step , a client application within the client container application executes the service locally. After executing a particular service, all subsequent requests for the service are locally handled by the client container application. The client container application regularly communicates with the service container application for receiving updates of service logic software code corresponding to one or more requested services.","In various embodiments of the present invention, middleware such as a proxy server can be involved in service execution by downloading service logic software code from the server and executing the service. The execution of service by the proxy server is transparent to the client platform. However, the proxy server can also relay the service logic software code to the client container application for executing the service. For every service invocation, the service logic software code may be executed either at server, intermediate infrastructure like proxy server or at the client system depending on whichever execution is optimal. In an embodiment of the present invention, if the client is resource constrained it can request service execution on the server. However, an intermediate infrastructure such as the proxy server can choose to execute the service in lieu of the server so that service load is dynamically shared between systems participating in SOA-based applications.",{"@attributes":{"id":"p-0040","num":"0042"},"figref":["FIG. 4","FIG. 4"],"b":["400","402","402","408","404","404"]},"The actual message is then encapsulated as body of request message and is used by Service Logic Invoker  for making the service request. Service Logic Invoker  makes the service request either to the client container application  or to the server based on the following conditions: Firstly, Service Logic Invoker  determines whether the service is enabled for being executed at client-side. In an embodiment of the present invention, if the service is not enabled for client-side execution, Service Logic Invoker  makes a service request to a remote server. Secondly, the Service Logic Invoker  determines whether the service logic software code is downloadable. If it is determined that the service logic software code is not downloadable, in this case also service execution request is made to the server. However, if it is determined that the service is enabled but not yet downloaded, Service Logic Invoker  can initiate download of the code for client-side execution by the client container application .","In an embodiment of the present invention, if it has been determined by the Service Logic Invoker  that the client container application  has the service logic software code for executing a service, a request for service execution is issued to the client container application . Upon receiving the service execution request, the client container application  performs the service execution.","Upon receiving the service response, Service Logic response processor  processes the response and delivers the SOAP message to SOAP response interpreter . SOAP response interpreter  extracts XML-formatted data from the SOAP message and delivers it to XML Unmarshaller . XML unmarshaller then extracts the response object from the XML-formatted data.",{"@attributes":{"id":"p-0044","num":"0046"},"figref":"FIG. 5","b":["1","1","502","504","504","506"]},"A simple remote service having simple use-cases and minimal input-output operations, as illustrated by Case , can be entirely implemented using a singular software code implementation . Software code  can be entirely streamed to a client platform so that it can be executed locally.","During deployment of software code corresponding to a service, a deployer  makes a decision regarding portions of code to be enabled for this invention. In an embodiment of the present invention, in case of a complex service, the deployer deploys software code corresponding to complete service implementation  at the service platform  and code corresponding to the client-compatible portion  within a service container application . An interface is provided to the service container application  so that client-compatible code can be easily streamed to a client platform, when requested. For a complex service request, at runtime, the service container application  first examines the request and determines whether the client platform supports execution of software code corresponding to service. In certain scenarios, the client platform may support execution of software code but may not be capable of executing complex use-cases. In such a case, the service container application  intimates this information to the client platform. The client platform thereby requests the service to be executed by the service platform , which in turn executes the complete service implementation .","In another embodiment of the present invention, in case of a simple service with minimal input-output operations, the deployer deploys software code  corresponding to complete implementation (all use-cases) of the simple service as client-compatible. Further, a reference  is added at the service platform  specifying that all service requests are to be handled by streaming the client-compatible code  to the client platform. At runtime, the client-compatible code  is streamed to a requesting client to be executed locally. For the purposes of this invention, the term client could be an actual service consumer or an intermediate infrastructure, such as a proxy server. Additionally, in case a remote execution of the simple service is requested, the remote execution is also handled by a local instance of the client-compatible code  at the service platform . A copy of implementation of the client-compatible code  is sent to the requesting client by the service platform .","The system and method of the present invention facilitates abstraction of service logic from underlying software platforms. The implementation of system and method of the present invention is not bound to any system, process or platform. Further, since execution of method of the present invention is transparent to client platforms, it can be leveraged to enable distribution of processing load across computing infrastructure. Typically, the preferred platforms for requesting web services are .NET and J2EE. These platforms use managed execution of code where the web container is both aware of and controls runtime characteristics and dependencies of a requested service. In various embodiments of the present invention, the system can be integrated with the container so that the process of deciding which services are capable of being streamed to clients can be automated. This removes manual involvement required during development and deployment of service logic software code.","The method and system for reducing service overhead in service oriented architectures as described in the present invention or any of the embodiments, may be realized in the form of a computer system. Typical examples of a computer system include a general-purpose computer, a programmed microprocessor, a micro-controller, a peripheral integrated circuit element, and other devices or arrangement of devices that are capable of implementing the steps that constitute the method of the present invention.","The computer system typically comprises a computer, an input device, and a display unit. The computer typically comprises a microprocessor, which is connected to a communication bus. The computer also includes a memory, which may include Random Access Memory (RAM) and Read Only Memory (ROM). Further, the computer system comprises a storage device, which can be a hard disk drive or a removable storage drive such as a floppy disk drive, an optical disk drive, and the like. The storage device can also be other similar means for loading computer programs or other instructions on the computer system.","The computer system executes a set of instructions that are stored in one or more storage elements to process input data. The storage elements may also hold data or other information, as desired, and may be an information source or physical memory element present in the processing machine. The set of instructions may include various commands that instruct the processing machine to execute specific tasks such as the steps constituting the method of the present invention.","While the exemplary embodiments of the present invention are described and illustrated herein, it will be appreciated that they are merely illustrative. It will be understood by those skilled in the art that various modifications in form and detail may be made therein without departing from or offending the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE ACCOMPANYING DRAWINGS","p":["The present invention is described by way of embodiments illustrated in the accompanying drawings wherein:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
