---
title: Method for link buffer size and queue length estimation for bandwidth-varying mobile data networks
abstract: A sum-of-delays algorithm in a digital mobile communication bandwidth-varying network is employed to estimate link buffer size and queue length in an undying network connection. In particular, mechanisms associated with the process compensate for link bandwidth variations. In a particular embodiment, passive estimation are employed to implement the process by simply measuring the in-band data packet timings to perform estimation, thus eliminating the need for transmission of extra measurement packets. This method enables the integration of the link buffer size estimation algorithm into existing transport protocols such as TCP to optimize flow and congestion controls. As part of the invention, a new congestion control method called TCP Queue-length-Adaptive (TCP-QA) is developed to employ the sum-of-delays algorithm in the TCP sender computer to control the data flow in a TCP connection. Compared to existing TCP variants, TCP-QA can achieve significantly better network bandwidth utilization in bandwidth-varying networks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08923270&OS=08923270&RS=08923270
owner: The Chinese University of Hong Kong
number: 08923270
owner_city: Hong Kong
owner_country: CN
publication_date: 20120924
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCES TO RELATED APPLICATIONS","STATEMENT AS TO RIGHTS TO INVENTIONS MADE UNDER FEDERALLY SPONSORED RESEARCH AND DEVELOPMENT","REFERENCE TO A \u201cSEQUENCE LISTING,\u201d A TABLE, OR A COMPUTER PROGRAM LISTING APPENDIX SUBMITTED ON A COMPACT DISK","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present application claims benefit under 35 USC 119(e) of U.S. provisional Application No. 61\/543,238, filed on Oct. 4, 2011, entitled \u201cMethod For Link Buffer Size and Queue Length Estimation For Bandwidth-Varying Mobile Data Networks,\u201d the content of which is incorporated herein by reference in its entirety.","This work was not funded by any United State Federal Agency but was funded in part by the Innovation and Technology Fund (ITS\/014\/10) provided by the Innovation and Technology Commission, Hong Kong SAR, which does not claim proprietary interest in this invention.","Not Applicable","This invention relates to wireless telecommunication and in particular to wireless mobile Internet digital data communication.","It is well known that the performance of Internet transport and application protocols depends heavily on the characteristics of the underlying network links, and in particular, the bottleneck link. Apart from the impact of competing traffics, a bottleneck link has three primary parameters, namely link bandwidth, buffer size, and queue length. Referring to citations listed below by the bracketed numerals, many previous works have investigated methods to estimate these link parameters, for example link bandwidth estimation [1-3], link buffer size estimation [4-6], and queue length estimation [7-9]. A common assumption among these previous works is that the link bandwidth is constant, which is largely valid for wired networks as the physical link typically has a fixed transmission data rate. However with the rapidly emerging mobile data networks such as 3G [10], HSPA [11], and LTE [12], this assumption is no longer valid.","To illustrate,  plots the measured bandwidth of a production 3G network over a time interval of 10 seconds where there is only a single UDP data flow going from a wired server to a 3G-connected receiver. It is evident that unlike fixed networks, mobile data network can exhibit significant bandwidth fluctuations over a short timescale (as well as over longer timescales, not shown here) even if there is no competing traffic destined to the same receiver. This poses a fundamental challenge to existing link property estimation algorithms as the assumption of fixed link bandwidth no longer holds.","Known algorithms for estimating the link buffer size are max-min [5-6] and loss-pair [6], and queue length estimations, used in TCP Vegas [7], Veno [9] and FAST TCP [8]. Consider the system model depicted in  where a single sender transmits packets via a bottleneck link to a receiver. None of the bottleneck link's parameters are known a priori and the propagation delays are constant. The goal is to estimate the queue length continuously, denoted by q, and link buffer size, denoted by L, at the sender via observation of the acknowledgement packet arrival times. Table I summarizes the notations used in the following discussions.",{"@attributes":{"id":"p-0009","num":"0008"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Symbol","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["P","Propagation delay from sender to the link buffer"]},{"entry":["P","Propagation delay from link buffer to the receiver"]},{"entry":["P","Total downlink propagation delay"]},{"entry":["U","Uplink delay"]},{"entry":["q","Queuing delay of the ipacket"]},{"entry":["q","Maximum queuing delay"]},{"entry":["n","Number of packets queued-up at the link buffer when i"]},{"entry":[{},"packet enters the buffer"]},{"entry":["S","Packet size"]},{"entry":["L","Link buffer size (including the one in service)"]},{"entry":["T","Transmission delay of the packet"]},{"entry":["C","Measured link capacity"]},{"entry":["cwnd","Congestion window size of the ipacket"]},{"entry":["rtt","Round-trip time of the ipacket"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Liu and Crovella [6] proposed the max-min method to estimate the link buffer size from the estimated transmission delay and the differences between maximum and minimum round-trip times (RTTs). Claypool et al. [5] further incorporated the max-min method into a measurement tool for use in access networks.","The principle of both max-min [5-6] and loss-pair [6] methods is to use RTT as a mean to measure the link buffer size. Specifically, let P=P+Pbe the total downlink propagation delay, T be the transmission delay for one packet, and U be the uplink delay, which are all constant. Next let qbe the queuing delay experienced by packet i at the bottleneck link, and nbe the number of packets already queued-up at the bottleneck link buffer upon its arrival at the queue. Then RTT for packet i, denoted by rtt, can be computed from\n\nrtt\u2003\u2003(1)\n","In a fixed-bandwidth link, the queuing delay of packet i is simply equal to the total time to de-queue the npackets already in the queue plus the residual transmission time, denoted by rtt, for the packet already in service, i.e.,\n\n\u2003\u2003(2)\n","Given the link buffer size L, we have n\u2266L\u22121. Also the residual transmission time is bounded by \u03b4\u2266T. Therefore the maximum queuing delay, denoted by q, is given by",{"@attributes":{"id":"p-0014","num":"0013"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":["q","max"]},"mo":["=","\u2062"],"mi":{},"mrow":{"mi":"max","mo":"\u2062","mrow":{"mo":["{","}"],"mrow":{"mrow":{"mrow":{"mo":["(",")"],"mrow":{"mi":"L","mo":"-","mn":"1"}},"mo":"\u2062","mi":"T"},"mo":"+","mi":"\u03b4"}}}}}},{"mtd":{"mrow":{"mo":["=","\u2062"],"mi":[{},"LT"]}}}]}},{"mrow":{"mo":["(",")"],"mn":"3"}}]}}}}},"The minimum queuing delay is simply equal to zero when there is no packet inside the queue upon packet arrival. As the propagation and transmission delays are constant the maximum and minimum RTTs can be computed from\n\nrtt\u2003\u2003(4)\n\nrtt\u2003\u2003(5)\n","Substituting (3) and (5) into (4), we have\n\nrtt=rtt\u2003\u2003(6)\n","Similarly, substituting (2) and (5) into (1), yields\n\nrtt=rtt\u2003\u2003(7)\n","Rearranging terms in (6), the link buffer size can be determined from [4],",{"@attributes":{"id":"p-0019","num":"0018"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"L","mo":"=","mfrac":{"mrow":{"msub":[{"mi":["rtt","max"]},{"mi":["rtt","min"]}],"mo":"-"},"mi":"T"}}},{"mrow":{"mo":["(",")"],"mn":"8"}}]}}}}},"With knowledge of measured link capacity (C) and known packet size (S), the estimated transmission delay (T) can be computed from\n\n\u2003\u2003(9)\n\nand the link buffer size is determined accordingly by\n",{"@attributes":{"id":"p-0021","num":"0020"},"maths":{"@attributes":{"id":"MATH-US-00003","num":"00003"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mi":"L","mo":"=","mfrac":{"mrow":{"mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["rtt","max"]},{"mi":["rtt","min"]}],"mo":"-"}},"mo":"\u2062","mi":"C"},"mi":"S"}}},{"mrow":{"mo":["(",")"],"mn":"10"}}]}}}}},"The max-min method [5-6] is designed for active estimation where the sender sends a series of measurement packets through the bottleneck link at a rate higher than the link bandwidth to induce queue overflow. The receiver returns an acknowledgement (ACK) packet to the sender for every packet received. The sender can then measure the minimum RTT rtt, maximum RTT rtt, and link bandwidth C from the ACK packet arrival times. With S known the sender can compute L using (10). The estimation process can also be done by the receiver and the interested readers are referred to the work by Hirabaru [4] for more details.","From (10) it can be seen that the accuracy of the max-min method hinges upon the accuracy in measuring the three parameters, namely rtt, rtt, and C. In particular, if there is other cross traffic sharing the same bottleneck link, the RTT measurements will be modulated by the competing flows.","Liu and Crovella [6] tackled this problem in their improved loss-pair method. First, they only capture the RTTs of the two packets just before and after a loss event. This filters out samples not related to buffer overflow at the bottleneck link. Second, they analyze the distribution of the samples to determine their mathematical mode to further filter out noises due to cross traffic. These two techniques improved the accuracy of the loss-pair method.","Queue Length Estimation","There is no presently known measurement tool designed solely for queue length estimation purposes. Unlike link buffer size, which is a physical network property, queue length can vary from time to time depending on many parameters, including offered traffic load, traffic characteristic, link capacity, and so on. Therefore queue length measurement is meaningful only in the context of the actual data flow generated by the transport and\/or application protocols.","Some TCP variants do implement algorithms to either implicitly or explicitly estimate the queue length at the bottleneck link for congestion control purpose. One well-known example is TCP Vegas [7] which employs an algorithm to estimate the queue length from the congestion window size and the difference between current and minimum round-trip times (RTTs). Similar algorithms have also been adopted in TCP Veno [9] and FAST TCP [8].","These queue-length estimation algorithms are inherently passive in that only the actual data and ACK packet timings are used for estimating the queue length. No extra measurement packets are generated in the process.","During operation, the TCP sender continuously measures the RTT, denoted by rtt, and records the congestion window size, denoted by cwnd, at the time ACK packet i is received. It then keeps track of the minimum rttby\n\nrtt=min{rtt\u2003\u2003(11)\n\nand then computes the estimated queue length, denoted by n\u2032, from the difference between the expected throughput, i.e., cwnd\u00d7rtt, and the actual measured throughput, i.e., cwnd\u00d7rtt, in the last round-trip time [7]:\n",{"@attributes":{"id":"p-0029","num":"0028"},"maths":{"@attributes":{"id":"MATH-US-00004","num":"00004"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msubsup":{"mi":["n","i","\u2032"]},"mo":"=","mfrac":{"mrow":{"msub":{"mi":["cwnd","i"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msub":[{"mi":["rtt","i"]},{"mi":["rtt","min"]}],"mo":"-"}}},"msub":{"mi":["rtt","i"]}}}},{"mrow":{"mo":["(",")"],"mn":"12"}}]}}}}},"One shortcoming of the Vegas method is that it uses the current congestion window size to estimate the queue length in the previous RTT. In case the congestion window size changes significantly from the last RTT, the estimation accuracy will suffer. This is why TCP Vegas only performs queue length estimation during the congestion avoidance phase where the congestion window size changes slowly.","FAST TCP [8] addressed this shortcoming by keeping track of the past congestion windows, and using the one at the time of the original data transmission instant to compute (12). This improves accuracy and also enables FAST TCP to estimate queue length during both slow-start and congestion avoidance phases.","Using a simulation, the inventors implemented max-min and loss-pair algorithms using UDP as the transport protocol and implemented the Vegas algorithm using TCP CUBIC (default congestion control in Linux) as the transport protocol, and conducted simulations using the network setup in .","In order to assist in evaluation, two performance metrics were defined, called absolute and relative link buffer size estimation errors, denoted by Eand Erespectively, to evaluate the algorithms' performance:",{"@attributes":{"id":"p-0034","num":"0033"},"maths":{"@attributes":{"id":"MATH-US-00005","num":"00005"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"msub":{"mi":["E","A"]},"mo":"=","mrow":{"mrow":[{"mi":["estimated","link","buffer","size"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["actual","link","buffer","size"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":"-"}}},{"mrow":{"mo":["(",")"],"mn":"13"}}]},{"mtd":[{"mrow":{"msub":{"mi":["E","R"]},"mo":"=","mrow":{"mfrac":{"msub":{"mi":["E","A"]},"mrow":{"mi":["actual","link","buffer","size"],"mo":["\u2062","\u2062","\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}},"mo":["\u00d7","\u2062"],"mn":"100","mi":"%"}}},{"mrow":{"mo":["(",")"],"mn":"14"}}]}]}}}},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3"},"Two queue-length estimation algorithms were implemented, namely the Vegas algorithm in TCP Vegas [7] and the FAST algorithm in FAST TCP [8], both using passive estimation. In addition, we also implemented the Vegas algorithm over TCP CUBIC [14]. In this case the TCP flow operates according to TCP CUBIC but the RTTs and congestion window size measurements are then fed into the Vegas algorithm to compute the estimated queue length. This special combination enables us to evaluate the performance of the Vegas estimation algorithm over one of the most widely deployed TCP variant in the Internet.","A relative queue length estimation error Qand absolute queue length estimation error Qwere defined as the performance metric:",{"@attributes":{"id":"p-0038","num":"0037"},"maths":{"@attributes":{"id":"MATH-US-00006","num":"00006"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":[{"mtd":[{"mrow":{"msub":{"mi":["Q","A"]},"mo":"=","mrow":{"mrow":[{"mi":["estimated","queue","length"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["actual","queue","length"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":"-"}}},{"mrow":{"mo":["(",")"],"mn":"15"}}]},{"mtd":[{"mrow":{"msub":{"mi":["Q","R"]},"mo":"=","mrow":{"mfrac":{"mrow":[{"mrow":[{"mi":["estimated","queue","length"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]},{"mi":["actual","queue","length"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}],"mo":"-"},{"mi":["average","queue","length"],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}},{"mspace":{"@attributes":{"width":"0.8em","height":"0.8ex"}}}]}]},"mo":["\u00d7","\u2062"],"mn":"100","mi":"%"}}},{"mrow":{"mo":["(",")"],"mn":"16"}}]}]}}}},{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 4"},"Second, the results suggest that the Vegas algorithm when applied to a TCP Vegas flow in fact underperformed the same when applied to a TCP CUBIC flow. This is due to differences between the TCP Vegas and TCP CUBIC's congestion control algorithms. Specifically, TCP Vegas is designed to maintain a small number of packets (around 6 in our simulations) in the bottleneck link buffer. By contrast, TCP CUBIC is far more aggressive and in simulations TCP CUBIC maintained an average queue length at around 90% of link buffer size. Thus the larger denominator in (14) results in lower estimation errors for TCP CUBIC.","If the estimation error is compared in absolute number of packets as shown in  it can be seen that TCP CUBIC did exhibit higher absolute errors when compared to TCP Vegas and FAST TCP, especially for large link buffer sizes. This is because in TCP CUBIC, the congestion window grows faster for larger window sizes. Large link buffer size allows the congestion window to grow larger before buffer overflow occurs, thus causing higher estimation errors in computing (12) where the current congestion window size is used in place of the previous RTT's window size. FAST TCP does not suffer from this problem as it records the sequence of past window sizes and uses the correct one in computing (12), hence maintaining consistent estimation accuracy for a wide range of link buffer sizes.","As herein explained these tools can be used to evaluate the efficacy of the new methods according to the invention.","Citations used herein are as follows:\n\n","According to the invention, a method is provided using a sum-of-delays algorithm in a digital mobile communication bandwidth-varying network to estimate link buffer size and queue length in an underlying network connection. In particular embodiments, the sum-of-delays algorithm is implemented using both active estimation and passive estimation. Mechanisms associated with the process compensate for link bandwidth variations. The invention can accurately estimate link buffer size under varying bandwidth conditions such as wireless networks and outperform conventional techniques under both fixed and varying bandwidth conditions by multiple orders of magnitude.","In a particular embodiment, passive estimation is employed to implement the process by simply measuring the in-band data packet timings to perform estimation, thus eliminating the need for transmission of extra measurement packets. This method enables the integration of the link buffer size estimation algorithm into existing transport protocols such as TCP to optimize congestion controls. As part of the invention, a new congestion control method called TCP Queue-length-Adaptive (TCP-QA) is developed to employ the sum-of-delays algorithm in the TCP sender computer to control the data flow in a TCP connection. Compared to existing TCP variants, TCP-QA can achieve significantly better network bandwidth utilization in bandwidth-varying networks.","An accurate estimation of link buffer size has a number of significant advantages. First, transport protocols such as TCP are originally designed for wired networks of which the link buffer size is often small (e.g., in the order of tens of kilobytes per port). This is no longer the case in mobile data networks where the buffer size is often in hundreds of kilobytes and as such, TCP often perform sub-optimally in mobile data networks. Therefore knowledge of the link buffer size will enable the development of a new generation of TCP variants optimized for mobile data networks.","Second, many application protocols employ feedback from receivers to regulate the traffic flow. The existence of a large link buffer may introduce substantial delay to the feedback and potentially cause stability problems in closed-loop control protocols. Knowledge of the link buffer size will enable these protocols to compensate for the extra delays and ensure stable operation over mobile data networks.","Third, the ability to estimate queue length at the bottleneck link opens up a new way for mobile operators to monitor the performance of their subscribers and cell sites. Due to a mobile network's inherent bandwidth fluctuations, queue length is potentially more accurate in reflecting the utilization and level of congestion experienced by a mobile subscriber as compared to link\/transport layer throughput measurements.","The invention will be better understood by reference to the following detailed description in connection with the accompanying drawings.","To incorporate the effect of bandwidth variations in estimating the link buffer size and queue length, it is necessary to identify a means whereby the effect can be measured indirectly and subsequently incorporated into the estimation model.",{"@attributes":{"id":"p-0084","num":"0106"},"figref":"FIG. 9","sub":["i","i","i ","i-1 ","i","i","i-1"],"br":[{},{}],"in-line-formulae":[{},{}],"i":["t","=r","\u2212r"]},"Consider the scenario when packet i arrives at the bottleneck link to find that there are npackets already queuing, plus packet (i\u2212n\u22121) currently being transmitted. Then the queuing delay of packet i, denoted by q, is equal to the total time to de-queue all npackets, i.e., the summation of transmission delays of packet (i\u22121) to (i\u2212n), plus the residual time to transmit packet (i\u2212n\u22121), denoted by \u03b4:\n\n+\u03b4\u2003\u2003(18)\n","The residual transmission time \u03b4is bounded from above by the packet's transmission delay and bounded from below by zero, i.e.,\n\n0\u2266\u03b4\u2003\u2003(19)\n","Substituting the bounds of (19) into (18), we can then obtain the corresponding bounds for q:",{"@attributes":{"id":"p-0088","num":"0110"},"maths":{"@attributes":{"id":"MATH-US-00007","num":"00007"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"mrow":[{"mrow":[{"msub":[{"mi":"t","mrow":{"mi":"i","mo":"-","mn":"1"}},{"mi":"t","mrow":{"mi":"i","mo":"-","mn":"2"}},{"mi":"t","mrow":{"mi":"i","mo":"-","msub":{"mi":["n","i"]}}}],"mo":["+","+","+"],"mi":"\u2026"},{"msub":[{"mi":"t","mrow":{"mi":"i","mo":"-","mn":"1"}},{"mi":"t","mrow":{"mi":"i","mo":"-","mn":"2"}},{"mi":"t","mrow":{"mi":"i","mo":"-","msub":{"mi":["n","i"]}}},{"mi":"t","mrow":{"mi":"i","mo":["-","-"],"msub":{"mi":["n","i"]},"mn":"1"}}],"mo":["+","+","+","+"],"mi":"\u2026"}],"mo":["\u2264","\u2264"],"msub":{"mi":["q","i"]}},{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"k","mo":"=","mrow":{"mi":"i","mo":"-","msub":{"mi":["n","i"]}}},{"mi":"i","mo":"-","mn":"1"}]},"mo":"\u2062","msub":{"mi":["t","k"]}},{"munderover":{"mo":"\u2211","mrow":[{"mi":"k","mo":"=","mrow":{"mi":"i","mo":["-","-"],"msub":{"mi":["n","i"]},"mn":"1"}},{"mi":"i","mo":"-","mn":"1"}]},"mo":"\u2062","msub":{"mi":["t","k"]}}],"mo":["\u2264","\u2264"],"msub":{"mi":["q","i"]}}],"mo":["\u2062","\u2062","\u2062","\u2062"],"mstyle":[{"mtext":{}},{"mtext":{}}],"mi":"or"}},{"mrow":{"mo":["(",")"],"mn":"20"}}]}}}}},"Now the transmission delays {t} can be computed from the measured ACK packet inter-arrival times using (17). To determine n, which is the queue length at the time packet i arrives at the bottleneck link, one must first find q.","Obviously the queuing time qcannot be measured directly due to bandwidth variations. However it is possible to obtain a lower bound for q.","Specifically, consider the RTT for packet i as measured by the sender:\n\nrtt\u2003\u2003(21)\n\nand the minimum RTT measured will be equal to\n\nrtt=min{\u2003\u2003(22)\n","Subtracting (22) from (21) yields\n\nrtt\u2212rtt\u2212min{\u2235q\u22660,>0\u2003\u2003(23)\n","Rearranging terms then there is a lower bound for q:\n\n>rtt\u2212rtt\u2003\u2003(24)\n","This lower bound must satisfy the upper bound in (20), hence one may increase the value of nin (20) until its R.H.S. becomes larger than the lower bound in (24):",{"@attributes":{"id":"p-0095","num":"0117"},"maths":{"@attributes":{"id":"MATH-US-00008","num":"00008"},"math":{"@attributes":{"overflow":"scroll"},"mtable":{"mtr":{"mtd":[{"mrow":{"msubsup":{"mi":["n","i","\u2032"]},"mo":"=","mrow":{"mi":"min","mo":"\u2062","mrow":{"mo":"{","mrow":{"msub":{"mi":["n","i"]},"mo":"\u2062","mrow":{"mo":["\uf603","}"],"mrow":{"mrow":[{"mrow":[{"munderover":{"mo":"\u2211","mrow":[{"mi":"k","mo":"=","mrow":{"mi":"i","mo":["-","-"],"msub":{"mi":["n","i"]},"mn":"1"}},{"mi":"i","mo":"-","mn":"1"}]},"mo":"\u2062","msub":{"mi":["t","k"]}},{"mo":["(",")"],"mrow":{"msub":[{"mi":["rtt","i"]},{"mi":["rtt","min"]},{"mi":["t","i"]}],"mo":["-","-"]}}],"mo":">"},{"mrow":{"mo":"\u2200","msub":{"mi":["n","i"]}},"mo":"=","mn":"0"}],"mo":[",",",",","],"mn":"1","mi":"\u2026"}}}}}}},{"mrow":{"mo":["(",")"],"mn":"25"}}]}}}}},"The smallest nthat satisfies both bounds then become the estimated queue length n\u2032. The link buffer size can then be computed from the maximum of all queue length estimates:\n\n\u2032=max{1\u2003\u2003(26)\n","It is worth noting that the above estimation method is an approximation and thus could overestimate or underestimate the link buffer size. Estimation accuracy is evaluated herein after.","Application of Invention to Transport Protocols","The sum-of-delays method needs to be implemented and integrated into a transport or application protocol to take advantage of the link buffer size and queue length information in network traffic controls such as congestion control or traffic routing. This section explores two general approaches to achieving that, namely active estimation and passive estimation.","In both cases two measured parameters are required: the packets' transmission delay and the round-trip time. The former can be computed from the ACK packets inter-arrival times while the latter can be computed from the difference between a packet's transmission time and its ACK reception time. A simplified pseudo-code of sum-of-delay algorithm is summarized in , and an apparatus that implements the method is depicted in . Referring to , the components are implemented in the sending host computer to respond to ACK packets from the network interface. Operating under control of an internal clock, an ACK reception time measurement module measures rand communicates it to a transmission time estimation module to perform equation 17 the results of which are provided as one input to a queue length estimation module. Using packet transmission time records, a round-trip time measurement module performs equation 21 and provides its results to a queuing time estimation module that performs according to equations 22-24, providing its output as a second input to the queue length estimation module which processes its inputs according to equation 25. The result is provided to a link buffer size estimation module executing equation 26, with results being the estimated queue length records in accordance with the invention.","Active Estimation","In active estimation, the system, as shown in , can generate and transmit explicit measurement packets at a controlled transmission rate to facilitate link buffer size estimation. Specifically, as discussed above the accuracy of the transmission delay computation depends on the assumption that the bottleneck link does not become idle during the measurement period or the link buffer size may be underestimated.","As active estimation allows the sender to control the transmission rate directly simply by generating measurement packets at the desired data-rate we can satisfy the assumption by either sending measurement packets at a sufficiently high data-rate or progressively increasing the sending rate until queue overflow occurs at the bottleneck link. Note that this will require the use of UDP as the underlying transport as TCP's built-in flow and congestion control modules will interfere with the sending rate control. At the receiver side it will need to generate and send back an ACK packet for every measurement packet received so that the sender can compute the two measured parameters.","In practice, active estimation will be more suitable for use in network measurement tools to measure link buffer size as the choice of transport protocol and the generation of explicit measurement traffics can be easily supported.","Passive Estimation","In passive estimation the system is designed to not generate any explicit measurement packets but instead it is designed to rely on measurements of the delivery of normal data packets. The estimation process could be incorporated into Linux kernel implementation, as shown in . The only modification is to compute transmission delay (Step A), save it in the kernel (Step B) and compute the estimated queue length using sum-of-delay module once a valid ACK is received (Step C). This approach is most suitable for integration with existing applications such as video streaming where modification to the client software is not always practical or when the transport protocol is limited to TCP.","The primary challenge in passive estimation is the lack of control on the data sending rate. In the case of TCP as an example, its built-in flow and congestion control algorithms limit the sending rate subject to client and network conditions. In case of packet loss, for example, TCP's sending rate will drop significantly, thereby affecting the measurement accuracy of the packet transmission delays {t} in (17).","There are two ways to tackle this problem. First, as the sender can identify congestion events via duplicate ACKs in TCP, it can filter out the measurement samples during TCP's congestion recovery phase. Second, the TCP's congestion control algorithm could be modified to accommodate explicit control of the sending rate to improve measurement accuracy.","Implementations of Sum of Delays Systems and Methods","The Sum of Delays (SoD) technique according to the invention can be implemented in systems in a variety of ways, including but not limited to part of a transport protocol (e.g., TCP) in an operating system, part of an Application Programming Interface (API) in an operating system, part of an Internet application in either a client or a server or both, and part of a passive network monitoring device that monitors network traffic via a tapping device.","Referring to  as illustrative, the inventive SoD technique  may be incorporated in an operating system as part of the kernel, such as a Linux kernel, between the Internet Protocol (IP)  that communicates through the Network Interface (NI)  and TCP-based applications  through a TCP variant .) Alternatively, it may be implemented as a part of the operating system to communicate with other applications  through an SoD Data API . The specific steps implementing both the operating system techniques involve time-tamping of ACK packet arrival time (Step AA) and then performing calculations in accordance with Equations 21, 21 and 24 (Steps AB, AC) and with Equations 17 and 20 (Steps BB, BC) to provide the input for estimating queue length and link buffer size according to Equations 25 and 26 (Step AD). The results are applied to the target TCP-based or to non-TCP-based applications.","As a further alternative, referring to , the SoD technique may be implemented as an element of an application program communicating via an application-specific protocol  that runs atop The Internet Protocol (IP) or UDP over IP () which in turn runs on the Network Interface . The steps of the application-based technique are substantially the same as with the operating system implementation, as well as part of a passive network monitoring device. The outputs are estimates of a bottleneck's link buffer size and on-going queue length.","Referring to , SoD implementation is shown as part of a passive network monitoring device . An Application Layer Performance Monitor  performs the techniques of either  or , receiving data through a network tap  and storing the outputs in a trace data dataset  while proving real-time performance insights based on the outputs to a network operating center . The network tap  is disposed between routers ,  that route packets between the Internet  and a wireless network  through a transceiver interface . In this manner a mobile operator infrastructure network  bridges between the Internet  with various servers ,  and mobile phones  communicating with a wireless access point .","Uses of Sum-of-Delays Algorithm","The Sum-of-Delays algorithm according to the invention has been shown to have accurate performance in queue length and link buffer size estimation in the network. Apart from link buffer size estimation, the proposed algorithm could also be used to continuously estimate the queue length of a TCP flow to estimate its resources consumption in the network buffer. In this way, we could evaluate and analyze the performance of different TCP variants under different network environments. These information are useful in improving the performance of TCP variants under different scenario, for example, we could set a target queue length occupancy high enough to improve network utilization, especially in bandwidth-varying network links, but not excessively high such that link buffer overflow will occur. This enables the TCP sender to better control the transmission rates to increase bandwidth utilization in bandwidth-varying networks, where traditional TCP congestion controls will be either too aggressive (which causes link buffer overflow) or too conservative (which results in poor bandwidth utilization).","A novel transport protocol called TCP Queue-length-Adaptive (TCP-QA) has been implemented that demonstrates one way to incorporate the sum-of-delay methods to continuously estimate queue length for the purpose of transmission rate control and congestion control.","TCP Queue-Length Adaptive (TCP-QA)","TCP was developed many decades ago and have since evolved over the years. Nonetheless its design is still based on a fixed-network model where link bandwidth is relatively constant, and link buffer sizes are relatively small. These assumptions, however, are no longer valid in mobile and wireless networks where link bandwidth variation is the norm rather than the exception. Moreover, because of the much higher bit-error rates in wireless networks most of them implement error control in the link layer, and as a result, they need to maintain a relatively large link buffer in order to enable link-layer error control. Finally, even link-layer error control may not be able to recover all transmission errors and thus non-congestion-induced packet losses are common in wireless networks.","All these factors negatively impact the performance of conventional TCP in wireless networks. These and other challenges are addressed by the proposed TCP-QA protocol described below. It is worth noting that TCP-QA only requires modification to the TCP sender. It is compatible with the conventional TCP receivers in existence.","TCP-QA comprises three phases: burst-start phase, slow-decrement phase, burst-init phase. The first two phases take place inside the original congestion avoidance phase and slow-start phase of TCP. The third phase would only operate at the start of the TCP variant. The principle of TCP-QA is to adjust the sending rate according to the queue length estimated by a queue-length estimation algorithm such as the sum-of-delays algorithm, with a configurable target queue length (denoted by target_qs) to control the number of packets to be queued up at the network buffer. This target queue length is tunable and is to be adjusted according to the underlying network property. The value of the target queue length should be smaller than the link buffer size of the network to prevent congestion. The physical impact of this parameter is to maintain sufficient number packets in the bottleneck link's buffer such that when bandwidth varies (e.g., upwards), there will be sufficient packets available in the buffer to utilize the available bandwidth, thus preventing the bottleneck link from idling (which wastes bandwidth). The pseudo-code for one particular embodiment of TCP-QA is listed below, with TCP_QA_CA( ) being the congestion control module which controls the transmission rate; TCP_QA_SSTH( ) being the module for reacting to packet loss events; TCP_QA_INIT( ) being the burst-init phase which executes once at the beginning of the TCP flow. The variable Queue_length represents the current queue length at the bottleneck link as estimated using a queue-length estimation algorithm such as the sum-of-delays algorithm. A flow chart of the TCP-QA procedures is summarized in . These pseudo-codes and flow chart serve to illustrate one possible application of queue-length information to congestion control in transport protocols such as TCP. The pseudo-code for TCP_QA_CA( ) sets forth specific steps for the congestion control method, including the initialization phase (TCP_QA_INIT( )), the congestion avoidance phase (TCP_QA_CA( )), and the updating of the slow-start threshold (TCP_QA_SSTH( )). This has been implemented in Linux and tested in real networks.",{"@attributes":{"id":"p-0115","num":"0137"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Pseudo-code of TCP-QA module."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["TCP_QA_CA()","TCP_QA_SSTH()"]},{"entry":["{","{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (Queue_length < target_qs)",{},"if(packet_loss_event)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"\/\/burst start phrase",{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},"cwnd=cwnd+1",{},{},"if (Queue_length > target_qs)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else",{},{},{},"cwnd = cwnd \/ 2"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{",{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"\/\/slow decrement phrase","}"]},{"entry":{}},{"entry":[{},{},{"maths":{"@attributes":{"id":"MATH-US-00009","num":"00009"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mi":"cwnd","mo":"=","mrow":{"mi":"cwnd","mo":"-","mfrac":{"mn":"1","mi":"cwnd"}}}}}},"TCP_QA_INIT()"]},{"entry":{}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}","{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["}",{},"\/\/ burst init phrase"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},{},{},"if (burst_start_enabled)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"6"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},{},{},{},{},"cwnd = min(awnd, 64)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"7pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},{},"}"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Burst-init phase (TCP_QA_INIT) in TCP-QA allows TCP connection to grow at a higher sending rate but not overflowing the receiver buffer size. During burst-start phase as long as the estimated queue length is lower than the target threshold (i.e., target_qs), it would undergo burst-start phase to aggressively increase its sending rate until the queue length exceeds the target value (c.f. the \u2018if\u2019 part of TCP_QA_CA). After that, it would undergo slow-decrement phase to gradually decrease its sending rate until the queue length reach the target value (c.f. the \u2018else\u2019 part of TCP_QA_CA) and go to burst-start phase again. When loss events occur, it would determine the sending rate depending on the queue length information to prevent unnecessary sending rate reduction because of random loss (c.f. TCP_QA_SSTH).","TCP-QA can be implemented as a pluggable module inside a modified kernel in . In this case it is compatible with the existing congestion control module interface inside Linux kernel.","Performance Evaluation","As part of the invention an extensive simulation was undertaken as mentioned herein above and a performance evaluation was undertaken with results reported in peer-reviewed journals. For the sake of completeness, the results of this evaluation are included herein.","The estimation accuracy of SoD has been compared with existing algorithms using a simulator implemented using NS2 [16]. It is worth noting that while NS2 already has built-in TCP implementations, their implementations do deviate from the actual TCP implementations used in the Internet today in important ways. Therefore the simulator was implemented based on actual TCP implementations in current Linux kernels and was also implemented with widely-deployed optional TCP features such as TCP SACK [17] to establish a more realistic platform for the simulations.",{"@attributes":{"id":"p-0120","num":"0142"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE II"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Parameters","Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["P","10 ms","Propagation delay from sender to"]},{"entry":[{},{},"bottleneck link"]},{"entry":["P","70 ms","Propagation delay from bottleneck"]},{"entry":[{},{},"link to receiver"]},{"entry":["U","80 ms","Propagation delay from receiver to"]},{"entry":[{},{},"sender"]},{"entry":["L","100 to 1000","Bottleneck link buffer size"]},{"entry":["C","0.8-7.2 Mbps","For fixed bandwidth case"]},{"entry":["T","100 s\u2003\u2009","Simulation Duration"]},{"entry":["# of runs","10","Number of simulation runs averaged"]},{"entry":[{},{},"per data point"]},{"entry":["Loss rate","0%","Packet loss rate"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The simulated network topology is as depicted in , and Table II summarizes the simulation parameters. For passive estimation, TCP was employed as the transport and the sender simply sent data as fast as TCP allowed. The TCP CUBIC [14] kernel module from Linux 2.6 was incorporated into the simulator as it is one of the most widely used TCP variant in use in the Internet. Additionally, TCP SACK [17] was implemented in the simulator to more accurately model real TCP behavior. For comparison purposes SoD over TCP Vegas [7] was implemented by incorporating its Linux kernel model into NS2.","Finally, as the open source Linux kernel does not currently implement FAST TCP, the FAST TCP NS2 module developed by the CUBIN Lab [18] was employed in these simulations.","Link Buffer Size Estimation in Fixed Bandwidth Networks","First consider the baseline case of estimating link buffer size in a network with fixed bottleneck link bandwidth using active estimation. Table III and  compare the estimation error of max-min, loss-pair, and sum-of-delays algorithms. Not surprisingly both max-min and loss-pair performed well in this setup, with estimation errors below 2% in all cases. The inventive sum-of-delays method achieved very accurate estimation with zero error (to two decimal places). Moreover, its accuracy is consistent across all link buffer sizes, as opposed to max-min\/loss-pair where the estimation error increases with smaller link buffer sizes.",{"@attributes":{"id":"p-0124","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE III"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Max-Min (%)","Loss-Pair (%)","Sum-of-Delays (%)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["L","E","stdev","E","stdev","E","stdev"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","\u22121.00","0.00","\u22121.26","0.15","0.00","0.00"]},{"entry":["200","\u22120.50","0.01","\u22120.63","0.08","0.00","0.00"]},{"entry":["300","\u22120.33","0.00","\u22120.41","0.04","0.00","0.00"]},{"entry":["400","\u22120.25","0.00","\u22120.30","0.04","0.00","0.00"]},{"entry":["500","\u22120.20","0.00","\u22120.24","0.03","0.00","0.00"]},{"entry":["600","\u22120.16","0.00","\u22120.21","0.03","0.00","0.00"]},{"entry":["700","\u22120.14","0.00","\u22120.17","0.02","0.00","0.00"]},{"entry":["800","\u22120.12","0.00","\u22120.15","0.02","0.00","0.00"]},{"entry":["900","\u22120.11","0.00","\u22120.13","0.02","0.00","0.00"]},{"entry":["1000","\u22120.10","0.00","\u22120.12","0.02","0.00","0.00"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"Next passive estimation was investigated where no explicit measurement packets are generated. The estimation was computed solely from the timings of normal data packets which are controlled and scheduled according to TCP CUBIC's flow and congestion control algorithms. While this is not the original intended applications for max-min\/loss pair, the results in Table IV and  show that their performances were not significantly worse than their fixed-bandwidth counterparts. The proposed SoD algorithm still outperformed max-min\/loss-pair for most of the link buffer size ranges (e.g., from 300 to 1000).",{"@attributes":{"id":"p-0126","num":"0148"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE IV"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Max-Min (%)","Loss-Pair (%)","Sum-of-Delays (%)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["L","E","stdev","E","stdev","E","stdev"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","0.72","1.03","\u22121.30","0.35","0.33","0.50"]},{"entry":["200","\u22120.07","0.47","\u22121.00","0.27","0.56","0.53"]},{"entry":["300","\u22120.32","0.35","\u22120.94","0.25","0.22","0.33"]},{"entry":["400","\u22120.41","0.22","\u22120.89","0.24","0.14","0.18"]},{"entry":["500","\u22120.47","0.15","\u22120.86","0.22","0.09","0.15"]},{"entry":["600","\u22120.51","0.16","\u22120.82","0.22","0.15","0.15"]},{"entry":["700","\u22120.51","0.10","\u22120.77","0.20","0.08","0.14"]},{"entry":["800","\u22120.48","0.05","\u22120.69","0.16","0.07","0.17"]},{"entry":["900","\u22120.58","0.15","\u22120.79","0.23","0.07","0.11"]},{"entry":["1000","\u22120.62","0.18","\u22120.75","0.22","0.03","0.05"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Bandwidth-varying network simulation runs comprised ten sets of actual bandwidth trace data obtained from a production 3G\/HSPA network to modulate the bandwidth of the bottleneck link in . The trace data were captured at a mobile computer connected to a 3G\/HSPA network using a USB 3G\/HSPA modem. The client computer remained stationary during the trace capture process. Thus it did not incorporate the effect of mobility-induced bandwidth fluctuations.","Table V and Table VI compare the mean and standard deviation of the estimation errors of the three estimation algorithms under active and passive estimations respectively. The results are also presented visually in  and , with the standard deviation indicated by the error bars.",{"@attributes":{"id":"p-0129","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE V"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Max-Min (%)","Loss-Pair (%)","Sum-of-Delays (%)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["L","E","stdev","E","stdev","E","stdev"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","133.70","63.03","\u22128.39","8.29","0.00","0.00"]},{"entry":["200","105.54","64.66","\u22128.38","7.43","0.00","0.00"]},{"entry":["300","90.94","59.46","\u22127.66","6.47","0.00","0.00"]},{"entry":["400","79.28","53.64","\u22129.13","8.02","0.00","0.00"]},{"entry":["500","71.33","47.68","\u221211.21","9.10","0.00","0.00"]},{"entry":["600","64.15","42.81","\u22127.25","5.17","0.00","0.00"]},{"entry":["700","57.60","38.24","\u22125.58","4.93","0.00","0.00"]},{"entry":["800","52.47","33.56","\u22128.59","8.74","0.00","0.00"]},{"entry":["900","48.12","29.77","\u22127.31","7.54","0.00","0.00"]},{"entry":["1000","44.20","26.68","\u22127.51","7.51","0.00","0.00"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0130","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE VI"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Max-Min (%)","Loss-Pair (%)","Sum-of-Delays (%)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["L","E","stdev","E","stdev","E","stdev"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","136.93","90.43","\u221211.96","12.57","0.80","0.42"]},{"entry":["200","115.74","82.12","\u221215.96","14.95","0.35","0.24"]},{"entry":["300","110.24","80.55","\u221220.01","12.72","0.37","0.33"]},{"entry":["400","94.25","71.36","\u221220.6","12.38","0.23","0.28"]},{"entry":["500","83.86","67.03","\u221214.11","11.62","0.16","0.18"]},{"entry":["600","78.31","63.09","\u221219.57","11.46","0.12","0.11"]},{"entry":["700","73.34","62.63","\u221219.26","13.25","0.07","0.14"]},{"entry":["800","72.75","57.79","\u221216.76","16.74","0.11","0.11"]},{"entry":["900","71.10","51.99","\u221212.62","8.79","0.09","0.09"]},{"entry":["1000","66.66","49.00","\u22125.17","8.44","0.09","0.09"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"First, compared to the fixed-bandwidth case the performance of max-min degraded significantly under the varying-bandwidth case. This is especially significant at smaller link buffer sizes (e.g., L=100, 200) where the estimation errors exceeded 100%. The reason for the poor performance is due to bandwidth variation which resulted in significant variations in the transmission delays. As the max-min method is based on the difference between maximum and minimum RTTs, the transmission delay variations significantly distorted the link buffer size estimates.","Second, the loss-pair algorithm performed substantially better than max-min under active estimation. This is because loss-pair does not base its estimation on the worst-case measurement, but determines the mathematical mode of the measured samples to filter out noises [6].","Comparing the passive estimation results in Table VI to the active estimation results in Table V, it will be observed that the estimation errors increase further for both max-min and loss-pair algorithms. By contrast, SoD according to the invention achieved a low level of estimation errors, smaller than 0.8 in all cases, which are two orders of magnitudes lower than max-min and loss-pair.","Queue Length Estimation in Fixed Bandwidth Networks","Evaluating queue length estimation algorithms over TCP flows, i.e., the data flow is regulated by the underlying TCP's flow and congestion control modules. Between three queue-length estimation algorithms, namely Vegas, FAST, and the present SoD, and three TCP variants, namely TCP CUBIC, TCP Vegas, and FAST TCP, there were six investigated combinations:\n\n",{"@attributes":{"id":"p-0135","num":"0163"},"figref":"FIGS. 14 and 15"},"By contrast, the inventive SoD method worked well over all TCP variants. Table VII shows that the estimation errors are no more than 0.1% for all three TCP variants over all link buffer sizes, demonstrating SoD's consistent performance despite substantial variations in the underlying transport protocol.",{"@attributes":{"id":"p-0137","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE VII"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Type of TCP"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TCP CUBIC","TCP Vegas","FAST TCP"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Vegas","SOD","Vegas","SOD","FAST","SOD"]},{"entry":["L","(%)","(%)","(%)","(%)","(%)","(%)"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","2.19","0.00","15.65","0.00","48.03","0.20"]},{"entry":["200","1.87","0.00","14.94","0.00","0.48","0.00"]},{"entry":["300","1.91","0.00","13.45","0.00","0.48","0.00"]},{"entry":["400","2.01","0.00","12.72","0.00","0.48","0.00"]},{"entry":["500","2.18","0.00","12.72","0.00","0.48","0.00"]},{"entry":["600","2.30","0.00","12.72","0.00","0.48","0.00"]},{"entry":["700","2.43","0.00","12.72","0.00","0.48","0.00"]},{"entry":["800","2.54","0.00","12.72","0.00","0.48","0.00"]},{"entry":["900","2.67","0.00","12.72","0.00","0.48","0.00"]},{"entry":["1000","2.75","0.00","12.72","0.00","0.48","0.00"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"Next was investigated the algorithms' performance in mobile data networks using bandwidth trace data captured from production 3G\/HSPA networks.",{"@attributes":{"id":"p-0139","num":"0167"},"figref":["FIG. 16","FIG. 17"]},{"@attributes":{"id":"p-0140","num":"0168"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE VIII"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"Type of TCP"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TCP CUBIC","TCP Vegas","FAST TCP"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Vegas","SOD","Vegas","SOD","FAST","SOD"]},{"entry":["L","(%)","(%)","(%)","(%)","(%)","(%)"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"7"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"6","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"7","colwidth":"28pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["100","6.69","0.08","17.16","0.74","70.32","1.49"]},{"entry":["200","4.21","0.03","17.12","0.72","14.40","0.20"]},{"entry":["300","3.62","0.02","17.27","0.72","14.39","0.20"]},{"entry":["400","3.51","0.02","17.63","0.71","14.39","0.20"]},{"entry":["500","3.49","0.01","15.80","0.60","14.39","0.20"]},{"entry":["600","3.62","0.01","15.80","0.60","14.39","0.20"]},{"entry":["700","3.69","0.01","15.80","0.60","14.39","0.20"]},{"entry":["800","3.80","0.01","15.80","0.60","14.39","0.20"]},{"entry":["900","3.88","0.01","15.80","0.60","14.39","0.20"]},{"entry":["1000","3.95","0.01","15.80","0.60","14.39","0.20"]},{"entry":{"@attributes":{"namest":"1","nameend":"7","align":"center","rowsep":"1"}}}]}}]}}},"In comparison, all SoD cases achieved consistently low level of estimation errors, under 1% in all cases, thus outperforming existing algorithms by multiple orders of magnitude. This clearly demonstrates SoD's superiority in estimating queue length in variable bandwidth networks.","Convergence","It takes time for the link buffer size estimation algorithms to collect measurement data to improve estimation accuracy. Therefore the convergent rates for max-min, loss-pair, and SoD were investigated in both fixed and variable bandwidth networks, using active and passive estimation.","First consider the baseline scenario of active estimation in a fixed-bandwidth network. to plot the relative estimation error for bottleneck link bandwidths of 0.8 Mbps, 4.8 Mbps, and 7.2 Mbps respectively. There are three observations. First, the 0.8 Mbps case took considerable longer time to arrive at an accurate estimation compared to the two higher bandwidth cases (20 seconds vs. 4 seconds). This is expected as the rate at which measurement data are collected is proportional to the link bandwidth. Second, all three algorithms remained accurate once they converged. Third, max-min and SoD converged faster than loss-pair, due to the latter's design to determine the estimation from the mathematical mode of the collected samples.","Next consider the case of passive estimation (over TCP CUBIC) in a fixed-bandwidth network. to plot the relative estimation error for bottleneck link bandwidths of 0.8 Mbps, 4.8 Mbps, and 7.2 Mbps respectively. Compared to the active estimation case, the SoD algorithm in this case converged faster than the max-min algorithm, especially in the two higher bandwidth cases (c.f. and ). It is also worth noting that the convergence time in general is similar to the active estimation case. This may be due to the TCP variant employed, i.e., CUBIC, where its congestion control algorithm tends to build up long queue of packets in the bottleneck link.","Next considering the varying bandwidth environment, the results are more interesting.  compare the algorithms in active and passive estimation respectively. One notable observation is that the max-min algorithm did not converge at all. Beginning with an underestimated link buffer size, the estimated link buffer size increased continuously to become overestimation after about 5 seconds. The reason being that max-min assumes constant packet transmission time which is not true in a bandwidth-varying network. The bandwidth variations modulates the transmission time, thus introduces errors into the estimated result. As max-min's estimation is based on the difference between maximum and minimum measurement samples the difference will clearly increase with more samples collected. This again shows that the max-min algorithm, not being designed for bandwidth-varying networks, is not suitable for use in mobile data networks.","By contrast, the inventive SoD technique performed consistently and was able to arrive at an accurate estimation within 4-5 seconds, even in the extreme case of passive estimation over bandwidth-varying network.","Limitations in Passive Estimation","The Vegas queue-length estimation algorithm is limited to TCP's congestion-avoidance phase, and FAST TCP's algorithm is limited to TCP's slow-start and congestion-avoidance phases. By contrast, the inventive SoD technique can be applied to all three phases of TCP as it does not rely on TCP's congestion window in its estimation.","To further investigate their performances in different TCP phases we table the estimation errors separately for the three TCP phases in Table IX and X for fixed (C=7.2 Mbps, L=700 packets) and variable (averaged over 10 sets of bandwidth traces) bandwidth cases respectively. Not only did SoD work for all three phases, it consistently outperformed Vegas and FAST algorithms by multiple orders of magnitude. SoD's consistent accuracy in the loss recovery phase will be a particularly desirable property in mobile data networks, where non-congestion-induced packet losses are common.",{"@attributes":{"id":"p-0150","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE IX"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"TCP Phases"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Congestion",{}]},{"entry":["Algorithms","Slow-Start","Avoidance","Loss Recovery"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Vegas (TCP CUBIC)","N\/A","2.43","N\/A"]},{"entry":["Vegas (TCP Vegas)","N\/A","12.72","N\/A"]},{"entry":["FAST (FAST TCP)","20.62","0.48","N\/A"]},{"entry":["SoD (TCP CUBIC)","0.03","0.01","0.01"]},{"entry":["SoD (TCP Vegas)","0.87","0.01","N\/A (no loss)"]},{"entry":["SoD (Fast TCP)","0.02","0.01","N\/A (no loss)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0151","num":"0179"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"center"}}],"thead":{"row":{"entry":[{},"TABLE X"]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]},{"entry":[{},"TCP Phases"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},{},"Congestion",{}]},{"entry":["Algorithms","Slow-Start","Avoidance","Loss Recovery"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Vegas (TCP CUBIC)","N\/A","3.69","N\/A"]},{"entry":["Vegas (TCP Vegas)","N\/A","15.80","N\/A"]},{"entry":["FAST (FAST TCP)","19.02","6.69","N\/A"]},{"entry":["SoD (TCP CUBIC)","0.01","0.01","0.02"]},{"entry":["SoD (TCP Vegas)","0.55","0.60","N\/A (no loss)"]},{"entry":["SoD (Fast TCP)","0.10","0.06","N\/A (no loss)"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}]}}},"Finally, as shown from the simulation result above, the inventive sum-of-delays technique consistently achieved very low estimation errors in both link buffer size and queue length estimation, no more than 1% in most cases, even under the most challenging conditions. This confirms that by incorporating the measured transmission delays in estimating the link buffer size and queue length, we can effectively incorporate and compensate for the link bandwidth variations. The sum-of-delays technique is a promising candidate for application to both network measurement tools, even in short-lived measurement, as well as for in-band measurement to be integrated into existing transport\/application protocols.","The invention has been explained with reference to specific embodiments. Other embodiments will be evident to those of skill in the art. The invention has many uses and is a mechanism to develop further inventions. Knowledge of the link buffer size and queue length can be exploited at various layers to enhance the performance of network applications. For example, transport layer protocols such as TCP can be modified to integrate the sum-of-delays algorithm to perform passive estimation of the link buffer size so that the latter can be exploited in its congestion control algorithm to improve bandwidth utilization while still preventing network congestion. The TCP-QA module described above is one specific method to realize this. At the application layer, the sum-of-delays algorithm can also be employed to incorporate the link buffer size and queue length information into congestion control, resource allocation, traffic policing, error control, and the like. Therefore, the invention should not be considered to be limited except as indicated by the appended claims."],"GOVINT":[{},{}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0050","num":"0072"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0051","num":"0073"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0052","num":"0074"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0053","num":"0075"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0054","num":"0076"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0055","num":"0077"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0056","num":"0078"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0057","num":"0079"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0058","num":"0080"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0059","num":"0081"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0060","num":"0082"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0061","num":"0083"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0062","num":"0084"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0063","num":"0085"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0064","num":"0086"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0065","num":"0087"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0066","num":"0088"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0067","num":"0089"},"figref":"FIG. 18","i":"a "},{"@attributes":{"id":"p-0068","num":"0090"},"figref":"FIG. 18","i":"b "},{"@attributes":{"id":"p-0069","num":"0091"},"figref":"FIG. 18","i":"c "},{"@attributes":{"id":"p-0070","num":"0092"},"figref":"FIG. 19","i":"a "},{"@attributes":{"id":"p-0071","num":"0093"},"figref":"FIG. 19","i":"b "},{"@attributes":{"id":"p-0072","num":"0094"},"figref":"FIG. 19","i":"c "},{"@attributes":{"id":"p-0073","num":"0095"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0074","num":"0096"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0075","num":"0097"},"figref":"FIG. 22"},{"@attributes":{"id":"p-0076","num":"0098"},"figref":"FIG. 23"},{"@attributes":{"id":"p-0077","num":"0099"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0078","num":"0100"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0079","num":"0101"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0080","num":"0102"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0081","num":"0103"},"figref":"FIG. 28"},{"@attributes":{"id":"p-0082","num":"0104"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
