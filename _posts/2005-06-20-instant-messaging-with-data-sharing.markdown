---
title: Instant messaging with data sharing
abstract: Instant messaging with data sharing is described. One or more of the described techniques may be employed to share data in conjunction with an instant messaging session, even if one or more clients which are to share the data are not currently available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07693958&OS=07693958&RS=07693958
owner: Microsoft Corporation
number: 07693958
owner_city: Redmond
owner_country: US
publication_date: 20050620
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["The prevalence of instant messaging is ever increasing as users are able to communicate instant messages using an ever expanding variety of devices, such as personal computers, wireless phones, media devices, and so on. Instant messaging may be utilized, for instance, to enable two or more users to exchange messages via a network during an instant messaging session. When two users are online at the same time, instant messages may be exchanged in real time between the two users. Thus, the instant messages may be utilized to support a text conversation in a manner that mimics how the two users would participate in a typical spoken conversation.","Typical instant messaging sessions, however, do not provide data sharing techniques that may persist outside of the instant messaging session. For example, sharing data in a typical instant messaging session generally requires that each of the users is online at the same time. Therefore, if a user is not available via the instant messaging session, that user is not provided with data that is shared by the other users that are online. Further, no sharing state is persisted between instant messaging sessions. This may lead to inconsistencies in the data between the users which may be difficult to manually manage, such as to determine which version of the data is current, whether a particular version includes changes from each of the clients, and so on. These inconsistencies may lead to user frustration and consequently a diminished instant messaging experience.","Instant messaging with data sharing is described. One or more techniques may be employed to enable data to be shared between users in relation to one or more instant messaging sessions, even if the users are not online at the same time. Additionally, these techniques may be employed to synchronize data between particular users such that each of the users has an \u201cup-to-date\u201d copy of the data. Further, these techniques may be utilized to schedule the synchronization of the data based on a variety of considerations.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","The same reference numbers are utilized in instances in the discussion to reference like structures and components.","Overview","Instant messaging with data sharing is described. Traditional data sharing (e.g., file transfer) during instant messaging may happen only if each of the users which share the data are available concurrently, e.g., logged on to a messaging service, can only be used to transfer one file at a time, and does not persist sharing state between instant messaging sessions. Therefore, the interaction between the users is limited by whether each of the users is currently available and does not allow building up of state across sessions, e.g., a kid's photo album. Accordingly, techniques are described in which instant messaging may incorporate data sharing such that clients may share data regardless of whether each of the clients is currently available.","Two users, for instance, may communicate during an instant messaging session through the use of instant messages. During the session, a first user may specify that a particular data item is to be shared via an instant messaging user interface which is utilized to perform the instant messaging session. For example, the instant messaging session may provide for a \u201cshared space\u201d that may be established during an instant messaging session for any user or group of users specified in a first user's contact list. This shared space may allow the first user to share files and make updates to the files that are visible to all other users in the shared space, even if these other users are not currently online. For instant, a first user may designate a folder representing a shared space as accessible to any other user on the first user's contact list, a particular user on the first user's contact list, a group of users on the first user's contact list, and so on. Then the first user may drag data into that shared space (e.g., the folder) and once online, the contents of that folder are synchronized with similar folders maintained by the other users. Thus, each of the other users is provided with a synchronized version of the data that is not dependent on the other users being concurrently available via an instant messaging session. Further, the other users may also make changes to the data that are synchronized back to the first user. The shared space (e.g., the folders) may be persisted across multiple instant messaging sessions.","In the following discussion, an exemplary environment and user interfaces are first described that is operable to employ techniques to provide instant messaging with data sharing. Exemplary procedures are then described which may be provided by the exemplary environment, as well as in other environments.","Exemplary Environment",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","102","104","1","104","106","104","1","104","106","104","1","104","104","1","104","104","1","104","104","1","104"]},"Additionally, although the network  is illustrated as the Internet, the network may assume a wide variety of configurations. For example, the network  may include a wide area network (WAN), a local area network (LAN), a wireless network, a public telephone network, an intranet, and so on. Further, although a single network  is shown, the network  may be configured to include multiple networks. For instance, client () may be communicatively coupled via a peer-to-peer network with client (N). Each of the clients (), (N) may also be communicatively coupled to the messaging service  over the Internet. A variety of other instances are also contemplated.","Each of the plurality of clients ()-(N) is illustrated as including a respective one of a plurality of messaging modules ()-(N). Each messaging module ()-(N) is executable such that a respective client ()-(N) may communicate its presence information to the messaging service  and may participate in an instant messaging session with another one of the clients ()-(N). Instant messaging provides a mechanism such that each of the clients ()-(N), when participating in an instant messaging session, may send text messages to each other. The instant messages are typically communicated in real time, although delayed delivery may also be utilized, such as by logging the text messages when one of the clients ()-(N) is unavailable, e.g., offline. Thus, instant messaging may be thought of as a combination of e-mail and Internet chat in that instant messaging supports message exchange and is designed for two-way live chats. Therefore, instant messaging may be utilized for synchronous communication. For instance, like a voice telephone call, an instant messaging session may be performed in real-time such that each client ()-(N) may respond to each other client as the instant messages are received.","In an implementation, the messaging modules ()-(N) communicate with each other through use of the messaging service . Messaging service , for instance, may include a messaging manager module  that is executable to route instant messages between the messaging modules ()-(N). For example, client () may cause the messaging module () to form an instant message for communication to client (N). The messaging module () is executed to communicate the instant message to the messaging service , which then executes the messaging manager module  to route the instant message to the client (N) over the network . The client (N) receives the instant message and executes the messaging module (N) to display the instant message.","In another implementation, when the clients (), (N) are communicatively coupled directly, one to another (e.g., via a peer-to-peer network), the instant messages are communicated without utilizing the messaging service . Further discussion of the use of a peer-to-peer network by the clients ()-(N) may be found in relation to .","Each of the clients ()-(N) is further illustrated as having a respective sharing module ()-(N). The sharing modules ()-(N) are executable to share data between the clients ()-(N) in relation to instant messaging. For example, sharing module () may be executed to receive data specified for sharing with client (N) via an instant messaging user interface and cause the specified data to be stored such that even if client (N) is not available (e.g., currently logged-on to the messaging service ), the client (N) may receive the specified data at a later time.","The specified data may be stored in multiple locations and in a variety of ways, which is illustrated in  as client data () (where \u201cd\u201d can be any integer from one to \u201cD\u201d) being stored in storage  that is accessible via the network , i.e., the client data () is available via the \u201ccloud\u201d. For example, storage  may be provided via a peer-to-peer network by the plurality of clients ()-(N) such that a subset of the clients ()-(N) includes the data. Therefore, when a previously unavailable client of the plurality becomes available, that client may receive the data from the subset of the clients ()-(N). In another example, the storage  is included as a part of the messaging service . For instance, the messaging service  may include a sharing manager module  that is executable to manage storage of the plurality of client data (), such as to synchronize the client data (), schedule synchronization of the client data, and so on, further discussion of which may be found in relation to .","The storage  may also be accessed in a variety of ways. For example, storage , and more particularly the client data () available via storage  may be made available via a web-based interface. Changes made through this interface are propagated to corresponding clients and may be subject to conflict-detection and resolution rules. A variety of other examples of storage  are also contemplated without departing from the spirit and scope thereof, such as a stand-alone dedicated storage system that is accessible to the messaging service  and\/or the plurality of clients ()-(N).","By providing the client data () via the \u201ccloud\u201d, the data may be shared or accessed even when each of the clients ()-(N) is not available. The storage  provides a shared space which allows the clients ()-(N) to share the client data () and make updates to the data that are visible to each other client in the shared space, even if these other clients are not currently online. For instance, client () may designate a folder as representing a shared space that is accessible to client (N). The user of client () may drag data into that shared space (e.g., the folder) and once client () is online, the contents of that folder are synchronized with a similar folder maintained by client (N), such as via the storage  in the \u201ccloud\u201d when client (N) is offline. Thus, client (N) is provided with a synchronized version of the data that is not dependent on the other clients (e.g., client ()) being concurrently available via an instant messaging session. Additionally, client (N) may also make changes to the client data () that are synchronized back to client () via the storage  in the \u201ccloud\u201d when client () is offline. Further discussion of sharing of client data () may be found in relation to .","Although the exemplary environment  is illustrative of an exemplary implementation that is configured to employ instant messaging with data sharing, the exemplary environment may be rearranged in a variety of ways. For example, the sharing manager module  and the storage  may be provided in a stand-alone system. The sharing manager module  and the storage  may also be provided by the plurality of clients ()-(N), such as in an implementation in which instant messaging is performed without utilizing the messaging service . For instance, the sharing modules ()-(N) may incorporate the functionality of the sharing manger module  to manage the plurality of client data (). Additionally, although illustrated together, the sharing modules ()-(N) and the messaging modules ()-(N) may be provided separately and communicate via respective application programming interfaces.","Generally, any of the functions described herein can be implemented using software, firmware (e.g., fixed logic circuitry), manual processing, or a combination of these implementations. The terms \u201cmodule,\u201d \u201cfunctionality,\u201d and \u201clogic\u201d as used herein generally represent software, firmware, or a combination of software and firmware. In the case of a software implementation, the module, functionality, or logic represents program code that performs specified tasks when executed on a processor (e.g., CPU or CPUs). The program code can be stored in one or more computer readable memory devices, further description of which may be found in relation to . The features of the instant messaging techniques described below are platform-independent, meaning that the instant messaging techniques may be implemented on a variety of commercial computing platforms having a variety of processors.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","102","104","1","104","116","102","202","104","1","104","202","104","1","104","204","206","1","206","208","210","1","210"],"i":["s","s","s","s"]},"Processors are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example, processors may be comprised of semiconductor(s) and\/or transistors (e.g., electronic integrated circuits (ICs)). In such a context, processor-executable instructions may be electronically-executable instructions. Alternatively, the mechanisms of or for processors, and thus of or for a computing device, may include, but are not limited to, quantum computing, optical computing, mechanical computing (e.g., using nanotechnology), and so forth. Additionally, although a single memory (), ()-(N) is shown for the respective servers () and clients ()-(N), a wide variety of types and combinations of memory may be employed, such as random access memory (RAM), hard disk memory, removable medium memory, and so forth.","Each of the plurality of clients ()-(N) includes a respective one of a plurality of messaging modules ()-(N) which is illustrated as being executed on a respective processor ()-(N) and is storable in a respective memory ()-(N). As previously stated, the messaging modules ()-(N) are executable to provide an instant messaging session, either in indirect communication through use of the messaging service  over the network  and\/or in direct communication over a peer-to-peer network , which is illustrated in  by a double-headed arrow to indicate that the peer-to-peer network  may be provided separately from or as an overlay to network .","The messaging modules ()-(N) may be configured in a variety of ways to provide instant messaging. For example, the messaging modules ()-(N) may be configured as dedicated modules that are executable to provide instant messaging themselves, such as over a peer-to-peer network overlay as previously described, via the messaging service , and so on. In another example, the messaging modules ()-(N) are configured as communication modules (e.g., ActiveX or similar controls executing inside of web browsers) which are executable to access the messaging service  configured as a web site that provides instant messaging. In other words, the controls executing inside of web browsers are configured to provide the functionality of the messaging modules ()-(N) through interaction with a web site. In such an example, the storage  may be configured for access via a web interface such that the web browsers may share data between clients through storage of the client data () as previously described.","The plurality of messaging modules ()-(N) may be provided to the plurality of clients ()-(N) in a variety of ways. In an implementation, the messaging modules ()-(N) are provided by the messaging service  (and more particularly through execution of the messaging manager module ) in response to a request to initiate an instant messaging session. For example, client () may request initiation of an instant messaging session with client (N). If client (N) accepts initiation of the instant messaging session, the messaging manager module  is executed on processor () to communicate the messaging module over the network  for execution on the respective clients ()-(N) to provide an instant messaging session. In a different implementation, the messaging modules ()-(N) may be downloaded and installed by the users of clients ()-(N).","Each of the messaging modules ()-(N) is illustrated as having a respective one of a plurality of replication modules ()-(N) and a respective one of a plurality of scheduling modules ()-(N). The replication modules ()-(N) are representative of functionality that is responsible for synchronizing data shared by the plurality of clients ()-(N), such as files and directories. For example, each of the clients ()-(N) may include a respective list of contacts ()-(N) that are used to specify how to share data ()-(N) maintained by the clients ()-(N) by defining one or more sharing spaces. For example, one of the contacts () of client () may reference client (N) (e.g., alias, friendly name, network address, and so on) and likewise, one of the contacts (N) of client (N) may reference client (); using the above contacts, clients () and (N) may establish a sharing space. The replication modules ()-(N), when executed, may implement peer-to-peer client data ()-(N) replication such that each of the clients ()-(N) referenced by the contacts ()-(N) has a synchronized version of the client data ().","The replication modules ()-(N), though interaction with the sharing manager module  for instance, may synchronize client data ()-(N) with client data () such that the clients ()-(N) may make changes to their client data ()-(N) and have the changes become synchronized with client data () and visible to each other client that is sharing the data without explicit actions being required by the clients. In other words, the synchronizing may be performed by the modules automatically and without user intervention. Further, through use of storage  of the client data (), the change may be made and propagated even if each of the clients ()-(N) is not currently available, e.g., logged on to the messaging service , logged on to a peer-to-peer instant messaging session performed by the plurality of clients ()-(N) without use of the messaging service , and so on. In an implementation, the changed data and not the entire data item (e.g., a modified subset of file) is replicated to conserve hardware, software and network resources, although replication of the entire data item (e.g. files and directories) may also be contemplated. For example, the client data () may describe the modified subset of the file which is communicated using a \u201cstore-and-forward\u201d technique to each of the clients that share the client data (). This allows space in storage  to be reclaimed. For instance, in the case of a partial copy, the storage  may keep information about a directory structure and file meta-data, but not data for each file being shared; in that case, only data for the files that have not yet been replicated to the plurality of clients ()-(N) may be kept in storage . Once the files have been replicated to the plurality of clients ()-(N), the space in storage  may be reclaimed automatically.","The replication modules ()-(N) and\/or the sharing manager module  may also manage synchronization of the client data ()-(N) and () to detect and flag conflicting changes. The modules may then notify the clients ()-(N) of the conflict for correction, such as to determine which changes should be kept, deleted, and so on. A variety of other functionality may be provided by the replication modules ()-(N), further discussion of which may be found in relation to  and -.","The scheduling modules ()-(N) are representative of functionality that is configured to schedule synchronization performed by the respective replication modules ()-(N). For example, the scheduling modules ()-(N) may control replication activity in order to manage resources used to perform the synchronization, such as processing resources (e.g., CPU cycles), memory resources (e.g., amount of memory used, how often the memory is accessed, and so on), network resources (e.g., bandwidth utilized), and so on. Additionally, the scheduling modules ()-(N) may schedule synchronization based on a wide variety of other considerations, further discussion of which may be found in relation to .","The shared space provided for sharing the client data ()-(N) and () between the plurality of clients ()-(N) may be configured in a variety of ways. For example, each of the clients ()-(N) may have a \u201cclient\u201d folder , one or more \u201cshare with particular client(s)\u201d folders , a \u201cgroup\u201d shared folder , and other  representations of storage for shared data items. One or more copies of these folders may also be maintained as client data () in storage . The client folder , for instance, may correspond to a particular one of the clients ()-(N) and contain data that is replicated to each other client having a copy of the client folder. In an implementation, the other clients will receive any client data (e.g., files, folders, etc.) that the client drops into that folder, but will not be able to change or modify that data. In a different implementation, all clients are able to change or modify the data.","A \u201cshare with particular client(s)\u201d folder  may be provided for each contact included in the list of contacts ()-(N) of the respective clients ()-(N). This folder may be utilized for collaboration with other contacts, such as by permitting changes to be made to data items in this folder by each user having access to the folder, e.g., a locally stored version of the folder that is synchronized with another locally stored version on the other client or with the client data () in storage . The \u201cgroup shared\u201d folder  may also be provided for collaboration.","Both the \u201cshare with particular client(s)\u201d folder  and the \u201cgroup shared\u201d folder  may utilize a notion of groups that is persisted. For example, persistence of a group (e.g., a group of two in the instance of the \u201cshare with particular client(s) folder , two or more as in the \u201cgroup shared\u201d folder ) may be provided through the use of a plurality of persistent objects () (where \u201ca\u201d can be any integer from one to \u201cA\u201d) that specify membership in a particular group. For example, each persistent object () may contain references to a collection of clients that are permitted to participate in a group. Each participant in the group may therefore have a corresponding folder (e.g., a \u201cshare with particular client(s)\u201d folder  or a \u201cgroup shared\u201d folder ) which contains data that is shared by members of the group, such as to permit group collaboration. Further, one or more copies of the \u201cgroup shared\u201d folder may also be maintained as client data () in storage . The persistent objects () are illustrated as stored in storage  included in memory () and local copies ()-(N), although the storage  may be provided in a variety of different ways.","Each of the plurality of persistent objects () is persistent such that it continues to exist beyond termination of execution of a module that created the persistent object and\/or continues to exist past a session, during which, the persistent object was created. For example, the messaging module () may be executed on the client () to form and store the persistent object (). Therefore, even if execution of the messaging module () is terminated, the persistent object () may be called the next time the clients ()-(N) \u201clog on\u201d. Thus, the persistent objects () may persist past an instant messaging session utilized to create the persistent object (), past execution of a module (e.g., messaging module ()) utilized to create the persistent object, and so on.","The persistent object () may also be utilized to provide a variety of other functionality. For example, by providing for persistence of client references in the persistent object (), the persistent object () may be reused to invite the clients ()-(N) to participate in an online activity (e.g., instant messaging, sharing, online games, and so on) without having to perform a plurality of manual steps, such as to select which of clients ()-(N) are to participate in the online activity, sending notifications that participation in the online activity is desired, and so on. Additionally, the persistent object () may be configured to be callable by or replicated in the contacts ()-(N) of any one of the referenced clients ()-(N). For instance, client (N) may leverage the persistent object () which was created by client (). Further, each client that is referenced by the persistent object () may be permitted to change the persistent object () to include a reference of another client, thereby increasing membership of the group described by the persistent object. It should be noted that the persistent objects () may be utilized to specify a sharing relationship and do not require that each of the clients specified therein is online concurrently.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 3","FIG. 1"],"b":["300","104","1","104","104","104","1","104","1","104","104"],"i":["n","n","n"]},"Adam () is illustrated as including a \u201cmy sharing\u201d folder , a \u201cBob\u201d folder , a \u201cCharlene\u201d folder , a \u201cgroup\u201d folder , and an \u201cAdam\/Bob\u201d folder . Bob () is illustrated as including a \u201cmy sharing\u201d folder , an \u201cAdam\u201d folder , a \u201cCharlene\u201d folder , a \u201cgroup\u201d folder  and an \u201cAdam\/Bob\u201d folder . Likewise, Charlene (N) includes a \u201cmy sharing\u201d folder , an \u201cAdam\u201d folder , a \u201cBob\u201d folder  and a \u201cgroup\u201d folder .","The \u201cmy sharing\u201d folders , ,  operate to share data placed in these folders with corresponding folders , , , , ,  on the other clients. For example, the \u201cmy sharing\u201d folder  of Adam () corresponds to the \u201cAdam\u201d folders ,  of Bob () and Charlene (N), respectively. Thus, data placed in folder  is automatically replicated to folders , , as illustrated by the dashed line from folder  to folders , . In this way, Bob () and Charlene (N) may readily determine that the data originated from Adam (). Similar functionality may also be employed by the \u201cmy sharing\u201d folders ,  of Bob () and Charlene (N), respectively, as illustrated by the corresponding dashed lines.","Since they belong to the same group, Adam (), Bob () and Charlene (N) may also share data through the group folders , , . As previously described, the groups may be formed based on a persistent object () that specifies group membership. Data changed in these folders , ,  may be automatically synchronized between the clients (), (), (N).","Folders may also be provided for collaboration between two users. For example, the \u201cAdam\/Bob\u201d folder ,  may represent data shared between Adam () and Bob () (e.g., a group of two) for collaboration such that either client may add, modify, delete and otherwise change data contained in these folders.","Although shared spaces provided by a variety of folders have been described, shared spaces may be provided in a variety of other ways utilizing a variety of representations without departing from the spirit and scope thereof, such as in conjunction with storage , implemented in a messaging service . Further, the shared spaces represented by the folders - may also be configured in a variety of ways, an example of which is shown in the following illustration.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 4","FIG. 3","FIG. 3"],"b":["400","402","108","1","104","1","402","404","104","406","408"],"i":"n"},"The user interface  also includes a sharing portion . The sharing portion  of the user interface  includes a representation of the folders previously described in relation to , which include a \u201cmy sharing\u201d folder \u201cBob\u201d folder , a \u201cCharlene\u201d folder , a \u201cgroup\u201d folder \u201d and an \u201cAdam\/Bob\u201d folder . Thus, the user interface  may be configured to provide instant messaging and data sharing.","As previously described, the data may be shared even if one or more of the other clients are not currently online, such as Charlene (N). For example, data dragged to the group folder  may be immediately shared with each client that is currently available (e.g., Bob ()) and stored for later communication to other clients specified by the folder when available, e.g., Charlene (N). Further discussion of synchronization of the folders may be found in relation to .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 5","FIG. 3","FIG. 4","FIG. 5"],"b":["500","502","108","104","502","504"],"i":["n","n"]},"The representation of Adam, for instance, includes an indication illustrated as a folder which indicates that Adam supports data sharing. Further, a visual representation on the \u201cAdam\u201d folder is used to notify Bob () that a change has been made to data contained in that folder, which in this instance is illustrated through the overlay of a star (or \u201cgleam\u201d) on the folder. Thus, Bob () may select the folder to cause the contents of the folder to be displayed in another sharing portion  of the user interface .","The other sharing portion  is illustrated as including sub-folders that are shared between Adam () and Bob (), which in this instance include vacation photos , work project , documents , and kid's home videos . Thus, Bob () is notified that modifications have been made to shared data, and may investigate those changes through navigation through the representations while in an instant messaging user interface. It should be noted that the indication (e.g., a folder) that Charlene (N) supports data sharing does not include an indication that the data has been modified. Therefore, Bob () is kept informed as to the status of the data shared by Charlene (N) with Bob (). It should also be noted that \u201cDave\u201d does not include a sharing indication, and therefore does not support data sharing. Although exemplary instant messaging user interfaces that support data sharing have been discussed, it should be apparent that a wide variety of other user interfaces may also be utilized to support data sharing without departing from the spirit and scope thereof.","Exemplary Procedures","The following discussion describes instant messaging with data sharing that may be implemented utilizing the previously described systems and devices. Aspects of each of the procedures may be implemented in hardware, firmware, or software, or a combination thereof. The procedures are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks (e.g., ) and arrows, e.g., . In portions of the following discussion, reference will be made to the environment  of  and\/or the system  of .",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 6","b":["600","108","1","104","1","602","104","1","302","308","310","404","506","400","500"]},"A determination is then made as to which other client(s) are to receive the shared data (block ). For example, the sharing module () may determine through examination of the folder that received the indication of the photo that data placed in that folder is to be shared with particular clients. The specified data is then synchronized with the other clients that are available (block ) via instant messaging. For example, the messaging module () may determine presence of each of the particular clients and synchronize the data with those clients that are available by connecting with them via network  or peer-to-peer network . Further discussion of presence may be found in relation to .","The specified data is stored for communication to the other clients that are not available (block ). For example, the data may be stored as client data () in storage  by connecting with messaging service . Therefore, when at least one previously unavailable client becomes available (block ), the specified data is synchronized with the at least one client (block ). Thus, the data may be specified for sharing and synchronization by a plurality of clients regardless of whether each of the clients is currently available.",{"@attributes":{"id":"p-0064","num":"0063"},"figref":"FIG. 7","b":["700","702"]},"A determination is then made as to whether the interaction triggers replication (decision block ). For example, the sharing module () may monitor interaction of the client () with the client data () to determine whether a change has been made to the client data that needs to be replicated. If not (\u201cno\u201d from decision block ), the interaction (block ) may continue to be monitored.","When the interaction triggers replication (\u201cyes\u201d from decision block ), a determination is made as to which clients are specified to share the data with (block ). For example, the data may be included in a \u201cmy sharing\u201d folder , copies of which are included on client () (i.e., \u201cBob\u201d) as folder  and client (N) (i.e., \u201cCharlene\u201d) as folder . In other examples, the data may be included in a group folder  specified by a persistent object, and so on.","Presence of each of the determined clients is then ascertained (block ). For example, the messaging module () may determine presence of each client ()-(N) in relation to available for instant messaging, such as whether the clients are \u201conline\u201d, \u201coffline\u201d, \u201conline but not receiving instant messages\u201d, and so on. Thus, the sharing of data may leverage the notion of presence provided via instant messaging.","The data is then shared with each of the clients when the clients are present (block ). This may be performed in a variety of ways. For instance, client presence may be monitored (block ) through interaction of the sharing module () with the messaging module (). A determination is then made as to whether the client is \u201clogged-on\u201d to a messaging service (decision block ). For example, the messaging module () may communicate with the messaging manager module  to determine which of the plurality of clients ()-(N) are currently logged on. If the client is logged-on (\u201cyes\u201d from decision block ), the shared data item is synchronized to reflect the interaction by the first client (block ). When the client is not logged-on (\u201cno\u201d from decision block ), the client presence is again monitored (block ). Thus, in this implementation the data shared by the clients is synchronized as the clients become available. In another implementation, however, data synchronization is scheduled, an example of which may be found in relation to the following figure.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 8","b":["800","802","112","1"]},"A determination is then made as to which client(s) are to receive the data items to be synchronized (block ). For example, the client may interact with a plurality of different data items and the sharing module () may determine which clients share which of the data items, such as through different folders specified for sharing with different clients.","Synchronization of the data items for the determined client(s) is then scheduled (block ). The scheduling may be based on a variety of characteristics. For example, the characteristics of the determined clients (block ) may be utilized to schedule synchronization of the data items. For instance, the characteristics may include whether the determined clients are currently logged on to a messaging service, data which describes historical presence trends of the client (e.g., client \u201cx\u201d is typically available for \u201cy\u201d period of time), hardware and\/or software resources of the client (e.g., connection speed and amount of time needed by the client to receive the data), and so on.","In another example, the characteristics of the data items to be synchronized (block ) are utilized, such as size, priority in relation to other data items, and so forth. In a further example, the characteristics of the synchronizing client (block ) are utilized, such as memory cycles, network bandwidth of the client to send the data, and so forth. In this way, a variety of characteristics may be utilized to schedule synchronization. Although a few examples have been discussed, it should be apparent that a variety of other examples are also contemplated without departing from the spirit and scope thereof.","Version Vectors","As previously shown in , shared spaces may be represented in user interfaces as folders. The contents of these folders may be synchronized between clients regardless of whether the clients are online at the same time. Thus, in the case of a space shared between two clients, this may mean that eventually (i.e., when the synchronization is complete) both clients will have an identical set of data (e.g., files and subfolders) in their sharing folder. In the case of a space synchronized between all the members of a group (e.g., a group formed using a persistent object ()), this may mean that eventually each the members of the group or circle will have an identical set of data in their sharing folder.","Data synchronization may be achieved in many ways. For instance, a multi-master state-based file replication technique may be employed by the replication modules to synchronize data. This technique involves computation of a global state, called a \u201cversion vector\u201d, for each replica, or copy of the folder that is to be synchronized. By comparing two version vectors, for instance, the replication modules may determine whether two copies are to be synchronized. If the version vectors are identical, the copies are considered synchronized. If the version vectors differ, however, the replication modules may use the difference in the version vectors to efficiently determine what data items (e.g., files or folders) are to be synchronized.","The version vector may contain a number of entries equal to a number of different copies that are to be synchronized. This may be advantageous since that number will in general be much smaller than the number of data items that are to be kept synchronized. For instance, for a space shared between two clients Adam () and Bob (), the number of copies would typically be two, one for each client, while there may be tens of thousands of files in the shared space. For instance, the following shows an example of possible version vectors for the two copies, with the two copies on client () and () being denoted by \u201cA\u201d and \u201cB\u201d, respectively:\n\nVersion vector of copy A: {\u219215, B\u2192300}\n\nVersion vector of copy B: {\u219212, B\u2192500}\n\nHowever, note that even for the case of a space shared between two clients there could be more than two copies involved. For instance, consider the case where client Adam () interacts with the messaging service  using two different machines, \u201cM\u201d and \u201cM, and client Bob () interacts with the messaging service  using a single machine \u201cM.\u201d In this case, there are three copies of the data (on M, M, and M, respectively) and thus the version vectors would contain three entries each, an example of which is as follows:\n\nVersion vector of copy A on M: {M\u219218, M\u219233, M\u2192300 }\n\nVersion vector of copy A on M: {M\u219213, M\u219258, M\u2192300 }\n\nVersion vector of copy B on M: {M\u219211, M\u219210, M\u2192777 }\n","While the problem of efficient synchronization between two machines may be addressed via version vectors, techniques are still desired to efficiently determine which machines are to be synchronized. For instance, client \u201cAdam\u201d may have 100 contacts () and maintain shared spaces with each of those contacts. Therefore, when Adam () comes online, a brute-force approach may require that Adam's messaging module () connect to all 100 contacts to exchange version vectors and determine whether synchronization is desired, which may result in inefficient use of resources. Accordingly, a variety of techniques may be employed to provide for efficient synchronization of shared data, examples of which are found in relation to the following figures.","Since both embodiments rely on version vector comparisons for equality, the version vectors may be further optimized to store and transmit less data by using a compact representation of the version vectors instead of the full vectors themselves. One way to achieve such a compact representation is to compute a hash from the canonical representation of the vector. While any hash algorithm may be used, a cryptographically secure one (such as MD5 or SHA-1) reduces the risk of collisions, i.e., equal hashes for different version vectors. In the descriptions below, the term \u201cversion vector\u201d is used to mean either the full vector or a compact representation of the vector interchangeably.",{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIG. 9","b":["900","104","1","104","902","1","902","902","102","104","1","104","902","104","1","104","102","104","1","104"],"i":["n","n","m","n","m","n","n"]},"For example, Adam () has a shared space with Bob (). Each client (), () maintains a respective copy of a shared folder (), () a respective version vector, illustrated as \u201cVV\u201d and \u201cVV\u201d respectively in the respective presence documents (), (). The following procedure is then performed to determine whether the two folders are to be synchronized, and if so, synchronization is performed.","Whenever client () signs onto the messaging service  (and\/or whenever one of its version vectors \u201cVV\u201d changes), client () notifies the messaging service  of its presence information change by sending a change (CHG) command  (arrow ). The information sent as part of the CHG command is augmented with information about each of the client's () version vectors as obtained from its presence document (). A connection server () to which client () is connected routes this information on to the client's presence server () (arrow ). The presence server () updates presence data  (which in this instance is configured as the presence document ()) for client () to reflect the client's friendly name, status code, and so on. Additionally, the present server () stores information about each of the client's () version vectors.","Because client () has client () on its list of contacts (), whenever client () has a change in presence, the messaging service  sends client () (through a corresponding connection server () as illustrated by arrow ) a command  having the new information. The command  include a version vector information from client () as obtained from the presence data  for any spaces shared by the clients (), (). In an implementation, the presence server () may filter out information regarding the other version vectors of client () thereby conserving resources and preserving privacy of client ().","Upon receipt of the command , client () compares the received version vector \u201cVV\u201d with its own version vector \u201cVV\u201d. If the vectors match, then the shared folders (), () are synchronized. If the vectors do not match, however, then synchronization of the shared folders (), () is performed via connection over the network  or peer overlay .","Client (), for instance, may contact client () and execute a protocol to synchronize the shared folders (), () (arrow ). This protocol may include exchange of the full version vectors if a compact representation was used previously to determine whether synchronization was needed. Following completion of that protocol, each client updates its version vector and updates the respective presence documents (), () with the new values.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":"FIG. 10","b":["1000","104","1","104","102"],"i":"n"},"This technique is based on a new messaging protocol primitive called a synchronization negotiation message (SNM)  that may be used for reliable, unidirectional communication between the clients (), (). The SNM message contains a destination instant messaging handle that identifies the intended recipient (e.g., client ()), and a payload containing a version vector and an identifier for a shared space.","First, client (), through execution of the messaging module () and its corresponding sharing module (), determines that at least one condition has been met to send the SNM message  (arrow ) to contact client (). A variety of conditions may be utilized. For example, one of the client's () version vectors may have changed (e.g., as a result of a local change to the shared files, a completed synchronization, and so on) and at least one of its contacts (e.g., client ()) for that sharing relationship is online. In another example, one of its contacts (e.g., client ()) with which it has a sharing relationship comes online. It should be noted that this may be optimized by caching a last known version vector for that particular contact (e.g., client ()) on a per-machine basis and sending the SNM message  if client's () current version vector is different from the cached one for contact, e.g., client ().","The sent SNM message  is routed by the messaging service  (and more particularly the connection servers (), ()) to client () (arrow ). Upon receipt of the SNM message , client () compares the received version vector \u201cVV\u201d with its own version vector \u201cVV\u201d. If the version vectors match, then we know that the shared folders (), () are synchronized.","If the version vectors differ, client () contacts client () via the network  or peer-to-peer overlay  and executes a protocol to synchronize the folders (), () (arrow ). As before, this protocol may include exchange of the full version vectors if a compact representation was used to determine whether synchronization was desired. Following completion of the protocol, each client (), () updates its respective version vector.","Although the invention has been described in language specific to structural features and\/or methodological acts, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described. Rather, the specific features and acts are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
