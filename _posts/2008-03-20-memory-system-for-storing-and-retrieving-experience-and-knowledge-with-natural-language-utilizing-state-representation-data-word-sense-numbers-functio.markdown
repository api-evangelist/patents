---
title: Memory system for storing and retrieving experience and knowledge with natural language utilizing state representation data, word sense numbers, function codes, directed graphs, context memory, and/or purpose relations
abstract: A memory system for storing and retrieving experience and knowledge with natural language through methods and apparatus is disclosed. The primary components of this memory system include syntactic processes, function word processes, ellipsis processes, morphology processes, meaning word sense number processes, purpose identification processes, plausibility and expectedness processes, communication processes, context storage processes, and text generation processes. The function word processes select and evaluate functions associated with function words which are certain words in each part of speech. Ellipsis processes replace unstated words. Morphology processes replace morphological words with phrases or clauses composed of function words and word sense numbers. A word sense number is an address to the meaning of a word. Certain nouns, verbs, and adjectives are meaning words. Word sense numbers are selected to be consistent with the context of the clause containing the words, the context, and stored experience and knowledge. Experience and knowledge are stored as nodes with associated clause implying word sense numbers organized into paths in a directed graph. Nodes in the directed graph have access conditions which determine if a node is accessible on a path. A path has an associated purpose relation which is any concept that labels the path. Purpose identification processes select: purpose relations, experience and knowledge, processes for setting a verb's result states or a state value, object classification paths, and activity selection paths. The communication processes coordinate incoming and outgoing natural language text. Text generation processes generate natural language text from word sense numbers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873509&OS=07873509&RS=07873509
owner: 
number: 07873509
owner_city: 
owner_country: 
publication_date: 20080320
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This is a continuation of U.S. application Ser. No. 10\/638,220 filed on Aug. 8, 2003 now U.S. Pat. No. 7,349,840 which is a continuation of U.S. application Ser. No. 09\/671,580 filed on Sep. 27, 2000 now U.S. Pat. No. 6,609,091 which is a continuation of U.S. application Ser. No. 08\/937,144 filed on Sep. 24, 1997 now U.S. Pat. No. 6,138,087 which is a continuation of U.S. application Ser. No. 08\/315,691 filed on Sep. 30, 1994 now U.S. Pat. No. 5,715,468, the contents of which are hereby incorporated by reference in their entirety.","The present invention is a system for natural language understanding which includes: a grammar processing method and a semantic processing method which converts natural language into previously stored experience and knowledge, natural language understanding based upon the previously stored experience and knowledge, a storage structure for storing experience and knowledge in a form which is convertible to and from natural language, and a method to add experience and knowledge from natural language input including problem solving.","The following references to prior art are made:\n\n","Previous work utilizing natural language processing has been in a few application areas: data base interfaces, translation, and understanding. The data base interfaces and translation work are similar in that the natural language input serves as a selector of an alternate representation. The natural language understanding work has been to classify natural language input sentences into possible defined categories for limited domains of categorization without any processing to determine if the categorization is consistent with natural language input sentences of the conversation. Other natural language processing work has expanded the limited categorization to fill in certain types of unstated information in a conversation for a limited situation and has included the capability of limited question answering about a conversation which has been categorized by this natural language processing. Still other natural language understanding work has stored and retrieved representations of specific natural language sentences, but this work lacks the capability of combining multiple natural language sentences into a representation of experience and knowledge.","The following describes the main references from the prior art. Discussion of various syntax processing methods is thoroughly described in Bates 1978, Sager 1981, Winograd 1983, and Hutchins 1991. Hutchins describes an efficient parser for detecting grammatical errors in natural language text. However, none of these parser descriptions utilize a grammar specification for both parsing incoming natural language and for forming natural language output. Quirk et al 1985 provide a thorough description of English grammar especially including the function of certain words such as pronouns, prepositions, conjunctions, interjections and other function words, prefixes and suffixes. Quirk et al also provides a detailed description of ellipsis, tense with related aspects, and clause formation and placement. However, this grammar description does not include a method for representing natural language nor does it include a method for selecting word senses of natural language words. Case frames are described in Fillmore 1968 and refined in Cook 1979. A method and apparatus for understanding natural language in the sense of selecting case frames which represent natural language text is disclosed in Loatman et al 1990. Case frames are a coarse categorization of natural language. Case frames lack the capability to represent the knowledge and experience implied from natural language in that case frames: have no representation for the implications of a case frame, have no representation for a process to realize the case frame, and have no capability to determine if the selected case frame is consistent with other case frames from the same natural language conversation. A limited representation of natural language is described in Schank 1977 and 1982. An instantiation of this representation is used to understand stories in terms of this limited representation, to match limited types of general experience, and answer limited questions about the understood story in Dyer 1983. A type of memory organization for storing and retrieving specific experience gained from understanding natural language using a type of Schank's limited natural language representation is described in Kolodner 1984. Guha et al describes a memory system which stores knowledge in a two level data structure which are redundant. Each data structure is related to first order predicate calculus. This memory system heavily relies upon axioms which complicates the accessing of experience and knowledge related to a natural language conversation. Another complication is that this memory system utilizes natural language processing for a translation of natural language input to access the data structure related to first order predicate calculus. This memory system is not specifically designed for selecting word senses of natural language words.","This invention builds on the previous natural language understanding work and significantly expands the capabilities of the previous work. One expansion is to upgrade parsers: to efficiently handle ellipsis grammar and coordination grammar for understanding natural language; and to efficiently handle both parsing of incoming natural language and generation of outgoing natural language with the same syntax grammar data structures. Another expansion is to represent function words as functions. Function words include: certain adjectives, certain adverbs, pronouns, prepositions, and conjunctions. Function words have a wide range of processes which represent them. These processes define the function words, and are described in more detail in this section, and in the greatest detail in the preferred embodiment of this invention. Another expansion is to process morphological words, words with prefixes or suffixes, i.e., affixes. A Morphological word is processed into the phrase or clause or word senses and functions which represents the morphological word. Another expansion is to perform ellipsis processing to replace ellipted words, i.e., left out words, and then to perform processing which determines if the replaced words are consistent with the context of the conversation and stored experience and knowledge. Morphological words and ellipsis can be selectively utilized for text generated for outgoing communication from the invention.","Another expansion is to represent all non-function words with a meaning in terms of states and their values. An additional expansion is to assign the meaning of such words a word sense number. A word sense number is analogous to an address to a dictionary definition. However, the definition associated with a word sense number is in a form which allows: selecting a consistent and plausible definition, and hence its associated word sense number, from natural language; storing all that is known for the definition and all that is known to be related to the definition by realizing the definition with a state representation which is in terms of states, their values, and\/or their relations; and structuring the definition and its associated word sense number for accessing the range of generality of what is known for the definition and of what is known to be related to the definition.","Another expansion is to combine the state representation of a natural language input, purposes, and the context of the conversation or the context of the situation into a three dimensional address which selects stored experience or knowledge in a memory of knowledge and experience. A purpose includes all related experience or knowledge such as: information content (information about an experience such as advantages), an activity (a set of actions), a plan, an intention, a causal path (a set of experiences related by cause), a result path (a set of actions related by accomplishing a result), or a goal. In general, a purpose has a purpose relation which is any concept which labels one clause or more than one related clause. The knowledge and experience in this memory are composed of data which represent natural language words, phrases, clauses, and groups of clauses. Each dimension can be assigned between a general value (unassigned) to a specific value (completely assigned). This range of dimension values selects experience or knowledge in a range of all that is stored for unspecified dimensions to all that meets a partial specification up to a specific experience or knowledge for a completely assigned specification. This range of specificness allows for natural language input to be understood in terms of previously stored experience and knowledge, and this further allows the natural language input to be then assigned a measure of plausibility and expectedness based upon previously stored experience and knowledge. Hence, an interpretation of a natural language input can be judged and reinterpreted when plausibility or expectedness criteria are not met. A particular application of the invention may make every plausible interpretation of a natural language input, and then the application can select the most plausible for example. Also, the accessing of experience and knowledge provides the capability to determine when new experience or knowledge is presented to the invention. This capability provides the first step in acquiring and understanding new experience and knowledge. Another aspect of the accessing of experience and knowledge is that when the invention encounters ambiguity or contradiction, the invention can generate a clarifying question for output. An application can also utilize the stored experience and knowledge related to its application to select a communication for output to incoming natural language statements to achieve the goals of the application. In general, an application can generate a communication for output.","An improved method and apparatus for understanding natural language in terms of stored experience is disclosed. This aspect of the invention is implemented with a syntactic method, followed by a phrase and clause state representation method, a purpose identification method, and an experience or knowledge retrieval method, a plausibility and expectedness check method, a context update method, and application specific processes including: further accesses of state representation memory and knowledge and experience memory, evaluation of application specific processes, and\/or generation of outgoing natural language. The architecture of the memory system invention is summarized in .","The syntactic method includes steps of word isolation, dictionary look-up, function word processing, morphological processing, pattern recognition parsing, and ellipsis processing. The syntactic method is performed in a Natural Language Interface Processor  which is summarized in . Each natural language has its own natural language interface processor. Multiple natural languages can be processed to access a common state representation and a common experience and knowledge memory in one instance of the invention or in separate instances of the invention. An electronic form of text is input to the Text In Port  and is first processed by the Word Isolation Step  which identifies numerics, words, punctuation, and base words with inflections (e.g., a verb with the \u201ced\u201d inflection) or affixes. The Dictionary  stores words, and idioms which each have associated syntax wordsets and associated state representation addresses or function implementation addresses, and any grammar anomalies. Dictionary Look-Up Step  looks up the syntax wordsets which each input word belongs to and passes this information to the Parsing Step . Parsing Step  utilizes Memory  which contains syntax trees. These syntax trees are searched to identify the syntax usage of the Text In  words using syntax wordsets. The output of the Parsing Step  includes: phrases which include identifications of: function words, state representation words, modifiers, modifiees; the sentence role of phrase heads; and ellipsis identification. The syntax usage of each word is sent to the Dictionary Look-Up Step  which looks up addresses for state representation words and function word implementations.","The Function Word Processing Step  processes function words, affixes, and inflections including tense and related aspects. Function Word Processing Step  can select the function to be applied for single function words such as \u201ca\u201d. Other function words cannot be processed until further processing of the input is performed such as \u201cthe\u201d. Still others can be partially processed. For example, pronouns are tentatively replaced with a type and a pointer to a list of referents of that type starting with the latest referent of that type with the same case as the pronoun in the clause. These addresses point to the data structure associated with each word. The functions of function words have a general range of results including: adjectives defining specificity and group aspects of their noun modifiees; multiple function word adjectives implying combinations of functions for their noun modifiers, adverbs selecting word sense numbers of verbs, modifying state values, and setting and selecting aspects of processes which realize verb result states; pronouns which represent words either already in the context of a conversation, or words which are about to be communicated in the conversation; prepositions which relate aspects of meaning words, and which in some cases imply clause relations among words such as for prepositional phrases modifying adjectives; and conjunctions which combine words in a sentence role, such as the subject, and other conjunctions which imply the possible relations which a clause has to another clause.","Another part of the Dictionary Step  is to identify words which require morphological processing. The Morphological Processing Step  includes: identification of the group of functions associated with a morphological word's base word, prefixes and suffixes; and the evaluation of one of these functions. Evaluation of the function results in a pointer to the address in the state representation data structure containing the base word plus affixes, or the function generates the state representation of the base word plus affixes as a phrase or clause. The generated phrase or clause contains representations of function words and state representation words. Words formed with a verb base (e.g., \u201csurprisingly\u201d) often imply a clause for complete interpretation. The Ellipsis Processing Step  expands the ellipses identified in the Parsing Step  or the ellipsis related to morphological words. For example, general ellipsis has its source of text in the preceding natural language statements. Response ellipsis has its source of text determined by the response and the preceding sentence. Nonfinite verb (infinitive or participle) clauses can have ellipted elements. Nonfinite verb clauses with ellipsis are processed to replace the ellipted elements from specific sources in the sentence, the context, or state representation memory. Morphological state representations and ellipsis replacements for ellipted words are determined to be correct during subsequent state representation processing or purpose processing. If a clause is found to be inconsistent with respect to state representation or stored experience and knowledge, the morphological representation and\/or ellipsis replacements are prime candidates for alternate representations or replacements.","The Adjective and State Abstract Noun Selector Method  operates in conjunction with the Concrete Noun State Representation Selector Method  to select the word sense number of adjectives modifying nouns. An adjective word sense number is composed of an identification number, a state value or value range, and an owner word sense number. The owner word sense number is typically a noun word sense number. The state representation of a state adjective is contained in Adjective and State Abstract Noun Representation Memory . A state representation entry in general contains the entry's associated word sense number, pointers to verbs which set the state value if any, adverbial subclasses, which are used to select adverbial functions and which are described below, and pointers to purposes related to the state adjective in Experience and Knowledge Memory .  selects adjective word sense numbers which are compatible with its modifiers including adverbials and non-adverbial prepositional phrase modifiers.  processes adjectives with adverbials which require delayed evaluation.  also stores state values and their relations to entities in the conversation in Context Memory .","The Concrete Noun State Representation Selector Method  for concrete nouns selects a word sense number for each noun in a clause. A word sense number of a concrete noun selects a state representation in Concrete Noun State Memory . The word sense number of a concrete noun contains a word sense identifying number, a type number, a specificity number, and an experience number. The identifying number selects the representation of the general reference of a concrete which is all stored instances of that noun. The type number selects a type of the concrete noun. For example, \u201cfood store\u201d has the type of \u201cstore\u201d selected by \u201cfood\u201d. The specificity number selects a partition of a type. For example, \u201cPolish food store\u201d has the specificness of the \u201cfood store\u201d selected by \u201cPolish\u201d. The experience number of a concrete noun selects a specific instance of the concrete noun. For example, \u201cPolonia's Foods\u201d is a specific instance of a (hypothetical) Polish food store. A zero type number, which implies a zero specificity and experience number, selects all types of the concrete noun. A zero specificity number, which implies a zero experience number, selects all specific types for a given type. A zero experience number selects all instances of a specific type of a concrete noun. A general concrete noun reference has zero type, specificity and experience numbers. A general concrete noun reference in a conversation is in general a composite of more specific references, called versions which comprise the possibly inconsistent descriptions of the general reference concrete noun in the conversation. A specific known reference has nonzero, type, specificity, and experience numbers. A specific unknown reference, i.e., a specific reference which is not specifically stored in Memory , has the type, specificity and experience number which best matches the specific unknown reference.","The state representation associated with a concrete noun word sense number is a set of states with a value or value range and a set of relations to other state representation words. Concrete noun state representations are stored in Concrete Noun State Representation Memory . A state and a value typically corresponds to a natural language adjective. Noun relations include relations to other nouns such as A-Relations, i.e., Associative relations which include: possessive, partitive, function, which are clausal relations, and group relations. Other noun relations include C-Relations, i.e. Comparison relations, S-Relations, i.e. State relations, and T-Relations, i.e. Transfer relations. A C-Relation is a comparison between a state value at the C-Relation to another state value. An S-Relation transfers a state value from a source, usually a modifier, to a destination, usually a modifiee. A T-Relation transfers multiple state values. An example of a T-Relation is a modifier which sets the type number of a noun modifiee. A-, S-, and T-Relations can be implied by direct modification of a noun by a noun, a morphological word modifying a noun, or a prepositional phrase modifying a noun. C-Relations are implied by function words indicating a comparison to another state representation word. A concrete noun's state representation in Memory  contains pointers to states in Memory , and pointers to descriptors of A-, C-, S-, and T-descriptors. These descriptors contain information which includes participants in the relation and values of relations. Relations can also have pointers to other relations including clauses.","The state representation of a concrete noun is organized hierarchically in order to help select the word sense number of a specific unknown noun or of a version of a general reference noun. The hierarchical organization is realized by associating state values and modifier relations with word sense numbers hierarchically. The state representation of a concrete noun contains pointers to super-types (i.e. parents) and subtypes (i.e. children). The state values which are common to most instances of a type or specificity number are only listed with the most general word sense number. For example, \u201cbasketball player\u201d has \u201ctall\u201d associated with the zero specificity number state representation. However, if a specificity number has a different value for the \u201cheight\u201d state, such as \u201cgrammar school basketball player\u201d, the appropriate state value is stored with the specificity number and zero experience number. Also, a specific instance, which has a non-zero experience number, has the \u201cheight\u201d state value which is correct for the individual. Other types of modifiers are handled in the same manner as adjectives. The state representation data structures of this invention not only stores the state representation, but these structures also contain organizations or data which aids in selecting word sense numbers.","Selector  selects word sense numbers of concrete nouns. This method first determines if a reference is a re-reference to a concrete noun. A re-reference does not require further processing. A new reference which is a non-modifying sentence role is first processed by Selector , a method which selects verb word sense numbers.  selects word sense numbers for noun phrase heads which are subjects, and objects which are compatible with a word sense number of the verb. The possible word sense numbers of a noun phrase head are stored in Dictionary . These noun word sense numbers selected by  are the most general word sense numbers which are compatible with the verb word sense number.  also assigns a requirement set of states, conditions, and\/or relations which the selected word sense number must not change because changing these requirements would invalidate the selected word sense numbers. The requirement set is another example of a data structure component which is utilized for word sense number selection. After the processing at , a noun phrase head is processed for its modifiers. Modifier word sense numbers are selected to maintain the word sense number requirements of the noun phrase head if possible. Modifier word sense number selection is complicated by the multiple possible modifiees of a modifier in noun phrases with more than one premodifier or more than one prepositional phrase. If a modifiee is not compatible with a modifier, an alternate modifiee is selected if possible. Another complication of noun phrase modifiers is that coordinated modifiers can imply multiple noun phrase heads as in \u201cwood and aluminum bats\u201d. Another complication of noun phrase modifiers is that relations between nouns in certain cases are modified by adverbials. Also, the modifiers could be elliptical or morphological, in which case, the modifier may require alternate elliptical or morphological processing.  also sets the type of referent for a concrete noun. The type of referents are: specific known, specific unknown, specified general (represented by word sense numbers with version numbers), and unspecified general (zero type, specificity, and experience numbers). In addition to selecting the word sense numbers of the constituents of a noun phrase including prepositional phrase modifiers,  processes word sense number selection for: coordinated noun modifiers and noun phrase heads, noun and adjective subject complements, prepositional complements for adverbial and adjective modifiers, and non-morphological abstract nouns.","Abstract nouns which are a state of an owner, such as \u201chealth\u201d, are called state abstract nouns. The word sense number of a state abstract noun is a combination of a state adjective word sense number and a concrete noun word sense number. A state abstract noun word sense number has an identification number which includes a state value or value range and an owner word sense number, which are components of a state adjective word sense number. In addition, a state abstract noun word sense number contains a type number, a specificity number, and an experience number, components of a concrete noun. A state abstract noun has a data structure in Concrete Noun State Representation Memory  which is similar, but somewhat specialized, to a state abstract noun state representation. The main specialization for a state abstract noun is a pointer to a state representation data structure in Adjective and State Abstract Noun Representation Memory . State abstract nouns are selected by Selector  in conjunction with Selector . The word sense number of a state abstract noun is selected in a method which is similar to concrete nouns. Modifiers of state abstract nouns including function words and adjectives often times select the state value of the abstract noun's state or indicate ownership of the state. For example \u201cgood\u201d modifying \u201chealth\u201d sets a state value while \u201chis\u201d modifying \u201chealth\u201d indicates ownership of the state.","Another type of abstract noun has a word sense number characterized by a clause such as \u201cclue\u201d. This type of abstract noun is called a clausal abstract noun. Typically, the characterizing clause describes the criteria required by an instance of the corresponding abstract noun's state representation. For example, one characterizing clause for \u201cclue\u201d is: \u201cSomething that helps to solve a homework problem.\u201d A clausal abstract noun has a specialization of the state representation of a concrete noun in Concrete Noun State Representation Memory . The word sense number of a state abstract noun contains an identification number, a type number, a specificity number, and an experience number which are essentially the same as the equivalent in a concrete noun word sense number. The clausal abstract noun has a pointer in  to its representation in Clausal Abstract Noun and Clausal State Representation Memory . Another specialization for a clausal abstract noun is that  may contain pointers for certain modifiers of the clausal abstract noun that point to modifiees other than the clausal abstract noun. These other modifiees are usually in the characterizing clause. Clausal abstract noun state representations are selected by Concrete Noun Selector . A component of the word sense selection of a clausal abstract noun is to select some or all of the sentence role referents in the characterizing clauses. The state abstract noun referent, called the representational referent, is typically selected. A referent is found by utilizing categories of referents which are contained in group A-descriptors associated with the referent. A direct category contains word sense numbers which are matched with word sense numbers in Context Memory  to select a referent. An indirect category contains noun and adjective word sense numbers which are requirements to be met by a word sense number in  to select a referent. If no match from the context is found, a general referent is assumed for the unmatched sentence roles. Adjectives modifying such abstract nouns which did not have a stored modification in the state abstract noun's representation in Memory  are converted to adverbs by adding suffixes if possible by the Morphological Processing Step , and these generated adverbs are checked to determine if they modify the verb in the clause.","At this point in the Selector  and Selector  method, concrete nouns and their modifiers, and non-morphological abstract nouns have been replaced with pointers to their state representations which include all that is known about the state of the concrete nouns including state values just set by modifiers and state values already set before and stored in the context. Prior to the processing of concrete nouns and non-morphological state abstract nouns, non-state representation words and implied functions have been selected and evaluated except for certain functions which have delayed evaluation. Pronouns have also been tentatively replaced with a pointer to a referent in the context. Other function words have had their function selected and evaluated. Ellipted elements have been replaced. Morphological words have been processed. Nonfinite verb phrases and morphological words implying clauses have also been processed.","The next step is to perform the Clausal Abstract Noun and Clausal State Representation Selector  method. During the processing of concrete noun and non-morphological abstract noun phrases which are non-modifying sentence roles, i.e., main sentence roles, Selector  selected word sense numbers for such sentence roles, i.e., subjects, indirect objects, and direct objects.  also selected a word sense number for the verb which is compatible with the main sentence role nouns. The selection of these word sense numbers comprise the first phase of the verb word sense number selection. The first phase selection process is complicated by coordinated main sentence role constituents. One complication is that multiple verb word sense numbers may have to be selected because the multiple constituents imply multiple verb word sense numbers for a single verb, and thus imply multiple separate clauses. Another complication is that certain constituents actually are special usages such that such a constituent is not semantically intended to perform its sentence role. For example, \u201cMary and her baby went shopping.\u201d really means \u201cMary went shopping with her baby.\u201d In this example, the \u201cbaby\u201d did not go \u201cshopping\u201d, but instead the \u201cbaby\u201d accompanied \u201cMary\u201d.","The verb word sense number selected in the first phase is only partially selected in the first phase. A verb word sense number contains an identification number which defines the verb word sense number, and includes partial to complete word sense identification numbers of main sentence roles. The verb identification number(s) are selected in the first phase. The verb word sense number also contains a type number, specificity number, and experience number. The type number selects a set of processes which are purposes which describe the realization of the verb's result state. A process or other type of purpose is said to realize process or purpose in the sense that the set of clauses associated with a process or purpose are added to the context which is the same as stating the clauses of the process or purpose. Stating clauses makes them real (assuming the clauses are true) with respect to the present invention. In general, a verb process is a set of clauses which accomplish the result states associated with a verb. The result state of a verb is a set of states and values associated with the affected sentence role element or other entity. The state representation of a verb is stored in Clausal Abstract Noun and Clause State Representation Memory  for a verb word sense number. contains the process independent format for the data of a state representation and includes: the result states and values for each affected entity, pointers to the word sense number's pointers in Clausal Abstract Noun and Clause Purpose Memory , a pointer to shared adverbial data structures, a pointer to the typical process of the verb word sense number in Experience and Knowledge Memory , and a list of adverbial data structures which select processes of the verb word sense number. contains the format for the requirements of main sentence roles to perform the typical process of the verb word sense number. depicts the format for adverbial data structure elements which are specific to a verb word sense number. contains the format for the state representation of a verb word sense number which includes the process type, specificity, and experience numbers. This format includes: specific requirements of main sentence roles beyond the typical process requirements to perform the process associated with a verb word sense number; joint\/separate criteria for multiple constituent sentence roles; a list of adverbial data structure elements which are specific to the verb word sense number including adverbials which are required for the process to be performable; and a pointer to the process associated with the word sense number in Memory .","The phase 1 verb word sense number selection method creates requirements for all possible word sense numbers of a stated verb. In the processing of main sentence roles at Selector  for concrete nouns for sentence roles with coordinated constituents, it is possible that different constituents require different verb word sense numbers. The phase 2 verb word sense number selection method first determines which constituents must form separate clauses for different word sense numbers, and forms separate clauses as needed.","The phase 2 process also processes the stated adverbials modifying the verb in a clause under process. The function associated with an adverbial is selected by matching an adverbial subclass which is possible for a verb with a possible adverbial subclass associated with the adverbial. An adverbial modifying a verb can be a function word, a morphological word or a prepositional phrase in English for example. A clause can also grammatically act like an adverbial, but such a clause adverbial is processed as a clause. A verb's or other modifiee's adverbial subclass contains a semantic role, and source requirements for the adverbial modifier which includes a function, a general or verb specific set of parameters. An adverb's subclass contains a semantic role, a source requirement for the adverbial modifier, a destination requirement for the modifiee, and a function which realizes the effect of the adverbial upon the modifiee of the adverbial. A modifiee's adverbial subclass matches a modifying adverbial subclass if the semantic roles match and the source requirements and destination requirements are met. The range of semantic roles are broadly: time, space, process, modality, (point of) reference, purpose. Broadly, the function is to set some aspect of the verb's word sense number such as: setting semantic role parameters, selecting a word sense number of the verb, selecting or modifying an aspect of a process which achieves the verb's word sense number, modifying the resulting states of the verb's word sense number, and\/or commenting about the verb's word sense number. Applying the function to the modifiee realizes the modifying effect of the adverbial upon the modifiee of the adverbial. An adverbial can possibly have more than one adverbial subclass which matches the verb's or other modifiee's adverbial subclasses. The most likely adverbial subclass of an adverbial is selected by ordering the adverbial subclasses in the most recently used first in the context order. The most likely adverbial was most recently stated in the conversation. Processing a prepositional phrase adverbial typically requires evaluation of noun prepositional complements at Selector . The  method also processes coordinated adverbials which may imply separate clauses. Clause adverbials are set up for purpose processing. The processing of adverbials modifying other parts of speech utilizes the adverbial selection method of .","The phase 2 verb word sense number selection method also optionally selects the possible processes of the verb word sense number. The possible processes are selected by matching additional requirements and checking for the status of required adverbials in the clause or in Context Memory . Such required adverbials may not be explicitly stated in the clause, but instead are contained in the context. Each process can have joint\/separate criteria which is utilized to determine if a clause with multiple constituents joined with a conjunction implying joint sentence role membership actually requires separate clauses. For example, \u201cand\u201d can imply joint sentence role membership. Separate clauses could occur for example when a process requires the subjects to be at the same location, but actually the subjects are at different locations. Each possible process of a verb word sense number in a clause with such coordinated main sentence role constituents is set with a joint\/separate status indicator.","The Selector  method also evaluates mood for verbs. Other processes of the  method include: coordinating the conversion of adjectives to adverbials, and determining the adverbial subclass including function evaluation for certain modifiers of clausal abstract nouns and certain modifiers of adjectives modified by non-adverbial prepositions; and determining the aspects of a source clause of a clausal T-Relation that are to be transferred to the destination clause of the clausal T-Relation. This Selector  method is for state setting verbs. Relation verbs such as \u201cto be\u201d, \u201cto have\u201d (in the sense of \u201cto possess\u201d) have the relation selected by Selector .","After the verb word sense number of a clause has been completely processed at , the next step is to perform the Purpose Identifier  method. This method utilizes the clausal state representation. This method attempts to find a purpose relation with the current clause and the clauses and states in the context of the conversation, and in this way performs discourse analysis. Associated with the state representation of a clause are the set of purposes which that clause can be related to. Each purpose has pointers to the preceding and succeeding clauses which are within or related to the purpose. A state and a value can also be related to a purpose. Thus, a clause with a relation setting verb can also be related to a purpose when such verbs indicate a state value relation. Also, stored noun relations can also have associated clauses with purposes. The associated clauses contain information for the relation. Thus, any clause can potentially have a purpose. A noun relation has an associated clause pointer to the clause stored in Concrete Noun State Representation Memory . A clause has a pointer to its purposes in Clausal Abstract Noun and Clause Purpose Memory . A state and a value or value range has a pointer to its purposes in Adjective and State Abstract Noun Purposes Memory . contains the format for a purpose node entry. An entry contains the owner word sense number, i.e., adjective, abstract noun, or verb. The entry also contains the purposes associated with the word sense number. The purposes are organized by the type of purpose, i.e., the purpose's function such as consequence. Each purpose has a purpose address and a pointer to a purpose realization entry in Memories  or .","A purpose address, illustrated in , contains an identifier and category information. The purpose's identifier contains a location component and a function component. The location component is the address of the purpose node table and entry number in Memories  or . The function component indicates the information or relation contained in the purpose. The purpose can contain a function descriptor purpose which can be a word, phrase, or one or more clauses. The function descriptor purpose describes the function at the level of detail appropriate for the application. The category information of a purpose includes a path type number, a path specificity number, and an experience number. A path type number is associated with all paths of the purpose realization in Memory  which end in a common leaf node. A path specificity number is associated with path that has at least one unique sub-path among the purpose addresses with a common path type number. An experience number is associated with a specific path in Memory .","A purpose node entry, as illustrated in , have purpose addresses organized by function with an associated relative frequency for the purpose address in that function. Also, a purpose address in a purpose node entry has a pointer to a purpose realization entry, as depicted in . A purpose realization entry has a data structure which stores the purpose node entries which own the purpose realization entry, i.e. purpose node entries which have pointers to the purpose realization entry. The purpose realization entry contains purpose addresses of purposes related to the purposes owning the purpose realization entry. These purposes are categorized by function including: processes which realize the owning purpose's clause, consequence purposes of the owning purpose, motivation purposes of the owning purpose, and other types of purposes specific to a particular purpose. The other purposes include: advantages, disadvantages, alternatives, qualities, etc. Finally a purpose realization entry has a pointer to the purpose realization entry's Experience and Knowledge Memory  entry which is illustrated in . The Memory  entry contains: the address of its purpose realization entry address in Memory  or ; Memory  addresses of preceding entries of the current entry and access conditions for each preceding entry which must be satisfied for the preceding entry to possibly precede the current entry; Memory  addresses of concurrent entries of the current entry and access conditions for each concurrent entry; Memory  addresses of succeeding entries of the current entry and access conditions for each succeeding entry; and information related to the preceding, concurrent, and succeeding Memory  addresses.","The entries in Memory  define a directed graph of nodes. A node has an associated purpose, and a node has an associated natural language clause. A path of a purpose in the directed graph has a set of nodes and associated clauses which describe the purpose associated with the nodes on the path. The clauses of a path is said to realize a purpose. The clauses in a path which realize a purpose have a common purpose relation. A purpose relation is any concept that labels one clause or more than one related clause. For example, a purpose for setting computer operating system parameters contains the clauses that describe the settings and how to set them. A clause in a conversation is related to stored experienced and knowledge by finding a purpose of the clause which is common to the purpose of one or more other stated or implied clauses in the conversation, and by finding a path of Memory  nodes which have satisfied access conditions with the values for satisfying conditions stored in Context Memory  from the natural language statements of the conversation. If a value or data for a condition is not stored in , the application of the invention determines if the condition with the missing value is satisfied according to the goals of the application. A purpose path can have a purpose address for a stored purpose realization, or a purpose path can have a new combination of clauses which realize a new purpose realization. To summarize, a clause has an associated purpose node entry. A purpose node entry has purpose addresses of the clause with associated addresses of a purpose realization entry for each purpose address. A purpose realization has related purpose addresses and a pointer to a Memory  entry which corresponds to a node of a directed graph. The nodes on a path in the directed graph and the nodes' associated natural language clauses realize a purpose through description of the purpose. A realized purpose is feasible, or assumed to be feasible, for the context of the conversation. Feasibility is assumed for hypothetical or predicted situations for example. Thus, an instantiation of a purpose can be determined by the states of a context or situation.","Clauses are represented by word sense numbers of verbs, adjectives, or abstract nouns in Experience and Knowledge Memory . Verb word sense numbers are directly convertible into natural language clauses. A characterizing clause associated with a clausal abstract noun is also directly convertible into a natural language clause. Clauses of adjectives are realized with the owner of the adjective as a subject with the adjective as a subject complement such as: \u201cJohn is sick.\u201d State abstract nouns are expressed as the owner of the state abstract noun, a form of \u201cto have\u201d with a \u201cto possess\u201d word sense and the state abstract noun such as: \u201cJohn has good health.\u201d Nouns and relations between nouns can have associated clauses which belong to purpose paths in Memory . Thus, all types of state representation words can have related experience and knowledge in Memory .","The REL-SELECT method of the Purpose Identifier  first searches for a match of the current clause's related purposes with a purpose established in the conversation. A purpose is established if it has two or more stated clauses on its purpose path, or if the purpose identifier function is stated. The purpose addresses in the purpose node of the current clause are checked for matching the established purposes in the conversation. After established purposes are checked for, purposes between the current clause and application dependent other clauses in the conversation are checked for. The method also invokes a classifying purpose, a special type of purpose stored in Memory  and described below, which determines a possible purpose relation of the current clause. Multiple classifying clauses can be invoked. Sometimes a related purpose is not found. A related purpose would not be found for a new purpose which is being added to the conversation for example. If the REL-SELECT method fails to select any purpose relation, the clause is set to a default description purpose.","A clause with a default description process is temporarily accepted as a correct interpretation. The Communication Manager determines when alternatives related to a default description purpose are to be performed depending upon the application and the status of the application. For example, in subsequent conversation, the clause with a default description purpose will either become related to the conversation or not. If this clause does not become related, this clause is assumed to be an aside, i.e. a clause which is not directly related to the conversation. If it becomes related to the conversation, this clause's purpose will also be determined through its relation to the conversation. Also, if no related and consistent purpose is found for a clause, one or more of several other alternatives can be performed for example depending upon the application and the status of the application: reinterpret the current clause by either looking for an alternate possible clause implying word sense number or by reinterpreting the sentence role with the lowest confidence level, wait for a situation dependent number of sentences for the anomaly of no known purpose to be explained and then failing to get an explanation\u2014issue a clarifying question, accept the clause interpretation if the current clause meets expectedness and plausibility criteria in the context of the conversation and assume the current clause is a new topic or an aside (a clause unrelated to the conversation), assume the clause is related by random occurrence in time for certain situations, or immediately issue a clarifying question. The selection of the alternative depends upon the application and the status of the application.","If REL-SELECT finds a stored purpose relation or a stored purpose relation is designated between the current clause and other clauses of the conversation, a feasible purpose path is optionally searched for in Memory  by the PATH-FIND method of Purpose Identifier . PATH-FIND attempts to find a purpose path between the current clause and the other clause in the conversation of the stored purpose relation. An application of the invention may utilize more than one of the found purpose relations be processed for finding a path. The correct direction between the current clause's node and the other clause's node is selected. Nodes in that direction which have satisfied access conditions, and possibly satisfy application specific conditions, are kept in the search. The search continues until the other node is reached, or all possible paths have failed. In this case, another possible purpose found by REL-SELECT or another designated purpose relation is processed with the same method. The PATH-FIND retraces the search upon the failure of a node to satisfy its access conditions or other conditions. The PATH-FIND method searches for all feasible paths of a purpose concurrently. The concurrent search of multiple paths has the advantage of eliminating the need to determine which paths have been checked, and nodes which fail to satisfy access conditions can be used to prune other paths which include such a node in their paths.","The PATH-FIND method also searches for processes to realize a verb word sense number, and searches for paths which realize state value changes for states. PATH-FIND is further generalized to allow the stopping of its method upon the failure to satisfy a node's access conditions or other application dependent conditions. In this case the application can decide how to proceed. This stopping is useful for solving problems which are similar to previously solved problems which have been stored in Memory . Upon failure at a node under this situation, the application can attempt to determine how to proceed with the new problem so as to use part of the previously solved problems. This stopping is also useful for gathering which conditions have to be overcome for a proposed purpose path. If PATH-FIND fails to find a feasible path, the alternatives are similar to the options for the default purpose relation of REL-FIND.","The PURPOSE-MANAGER is another method of Purpose Identifier . The PURPOSE-MANAGER controls the activation of REL-SELECT and PATH-FIND for an application. The PURPOSE-MANAGER also activates Plausibility and Expectedness Checker  which is described below. Other tasks of the PURPOSE-MANAGER include: computing time relations of a clause to the conversation, processing the computation of a clause's modal which implies the truth value of the clause, interfacing with the application for determining the application's communication with respect to the current clause or with respect to the application, and generating a data structure which contains the knowledge and experience which is used to generate natural language for output such as the application's communications.","Classification purposes are a special stored type of purpose in Experience and Knowledge Memory . A classification purpose has paths in Memory  which are used to classify an object associated with a particular classification purpose. The first node of a classification purpose contains access conditions which are satisfied to reach the next node. Paths are traced for a classification purpose with PATH-FIND. PATH-FIND traces paths until all paths have no succeeding nodes or all paths have failed to meet access conditions. PATH-FIND utilizes another type of ending or failing node method for classification purposes which stores the failing or ending node without retrace. Each ending path has an associated classification component of the object. The classification components are combined to form the classification. For example a classification purpose which classifies the association of a purpose to a clause determines if the state representation of a clause and knowledge and experience related to the clause satisfy access conditions which determine if the clause can be associated with the function of the purpose. The utility of classification purposes for associating purposes is that they are a compact method for characterizing purposes compared to storing numerous paths of purposes obtained from experience. For example, the set of questions asked by a student seeking a tutorial can be varied in content and order. A classification purpose can determine what additional communications beyond answering a student's questions will help the student learn the knowledge. A general advantage of classification purposes over other decision methods is that classification purposes can be formed through natural language description through an application of the invention.","Dynamic Purposes are another special stored type of purpose in Experience and Knowledge Memory . A dynamic purpose has a set of purpose paths which are traced concurrently by satisfying access conditions as other types of purposes. Dynamic Purposes differ from other types of purposes in that certain ending nodes have associated processes which are executed when the node is accessed. An example of a possible dynamic purpose application is the process which would implement driving a car. There are various purpose activities such as: accelerating, braking, lane changing, turning, etc. A dynamic purpose for driving a car would trace paths as conditions change. When an ending node is reached, its associated process would be performed. Dynamic purposes can be used to control interactions during the execution of an application of the invention. Another use of dynamic purposes for the invention is to utilize dynamic purposes to select and apply sub-purposes which implement problem solving activities. Another use of dynamic purposes for the invention is to partially implement the Communication Manager  (CM). The CM initializes the invention for communication, handles errors or exceptions, and manages text output and other forms of outgoing communication. The CM controls communication from optional application processes of the invention including for example applications that: manage storage of experience and knowledge; control access to experience, knowledge and methods; have special purposes for answering\/asking questions about meaning of words; store requests needing special authorization; and similar executive functions. The CM is partially implemented with dynamic purposes.","A plausibility and expectedness check method is performed by the Plausibility and Expectedness Checker  in conjunction with the storage or retrieval of experience or knowledge. Each time the state representation of a clause is accessed for the first time, the Plausibility and Expectedness Checker  is optionally activated by the PURPOSE-MANAGER. The plausibility check determines if the clause and purpose path linking it to the conversation is likely or not. The expectedness check determines if the clause and purpose path is stored in the invention's state representation memories, and experience and knowledge memory. Plausibility is measured by the benefits of the doer(s), i.e., the performer, of the clause and the benefits to the receiver(s), i.e., the owners, of the result states set by the clause. The benefits are estimated with stored knowledge and experience organized into a classification purpose. Other plausibility measures are specific to the application of the invention.","Expectedness is partially based upon the relative frequency stored from previous experience. The relative frequency is the number of times the interpreted clause has occurred divided by the number of times all alternative clauses including the interpreted clause have occurred. The alternative clauses represent the experience or knowledge which has previously been stored for the same context or the most similar context. The alternative clauses can have their relative frequencies calculated based upon experience, or the relative frequencies can be assigned permanently, or the assigned relative frequencies can be updated through experience. The expectedness of the constituents of the clause are also measured. The expectedness measure has a value range between expected and unexpected. A clause which has been previously stored, and which is consistent with the context of the conversation and previously stored experience or knowledge is expected. The unexpectedness measure of an access are the components of the clause and the components of the related purposes of the clause which have not been previously stored. A non-extreme expectedness value is calculated by measuring the number of matches for qualifying criteria which are applicable for the clause and for the purposes in knowledge and experience memory.","A criterion can contribute an equal value of expectedness or each criterion can have a specific value of expectedness. An overall combination of expectedness and plausibility is calculated utilizing equal or varying weights for each component of plausibility and expectedness. This combined value is then compared to a threshold value associated with an application. If the combined value exceeds the threshold, the interpretation is accepted. If the plausibility check falls below a threshold or the expectedness check fails, the checker communicates with the Communication Manager . Then depending upon the application, the Communication Manager activates dynamic purposes which select for example one or more of the following alternatives: selecting a sentence role to be reinterpreted and invoking the selector which interprets the sentence role; wait for a situation dependent number of sentences for the anomaly to be explained and then failing to get an explanation\u2014issue a clarifying question; immediately issue a clarifying question. The selection of the alternative depends upon the application and the status of the application.","The Context Memory Controller  method is performed upon the Context Memory  after a clause has been understood in terms of stored experience and knowledge. The Context Memory Controller  is invoked by the Communication Manager. The state representation of nouns in the clause are updated including relations to other nouns in the context and they are stored in Context Memory . This includes whether the noun is specific and is known or unknown or is general. Also, other lists are maintained by Controller  to aid in selecting a pronoun referent. The state representation of the clause including word sense numbers is also stored. The relation of the clause to the other clauses including the purpose path is stored. Associated with each clausal state representation is a descriptor which includes a stated or implied modal, and a source. Modals indicate the status of a clause and include adverbials and auxiliary verbs such as \u201ccan\u201d. The modal function is associated with the modal. The source values include: stated, implied, assumed, hypothesized, deduced, calculated, application specific, etc. Lists of sentence role participants are stored and associated with clauses. These lists are used in pronoun referent selection and purpose identification methods. Adverbial lists are maintained to aid adverbial subclass selection.","After a clause has been processed for state representation including word sense selection, processed for purpose relation and path selection, and processed for plausibility and expectedness, and had its context stored, the next step is to perform the storage or retrieval of experience or knowledge from the Experience and Knowledge Memory . The application, Purpose Identifier , or the Communication Manager  retrieve experience or knowledge from Memory . For example, after identifying a purpose of a just interpreted clause, if the application requires it, the Purpose Identifier  generates retrievals from Memory  of at least the state representation of the clauses on the path connecting the current clause to the conversation. These retrieval accesses are performed to ensure that inconsistencies, impossible state values, implausible clauses, implausible states, or unavailable entities are not required to relate the new clause to the conversation through the connecting path. The Purpose Identifier  can select the process to achieve the state change of state setting verbs or the selection of the process to achieve the relation between sentence roles for relation verbs depending upon the application and the status of the application. For example, an application which requires separating factual input from fallacious input can have this goal achieved by verifying that the understood clauses could at least be accomplished based upon stored experience and the context. Another application might require the process to meet some objective such as the quickest process. Such a requirement would mean all available processes be checked. Additional accesses could also be performed for applications which require that all possible state representations of a clause be considered. Under this requirement, all consistent combinations of main sentence role word sense numbers are selected. If more than one verb word sense number is found, additional accesses are required to find the interpretation which is best related to the conversation. Still further additional accesses may be needed when one or more purposes on an identified purpose path contradicts a statement in the conversation. Under this situation the Purpose Identifier  finds a new purpose path to replace the contradicted path. If none can be found, a clarifying question can be issued through the Communication Manager  for example.","Other additional accesses may be required depending upon the application and the content of the clause. For example, if the application is tutoring and the clause is an answer to an exercise, the additional retrievals would occur to determine if the student's answer is correct and acceptable with additional retrievals to diagnose an incorrect answer. If the answer is correct, additional retrievals would be made to perform the next operation of the tutoring. This example illustrates a different type of Memory  access: accessing  to select a communication for incoming natural language statements. An application can utilize any known technical method to select a communication including utilizing Memory . One utilization of  to select a communication is to store communication related purposes in a clauses purpose realization entry. A communication related purpose could be: a purpose that realizes a communication, a purpose with paths that describe the difference between incoming natural language statements and the goals of the application, a classification purpose which selects a communication, a classification purpose which classifies the type of communication, a dynamic purpose which invokes processes to generate a communication, etc. The application can then utilize the Purpose Identifier  method to select a communication or set up application specific methods that select a communication. It is possible that no communication would be selected. Also, a communication could be delayed until the end of a sentence, or the completion of a user input for example.","Once a communication has been selected by an application or by one or methods of the invention, the next step to be performed is to generate an output. This step is typically performed after all the steps of an application of the invention have been performed for an input including all additional accesses and method executions associated with an application beyond the understanding method. The output can be a natural language statement. Alternately, the output can be audible, symbolic or graphical for example, and an output is communicated through the Non-Textual Natural Language Interface . The symbolic or graphical output represents the equivalent of a natural language statement. The natural language output is formed by the application selecting clauses from the purpose path(s) for example. These purpose paths have been selected by the additional processing of the application. The application selected clauses are chosen to incorporate the level of detail and explanation which matches the application and status of the application.","The application must select the sentence role referents for the selected clauses of an output communication. Associated with each node of a purpose in Memory  is a representation of a state or clause which is associated with that purpose. The state representation of the clause on the selected purpose path is converted into natural language by instantiating the sentence roles with the corresponding entities from the Context Memory  and\/or the sentence role referents associated with a clause and its associated purpose in Memory  or . The stored sentence role referents of clauses in Memory  would be utilized for example for such circumstances as: adding new generalized sentence roles to the conversation, bringing specific new references into the conversation, and\/or recalling previous specific or generalized references related to the conversation or situation. Some sentence role referents are from the context in Memory  for sentence roles which are specific to the conversation or situation for example. The source of the referents is selected by the application to convey the desired information as determined by the application.","The Communication Manager  sends the clauses selected by the application to Text Generation Step . The method of converting a set of clauses into natural language utilizes the parsing data structure which is also utilized for parsing incoming natural language. Text Output Step  is a method of Natural Language Processor . The tense and related aspects of the verb are set by the application, application status, and\/or output content. Function words are derived from or stored with the experience or knowledge to be output from Memories , , , , ,  or . The first step of  is to utilize a classification process to select clauses which are to be combined into a sentence for clauses have certain purpose relations. Next the main sentence roles of a clause in the sentence are processed. A sentence role already in the context is processed for realization with ellipsis or a pronoun by a classification purpose. Some sentence roles are designated or required to be realized as morphological words.","The realization of nouns is particularly complicated because of the theoretically unlimited levels of modifiers modifying modifiers in a noun phrase and the restriction of the allowed realization types of modifiers modifying their modifiee. For example, certain modifier to modifiee relations require that the modifier be realized as a prepositional phrase. In order for a noun phrase to be realized as a single noun phrase, the modifiees between the prepositional phrase and the noun phrase head must also be realized as prepositional phrases. If such a modifiee can not be realized as a prepositional phrase, the noun phrase must be expressed as more than one noun phrase. Adverbials modifying verbs can be realized in general as function words, morphological words, or prepositional phrases. There are often multiple positions for placement of an adverbial modifying a verb phrase. Certain combinations of morphologically realized adverbials are not stylistically acceptable, and require either different realizations or different position placement if possible. Adverbials realized as prepositional phrases uses the noun phrase generation of Text Generation Step . Adjective phrases utilize both the adverbial generation method and noun phrase generation method of . The modifiers of nouns, verbs, and adjectives may require morphological processing. Coordinated phrases of main sentence role heads and coordinated modifiers are generated as needed. Ellipsis processing including coordination ellipsis and pronoun replacement is also applied to formed main sentence role phrases, formed clauses, and formed sentences. Finally, as phrases are generated, punctuation is added as required.","Text Generation  sends an electronic text form to the Text Out Port  which is connected to a computer system, a video display terminal, a computer program, other computer system apparatus, or electronic apparatus. If the output is to be audible, symbolic or graphical for example, the elements of the clause are translated into the form needed to generate the audio, symbol or graphic element by the Non-Textual Natural Language Interface . This translation is performed by looking up the output representation associated with a state or clause representation. Then the associated output function of the computer system such as a video display terminal or external computer program is activated with the output information associated with the output representation. Also, the output representation from Interface  can include any form of non-textual natural language equivalent generated from natural language text.","It is an object of this invention to provide a new and improved natural language syntax processing method for separating incoming natural language into each word's sentence role and for selecting the order of words for generating outgoing natural language text utilizing the same syntax data for both methods.","It is an object of this invention to provide a new and improved method for selecting the function and in some cases, the associated relation, of all natural language function words for a natural language.","It is an object of this invention to provide a new and improved method for processing a morphological word of a natural language into the state representation associated with the morphological word. This state representation includes function words, the word sense number of the base word, and the word sense number of other state representation words from the context or stored information.","It is an object of this invention to provide a new and improved method for replacing the ellipted words in a natural language statement with their intended replacement from the context or stored information.","It is an object of this invention to provide a new and improved memory system for storing the state representations of adjectives, concrete nouns, clausal abstract nouns, state abstract nouns, and verbs.","It is an object of this invention to provide a new and improved method for organizing and accessing the state representation of a word with a word sense number.","It is an object of this invention to provide a new and improved method for selecting the word sense numbers of concrete nouns, of state abstract nouns, of clausal abstract nouns, and of their state representation word modifiers which is consistent with the state representation of these nouns, with the state representation of their modifiers, with the relations between these words and their modifiers, and with the context of the conversation.","It is an object of this invention to provide a new and improved method for selecting the word sense numbers of state representation word adjectives and of their state representation word modifiers which is consistent with the state representation of these adjectives, with the state representation of their modifiers, with the relations between these words and their modifiers, and with the context of the conversation.","It is an object of this invention to provide a new and improved method for selecting the word sense numbers of state representation word verbs and of their state representation word modifiers which is consistent with the state representation of these verbs, with the state representation of their modifiers, with the relations between these words and their modifiers, with the word sense numbers of the other main sentence role word sense numbers, and with the context of the conversation.","In accordance with these and other objects, it is a further aspect of this invention to perform the selection of verb word sense numbers upon the clauses in a sentence with multiple clauses in an order which simplifies processing of a cataphoric pronoun, i.e., a referent stated in the future of the conversation. The clauses are processed in left to right order. A clause containing clauses in sentence roles is processed after the sentence role clauses are processed.","It is an object of this invention to provide a new and improved method for selecting the purpose relations of a clause which are related to the context of the conversation or situation containing the clause.","It is a further aspect of this invention to use conjunctions including adverbial conjunctions to simplify the selection of purpose relations of a clause by utilizing conjunctions. A conjunction relating clauses can select or limit the possible selections of the relationship of two clauses joined by a conjunction. Certain usages of clauses with ellipsis such as nonfinite verb clauses can also have limited purpose relations.","It is an object of this invention to provide a new and improved method for selecting the paths of clauses comprising experience and knowledge which connect a clause with the clauses in the context of the conversation or situation containing the clause.","It is a further object of this invention to generalize the selecting the paths of clauses to include: paths of clauses which are processes to realize the result state values of a clause, paths of clauses which are processes to realize the state value change of a state, a method to utilize classification purposes which classify an object by finding paths of clauses, a method to utilize dynamic processes which select a process or method by finding paths of clauses, and a method to utilize an application method to select a path continuation when one is missing.","It is an object of this invention to provide a new and improved method for organizing and accessing purpose relations with purpose addresses.","It is an object of this invention to store the context of the conversation in a memory system. This memory system contains the following information from the conversation: the word sense numbers of state representation words and certain related function word addresses, the word sense numbers or function address of their modifiers, purpose relations between clauses including timing and modality of the clauses, paths, a categorization of state representation words for selecting pronoun referents, and adverbial subclasses.","In accordance with these and other objects of this invention, it is a further object of this invention to provide a new and improved memory system for storing and retrieving experience and knowledge with the word sense number of the state representation of natural language clauses and with the paths which are related to the context of a conversation or situation. The accessing of this memory system is improved because it contains experience and knowledge which is compactly represented by word sense numbers. The memory system provides for a robust access by using a representation of natural language words which are relevant to an application in terms of states and\/or functions represented by word sense numbers and function codes. This representation allows for an understanding of natural language input which is consistent with the context, and previous experience and knowledge. Also, this representation is not limited to a set of primitives. Instead, all experience and knowledge is represented at the level of detail at which it has been experienced. Further experience and knowledge can increase the level of detail of experience and knowledge, or further experience and knowledge can combine previously unrelated experience and knowledge in a generalization. Still further experience and knowledge can indicate conditions under which certain experience and knowledge is selected to be more applicable than other experience and knowledge.","It is another object of this invention to provide a new and improved method and apparatus for storing and retrieving experience and knowledge with an address with multiple dimensions and a flexible assignment of dimensional components. One dimension, the word sense number of the state representation of an natural language clause or a part thereof, can represent a specific, general, or partial instantiation. A specific instantiation represents one experience or knowledge unit. A general instantiation represents all experiences or knowledge units, A partial instantiation represents a subdivision of a general instantiation.","It is a further aspect of this invention to have a second dimension for storing or retrieving experience or knowledge which is related to purpose relations expressed or derived from a natural language conversation or a described situation. This second dimension is a purpose address. A purpose address contains an identifier and category information. The category information organizes purpose relations into: a general partition, i.e., all related purpose relations, a partition by designating certain requirements, i.e., purpose paths which have one or more unique subpaths, and a single purpose path, i.e., a purpose which represent one experience or knowledge unit, and thus have a single path.","It is a further aspect of this invention to have a third dimension for storing or retrieving experience or knowledge. This third dimension is the context of one or more related conversations or one or more situations. The context stores the location of the state representation of the conversation including word sense numbers, explicit, implied and assumed experience and knowledge and other information as described for the context storage object of this invention. The context is utilized for selecting the word sense numbers of the state representation, purpose relations, and purpose paths. When a context is not specified, as at the beginning of a conversation, context is built by the conversation, and the context is general. For a general context, all components utilized to make a selection are selected from related state representations and\/or experience and knowledge in the most likely first order or by an application specific method. If the context has not been completely specified for a selection, the unspecified component is selected from related state representations and\/or experience and knowledge in the most likely first order or by an application specific method. This selected, unspecified component is utilized for the selection. If the component is specified, the specified context components are utilized in the selection.","In accordance with these and other objects of this invention, a method is provided to store and retrieve all experience and knowledge which is expressible in natural language and which is selected for storage in the memory system of the invention by utilizing the specific\/general\/partial flexibility of assignment of values to the three dimensions.","It is still a further object of this invention to monitor the interpretation of incoming natural language for plausibility and expectedness. The goal of this monitoring is to ensure that the interpretation of a natural language clause is likely to be correct. The interpretation of incoming natural language is biased by ordering the components to be selected by a process to be the most likely first given the context, and secondarily the most likely first from experience and knowledge. If the plausibility or expectedness of an interpretation of a natural language input falls below a threshold, the interpretation can be checked for alternate interpretations. An alternate interpretation is tried to find the intended meaning of the statement, i.e., the most plausible and expected interpretation. However, a specific application of the invention can make all possible interpretations, reject the implausible interpretations, and select the most plausible interpretation as determined by the application for example.","It is still a further object of this invention to perform additional storage or retrieval of experience or knowledge to accomplish the objectives of an application implemented with the invention. These additional accesses could also be used to perform operations to accomplish the objectives of the invention. Such operations could include but are not limited to: finding experience or knowledge stored internally; finding experience or knowledge stored externally; communicating with external computer programs; solving problems; evaluating a situation; hypothesizing a situation; determining criteria for evaluating a situation; performing mathematical calculations including numerical, logical, symbolic, geometric, and\/or probabilistic; performing simulations; performing calculations in association with an external computer program.","It is still a further object of this invention to make the storage or retrieval of knowledge or experience an interactive process initiated by the invention when certain situations occur during storage or retrieval. Such situations include: failure to address experience or knowledge; addressing experience or knowledge which contradicts the context or previously stored knowledge or experience, e.g., one or more states have two or more values at the same time, or purpose relations which are not consistent; addressing experience or knowledge with an unexpectedness or with a plausibility which falls below a threshold; receiving directives which are inappropriate, disadvantageous, and\/or lead to inefficient or suboptimal situations. When such a situation occurs, the invention generates a clarifying question or other appropriate statement indicating the problematic situation. Such output of the invention is intended to ensure proper communication.","It is a further object of this invention to generate text such as for a communication selected by an application of the invention. This text can describe any stored experience or knowledge, or experience or knowledge provided by the application.","It is still a further object of this invention to provide in a communication which is a response to a question or assignment, experience or knowledge during output which is at a level which is adjusted for the receiver. The output content is adjusted in two dimensions. One dimension, the specificity dimension, is the level of detail and varies from general to specific. The other dimension of output content, the explanation dimension, is the degree of explanation and varies from no explanation up to all that is known about the output content. The specificity dimension is set to match the level of the question or assignment. The explanation dimension is set to a level which provides explanation from a typical level of experience or knowledge up to and including the answer or assignment experience or knowledge. The explanation level of experience or knowledge is adjusted according to one or more factors including: the level of the requested experience or knowledge; requests for greater or lesser explanation; the previous history of interacting with the requester; anticipation of potential pitfalls or problems.","It is a further aspect of this invention that the above objects may be performed in a different order because a different ordering is advantageous to an application. Also, backtracking to a previous step may be required when an inconsistency, implausibility or other possible interpretation error is detected.","It is still a further object of this invention to provide methods for teaching the invention experience and knowledge. One method is to directly fill in the storage structures of the invention. Another method is to express the experience or knowledge to be stored possibly with interactive communication with the invention. Another method is specific interfaces for being taught which include: finding the most similar situation to the one being taught; presenting an interface to indicate the experience and knowledge stored for the similar situation with aids to describe the new experience and knowledge in terms of the previously stored experience and knowledge.","If is a further object of the invention to provide learning by the invention with an application of the invention. A learning application can be accomplished directly by storing the text presented to the invention. Often times, such input is incomplete and requires filing in the details between input statements. The application of the invention can attempt to fill in the details with Purpose Identification Method . The details can also be filled in by first generalizing related examples, and then determining if the generalization provides a consistent explanation of the details between input statements. In this context \u201cexplanation\u201d means a set of clauses which fills in the missing details. A learning application can also be accomplished with a generalized method specific to a storage structure of the invention which asks questions to obtain missing information generally stored in the associated storage structure. The questions and the type of questions are specific to the experience or knowledge to be learned.","In accordance with these and other objects, features and advantages, the invention provides methods and apparatus to take as input natural language text or an equivalent non-textual natural language representation and selects word sense numbers which have associated locations which contain the stored state representation and any stored experience and knowledge all of which either matches a specific occurrence or situation corresponding to the input or which matches the input with some degree of generalization of the input. An input clause is then understood in terms of previously stored knowledge and experience by finding paths in knowledge and experience memory to the locations established in the context of the conversation. Such paths include process paths which are performed to realize the state representation of an input. Such paths also include purpose paths which contain any stored information related to the input location and the context of the conversation and other related experience and knowledge. Such paths can include predictions of what can occur in the future of the situation of the conversation. This method thereby achieves an understanding of the input in terms of stored experience or knowledge. After achieving understanding, the next step depends upon the application of the invention and the situation within the application. Applications include: just-in-time training, tutoring, problem solving, collective memory (the combined experience and knowledge of a group on one or more subjects), exact text search possibly combined with inexact methods such as keyword search, a special purpose interface into a computer system, diagnosing malfunctions, etc. The general process for implementing an application of the invention is to understand an input, perform processing related to the input, generate a communication related to the input as needed, and\/or generate apparatus controlling output as needed.","The memory system of the invention is accessed with natural language through performing a syntactic processing method, a state and a clause representation (semantic) methods, a purpose identification (discourse) method, storage or retrieval of experience and knowledge related to the application addressed by the natural language input, a context update method, selection of communication for output, and text generation for output.","Syntactic Processing Method","The syntactic processing method is implemented in a Natural Language Processor  illustrated in . The Text In Port  accepts natural language text in an electronic form. For example, the source of the text can be scanned in text converted to an electronic form or text from any source in an electronic form. A Natural Language Processor  can also accept text from a Non-textual Natural Language Processor  which converts non-textual natural language into equivalent natural language text in an electronic form. For example, the source of non-textual natural language equivalent can be natural language speech or graphical symbols.","Word Isolation Step ","The Word Isolation Step  scans the incoming text and extracts words by looking for delimiters. Here word is used in a sense to include morphemes. Syntax Parse Step  for a natural language with morphemes separates morphemes into the text representation of morphemes. The text representation of morphemes can correspond to words or symbols which combine into words. A character can have one of three possible delimiting statuses: never delimits, always delimits, sometimes delimits. For example, an alphabetic character never delimits; a space always delimits; a period sometimes delimits. The Word Isolation Step  searches a text string until an always or sometimes delimiter is found. If the character always delimits the word is sent to the Dictionary Look-Up Step . If the character is a sometimes delimiter, the next character is checked. If the next character is never a delimiter, the word has not been delimited. If the next character is a sometimes or an always delimiter, the word has been delimited. An exception to this rule is a hyphen followed by a carriage return\/line feed. In this case, the carriage return\/line feed is treated as a null never delimiter. As such, the carriage return\/line feed is ignored and the next character is checked. Another example is a period followed by a number as in a numerical word such as \u201c3.14\u201d. There are also special delimiters such as \u201c(s)\u201d at the end of a word (to indicate singular or plural number for countable nouns) which do not follow the above delimiting rule. Such special delimiters are found by checking for their patterns during the delimiting process. As each word is delimited, it is sent to the Dictionary Look Up Step .","Dictionary Look Up Step ","The Dictionary Look up Step  verifies that a known word has been delimited. If a word is not found, then either the word is unknown, the word has a spelling error, or the word has not been delimited. First the word is checked for being properly delimited. Such a word may not be properly delimited if it was delimited by a sometimes delimiter, and if the Dictionary  has one or more words which have such a word and its sometimes delimiter as a substring of the dictionary word with the substring starting at the beginning of a dictionary word. Under this condition, the Word Isolation Step  is signaled to send the next word. The next word is checked for a match. If the word has a match following the substring, the word was initially improperly delimited. The substring and the next word are concatenated to form the properly delimited word. If the next word does not have a match with a dictionary word matching the substring and concatenated sometimes delimiter in Dictionary , such a word is misspelled or unknown. In the preferred embodiment of the invention, the Communication Manager  would issue a clarifying question about the word. In an alternative embodiment, a correcting spelling checker would guess the correct spelling if possible. In the alternative embodiment, if a word with a corrected spelling and with a match of a word in Dictionary  could not be found, the Communication Manager  would issue a clarifying question.","The format of Dictionary , illustrated in , is used to verify that a known word has been delimited by checking the dictionary for character matches. However, every known word is not listed. Some known words are matched with special procedures. For example, a word which is capitalized and not at the start of a sentence is assumed to be a proper noun when it is not found to have a character match. Another example is the two types of special procedures for looking up numbers. One procedure accepts any string of numerical characters with certain restrictions for \u201c.\u201d, \u201c,\u201d. This kind of numerical string is treated as a number. The other numerical procedure accepts number strings with more restrictions such as value, length and punctuation. These numerical strings correspond to certain types of numbers such as phone numbers, social security numbers, dates, etc.","The format of Dictionary  in is organized such that each stored word contains: a text entry which corresponds to the word; a representation number which is used to represent the text word; a set of syntax wordsets each with an associated part of speech; an address for a wordset's function selection process and an associated function code, or a set of word sense numbers associated with each wordset (each word sense number has an associated address to the word sense number's state or clausal state representation in another dictionary described below); a list of associated grammar anomalies partitioned by wordset; and pointers to common tables for selecting inflection codes, morphological representation, and\/or to other common tables related to a wordset such as concrete noun's modifying prepositions. The text entry is used for the character searches for an entry match for Dictionary Look up Step . The representation word is used to identify the text word associated with a word sense number in Context Memory . A syntax wordset is a set of words which can syntactically be used interchangeably in a natural language construction. A word's syntax wordset is used by the parser to determine the phrase the word belongs to, and the relation of the word to other words in the phrase. Each entry in Dictionary  has at least one syntax wordset for each part of speech that the entry can be employed in. There is a set of pointers associated with each wordset which starts a phrase with or without ellipsis. This set of pointers is in a common table of Dictionary  with one set of pointers for a wordset. Each pointer in the set points to phrases in the Syntax Phrase Trees  where the wordset starts a phrase. This set of pointers have subsets of pointers associated with the wordset plus affixes and\/or an inflection which starts a phrase. The syntax tree pointers are used by the parser during input to select wordsets and wordsets with affixes and\/or an inflection which start a phrase. The part of speech, and the syntax tree pointers are used to generate natural language output from internally stored experience and knowledge. The address associated with a wordset points to the location of a function word's selection and implementation structures. The function code associated with the entry implies the possible functions of the wordset. If there is not an associated address, the wordset has an associated set of word sense numbers. This set of word sense numbers comprises a state representation interface of the text word. The state representation interface contains an optionally partitioned set of word sense numbers which are implied by the wordset of the text word. The partitions segregate word sense numbers into groups which can be identified during syntactic processing as possibly containing intended word sense numbers. A word sense number can be in more than one partition. The types of partitions can be specific to a part of speech. For example, one partition for verbs is for intransitive verbs. The partitions could also be based upon affixes and\/or inflections. The state representation interface connects a Natural Language Processor  to the state representations of nouns, adjectives and verbs. The interface to state representation is made bi-directional with a separate Address Interface Table of Dictionary  depicted in . In the Address Interface Table, each word sense number has an entry number. Each entry of the Address Interface table has an address to State Representation Memories , , or . This address contains the data structure implementing the entry's word sense number. Each entry also has the representation number of base words in Dictionary  which can imply the entry's word sense number. The representation word addresses the base word's entry in the Dictionary  Base Word Table in . This allows a word sense number to be associated with a text word for output. The state representation address interface allows the particular set of word sense numbers implied by a text word of a particular natural language to be combined into an interface to the state representation. One state representation can be interfaced in this way to multiple natural languages. In general, text words of two or more natural languages will in some cases share some word sense numbers, but rarely will a text word from each of two different languages have the exact same set of word sense numbers. A wordset's grammar anomalies include anomalies related to: number, tense, aspect, comparison, possession, morphology, gender, etc. For example, a grammar anomaly can be used to find or generate the affix or inflection which is correct for an entry. There are several types of common tables associated with a wordset. One common table contains definitions of affixes and inflections associated with a wordset. Another common table, the common generation table, is used to select affixes which change a base word's part of speech to a desired part of speech. The common table formats will be described below.","Another feature of Dictionary Look Up Step  is that normally only base words are stored as text strings for look up in Dictionary . Prefixes are stored and are treated as special entries. The format for affixes and inflections is illustrated in . An entry for an affix or an inflection contains a text entry which is used for matching the affix or inflection. An entry also has an associated affix code for an affix entry or an inflection code for an inflection entry. When a prefix plus base word is received from Word Isolation Step  as the current word, the prefix is matched and noted as a possible word affix for the current word. The affix code is also stored. The characters after the prefix of the current word are continued to be used for matching dictionary words. Since the word has a prefix, it will eventually fail to find a match with a prefix. When the current word fails a match and a prefix has been noted by storing the prefix's associated affix code, the search for a match with the current word restarts at the first character after the prefix. Then the current word's base word will be matched. It is possible that more than one prefix will be found because some prefixes have another prefix as a leading substring such as \u201cin\u201d and \u201cinter\u201d. The prefixes and suffixes are stored before base words with respect to alphabetic order. Within prefixes, the \u201cbase\u201d or the shorter common part of a prefix is stored first. As characters are matched, the shorter common prefix (e.g., \u201cin\u201d) is matched first. After the shorter prefix is matched, a base word match is attempted. If the base word match fails, the match for a longer prefix containing the initially matched prefix is started at the character after the matched prefix. In such cases, only the last detected prefix is noted by storing its affix code. The above procedure continues until a prefix and base word are matched or a base word is matched. Some words can be stored in Dictionary  either as a prefix plus base word or as a base word only such as \u201cinternational\u201d. Such words are selected as a prefix plus base word when the morphology of the word is such that the prefix alters the meaning in a standard way associated with the prefix. Another criterion is storage requirements versus storage limitations. Performance can be increased at the cost of more storage for example.","Suffixes and inflections are detected after base words have been matched. The same basic method used for the prefix and base word matching is used for detecting suffixes and inflections. When a base word has been found it is noted. The match continues until it fails. The characters after the base word are searched for a match with a suffix or inflection. The method used for a single suffix is repeated for a base word with more than one appended suffix. Some base words have either special embedded characters or multiple entries for multiple suffixes. Base words which have spelling anomalies for adding suffixes or inflections have an embedded non-textual character. This embedded character is not used for matching, but the character indicates the class of anomalies possible. For example, the plural of \u201ccalf\u201d is \u201ccalves\u201d. A special character indicating this number anomaly is embedded after \u201cl\u201d. When a special embedded character is encountered, it is noted and indicates a possible suffix location. If the match fails after the character, it is treated as a possible start of an associated suffix or inflection with the embedded character indicating the set of suffixes or inflections. An alternative embodiment would list separate entries for anomalies such as \u201ccalf\u201d and \u201ccalves\u201d. Other base words have unique anomalies and require separate entries for each anomalous word formation. For example, the past tense of \u201cis\u201d is \u201cwas\u201d and requires separate entries for these and other tenses of \u201cto be\u201d. Finally, certain suffixes can either be an affix (e.g., \u201ca surprising result\u201d) or an inflection (\u201cIt is surprising.\u201d). Such suffixes have an affix code. When the affix code is combined with a wordset requiring an inflection code, the combination of wordset and affix code select a morphological function in Morphological Processing Step  which substitutes the required inflection code for the affix code for the syntax interpretation of the sentence. In the above examples, the wordset selected during parsing for \u201csurprising\u201d in the second example requires an inflection and would select a morphological function which substitutes the required inflection code.","After a base word plus affixes or an inflection have been matched in the Dictionary Look Up Step , the next part of Step  is to eliminate certain wordsets from the set of possible syntax wordsets by using the affix or inflection. Each affix or combination of affixes has an associated code. These associated codes are called affix codes. There is a separate affix code for each prefix or each combination of prefixes, and there is a separate affix code for each suffix or each combination of suffixes. Thus a base word with one or more prefixes and one or more suffixes will have two affix codes. Inflections have associated inflection codes. A word will typically have multiple wordsets associated with it. A word can have multiple wordsets even for one part of speech which it assumes. Certain wordsets can not be combined with certain affix codes or inflection codes. Thus, wordsets can be eliminated from the possible set or wordsets with checking for combinations of wordsets and affix codes or combinations of words and inflection codes. Once the wordsets have been eliminated, the possible wordsets are combined with zero, one or two affix codes (e.g., a base word or a word with a prefix and\/or a suffix), or combined with zero or one affix code, and\/or zero or one inflection code (e.g., a word with or without a prefix and\/or a word with or without an inflection). The affixes and\/or the inflection is combined as an appendage of the wordset. The combined wordset, affix code(s) and\/or inflection code is used during parsing to select the syntax interpretation of a sentence. After the syntax interpretation has been selected, the affix code is used to select morphological processing. The inflection code is used for processing the inflection. Also the inflection code is used for certain aspects of Elliptical Processing Step . Next, a table which contains the combinations of wordsets, affixes and inflections is described. This table is used to eliminate wordsets prior to parsing, and the table is used to select morphological processing codes and inflection codes after parsing. The wordset elimination will be described after the table description. The morphological processing is described below.","One aspect of the dictionary is to use common tables of definitions of affix codes and inflection codes. The format for common definition tables is illustrated in . The common tables save memory space because there are many wordsets which have the same common table. Each wordset which can be combined with an affix or inflection has a pointer in its Dictionary  entry to its common definition table. The common definition table contains lists of affix codes, and inflection codes. This table contains codes which can be combined with the wordsets which are associated with the common table. Each affix code has an associated definition composed of: an address descriptor, a set of morphological codes, or the part of speech of the associated wordset of the baseword. An address descriptor is used to calculate an address into the portion of the base word's state representation structure associated with the base word plus affix. A morphological code has an associated function for Morphological Processing Step . Some affix codes have more than one morphological function associated with them. Each morphological function corresponds to one possible representation of the base word plus affix. The definition contains all morphological codes which are possible for an affix. It is also possible that an affix code can have all the functions stored in Morphological Step  associated with an affix for all wordsets which can have that affix. In this case, the affix code's definition contains the base word's part of speech. The part of speech of the base word is used by Step  to select the representation of the morphological word. An inflection code has an associated definition which contains an inflection function code. The inflection function code implies the inflection's function. Some wordsets will use a common table except for one or more anomalies. In such cases, the anomaly is stored in the list of grammar anomalies associated with the entry. The anomaly contains the affix or inflection to be replaced and the location of the replacement definition. The anomaly list of the base word's entry in Dictionary  is accessed to determine if the entry has an affix or inflection anomaly, i.e., the entry and associated affix or inflection has a different definition associated with it instead of the definition of the affix code or inflection code in the common table. If an affix or inflection anomaly is found for the affix code or inflection code, the address of the definition is in the anomaly list and replaces the definition in the common table for the affix code or inflection code. Otherwise, the definition of the common table associated with the affix contains the morphological codes implied by the affix.","Dictionary Look Up Step  accesses Dictionary  to select base words, affixes and inflections. The entry associated with a base word contains the possible syntax wordsets of the base word. In subsequent syntax parsing, Parsing Step  utilizes the wordsets, affixes, and\/or inflections associated with a text word to parse an incoming sentence. As  parses each word, it invokes Step  to look up the next wordset associated with a base word. If the stated text word has an affix or an inflection, Step  checks if the wordset's common definition table has the affix code and\/or inflection code listed in the table. If all the codes are listed in the table, the wordset and any codes are sent to Step  for parsing. Otherwise Step  selects the next wordset of the base word and repeats the check for code listing. Step  provides the possible wordsets and any codes to Step . The intended wordset is selected from the possible wordsets by Parsing Step . The intended wordset is used by Dictionary Look Up Step  to find the word's state representation address in the word's Address Interface Table entry or function selection processing address in the word's Dictionary  entry.","There is another type of common table illustrated in , a common generation table. The common generation table is used to generate combinations of base words and affixes associated with a wordset. The common generation table contains the source part of speech of the associated wordset. The source part of speech is the part of speech of the base word without an affix. Associated with the source part of speech is the set of destination parts of speech. A destination part of speech is the part of speech of a base word plus one or more affixes. Each destination part of speech has a set of pointers to affix definitions. The affix definition has a corresponding affix which when combined with the base word forms a morphological word with the destination part of speech. Morphological Step  accesses the common generation table of a wordset of a base word with the source and destination parts of speech to determine the set of affixes which will change the source to the destination part of speech. Morphological Step  is invoked to generate morphological words in subsequent state representation processing described below.","Syntactic Parse Step ","The Syntactic Parse Step  utilizes the possible wordsets and codes identified in Step  to first find a phrase in the Syntax Phrase Trees . For convenience, the term wordset will refer to a wordset without affix and\/or inflection codes or to a wordset with affix and\/or inflection codes in the following. Also for convenience, the term word includes morpheme for natural languages with morphemes. The Syntax Phrase Trees  are illustrated in and . A syntax tree fragment for a general phrase is depicted in . A root of a tree has one wordset. The words associated with a root wordset correspond to the words which can start the phrase. Associated with each non-leaf wordset is a forward pointer to each wordset which can immediately succeed the non-leaf wordset. Each non-root wordset has a backward pointer to the wordset which can precede the non-root wordset. The words associated with the wordset(s) succeeding a wordset correspond to the words which can follow the previous wordset's word(s) in the phrase. The words associated with the wordset(s) at a leaf of a tree correspond to the last word in a phrase. The phrase syntax trees indicate allowed ellipsis starting locations where one or more contiguous wordsets are ellipted (left out) with a forward pointer at the wordset preceding ellipsis to the wordset just after the ellipted wordset(s). The wordset following the ellipsis has a backward pointer to the wordset preceding ellipsis. Ellipsis starting at the root only has a forward pointer at the root and a backward pointer to the root. The ellipsis pointers have a descriptor to indicate the type of ellipsis and other relevant information which is used in Ellipsis Processing Step  to replace the ellipted words. Optional wordsets are indicated with the same kind of pointers used to indicate ellipsis, and the pointers have descriptors which includes an optional indicator. Optional wordsets can either be present in the phrase or absent. The phrase with optional wordsets is grammatically correct and complete with or without the optional wordsets. Wordsets that can either be ellipted or are optional have an Optional-Ellipted indicator in their descriptors. This descriptor indicator is interpreted to treat their corresponding wordsets as optional wordsets, but the state representation processing will invoke ellipsis processing if the phrase is ambiguous without an ellipsis replacement. The use of the ellipsis and optional pointers has two major advantages. One advantage is that these pointers allow the number of trees representing phrases to be reduced because one tree can be used for complete phrases, phrases with ellipted elements, and phrases with or without optional elements. Also, this reduction in phrase trees reduces the number and size of clause trees (described below) required to represent clauses comprised of reduced numbers of types of phrases, the phrases being represented by phrase trees. The other major advantage is that the tree which combines ellipsis and optional elements simplifies generation of out going natural language because the available choices for phrase generation are located in a single tree and the choices for phrases is also reduced in clause trees. Note that the term tree is not used in the strict mathematical sense. Rather, tree is used in place of a directed graph. A directed graph is a generalization of a tree in the strict mathematical sense.","Each wordset in the phrase is marked with a modifier flag which indicates if the wordset is a modifier or a head of the phrase. Wordsets of morphemes indicate whether they are a word or a symbol equivalent. A symbol equivalent which ends a word equivalent is further marked with a modifier flag. Wordsets in the tree which can optionally be followed by a subordinate clause have a descriptor of this option. The phrase's type, usually the head's part of speech or function, and pointers to clauses in Syntax Clause Trees  which can be started by the phrase including starting a clause with one or more preceding, ellipted phrases are associated with the root node of phrase tree. The information associated with the root is used to make parsing decisions. Associated with the leaf of a tree is a phrase set which the leaf wordset selects. A phrase set contains phrases which can be interchangeably be placed with respect to syntax in a clause of a natural language construction. Grammar information is also associated with a leaf of a tree. The grammar information includes: special usage (e.g., emphasis type), and as appropriate: the case, the tense, number, compatible postmodifiers, and other grammar related information. The basic parsing step is to use wordsets associated with incoming natural language words to traverse Syntax Phrase Trees  to select a phrase set. Some phrase trees can also contain phrase sets at some branches as well as wordsets. For example, a noun phrase can contain adjective phrase sets and preposition phrase sets. The phrase trees are constructed so that optional wordsets or optional phrase sets can be utilized zero or more times. For example, a noun phrase can have zero or more adjectives. Also a phrase head can have an optional compatible postmodifier. Thus, there are not separate phrase structures for phrases with postmodifiers and without postmodifiers for example. Each phrase set has an associated address which points to its syntax tree root and leaf node locations.","The phrase sets from Syntax Phrase Trees  are used to select a clause in the Syntax Clause Trees . A fragment for a general clause is depicted in . The root phrase sets and\/or pointers to subordinate clauses, called clause sets, correspond to an initial phrase or a subordinate clause with an initial sentence role of a clause. Subsequent phrase sets or subordinate clauses in a clause set with a sentence role can follow in the clause. The leaf is the final phrase set in the clause or has a pointer to a clause set of subordinate clauses with a sentence role. The phrase sets and sentence role clause sets of subordinate clauses have forward and backward pointers like the wordsets' pointers in the Syntax Phrase Trees . Some clauses allow subordinate clauses to replace phrases for certain sentence roles. Such clauses have pointers to the clause set at the same location in the clause tree where one or more phrase sets are also located. Such co-located phrase sets and the pointed-to clause sets perform the same sentence role. Grammar information is associated with a clause including: type (e.g., declarative), main\/subordinate, mood, voice, a sentence role and its type for each phrase or subordinate clause in the clause, and other grammar related information. The information is used to select an input interpretation as well as output clauses. The clause syntax tree indicates allowed ellipsis locations where one or more phrases can be ellipted with backward and forward pointers which are similar to the pointers indicating wordset ellipsis in Syntax Phrase Trees . The pointers have descriptors which indicate the type of ellipsis and other relevant information, and the descriptors are used in Ellipsis Processing Step  to replace the ellipted phrases. Optional phrases are treated like optional wordsets in Syntax Phrase Trees . The basic parsing step is to determine whether a phrase set found in Syntax Phrase Trees  can continue a clause in Syntax Clause Trees .","In the following the term ellipsis, the leaving out of words in a grammatical construction, will be used to include all ellipsis types which are currently applicable. There are 7 types of ellipsis: general, coordination, nonfinite clauses, verbless clauses, clauses implied by morphologically formed words, response forms, and comparative clauses. All but morphologically formed words implying clauses are detected by Parsing Step . This type of ellipsis is detected by Morphological Processing Step . The general, nonfinite clause, verbless clauses, response ellipsis, and comparative clause types of ellipsis are always enabled. Coordination ellipsis is enabled when coordination is detected in Step . Coordination ellipsis includes: coordination of clause constituents, coordination of clauses, and subordination of clauses.","The Syntax Parse Step  uses the set of wordsets associated with incoming natural language words to select phrase sets in the Syntax Phrase Trees  (), and these phrase sets further select clause(s) in the Syntax Clause Trees (). The Parsing Step  Process is illustrated in -. The Syntax Trees  are designed to handle grammatical constructions without coordination in the sense that the phrases and clauses are not added for each possible combination of coordination. For example, the Syntax Clause Trees  does not contain multiple copies of the same clause with copies differing in the number of say coordinated subjects. Instead, Parsing Step  handles coordination and subordination by detecting it and linking multiple constructions of the coordinated and\/or subordinated constructions. Thus, the same clause tree is used independently of the number of say coordinated objects in the incoming text. Both coordinated phrases and clauses as well as subordinated clauses are detected and processed with controlling the parsing instead of creating separate phrase and clause syntax trees. The At-Coordination variable is true when either the current word precedes a coordination indicator or the next word is a coordinating, subordinating or correlative conjunction. The At-Coordination variable is also true when current word succeeds a coordination indicator or conjunction. A coordination indicator is a comma, colon, semicolon or a dash in English. The In-Coordination variable of a phrase is true if the phrase could have either phrase coordination, clause coordination, or clause subordination. The In-Clause-Coordination variable of a phrase is true if the phrase could be in a clause which is coordinated or subordinated with another clause.","Parsing Step  starts with step  where the Current-Word is set to the first word of the sentence.  also sets the Current-Clause to be the clause containing the Current-Word. Then step  selects the next unprocessed wordset of the Current-Word and sets it to be the Current-Wordset.  is next and is true if the Current-Word is the first word of the sentence. If  is true,  is next and is true if the Current-Wordset can begin a phrase possibly with ellipsis as determined in Syntax Phrase Trees  and if that phrase can start a clause possibly with ellipsis as determined in Syntax Clause Trees . If  is true, next at  an entry is added to the Next-Phrase-Set for each of the phrases started with the Current-Wordset that also starts a clause. More than one phrase and clause can be started because of ellipsis. For the second and other words in a sentence, more then one phrase can be continued by the Current-Wordset because of ellipsis within a phrase. Each wordset which can start a phrase and a clause for the first word of a sentence as determined at , is added to an entry in the Next-Phrase-Set at . The entry contains the following information: the wordset; the type of phrase utilized by the clause containing the phrase; a pointer to the wordset in the phrase in Syntax Phrase Trees ; a pointer to the sentence role and its corresponding phrase sets and\/or pointers to clause sets of subordinate clauses in the Current-Clause which contain the type of phrase or subordinate clause which contains the Current-Wordset in Syntax Clause Trees ; and pointers to ellipsis in the Syntax Trees  as needed. The ellipsis in phrases is stored with a pointer to the phrase in Syntax Phrase Trees  where the ellipted words were detected. This ellipsis indicating pointer is stored in the phrase set entry which is in the phrase with ellipsis and either immediately precedes the ellipsis for ellipsis at the end of a phrase or immediately succeeds the ellipsis otherwise. The pointer to the syntax tree will be used to select the ellipted words in the Ellipsis Processing Step . Ellipsis of phrases within clauses is stored with a pointer to the ellipted phrases in the Syntax Clause Trees  which either precede the Current-Wordset, or only if the ellipted phrases are at the end of a clause, follow the Current-Wordset. This ellipsis indicating pointer is also used to replace the phrases with Step . The Next-Phrase-Set contains all the phrases which could possibly be currently complete or be continued with a wordset of the next word. Also, each phrase in the Next-Phrase-Set belongs to a clause, its current clause. The Next-Phrase-Set's are stored in a temporary array for later processing in Dictionary Look Up Step .","After  or if  is false,  is next and is true if more wordsets are available for the Current-Word. If  is true, processing continues at . If  is false,  is next and is true if there is another phrase entry in the Current-Phrase-Set. For the first word of a sentence, the Current-Phrase-Set is empty. For later words in the sentence, the Current-Phrase-Set contains phrase entries for all phrases which could be completed or continued with a wordset of the Current-Word. If  is true,  is next, and sets the Current-Wordset to be the first wordset of the Current-Word. After ,  is next and sets the next unprocessed phrase entry in the Current-Phrase-Set to be the Current-Phrase-Entry. After ,  is next as above. If  is false, then  is next.",{"@attributes":{"id":"p-0141","num":"0163"},"b":["1669","1669","1675","1675","1675","1676","1676","1677","16","1676","1678","1678","1678","1679","1679","1680","1686","1679","1680","20","1680","1684","1684","1684","1684","1684","1685","1685","1684","1685","1685","1684","1668"]},{"@attributes":{"id":"p-0142","num":"0164"},"b":["1680","1680","1681","30","30","1681","20","1681","30","1605","1681","1605","1681","1681","1682","1682","1682","1686","1686","1686","1686","1681","1686","1668","1682","1669"]},"If the Current-Word is not the first word of the sentence at ,  is false, and  is next. If the Current-Phrase-Entry has At-Coordination false,  is false, and  is next. If the Current-Word is not the last word of the sentence next,  is false, and  is next. If the Current-Phrase-Entry has In-Coordination false,  is false, and  is next. The current state of the parse is within a clause without coordination.  is true, (CONDITION 1) if the Current-Phrase-Entry can be completed prior to the Current-Word with or without ellipsis, and if the Current-Wordset can start a phrase that can continue the Current-Clause including the start of another clause; or (CONDITION 2) if there is another incomplete clause in the sentence, and if the Current-Phrase-Entry is completable and can complete the Current-Clause, and if Current-Wordset can start a phrase which can continue another incomplete clause in the sentence. First, Syntax Phrase Trees  is checked to determine if the Current-Phrase-Entry can be completed either with or without ellipsis. If it can be complete, then each of the Current-Phrase-Entry completions is used to determine if it can continue the Current-Clause in Syntax Clause Trees  with or without ellipsis. If one or more of the Current-Phrase-Entry completions can continue the Current-Clause, the Current-Wordset is checked for starting each next phrase which can continue the Current-Clause after one or more of the Current-Phrase-Entry completions. Also, if there are incomplete clauses in the sentence, the Current-Phrase-Entry completions are checked for completing the Current-Clause with and without ellipsis. The Current-Wordset is considered to be able to start a phrase if two conditions are met: the Current-Wordset must start a phrase (with or without ellipsis) that is stored in Syntax Phrase Trees ; and the phrase meeting the above condition has a type which can either continue the Current-Clause with or without ellipsis following one or more completed Current-Phrase-Entries as determined in Syntax Phrase Trees  and Syntax Clause Trees , or continue another incomplete clause in the sentence as determined in Syntax Clause Trees  if a Current-Phrase-Entry completion can complete the Current-Clause. Each started next phrase is checked for continuing the Current-Clause after each of the Current-Phrase-Entry completions, and those completions which a particular next phrase can continue are associated with that next phrase. Also, each started next phrase is similarly checked for continuing an incomplete clause and those completions which a particular next phrase can continue are associated with that next phrase. The Current-Clause or another clause can be continued with a next phrase in various ways including for example: continuing a main clause without subordinate clauses; continuing a main clause after a completed subordinated clause; continuing a main clause with a starting subordinated clause with a sentence role; continuing a main clause with a starting subordinated clause (with an ellipted conjunction) which modifies an element in the main clause, or continuing a subordinate clause which continues the main clause. The possible ways of continuing the current clause are listed at the phrase sets and\/or clause sets which can follow a preceding phrase set or clause set as stored in Syntax Clause Trees , and they do not require At-Coordination processing.",{"@attributes":{"id":"p-0144","num":"0166"},"b":["1663","1663","1688","1663","1688","1663","30","1605","30","1688","30","1605","1688","1688","1664"]},"The Current-Phrase-Entry can possibly be continued without ending the phrase even if the Current-Phrase-Entry can end with the previous word's wordset. Step  is performed regardless of whether step  finds combinations to be added to the Next-Phrase-Set. After  or if  is false,  is next and is true if the Current-Wordset can continue the Current-Phrase-Entry with and without ellipsis in Syntax Phrase Trees . If  is true, next at , an entry is made in the Next-Phrase-Set for each way the Current-Phrase-Entry can be continued with the Current-Wordset as determined in . Each entry in the Next-Phrase-Set continuing the Current-Phrase-Entry contains the same information as described for  above. In addition to the information added at , each entry in the Next-Phrase-Set continuing the phrase of the Current-Phrase-Entry has a pointer to the Current-Phrase-Entry. The pointer from such a Next-Phrase-Set entry to the Current-Phrase-Entry is used to link the phrase entries which belong to a syntax interpretation. Also, PHRASE-END is stored in entries of the Next-Phrase-Set for phrases which are completed with the Current-Wordset, and CLAUSE-END is added if the phrase ends a clause. After , or if  is false,  is next as described above.","If the Current-Phrase-Entry has At-Coordination true at , the Current-Word either precedes or succeeds a coordination indicator or conjunction, and  is true. If  is true,  is next.  is true if the Current-Phrase-Entry has Precedes-Coordination true. If  is true, the Current-Word precedes a coordination indicator or conjunction. Coordination ellipsis is enabled when At-Coordination is true. However, it is possible that At-Coordination is true without the Current-Word being in a phrase which is in a coordinated structure. When this possibility occurs, coordination ellipsis would not occur. Thus, enabling coordination when At-Coordination is true causes correct detection of coordination ellipsis. With  true, the Current-Phrase-Entry could be ended possibly with ellipsis and continue the Current-Clause possibly with ellipsis, and the Current-Wordset can form a single word phrase which continues the Current-Clause possibly with ellipsis, and these conditions are checked in .  is true if these conditions are meet at least one time. Step  is similar to step  except for two differences. One difference is that coordination ellipsis is allowed in  but not in . The second difference is that the phrase started in  must be a complete phrase possibly with ellipsis while the phrase started in  need not be complete. If  is true, then  processes the Current-Phrase-Entry for completion and adds each next phrase and wordset to the Next-Phrase-Set as in , and additionally,  processes the next phrase entries for completion. For each phrase completion added to the Next-Phrase-Set at , a pointer to the location in the Syntax Clause Trees  where the phrase(s) following the phrase completion continues the Current-Clause is added to the next phrase entry. Step  marks each added next phrase entry with PHRASE-END. Each next phrase which completes a clause is marked with CLAUSE-END. Any ellipsis in the next phrase is added to the next phrase entry also as in . The In-Clause-Coordination value of the Current-Phrase-Entry is transferred to each next phrase from  that is added in . Also, each next phrase from  is marked with At-Coordination true.","If  is true or false, the Current-Phrase-Entry could possibly be continued with the Current-Wordset with or without ellipsis, and the Current-Wordset must end the continued phrase with or without ellipsis, and these conditions are checked in .  is true if these conditions are met at least one time. Step  is the same as Step  except that coordination ellipsis is allowed only at , and the continued phrase must be completed at . Step  adds each phrase and wordset which meets the conditions at  to the Next-Phrase-Set as in . Additionally, for each phrase completion added to the Next-Phrase-Set at , a pointer to the location in the Syntax Clause Trees  where the phrase(s) following the phrase completion continues the Current-Clause is added to the next phrase entry. Step  marks each added next phrase entry with PHRASE-END. Entries which complete clauses are marked with CLAUSE-END. Step  also transfers the In-Clause-Coordination value of the Current-Phrase-Entry to each next phrase entry from . Finally,  marks each phrase from  with At-Coordination true. After  or if  is false, processing continues at  as above.","If Precedes-Coordination is false at , the Current-Word is the first word after the coordination indicator, and thus the Current-Word must start a phrase possibly with ellipsis including coordination ellipsis. If  is false,  is processed next.  is true if the Current-Wordset can start a phrase with and without ellipsis. If  can not start a phrase, processing continues at  as described above. If  is true,  is next.  is true if any of the next phrases started by the Current-Wordset at  is the same type of phrase as the phrase of the Current-Phrase-Entry. At , if the next phrase started by the Current-Wordset is not a modifier, the type of phrase of the Current-Phrase-Entry is the type of the last completed phrase if it has no postmodifiers, or if the last completed phrase is a postmodifier or part of a postmodifier, the type of phrase of the Current-Phrase-Entry is the completed phrase preceding all postmodifiers including phrases and clauses. If the next phrase started by the Current-Word is a modifier, the next phrase is considered to be the same type of phrase as the Current-Phrase-Entry if the modifier type of the next phrase can modify the type of phrase of the Current-Phrase-Entry as defined in the previous sentence. Also at , if the type of phrase containing the Current-Phrase-Entry is a modifier which does not modify an adjacent modifiee, the next phrase is considered to be the same type of phrase as the phrase of the Current-Phrase-Entry if both are the same type of modifier. The Current-Phrase-Entry's phrase type and the next phrase's type are determined by looking at the phrase's type in Syntax Phrase Trees . This check at  is true when the phrase of the Current-Phrase-Entry is coordinated with a next phrase. This check is also true when one noun phrase is an appositive of another noun phrase. The appositive possibility is detected after Parsing Step  is completed when two noun phrases are found to be marked as In-Coordination without a conjunction. The appositive possibility is determined to be an apposition or coordination of noun phrases with state representation processing to be described later. For each next phrase at  started by the Current-Wordset which is the same type of phrase as the Current-Phrase-Entry, Step  adds such a wordset and pointers as described at  to the Next-Phrase-Set. In addition, a pointer from an entry in the Next-Phrase-Set to the Current-Phrase-Set is added, and each such next phrase entry is marked with In-Coordination as true.","After ,  is next, and is true if either the Current-Phrase-Entry or the Current-Clause containing the Current-Phrase-Entry have an adverbial function. This condition is checked because special rules apply to adverbials during coordination. If  is true, then  is next.  is true if any next phrase started with the Current-Wordset which did not satisfy the requirements at  has an adverbial function or is part of an adverbial clause. If  is true for a next phrase,  is next.  adds the Current-Wordset to the Next-Phrase-Set for each such phrase which starts an adverbial with the same method as is utilized at . Also, each added next phrase entry is marked with In-Coordination as true, and is marked with Adverbial-Coordination as true at . After , processing is set to continue at  which is described below. A next phrase entry is added to the Next-Phrase-Set at  if  is true because  implements a special coordination rule for adverbials. The rule is that an adverbial phrase delimited by a coordination indicator or conjunction is coordinated with a neighboring adverbial phrase or adverbial clause even if the construction is not the same type of phrase or is a clause. Thus an adverb can be in coordination with a clause functioning as an adverbial.","If , , or  is false,  is next. Step  is true if at least one next phrase started with the Current-Wordset at  can start a clause with or without ellipsis. Coordination ellipsis is allowed. More than one clause start may be found in the search of Syntax Clause Trees  at . If  is true,  is next, and is true if one or more main clause starts are found at . If  is true,  is next, and is true if the Current-Clause is completed at the Current-Phrase-Entry with or without ellipsis. If  is true,  marks all main clause starts with Coordinated-Clause-Start. If  is false,  marks all main clause starts with Interpolated-Clause-Start. After  or , or if  is false,  is next.  is true if subordinate clause starts were found at . If  is true, all subordinate clause starts which continue the Current-Clause are marked with Continuing-Subordinate-Clause-Start at . Also at , all subordinate clauses not continuing the main clause are marked with Separate-Subordinate-Clause-Start. After , or if  is false,  is next. At , each clause start is added to the Next-Phrase-Set as described for  except that the marked information for the clause start is also added to the entry. The Current-Phrase-Entry has already been processed for completion at  or . Also at , each added next phrase entry is marked with In-Coordination and In-Clause-Coordination true. After  or if  is false, there are other clause coordination possibilities which continue interpolated clauses and the next step is .","Step  is next and is true if the Current-Clause is incomplete, and if there is an unprocessed clause preceding the Current-Clause, the Current-Preceding-Clause, and if the Current-Preceding-Clause is incomplete in the same way as the Current-Clause. These conditions are checked by comparing the sentence role of the last completed phrase excluding postmodifiers of the Current-Clause and of the Current-Preceding-Clause in Syntax Clause Trees . If the sentence roles are the same, the clauses are incomplete in the same way. Step  is true for an interpolated clause as described in Quirk et al, page 976 for example. If  is true for the Current-Clause and its Current-Preceding-Clause, then  is processed next. At , the Additional-Preceding-Clauses variable is set to false. This variable is used to differentiate between the first preceding clause and subsequent preceding clauses. Then  is processed next. At , if the Additional-Preceding-Clauses variable is false, all phrases found at  (i.e., those that can be started with the Current-Wordset) which can continue the Current-Clause and the Current-Preceding-Clause with and without ellipsis are added to the Next-Phrase-Set as at  with a few exceptions. One exception at  is that all added phrases have a pointer to the Current-Phrase-Entry of the Current-Clause, and all added phrases have separate pointers to the entries of the last wordsets ending the last processed phrase of the Current-Preceding-Clause which are continued by the Current-Wordset. The other exception is the Interpolated-Clause-Continuation, In-Coordination and In-Clause-Coordination variables are set to true for all next phrase entries added at . If the Additional-Preceding-Clauses variable is true, there have been other preceding clauses processed for the Current-Wordset which have resulted in entries added at , and there is at least one more preceding clause which has not been processed at . This preceding clause is the Current-Preceding-Clause. If this variable is true at , each remaining entry that was added to the Next-Phrase-Set during the previous processing of other wordsets of the Current-Word at  is checked for continuing the one or more entries of the Current-Preceding-Clause. All such next phrases which do not continue any entries of the Current-Preceding-Clause have their corresponding entries in the Next-Phrase-Set deleted. Each such Next-Phrase-Set entry which continues the Current-Preceding-Clause has a pointer to each continued entry of the Current-Preceding-Clause added to each such Next-Phrase-Set entry. Also if the Additional-Preceding-Clauses variable is true, entries of the Current-Wordset in the Next-Phrase-Set are checked for continuing the previously processed interpolated clauses. All such Next-Phrase-Set entries of the Current-Wordset which do not continue any entries of one of the previously processed interpolated clauses have their corresponding entries in the Next-Phrase-Set deleted. Each such Next-Phrase-Set entry of the Current-Wordset which continues all of the previously processed interpolated clauses has a pointer to each continued entry of the corresponding previously processed interpolated clause added to each such Next-Phrase-Set entry. After ,  is next, and is true if there are one or more remaining next phrase set entries which have been added at , and if there is a clause which precedes the Current-Preceding-Clause, i.e., the next preceding clause, and if the next preceding clause is incomplete in the same way as the Current-Clause, then  is true. If  is true, then the Current-Preceding-Clause is assigned to be the next preceding clause at . Also the Additional-Preceding-Clauses variable is set to true at . Following , the Current-Preceding-Clause is processed at  with the same process described above. If  is false or after all interpolated clauses have been processed, i.e.,  is false,  is next as described above.","Another phase of the Parsing Step  occurs when a phrase is In-Coordination which means the phrase could be coordinated with another phrase or could be within a coordinated or subordinated clause. If the current phrase has In-Coordination true at , the next step is . Coordination ellipsis is allowed because the Current-Phrase-Entry has In-Coordination true.  is true if the Current-Wordset continues the Current-Phrase-Entry with or without ellipsis. If  is true,  is next and adds the Current-Wordset to a next phrase entry for each different way in which the Current-Phrase-Entry can be continued. Each next phrase entry added to the Next-Phrase-Set contains a pointer the Current-Phrase-Entry, and the added next phrase is marked with In-Coordination true at . The same information stored in an entry at  is stored at . If  is false or after , the adverbial noun combination phrase allowed during coordination may occur, and  is next.  is true if the Current-Phrase-Entry is an adverbial type phrase which is completable with or without ellipsis and which does not have a succeeding modifiee, and if the Current-Wordset can start one or more noun phrases with or without ellipsis. If  is true, the started noun phrases are processed at  next.  adds an entry to the Current-Phrase-Set for each way in which the Current-Phrase-Entry can be completed as at . Each next noun phrase formed with the Current-Wordset at  is added to the Next-Phrase-Set with the same process as described at , and each added next phrase contains pointers to all entries which complete the Current-Phrase-Entry. Also each added phrase entry is marked with Adverbial-Coordination true and In-Coordination true at . If  is false, then  is next, and is true if the Current-Phrase-Entry is a noun phrase which is completable with or without ellipsis and the Current-Wordset starts an adverbial phrase type. If  is true, then step  is performed for completable noun phrases with the Current-Phrase-Entry and for adverbial phrases started with the Current-Wordset. If  is false or step  has been performed, then next at , another possibility is that the Current-Wordset starts a new phrase. The phrase started with the next wordset could continue the Current-Clause or a different incomplete clause as described for .  is true if the Current-Phrase-Entry can end possibly with or without ellipsis and the Current-Wordset can start a phrase possibly with or without ellipsis which continues the Current-Clause or which continues an incomplete clause. If  is true, then  processes all the completions of the Current-Phrase-Entry as at , and all such phrases started with the Current-Wordset are added to the next phrase set at  along with all related information as at  above. The differences between  and  is that coordination ellipsis is allowed at  and is not allowed at .  also sets In-Coordination true for all entries added at . After ,  is next and is true if the Current-Phrase-Entry has In-Clause-Coordination true. If  is true, than all next phrases added at , , and  have In-Clause-Coordination marked true at . If  or  is false, or after  is processed,  is next as above.","The last phase of the Parsing Step  occurs if the Current-Word is at the last word of the sentence at  which makes  true. If the Current-Phrase-Entry has In-Coordination true, coordination ellipsis is allowed for the steps in this paragraph. Otherwise, coordination ellipsis is not allowed. If  is true, then  is processed next.  is true if the Current-Phrase-Entry is ended with or without ellipsis and can continue its Current-Clause, and if the Current-Wordset forms a complete next phrase with or without ellipsis which can continue and end the Current-Clause with or without ellipsis, or which can continue and end a different incomplete clause if the Current-Phrase-Entry ends the Current-Clause with or without ellipsis. If  is true, the Current-Phrase-Entry and each such next phrase meeting this combination of criteria is processed at . At , the Current-Phrase-Entry is processed for completion as at . Also at , each next phrase is added to the Next-Phrase-Set and is processed for completion as at . In addition each next phrase entry is marked as CLAUSE-END true and each type of clause continuation is marked true. Ellipsis, pointers to the completed phrases from the next phrases processed at , and pointers to the syntax trees are added at  as was described at . If  is true or false, the other possible sentence ending condition is processed at .  is true if the Current-Wordset can complete the Current-Phrase-Entry with or without ellipsis, and if the completed Current-Phrase-Entry can continue and complete the Current-Clause with or without ellipsis. If  is true, then  processes each possible combination of clause ending and phrase ending. Each next phrase with such a combination is added to the Next-Phrase-Set, and is processed for completion. Each phrase ending is marked as CLAUSE-END true, the type of clause continuations are marked true, all ellipsis, pointers to the preceding phrase entry, and pointers to the syntax trees are added at  as described in . After  or if  is false,  is next as above.",{"@attributes":{"id":"p-0154","num":"0176"},"b":["1669","1669","16","1670","1670","1670","1670","1672","1670","1671","1671","16","1673","18","1671","1671","1674","1674","16"]},"Dictionary Look Up Step ","After Parsing Step  has finished, after the completion of other function word or state representation processing, or at the invocation of the Communication Manager, the next step is Dictionary Look Up Step . Dictionary Step  takes: the set of phrases, their constituent wordsets and ellipses if any, and any phrase ellipsis from Parsing Step , and performs these following processes as required by the contents of the incoming natural language sentence: generates addresses to state representation words, generates addresses to function word implementation structures, invokes morphological processing, and invokes elliptical processing. Step  combines the results of these processes into the Sentence Data Structure. Step  completes the syntactic processing of the incoming natural language sentence.","The first activity of Dictionary Step  is to access the linked phrase entry structure which represents the syntactic interpretation created in Parse Step . The linked phrase entry are traversed from the entry associated with the last word of the sentence to the first word. In this traversal, the phrase ends and starts are used to separate the phrases. The phrases are organized: into coordinated constituents, into possible appositive phrases, into subordinated clauses, into main clauses, into complete clauses from interpolated clauses, and into coordinated clauses. The phrases are separated and organized by utilizing the marked variables associated with entries during Parse Step .","The next process of Dictionary Look Up Step  is to check each phrase's grammar information in Syntax Phrase Trees  and each clause's grammar information in Syntax Clause Trees  to determine if the phrase or clause is an interjection or an idiom. Each idiom and interjection has an entry in Dictionary . If the phrase or clause is an interjection or idiom, the grammar information contains a pointer to an entry in Dictionary  for the interjection or idiom. Idioms are phrases or clauses which have a special meaning not implied by the words in the phrase or clause. Idioms have a Dictionary  entry which contains one or more pointers. A pointer addresses a location containing the addresses of the word sense numbers which replace the idiom for state representation processing. If the phrase is an idiom,  stores the first pointer from the idiom's Dictionary  entry in the Sentence Data Structure. This pointer addresses the set of replacement word sense numbers which represent the idiom.  also stores a mark indicating the phrase is an idiom and a pointer to the idiom's Dictionary  entry. If the phrase is an interjection,  also stores a pointer from the interjection's Dictionary  entry to represent the interjection.  also stores a mark indicating the phrase is an interjection and a pointer to the interjection's  entry. The processing of interjections is described above in the INTERJECTION section. The next process of Dictionary Look Up Step  is to use each natural language incoming word's wordset in each phrase which is not an interjection or idiom to access the word's dictionary entry in Dictionary . The natural language word's corresponding wordset from Parsing Step  is used to select a word sense number or an address and function code from the dictionary entry's data structure. If the entry contains word sense numbers, the text word associated with the entry is a state representation word. If the entry contains an address and function code, the text word is a function word. If the entry contains word sense numbers, the word sense numbers in the applicable partition in the entry are selected. As described in the Dictionary Look Up Step  section, the word sense numbers of a base word Dictionary  are partitioned by syntactic properties such as: an intransitive verb construction, a word with affixes, nouns modifying nouns, etc. If the text word has one of these syntactic properties with an associated partition in the dictionary entry, its word sense numbers are selected from the partition associated the syntactic property of the text word. Otherwise, the word sense numbers are selected from the partition of all possible word sense numbers. If the text word is for a state representation word without any affixes, no further processing is required prior to semantic processing. Step  looks up the word sense numbers associated with the text word's partition address in the Base Word Table, which is depicted in , and incorporates this address in the Sentence Data Structure. The address will be used to access the state representation word structures for semantic processing.","A wordset in a phrase may represent a function. The function wordset of a word has an address and a function code in the word's Dictionary  entry. The address indicates where the function's selection and implementation process begins. The code indicates the possible functions. Certain wordsets in Dictionary  have a flag which indicates if the wordset can be part of a multi-word function phrase such as: \u201cnot the best . . . \u201d. A multi-word function phrase has multiple function words which combine to select a set of functions from the function words. Function words with the flag are checked to determine if they are part of a multi-word function phrase by accessing the grammar information associated with the phrase in Syntax Phrase Trees . If the function word is part of a multi-word function phrase, Syntax Phrase Trees  contains the address and any code which indicates where the phrase's selection and implementation begins. The code indicates the possible functions and possibly contains an inflection code. The inflection code corresponds to a tense code for verb functions or a plural\/singular flag for noun functions. Step  incorporates this address and code in the Sentence Data Structure. The address will be used to invoke the function processing. All functions are processed in Function Word Processing Step . Step  creates several types of general results including: generating state representation addresses, setting parameters for semantic interpretation processes, setting state representation values, and generating state representation relationships and addresses for processing in conjunction with semantic processing.","If the wordset has affixes, the wordset plus affixes may have an associated address descriptor in the base word's Dictionary  common table or anomalous partition. A wordset plus affixes has its own address descriptor either because the corresponding state representation word has been preprocessed or the state representation word plus affixes has a unique semantic relation to its base. A word plus affixes has a preprocessed address descriptor to save the overhead of morphological processing. A word plus affixes could also have a preprocessed address descriptor because its unique semantic relation would not access the correct semantic information structure through morphological processing. Step  uses the address descriptor to compute a specific address with the base word's designated address or with the first word sense number in the appropriate partition of word sense numbers which is stored in the base word's Dictionary  entry. The address descriptor can contain a designated word sense number address for the base word in the morphological word. The designated address could also be to a specific replacement structure composed of word sense number addresses and addresses of function processing, each with an associated function code. If there is not a designated address in the address descriptor, the first word sense number address in a morphological partition is used to compute the specific address. The word sense numbers associated with a base word are partitioned into a set of word sense numbers used in base words of morphological words. This specific address is the address of a state representation structure which is part of a word sense number data structure, or the associated address points to: a word sense number data structure, a phrase structure or a clause structure. The word sense number, phrase, and clause structures are replacement word sense numbers and functions for the morphological word. The specific address can be directly incorporated in the Sentence Data Structure like the address of a state representation word. These pointed to structures contain a mark which indicates if there are alternate semantic interpretations. These structures are ready to be incorporated in the Sentence Data Structure by Step  for future semantic processing. These structures can also be created by Morphological Processing Step . The contents of these structures is described in the following paragraph.","A word plus affix without an address or address descriptor in its common table or anomalous partition either has a code indicating the type of morphological processing required or the type of morphological processing will be determined from the base word's part of speech, the base word's plus affixes' part of speech, and the affixes at Morphological Processing Step . This information is stored in the common table or the anomalous partition associated with a word's Dictionary  entry. When Step  looks up a word plus affixes without an associated address or address descriptor, Step  invokes Step  to process the word plus affixes. Step  processes the base word plus affixes and produces one of the following results: an address descriptor which is processed to select a portion of the base word's word sense number state representation data structure; a phrase which contains: an address descriptor for state representation word sense numbers, addresses with associated codes of selection and implementation processes for function words, a descriptor indicating phrase heads and phrase modifiers, a mark indicating if there are other morphological processing results possible; a mark indicating a type of required ellipsis processing, or a clause structure of phrases, with each phrase as described in this list.  can contain a function which invokes Ellipsis Processing Step . In some cases,  can be invoked from , or  must be invoked in later processing. In the latter case, a mark indicating the needed elliptical processing is stored in the result by  for later invocation by Step . Also, this result from  is processed by  to select addresses of word sense numbers for state representation words in the phrases or clauses of the result. The addresses, and the phrase or clause structure is incorporated in the Sentence Data Structure by Step .","After all addresses have been looked up for state representation word sense numbers and function words, and after all morphological processing has been performed except for ellipsis processing, Dictionary Look Up Step  creates the Sentence Data Structure. The Sentence Data Structure contains the following information at the beginning of each phrase: the sentence role of the phrase, the phrase head, pointers to the location of any marked ellipsis in the phrase, pointers to any related ellipsis of phrases, a descriptor of the ellipsis, any morphological processing marks, a pointer to the phrase in Syntax Phrase Trees , and a pointer to Syntax Clause Trees . The sentence role of a morphologically processed word is transferred to its morphologically generated representation. The morphological processing marks are generated during morphological processing. All other information is contained in the locations addressed by the pointers to Syntax Trees  created during Parsing Step . Ellipted elements currently contain no information in the Sentence Data Structure except for the pointers to the location of the ellipted elements in the phrase. Ellipted phrases or phrases with ellipsis do contain the following information at the beginning of the phrase in the Sentence Data Structure: the sentence role, any morphological processing marks, a descriptor of the ellipsis, and the pointers to Syntax Clause Trees  and Syntax Phrase Trees . The phrase elements of the Sentence Data Structure also contains as occurring from the processing of the expressed natural language words in the current sentence: the addresses of state representation word sense numbers, a tense code associated with verbs, a singular\/plural flag for nouns, function word codes and their associated addresses of function word selection and evaluation processes for function words, a representation number corresponding to the base word entry of the text word, and a phrase modifier\/head flag. The addresses associated with phrase elements were looked up previously in Step .","Ellipsis, which has been detected during parsing, is marked within phrases and\/or between phrases by Parsing Step . Ellipsis can also be marked by processing morphologically formed words. After morphological processing and the Sentence Data Structure has been created, Dictionary Look Up Step  invokes Ellipsis Processing Step  to replace the marked ellipsis. As Step  builds the Sentence Data Structure, each occurrence of ellipsis is stored in the Sentence Data Structure and in a separate list. After the Sentence Data Structure has been created and the above function word processing is completed, and if ellipsis has been found, Step  invokes Ellipsis Processing Step and sends a pointer to the list containing each instance of ellipsis in the Sentence Data Structure. Step  determines the type of ellipsis and performs the required processing. The result of Step  is to replace each instance of an ellipted element or ellipted phrase with addresses, codes, and\/or flags either from the current or from a previous Sentence Data Structure, or from known replacements whose addresses are stored in Syntax Phrase Trees . The information stored at the beginning of a phrase with ellipsis or an ellipted phrase was stored in the Sentence Data Structure by Step  prior to Step .","After any ellipsis processing, Step  invokes Selectors , , and\/or  as required for state representation processing of the sentence being processed. Function word processing is invoked during state representation processing. Typically, Step  first sends a pointer containing the Sentence Data Structure's location to Selector  if there is a concrete noun, state abstract noun, or clausal abstract noun in the current sentence. Selector  looks up word sense numbers for adjectives,  processes adverbial modifiers of adjectives, and  stores information related to a selected word sense number of an adjective. Selector  uses the Sentence Data Structure to select the word sense number of nouns. Selector  invokes Selector  to select word sense numbers for main sentence roles, i.e., subjects and objects, which are compatible with each other and a verb word sense number of the clause. Selector  also selects the word sense number of verbs including there modifiers and assists in the selection of clausal abstract nouns. The word sense number of the state representation words in the current sentence are selected in terms of the context and previously stored knowledge and experience. After the word sense number or all words in a clause have been selected, the clause is related to the context and previously stored knowledge and experience by Purpose Identifier . Before describing the state representation processing, Function Processing Step , Morphological Processing Step  and Ellipsis Processing Step  are described.","Function Processing Step ","Function Processing Step  performs the function selection and function implementation processes for function words. Function words differ from meaning words in that function words do not have a permanent state representation. Instead, function words imply processing of the state representation to achieve results in terms of the state representation. For example, determiners such as \u201cthe\u201d imply whether a noun reference can be to a specific instance of a noun or to a general noun. Every part of speech has function words. However, nouns implying functions are implemented as pronouns. A function word noun is implemented as a pronoun whose referent is obtained with a specific associated function. For example \u201ctoday\u201d has an associated time setting function. The time setting function sets the referent of \u201ctoday\u201d to be the value of the \u201ccurrent day\u201d.","Pronouns","Pronouns are function words which take the place of verbs, adjectives, adverbs or most commonly nouns. Other words are also processed as pronouns. Nouns which imply a specific function and noun classes with specific associated functions can have their functions selected with the same process used for pronouns. An example of a noun implying a specific function, \u201ctoday\u201d was discussed in the previous paragraph. An example of a noun class with associated functions is numbers. A number can have a specific representation associated with it in the context such as \u201c\u201d of Step  in this description. Numbers can also imply: a noun with the quantity of the number, an element of an mathematical calculation, an adjective with a quantity, etc. In the following, the term pronoun will refer to words processed as pronouns including: pronouns, nouns with specific associated functions, or noun classes with specific associated functions. illustrates the data structure associated with each pronoun. The Referent Properties of contains the part of speech which the associated pronoun can represent. Generally, the part of speech which the pronoun has in the sentence is the same part of speech as the pronoun's referent. For example, \u201cdo\u201d in has a verb part of speech for its referent property. Note that \u201cdo\u201d applies to all tenses of the non-auxiliary use of \u201cto do\u201d. A sub-entry of a pronoun's entry, such as the first line in the \u201cit\u201d entry in , can contain properties describing the referent after the part of speech. For example, the properties for pronouns with a noun part of speech in the sentence can include one or more of the following as needed: person, case, number, gender, place, thing, time, etc. Also, a pronoun having a noun part of speech in a sentence can have a referent which is not a noun such as a clause or a sentence, e.g., \u201cit\u201d in . Actually, the properties are listed for clearness of this description. The data structure corresponding to . has a sub-entry with a category number which corresponds to a set of properties. Each category number has an associated list of elements with the elements having the properties corresponding to the category. The elements of a list are selected by Context Memory Controller  from the conversation and stored in Context Memory . A pronoun often has more than one referent part of speech and one or more categories, i.e., sets of properties, for each referent part of speech. Within a part of speech, the categories are listed in order of relative frequency.","There are two types of properties with corresponding categories which do not have a corresponding list of elements stored in . One of these properties has the value of UNIQUE. The UNIQUE value indicates that the pronoun has only one possible referent. For example, the UNIQUE value is assigned to \u201cI\u201d and to nouns which imply a function such as \u201ctoday\u201d. Also, there can be a special function number in the Special Grammatical Function category associated with sub-entry containing a UNIQUE value. The special function number points to the function which obtains the referent. The special functions perform specific operations and are part of Function Step . The special function obtains the referent and the address of the result, the referent, is stored in the Sentence Data Structure. The other type of property, having a SPECIAL MEANING value, is for a pronoun which has a special meaning associated with a specific usage. This can occur in a clause such as \u201cIt is windy\u201d. This special meaning in clauses is detected in the Syntax Trees  for specific wordsets and a specific clause. A special meaning of such a pronoun is associated with a specific usage by storing a special meaning code for the clause containing the special meaning of the pronoun in the clause's associated grammar information. When such a pronoun is processed for pronoun referent selection, it has a SPECIAL MEANING referent property and has an associated special grammatical function number in its Special Grammatical Function category for each of its special meanings. When this referent property is encountered, the grammar information of the clause is checked for having a function number which matches a special function number associated with the referent property. If it does, the function is invoked and the address of the result is stored in the Sentence Data Structure for subsequent state representation processing. The function associated with the example \u201cIt\u201d replaces \u201cIt\u201d with addresses of the state representation of \u201cThe weather\u201d.","Some pronouns also have other functions at the same time in addition to substituting for a referent. For example, \u201csome\u201d can have a pronoun function and an indefinite adjective function simultaneously. For example, \u201cSome will pass.\u201d In this example, \u201csome\u201d selects a portion of its referent. If \u201cSome\u201d refers to \u201cstudents\u201d, than \u201cSome\u201d is equivalent to \u201cSome students\u201d, which is equivalent to \u201cA portion of the students\u201d. Multiple function pronouns have their additional functions stored in their Special Grammatical Functions category as shown in . The additional functions are stored in the Sentence Data Structure during processing of the pronoun. The stored function is then invoked during subsequent state representation processing. Another type of additional meaning can be implied by the category of a pronoun's referent. For example, consider \u201cYou married that.\u201d In this example the use of \u201cthat\u201d referring to a person implies the added meaning of the speaker having disdain for the person referred to by \u201cthat\u201d in the sentence. Such types of usage also have a function in the pronoun's Special Grammatical Function category of the sub-entry corresponding to usages with additional meaning. This function associates the additional state representation implied by the referent usage with the clause containing such a pronoun.","Each pronoun also has a confidence level associated with it. A pronoun can have a different confidence level for each of its sub-entries. The confidence level varies from low, 1, to high, 4. The 1 confidence level is for pronouns with multiple categories and multiple possible referents for the categories. The 2 confidence level is for pronouns with a single referent category and multiple possible referents. The 4 confidence level is for pronouns with a single referent. The confidence levels are assigned to pronouns, other elements requiring function processing, and state representation words. The confidence level is used in subsequent state representation processing for selecting elements to be reinterpreted when the current interpretation is not acceptable.","The processing of pronouns is to perform a select\/accept\/reject cycle. A rejection is followed by a repeat of the select step. The selection process is illustrated in . The selection process either processes the UNIQUE or SPECIAL MEANING properties, or the selection process look ups the list of elements in the Context Memory  having the category, i.e., set of properties, associated with the current sub-entry. One other selection process is to select elements in a sentence which have the properties of the category. If there is no element in the category list in the context, another sub-entry with a different category for the pronoun is tried. The next referent category has the same part of speech, but has a different referent category. This selection process repeats until a non-empty element list has been found, or until all possible referent categories with the same part of speech have failed. If a non-empty list is found, a pointer to the list is stored in the Sentence Data Structure for the pronoun. The pronoun selection process is suspended, and other function and state representation is performed at Step . If all referent categories have failed and the referent type does not have a cataphoric property, the Communication Manager is informed of the pronoun processing error. If the referent type has a cataphoric property, i.e., a referent which comes after the pronoun, pronoun processing is suspended either until new referents are processed in the current sentence, or if necessary, the next sentence has been prepared for state representation processing. Then the pronoun selection process is restarted, but the possible referents are limited to new elements in the context from the next sentence. One of the possible referent categories is selected as above.","The state representation processing of clauses of the sentence includes an evaluation of the interpretation of the sentence, including the syntax and function word processing, for being consistent with the context and stored experience. If the evaluation is consistent, the pronoun processing is complete. If the evaluation is inconsistent, often the processing indicates what requires reinterpretation, including a part of the syntax or function processing. Otherwise the Communication Manager selects the element to be reinterpreted based upon the confidence level associated with the element. If the evaluation fails, and the pronoun requires reinterpretation, the referent is rejected and the pronoun selection process is restarted. A specific description of pronoun processing is described next.","Function processing of pronouns, PRO-SEL, begins at Step .  is invoked with the designated pronoun in the C-Pro parameter. Step  looks up the pronoun in the Pronoun Property Table, . After ,  is next and is false if the pronoun's entry does not contain a sub-entry with the same part of speech as the pronoun's sentence role. If  is false, Step  informs the Communication Manager of a pronoun part of speech match failure. If  is true,  is next. Step  sets the Current-Sub-Entry to be the first sub-entry which has the same part of speech in its referent type property list as the pronoun's sentence role in the clause containing the pronoun. The sub-entries contain the categories, i.e., sets of properties, which will be used to select a referent list.  also sets RESTART to . RESTART contains the value of the step which restarts the pronoun process. After ,  is next, and is true if the Current-Sub-Entry's category list contains a UNIQUE value. If  is true,  invokes the associated special grammar function which obtains the address of the referent of the pronoun. After ,  is next. Step  finishes the UNIQUE pronoun processing, and sets up a data structure for restarting pronoun processing.  stores the following in the pronoun's position in the Sentence Data Structure: RESTART, ADDRESS, the address of the result, the confidence level of the sub-entry, and the Current-Sub-Entry. ADDRESS indicates that the pronoun entry contains the address of the pronoun referent. After , step  sets processing to continue processing at the caller of this process. If  is false,  is next, and is true if the Current-Sub-Entry's category contains a SPECIAL MEANING value. If  is true,  is next, and is true if the clause's or sentence role's grammar information in its data structure in Syntax Clause Trees  contains a special grammar function number which matches a special function number in the Special Grammatical Function category of the Current-Sub-Entry. The clause which has the grammar information contains the pronoun under processing. If  is true,  invokes the matched function. After , pronoun processing is completed at  as described above.","If  is false, or if  is false, the pronoun referent is obtained from the context of the conversation, and  is next.  is true if the designated part of the sentence or the Context Memory  contains one or more elements in the category of the Current-Sub-Entry, i.e., the property list, of the Current-Sub-Entry. The properties in a property list of a pronoun sub-entry correspond to the properties of the elements of the corresponding category list maintained in Context Memory . However, the CATAPHORICAL property does not apply as a property for selecting a pronoun referent. The designated source of the pronoun referent is determined by the PROP invocation parameter. If PROP is null, the designated source is Context Memory  and the part of the current sentence preceding the pronoun. If PROP is CATAPHORIC and the part of the current sentence succeeding the pronoun has not been processed for state representation, the designated source is the part of the current sentence succeeding the pronoun. If PROP is CATAPHORIC and the part of the current sentence succeeding the pronoun has been processed for state representation, the designated source is the sentence succeeding the current sentence. Note that the lists in Context Memory  indicate which elements are from a particular part of a sentence. If  is true,  completes pronoun processing.  creates a list of SDS pointers to elements contained in the designated part of the sentence.  stores the following in the pronoun's position in the Sentence Data Structure: RESTART, REFERENT-LIST, a list of SDS pointers combined with a pointer to the category list in  from , the Current-Sub-Entry, and the confidence level of the sub-entry. The REFERENT-LIST symbol indicates that the pronoun processing resulted in a list of possible referents. Step  also transfers the address of a special function contained in the Special Grammatical Function category of the Current-Sub-Entry to the pronoun's position in the Sentence Data Structure. The operation of  is separated into storing and transferring operations because the storing operation always has an element to store, but the transferring operation only stores an element if it is present in the sub-entry. Not every sub-entry contains a special function. The special function address will be accessed to invoke the function in subsequent state representation processing. After ,  continues processing at the caller of this process.",{"@attributes":{"id":"p-0174","num":"0196"},"b":["22211","22213","22213","22213","22213","22214","22214","22208","22213","22215","22215","22223","22223","22223","22216","18","18","22216","22207","22223","22217","22215","22215","22222","22222","22222","22207","18","22222","22217","22217"]},"In subsequent state representation processing, the current possible referent list may not contain a suitable referent, i.e., a failure occurs. One failure type occurs at Selectors ,  or  when the selector may determine that the current referent list is the wrong category for the referent. For example, the referent list could have the wrong category, i.e., the wrong properties, because the clause requires a clause referent for the pronoun instead of the current list's category as a type of noun referent. Another failure possibility is that none of the elements in the current list are compatible with the other sentence role state representations in the clause at the selector. Another failure possibility is that the referents in the list do not form a clause which is consistent with the current context or previously stored experience and knowledge. Another failure possibility is that the clause is not consistent, and the Communication Manager selects the pronoun to be reinterpreted and instructs the selector to obtain another referent with all referents in the list having previously been tried unsuccessfully. Another failure possibility is that the pronoun has a CATAPHORICAL property, and the processing has been suspended until the next sentence is processed as described above. Upon the occurrence of one of these failures, the selector restarts pronoun processing immediately for all but the failures related to a CATAPHORICAL property. The CATAPHORICAL property failures are started when a suitable referent is possibly available as described above.","The selector restarts pronoun processing by accessing the pronoun's position in the Sentence Data Structure to obtain the RESTART value. The RESTART value, , is the step which restarts pronoun processing. The selector can send a request for a specific category list as described above. Upon restarting,  is performed first.  is true if the selector has requested a specific category. The CATG invocation parameter is null if there is not a specific category, or CATG contains the specific category. If  is true,  is next, and is true if the pronoun's entry contains a category which was requested. If  is true,  sets the Current-Sub-Entry to be the sub-entry corresponding to the requested category. After , processing continues at  as described above. If  is false, or if  is false,  is next.  restores the Current-Sub-Entry to be the sub-entry number contained in the pronoun's position in the Sentence Data Structure. This sets up pronoun processing to continue at the next sub-entry. After , processing continues at  as described above.","Adjective Function Words","These adjectives are function words which affect the state representation of the nouns they modify. The articles such as \u201ca\u201d, the\u201d, the zero article and other such adjectives indicate whether a modified noun is a specific or general reference to the noun. A specific noun reference exists in the context or in stored experience, and has one state representation instance for each different specifically referenced noun. Specific and general reference nouns have an associated group descriptor which includes a group size. For singular count nouns, the group size is one. For noncount nouns, the group size is \u201cnoncount\u201d. A plural specific reference noun has a group size associated with the state representation for identical instances of the noun. However, a plural specific noun can have a state representation for each different member or subgroup in the group. Each state representation associated with a specific plural noun also has a group descriptor. A general noun reference is a composite of a subset of all the specific nouns which have been stored in experience, and can reference parts of several state representation instances of the referenced noun. Each composite of specific nouns describing a general reference noun has a group descriptor. There can be more than one composite for a general reference noun. Also, a plural noun can have a mixture of specific or general references. Another way to look at these reference types is that they access the state representation of a noun in different ways. A general noun reference accesses the typical instance of the noun, but all state and property values stated or implied in the conversation replace the corresponding typical value. It is possible for different usages of general reference noun in a conversation to have inconsistent values for one or more states or properties. Inconsistent means that the combination of states and properties never occur together. Inconsistent values cause multiple versions of a general noun to be formed. Each version differs from the other versions by having a different value for one or more states or properties which are inconsistent. The version which is consistent with the sentence and context is selected. The specific reference accesses a single instance of state and property values. A specific reference instance noun can not have more than one value for a state or property. Also a specific reference can not have state or property values which are not consistent.","The article \u201ca\u201d nearly always implies a general reference, and \u201cthe\u201d nearly always implies a specific reference. The zero article is the absence of an article. Note that the zero article is detected in Syntax Phrase Trees . The zero article nearly always implies a general reference, and is the plural\/noncount equivalent of \u201ca\u201d. One case when \u201ca\u201d refers to a specific reference is when the source of the conversation assumes that the noun is unknown to the receiver when the noun is introduced in a conversation. There are a few cases when \u201cthe\u201d modifies a singular noun with a general reference. One case occurs when the reference is to the typical member of the class. \u201cthe\u201d also has an implied general reference when it modifies a plural nationality noun (e.g., \u201cthe Americans\u201d) and when it modifies adjectives which refer to a group of people (e.g., \u201cthe brave\u201d). One case when the zero article implies a specific reference is when the noun phrase represents a unique role or task (e.g., \u201cHe is (zero article) president of the company.\u201d) The functional processing for the articles and other adjectives implying a reference type is to store the default reference type and an associated identifier in the group descriptor. The group descriptor is stored at the adjective's position or the position of the first function word of a phrase comprised of multiple function words in the Sentence Data Structure (SDS). However, special cases are detected and select the default for the special case. If the referenced noun is stated with a different default reference type, the reference is initially assumed to be a new reference different from the previous reference.","The default reference type may be updated with subsequent state processing of the conversation by Selector . The referenced noun is initially assigned the default type. If the noun has a general reference or has a specific reference which is currently not defined such that a single instance in Memory , , or  is accessed, Selector  assigns the noun to address the typical instance of the noun. The case of \u201cthe\u201d modifying a singular general reference noun is detected in subsequent conversation. For example, a noun preceded by \u201cthe\u201d is initially assigned the specific reference type addressing the typical case on its first reference if such a noun was not specified sufficiently to select only one instance. If the noun continues to select a single instance, it is a specific reference. If the noun is described to have inconsistent characteristics, the noun is changed to a general reference type. If a general reference noun deviates from the stored typical reference, the general reference noun's characteristics are stored as the typical case with the deviations stored in Context Memory . The exception case of the zero article modifying a specific role or task, which are abstract nouns, is handled by the way abstract noun state representations are accessed in Memory . Briefly, abstract nouns accesses generally result in finding an entity in the context or experience which meets the characteristics of the abstract noun representing roles or tasks. Thus, in accessing the role or task abstract noun, if a specific entity is found, the reference is specific. Otherwise if only a general reference entity is found, the reference is general.","If the noun has already been accessed and the type of reference is changed from general to specific, the noun is marked specific assumed unknown by Selector  if the previously general noun is consistent with the new specific noun reference. This exception case for \u201ca\u201d results in use of the typical instance of the referenced noun initially. The case can be a mechanism for indicating that the text source is describing a type of specific reference noun which the source assumes is unknown to the receiver, i.e., a specific unknown reference. Thus if a general reference noun is changed to a specific reference, it is marked a specific assumed unknown reference. A specific unknown referenced noun is assumed to have typical state and property values except for state and property values set from the conversation which differ from the typical values. In this regard it is similar to the representation of a general reference noun. However, a specific unknown reference noun must have only a single value for a state or property and must have all state and property values allowed to occur concurrently, i.e., be consistent. Both these conditions differentiate the specific unknown reference from the general reference. In summary, the process provides a method for accessing general and specific noun references. Also, the exceptional article and other function adjective reference implication cases are handled by detection mechanisms which apply the proper reference type.","The function word adjectives often have a reference setting type function and one or more other functions associated with associated with them. For example, the demonstrative adjectives, \u201cthis\u201d, \u201cthat\u201d, etc., implies a function of setting the noun they modify as being relatively near or far with respect to time or space when a \u201cthis\/that\u201d or \u201cthese\/those\u201d pair is used to modify referents with different time or space values. \u201cThis\u201d implies its modified noun is relatively near. \u201cThat\u201d implies its modified noun is relatively far. \u201cThis\u201d is used to modify nouns related to time when the time is present or future. \u201cThat\u201d modifies time nouns for past times. The demonstrative adjectives also imply a default specific reference for the modified noun. The demonstrative adjective's function processing is to identify and store the specific reference type and the near\/far state indicator in the demonstrative adjective's position or the position of the first word of a multiple function word phrase in the SDS for later assignment to the modified noun's group descriptor. The reference type and near\/far state indicator is accessed during interpretation of the state representation (to be described below). The near\/far state is used to differentiate non-time nouns with respect to space at least conceptually. The near\/far state is used in the state representation of time to differentiate the past from the present and future. This near\/far indicator setting is an example of a special function associated with function word adjectives.","Some of the indefinite adjectives (e.g., \u201call\u201d, \u201ceach\u201d, \u201csome\u201d, \u201cmany\u201d, etc.) have two basic functions associated with them or as part of combinations of them with other function words. One basic function is to set a selection method for the members of a group modified by an indefinite adjective. A group of members is implied by a plural noun. For example, \u201ceach\u201d selects all members of a group one at a time. The other basic function sets various types of quantizations. The indefinite adjectives can also set the reference type. Usually the indefinite adjectives modifying a plural noun indicates a general reference. \u201cboth\u201d is an exception. Usually the indefinite adjectives modifying a singular noun indicate a specific unknown reference. The indefinite adjectives can usually combine with \u201cof\u201d to select a portion of a specific group noun (e.g., \u201cmany of the girls\u201d). These multi-word function phrases such as \u201csome of\u201d are detected in Syntax Phrase Trees , and the information to select the proper function processing is stored there in an associated grammar information structure.","The indefinite adjective function processing includes setting the default reference type for the modified noun. If the indefinite adjective has a selection function, the group descriptor is marked to indicate the members to be selected according to the indefinite adjective function. The group descriptor contains: a referent type, a group size, a group selection criteria, exclusion functions and related information, inclusion functions and related information, comparison functions and related information, and other information implied by modifying function words. For example \u201ceach\u201d has a group descriptor containing a group size equivalent to \u201cthe whole group\u201d. The selection criteria of \u201ceach\u201d is equivalent to \u201cone group member at a time\u201d. The reference type, group size, and selection criteria are identified and stored in the adjective's position or the position of the first word in a multiple function word phrase in the SDS. This information is used in subsequent state representation processing when the group has been identified. The group descriptor describes the range of membership in the group. Indefinite adjectives with a selection function can be modified by structures with exclusion functions (e.g., \u201call but Tom\u201d), inclusion functions (e.g., \u201call students including Tom\u201d), degree adverbs (e.g., \u201calmost every\u201d), negation functions (e.g., \u201cnot all students), and quantization adjectives (e.g., \u201ceach 10\u201d). These functions modify the group descriptor contents or add additional information to the group descriptor. These additional functions are stated in multi-word function phrases which are detected in Syntax Phrase Trees  and stored there as a phrase function associated with the function word phrase in the containing phrase's grammar information. These multi-word function phrases occur in patterns. For example, the multi-word phrase \u201cnot nearly all the students\u201d is an instance of the pattern: (negation function) (degree adverb) (selection adjective) (article) (group or plural noun). Each pattern has a set of functions. The set of words filling a pattern correspond to parameters used by the set of functions associated with the pattern. The parameters and set of functions are processed to realize the functions associated with a particular instance of a multi-word function pattern. The functions or results are identified and stored in the portion of the group descriptor normally associated with the function in the first function word's position in the SDS.","Exclusion functions exclude members from a group. The exclusion portion of the group descriptor is appended with a function address for the exclusion function and pointers to the excluded members. The exclusion function is then executed in subsequent state representation processing when the group and the excluded members have been identified. The exclusion function can also set criteria for excluding members. These excluding criteria are also stored in the exclusion portion of the group descriptor. Also the exclusion function can be a subordinate clause which typically sets criteria for selecting excluded members or sets conditions when the selected members are excluded. Exclusion clauses are detected by position and the subordinating conjunction in Syntax Phrase Trees . Such exclusion functions have an associated pointer to the start of the exclusion clause. The start of the exclusion clause is in the SDS. The exclusion function, and any exclusion criteria are identified and stored in the exclusion function portion of the group descriptor of the first function word's position in the SDS. The exclusion function is executed when the state representation processing has identified the group and has evaluated the clause of the exclusion function. Then the excluded elements are removed from the group, or the group descriptor is qualified with the exclusion function by including a pointer in the group descriptor which points to the state representation of the exclusion clause. The group descriptor or a pointer to a group descriptor is stored in Memories , , , or . Inclusion functions are processed as the exclusion functions are. The difference between inclusion functions is that they either specifically include members, describe criteria for selecting members, or set conditions for the inclusion.","Negation of a selection adjective causes some possible changes to the group descriptor. Also, a negation function in a multi-word function including a selection adjective can cause different changes for the negation of the same single selection adjective without the other words in the multi-word function. For example, one change caused by a negation function is to zero the group size of the group descriptor (e.g., \u201cnot any\u201d). Another example change caused by a negation function is to imply a less than default group size (e.g., \u201cnot all\u201d changes the group size from \u201centire\u201d to \u201cless than entire\u201d). Another example change caused by a negation function is to alter the selection criteria (e.g., \u201cnot just any\u201d changes the selection criteria from \u201cnone\u201d to \u201cunspecified criteria\u201d). A negation function can also change the function of exclusion functions. For example, \u201cnot any except this car\u201d, selects a group which only includes \u201cthis car\u201d. The negation function associated with a selection function or other multi-word function phrase is stored in The Adjective Function Definition Table (to be described below) and is selected by the phrase. After selection of the negation function, the function is performed and the result or the negation function is identified and stored at the adjective or the first word of a multi-word function phrase in the SDS for subsequent execution. The adjective's position or the first word of a multi-word function phrase is called the NORMAL POSITION.","Degree adverbs modifying selection adjectives usually modify the group size of the group descriptor. Degree adverbs which diminish the modified entity have an associated degree number which is typically less than one but greater than zero. The degree number is obtained by Dictionary Look Up Step  with a call to adverbial processing as described below. The degree number is stored in the SDS at the degree adverb's position by . A degree adverb can also be modified by other degree adverbs (e.g., \u201cvery nearly every\u201d). These degree adverbs modifying other degree adverbs which amplify degree such as \u201cvery\u201d have an associated degree number greater than one. The degree numbers associated with all modifying degree adverbs are typically multiplied together, and the result is typically multiplied by the group size, and the result replaces the group size. The group size is identified and stored in the group descriptor at the normal position in the SDS. A degree adverb would be the first word in \u201cvery nearly every\u201d for example. Normally, the exact group size is not known during the processing of function word adjectives. However, the group size multiple is calculated, identified and stored in the SDS at the normal position. In subsequent state representation processing, the modified noun and its group descriptor are identified. Then the group multiple stored in the SDS is multiplied by the identified group size. If the group size is known, the known value is used. If the group size is not known, the typical group size associated with the noun comprising the group is used. An exception to the degree adverbs modifying selection adjectives occurs for \u201cany\u201d. The degree adverb modifying \u201cany\u201d changes the selection criteria of \u201cany\u201d from the equivalent of \u201cnone\u201d to \u201cunspecified criteria\u201d (e.g., \u201cnearly any student\u201d). The quantization adjectives either effect the group descriptor or the selection criteria when they are combined with selection adjectives in multi-word function phrases. The quantization adjectives are described below.","The members of the group modified with a selection adjective are obtained through using the group descriptor with the selection criteria by Selectors  during state representation processing which succeeds function processing. The selected group members have property and state values set when the state representation of the clause is processed. If the group modified by a selection indefinite adjective is enumerated in the context, the selected group members can be selected and set to the state and property values which the noun representing the group is set to in the clause. Consider the example: \u201cTom, Dick and Harry are students . . . . Each student passed the exam.\u201d In this example, \u201ceach student\u201d is replaced by \u201cTom\u201d, \u201cDick\u201d, and \u201cHarry\u201d individually for state representation processing. Thus, the state representation context has the equivalent of \u201cTom passed the exam\u201d, \u201cDick passed the exam\u201d, and \u201cHarry passed the exam\u201d.","If an enumerated group is modified by an adjective function word or multi-word function phrase which modifies the entire group, the individual members of the group are modified by the function adjective or multi-word function phrase, and each individual member has its state representation modified by the containing clause. If an enumerated group modified by a function adjective or multi-word function phrase has less than the entire group modified by the function adjective or multi-word function phrase without indicating the excluded members (e.g., \u201cany student\u201d), an additional group representation is added in Context Memory  for the modified group, and the state representation of the modified group is set to state and property values from the clause interpretation. The additional group partition is linked to the noun's group representation. If the group modified by a function adjective or mult-word function phrase is not enumerated by member and the function adjective or mult-word function phrase modifies the entire group, the state representation of the group is set to the state and property values implied by the clause containing the group. If such a group is modified by a function adjective or mult-word function phrase which modifies less than the entire group, an additional group representation is added to Context Memory  with the modified portion indicated and has the original group's state and property values except for the state and property values changed by the clause containing the selected portion of the group. The representation of the portion of such a group is linked as part of such a noun's group representation.","A group without enumeration is represented as a set of nouns which has typical state and property values except for those set in the conversation including those which indicate group state or property values in Context Memory , Memory , Memory , or Memory . A group with enumeration is represented as a list of specific nouns. A noun group with or without enumeration has a group descriptor which contains any partition information. This partition information designates partitions of the group which contain state and property values which differ from the entire group. Partitions can occur when less than the entire group is modified. A group descriptor or a pointer to a group descriptor is stored in Memories , , , or . A group descriptor and the specific and\/or typical reference nouns comprising the group are linked by group relation indicators in Memories , or . The group descriptor stored in the SDS is the basis for the processing which can result in the modification or creation of a new group descriptor in Memories , or .","If the indefinite adjective modifying a noun group has an associated quantization type and quantization value. The quantization type has an associated function which utilizes the quantization value as a parameter. The quantization functions set information in the group size or group selection criteria of the modified noun. The quantization type and value are identified and stored in the SDS for subsequent processing. The quantization types include: relative portion quantization (e.g., \u201csome\u201d), relative quantization relation (e.g., \u201cmore\u201d), approximate quantization (e.g., \u201ca couple\u201d), numerical quantization, order quantization (e.g., \u201cfirst\u201d), and multiplier quantization (e.g., \u201ctwice\u201d). From the example in a previous paragraph, \u201cSome of the students passed.\u201d, the function of \u201cSome of\u201d is to quantize a partition of \u201cthe students\u201d by setting the partition's group size with a value associated with \u201cSome\u201d. The quantization value associated with an indefinite adjective such as \u201cSome\u201d is a numerical fraction which varies from zero (e.g., \u201cnone\u201d, \u201cno\u201d) to less than one (e.g., \u201cquite a lot\u201d) to one (e.g., \u201call\u201d). The quantization type and value for a relative portion quantization adjective are identified and stored in the group size of the group descriptor at the normal position in the SDS for processing after the modified group has been identified or created. For this type of indefinite adjective modification of an enumerated group, the enumerated group representation has a pointer to a group representation without enumeration with the group size set by the modifying indefinite adjective and with the state and property values of the group representation changed by the containing clause. The same group representation would be created for a nonenumerated group which is modified by an indefinite adjective which quantifies a portion of a group. If the group is enumerated, the size is known. The size may also be known for a nonenumerated group. If the group size is not known, the typical group size associated with the noun comprising the group is used. The quantization function for most of the relative portion adjective multiplies the group size by the adjective's quantization value and stores the result in the group size of the group descriptor of the modified noun after the noun has been identified or created. The quantization value associated with the relative portion quantization adjective \u201cenough\u201d is a descriptor which contains a pointer to a state. The state associated with \u201cenough\u201d is equivalent in meaning to \u201csufficient quantity\u201d, and is owned by the noun group modified by \u201cenough\u201d. The quantization value descriptor has a value which is equivalent in meaning to \u201csufficient\u201d. The quantization type and value are identified and stored in the group size of the group descriptor at the normal position in the SDS for processing after the modified noun group has been identified or created. The processing assigns the state and value to the group size of the modified noun group.","Another type of quantization is the relative quantization relation. This type of quantization sets a numerical ordering relation between group size values of the modified noun and a related noun. Usually the nouns are different references of the same noun, or the modified noun is a subgroup of the related noun group. The relative quantization relation is realized with phrases such as: \u201cmore students\u201d. The quantization type and value are identified and stored in the SDS. The quantization value corresponds to the degree of difference which typically varies from 1 (no difference) to 5 (typical difference corresponding to for example \u201cmore\u201d or \u201cless\u201d) to 10 (maximal difference corresponding to for example \u201cmany, many more\u201d). This quantization value also has an associated relation sign with a value of \u201cmore\u201d \u201cequal\u201d or \u201cless\u201d. The relation sign value of \u201cmore\u201d (\u201cless\u201d) indicates that the owner has a greater (lessor) group size than other owner's group size. The quantization type and value are identified and stored in the group size of the group descriptor at the normal position in the SDS. This type of quantization function is performed in subsequent state representation processing when the modified and related groups are identified. The function sets an ordering relation between the group sizes of the modified and related noun groups. After the ordering relation has been processed, the greater group size has a pointer to the lessor group size and the quantization value including a \u201cmore\u201d relation sign. The lessor group size has a pointer to the greater group size and the quantization value including a \u201cless\u201d relation sign. Equal group sizes have pointers to each other and have an \u201cequal\u201d relation sign. The greater group size contains the quantization value which varies typically from 1 to 10. The equal groups do not contain such a quantization value. There can also be a \u201cless than or equal\u201d or a \u201cgreater than or equal\u201d relation. These relations have a relation sign of \u201cless\u201d for the former and \u201cgreater\u201d for the later. The quantization value is 1-X where X is the maximum amount of difference and means the quantization value varies from none to X. The pointers and related information is stored in Memories , or . The above description of relation pointers occurs for relative quantization relations between different groups of nouns. The relative quantization relation can also indicate group size relations to numerical limits as in \u201cmore than 10 students\u201d. For this type of multi-word function phrase, the relative quantization relation points to the modified noun's group size. The position of \u201cmore\u201d in the SDS contains: a group size of \u201c10\u201d, a quantization type of relative quantization relation, a value of 5, a relation sign of \u201cmore\u201d, and a pointer to the group size in this position. The group size relation just described is processed in subsequent state representation processing to place a quantization value implying the degree of difference and a function symbol implying the relation sign (e.g., greater than or equal) with the group size of the modified noun. Quantization information is used to establish pointers between groups in a relative quantization relation in the sense that the other group is selected to have a group size which is consistent with the relative quantization relation.","Numbers function to set a definite group size in the group descriptor of the nouns they modify. The numerical quantization type and numerical value are identified and stored at the normal position in the SDS for assigning the group size when the noun is identified. The approximate quantization adjectives such as \u201ca few\u201d also set a value for the group size in the group descriptor of the modified noun. The value is numerical with an accompanying function symbol. The function symbol implies that the numerical value is approximate. The quantization type, numerical value and function symbol are identified and stored at the normal position in the SDS for setting the group size of the descriptor of the modified noun when the modified noun has been identified in subsequent state representation processing. The ordinals such as \u201cfirst\u201d set a definite position ordering for a member or subgroup of a group of nouns. The ordinal's quantization value corresponds to the ordering position in the group. The ordinal's quantization type and value are identified and stored in the group descriptor at the normal position in the SDS. When the modified noun has been identified, the quantization type and value are stored in the modified noun's selection criteria in its group descriptor. The multipliers such as \u201ctwice\u201d and \u201cone-half\u201d are multiplied with the modified noun's group size and the multiplication result replaces the group size. The multiplier's quantization value is the numerical equivalent of the adjective, i.e., \u201c2\u201d for \u201ctwice\u201d. The multiplier quantization type and value are identified and stored in the group descriptor at the normal position in the SDS for processing when the modified noun has been identified as described above. Then the multiplier quantization type is implemented with a call to numerical mathematical function which multiplies the group size by the quantization value and replace the group size with the multiplication result in the modified noun's group descriptor. Either the noun's known group size or the typical group size is used in the multiplication.","Indefinite adjectives with an associated quantization function can be placed in multi-word function phrases: with an exclusion function (e.g., \u201csome students, but not Tom\u201d), with an inclusion function (e.g., \u201cmany students including Tom\u201d), with a quantization function (e.g., \u201cthe first ten\u201d), with a negation function (e.g., \u201cnot many students\u201d), and\/or with degree adverbs (e.g., \u201cslightly more students\u201d). These functions combine into multi-word function phrases which are detected in Syntax Phrase Trees  with associated information as described for selection indefinite adjectives. A phrase function is associated with the multi-word function phrases in the containing phrase's grammar information in . The multiple functions set information in the SDS which is used to adjust the group descriptor of the modified noun when the noun is identified. The information stored in the SDS modifies the group descriptor or group selection criteria as described above for selection indefinite adjectives. However, there are additional changes implied by a negation function in a multi-word phrase function. For example, \u201cnot many\u201d changes the quantization portion fraction to one minus the normal quantization portion fraction. Another example is \u201cnot enough\u201d which changes the state value of \u201cenough\u201d to the equivalent of \u201cinsufficient\u201d.","Some function word adjectives can have a role, normally described as an adverbial one, indicating comparison among some gradable adjectives and adverbs. These adjectives include: \u201cmore\u201d, most\u201d, \u201cless\u201d, and \u201cleast\u201d. The comparison function can also be indicated with the suffixes \u201c-er\u201d and \u201c-est\u201d for some gradable adjectives and adverbs. The comparison function of these adjectives and these suffixes are implemented in the adjective function word selection and implementation structure because these adjectives can sometimes have either a quantization function or a comparison function which can only be discriminated by state representation processing. Thus, it is efficient to combine the comparison functions for all possible comparisons including adjectives, adverbs into one selection and implementation process.","Gradable adjectives always have a state representation. When gradable adjectives are compared, their corresponding state values are being compared. Some gradable adjectives such as \u201ctall\u201d have state values which are commonly measured in numerical units. Other gradable adjectives such as \u201csweet\u201d do not have state values commonly measured in numerical units. The absolute gradable adjective such as \u201ctall\u201d is set to the typical or average state numerical value for the typical owner of the state. For a known owner, the known state value is set for \u201ctall\u201d. State values without numerical values have a pseudo numerical value associated with them. The lowest value is one, the typical value is midrange, 5 for example, and the highest value is twice the typical value. The actual range numbers can very depending upon the need for discrimination and the deviation from typical. Thus, gradable adjectives without numerical state values are implemented so that they can be treated like numerical state values. This same description for gradable adjectives also applies to gradable adverbs.","Gradable adjectives with numerical or pseudo numerical state values that are compared with the comparative adjective grade (e.g., \u201ctaller\u201d) imply a numerical value ordering of the owners' corresponding state values. The function of the comparison adjectives or suffixes indicating the comparative function is to set the relationship of the larger state value as greater than the lessor state value. There are two types of gradable adjectives: positive adjectives, and negative adjectives. The first owner of a positive comparative adjective has a greater state value compared to the second owner of the state value for \u201cmore\u201d, \u201cmost\u201d, and the suffixes when they indicate a comparative function. These comparative indicators imply an increasing comparative function. For example, in \u201cTom is taller than Mary.\u201d, \u201cTom\u201d is the first owner with the larger state value of the comparative adjective and \u201cMary\u201d is the second owner. The first owner of a positive adjective has a lessor state value when \u201cless\u201d or \u201cleast\u201d indicate a comparative function. These indicators imply a decreasing comparative function. The first owner of a negative adjective has a lessor state value compared to the second owner of the state value for \u201cmore\u201d, \u201cmost\u201d, and the suffixes when they indicate a comparative function as in \u201cMary is shorter than Tom.\u201d The first owner of a negative adjective has a greater state value when \u201cless\u201d or \u201cleast\u201d indicate a comparative function. The superlative adjective comparison function sets the first owner to have the superlative state which has a greater or lessor state value than the corresponding state value of all other owners in the group which is being compared. The equality comparison function sets the first owner's state value to be equal to the second owner's state value as in: \u201cTom is as tall as Mary.\u201d","The comparison of adverbs is similar to the comparison of adjectives. Adverbs have an adverbial subclass value which corresponds to a state value of an adjective. There are positive and negative adverbs. The same increasing and decreasing indicators of adjective comparison such as \u201cmore\u201d, suffixes, and \u201cleast\u201d are used for adverbs. Adverbs can have equality, comparative, or superlative comparisons. The types of comparisons, increasing, equal or decreasing indicators, and positive or negative adverbs combine to set the same value relations between adverbial subclasses of compared adverbs as they combine to form value relations for state values of compared adjectives. The comparison function sets value relations of adverbial subclasses which occur in different clauses. The first owner of an adverbial comparison corresponds to the clause containing the adverbial with the comparison indicator. The second owner corresponds to one or more clauses in the context. Sometimes the two clauses in a comparative comparison are included in the same sentence, though usually one clause is in an ellipted form such as \u201cTom worked harder than Bill.\u201d Otherwise, the adverbial subclass value in the clause containing the adverbial with a comparison indicator is compared to the adverbial subclass value in one or more previous occurrences of clauses in the context. The equality comparison function sets the adverbial subclass value of an equatively compared adverb modifying a word in the current clause as equal to the value of the same adverbial subclass of an adverb in the nearest clause in the context which modifies the same word sense number of the same word that is modified by the equatively compared adverb in the current clause. The comparative comparison function sets the adverbial subclass value of a comparatively compared adverb modifying a word in the current clause as greater or lessor than the value of the same adverbial subclass of an adverb in the nearest clause in the context which modifies the same word sense number of the same word that is modified by the comparatively compared adverb in the current clause. The superlative comparison function sets the subclass value of a superlatively compared adverbial in the current clause in a greatest or least relation to the value of the same adverbial subclass of an adverb in other clauses in the context which modifies the same word sense number of the same word modified by the superlative adverb in the current clause.","The processing of the comparison function is to identify and store the comparison type and value at the comparison function in the SDS at one of the following positions: comparison indicator (e.g., \u201cmore\u201d) when there are no other function words modifying the compared word, the first word in a multi-word function phrase, or in the compared adjective or adverb when comparison is indicated by suffix without other function word modification. The comparison type and value are identified and stored in the SDS position described in this paragraph for later processing during state representation processing when the owners and state values have been identified for comparison of adjectives. The processing of the comparison function of an adverb is to identify and store the comparison type and value in the SDS as described in this paragraph for processing after the sentence containing the compared adverb has been processed for state representation. The comparison type indicates the grade, which has a value range of: equal, comparative, or superlative, and the value relationship, which has a value range of: decreasing, equivalent, or increasing. An increasing value relationship corresponds to \u201cmore\u201d, \u201cmost\u201d, etc. for positive adjectives or adverbs. An equivalent value relationship corresponds to \u201cas (e.g., \u201ctall\u201d) as\u201d, etc. A decreasing value relationship corresponds to \u201cless\u201d, \u201cleast\u201d, etc. for positive adjectives or adverbs. The comparison value indicates the difference between the compared elements. This value typically has a range of 1 to 10. 1 indicates no difference or equality between compared elements, and 10 indicates the greatest difference. 5 indicates a typical difference between compared elements corresponding to \u201cmore\u201d for example. The value contains a descriptor which indicates the value's relation to the comparison. The comparison type and value are processed: to create pointers between compared states or adverbial subclasses, to set the comparison value and value relationship as was described above for relations between group sizes as implied by relative quantization relation adjectives. In the above description, quantization value corresponds to comparison value here, and relation sign corresponds to value relationship here.","A degree adverb modifying a comparison function changes the comparison value with multiplication of the comparison value by the degree adverb's degree number. The degree number is obtained as described above. If the comparison value is computed below 1 for an equal comparison as it would for: Mary is almost as tall as Tom.\u201d, the value relationship is changed from equivalent to decreasing. Also, the initial computed comparison value is replaced by two minus the initial computed comparison value (which is less than one). The resulting comparison value is greater than one. The grade remains as equal. A comparison with an equal grade and with a decreasing value relationship is interpreted as the first owner's state (or current clause's compared adverbial subclass) as being less than or equal to the second owner's state (or other clause's compared adverbial subclass) for a positive adjective (or adverb) and greater than or equal value for a negative adjective (or adverb). If the comparison value for an equivalent comparison is computed to be greater than one as it would for \u201cMary is at least as tall as Tom.\u201d, the comparison grade and the comparison value are not changed. The value relationship is changed from equivalent to increasing. A comparison with an equal grade and an increasing value relationship is interpreted as the first owner's state value (or current clause's compared adverbial subclass) as being greater than or equal to the second owner's state value (or other clause's compared adverbial subclass) for a positive adjective (or adverb) and less than or equal for a negative adjective (or adverb). The comparison value is reduced to the maximum value when the multiplication of degree numbers corresponding to modifying degree adverbs with the current comparison value results in a new comparison value which exceeds the maximum value. Similarly, if the comparison value for a comparative or superlative comparison is computed to be less than one, the comparison value is set to 1.01.","If the equivalent comparison is negated as in \u201cMary did not work as hard as Tom.\u201d, the value relationship is changed to decreasing, and the comparison value is set to 5. This changes this example to be equivalent in words to \u201cMary worked less hard than Tom.\u201d Negation of the comparative comparison functions causes the value relationship either to switch from an initial increasing value to a decreasing value or to switch from an initial decreasing value to an increasing value. The comparison value is unchanged for this example. Negation of the superlative comparison function causes the comparison type to be changed to comparative, the value relationship to be changed either from initial increasing to decreasing or from initial decreasing to increasing. The comparison value is unchanged for this case. The comparison type also has an appended function symbol which indicates the second owner's state value (or other clause's compared adverbial subclass value) has a superlative value. Thus, \u201cMary is not the shortest student.\u201d is equivalently transformed to: \u201cMary is less short than the shortest student.\u201d This function symbol is interpreted in subsequent state representation processing as setting the first owner's state value (or the current clause's compared adverbial subclass value) with the current value relationship in a comparative (e.g., \u201cless than\u201d) comparison relative to the owner of the superlative state value (or the clause containing the superlatively compared adverbial subclass).","The comparison function can be included in multi-word functions. Besides inclusion of degree adverbs (e.g., \u201cslightly better\u201d) and negation functions (\u201cnot as quietly as\u201d), comparison functions can be combined with exclusion functions (e.g., \u201cthe best student except for Tom\u201d), inclusion functions (e.g., \u201cstudies hardest in mathematics and English\u201d), and\/or quantization functions (e.g., \u201cthe second best student\u201d). The exclusion function and any excluded elements are identified and appended to the comparison type which is stored at the exclusion function portion in the SDS as described above. The exclusion function can set criteria for exclusion (e.g., \u201cthe best student except in mathematics\u201d). Also, the exclusion function can be a subordinate clause which typically sets conditions when the comparison is not valid. The exclusion function is executed when the state representation processing has identified the owners or clauses in the comparison. Then the excluded elements are removed from the comparison setting function, and\/or the comparison is qualified with a pointer to exclusion criteria which are stored in the selection criteria of the group descriptor of the owner, or the excluded clauses are removed from the adverbial subclass comparison relation, and\/or the comparison relation is qualified with the exclusion function by including a pointer from the relation to the state representation of the exclusion clause. This type of relation and comparison relations are stored in Memories , , , or . Inclusion functions are the same as the exclusion functions except that the inclusion functions specify members in the comparison function, and\/or set inclusion criteria, and\/or set qualifications when the comparison is true.","The quantization functions can be combined with comparison function words in multi-word function phrases to set the quantization type and value for the group size formed with the members which meet the comparison function and related functions (e.g., \u201csome of the better plants\u201d, \u201ca couple of the softer pillows\u201d, \u201cthe 10 best workers\u201d). These group size setting indefinite adjectives in the above examples combine with the comparison function in a way that the comparison function is a selection criteria for the members of the group and the adjective sets the size of the selected group. For example, \u201cthe better plants\u201d selects a group of \u201cplants\u201d and \u201csome\u201d sets a relative portion quantization of the group of \u201cplants\u201d. The quantization type and value are identified and stored at the group size in the group descriptor at the normal position in the SDS for later processing as described above. The quantization functions can also set a selection criteria as in \u201csecond best\u201d, i.e., select the \u201csecond\u201d in the ordered list of the compared group of nouns. The ordinal quantization type and value are identified and stored in the group descriptor in the SDS as described above for later processing as described above. The quantization functions can also set the comparison value as in \u201ctwice as good\u201d or \u201ctalked much longer than Mary\u201d, \u201cmuch more beautiful\u201d. These quantization values adjust the comparison value. The \u201ctwice\u201d in the example also changes the comparison grade to comparative and the value relationship to increasing. Thus \u201ctwice as good\u201d is equivalent to better with the first owner's comparison value two times the comparison value of the second owner. The changes to the comparison type descriptor and comparison value are computed, identified, and stored at the comparison function portion in the SDS for later processing as described above.","The degree adverb, exclusion, inclusion and quantization functions combined with a comparison function in a multi-word function phrase are often independent of one another. However, the negation function can change some of the functions beyond what was described by the negation of the comparison function. For example, when a negative function, degree adverb and quantization function combine with a comparison function as in \u201cnot very much harder\u201d, the negation function effects the degree adverb and quantization combined function of setting of the comparison value and does not effect the comparison type as would occur without the degree adverb and quantization functions, i.e., \u201cnot harder\u201d which was described above. For this multi-function word phrase pattern, the negation function causes the quantization portion factor of \u201cvery much\u201d (e.g., 0.85) to be replaced with one-minus the quantization portion factor (e.g., 1\u22120.85=0.15). The quantization portion factor of harder\u201d corresponds to \u201ca little harder\u201d. Another example is the combination of negation, comparison and exclusion functions as in \u201cdid not work the hardest except when . . . \u201d. This combination generates two comparison functions. One function is the negation of the comparison function as described above with the combining of an inclusion function. This inclusion function is the inverse of exclusion function, i.e., the inclusion function is valid when the exclusion function is invalid. The other comparison function is formed with the cancellation of the negative and exclusion functions to form an inclusion function. The example is equivalent to \u201cdid not work the hardest when (inverse of exclusion function) . . . \u201d and \u201cdid work the hardest when (the exclusion function is valid) . . . \u201d. The point of this discussion is to indicate the changes caused by the negation function in multi-function phrases containing comparison functions. The effect of the negation function and the effect of other function changes caused by the combination of function words are implemented with the functions selected and the order of their application which is determined by the multi-word function phrase entry in the adjective function word table to be described below.","The implementation of the comparison setting function including those comparisons which are contained in multi-word function phrases is delayed until the owners of the state values are established during subsequent state processing, or until the clauses containing the processing of the clauses containing the adverbs in the comparison function have been processed. Either or both of the owners could be groups, i.e., plural nouns. The comparative and equative comparison of adverbs is between adverbial subclass values in two clauses. The superlative comparison of adverbs is between the superlatively compared adverbial subclass in the current clause and one or more other clauses in the context. The ordering of the state values between groups or individuals is stored in Memories , or . The ordering of adverbial subclass values between clauses is stored in Memories , or . The above description of the comparison functions assumed that none of the state or subclass values of the elements in the comparison are known. If one of the state or subclass values is known for a comparative comparison, the other is set in relation to the known value. If both state or subclass values of the comparative comparison are known, the implied relation of the comparison statement is verified for correctness. If the relation is incorrect, the Communication Manager is informed of an incorrect comparison statement. Also, the comparison value is set to the actual difference and is marked as such with a function symbol indicating \u201cknown\u201d. For a superlative comparison, the superlative is set in relation to all known values which are also verified for correctness as above.","There are other special functions associated with the indefinite adjectives. These special functions are one of kind, but are generally related to reference type, quantization, selection, and\/or comparison. For example the demonstrative adjectives have a reference setting function and a special near\/far state setting function as described above. Many of these special functions are indicated with idiomatic phrases including: \u201ceach and every\u201d, \u201cmore or less\u201d, etc. These idiomatic phrases are detected as idioms in Parsing Step  and are processed as multi-word function phrases. Other functions are indicated as special cases of previously described combinations including: \u201cmost of all\u201d (i.e., most important of all), \u201call much too easy\u201d (i.e., contrived as easy), etc. These special cases are stored and processed as other multi-word function phrases. However, these special cases have additional associated special functions which add the additional results and\/or state representation implied by the special case. Note for some special cases and some of the normal function word and function word combinations, there may be other possible function assignments. For example, \u201call much too easy\u201d could have referred to the questions on a exam and hence is an ellipsis of: \u201call of the exam questions are much too easy\u201d. Each single function word or mult-function word phrase with multiple function selections is identified and stored at the end or the group descriptor in the SDS with a pointer to the next alternate selection or with a null pointer if there are no other selections. Also all function words or multi-word function phrases have an associated confidence level which is used to select alternate function selections when required during state representation processing.","The format for the specific functions and parameters utilized to implement the functions associated with function word adjectives is listed in . The format for the specific functions and parameters utilized to implement the functions associated with multi-word function phrases is listed in . Function word adjective definitions have various types of information associated with them including some or all of the following: the text word; a multi-word function list which contains the definition starting address associated with each containing multi-word function pattern; a default reference type; a function type; one or more function addresses, each with zero or more associated parameters; a confidence level; and a next definition address. The multi-word function list is used to look up the function definition of a function word utilized for a multi-word function phrase. Each multi-word function phrase has a multi-word symbol associated with it. For a particular adjective function word, its multi-word function list contains the multi-word symbols of all the multi-word function phrase patterns which can contain the adjective. Each multi-word symbol in the list has an associated starting address of the definition of the function word which is utilized in implementing the functions implied by the multi-word function phrase. The default reference and function type (e.g., selection, quantitative, etc.) were described above. The addressed functions are used to set information in the group descriptor as described above. The parameters are used by the addressed functions to set information. For example \u201csome\u201d has an associated parameter of \u201c0.3\u201d which is used as a portion quantization factor of the group size as described above for relative portion quantization function words. The confidence level indicates whether the definition has alternatives. The highest confidence level, 4, indicates that there are no alternate function definitions. The next definition address either has the address of the next definition which could be an intended alternate function, or has a null symbol if there is not an alternate function. The next definition address is non-null when a function word or multi-word function phrase has another function interpretation. The utilization of an alternate function interpretation is determined in subsequent state representation processing.",{"@attributes":{"id":"p-0208","num":"0230"},"figref":"FIG. 7","i":"b ","b":"18"},{"@attributes":{"id":"p-0209","num":"0231"},"figref":"FIGS. 7","i":["c ","d "],"b":["7","22300","60","22300","22301","22300","22300","22301","22301","22303","22301","22302","18","18","30","20","30","22302","22303","22304","22304","22305","120","22305","22307","120","22307","22308","120","22305","22307","22306"]},"If  is false, which occurs when the definition at the Function-Definition-Address does not contain a default reference type, or after  or ,  is next.  is true if a function word is modified by one or more degree adverbs or if the multi-word function phrase contains one or more degree adverbs. If  is true,  sets Degree-Mult to be equal to the multiplicative product of the degree numbers of the consecutive degree adverbs modifying the function word. The degree numbers are obtained by a prior call from Dictionary Look Up Step  to adverbial processing which is described below. The degree numbers are stored at the address associated with the degree adverbs in the SDS. Degree-Mult is stored at the first degree adverb in the SDS. If the degree adverbs modify more than one word in multi-word function phrase, a separate Degree-Mult is calculated for each modified word. After  or ,  is next and is true if the definition at the Function-Definition-Address has another function to be processed. If  is true,  is next and is true if the definition at the Function-Definition-Address is for a multi-word function phrase. If  is false,  sets the Current-Function to be the next function in the function word's definition. If  is true,  is next.  sets the Current-Function to be the function at the next function address stored in the multi-word function phrase definition if the next element in the function list is a function address. Otherwise,  uses the next position stored in the multi-word function definition to select the stated function word's associated function and parameters which are to be used in the multi-word function phrase. The position of the stated word in the SDS contains the address of the stated word's multi-word list. The multi-word function phrase definition's multi-word symbol is used to select the function address in the multi-word list. The Current-Function is set to the function at the function address selected in the multi-word list. By using positions to indicate the utilization of a function word in the multi-word function phrase definition, multiple instances, i.e., actual stated words, of a multi-word function phrase pattern can be processed with one definition instead of listing all possible instances. The listed function addresses in a multi-word function phrase definition are used to implement functions common to a multi-word function phrase pattern, and the positions select the functions which vary according to the actual stated word in the pattern. Note that only certain text words, i.e., words belonging to a specific wordset, can be placed in a position of a pattern.","After the Current-Function has been set at  or ,  is next and is true if the Current-Function type is a selection function type. In or , the function type is either listed in a single function word definition or is included in the parameters associated with a function address in a multi-word function phrase definition. If  is true,  is next.  evaluates the Current-Function if the function is compatible, and if it is possible to evaluate the function now. A function is compatible if it can be applied to the word sense number of the noun being modified by the function word adjective. Functions have compatibility requirements for a word sense number. If the compatibility requirements are met, the function is compatible with the word sense number. For example, \u201csome\u201d has a selection function that is compatible with a singular, countable noun word sense number as in \u201csome girl\u201d. A noun word sense number is countable if its quantity state has numerical value units. A non-countable noun has a quantity state with measurement value units. The singularity of a noun is determined by its inflection code which is utilized in Syntax Phrase Trees  during parsing. It is not possible for some functions to be currently evaluated because they require values which are not currently available as was described above. If the function is compatible, and is possible to evaluate,  identifies and stores the results of the selection function in the group descriptor in the normal position in the SDS. If the function is compatible, but it is not currently possible to evaluate the function,  identifies and stores the function addresses in the group descriptor in the normal position in the SDS. The selection function results and functions to be executed in subsequent processing were described above. After ,  is next, and is true if the Current-Function is compatible with its modifiee word sense number. If  is false,  is next, and is true if there is another untried function definition address. If  is true,  sets Function-Definition address to the next untried function definition address. If  is false,  sets processing to continue at AF-Fail, an invocation parameter. If  is false, typically another word sense number for the modifiee of the function adjective is selected as is described below.","If the Current-Function is compatible,  is true, and  begins the process for another function as described above. If  is false,  is next and is true if the Current-Function is only a quantization function. If  is true,  evaluates the quantization function if it is compatible and possible. Also if the function is compatible,  identifies and stores the quantization type and value for a possible function or the type and function address for a function that is not possible now in the group descriptor at the normal position in the SDS. After ,  is next as described above. If  is false,  is next and is true if the Current-Function is only a comparison function. If  is true,  evaluates a compatible, possible comparison function. If the function is compatible,  identifies and stores the comparison type and value or the type or function address in the comparison portion of the group descriptor at the normal position in the SDS as described above. After ,  is next as described above. If  is false,  is next and is true if the Current-Function is a quantization or a comparison function. If  is true,  evaluates a compatible, possible quantization function. If the function is compatible,  identifies and stores the quantization type and value or the type and function address in the group descriptor at the normal position in the SDS as described above. Also,  evaluates a compatible, possible comparison function, and  identifies and stores the comparison type and value or the type and function address in the comparison portion of the group descriptor at the normal position in the SDS as described above. The identification at  includes a AMBIGUOUS-QUANTIZATION\/COMPARISON-FUNCTION with the stored information if both functions are compatible. This identifier informs Selector  that the syntax allows for either a quantization or comparison function. The selector then determines the intended type of function from the context. After ,  is next as described above.","If  is false,  is next and is true if the Current-Function is an inclusion function. If  is true,  identifies and stores a compatible inclusion function and related information in the inclusion portion of the group descriptor at the normal position in the SDS as described above. After ,  is next as described above. If  is false, then  is next and is true if Current-Function is an exclusion function. If  is true,  identifies and stores a compatible exclusion function and related information in the exclusion portion of the group descriptor at the normal position in the SDS as described above. After ,  is next as described above. If  is false,  is next and is true if the Current-Function is a degree adverb. If  is true, then  either multiplies the appropriate numerical quantity by Degree-Mult and stores the result at the location of the appropriate numerical quantity in the normal position of the SDS, or  identifies and stores Degree-Mult at the location of the appropriate non-numerical quantity in the normal position of the SDS. The appropriate quantity is identified in the degree adverb function. The degree adverb function also identifies the appropriate quantity as numerical or non-numerical. After ,  is next as described above. If  is false,  is next and is true if the Current-Function is a special function type. If  is true, then  evaluates a compatible special function if possible. If the function is compatible,  identifies, and stores the result and\/or function addresses of functions to be evaluated in subsequent processing at the designated location in the group descriptor at the normal position in the SDS as described above. The designated location is identified in the special function. Functions which are to be evaluated later require values which are not currently available as was described for many of the other function types described above. After ,  is next as described above. If  was false,  is next and is true if the Current-Function is a negation function type. If  is true, then  evaluates a compatible negation function if possible. If the function is compatible,  identifies, and stores the results and\/or function addresses of functions to be evaluated in subsequent processing at the designated location in the group descriptor at the normal position in the SDS as is described above. The designated location is identified in the negation function. Functions which are to be evaluated later require values which are not currently available as was described above. After ,  is next as described above. If the previous function is compatible,  is true, and  is next.  is false if there is not another function. If  is false, then  is next.  places the confidence level at the end of the group descriptor at the normal position in the SDS. Also,  places the next definition address or NULL at the location following the confidence level in SDS. Finally,  returns processing control to the caller.","Prepositional Phrases","Prepositional phrases are composed of a preposition and a complement. The prepositional complement can be a noun, pronoun, or a word plus affixes which change the word to a noun i.e., the complement is a noun or functions as a noun and the word functioning as a noun is a noun equivalent. Concrete nouns can also be modified by another concrete noun. This type of concrete noun modification is equivalent to a prepositional phrase composed of a zero preposition with the modifying concrete noun as a complement of the preposition phrase which modifies a concrete noun. For example, \u201cfood store\u201d is equivalent to \u201cstore (zero preposition) food\u201d. Prepositional phrases can modify nouns or words functioning as nouns, adjectives, and verbs. The description of prepositional phrases modifying verbs, called adverbial prepositional phrases or adverbials, will be discussed in the section of adverb function words since the function of adverbials is very similar to adverbs. The Function Processing Step  for prepositional phrases begins after the modified noun or equivalent and the complement have had their state representations selected in Selectors . These selectors also invoke preposition processing. Multiple consecutive prepositional phrases are processed in the order of last first.","Prepositional Phrase Modification of Concrete Nouns","Prepositional phrases modifying nouns function to set a relation between the modified noun, called the modifiee, and the prepositional complement. This description in this section will be limited to modifiees which are concrete nouns or abstract nouns and noun equivalents which evaluate to concrete nouns. Other abstract noun modifiees are considered later because they represent adjectives or verbs. Other modifiee noun equivalents such as participle phrases (e.g., \u201cgoing to school\u201d) are also deferred for now because these noun equivalents result in adverbial modification. The relationships between a concrete noun or equivalent modifiee and a concrete noun or equivalent complement include: partitive, possessive, functional, group, type setting, or state or property value setting. These relationships can be stored with the state representation of a concrete noun. These type of relations can also be explained in the conversation. These type of relations can have associated information which includes: descriptions of the relation, and experience related to the elements in the relation. The type and value setting relations are stored in state representation of a concrete noun or are selected based upon the state representation of a concrete noun. A concrete noun or equivalent will have those relation types which are appropriate for its state representation, i.e., semantically possible for its relation. A concrete noun modifiee can have any of the appropriate relations with a concrete noun.","A concrete noun has a functional relation when the concrete noun is in clausal relation with the complement. A clausal relation means that a clause has the elements in sentence roles of the clause. In this case, the modifiee and complement are in a clausal relation when they have sentence roles in a clause. The functional relation implies the clause of the clause relation. The functional relationship indicates some function is performed by one noun relative to the other noun. For example, \u201cscenery for the theater\u201d implies the clause: \u201cThe \u201cscenery\u201d creates the image of the setting of the play in \u201cthe theater\u201d.\u201d Another example, \u201ca bottle of water\u201d is equivalent to \u201cThe \u201cbottle\u201d contains \u201cwater\u201d.\u201d The clause implied by a functional relationship is accessible with a pointer stored at a functional relationship descriptor in Concrete Noun State Representation Memory  to the equivalent of one or more clauses in Clausal Abstract Noun and Clause State Representation Memory . The partitive relationship indicates a sub-part to part relationship or part to whole relationship such as \u201cdoor of the car\u201d. The possessive relationship indicates the owner such as \u201coffices of the IRS\u201d. The group relation indicates a set of concrete nouns including the modifiee and the complement in a group relationship indicated by the preposition. For example, \u201cTom with the students\u201d indicates that \u201cTom\u201d and \u201cthe students\u201d are in a group. The members in a group relation usually have common state(s), property(s) and\/or relation(s) which distinguish the group. The state or property value setting relation sets a relation to a single state or property. For example, \u201cthe book in the library\u201d sets the position of the \u201cbook\u201d as the \u201clibrary\u201d. In this example, the space position state of the \u201cbook\u201d is set to the space position property of the \u201clibrary\u201d. The type relationship indicates that the nouns in the relationship share certain states and properties and associated values or value ranges of the shared states and properties. The type relation can indicate a transfer of multiple state or property values between the modifiee and complement for previously unstored type relations. For example, \u201cskin like a baby\u201d implies the owner's \u201cskin\u201d has similar state and property values as a \u201cbaby's\u201d (skin). Other mechanisms for indicating type relationships are \u201ckind of\u201d and \u201ctype of\u201d. The complement is usually the source of the state or property value(s) and the modifiee is the destination. The preposition indicates the relationship between the source value and the destination.","A concrete noun has a data structure for each preposition which can modify it. Those concrete nouns which can be modified by other concrete nouns have a data structure for zero prepositions. This data structure used for processing a prepositional phrase modifying a concrete noun is shown in . Each concrete noun has a pointer in its Dictionary  entry to a common data structure that is shared with other concrete nouns. Also, each concrete noun possibly has one or more individual data structure entries used for the concrete noun's anomalous prepositional relations. The anomalous prepositional relations are stored in its anomalies portion of the noun's Dictionary  entry. The prepositional data structure contains an entry for each relation of a preposition and is listed in the order of the most commonly used relation first. This preposition data structure contains: a text representation of the preposition, a representation number, a list of relation type designations which the preposition can imply for the modified concrete noun, and a confidence level. The designations are symbols which have associated relation type data structure entries. The format for the relation type data structure entry of each relation type associated with a designation is illustrated in . These formats will be described in more detail below. There are three kinds of relation types in : A-Relations, S-Relations, and T-Relations. The A-Relations are stored in Context Memory  for A-Relations introduced in the conversation, or they are stored in the Concrete Noun State Representation Memory  for previously experienced A-Relations. The A-Relation types include: partitive, ownership, functional, and group. An A-Relation data structure entry in the preposition data structure contains the A-Relation type which can be selected by the preposition.","The S-Relation type contains the relations which imply state and property settings between the modifiee and complement. The S-Relations are stored either in Context Memory  or the Concrete Noun State Representation Memory . An S-Relation type data structure entry contains the source requirement descriptor and the destination requirement descriptor. The descriptors contain the state or property which the source and destination must have for the associated S-Relation to be selected. The destination requirement descriptor contains the destination, i.e., the modifiee or the complement. This data structure also includes a function which is called to set the state or property value relationship between the source (usually the complement) and the destination. The value relationships include the relative positions in time or space between the source and destination for example. The relative position can also be set to a definite value in the prepositional phrase. The value relationship can be equality in which case the destination value is set to be the same as the source value as in the \u201cthe book in the library\u201d. The other value relationships include those set by prepositions. The function result associated with a S-type relation of a preposition can be modified by a degree adverb modifying a preposition such as: \u201calmost\u201d, \u201cjust\u201d, etc. Such a degree adverb sets the magnitude of an indefinite relation set by the preposition's function result. The state or property value relation set by the preposition's function has a pseudo difference quantity associated with the relation as described for the comparison of degree adverbs modifying a gradable adjective or adverb. The pseudo difference quantity is used in an S-Relation which does not set an exact relationship between the source and destination state or property values. The function of a degree adverb modifying a preposition is to multiply the pseudo difference quantity by the degree number associated with the degree adverb. The degree number is obtained by Dictionary Look Up Step  through a call to adverbial processing to be described below. The degree number is stored in the SDS by  at the degree adverbs position.","The T-Relation is the type transfer relation. The states and properties in a T-Relation are not actually transferred, but the relation between the source and destination values is stored instead. The T-Relation can be stored either in the Context Memory  or the Concrete Noun State Representation Memory . The state and property values to be transferred in the T-Relation can be stated in the conversation. If the values are not stated, the set of states or properties which are common to both the modifiee and complement are involved in the transfer of state and property values from the source (usually the complement) to the destination. A T-Relation data structure entry has an associated function which sets the pseudo difference quantity between the source state and property values and the destination values for prepositions which set an indefinite relation between the source and the destination. An entry also lists the destination. The function of degree adverbs modifying a preposition with a T-Relation is to multiply the pseudo difference quantity by the degree number associated with the degree adverb as described above. Each relation type also has a confidence level associated with it in its preposition descriptor table as in ",{"@attributes":{"id":"p-0221","num":"0243"},"figref":"FIG. 8","i":"b","b":["2200","18","60","2200","2201","2201","20","2201","2201","20","2201","2202","2202"]},"If  is true, Step  searches in Context Memory  or in State Representation Memory  for an A-Relation of the type associated with the current A-Relation between the modifiee and complement. If  does not find the A-Relation in ,  invokes a call to Selector  which searches for the A-Relation type from  in the state representation of the modifiee and the complement in Memory  as described below. Concrete nouns have associated A-Relations stored with them in Concrete Noun State Representation Memory . The A-Relations of a specific reference of a concrete noun in Memory  or  have an A-descriptor which contains: the type of A-Relation, the relation characteristics or a pointer to the characteristics, a pointer to a preceding noun in the relation or a null pointer, a pointer to a succeeding noun in the relation or a null pointer, an optional pointer to Clausal Abstract Noun and Clause State Representation Memory , optional specific information and a designation. The A-descriptors can be stored in Context Memory  directly for generated A-Relations, or  can store pointers to the A-descriptors. The relation type is partitive, possessive, function, or group. The relation characteristics are used to determine if a preposition implies an A-Relation between a modifiee and complement. The characteristics vary for each relation type. The relation characteristic for a partitive relation is the noun word sense number which is not part of any other noun in the partitive relation, i.e., the noun at the highest level in the partitive relation. The relation characteristic for a possessive relation is the word sense number of the highest level owner in the possessive relation. The relation characteristic for a functional relation is a word sense number of the verb of the clause relation implied by the functional relation. The relation characteristic for a group relation is the group descriptor of the highest level group in the group relation, i.e., the group which is not a subgroup of any other group in the group relation. The pointers to preceding and succeeding nouns in an A-Relation indicate a hierarchical relation. A noun preceding another noun is in a superior hierarchical relation. A noun with a null preceding pointer is at the highest position in the hierarchy. The converse hierarchical relations apply to succeeding nouns and a noun with a null succeeding pointer. A functional A-Relation has the preceding and succeeding pointers omitted because they are null. The non-functional A-Relations can be in a hierarchy of A-Relations. The pointer to Memory  which is associated with an A-Relation addresses all information which is associated with the relation. The pointer's address contains a typed set of clause relations. The types are the different classes of information. The clause relations can be a single clause, a string of clauses, or a tree of clauses. For example, a partitive relation can have associated information with the following types: purpose, function, assembly operation, etc. The partitive and group relations can have a pointer in their descriptors to additional information contained in Memory . The pointer associated with a possessive A-Relation can define the relation with a clause having a word sense of \u201cto own\u201d. The pointer associated with a function relation can define the clause relation. These clauses of these pointers can have additional information stored with them. Alternately, the possessive or functional A-Relation can have a pointer to additional information associated with the A-Relation. The optional specific information for a group relation includes a group descriptor as described above. The designation in an A-type descriptor corresponds to the designations stored in the relation types of the preposition data structure of . The designation is used to select a preposition which implies the associated A-Relation for generating natural language output.","In , the partitive, the possessive, or the group A-Relations stored with the modifiee and complement in Memory  or  are searched for a match of their highest level member characteristic, e.g., the highest level part, owner, or group in the relation. The highest level member characteristic matching process provides an efficient method for determining if a modifiee and complement are in the same partitive, possessive or group relation without searching the members linked by hierarchical pointers in the relation for a specific known reference modifiee and complement. The modifiee and complement could be several levels apart or even in different subtrees of the A-Relation. Thus, much searching is avoided with this matching process in the worst case. If a highest level match has been found in  for the partitive, possessive, or group A-Relation between the modifiee and the complement, the search for the partitive, possessive, or group A-Relation has been successfully completed. A clause relation of a possessive relation's pointer to  will be evaluated in subsequent state representation processing. The search for A-Relations in  is described below in the description of Selector .","The functional A-Relation type between a modifiee and complement can be a direct or an indirect relation. The direct functional relation is stored at the relation characteristic of the functional A-descriptors of the modifiee and the complement. The relation contains a pointer to a clause relation which indicates the functional relation between the modifiee and the complement, and contains a verb word sense number which can form a clause relation with the modifiee and complement. The functional relation is direct if the modifiee and the complement are directly contained in the clause relation. The functional relation is indirect if the modifiee and\/or complement are indirectly contained through A-Relations which link the modifiee and\/or complement to the noun contained in the clause relation. The direct relation is searched for by looking for a common verb word sense number at the relation characteristics of the modifiee and complement at . If a direct relation is not found, then an indirect relation is searched for at  by using the clause relations which contain A-Relations for modifiee and complement clause roles. The function relations which contain A-Relations for a sentence role are in a partition of the function relations of a concrete noun. The clause relation's A-Relations are located at their clause roles in the data structure of the clause relation at Selector . The functional relation descriptors of the modifiee are used to find the functional relations with A-Relations. The A-Relations of the clause relations of the modifiee are searched to determine if the A-Relation contains the complement. A functional indirect relation is found when the A-Relation of say the modifiee's functional clause relation contains the complement. If a functional relation match is found, the clause or clauses implied by the functional relation and containing the modifiee and the complement in the data structure in Clausal Abstract Noun and Clause State Representation Memory  will be evaluated in subsequent state representation processing with the general or specific modifiee and the general or specific complement.","Step  is true if an A-Relation match for the type of A-Relation associated with the preposition from  is found between the A-descriptors of the modifiee and complement in Memory  or  at . After the above searching is performed at , and  is true,  is next and stores the A-Relation at the modifiee and the complement in Context Memory  if it is not already there. After ,  is next. Step  stores the following in the preposition's position in the SDS: the type of relation; and the address of the relation in the modifiee's data structure in , or if the relation is only stored in Context Memory , the address of the relation in ; the computed confidence level of the relation; and the value of the Next-Relation-Address. The confidence level is set to 4 if the relation was found in . Otherwise, the confidence level is set to the value contained in the preposition descriptor table (of ) if the relation was found in . Otherwise, the confidence level is set to 1 if the relation is generated. Generated relations will be described below.  also sets CN-Prep-Status to FOUND. After ,  sets state representation processing to continue at the caller.","If  is false, then  is next and is true if the A-Relation from  is a group relation. If  is true, a group A-Relation is generated at Step . A group relation is generated by creating a group A-Relation descriptor. The relation type is set to group. The relation characteristic is set to \u201cself-contained\u201d which implies the group is composed of the members in the group relation descriptor. The modifiee and complement have pointers to each other. The specific information contains a group descriptor with a group size. The group size is set to be the sum of the number of nouns associated with the modifiee and complement if the numbers are known. Otherwise the group size is set to \u201cindefinite\u201d. The designation is the designation in the preposition's data structure associated with the Current-Relation. The group A-Relation of a preposition is processed last because there are no restrictions on forming a group A-Relation, i.e., any concrete nouns can be grouped together. However, a group relation can have optional exclusion and\/or inclusion criteria. A group A-Relation is processed last because its designation is placed last in the preposition data structure of . Thus, Step  is processed last to ensure that the group A-Relation does not mask an intended relation.  sets the group A-Relation as a default. After , processing continues at  as described above. If  is false, Step  is true if there is another relation in the Current-Prep's data structure. If  is true, Step  is next. If there is not another relation at ,  is false, and  sets processing to be continued at the caller, which is typically Selector . Selector  than attempts to find a different word sense number of the modifiee and\/or complement, or  attempts to find an alternate modifiee of the prepositional phrase.","If the current relation at  is not an A-Relation, Step  is next and is true if the current relation is an S-type relation. If  is true,  is next.  searches for the S-Relation is stored in  or .  first searches Context Memory  for an S-type relation between the modifiee and complement. S-type relations are stored in an S-descriptor at the destination in a specific state or property. The S-descriptor in  or  contains: the value relation; the word sense number containing the source state, property, or possibly an S-descriptor in the source state or property; and a designation. The value relation is the relation between the source and destination values. The word sense number has an associated address to its data structure which contains the source state or property value in the value relation. If the state or property location of the word sense number contains an S-descriptor, the S-descriptor at the source state or property indicates that the concrete noun's source state or property is modified by another prepositional phrase. For example, \u201cthe book in the library at the square\u201d implies S-descriptors at the location states of \u201cbook\u201d and \u201clibrary\u201d. The specific state or property in the S-Relation implied by a preposition's designation is stored in the S-Relation destination requirement descriptor of the preposition's designation. The destination is identified as the modifiee or the complement in the destination requirement descriptors. The requirement descriptors are stored in the preposition data structure of . The source requirement descriptors can include state or property value ranges, and function words with associated value ranges of the function words. For example, the descriptor associated with the time setting function of \u201cat\u201d includes a source descriptor that matches a time format, a special procedure for matching characters in Dictionary Look Up Step . The time format is an integer between 1 and 12 with or without a \u201c:\u201d concatenated with an integer between 00 and 59 such as in \u201cat 1:30\u201d. S-Relations are searched for in  or  by checking the state or property of the destination specified by the destination descriptor requirement for the designation implying the S-Relation descriptor of the Current-Relation. If an S-descriptor(s) is found at the destination state or property, the word sense number source and the S-descriptor designation of the found descriptor(s) is checked for being the same as the word sense number of the source and the S-descriptor designation in the prepositional phrase as implied by the Current-Relation. If they are the same, this check is satisfied and the S-Relation has been found. The \u201c(s)\u201d is added for the case where multiple S-descriptors are stored at the destination state or property. If an S-Relation is not found in , Step  invokes Selector  to search Memory  for an S-type relation between the modifiee and the complement. If an S-Relation is not found for the modifiee and complement in Memory  or , the source (usually the complement) and the destination are checked for matching their respective requirement descriptors at Step  in  and\/or in  by Selector . The destination and the source are checked for having the state or property contained in the destination requirement descriptor. If the destination and source have the state or property, the source state or property is checked for meeting the source descriptor requirements of the Current-Relation, for meeting the destination descriptor requirements, and for meeting any of the destination's value range requirements for the state or property of the S-Relation in the destination's state or property location in Adjective and State Abstract Noun State Representation Memory  data structure. A generated S-Relation match is found if the source requirements, destination requirements, and destination value ranges are satisfied. After ,  is next.  is true if a compatible S-Relation was found in Memory  or Memory  at , or  is true if a generated compatible S-Relation match was found. An S-Relation is compatible: if the modifiee and\/or complement are a general reference; or if the modifiee and complement are both specific known references, and if the source value is specified and the source value is consistent with the specified value stored in a property of the destination or the destination is a state with a consistent value considering the relation setting function of the S-Relation including modification by degree adverbs; an unspecified value matches a specified or unspecified value.","If  is true,  is next.  stores a relation found in  in . However, if a new S-Relation was generated at , an S-descriptor is generated and stored at the destination state or property at the destination's location in  by . The value relation of the S-descriptor is set to the relation implied by the preposition's function in Step . The word sense number of the source state or property is also stored in the S-descriptor. The designation is the designation of the preposition which is implies the Current-Relation. If the preposition is modified by one or more degree adverbs,  adjusts the value relation by multiplying the pseudo difference quantity of the value by the degree number associated with each modifying degree adverb. The degree number is obtained as above. After ,  is performed as described above. If  is false,  is next and is true if a found S-Relation is incompatible. If  is true,  is next and appends the following in the preposition's position in the SDS: INCOMPATIBLE-S-Relation, the S-Relation address at the destination. The incompatible S-Relation could be a contradiction of previously stored state information, or it could be a misinterpretation of the preposition function. A misinterpretation is detected if another preposition relation is found, and the incompatible S-Relation would be purged. Otherwise, the Step  checks for the inconsistent statement and informs the Communication Manager which processes the inconsistent statement. If  is false, or after , Step  is next and processes another relation as described above.","If the Current-Relation at  is not an S-Relation, the Current-Relation is a T-Relation. Then at , Context Memory  is checked at the destination for containing the T-Relation which is implied by the preposition's designation's T-Relation type in the preposition's data structure and which is between the modifiee and complement. A T-descriptor stored in  or  contains: the T-Relation function's value relation, the states and properties in the T-Relation, the word sense number of the source of the states and properties in the T-Relation and a designation. If none is found,  invokes Selector  to search for a T-Relation in Memory  at the destination's data structure. The searches for the T-Relation in Memories  and  is for the T-Relation with the set of states and\/or properties which have been specified in the conversation when a specification is included. The specified set of states and\/or properties is expressed when there is a modifier of the source which sets state and\/or property values or indicates the similarity such as \u201ca house is like a car in the sense that . . . \u201d. The state and\/or properties of such a modifier of the source comprise the specified set. A statement such as \u201cin the sense that . . . \u201d following the source or a similar introductory phrase defines the specified set. These modifiers indicating the states and properties in the T-Relation are evaluated before the T-Relation is processed. A T-Relation is found if the following conditions are met: the found T-Relation descriptor's designation is the same as the designation implying the Current-Relation; the source word sense number is the same in the preposition and at the found T-Relation; if the states and properties are specified, the specified states are a subset (including an improper subset) of the states stored in the T-descriptor. If a T-Relation is not found in Memories , Selector  searches for a specific T-Relation in Memory  if both modifiee and complement are specific known references. Otherwise, or if no specific relation is found, a general T-Relation between a general modifiee and a general complement is searched for in Memory . If a T-Relation is not found in Memories  or , then Step  determines if a T-Relation can be generated. If there is a specified set of states and properties from the conversation, the destination is checked for a match with the specified set of states and properties of the source. A match occurs when the destination has all the states and properties in the specified set and the values at the destination are compatible. A value at the destination is compatible if the value is unspecified, or if the value satisfies the Current-Relation's value relation to the corresponding source value. The Current-Relation's value relation is the relation implied by the relation setting function of the Current-Relation's data structure entry. If states and properties of the T-Relation have not been specified,  determines if the T-Relation can be generated by checking the source and destination for having compatible common states and properties. A T-Relation can be generated if the destination matches all the specified states and properties, or if the destination and source have at least one compatible state or property value in common.  is completed after a T-Relation: is found, can be generated, or is unable to be generated.","After ,  is next and is true if a T-Relation was found or generated. If  is true,  is next. If a T-Relation is found in Memory  or , Step  stores the T-descriptor address at the destination in the Context Memory  if it is not already stored there. If a T-Relation was not found, but a T-Relation can be generated,  generates the T-Relation descriptor. The value relation is added to the T-descriptor. If the set was specified at , the specified set of states and properties are listed in the T-descriptor at . Otherwise, the common states and properties are listed in the T-descriptor at . The word sense number of the source is added to the T-descriptor. Finally, the designation of the Current-Relation is added to the T-descriptor at . If the preposition which implies a generated T-Relation is modified by one or more degree adverbs,  adjusts the value relation in the T-descriptor between the states and properties by multiplying the pseudo difference quantity of the value relation by the degree number associated with each modifying degree adverb prior to a compatibility determination. The value of degree adverb is obtained as described above. The generated T-Relation's T-descriptor is stored in Context Memory . After , the T-Relation is stored in the SDS by  as described above. If  is false,  is next and processes the next relation as described above.","Prepositional Modification of Adjectives","Adjectives can be modified by prepositional phrases in constructions of the form or ellipses of the form: Subject (form of \u201cto be\u201d) adjective prepositional phrase. An example of the form is: \u201cJohn is good at mathematics.\u201d The subject and prepositional complement can be a noun or noun equivalent such as a participle phrase. The preposition indicates A-relations or T-relations. The subject is related to the complement with the A or T relations. The adjective plays various roles in these relations. For the A-relations minus the functional relations (AMF), the adjective modifies one of the nouns in the AMF relation. The AMF relations require a concrete noun subject and complement. For example, \u201cThe car is full of gas.\u201d has \u201cfull\u201d modify the \u201ctank of \u201cgas\u201d\u201d, and \u201ctank\u201d is in a partitive A-relation to the \u201ccar\u201d. For T-relations, the adjective indicates the function associated with the T-relation. For example, \u201cJohn is close to Tom in academic achievement\u201d has \u201cclose\u201d indicating the pseudo difference function between \u201cJohn's academic achievement\u201d and \u201cTom's academic achievement\u201d. The T-relation requires that the subject and complement both be concrete nouns or each be a clause or a clausal equivalent. The T-relation between clauses implies setting the common aspects of the clause to have the pseudo difference quantity function of the adjective. The aspects of the clause which are checked for commonality include: modals, adverbials, methods for setting result states, result states, goals, causes, etc. A T-relation indicated by an adjective can have specified or unspecified common states or common aspects. The functional A-relation has the subject in a functional relation with the complement with the adjective playing various roles. One adjective role is to be the verb in the functional relation for adjectives which have a verb base. For example, \u201cHe is knowledgeable about computers\u201d is equivalent to \u201cHe knows about computers.\u201d Another adjective role is to be an adjective or be converted to an adverb in the functional relation. For example, \u201cHe is good at mathematics\u201d could have the functional relation of subject to complement as: \u201cHe learns mathematics well.\u201d or \u201cHe gets good grades in mathematics.\u201d Another adjective role is to be a result state of the verb in the functional relation. For example, \u201cHe is conscious of the problem.\u201d has a functional relation to \u201cHe knows the problem.\u201d where being \u201cconscious\u201d in this word sense is a result state of \u201cto know\u201d. Also, for some adjectives and prepositions, the complement of the preposition is in a functional relation which has a purpose relation to the state value associated with the adjective. For example, \u201cJohn is afraid of school\u201d can be interpreted in a given context as the preposition complement (\u201cschool\u201d) being the cause of the subject (\u201cJohn\u201d) having an emotional state of fear. The cause may have a known functional relation which causes the adjective state in a clausal complement or be known from a previous conversation.","An adjective has a data structure for each preposition which can modify it. . illustrates the data structure format associated with an adjective for a single preposition. The location of the prepositional data structure of an adjective is stored in the adjective's entry in Dictionary . The prepositional data structures of an adjective can be shared among multiple adjectives. An adjective can also have one or more anomalous data structure entries for a preposition when an adjective has unique prepositional relations. A data structure for a preposition modifying an adjective contains a list with four relation types: AMF, T, F, P. The AMF relation means A-relations Minus Functional relations and includes: partitive, possessive and group relations. The T stands for T-relations. The F stands for F-relations which are functional relations. The P stands for F-relations which are in a purpose relation to the state value associated with the modified adjective. These types of relations have the same information as is associated with corresponding prepositions modifying concrete nouns as depicted in . One difference is that a T-relation of an adjective can include a default state(s) and\/or property(s) utilized in the transfer relation. P-relations contain the type of purpose relation.","An adjective can also be modified by an adverbial prepositional phrase. For example, \u201cHe was sick at 2 PM.\u201d contains the adverbial preposition \u201cat 2 PM\u201d. The data structure for adverbial prepositions is stored in Memory . Selector  determines if the prepositional phrase is an adverbial. In the case where the preposition modifying an adjective is an adverbial, the processing of this section is not performed. The processing of adverbial prepositions modifying adjectives is described in the State Representation Processing Section below.","The flow chart for selecting and evaluating the function of a preposition modifying an adjective, ADJ-PREP, is illustrated in -. Processing begins at Step  as was stored in the preposition's position in the SDS by Step . ADJ-PREP is typically called by Selector  as is described in the  section. Step  sets RESTART to have a value of , the step which restarts preposition processing if a different interpretation of the preposition is required by state representation processing.  stores \u201cRESTART\u201d and its value in the preposition's position in the SDS. Also,  sets the Next-Relation-Address to be the address of the first relation of Cur-Prep, the preposition under processing. After ,  is next, and is true if Cur-Prep can be an adverbial preposition. If  is true, it is possible that the adjective actually modifies the subject as occurs for an adjective subject complement. For the adjective to be an adjective subject complement, the prepositional phrase modifying the adjective must be an adverbial. An example of an adjective subject complement modified by an adverbial is: \u201cTom is sick at home.\u201d If  is true,  sets up parameters for Selector  to determine if the subject of the clause can be modified by the adjective. The process for  to make this determination is described below in the Selector  section.  sets Invo-Mod-Set to the subject of the clause with the adjective modified by Cur-Prep; Invo-ADJ is set to this adjective; -Start is set to ; ADJ-PREP-Return is set to ; ADJ-PREP-Status is set to false; and  calls [-Start, Invo-Mod-Set, Invo-ADJ, ADJ-PREP-Status, ADJ-PREP-Return]. The process at  starts at  and determines if a word sense number of the subject is modified by a word sense number of the adjective. If the adjective modifies the subject, ADJ-PREP-Status equals Found-In-. After processing is completed at , ADJ-PREP-Return,  is next.  is true if ADJ-PREP-Status equals Found-In-. If  is true, the adjective modifies the subject, the adverbials modifying the adjective have compatible adverbial subclasses, and  is next.  sets the subject of the clause to be modified by the adjective modified by Cur-Prep; Current-Relation is set to null; and ADJ-PREP-Status is set to COMPLETED; These last two variables are set to values which directs  or the caller to perform the next operation for its current invocation as is described below. After ,  is next and sets state representation processing to continue at the caller invoking this process. In this case, the adjective modifies the subject, the prepositional phrase modifying the adjective is an adverbial, and ADJ-PREP is complete.","If , or  is false,  is next. In this case, ADJ-PREP processing is required. Step  sets the Current-Relation to the relation at the Next-Relation-Address. The Current-Relation is the next relation of the preposition to be processed for selection and evaluation. Step  also sets the Next-Relation-Address to be the address of the relation following the Current-Relation or null if there is not another relation as at , described above.  is next and is true if the Current-Relation is a T-relation. If  is true, Step  is next and is true if both the complement and subject are concrete nouns. If  is true, Step  searches for the same T-relation implied by the adjective and its modifying preposition between the subject and complement in Context Memory . If none is found, Selector  is invoked to search for a specific T-relation in Memory  if both subject and complement are specific known references. Otherwise, or if no specific relation is found, a general T-relation between a general subject and a general complement is searched for in Memory  by . The search at  is the same as the search at  as described above. The search for the T-relation at  uses the specified states as at  if there is a modifier of the complement which sets state or property values or indicates the similarity such as \u201cin the sense that . . . \u201d. One difference at  is that the preposition data structure entry of the preposition modifying the adjective may contain one or more specified states and\/or properties which are to be used as a default specification if no states or properties are specified in the text. The modifiers of complements are evaluated before the T-relation is processed. The set of states or properties indicated in a statement from the specified set of states or aspects, or if none are stated, a listed default specification forms the specified set if one is listed A T-relation match is found when the same criteria described at  are met. If a T-relation is not found in  or , Step  determines if a T-relation can be generated with specified states and properties or by finding the common states and properties shared by the subject and complement as at . Step  is true if a stored T-relation was found, or if a T-relation can be generated. If  is true,  is next.  is essentially the same step as . If a T-relation was found Step  stores the T-descriptor address at the destination in the Context Memory  if it is not already stored there. If a T-relation was not found, but a T-relation can be generated,  generates the T-relation. If the set was specified at , the values of the specified set of states and properties are transferred from the source to the corresponding destination states and properties in Context Memory  at . Otherwise, the values of the common states and properties of the source are transferred to the corresponding destination states and properties in Context Memory  at . The value relation between the transferred states and\/or properties is set according to the relation function stored at the adjective modified by the preposition. The T-descriptor is also generated and stored at the destination in  at . However, if the destination state or property has a known value, the value from the source state or property is not transferred. If the adjective modified by the preposition which implies a generated T-relation is modified by one or more degree adverbs,  adjusts the value relation in the T-descriptor between the transferred states and properties by multiplying the pseudo difference quantity of the value relation by the degree number associated with each modifying degree adverb. The value of a degree adverb is obtained as described above. The generated T-relation's T-descriptor is stored in Context Memory  including the transferred state and property values. Finally,  marks and stores Modal-V at the complement's SDS position. Modal-V is set at  and is true when the \u201cto be\u201d verb phrase has a modal verb or a modal adverb(s). If Modal-V is true, the T-Relation is modified by the modal or modal adverb. After Step , Step  stores the following information at the preposition's position in the SDS: the type of relation, the address of the relation, the computed confidence level, and the Next-Relation-Address. The confidence level is computed as at  as described above.  also sets ADJ-PREP-Status to COMPLETED. After ,  is next and sets state representation processing to continue at the caller invoking this process.","If in , it was found that the complement and the subject were not both concrete nouns,  is false. If  is false, Step  is next and is true if the subject and complement are clauses or clause equivalents. At , the clause or clause equivalents have been processed as will be described below. If  is true, a search process similar to the one described in Step  is performed in Step . The main difference between  and  is that the T-relation is for clauses. T-relations for clauses are not stored in Memory , but they can be stored in the Context Memory . Another difference is that common aspects of the clauses as described above are searched for in  instead of the searched for states and properties in .  first searches for a stored T-relation in the subject or complement clause in . If none is found,  invokes Selector  to search for common aspects of the two clauses in Memory . If common aspects of the clauses as described above are found, a T-relation can be generated between the two clauses. The common aspect of a destination which are known for a specific known reference of a clause role are not set in the T-relation. But non-specific clause roles in the destination are set from the corresponding role in the source. Similarly other known specific aspects of the destination are not set to the equivalent in the destination. But unknown or non-specific aspects are set in the destination. Steps ,  and  following Step  are the same as described above except common aspects replace common states and properties. If  is false, i.e., a T-relation was not found and was not generatable, then the T-relation is not applicable and Step  is next. Step  is true if there is another relation associated with the preposition modifying the adjective. If  is true, Step  is next and selects the next relation for processing as above. If  is false, ADJ-PREP has failed to find a known relation between the current word sense number of the subject, the possible word sense numbers of the adjective, and the current interpretation of the prepositional phrase. If  is false,  is next.  sets ADJ-PREP-Status to FAIL. ADJ-PREP-Status is an invocation parameter which is returned to the caller next at  as described above. If the caller is , the FAIL value causes  to consider other possible elliptical, and morphological possibilities for the adjective modified by a preposition. Failing these possibilities, alternate word sense numbers for the prepositional complement and\/or subject are considered at . These processes are described below in the  section.","If the current relation is not a T-relation at , Step  is next, and is true if the Current-Relation is an AMF relation. If  is true, Step  is true if the subject and complement are both concrete nouns, and if the adjective can modify concrete nouns. The subject and complement have been processed for word sense number selection. A clausal abstract noun which represents a concrete noun is treated as a concrete noun at . If  is false,  is next and selects the next relation as described above. If  is true, Step  searches for the AMF relation between the subject and complement in Context Memory . If none is found, the AMF relation is searched for in Memory  by Selector . Step  is true if the AMF relation is found. The search for the AMF relations is the same process as described above for . If  is false, an AMF relation was not found and control passes to  as described above. If  is true, Step  invokes Selector  to search for a concrete noun contained in the found AMF relation that the adjective can modify.  is true If the adjective can modify a concrete noun in the found AMF relation from . If  is true, the state or property and its associated value associated with the adjective will be used to select and to set the corresponding state or property in the noun found in  in subsequent state representation processing. If  is true,  stores the following at the preposition's position in the SDS: a pointer to the adjective, a pointer to the found noun, a symbol calling for the evaluation of the adjective modifying the noun.  stores Modal-V at the complement's SDS position. Also,  stores the AMF relation and the found noun in  for each one not already stored there. Step  is next and stores information in the SDS as described above. If no modifiable noun was found at , Step  is next as described above.","If the current relation at  is not an AMF relation, i.e.,  is false, Step  is next.  is true if the current relation is a P-relation, and if the adjective modified by a prepositional phrase has an associated state value in the Adjective and State Abstract Noun Representation Memory . If  is true, Step  is next and is true if the complement is a concrete noun. If  is true, Step  searches for a functional relation containing the complement in Memories  and . The functional relations containing the complement are searched for in  and  as described at  and includes AMF relations of the complement to a sentence role of the clause. However, one difference at  is that the functional relations are associated with the adjective. Step  first searches in Memory  for such functional relations which are purpose relation clauses of the adjective with the purpose relation type associated with the Current-Relation, a P-relation of the preposition. If none of the purpose relation clauses associated with the adjective in  contain the complement and have the purpose relation type associated with the Current-Relation, then  checks if there are any other functional relations containing the complement in . The found functional relations are matched with the purpose relation clauses of the adjective with the purpose relation type of the Current-Relation in the adjective's portion of the Purposes Associated with States Memory . Selector  obtains the purposes associated with the adjective. First, each clause checked for a match has the same type (general or specific) of noun reference for corresponding sentence roles. A match is found if the purpose relation clause has sentence roles with the same state representation as the corresponding sentence roles of the found clause. If no same reference type purpose relation clause matched the found clause, general reference purpose relation clauses matches are used. For a general reference purpose relation clause match, a general or specific noun matches a corresponding sentence role if such a noun meets the requirements of the sentence role. The requirements of the sentence role are associated with a verb word sense number and are described in detail below. If no matches are found in Memory , then  searches for the adjective's any other unchecked purpose clauses with the purpose relation type of the Current-Relation which is a functional relation of the complement, i.e., an adjective's purpose relation clause with the purpose relation type which contains the complement in a clause role. The search for the functional relation is first for a same type of complement noun reference. If none is found, the search is for a function relation with a general reference complement match. After  is completed, i.e., either finds a purpose relation clause or fails to,  is next. Step  is true if  found a purpose relation clause of the adjective with the purpose relation type of the Current-Relation which contains the complement possibly through an AMF relation of the complement. If  is true, Step  associates the purpose relation clause with the adjective in Memory  if the relation is not already stored there.  stores the following in the SDS position of the adjective: a pointer to the location of the found purpose relation clause, a symbol which indicates that the consistency of the found clause is to be checked, and Modal-V. The found purpose relation clause will be checked for consistency with the context of the conversation in subsequent state representation processing. If the found clause is inconsistent, another purpose relation clause is searched for during state representation processing. If none is found, this process is reinvoked for the next relation of the preposition. After ,  adds the relation to the SDS as described above. If  is false, Step  is next and begins the processing of the next relation as described above.","If Step  is false, the complement is not a concrete noun, but rather the complement is a clause or clause equivalent, and Step  follows. Step  is true if the clause complement is stored with the adjective in  as a purpose relation clause with the purpose relation type associated with the Current-Relation of the preposition. If the clause is not stored with the purpose relation, step  is true if the complement clause has a same or general reference purpose relation match to a purpose relation clause with the Current-Relation type of the adjective in Memory . If the clause complement has a purpose relation stored in Memory  or has a match in Memory , Step  is true. If step  is true, Step  is next as described above. If  is false,  is next as above.","If the current relation is not a P-relation at , the remaining possibility is that the subject and complement are in a functional relation with the adjective playing various roles in the functional relation. If  is false,  is next, and is true if the adjective is a subject complement to a clausal subject. If  is true, no functional relations are possible, and the next relation is selected at  as described above. If  is false, Step  is next and is true if the adjective is formed from a base verb plus one or more affixes. If  is true, a functional relation with the subject, the adjective's base verb, and the complement is searched for in Memory  at . If a functional relation is found,  stores a pointer to the found clause in  and a processing symbol at the adjective's position in the SDS. All modals and adverbs modifying the \u201cto be\u201d verb in the stated clause are set to modify the base verb of the adjective. This processing symbol implies that the stated clause has been replaced with the found clause. Step  checks for this symbol. When  finds this symbol, the previously selected word sense number of the verb and other sentence roles are used in the processing of the current clause. However, the current clause is processed at  to handle the case in which the current clause has different or additional adverbials modifying the verb. The current clause is also checked for being identical since this will effect subsequent processing. If a clause is not found in ,  replaces the \u201cto be\u201d verb and adjective in the stated clause with the base verb of the adjective. The tense and modifiers of the \u201cto be\u201d verb are included in the base verb phrase, and the complement of the prepositional phrase modifying the adjective in the stated clause is set to be the clause object. This new clause will be interpreted as a normal clause. A processing symbol is added to the verb phrase which indicates this transformation. This symbol also indicates that the object may require a transformation back to the complement of the prepositional phrase during processing at . If the object, which was stated as a complement of a prepositional phrase modifying an adjective, does not meet the object requirements of the clause at , the object is replaced with the stated prepositional phrase which is set to modify the verb in the formed clause at , and processing continues at  as is described below. After ,  adds the relation to the SDS as described above.","If Step  is false,  is next. Another type of functional relation is processed starting at Step . Step  is true if the adjective's state is a result state set by a verb. A result state adjective state is stored in Adjective and State Abstract Noun Representation Memory . If  is true, then Step  searches for a functional relationship with the subject, with the verb which sets the adjective's state, and with the complement in Memory . If a clause is found in ,  stores a pointer and a processing symbol at the adjective's position in the SDS. This symbol implies using the found clause in subsequent processing as at  above. If none is found,  replaces the \u201cto be\u201d verb and adjective in the stated clause with state setting verb of the adjective. The tense and modifiers of the \u201cto be\u201d verb are included in the state setting verb phrase, and the complement of the prepositional phrase modifying the adjective in the stated clause is set to be the clause object. This new clause will be interpreted as a normal clause. A processing symbol is added to the verb phrase which indicates this transformation. This symbol also indicates that the object may require a transformation back to the complement of the stated prepositional phrase during processing at  as at . After ,  adds the relation to the SDS as described above.","If Step  is false, the final type of functional relation is searched for beginning at Step . Step  is true if the complement is a clause or clause equivalent. If  is false, Step  is next and searches for a functional relation with the subject, with the complement, and with the adjective modifying a clause role in the functional relation clause other than the subject or complement, or with the adjective converted to an adverb which modifies the verb of the functional relation. Step  first searches for functional relations containing the subject and complement in Memory . The complement will typically either be in a prepositional phrase or be an object. If any are found,  invokes  to check if the adjective can modify a clause role other than the complement or subject as is described below. If the adjective has such a modifiee, Step  is completed. If the adjective does not have a modifiee,  is invoked with an ADJ-COMP-MOD opcode to indicate that a designated adjective is to be converted to an adverb which is processed to determine if this adverb can modify a verb in the designated found function relations. The adjective is converted to an adverb by Morphological Processing Step  as will be described below. The designated found functional relations are checked to determine if the adverb from the conversion can modify the verb in the functional relations in Selector  in a process as will be described below. If the adverb can modify a verb,  is completed. If no functional relation is found in Memory , or no found functional relation has a modifiee of the adjective or the adverb converted from the adjective, Selector  is invoked to find a functional relation in the Concrete Noun State Representation Memory  structure of the complement. The complement structure is searched for a functional relation containing the subject and complement. All functional relations are searched for as at  including AMF relations of the subject and\/or complement to a sentence role of the functional relation. If any are found, then the functional relations are checked for having a modifiee of the adjective or the adverb converted from the adjective as described above. After ,  is true if a functional relation with the subject, complement, and a modifiee of the adjective or adverb converted from the adjective has been found. If  is true, Step  is next and stores the following at the verb's position in the SDS: a pointer to the functional relation with the adjective or adverb modifier, a processing symbol implying the processing of the clause as described at . Also,  includes the tense and modifiers of the \u201cto be\u201d verb in the stated clause in the verb phrase of the functional relation clause. After ,  is next as described above. If  is false, Step  is next and process the next relation as described above. If the complement is a clause or clause equivalent at Step , Step  is processed next. For example, a clausal abstract noun or certain morphological words are clause equivalents. Step  is essentially the same process as Step  except that the complement clause with the stated subject as the subject of the complement clause is the functional relation searched for in  at . If this clause is not found in ,  determines if the clause complement has a sentence role modifiee of the adjective other than the subject or has the adverb converted from the adjective modifying the verb of the clause complement as at . After , processing continues at Step  as described above.","Adverbials","Adverbials Modifying Verbs","Adverbials include adverbs and prepositional phrases modifying the verb(s) in a clause. Many adverbials have a sentence role such as subjects, verb, and objects do. A sentence role serves to select a verb word sense number with its capability. For adverbials, the capability is realized as an adverbial subclass. The adverbial subclasses are associated with a verb and are used to select a verb's word sense number. The adverbial subclasses for verbs being modified by adverbs are stored in Selector . An adverbial subclass of a verb is a specific semantic role, one or more states or properties, and\/or one or more parameters. There can also be a set of values or value ranges with units of measurements for each state, property, and parameter. This set is used to select specific values or value ranges for the semantic role as will be discussed below. Also, this set is used to verify that the state or property has been set within required limits. The range of semantic roles are broadly: time, space, process, modality, (point of) reference, purpose, conjunction, verb word sense number selection, and degree. A specific semantic role indicates the specific aspect of a broad semantic role. For example, some specific semantic roles for time are: frequency, duration, start time, time position, etc. An adverbial has one or more functions associated with it. Broadly, an adverbial's function is to set some aspect of the verb's word sense number including: setting values for semantic role states, properties, and\/or parameters of an adverbial subclass which is used in the selection process of a verb's word sense number; selecting a word sense number of the verb; selecting or modifying an aspect of a process which achieves the verb's word sense; selecting or modifying the resulting states of the verb's word sense number; indicating a purpose relation to the clause containing the adverbial; indicating a relation between the current clause and the preceding clause; and\/or setting a truth value for the verb's clause. Some of these functions are directly performed by processing an adverbial. Also, some of these functions are indirectly performed by processing the adverbial in the sense that a function result from processing an adverbial causes another function to be evaluated. For example, an adverbial can directly select a verb's word sense number, and\/or an adverbial can set an adverbial subclass which is used to select a verb's word sense number. An adverbial subclass is evaluated for a capability match during verb word sense number selection in Selector . Also, during verb word sense number selection some adverbial subclasses needed to select the verb word sense number may not be explicitly stated in the clause. In this case, such adverbial subclasses are obtained from the context or drawn from previous experience.",{"@attributes":{"id":"p-0246","num":"0268"},"figref":["FIG. 9","FIG. 9"],"i":["a ","a "],"b":["120","70"]},"The adverbial can be realized in a variety of ways: an adverb, an adverbial prepositional phrase, or an adverb formed from a base word plus affix which is typically represented as a generated prepositional phrase. The adverbial subclasses associated with an adverb or the preposition of an adverbial prepositional phrase are stored in a data area of Function Step . An adverbial formed from a baseword plus affixes is converted to a representation which either includes an adverbial subclass or which accesses adverbial subclasses as a stated adverbial such as an adverbial prepositional phrase. The included adverbial subclasses are determined by Morphological Step . If the representation does not include an adverbial subclass, Step  generates a representation, typically a prepositional phrase, which implies the adverbial subclasses for the adverbial formed from a base plus affixes.","The adverbial prepositional phrase can be realized elliptically. The preposition can be ellipited from a prepositional phrase realizing a zero-preposition. For example, \u201cHe went home.\u201d has a zero-preposition relating \u201chome\u201d to \u201cwent\u201d. Compare this to the example: \u201cHe went to school.\u201d The complement of a preposition can be ellipited. For example \u201cHe walked past\u201d has \u201cpast\u201d as a preposition with an ellipted complement of \u201clocation of the speaker\u201d. Compare this example to \u201cHe walked past the car.\u201d which has \u201ccar\u201d as the prepositional complement. Actually, adverbials like \u201cpast\u201d could be considered adverbs in the sense that the data structure to implement such an adverbial preposition is identical to the data structure to implement an adverb. Such a data structure has a function in the source descriptor to obtain the source, a destination descriptor for the verb requirements, and a function which sets the adverbial subclass state value. Thus, adverbials like \u201cpast\u201d are treated as ellipted prepositional phrases. Ellipted prepositional phrases are detected in Syntax Parse Step , and the ellipted words are replaced by Elliptical Processing Step .","Another special type of preposition is associated with a particle. A particle can be an adverb or preposition. A particle can select an idiomatic verb word sense number for certain combinations of clause elements. For example, \u201cHe called up the mayor.\u201d has the particle \u201cup\u201d selecting the word sense of \u201cto phone\u201d for \u201ccalled\u201d. In this sort of example, the particle is treated as a prepositional phrase. However, in the example \u201cHe called the mayor up\u201d, \u201cup\u201d is an adverb which selects the verb's word sense number. For the prepositional particle, the source descriptor contains the property of being a person or an organization of persons. The complement must have the property for the preposition function to be satisfied. For the adverb particle, the source descriptor is a function which checks if the object of the sentence contains a property of being a person or an organization of persons. The destination descriptor has a requirement of the verb having a word sense number selection capability by the preposition or adverb.","Another type of adverbial preposition is generated from adverbs which are formed from a base word (e.g., an adjective) plus affixes. For example, for an adverb formed from an adjective baseword, usually the affix is the suffix \u201cly\u201d. An adverb with an adjective base is equivalent to a prepositional phrase of the form \u201c[(preposition) \u201ca\u201d (adjective base (optional modifiee)) (adverbial semantic role)]. For example, \u201cquietly\u201d is equivalent to: \u201cwith a quiet process\u201d. The range of adverbial semantic roles are broadly: time, space, process, modality, (point of) reference, purpose, conjunction, verb word sense number selection, and degree. These are the same semantic roles described above. The prepositional phrase representing the adjective based adverbial is generated in the Morphological Processing Step  by an invocation from Dictionary Look Up Step . The generated prepositional phrase is than processed according to the word it modifies. One unusual type of general prepositional phrase for an adverb formed from an adjective is: \u201cfor (clause doer's) (adjective base) reason\u201d. For this adverb, the state value of the adjective is set for the \u201creason\u201d purpose semantic role for doing the clause. For example, \u201cHe foolishly agreed.\u201d has \u201cfoolish\u201d modifying the \u201creason\u201d for doing the clause, \u201cHe agreed.\u201d This example is equivalent to: \u201cHe agreed for his foolish reason.\u201d","Adverbs can also be formed from adjectives that are formed form verbs. These adjectives are really verbals. Verbals are a type of clause equivalent. For example, \u201csurprising\u201d is an example of a verbal which can be used as an adjective, and which can be used as a base to form an adverbial. For example, \u201cHe surprisingly did well.\u201d Adverbs with a verbal base can also be represented as a prepositional phrase of the form: \u201c[(preposition) \u201ca\u201d (adjective base (optional modifiee)) (adverbial semantic role)]\u201d, i.e., the same form as for adverb formed directly from an adjective base. Thus, \u201csurprisingly\u201d in the example clause has a prepositional form modifying \u201cdid\u201d as: \u201cin a surprising (to the clause speaker) clause result\u201d. Thus the example clause is equivalent to: \u201cHe did well in a surprising to me clause result.\u201d However, the adjective base has a verb base which implies a clause relation. In this case the clause relation is formed: with the clause result as subject, with the verb base of the adjective modifier as the verb, and the adjective modifiee as the object. The resulting clause relation is equivalent to: \u201cThe clause result surprised the clause speaker.\u201d The equivalent sentence to the example is: \u201cThat he did well surprised me.\u201d The verbal used as an adjective is converted to the equivalent clause using verbal ellipsis processing in Ellipsis Processing Step  which is described below. To summarize, the adverb formed from an adjective is processed in the Morphological Processing Step . If the morphological processing selects a function which processes a clause equivalent, the clause equivalent is processed as clause ellipsis by Ellipsis Processing Step  to generate a clause. Step  is invoked by Dictionary Look Up Step  as needed. Step  can either directly invoke Ellipsis Processing Step , or  can have the function stored in the SDS for later invocation of . The time of invocation of  depends upon the morphological function, and that time is stored with the morphological function. In this example, \u201csurprising\u201d has modal purpose comment semantic role, i.e., \u201csurprising\u201d is a comment in a clause about the truth value of the modified verb. The adverb is processed to a clause, but the adverb function is also used to select its intended role in the sentence. The adverb function selection is now briefly described.","One of the purposes of the source and destination descriptors of an adverbial subclass is to serve as requirements which must be satisfied to select the function(s) of the adverbial associated with the satisfied source and destination descriptors. The source descriptor of the adverbial's subclass is partially satisfied with matching its semantic role to the semantic role in the adverbial subclass of the word being modified by the adverbial in the clause containing the adverbial. The semantic roles of the match must be identical. Sometimes, more than one adverbial subclass is possible for the current state of the word sense number selection process. It is also possible that the current adverbial may have more than one set of source and destination descriptors that can be satisfied with the adverbial subclasses of the verb (or other modified word). When multiple adverbial subclasses are possible, the adverbial class with the semantic role which best matches the most recently used semantic role in the context is used. Two semantic roles match broadly if they at least have the same broad semantic role. The semantic role matches will be described in more detail below. Here is an example of an adverbial with multiple possible adverbial subclasses: \u201cThe bell just rang.\u201d This example could have \u201cjust\u201d with two different adverbial functions depending on the context. The context is set differently by each one of the following questions: \u201cWhen did the bell ring?\u201d or \u201cDid the bell ring intermittently?\u201d In the first question, the most recent semantic role of the adverbial pronoun \u201cwhen\u201d is time position. The time position semantic role broadly matches the relative time position semantic role of \u201cjust\u201d which is synonymous with \u201crecently\u201d, i.e., \u201cThe bell recently rang.\u201d In the second question, the most recent semantic role of \u201cintermittently\u201d is process continuity. The process continuity semantic role broadly matches the exclusive process semantic role of \u201cjust\u201d which is synonymous with \u201conly\u201d, i.e., \u201cThe bell only rang.\u201d","When multiple possible adverbial subclasses occur in the selection of a verb's word sense number as in the previous paragraph's example, the multiple adverbial subclasses which have semantic role matches with the adverbial in the clause being processed are evaluated in the order of the most recently used semantic role as stored in Context Memory  until an adverbial subclass of the verb can satisfy the source and destination descriptors of the adverbial in the clause. The semantic roles of the verb's adverbial subclasses are first matched with the semantic roles of the source descriptors of the adverbial in the clause being processed. Then the found semantic role matches are checked for matches with the most recently used adverbial semantic role in the context. In the case of multiple possible adverbial subclasses, the semantic role of the verb's adverbial subclass is considered to match the semantic role from the context if they at least match broadly. The semantic roles match broadly if the most broad descriptor of the semantic roles match. The most broad semantic role descriptors which can be matched in this case are: time, space, process, modality, (point of) reference, purpose, and degree. The semantic roles are composed of descriptors in an order of most broad to most specific. Two semantic roles can match with varying degrees of specificness. The descriptors of two semantic roles are compared until a mismatch occurs. The specificness of the semantic role match increases as the number of semantic role descriptor matches of two semantic roles increases. The most recently used semantic role in Context Memory  is matched with the possible semantic roles of Selector . If no semantic role match is found, the order of evaluation of the multiple possible adverbial subclasses is the listed order of the adverbial subclasses in Context Memory . The verb's adverbial subclass of Selector  with the most specific semantic role match to the most recently used semantic role in the context is used to attempt to satisfy the source and destination descriptors of the adverbial in the clause. If no stated adverbial's descriptors are satisfied, the adverbial subclass of the verb with the next most specific semantic role match to the most recently used semantic role in the context is used next to attempt to satisfy the source and destination descriptors of one of the adverbials in the clause. The order of evaluation is for the verb's adverbial subclass with the most specific semantic role match first to the most broad match last of the most recently used semantic role in the context. The multiple possible adverbial subclasses are evaluated for all source and destination descriptor pairs of the current stated adverbial in the clause. If a match is found, the functions of the matched adverbial subclass of the current adverbial are evaluated or stored depending upon the function. Then the selector evaluates the selected adverbial subclass for its results to determine if it meets the semantic role value of the selector. If the semantic role is unacceptable, the selector invokes the adverbial selection process for another stated adverbial if there is one. Otherwise the selector backtracks to select another word sense number. If the stated adverbials are successfully processed, and if there are other adverbials which are required to be evaluated to select the verb word sense number, then the required, but unevaluated, adverbial subclasses of the verb are checked for having a match with an adverbial semantic role in Context Memory  in the order of most recently used semantic role first. If the successful processing point is not reached, Selector  backtracks and tries to match another word sense number of the verb.","The verb word sense number selection process in Selector  allows for multiple possible adverbial subclasses. It is possible that the intended adverbial function was not selected. This method for selecting an adverbial's function is similar to selecting a pronoun referent in that the selection is made for a given criteria, and the selection is evaluated later for correctness. If the subsequent state representation processing of the clause fails, the adverbial subclass with the next most recent semantic role is processed next in the order described above. This process is repeated until a match is found or all choices have failed to match. If no match is found, Selector  attempts to find another verb word sense number selection.","The process for satisfying the source and destination descriptors of an adverbial is now described. First, the semantic role of an adverbial subclass of the modifiee is checked for a match with the semantic role of the source descriptors of the elements in the data structure for the adverbial in the clause currently under evaluation. The first element with a semantic role match is then checked for satisfaction of the requirements of its source and destination descriptors. The elements of the adverbials with semantic role matches are evaluated until the requirements of a source descriptor and destination descriptor in the same element are satisfied. A source descriptor requirement of an adverbial preposition is satisfied when the source descriptor's state(s) and\/or property(s) are contained in the complement of a prepositional phrase and\/or when other requirements of the source descriptor are satisfied. If the source descriptor is a function, the function must return a result to satisfy the source descriptor requirements. If the source descriptor contains only parameters, its requirements for source states and\/or property(s) being contained in the complement of a prepositional phrase are satisfied. An adverbial formed from a base word plus affix can have an adverbial subclass requirement which is a parameter, a state, and other requirements. When a prepositional representation is formed with a semantic role complement as above, the semantic role is a parameter of the requirement and the complement's modifier is a state of the requirement. If the destination descriptor is empty or the word modified by the adverb meets the descriptor requirements, the destination descriptor requirements are satisfied. The descriptor requirements are matched with information contained in the selector's data structures for example.","The function(s) of an adverbial are selected if its source and destination descriptors requirements are satisfied. The selected function(s) is then evaluated or stored for later evaluation and the adverbial processing is complete. The function types associated with an adverbial data structure include several varieties. One type of selected function processes and sets the adverbial subclass value. This type of function is called a transfer function. The transfer function sets up the adverbial subclass for selecting in conjunction with other sentence roles: the word sense number, process, result states, and\/or result state values for the verb modified by the adverb. If the satisfied source descriptor has parameters, the transfer function can use these parameters for a variety of processes such as matching or generating a scale value for the subclass. Also, the scale value for the subclass can be adjusted by a degree adverbial modifying an adverbial which modifies another word. Degree adverbials are evaluated after its modifiee adverbial has its adverbial selected. If the verb has specific values for the adverbial subclass, the scale value is used to select the specific value. For example, \u201cI ran fast for a mile\u201d has \u201cfast\u201d with a semantic role of process speed and a scale value of 8 on a scale of 1 to 10 with 5 being typical. The verb \u201cran\u201d for the verb sense of human movement has 12 miles per hour (5 minutes per mile) (say) corresponding to a scale value of 8. If the source descriptor contains states or properties, the transfer function transfers the state or property values of the state(s) or property(s) contained in the source descriptor from the complement or possibly its modifier to the adverbial subclass value. The transferred state or property value can also be used to select a specific value of the verb as the scale value did for parameters. If the transferred value is non-numeric, the non-numeric value is looked up in the verb's data structure in  to find the verb's specific value corresponding to the non-numeric value. If the source descriptor contains a function, the function either returns a parameter(s), or a state or a property value(s). The transfer function associated with the source and destination descriptors utilizes the parameter(s), or state or property value(s) returned from the function in the same manner as the ones stored in a source descriptor. This type of function is usually used for the following adverbial semantic roles: time, space, process, (point of) reference, and degree.","Another type of function selects the word sense number, the result states and values, and possibly the process. This type of function is selected by a particle, and the function is called a particle function. A particle can be an adverb or preposition. A particle can select an idiomatic verb word sense for certain combinations of clause elements as described above. The particle function is implemented with a function symbol which is checked for a match in the verb's data structure in Selector . If the function symbol is matched, the associated information with the matched function symbol indicates the modified verb's word sense number, result states and values, and\/or the process.","Another type of function, the purpose function, implements purpose adverbials. Purpose adverbials are prepositional phrases. The complement of a purpose adverbial is either a clause equivalent, or the complement is contained in a clause relation. The clause relation of the complement is converted to a clause by Ellipsis Processing Step . The clause or the clause relation is in a purpose relation to the clause containing the purpose adverbial. A purpose relation includes any experience and knowledge related to a clause in various categories as described above. The function of a purpose adverbial can invoke any process. For example, the purpose adverbial can have a function which initiates the search for a purpose relation of clausal complement or the clause relation of the complement to the clause containing the adverbial within Context Memory . If a purpose relation is not found in Memory , the purpose relation is identified by the Purpose Identifier  in subsequent state representation processing. A set of zero or more types of possible relations are stored in the source descriptor. The possible relations are used for the search in Memory  or by the Purpose Identifier  in subsequent state representation processing.","Another type of function, the modal function, implements modal adverbials. Modal adverbials express the truth value of the clause. The truth value varies from true to possible to false. The modal function assigns the truth value, contained in the source descriptor and sets the truth value descriptor of the clause in the Context Memory . Modals can also contain comments about the clause.","Another type of function, the conjunctive function, implements conjunctive adverbials. Conjunctive adverbs indicate the purpose relationship of the clause containing the adverbial to the previous clause. The source descriptor contains parameters which indicate the types of purpose relations between clauses. If there is a single type of relation, the conjunctive function sets the relation to the previous clause descriptor of the current clause in Context Memory . If more than one purpose relation is listed in the source descriptor, the Purpose Identifier  uses the possible relations to find the purpose relation of the current and previous clause in subsequent state representation processing.","Another type of function invokes any process appropriate to the type of adverbial.","If a stated adverbial was not evaluated in the word sense number selection process, the semantic roles of that adverbial did not participate in the word sense number selection process. However, such adverbials can have clause related uses. For example, time and space adverbials can label the clause with respect to time or space. A degree adverb could modify one or more result state values from typical values to the values implied by the degree adverb. Also, modal, conjunction, or purpose adverbials perform functions related to the clause. After Selector  selects a verb's word sense number, it checks that all stated adverbials in the clause have been processed. If any have not been processed, adverbial subclasses of the verb in Selector  which are not related to word sense number selection are used to process the remaining adverbials. The remaining adverbials are processed in the same method used for adverbials that select the verb's word sense number. However, for some adverbials, the semantic role and associated function can differ depending upon whether the adverbial is used for the verb's word sense number selection or not.",{"@attributes":{"id":"p-0263","num":"0285"},"figref":"FIG. 9","i":"b","b":["2271","70"]},"Adverbial processing begins at Step , the step stored by  in the first word of the adverbial under processing. Step  is invoked by a caller with a specified position of the adverbial in the SDS. The invoking caller also sends a pointer to the set of adverbial subclasses which could be matched with the adverbial under processing. Step  sets the adverbial indicated by the initiating caller as the Current-Adverbial. If the position at the Current-Adverbial already contains RESTART, the Current-Adverbial has previously been unsuccessfully processed for a sentence role by the initiating caller. In this case,  deletes all information in the Current-Adverbial's position in the SDS which follows RESTART and its value, . If this is not the case,  sets RESTART to , and then stores, RESTART and its value at the position of the first word of the Current-Adverbial in the SDS. Then  sets WILD to false. This variable is used for processing the adverbial subclasses of the modifiee as will be described below. Next, Step  finds all of the semantic roles in the currently possible adverbial subclasses of the modified word that match the semantic roles in the source descriptors of the data structure associated with the Current-Adverbial. The location of the Current-Adverbial's subclasses was stored in the SDS previously by Step  for example. The matches are ordered so as to have the same order as the adverbial subclasses of the modified word, and the matches are stored in the Current-Evaluation-Set. There could be multiple matches for a particular semantic role of an adverbial subclass of the modifiee with the semantic role of different adverbial subclasses of the Current-Adverbial. In this case, all multiple matches are stored in the Current-Evaluation-Set at Step .  also sets the Current-Most-Recently-Used-Semantic-Role to the most recently used semantic role which is stored in Context Memory .","After  is completed, Step  is true if any semantic role matches were found in . If there were no matches of the semantic roles of the possible adverbial subclasses of the word modified by the Current-Adverbial to the semantic roles of the source descriptors of the data structure of the Current-Adverbial in the clause in Step , then Step  is false and Step  is processed next.  is described below. If  is true, Step  finds the first most specific semantic role match of untried semantic role entries in the Current-Evaluation-Set with the Current-Most-Recently-Used-Semantic-Role and sets its it to be the Current-Match. The most specific semantic role match was described above. The untried semantic role entries refers to semantic role entries in the Current-Evaluation-Set that have not been matched before in Step . Step  marks the Current-Match entry as TRIED. After ,  is next, and is true if a semantic role match was found in Step  with the Current-Most-Recently-Used-Semantic-Role value. If Step  is true, Step  determines if the source and destination descriptors of the adverbial subclass entry of the Current-Match are satisfied. Source and destination descriptors become satisfied by checking for meeting requirements as described above. Step  is next and is true if the descriptors are satisfied at . If  is true, a possible adverbial subclass has been selected for the Current-Adverbial.","If  is true, Step  evaluates some of the function(s) associated with the Current-Match, and the results of the evaluated functions are identified and stored for the selector associated with the modified word in the SDS. This is Selector  for verbs. The selected function(s) is evaluated as described above in some cases. However, some functions will not be evaluated at . These functions are identified and the addresses of the functions are also stored in the SDS by . The functions contain flags which designate which functions are to be evaluated and which functions are to be stored. For example, the function to generate the clause relation implied by a degree adverb is stored for later evaluation. Another example is a function to store the adverbial and its semantic role in . This function is performed after the adverbial interpretation is accepted by the caller and is initiated by the caller. Then  stores the following information in the position of the first word of the Current-Adverbial in the SDS: the results and identification of evaluated functions, an identifier and address for each function to be executed later, the position of the modifiee's adverbial subclass that matched the Current-Match, a pointer to the Current-Evaluation-Set, a pointer to the Current-Match entry in the Current-Evaluation-Set, a pointer to the Current-Most-Recently-Used-Semantic-Role, and a pointer to WILD. After ,  is next and sets processing to continue at the initiating caller. The initiating caller checks if the results in the SDS matches the adverbial subclass value requirements if any exist. The adverbial subclass value requirements are met if the subclass's state(s), property(s) or parameter(s) was set within associated limits. Also, the caller and subsequent state representation processing determines if the adverbial interpretation is consistent with the current context and experience. Adverbial processing is restarted at Step  if the adverbial requires reinterpretation.","Step  is false if the source or destination descriptors were not satisfied at . If  is false,  marks the Current-Match as FAILED. After , Step  is next, and is true if there are more UNTRIED semantic role matches in the Current-Evaluation-Set. The entries in the evaluation set are marked as being TRIED when they are matched at . If  is true, Step  is processed again to find the next most specific semantic role match with the Current-Most-Recently-Used-Semantic-Role, and processing continues as described above. If  is false, processing is set to continue at  which is described below.","If no semantic role matches were found in Step , none of the semantic roles in the Current-Evaluation-Set matched the Current-Most-Recently-Used-Semantic-Role in Context Memory , and Step  is processed next. Step  is true if there is another untried semantic role of an adverbial subclass stored in Context Memory . A semantic role is untried at  if it has not been set to the Current-Most-Recently-Used-Semantic-Role for the Current-Evaluation-Set. If  is true, Step  marks all entries without FAILED in the Current-Evaluation-Set to UNTRIED, and  assigns the Current-Most-Recently-Used-Semantic-Role to have the value of the next most recently used semantic role in Context Memory . After , Step  is processed next and processing continues as described above. Step  sets the next most recently used semantic role to be used in the comparisons for matches in Step . If  is false, all semantic roles in the context have been tried for matches in Step , and Step  is processed next.  is true if WILD is false. If  is true, it is possible that a new adverbial semantic role is being added to the conversation and  is next. Step  sets the Current-Most-Recently-Used-Semantic-Role to have a value of MATCHES-ANY-SEMANTIC-ROLE-VALUE, i.e., a wild card. Also, WILD is set to true.  also marks all entries without FAILED in the Current-Evaluation-Set to UNTRIED. The effect of using a wild card for the Current-Most-Recently-Used-Semantic-Role in Step  is to process the remaining unfailed semantic roles of the Current-Evaluation-Set in the order of the adverbial subclasses in the word modified by the adverbial. The wild card is used for a new adverbial semantic role being added to the conversation. After Step , Step  is performed and processing continues as described above.","If WILD is true at ,  is false. If  or  is false, all adverbial subclasses of the Current-Adverbial have failed to match the Current-Adverbial modifiee's adverbial subclass set, and Step  is next.  stores a symbol in the position of the first word of the Current-Adverbial in the SDS. This symbol indicates a failure to match the adverbial subclasses of the word modified by the Current-Adverbial. After , adverbial processing is completed, and  is next as described above. When this symbol is processed at Selector  or , either Selector  or  attempts alternate interpretations of the Current-Adverbial if possible, or if not possible, Selector  or  backtracks and attempts to find a different word sense number for the modifiee.","The initiating caller may require another interpretation of the adverbial after performing subsequent state representation processing. When this occurs, Step  is started and given the adverbial to be reprocessed by the initiating caller. Step  restores the state of the adverbial processing as stored in the adverbial's position in the SDS. Step  sets the following variables whose values are available from the SDS: the Current-Match, the Current-Evaluation-Set, WILD, and the Current-Most-Recently-Used-Semantic-Role. The Current-Adverbial is also set to the adverbial given by the initiating caller. The information at the Current-Adverbial in the SDS following the value of RESTART is deleted. Then processing continues at  as described above.","Adverbials Modifying Non-Verbs","Adverbials modify adjectives, other adverbs, indefinite pronouns, and nouns as well as verbs. Adverbs can rarely perform a prepositional complement role. Adverbs can also be compared in essentially the same way adjectives are compared as described above. The functions for implementing these adverbial roles are described in terms of the functions and data structures described above.","As an adjective is being processed for selecting its word sense number, the adjective's word sense number is at least partially selected by the word the adjective modifies. The modified word is the owner of the state. The words modifying the adjective either participate in selecting the adjective's word sense number or set the value of the state associated with the adjective. After the owner of the state is established, the modifiers of an adjective are evaluated. Some modifiers of an adjective can describe an aspect of the adjective's state value. Such modifiers are considered to be owned by the adjective's state value. The adjective has a data structure associated with it in Selector . In this data structure is a set of adverbial subclasses which are matched to select the adverbial function(s) of an adverb modifying a particular word sense number of the adjective. This adverbial data structure of adverbial subclasses used for selecting modifying adverbs is separate from the data structure of adverbial subclasses associated with adverbs formed from the adjective. The set of adverbial subclasses for selecting modifying adverbs is partitioned by word sense number. The partitions of adverbial subclasses associated with the current possible word sense number of the adjective is the set of adverbial subclasses processed at Step  of . The adverbial modifying the adjective is the Current-Adverbial in the clause. Processing of the adverb then proceeds as described above for ","Adverbs modifying adjectives most commonly set the degree of the adjectives state value. A function associated with a degree adverb modifying an adjective sets a scale value which increases or decreases the typical or known state value of the modified adjective. Degree adverbs modifying non-morphological, i.e., adjectives not formed from a base plus affixes, use the adverbial selection process of . Adjectives can also be formed from nouns or verbs. Adjectives formed from a noun base plus affix imply a prepositional phrase containing the base noun as a complement of the prepositional phrase which is generated by Morphological Step . A degree adverb modifying an adjective formed with a noun base is equivalent to the adverb modifying a prepositional phrase, and this was described above and does not use the adverbial selection process of . Adjectives formed from a verb base imply a clause relation. Morphological Processing Step  contains a function which either directly invokes Ellipsis Processing Step  to generate the clause implied by the clause relation, or  has the invocation stored in the SDS for later invocation. The time of invocation is stored with the morphological function invoking . A degree adverb modifying an adjective formed from a verb base is equivalent to an adverb modifying a verb in the generated clause, and this was also described above and is processed with the adverbial selection process of ","A degree adverb has an associated data structure as in . The source descriptor of a degree adverb that is not formed with a base plus affixes contains a parameter or a function to generate the parameter. The destination descriptor has a destination requirement of a gradable adjective for a degree adverb modifying an adjective. A gradable adjective has a state value. A gradable adverb has a scalable subclass value. Degree adverbs modifying verbs modify the result state value of the verb. The function generates the degree number using the parameter or a function to generate the parameter contained in the source descriptor. The degree number is used to scale the adjective's state value with multiplication for example. An example of this type of degree adverb with a source descriptor parameter is \u201cvery\u201d.","Another realization of a degree adverb modifying an adjective is an adverb formed from an adjective base. The realization of such an adverb is equivalent to the form: \u201cpreposition \u201ca\u201d (adjective base) degree\u201d. The possible adverbial semantic roles of adverbial subclasses associated with the modified adjective in Selector  are matched with the semantic roles of the source descriptors of the adverbial subclasses of the prepositional phrase associated with an adjective forming an adverb in Step  of . Processing of the adverbial proceeds as described above. The adverbial subclasses containing the source descriptors of the prepositional phrase forming an adverb from an adjective are stored in a data area of Function Processing Step  associated with the preposition. A degree adverbial always includes a function that sets a degree number which scales the modified adjective's state value. Some adverbs formed with an adjective base can have a function which sets the adjective base state in a relation to the state value of modified adjective. For example, consider \u201cabsurdly difficult\u201d. The value of the state for \u201cdifficult\u201d is scaled to a maximum value with the degree number associated with \u201cabsurdly\u201d. The state associated with \u201cabsurd\u201d is set to be owned by the value of the state associated with \u201cdifficult\u201d.","Another realization of a degree adverb modifying an adjective is an adverb formed from a verb base. The adverbial subclasses associated with the adverbials which can be formed with a verb base are typically are associated with the preposition of the prepositional phrase formed by Step  to represent the adverb. The subclasses can also be directly associated with the representation in . These adverbial subclasses are similar to adverbial prepositions and contain source and destination data descriptors and functions, as in . The functions of a verb base adverb are selected in the adverbial process of using the source and destination descriptors of the adverbial subclasses associated with the representation of the modifying verb based adverb to match the adverbial subclasses of the modified adjective as described above. The function of a degree adverb formed from a verb sets the degree number as described above. Usually, degree adverbs with a verb base also have a function which creates a clause relation of the verb forming the adverb with the state value of the modified adjective. The clause relation is generated by Ellipsis Processing Step . For example, consider \u201csurprisingly easy exam\u201d. A possible clause relation is: \u201cThe easiness of the exam surprised me.\u201d This clause relation means the value of the \u201ceasy\u201d state owned by the \u201cexam\u201d \u201csurprised me\u201d.","Non-degree adverbs with and without a verb base can modify adjectives. These adverbs modifying an adjective are implemented in the same way as degree adverbs modifying an adjective as described above. The only differences are a non-degree semantic role and different function(s) for these adverbs. Non-degree adverbs with a verb base modifying an adjective are more common than non-degree adverbs with a noun or adjective base.","Adverbs which modify adverbs set the degree of the modified adverb. The modifying adverb can be simple, or have an adjective, or verb base. Here, simple means an adverb which is not formed from a base plus affixes. The modified adverb can be simple, or have an adjective, noun or verb base. Simple gradable adverbs have an adverbial subclass for being modified which includes; an adverb degree modification semantic role for being modified, a typical semantic role value, and a semantic role value range. Such an adverbial subclass is similar to the adverbial subclasses for modification of verbs and adjectives. The typical semantic role value in the adverbial subclass is the typical value that the modified adverb utilizes for modifying other words, and this semantic role value is scaled by a modifying degree adverb. These adverbial subclasses for simple adverbs are stored in a data area of Function Processing Step . The adverbial subclasses for adjective or verb based adverbs being modified by degree adverbs have the same form as for adverbial subclasses utilized by simple adverbs for modification as described above. The subclass storage locations is at the morphological data structure entry associated with the base and affix of the morphologically formed adverb which is described in Morphological Processing Step . An adverb modifying a noun based adverbs is equivalent to the adverb modifying a prepositional phrase, and noun based adverbs usually do not use adverbial subclasses. The semantic roles of the adverbial subclasses of the modified adverbs with an adjective or verb base are matched with the semantic roles of the source descriptor of the modifying adverb in Step , and processing continues as described above. The  semantic role processing step is performed for all types of adverbs modifying simple, adjective based and verb based adverbs using the degree semantic role of the modifying adverb. For simple degree adverbs modifying simple degree adverbs, the degree adverb function sets a degree number and multiplies the degree number by the modified adverb's adverbial semantic role value. For simple degree adverbs modifying an adverb with an adjective base, the degree number multiples the typical or known state value of the base adjective. For simple degree adverbs modifying an adverb with a noun base, the noun based adverb being modified is converted to a prepositional phrase as described above and the degree adverb modifies a prepositional relation utilizing a process described above for modifying prepositional phrases. The degree number of the adverb is multiplied by the prepositional relation value of the noun base complement to the semantic role modifiee of the prepositional phrase as described above for degree adverbs modifying prepositional phrases with noun complements, e.g., \u201cvery factually\u201d. For simple degree adverbs modifying an adverb with an verb base, the degree adverb modifies the base verb which is also the verb in a clause relation containing the word modified by the verb base adverb as described above. The clause is generated by Ellipsis Processing Step .","All adjective and verb based adverbs modifying adverbs have adverbial subclasses with source and destination descriptors as in . These subclasses are used in the selection of their adverbial function as described above in . The subclass storage locations is at the morphological data structure entry associated with the base and affix of the morphologically formed adverb which is described in Morphological Processing Step . The adjective and verb based modifying degree adverbs also have an associated function which performs the same degree functions as just described for simple degree adverbs modifying the four types of adverbs. Some adjective based degree adverbs also have a function which sets the modified adverb's semantic role value, which is also multiplied by the degree number, to be modified by the base adjective, i.e., the semantic role value of the modified adverb owns the state associated with the base adjective of the modifying adverb. This occurred in an example from above for an adjective based adverb modifying an adjective, i.e., \u201cabsurdly difficult\u201d. The difference here is that the modifiee is an adjective based adverb, e.g., \u201cextremely quickly\u201d. The following description is for certain modifying adjective based adverbs. For modified simple adverbs, the semantic role value of the modified simple adverb owns the state of the base adjective of the modifying adjective based adverb. This semantic role value is also multiplied by the modifying degree adverb's degree number. For modified adjective based adverbs, the state value of the modified adjective base owns the state of the adjective base of the modifying adverb. This state value is also multiplied by the modifying degree adverb's degree number. For example, \u201cextremely quickly\u201d is equivalent in words to: \u201cthe value of quickness is extreme.\u201d and \u201cquickly\u201d is equivalent in words for its adverb function to: \u201cin a quick process\u201d. The semantic role value of \u201cquickly\u201d is also set to the maximum. For verb based adverbs modified by adjective based adverbs, the base verb's semantic role value selected to match the adverbial subclass of the modifying adverb owns the state of the adjective base of the modifying adverb. The implied degree adverb of the adjective base modifies the verb in the clause relation formed by the modified verb based adverb as described above. For noun based adverbs and adverbial prepositional phrases modified by adjective based adverbs, the value of the relation of the prepositional phrase, including the prepositional phrase representing the noun based adverb, owns the state of the adjective base of the modifying adverb. This relation value is also multiplied by the degree number of the modifying degree adverb.","Verb based adverbs modifying the various types of adverbs have a degree function as described above. Some verb based adverbs modifying other adverbs also have a function which invokes Ellipsis Processing Step  to generate a clause relation with the verb base of the modifying adverb and the semantic role value scaled by the degree function associated with the modifying verb based adverb. The scaled semantic role values are the same ones which were scaled by the modifying adjective based adverbs as just described for each type of modified adverb. These adjective and verb based adverbs modifying the other types of adverbs occur infrequently.","Degree adverbs can also modify indefinite adjectives, indefinite pronouns, quantity numbers modifying nouns, and comparisons of adjectives and adverbs. Indefinite pronouns are not directly modified by degree adverbs. The indefinite adjective function associated with an indefinite pronoun modified by degree adverb is modified by the degree adverb. The function of degree adverbs modifying such words is to provide a degree number which is multiplied by a quantity associated with the modified word. The quantity has been described for each of these words above. Associated with each class (e.g., indefinite adjectives) of word modifiable by a degree adverb is a set of adverbial subclasses of the type described for adverbs in . The adverbial subclasses of a class is shared among the members of the class. For example, numerals as a class share their associated adverbial subclasses. These types of degree adverbial modification is detected in Parse Step , and Dictionary Look Up Step  looks up the quantization semantic roles to be processed for adverbial modification. The degree adverbs which can modify these words with an associated quantization value have adverbial subclasses composed of source and destination descriptor pairs which are matched and used to process the quantization value as described for . The semantic roles in the adverbial subclasses associated with a word's quantization value types are matched with the semantic roles of the modifying degree adverb's source descriptors in Step  and processing proceeds as described above. The function selected by this processing for such degree adverbs is always to provide a parameter, the degree number. The degree number is either multiplied with a known quantization value, or the degree number is identified and stored for a subsequent multiplication when the quantization value is known. However, there could be other functions associated with the degree adverb as described for other degree adverbs for example. In the description above of degree adverbs modifying indefinite adjectives, indefinite pronouns, quantity numbers modifying nouns, comparisons of adjectives and adverbs, and prepositions, the possibility of additional functions being associated with degree adverbs was not described. However, this lack of description does not preclude the possibility of allowing additional functions with the degree adverbs.","Rarely, adverbs can also modify noun phrases. However, nearly all of the words termed as adverbs by some grammar books fall into one of three groups. One group of adverbs modifying a noun is a prepositional phrase with an ellipted preposition. The second group of adverbs is a prepositional phrase with an ellipted complement. The third group have both an identical adjective and adverb text form. Adverbs in the third group are treated as adverbs with an adjective base and a zero affix. These three groups of adverbs are detected as modifying nouns in Syntactic Parse Step . Dictionary Look Up Step  directs the processing of the words to Ellipsis Processing Step  for generating the prepositional phrase representation of these adverbs modifying nouns for the ellipted preposition type adverbs. Morphology Processing Step  generates, the prepositional phrase for the zero affix adverbs. Adverbs with an adjective base are represented as prepositions with the adjective base modifying a semantic role as discussed above. The adverbs of the three groups are converted into prepositional phrases and processed as prepositional phrases modifying the noun which has such an adverb modifier. The state representation memory for nouns is designed for handling prepositional phrases rather than adverbial subclasses. The prepositional phrase representation is then processed depending on the base of the noun modified by the prepositional phrase. The prepositional phrase realization of the adverb is typically processed as modifying: a concrete noun for a noun which is not formed with an affix or which is a clausal abstract noun which evaluates to a concrete noun, an adjective for a noun which is an adjective base or which is a state abstract noun, or the verb of a clause relation for a noun with a verb base or a clausal abstract noun which does not evaluate to a noun.","There is a class of adverbs modifying noun phrases which is treated as an adverb. This is a group of degree adverbs and includes: \u201cquite, rather, such, what\u201d. \u201csuch\u201d and \u201cwhat\u201d are not normally considered as adverbs, but they are included here because they perform the same adverb subclass functions as \u201cquite\u201d and \u201crather\u201d. \u201csuch\u201d and \u201cwhat\u201d have additional functions unrelated to adverb functions. \u201cquite\u201d, \u201crather\u201d and \u201csuch\u201d are implemented as adverbs with an adverbial subclass composed of a source descriptor, a destination descriptor and a function. These adverbial subclasses are stored in a data area of Step . \u201cwhat\u201d modifying a noun phrase as an adverb is implemented as a synonym of \u201cquite\u201d. This group of words is detected by Syntactic Parse Step  as adverbs modifying nouns and sent to the Dictionary Look Up Step  which assigns an adverbial semantic role to the modified noun having the name: \u201cdegree adverb modifying noun phrase\u201d. This assigned semantic role is matched with the semantic roles of the source descriptor of the modifying adverb in Step  and processing continues as described above. This group of words has some unique functions for modifying a noun phrase. The following conditions related to the noun modified by these degree adverbs are contained is the destination descriptors of the modifying degree adverb. The destination descriptors perform a discrimination function upon the modified word to select the function associated with the adverb as described above. If the noun phrase has a gradable adjective modifying it, the adjective is modified by the degree function as described above. If the noun in the noun phrase modified by the adverb is in the context and is not modified by a gradable adjective, the noun's characteristics that were stated in the conversation are modified by the degree function. If the noun modified by the adverb is not modified by a gradable adjective and is not in the context, then it is checked for having a default characteristic for adverb degree modification. If there is a default characteristic, the default characteristic is modified by the degree function. If there is no default characteristic, the noun is assigned a function symbol in Context Memory  which verbally implies \u201cunspecified characteristic modified by a designated degree function\u201d. The purpose of this function symbol is to set up the application of the degree function to characteristics which may be specified in the following conversation. The characteristics of the noun modified by the degree function depend upon the type of noun. For a concrete noun, the characteristics are the states and properties of the noun. For an adjective based noun or a state abstract noun, the characteristic is the state associated with the adjective base or the state associated with the abstract noun. For a verb based noun or a clausal abstract noun, the characteristics are the gradable adverbial subclasses of the verb in the clause relation or the gradable adverbial subclasses of verb of the clause which characterizes the abstract noun.","Rarely, an adverb can be the complement of a prepositional phrase. For example, \u201csince recently\u201d. There are only a few adverbs which can be prepositional complements including: \u201crecently\u201d and \u201clately\u201d. The adverb in a prepositional complement role is detected in Syntactic Parse Step . These words are marked as being phrases with ellipsis with known replacements. \u201crecently\u201d or \u201clately\u201d is replaced with \u201ca recent time\u201d.","Verb Functions","Modal Verbs","Modal verbs are similar to modal adverbials in that they both set a truth value about the verb which they modify. Modal verbs differ in the way its function is selected. A modal verb, such as \u201ccan\u201d, has more than one possible function. For \u201ccan\u201d, one of three functions set an associated truth descriptor value for the clause containing the modal verb. A modal adverbial's function is selected by using the flow chart of . A modal verb's function is selected by checking criteria for applying the functions associated with the modal as shown in . For example, \u201ccan\u201d has three possible truth values associated with it: permission, ability, or possibility. The truth value associated with \u201ccan\u201d is determined by first checking if the process associated with the verb in the clause containing \u201ccan\u201d has a step of obtaining permission for this sense of the verb with the current context. If permission is in the process, and if the speaker of the sentence has the authority to grant permission, then the truth value of \u201ccan\u201d of permission is selected. If \u201ccan\u201d does not imply permission, then the capability of the doer sentence role is checked for having other than typical requirements. The doer of a sentence performs the action of the clause and is usually the subject of an active voice clause. The capability of the doer sentence role is the set of state and property values or value ranges required for a doer to perform the action of the sentence. This capability is matched to select the word sense number of the verb in a clause. Typical and non-typical requirements are stored in the capability. If the doer sentence role meets the requirements, then the ability truth value is selected. Otherwise the possibility truth value of \u201ccan\u201d is selected. For \u201ccan\u201d, possibility is the default truth value. The modal verbs have a set of ordered criteria checking functions which match conditions associated with the verb that the modal modifies. Associated with each criteria checking function is a truth value. The truth value types include: permission, ability, possibility, obligation, necessity, choice, and prediction. All of these types can have value ranges.","The Modal Selection Process for selecting the truth value of a modal is illustrated in . This process is initiated by Selector  after the word sense number of the verb modified by the modal has been selected. The process for selecting a modal verb begins at .  sets RESTART to .  also stores the following in the position of the first word of the modal in the SDS: RESTART, and the value of RESTART.  also sets the Next-Criteria to be selected at  to be the given location with the starting command, or if no location is contained in the SDS, the first criteria in the list associated with the modal. The address of the list was placed at the modal's location in the SDS by Step . The criteria are stored in a data area of Step . After ,  sets Next-Criteria and evaluates it.  is next and is true if the evaluated Next-Criteria from  is true. If  is true,  is next and stores the following in the position of the first word of the modal in the SDS: Next-Criteria's associated truth value or a default truth value if there is not another unevaluated criteria, and the location of the Next-Criteria associated with the modal, or null if there is not another criteria. The default truth value is typically \u201chypothetical\u201d which implies the clause is unrealized. However, other default truth values are possible. The default truth value is associated with the modal's list of criteria. Also,  sets processing to continue at the caller. If  is false,  is next and is true if there is another unevaluated criteria. If  is true,  is next and sets Next-Criteria and evaluates it as above. If  is false,  is next and stores the default truth value and null for the next criteria location.  stores the truth value in the truth descriptor and then sets processing to continue at the caller.","Mood","There are three types of mood: indicative, imperative, and subjunctive. The indicative mood is the most common and is used to describe the true situation except when modal adverbials or modal verbs indicate otherwise. The indicative mood is the default. The imperative mood is used to issue requests and orders. The subjunctive mood is like the indicative mood with a built in modal which indicates a hypothetical clause. A clause is in the indicative mood unless there are indicators of other moods. The indicator of an imperative or subjunctive mood includes non standard inflections, i.e., inflections added to the base verb which are different from the inflections added to the base verb for the indicative mood or the form of the verb differs from the indicative form for the tense, person and number. The imperative mood is easily detected with clause structure and verb form, e.g., \u201cGo to bed.\u201d The subjunctive mood is only detectable for the third person singular present tense and for the following uses of \u201cto be\u201d: present tense, and first\/third person singular past tense, e.g., \u201cI hope that he reconsider . . . \u201d \u201cThey insist he be elected.\u201d and \u201cIf I were him . . . \u201d The imperative and subjunctive mood for non standard inflections are detected in Syntactic Parse Step .","The detection of the imperative mood implies a hypothetical clause which someone desires\/directs to be realized. The imperative mood indicator is stored in the related grammar information associated with the main verb in the verb phrase selected in Parse Step . Selector  checks the grammar information of the verb phrase for the imperative mood indicator after  selects the word sense number of a verb. If  finds the imperative mood indictor,  initiates the Modal Selection Process of to determine if the imperative mood implies desire or direction.  sets the criteria address to point to criteria address to select a desire or direction truth value as described above.","The subjunctive mood is detected in various ways. One way is accomplished by Selector  checking the grammar information of the verb phrase in Syntax Phrase Trees  for a verb form which indicates the subjunctive mood. If  finds the subjunctive mood,  stores a hypothetical truth value in the position of the verb of the clause in the SDS. Another method is for  to determine if the clause is already been stated. If it has been stated, the stated clause's truth descriptor has already been stored. Also, a hypothetical clause can be implied with certain types of subordinate clauses, e.g., condition clauses such as with \u201cif\u201d conjunctions) and certain combinations of verbs and subordinate clause (e.g., \u201cI wish that . . . \u201d; \u201cI want him to . . . \u201d where . . . indicates an hypothetical clause). The conjunctions which indicate hypothetical subordinate clauses contain a function which stores the hypothetical truth descriptor in the position of the verb of the subordinate clause in the SDS. If a hypothetical clause is implied by the word sense number of a verb,  stores a hypothetical truth value in the position of the verb of the subordinate clauses in the SDS. Also the purpose selection process in Purpose Identifier  determines when a required state was set by a non-indicative clause. In this case Identifier  stores the hypothetical truth value in the position of the verb requiring a hypothetical state in the SDS. A hypothetical clause can also be detected by determining that the clause was stored as being hypothetical in Knowledge and Experience Memory . The detection in  occurs during Purpose Identification Process .","Tense, Aspect and Voice","Tense and aspect are two types of functions related to verbs. Tense implies a time of truth for the clause containing the tensed verb with values of present, past, and future. The present tense is usually unmarked. The past tense is often indicated with inflections added to the base verb, e.g., \u201cworked\u201d. The future tense is often indicated with the modal \u201cwill\u201d. These forms of tense have a time of truth which depends upon the states set by the verb in the clause. A stative verb sets or implies a state value which stays at that value for long periods of time. An eventive verb sets some states which last a short time and possibly some states which last longer. A habitive verb implies a repeated eventive verb. The time of truth is the length of time, beginning at a time relative to the time of truth's time point. The time point is the focal point of a clause, i.e., the most important point in time relative to the information content of the clause. The time of truth is the length of time that the set or implied states remain at the set value. The tense, the time of truth, and the time point of the verb are really default values which can be altered by adverbials and\/or the context.","There is a perfective aspect and a progressive aspect. The perfective aspect, e.g., \u201chas examined\u201d, implies a time of truth within a period of time. The progressive aspect, e.g., \u201cexamining\u201d, implies an expansion of the time of truth around an eventive verb's time point. One use of aspect is to allow the description of activity which occurs in parallel, i.e., at least some portion of one verb's process occurs at the same time that one or more other verb's processes do. The perfective and progressive aspects each imply a default time of truth which depends upon the tense and type of verb (e.g., eventive). The perfective and progressive aspects can also be combined in one verb phrase, and this combination has another default time of truth depending upon the tense and type of verb. The time of truth implied by aspect can also be altered by adverbials and\/or context.","The tense and aspect of a verb can also be combined with a modal verb. Tense and aspect can also be realized with an active or passive voice. Most combinations of tense, aspect, modality, voice, and verb type are allowed. Tense, aspect, and voice can also be combined for verbals, i.e., infinitives and participles. These combinations can include subsets or all of the tense, aspect, voice, but modality is mostly limited to non-verbals. However, some phrases implying modality can be combined with verbals. Also, modal adverbials can also be combined with verbals.","The primary semantic purpose of voice is to allow for the option of placing the receiver of a verb's state setting as subject of the clause. Normally, the doer (or agent) is the subject and the object is the receiver in an active voice verb. A passive voice verb phrase normally has the receiver as subject and the doer indicated in an adverbial. An example of an active voice verb is: \u201cThe doctor examined me.\u201d A passive voice example is: \u201cI was examined by the doctor.\u201d The passive voice verb construction is handled in the Syntactic Parse Step . One result of Step  is the selection of the current clause's data structure with associated grammar information. The clause's grammar information contains, among other information, the sentence roles of the phrases in the clause. The function assignment of sentence roles for a clause in Parser Syntactic Memory  is made according to the voice of the verb associated with the clause. Thus, a text clause with a passive verb is associated by Step  with a clause descriptor which has sentence roles assigned to functions for a passive verb, e.g., the subject is set to have receiver function. A text clause with an active verb is associated with a clause descriptor which has sentence roles assigned to functions for an active verb.","The primary semantic purpose of tense and aspect is to participate in the setting of the position and length of the time of truth for a clause. The tense, aspect, adverbials and context set the time of truth for an individual clause. The time of truth for a sequence of clauses as presented in a conversation can be used to order the clauses in time at least relatively if not absolutely. The order of a sequence of clauses can include some clauses' times of truth overlapping other clauses' times of truth. The tense and aspect of a verb select a default time of truth. Time adverbials and features of the context can alter the default position and length of the time of truth. For example, a time adverbial can shift a verb with a present tense into the future: \u201cThe party starts tomorrow at 1.\u201d The context can set a time position which applies to following clauses. For example, the next sentence following the previous example could be: \u201cThe cartoons start at 1:30.\u201d Time adverbials can also affect the time relationship between a sequence of clauses. For example, the next sentence in the conversation \u201cThe food and beverages arrive at my house before the party.\u201d Subordinating, correlative and coordinating conjunctions can also set timing relationships between the main and subordinate clauses. For example, the next sentence in the conversation could be: \u201cWhile the cartoons are playing, I will set the table with the birthday cake.\u201d Conjunctive adverbials can indicate a timing relation to the current sentence's main clause to the previous sentence's main clause. The next sentence in the conversation could be: \u201cNext, I will get the candy ready.\u201d Finally, previous experience can indicate timing relations of a clause to the conversation. This timing relation can be from a specific experience or from a generalization of experiences. This timing relation is stored with experience in Experience and Knowledge Memory . For example, the next sentence in the conversation could be: \u201cI hope the decorations set a festive mood for the party.\u201d Experience would indicate that decorations would be put up before the party and be taken down afterward, i.e., \u201cthe decorations\u201d are present during a party.",{"@attributes":{"id":"p-0298","num":"0320"},"figref":["FIG. 10","FIG. 10","FIG. 10","FIG. 10"],"i":["b ","b","b ","b "]},"The timing relation of a clause to the other clauses in a conversation is stored in a data structure in Context Memory , the timing point descriptor. This data structure is a bi-directional linked list of time points. The time point is the time location of focus with respect to the conversation. Each time point is associated with the time of truth of a clause in the conversation. The time point descriptor also has a descriptor for its associated time of truth which specifies the length of the time of truth to the extent that it is known. If nothing about the time of truth is specified, then a pointer to the default value is stored in the descriptor. If more information about the time of truth is known, that information is stored in the descriptor. The known information can come from the conversation, process information associated with the verb, or from information related to a state value for example. The known information of the time of truth includes values for: the start point, the time point, and\/or the end point. The data structure of the time point includes as needed: one pointer to each related preceding time point, one pointer to each related succeeding time point, and\/or one pointer to each related time point which has the same time value, i.e., a time point occurring at the same time. This timing point descriptor structure is accessed to determine if the time of truth of a state or verb includes a time point or time interval. For example, during verb word sense number selection, the value of a state at a particular time in the context can be checked by accessing timing point descriptor of the clause which sets the state. Each of these pointers described here has a descriptor which indicates the relation between the two time points. This section has been about timing which is always present in a relation. However, the clause associated with each time point in a relation can also have a purpose relation as described above which broadly includes: information content, activity, plan, function, cause, intention, condition and goal. The purpose relations are also stored in the timing point descriptors of the timing pointers to the related clause and a description of the type of purpose. The timing point descriptor also contains a truth value descriptor for storing the mood or modal truth values.","The Timing Relation Selection Process flow chart is illustrated in . This timing selection process of Function Word Processing Step  is typically invoked by Step  after the word sense number of the verb of the current clause has been selected. The first step, Step , of the timing relation selection process is to look up the default time of truth of the clause's verb in a data structure similar to . The data structure is stored in a data area associated with Function Step .  looks up the grammar information associated with the verb phrase of the Current-Clause in Syntax Phrase Trees . The Current-Clause is an invocation parameter.  creates a tense code descriptor which contains the tense, aspect, mood, and other information such as emphaticness of the verb as contained in the grammar information. The stative, habitive or eventive state setting type associated with the selected word sense number of the main verb or set by time adverbials is determined by Selector , and is contained in the verb word sense number's portion of the SDS. The default time of truth is looked up with the grammar information and the type of state setting of the verb. Then the timing relation data structure described in the previous paragraph is initialized for the Current-Clause with two pointers stored in Context Memory . One pointer is to the location of the Current-Clause at the current SDS. After the Current-Clause has been processed for purposes, judged to be an acceptable interpretation, and stored in , this pointer is updated to its location in . The other pointer is to the default time of truth associated with the clause in the data structure associated with . If the clause's truth value has not already been set, the default mood descriptor value from the verb's phrase in Syntax Phrase Trees  is also stored in the clause's truth descriptor in this data structure. After Step , Step  is true if the Current-Clause contains an adverbial with a time setting function. If Step  is true, Step  sets the information implied by the timing adverbial in the timing relation data structure element associated with the Current-Clause. The function of a timing adverbial was selected as described in the previous section on adverbials. A timing adverbial can set a time point absolutely (e.g., \u201cat 1\u201d) or relatively (e.g., \u201cbefore the party\u201d). Setting a time point absolutely corresponds to setting a value for the time point. Setting a time point relatively corresponds to setting a pointer to a preceding, concurrent or succeeding time point as implied by the function of the adverbial which sets the relation to the time point of the entity in the adverbial. A pointer is set to a time point value if the time point has not been stated. The pointer is updated when the unstated time point has its pointer added to its truth descriptor. The unstated time point's pointer is to a truth descriptor with a pointer with only an unstated time point. When such a truth descriptor is detected, the pointer to the previously unstated time point is added. The time point of the entity is either associated with the non-clausal complement's time property or is associated with the time point of a clausal complement. The complement is typically the complement of the time adverbial's prepositional phrase. The entity's time property is either stored in Memory , , , or .","After Step  or if Step  is false, Step  is true if the Current-Clause can have one or more default pointers set between its time point and other clauses' time points. The default pointers are either between the Current-Clause: and the preceding clause with the same doer, and the preceding clause with the same receiver, or between the Current-Clause and the preceding clause with the same owner. The doer is the subject in an active voice, non-copulative verb, sentence, and the receiver is the object. The owner is the subject in a sentence with a copulative verb (e.g., \u201cto be\u201d, \u201cto have\u201d, \u201cto feel\u201d). These descriptions of doer, receiver and owner are to identify these terms. Each processed clause in  has these terms identified and stored for each occurrence of the term. If the Current-Clause has a non-copulative verb, a default relation for the most recent preceding clause with at least one same doer will be added to the timing point descriptor of the Current-Clause if there is a preceding clause with at least one same doer. Also, a default relation for the most recent preceding clause with at least one same receiver will be added if there is a preceding clause with the same receiver. If the Current-Clause has a copulative verb, a default timing relation will be added between the Current-Clause and the most recent clause with the same owner (as an owner) if there is a preceding clause with the same owner. If the Current-Clause is not the first clause of a conversation, or is not a clause with the first referent to its doers, receivers, and owners, a default pointer will be added to the previous clause. These default pointers are used to organize the conversation by doer, receiver, owner, and clause sequence for use by Purpose Identifier . Step  is true if one or more default pointers can be set. If  is true, Step  sets a pointer in the descriptor of the time point of the Current-Clause to a time point descriptor of a preceding clause in the default type of timing relation for each possible default timing relation. The set pointer descriptor in the Current-Clause contains a preceding\/succeeding type pointer to the succeeding\/preceding clause in the default relation, and the pointer is set with the default relation type. The set pointer descriptor of a preceding\/succeeding clause contains a succeeding\/preceding type pointer to the Current-Clause, and the pointer is set with the default relation type. The set descriptors of concurrent clauses contain concurrent pointers with the default relation type.","If  is false or after , Step  invokes Purpose Identifier . In this invocation, Purpose Identifier  searches Experience and Knowledge Memory  for a relation of the Current-Clause to the context of the conversation and stored experience and knowledge. The  step searches for a relation implied by the context from experience or knowledge stored in Memory . The search is aided by a conjunctive adverbial or by a conjunction in the sense that the conjunctive adverbial or conjunction can reduce the types of purpose relations which are searched for. A purpose relation found by  has a timing relation and a purpose relation of the Current-Clause to a clause in the context of the conversation. Step  also checks if the timing descriptor including the truth value are consistent. If inconsistencies are detected by ,  initiates processes to correct or remove the inconsistencies as will be described below. If the inconsistency can not be corrected, the Communication Manager initiates processes to determine the correct value possibly through issuing a clarifying question. After  identifies the timing and\/or purpose relations,  is next. Step  sets the time and\/or purpose relations of the Current-Clause: to the previous main clause as implied by a conjunctive adverbial, or to a preceding clause as implied by a conjunction related to the Current-Clause, and\/or to the context of the conversation. The timing relation is realized by setting bi-directional pointers between the Current-Clause and the other clause. The type of pointer, i.e., preceding, concurrent, succeeding, depends upon the relation. For a concurrent relation, each bi-directional pointer is a concurrent type. The other pointer types have opposite values for the bi-directional pointers. The time relation sets a preceding\/concurrent\/succeeding type pointer in the Current-Clause's timing point descriptor to the succeeding\/concurrent\/preceding clause's timing point descriptor. A preceding\/concurrent\/succeeding type pointer from the succeeding\/concurrent\/preceding main clause to the Current-Clause is set to achieve the bi-directional linkage. The purpose relation(s) if any are also stored in the timing point descriptor's of the preceding\/concurrent\/succeeding main and Current-Clause. After , the verb tense, aspect, and timing process is complete. The processing of the Current-Clause is also completed. Step  calls the Communication Manager to continue processing. The Communication Manager does one of the following: issues a clarifying question for any pending inconsistencies which are scheduled for resolution now, initiates the generation of a response, or initiates the processing of the next clause. A response could be generated to a question or could be generated to determine the source of the inconsistency for example.","Conjunctions","Conjunctions have two separate classes of functions: joining parts of clauses, i.e., clausal constituents, and joining clauses. However, each class has the same method of selecting their associated functions. Conjunctions and their function class are detected in Syntactic Parse Step . Coordinating conjunctions occur as singular function words or as multiple adjacent function words, and correlative conjunctions are pairs of conjunctions separated by one of the entities being joined.","Constituent Conjunctions","Many coordinating conjunctions and correlative conjunctions which join clausal constituents have either a combining or a separating function associated with them. However, the most common conjunction, \u201cand\u201d, has both types of functions associated with it. illustrates the data structure for conjunctions which join clause constituents and for conjunctions which join clauses. The data structure is divided into conjunctions joining constituents and conjunctions joining clauses. The data structure for constituent conjunctions has a name which is accessible from Dictionary Look Up Step . Each conjunction name has a function list of one or more functions. The function list can be partitioned by the type of element being joined by the conjunction, and\/or by combining and separating functions.","The Conjunction Selection Process basically involves: selecting the elements being joined by the conjunction, and selecting a conjunction function partition from the ordered list of . The function partition has more than one function possible for the conjunction, and the selection of the specific function in the list will be performed by the initiating selector: Selectors , , or  or Purpose Identifier  for clause conjunctions. For example, Selector  calls the conjunction selection process for conjunctions: of nouns and\/or pronouns in a sentence role, of adverbials in a sentence role, and of multiple modifiers of a clausal abstract noun. The evaluation of a conjunction of nouns and\/or pronouns in a sentence role, of a conjunction of adverbials in a sentence role, or of a conjunction of modifiers of a clausal abstract noun has a result type of either a combining function of the elements into a sentence role of one clause containing the joined constituents for a word sense number of the clause's verb, or a separating result which generates multiple clauses each with one or more of the joined constituents. If there are multiple clauses, the conjunction function which implies the multiple clauses can have a stored set of possible relationships which indicate the possible purpose relations among the generated clauses. Purpose Identifier  selects the intended purpose from the stored set, or  selects the intended purpose from the set of all possible relation between clauses.","Some conjunctions only have one of the separating or combining result types. For example, \u201cNot Tom, but Mary . . . \u201d has the correlative conjunction \u201cnot . . . but\u201d. This correlative conjunction only has the separating result type. Selector  evaluates this separating function which causes the creation of two clauses of the forms for this example: a clause with the constituent after \u201cbut\u201d (e.g., \u201cMary\u201d) as subject and a negative clause (i.e., one with a false truth descriptor value) with the constituent following \u201cnot\u201d (e.g., \u201cTom\u201d) as subject. The purpose relationship between the two clauses is one of contrast. Other conjunctions have a combining function. For example, a negative preceding \u201cor\u201d only has a combining function. This conjunction is treated as a correlative conjunction. For example, \u201cTom doesn't have a watch or a tie.\u201d This example has the interpretation: \u201cTom doesn't have a watch, and Tom doesn't have a tie.\u201d Another example is the \u201cand\u201d conjunction which allows the separating or combining function for joining clause constituents. One conjunction function of \u201cand\u201d implies the joined constituents participate in combination in a single clause. e.g., \u201cJohn and Mary were married.\u201d The other function implies that there is a separate clause containing each of the clause constituents joined by \u201cand\u201d, e.g., \u201cJohn and Mary were eating.\u201d For \u201cand\u201d, the first function is the combination of constituents into a single clause. This first conjunction function of \u201cand\u201d is determined to be possible if the verb in the clause containing the joined noun and\/or pronoun constituents requires the constituent's sentence role to have a number range which includes the number of constituents in the sentence role of a word sense number of the verb. During the selection of a word sense number of a verb by Selector , the number of noun and\/or pronoun constituents required for a word sense number of the verb determines if the constituents can possibly be combined or must be separated. If the number of constituents combined by the conjunction is within a range of the number of constituents required by the word sense number, and if the joined elements meet other capability requirements of the combined word sense number, the combining of all joined constituents into a single clause is attempted. Otherwise the separate clause per constituent function is used and implies separate clauses. Separate clauses are also implied if Purpose Identifier  fails to find the clause with combined elements in a sentence role consistent with the context and previous experience through sentence role availability or through plausibility and expectedness checking. Separate clauses are generated to set the proper state representation of the joined clause constituents. However, the more compact form of the clause is stored in , but is marked to indicate the separate clause interpretation. For example, if separate clauses are required, the clause, \u201cJohn and Mary were eating.\u201d becomes \u201cJohn was eating.\u201d and \u201cMary was eating.\u201d The relationship among the generated clauses for \u201cand\u201d is determined by Purpose Identifier  using possible relations associated with \u201cand\u201d for relating the clauses. The possible relations are stored with the functions of the conjunction. Multiple clauses are created to set all the state representation information implied by a clause with a sentence role that has multiple constituents joined with a conjunction. A conjunction of adverbials can also result in implying multiple clauses. If the joined adverbials can be contained simultaneously for one word sense number of the modified verb, a single clause is possible. Otherwise, multiple clauses are implied.","When verbs are joined by a constituent conjunction, a separate clause is always generated for each joined verb. When a sentence contains a conjunction joining verbs or parts of a clause containing a verb, the conjunction of these elements is processed in Selector  to generate the implied separate clauses. If there is one or more non-verb sentence roles of multiple constituents joined with a conjunction, and if there is more than one verb joined with a conjunction, the joined verbs are processed into separate clauses. Then, the single versus separated clause decision of a multiple constituent sentence role is made separately for each clause generated with a different verb of the sentence. Multiple sentence roles, each with multiple constituents joined with a conjunction, could result in a clause being created for each unique combination of one constituent from each of the multiple sentence roles. For example, \u201cTom and Mary gave presents to Bill and Bob.\u201d could cause four clauses to be generated: \u201cTom . . . Bill.\u201d; \u201cTom . . . Bob.\u201d; \u201cMary . . . Bill.\u201d; and \u201cMary . . . Bob.\u201d where . . . means \u201cgave a present to\u201d. Finally, plural countable nouns or nouns representing a group of nouns usually imply that each noun of the plural noun or member of the group are equivalent to each noun or member being enumerated in a list joined with \u201cand\u201d. If the plural noun or group is enumerated and the sentence requires generation of multiple clauses, the multiple clauses usually are generated and evaluated. However, if the plural noun or group has not been enumerated, or if the situation, e.g., too many members in the group, the plural noun or group is evaluated without expansion to a set of multiple clauses, i.e., the clause with the plural noun group is treated as a single clause with a plural clause constituent. When a singular noun of the plural noun or a member of the group requires a state representation from the clause containing the plural noun or group noun, that individual noun is evaluated in that clause to generate the required state representation.","Selector  can invoke the conjunction selection process for a conjunction of modifiers of a clausal abstract noun. The modifiers of a clausal abstract noun can either modify the verb in the clause which characterizes the clausal abstract noun, or the modifiers can modify a noun sentence role in the characterizing clause. If the conjunction of modifiers modifies the verb, Selector  calls Morphological Processing Step  to convert the modifiers into adverbials, and then  calls the Conjunction Selection Process. Otherwise, the selector related to the modified noun calls the Conjunction Selection Process. If Selector  calls this process, the above discussion relating to conjunctions of adverbials modifying verbs applies. The determination of the modifiee of modifiers of a clausal abstract noun are made in the expansion of the abstract noun into a clause by  in a process described below.","Selector  calls the Conjunction Selection Process for conjunctions of modifiers of a concrete noun. A conjunction of modifiers of a concrete noun can imply a single noun modified by each joined modifier, or they can imply separate nouns, each modified by one of the modifiers. This determination is made at  by first checking if the modifiers can consistently modify a single noun with the selected word sense number. If the modifiers can consistently modify a single noun, the single noun interpretation is tried. If this interpretation proves inconsistent with the context or previous experience, or if a single noun interpretation is not consistent with the modifiers, the multiple noun interpretation is utilized. If the multiple noun interpretation is utilized, the clause containing the multiple nouns could either have a single clause interpretation or multiple clause interpretation as described above for conjunctions of nouns and\/or pronouns in a sentence role.","Selector  also calls the conjunction selection process for conjunctions of modifiers of a state abstract noun. A conjunction of modifiers of a state abstract noun can imply a single owned state modified by each joined modifier, or they can imply separate owned states, each modified by one of the modifiers. This determination is made at  by first checking if the modifiers can consistently modify a single owned state with the selected word sense number. If the modifiers can consistently modify a single owned state, the single owned state interpretation is tried. If this interpretation proves inconsistent with the context or previous experience, or if a single owned state interpretation is not consistent with the modifiers, the multiple owned state interpretation is utilized. If the multiple interpretation is utilized, the clause containing the multiple states could either have a single clause interpretation or multiple clause interpretation as described above for conjunctions of nouns and\/or pronouns in a sentence role.","It is possible to have multiple levels of constituent conjunctions such as: \u201cA and B, or C,\u201d versus A, and B or C\u2033 where the capital letters are constituents. The first example has \u201cA\u201d and \u201cB\u201d joined by \u201cand\u201d. The second example has \u201cB\u201d and \u201cC\u201d joined by \u201cor\u201d. This type of multiple levels is detectable because the comma placement indicates the constituent to conjunction association. Comma placement can also indicate the association of clauses to clause conjunctions. The Conjunction Selection Process uses the indicated association if the punctuation indicates the association. Otherwise, this process selects an association. If the process selects the association, it is marked as \u201cambiguous\u201d. If the association is marked as \u201cambiguous\u201d, and if the selector (, , or ) determines that the association is inconsistent, the selector utilizes an alternate association.","Clause Conjunctions","There are two groups of conjunctions joining clauses: coordinating, and subordinating. Coordinating conjunctions have single phrase realizations, and correlative conjunctions have two phrase realizations. Conjunctive adverbials are a type of coordinating clause conjunction which join the containing clause to a clause in a previous sentence as described above. Subordinating conjunctions also occur as single phrase and correlative types. Coordinating conjunctions join clauses of equal rank. Subordinating conjunctions join a subordinate clause to a main clause. Coordinating and subordinating conjunctions and their associated clauses are detected in Syntactic Parse Step . The data structure associated with a clause conjunction is shown in . Clause conjunctions have an internal name which is which is accessible from Dictionary Look Up Step . Each conjunction has a type flag indicating coordinating or subordinating. Also, each conjunction has one or more associated purpose relations of clauses.","A purpose relation of a clause conjunction indicates how the joined clauses semantically interact among themselves. Clause conjunctions are first processed by the Conjunction Selection Process to be described below. When Purpose Identifier  is first invoked, it checks to determine if there are any clause conjunctions which have not been processed by the Conjunction Selection Process. If there is such a clause conjunction, the Conjunction Selection process is invoked by . The clause relation is then selected by Purpose Identifier . These clause relations are the purpose relations as discussed above, and the purpose relations broadly include: information content, activity, plans, intentions, functions, causes, conditions, and goals. The relations associated with a clause conjunction are used by Purpose Identifier  to search for which of the conjunction's relations was intended by the statement's source based upon the context and previously stored experience. Multiple clause conjunctions can be combined in one sentence. Multiple clause conjunctions are identified at Parser Step . One example of multiple clause conjunctions is multiple subordinate clauses joined by a coordinating conjunction. Another example with multiple clause conjunctions is: \u201cA, B, and C, or D, E, and F.\u201d, where the capital letters represent independent clauses. Multiple clause conjunctions are first processed by the Conjunction Selection Process to select a default association of clauses to conjunctions. If Purpose Identifier  determines that an \u201cambiguous\u201d association of clauses selected by the Conjunction Selection Process is not consistent with the context or previously stored experience,  selects an alternate association of clauses to conjunctions.","The Conjunction Selection Process","The process for selecting conjunctions of clause constituents and of clauses is illustrated in . As described above, the process for constituent conjunctions is called by Selector , , , or Purpose Identifier  for example. Selector  calls this process: for conjunctions of verb phrases; for conjunctions of sub-clauses containing verb phrases and objects or subject complements, i.e., predicates; for a conjunction of nouns and\/or pronouns in a sentence role; for conjunctions of adverbials; or for conjunctions of modifiers of some clausal abstract nouns. Selector  calls the process of constituent conjunction selection for conjunctions of modifiers of concrete nouns. In some instances, coordination of subordinating conjunctions are elliptically processed into a coordination of subordinated clauses. Purpose Identifier  invokes the Conjunction Selection Process for conjunctions not previously processed by the Conjunction Selection Process. The Conjunction Selection Process processes all conjunctions in a specified set of conjunctions.","The Conjunction Selection Process begins at Step . Step  initializes the conjunction selection process for a conjunction by setting the first conjunction specified in a set by the initiating caller to be the Current-Conjunction (e.g., Selector  for a predicate). Correlative conjunctions are processed as a single conjunction even though a correlative conjunction has two separated conjunction words.  initializes the Current-Conjunction-Elements to contain all elements preceding the Current-Conjunction. The Current-Conjunction-Elements variable contains elements joined with the Current-Conjunction.  also initializes the Current-Group to be null and the Current-Conjunction-Status to be UNAMBIGUOUS. These variables are used to select the elements joined with a conjunction when the joined elements are ambiguous. Step  follows . Step  is true if the Current-Conjunction is not followed by another conjunction in the same sentence role of the clause, or if the previous condition is false, the following conjunction is delimited (by a comma for example) so as to indicate the joined elements associated with the Current-Conjunction.  is true if the Current-Conjunction is unambiguously associated with its joined elements. A single conjunction of sentence role elements or of clauses always has an unambiguous element association which is implied by the first condition of . The second condition implies unambiguity if multiple conjunctions are delimited to indicate the element associations.","If  is true, the elements of the Current-Conjunction are unambiguously associated and  is next.  either adds the delimited elements succeeding the Current-Conjunction to the Current-Conjunction-Elements variable, or adds the element succeeding the Current-Conjunction to the Current-Conjunction-Elements. Note that elements joined with the same conjunction between each element (e.g., \u201cA or B or C\u201d) is detected in Parse Step  and is replaced with all but the last conjunction removed in the Sentence Data Structure by Dictionary Look Up Step . If  is false, the elements are ambiguously associated with the Current-Conjunction and  is next.  sets the Current-Element to be the first element succeeding the Current-Conjunction. After ,  is next and is true if the Current-Element is in a group relation with the elements currently in the Current-Conjunction-Elements.  is false if the elements are not nouns. The group relation is used in  because the group relation can indicate the intended association of the elements to the conjunction. When the conjunction selection process is called, the word sense number of constituents has not been selected. However for , the group relation is searched for by using word sense numbers that are associated with the text of Current-Conjunction-Elements and the Current-Element in . If any of the elements do not have an associated word sense number in ,  is false. Otherwise, the group relation is first searched for in  and if none is found, then in . The search is as described for group relations implied by prepositions with the word sense number restriction. Other criteria for selecting intended associations is not used at  because the other selecting criteria is stored at the selector initiating the constituent conjunction selection process. If  is true, Step  is next and adds the Current-Element to the Current-Conjunction-Elements variable.  also marks the Current-Element entry in the variable with BY-INCLUSION.  also stores a pointer to the group relation containing the Current-Element in the Current-Group variable. If  is false,  is next and adds the Current-Element to the Next-Conjunction-Elements variable and marks the addition with BY-DEFAULT.  also adds a CONJUNCTION mark to the end of the Current-Conjunction-Elements variable. The marks added in  and  indicate the element which is ambiguous and could have a different association to a conjunction. The caller can assign the ambiguous element to a different conjunction if the current interpretation proves inconsistent.  assigns the Current-Element by group association.  assigns the Current-Element to a default conjunction association. After  or ,  is next, and assigns the Current-Conjunction-Status as AMBIGUOUS.","After  or ,  is next, and is true if the Current-Conjunction has functions which generate a single clause or multiple clause interpretation and the clause contains a function word(s) which indicates a single or a multiple clause interpretation. \u201crespective\u201d and \u201crespectively\u201d are examples of such function words. If  is true,  is next and assigns the Current-Function-Group pointer to have a value of the location of the clause interpretation function indicated by such a function word in the type of element partition of the Current-Conjunction. If  is false,  is next and assigns the Current-Function-Group pointer to have a value of the location of the beginning of the functions in the type of element partition of the Current-Conjunction. The functions are located in a data area of Function . The function data structure is illustrated in . After  or ,  is next.  stores the following information at the position of the first word of the Current-Conjunction in the SDS: a pointer to the Current-Conjunction-Elements variable, the Current-Function-Group, the Current-Conjunction-Status, and the Current-Group. After ,  is next and is true, if there is another unprocessed conjunction in the specified set of conjunctions. If  is false, the constituent conjunction processing is completed for the current invocation of this process and  sets processing to continue at the caller. If  is true,  is next and sets the Current-Conjunction to be the next unprocessed conjunction either in the specified set of conjunctions. After ,  is next and is true if the Current-Conjunction-Status variable is AMBIGUOUS. If  is true,  is next.  sets the Current-Conjunction-Elements variable to contain the elements in the Next-Conjunction-Elements variable and to contain all elements which are not in a previously processed conjunction's Current-Conjunction-Elements variable instantiation and which precede the Current-Conjunction. If  is false,  is next and sets the Current-Conjunction-Elements variable to contain all elements which are not in a previously processed conjunction's Current-Conjunction-Elements variable instantiation and which precede the Current-Conjunction. After  or ,  is next.  sets the Current-Group variable to be null. Also  sets Current-Conjunction-Status to be UNAMBIGUOUS. After ,  is next and processes the Current-Conjunction as described above.","Interjections","Interjections are single words or phrases which generally express an emotion. An example of an interjection is: \u201cOh!\u201d. Possible interjections are detected by Parse Step . Dictionary Look Up Step  checks the grammar information of each possible interjection phrase to determine if the phrase is an interjection. Each interjection has an entry in Dictionary . Associated with each interjection is one or more pointers. Each such pointer addresses a clause state representation stored in Clausal Abstract Noun and Clause State Representation Memory . The clause state representation addressed by the pointer associated with an interjection is the state representation of that interjection, or the clause state representation is at least part of the interjection's state representation. When 18 determines that a phrase is an interjection,  places the first pointer in the interjection's Dictionary  entry into the interjection's location in the SDS.  also stores a mark indicating that the phrase is an interjection and stores a pointer to the Dictionary  entry of the interjection. For example, a textual representation of one clause state representation of \u201cOh!\u201d is: \u201cThe speaker (of \u201cOh!\u201d) is surprised by the current context.\u201d If the state representation of an interjection requires multiple clauses to express the interjection's state representation, the additional required clauses are associated with the clause pointed to by the interjection's Dictionary  entry. The additional required clauses are accessible from the information content purpose category associated with the clause representation pointed to by the interjection's pointer in Dictionary . The information content purpose category associated with the clause representation contains a pointer to the additional required clauses. The additional required clauses are either chained with pointers for clauses which are context independent, or are organized into a tree of clauses with a particular chain of clauses selected by the context. The information content purpose category along with other related purpose categories are stored in Purposes Associated with Clausal State Representation Memory .","An interjection may have multiple pointers associated with the interjection's Dictionary  entry. The multiple pointers are utilized for an interjection which has multiple clause state representations. There is a pointer for each clause state representation of an interjection. Each clause state representation is a different meaning of an interjection. For example, \u201cGreat!\u201d has two basic clause state representations, and the corresponding textual representations are: \u201cThe speaker is very happy with the current context.\u201d; \u201cThe speaker is very unhappy with the current context.\u201d. The different clause state representations are selected by Purpose Identifier . More specifically, the multiple ordered clause state representations are selected in the same order as the pointers are listed in Dictionary ; The selected clause state representation is checked for consistency with the current context and previously stored experience by Purpose Identifier ; The selected state representation is accepted as the intended meaning if the clause state representation is found to be consistent at , or the state clause representation is rejected and this process is repeated starting at the selection of the next clause state representation. If this selection and evaluation processes fails to select a clause state representation, the Communication Manager is informed of a failure to process an interjection. If a clause state representation is successfully selected and evaluated, control returns to the Communication Manager. Interjections are processed for selection and evaluation when they are encountered in the SDS.","Morphological Processing Step ","A word with an affix or a combination of affixes is directed to morphological processing in Dictionary Look Up Step . When a morphological word is composed of a base word, one or more prefixes, and one or more suffixes, the prefix or combination of prefixes and the suffix or the combination of suffixes are each treated as invoking separate morphological processes. The suffix or combination of suffixes is morphologically processed first followed by the morphological processing of the prefix or combination of prefixes in a morphological word with both one or more prefixes and one or more suffixes. In the following description, the term affix or combination of affixes either applies to a prefix or combination of prefixes, or applies to a suffix or combination of suffixes. When a morphological word has both types of affix(es), the statement in the following description applies separately to each type of affix in the order of the suffix(es) first. When a word in Step  has an affix or combination of affixes, the word plus affix(es) may have an associated address descriptor, or morphological processing code(s) stored in Dictionary . Prefixes or combinations of prefixes have separate descriptors or codes from suffixes or combinations of suffixes for a base word. This morphological information can be in a special table for anomalous morphology, or the morphological information can be in a common table. The address descriptor contains an application vector which designates which word sense numbers of a baseword are allowed for usage. The address descriptor along with the address of a base word's word sense number is used to calculate an address of a portion of a word sense number in the base word's state representation data structure. This portion of a word sense number in the state representation data structure contains such a base word plus affix's state representation. This portion can be the entire data structure associated with a word sense number, or the portion can be a subset of the data. A word plus affix(es) alternately can have one or more morphological processing codes. Each code has one or more designated functions stored in a morphological data structure. Morphological Processing Step  selects a code. This code's associated function(s) typically results in the generation of an address descriptor to access a portion of a word sense number's data structure which contains the state representation of the word plus affix(es); or results in a generation of a phrase containing the base word, one or more function word function addresses, and\/or one or more state representation words all of which is equivalent to the base word plus affix(es), or results in a clause containing the base word, function word function addresses, state representation words, and sentence roles of the clause containing the morphological word. Some words in the phrase or clause already have a state representation addresses or function word function address. Words with addresses are typically implied by the affixes. The addresses of the words without addresses in the phrase or clause are then looked up in Step . A word plus affix(es) has its own address or code(s) either because the word has been preprocessed or the word plus affixes has a unique semantic relation to its base. A word plus affixes has a preprocessed address descriptor or code to save the overhead of morphological processing. A word with a unique semantic relation would not access the correct semantic information structure through morphological processing. As will be described below, the morphological codes correspond to function-types.","A base word plus affix(es) without an associated address descriptor or code in Dictionary  has it state representation determined from the affix(es), the base word plus affix(es)'s part of speech, and the base word's part of speech. One reason a Dictionary  entry does not contain a preprocessed morphological entry is that all realizations of the morphological entry are possible for the base word. Morphological Processing Step  uses the affix(es) and the parts of speech to select functions which either generate an address descriptor to the word plus affixes state representation or which generate a phrase or a clause. In the case that a word has both a prefix(es) and a suffix(es), the prefix(es) is processed after the suffix(es). The processing of the suffix(es) may change the representation of the base word plus affixes, i.e., from a word to a phrase or clause. However, the processing in Step  of the prefix(es) uses the original part of speech of the base word plus affixes before processing for a suffix(es) to determine the state representation of the prefix(es) plus a base word which has already been processed for its added suffix(es). The processing of a prefix(es) results in either an addition to the base word's address descriptor or results in a phrase or clause modifying the base word in the phrase of clause resulting from processing of the suffix(es). The generated address descriptor accesses a portion of the base word's state representation memory storage area. The words without addresses in the generated phrase or clause are processed into addresses of function words and state representation words by Dictionary Look Up Step . A morphological word can have multiple sets of functions with one set of functions for each different state representation of the morphological word. Each set of functions can correspond to a code in .","Morphological Processing Step  can also generate a representation of a morphological word which is formed from a base word in order to change the base word's part of speech at the request of an initiating selector. The caller, such as Selector , provides the base word, its part of speech and the required part of speech for the morphological word.  determines a suitable affix or combination of affixes which can form the required part of speech from the base word. Then the affix or combination of affixes, base word part of speech, and the required part of speech are used to generate the state representation of the morphological word as described above.",{"@attributes":{"id":"p-0328","num":"0350"},"figref":"FIG. 12","i":"a ","b":"20"},"The first function-type selected from the multiple function-types or the only function-type is processed for function evaluation. The function-type's functions are evaluated in the order of the listing in the Morphological Processing Data Structure. When a function-type has a single function, the single function will generate an address descriptor. This address descriptor will either designate a subset of the word sense numbers of the base word or designate a set of replacement phrases or clauses. When there are multiple functions associated with a function-type, one function will generate an address descriptor which designates the word sense numbers which are implied by the base word plus the affix or combination of affixes associated with the one function-type. Other functions either modify the address descriptor associated with the base word or generate a phrase or a clause. A function which generates a phrase has a descriptor indicating the composition of the phrase. The composition of phrase is a template listing in order of position: the head, the state representation word modifiers of the head, and any function words. The state representation address of the head is the address descriptor of the base word. The modifiers of the head in a phrase can be stated modifiers of the morphological word. Such modifiers are also processed morphologically to determine there modification relation to the head if necessary. The function words are listed with their function address for implied function words in the template. The template of the phrase is stored in the SDS. After the template is stored, Dictionary Look Up Step  will generate the address to the word sense numbers of the base word. State representation words implied by the affix(es) already have their state representation word in the template.  also looks up the addresses of words modifying the morphological word when they do not already have an address in the template. Also,  invokes processing for function words requiring processing such as stated function words. If the affix implies a clause generation, either the function contains a descriptor template for each sentence role phrase of the clause, or the function contains an invocation of Ellipsis Processing Step  to generate the clause or clauses. The descriptor template of a sentence role phrase of a clause has the same form as a descriptor template for a phrase as just described. In addition, the stated state representation word modifiers of the morphological word can be sentence roles of the clause containing the morphological word in the template descriptor. Such stated modifiers may also require morphological processing. Multiple clauses would have a main clause and one or more subordinate clauses. Step  can either be directly called from , or the invocation can be stored in the SDS for later invocation by Dictionary Look Up Step . The time of invocation is stored in the clause generation function. If clause generation does not depend upon other morphological processing,  invokes . Otherwise, invocation of  is delayed. Any remaining untried function-types are stored in the SDS because the current interpretation of the morphological word may not be correct. The remaining function-types are the alternate possible interpretations.",{"@attributes":{"id":"p-0330","num":"0352"},"figref":["FIG. 12","FIG. 12"],"i":["b ","a"],"b":["2400","2400","18","70","2400","24","2400","2402","2402","2408","2402"]},{"@attributes":{"id":"p-0331","num":"0353"},"b":["2400","2400","2420","2420","2420","20","2420","2421","2420","20","2421","2422","2420","2422","2421","2423","2422","2402"]},"After ,  is next and is true if the invocation descriptor contains GENERATE. If  is true,  is next and sets processing to continue at  which is described below. If  is false,  is next and is true if the base word's SDS position contains a Function-Type-Set. If  is false,  is next.  accesses the Morphological Data Structure of with the following parameters from the invocation descriptor or possibly a parameter set from the Morphological Selection Process: the base word, the AFFIX which can have a null value, a single affix value, or a combination of affixes value, the SOURCE which is the part of speech of the base word, and the DESTINATION which is the part of speech of the morphological word formed from the base word.  accesses the Morphological Data Structure with the base word, AFFIX, SOURCE and DESTINATION to obtain the possible function-types for the AFFIX, SOURCE and DESTINATION. After ,  is next, and is true if at least one function-type was found at . If  is false,  unsuccessfully terminates Step  as described above. If  is true,  is next.  forms a Function-Type-Set composed of all possible function-types as accessed in the Morphological Data Structure at .  stores this Function-Type-Set at the base word's SDS position. After , or if  is true, or if  is true,  is next.  sets the Current-Function to be the first unevaluated function-type stored in the Function-Type-Set.  is the first step in a restarting of morphological processing for a base word. After ,  is next and is true if the invocation descriptor does not contain GENERATE, and if the Current-Function does not contain DELAY. The Current-Function contains DELAY if there is a function which calls Ellipsis Processing Step , and if the evaluation of this function-type must be delayed.  is true if the functions in the Current-Function can be evaluated without delay. If  is true,  is next and evaluates the functions in the Current-Function. After ,  appends the RESULT-TYPE and the value of the result from the function evaluation at  at the end of the contents at the base word's position at the SDS. The RESULT-TYPE has a value of: ADDRESS-DESCRIPTOR, PHRASE, or CLAUSE. The result format corresponding to each result type was described above. If  is false, the evaluation of the functions in the Current-Function variable are to be delayed. If  is false,  is next.  appends DELAYED-FUNCTION, the address of the Current-Function, and the address for evaluating the function(s) at the end of the contents at the base word's position at the SDS. After  or ,  is next and is true if the invocation descriptor contains a non-null INVOCATION-RETURN value. If  is true,  is next.  appends a RETURN-TO-INITIATING-SELECTOR symbol at the end of the contents at the base word's position at the SDS. If  is true, the Morphological Selection Process was initiated by a selector (,  or ).  appends the quoted mark to indicate that control is to be passed to the actual initiating selector at INVOCATION-RETURN after Step  looks up the addresses in the morphological result. After , or if  is false,  is next and sets processing to continue at Dictionary Look Up Step . Step  will evaluate a delayed function-type which includes reinvoking morphological processing to evaluate functions after elliptical processing is complete, and will process any address descriptors and find the addresses of sentence roles in the morphological result.  completes the Morphological Selection Process.","Ellipsis Processing Step ","Ellipsis is the leaving out of one or more consecutive words in a natural language expression. Ellipsis is detected during Parsing Step  for all ellipsis except for morphologically related ellipsis. Morphological ellipsis is detected in Morphological Processing Step . Ellipsis is marked within phrases and\/or between phrases and is stored in the SDS. Part of the Dictionary Look Up Step  processing is to initiate the processing of any ellipsis after Morphological Processing Step  has been completed for the current sentence. At Step , the clauses and phrases of the clauses of the sentence are separated and stored in the SDS. The phrases of the SDS contain: the addresses of state representation words, a tense code associated with verbs, a singular\/plural flag for nouns, function word name codes and their associated addresses of function word selection and evaluation processes, the sentence role of the phrase, the phrase head, phrase modifiers, all marked ellipsis in the phrase including a descriptor of the ellipsis, pointers to all related ellipsis of phrases, a pointer to the phrase in Syntax Phrase Trees , and a pointer to Syntax Clause Trees . After Dictionary Look Up Step  has completed its processing, Step  invokes Ellipsis Processing Step  if ellipsis had been detected during Parsing Step  or Step  and has not already been processed at . Step  invokes ellipsis processing by sending Step  a pointer to the SDS just described and pointers to phrases with ellipsis. The result of Step  is to replace the ellipted words. Step  is processed before any state representation processing is performed upon the current sentence.","There are three types of ellipsis replacements processes. One replacement type process is to look up and transfer the ellipted elements from a corresponding structure within the sentence containing ellipsis. In some cases the ellipted elements are transferred from the previous sentence. Another type of replacement process is to replace the ellipted elements with words implied by the ellipsis. The third type of ellipsis is to generate the ellipted elements from a template. The third process may utilize the first two processes to generate the elements to fill in the template.","The ellipsis process is initiated by Dictionary Look Up Step  or by Morphological Processing Step  sending Ellipsis Processing Step  a pointer to the SDS and a list of pointers to phrases with ellipted elements and\/or related to ellipted phrases.  also sends a flag which indicates if the sentence contains response ellipsis. Step  looks up the descriptor associated with ellipted elements of a phrase in the SDS. The descriptor contains the type of ellipsis. There are 6 types of ellipsis: general, coordination, comparative clauses, response forms, nonfinite verb clauses, verbless clauses, and morphologically formed words implying clause relations. For descriptions of these types of ellipsis see Quirk et al. General, coordination, and comparative ellipsis allow for ellipsis within a phrase and ellipsis of sentence role phrases, and the source of the replacement for ellipted elements is in the current sentence or a previous sentence. Nonfinite verb clauses, verbless clauses, morphologically implied clause relations, and response form ellipsis have specific sources that are transferred to replace ellipted elements. The transfers sometimes utilize templates.","Ellipsis within a phrase is the leaving out of one or more consecutive words in a phrase. Ellipsis of a phrase or phrases is the leaving out of one or more complete consecutive phrases. In the following, the plural of element will be used to include the case where only one element is actually ellipted. Also, the plural of phrase will be used to include the case when only one phrase is actually ellipted. General, coordination, and comparative ellipsis can have ellipsis within a phrase and ellipsis of phrases. For these types of ellipsis, first the descriptor associated with the ellipsis is looked up in the SDS to determine the ellipsis processing required for the type of ellipsis. The type of ellipsis selects the process to be performed in Ellipsis Processing Step . Nonfinite verb clause, verbless clause and morphological clause relation ellipsis as well as response form ellipsis each have a separate ellipsis process to be described below. Response form ellipsis can occur with one or more other types of ellipsis. If response form ellipsis is contained in the sentence, response form ellipsis is processed first. Otherwise, the type of ellipsis is performed as it occurs in a left to right order in the Sentence Data Structure.","General, Coordination, and Comparative Ellipsis Processing","General, coordination, and comparative ellipsis is processed to replace the ellipted elements with the process illustrated in -. The process invocation contains a list of the location of ellipted elements and a flag which indicates if response ellipsis is contained in the sentence. The Current-Sentence, the source for ellipted element replacements, is set to the sentence associated with the SDS in the invocation by Step  or Step , which is the most recent sentence which has not been processed for state representation. The type of ellipsis is stored at the location. First the type of ellipsis selects the ellipsis process to be performed starting at .  is true if response ellipsis is contained in the Current-Sentence. If response ellipsis is present,  is next and sets ellipsis processing to continue at  which is at the Response Ellipsis Process illustrated in . If  is not true, or after response ellipsis processing is completed,  is processed next.  is true if the invocation list contains unprocessed ellipsis in the Current-Sentence. If  is false,  is performed next. In , ellipsis processing is completed.  sets RES-STATUS to SUCCEED and processing returns to the caller. If  is true,  is next and sets the Current-Phrase to be the next unprocessed phrase with ellipsis or the next unprocessed ellipted phrase in the Current-Sentence. Next in , the ellipsis descriptor of the Current-Phrase is looked up in the SDS.  is next, and is true if the type of ellipsis in the descriptor is general, coordination, or comparative ellipsis. If  is false,  sets the parameters ESUB and EOBJ to false, and sets processing to continue at  which begins Nonfinite Verb Clause, Verbless Clause and Morphological Clause Relation Ellipsis Processing as illustrated in . If  is true,  is next, and is true if descriptor from  indicates that the ellipted elements or the ellipted phrase is known.  is true if the ellipted elements or phrase has one or more known replacements. If  is true,  is next, and is true if there is an untried known replacement. If  is true,  is next.  first sets state information for additional processing of alternate known replacements if a replacement is rejected in subsequent state representation processing. RETURN is set to ; the Current-Match is set to KNOWN; if not already formed, the Tried-Phrase-Set-Vector (TPSV) is formed with one element for each possible known replacement for the current ellipted words; (Each element of the TPSV is set to all replacements as UNTRIED. Each of these elements can have a value of TRIED or UNTRIED.)  also transfers the next untried known elements or phrase from the location of a pointer contained in Syntax Phrase Trees  into the SDS. The corresponding element of the transferred replacement in the TPSV is set to TRIED. Finally , transfers processing to step .  stores information for restarting the ellipsis process and is described in detail below. If  is false, the ellipsis processing has failed for known replacements, and other sources of replacement are tried at  which is next.","If  is false, the ellipted elements or the ellipted phrase is unknown. Then one of several methods to find a structure in the Current-Sentence which will act as a source for the ellipted elements and\/or phrases is used. If  or  is false,  is next. In , the Current-Match is set to an EXACT-MATCH. The Current-Match value is used to determine whether the source element or phrase must match exactly with the ellipted element or with the phrase, or whether the match is an INFLECTION-RELAXED-MATCH. The match procedures will be described below. Also in , the Tried-Phrase-Set-Vector (TPSV) is set to all phrases as UNTRIED. The TPSV contains an element for each sentence element in the Current-Sentence which could be an ellipsis source. Note, that modifiers of a noun have the option of a null source. The null source is used for the case when a modifier modifies a coordinated noun phrase, and the modifier does not modify all coordinated constituents. Each of these elements can have a value of TRIED or UNTRIED. This value is set to TRIED if its corresponding element has been considered as a source for ellipted elements or an ellipted phrase. Finally at , the First-Elliptical-Phrase is set to be the location of the Current-Phrase in the SDS. The First-Elliptical-Phrase is used to store the state of ellipsis processing as described below. Next in , if the Current-Phrase has a coordination type of ellipsis, and the Current-Phrase is coordinated with other phrases,  is performed next.  selects the Source-Phrase to be the first UNTRIED phrase coordinated with the Current-Phrase in the nearest preceding first order. The nearest preceding first order selects UNTRIED preceding phrases first until all preceding phrases have been processed for matching. The preceding phrases are selected in a right to left order which selects the nearest preceding phrase first. After all the preceding phrases have been processed without a match, the succeeding phrases are selected in a left to right order which is the nearest succeeding phrase first order.  sets the TPSV element corresponding to the selected phrase to be TRIED. Also,  sets RETURN to . RETURN is used to mark the last source selection process. Next in ,  is true if an untried Source-Phrase was found in . If  is true,  is next, and is true if the Source-Phrase selected in  contains stated words with a same phrase element Current-Match for the ellipted elements in the Current-Phrase. A same phrase element Current-Match means that for each ellipted element of the Current-Phrase, there is a wordset in Syntax Phrase Trees  of the corresponding element in the Source-Phrase which has a Current-Match with a wordset in Syntax Phrase Trees  of the corresponding ellipted element. The Current-Match is either an EXACT-MATCH or an INFLECTION-RELAXED-MATCH which will be described below. If a same phrase element Current-Match was not found in ,  selects the Source-Phrase and processing continues as described above.",{"@attributes":{"id":"p-0341","num":"0363"},"b":["2612","2610","2612","2617","2617","18","2617","30","2618","2618","2635","50","60","70","160","26","26","2635","2635","2635"]},"After  stores the state,  is performed next.  is true if the ellipsis type descriptor from  has an associated special function. Special cases for ellipsis are handled by storing a special function symbol and value in an ellipsis descriptor which is located in the SDS. If  is true,  evaluates the special function which performs an additional function to handle the special case. For example there is a special case for the treatment of the operator \u201cdo\u201d and its tenses. Sometimes \u201cdo\u201d or one of its tenses is stated as part of an verb phrase with ellipsis. For example, \u201cTom went to school later than Bob did.\u201d The above elliptical processing would create the following phrases: \u201cdid go\u201d, \u201cto school\u201d to replace the ellipsis following \u201cdid\u201d. Note that \u201cgo\u201d would be selected as an inflection replacement allowed by the same phrase element INFLECTION-RELAXED-MATCH process (to be described below) because \u201cgo\u201d is the present tense and \u201cwent\u201d is the past tense of \u201cto go\u201d. However, the tense code associated with the \u201cdid go\u201d phrase structure in  does have a past tense. The verb phrase replacement for the ellipsis would normally be interpreted as \u201cdid\u201d implying an emphatic verb phrase as in a denial or contradiction of a statement. The special function associated with \u201cdo\u201d or its tenses is: if the source verb phrase does not have an emphatic function associated with \u201cdo\u201d or one of its tenses, the function removes the emphatic code associated with the \u201cdo\u201d or its tense in the verb phrase with ellipsis in the SDS. The emphatic code is part of the tense code associated with a verb phrase which has been stored by Step . This action of the function essentially removes the \u201cdo\u201d or one of its tense from the sentence. In this example, the actual verb implied by the tense code after removal of the emphatic code is equivalent to \u201cwent\u201d. If the source verb phrase does have an emphatic function associated with \u201cdo\u201d or one of its tenses, the function does not perform any action. If  is false or after , elliptical processing is continued at  which checks for additional unprocessed ellipsis in the Current-Sentence being processed as described above.","If  determined that a Source-Phrase was not found in , or if  was false, i.e., the Current-Phrase does not have its ellipted elements in a coordinated phrase, another source phrase selection method is tried at .  selects the Source-Phrase to be the first untried phrase with the same sentence role as the Current Phrase. The source phrase candidates are selected in the nearest preceding first order.  sets the TPSV element corresponding to the selected Source-Phrase to be TRIED. Also,  sets RETURN to . Next,  is true if  found an untried Source-Phrase. If  is true, then  is next.  is true if the Source-Phrase from  has a same phrase element Current-Match for the ellipted elements in the Current-Phrase having ellipsis or a same phrase Current-Match for the Current-Phrase which is an ellipted phrase. A same phrase Current-Match occurs when the Source-Phrase matches a phrase set for the corresponding ellipted phrase in Syntax Clause Trees . If  or  is false,  is next and selects the next Source-Phrase as described in this paragraph. If  is true, processing continues at .","If a same phrase element Current-Match was found in ,  is performed next.  is true if the next consecutive phrase following the Current-Phrase is ellipted. If  is true,  sets the Current-Phrase to be the next consecutive phrase after the previous Current-Phrase. Also,  sets the Source-Phrase to be the next consecutive phrase after the previous Source-Phrase. Next,  is true if the Source-Phrase has a same phrase Current-Match with the Current-Phrase. If  is true,  continues processing as described above. If  is false, the selected source phrases were not the correct ones, and  is next.  sets the next source selection process to be the value contained in RETURN.  causes the ellipsis processing to continue at  or  ( are described below). If the next consecutive phrase after the Current-Phrase is not ellipted at , a suitable source for the ellipsis has been found, and  is false, and  is performed next. Processing continues at  as described above.","If  did not find a Source-Phrase,  is false, and another source phrase selection method is tried at .  selects the Source-Phrase to be the first untried phrase with the same phrase type as the Current-Phrase. The source phrase candidates are selected in the nearest preceding first order. The same phrase type has the head with the same part of speech or the phrase has the same function for adverbials.  sets the TPSV element corresponding to the selected Source-Phrase to be TRIED. Also,  sets RETURN to . Next,  is true if  found an untried Source-Phrase. If  is true, then  is next.  is true if the Source-Phrase from  has a same phrase element Current-Match for the ellipted elements in the Current-Phrase having ellipsis or a same phrase Current-Match for the Current-Phrase which is an ellipted phrase. If  is true, processing continues at  as described above. If  is false,  is next and it selects the next Source-Phrase as described in this paragraph.","If  failed to select a Source-Phrase,  is false and  is performed next.  is true if the Current-Match has a value of an EXACT-MATCH. If  is true,  sets the Current-Match to have a value of an INFLECTION-RELAXED-MATCH. Also,  sets each element of the TPSV to be UNTRIED. After , processing continues at  as above except the Current-Match has an INFLECTION-RELAXED-MATCH value. The same phrase element Current-Match with an INFLECTION-RELAXED-MATCH includes an exception for an inflection mismatch. An inflection is a suffix added to verbs to add tense, or subject-verb concordance. Also, an inflection is a suffix added to a noun to indicate a plural. Nouns or verbs which have a different form for plurals or tenses respectively are considered to have a inflection. Nouns and verbs with inflections are stored in Dictionary  with an inflection code plus base. The same phrase element INFLECTION-RELAXED-MATCH succeeds when two wordsets of corresponding phrase elements which each have a base wordset plus an inflection code (as described for Dictionary ), and the source base wordset in  (without its inflection code) matches a corresponding ellipted element's base wordset (without its inflection code) in  for an ellipted element, i.e., the wordset match is made disregarding inflection codes. This same phrase element INFLECTION-RELAXED-MATCH is utilized when the source element is not grammatically correct because of an inflection shift required for the ellipted element. For example, \u201cHe speaks often, but he won't (speak) tonight.\u201d, where \u201c(speak)\u201d is the ellipted element and \u201cspeaks\u201d is the source phrase which will meet the same phrase element INFLECTION-RELAXED-MATCH. The same phrase element Current-Match with an INFLECTION-RELAXED-MATCH utilizes the normal EXACT-MATCH criteria unless this criteria fails. The normal EXACT-MATCH criteria is that a wordset in the source phrase exactly matches a wordset of a corresponding ellipted element in  as described above. For the same phrase element Current-Match with an INFLECTION-RELAXED-MATCH, when the same phrase element Current-Match with an EXACT-MATCH fails to match corresponding elements, the same phrase element INFLECTION-RELAXED-MATCH is utilized. The same phrase element INFLECTION-RELAXED-MATCH succeeds when the two corresponding wordsets being matched each have a base wordset plus an inflection code (as described for Dictionary ) and the source base wordset in  (without its inflection code) will match a corresponding ellipted element's base wordset (without its inflection code) in  for an ellipted element. If the same phrase element EXACT-MATCH succeeds, or then if the same phrase element INFLECTION-RELAXED-MATCH succeeds, the same phrase element Current-Match with a INFLECTION-RELAXED-MATCH succeeds.","The same phrase element Current-Match with a INFLECTION-RELAXED-MATCH selects phrase element replacements which result in a grammatically correct phrase. The phrase with ellipsis contains the grammatically correct inflection because the phrase structure associated with the ellipted phrase or phrase with ellipted elements in Syntax Phrase Trees  was selected in Parse Step  to have a grammatically correct inflection. The effect of the same phrase element INFLECTION-RELAXED-MATCH is to substitute the correct inflection code associated with the phrase structure with ellipsis for the incorrect inflection associated with the source phrase without ellipsis. The address associated with a state representation word with an inflection or function word with an inflection is independent of the inflection. When the SDS is updated for ellipted elements in a phrase, the correct inflection code of the phrase with ellipsis is utilized with the ellipted elements transferred from the phrase without ellipsis. Thus the correct state representation word address or the correct function word name code and function selection address are transferred to the phrase with an ellipted element with a inflection mismatch in . Part of the transfer process of  is to transfer the tense code or the plural\/singular flag associated with the elliptical phrase's structure in Syntax Phrase Trees  to the elliptical phrase's location in the SDS. The phrase element in Syntax Phrase Trees  has the grammatically correct tense code or plural\/singular flag. The grammatically correct code or flag value has an associated correct inflection. Thus the phrase with ellipsis has the correct tense code or plural\/singular flag and the correct associated inflection for its elements.","The same phrase Current-Match with an INFLECTION-RELAXED-MATCH utilizes the same phrase element Current-Match with an INFLECTION-RELAXED-MATCH. The same phrase Current-Match with an INFLECTION-RELAXED-MATCH utilizes the same phrase Current-Match with an EXACT-MATCH until a source phrase element cannot match an ellipted phrase's phrase set element wordset in Syntax Phrase Trees . When such a match cannot be made, the same phrase element INFLECTION-RELAXED-MATCH is used as described above. The same phrase Current-Match with an INFLECTION-RELAXED-MATCH succeeds when the same phrase Current-Match with an EXACT-MATCH succeeds, or then when utilized, the same phrase element INFLECTION-RELAXED-MATCH succeeds. If the Current-Match has a value of INFLECTION-RELAXED-MATCH at , the INFLECTION-RELAXED-MATCH criteria has not succeeding in selecting a suitable replacement for the ellipsis in the Current Phrase. Next in ,  is true if the Current-Sentence is the invocation sentence, the sentence which has not been completely processed for state representation. If  is true,  is performed next.  effectively resets the state of the process so that the previous sentence, which has already been completely processed, becomes the potential source of ellipsis. The Current-Match is set to an EXACT-MATCH at , and the Current-Sentence is set to the previous sentence at . Also, the TPSV is set to all elements UNTRIED for the previous sentence. After , ellipsis processing is continued at  which is described above. If  is false, all possible sources for the ellipsis in the Current Phrase have been tried without success, and  is next.  is true if the ellipsis processing was invoked by Selector , , or . If  is true,  is next.  sets RES-STATUS to FAILURE and returns processing to the caller which interprets RES-STATUS as will be described below. If  is false,  is next and informs the Communication Manager of an ellipsis processing error for the Current-Phrase.","It is possible that one or more elements of a source phrase selected by the methods above will be improperly transferred to an ellipted elements. The improperly transferred elements are of two types. One type is an improper modifier transfer. An improper modifier transfer is detected in subsequent state representation processing because the improper modifier sets a state value or adverbial semantic role value which contradicts the corresponding value in the modifiee. The transferred value contradicts the modifiee's value which has previously been set or is set by a non-ellipited modifier in the elliptical phrase. An ellipted improper modifier is rejected when detected in subsequent state representation processing without further influencing the state representation processing. The other possible improper modifier transfer results in a clause interpretation of the improper modifier. Certain morphologically formed words imply clause relations. Transferred modifiers which imply a clause relation are rejected because they would result in a duplicated clause or a clause with one or more incorrect sentence roles. The effect of the rejection of such a transferred modifier is to eliminate duplication of a clause already processed for state representation.","Response Form Ellipsis Processing","The response form type of ellipsis occurs when elements are ellipted in a clause which is a response or comment to a previous clause in a dialogue. Parsing Step  detects response form ellipsis for conversations. Parsing Step  allows incoming text which would not normally be accepted except when there is response ellipsis. The Syntax Phrase Trees  are utilized because the response text does conform to specific text formats including: a single phrase or a list of coordinated phrases, or a clause with ellipsis. Also, normal text can occur during a dialogue.","Response form ellipsis is processed whenever the Current-Sentence contains response form ellipsis. Response form ellipsis processing is performed before any other type of ellipsis processing in the Current-Sentence. If the previous sentence is a question, the question syntax has been replaced with a declarative syntax. For example, \u201cWhere is the car?\u201d is in a question syntax and \u201cThe car is where.\u201d is in a declarative syntax. The declarative syntax is a proper source for ellipted elements for Step . A clause which is in a question syntax has a representation in both the question syntax and the corresponding declarative syntax in Syntax Clause Trees . There are pointers between the question syntax and the declarative syntax. The corresponding declarative syntax of a question which is a previous sentence in an input dialogue receives nearly normal processing prior to usage as a source for response form ellipsis. This nearly normal processing of the declarative syntax is also suitable for a question directed as input for processing. The nearly normal processing of such a declarative syntax is the same as the normal processing except that any interrogative pronoun is handled specially. In the case of a question directed as input for processing, any interrogative pronoun in the declarative form of the question is treated as a normal pronoun to be looked up, i.e., the state representation processing for a question sentence is the same as a declarative sentence. However, once the declarative sentence form is processed, processing as described below provides a response. In the case of a question in a dialogue in a text, an interrogative pronoun is treated as a cataphoric pronoun, i.e., a pronoun whose referent will follow the Current-Sentence. A sentence with a cataphoric pronoun is not processed for state representation access until the next sentence is processed for determining the status of the interrogative pronoun referent. In the case of a dialogue, the response would normally contain the interrogative pronoun referent or a response indicating that the referent is not to be provided. If the referent is provided, the declarative form of the question is processed with the interrogative pronoun referent instantiated. If the referent is not provided, the referent is marked as unknown and the previous sentence is processed for a specific unknown type of referent. The declarative form of a question is a suitable source for response form ellipsis because a response to a question is a declarative sentence that repeats the declarative form of the question usually with ellipsis unless the response indicates that the question is not to be answered. Note that the normal processing includes replacing first and second person personal pronouns with their referents. Thus the processed declarative form of a question used as a source for ellipsis replacement will not cause erroneous pronoun referents for first and second person personal pronouns as would otherwise occur in a dialogue containing questions and responses by different respective speakers. The declarative form of a question as a response to the question requires an exchange of first and second persons unless referents are used in place of such pronouns.","Response form ellipsis processing begins by determining the form of the response and the type of preceding sentence. The preceding sentence selects different processing for the response form ellipsis depending upon the type of preceding sentence, i.e., declarative, interrogative, imperative or exclamatory. There are three types of questions labeled by the type of expected response: yes\/no questions, interrogative pronoun referent questions (wh-questions), and alternative questions. One variation of a yes\/no question is a tag question which has a declarative sentence followed by an ellipted question clause such as: \u201cJohn is ready, isn't he?\u201d. An alternative question has alternatives which are typically listed in a coordinated structure at the end of the alternative question with a form such as: \u201cDo you want A, B, or C?\u201d. The type of sentence and question are stored in the grammar information associated with the clause in Syntax Clause Trees . Responses such as \u201cyes\u201d, \u201cno\u201d, or another word or phrase indicating the affirmative or negative are assigned an adverbial sentence role In Syntax Phrase Trees  when response ellipsis is detected. Such responses have a modal adverbial function.","Response form ellipsis processing begins at  and is depicted in and .  is true if the response has known replacements for the response ellipted elements. If  is true, then  transfers the replacements to the Current-Sentence's SDS. The Current-Sentence is the response. After , in , the first phrase of the response's SDS is marked with NO-ALTERNATIVE-ELLIPTICAL-PROCESSING. This mark is used to indicate that the ellipted elements have no other alternative replacement.  completes the response elliptical processing and processing continues for other ellipsis at  of . If  is false,  is next and is true if the response is an adverbial (including modal adverbials). If  is true,  is next.  is true if the preceding sentence is a yes\/no question. If  is true,  replaces the response with the declarative form of the preceding sentence, and the response adverbial is set to modify the verb in the declarative form. The response's replacement is transferred into the response's SDS. After ,  is next as described above. If  is false,  is next.  is true if the preceding sentence is a tag question. If  is true,  replaces the response with the declarative clause in the tag question, and the response adverbial is set to modify the verb in this declarative clause. The response's replacement is transferred into its SDS. After ,  is next as described above. If  is false,  is next and is true if the preceding sentence is a declarative or exclamatory sentence. If  is true,  replaces the response with a sentence formed with following template: \u201cI (response adverbial) agree that (preceding sentence).\u201d The response adverbial is actually set to modify \u201cagree\u201d. The \u201c(response adverbial)\u201d in the template may not produce a grammatically correct sentence with respect to the actual instance of the \u201c(response adverbial)\u201d, but there is a synonym of the \u201c(response adverbial)\u201d that is grammatically correct. However, the grammatical correctness does not effect the processing of the sentence because the adverbial function of the \u201c(adverbial response)\u201d is the same for a grammatically incorrect \u201c(adverbial response)\u201d as for a grammatically correct synonym. The response's replacement is transferred into its SDS. After ,  is next as above. If  is false,  is next and is true if the preceding sentence is an imperative sentence. If  is true,  replaces the response with the sentence formed with the following template: \u201cI will (response adverbial) (preceding imperative sentence).\u201d The description of the grammatical correctness of the \u201c(adverbial response)\u201d also applies to the template of . The response's replacement is transferred into its Sentence Data Structure. After ,  is next as above. The preceding two templates are realized by assigning the referent of \u201cI\u201d as the person that gave the response. The replacing of the response with the instantiated template is accomplished by transferring the known addresses of the other elements used to form the sentences into the response's SDS. The known addresses are: already present in the template (e.g., \u201cagree that\u201d from ), in the Current-Sentence's SDS and have been looked up by  (e.g., the response adverbial), or in the previous sentence's SDS and have also been looked up by .","If the response is not an adverbial at  or if the preceding sentence is not an imperative sentence at ,  or  is false, and  is next.  is true if the preceding sentence is an interrogative pronoun referent question, i.e., a wh-question. If  is true, then at , the Pronoun Data Structure of is accessed to determine if the response is a type which can be a referent of the interrogative pronoun (wh-question). The response can be a phrase or a clause. After ,  is true if the response is a suitable referent for the interrogative pronoun at . If the  is true, then at , the declarative form of the preceding sentence with the response as the referent of the interrogative pronoun replaces the response. The response's replacement is transferred into the response's SDS. After ,  is next as above. If  is false, then at , the Communication Manager is informed of a response form ellipsis processing error. If  is false, then  is next and is true if the preceding sentence is an alternative question. If  is true, then  is next and is true if the response and alternatives are the same type of phrase with respect to the part of speech of the phrase head, or if the response and alternatives are both clauses. If  is true, then next at , the response is replaced with the declarative form of the previous sentence and the alternatives in this sentence are replaced with the response. The response's replacement is transferred into the response's SDS. After ,  is next as above. If  is false, then  is next and is true if the response is a function word which occurs in one of the alternatives in the preceding sentence. If  is true, then next at , the response is replaced by the declarative form of the previous sentence with the alternative containing the response function word retained and the other alternative(s) removed. The response's replacement is transferred into the response's SDS. After ,  is next as above. If  is false, then  is next and is true if the response plus any possible known, ellipted elements can precede the alternatives in the preceding sentence. The response plus any known, ellipted elements are determined to be able to precede the alternatives by checking if the response plus known, ellipted elements are contained as optional elements in the alternative phrases' data structure in Syntax Phrase Trees , or they form a phrase in Syntax Phrase Trees  which can precede the alternatives in Syntax Clause Trees . For example, the following words could be a response meeting the condition of : \u201cNone\u201d, \u201cAll\u201d, \u201cBoth\u201d, or \u201cThe first\u201d in the alternative question: \u201cDo you want A, B, or C?\u201d Such a response, e.g., \u201cNone\u201d, could be placed in the declarative form of this alternative question with \u201cof\u201d, a known, ellipted element, added as in \u201cYou want none of A, B, or C.\u201d If  is true, then next at , the response is replaced with the declarative form of the preceding sentence with the response and any known, ellipted elements placed before the alternatives in the preceding sentence. The response's replacement is transferred into its SDS. If  is false, response form ellipsis processing has failed and  is next as above.","If at  the preceding sentence was not an alternative question,  is next, and is true if the preceding sentence answered a question, and if the response can be coordinated with the question that was answered. The response which is a phrase is determined to be capable of being coordinated with the question by checking if the phrase head is the same part of speech type as the last phrase head of the declarative form of the question. The part of speech type of a phrase head is determined by looking at the grammar information of the phrase's representation in Syntax Phrase Trees . Also, a phrase response which is an adverbial can be coordinated with an adverbial subordinate clause. The response which is a clause is determined to be capable of being coordinated with the question if the question contains the same type of clause as the response. The type of clause is stored with the grammar information of the clause's representation in Syntax Clause Trees . The type of clause is either independent or subordinate. Also, an adverbial subordinate clause response can be coordinated with a phrase which is an adverbial. The response which is a part of a clause, i.e., a clause with ellipted phrases, is determined to be capable of being coordinated with the question if each phrase of the response can meet a phrase set requirement of the corresponding sentence role of the declarative form of the question in Syntax Clause Trees . If  is true, then  replaces the response with the declarative form of the question with the response replacing the coordinated part of the question. After ,  is processed next as above. If  is false, then the response does not have known response form ellipsis, and processing of the response is continued for other ellipsis at  in ","The above description of response form ellipsis is appropriate for a general purpose application. A specific application includes other application specific forms of response ellipsis. Additional forms of response ellipsis are processed with a generalization of the above described process. This process generalizes to a condition which is satisfied for a type of response form ellipsis. A satisfied condition is followed by a process which replaces the ellipted elements for the detected type of response form ellipsis. This process is followed by a return to processes which replace any other types of ellipsis in the response starting at .","Nonfinite Verb Clause, Verbless Clause, and Morphologically Formed Word Clause Ellipsis","Nonfinite verb clause, verbless clause, and morphologically formed word clause ellipsis is processed by using techniques related to realizing clause relations. A clause relation is a clause which represents the meaning of a nonfinite verb clauses, verbless clauses, verb based noun, a verb based adjective, a verb based adverb, or certain other morphologically formed words. A morphologically formed word clause is the clause relation implied by the morphologically formed word. In the remainder, the phrase, \u201cmorphological words@\u201d, is an abbreviation for \u201cmorphologically formed words implying a clause relation\u201d. A nonfinite verb clause is an optionally ellipted subject plus verbal plus an optionally ellipted object. A verbal is a participle or infinitive verb form. A non-ellipted subject of a nonfinite verb clause is often expressed in a nonstandard form including: objective case pronouns, prepositional phrases, and possessive case nouns. The subject is ellipted if the subject is not expressed in the nonstandard or standard forms. The default tense of the verbals is usually determined by the verb in the main clause containing the nonfinite verb clause. A verbless clause has an ellipted \u201cto be\u201d verb which relates a subject complement or an adverbial to a subject. The subject can also be ellipted. The ellipted verb is the present, past or future tense of \u201cto be\u201d. The verbless clause is a subordinate clause in the sentence containing it. The default tense of the ellipted \u201cto be\u201d verb is determined by the tense of the verb in the main clause. The ellipted elements in a nonfinite verb clause or verbless clause are replaced by the ellipsis processes of this section. The verb in a clause relation of a morphologically formed word is the verb base of the word, or the verb is implied by the affix(es). The ellipted elements in a clause relation of a morphological word@ can be replaced: by the morphological functions selected in Morphological Processing Step ; by the state representation associated with a morphological word@; by a structure of the base word of the morphological word@; and\/or by the ellipsis processes of this section. The default tense for the verb in a morphological word@'s clause relation is also determined by the tense of the verb in the main clause.","The sentence role functions of nonfinite verb clauses include: adverbial clauses, noun phrases, premodification of nouns, and postmodification of nouns. When there is ambiguity between the sentence role of a participle premodifying a noun and an alternate interpretation for the sentence role of the noun as a noun phrase object of a nonfinite verb clause, Syntax Clause Trees  use the former for classification purposes. However, when an infinitive precedes a noun, the latter interpretation is selected. Also, when there is ambiguity between the sentence role of a nonfinite verb clause postmodifying a noun and the sentence role of a nonfinite verb premodifying a noun following the nonfinite verb, Syntax Clause Trees  uses the former for classification purposes. The noun following the nonfinite verb is an object or adverbial in the nonfinite verb clause of the former situation. The sentence role functions of verbless clauses include: adverbial clauses and postmodification of nouns. Sentence roles of morphological words@ include: nouns, premodification of nouns, postmodification of nouns, and adverbials. The elliptical processing for nonfinite verb clauses, verbless clauses, and morphological words@ are divided into four groups: nonfinite verbs and morphological words@ premodifying nouns; nonfinite verbs and morphological words@ postmodifying nouns; verbless clauses; nonfinite verb clauses having sentence roles as: noun phrases, and adverbial clauses, and morphological words@ having sentence roles as: nouns and adverbials. The elliptical processing group is selected by the sentence role of the nonfinite verb clause, verbless clause, or morphological word@. The sentence role is recognized in Syntax Clause Trees  during Parsing Step . The initial process used to select the ellipted elements of the clause relation of a morphological word@ is implied by the contents of the sub-entry associated with the morphological word@ stored in the base word's Dictionary  common table or anomalous partition as described above for Morphological Processing Step . Morphological words@ can, have the ellipted elements of their clause relations selected in one or more of the following Dictionary  designated initial processes: evaluating the morphological function(s) selected during their morphological processing in Step , accessing the individual state representation data structure associated with the base word plus affix(es), accessing the data structure of the base word, or the ellipsis processes of this section. If one of the first three processes do not select all of the ellipted elements, the remaining ellipted elements are selected with the elliptical processes of this section.","The ellipsis which can occur within a nonfinite verb clause is an ellipted subject and\/or an ellipted object. The ellipsis which can occur within a verbless clause requiring elliptical processing is an ellipted subject. The ellipted verb in a verbless clause is assigned as a simple tense of \u201cto be\u201d. The ellipsis which can occur within the clause relation implied by a morphological word@ is an ellipted subject and\/or an ellipted object. The elliptic processing for nonfinite verb clauses, for a verbless clause, and for a morphological word@ is to select a candidate from a specific source list to replace the ellipted element. A specific source in a list can have a condition which must be true for the specific source to be considered as a replacement. Also, some specific sources in the source list can have multiple candidates for sources in the context. Such specific sources with multiple candidates select candidates in the nearest preceding first order. The specific source elements are listed in the order of: sources in the sentence containing the nonfinite verb clause, verbless clause, or morphological word@ first; sources in the preceding context; default; general reference. This order selects sources which are most related to the most recent part of the conversation first. Sources having the same relation to the conversation are listed in the order of conditioned sources first and most likely source first for the conditioned and non-conditioned sources. This order puts conditioned sources first because if they meet the condition, they are likely to be the intended source. and list the subject and object sources for a general purpose implementation for this type of ellipsis. Additional sources can be a added as needed for a specific application. An instance of the subject and object sources listed in and is obtained by a function associated with the source. Most associated functions look up the source in the Sentence Data Structure. The functions which obtain the source in different methods are described in the next paragraph.","The number 1 subject source function associated with the \u201cpremodified noun's state representation data structure is searched for the nonfinite verb or the morphological word@ in a clause relation of the noun\u201d subject source is implemented with Selector . Selector  determines if a word sense number associated with the premodifying nonfinite verb or morphological word@ implies a clause relation, an i.e., an F-relation, of the modified concrete noun word sense number as in \u201cwhipping cream\u201d. A word sense number of a concrete noun can have a set of associated A-relations and T-relations. These relations are subdivided into partitions. One partition contains function A-relations, i.e., F-relations, implied by nonfinite verb or morphological word@ modification which have the effect of selecting a clause relation of the modified concrete noun. Nonfinite verb or morphological word@ modifiers are contained in F-relations. The F-relations in the modified concrete noun's selection partition of A-relations is searched for the F-relation containing a word sense number of the base verb of the nonfinite verb or a word sense number of the verb in the morphological word@ clause relation. The F-relation may contain a tense code requirement for the verb. The tense code of the nonfinite verb or the verb of the morphological word@ clause relation must match the code. The tense code requirement is typically used for discriminating between, for example, \u201cwhipping cream\u201d or \u201cwhipped cream\u201d. A concrete noun's F-relation's clause is suitable for determining the subject source if there is an untried F-relation containing a word sense number of the nonfinite verb or of the verb in the clause relation of the morphological word@ and any tense code requirement is matched. The number 1 source function places a symbol at the ellipted clause's subject position. When the ellipted clause is processed, Dictionary Look Up Step  interprets this symbol by calling Selector  to determine if the nonfinite verb clause or morphological word@ is an F-relation selecting modifier of the premodified concrete noun. Selector  performs normal processing to search for a word sense number of the concrete noun which has an F-relation with the a word sense number of the nonfinite verb or verb of the morphological word@. This process of  will be described below. The search is across the word sense numbers of the concrete noun and word sense numbers of the verb until an F-relation is found. If an F-relation is found,  looks up a pointer to the clause and stores it in the SDS. An F-relation of a modified concrete noun has an associated clause relation pointer to a defining clause for the purpose of interpreting the sentence. The clause relation pointer is in Memory . This clause relation for nonfinite verbs or morphological words@ premodifying nouns implies state representation information needed in the conversation. For example, the general defining clause representation for \u201cwhipping boy\u201d has this textual representation: \u201cwhipping boy receives blame instead of the deserving person\u201d. The clause of the found F-relation is checked for consistency during normal state representation processing. If the found F-relation is not consistent,  searches for another F-relation. If a consistent F-relation is found, the ellipsis processing is completed. If an F-relation can not be found,  invokes Ellipsis Processing Step  if the concrete noun is in an nonfinite verb or morphological word@ ellipted clause. If  is reinvoked, the next subject source is selected and ellipsis processing continues.","The number 3 and 5 subject source functions for \u201cowner of the modified state abstract noun\u201d for premodified and postmodified state abstract nouns respectively is first looked up in the context associated with the state abstract noun. However, it is possible that the state abstract noun is not currently in the context. In this case, the associated function of this source places a function symbol in the subject position of the clause in the Sentence Data Structure of the nonfinite verb clause, verbless clause, or morphological word@ modifying the state abstract noun. The function symbol is evaluated by Step  when word sense number selection of the nouns of the nonfinite verb clause, verbless clause, or morphological word@ is initiated by Step . At this point, the owner of the state abstract noun has been established, and the function symbol has an associated function which looks up the owner of the state abstract noun.","The number 11 subject source and the number 6 object source of \u201canother noun in the main clause\u201d has an associated function which selects nouns and pronouns from the main clause in the nearest preceding first order. Here, TRIED means that the noun has been used as a source for the same ellipted element of the same nonfinite verb clause, verbless clause, or morphological word@. A vector of TRIED nouns and pronouns is maintained so that the next UNTRIED noun or pronoun can be selected. If this source is used more than once for a the same ellipted element in the same nonfinite verb clause, verbless clause, or morphological word@ with ellipsis, the next UNTRIED noun or pronoun in the nearest preceding first order is selected for the source. A noun selected as a source by this function can have either the common case or the possessive case. A pronoun selected as a source by this function can have: a subjective case, objective case, or possessive case. For the possessive case, the noun or pronoun referent corresponding to the possessor is used for the source. The pronoun's referent is used as the source regardless of the pronoun's case.","For nonfinite verb clauses and morphological words@, the number 12 subject source and the number 7 object source function associated with \u201cthe context\u201d searches for the next most recent UNTRIED preceding clause which has the same non-ellipted sentence roles for a nonfinite verb clause or for a morphological word@ clause relation. The verb non-ellipted elements of the allowed preceding clause has the same tense as the verb in the main clause containing the nonfinite verb clause with ellipsis or containing the morphological word@. The match for non-ellipted nouns requires the same noun in the found clause as in the non-ellipted element of the nonfinite clause or morphological word@. But the number of the matched nouns does not have to be the same. The sentence role of the element in the found clause must be the same sentence role of the non-ellipted element in the nonfinite verb clause or morphological word@. If a match is found, the subject or the object of the found clause is the source for the ellipted subject or object respectively. If the \u201ccontext\u201d source is used again for the same ellipted element of the same nonfinite verb clause or morphological word@, the next most recent UNTRIED preceding clause with a non-ellipted sentence role match as described in this paragraph is the source. The searches for matches are performed in Context Memory .","For verbless clauses, the number 12 subject source function associated with \u201cthe context\u201d searches for the most recently referenced word which is related to the subject complement or prepositional phrase that modifies the ellipted subject in the verbless clause. The searched for word to replace the ellipted subject must have been modified previously in the context by the adjective subject complement in the verbless clause or by the prepositional phrase in the verbless clause, or the searched for word was previously the subject in a previously stated clause with the noun subject complement in the verbless clause as the subject complement in the previously stated clause. The searches are also performed in Memory . If the search is successful, the found word is the source for the ellipted subject. If the \u201ccontext\u201d source is used again for the same verbless clause, the next most recently referenced word which is related as above to the subject complement or prepositional phrase modifying the ellipted subject in the verbless clause is used as the subject source.","The number 8 object source of \u201cdefault\u201d for nonfinite verb clauses and morphological words@ has an associated function which selects the most common object given the subject. The most common object is stored in a verb's Clause State Representation Memory  data structure. The number 13 subject source and the number 9 object source associated with \u201cgeneral reference\u201d for nonfinite verb clauses and morphological words@ substitutes an indefinite pronoun for the ellipted subject or object. If only the subject or the object is ellipted in a nonfinite clause, the referent type of the indefinite pronoun is the same type as the most common subject or object associated with the clause selected with the non-ellipted subject or object in the Memory  data structure of the base verb of the nonfinite verb or of the verb in the clause relation of the morphological word@. If both the subject and object are ellipted, the referent types of the respective indefinite pronouns are the same types as the subject and object in the most common clause in the Memory  data structure of the base verb of the nonfinite verb or of the verb in the clause relation of the morphological word@. The number 13 subject source associated with \u201cgeneral reference\u201d for verbless clauses selects the type of indefinite pronoun associated with the modifier of the ellipted subject: the subject complement or the complement of the prepositional phrase. The subject complement can either be a noun or an adjective. The type of indefinite pronoun for a noun subject complement is the most common type which is characterized by the subject complement. This type information is stored with a noun in Memory . The type of indefinite pronoun for an adjective subject complement is the most common owner of the adjective which is stored in Memory . The type of indefinite pronoun for the complement of a prepositional phrase is the most common modifiee type of the prepositional phrase which is also stored in the Memory  location of the complement.","The process for selecting a replacement for a clause with only an ellipted subject or only an ellipted object is to select the subset of the source list for the conditions met by the subject or the object. The subset of the subject or object list is selected depending upon the sentence role of the clause with ellipsis. Then the first suitable source from the chosen list is selected as a replacement for the ellipted element. A source is suitable if its source element meets its associated condition(s) or the source element has no associated conditions. The position in the source list for the replacement is marked including the candidate for multiple candidate source elements. The verbless clause with a selected subject has a \u201cto be\u201d verb added as the verb for the verbless clause. The nonfinite verb clause or morphological word@ with the selection(s) or the verbless clause with a selected subject and verb is then evaluated for consistency with the current conversation and previously stored experience in subsequent state representation processing. If the clause is consistent, the ellipsis processing is completed. If the clause is not consistent, the next suitable source is selected and the process repeats until a consistent clause is generated or all suitable sources have failed to form a consistent clause. If a consistent clause was not formed, the Communication Manager is informed of a nonfinite verb clause, verbless clause, or morphological word@ ellipsis processing error.","The process for selecting replacements for a nonfinite verb clause or morphological word@ with both an ellipted subject and an ellipted object is to select combinations of subject replacements and object replacements from the selected respective source lists until a consistent clause is formed with respect to the context and previously stored knowledge and experience in subsequent state representation processing. There are many ways to generate the combinations of subject replacement and object replacement. The method detailed here is to try combinations of a single subject replacement with possible object replacements until a consistent clause is found. If a consistent clause is not found for the combination of the current subject source replacement with all object replacements, the next subject source is used to generate a next subject replacement. The next subject replacement is then used with object replacements and this process repeats until a consistent clause is selected or all combinations have been unsuccessful.","The process for selecting an ellipted subject and\/or an ellipted object begins at  and is depicted in -. Prior to calling Step , Step  creates a clause structure in the SDS to replace the stated elements implying the ellipted clause. However, this ellipted clause in the SDS is not used when the number 1 subject source is valid for the premodified noun. For these subject sources, the clause implied by the modification of a concrete noun by the nonfinite verb or morphological word@ already has a state representation and does not use the SDS. This implied clause is set to modify the premodified noun for Purpose Identifier  processing.  is started at  which sets ESUB and EOBJ to false. These variables are true if the subject or object is respectively ellipted.  is true if the ellipted clause is a premodifying nonfinite verb clause or morphological words@. If  is true,  sets the Subject-Source-List to subject sources: 1 thru 3, 7 thru 13. In the following all subject and object source numbers refer to the subject and object source numbers respectively listed in and .  sets the Object-Source-List to object sources: 1, 4 thru 9. If  is false, then  is next and is true if the ellipted clause is a postmodifying nonfinite verb clause or morphological word@. If  is true, then  sets the Subject-Source-List to subject sources: 4 thru 13.  also sets the Object-Source-List to object sources: 2 thru 9. If  is false, then  is next and is true if the ellipted clause is a verbless clause. If  is true, then  sets the Subject Source List to subject sources: 4 thru 5, 7 thru 13. If  is false then  sets the Subject-Source-List to subject sources: 7 thru 13.  also sets the Object-Source-List to object sources: 3 thru 9. After , , , or ,  is next.",{"@attributes":{"id":"p-0371","num":"0393"},"b":["26107","30","16","24","20","26107","26108","26108","26108","26108","26108","26107","26109","26107","26109","26110","26137","26110","26110"]},"If  is false or after ,  is next.  is true if ESUB is true and SUB equals \u201c2\u201d, i.e., the second subject source. This implies that the ellipted subject is in a nonfinite clause or a morphological word@ premodifying a noun. If  is true, then next at , the data structure of the base verb of a nonfinite clause or the verb in the clause relation of the morphological word@ is accessed by Selector  to determine if the premodified word meets the subject requirements so it can be a subject replacement of the nonfinite verb clause or morphological word@. This verb data structure is in Memory .  is true if the premodified noun can be a subject. If  is true, : sets ESUB to false; sets EOBJ to true; sets SUBSHIFT to true; sets the premodified noun to be the subject in the SDS of the clause with ellipsis; clears the object in the SDS of the clause with ellipsis; and sets OBJ to 4.  resets the state of the ellipsis processing to have the premodified noun to be the subject of the clause with ellipsis. This clause is reset to only have an ellipted object with ESUB set to false and EOBJ set to true. SUBSHIFT is set to true to indicate the resetting process has occurred.","If  is false, or if  is false, or after ,  is next.  is true if ESUB is true. If  is true,  is true if the condition from the SUB subject source number of the Subject-Source-List is true. If  is true, next at , the subject replacement is selected by the function associated with the SUB number in the Subject-Source-List. The selected element is set to TRIED in the TSV for noun or pronoun elements selected from the Current-Sentence at . The selected element is placed in the ellipted clause's subject position in the Sentence Data Structure at . If SUB equals 1 at ,  sets EOBJ to false because subject source 1 implies a known clause(s) which implies that the ellipsis processing is completed. Setting EOBJ to false sets the ellipsis processing to be completed in subsequent steps described below. Finally, OBJ is set to the first position of the Object-Source-List at . If  was false,  is next and is true if there is another UNTRIED subject source in the Subject-Source-List. If  is true, then  sets SUB to the next subject source number in the Subject-Source-List. After ,  is next and proceeds as described above. If  is false, then all subject sources have been tried unsuccessfully and  is next. If the ellipsis process was invoked by Selector , , or ,  sets RES-STATUS to FAILURE and returns processing to the caller. Otherwise,  informs the Communication Manager of the type of ellipted clause processing error and processing continues there. The Communication Manager can select an alternate sentence role interpretation for some combinations of nonfinite ellipted clauses and morphological words@ modifying nouns. For example, there can be ambiguity between the sentence role interpretation of a nonfinite verb clause postmodifying a noun and the alternate sentence role interpretation of a nonfinite verb premodifying a noun following the nonfinite verb. The alternate interpretations have been determined during Parsing Step . If an alternate sentence role interpretation is selected by the Communication Manager, this ellipsis process is invoked for the alternate interpretation.","If ESUB is false at  or after ,  is next.  is true if EOBJ is true. If  is true, then  is next and is true if the condition from the OBJ object source number is true. If the OBJ object source condition was false at ,  is next and is true if there is another untried object source in the Object-Source-List. If  is true, then  removes OBJ from the Object-Source-List so that the OBJ object source is not considered again.  also sets OBJ to the next object source number in the Object-Source-List. Then  is next and proceeds as described above. If  is false, then all object sources have been tried unsuccessfully and  is next.  is true if ESUB is true. If  is true, all object sources with the current subject source have been tried unsuccessfully with the current subject source. However, a different subject source may be successful. If  is true,  is next and is false if the Object-Source-List is not empty, and thus there are possible suitable object sources. If  is false, then next at , OBJ is set to the first position in the Object-Source-List. After ,  is next and begins the selection of the next subject source as described above. If ESUB is false at , only the object is ellipted and all object sources have failed. If the Object-Source-List is empty at ,  is true, and all object sources failed to select an acceptable object. Thus, if  is false or  is true, this ellipsis process has failed and processing proceeds at  as described above.","If  is true, next at , the next object replacement is selected by the function associated with the OBJ numbered function in the Object-Source-List. The selected element is set to TRIED in the TOV for noun or pronoun elements in the Current-Sentence at . Finally, the selected element is placed in the ellipted clause's object position in the SDS at . If  was false or after ,  is next.  is reached after an ellipted subject and\/or ellipted object have been selected. However, the selected elements may prove to be unacceptable in subsequent state representation processing.  prepares for an unacceptable element(s) by storing the restarting point and the status of this nonfinite verb clause, verbless clause, or morphological word@ ellipsis process at the ellipted clause's subject position in the SDS. The restarting point and the status are sufficient to restart this ellipsis process.  sets RESTART to .  sets the default verb tense and time point of the verb in the clause with ellipsis as will be described in the next paragraph. However, the default tense for clause relations selected by nonfinite verbs modifying a noun is stored in the premodified noun's state representation data structure for specific premodified nouns.  stores the following in the SDS: RESTART and its value, ESUB, EOBJ, SUB, OBJ, TSV, TOV, SUBSHIFT, the Subject-Source-List, and the Object-Source-List. Finally at , processing continues at  in to process any other ellipsis in the Current-Sentence.  completes the nonfinite verb clause, verbless clause and morphological word@ ellipsis process for the ellipted clause unless subsequent state representation processing determines that the ellipted clause does not have suitable replacements. When this happens, this process is restarted with the information stored in the SDS. The restarting of this process is described below.",{"@attributes":{"id":"p-0376","num":"0398"},"b":"26129"},{"@attributes":{"id":"p-0377","num":"0399"},"b":"26129"},"In subsequent state representation processing, the nonfinite verb clause, verbless clause, or morphological word@ clause processed for ellipsis can be found to have unsuitable ellipsis replacements for one of two reasons. One reason is that the ellipted element(s) formed an acceptable clause, but did not have a purpose relation with the remainder of the conversation which was consistent with the conversation or with previously stored experience as determined by Purpose Identifier . Since the combination of elements caused the unacceptability, either the single ellipted element was unacceptable, or one or both of two ellipted elements was unacceptable. The other reason is that the subject replacement and\/or object replacement were found to form an unacceptable clause at Selector . A replacement is unacceptable because the replacement failed to meet the requirements for its sentence role for any known word sense numbers of the verb in the clause. For example, an object replacement is unacceptable because it failed to meet the requirements of an object for each known word sense number of the verb.","It is possible that an assumed ellipted object is not ellipted because the verb does not require an object. Certain verbs do not require an object. Also, most past progressive verbs do not require an object. A nonfinite verb with a past participle is treated as a past progressive verb requiring an object in Syntax Clause Trees . The validity of the required object assumption is then determined in subsequent state representation processing at Selector . Also, under certain circumstances, the assumed object is actually an adverbial preposition with an ellipted preposition. An example of this circumstance is \u201changing tree\u201d. An object is not required if a verb does not require an object, or if the object is actually the complement of a prepositional phrase with an ellipted preposition. Selector  checks if the object is actually an adverbial if the object does not meet the requirements for an object of any word sense number of the verb or if no object is needed. Such an occurrence of an ellipted object is processed as a special usage as described below for Selector . Selector  rejects an object which is not required, and Selector  does not require further ellipsis processing. If the object is not required, and if the clause with ellipsis is consistent during further state representation processing, the object is rejected without requiring further ellipsis processing.","If the nonfinite verb clause, verbless clause, or morphological word@ clause is determined to have unsuitable ellipsis replacements in subsequent state representation processing, Selector  for example reinvokes Ellipsis Processing Step  and sends an indication of the unsuitable phrase in the SDS.  first determines that the clause is an elliptical nonfinite clause, verbless clause or morphological word@ clause by checking the subject of the clause for containing a RESTART value of . Selector  than indicates in the reinvocation descriptor which of the ellipted phrase replacements are unsuitable.  indicates that an ellipted subject and\/or an ellipted object is unacceptable.  then sets the processing to continue at RESTART, . The reinvocation descriptor contains an acceptable\/unacceptable value for the subject and\/or for the object. At , the variables, ESUB, EOBJ, SUB, OBJ, TSV, TOV, the Subject-Source-List, and the Object-Source-List, are restored to the values previously stored in the SDS by . After ,  is next and is false if EOBJ is false. If  is false, only the subject is ellipted, and sets processing continues at  which begins the process of selecting the next subject source as described above. If  is true,  is next and is false if ESUB is false. If  is false, only the object is ellipted, and  is next.  is false if SUBSHIFT is false. If  is false, processing continues at  which begins the process of selecting the next object source as described above.  is true if SUBSHIFT is true. SUBSHIFT is true if special processing had been invoked for a premodified noun at  as described above. If  is true, the premodified noun was not the subject and is the object instead. If  is true, then  is next and resets the processing performed at .  performs the following operations: sets ESUB to be true; sets EOBJ to be false; sets SUB to be \u201c3\u201d; sets SUBSHIFT to be false; moves the premodified noun to the object position and clears the subject position, both positions being in the ellipted clause's SDS; and sets processing to continue at  which starts the process to determine if the SUB subject source can be a replacement as described above.","If  is true, both the subject and the object are ellipted, and new replacements are selected based upon which current replacements are unacceptable as reported from Selector  for example. If  is true,  is next and is true if the current object replacement is reported as acceptable. If  is false,  is next. If  is false, the current object replacement is unacceptable because it failed to meet the requirements of the possible verb word sense numbers at  for example. Since the subject and object are ellipted, the unsuitable object replacement is always unacceptable for each subject that might be combined with the unacceptable object replacement. Thus, processing is saved by removing the object replacement from consideration as a replacement.  removes the object replacement from such consideration. If the object source at OBJ has only a single source, OBJ is removed from the Object-Source-List. If the object source at OBJ has multiple possible sources, the only possible OBJ value is 6. All other object sources are single sources except for 7, which is the \u201ccontext\u201d source. However, since only combinations of subjects and objects found in the context are obtained by 7, clearly all found objects are acceptable as found by object source 7. Object source 6 selects untried nouns or pronouns in the main clause and has an associated TOV vector position for each possible noun or pronoun. The unacceptable object replacement for OBJ with a value of 6 is removed from consideration by setting the replacement's position in the TOV to have a value of R. An noun or pronoun with an R flag value in the TOV is not selected for object source 6. If  is true, or after ,  is next.  is true if the subject source is acceptable. If  is true, processing continues at  which begins the process of selecting the next object source as described above. If  is false, processing continues at  which begins the process of setting OBJ to the first position of the Object-Source-List and of selecting the next subject source as described above. This completes this restart process.","Nonfinite verb clauses, verbless clauses, and morphological word@ clauses can have limited purpose relations to the other clauses in the context of a conversation. These limited purpose relations are contained in lists stored in a data area related to clause conjunctions of Function Step . A pointer to such a list is stored in the grammar information of nonfinite verb clauses and verbless clauses in Syntax Clause Trees . A pointer to these limited purpose relations is stored in the grammar information of phrases containing morphological word@ in Syntax Phrase Trees . These pointers address lists which are specific to the nonfinite verb clause, verbless clause, or morphological word@ clause. The limitation of purpose relations improves the efficiency of Purpose Identifier  by limiting the number of purpose relations of the subordinate clause to main clause which are searched to find the most likely intended purpose relation. These limited purpose relations can also be ordered to have the most common purpose relation first order. Some typical purpose limitations are now described. Verbless clauses, nonfinite verb clauses having a sentence role of a postmodifying adjective modifying an abstract noun, and nonfinite verb clauses having a sentence role of premodifying a noun often do not have a direct purpose relation to the main clause. Verbless clauses assign a subject complement or adverbial to modify the subject of the verbless clause. This verbless assignment either defines state representation values for the subject for a new assignment or identifies the subject for a previously stated assignment. A nonfinite verb clause postmodifying an abstract noun often either defines an aspect of the postmodified abstract noun that has not been previously expressed in the conversation, or such a nonfinite clause identifies the abstract noun when such a nonfinite verb clause has been previously expressed. A nonfinite verb clause premodifying a noun often either defines a previously unstated clause relation of the premodified noun with a tense of the verb of the nonfinite verb, or such a clause identifies the premodified noun with the previously stated clause relation containing a tense of the verb of the nonfinite verb. The definition or identification result of the verbless clause, nonfinite verb clause postmodifying an abstract noun, and nonfinite verb clause premodifying a noun is determined by Purpose Identifier  checking the Context Memory . If identification was not found, Purpose Identifier  would then check for the definition purpose for such clauses. Morphological word@ clauses also often either refer to a previously stated clause relation implied by the morphological word@ or defines a new clause relation. A new clause relation usually has a purpose relation to the containing main clause, and a previously defined morphological word@ clause or one of its purpose related clauses could have a relation to the main clause containing the morphological word@. Whether a morphological word@ clause is defined or new is determined by checking Memory . Purpose Identifier  then uses the context status of the morphological word@ clause to select the possible purpose relations.","State Representation Processing","State representation processing begins after syntactic processing has been completed by a Natural Language Processor . Syntactic processing is complete when Dictionary Look Up Step  has completed all address look ups, after all function word adjectives have been processed by Function Processing Step , all morphological words have been processed by Morphological Processing Step , and all ellipsis has been processed by Ellipsis Processing Step . The goal of state representation processing is to select word sense numbers for all state representation words and to select functions for all function words whose functions are related to state representation processing. Thus, the functions of function words such as prepositions, most adverbs, conjunctions and interjections have not been selected prior to state representation processing. The word sense numbers and functions are selected for semantic consistency with their containing clause, with the context, and with previously stored experience and knowledge. Selecting a word sense number is equivalent to selecting data which is analogous to selecting a definition when the definition is realized with a state representation. The state representation realization of such a definition: allows for consistent selection of state representations and their associated word sense numbers; allows for all that is known and for all that is related to a non-function, natural language word to be stored; and allows the data realizing such a definition to be structured to be accessible in a range of generality reflecting the generality of the usage of the non-function, natural language word.","State representation processing of a clause begins by processing state representation words at Selector . The order of state representation processing of state representation words in a clause is nouns in left to right order for a normal sentence role order: the subject, verb, objects or complements order. Otherwise, the nouns are processed in left to right order within a sentence role and with this normal sentence role order starting with the subject. In the processing of the nouns in a clause, the word sense number of the clause's verb is partially selected as is described below in detail. After all the nouns are processed, the word sense number selection of the verb is completed, and this completes word sense number selection and function selection for the clause unless one or more selections are inconsistent with the context or stored experience and knowledge. The concrete nouns in a sentence role and the modifiers of such concrete nouns are processed at Selector . State abstract nouns in a sentence role and the modifiers of such abstract nouns are also processed at . Clausal abstract nouns in a sentence role and the modifiers of such clausal abstract nouns are processed at Selectors  and . Verbs and their modifiers are processed at Selector . Sentence roles include: subjects, direct objects, indirect objects, object complements, and subject complements. Note that clausal abstract nouns can result in the state representation processing of a clause and thus could cause state representation processing of concrete nouns and other state representation words. The sequencing of state representation processing is controlled by Selector . Step  forms a list of sentence role nouns which are processed at  or directed to the appropriate selector. Within in a clause, words are processed in the order just described. Clauses are processed in left to right order. A clause containing clauses in sentence roles are processed after all sentence role clauses are processed.","State Representation Processing of Concrete Nouns and their Modifiers","The primary task of the state representation processing of a concrete noun is to select a word sense number which is compatible with all the following criteria: the context, with the word sense numbers and functions of its modifiers or modifiee, with the word sense number of the verb in the clause and with the relationship of the clause to the context and previously stored experience and knowledge. If the word sense number of a concrete noun is not compatible for any of these criteria, another word sense number of the concrete noun is selected. If a compatible word sense number can not be selected, the Communication Manager has a variety of options including asking a clarifying question or waiting for explanation from the conversation. The state representation processing of concrete nouns is accomplished by Selector  performing one or more of the following processes: accessing Context Memory  to determine if the noun is in the context; accessing  or Concrete Noun State Representation Memory  to determine if the concrete noun is related through an A-relation, S-relation, T-relation, and\/or C-relation to a noun in the context or previously stored experience and knowledge; accessing  to select the possible word sense numbers of the noun; working in conjunction with Selector  to select the word sense numbers of a modifying adjective; working in conjunction with Selector  to select the compatible word sense numbers of the subject(s), direct object(s), indirect object(s) and verb(s) in a clause; and\/or working in conjunction with Function Processing Step  to select the function of a modifying preposition and a compatible word sense number of a concrete noun prepositional complement. Note that a clause modifying a concrete noun implies selecting the word sense number of the noun in the modifying clause as in a clause with a relative pronoun for example. Modifying clauses are processed before a main clause. A concrete noun in a sentence role of a main clause which is also modified by a clause can use both clauses to select the word sense number of the concrete noun. The word sense number selected for the subordinate clause is checked for being consistent with the main clause. If it is not consistent, another word sense number is selected and checked for consistency. Word sense numbers are selected until a word sense number is compatible with both clauses, or until all word sense numbers have failed. The data structure for concrete nouns, which is stored in Memory , is described first. Then the process of Selector  for selecting a concrete noun's word sense number is described next.","The word sense number format of a concrete noun is depicted in . A concrete noun word sense number has an associated address in Dictionary  to a location in Memory . A concrete noun's word sense number has four components. One component is an identification number which is common to certain related word sense numbers of a concrete noun. The identification number contains a class number subfield and a class member number subfield. The class number refers to a class of nouns such as animate, place, thing and less general classes of nouns including subclasses of such general classes. The class member number refers to a specific partition of the class.","The next component of a concrete noun's word sense number is the type number. A concrete noun's word sense number can have two or more types. For example, \u201cstore\u201d has multiple types such as: \u201cfood store\u201d, \u201cdepartment store\u201d, etc. The word sense number of a concrete noun accommodates this multiple type relation of a concrete noun by representing the word sense number with an identification number combined with a type number. The identification number combined with a type number accesses all general and all specific concrete noun entries in Memory  with the word sense number identification number and type. The concrete noun without related types or a referenced concrete noun without a type designation has a type number of zero. The advantage of forming concrete noun word sense numbers with a common part and a type part is that the identification of concrete noun in the context is simplified. Often in a conversation, a concrete noun with a non-zero type number will be referenced both with the typing modifier (e.g., \u201cfood store\u201d) and without the typing modifier (e.g., \u201cstore\u201d). A referenced noun without a typing modifier is considered as possibly referencing the related noun with a typing number if the related noun with a typing modifier has previously been placed in the context of the conversation. The search to determine if a concrete noun is already in the context in this case is accomplished by checking for a common identification number match. After a common identification number match is found, a type number match is checked for. A zero type number matches a zero type number, or a zero type number matches the most recently referenced concrete noun with a common identification number match and a non-zero type number. This latter match is verified in subsequent state representation processing. If the latter match is not acceptable, another word sense number for the concrete noun would be selected.","The next component of a concrete noun's word sense number is the specificity number. A concrete noun in a conversation can have one of three levels of specificity: general, specific known, or specific unknown as described above. The specificity number indicates the type of reference. A general reference concrete noun in Memory  has typical state values. A general reference concrete noun in a conversation can be represented by multiple versions with inconsistent state and property values as described in the function word adjective section. However, a specific general reference in a clause refers to a version with consistent values. The inconsistent versions of a general reference are stored in Context Memory , and the versions reflect the general references to the concrete noun in the conversation. Context Memory  contains an entry for the general reference. A version in an entry for a general reference noun contains the stated state and property values or value ranges and a type number, a specificity number which is one more than the best match specificity number, and a zero experience number (described below). The location in  with the general reference's type number, a zero specificity number, and a zero experience number contains or implies the location of all unstated states and properties for a version of a general reference. A specific known reference entry in Memory  contains all known state and property values. Unknown state and property values are assumed to be the most typical value and are stored or their location is implied in the general reference concrete noun with the same word sense identification number, the same type number, same specificity number, and zero experience number in Memory . A specific known reference in a conversation is stored in  with a word sense number which has an associated address to its entry in Memory . A specific unknown reference does not have an entry in Memory  since it is unknown. As described above, a specific unknown reference must have consistent state and property values or value ranges. The stated property and state values or value ranges for a specific unknown reference are stored in Memory . A specific unknown reference has a type number, specificity number as defined for a version of a general reference noun, and a zero experience number. These numbers comprise a word sense number for a specific unknown reference. The word sense number addresses a location in  which serves as a source for unstated property and state values or value ranges. The specificity number indicates a specific instance of a specific reference. A specific known reference has an even specificity number which corresponds to a specific instance of a type number. A version of a general reference noun and a specific unknown reference has an odd specificity number which is one more than the specific noun entry which is most similar to the version of a general reference or to the specific unknown reference.","The remaining component of a concrete noun's word sense number is the experience number. The experience number is used to select a version of a concrete noun given its word sense identification number, type number and specificity number. A zero experience number contains the typical values for a given type and specificity number. A non-zero experience number entry of a concrete noun contains the state values related to one or more experiences, and\/or one or more complicated experiences requiring multiple state values. Specific reference concrete nouns can have one or more stored versions of its word sense number which are related to experiences. A specific reference concrete noun's multiple versions are accessed by the version's experience number. Each version is related to one or more specific experiences. The version contains the state values or equivalent which occurred during that experience. Associated with each non-zero experience number is an A-relation, typically a function A-relation, which selects the experience related to the experience number in Experience and Knowledge Memory . A specific concrete noun's experience number version only contains values which differ from the word sense number entry with the same word sense identification number, type number, specificity number and with a zero experience number. A version of a specific reference concrete noun associated with an experience number can have multiple state values or the equivalent in one or more states. Such a version represents an experience in which the states with multiple values or equivalent switch between the states. For example, the operation of a mechanical device can involve switching between states. A state of a version which has multiple values or the equivalent indicates that this state is involved in state changes related to the experience. The verb for changing the state is found in the state's location in Memory  which is at the address of the pointers associated with a state value of an entry in Memory . A verb's data structure in Memory  can be looked up for the experience. The looked up verb indicates all information related to the state change in Memory  and in Experience and Knowledge Memory .","The format for a concrete noun word sense number entry in Memory  is depicted in . There is an entry for each general and specific known word sense number of a concrete noun. The entry contains a word sense number; a set of state and\/or property word sense numbers and address pointers with each pointer having an associated set of values, value ranges, pointers to C-descriptors, pointers to local T-descriptors, and\/or pointers to S-descriptors; and a set of pointers to A-descriptors and pointers to T-descriptors. The noun word sense number in the entry corresponds to the word sense number which addresses the entry. The set of state and property pointers address the states and properties of the concrete noun in Adjective and State Abstract Noun State Representation Memory . Certain states may actually be result states of verbs. The state and property locations in  contain information about the state or property such as: implications of a state value, processes to reach a state value, experience and knowledge related to a state or property value, preceding states, succeeding states, etc. These state and properties define the concrete noun. Each state or property word sense number pointer has an associated set of one or more elements. The elements in the set are values, value ranges, pointers to C-descriptors, pointers to local T-descriptors, and\/or pointers to S-descriptors. The C-descriptors and S-descriptors evaluate to a value, value range, or a relation to a value or value range. The T-descriptors evaluate to values, value ranges or a relation to the values or value ranges for the state or property and for other states and properties in the entry. The C-descriptors, T-descriptors, and S-descriptors are stored in an external relation data structure which is described below for ","One exceptional aspect of S-descriptors is that they are also used to include what is considered adverbial relations by most grammar books. These adverbial relations are space and time position adverbials directly modifying a noun. For example, the sentence: \u201cJohn was at home yesterday.\u201d has the space position adverbial, \u201cat home\u201d, and the time position adverbial, \u201cyesterday\u201d. These adverbials actually set the space and time positions of \u201cJohn\u201d, and thus modify \u201cJohn\u201d. Adverbials directly modifying a noun are treated as direct modifiers of the noun like adjective and noun modifiers. Nouns have states for time and space positions in . The adverbials directly modifying a noun are processed as prepositional phrases modifying the noun, and form S-Relations. Adverbs directly modifying a noun, such as \u201cyesterday\u201d in the above example, are actually prepositional phrases with ellipted prepositions. However, the relation function setting functions of such prepositions, i.e. prepositions of adverbials directly modifying a noun, contain a function which stores the adverbials in Context Memory . The reason for having time and space position states for a noun is to handle such sentences as the example sentence. The other choice is to create a dummy verb such as \u201cto exist\u201d which then would be the modifiee of the adverbials. With this approach, the example sentence would become: \u201cJohn existed at home yesterday.\u201d The disadvantage of this approach is that extra storage would be required for this approach. In a sentence without a \u201cto be\u201d or \u201cto have\u201d, i.e. in the sense of \u201cto possess\u201d, verb, adverbials modify the verb directly. In such clauses, the time and space position adverbials modifying the verb are associated with sentence role nouns through the nouns' experience numbers in  or are directly obtainable in  if the clause is in the context of the conversation. The nouns in the sentence have experience numbers in  which have functional relation pointers. These relation pointers determine the verb and its adverbials, and thus imply the time and space positions for the nouns in the clause.","A state or property and a value correspond to a state representation word adjective which modifies the concrete noun. Such a state or property value may imply a degree adverb modifying the adjective so that the proper state or property value is represented. A value range corresponds to a state or property value which is approximately known as in \u201cabout six feet long\u201d. The value and value ranges are typically numerical. The numerical value selects a data structure element associated with an adjective in Memory . Certain states allow for multiple simultaneous components of a state value such as human emotions, e.g., \u201cmixed feelings\u201d; \u201cShe was sad yet somewhat happy too.\u201d The case of simultaneous occurrence of multiple state value elements is differentiated from state element changes of a complicated experience with a symbol indicating the relationship of the multiple state elements. A C-descriptor represents a state or property value set in comparison to another state or property value. A C-descriptor is generated to represent an adjective which is compared to another adjective in a conversation. Comparison of adjectives was described in the Function Word Adjective section. A C-descriptor contains the source word sense number of the concrete noun which contains the state which is under comparison. A C-descriptor also contains: the state under comparison, a value descriptor, a difference value, and a pointer to a non-empty group descriptor in a group A-relation associated with the word sense number entry. The value descriptor and value difference comprise a designation for a C-descriptor. The value descriptor contains the type of comparison, (i.e., comparative, equative, superlative), and the value relation (less, equal, more). The difference value is a pseudo difference quantity. The group descriptor contains: pointers to inclusion\/exclusion criteria, and\/or a pointer to the group in a superlative comparison. An entry can also contain pointers to T-relations. A T-descriptor of a word sense number entry contains a source, a value relationship, a designation, and a set of one or more state and property value elements for corresponding states and properties of the word sense number entry as described above. The source of a T-descriptor's states and properties is another concrete noun word sense number entry which has an address to its  location in Dictionary . T-descriptors are utilized for a common source of multiple state and properties. An advantage of T-descriptors is that they save storage space. A T-descriptor is implied by prepositions as described above. S-descriptors represent a concrete noun which is modified by a prepositional phrase with a concrete noun complement as described above. An S-descriptor contains a value relation, a source, and a designation. The source component of an S-descriptor contains the source concrete noun word sense number entry which contains the value, value range, or contains an S-descriptor. The location of the source word sense number entry is in Dictionary . The source word concrete noun contains the value or value range in its corresponding state or property as described above. If the source state contains an S-descriptor, the actual value or value range is contained in the S-descriptor chain. An S-descriptor chain corresponds in natural language to multiple consecutive prepositional phrases.","A word sense number entry of a concrete noun can also have an associated set of pointers to A-descriptors. The A-descriptors as well as the S-descriptors, C-descriptors and T-descriptors in an entry are stored in an external relation data structure which is described below. The A-descriptors of a word sense number entry contain information as described above which relates the word sense number to other concrete noun word sense numbers. The pointers to A-descriptors of an entry are separated into partitions. The A-descriptors are partitioned by the type of A-relation. The A-descriptors within a type of A-relation partition can be further partitioned. For example, the function A-relations of an entry can be partitioned into partitions of: A-relations implying a type number selection of the word sense number, modifiee in a prepositional relation, complement in a prepositional relation, modifiee in a prepositional relation with the function A-relation containing sentence roles with A-relations, complement in a prepositional relation with the function A-relation containing sentence roles with A-relations, nonfinite verb modification, morphological word@ modification, etc. These partitions of pointers to A-descriptors correspond to partitions of A-descriptors in the external relation data structure.","A word sense number entry can also contain a super-type number, i.e., the type number of the word sense number entry which has the entry as an immediate subtype. Immediate subtype means that there are no intervening subtypes. A super-type number can have an associated pointer to the type indicator. The type indicator is a modifier which indicates the subtype of the super-type, e.g., \u201cfood\u201d is a type indicator for \u201cstore\u201d. Not all subtypes have a type indicator. One way of expressing the subtype without a type indicator is with terms such as: \u201ca kind of\u201d and \u201ca sort of\u201d. The type indicators are stored in a common structure associated with entries of a word sense number with the same word sense number. This structure is the external relation data structure. A word sense number entry can also contain a set of one or more subtype numbers of entries which are subtypes of the entry. The super-type numbers and the subtype numbers form a tree structure of the related types of a word sense number. This tree is used to search for word sense number entries for selecting input word sense numbers or generating output word sense numbers for example.","The format of a concrete noun word sense number of . described above is for a general entry. The entries of a concrete noun word sense number with a common word sense identification number are configured for achieving the following goals: selecting versions of a general reference noun, selecting an entry similar to a specific unknown reference, efficiently storing typical state and property values, and storing information for general and specific known references. The concrete noun word sense number entry with a zero type number, zero specificity number and zero experience number, the ZERO ENTRY, is used in the selection of general reference versions and the selection of an entry similar to a specific unknown reference. A specific known reference is looked up at its entry. The zero entry contains every state and property contained in a word sense number with the same word sense identification number. Every state and property in the zero entry contains a pointer to the state or property in Memory . The zero entry also has a pointer to the external relation data structure associated with all word sense number variations of the common noun word sense identification number. Entries other than the zero entry contain a pointer to a state or property only if that entry's word sense number has a different pointer than the zero entry. An entry has a different pointer to a state or property because it has more specifically defined state or property than the state or property addressed at the zero entry for example. As will be described below, states and properties in Memory  have general and specific information associated with them. Some states and properties in the zero entry are common to every word sense number with the same word sense identification number. Other states and properties are only contained in word sense number entries with certain type numbers. The zero entry serves as a selector of type numbers and certain entries of the word sense number entries with a common identification number by distinguishing the states and properties which are only in word sense number entries with certain type numbers or are only in certain entries. The distinguished states and properties contain the type numbers or entry numbers which contain these states or properties. Also, certain values for a property or state can only occur in word sense number entries with certain type numbers or in certain entries. The zero entry serves as a selector of certain entries and type numbers of word sense number entries with a common identification number by distinguishing the state or property values which are only in certain word sense number entries or in word sense number entries with certain type numbers. These distinguished state and property values have the type numbers of entries or the entry numbers which contain these values. These distinguished states and properties, and these certain state and property values are used to select type numbers and certain entries for general and specific unknown references. The type numbers and certain entries are selected by checking the states, properties, and their values of a concrete noun in the zero entry for an associated set of type numbers or certain entry numbers. The states, properties, and their values are implied by modifiers of the concrete noun and clauses containing the concrete noun which set or imply state and property values for the concrete noun.","In addition to the distinguished states, properties, and values, the states and property components of the zero entry for the word sense number entries with the same identification number contain typical values as described above. The zero entry is the generalization of all the word sense numbers with the same identification number since it contains all the states, properties and their typical values. A general reference concrete noun only has typical values for states and properties, and thus only has a zero experience number. A general reference entry has a zero or non-zero type number, zero or non-zero specificity number and zero experience number. A general reference in  only has a zero specificity number, but a general reference in a conversation may be best represented by a non-zero specificity number. In the remainder of this paragraph, general reference means a general reference in , i.e., a zero specificity number. A general reference entry only contains the typical state and property values which differ from its immediate super-type of the general reference entry. The immediate super-type is a general reference entry. The immediate super-type of a general reference entry has the general reference entry as a next level subtype. The zero entry is at the highest level of types, and hence has no super-type. If a general reference noun entry does not contain a typical value, the value is stored at the immediate or higher level super-type of the general reference noun. Thus if a missing typical value is not contained at the immediate super-type, the missing value can be found in a higher level super-type. Each word sense number entry which is a subtype has the type number of its immediate super-type available in its Super Type Number component of its entry as depicted in . The zero entry has an indefinite pronoun number in its Super Type Number component. The indefinite pronoun number selects the indefinite pronoun which corresponds to the noun word sense identification number in  for the current natural language. A word sense number entry with a non-zero type number, non-zero specificity number and zero experience number is a generalization of a specific known concrete noun. Such an entry contains typical values for states and properties which are different from the typical values of the related general reference entry which has the same type number but zero specificity and experience numbers. This related general reference entry has the same word sense number except that its word sense number has typical values for the combination of all the specific related references. A missing state value in a specific concrete noun entry with a non-zero experience number implies that its zero experience number entry or a related general reference entry's typical value is used. The related general reference entry's typical value can be stored in its entry, or the entry of a super-type entry.","This policy of storing typical values in a hierarchy of types designated by type number has the advantage of reducing the amount of needed storage. Another advantage of this policy is that an entry only contains states and property values or their equivalent (i.e., values obtained through S-descriptor pointers, C-descriptor pointers, or T-descriptor pointers) which are different from typical values stored in the general reference type hierarchy. The stored values or equivalent are the ones which distinguish the word sense number entry. Thus, these stored values or equivalent are used for modifiers of the word sense number when the word sense number and such modifiers are converted into words for expression because such modifiers distinguish the word sense number. This policy is also flexible because when the hierarchy of types does not allow certain values to be obtained through the hierarchy, such values can be obtained with T-relations with a source having the same word sense identification number as the word sense number entry with the T-descriptor, i.e., a local T-descriptor. A word sense number entry with such a T-descriptor is related in type by the type hierarchy and is related in type to the source of the T-descriptor. This use of the T-descriptor also reduces the amount of storage.","The concrete noun word sense number entries which have the same word sense identification number (but different type, specificity and\/or experience numbers) own an external relation structure for selecting the word sense number entries which are compatible with a non-clausal, non-adjectival, modifier of these word sense numbers of their associated modified concrete nouns. Here, non-clausal does not include nonfinite verb and morphological word@ modifiers. The external relation structure is also used for selecting the word sense number entries of their associated concrete nouns when these concrete nouns modify other words, i.e., the external relation structure is used by the word sense numbers owning the structure for modifying other nouns and being modified by other nouns, morphological words and nonfinite verbs. A concrete noun can be premodified by nouns, nonfinite verbs, morphological words including morphological words@, and adjectives. A concrete noun can be postmodified by prepositional phrases. A concrete noun can also be modified by subject complements and appositives. An appositive modifying a concrete noun is equivalent to a subject complement modifying the concrete noun, e.g., \u201cJohn, captain of the team, . . . \u201d is equivalent to \u201cJohn is captain of the team.\u201d A subject complement modifying a concrete noun is equivalent to a noun or adjective modifying the concrete noun. A concrete noun can also be modified by clauses. depicts the External Relation Structure General Format. A single External Relation Structure is associated with all the word sense number variations of a single noun word sense identification number. Each word sense identification number has its own External Relation Structure. The External Relation Structure contains non-clausal, non-adjective, and modifier implied relations. The External Relation Structure also contains relations implied by concrete noun word sense numbers owning this structure for the modification of other modifiees.","Adjective modifiers are processed with the state and property pointers and their values are stored in the concrete noun word sense number entries as depicted in . Clauses modifying a concrete noun are processed with the modified noun as a sentence role in the clause. Some modifiers of a concrete noun can set a type number for the modified concrete noun's word sense number. Other modifiers can apply to multiple word sense numbers with a common identifying number which own the structure. Each entry in an external relations table either has one or more type numbers and\/or has one or more locations of the word sense number entries which can be in the relation of the entry's external modifier. The type number of an external data relation entry implies that the word sense number of the concrete noun owning the structure has this type number. The External Relation Structure contains a partition of modifier indexed relations. This partition contains modifiers which directly modify a concrete noun. Each entry in this partition has the relation descriptor of the relation between the modifier and the concrete noun owning the structure. The word sense number of the modifier is used to select an entry in the partition. Note that a modifying concrete noun can have a typing component. Thus there could be an entry in the External Relation Structure of \u201cstore\u201d for \u201cfood\u201d and \u201cChinese food\u201d as in \u201cfood store\u201d and \u201cChinese food store\u201d for example. \u201cChinese food\u201d has the same word sense identification number as \u201cfood\u201d, but it has a different type number. Each entry in this partition has the A-, T-, S-, or C-descriptor associated with the relation to the concrete noun implied by the modifier. S-descriptors and C-descriptors in the External Relation Structure contain the state or property in the relation. Each entry in the modifier indexed partition has type numbers or a list of word sense numbers stored in its External Relation Structure entry. The modifier indexed partition is searched when a modifier directly modifies the concrete noun. The modifier indexed entries can also be subpartitioned by the type of modifiers including: concrete nouns, types of morphological words and nonfinite verbs. Within each type of modifier subpartition, word sense numbers with a common identification number are grouped together.","In English, some relations are realized through direct modification of the concrete noun. The modifier indexed partition is searched for direct modifiers. However, it is possible that a direct modifier can be expressed as a prepositional phrase with the direct modifier as complement of the prepositional phrase modifying a concrete noun. A preposition implies the possible types of relations between the modifiee and the complement of the modifying prepositional phrase. There is another type of partition, the relation indexed partition, of an external relation structure. The relation indexed partition is designed for finding a prepositionally expressed modifier. Note that a modifier which can be expressed both as direct and prepositional modifiers are stored in the External Relation Structure in the modifier indexed partition and the relation indexed partition respectively. The motivation for storing both types of modifiers is the flexibility of expressing A-, T-, and S-relations as direct modifiers or as prepositional modifiers of concrete nouns. Also, a different natural languages may allow one or both types of modifier expression.","The External Relation Structure also contains a relation indexed partition with subpartitions. The relation indexed partition also contains direct and prepositionally expressible modifiers. One relation partition is for function A-relations. The function A-relations associated with external relations differ from stored A-relations in Context Memory  in that these A-relations have a verb word sense number in their External Relation Structure entry. The word sense number of the verb in these entries is used to select function A-relations associated with modifying nonfinite verbs, with modifying morphological word@, and with other function A-relations as described above for example. The function A-relations associated with nonfinite verb modifiers is selected with the word sense number of the nonfinite verb. The function A-relations associated with morphological word@ modifiers is selected with the verb word sense number associated with the base verb of the morphological word@ or a verb implied by the affixes. The other function relations are selected with a verb word sense number associated with the modifying noun or morphological word in the relation or the verb word sense number is given for a relation. The entries in the function A-relation partitions contain the A-relation descriptor associated with the external relation. The entries in the A-relation partitions also contain the types or the locations of the word sense number entries of the concrete noun owning the external relation structure which are in the function A-relation. These relation indexed function A-relations can also have subpartitions selected by: the type of modifier, modifying relations of word sense numbers owning the structure, A-relations containing sentence roles with A-relations, etc. The entries of the other relation indexed partitions of the External Relation Structure contain the A-, T- S- or C-descriptor associated with the word sense numbers owning the structure. These entries also contain the type or the word sense number entry locations of the word sense numbers owning the External Relation Structure which are in the descriptor relation. These other relation indexed modifiers can also have subpartitions selected by: the type of A-relation, a T-relation, a C-relation, an S-relation, modifying relations, modifier relations, T-relations with a source having the same word sense identification number as the destination entry of the T-descriptor (i.e., a local T-relation), etc.",{"@attributes":{"id":"p-0403","num":"0425"},"figref":"FIGS. 17","i":["d","jj "],"b":["17","60","18","60","120","120","60","70","22"]},"The modifiers of the noun head sentence role word sense number are selected to maintain the verb requirement. The verb requirement includes state and property values which the noun head must have to accomplish its sentence role. Changes of requirement states and properties are checked to see if the refined word sense number is compatible with its sentence role. A complication with the modifiers of a noun head is that often a particular modifier could modify more than one word in the noun phrase. Also, a prepositional phrase does not always modify the noun head immediately preceding it. Thus, when a modifier does not have a compatible word sense number for a modifiee, an alternate modifiee is selected. Sometimes a modifier implies a type change for its modifiee. When this occurs, the change in the modifiee must be checked for maintaining a compatible modification for its modifiee and its modifiers. Also, if the noun has a type change, it must be checked for maintaining its verb requirements. Modifiers are processed until a word sense number has been selected for each modifier. When a modifier can not modify any of its possible modifiers, a previously processed word in the phrase is selected as a modifiee according to a priority list associated with the current natural language. The selected word is processed to select another of its word sense numbers. This backtracking then selects a new word sense number of the selected word or backtracks further until a new word sense number can be selected or until all possible word sense numbers of the noun head have failed in the selection process. When a sentence role head has failed all possible word sense number selections, the Communication Manager is informed of a noun word sense number selection error. The Communication Manager has options which include trying an alternate syntax interpretation, issuing a clarifying question, or requesting new word sense numbers. A noun head which is a complement in a prepositional phrase, and which has failed the word sense number selection process, is processed for modifying another noun head in the sentence which precedes its usual modifiee, i.e., the immediately preceding noun head. If none of the preceding noun heads can be modified, and if the preposition can also modify a verb, verb modification by the prepositional phrase is checked. If all possible modifiees have failed, the usual modifiee is reprocessed for word sense number selection. Possible modifiees are checked for being modified by the prepositional phrase until a compatible modifiee is found or until all possible, word sense number processed modifiees have failed. When a all possible processed modifiees have failed, the prepositional phrase processing is suspended if there are possible, unprocessed modifiees. Otherwise, the Communication Manager is informed of the prepositional phrase complement word sense number selection failure.","Concrete Noun Word Sense Number Selection Processing at Selector ","The word sense number selection process of a noun begins at Step .  sets the Current-Word to be the next unprocessed noun in N-List. N-List is the list of nouns sent by Step  with the invocation of this process. N-List contains nouns which have a sentence role in a clause.  also sets the Current-Head to be the Current-Word.  is next and is true if the Current-Head has a MOD-INDUCED property. The Current-Head has a MOD-INDUCED property when the Current-Head is a separate reference implied by a modifier. For example, \u201cbats\u201d has a separate reference implied in: \u201cwood and aluminum bats\u201d because \u201cbats\u201d are not both \u201cwood and aluminum\u201d. If  is true, the Current-Head has already been processed for its word sense number, but has unprocessed modifiers. If  is true,  is next and begins processing of modifiers as is described below.","Coordinated Modifier Processing","If  is false, processing continues at .  is true if the Current-Head has coordinated premodifiers with unprocessed conjunctions. If  is true,  sets Cur-Conj-Set to the SDS pointers of conjunctions coordinating premodifiers of the Current-Head; -Return is set to ; the conjunction process, CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return] is called. For, example, CONJ processes constituents for English as described for . After processing at CONJ,  is next.  computes a sum of products terms for multi-level conjunctions. Each term is assigned a copy of the Current-Head as its modifiee. For example, \u201clong and short aluminum or (long and short) wood bats\u201d becomes \u201clong, short aluminum bats or (long, short) wood bats\u201d after the sum of products computation and the assignment of the Current-Head, \u201cbats\u201d, to each term. The words in parenthesis are placed through ellipsis processing.  stores the terms and the copies of the Current-Head in the SDS. Also, a copy of the Current-Head with a pointer to its product term in the SDS is added to N-List for each \u201cor\u201d conjunction. After , or if  is false,  is next, and is true if the Current-Head has a modifying prepositional phrase with a coordinated complement. If  is true,  is next.  forms a separate prepositional phrase for each separate noun phrase in a complement. The formed phrases are joined by the conjunction joining their associated complements. After , or if  is false,  is next, and is true if the Current-Head is modified by coordinated prepositional phrases. If  is true,  is next.  sets Cur-Conj-Set to the SDS pointer of the conjunctions joining prepositional phrases modifying the Current-Head; -Return is set to ; CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return] is called. After processing at CONJ,  is next.  computes the sum of products for multi-level conjunctions and associates a copy of the Current-Head with each term. The terms are stored in the SDS, and a copy of the Current-Head with a pointer to its product term in the SDS is added to N-List for each \u201cor\u201d conjunction.","Processing of Concrete Noun Phrases Already in Context","After , or if  is false,  is next and is true if the Current-Head is in Context Memory  or a word sense number of the Current-Head in . If  is false,  is next.  sets all of the modifiers of the Current-Head to be unprocessed. Then processing is set to continue at Step . As will be described below,  begins the state representation word sense number selection process as compared to the looking up of a word sense number in context. If  is true,  is next.  generates R-List. R-List contains the MAX, an upper limit number for R-No, word sense numbers of the Current-Head which have been stored in .  also generates A-List which contains the address in  of the corresponding word sense number in R-List. A-List is used to locate a selected word sense number. R-No is set to 1. R-No is the pointer in R-List of the word sense number being processed.  also sets SOURCE to CONTEXT. SOURCE indicates the location where the word sense numbers in R-List came from.  also sets BACK to  and sets processing to continue at . BACK is the location where processing continues after the process starting at  has been completed. As will be described below, the process at  selects a word sense number of the clause verb which is compatible for a word sense number in R-List for the sentence role of the Current-Head. If a word sense number is not selected at the process of , word sense numbers of the Current-Head which are not in the context are processed at the process of  as will be described below. If a word sense number is selected at the process of , processing continues at .","When Step  is next,  is true if there is an unprocessed state representation word premodifier of the Current-Head. If  is true,  is next.  sets the Current-Word to be the next unprocessed state representation word premodifier selected with the current natural language order. For example, the premodifier selection order for English is the nearest first order.  is next and is true if the modifiee of the Current-Word in a phrase in  which has the Current-Head as head and which also contains the Current-Word as a premodifier of a modifiee which is in the noun phrase under process. Also, the phrase in  which makes  true must have the Current-Head with the word sense number as selected at the  process, and the phrase in  must contain the same possible modifiees of premodifiers that have been processed before the Current-Word in the phrase under process, and the current phrase under process must be a subset of this phrase in  with respect to premodifiers including adjective postmodifiers.  stores the stated modifiers and their modifiees for noun phrases. A possible modifiee is determined for the current natural language. In English, a possible modifiee succeeds its modifier except for postmodifying adjectives which succeed their modifier. If  is true,  is next and processes the next premodifier. If  is false,  is next.  sets processing to continue at .  selects the next word sense number as above. The  to  steps is a pattern matching process to select a reference to a noun previously stated in the conversation. If  is false, the current reference has been matched to a previous reference for stated premodifiers. If  is false,  is next, and is true if the next unprocessed postmodifier is an adjective. If  is true,  is next and sets the Current-Word to the next unprocessed premodifier.  sets a postmodifying adjective to be checked as a stated premodifier next at  as above. If  is false,  is next and is true if the Current-Head has a prepositional phrase modifier. If  is true,  is next.  sets up the prepositional phrase to be processed for state representation processing. The Current-Word is set to be the complement of the next unprocessed prepositional phrase postmodifier at . The Current-Head is set to the Current-Word. Finally,  sets processing to continue at  which begins state representation processing of the prepositional phrase. If  is false,  is next.  stores the following at the Current-Head's SDS position: SOURCE, a pointer to the Current-Heads location in , and PROCESSED. After ,  is next and is true if N-List has an additional unprocessed noun. At , the Current-Head has been processed for word sense number selection and the next noun head is to be processed. If  is true, processing continues at  for the next noun head as described above. If  is false, all noun heads have been processed, and processing continues at  which determines the next process to be performed and is described below.","Processing of Concrete Noun Phrases not Already in Context","State representation processing of noun heads begins at  unless the noun head has been set up for state representation processing as at . This state representation processing utilizes the structures of , , and to select concrete noun head word sense numbers.  sets up the noun head for state representation processing. The R-No is set to 1, and POS is set to 1 at . POS is an index variable for SREP (described below) which stores information for the current interpretation of the state representation of the Current-Head's noun phrase. Adj-Find is set to false. Adj-Find is a process state variable which is used to store the state of a requirement for finding out if a given adjective can modify a given concrete noun. For example, the prepositional modification process of an adjective of the current natural language can require the determination of an adjective's capability to modify a concrete noun as described for English in the process of .  also sets Prep-Check to the number of prepositional phrases joined with \u201cand\u201d which are modifying the Current-Head. Prep-Check is used to select when to consider the possibility that a prepositional phrase modifying the Current-Head implies a separate reference to the Current-Head as in: \u201cschools of Chicago and of New York\u201d. That example is an ellipsis of \u201cschools of Chicago and schools of New York\u201d. The separation is considered when a prepositional phrase can not modify a Current-Head and Prep-Check is greater than 0.","Pronoun Processing","After ,  is next and is true if the Current-Head is stated as a pronoun. If  is true, processing continues at .  is one entry to the interface to PRO-SEL, the pronoun selection process, e.g., as described for English in .  is true if SC-M is true. SC-M is true if there is to be a category match of the subject and subject complement in a clause with a \u201cto be\u201d verb. SC-M is initially set to false upon start up of Selector . SC-M is set to true when necessary in processing described below. If  is true,  sets CATG to the category of the subject which has already been processed when SC-M is true. CATG is an invocation parameter of the PRO-SEL process. CATG is used to specify a specific category of a pronoun referent. If  is false,  sets CATG to null. In this case, no specific category is needed. After , or after ,  is next, and sets other invocation parameters for calling PRO-SEL, the pronoun selection process. C-Pro, the pronoun to be processed, is set to the Current-Head. INIT, the PRO-SEL starting location, is set to START which implies beginning the process the first time for C-Pro at . Another entry to this interface of PRO-SEL is accessed when a pronoun has failed the word sense number selection process at , which is described below. This other entry is .  sets C-Pro to the Current-Word, sets INIT to RESTART and sets CATG to null. After  or ,  is next, and is true if C-Pro has a CATAPHORIC-PROPERTY stored in its SDS position.  is true if C-Pro is being processed for a cataphoric referent. If  is true,  sets INIT to RESTART; PROP is set to CATAPHORIC, Not-Cata is set to false. INIT is set to RESTART because C-Pro has been processed before. PROP is set to CATAPHORIC to signal PRO-SEL to select a cataphoric referent as described above. Not-Cata is set to false because C-Pro did not have an anaphoric referent. Not-Cata is used to distinguish the case where PRO-SEL first determines that C-Pro requires a cataphoric referent. This case requires suspension of the processing of the clause containing C-Pro because the referent has not been processed. In other cases,  has been restarted after the possible referent has been processed either in the part of the sentence after C-Pro, or in the succeeding sentence as described above. If  is false,  sets PROP to null, and sets Not-Cata to true. After  or ,  sets SC-M to false, and sets -Back, the return address from PRO-SEL, to .  then calls PRO-SEL[Cur-Nat-Lang, INIT, C-Pro, PROP, CATG, -Back]. After PRO-SEL completes its processing as described above,  is next, and is true if C-Pro's SDS position contains CATAPHORIC-PROPERTY and Not-Cata is true. If  is true, C-Pro requires a cataphoric referent which has not been processed, and  is next.  sets Suspend-Head-Clause to true, and sets processing to continue at Step . This suspends processing of the current clause and returns processing to . If  is false,  is next, and is true if C-Pro is a noun phrase head. If  is true, processing continues at  which is described below. If  is false, processing continues at  which processes noun phrase modifiers as is described below.","Possible Word Sense Number List Generation","After , or if  is false,  is next, and is true if REQ-Sel is true. If  is true,  has been called by Selector  to determine if a specific word sense identification number of a specified Current-Head will have a word sense number which meets the specified requirements of the Current-Head's verb(s) after selecting the Current-Head's complete word sense number for the Current-Head's modifiers. This process is described in more detail in the Unassigned Sentence Role Processing section of Selector 's word sense number selection process. If  is true, processing of the Current-Head's modifiers begins at  as is described below for any Current-Head. If  is false,  is next. At , if the Current-Head is not a pronoun, and if the Current-Head does not have an R-List, an R-List is formed with the MAX, a program variable, word sense numbers of the Current-Head. The order of word sense numbers in R-List is in the order of word sense numbers in  in the most recent reference first order followed by the word sense numbers of the Current-Head stored in Dictionary . If the Current-Head is a pronoun, R-List is formed with the MAX referents in the reference list stored in the Current-Head's SDS position. The Current-Head could already have an R-List from , or, as will be described below, the Current-Head could already have an R-List from processing at Selector . The reference list was stored by the pronoun selection process as described above from references in the sentence or Context Memory . If the Current-Head has an R-List from  and is not a pronoun or a specific known reference,  expands the R-List to include word sense numbers which are not in . The word sense numbers of a specific known reference and the word sense numbers from  contain identification numbers, type numbers, specificity numbers, and experience numbers to the extent they are known. The Dictionary  word sense numbers in R-List contain identification numbers.  sets BACK, a return processing location, to . The SOURCE is set to MEMORY for a noun and to CONTEXT for a pronoun. After , processing continues at Step .","Preliminary, Clause Compatible Noun Head Word Sense Number Selection","Step  begins the general process for selecting a word sense number in R-List which is compatible with the clause verb.  is true if the Current-Head is a concrete noun. If  is true,  is next and is true if the Current-Head is coordinated with other noun constituents, and there is a constituent without an R-List. If  is true, processing continues at  which selects the next constituent in N-List as described above. If  is false, processing continues at . If  is false, the Current-Head is an abstract noun. As is described in more detail below, abstract nouns are closely related to concrete nouns. The entries in a R-List for an abstract noun are obtained in the same way that is utilized for concrete nouns. State abstract nouns are variations of a concrete noun in the sense that a state abstract noun has a state representation structure which is a special case of a concrete noun. State abstract nouns differ from concrete nouns in that the represent states. Thus, state abstract nouns have pointers to state data structures in Memory . However, since the state abstract nouns have a data structure which is a special case of a concrete noun, state abstract nouns also have a data structure in Memory . This data structure in  is used to select the word sense number of a state abstract noun with the same process utilized to select concrete nouns in Selector . Clausal abstract nouns are equivalent to a noun modified by a subordinate clause. The noun modified by this clause is a concrete noun or possibly a state abstract noun. The modifying clause defines the modified noun in the sense that the clause is typically used to select a concrete noun or state abstract noun in the context which the clausal abstract noun represents as is described below. Clausal abstract nouns also have a state representation structure which is a special case of a concrete noun in . A word sense number of a clausal abstract noun also has a pointer to its modifying clause in Memory . Clausal abstract noun heads and their modifiers are also initially processed for word sense number selection with the same process in  used for concrete nouns. One difference is that a modifier of a clausal abstract noun may actually modify a constituent in the modifying clause or may modify the noun in context which the clausal abstract noun represents. Thus, a modifier does not have to directly modify the clausal abstract noun. This word sense number selection process of the clausal abstract noun then places certain requirements upon the noun to be selected from the context. These requirements and the defining clause are used to select a noun in the context if possible. If it is not possible to select a noun from the context, the clausal abstract noun is not replaced, and such a clausal noun is typically represented by a general reference pronoun, e.g., \u201csomething\u201d, or by a general reference noun. If  is false,  is next and is true if the Current-Head is a state abstract noun. If  is true,  stores STATE-ABS at the SDS position of the Current-Head, and sets processing to continue at  as is described above. If  is false,  stores ABS-Check in the Current-Head's SDS location, and processing is set to continue at  as is described above. ABS-Check is used for identifying clausal abstract nouns. A clausal abstract noun modifier may modify the noun or an element in the clause. ABS-Check is used to identify the need to mark a modifier for processing at  and to proceed to the next modifier. If  is true, or after processing at Selector ,  is next.","The process at  selects a word sense identification number for a sentence role noun head so that the identification number is consistent with its sentence role. For example a subject's word sense identification number is selected so that there is a verb word sense number which is consistent with the subject.  is true if R-No is less than MAX which implies there is an untried word sense number in R-List. If  is false, it is possible that the R-List can be expanded to include word sense numbers not in . If  is false,  is next and is true if SOURCE=CONTEXT and the Current-Head is not a specific known reference and not a pronoun. If  is true, the word sense numbers in  failed to select a compatible word sense number and  is next.  sets R-No to be MAX+1, and also sets processing to continue at  which sets all the possible word sense numbers of the Current-Head to be considered in a new R-List. Setting R-No causes only word sense numbers not in  to be considered. If  is false, processing continues at  which determines if there is a possible alternative or if processing has failed. The process at  is described below. If  is true,  is next and is true if the Current-Head is an unpreprocessed subject in a clause without a \u201cto be\u201d verb and without an adjective or prepositional phrase subject complement, an unprocessed receiver, an unprocessed subject complement, an unprocessed object complement, or an unprocessed appositive. Here unpreprocessed refers to the processing performed at Selector  prior to noun word sense number selection. The processing at  is described below. If  is false, the Current-Head is an unprocessed subject with an adjective or prepositional phrase subject complement, or is a prepositional complement and  is next.  is true if P-ADV is true. P-ADV is true for a complement of a prepositional phrase modifying a verb when processing is requested by Selector . If  is true, processing continues at  which processes the complement for adverbial modification as is described below. If  is false, processing continues at .  begins the process of processing the modifiers of the subject or prepositional complement as described below. This subject or prepositional complement modifying a noun does not have any verbal criteria for selecting its word sense identification number. If  is true,  is next, and is true if the clause has a noun or pronoun subject, a \u201cto be\u201d verb, and an unprocessed noun or pronoun subject complement. Here, the subject complement is unprocessed if it does not have an R-List. The subject can be a concrete noun, state abstract noun, or clausal abstract nouns. If  is true,  is next.  sets the Current-Head to be the subject complement, sets SC-M to true, and sets processing to continue at  which processes the subject complement as described above. SC-M is set to true to cause a subject complement which is a pronoun to have the same category as the subject. If  is false,  is next, and is true if the clause contains a processed noun subject, a \u201cto be\u201d verb, and a processed noun subject complement.  uses the same types of nouns as for . If  is true, processing continues at .","Subject\/Subject Complement Preliminary Word Sense Number Selection",{"@attributes":{"id":"p-0415","num":"0437"},"b":["60280","60280","60280","60281","60281","60282","60282","60290","60281","60283","60283","60284","60","60285","60284","60","60285","60285","60285","60283","60286","60286","60287","60","60288","60287","60","60285","60288","60288","60289","60285","60288","60289","60282","60290"],"figref":"FIG. 11","i":"b"},"After , or if  is false, or if  is false,  is next and is true if the current clause or a formed clause has not been preprocessed for matching, e.g., the R-No, of the subject and subject complement(s). If  is true,  searches a subject's R-List for containing a word sense number that matches with a word sense number in each subject complement's R-List for certain subjects and subject complements. This search is only performed for a subject and a subject complement(s) which are the same type of noun, i.e., both concrete nouns, both state abstract nouns, or both clausal abstract nouns. There is an additional match process between certain noun types described below in this paragraph. State abstract nouns are not matched with concrete nouns at .  forms a separate clause for the case where one sentence role (subject or subject complement) is a state abstract noun, and where the other sentence role (subject complement or subject) is a concrete noun. The subject and subject complement(s) meeting the conditions of the previous sentence are said to have incompatible noun types. Concrete nouns and clausal abstract nouns are compatible noun types with respect to themselves and each other. If the current clause contains subject complements with both compatible and incompatible noun types,  forms a separate clause with the subject, the \u201cto be\u201d verb, and the one or more subject complements that have incompatible noun types. The sentence roles of the formed clauses have there new SDS position updated in N-List. Also, the incompatible noun type subject complements forming the separate clause are removed from the current clause. A clause with an incompatible noun type subject and one or more incompatible noun type subject complements is processed at  which is described below.","The search at  for matching a concrete noun subject and a concrete noun subject complement(s), for matching a state abstract noun subject and a state abstract noun subject complement(s), or for matching a clausal abstract noun subject and a clause abstract noun subject complement(s), begins at the current R-No of each sentence role's R-List. A match occurs when word sense numbers from each R-List have the same or compatible identification number component of their word sense numbers, and have compatible type numbers. Two identification numbers are compatible if the class number component of the identification number is a subclass of the other class number. If the two identification numbers are compatible, the type numbers do not have to be compatible. Two type numbers are compatible if one type number is equal to or is a subtype of the other type number. The search for matching a concrete noun and a clausal abstract noun, for matching a state abstract noun and a clausal abstract noun, or for matching a clausal abstract noun and a clausal abstract noun also begins at the each noun's R-No. This second type of match for a clausal abstract noun to a clausal abstract noun only occurs if there was not a word sense number match between them. A match occurs when the concrete noun, the state abstract noun, or the clausal abstract noun can be a representational referent of the clausal abstract noun. The representational referent is the noun in the context defined by the modifying clause, and it is defined in detail below in the Clausal Abstract Noun section. A noun can be a representational referent when the noun matches a direct or indirect category of the clausal abstract noun. When two clausal abstract nouns are matched for this second type of match, the direct and indirect categories of each clausal abstract noun are checked for matching the other clausal abstract noun until a match is found. These categories are also described below with representational referents.","After ,  is next, and is true if a match is found at . If  is true,  sets R-No to the value of the match for the subject and each subject complement, and  stores the category for a subject and each subject complement which are matched to clausal abstract noun category at the clausal abstract noun with the matched category in the SDS. If no match was found, and if R-No or a category is not stored in the SDS, R-No is set to 1, and the category number is set to 1 as needed. If  precedes  as described below for example, no match has been found, and R-No or a category number is not stored. If no match was found, and if R-No or a category number is stored in the SDS, R-No or the category number is not changed. The case in the previous sentence occurs when a clause is reprocessed. Reprocessing of a clause is caused by failure to select the word sense numbers of the modifiers of a subject or subject complement in a clause with a noun subject complement. The R-No or category number is not changed in this case since alternate interpretation of the unmatched, reprocessed clause will begin at the next untried R-No and category number if needed. If a match was found at ,  sets REQ for the subject and each subject complement to be the match rule of subject\/subject complement R-No's\/category numbers. REQ is used to ensure that relations between words is maintained.  sets the Current-Head to the subject being processed, sets BACK to , and sets processing to continue at  for the subject. , which is described below, will store information related to the subject and subject complement including: the matched word sense number, category number if needed, REQ, and the word's sentence role. After processing at ,  is next.  sets the Current-Head to be the next subject complement which has not been processed at ; BACK is set to  if there is an additional unprocessed subject complement, or BACK is set to  if the Current-Head is the last unprocessed subject complement; processing is set to continue at .","If  is false,  has failed to match the subject and subject complement(s), and  is next.  is true if the SOURCE value for the subject or subject complement(s) is CONTEXT. If  is true, the corresponding R-List only contains word sense numbers which have been stored in  for the conversation. If  is true,  forms an R-List as at , which possibly includes other word sense numbers not in , for each subject and subject complement with a CONTEXT SOURCE. After ,  is next as above. If  is false,  composes a new subject complement(s) composed of the subject being modified by a subject complement. Setting the subject to be modified by the subject complement sets up this new subject complement phrase to be processed for the case where there is a non-equative relation between the subject and subject complement.  is utilized for a case such as: \u201cThe pan is iron.\u201d which is transformed to: \u201cThe pan is (the) iron pan.\u201d \u201c(the)\u201d is transferred to ensure that the proper reference type, e.g., specific, is selected for \u201cpan\u201d. If there are more than one subject complement, each subject complement phrase is replaced with the subject complement modifying the subject.  also sets the subject to PROCESSED at the subject's SDS position. This causes the subject to effectively be removed from further processing. After ,  is next. If  is processed after , R-No or the category number will be set to one for the head of each subject complement phrase. After ,  is next as above. Eventually, processing will continue at , and all clauses will have been preprocessed which makes  false. If  is false,  sets the Current-Head to the next UNPROCESSED subject or subject complement, which is unprocessed with respect to its modifiers, in a stated or formed clause with a noun subject and subject complement; BACK is set to ; and processing is set to continue at  which begins the process of selecting the word sense numbers of the modifiers of the noun phrase of the Current-Head. The process starting at  is described below.","Initiation of a Pronoun Verb Processing","If  is false, the current clause does not have a concrete noun subject expressed as being equivalent to a concrete noun subject complement. If  is false,  is next and is true if the Current-Head is an unpreprocessed subject with respect to  processing. If  is true,  is next and is true if the clause verb is a pronoun. If  is true, processing continues at .  begins a process to select the word sense numbers of the clause verb with the Pro-Sel process.  sets INIT to START, and sets RETRY to false. Next,  is true if the verb's SDS position contains a CATAPHORIC-PROPERTY. As for a noun, a CATAPHORIC-PROPERTY implies the verb has a cataphoric referent. If  is true,  sets PROP to CATAPHORIC, and Not-Cata-V, the verb equivalent of Not-Cata, to false. If  is false,  sets PROP to null, and Not-Cata-V to true. After , or after ,  sets C-Pro to the clause verb, sets -Back to , and sets CATG to null.  calls Pro-Sel[Cur-Nat-Lang, INIT, C-Pro, PROP, CATG]. After processing at Pro-Sel,  is next.  is true if the verb's SDS position contains a CATAPHORIC-PROPERTY and Not-Cata-V is true. If  is true, the verb has an unprocessed cataphoric reference, and  is next.  sets all words in the current clause to unprocessed, sets Suspend-Verb-Clause to true, and sets processing to continue at Step . Step  restarts processing of the clause when a possible referent has been processed as described for the equivalent noun case. If  is false,  is next.  is true if RETRY is true. RETRY is true when another category of referent type has been found for the verb. RETRY is set to true in another path which accesses this process at  and is described below. If  is true,  is next, and is described below. If  is false, as it would be when this process is accessed from ,  is next.  forms an R-List from the possible referents of the verb, sets the verb's word sense number to be R-List[1], sets its R-No to 1, and sets processing to continue at .","Selecting Preliminary Noun Phrase Word Sense Numbers in a Clause with a Non-\u201cto Be\u201d Verb","After , or if  is false,  is next.  sets invocation parameters for a Selector  process that is described below. Selector  selects a word sense number of the clause verb starting at the R-No in the verb's R-List which is compatible with an untried word sense number of the subject R-List starting at the R-No of the subject. Also,  handles the case of coordinated subjects and\/or coordinated verbs as is described below.  sets the clause subject parameter, -SEL-D to contain a pointer to the R-List of the Current-Head. The clause verb parameter, -SEL-V, is set to a pointer to the clause verb location in the SDS, or its word sense number if the verb is a pronoun.  looks to see if there are coordinated subjects and\/or verbs. The clause object parameter, -SEL-R is set to null. The selection type operation parameter, -TYP-SEL is set to DV; DV implies that a word sense number in R-List as the clause subject, a compatible verb word sense number, and a compatible direct and\/or indirect object are to be selected. After ,  is next.  sets -Return to . Then  calls Selector [-TYP-SEL, -SEL-D, -SEL-V, -SEL-R, R-No, REQ, -Return]. REQ is a return value from  which contains a pointer to the requirements of the selected noun word sense number for the selected verb word sense number. R-No is a return parameter with the value of the verb's R-No.","If  is false,  is next and is true if the Current-Head is a unpreprocessed object with respect to  processing. An object is a direct object or an indirect object.  is reached after the subject(s) have been processed for selecting compatible word sense numbers of the subject's modifiers. If  is true,  is next and sets parameters for Selector .  sets -SEL-D to be the selected word sense number of the clause subject. -SEL-V is set to the selected word sense number of the clause verb. -SEL-R is set to a pointer to R-List. -TYP-SEL is set to R; R implies that a word sense number in R-List as a clause object is to be selected so that this word sense number is compatible with the clause subject and verb word sense numbers. The word sense number selection of the object begins at the word sense number at R-List[R-No] of the receiver.  also processes coordinated receivers. After ,  is next as above. If  is false,  is next. If  is false, the Current-Head is an appositive or an object complement. A noun appositive or object complement is equivalent to the appositive's or object complement's modifiee as a subject followed by a \u201cto be\u201d verb followed by the appositive or object complement as a subject complement.  forms a clause: with the modifiee of the Current-Head as subject, with a \u201cto be\u201d verb, and with the Current-Head as the subject complement; the \u201cto be\u201d verb and clause linkage is stored in the SDS; and processing continues at  as above.","After processing is completed at Selector ,  has selected the requested word sense numbers, and  is next and is true if -TYP-SEL=DV. If  is true,  sets the Current-Head's, the subject's' R-No to be -SEL-D, sets the receiver and all its modifiers to unprocessed, sets the receiver's R-No to 1, and stores -SEL-V at the clause verb's SDS location.  repeats for coordinated subjects and\/or objects. If  is false,  is next, and is true if the subject's word sense number was changed in the process at . If  is true,  sets the subject's R-No to -SEL-D; sets the subject and all its modifiers to unprocessed; sets BACK to ; sets the Current-Word to be the Current-Head; and processing continues at .  is repeated for coordinated subjects. After , information is stored at  as described below, and then  is next. Also, if  is false,  is next, and sets the receiver's R-No to be -SEL-R and stores -SEL-V at the clause verb's SDS location. Receivers at  include indirect and direct objects.  repeats for coordinated receivers and\/or verbs. After  or ,  sets BACK to , and sets the Current-Word to be the Current-Head. After , processing continues at .  stores the result of the word sense number selection process for a head or a modifier.  stores various information in SREP, a matrix variable which is stored in the SDS.  sets SREP[POS,2] to the Cur-Typ. Cur-Typ is an index into a data structure which contains the possible modifiees of a premodifier. For a noun head, Cur-Typ is zero. SREP[POS,3] is set to be the position of the Current-Modifiee which is null for a noun head. SREP[POS,4] is set to the Current-Modifiee's location of a modifier relation or REQ for a noun head. After ,  is next and sets the Current-Word-Status to be PROCESSED.  also stores the following at the Current-Word's SDS location: R-No, MAX, R-List, Current-Word-Status, SOURCE, R-RAC, RRAC. Also SREP[POS,1] is set to R-List[R-No]. Finally  sets processing to continue at BACK. After , the results of the selection process has been completed, and processing continues for the next head or modifier. In terms of this description, processing returns to  which processes modifiers of the Current-Head.","Modifier Word Sense Number Selection",{"@attributes":{"id":"p-0424","num":"0446"},"b":["60104","60104","60105","60105","60106","60106","60106","60874","60105","60600","60104","60107","60107","60116","60116","60","60104","60361","60116","60","60361","60104","60104","60107","60108","60108"],"figref":"FIG. 8","i":"d"},"Adjective Modifier Word Sense Selection",{"@attributes":{"id":"p-0425","num":"0447"},"b":["60110","60110","60111","60111","120","20","60111","60111","18","140","20","60","80","60111","60111","60111","60114","60114","60113","60113","60109","60361","60885","60885","60113","60361","60361","60114","60115","60115","60117","60117","60113","60117","60118","60118","60114"]},"If  is true, a possible modifiee of the Current-Word has been selected and  is next.  sets the Current-Modifiee to be the next, untried modifiee in Ad-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang]. This setting takes into account that a natural language may have more than one possible modifiee of a particular type for a given phrase.  sets TRIED to TMV[Current-Word WS#, Current-Modifiee's position in the noun phrase, Current-Modifiee WS#]. TMV, the tried modifiee vector, contains a true value if a word sense with the word sense number of the Current-Word has been checked for modifying a word sense with the word sense number of the Current-Modifiee, and a false value otherwise. WS# is the position number of the word's corresponding word sense number in Dictionary .  also sets SUCCEED to SMV[Current-Word WS#, Current-Modifiee's position in the noun phrase, Current-Modifiee WS#]. SMV, the successful modifiee vector, contains a true value if a word sense with the word sense number of the Current-Modifiee can be modified by a word sense with the word sense number of the Current-Word, and a false value otherwise. TMV and SMV are used to eliminate reprocessing of modifier, modifiee combinations which cannot occur. Each modifier has an associated TMV and SMV.  sets Sep-Check to the number of adjective modifiers of the Current-Modifiee preceding the Current-Word. Sep-Check is used for determining possible conflicting modifiers. Finally,  sets Current-Owner to be the word sense number of the Current-Modifiee.","After ,  is next and is true if TRIED is true. If  is false,  sets TMV[Current-Word WS#, Current-Modifiee's position in the noun phrase, Current-Modifiee WS#] to true. If  is true,  is next and is true if SUCCEED is true. If  is false,  is next and is true if there is another untried modifiee in Ad-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang]. If  is true,  is next as above. If  is false,  is next.  sets Cur-Sense to 1 and sets processing to continue at  as above. If SUCCEED is true at , or after ,  is next and is true if Cur-Sense is less than or equal to S which occurs when there is another untried word sense number in A-Sense. If  is false,  is next as above. If  is true,  is next. If the owner identification number of A-Sense[Cur-Sense] has a class number which matches the class number of the Current-Owner,  searches Memory  to determine if the Current-Owner can be modified by A-Sense[Cur-Sense]. The class member number of A-Sense[Cur-Sense] matches the class number of the Current-Owner if the Current-Owner's class number equals or is a subclass of the A-Sense[Cur-Sense] class number. If class numbers match, the Current-Owner can possibly be modified by A-Sense[Cur-Sense] if the state number of the Current-Word is a state or property of the Current-Owner, and if the value or value range of the Current-Word is allowed for the Current-Owner. The value or value range of the Current-Word is allowed if the word sense number of the Current-Owner contains a value or value range which is included or overlaps the Current-Word's value range for a common state number. Another condition upon the possible modification by A-Sense[Cur-Sense] occurs if the Current-Word is modified by one or more adverbials. If the Current-Word is modified by one or more adverbials,  invokes Selector  to evaluate the adverbials modifying A-Sense[Cur-Sense].  determines the state value of the Current-Word, or  indicates that the adjective word sense number can not be modified by the adverbials. This process at  is described below in the Adjective State Representation Processing section. If a state value of the Current-Word is returned from , that state value is used determine if the value or value range of the Current-Word is allowed for the Current-Owner. If the Current-Word can not be modified by the adverbials, the state value of the Current-Word is not allowed. If the class numbers match and a possible state value of A-Sense[Cur-Sense] is allowed for the type number of the word sense number or at the specificity number or at the experience number of the Current-Owner in Memory , T-Find is set to MATCH. Otherwise, if the class numbers match and a possible value of A-Sense[Cur-Sense] is allowed for a super-type of the word sense number of the Current-Owner in Memory , T-Find is set to SUPER. Otherwise, if the class numbers match and a possible value of A-Sense[Cur-Sense] is allowed for a subtype of the word sense number of the Current-Owner in Memory , T-Find is set to SUB. Otherwise, if the class numbers do not match or a possible value of A-Sense[Cur-Sense] is not allowed at any related word sense number of the Current-Owner in Memory , T-Find is set to NULL.","After  searches for the nearest word sense number of the Current-Owner containing A-Sense[Cur-Sense],  is next.  is true if a possible value was found for T-Find. All values except NULL are possible values of T-Find. If  is true,  is next and sets SMV[Current-Word WS#, Current-Modifiee's position, Current-Modifiee WS#] to true. After ,  is next, and is true if the Current-Word implies a conflicting value, i.e., two values which can not occur at the same time. A conflicting value is implied if a state or property value of the Current-Owner is set to more than one value by consecutive adjectives of the modifiee in the same phrase except for certain states which are allowed to have multiple simultaneous values as described above, or a conflicting value is implied if a stated property value differs from a stored property value of the modified noun, or a conflicting value is implied if a state or property is set to a value which violates a requirement in REQ. A requirement of REQ is violated if the logical value of REQ is set to zero. REQ is typically a Boolean expression of terms which are ORed. In the processing of a noun head, terms will be set to zero because the interpretation sets values which set a component of the term to a logical zero. REQ is violated when the remaining non-zero term is set to logical zero. A state value change from a stored value in  or  is detected later and evaluated in terms of experience and stored knowledge at Purpose Identifier .","If  is false, another type of conflicting modifier is checked for at .  is true if the Current-Word implies an alternate type. An alternate type of the Current-Owner is a super-type, match or subtype of the Current-Owner's type number before the current type number was set by a modifier in the same phrase. An alternate type is considered because the modifier which set the type may prove to be a separate modifier. If  or  is true,  increments RRAC by 1. R-RAC[1,RRAC] is set to the word causing the conflicting value or alternative type, R-RAC[2,RRAC] is set to Current-Modifiee, and R-RAC[3,RRAC] is set to Sep-Check. RRAC is a matrix row pointer to the next empty row. R-RAC stores information utilized to determine if a needed separate reference can be modified by the Current-Word. The need for a separate reference is determined if the Current-Word can not modify the Current-Owner for its current interpretation. Conflicting words are also be stored in R-RAC even if there is a single modifier because the conflicting word, the head in the case of a single modifier, may have to be reinterpreted if the current noun phrase interpretation does not allow a modifier to have an interpretation. If  is false, or after ,  is next and sets SMV[Current-Word WS#, Current-Modifiee's position, Current-Modifiee WS#] to false. After ,  is next and is true if there is another untried modifiee of the Ad-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang] in the noun phrase. If  is true, processing continues at  as above. If  is false,  increments Cur-Sense by 1 and  is processed next as above.","If  is false,  is next and is true if T-Find is equal to SUB. If  is true, the Current-Word implies a type change for the Current-Modifiee and there is a process starting at  which determines if the type change is consistent with the other selected word sense numbers of the noun phrase. However, the false case will be described first. If  is false,  is next and sets the successful results of the adjective word sense number search in SREP.  sets SREP[POS,1] to be A-Sense[Cur-Sense]. POS is the position of the Current-Word in the noun phrase being processed. SREP[POS,2] is set to Cur-Typ. SREP[POS,3] is set to the position of the Current-Modifiee in the noun phrase.  sets SREP[POS,4] to the related word sense number of the Current-Modifiee which contains the adjective state representation pointer. Finally,  sets Modal-V to false. After ,  is next, and is true if the Current-Word is a subject complement, and if the verb phrase of the clause containing the Current-Word has a modal verb or an adverb. If  is true,  sets Modal-V to true. In subsequent processing, Modal-V is used to set the modification relations of modifiers with a true Modal-V to have the modal and\/or adverb modification determined modal. If After , or if  is false,  is next and sets the Current-Word-Status to be PROCESSED.  stores the following at the Current-Word's location in the SDS: Cur-Sense, A-Sense, S, Current-Word-Status, Modal-V, R-RAC, RRAC. Finally  sets processing to continue at .","Type Number Consistency Checking","If  determines that T-Find equals SUB, the nearest word sense number of the Current-Owner containing the Current-Word is a sub-type of the Current-Modifiee, i.e., the Current-Owner, and  is true. In this case, the adjective implies a type change of the Current-Modifiee, and the validity of the type change upon the other processed modifiers and modifiees must be checked to determine if the selected word sense number of the Current-Word is consistent with the other processed related word sense numbers. The consistency is checked at . If  is true,  is next and sets BACK to . Also,  sets processing to continue at . The type consistency checking process starting at  is written for 3 levels of modifiers in addition to the Current-Word for simplicity of description. 4 levels of modifiers including the Current-Word is rarely exceeded in English. One skilled in the art of programming can write a process for any number of levels of modifiers.  initializes some parameters for the process.  sets Noun-Head-Validity to true. Noun-Head-Validity is true when the type changes implied by a modifier(s) results in a consistent modification of the head and all of its processed modifiers.  also sets 1-Mod and 3-Mod to false. 1-Mod is true when the Current-Word directly modifies the Current-Head. 3-Mod is true when the Current-Word modifies a word which modifies a word which modifies the Current-Head.  sets TEMP to be the word sense number of the Current-Modifiee. Finally,  sets the type of TEMP to the type set by the Current-Word. After ,  is next and is true if the processed modifiers of the Current-Modifiee have a modification relation with TEMP. This condition ensures that the processed modifiers will also modify the Current-Modifiee after its type has been changed. This condition is checked by looking up if the processed modifier word sense numbers of the Current-Modifiee still modify the Current-Modifiee with a type change which implies that there is not a further type change for the Current-Modifiee. If  is false,  is next and sets Noun-Head-Validity false. After ,  is next and sets processing to continue at BACK. If  is true,  is next, and is true if the Current-Head is the Current-Modifiee. If  is true,  is next.  sets TEMP-H to TEMP, and sets 1-Mod to true. After ,  is next.  is true if all of the stated state or property values or property values in  of the Current-Head's word sense number without a type change are present in TEMP-H and are not set to a different value in TEMP-H, and if TEMP-H does not violate REQ, and if the verb requirements set by any modifying subordinate clause are not violated in TEMP-H. REQ contains the verb requirements of the sentence role of a noun sentence role head in a clause as described above. If  is true, the type change of the Current-Head caused by a modifier results in a Current-Head word sense number which is consistent with the Current-Head's processed modifiers and sentence role. However,  being true does not ensure that the processed direct modifiers of the Current-Head still modify the Current-Head with a type change. This latter condition is checked below. The processing following the case when  is true is described after the case of two and three levels of modifiers is discussed. If  is false,  is next and sets Noun-Head-Validity to false. After ,  sets processing to continue at BACK. In the case of a modifying adjective, BACK is  which is false if Noun-Head-Validity is false. If  is false,  is next as described above. If  is true,  is next as above.",{"@attributes":{"id":"p-0432","num":"0454"},"b":["60152","60152","60162","60162","60164","60164","60166","60166","60166","60156","60164","60168","60168","60169","60169","60171","60169","60171","60177","60168","60158"]},{"@attributes":{"id":"p-0433","num":"0455"},"b":["60162","60162","60170","60170","60172","60172","60174","60174","60174","60174","60175","60175","60158","60175","60164","60172","60176","60176","60169","60176","60158"]},"If  is true, the type of TEMP-H has been changed by a modifier. TEMP-H represents the Current-Head, and the Current-Head and its already processed direct modifiers may require checking for compatibility with a change of type for the Current-Head. This process of compatibility checking begins at .  is true if TEMP-H is a subtype of the Current-Head. The condition of  is checked because if TEMP-H is a super-type or has no type change, no direct modifier has to be checked because the type of the Current-Head is not changed. A modifier which sets a noun phrase head to a super-type also modifies the super-type head's subtypes which includes the word sense number of the Current-Head for example because of the way the noun type hierarchy is designed as described above. If  is true, a subtype change is implied and the direct modifiers are checked for compatibility with the subtype starting at .  sets TH, an index variable to 1. After ,  is next and is true if there is a direct modifier of the Current-Head which has not been processed for a compatibility check. If  is true,  is next and sets Modifier-Check to the next, nearest, preceding first, unchecked direct modifier of the Current-Head.  is next and is true if Modifier-Check has a modification relation with TEMP-H which implies no further type change for the TEMP-H word sense number. If  is false, the Current-Modifiee has failed the compatibility check and  is next.  sets Noun-Head-Validity to false and sets processing to continue at BACK. If  is true,  is next and is true if Modifier-Check has a new relation with TEMP-H. If  is false,  is next as described above. If  is true,  is next.  sets T-Hold[1,TH] to the position of Modifier-Check in the noun phrase, and sets T-Hold[2,TH] to the location at TEMP-H of the new modification relation between Modifier-Check and TEMP-H.  stores the information utilized to update new relations between modifiers and the Current-Head when all direct modifiers have been successfully checked. After ,  is next as described above. If all direct modifiers of the Current-Head have been checked at ,  is false and  is next.  is true if TH is greater than one which implies T-Hold contains at least one new relation. If  is true,  is next.  stores the new relations of direct modifiers which are stored at T-Hold at each such direct modifier's SREP[POS,4]. POS is a position of such a direct modifier in the noun phrase of the Current-Head, and is stored at T-Hold[1,TH]. The new relation is stored at T-Hold[2,TH]. T-Hold contains positions and relations in columns 1 to TH-1. After ,  is next and sets the word sense number of the Current-Head at SREP[1,1] to be TEMP-H.","After  or if  is false,  is next and is true if 1-Mod is false and the Current-Word sets a subtype of the Current-Modifiee. If  is true,  sets the word sense number of the Current-Modifiee's SREP[POS,1] implied by the modification of the Current-Word where POS is the position of the Current-Modifiee in the noun phrase. Also,  sets the locations of new modification relations of processed modifiers of the Current-Modifiee at the modifiers' SREP[P,4] where P is the position of a processed modifier of the Current-Modifiee which has a new modification relation because of the type change of the Current-Modifiee. The new modification relations were determined and stored in the process to determine if  is true. The modification relations are processed in the same process as described for direct modifiers of the Current-Head. After , or if  is false,  is next.  is true if 3-Mod is true and if TEMP-SH is a subtype of the modifiee of the Current-Modifiee. If  is true,  sets SREP[POS,1] of the modifiee of the Current-Modifiee to the word sense number, TEMP-SH, where POS is the position of the modifiee of the Current-Modifiee in the noun phrase. Also,  sets the locations of new modification relations of processed modifiers of the modifiee of the Current-Modifiee at the modifiers' SREP[P,4] where P is the position of a processed modifier of the modifiee of the Current-Modifiee which has a new modification relation because of the type change of the modifiee of the Current-Modifiee. The new modification relations were determined and stored in the process to determine if  is true. The modification relations are processed in the same process as described for direct modifiers of the Current-Head. After , or if  is false,  sets processing to continue at BACK.","Noun, Verbal, and Morphological Word@Modifiers","Modifier Indexed Modifier Processing","After an adjective has been successfully processed, processing continues at  which is true if there is an unprocessed premodifier as described above. Then  sets the Current-Word to be the next unprocessed premodifier as described above. After ,  is next and is true if the Current-Word is an adjective. The true case was described above. If  is false, the Current-Word is a noun, verbal or morphological word@, and  is next.  sets Mod-Check to false, and sets processing to continue at . Mod-Check is false when the Current-Word is a premodifier, and Mod-Check is used in subsequent processing described below. A verbal or morphological word@ is processed as a direct modifier to determine if there is a specific stored relation in the modifiee's external relation structure starting at . For example, the number 1 subject source invokes this process at  to make this determination as described above.  sets the vector R-List to contain the MAX word sense numbers of the Current-Word in the order: word sense numbers of the most recent references first order from , word sense numbers which are not in . R-No, an index variable for R-List, is set to 1. Cur-Typ, an index into the possible modifiees, is also set to 1. However, if Cur-Typ for the Current-Head has already been set with an exclusive symbol, Cur-Typ is unchanged. Finally, RRAC, an row number for R-RAC is row variable of R-RAC, is set to 0. R-RAC is a matrix to store possible noun and verbal modifiers which could imply a separate reference. The word sense number for a verbal is the verb's word sense number plus an inflection. The word sense number for a morphological word@ is the base word's word sense number plus the affix code. After ,  is next and sets the Current-Modifiee to be the next, possible, untried modifiee in N-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang]. N-Mod contains the types of modifiees of a noun, verbal, or morphological word@. A particular noun phrase can have more than one instance of a type. The type is indexed by Cur-Typ. The multiple instances are not explicitly described for N-Mod, but they are handled in the same way that was described for Ad-Mod, the modifiees of an adjective described above. Any particular noun phrase may have only certain types of modifiees.  selects the next, untried instance of a possible type of modifiee of the current noun phrase containing the Current-Head.  also sets Sep-Check to the number of noun, verbal, and morphological word@ modifiers of the Current-Modifiee which precede the Current-Word. If Sep-Check is greater than 0, the case of multiple noun, verbal, and morphological word@ references is checked for implying a separate modifiee for noun, verbal, and morphological word@ modifiees which can not modify the same reference of a modifiee. For example, \u201cthe Chicago and New York teams\u201d implies a separate modifiee as in: \u201cthe Chicago team and the New York team\u201d.","After ,  is next.  sets TRIED to the value at the Current-Word's TMV[Current-Word WS#, Current-Modifiee position in the noun phrase, Current-Modifiee WS#]. SUCCEED is set to the value at the Current-Word's SMV[Current-Word WS#, Current-Modifiee position in the noun phrase, Current-Modifiee WS#]. Current-Word WS# is the Current-Word's R-List[R-No]. After ,  is next and is true if TRIED equals true. If  is false,  sets the Current-Word's TMV[Current-Word WS#, Current-Modifiee position in the noun phrase, Current-Modifiee WS#] to be true. If  is true,  is next and is true if SUCCEED equals true. If  is false,  checks if there is another possible modifiee as described below. If  is true, or after ,  is next.  searches for a modifier indexed relation of R-List[R-No] of the Current-Word in all possible partitions of the Current-Modifiee's external relation structure for a super-type, match, or subtype of the Current-Modifiee with a non-conflicting value for modifiers setting values. A conflicting value occurs when the Current-Word sets a property value which differs from the value stored in  or , or the Current-Word sets a state or property value which differs from a value set by a processed modifier in the current noun phrase, or violates REQ. After ,  is next and is true if  found a relation. If  is false.  is next and sets the Current-Word's SMV[Current-Word WS#, Current-Modifiee position in the noun phrase, Current-Modifiee WS#] to false. After ,  is next, and is true if there is a relation found at  with an alternate type change and\/or with a conflicting value.  is true if there is possibly an implied separate reference as described above or a possible word which needs reinterpretation. If  is true,  increments RRAC by 1; R-RAC[RRAC,1] is set to the conflicting word, i.e., the word implying an alternative type or a conflicting value; R-RAC[RRAC,2] is set to the Current-Modifiee; and R-RAC[RRAC,3] is set to Sep-Check. If  is false, or after ,  is next and is true if there is another possible modifiee for the Current-Word. If  is true,  is next as above. If  is false,  is next, and is true if R-No is less than MAX. If  is true,  increments R-No by 1; and  is next and is processed as described above.  sets the next word sense number of the Current-Word to be searched for at . If  is false,  is next, and is true if there is another Cur-Typ for the current natural language. If  is true,  sets R-No to 1, and  increments Cur-Typ by. If  is false,  determines if there are alternate interpretations and is described below.","If  is true, a possible modification relation has been found for the Current-Word. If  is true,  sets the Current-Word's SMV[Current-Word WS#, Current-Modifiee position in the noun phrase, Current-Modifiee WS#] to true. After ,  is true if the modification by the R-List[R-No] word sense number implies a subtype of the Current-Modifiee. If  is true,  sets BACK to , and sets processing to continue at  to process the modifiee type change as described above. When the type change processing has been completed,  is next and is true if Noun-Head-Validity is true which implies that the type change is compatible. If  is false, processing continues at  as described above. If  is true, or if  is false,  sets BACK to  and sets processing to continue at .  is true if the modifier's relation match implies a type for the modifier. The modification relation of the modifier is searched for only with a word sense identification number. The modification relation match at the Current-Modifiee's external relation structure may in addition contain modifier word sense numbers with type numbers, specification numbers, and\/or experience numbers. The word sense numbers in the external relation structure are grouped by word sense number. Within a word sense number group, the word sense numbers are ordered by the highest super-type first. If  is true,  sets R-List[R-No] to the first word sense number in the Current-Modifiee's external relation structure group with has a matching word sense identification number with R-List[R-No]. After , or if  is false, processing continues at  which stores the information related to the modification and continues processing of the Current-Head as described above.","Separate Modifier Processing",{"@attributes":{"id":"p-0441","num":"0463"},"b":["60417","60417","60434","60434","60446","60446","60436","60885","60885","60109","60885","60885","60885","60886","60886","60887","60887","60889","60889","60889","60889","60889","60890","60890","60891","60891","60890","60886","60889","60892"]},"After ,  is next. If  is false,  is next and is true if CONF>0. If  is true,  orders the rows in CONF-M by the column 1 value of each row. The column 1 value contains the conflicting modifier. The rows in CONF-M are ordered by the nearness of a row's conflicting value in position relative to the Current-Word.  also stores CONF-M in the Current-Word's SDS position. CONF-M is used to select a modifier for reinterpretation if the Current-Word does not have a modifiee with the current interpretation of the noun as is described below. After , or if  is false,  is next, and is true if F-R is greater than 0. If  is false,  sets processing to continue at RAC-Back.  is performed if a separate modifier has not been stored in R-RAC. If  is true,  creates a separate modifier.  creates a copy of the noun phrase containing the Current-Word minus R-RAC[F-R,1], the modifier causing the conflict; the copy is stored in the SDS; the head of the noun phrase is marked MOD-INDUCED in its SDS position; the Current-Word and its modifiers are removed of the current noun phrase; the copy is joined to the sentence with an \u201cand\u201d conjunction following the original; the head of the copied phrase is placed in N-List after the original head. After ,  is next and is true if the Current-Word is a prepositional complement head. If  is true, processing continues at  which selects the next noun word sense number selection process as described below. If  is false, processing continues at  as described above.","Relation Indexed Modifier Processing","If  is false, or if there was not a separate modifier at ,  is next and is true if the Current-Word is a verbal or morphological word@. If  is true,  sets ellipsis processing to begin at the RESTART address stored in the Current-Word's SDS position. In this case alternate sources for the subject and\/or object are selected with ellipsis processing as described above. If  is false, the Current-Word does not have a modification relation stored in the modifier indexed relations of the possible modifiees. However, it is possible that the Current-Word is in an A-relation. All function A-relations without A-relation sentence roles, all S-relations and all T-relations are contained in the modifier indexed relations because such relations are directly indicated by a single word modifier. A-Relations are indicated by a common relation characteristic. If  is false, an A-relation is searched for in the relation indexed partition of the external relation structures of possible modifiees. If  is false,  is next and sets Cur-Rel-Set to contain all the A-relation subpartitions except function A-relations without A-Relation sentence roles of the external relation structure. The Cur-Rel-Set contains the type of relations which are to be searched. Cur-Rel-Set in general contains other types of relations because Cur-Rel-Set is utilized for other types of modifiers such as prepositional phrases. The relations in Cur-Rel-Set are listed in the order: A-, C-, S- and T-relations. This ordering is set so that the most specific stored relation can be assigned to a modification relation. -Back is set to ; RRAC is set to zero; Cur-Typ is set to 1; and R-No is incremented by 1. However, if Cur-Typ has already been set with an exclusive symbol, Cur-Typ is unchanged. After ,  is next, and is true if Cur-Rel-Set is empty. If  is true, relation processing has failed, and  is next.  is described below. If  is false,  is next, and is true if the Current-Word has PROCESSED in its SDS position. If  is true, the Current-Word is being reprocessed for an alternate word sense number because another modifier failed to have a modifiee as is described below. If  is false,  sets R-No to 1 because the Current-Word has not been processed before for relation indexed modifiers. After , or if  is true,  sets the Current-Modifiee to the next possible modifiee in N-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang]; Sep-Check is set to the number of noun, verbal and, morphological word@ modifiers of the Current-Modifiee which precede the Current-Word; and processing is set to continue at  as described below. The process at  searches for a relation in Cur-Rel-Set between the Current-Word and the Current-Modifiee. -Back is a return address after the process at  has failed or succeeded. -Back was set to  at . The process starting at  is described next.",{"@attributes":{"id":"p-0445","num":"0467"},"b":["60450","60450","60450","60452","60452","60452","60454","60454","60456","60456","60454","60458","60458","60478","60478","60478","60479","60452","60479","60450","60478","60480","60480","60","60480"]},"AMF-Relation Processing","If  is true, or after ,  is next and is true if Cur-Rel is an A-relation. If  is true,  is next.  sets Cur-Modifier-Rel-Char to the next general relation characteristic of the Cur-Rel relation partition in the external relation structure of the Current-Word. Next,  searches for a match of Cur-Modifier-Rel-Char in the Cur-Rel relation partition in the external relation structure of the Modifiee-WS. If a match is found for a relation characteristic of function A-Relation, Modifiee-WS and the Current-Word are checked for meeting the requirements of their sentence roles by Selector . For a function A-relation,  calls  to check if the Current-Word and Modifiee-WS can meet their sentence role requirements of the clause of the function A-relation. If the Current-Word and Modifiee-WS meets the requirements, a match is found, and Cur-Modifier-Rel-Char is set to the relation characteristic of the associated function A-Relation. Otherwise, another relation characteristic is considered. The sentence role requirements are checked by Selector  in Memory  at the clause address which is contained in the function A-relation's relation characteristic. This Selector  processing is described below. A-relations which are not function A-Relations, AMF-relations, are matched if their relation characteristics match.  checks for general relation characteristic matches. After  completes the search,  is next and is true if a match was found. If  is true,  sets SRV[Current-Word WS#, SDS position of the Current-Modifiee, Current-Modifiee WS#, Cur-Rel#] to true.  is next and is true if Cur-Rel is an AMF-relation. If  is false processing is completed next at .  sets Current-Relation-Found to true, and sets processing to continue at -Back.","If  is true,  is next and searches for a more specific relation match.  sets SP to 0. SP is an index for AMAT array which contains relation matches between the Current-Word and Modifiee-WS. Finally,  sets Check-Try to false. Check-Try is a status variable of this specific relation match process. After ,  is next and is true if the Current-Modifiee's Cur-Rel relation partition has another untried typed relation characteristic with the word sense identification number match of the relation characteristic found at . A typed relation characteristic has a non-zero type number component of the relation characteristic, a word sense number as described above. If  is true,  is next, and sets Cur-Modifiee-Rel-Char to the next, untried, typed relation characteristic with the same word sense identification number as the relation characteristic found at . Next,  determines if the type or a word sense number entry associated with the Cur-Modifiee-Rel-Char position in the external relation structure of the Current-Modifiee is a related type of Modifiee-WS. A related type of Modifiee-WS is a super-type, the same type, or a subtype of Modifiee-WS. Next,  is true if the type or word sense number entry of the Cur-Modifiee-Rel-Char position is the same type as Modifiee-WS. If  is true,  increments SP by 1; AMAT[SP,1] is set to the Cur-Modifiee-Rel-Char; and AMAT[SP,2] is set to 0. If  is false,  is next, and is true if the type or word sense number entry of the Cur-Modifiee-Rel-Char position is a super-type of Modifiee-WS. If  is true,  increments SP by 1; AMAT[SP,1] is set to the Cur-Modifiee-Rel-Char; and AMAT[SP,2] is set to 1.","If  is false,  is next, and is true if the type or word sense number entry of the Cur-Modifiee-Rel-Char position is a subtype of Modifiee-WS. If  is true,  increments SP by 1; AMAT[SP,1] is set to the Cur-Modifiee-Rel-Char; and AMAT[SP,2] is set to 2. After , , or ,  is next as described above. If  is false, Cur-Modifiee-Rel-Char's type or a word sense number is not a related type. If  is false,  is next, and is true if Cur-Modifiee-Rel-Char's type or a word sense number is an alternative type as defined at . If  is true, the Current-Word may be a separate modifier of a new copy of the Current-Modifiee as described above. If  is true,  increments RRAC by 1; R-RAC[RRAC,1] is set to the modifier which implies the alternative type; R-RAC[RRAC,2] is set to the Current-Modifiee; and R-RAC[RRAC,3] is set to Sep-Check. After ,  is next, and is true if -Back equals , which implies the Current-Word is a prepositional complement. If  is true,  sets R-RAC[RRAC,3] to Prep-Check. After , or if  is false, or if  is false,  is next as above.","If there are no more untried typed relation characteristics at ,  is false, and  is next.  is true if SP is greater than zero, i.e., at least one entry was stored in AMAT. If  is true,  is next.  orders the rows in AMAT with respect to the row's column 2 value which implies the nearness of the relation characteristic's associated type or word sense number entry to the type of Modifiee-WS. Column 2 contains a 0 for type match, 1 for a super-type of Modifiee-WS, 2 for a subtype of Modifiee-WS. The rows in AMAT are ordered with the row's with the lowest value of column 2 first. The purpose for ordering the relation characteristics is to select the nearest type first for a possible match of the relation characteristic at the modifier's external relation structure. Failing to select a matching type relation characteristic, a super-type relation characteristic is tried for matching. Failing to find a super-type relation characteristic, a subtype relation characteristic is tried. A matching or super-type relation characteristic implies no type change for the modifiee, but a subtype relation characteristic does imply a type change. The ordering of relation characteristics in A-Relation partitions of the external relation structure is in the order of most general type to most specific type. This ordering policy is equivalent to selecting the AMF relation which is the most specific for a super-type relation characteristic and least specific for a subtype. In terms of the relation of a modifier to a modifiee, this policy is equivalent to finding the most specific relation which does not change the modifiee, or failing a no-change relation match, the policy finds the relation which changes the modifiee the least. Placing priority on a non-changing relation has the result of picking the most specific relation, and hence the nearest in experience, and has the result of not reading too much into the modification relation, i.e., not assuming a type change for the modifiee when a type change may not apply. Subsequent conversation will determine if a type change in the modifier is intended.","After ,  is next and is true if there is an untried row in AMAT. If  is true,  sets Cur-Modifiee-Rel-Char to the untried relation characteristic in AMAT. Next  searches for a match of Cur-Modifiee-Rel-Char at the Current-Word's Cur-Rel relation partition in its external relation structure. After ,  is next, and is true if a match was found by . If  is false,  is next as above. If  is true,  is next, and is true if Mod-Check is true. Mod-Check is true for prepositional modification. If  is true,  is next.  sets return values for a modifier checking process at .  sets Mod-Pass to ; Mod-Fail is set to ; and processing continues at .  begins a process to check if the modifier has an implied type change from the Cur-Modifiee-Rel-Char relation. This process is performed for prepositional modification of concrete nouns and adjectives because the head of the modifier noun phrase, a prepositional complement, has already been selected before this process.  is true if the modification relation implies a type change for the Current-Word to a subtype of the Current-Word's current type. If  is true,  is next.  sets T-Modifier-WS to the Current-Word's word sense number with the type number change implied by the modification relation.  is next, and is true if T-Modifier-WS can be modified by all of the Current-Word's stated, processed modifiers. If  is true,  sets the word sense number of the Current-Word to T-Modifier-WS; all new relations of modifiers of the Current-Word caused by the type change are stored at such modifiers' SREP[POS,4]. If  is false,  sets processing to continue at Mod-Fail, which in this case is . After , or if  is false,  sets processing to continue at Mod-Pass, .","After , or if  is false,  is next. When  is reached, a relation characteristic match has been found with a suitable type change for a prepositional complement modifier. A type change for a noun modifier is processed later at  as described above.  is true if the relation of Cur-Modifiee-Rel-Char implies a type change to a subtype of Modifiee-WS. If  is true, BACK is set to ; T-CH is set to the Current-Head; the Current-Head is set to the Current-Modifiee; processing is set to . The Current-Head is stored in a temporary variable, and is set to the Current-Modifiee in order to have a suitable variable assignment for proper processing at .  checks for a type change and sets the implications of the type change if the type change is acceptable as described above. When the process at  is completed,  is next, and sets the Current-Head to T-CH. Next,  is true if Noun-Head-Validity is true. If  is false  is next as above because the relation is not allowed. If  is true, or if  is false, the relation of Cur-Modifiee-Rel-Char is valid and  is next.  sets Current-Relation-Found to true; processing is set to continue at -Back.","If  is false, no more specific relation match has been found in the external relation structure of Modifiee-WS. If specific relation matches were found, but none of them had a match at the modifier external relation structure or had an incompatible type change implication,  is false. If  is false, or if  is false,  is next and sets Cur-Modifiee-Rel-Char to Cur-Modifier-Rel-Char, the general relation characteristic.  is next, and is true if Check-Try is false.  is true the first time it is processed. If  is processed a second time, the general relation characteristic, Cur-Modifiee-Rel-Char implied an unacceptable type change implication for the modifier. If  is true, Check-Try is set to true, and processing is set to continue at  as above. In this case the process starting  determines if the general relation characteristic match is compatible with respect to type changes as described above. The process after  either successfully completes by eventually reaching the processing of  as described above, or the process after  fails by reaching the processing of  as described above. If  is reached,  is processed a second time and is false. If  is false, processing continues at .  is described below.","The search for a current relation has been described for the finding of an A-relation starting at  when  is true. If a match of Cur-Modifier-Rel-Char was not found in the external relation structure of Modifiee-WS,  is false. If  is false,  is next and is true if the Cur-Rel relation partition contains function A-relations. If  is false,  is next and is true if there is another untried general relation characteristic in the Cur-Rel relation partition of the Current-Word. If  is true,  selects the next relation characteristic as described above. If  is false,  sets SRV[Current-Word WS#, SDS position of the Current-Modifiee, Current-Modifiee WS#, Cur-Rel] to false.  is next, and is true if there is another relation in Cur-Rel-Set. If  is true,  is next, and sets Cur-Rel to the next untried relation in Cur-Rel-Set;  is next as described above. If  is false,  is next, and sets Current-Relation-Found to false, and sets processing to continue at -Back;  is processed if the relation search process has failed. After , processing continues at the process calling the  relation search process.","Function A-Relation Processing","If Cur-Rel is a function A-relation at ,  is true, and processing continues at .  is true if the function A-Relation associated with Cur-Modifier-Rel-Char has an A-relation for one or more of its sentence roles. If  is false,  sets processing to continue at  as above. If  is true,  is next.  searches sentence role A-relations in the function relation for containing the noun word sense number of the modifiee, Modifiee-WS. If the word sense number of the Current-Word is not contained explicitly in the A-Relations of the clause, an A-Relation containing the Current-Word is designated in the A-Relation descriptor. Modifiee-WS is searched for being in the one or more A-Relations which do not contain the Current-Word by checking Modifiee-WS's external relation structure for containing the relation characteristic of these one or more A-relations. A match with Modifiee-WS occurs if the relation characteristic is found in Modifiee-WS's external relation structure, and Modifiee-WS and the Current-Word meet the sentence role requirements of the clause at the function A-Relation's address in its relation characteristic. After ,  is next, and is true if a match was found at . If  is true, processing continues at  which successfully completes the search as described above. If  is false,  sets processing to continue at  as above.","C-, S-, and T-Relation Processing","If the Cur-Rel relation partition is not an A-Relation at ,  is false. If  is false, processing continues at .  is true if Not-A-Init is true. Not-A-Init is true for the first invocation of this process for finding C-, S-, and T-relations. If  is true,  sets RMAT to 0 and sets Not-A-Init to false. RMAT is a row index for R-MAT which is a matrix for storing found relations. After , or if  is false,  is next and is true if the Cur-Rel relation is a T-Relation. If  is true,  sets T-R to true to indicate that Cur-Rel is a T-Relation. If  is false,  sets T-R to false. After  or ,  is next, and is true if the Cur-Rel relation descriptor's designation matches the designation of an entry in Modifiee-WS's external relation structure, and the matched entry has a source which matches the Current-Word's identification number component of its word sense number. The designation and source of C-, S-, T-relations is described in the introduction to the Concrete Noun Word Sense Number Selection. If  is true,  is next and is true if T-R is false, or if all specified states of the Cur-Rel relation are contained in the matched entry's T-Relation. If  is true,  sets SRV[Current-Word WS#, SDS position of the Current-Modifiee, Current-Modifiee WS#, Cur-Rel#] to true. If  or  is false,  sets SRV[Current-Word WS#, SDS position of the Current-Modifiee, Current-Modifiee WS#, Cur-Rel#] to false. After ,  is next, and is true if Cur-Rel contains an untried relation. If  is false, all relations in Cur-Rel-Set have been processed and final processing for the relation search is set to continue at  as described below. If  is true, processing is set to continue at . As described above,  begins processing of the next untried relation entry in the Cur-Rel-Set.","After , the search for the relation continues to determine the best type match between the Current-Word and the Current-Modifiee. Next,  is true if a matched entry from  has a location which is a related type of Modifiee-WS. The location has a related type of Modifiee-WS if the location contains a type number or word sense number location which: is a super-type of Modifiee-WS, is Modifiee-WS, or is a subtype of Modifiee-WS. If more than one entry has a related type, the priority for selecting an entry is: the entry with a match is selected first, with a super-type is the next priority, and with a subtype is the last priority. If  is true,  is next, and is true if a matched entry's source is a pointer to an S-Relation at another word sense number. The word sense number is the owner of the pointed to S-Relation.  is true for a chain of modifying prepositional phrases, e.g., \u201cat the store in the country\u201d. If  is true,  checks each owner of an S-relation in the chain, or checks the source at the end of the chain, for being a related type of the Current-Word.  checks along the chain until a match is found or the chain ends. The chain ends at a word sense number source. After , or if  is false,  is next, and is true if an entry from  has a source which is a related type of the associated source word and does not imply a conflicting value or alternative type where conflicting value is defined as for , and where alternative type is defined as for . The Current-Word or Current-Modifiee is the associated source word depending upon which one is the source. If more than one entry has a source with a related type, the entries are considered in the order of the priority of . If there are more one entry in the highest priority class of , an entry among such entries is selected according to the type of the source in the entry compared to the type of the Current-Word in the priority order of: match of the Current-Word type first, super-type of the Current-Word next, and subtype of the Current-Word last. If  is true, a potential relation match, and this case is considered after the following paragraph.","If  is false, or if  is false,  is next and is true if there is a conflicting value or an alternate type. If , the Current-Word or the Current-Modifiee could be a separate modifier implying an additional noun phrase as described above. If  is false,  is next and selects alternate processing as above. If  is true,  is next.  is true if -Back is equal to .  is true when the Current-Word is a prepositional complement. If  is true,  sets R-RAC[RRAC+1,3] to Prep-Check. If Prep-Check is greater than 0, the Current-Word could be a separate prepositional modifier. If  is false,  sets R-RAC[RRAC+1,3] to Sep-Check. If  is false, and if Sep-Check is greater than 0, the Current-Word could be a separate noun modifier. After  or ,  increments RRAC by 1; R-RAC[RRAC,1] is set to the modifier which the Current-Word conflicts with. The conflicting modifier causes the conflicting value and\/or implies the alternate type; and R-RAC[RRAC,2] is set to the Current-Modifiee by . After ,  is next.","If  is true, a possible relation match has been found. Next, the closeness of the match to the stated words is calculated and stored in CLOSE. If CLOSE is 0, the match is exact. The larger the value of CLOSE, the greater the distance from an exact match. If  is true,  is next and is true if the type implied by the Current-Word modifying Modifiee-WS implies a subtype for the current type of Modifiee-WS. If  is true,  sets CLOSE to 6. If  is false,  is next, and is true if the Current-Word implies a super-type for Modifiee-WS. If  is true,  sets CLOSE to 3. If  is false,  sets Close to 0. After , , or ,  is next, and is true if the type of the source in the entry selected at  is a super-type of the Current-Word. If  is true,  increments CLOSE by 1. If  is false,  is next, and is true if the type of the source in the entry selected at  is a subtype of the Current-Word. If  is true,  increments CLOSE by 2. If  is false, or after  or ,  is next and is true if CLOSE is greater than 0. If  is false, an exact match has been found and processing is set to continue  which completes processing as described above. If  is true,  stores the matched relation for later processing. The later processing selects the best matched relation.  increments RMAT by 1; R-MAT[RMAT,1] is set to contain the location of the relation selected at ; R-MAT[RMAT,2] is set to contain the value of CLOSE. After , processing continues of .","If Cur-Rel-Set does not contain an untried relation at , all relations have been processed and  is false. If  is false,  is next and is true if RMAT is greater than 0.  is true if at least one relation match has been found. If  is false, processing is set to continue at  which sets Current-Relation-Found to false and returns to the caller as described above. If  is true,  orders the rows in R-Mat by each row's CLOSE value in column 2. The order priority is lowest value of CLOSE first. After ,  is next and is true if there is another untried row in the ordered R-MAT matrix. If  is false, a proper relation has not been found and processing is set to continue at . If  is true,  sets FR to the relation in the next untried row in R-MAT.  is next and is true if the FR relation implies a subtype for Modifiee-WS. If  is true,  sets BACK to ; T-CH is set to the Current-Head; the Current-Head is set to the Current-Modifiee; and  sets processing to continue at  which determines if the Current-Modifiee can be changed to the subtype implied by the Current-Word as described above. After the process starting at  is completed, , BACK, is next.  sets the Current-Head to T-CH. After ,  is next, and is true if the Noun-Head-Validity is true. If  is false, the subtype change is not allowed for the current interpretation and processing continues for the next relation at  as described above. If  is true, or  is false,  is next and is true if Mod-Check is true. Mod-Check is true for prepositional phrase modifiers because the Current-Word, the prepositional complement, could have modifiers whose relation may be changed. If Mod-Check is false, If  is true,  sets up processing for checking if the Current-Word has no type change implied or has an allowable type change at  as described above.  sets Mod-Pass to ; Mod-Fail is set to ; and processing is set to continue at . If type change is allowable, processing continues at  as above. If the type is not allowable,  is next as above. If  is false, processing is completed for success at  as described above.","The previous paragraph completes the description of the process starting at  for selecting a relation between a modifiee and a modifier. The  process was initiated at  with -Back set to . Processing is returned to -Back from  or from .  first sets Current-Relation-Found to false, and  first sets Current-Relation-Found to true. After the  process is complete,  is next and is true if Current-Relation-Found is true. If  is true, a relation has been found,  is next.  sets BACK to , and sets processing to . As described above,  starts a process to adjust the word sense type number of the Current-Word and to store the SREP information for the Current-Word. Then processing continues at  which begins the processing of the next premodifier. If  is false,  is next and is true if there is another possible modifiee in N-Mod[Current-Word, Cur-Typ, Cur-Nat-Lang]. If  is true,  selects another modifiee for processing at  as described above. If  is false,  increments R-No by 1. After ,  is next, and is true if R-No is less than MAX, i.e., the Current-Word has an untried word sense number. If  is true,  is next as above. If  is false,  is next, and is true if there is another untried Cur-Typ. If  is true,  increments Cur-Typ by 1, and sets R-No to 1. After ,  is next. If  is false, a compatible word sense number for the Current-Word has not been selected, and  is next.  is true if RRAC>0. If  is true,  sets RAC-Back to  and sets processing to continue at  to create a separate modifier if possible. If  is false, processing is set to continue at .  is described below.  is an entry point to  which determines if the Current-Word has an alternate replacement.  is described below.","Next Process Selection after Successful Modifier Processing","After processing returns to , BACK, from  after successfully finding a compatible word sense number for a premodifier,  is false if there are no more unprocessed premodifiers. If  is false and Adj-Check is false, processing continues at .  begins a process to select the next process to be performed for concrete noun word sense number selection.  is true if the next unprocessed word following the Current-Head is a postmodifying adjective. If  is true,  sets the Current-Word to be the postmodifying adjective; Cur-Typ is set to a modifiee value combined with an exclusive symbol for a postmodifying adjective; processing is set to continue at . Setting Cur-Typ to a specific value combined with an exclusive symbol causes only that Ad-Mod modifiee type to be considered.  sets the variables for processing the postmodifying adjective as a premodifying adjective. If  is false, the noun phrase which contains the Current-Head has successfully been processed for word sense number selection. If  is false,  is next.  marks SREP for future access and stores the four elements of the SREP matrix variable for each modifier (excluding prepositional phrases and clauses) and the Current-Head at the modifiers' or head's SDS position. After ,  is next and is true if the next unprocessed postmodifier of the Current-Head is a prepositional phrase. If  is true,  is next and is true if the prepositional phrase has an unprocessed preposition. If  is true,  sets Cur-Typ to 1 and sets prepositional processing to start at . However, if Cur-Typ for the prepositional modifier has already been set with an exclusive symbol, Cur-Typ is unchanged. Prepositional processing is described in a following section. If  is false, the prepositional complement is set for word sense number selection at .  sets the Current-Head to be the head of the prepositional phrase complement, and sets processing to continue at  as described above.","If  is false,  is next and is true if the current clause has a processed subject with a \u201cto be\u201d verb, an unprocessed adjective complement which is modified by a prepositional phrase. A subject is processed if its word sense number has been selected. The adjective modified by the prepositional phrase is unprocessed if there is at least one processed subject which has not been processed for being modified by this adjective modified by a prepositional phrase. The first combination of processed subject and unprocessed adjective modified by a prepositional phrase is considered in  and  which are described next. These definitions of processed and unprocessed are utilized for coordinated subjects and coordinated adjectives modified by prepositional phrases. If  is true,  is next and is true if the prepositional complement is an unprocessed clause equivalent. If  is true, the clause equivalent needs to be processed. If  is true,  is next and sets processing to continue at Step  which starts processing of the clause equivalent. If  is false,  is next and is true if the adjective is modified by an unprocessed prepositional complement. If  is true, the prepositional phrase complement begins processing at  as described above. If  is false, processing is set to continue at .  is the interface to Adj-Prep, the processing of a prepositional phrase modifying an adjective.  is described below in the processing of a prepositional phrase modifying an adjective section.","If  is false,  is next and is true if the clause has a processed subject, a \u201cto be\u201d verb, and an unprocessed subject complement. A subject is processed if its word sense number has been selected. A subject complement is unprocessed if there is at least one processed subject which has not been processed for being modified by the subject complement. The first combination of processed subject and unprocessed subject complement is utilized for  through . If  is true,  is next and is true if the subject complement is an unprocessed adjective. If  is true,  sets the Current-Word to be the adjective, sets Cur-Typ to the subject with an exclusive symbol, and sets adjective processing to start at . If  is false,  is next and is true if the subject complement is an unprocessed prepositional phrase. If  is true,  is next and is true if the preposition is unprocessed. If  is true,  sets the Current-Head to be the prepositional complement, sets Cur-Typ to the subject with an exclusive symbol, and sets preposition processing to begin at  which is described below. If  is false,  sets up processing of the complement as above. If  is false,  is next and is true if the subject complement is a noun that has been processed for its representational referent if the noun is a clausal abstract noun, or is a pronoun with a noun referent. If  is true, final processing of the subject complement is set to continue at . The process at  is described below. If  is false, or if  is false,  is next, and is true if the Current-Head has Abs-Check in its SDS position.  is true if the Current-Head is a clausal abstract noun. If  is true, processing of the clausal abstract noun is set to continue at  which is described in the Clausal Abstract Noun Representation Referent Word Sense Number Selection section below. If  is false,  is next and is true if N-List has an unprocessed noun. Here, unprocessed means that an R-List and\/or a word sense number has not been selected for the unprocessed noun. If  is true, processing is set to continue at  which processes the next noun in N-List as described above. If  is false, all concrete nouns have processed and final processing continues at . The processing at  is described below. First, the processing of a noun subject and a noun subject complement is described next.","Final Processing of a Noun Subject and Subject Complement","The final processing of a subject and subject complement which are both nouns is started at  when  is true.  is true if the subject complement noun phrase has been processed for selecting the word sense number of all words in the noun phrase. If  is false,  sets Current-Head to be the next unprocessed subject complement, and sets processing to continue at  for noun phrase modifier processing as described above. If  is true,  is next.  sets Best-Def to the best defined noun phrase among the subject and subject complement(s) which are unprocessed with respect to this final process. The criteria for selecting the best defined noun phrase is the weighted sum of the following criteria: specific reference noun phrase head, weight 5; known reference noun phrase head, weight 5; proper noun phrase head, weight 5; subject sentence role of noun phrase, weight 2; noun phrase head which is a compatible super-type of the other noun phrase head, weight 5; clausal abstract noun phrase head which has the other noun phrase as a representational referent, i.e., the other meets a category requirement. The weighted sum for a noun phrase is the sum of the weights of all criteria which are true for the noun phrase. Best-Def is set to the subject or unprocessed subject complement with the highest weight.  sets Next-Def to the noun phrase with the second highest weight among the subject or unprocessed subject complements.  also sets Modal-V to false; sets Form-C to false; and sets C-R to false. Form-C is true when a separate clause is required by coordinated subject complements. C-R is true when a subject and subject complement have compatible class number components of their identification numbers. After ,  is next and is true if the \u201cto be\u201d verb is modified by a modal verb or modal adverbial. If  is true,  sets Modal-V to true. Modal-V is used to mark modification relations which are modified by the modal verb or modal adverb of a clause with a subject complement.","After , or if  is false,  is next and is true if Best-Def and Next-Def have the same word sense identification number and the same type number, or if subject or subject complement is a clausal abstract noun and the other is a representational referent of the clausal abstract noun. If  is true, Next-Def is being identified as Best-Def as in: \u201cThe clue is a hammer.\u201d for example. If  is true,  sets Next-Def as having a DEFINING relationship with Best-Def. After ,  is next and is described below. If  is false,  is next and is true if both Best-Def and Next-Def have the same stated head. If  is true, no further processing for Next-Def is needed because the subject complement has been set to modify the subject at , and this modification relation has been processed for selection with the methods described above. If  is false,  is next, and is true if the class numbers of Best-Def and Next-Def are compatible which implies that one class number is a super-type of the other. An example of this case is: \u201cA tomato is a fruit.\u201d If  is true,  sets Next-Def as having CLASSIFYING relationship with Best-Def; sets C-R to true; and sets processing to continue at  which is described below. If  is false,  is next and is true if one or more modifiers of Next-Def sets a conflicting state or property value with Best-Def's same state or property value. If  is true,  is next, and is true if the one or more conflicting values implied by one or more modifiers of the current Next-Def was set by one or more modifiers of a preceding Next-Def in the current clause. If  is true,  forms a new clause with: Best-Def without the one or more conflicting values as subject, the \u201cto be\u201d verb phrase of the current clause, and Next-Def as the subject complement; the new clause is stored in the SDS; a copy of Best-Def is added to N-List before Next-Def; Form-C is set to true, and processing is set to continue at  which is described below. The formed clause is processed below. If  is false,  is next, and is true if a conflicting value is a property value of Best-Def. If  is true, the word sense numbers of the current clause require a new selection. If  is true,  sets the clause with Best-Def and Next-Def to be unprocessed; the R-No of the subject is incremented by 1; and processing is set to continue at  as described above. The R-No of the subject is incremented so that a new word sense number will be selected at . If  is false, the one or more conflicting values are state values which are allowed to be changed without explicitly using a clause.","After , or if  or  is false,  sets Best-Def as the modifiee of the stated direct modifiers of Next-Def by adjusting the modifier's SDS pointers to the noun phrase which contains them; and the value of Modal-V is marked and stored at Next-Def and in each direct modifier's SDS position. Note that direct modifiers of Next-Def includes clause modifiers.  transfers the modifiers from Next-Def as in a defining sentence such as: \u201cTom is a good employee.\u201d After ,  is next, and is true if C-R is false, and if the heads of Next-Def and Best-Def have different types.  is true for a sentence such as: \u201cThe car is a sedan.\u201d for example. If  is true,  sets Next-Def as having a TYPE-DEFINING relation with Best-Def. If  is true, the type numbers of Best-Def and Next-Def must be compatible because a REQ was set to ensure that all modifiers maintained compatible type numbers. If  is false, or if  is true, or after  or ,  is next, and is true there is another noun phrase in the current clause which has not been processed at . If  is true,  sets Best-Def and Next-Def as at ; C-R is set to false; and processing is set to continue at  as above. If  is false,  is next, and is true if Form-C is true. If  is true,  is next and is true if there is currently only one unprocessed clause which was formed at . If  is true,  sets Form-C to be false. After , or if  is false,  sets Best-Def to the subject or subject complement as at  for the next unprocessed formed clause; Next-Def is set as at  for the next unprocessed formed clause; C-R is set to false; and processing continues at  as above. If  is false,  is next, and is true if there is another clause with a noun subject complement which has not been processed for word sense number selection of a sentence role. If  is true,  sets the Current-Head to be the next unprocessed sentence role of the next unprocessed clause with a noun subject complement; BACK is set to ; and processing is set to continue at  as described above. If  is false,  sets Modal-V to false, and sets processing to continue at  as described above. At , all clauses with a subject complement have been processed for noun word sense number selection in the current sentence.","Prepositional Phrase Modification of Adjectives","The interface to the prepositional phrase modification of adjectives process, ADJ-PREP, begins at .  is next if  is false for example. An implementation of ADJ-PREP for English is described for .  sets Cur-Prep to the preposition modifying the adjective in the current clause; ADJ is set to the adjective in the current clause; COMP is set to the complement of the prepositional phrase modifying the adjective; SUBJ is set to the subject of the current clause; Return- is set to ; Modal-V is set to false; and P-Call is set to false unless P-Call has been set by a calling process. P-Call is true when a calling process invokes this prepositional phrase modification of adjectives process with a P-Call parameter set to true. After ,  is next, and is true if the verb phrase of the current clause has a modal verb or a modal adverbial. If  is true,  sets Modal-V to true. After , or if  is false,  calls ADJ-PREP[Cur-Nat-Lang, SUBJ, ADJ, Cur-Prep, COMP, Return-, Adj-Prep-Status, Current-Relation] to process the prepositional modification of the adjective in the current clause. Adj-Prep-Status is a signaling parameter between  and ADJ-PREP. Adj-Prep-Status contains return information relevant to  upon return from ADJ-PREP, and Adj-Prep-Status contains return information relevant to ADJ-PREP upon return from . Current-Relation contains a relation found at  for ADJ-PREP, or Current-Relation contains the relations to be searched for by . After processing is completed at ADJ-PREP, processing returns to Return-, .  is true if Adj-Prep-Status equals SEARCH.  is true in the case where ADJ-PREP requires  to find a prepositional relation between the subject and complement as described above. If  is true,  sets up processing for the prepositional relation at .  sets -Back to ; Cur-Rel-Set is set to the Current-Relation invocation parameter; the Current-Modifiee is set to SUBJ; the Current-Word is set to COMP; Mod-Check is set to true; and processing is set to continue at . After the modification relation started at  is completed,  is next, and is true if Current-Relation-Found is true. If  is true, a relation has been found, and  sets the Current-Relation to the address of the found relation; and Adj-Prep-Status is set to FOUND-IN-. After ,  returns processing to ADJ-PREP[Cur-Nat-Lang, SUBJ, ADJ, Cur-Prep, COMP, Return-, Adj-Prep-Status, Current-Relation]. If  is false,  sets the Current-Relation to null, and set Adj-Prep-Status to NOT-IN-. After ,  returns to ADJ-PREP[Cur-Nat-Lang, SUBJ, ADJ, Cur-Prep, COMP, Return-, Adj-Prep-Status, Current-Relation].","If  is false, ADJ-PREP has found the relation of the prepositional phrase modifying the adjective in the current clause, ADJ-PREP has failed to find a relation, or ADJ-PREP requires the finding of a modifiee of the adjective in the current-clause. If  is false,  is next, and is true if Adj-Prep-Status equals ADJ-FIND. If  is false,  is next, and is true if Adj-Prep-Status equals FAIL. If  is true,  is next, and is true if P-Call is true. P-Call is true if this prepositional phrase modification of adjectives process is called by an external process such as Selector . If  is true,  returns processing control to the caller. If  is false,  sets the Current-Word to the adjective modified by Cur-Prep, and sets processing to continue at  which considers alternate interpretations and is described below. If  is false, the adjective preposition process is complete, and  is next.  is true if the Current-Relation is an AMF-Relation or a T-Relation. If  is true,  sets BACK to , and the prepositional relation is stored next at .  sets SREP[POS,2] to the Cur-Typ; SREP[POS,3] is set to the position of the Current-Modifiee; SREP[POS,4] is set to the address of the modification relation at the Current-Modifiee's external relation structure; and processing is set to continue at BACK. If  is false, processing of the current clause continues at  which is described above.","If  is true,  sets up variables for finding the modifiee of the adjective.  sets Adj-Check to true; Cur-Type is set to the head of the noun phrase with an exclusive symbol; Current-Head is set to the head of the first noun phrase in the modification invocation set contained in the calling parameters; the Current-Modifiee is set to the adjective in the current clause; and processing is set to continue at  which determines if the adjective can modify the Current-Head. When Adj-Check is true, processing will return to  after successful completion at  as described above or after unsuccessful completion at  which sets Adj-Find to false, and returns processing to , and which is described below. After the processing to determine if the adjective can modifiee the Current-Head,  is next, and is true if Adj-Find is true. If  is false,  is next, and is true if there is an untried noun phrase in the modification invocation set. If  is true,  sets the Current-Head to the head of the next untried noun phrase in the modification invocation set, and sets processing to continue at . If  is false,  sets Adj-Prep-Status to NOT-IN-, and sets Adj-Check to false. If  is true,  sets Adj-Prep-Status to FOUND-IN-, and sets Adj-Check to false. After  or ,  returns processing to ADJ-PREP[Cur-Nat-Lang, SUBJ, A-Sense[Cur-Sense], Cur-Prep, COMP, Return-, Adj-Prep-Status, Current-Relation]. This completes the interface processing to ADJ-PREP.","Prepositional Phrase Modifiers","Prepositional phrase processing is started at .  is preceded by Steps  or  for example. When  is processed, a word sense number for the complement noun phrase head has been selected, and the word sense numbers of noun phrase heads preceding the prepositional phrase have been selected. However, a noun phrase head in a clause which precedes the prepositional phrase may not have been processed because its containing clause has been suspended.  sets the Current-Modifiee to be the next, possible, untried noun in Prep-Mod[Cur-Nat-Lang, Cur-Typ]. Prep-Mod contains the types of modifiees of a preposition. A particular type of noun phrase modifiee can have more than one instance of a type. The type is indexed by Cur-Typ. The multiple instances are not explicitly described for Prep-Mod, but they are handled in the same way that was described for Ad-Mod for the modifiees of an adjective as described above. If a modifiee can not be found for the current value of Cur-Typ, the next value of Cur-Typ is tried if there is one at . After ,  is next and is true if Current-Modifiee was set to a possible modifiee at . If  is false, preposition processing has failed and  is next.  is true if RRAC>0. If  is true,  sets RAC-Back to , and sets processing to continue at  which attempts to determine if the prepositional phrase being processed is a separate modifier as described above. If  is false, processing continues at  which selects an alternative for preposition processing as is described below. If  is true,  is next.  sets up parameters for invoking CN-PREP, the concrete noun prepositional process of the current natural language such as illustrated for English in .  sets Current-Prep to the Current-Head's preposition. CN-PREP-Status is set to Find-Rel. CN-PREP-Status is an invocation parameter which indicates the operation to be performed by the concrete noun preposition process of the current natural language. CN-PREP-Status also is used to pass back the type of operation to be performed by Selector . Return- is set to . Return- is used for the return process address from CN-PREP. After ,  calls CN-PREP[Cur-Nat-Lang, Current-Modifiee, Current-Prep, Current-Head, Return-, CN-PREP-Status, Current-Relation]. The starting address of CN-PREP is at the Current-Prep's SDS location.","After CN-PREP has performed its process as described, it returns processing to Selector  at .  is true if CN-PREP-Status is equal to SEARCH. If CN-PREP-Status equals SEARCH, CN-PREP has not found a prepositional relation in Context Memory , and returns with one or more possible prepositional relations in the Current-Relation invocation parameter(s).  initiates a search for a prepositional relation in Memory  at . If  is true,  sets -Back to . -Back is a process address for a local return.  sets RRAC, a row index for R-RAC, to 0.  sets Cur-Rel-Set to Current-Relation; the Current-Word is set to the Current-Head; Mod-Check is set to true. Finally,  sets processing to continue at .  starts a search for a prepositional relation between the Current-Modifiee and the Current-Head, which is set to the Current-Word for compatibility with the process at .  is described above. After the search for the relation at the process starting at  is completed,  is next, and is true if Current-Relation-Found is true. If  is true,  sets Current-Relation to the address of the found relation, and sets CN-PREP-Status to FOUND-IN-. If  is false,  sets Current-Relation to null, and sets CN-PREP-Status to NOT-IN-. After  or ,  returns to CN-PREP[Cur-Nat-Lang, Current-Modifiee, Current-Prep, Current-Head, Return-, CN-PREP-Status, Current-Relation]. If  is false, CN-PREP has completed processing of the prepositional relation between the Current-Modifiee and the Current-Head. If  is false,  is next, and is true if CN-PREP-Status is equal to FOUND which means that the relation has been successfully processed to completion. If  is true,  sets Modal-V to false.  is next, and is true if Current-Prep is a subject complement, and if the verb phrase has a modal verb or a modal adverbial. If  is true,  sets Modal-V to true. After , or if  is false,  marks and stores Modal-V at the Current-Head's SDS position, sets BACK to , and sets processing to continue at  as described above.  completes prepositional phrase modification, and sets up any additional processing to be selected at BACK, .","If all possible modifiees have been unsuccessfully processed,  is false. If  is false, and there are no separate prepositional modifiers,  is false, and  is next.  is true if the R-No of the Current-Head is less than MAX. The Current-Head is the prepositional complement of the prepositional phrase under process.  is true if there is another untried word sense number for the Current-Head. If  is reached, the current word sense number of the Current-Head did not have a prepositional relation with any possible non-verb modifiee in the current sentence. If  is true,  increments R-No of the Current-Head by 1; all modifiers of the Current-Head are set to unprocessed, and processing is set to continue at .  sets the Current-Head for being processed for another word sense number starting at the next untried word sense number. If  is false,  is next, and is true if Current-Prep can modify the verb in the current clause. The capability to modify a verb is checked by determining if Current-Prep has adverbial subclasses associated with in Dictionary . Also, a \u201cto be\u201d is not allowed to have a prepositional phrase modifier since this role is handled as direct modification of the subject as described above. If  is true, adverbial prepositional phrase processing begins at . The adverbial prepositional process is described in the following section. If  is false,  is next and sets the Current-Word to the Current-Head. After , the Current-Word is processed for having alternate interpretations starting at . The process starting at  is described below.","Adverbial Prepositional Processing","Adverbial prepositional processing can be invoked by  when a prepositional phrase does not have a non-verb modifier in the current sentence. Adverbial prepositional processing can also be invoked by  when a prepositional phrase modifying a verb under processing at  is to be interpreted for its adverbial sentence role. Both invocations of the adverbial prepositional processing share nearly all of this process. First, the  entry and the adverbial prepositional processing is described. Then the  interface to this process is described.","Selector  starts adverbial prepositional processing at .  sets ADV-Status to -Find; R-No is set to 1; L is set to 1; and I is set to 1. ADV-Status is set to -Find to indicate that the invocation is from . L is an index into ADV-Subclass matrix which contains the adverbial subclasses associated with prepositions. I is an index into SUBCLASS which contains the adverbial subclasses which are possible for the Current-Prep with the Current-Head at the R-No. After ,  is next, and is true if R-List[R-No] of the Current-Head meets the source requirements of ADV-Subclass[Current-Prep,L]. If  is true,  sets SUBCLASS[I] to ADV-Subclass[Current-Prep,L]; I and L are each incremented by 1. If  is false,  increments L by 1. After  or ,  is next, and is true if ADV-Subclass has an untried adverbial subclass for the Current-Prep. If  is true,  is next as above. If  is false,  is true if I>1.  is true if SUBCLASS contains at least one adverbial subclass. If  is false,  is next and is true if R-No of the Current-Head is less than MAX, i.e., there is an untried word sense number of the Current-Head. If  is true,  increments R-No by 1, and sets L to 1. After ,  is next as above. If  is false, no suitable adverbial subclass was found, and  sets RES to NOT-FOUND. RES is the result invocation parameter between this process and Selector . If  is true,  sets RES to FOUND. After  or ,  is next, and is true if ADV-Status equals -Find. If  is true,  is next, and is true RES equals FOUND. If  is true, the Current-Head could possibly be an adverbial prepositional phrase complement. The Current-Head will subsequently be determined for being an adverbial prepositional complement that modifies the word sense number of the verb in the clause by . If  is true,  stores information at the preposition which will be used by  in the process to determine if the adverbial prepositional phrase does modify the verb.  stores the following information: PREPROC-VERB, SUBCLASS, I-1, and R-No of the Current-Head. PREPROC-VERB implies that the prepositional complement of the preposition has its SUBCLASS already selected by . If  is false, the Current-Head does not have a relation with the verb in the Current-Clause, and processing is set to continue at  which prepares the Current-Head for alternate interpretations as described above. If  is false, this process was invoked by Selector . If  is false,  is next, and prepares a call which indicates the status of the above process. If RES equals FOUND, the call to  indicates that the process was successful. In this case  processes Current-Prep and SUBCLASS to find a prepositional relation between the verb in the current clause and Current-Prep's prepositional phrase.  invokes ADV in the Cur-Nat-Lang, e.g., , to find a prepositional relation. If RES equals NOT-FOUND,  prepares a call to  which implies a suitable subclass was found. In this case,  pursues alternative interpretations of the prepositional phrase which are tried as described at . If  is false,  decrements I by 1; -Return is set to ; and  calls Selector [-Find, Current-Prep, Cur-Rel, R-List[R-No], R-No, SUBCLASS, I, -Return, RES, ADV-Status]. The Cur-Rel parameter stores the prepositional relation that will later be determined by ADV for .","If the call to  at  had RES equal to FOUND,  invokes ADV. If ADV is successful,  sets RES to FOUND, and invokes  at . If ADV is unsuccessful,  sets RES to NOT-FOUND, and also invokes  at . When  invokes  under these circumstances,  is next, and is true if RES equals FOUND. If  is true,  sets up variables for processing the complement of the Current-Prep prepositional phrase.  sets the Current-Head to the head of the complement of Current-Prep; all modifiers of Current-Head are set to unprocessed; Cur-Typ for the selection of the prepositional phrase modifiee is set to the current clause verb with an exclusive symbol and with an indication that the  requested the processing, which is represented with @-VERB-; REQ for the Current-Head is set to the requirements in the invocation SUBCLASS parameter; BACK is set to ; and processing is set to continue at .  stores information related to the prepositional relation at SREP as described above including Cur-Rel which was set by  to contain the address of the modification relation. After , processing returns to  which starts the processing of the complement noun phrase.  sets BACK to , and sets processing to continue at . If  is false,  is invoking  to find the adverbial subclasses possible with the complement of the prepositional phrase modifying a verb being processed at . If  is false,  restores R-No, ADV-Status, and Current-Prep from the invocation parameters sent by ; I is set to 1; P-ADV is set to false; and processing is set to continue at .  is true if R-No equals 1. If R-No equals ,  is invoking the adverbial prepositional processing for the first time for the complement. In this case, the complement's R-List must be created. If  is true,  sets the Current-Head to be the complement of Current-Prep; L is set to 1; P-ADV is set to true; and processing is set to continue at  which processes the Current-Head as above. When P-ADV is true, after the R-List and related processing is completed,  is next as above. If  is false,  is next as above. This completes description of the adverbial prepositional phrase processing.","Alternate Interpretation of Noun Phrases","The alternate interpretation of a noun phrase is attempted after a noun phrase has failed one of the above processes for selecting a word sense number of a noun head or a modifier of a noun head. In some cases, the failure to select a word sense number is equivalent to failing one option in a search. This is the case for the finding of a modifier for an adjective during ADJ-PREP as described above. When an adjective does not have a possible word sense number, processing is set to continue at  which is true if Adj-Check is true. if  is true,  sets Adj-Find to false, and sets processing to continue at  as described above. If  is false,  is next, and is true if ABS-Check is stored at the Current-Head's SDS location. If  is true, the noun phrase being processed represents a clausal abstract noun as is described below. A clausal abstract noun can have a modifier in the noun phrase of the Current-Head which actually modifies another word in the clause which represents a clausal abstract noun. This clause contains the Current-Head. If  is true,  is next.  stores CLAUSE-MODIFIER at the SDS position of the Current-Word. After ,  is next.  is true if the Current-Word is a prepositional complement head. If  is true, processing is set to continue at  to select the next process as above. If  is false, processing is set to continue at  for the next modifier of the Current-Head as above.","If  is false,  is next.  is the entry point for the other word sense number selection processes described above.  is true if the Current-Word is an ellipted element with alternate processing. Response form ellipsis does not have alternate processing for example. If  is true,  sets Return- to , and invokes ellipsis processing by calling ELLIP[RESTART, Return-]. RESTART, the location where ellipsis processing is restarted, is in the Current-Word's SDS position or at the first word of the elliptical phrase containing the Current-Word. After ellipsis processing is completed as described in English for -or -for example, processing continues at Return-, . If  is true if RES-STATUS is not equal to FAILURE. RES-STATUS is a parameter set during ellipsis processing. If  is true,  sets all replacement words which are processed for word sense number selection to PROCESSED at their SDS positions, and sets all replacements which are unprocessed and non-ellipted words in the noun phrase containing the Current-Word to UNPROCESSED at their SDS positions. Here replacement words means words replaced by the latest invocation of ELLIPSIS processing. After ,  is next, and is true if a noun in N-List is a replacement word. If  is true,  replaces all replacement nouns in N-List with their ellipsis replacement nouns, sets the first replaced, unprocessed noun to be the next noun processed at ; and sets processing to continue at  which begins the process of the next unprocessed noun phrase. If  is false, processing continues at  which processes the next unprocessed modifier of the Current-Head.","If  is false, or if  is false, the Current-Word either is not elliptical, or has no elliptical replacement. If  is false, or if  is false,  is next, and is true if the Current-Word was placed in the SDS through Morphological Processing Step . If  is true,  is next, and is true if there is one or more morphological functions stored at the first word placed through morphological processing. Such functions are placed by Step  as described for English above. If  is true,  sets RESTART to the morphological restart address in the SDS position of the first word placed through morphological processing; P-Type is set to INVOCATION-RETURN; BASE is set to the base word of the stated morphological word; Return- is set to , and  calls MORPH[RESTART, P-Type, BASE, Return-]. MORPH evaluates the morphological functions of the next unevaluated function type as described above for Morphological Processing Step  for English. MORPH will return a RESULT-TYPE, which is an ADDRESS-DESCRIPTOR, PHRASE, and a corresponding RESULT in this case. After processing at ,  is next, and all words which are replaced through processing at  are set to UNPROCESSED. After ,  is next, and is true if a noun head in N-List has been replaced. If  is true,  replaces all replacement noun heads in N-List with their morphologically replaced nouns, sets the first replaced noun to be the next noun processed at ; and sets processing to continue at  which begins the process of the next unprocessed noun phrase. If  is false, processing continues at  which processes the next unprocessed modifier of the Current-Head. If  is false, the Current-Word is not related to morphological processing. Another alternate interpretation possibility is that the Current-Word is a pronoun. If  is false,  is next, and is true if the Current-Word is a pronoun. If  is true,  is next.  starts a process to select an alternate interpretation of the pronoun as described above. If  is false, or if  is false, processing is set to continue at . If  is false, the Current-Word has no alternative interpretations. If  is false, the Current-Word has no morphological or elliptical alternative interpretations. In this case, there could be an alternate assignment for the Current-Word, and  is next.",{"@attributes":{"id":"p-0482","num":"0504"},"b":["60365","60365","60367","60367","60367","60369","60365","60500","60500","60500","60360"]},"The Word Sense Number Selection Backtracking Process","When the Current-Word has failed some aspect of its word sense number selection, and all possible alternative interpretations have been unsuccessfully attempted, it is possible that the Current-Word or another word in its noun phrase can have a different word sense number which allows interpretation of the noun phrase containing the Current-Word. When this failure occurs, a type of backtracking is performed in which a word, a modifier in the noun phrase or the head of the noun phrase, which has been previously processed for word sense number selection is chosen for selecting a different word sense number. The choosing of such a word causes one or more words to be reprocessed for word sense number selection. A chosen word is processed for a different word sense number. The chosen word's direct and indirect modifiers are also reprocessed for word selection in the process for word sense number selection described above. The word sense number selection process of above proceeds until the noun phrase is successfully processed, or until a backtracking process is required. If the backtracking is successful, another word sense number selection proceeds as before. If the backtracking process is unsuccessful, the Communication Manager is informed of a failure. The word sense number selection and backtracking does not cycle in an infinite loop because a chosen word is processed for word sense number selection beginning at its next untried word sense number in its R-List. This backtracking process begins at .",{"@attributes":{"id":"p-0484","num":"0506"},"b":["60500","60500","60502","70","60502","70","60502","60508","70","60502","60504","60504","60506","60504","60506","60528","60506","60510","60510","60512","60618","18","60","60510","60550","60550"]},"If  is false, i.e., the Current-Word is not a prepositional complement,  is next, and is true if the Current-Word has a CONF-M structure with a least one unprocessed row in its SDS position. If  is true,  sets the first row of CONF-M to be the first unprocessed row in CONF-M;  sets Next-M to CONF-M[1,1]; and  removes the source of the first row of CONF-M from the SDS. CONF-M[1,1] is a word which conflicted with the Current-Word as described above. After ,  is next, and is true if the R-No of Next-M is less than MAX. If  is true,  is next, and is described below. If  is false,  is next as above. If  is false,  is next, and is true if the Current-Word is an adjective. If  is true,  sets Next-M to a modifiee selected by AD-Mod-Retry[Cur-Nat-Lang, Cur-Typ]. For example, the Ad-Mod-Retry[English, Cur-Typ] policy is the nearest, possible, modifiee of the adjective in Ad-Mod[English, Any-Typ] with a R-No less than MAX except for noun heads with a SOURCE equal to CONTEXT. After ,  is next, and is true if a Next-M was selected. If  is false,  is next, and tries other alternative possibilities as described below. If  is true,  is next, and is true if the R-No of Next-M equals MAX. If  is true,  sets Current-Head to Next-M, and sets processing to continue at . , as described above, determines if the Current-Head has additional word sense numbers for the case here where Next-M is a head with SOURCE equal to Context. If the Current-Head has additional word sense numbers, they are processed as above. If there are not additional word sense numbers, processing continues at . If  is false,  is next, and is described below. If  is false,  sets Next-M to a modifiee selected by Noun-Mod-Retry[Cur-Nat-Lang, Cur-Typ]. For example, the Noun-Mod-Retry[English, Cur-Typ] policy is the nearest, possible, modifiee of the noun in Noun-Mod[English, Any-Typ] with a R-No less than MAX except for noun heads with a SOURCE equal to CONTEXT. After ,  is next as above.",{"@attributes":{"id":"p-0486","num":"0508"},"b":["60528","60528","60104","60528","60530","60530","60532","60104","60530","60534","60534","60536","60536","60104","60536","60539","60539","60540","60540","60540","70","60540","60541","60541","60214","70","60541","60216","70","60539","60544","60544","60546","60294","60295","60544","60293"]},"If a Next-M was not selected at , there are other possible processes which can continue the processing of the Current-Word, and these possible processes are selected starting at . If  is false,  is next, and is true if the Current-Word is in a clause with a noun subject complement phrase. If  is true,  is next, and is true if there are more than one noun subject complement in the current clause. If  is true,  forms a completed clause with a processed subject and all processed subject complements in the current clause. If a completed clause can not be formed because the subject is not processed, or if no subject complement is processed,  forms a clause with the subject and the first unprocessed subject complement, and the R-No's of the subject and subject complement are set to 1. The subject complement in this formed clause is set so that the subject complement does not directly modify the subject if it had been previously been set to modify the subject at .  also forms a clause with the subject and all subject complements which are not already in a clause formed at , and the R-No's of the subject and all subject complements in this clause are set to 1. All subject complements in this clause are also set so as not to directly modify the subject if they had been previously set to modify the subject at . Then  sets processing to continue at  which processes clauses prior to the selection of matching word sense numbers for the subject and subject complement as described above. Prior to , all subject complements in the current clause are required to have a relation with a single subject word sense number.  sets up clauses so that the subject effectively can have different word senses in different clauses. This need for multiple implied word sense numbers for a single stated word can occur for coordinated constituents. If  is false,  sets processing to continue at  which informs the Communication Manager of a noun word sense number selection process failure at the Current-Word.","If  is false,  is next, and is true if the Current-Word is in a subject phrase or a receiver phrase, and if the head of Current-Word's phrase has a R-No which is equal to MAX. If  is true, there could be possible special usages selectable at Selector . A special usage is abnormal usage of a word sense number in a clause, and special usages are described at Selector  below. If  is true,  sets the Current-Head to the head of the phrase containing the Current-Word; all modifiers of the Current-Head are set to UNPROCESSED; Next-M is set to the Current-Head; and processing is set to continue at  which sets up Next-M for processing at  as described above. If  is false,  is next, and is true if there is a subject, or a receiver if the Current-Word is a prepositional complement noun phrase head, which is before the Current-Word with an R-No<MAX. If  is true,  sets the Current-Head to be the nearest, with respect to the position of the Current-Word, subject or receiver satisfying . A receiver is allowed as a possible Current-Head at  for a Current-Word which is a prepositional complement noun phrase head because new word sense numbers could be selected for the Current-Head at Selector  such that the Current-Word's prepositional phrase could modify the new word sense numbers. If the Current-Head is set to a subject at , all words after this subject could have new word sense numbers selected at . These new word sense numbers could allow the Current-Word's phrase to be successfully processed for noun word sense number selection. These comments about  also apply to  and . After ,  sets all words in the Current-Head phrase and all words after this phrase to UNPROCESSED; Next-M is set to be the Current-Head; and  sets processing to continue at  which is described above.  sets up possible new word sense numbers for the Current-Word to be selected at Selector . If  is false,  is next, and is true if there is a non-pronoun, non-specific known reference, subject, or receiver if the Current-Word is a prepositional complement noun phrase head, which is before the Current-Word with SOURCE equal to CONTEXT. If  is true,  sets the Current-Head to be the nearest, with respect to the position of the Current-Word, subject or receiver which makes  true. After ,  is next as described above. If  is false,  is next, and is true if there is a subject, or receiver if the Current-Word is a prepositional complement noun phrase head, which has an untried special usage, an untried elliptical alternative, or an untried morphological alternative, and which is before or at the Current-Word. If  is true,  sets the Current-Head to the nearest, with respect to the position of the Current-Word, subject or receiver which makes  true. After ,  is next as described above. If  is false,  is next, and is true if the verb in the current clause is a pronoun. If  is false,  is next and informs the Communication Manager of a noun word sense number selection process failure at the Current-Word as above.","If the verb in the current clause is a pronoun,  is true, and  is next.  is true if the verb in the current clause has an untried word sense number in its R-List. If  is true,  sets all the words in the current clause to be UNPROCESSED; the R-No of the verb is incremented by 1; the Current-Head is set to be the first subject; all subject and receiver R-Nos' are set to 1; and  sets processing to continue at  which attempts to select a subject word sense number starting at the next untried word sense number of the verb as described above. If  is false,  sets INIT to RESTART, sets RETRY to true, and sets the verb's R-No to 0. After ,  begins a process to select another interpretation of the pronoun verb as described above.","Reference Processing","After all nouns on N-List have been processed at ,  is false, and  is next. The process beginning at  processes the noun phrase heads which have been processed for word sense number selection as described above for determining the heads specific address, i.e., its word sense number, in Memory . The reference processing includes setting specificity word sense numbers and experience word sense numbers. Also, function word adjectives have been previously processed for default reference types. The default reference type is adjusted for exceptions.",{"@attributes":{"id":"p-0492","num":"0514"},"b":["60620","60620","60622","60624","60624","60800","60624","120","60624","60626","60626","60626","60628","60628","60630","60628","60630","60648","60628","60632","90","60632","60634","60632","60634","90","60634","60636","60634","60638","60636","60638","60800"]},"If Cur-Ref is not a specific known reference,  is false, and  is next.  is true if Cur-Ref is a specific unknown reference. If  is true,  is next, and is true if Cur-Ref has a subtype change with respect to previous references to Cur-Ref in . If  is true,  is next, and is true if Cur-Ref has a nonrelated subtype change. If  is false, or if  is false, or after ,  selects a specificity number with the best match based on states set in the current sentence first with specificity number entries in  which are owned by Cur-Ref with a process as described at . If no match is found, the specificity number is set to 0. After a specificity number has been selected, the specificity number is then incremented by 1 and stored at Cur-Ref's SDS position. After , processing to continues at  which is described above. If  is true,  sets Cur-Ref to a general reference, and processing continues at  which generates a version number and which is described below. If  is false, Cur-Ref is a general reference, and  is next.  is true if Cur-Ref matches a version number stored in the SDS for Cur-Ref. Cur-Ref matches a version if the type number of Cur-Ref matches a type of a version number in , or is a super type of a version number in  for Cur-Ref. A version number has a type number, a specificity number, and a zero experience number. If  is false,  generates a version number with the type of Cur-Ref; a specificity number for the version number is generated as at ; the experience number for the version number is set to zero; and the version number is stored at Cur-Ref's SDS position. After , or if  is true, processing continues at .","After Cur-Ref has been processed for its reference type word sense number implications,  is next.  checks if Cur-Ref's default reference type, Cur-Ref's reference, and Cur-Ref's reference history meet exceptions to the default reference type in Ref-Exception[Cur-Nat-Lang]. Ref-Exception[Cur-Nat-Lang] is a look up table. Some entries in Ref-Exception[Cur-Nat-Lang] have functions which are evaluated to obtain a value. The values in Ref-Exception[Cur-Nat-Lang] are checked for a match. If a match is found, the table has an associated reference type for the match which implies a reference exception. If there is a match,  sets the reference type of Cur-Ref at its group descriptor at its SDS position. After , , is next and is true if Cur-Ref's group descriptor contains an ambiguous quantization\/comparison function. Functions in the group descriptor are functions from adjective function words which could not be evaluated as described above for adjective function word processing. If  is true,  is next, and is true if the state associated with the ambiguously compared adjective is stated again in the current sentence or is in Context Memory . If  is true,  replaces the ambiguous function with the comparison function component from the ambiguous function and adds an UNAMBIGUOUS-BY-ASSUMPTION mark. The ambiguous function contains a comparison function and a quantization function. The mark indicates the function replacement operation. If  is false,  is next, and is true if Cur-Rel can be quantized. If  is false,  is next as above. If  is true,  replaces the ambiguous function with the quantization function from the ambiguous function and adds an UNAMBIGUOUS-BY-ASSUMPTION mark. After  or , or if  is false,  is next.  is true if Cur-Ref's group descriptor contains a special function, a selection function a negation function, an inclusion function, and\/or an exclusion function. If  is true,  evaluates the functions and stores the results in the SDS. If  is false,  is next, and is true if Cur-Ref's group descriptor contains an unambiguous quantization function. If  is true,  evaluates the quantization function and stores the result in the group size component of the group descriptor in Cur-Ref's SDS position.","If  is false,  is next, and is true if Cur-Ref's group descriptor contains an unambiguous comparison function. If  is true,  is next, and is true if the C-relation is stored at a compared element as it would be for the adjective in a comparison. If  is true,  is next, and is true if the stored C-Relation is consistent with Cur-Ref's state or property value. If  is true, or if  is false,  generates the C-Relation if necessary and stores the C-Relation at Cur-Ref's SDS position. If  is false,  is next, and is true if the compared elements are properties. If  is false,  informs the Communication Manager with delay of a compared state inconsistency. If  is true,  informs the Communication Manager with delay of a compared property inconsistency. The Communication Manager determines if a clarification of the inconsistency at  or  is needed. The delay is included because the Current-Clause is not immediately affected by this inconsistency. The Communication Manager typically determines the source of the inconsistency. After  or ,  generates and stores the C-Relation as above. After , or if  is false,  is next, and is true if Cur-Ref's group descriptor differs in membership or quantization compared to all other group descriptors of Cur-Ref in  if any. If  is true,  marks the group descriptor as NEW. If  is false,  marks Cur-Ref with a pointer to its matching group descriptor in . After , or after ,  is next.","If all noun heads have been processed at ,  is false, and processing continues at  which begins to process modification relations with a true Modal-V value. Such relations have been modified by modals or adverbs as described above.  is next, and is true if there is a clause which has not currently been processed for Modal-V. The current N-List may contain nouns which span multiple clauses. If  is false, processing is set to continue at the caller of  which is typically Step . Another common caller is  which calls  to process an adverbial prepositional phrase complement's modifiers. If  is true,  sets Cur-Clause to the next unprocessed clause. After ,  is next, and is true if the clause has a \u201cto be\u201d verb phrase with a modal verb. If  is true, -Return is set to ; Cur-Modal is set to the modal in the verb phrase of Cur-Clause; and  calls MODAL[Cur-Nat-Lang, Cur-Modal, -Return]. MODAL selects the truth value of the Cur-Modal. An example of MODAL for English is described for . After MODAL has completed processing of Cur-Modal,  is next.  sets a pointer to the truth value of Cur-Modal for each modifier relation in Cur-Clause with a true Modal-V value, and sets processing to continue at . After , or if  is false,  is next, and is true if the clause has a \u201cto be\u201d verb phrase with one or more adverbs. If  is false,  is next as above. If  is true,  sets -Return to ; Current-Adverbial is set to the next unprocessed adverb in the verb phrase of Cur-Clause; ADV-Subclass is set to the Relation-Modification-Subclass-Set[Cur-Nat-Lang]; and  calls ADV[Cur-Nat-Lang, Current-Adverbial, ADV-Subclass, -Return]. Relation-Modification-Subclass-SetCur-Nat-Lang contains adverbial subclasses for modification of relations in the current natural language. For example, \u201calways, usually . . . \u201d can modify \u201cto be\u201d verbs with a subject complement, and hence, modify the modification relation between the subject and subject complement. ADV processes the Current-Adverbial using the ADV-Subclass to select its adverbial function as described above for English for . After ADV has reached completion,  is next, and is true if Current-Adverbial is successfully processed by ADV. If  is false,  informs the Communication Manager of an improper Current-Adverbial for relation modification. If  is true,  sets a pointer to the adverb function results of Current-Adverbial for each modifier relation in Cur-Clause with a true Modal-V value. After ,  is next, and is true if there is another unprocessed adverb in Cur-Clause. If  is true,  is next as above. If  is false,  is next as above. This completes the description of concrete noun word sense number selection. State and clausal abstract nouns are described next.","State Abstract Nouns","State abstract nouns are closely related to concrete nouns. State abstract nouns are variations of a concrete noun in the sense that a state abstract noun has a data structure which is a special case of a concrete noun data structure. State abstract nouns have a data structure in Memory  which is a special case of a concrete noun data structure as described for , and . This data structure in  is used to select the word sense number of a state abstract noun and its modifiers with the same process utilized to select concrete nouns in Selector . State abstract nouns differ from concrete nouns in that they represent states. Thus, a word sense number of a state abstract noun has a pointer to a state data structure in Memory  which is described below.","A state abstract noun word sense number has the same components as a concrete noun word sense number as illustrated in . A state abstract noun word sense number is composed of an identification number, type number, specificity number and experience number. The word sense number of a state abstract noun is essentially the same as a concrete noun except that the identification number of a state abstract noun differs from the composition of a concrete noun identification number. The state abstract noun identification number is composed a class number, member number, a value range, and an owner word sense identification number. A concrete noun identification number does not have a value range or an owner word sense number. The class number of a state abstract noun belongs to a class containing states. The member number is a state number. The value range corresponds to the range of values allowed for the state of the state abstract noun. The owner word sense number is used as the source for the type number, specificity number, and experience number. The value range and owner word sense number are utilized to access the data structure of an abstract noun in Memory .","The entry format for a state abstract noun is the same as the concrete noun format entry illustrated in . The actual entries of a state abstract noun differ little from a concrete noun entry. One difference is that an adjective modifying a state abstract noun sets the state value of the state associated with the state abstract noun. The adjective sets the state value in the sense that it selects a pointer value to Memory  associated with a state abstract noun. A concrete noun typically has many states associated with it. However, one state abstract noun can have multiple separate states which are parts of the one state abstract noun. For example, a \u201cperson's health\u201d is a single state abstract noun which is in a partitive A-relation to the state abstract nouns corresponding to the entities of the body with a \u201chealth\u201d state such as: \u201cheart, lungs, hands,\u201d etc. The partitive A-relations in this example contain the dependencies of the subpart to the overall state abstract noun. For example, a \u201cperson's health\u201d has a 100% negative dependency with the \u201chealth of the person's heart\u201d. Thus if the \u201chealth of a person's heart is bad\u201d, the \u201cperson's health is bad\u201d. However, if the \u201chealth of a person's heart is good\u201d, more information is needed to set the state associated with the \u201cperson's health\u201d.","The external relation structure format of a state abstract noun is the same as the format for a concrete noun as illustrated in . The contents of an external relation structure for a state abstract noun differs from concrete noun external relation structures in that the state abstract noun type is usually selected with a possessive A-relation. State abstract nouns do have some specializations of the data structures of , , and as described above, but these specializations utilize the same structures as concrete nouns use. Even though a state abstract noun represents a state, an internal entity of knowledge and experience of the Language Machine, the usage of state abstract nouns in natural language is so similar to concrete nouns that a state abstract noun utilizes the same data structures as a concrete noun, depicted in , , and . Also, this similarity allows state abstract nouns to utilize the same word sense number selection process, depicted in -, as is used for concrete nouns.","Clausal Abstract Nouns","Clausal abstract nouns are also closely related to concrete nouns. Clausal abstract nouns are typically equivalent to a representational referent modified by a subordinate clause. The representational referent modified by this clause is often a concrete noun or possibly an abstract noun in the context of the conversation. The modifying clause defines the modified representational referent in the sense number that the clause is typically used to select a concrete noun or abstract noun in the context as is described below. The subordinated clause modifying a representational referent is associated with a word sense number of the clausal abstract noun. For example, \u201cclue\u201d can have a word sense in English as follows: \u201cthing which could solve a crime\u201d. Note, the representation of a clausal abstract noun is a representational referent modified by a relative clause. In this representation, the representational referent has a sentence role in the relative clause. This sentence role is typically a subject of the relative clause. This representation is used because it could grammatically replace the clausal abstract noun in a sentence. For this example, \u201cthing\u201d is the general category of the representational referent for this word sense of \u201cclue\u201d. The representational referent could be selected to be some member in a special group, called a direct category, which is associated with a group A-descriptor in the representational referent's sentence role in the modifying subordinate clause of the word sense number of a clausal abstract noun. In this example, \u201cthing\u201d has a direct category for its possible referents such as: weapon, fingerprint, foot print, etc. A direct category has an associated group of elements which can be the representational referent. Also, a non-representational referent sentence role in the subordinate clause modifying the representational referent could also have a direct category for a referent in the context. depicts the format for a direct category. A direct category has a list of one or more of the following elements: a concrete noun word sense number, a state abstract noun word sense number, a clausal abstract noun word sense number, a pointer to a direct category of a clausal abstract noun, a pointer to an indirect category of a clausal abstract noun which is defined next. If a direct category contains a pointer to another direct or indirect category of a clausal abstract noun, that other direct or indirect category is incorporated into the direct category during processing of a direct category. During processing of a direct category, the elements in a direct category are compared with referents in Context Memory  for a match between a direct category element and a referent in .","A clausal abstract noun can also have an indirect category. The format for an indirect category is depicted in . An indirect category is a set of one or more descriptors of elements which are used to select a referent in  for the representational referent or for an element in a subordinate clause modifying the representational referent. A descriptor of an element of an indirect category is a set of one or more adjective or state abstract noun word sense numbers each composed of an identification number and the most general owner word sense number. The most general owner word sense number is listed in an element if it differs from the representational referent such as for a part of the representational referent. The most general word sense number possible has an identification number only containing a class number and has zero type, specificity and experience number. The entry contains the most general owner word sense number which selects a valid referent. An adjective word sense identification number is composed of a state number which accesses the state or property associated with the adjective word sense number. A state number is composed of a class number and a member number. The adjective word sense identification number also contains a typical value, a specific non-typical value, or a value range. The owner word sense number is selected during the processing of the modifiee, which is the representational referent or another element in the modifying subordinate clause for clausal abstract nouns. A referent with the same degree of generality in the descriptor or with a more specific variation of the descriptor matches the descriptor. A descriptor of an element may optionally contain a name which is a concrete noun or abstract noun word sense identification number. An indirect category pointer is contained in a group A-descriptor in the representational referent's sentence role. Other non-representational referent sentence roles in the modifying subordinate clause of the word sense number of a clausal abstract noun could also have an associated indirect category. A descriptor of an element is a set of requirements which a sentence role element must have to perform its sentence role. A indirect category element is compared with referents in Context Memory  for a referent in  that has the adjective word sense numbers which match a descriptor in the indirect category. A representational referent or an element in the subordinate clause modifying the representational referent is selected with an indirect category with this comparison process. For example, \u201cclue\u201d with the word sense of \u201cthing which could solve a crime\u201d, could have an indirect category descriptor for \u201cthing\u201d in English such as: \u201cweight (greater than one pound, less than 10 pounds), EDGES (blunt), length (greater than 6 inches, less than 4 feet), rigid, inanimate, a weapon\u201d. The words in parentheses are the state or property's value or value range associated with the preceding adjective's state or property. Words in capital letters indicate the owner of the adjective for owners which differ from the sentence role related to the indirect category element. Adjectives or state abstract nouns without succeeding words in parentheses have the typical value. In this example, the descriptor contains 5 properties and no states, 2 value ranges, and 3 values. The appositive, \u201ca weapon\u201d, is the name of the indirect category descriptor. The representational referent or an sentence role representing a referent in the modifying subordinate clause has a group A-descriptor which points to the direct category and\/or indirect category of the representational referent or the element.","A clausal abstract noun's modifying subordinate clause can also have an implied purpose relation with a clause in , which has been stated in the preceding conversation. For example, another general word sense of \u201cclue\u201d in English is: \u201cthing that is used to solve a problem\u201d. If the conversation is about solving a homework problem, the word sense of \u201cclue\u201d could have a representational referent and a sentence role referent which makes the word sense more specifically: \u201ctext that is used to solve a homework problem\u201d. \u201ctext\u201d is a direct category element for the representational referent of \u201cthing\u201d. \u201chomework problem\u201d is also a direct category element of the sentence role referent for the modifying subordinate clause element \u201cproblem\u201d. Note that \u201chomework problem\u201d is actually another clausal abstract noun. The representational referent of \u201chomework problem\u201d is the clause(s) describing the problem. The actual referents for \u201ctext\u201d and \u201chomework problem\u201d are obtained from the context in a process described below in this section. The subordinate clause modifying \u201ctext\u201d, \u201cthat is used to solve a homework problem\u201d, is an English equivalent of a purpose relation which is used to find the actual stated one or more clauses which is the representational referent of the \u201ctext\u201d. Thus, in this example, the actual representational referent is one or more clauses \u201cthat is used to solve a homework problem\u201d. The one or more clauses have either been classified with the purpose relation of this example by Purpose Identifier  previously, or the one or more clauses require an additional classification by  to this purpose relation. Purpose Identifier  is described below. The one or more clauses could possibly follow the related clausal abstract noun, i.e., the representational referent could be cataphoric.","A modifying subordinate clause of a clausal abstract noun is stored in Memory . Such a subordinate clause can have an associated purpose relation processing descriptor which is stored in Clausal Abstract Noun and Clause Purpose Memory . The purpose relation processing descriptor contains one or more of the following: the clause(s) owning the purpose relation, the purpose relation, the clause(s) owned through the purpose relation, purpose identification evaluations, purpose selection processes, and\/or the function which relates the purpose relation or an aspect of the purpose relation to the clausal abstract noun which is associated with the purpose relation processing descriptor. The order of the entities in a purpose descriptor is not necessarily in the order stated above. In the example, \u201ctext that is used to solve a homework problem\u201d, the purpose relation processing descriptor contains the equivalent in English of: the owning clause(s) is the representational referent of the \u201chomework problem\u201d; the purpose relation is the \u201crepresentational referent of \u201ctext\u201d that is used in the process for solving the owning clause(s)\u201d; evaluate the identification purpose of the owning purpose, i.e., to find the representational referent of the \u201chomework problem\u201d; the owned clause(s) is the subject of the purpose relation; evaluate the identification purpose of the owned purpose, i.e., to select the representational referent of the \u201ctext\u201d; and the function is to assign the owned clause(s) as the value of the representational referent of the clausal abstract noun, \u201ctext\u201d. The purpose descriptor is evaluated at Purpose Identifier  with function calls. The purpose relation processing descriptor has a range of functions for obtaining representational referents of clausal abstract nouns through purpose relations. The range of functions includes: identification of the purpose relation, looking up the purpose relation, processing of multiple levels of purpose relations, extracting clauses in the purpose relation, etc. For this example, the final state representation of \u201cclue\u201d is \u201ctext\u201d, and a pointer to the value of \u201ctext\u201d. \u201ctext\u201d is the modifiee of modifiers of the representational referent. The pointer to the value of \u201ctext\u201d in the state representation is to the owned clause(s) in the above purpose relation descriptor, and are typically contained in the context.","Clausal abstract nouns also have a data structure in  which is a special case of a concrete noun's data structures. There are two main specializations for the word sense number entry format data structure of a clausal abstract noun. One specialization for clausal abstract nouns is that the entry format of a clausal abstract noun compared to the entry format for a concrete noun can have state representation pointers which do not modify the clausal abstract noun. The state representation pointers could modify the verb or other constituent in the subordinate clause modifying the clausal abstract noun for example. Such state representation pointers have a symbol which designates their modifiee. The external relation structure for a clausal abstract noun can also have a symbol for a modifier which indicates that the modifier modifies the verb or other constituent in the subordinate clause modifying the clausal abstract noun The entry format of a concrete noun is depicted in . The second specialization is that the clausal abstract entry format compared to the concrete noun entry format has an A-descriptor and T-descriptor format component with a designated function A-relation pointer which points to the modifying subordinate clause in Memory .","Clausal abstract noun heads and their modifiers are also initially processed for word sense number selection with the same process used for concrete nouns which is depicted in -. One difference for the processing of an clausal abstract noun is that a modifier of a clausal abstract noun may actually modify a sentence role in the modifying subordinate clause of the clausal abstract noun. Thus, a modifier does not have to directly modify the clausal abstract noun. As described above at  and , when a modifier of a clausal abstract noun does not have a modification relation stored in  for the clausal abstract noun, the modifier is marked as a CLAUSE-MODIFIER in its SDS position for later processing. Processing of such a state abstract noun continues to the next modifier as described above. This word sense number selection process of the clausal abstract noun places certain requirements upon the representational referent which the clausal abstract noun represents. Also, a word sense number entry of a clausal abstract noun has a pointer to a modifying clause in  which can add requirements for the representational referent of the clausal abstract noun. These requirements from the stated clause and the requirements from the implied modifying clause are used to select a representational referent of the clausal abstract noun in the context, if possible. If a representational referent can not be selected from the context, the general category of the representational referent or other modifying subordinate clause sentence role for the word sense number of clausal abstract noun is not replaced. In this case, the general category of the clausal abstract noun represents the possible representational referents of the clausal abstract noun or other modifying subordinate clause sentence role. In summary, a group of representational referents contains the instances from experience and knowledge which have been represented by the clausal abstract noun, and such a group is enumerated in the direct and\/or indirect category associated with the word sense number of the clausal abstract noun. Such a group is categorized by its general category, e.g., \u201cthing\u201d in the clause associated with a clausal abstract noun.",{"@attributes":{"id":"p-0509","num":"0531"},"figref":["FIGS. 18","FIGS. 17","FIGS. 17"],"i":["c","d ","d","jj","d","jj "],"b":["18","17","60617","607002","607002","60","607000","60104","17","70","607002","120","120","120"]},{"@attributes":{"id":"p-0510","num":"0532"},"b":["60617","607002","607002","607002","120","607002","60618","607002","607004","607004","607004","607030","607004","607005","120","607005","607005","100","70"]},"After ,  is next, and is true if there is an unprocessed direct category entry in R-List. If  is true,  searches for a word sense number in the Restricted-Context or Context Memory  that matches the next unprocessed direct entry, and the meets the requirements of REQ, if there are any, and meets the requirements of S-Req.  searches for all elements in the Restricted-Context or  which match the direct entry, and which meet REQ and S-Req requirements. REQ is contained in SREP[POS, 4] of the abstract clausal noun. If the Current-Head is the representational referent, the Current-Head must meet the requirements of REQ and S-Req. If the Current-Head is a sentence role in the subordinate clause modifying the clausal abstract noun, the Current-Head has no REQ requirements, and such a Current-Head must only meet the requirements of S-Req. After ,  is next, and is true if a match is found. If  is true,  removes the direct category under process from R-List, and stores the one or more matched elements from the Restricted-Context or  starting at the position of the removed direct category entry, and increases MAX by the number of matched elements stored in R-List minus one. If  is false,  is next, and removes the direct entry from R-List which caused  to be false.  also decrements MAX by 1. After , or after ,  is next as above.",{"@attributes":{"id":"p-0512","num":"0534"},"b":["607006","607008","607006","607012","607012","607017","120","120","607017","607019","120","607017","607019","607021","120","607019","607023","607017","607019","607023","607012"]},"All indirect entries are processed after  is false, and  is next.  is true if a referent from the Restricted-Context or  was found and stored in R-List by  or . If  is true,  is next, and is true if the Current-Head has unprocessed modifiers with a CLAUSE-MODIFIER symbol in their SDS positions.  is true for a Current-Head which is a representational referent or a modifying subordinate clause sentence role of a clausal abstract noun that has stated modifiers which did not have a modification relation with the stated clausal abstract noun or other processed referents of the clausal abstract noun. If  is true,  creates an SDS position for the Current-Head for a modifying subordinate clause sentence role without an SDS position; ABS-Check is stored at the Current-Head's SDS position; all the unprocessed modifiers with a CLAUSE-MODIFIER symbol in their SDS positions are set to modify the Current-Head; BACK is set to ; and  sets processing to continue at .  processes the Current-Head for its unprocessed modifiers for the word sense number of the Current-Head starting at the first word sense number stored in R-List. The Current-Head's word sense number has been effectively set to be an element in the Restricted-Context or . If  is false, the current word sense number of the Current-Head has failed to have a referent in the Restricted-Context or , and  is next. In this case, the representational referent or a sentence role in the modifying subordinate clause is not assigned a referent. Instead, the general referent, which is already assigned to the representational referent or the element, is used. A suitable referent would not be found in the case where a general clausal abstract noun is referenced in the conversation for example.  stores NO-CONTEXT-REFERENT at the SDS position of the Current-Head. After ,  is next as above. The symbol NO-CONTEXT-REFERENT is detected by Step  in subsequent processing. When this symbol is detected, Step  directs the remaining part of the sentence after the Current-Head and the following sentence to be checked for containing a cataphoric referent for the referents with the NO-CONTEXT-REFERENT symbol. This search for the cataphoric referent is accomplished by searching for the Restricted-Context as described above in subsequent processing initiated at Step .","If  is false, the Current-Head has no unprocessed modifiers, and its referent has been determined. If  is false, or if , which is described below, is false,  is next. If  directly precedes , there may be unprocessed modifiers.  sets C-ABS-REF, the referent of the Current-Head, to be R-List[R-No].  also stores the following at the SDS position of the Current-Head: ABSTRACT-NOUN-REFERENT, R-No, MAX, R-List, C-ABS-REF. After ,  is next, and is true if the clausal abstract noun's modifying subordinate clause has an unprocessed sentence role representing a referent in the Restricted-Context, or in . If  is true,  sets the Current-Head to be the next unprocessed sentence role representing a referent, and sets processing to continue at  as described above. If  is false,  is next, and is true if there are unprocessed modifiers with CLAUSE-MODIFIER, and if there are modifiers of the clausal abstract noun being processed with CLAUSE-MODIFIER at such a modifier's SDS position, and if there is an unprocessed sentence role in the modifying subordinate clause which can be modified by a modifier of the clausal abstract noun. Such sentence roles are unprocessed if they have not processed to determine if they can be modified by an unprocessed modifier with CLAUSE-MODIFIER. A sentence role of the modifying clause is designated to be modifiable by a clausal abstract noun at the clause verb's application pattern of which is described below for . If  is true,  sets the Current-Head to be the next unprocessed sentence role which can be modified by a modifier of the clausal abstract noun, and sets processing to continue at  as described above. If  is false,  is next, and is true if the clausal abstract noun has a clause requiring purpose relation processing. For example,  is true when there is a state adjective with Clause-Modifier without a modifiee within the clause. In this case, the other possible modifiee is the subordinate clause modifying the representational referent. A state adjective modifying a clause has a purpose relation to that clause. If  is true,  forms a Purpose-Set composed of a pointer to a purpose relation processing descriptor for each purpose relation associated with the clausal abstract noun. The pointer to a purpose relation processing descriptor is associated with the modifying subordinate clause in .  stores the Purpose-Set at the clausal abstract noun's SDS position, and sets processing to continue at  as described above. If  is false, processing has been completed, and  processing continues at . Clausal Abstract Noun has been successfully completed after  or .","If the Current-Head has unprocessed modifiers, the unprocessed modifiers are processed at  for having a modification relation with the Current-Head's referent, as selected above. After the processing for these modification relations,  sets processing to continue at  as above. In this situation,  is false, and  is next, and is true because the Current-Head has been processed for representational referents. When  is true,  is next, and is true if Current-Head has unprocessed modifiers with a CLAUSE-MODIFIER symbol in their SDS positions and there are no unprocessed, modifying subordinate clause, sentence roles with a context referent or sentence roles with the capability of being modified by a clausal abstract noun modifier. Such sentence roles are unprocessed if they have not been processed to determine if they can be modified by an unprocessed modifier with CLAUSE-MODIFIER. If  is true, the referents selected in the processes above failed to have modification relations with all the unprocessed modifiers with the CLAUSE-MODIFIER symbol. In this case, it is possible that the unprocessed modifiers could modify the verb in the subordinated clause modifying the referential referent. The determination of the possible modification by the unprocessed modifiers is performed at Selector . Each such unprocessed modifier is converted to an adverbial if possible through function calls at . If all unprocessed modifiers can not be converted into adverbs, the process is unsuccessfully terminated at . Otherwise, each adverbial is checked to determine if it modifies the subordinate clause verb at Selector . If each such adverbial can modify the verb, the process is successfully completed. If  is true,  is next and sets up the unprocessed modifiers to be processed at  to determine if they can modify the subordinate clause verb.  sets V-W-S to the word sense number of the verb of the subordinate clause modifying the referential referent in Memory ; Ad-Set is set to contain the unprocessed modifiers which did not modify the referential referent or other possible modifiees in the subordinate clause modifying the clausal abstract noun; RET is set to , the step processed after  has completed its processing; and finally,  calls Selector [ABS-MOD, V-W-S, Ad-Set, RET, M-Find]. ABS-MOD is used by  to select the process for the modifiers in Ad-Set. M-Find is the return variable set to true if the modifiers in Ad-Set can modify the verb in the modifying subordinate clause.","After processing is completed at ,  is next and is true if M-Find is true. If  is false, all the unprocessed modifiers could not modify the subordinate clause verb, and the referents selected in the above processes. If  is false,  is next.  sets all direct and indirect modifiers of the clausal abstract noun to UNPROCESSED; CLAUSE-MODIFIER is removed from all such modifiers containing this symbol; all SDS positions created at  are removed from the SDS; the Current-Head is set to the clausal abstract noun being processed; and  sets processing to continue at .  determines if the stated clausal abstract noun has another untried word sense number.  is true if the R-No of the stated abstract noun, the Current-Head, is less than MAX of the stated abstract noun's R-List.  is true if there is an untried word sense number for the stated abstract noun. If  is true,  increments the R-No of the stated clausal abstract noun by 1; Next-M is set to the stated clausal abstract noun; and  sets processing to continue at  as described above.  sets up the stated clausal abstract noun for being processed for the next untried word sense number. , as described above, starts a process which determines the next step to be performed in the word sense number selection process of a concrete noun. If  is false, all word sense numbers of the stated clausal abstract noun have been unsuccessfully tried. If  is false,  processing continues at . , as described above, begins a process to determine if the clausal abstract noun has another elliptical or morphological interpretation, or if another stated word in the clause containing the Current-Head can be reinterpreted. If processing initiated at  fails, the clausal abstract noun has modifiers which have no known relation to the clausal abstract noun, referential referent or other modifying subordinate clause sentence roles, and the Communication Manager is informed of the noun processing error at  as described above. If  is false, or if  is true because the unprocessed modifiers can modify the subordinate clause verb, the Current-Head has been successfully processed, and  stores the information related to this referent and processing proceeds as described above.","Verb Word Sense Number Selection at Selector ","Verb word sense number selection is performed in Selector  utilizing data stored in Clausal Abstract Noun and Clause State Representation Memory . The first phase of verb word sense number selection is typically started by Selector  invoking  to select a possible word sense number for a noun in a sentence role.  selects a word sense number of the noun from its R-List, and  generates requirements, REQ as described above, which must not be violated if the noun's word sense number is to perform its sentence role. As described above, word sense numbers of modifiers of a noun are selected so as not to violate REQ if possible. The first phase of verb word sense number selection is completed after the subject, verb and the stated receivers, i.e., the indirect object and direct object, have their word sense numbers selected. At the end of the first phase of verb word sense number selection, the verb word sense number is partially selected. The format for a verb word sense number is illustrated in . The word sense number of a verb is composed of an identification number, a type number, a specificity number, and an experience number. The identification number component is composed of two parts: the verb identification number composed of a verb class number and a verb member number; and the sentence role identification numbers composed of the doer and receiver(s) word sense identification numbers, i.e., class numbers and optional class member numbers. There can be more than one identification number for a sentence role. The first phase of the verb word sense number selection process selects the verb word sense identification number.","The verb word sense identification number determines the effects implied by the verb word sense number, but does not determine the process for achieving the effects. The format for the data associated with a verb word sense identification number is illustrated in . The data in is process independent, and the data is stored in Clausal Abstract Noun and Clause State Representation Memory . One component of this process independent data is the effects of the verb word sense number. The effects contain the affected elements and their associated effect. The affected elements are typically a sentence role, i.e., a subject, indirect object, direct object, an instrument, etc., or a designated context element. The effect is typically one or more states and their state values which are the result of the verb word sense number effect upon the affected element. The effect could also be to set the state representation of verbs. For example as described for mood, certain verbs imply that a clause is hypothetical as in: \u201cI wish that he came home earlier.\u201d In this example, the subordinate clause direct object is set to have a hypothetical truth value. Another component of this process independent data structure is the result type of a verb. The result type has a value of STATIVE, EVENTIVE, and\/or HABITIVE. The result type is utilized to select the time of truth and time point as described above in the tense, and aspect section of verb function words. The result type of many verbs can be EVENTIVE or HABITIVE depending upon the usage which is set by adverbials in natural language sentences.","Another component of this process independent data structure is a pointer to the set of purposes in Memory  which are associated with the verb word sense number. Memory  contains Clausal Abstract Noun and Clause Purpose entries, and is described below. Purposes, as described above, are related strings and\/or trees of clauses which are related in a purpose. Another component of the process independent data is a pointer to a table in Memory  which contains adverbial subclass entries which are shared with more than one verb sense number without specialization to a single word sense number. The adverbial subclass entry format is described in below. Another component of this process independent data is a designated typical process for the verb word sense number. The typical process is the most common process used to achieve the verb word sense number. The typical process is used when a process is not selected. A process would not be selected in certain cases such as determining expected activity in a hypothetical situation or a situation which has not been stored before, i.e., an unknown situation. The remaining component of the process independent data is the list of process selecting adverbials. This list contains adverbials which are stored in a data structure in Memory , which is described below. These adverbials are associated with the verb word sense identification number, and these adverbials select one or more processes of the verb word sense identification number. Each adverbial in the list has one or more associated type numbers. A verb type number corresponds to a process. The adverbials in the list are used to select a process which achieves the result states which are the effects of the verb word sense number. Process selection is accomplished partially by evaluating the selecting adverbials to determine if their subclass value in the clause or in the context matches the value stored in . If a match is found for one or more of the possible adverbials, the one or more processes common to the one or more matches are selected. When multiple processes are possible, purpose identification methods are utilized to select a process as is described below.","The second phase of verb word sense number selection is started after the first phase is completed, i.e., the word sense numbers of the sentence roles and the word sense numbers of the verbs have been consistently selected. The adverbials stated in the clause containing the verb which is being processed for word sense number selection are evaluated in the second phase of verb word sense number selection. The clause's possible type, specificity and experience numbers are selected in the second phase. The type, specificity and experience number formats are depicted in . Selecting the type is equivalent to selecting a process which achieves the effects of the result states of the verb word sense number. The specificity number has only positive even numbers stored in Memory . A zero specificity number corresponds to the typical case for a given type number's process. An even, non-zero specificity number corresponds to a specific set of instances of a process. An odd, non-zero specificity number corresponds to the best match of an unknown instance of a process. The best match is the odd specificity number's preceding, even specificity number process. A verb word sense number with a zero experience number corresponds to the typical process for the type and specificity number. An experience number is always zero for a zero specificity number. A non-zero experience number corresponds to a specific occurrence of a process. The selection of type, specificity and experience numbers often entails determining adverbial subclass values which are in the context in . The stated and unstated adverbials can broadly: modify the result state value of the affected sentence roles; select a general process; select a specific process; identify the clause occurrence in time or space; comment about the clause; and\/or imply a function unrelated to the verb word sense number such as: clause conjunction, purpose implication, or sentence role modification. Adverbials are selected with a function process as described for English in . The other data structure formats associated with a verb word sense number and the process to select a verb word sense number are described in the remainder of this section.",{"@attributes":{"id":"p-0522","num":"0544"},"figref":["FIGS. 19","FIGS. 19","FIG. 19"],"i":["c","d","e","f ","g ","h","bb","d "],"b":["19","19","19","19","70","19","70","60","70","7000","7000","7000","60","70","7000","70100","7000","7004","7004","60","70","7004","70380","7004","7008","7008","7008","70400","7008","7012","7012","70","7012","70500","7012","7016","7016","18","70","7016","70700","7016","7020","7020","7020","70800","7020","7024","70","7024","70","7024","70","70","70","7024","7028","7024","70","7024","7028","7028"]},"Selection of Main Sentence Role Word Sense Numbers","This subprocess of  is selected when  is true, and processing begins at .  is true if the current invocation opcode is DV-S. If  is true,  is being invoked to determine if a given subject candidate can be a subject of a given verb. For example, Nonfinite Verb Clause, Verbless Clause, and Morphological Word@ Ellipsis Processing, depicted in -for English, calls this subprocess to determine if a noun premodified by a nonfinite verb can be a subject of that nonfinite verb. If  is true,  forms TR-List for the given subject, and forms V-List for the given verb. TR-List contains the noun word sense numbers of the given subject. The word sense numbers are from the context and\/or from Dictionary . TR-List is formed as an R-List is formed at  as described above. The word sense numbers in TR-List and V-List are ordered according to the most recently referenced first order policy. The references are stored in . V-List contains associated verb word sense identification numbers from  and\/or the associated verb word sense numbers in  which meet the application pattern stored with each word sense number's anomaly table in Dictionary . contains a verb's base word table anomaly format for application patterns. This format contains the allowed patterns for the verb's word sense number. The patterns include: transitive, ditransitive (e.g., direct and indirect object), intransitive, passive, instrumental subject, A-Relation sentence roles, and idiomatic word sense number type (e.g., transitive phrasal verb), etc. The first four patterns are detectable after Parsing Step . These and other patterns detectable prior to  are used to select word sense numbers of a verb. V-List only contains word sense numbers which allow the pattern in the current clause. The instrumental subject is a special use for a verb and is described below. A-Relation sentence roles were discussed for ADJ-PREP for example. Idiomatic verbs (e.g., \u201cI called up the mayor.\u201d) were discussed above, and are used for adverbial subclass selection in the sense that an idiomatic subclass is checked for only if the verb word sense number allows it. After ,  determines if a word sense number in TR-List meets a verb word sense number requirement until a match is found, or until all V-List entries have been checked for all TR-List entries. A verb word sense number requirement is meet for a noun identification number if the verb requirement has the noun identification number as part of a requirement. A specified noun word sense number meets a verb word sense number requirement if the specified noun word sense components meet corresponding stored components of the verb requirement. A verb word sense requirement contains these components: noun identification numbers, type numbers, and states and associated values or value ranges. A verb word sense requirement component must be met by a noun word sense number if that component for the noun is known. For example, if a noun word sense number does not have a type number, such a noun word sense number meets type number component requirements of a verb. After ,  is next, and is true if a subject word sense number match was found in . If  is true,  sets Acceptable-Subject to true. If  is false,  sets Acceptable-Subject to false. After  or ,  sets processing to continue at the caller.","If  is false,  is next, and is true if the main sentence roles of the invocation clause containing the invocation subject have been preprocessed for selection of their word sense numbers. The invocation clause is called the Current-Clause. If  is true, a word sense number of a subject was determined at  to be inconsistent with its modifiers as described above. If  is true,  is next and will be described below. If  is false, the Current-Clause has not been processed before, and  is next.  is true if the Current-Clause has one or more coordinated main sentence roles with a phrase implying a respective function. If  is true,  forms a separate clause in the SDS for each coordinated main sentence role constituent that has an associated respective function. The Current-Clause becomes the first separated clause. Other separated clauses will be processed through invocation by Step . After , or if  is false,  is next, and is true if the Current-Clause contains coordinated verbs. If  is true,  sets Mul-V to true; Cur-Conj-Set is set to contain the conjunctions in the verb phrase; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. CONJ performs conjunction processing as described for English in for example. If  is false,  sets Mul-V to false. After processing at CONJ, or after ,  is next, and is true if the Current-Clause contains coordinated subjects. If  is true,  sets Mul-S to true; Cur-Conj-Set is set to contain the conjunctions in the subject phrase; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. If  is false,  sets Mul-S to false. After processing at CONJ, or after ,  is next, and is true if the Current-Clause contains coordinated direct objects. If  is true,  sets Mul-D to true; Cur-Conj-Set is set to contain the conjunctions in the direct object phrase; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. If  is false,  sets Mul-D to false. After processing at CONJ, or after ,  is next, and is true if the Current-Clause contains coordinated indirect objects. If  is true,  sets Mul-I to true; Cur-Conj-Set is set to contain the conjunctions in the indirect object phrase; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. If  is false,  sets Mul-I to false. This completes initial processing of the Current-Clause for respective functions and coordinated main sentence roles.","After processing at CONJ, or after ,  is next.  instantiates variables for processing to initially select the word sense numbers of the main sentence roles.  forms an R-List as described at  for each main sentence role without an R-List; the number of entries in each main sentence role's R-List and MAX is stored at each main sentence role's SDS position with a newly formed R-List; each formed R-List has its associated R-No set to 1; UNPREPROCESSED is stored at each main sentence role's SDS position; a V-List, as described for , is formed for each main verb; an all one's VM-V is formed for each main verb (VM-V is a vector of length equal to the number of word sense numbers in a verb's V-List. VM-V contains a one for each corresponding word sense number in V-List which is a currently possible word sense number interpretation.); each verb's V-List and VM-V is stored at the verb's SDS position; F-Stat is set to SUBJECT; and  sets REPROC to false; F-Stat indicates the type of main sentence role being processed. REPROC is true when the main sentence roles of the Current-Clause have a noninitial combination of word sense number being considered as a possible interpretation. After ,  is next, and is true if the Current-Clause has one or more detectable special usages. An example of a detectable special usage in English is a clause with a passive voice verb. This special usage is detected at Parsing Step . If  is true,  performs the functions associated with SU[Cur-Nat-Lang] associated with each detected special usage. For example, the functions associated with the passive voice look up the active voice version of the clause in  and assign the sentence roles of the stated clause to their role in the active voice clause. For example, if the passive clause has a prepositional phrase with \u201cby\u201d as the preposition, the complement of the prepositional phrase is set to be the subject. Otherwise, the subject is a special R-List composed of indefinite pronouns for each type of pronoun, i.e., \u201csomeone\u201d for person, \u201csomething\u201d for a thing, etc. The stated subject of the Current-Clause is the object. After , or if  is false, processing continues at  which is described below.","After ,  is next.  sets Cur-Sub to be the next UNPREPROCESSED subject in the Current-Clause.  is next, and is true if for each verb of Cur-Sub, Cur-Sub's word sense number for its R-No matches at least one VM-V position's subject word sense number requirements as at  for a VM-V position with a one value of the verb.  is true if the R-No of Cur-Sub matches each of its verbs for word sense number requirements for at least one possible verb word sense number. If  is true,  stores a zero at each position of a Cur-Sub verb's VM-V position corresponding to a subject word sense number, a usage, that did not match verb requirements.  also forms a SZ-V vector for each verb of Cur-Sub. SZ-V is vector of the same length as a VM-V which stores the verb word sense numbers eliminated by Cur-Sub. SZ-V is used to restore the verb's VM-V in the case that a different R-No of Cur-Sub is needed for verb word sense number selection. This case occurs when Cur-Sub needs reinterpretation because it failed word sense number selection at  for example. For each verb of Cur-Sub,  sets SZ-V to be an all zeroes VM-V of a verb; a one is stored at each position of a SZ-V corresponding to a position set to zero by  in the corresponding VM-V.  also stores Cur-Sub's R-No for normal use and all of Cur-Sub's SZ-V's at Cur-Sub's SDS position; and  sets Cur-Sub to PREPROCESSED. If  is false, at least one verb did not have a match with Cur-Sub, and  is next.  forms a VNU-V for Cur-Sub for its R-No. A VNU-V is a vector with a position for each verb of Cur-Sub. For a particular R-No of Cur-Sub, each position that corresponds to a verb with a normal usage match for Cur-Sub is set to one. A normal usage is a subject word sense number matching verb word sense number requirements. All other positions are set to zero.  marks and stores the R-No, the number of normal usages, and VNU-V at Cur-Sub's SDS position. After ,  is next, and is true if Cur-Sub's R-No is less than its MAX. If  is true,  increments Cur-Sub's R-No by one. After ,  is processed as above. If  is true, the next R-No is processed to determine if its word sense number matches the requirements of possible word sense number of Cur-Sub's verb as above. If  is false,  is next.",{"@attributes":{"id":"p-0527","num":"0549"},"b":["70202","70212","70130","70130","60","70130","70101","70130","70104","70130","70130","70130","70138","70138","70138","70138","70212","70138","70140","70140","70218","70218"]},{"@attributes":{"id":"p-0528","num":"0550"},"b":["70212","70206","70208","60","70208","60","20","60"]},"If  is false, or after ,  is next.  processes the possible VNU-V's stored at Cur-Sub in the order of VNU-V's with the lowest R-No first. Possible VNU-V's were stored at  and are not marked DISALLOWED. For all stored VNU-V and R-No combinations,  determines if a combination has special subject uses for the subject's R-No and each verb of Cur-Sub which does not have a normal use in VNU-V, i.e., such a verb has a zero at its corresponding VNU-V position. The combinations are tried until a combination has a special use for each verb without a normal use for an R-No of the subject, or until all combinations have failed to have special uses for each verb. The special uses for subjects are contained in SSU[Cur-Nat-Lang] in . The special uses in SSU[Cur-Nat-Lang] are ordered in the most common special use first.  determines if there is a special use by checking if the conditions of a special usage are met by Cur-Sub and\/or other words in the sentence as described in the previous paragraph for each verb of Cur-Sub without a normal use in VNU-V. If there are multiple verbs without a normal use, different verbs may have different special uses.  determines the special uses of each verb without a normal use until a special use is found for each such verb, or until all combinations, selected in the order used to select the first combination, fail to have a special use for each verb without a normal use. After ,  is next, and is true if a special use is found for each unmatched verb, i.e., a verb with a zero in its VNU-V position. If  is true,  evaluates the functions associated with each special use selected at . The evaluation of these functions may in some cases alter the stated clause as described above. These alterations include: forming additional clauses, changing subjects to complements of adverbial prepositional phrases, etc. If multiple clauses are formed, the first clause becomes the Current-Clause, and other clauses are processed through later invocations by Step .  also stores the following at Cur-Sub's SDS position: each special subject use entry number in SSU, the implied Cur-Sub R-No for each special use, the verb position for each special use, and the VNU-V. After ,  is next as above. If  is false,  is next, and is true if Cur-Sub's R-No is less than its MAX.  is true for the case where a preprocessed subject fails processing at , and is false at  because the subject failed the criteria at  for example. If  is true,  increments R-No as above. If  is false, the Cur-Sub has failed preprocessing, and processing continues at .  begins processing which considers alternate interpretation and processing possibilities.  is used for subject, indirect object, and direct object preprocessing failures.  is described at the Alternate Preprocessing Upon Failure section.","After , the Cur-Sub has been successfully PREPROCESSED as described above. After ,  is next, and is true if there is an UNPREPROCESSED subject in the Current-Clause. If  is true,  is next, and is true if the next UNPREPROCESSED subject has a word sense number which matches a word sense number requirement as at  of a PREPROCESSED subject with a normal or special use. If  is true,  sets the next UNPREPROCESSED subject to PREPROCESSED; the following is stored at this subject's SDS position: the first R-No that matches an R-No of a PREPROCESSED subject, the matched PREPROCESSED subject's position, VNU-V, all special use numbers, special use R-No's and special use verb positions; finally  evaluates any special use functions. After ,  is next as above. If  is false,  is next as above. If  is false, the subjects of the Current-Clause have been successfully processed, and processing continues at .",{"@attributes":{"id":"p-0531","num":"0553"},"b":["70150","70150","70150","70152","70152","70154","70104","70154","70154","70162","70162","60","70162","70162","70162","70162","70154","70164","70164","70164","70164","70156","70156","70158","70158","70154","70156","70156","70160","70160","70250"]},{"@attributes":{"id":"p-0532","num":"0554"},"b":["70250","70164","70250","70250","20","70250","70250","70250","70250","70252","70250","70252","70252","70254","70254","70250","70290","18","70254","70254","70256","70256","70306","70256","70162","70252","70180","70180","60","70252","70250","70180","70182","70182","70310","70182","70158","70158","70180","70262","70262","70262","70262"]},"After , the Cur-I-Obj has been successfully PREPROCESSED as described above. After ,  is next, and is true if there is an UNPREPROCESSED indirect object in the Current-Clause. If  is true,  is next, and is true if the next UNPREPROCESSED indirect object has a word sense number which matches a word sense number requirement as at  of a PREPROCESSED indirect object with a normal or special use. If  is true,  sets the next UNPREPROCESSED indirect object to PREPROCESSED; the following is stored at this indirect object's SDS position: the first R-No that matches an R-No of a PREPROCESSED indirect object, the matched PREPROCESSED indirect object's position, VNU-V, all special use numbers, special use R-No's and special use verb positions; finally  evaluates any special use functions. After ,  is next as above. If  is false,  is next as above. If  is false, the indirect objects of the Current-Clause have been successfully processed, and processing continues at  for direct object processing.",{"@attributes":{"id":"p-0534","num":"0556"},"b":["70300","70300","70300","70302","70302","70304","70104","70304","70304","70306","70306","60","70306","70306","70306","70306","70304","70314","70314","70314","70314","70308","70308","70310","70310","70304","70310","70308","70312","70312","70290"]},{"@attributes":{"id":"p-0535","num":"0557"},"b":["70290","70314","70290","70290","20","70290","70290","70290","70290","70252","70252","70252","70306","70254","70256","70258"]},"After , the Cur-D-Obj has been successfully PREPROCESSED as described above. After ,  is next, and is true if there is an UNPREPROCESSED direct object in the Current-Clause. If  is true,  is next, and is true if the next UNPREPROCESSED direct object has a word sense number which matches a word sense number requirement as at  of a PREPROCESSED direct object with a normal or special use. If  is true,  sets the next UNPREPROCESSED direct object to PREPROCESSED; the following is stored at this direct object's SDS position: the first R-No that matches an R-No of a PREPROCESSED direct object, the matched PREPROCESSED direct object's position, VNU-V, all special use numbers, special use R-No's and special use verb positions; finally  evaluates any special use functions. After ,  is next as above. If  is false,  is next as above. If  or  is false, the direct objects of the Current-Clause have been successfully processed, and processing continues at  for final main sentence role word sense number selection.",{"@attributes":{"id":"p-0537","num":"0559"},"b":["70360","70360","70360","60","70","70360","70362","70362","70362","70362","70362","70"],"figref":["FIG. 19","FIG. 19"],"i":["d ","d"]},"The completed REQ for a main sentence role contains requirements of a word sense number that are separated by OR-Terminals. This construction allows the main sentence role to be processed for all currently possible verb word sense numbers in parallel. Each requirement separated by an Or-Terminal is treated like a product in a sum of products in a Boolean expression in the sense that a REQ is considered to be satisfied as long as at least one requirement separated by an OR-Terminal is meet by its corresponding main sentence role just as a Boolean expression has a logical one value as long as at least one product term evaluates to a logical one. During the checking of a REQ, terms which fail are marked with a zero symbol after a main sentence role has satisfied a REQ for the current word sense number of the main sentence role. In the case where a main sentence role has multiple verbs associated with it, the REQ of each verb, as just described, is combined with an OR-Verb-Separation-Terminal. The OR-Verb-Separation-Terminal is treated like the OR-Terminal with respect to satisfying the combined REQ, i.e., the REQ formed with the REQs of each verb. Thus, if at least one verb's REQ is satisfied, the combined REQ is considered to be satisfied. This seems counter-intuitive for the case where the verbs are joined with AND conjunctions, i.e., the AND conjunction of multiple verbs normally implies that each verb is performed with respect to its main sentence roles. However, this approach is taken because it is possible that there are other factors which nullify the normal implication of an AND conjunction of verbs. These factors include: a verb could have a modal, an adverbial modal, or mood which implies a hypothetical truth value which implies the verb is not actually performed; the source of the sentence could have intended a respective function which in this case means that a main sentence role is not intended to be associated with each stated verb; the source could also have used ellipsis and intended that the main sentence roles do not combine with each verb; and if a main sentence role meets the requirements of at least one of its verbs, this interpretation deserves consideration at the purpose relation level because the main sentence role word sense numbers are selected in a way (because of the way which the R-Lists are formed) which chooses the most likely word sense number with respect to the context and past experience first.","If  is false, the invocation opcode is R, and this preprocessing process was invoked for a receiver, an indirect or direct object. If  is false,  is next, and is true if the invocation sentence role is a direct object. If  is true,  sets Cur-Obj to a direct object. If  is false,  sets Cur-Obj to an indirect object. After  or ,  is next.  first forms an updated REQ, NREQ, by logically ORing the REQ terms of each preceding main sentence role which is in the Current-Clause which contains the invocation sentence role. The REQ term of a main sentence role has a zero symbol stored at a verb word sense number component of the REQ that can not have the current word sense number of the sentence role as a main sentence role of that verb word sense number term with a zero symbol. NREQ, the result of this ORing operation, has zeroes at positions which correspond to verb word sense number component requirements which failed for each preceding main sentence role. Such zero positions correspond to verb word sense numbers that are not allowed for the current word sense number of the main sentence role.  then zeroes VM-V positions of verbs corresponding to zero positions in NREQ. NREQ is formed with ORing as opposed to ANDing for reasoning which is similar to the use of OR-Verb-Separation-Terminals as described above. After the VM-V's have been updated to remove any currently disallowed word sense numbers,  forms a REQ for each sentence role of the Cur-Obj type as described for .  then stores the REQs at each such main sentence role, and returns processing control to the caller.","The remaining type of preprocessing is initiated through the R invocation opcode. This preprocessing is started when  is true. Next, processing continues at .  is true if the invocation object has a REQ.  is true when an object has failed to meet its requirements of its REQ at Selector  for example. If  is false, the object has not been processed at , and processing continues at  which begins the process of selecting the invocation object's REQ as described above. If  is true,  is next, and is true if the invocation object is a direct object. If  is true,  is next.  sets Cur-D-Obj to the invocation direct object from the caller; Cur-D-Obj is set to UNPREPROCESSED; Cur-Obj is set to Cur-D-Obj; for each verb of Cur-D-Obj: zero a position with a one in such a verb's DOZ-V of Cur-D-Obj if the position's corresponding verb word sense number requirements as at  are not matched by a word sense number of each PREPROCESSED main sentence role; for each verb with a nonzero DOZ-V of Cur-D-Obj: the VM-V is set to the bit-wise OR of a verb's VM-V and the verb's DOZ-V of Cur-D-Obj; F-Stat is set to DIRECT-OBJECT; and  sets REPROC to false.  ORs a verb's VM-V with the verb's DOZ-V of Cur-D-Obj because this operation sets the possible verb word sense numbers, that were removed from consideration because the verb word sense numbers' requirements were not matched by Cur-D-Obj's word sense numbers, to be considered again for a new word sense number of Cur-D-Obj.","If the invocation object is an indirect object  is false, and  is next.  sets Cur-I-Obj to the invocation indirect object from the caller; Cur-I-Obj is set to UNPREPROCESSED; Cur-Obj is set to Cur-I-Obj; for each verb of Cur-I-Obj: zero a position with a one in such a verb's IOZ-V of Cur-I-Obj if the position's corresponding verb word sense numbers does not match a word sense number requirement as at  of each PREPROCESSED main sentence role; for each verb with a nonzero IOZ-V of Cur-I-Obj: the VM-V is set to the bit-wise OR of a verb's VM-V and the verb's IOZ-V of Cur-I-Obj; F-Stat is set to INDIRECT-OBJECT; and  sets REPROC to false.  ORs a verb's VM-V with the verb's IOZ-V of Cur-I-Obj because this operation sets the possible verb word sense numbers, that were removed from consideration for a verb through failing to have a requirement match with Cur-I-Obj's word sense numbers, to be considered again for a new word sense number of Cur-I-Obj.","After  or ,  is next, and is true if Cur-Obj has failed all its REQ terms for a non special use REQ. If  is true, Cur-Obj could have the correct R-No, but Cur-Obj is actually a special usage.  is true when the modifiers of Cur-Obj cause its REQ to fail, but the modifiers could still possibly modify Cur-Obj otherwise. Thus, it is possible the R-No of Cur-Obj could be associated with the correct word sense number for a special usage. If  is true,  is next, and is true if Cur-Obj is a direct object. If  is true, special usage preprocessing begins at  which is described above. If  is false, special usage preprocessing begins at  which is also described above. If  is false, Cur-Obj either requires alternative processing if its R-No equals MAX, or Cur-Obj will have its next word sense number preprocessed. Alternative processing is described below. If  is false,  marks a special use R-No's VNU-V which failed its REQ as DISALLOWED, and sets processing to continue at  which determines these possibilities, and was described above.","This completes description of the preprocessing of the main sentence roles except for alternative preprocessing upon failure which begins at  as described above.","Alternative Preprocessing Upon Failure","When the preprocessing of word sense numbers fails to select a main sentence word sense number, there are alternative processes which can recover from this type of failure. The alternatives are basically to restart the preprocessing process for a different combination of main sentence role word sense numbers if possible, or otherwise, to determine if there are alternatives related to ellipsis. The alternative processes begins at  which is true if the first subject's R-No is less than MAX. If  is true a new combination of word sense numbers exists, and  sets all main sentence roles to UNPREPROCESSED, and sets their R-No's to 1 except for the first subject. The R-No of the first subject is incremented by 1.  also sets the VM-V of each verb of the Current-Clause to all ones; REPROC is set to true; F-Stat is set to SUBJECT; and  sets processing to continue at  as described above. If  is false,  is next, and is true if the first subject has its SOURCE set to CONTEXT and is not a pronoun or is not a specific known reference. If  is true, the first subject may have additional untried word sense numbers because its current R-List only contains word sense numbers in Context Memory . If  is true,  forms a complete R-List as described above for selector  for , and sets SOURCE to MEMORY. After ,  is next as above. If  is false,  is next.  is true if the first subject has a nonfinite verb clause, verbless clause and morphological word@ ellipsis restart address. If  is true,  is next, and is true if ESUB is false and F-Stat equals SUBJECT, or if EOBJ is false and F-Stat equals DIRECT-OBJECT.  is true when the main sentence role that failed the selection of its word sense number is not ellipted in the clause with ellipsis. If  is true, no further alternative processing is possible, and  is next.  informs the Communication Manager of an F-Stat word sense number selection failure.","If  is false, processing nonfinite verb clause, verbless clause and morphological word@ ellipsis begins at . The processing determines if the ellipted subject and\/or object are suitable.  is true if F-Stat equals SUBJECT. If  is true,  sets Acceptable-Subject to false. If  is false,  sets Acceptable-Subject to true. Acceptable-Subject indicates the suitability of the subject, and it is used in ellipsis processing as described above for STEP . After  or ,  is next, and is true if EOBJ is true.  is true if the object is ellipted. If  is true,  determines if a word sense number of Cur-Obj meets a word sense number requirement as at  of a verb word sense number of each verb of Cur-Obj.  determines if Cur-Obj could possibly be an object in the Current-Clause. Note that the subject is not processed for a new word sense number as an object because all subject word sense numbers have been determined to not be in the Current-Clause. After ,  is next, and is true if a requirement match was found at . If  is true, or if  is false,  sets Acceptable-Object to true. If  is false,  sets Acceptable-Object to false. After  or ,  prepares for further nonfinite verb clause, verbless clause and morphological word@ ellipsis.  sets -Return to , sets RESTART to the ellipsis restart address at the first subject's SDS position, and calls ELLIP[RESTART, -RETURN].","After ellipsis processing,  is next, and is true if RES-STATUS equals SUCCEED.  is true if ellipsis processing has selected another replacement for the ellipted elements. If  is true,  is next.  forms an R-List for each replaced element and sets each replaced element's R-No to 1. After ,  is next, and is true if a subject or verb was replaced. If  is true, the entire clause requires preprocessing, and  is next.  decrements the first subject's R-No by 1 to remain consistent with . Also, all ellipsis and non-clausal morphological words following the one or more replaced elements are set to their first alternative so that all possibilities are considered with the one or more replaced elements.  also sets processing to continue at  which is described above. If  is false,  is next, and is true if an indirect object was replaced. If  is true, all main sentence roles which have been preprocessed are still valid because they precede the replaced indirect object and all succeeding main sentence roles have not been preprocessed, and processing is set to continue at  which is described above.  begins the preprocessing of the replaced indirect object. If  is false, only the ellipted object of the clause was replaced, and processing is set to continue at  which is described above.  begins the preprocessing of the replaced direct object.","If  is false, the ellipsis processing was not successful in replacing the ellipted elements, and  is next.  is true if there is a morphological word with an untried interpretation at a subject preceding the failing word sense number or at the failing word sense number.  is not true for morphological word@. If  is true, it may be possible to try a new word sense number for the failing word sense number after a different morphological interpretation has been made. If  is true,  sets RESTART to the restart address stored at the word with an untried alternate morphological interpretation nearest to the failing word sense number, and -Return is set to  which is described above. After ,  sets BASE to the base word of the morphological word at RESTART; P-Type is set to INVOCATION-RETURN; and  calls MORPH[RESTART, P-Type, BASE, -Return].  sets up the next morphological interpretation to be considered for preliminary verb word sense selection processing. If  is false,  is next, and is true if the Current-Clause is implied by a morphological word@, and if the morphological word@ has another untried interpretation. If  is true,  sets -Return to , sets RESTART to the address stored at the morphological word@, and sets the Current-Clause to be unpreprocessed.  is described above.  begins the preprocessing of the entire Current-Clause. After ,  is next as described above. If  is false, preprocessing has failed, and  is next as above.",{"@attributes":{"id":"p-0548","num":"0570"},"b":["70268","70268","70270","70270","70270","70271","70","70282","70","70271","70282","70270","70272"]},"Implied Adverbial Processing","Implied Adverbial Processing is utilized for the case where certain modifiers of a clausal abstract noun or the adjective modified by a prepositional phrase are to be converted to adverbs which are tested for modifying a given verb word sense number. These cases were described above in the Prepositional Modification of Adjectives processing section and the Clausal Abstract Noun processing section. Implied adverbial processing is invoked when  is true.  is true if the current invocation opcode is ABS-MOD or ADJ-COMP-MOD. If  is true, processing continues at .  sets up parameters for morphological processing.  sets Cur-Mod to the next UNPREPROCESSED modifier in the invocation modification set; BASE is set to the base word of Cur-Mod; AFFIX is set to the affixes of Cur-Mod or NULL if there are none; SOURCE is set to the part of speech of BASE; DESTINATION is set to ADVERBIAL; -Return is set to ; P-Type is set to GENERATE; and  calls MORPH[Cur-Nat-Lang, P-Type, BASE, AFFIX, SOURCE, DESTINATION, -Return]. As was described above for English, MORPH, the morphological processing component of Morphological Processing Step , attempts to generate an adverbial utilizing Cur-Mod as the base. After processing at MORPH,  is next, and is true if the SDS position of Cur-Mod contains FAIL. If  is true,  is next.  sets M-Find to false, and returns processing to the Caller. M-Find is an invocation parameter which is false if the Implied Adverbial Processing has failed, and M-Find is true if processing is successful. If  is false,  sets Cur-Mod to be PREPROCESSED. After ,  is next, and is true if the invocation modification set contains an UNPREPROCESSED modifier. If  is true,  is next as above. If  is false, all modifiers have been PREPROCESSED.","If  is false,  sets Cur-V-W-S to the word sense number of the invocation verb. Next,  is true if the invocation modification set contains an UNPROCESSED modifier. If  is false, processing has been successfully completed, and  is next.  sets up parameters for processing Conflicting Adverbial Sets. A Conflicting Adverbial Set has more than one adverbial which modifies the same modifiee word sense number, and each adverbial in this set has exactly the same adverbial semantic role, but has a different adverbial subclass value. For example, \u201cThe piston moved up and down.\u201d has a conflicting adverbial set containing {\u201cup\u201d, \u201cdown\u201d}. The conflicting set is processed by forming separate clauses.  sets Verb-W-S to Cur-V-W-S for consistency with the conflicting adverbial process. -Back, the processing location which succeeds conflicting adverbial processing, is set to . Finally,  sets processing to continue at  which begins conflicting adverbial processing.  is true if Verb-W-S has a conflicting adverbial set modifying Verb-W-S. If  is true  forms new clauses to replace the current clause with conflicting adverbials such that each clause has the same constituents before conflicting adverbial processing except that no new clause has a conflicting adverbial. The new clauses are joined by the same conjunction joining the conflicting adverbials removed to form the new clause. If there is no conjunction joining the adverbials, the corresponding new clauses are joined with an \u201cand\u201d conjunction. After , or if  is false,  sets processing to continue at -Back. In this case, -Back is  which is next.  sets M-Find to true, and returns processing control to the Caller.","If the invocation modification set contains an UNPROCESSED modifier,  is true. If  is true,  sets Cur-Mod to the next UNPROCESSED modifier in the invocation modification set. An UNPROCESSED modifier has been converted to an adverb through morphological processing, but an UNPROCESSED modifier has not had one of its associated morphological function successfully evaluated. After ,  is next, and is true if Cur-Mod has an unevaluated function type from MORPH. If  is false, implied adverbial processing has failed, and  is next as above. If  is true,  sets RESTART to the morphological restart address in Cur-Mod's SDS position; P-Type is set to INVOCATION-RETURN; BASE is set to the base word of Cur-Mod; -Return is set to ; and  calls MORPH[RESTART, P-Type, BASE, -Return]. MORPH evaluates the morphological functions of the next unevaluated function type as described above for Morphological Processing Step  for English. MORPH will return a RESULT-TYPE, which is an ADDRESS-DESCRIPTOR, PHRASE, or CLAUSE, and a corresponding RESULT, which is a data structure corresponding to the RESULT-TYPE as was described above for Step . After MORPH  is next, and is true if RESULT-TYPE equals ADDRESS-DESCRIPTOR. If  is true, RESULT contains a pointer to a set of adverbial subclasses associated with Cur-Mod's transformation to an adverbial. If  is true,  is next, and determines if RESULT's associated adverbial subclasses match an adverbial subclass of the Cur-V-W-S. After ,  is next, and is true if a match was found at . If  is false,  is next as above. If  is true,  sets Cur-Mod to modify the invocation verb with the matched RESULT subclass, and sets processing to continue at  as above.","If RESULT-TYPE does not equal ADDRESS-DESCRIPTOR,  is false, and  is next.  is true if RESULT-TYPE equals PHRASE. If  is true, the RESULT is a phrase of one or more words, and  is next.  is true if RESULT is a prepositional phrase. If  is true,  and  set up a call to Selector . This call will cause  to try to select a word sense number of the prepositional complement of RESULT which meets at least one adverbial subclass's requirements for the preposition of RESULT as was described above for -. If  is true,  sets the RESULT prepositional complement's R-No to 1, and its R-List[R-No] is set to NULL. After ,  sets -Return to ; Current-Prep is set to the preposition of RESULT; Cur-Rel is set to NULL; SUBCLASS is set to NULL; I is set to 1; -Start is set to ; RES is set to PREP-COMP; ADV-Status is set to -FIND; and  calls [Current-Prep, Cur-Rel, R-No, R-List[R-No], SUBCLASS, I, -Start, RES, ADV-Status]. After  selects a word sense number of the prepositional complement or fails,  is next, and is true if RES equals found. If  is false, the current morphological evaluation failed and,  is next as above. If  is true, the prepositional phrase of RESULT is processed for adverbial modification of Cur-V-W-S next at .  stores SUBCLASS, the set of subclasses which the prepositional complement's word sense number meets requirements for, at the prepositional complement of RESULT; Current-Adverbial is set to RESULT; Verb-Subclass is set to contain a pointer to the prepositional adverbial subclasses of Cur-V-W-S; -Return is set to ; and  calls ADV[Cur-Nat-Lang, Current-Adverbial, Verb-Subclass, -Return].","The entry for the adverbial subclasses of a verb' word sense number which are used to select a subclass of a modifying adverbial is depicted in . Verb-Subclass is set to a set of such entries at  for example. The adverbial subclasses are partitioned for prepositional and adverb modifiers. An adverbial subclass entry contains an entry number, a specific semantic role, a source requirement, and value descriptors. The entry number identifies the entry for access. The semantic role is a label for the value which is set by the functions of the modifying adverbial subclass. As described above, the range of semantic roles are broadly: time, space, process, modality, (point of) reference, purpose, conjunction, verb word sense number selection, and degree. A specific semantic role indicates the specific aspect of a broad semantic role. The source requirement is one or more states, properties, parameters, and\/or functions which the modifying adverbial subclass must satisfy. The value descriptors contains: a required value range for the value set by the functions of the modifying adverbial; a process application vector for each segment of the required value range; an optional value range translation function; and an optional pointer to purposes related to a value range. As was described above for for English, the adverbial selection and evaluation process, ADV, selects the first adverbial subclass of a modifying adverbial which: has a matching semantic role with the modifiee, meets source requirements of the modifiee, and evaluates to an adverbial subclass value which meets a required value range of the modifiee. The semantic role, source requirements and value range of the modifiee are in an entry as depicted in for a verb. As described above for adverbials, the optional value range translation function generates a numerical value for certain adverbials which do not have any associated numerical measure. The process application vector is used to select a process or type of the associated verb word sense number. A special symbol is used for a process application vector which selects any possible process. The optional pointer to a set of related purposes is used for an adverbial which implies purpose relations.","After processing has been completed at ADV,  is next, and is true if RESULT is successfully processed at ADV, i.e., RESULT has an adverbial subclass which is compatible with a selecting adverbial subclass of Cur-V-W-S. If  is true, the word sense number of the head of the prepositional complement noun phrase must be selected to match its subclass requirements at  as described above,  is next.  sets SUBCLASS to the adverbial subclass requirements of the subclass selected at ADV for the Current-Adverbial; -Return is set to ; -Start is set to ; RES is set to FOUND; ADV-Status is set to -FIND; and  calls [Current-Prep, SUBCLASS, -Start, RES, -Return, ADV-Status].  selects the word sense number for the complement, and returns processing to  after completion.  is true if the complement of RESULT is fully processed for its word sense number. If  is true, processing continues at  which sets RESULT to modify the invocation verb as above. If  is false, or if  is false,  is next, and is true if the R-No of the prepositional complement of Result is less than its MAX. If  is true, processing continues at  which calls  to select a new word sense number for the prepositional complement of RESULT as above. If  is false,  is next, and is true if there are other untried adverbial subclass interpretations of Cur-Mod. If  is true,  is next, and sets up parameters for restarting ADV at the RESTART address stored at Cur-Mod by ADV previously.  sets -Return to , and calls ADV[RESTART, Current-Adverbial, Verb-Subclass, -Return]. After processing at ADV,  is next as above. If  is false, processing continues at  as above.","If RESULT is not a prepositional adverbial, RESULT is an adverb phrase, and  is false. If  is false,  is next, and sets up parameters for processing RESULT at ADV.  sets the Current-Adverbial to RESULT; Verb-Subclass is set to the pointer to the adverb subclasses of Cur-V-W-S; -Return is set to ; and  calls ADV[Cur-Nat-Lang, Current-Adverbial, Verb-Subclass, -Return]. After processing at ADV,  is next, and is true if RESULT is successfully processed at ADV. If  is true,  is next as above. If  is false,  is next as above.","If the RESULT-TYPE does not equal PHRASE at , RESULT-TYPE equals CLAUSE, and  sets Cur-Clause to RESULT, P-Type is set PROCESS-CLAUSE; -Return is set to , and  calls [Cur-Nat-Lang, P-Type, Cur-Clause, -Return] to process the RESULT clause as has been discussed above for clauses in general. After processing initiated at  is successfully completed or fails,  is next, and is true if RESULT has been successfully completed. If  is true,  sets RESULT to modify the invocation verb with the conjunction implied by RESULT, and sets processing to continue at  as above. If  is false, processing continues at  as above. This completes the description of the Implied Adverbial Processing.","Clausal T-Relation Processing","Clausal T-Relation processing is utilized to determine if a T-Relation exists between two given clauses. The given clauses have been processed for word sense number selection prior to the starting of Clausal T-Relation processing. Step  invokes the Adjective Preposition Function Selection process for the adjective modified by a prepositional phrase with a clausal complement for example. This process is invoked at the Adjective Preposition Function Selection for English as described above. For English, a T-Relation between clauses can occur in a clause with an adjective modified by a prepositional phrase where: the preposition implies a T-Relation, and the subject and prepositional complement are clauses and\/or clause equivalents. An example of a clausal T-Relation occurs in EX1: \u201cFor Jack to spend money is painful like for us to break a leg.\u201d Also, a clausal T-Relation can occur in a clause with an ellipted adjective as in EX2: \u201cSailing in the winter is like burning money during a cold shower.\u201d In this last example, the preposition \u201clike\u201d is equivalent to \u201csimilar to\u201d, and this is an adjective, \u201csimilar\u201d, modified by a preposition, \u201cto\u201d. The ellipsis in this example is detected in Parsing Step , and the known replacement is made during Ellipsis Processing Step  as described above. A clausal T-Relation occurs between a source clause and a destination clause. A clausal T-Relation is similar to a T-Relation between concrete nouns in that there are aspects related to the source clause which are transferred to the destination clause with the relation between the source aspect and its corresponding destination aspect set by the function associated with the preposition modifying the adjective, or associated with the adjective in the case when the adjective does not have a state relation, e.g., \u201csimilar\u201d. As described above, a T-Relation between concrete nouns implies state and property values of the source concrete noun to be transferred to the destination concrete noun with the relation between the source value and its corresponding destination value typically set by the function associated with the preposition modifying (typically) the destination concrete noun. The aspects of the clausal T-Relation are described during the T-Relation process described next.","If the current invocation opcode is T-Rel at ,  is true, and processing continues at  which begins the processing of a clausal T-Relation.  sets T-Desc to NULL; Re-ADV-S to false; when there are multiple T-Relations,  separates each T-Relation into a sentence composed of the T-Relation, the source clause, and the destination clause with the sentences joined by the conjunction joining the words implying the T-Relations; and  sets T-REL to the word implying the T-Relation of the first sentence. T-Desc contains the labeled clausal T-REL aspects and their addresses. These aspects are to be transferred, i.e., the destination aspect is set to have a relation to the source aspect. Re-ADV-S is true when the given word sense number of the verb in the source clause has been changed. When Re-ADV-S is true, the adverbials in the source clause must be selected to be compatible with the new word sense number. In EX1, the source clause is \u201cfor us to break a leg\u201d, and the destination clause is \u201cFor Jack to spend money\u201d. After ,  is next, and is true if the stated or ellipted adjective modified by a prepositional phrase, or the equivalent word in the phrase implying the T-Relation in other natural languages, has a state representation. Adjectives typically have state representations, but some adjectives only have functions such as: \u201csimilar\u201d, \u201csame\u201d, \u201cdifferent\u201d, etc. If  is true, the adjective modified by a prepositional phrase is normally an adverbial which modifies the verbs in the source and destination clause as is in EX1. If  is true,  combines the adverbial subclasses of the source and destination clause verbs' word sense numbers which have the same semantic roles into Com-Sub. Com-Sub contains adverbial subclasses which have the same semantic role for both the source verb word sense number(s) and the destination verb word sense number(s). After ,  is next, and is true if Comb-Sub is not empty, i.e., there are common adverbial subclasses. If  is true,  sets up parameters for calling the Implied Adverbial Processing of  as described above.  sets the Invocation-Modification-Set to the adjective modified by a prepositional phrase or the equivalent word in the implication of T-REL; Invocation-Verb is set to the first source clause verb; Invocation-Verb-W-S-Subclass is set to contain a pointer to Com-Sub; Invocation-Opcode is set to ADJ-COMP-MOD; Caller-Return is set to , and  calls [Invocation-Opcode, Invocation-Modification-Set, Invocation-Verb, Invocation-Verb-W-S-Subclass, M-Find, Caller-Return]. For this invocation of the Implied Adverbial Processing, an adverbial subclass is selected to be compatible with respect to semantic roles of the adverbial subclasses of the verbs of the source and destination clause. Also, the adverbial subclass will meet the adverbial subclass requirements of the first source clause verb. In subsequent, processing described below, the selected adverbial subclass will be tested for meeting the adverbial subclass requirements of any other source clause verbs and of the destination clause verbs. If the selected subclass fails, another subclass will be selected in processing which is described below. In the Implied Adverbial Processing, M-Find is set to true if the adverbial subclass matches the first source clause verb's adverbial subclass requirements. Otherwise, M-Find is false, and another adverbial subclass must be selected.","After Implied Adverbial Processing,  is next, and is true if M-Find is true. If M-Find is false, the selection of another adverbial subclass is required, and processing continues at .  is also next if  is false which occurs when Com-Sub is empty. Another adverbial subclass is selected by considering other source and destination verb word sense numbers if there are any untried ones. As will be described below, when a verb is processed for final word sense number selection, all possible verb word sense numbers compatible with the main sentence roles are stored at the verb's SDS position.  is true if the destination clause verbs have an untried combination of word sense numbers. If  is true,  sets the destination clause verbs to the next untried combination of verb word sense numbers, and the adverbials in the destination clause are set to UNPROCESSED. After ,  is next as described above. If  is false,  is next and is true if the source clause verbs have an untried combination of word sense numbers. If  is true,  sets the source clause verbs to the next untried combination of verb word sense numbers; the adverbials in the source clause are set to UNPROCESSED; Re-ADV-S is set to true; the word sense numbers of the destination verbs are set to the initial combination of word sense numbers; all other verb word sense number combinations of destination clause verbs are set to untried; and  sets the adverbials in the destination clause to PROCESSED. After ,  is next as described above. If  is false, all source and verb word sense number combinations have failed, and  is next.  appends the following to T-Desc: NEGATIVE-ADJ-TO-ADV-T-RELATION; the initial verb word sense numbers of the source and clause verbs are restored; and  then sets processing to continue at  which is described below. The symbol, NEGATIVE-ADJ-TO-ADV-T-RELATION, in the T-Desc implies that the adjective or equivalent word is intended not to be applicable as an adverbial modifying destination verbs as would occur in a contrary statement such as: \u201cWorking with Bill is hard like taking candy from a baby.\u201d","Note that a similar construction such as \u201cWorking with Bill is hard.\u201d has not been discussed before. Such constructions are processed as follows. The sentence role which is a clause or clause equivalent is processed as a separate clause by Step  as described for clauses in general above. Step  then calls Implied Adverbial Processing to determine if the adjective modifies the verb in the sentence role clause. If Implied Adverbial Processing fails, Step  calls Purpose Identifier  to determine if the adjective has a purpose relation to the clause sentence role. The purpose relation and the word sense number of the adjective are also selected by Purpose Identifier  as is described below. For example, \u201cWorking with Tom is painful.\u201d has a cause purpose relation between \u201cWorking with Tom\u201d and the state abstract noun, \u201cpain\u201d.","If M-Find is true at  after Implied Adverbial Processing, processing continues at .  is true if Re-ADV-S is true or if there are multiple source clause verbs.  is true for the case when the initial source clause verbs has been changed, i.e., Re-ADV-S is true, or is true when a source verb has not been checked to determine if the adverbial subclass of Cur-Mod, the adverbial converted from an adjective by Implied Adverbial Processing, meets subclass requirements of the unchecked verbs. This latter condition is true when there are multiple source clause verbs. If  is true,  is next, and sets C-Clause to the source clause. After ,  sets up parameters for the unprocessed adverbials of C-Clause to be processed for Pre-Sel, the Pre-Selected Verb Word Sense Number Process of , which is described below. Pre-Sel selects adverbial subclasses to match verb adverbial subclasses of previously selected verb word sense numbers.  assigns Cur-Mod to modify the C-Clause verbs; Cur-Mod is set to UNPROCESSED; Current-Sentence is set to C-Clause; Invo-Opcode is set to Pre-Selected-Word-Sense; Caller-Return is set to ; and  calls [Invo-Opcode, Current-Sentence, C-Success, Caller-Return]. C-Success is the returned parameter which is true when Pre-Sel has succeeded in selecting compatible adverbial subclasses. After processing is completed at Pre-Sel,  is next, and is true if C-Success is true. If  is true,  is next, and is true if C-Clause equals the source clause. If  is true, or if  is false,  sets C-Clause to the destination clause. After ,  is next as above. If  is false, i.e., processing was unsuccessful at Pre-Sel, processing continues at  which selects other possible verb word sense numbers as above.","If  is false, both the source and destination clauses have been processed for all adverbials including Cur-Mod, and  is next.  is true if the Cur-Mod semantic role is a purpose. If  is true,  appends the following to T-Desc for each verb of the source clause: SOURCE-CUR-MOD-PURPOSE address. Each address appended at  is to the purpose implied by the modification of Cur-Mod and associated with the word sense number of a verb of the source clause. The information appended to the T-Desc is used to select the information of the aspect to be transferred from the source to the destination. After ,  is next, and is true if an appended address has an associated exceptional purpose information category. The exceptional information category contains a purpose which describes an unusual piece of information associated with a state representation such as: a state, an adverbial subclass, a clause, or a purpose. As described above, a purpose is one or more clauses which contain experience or knowledge. Purposes have a descriptor such as exceptional information. For example, in EX1, the source clause, \u201cfor us to break a leg\u201d, has \u201cpainfully\u201d (after \u201cpainful\u201d is converted to an adverbial) modifying \u201cto break\u201d. In this case, \u201cpainfully\u201d is in a purpose relation to \u201cto break\u201d. The purpose relation is that the state, \u201cpainful\u201d, is a result state of \u201cto break a leg\u201d. Associated with \u201cpainful\u201d is the exceptional information in English: \u201cThe owner's state value is nearly extreme.\u201d This exceptional information is often intended in such English constructions, and is a plausible interpretation of the exaggerated degree of \u201cpain\u201d \u201cFor Jack to spend money\u201d. Note that \u201cpainful\u201d is a morphological word with the state abstract noun, \u201cpain\u201d as a base word. The state associated with \u201cpainful\u201d is the state associated with \u201cpain\u201d. If  is true,  appends the following to succeed each address with an exceptional information category: PRECEDING-ADDRESS\/EXCEPTIONAL-PURPOSE-INFORMATION. This symbol implies that the preceding address in T-Desc should have its exceptional information considered for transfer to the destination clause verb. If  was false, Cur-Mod has a non-purpose adverbial subclass, and  is next.  appends the following to T-Desc for each verb of the source clause: SOURCE-CUR-MOD-ADVERBIAL-SUBCLASS address. Each address is to the verb's adverbial subclass implied by Cur-Mod. After ,  is next as above.","After , or if  is false, processing of an implied adverbial in clausal T-Relation has been processed, and  is next.  also follows  if  is false which happens when an implied adverbial is not possible.  is true if the source and destination clauses have one or more of the same result states associated with there respective verb word sense numbers.  is true when a result state is to be emphasized in the clausal T-Relation. In EX2, \u201cSailing in the winter is like burning money during a cold shower.\u201d Both \u201csailing\u201d and \u201cburning money during a cold shower\u201d have the result state \u201cto spend money\u201d and the result state of \u201cbecoming wet\u201d. If  is true,  appends the following to T-Desc for each common result state: COMMON-RESULT-STATE-EMPHASIS address. Each address is to a common result state of the source verb. After , or if  is false,  is next, and is true if a result state has exceptional purpose information. If  is true,  appends the following at T-Desc to succeed each such result state: PRECEDING-ADDRESS\/EXCEPTIONAL-PURPOSE-INFORMATION. After , or if  is false,  is next, and is true if the source process has exceptional purpose information. In EX2, \u201cburning money during a cold shower\u201d has this exceptional purpose information for the process in English: \u201cThe process (to burn material in wet conditions) is very difficult\u201d. If  is true,  appends the following to T-Desc: SOURCE-PROCESS\/EXCEPTIONAL-PURPOSE-INFORMATION address. The address is to the source process purpose address. After , or if  is false,  is next, and is true if there are other aspects of Cur-Nat-Lang to consider for transferring. If  is true,  appends the labeled addresses of the other possible aspects to T-Desc. The applicability of the purpose aspects such as a Cur-Mod adverbial purpose or exceptional purpose information will be determined in Purpose Identifier . The applicability of a Cur-Mod adverbial is the setting of the destination Cur-Mod adverbial subclass value to a level which corresponds to the source Cur-Mod adverbial subclass value, and the applicability of Cur-Mod has already been checked at the process called at . After , or if  is false,  stores T-Desc at the word implying T-REL, and  sets processing to continue at .  is true if there is another sentence formed at  which has not been processed. If  is true,  sets T-REL to the T-Relation of the next unprocessed sentence; T-Desc is set to NULL; Re-ADV-S is set to false; and  sets processing to continue at  which is processed as above. If  is false, processing is completed, and  returns control to the caller. This completes the description of Clausal T-Relation Processing.","Completion of Verb Word Sense Number Selection","Possible Verb Word Sense Number Selection","If the current invocation opcode is COMPLETION at ,  is true, and processing continues at . This verb word sense number completion process selects the possible verb word sense numbers of a clause. Also, this process also separates a stated clause with coordinated verbs and\/or coordinated main sentence roles into separate clauses when necessary. After verb word sense number selection and any clause separation, Pre-Sel is started to select compatible adverbial subclasses, process mood, and select the possible processes of each verb word sense number, i.e., the possible type numbers are selected for each verb word sense number.",{"@attributes":{"id":"p-0568","num":"0590"},"b":["70700","70700","70700","70700","70700","70702","70702","70704","70704","70704","70706","70706","70708","70708","70708","70702"]},"If  is false, i.e., there are no ambiguous main sentence roles,  is next, and is true if AMB is true. If  is true, there were ambiguous main sentence roles that were removed, but the AND-Result-Vector was all zeroes again at . In this case, the ambiguous main sentence roles were not the cause of not finding a verb word sense number, and  replaces the removed ambiguous main sentence roles, and sets AMB to false. After , or if  is false,  is next, and is true if a hypothetical value for Cur-Verb is implied by mood, subordinate conjunction, etc. as described above in the Mood section. If  is true,  stores the symbol, @HYPO\/NOT-POSSIBLE-NOW, at the SDS position of Cur-Verb. This symbol implies that the clause formed with the subject AND-group at S, the verb at V, the indirect object AND-group at IO, and direct object AND-group at DO is an acceptable interpretation only because it has a hypothetical value implied by a hypothetical indicator, a modal, or a modal adverbial. If  is false,  is next, and is true if Cur-Verb has a modal in its verb phrase. If  is true,  is next, and sets up parameters for evaluating the modal.  sets -Return to ; Cur-Modal is set to the modal in the verb phrase; and  and calls MODAL[Cur-Nat-Lang, Cur-Verb, Cur-Modal, -Return]. The modal process selects and sets the truth value implied by Cur-Modal as described above. After MODAL is completed,  is next, and is true if truth value of Cur-Verb has been set to less than true. If  is true,  is next as above. If  is false, or after , processing continues at  which begins a process of separating the main sentence role AND-groups into acceptable clauses. The process starting at  is described below. If  is false, i.e., there is not a modal in the verb phrase,  is next, and is true if Cur-Verb is modified by an adverbial with a modal semantic role. If  is true,  sets up parameters for the modal adverbial to be evaluated.  sets Current-Adverbial to the adverbial with a modal semantic role that modifies Cur-Verb; Pre-ADV is set to true; -Back is set to ; Verb-Subclass is set to the modal adverbial subclasses of the Cur-Verb; and  sets processing to continue at . Pre-ADV is set to true so that only the modal adverbial, Current-Adverbial, is evaluated at the process starting at . The process starting at  evaluates any form of adverbial, i.e., non-prepositional phrase, prepositional phrase and clause, and this process is described below. Also, when Pre-ADV is true, the adverbial evaluation process returns processing to -Back,  in this case, upon completion. After adverbial evaluation,  is next as above. If  is false, i.e., there is no modal adverbial, processing continues at  which is described below.","If  is false, AND-Result-Vector has at least verb word sense number position that has all its main sentence roles meeting such a word sense number's REQ. Thus, there is at least one possible interpretation of these main sentence roles and Cur-Verb. If  is false,  is next, and is true if AMB is true. If  is true, an interpretation was made possible by removing the ambiguous main sentence roles at , and  is next.  bit-wise ANDs each removed constituent's REQ with AND-Result-Vector; the removed constituents' REQs that do not form a zero vector when bit-wise ANDed with AND-Result-Vector are replaced into their original respective main sentence role AND-groups because they are compatible with a possible interpretation; the removed constituents that form a zero vector when bit-wise ANDed with AND-Result-Vector are placed into their respective alternate main sentence role AND-groups because they are incompatible with a possible interpretation; conjunctions with ambiguous constituents in Cur-S-AND, Cur-IO-AND and Cur-D-AND are set to UNAMBIGUOUS; and  sets AMB to false. After , or if  is false,  sets Clause-M[S,V,IO,DO,1] to contain the symbol, @TRUE. This symbol implies that the clause formed with the subject AND-group at S, the verb at V, the indirect object AND-group at IO, and direct object AND-group at DO has at least one possible interpretation. The truth value of a clause with @TRUE is processed later as is described below. After ,  is next.  sets Clause-M[S,V,IO,DO,2] to contain AND-Result-Vector, and  stores the In-Clause symbol at the SDS position of each main sentence role in S, IO, and DO. This In-Clause symbol indicates that a main sentence role is in at least one clause of the sentence. After ,  is next, and is true if the vector, [S, V, IO, DO], equals the vector, [SAG, VAG, IOAG, DOAG]. If  is true, all the clauses that can be formed with the main sentence role AND-groups have been processed, processing continues at , which begins the Pre-Sel process which is described below. If  is false,  selects the next untried combination of main sentence role AND-groups and verb; S, V, IO, DO are set to the value corresponding to the selected combination; and  reassigns Cur-S-AND, Cur-Verb, Cur-IO-AND, and Cur-DO-AND as needed for the selected combination. After ,  is next as above.","Clause Separation Processing","Clause Separation Processing begins at . This processing is invoked because a possible verb word sense number was not selected in the above process. In this case, it always possible to separate the constituents in one or more main sentence role groups into a separate clause such that a possible verb word sense number can be selected with the separated main sentence role constituents. Separation is equivalent to assigning a different word sense number to the stated verb for each separated clause. Separation is possible because there must be at least one main sentence role with multiple constituents, and there is at least one verb word sense number that can be selected for the separated clause because of the way the REQ terms were formed at  and . Otherwise, if each main sentence role had only one constituent, or there was not at least one verb word sense number possible for a separated clause, a possible verb word sense number would not have been selected, and this COMPLETION process would never be reached because no compatible word sense number would have been selected at  for a main sentence role. However, even though a separated clause can be formed, it is possible that a constituent in a coordinated sentence role can not be contained in a clause. This separation approach is taken because each main sentence role constituent word sense number was selected for the most likely word sense number at  because of the method of forming R-Lists. Thus, the separated clause deserves consideration for purpose identification because it is the most likely interpretation. Also, even if a constituent does not belong to a clause, this may still be the intended interpretation.","Separation is a possible interpretation because the source of the sentence could have used ellipsis to form the sentence as in: \u201cJohn and Mary had a baby.\u201d In this example \u201chad\u201d has two word senses, and the equivalent clauses are: \u201cJohn is the father of a baby, and Mary bore a baby.\u201d There is a possible problem with this separation process: it is possible that a main sentence role constituent is not included in any separated clause. This possibility is checked for, and processed by first attempting to select a new word sense number for such a constituent. If a new word sense number is not selected, the constituent is assumed to be an incorrect or an unknown usage, and purpose identification is performed. In this situation, the Communication Manager has these options: rejecting the interpretation after purpose identification, requesting information about such a constituent, or let the assumption about improper or unknown usage be clarified later, etc. There is one other possibility for a main sentence role which does not have its word sense number selected. If an entire AND-group in a main sentence role, which has an OR-group with constituents with selected word sense numbers, does not have its word sense numbers selected, the verbs of the clauses containing such an AND-group are set to have a negative truth value. The negative truth value is set because when main sentence role AND-groups are ORed, only one AND-group is logically required to be true. For example, consider the statement: \u201cJohn or Mary went to Dallas today.\u201d, and assume that the context is \u201cMary is in Chicago today.\u201d. The statement is true even though only \u201cJohn\u201d can make the statement true, and \u201cMary\u201d could not perform the statement, given her location. Thus, the separated clause with \u201cMary\u201d is equivalent to: \u201cMary did not go to Dallas today.\u201d In this case, when an entire AND-group fails to have its word sense numbers selected, the constituents are assumed to be an impossible OR-group constituent. The separation process is described in this section. The word sense number reselection process is described in the Pre-Selected Word Sense Number section.",{"@attributes":{"id":"p-0573","num":"0595"},"b":"70750"},{"@attributes":{"id":"p-0574","num":"0596"},"b":["70750","70750","70752","70752","70752","70754","70754","70756","70754","70766","70766","70768","70768","70768","70770","70756","70752","70756","70756","70756","70758","70760","70758","70766","70756","70768","70760","70760","70760","70762","70764","70762","70766"]},"After , , or ,  computes Result-V as described above, and  is next. If  is false, all the main sentence role constituents except for those in Clause-Sep may combine to form a clause with one or more constituents of Clause-Sep, and  is next.  forms separate clauses with all main sentence role constituents except that only one constituent in Clause-Sep is used in a separate clause.  first individually bitwise ANDs the Cur-Verb REQ terms of each constituent in Clause-Sep with Result-V to form a Match-V for each constituent. A non-zero Match-V of a Clause-Sep constituent can form a separate clause.  stores non-zero Match-V and the associated Clause-Sep constituent positions at Hit-M. Also, a zero is stored at each such constituent's position in Mis-V. A one is stored at the Mis-V position of a Clause-Sep constituent with a zero Match-V. After ,  is next, and is true if Mis-V is all zeroes. If  is true, each Clause-Sep constituent formed a separate clause. If  is false, some constituents in the current clause will not be in all separated clauses. In this case, a separate clause formation policy is performed to form intended clauses. A general purpose separate clause formation policy is described next starting at .","If  is false, or if Next-S-R equals  at , no separate clause with all the constituents in the current clause plus one constituent in Clause-Sep can be formed, and  is next.  sets Mis-V to have a length equal to the number of constituents in Cur-DO-AND with a 1 at each position corresponding to a constituent of Cur-DO-AND, and  sets Hit-M, with the same length as Mis-V, to all zeroes.  sets up variables for forming separate clauses with at least one constituent in the subject, indirect object and direct object AND-groups. After , or if  is false,  is next, and  implements a general purpose separate clause formation policy.  performs the following for each constituent in Clause-Sep with a one in Mis-V: such a current Clause-Sep constituent's Cur-Verb REQ terms are bitwise ANDed with all other main sentence role constituents' Cur-Verb REQ terms to form a result vector, M-V. However, the constituents' REQ terms are selected according to the following policy. For the first component of the policy, only one constituent from each main sentence role is selected for ANDing to form a possible clause, i.e., an ANDing which results in a non-zero M-V, before multiple constituents in a single main sentence role are ANDed, and constituents are first selected according to the respective position of the current constituent in Mis-V. For example, if the current Clause-Sep constituent in Mis-V is in the first position of its main sentence role, the constituents in the first position of the other main sentence roles are selected for ANDing. If a respective position for other main sentence roles does not exist, or has been ANDed and zeroed M-V, the next position of such a main sentence role, if any, is selected for ANDing. For the second component of this policy, a selected constituent is not bitwise ANDed with the current M-V if the resulting M-V value is all zeroes except for the following condition. A resulting M-V is set to all zeroes if all sentence role constituents of a particular type, i.e., subject, indirect object, or direct object, zero a resulting M-V. This policy realizes a general purpose separate clause formation policy. The respective sentence role positions are selected for the formed clauses because the source could have intended respectively formed clauses, but the source ellipted the respective indicating adverbial. Non-respective sentence role positions are included in the formed clauses because the source could have utilized a new word sense number or new special usage for a particular constituent. The respective case is possibly distinguished during plausibility processing at Purpose Identifier  processing which is described below. The respective case is distinguished if non-respective constituents are not plausible in their sentence roles. Also, an alternate separate clause formation policy can be selected for an application.",{"@attributes":{"id":"p-0577","num":"0599"},"b":["70776","70776","70778","70778","70776","70778","70778","70776","70780"]},"If  is true, each Clause-Sep constituent formed a separate clause. If  is true, or after ,  stores all separate clauses represented in Hit-M.  sets Clause-Sep-Start to be CS; for each constituent in Clause-Sep which is in Hit-M: store In-Clause at the Clause-Sep constituent's SDS position; Clause-Sep-M[CS,0] is set to the type of main sentence role in Clause-Sep, Clause-Sep-M[CS,1] is set to the current constituents Match-V; Clause-Sep-M[CS,2] is set to the current constituent's position in Clause-Sep; and CS is incremented by 1, and this process is repeated for the next constituent in Hit-M if any. After all the Clause-Sep constituents in Hit-M have been processed for storage in Clause-Sep-M,  sets N-Mat to the number of constituents stored in Hit-M which is equivalent to the number of separate clauses formed with all main sentence role constituents except that there is only one Clause-Sep constituent. After ,  is next, and is true if N-Mat is greater than zero. If  is true,  stores In-Clause at the SDS position of each main sentence role in the S, IO, and DO AND-groups except for the Clause-Sep AND-group. After , or if  is false,  is next.  stores a record of the number of clauses formed at  and at .  sets C-Sep-D[CSD,0] to Clause-Sep-Start; C-Sep-D[CSD,1] is set to N-Mat; C-Sep-D[CSD,2] is set to Mis-V-Start; C-Sep-D[CSD,3] is set to N-Mis; Clause-M[S, V, IO, DO, 1] is set to the symbol @CLAUSE-SEPARATION; Clause-M[S, V, IO, DO, 2] is set to CSD; CSD is incremented by 1; and  sets processing to continue at  which selects the next constituents to be processed as described above.  stores the information needed to access the separated clauses.  is the last step in the Clause Separation Processing. This completes the description of Clause Separation Processing.","Verb Phrase Processing for a Verb Word Sense Number","Initial Verb Word Sense Number Selection","Verb phrase processing for verb word sense number selection assumes that the possible verb word sense numbers have been selected for a clause as was described in the previous section for example, or assumes that the verb word sense number has been pre-selected as would occur for idioms or the repeating of a previously stated clause for example. After the possible verb word sense numbers have been selected by the Possible Verb Word Sense Number Process for an invocation sentence,  is false, and  sets processing to continue at , which begins the verb phrase processing for a verb word sense number.  is also next if the invocation opcode equals PRE-SELECTED-WORD-SENSE at , and then processing continues at . The process starting at  has been called Pre-Sel above. Verb phrase processing selects compatible adverbial subclasses, processes ellipted indirect objects, processes mood, and selects the possible processes of each verb word sense number, i.e., the verb word sense number types.  sets up parameters for this processing: Cur-Verb is set to the first verb of the sentence; and  sets C-SUCCESS, which is true when this process has been completed successfully, is set to false.","After ,  is next, and is true if the clause containing Cur-Verb has a pre-selected verb word sense number. If  is false, the first possible word sense number must be selected, and  is next.  is true if Cur-Verb has more than one Clause-M row with AND-Result-Vectors. Cur-Verb has multiple Clause-M rows with AND-Result-Vectors when Cur-Verb has multiple combinations of main sentence roles with non-zero AND-Result-Vectors after  because one or more main sentence roles have more than one AND-group. After ,  is next, and is true if all the Clause-M rows of Cur-Verb with AND-Result-Vectors are unprocessed. In this case, the first possibility checked is that each main sentence role combination of Cur-Verb with non-zero AND-Result-Vectors has the same Cur-Verb word sense number. If  is true,  ANDs the non-zero AND-Result-Vector's of Clause-M rows of Cur-Verb to form Cur-Result-V. Each row ANDed at  has the first column of its row with a value of @TRUE i.e., a row with a non-zero AND-Result-Vector in column 2. After ,  is next, and is true if Cur-Result-V is non-zero. If  is true, the main sentence role combinations of Cur-Verb have one or more common verb word sense numbers, and  is next.  sets all Clause-M rows just ANDed at  to PROCESSED, and stores @COMBINED at the SDS position of Cur-Verb.","If  or  or  is false,  is next. If  is false, there is an unprocessed clause. If  is false, there are more than one Clause-M rows for Cur-Verb that have an AND-Result-Vector, and Cur-Verb's combinations had a zero Cur-Result-V during a previous invocation of the initial verb sense number selection process. If  is false, Cur-Result-V is a zero vector. The first condition occurs if there is a single unprocessed clause of Cur-Verb with an AND-Result-Vector, and\/or there are one or more unprocessed clauses with @SEPARATION. For this first condition, if Cur-Verb has more than one clause, each is being separately processed because all the clauses could not have a single verb word sense number. Otherwise, the single clause is processed separately. If  is next, and in all but the condition that Cur-Verb has a single clause, Cur-Result-V for a combination of main sentence roles of Cur-Verb is zero, and the assumption is made that Cur-Verb is ellipted in the sense that each of Cur-Verb's main sentence role combinations requires a copy of Cur-Verb because the single stated Cur-Verb has more than one word sense number. This assumption is made because the current interpretations of main sentence roles are the most likely ones as described above. This assumption implies that each combination of main sentence roles of Cur-Verb is processed separately, and this process begins at .  is true if Clause-M has an UNPROCESSED row of Cur-Verb with an AND-Result-Vector, i.e., a row without @CLAUSE-SEPARATION at its column 2. If  is true,  sets Cur-Result-V to the AND-Result-Vector of the next UNPROCESSED row of Clause-M, and sets this row to PROCESSED. Other main sentence role combinations of Cur-Verb, if any, are processed after the current sentence role combination is completely processed for verb word sense number selection as is described below. If  is false,  sets Cur-Result-V to the next UNPROCESSED separated clause's Match-V or M-V of the next UNPROCESSED Clause-M row with @CLAUSE-SEPARATION at its column 2, and sets this separated clause to PROCESSED, and if this is the last separated clause of the row, the row is also set to PROCESSED. If the clause containing Cur-Verb has a pre-selected word sense number at ,  is true, and  sets Cur-Result-V to the pre-selected word sense number of Cur-Verb in the next UNPROCESSED clause of the invocation sentence. After , , , or ,  sets Verb-W-S to the first word sense number of Cur-Result-V. This completes Initial Verb Word Sense Number Selection.","Adverbial Selection for a Verb Word Sense Number","Adverbial Selection for a Verb Word Sense Number begins at . After initial word sense number selection is completed at ,  is next.  sets up processing for coordinated adverbials.  sets -Back to , and sets processing to continue at .  is true if the UNPROCESSED adverbials modifying the verb of Verb-W-S are coordinated. If  is true,  sets up parameters for conjunction processing.  sets Cur-Conj-Set to the SDS positions of the conjunctions of the Verb-W-S adverbials; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. After processing at CONJ,  is next.  computes the sum of products of the multi-level conjunctions joining adverbials as described for coordinated modifiees in -.  also forms an additional copy of the Verb-W-S clause for each \u201cOR\u201d conjunction in the sum of products including the generation of a Clause-M row(s); an AND-group of adverbials is assigned to the original and copied clauses' verb word sense numbers; and  sets processing to continue at -Back. If  is false,  also sets processing to continue at -Back, which is  in this case.",{"@attributes":{"id":"p-0584","num":"0606"},"b":["70840","70840","70841","70841","70841","70910","70910","70840","70842","70842","70844","70844","70845","70845","70850","70845","70846","60","60","70846","70","70848","60","60354","70","70846","60","60"]},"After  selects a word sense number of the prepositional complement or fails,  is next, and is true if RES equals FOUND. If  is false, the current prepositional phrase evaluation failed and,  is next, and is true if Pre-ADV is true. For example, Pre-ADV is true when  requests this adverbial evaluation selection process to determine if an adverbial is a modal modifying a verb as described above. If  is true, the process has failed, and  sets Pre-ADV to false, and sets processing to continue at -Back. If  is false, the Current-Adverbial's preposition does not have a known relation for a known word sense number of the prepositional complement, and  informs the Communication Manager of an adverbial preposition processing error for the Current-Adverbial. If  is true, the Current-Adverbial prepositional phrase is processed for selecting adverbial subclasses which are compatible with Current-Adverbial's preposition and prepositional complement, and  is next.  sets Verb-Subclass to the prepositional subclasses of Cur-Verb except when Pre-ADV is true, or when the Current-Adverbial modifies an adverbial. If Pre-ADV is true, or if Current-Adverbial modifies an adverbial, Verb-Subclass has already been set.  also stores Verb-Subclass at the SDS position of the complement of the Current-Adverbial. If  is false, i.e., the Current-Adverbial is not a prepositional phrase,  is next, and is true if the Current-Adverbial is a clause. If  is true, processing continues at  which is described below. If  is false, the Current-Adverbial is an adverb, and  sets Verb-Subclass to the adverb subclasses of Cur-Verb except when Pre-ADV is true, or when the Current-Adverbial modifies an adverbial. If Pre-ADV is true, or if the Current-Adverbial modifies an adverbial, Verb-Subclass has already been set.  also stores Verb-Subclass at the SDS position of the complement of the Current-Adverbial. After  or ,  processing continues at .","After the verb subclasses have been selected, and after adverbial subclasses have been selected for a preposition and its complement at , the next step of adverbial processing is performed at .  sets up parameters for ADV to select an adverbial subclass which is compatible with a verb subclass in Verb-Subclass as described above for English for example.  sets -Return to , and calls ADV[Cur-Nat-Lang, Current-Adverbial, Verb-Subclass, -Return]. After processing at ADV,  is next, and is true if the Current-Adverbial is successfully processed at ADV. If  is true,  is next and is true if Current-Adverbial is a prepositional phrase. If  is false, adverbial processing is completed, and  is next.  sets the Current-Adverbial to be PROCESSED, and sets processing to continue at .  begins the processing of adverbials modifying other adverbials.  sets T-Cur-Adverbial to be the Current-Adverbial. After ,  is next, and is true if T-Cur-Adverbial is modified by an UNPROCESSED adverbial. If  is true,  sets Verb-Subclass to the adverbial modification subclasses of T-Cur-Adverbial; the Current-Adverbial is set to the next UNPROCESSED adverbial modifying T-Cur-Adverbial; and  sets processing to continue at  which is described above.  sets up parameters for the adverbial modifier of T-Cur-Adverbial to be processed utilizing the adverbial process described above for adverbials modifying verbs. However, as described in the adverbial processing section, adverbial modifiers are processed with the same process regardless of their modifiees. The different type of modifiee does select the possible adverbial modification subclasses, i.e., Verb-Subclass. In English, only degree adverbials can modify an adverb, and this restriction further selects the possible adverbial modification subclasses. If  is false, there is no unprocessed adverbial modifying an adverbial, and processing continues at .  is true if Pre-ADV is true. If  is true,  sets Pre-ADV to false, and sets processing to continue at -Back. If  is false,  begins the processing of the next adverbial, if any, as described above.","If  is true, the Current-Adverbial is a prepositional phrase, and  sets up parameters for Selector  to select the word sense number of the head of the prepositional complement noun phrase of the Current-Adverbial to match its subclass requirements as described above.  sets SUBCLASS to the adverbial subclass requirements of the subclass selected at ADV for the Current-Adverbial; -Return is set to ; -Start is set to ; RES is set to FOUND; ADV-Status is set to -FIND; and  calls [Current-Adverbial, SUBCLASS, -Start, RES, -Return, ADV-Status].  selects the word sense number for the complement, and returns processing to  after completion.  is true if the complement of the Current-Adverbial is fully processed for its word sense number. If  is true, processing continues at  as is described above. If  is false,  is next. In another path leading to , if  is false, i.e., because the Current-Adverbial was unsuccessfully processed at ADV,  is next, and is true if the Current-Adverbial is a prepositional phrase. If  is true, or if  is false,  is next, and is true if the R-No of the prepositional complement of the Current-Adverbial is less than MAX. If  is true,  sets up parameters for  to find adverbial subclasses starting at the next possible word sense number of the prepositional complement of the Current-Adverbial.  sets -Return to ; Cur-Rel is set to NULL; SUBCLASS is set to NULL; I is set to 1; -Start is set to ; RES is set to PREP-COMP; ADV-Status is set to -FIND; and  calls [Current-Prep, Cur-Rel, R-No, R-List[R-No], SUBCLASS, I, -Start, RES, ADV-Status]. After  selects a word sense number of the prepositional complement or fails,  is next, as described above. Note that  is similar to , but  leaves Current-Prep, R-No, and R-List[R-No] at their current values so that the next possible word sense number of the complement is processed. If  is false,  is next, and is true if there are other adverbial interpretations of the preposition for the adverbial subclasses of the complement selected at . If  is true,  sets -Return to , and restarts ADV[RESTART, Current-Adverbial, Verb-Subclass, -Return].  restarts ADV and  is next as above after ADV is completed.","If  is false, the Current-Adverbial is an adverb which does not have a known adverbial relation to Cur-Verb's Verb-W-S. If  is false, the Current-Adverbial is a prepositional phrase which does not have a known adverbial relation to Cur-Verb's Verb-W-S. If  is false, or if  is false, there are possible elliptical, morphological, or alternate Cur-Verb word sense number possibilities for processing the Current-Adverbial starting at .  is true if the Current-Adverbial has an Ellipsis RESTART address at its SDS position. If  is true,  sets -Return to , sets RESTART to the ellipsis restart address at the Current-Adverbial's SDS position, and calls ellipsis processing for the current natural language at ELLIP[RESTART, -Return]. After processing at ELLIPSIS,  is next, and is false if RES-STATUS does not equal FAILURE. If  is false, processing continues at  which begins processing the next UNPROCESSED adverbial as described above, which is the new ellipsis replacement in this case. If  is false, or if  is false,  is next, and is true if the Current-Adverbial is morphologically formed and has an alternate morphological interpretation. If  is true,  sets up parameters for the evaluation of the next interpretation.  sets RESTART to the morphological restart address in Current-Adverbial's SDS position; P-Type is set to INVOCATION-RETURN; BASE is set to the base word of the Current-Adverbial; -Return is set to ; and  calls MORPH[RESTART, P-Type, BASE, -Return]. MORPH evaluates the morphological functions of the next unevaluated function type as described above for Morphological Processing Step  for English. MORPH will return a RESULT-TYPE, which is an ADDRESS-DESCRIPTOR, PHRASE, or CLAUSE, and a corresponding RESULT. After processing at MORPH,  is next, and is true if RESULT-TYPE is a clause. If  is false,  sets the Current-Adverbial to RESULT, and sets processing of the adverb or adverbial prepositional phrase to continue at  as above. If  is true, or if  is true,  sets the Current-Adverbial to be the RESULT. After ,  sets up parameters for Step  to process the Current-Adverbial clause.  sets Cur-Clause to the Current-Adverbial; P-Type is set PROCESS-CLAUSE; -Return is set to , and  calls [Cur-Nat-Lang, P-Type, Cur-Clause, -Return] to process the Current-Adverbial clause as has been discussed above for clauses in general. After processing at  is successfully completed or fails,  is next, and is true if the processing of the Current-Adverbial clause has been successfully completed. If  is true,  sets the Current-Adverbial clause to modify the clause of Cur-Result-V through the conjunction implied by the Current-Adverbial and sets processing to continue at  as above. If  is false, processing continues at  as above.","If the Current-Adverbial is not morphologically formed or does not have an alternate morphological interpretation,  is false, and processing continues at .  determines if there is an alternate modifiee for the Current-Adverbial.  is true if the Current-Adverbial is an AMBIGUOUS coordinated modifier. As described above in the Constituent Conjunction Processing section, in certain cases a coordinated constituent modifier can be in one of two groups of modifiers. Here the assumption is that since the Current-Adverbial failed to modify the current word sense number of the current modifiee, possibly the Current-Adverbial will modify a different word sense number of the current modifiee. If  is true,  sets the Current-Adverbial to be an UNAMBIGUOUS modifier; all modifiers of the Current-Adverbial are set to UNPROCESSED; all elliptical and\/or morphological alternatives are set to untried; the Current-Adverbial is assigned to modify the alternate word sense number of the current modifiee; and  sets processing to continue at . If  is false, processing continues at .","When  has been reached, the Current-Adverbial does not have a known modification relation to its modifiee.  is true if Pre-ADV is true. If  is true,  sets Pre-ADV to false, and sets processing to continue at -Back; If  is false,  is next, and is true if the Current-Adverbial modifies Cur-Verb. If  is true, the Current-Adverbial may modify a different word sense number of Cur-Verb, and  is next.  is true if Cur-Result-V has an UNTRIED verb word sense number. If  is true,  sets Verb-W-S to TRIED at Cur-Result-V and at AND-Result-Vector; Verb-W-S is set to the next UNTRIED word sense number in Cur-Result-V; all the adverbials modifying Cur-Verb are set to UNPROCESSED; and  sets processing to continue at  which is processed as described above. If  is false,  is next, and is true if the Cur-Verb word sense number of Cur-Result-V has @COMBINED at the SDS position of Cur-Verb.  is true when Cur-Result-V was formed for the combination of all main sentence role combinations of Cur-Verb, i.e., Cur-Result-V was formed with the assumption that each main sentence role combination of Cur-Verb has the same Cur-Verb word sense number. When  is true, this assumption may be false, and  is next.  sets all Clause-M rows of Cur-Verb with an @TRUE or @HYPO\/NOT-POSSIBLE-NOW in column 1 of such a row to UNPROCESSED, and sets processing to continue at  as described above. Setting these rows to unprocessed allows each combination of main sentence roles of Cur-Verb to be processed with separate word sense numbers for Cur-Verb. If  or  is false,  informs the Communication Manager of an adverbial processing error for the Current-Adverbial at the Cur-Result-V clause. This completes the adverbial processing component of the verb word sense number selection COMPLETION process.","Unassigned Sentence Role Processing","After adverbial processing has been completed for a clause of Cur-Result-V with Verb-W-S, i.e. Cur-Clause, at ,  sets processing to continue at , which begins Unassigned Sentence Role Processing. A sentence role constituent is unassigned if it does not have In-Clause at its SDS position. A sentence role constituent is unassigned because the constituent did not combine with its other sentence role constituents and was assumed to be part of an ellipted clause of a stated verb with multiple word sense numbers at  after preceding processing as described above. Then in subsequent processing at  or , a currently unassigned constituent was not assigned to any clause. The purpose of Unassigned Sentence Role processing is to determine if an assigned sentence role constituent has an alternate word sense number which would allow it to be assigned to a clause and given the In-Clause symbol. After ,  is next, and is true if Cur-Clause has not been stated before and has a main sentence role constituent without In-Clause at its SDS position. If  is false,  is next.  sets up parameters for conflicting adverbial processing.  sets -Back to .  also sets processing to continue at  which detects and processes conflicting adverbials as described above. After conflicting adverbial processing is completed, processing continues at -Back as described above. In this case -Back equals  which selects the next process.  is true if there is another UNPROCESSED clause in Clause-M. If  is true,  sets Cur-Verb to the verb of the next UNPROCESSED clause of the sentence, and sets processing to continue at  as is described above. If  is false, processing continues at  which begins ellipted indirect object, mood and process selection processing, and which is described below. If  is true, all unassigned sentence role constituents in Cur-Clause will begin reprocessing for their word sense numbers at .  stores ASSUMED-UNKNOWN\/IMPROPER-USAGE at each main sentence role constituent of Cur-Clause without In-Clause at its SDS position.  also stores a one in REPROC at the position of a sentence role constituent in Cur-Clause without In-Clause. REPROC is a Boolean vector with a one at the positions of sentence role constituents of Cur-Clause which are to be reprocessed for assignment. Finally,  stores a zero in REPROC at the position of a sentence role constituent in Cur-Clause with In-Clause.","After ,  is next, and is true if there an UNREPROCESSED sentence role constituent in REPROC. If  is false, unassigned constituent processing is completed, and  is next as described above. If  is true,  sets the Current-Head to be the next UNREPROCESSED constituent in REPROC; T-MAX is set to the Current-Head's MAX; T-R-No is set to the Current-Head's R-No; T-REQ is set to the Current-Head's REQ; REQ is set to the requirement term of Verb-W-S; and  sets T-R-List to be the Current-Head's R-List. After ,  is next, and is true if there is an UNRETRIED word sense number of the Current-Head which meets the word sense number requirements of Verb-W-S. Here, UNRETRIED means a word sense number of Current-Head which has not been tried for unassigned constituent reprocessing. In this reprocessing, every word sense number of the Current-Head is considered because using only the requirement term of Verb-W-S could alter the selection of the Current-Head's word sense number. If  is true,  sets up parameters for Selector  to select a word sense number for the Current-Head.  sets R-No to the next UNRETRIED entry in T-R-List which meets the word sense number requirements of Verb-W-S; R-List is removed the Current-Head's SDS position and is replaced with T-R-List[R-No]; C-R-No is set to R-No; R-No and MAX are set to 1; all modifiers of the Current-Head are set to UNPROCESSED for noun word sense number selection; Invo-Opcode is set to -Find; -Return is set to ; -Start is set to ; REQ-SEL, a Boolean variable which causes  to process the Current-Head without selecting a new REQ term when it is true, is set to true; and  calls [Current-Head, -Start, Invo-Opcode, REQ-SEL, -Return]. Selector  processes the modifiers of the Current-Head for the Current-Head's only word sense number in R-List using Verb-W-S's REQ term. The processing at  is as is described above. However,  processes the Current-Head for a single word sense number and a REQ term for only Verb-W-S. These restrictions on R-List and REQ cause  to determine modifiers of the Current-Head which meet these restrictions if possible. Effectively, this causes the modifiers of the Current-Head to have word sense numbers which insure that the Current-Head can meet its sentence role requirements of the Cur-Verb if possible.","After processing at ,  is next, and is true if a word sense number has been selected for the Current-Head and each of its modifiers. If  is true, unassigned constituent processing has been successful, and  is next.  restores the Current-Head's R-List and MAX components of the Current-Head's SDS position; the Current-Head's R-No is set to C-R-No; the Current-Head is assigned to each clause to which it belongs syntactically, and to which the Current-Head meets the REQ of such a clause's verb; ASSUMED-UNKNOWN\/IMPROPER-USAGE is removed from the Current-Head's SDS position; and In-Clause is stored at the Current-Head's SDS position for each clause in which it meets the REQ of such a clause's verb. After ,  stores a zero at the Current-Head's position in REPROC, and sets processing to continue at  which is described above. If  is false, processing continues at  which determines if the Current-Head has another possible word sense number as described above for the case when  is true. If  is false, reprocessing has failed, and  restores R-List, R-No, REQ and MAX components of the Current-Head's SDS position; and sets processing to continue at .  is true if the Current-Head's entire AND-group has failed unassigned constituent reprocessing. If  is false, processing continues at  as above. If  is true,  stores a pointer to the descriptor of Cur-Clause and stores FAILED-SENTENCE-ROLE at the SDS position of each constituent in the Current-Head's AND-Group.  marks the Current-Head's AND-group as not being included in Cur-Clause. The Current-Head's AND-group can not perform its sentence role, but other AND-groups (joined by an \u201cor\u201d conjunction for example) in the Current-Head's sentence role may be able to perform the sentence role in Cur-Clause. This latter possibility is tested at . After ,  is next, and is true if each sentence role constituent with the same sentence role as Current-Head in Cur-Clause has a pointer to the descriptor of Cur-Clause and FAILED-SENTENCE-ROLE at its SDS position. If  is true, Cur-Clause is false because it is not possible for the constituents of the Current-Head's sentence role to perform Cur-Clause. If  is true,  sets the truth value of Verb-W-S portion of Cur-Verb's SDS position to FALSE-BY-SENTENCE-ROLE. This case can be an acceptable interpretation when there are other clauses in the invocation sentence which have verbs with verb word sense numbers which do not have a FALSE-BY-SENTENCE-ROLE truth value. The case where all verb word sense numbers have a FALSE-BY-SENTENCE-ROLE truth value is not an acceptable interpretation, and is tested for below at . After , or if  is false, processing continues at  as above. This completes the description of Unassigned Sentence Role Processing.","Ellipsis, Modal, Mood, and Process Selection Processing","The final component of the COMPLETION process of verb word sense number selection is Ellipsis, Modal, Mood, and Process Selection Processing. This processing is started when all clauses have been processed for initial verb word sense number selection and adverbial processing. In this case  is next, and is false. If  is false,  sets processing to continue at .  is true if the invocation sentence has a verb in a clause with a verb word sense number without a FALSE-BY-SENTENCE-ROLE truth value, and if every main sentence role constituent in at least one AND-group of every main sentence role of such a clause with a verb word sense number without a FALSE-BY-SENTENCE-ROLE truth value has In-Clause stored in its SDS position. If  is true, there is at least one valid interpretation for the invocation sentence among the one or more possible interpretations. If  is false, COMPLETION processing has failed to find a valid clause, and  is next.  sets C-Success to false, and returns processing control to the caller of the COMPLETION process. Depending upon the circumstances of the processing at the caller, the caller could invoke the Communication Manager to determine how to proceed upon the failure(s) detected at . If  is true,  sets up parameters for this process: Cur-Verb is set to the first verb of the invocation sentence without a FALSE-BY-SENTENCE-ROLE truth value; Cur-Verb-W-S is set to the first word sense number of Cur-Verb's first Cur-Result-V without a FALSE-BY-SENTENCE-ROLE truth value; and  sets Cur-Clause to the clause associated with Cur-Verb-W-S's Cur-Result-V. After ,  is next, and is true if Cur-Clause has been stated before with the same modals and mood. If  is true,  marks and stores a pointer to the verb of the stated clause in Context Memory  at the Cur-Verb-W-S portion of Cur-Verb's SDS position, and  sets processing to continue at  which is described below.","If  is false,  is next, and is true if Cur-Verb-W-S requires an indirect object which is ellipted in Cur-Clause. If  is true,  is next, and is true if Context Memory  has Cur-Verb-W-S in a previously stated clause. If  is true,  is next and is true if such a preceding clause has an indirect object which is different than the subject of Cur-Clause. If  is true,  assigns the indirect object of Cur-Clause to be the most recently stated indirect object different than the subject in such a clause in . If  or  is false,  assigns the indirect object of Cur-Clause to be the indefinite pronoun with general reference associated with Cur-Verb-W-S as is stored in the sentence role requirements as generally depicted in . After  or ,  stores the symbol, @V-W-S-Detected-Ellipsis at the SDS position of the indirect object of Cur-Clause. The selected indirect object can be verified by checks added to Purpose Identifier  by Plausibility and Expectedness Checker  for a particular application. Such an application has a process to replace the indirect object if necessary.","If  is false, or after ,  is next, and is true if Cur-Verb-W-S has an unprocessed modal verb. If  is true,  sets up parameters for processing the modal verb: Cur-Modal is set to the next unprocessed modal verb of Cur-Verb-W-S; -Return is set to ; and  calls MODAL[Cur-Nat-Lang, Cur-Modal, -Return]. After processing at MODAL as described above for example in English,  sets a pointer to the truth value of Cur-Modal and a pointer to a conjunction of Cur-Modal, if any, at Cur-Verb-W-S's portion of Cur-Verb's SDS position, and sets Cur-Modal to processed. After ,  is next as above.","If there are no unprocessed modal verbs at ,  is false, and  is next.  looks up the result type of Cur-Verb-W-S. The result type has a value of STATIVE, EVENTIVE, OR HABITIVE, and the value is stored in Cur-Verb-W-S's Process Independent Data Structure as depicted in , or an adverbial in Current-Clause has set a result type value at Cur-Verb's SDS position with a function.  marks and stores the result type value in Cur-Verb-W-S's portion of Cur-Verb's SDS position if the result type value has not already been stored there, and  sets processing to continue at .  is true if Cur-Verb-W-S has the imperative mood and is unprocessed for this mood. If  is true,  sets Criteria-Set to the Imperative-Set[Cur-Nat-Lang] which is stored at ; -Return is set to ; and  calls MODAL[Cur-Nat-Lang, Cur-Modal, Criteria-Set, -Return]. In this case, Cur-Modal is a parameter to store the imperative truth value. After processing at MODAL,  is next.  stores Cur-Modal's truth value at Cur-Verb-W-S's portion of Cur-Verb's SDS position, and sets Cur-Verb-W-S as processed for the imperative mood. After , or if  is false,  is next, and is true if Cur-Verb-W-S has the subjunctive mood and is unprocessed for this mood. If  is true,  stores a hypothetical truth value at Cur-Verb-W-S's portion of Cur-Verb's SDS position, and sets Cur-Verb-W-S as processed for the subjunctive mood. After , or if  is false,  is next and is true if Cur-Clause is a subordinate clause main sentence role of a verb word sense number implying a hypothetical truth value for Cur-Clause, and Cur-Verb-W-S is unprocessed for this implication. If  is true,  stores a hypothetical truth value relation pointer to the verb word sense number implying the hypothetical truth value at Cur-Verb-W-S's portion of Cur-Verb's SDS position, and sets Cur-Verb-W-S as processed for hypothetical clause implication.","After , or if  is false,  is next, and is true if Cur-Ver-W-S has its type, i.e., its process selected. If  is true, processing continues at  which is described below. If  is false,  determines if Cur-Clause and\/or the context has stated adverbial subclass values which select processes of Cur-Verb-W-S.  is accomplished by comparing the process selecting adverbial subclass values of Cur-Verb-W-S, which are stored in the process independent data as depicted in general in , with the adverbial subclasses in Cur-Clause and in . After ,  is next, and is true if process selecting adverbial subclass matches were found at . If  is true,  sets Process-Set to the ones selected at . If  is false,  sets Process-Set to all the processes of Cur-Verb-W-S. The processes of Cur-Verb-W-S are the general process descriptors associated with the type numbers of Cur-V-W-S. Such process descriptors of Cur-V-W-S describe the generalized process which implements the result states implied by Cur-Verb-W-S and are depicted in ",{"@attributes":{"id":"p-0599","num":"0621"},"figref":"FIG. 19","i":"f ","b":"150"},"Each type number has a general process descriptor entry whose corresponding verb word sense number has a zero specificity number and a zero experience number. The general process descriptor entry of a type number has a joint\/separate pointer which points to criteria which is used to determine whether the processes with this type number are performed separately or jointly for a main sentence role with multiple constituents. These criteria are described below. A general process descriptor entry also has a set of main sentence role pairs which contain each main sentence role of the verb word sense number with a set of requirements for the associated main sentence role. The requirements are in the same format as the requirement descriptors of . The content of the requirements are additional requirements beyond those of a verb's word sense number requirements of . There may be zero or more additional requirements. The additional requirements are needed to perform the entry's process, and the requirements must be satisfied for a clause to select the entry's process tree. There is at least one type number of a verb word sense number which has a general process descriptor entry with no additional requirements. One type number of a verb word sense number has a process descriptor entry without additional requirements that describes the TYPICAL-PROCESS of the verb word sense number. This type number is designated for the typical process as depicted in . A general process descriptor entry also has a set of one or more adverbial triplets. The adverbial triplets contain: an adverbial subclass pointer, a subclass value or value range, and a requirement number. The requirement number has a value of one if the adverbial subclass value or value range is required to be matched by the context for the process to be performed, and hence selected. Other requirement numbers indicate adverbial OR-groups. An adverbial OR-group is indicated by triplets with the same requirement number. In this case, only one adverbial in an adverbial OR-group is required to have the adverbial's subclass value or value range to be matched by the context for the process to be performed, and hence selected. A general process descriptor entry also has a process pointer which is a pointer to a graph of verb word sense numbers which stores the various ways of realizing the process in natural language in Clausal Abstract Noun and Clause Purpose Memory . Memory  is described below.","An entry which is a generalization of specific process descriptor entries of a type number has a non-zero specificity number component and a zero experience number component for the type number's corresponding verb word sense number. This type of process descriptor entry of a type number corresponds to a generalization of specific instances of similar specific processes associated with the type number. This type of process descriptor of a particular specificity number of a type number contains the generalization of the specific process descriptor entries with the particular specificity number and non-zero experience numbers. This type of process descriptor entry of a type number has the same format as the general process descriptor entry of a type number except: there is no joint\/separate pointer; the main sentence role pairs contain a sentence role and a typical entity, i.e. a word sense number of a typical main sentence role constituent for that sentence role; an adverbial subclass triplet subclass value is a typical value or value range for the process; and an adverbial subclass triplet requirement number has a zero value which indicates that the associated adverbial subclass is a typical circumstance of the typical process and not a requirement. The sentence role pairs and adverbial triplets represent a natural language clause which has the typical process of the generalization of specific process descriptor entries related to this generalization entry. A specific process descriptor entry of a type number has a non-zero specificity number and a non-zero experience number component for the type number's corresponding verb word sense number. A specific process descriptor corresponds to a specific instance of a type number's process. A specific process descriptor entry of a type number has the same format as the general process descriptor entry of a type number except: there is no joint\/separate pointer; the main sentence role pairs contain a sentence role and the experienced entity(s); an adverbial subclass triplet subclass value is the experienced value or value range for the specific process instance; and an adverbial subclass triplet requirement number have a zero value which indicates that the associated adverbial subclass is a specific circumstance of the specific process and not a requirement. The sentence role pairs and adverbial triplets of a specific process descriptor represent a natural language clause which has the specific process of the specific process descriptor.","After , or , the Process-Set contains the general process descriptors of Cur-Verb-W-S which correspond to possible type numbers, and  is next.  determines the general process descriptors in Process-Set which contain additional requirements in their main sentence role pairs which are satisfied by the main sentence roles of Cur-Clause, i.e., the subjects, indirect objects, and direct objects of Cur-Clause. Also,  determines if the adverbial subclass values of adverbials in Cur-Clause and the adverbial subclass values of adverbials in  match the adverbial subclass value or value range of adverbial subclass triplets with a one valued requirement number or match at least one value or value range of the subclass triplets of each OR-group of Process-Set descriptors which met the additional requirements for main sentence roles.  removes all process descriptors from the Process-Set which have additional requirements of main sentence roles which are not meet by Cur-Clause constituents or which have required adverbial subclass values or value ranges which are not matched by the adverbials of Cur-Clause or the adverbials in . After , Process-Set contains possible, general process descriptors which correspond to the possible type numbers for Cur-Verb-W-S.","After ,  is next.  determines the processes in Process-Set which are most related to the constituents in Cur-Clause. The main sentence role entities of main sentence role pairs of process descriptors in Process-Set are compared for matches with the corresponding main sentence role constituents of Cur-Clause. The circumstantial adverbial subclasses of the typical and specific process descriptors are also compared for matches with the stated adverbials of Cur-Clause and the context adverbials. The possible main sentence role matches and adverbials compared for include: ALL-MAIN-SENTENCE-ROLES\/ADVERBIALS match, SUBJECT match, INDIRECT-OBJECT match, DIRECT-OBJECT match, INDIRECT-OBJECT-AND-DIRECT-OBJECT match, and ADVERBIAL-SET match. Within each type match except for the ADVERBIAL-SET match, the process descriptors with at least one circumstantial adverbial subclass matches are selected unless there are no circumstantial adverbial subclass matches. The ADVERBIAL-SET match type must match the specified adverbial subclasses. In the case of no circumstantial adverbial matches, all process descriptors which match the entities in the match type are selected. The actual matches made depend upon PROC-PREF-V and the main sentence roles present in Cur-Clause. PROC-PREF-V is vector which has a one at each match which is currently desired. PROC-PREF-V is set by the current application which is selected through purpose processing and is described below.","Certain types of matches are utilized because of the discourse, of the conversation. The ALL-MAIN-SENTENCE-ROLES match is utilized when the conversation involves a previous experience for example. The single specific sentence role match is utilized when the single specific sentence role is the focus of the conversation for example. The DIRECT-OBJECT-AND-INDIRECT-OBJECT match is utilized when the combination of these sentence roles is the focus of the conversation for example. The ADVERBIAL-SET match is utilized when processes occurring at specific adverbial subclasses is the focus of the conversation for example. Such specific adverbial subclasses could include specific to general semantic roles such as these broad semantic roles; time, space, process, modality, (point of) reference, and purpose. All the types of matches are selected when all related processes of Cur-Clause are considered because the process is the focus of the conversation for example.","PROC-PREF-V also has a position unrelated to the above main sentence role matches, the DYNAMIC match. The DYNAMIC match is enabled when its position has a one in PROC-PREF-V. The DYNAMIC match selects the sentence role matches to be made according to a rule in Cur-Rule. Cur-Rule is set by the current application. For example, the Cur-Rule could be: enable matching for all main sentence roles which are specific known references in Cur-Clause and for the normal combinations of such main sentence roles. The example Cur-Rule value matches are utilized when previously experienced processes related to Cur-Clause are under consideration. After all main sentence role and adverbial matches which are possible and enabled by PROC-PREF-V have been made,  stores the matched entry numbers or NULL, if no matches are found or if the match type is not enabled: at ALL-M for ALL-MAIN-SENTENCE-ROLES\/ADVERBIAL matches, S-M for SUBJECT matches, IO-M for INDIRECT-OBJECT matches, DO-M for DIRECT-OBJECT matches, IAD-M for INDIRECT-OBJECT-AND-DIRECT-OBJECT matches, and AS-M for ADVERBIAL-SET matches.  also sets Cur-Process to the first entry stored in ALL-M, S-M, IO-M, DO-M, IAD-M or AS-M. If no entry was stored, Cur-Process is set to Cur-Verb-W-S's TYPICAL-PROCESS. Finally  marks and stores the following at Cur-Verb-W-S's portion of Cur-Verb's SDS position: ALL-M, S-M, IO-M, DO-M, IAD-M, AS-M and Cur-Process.","After ,  is next, and is true if Cur-Clause has a multiple constituent sentence role. If  is true,  evaluates the J\/S-Criteria-Set of each multiple constituent sentence role for the J\/S-Criteria set associated with the general process entry of Cur-Process. depicts the general format for the J\/S-Criteria-Set for a particular sentence role with multiple constituents. The J\/S-Criteria-Set for a sentence role can be NULL in the sense that multiple constituents for a particular sentence role has a constant process type result value. The process type result values are: @JOINT, @SEPARATE, or @INDETERMINATE. If the process type result value is not constant for a sentence role, that sentence role has a J\/S-Criteria-Set. A J\/S-Criteria-Set contains criteria composed of adverbial subclass values or value ranges and\/or sentence role state and property values or value ranges. The criteria are partitioned according to the process type result value associated with a partition. Within a partition, the criteria are grouped into AND-groups which are combined into an OR-group. The adverbial context and the sentence roles must match at least one of the AND-groups in the OR-group of a criteria set partition to select the process type result value associated with the partition. All partitions are evaluated. If only one process type result value is selected, that result value is assigned to the sentence role. If more than one process type result value is selected, the @INDETERMINATE is assigned to the sentence role.  determines the process type result for each multiple constituent sentence role of Cur-Clause and stores the process result type value for each such sentence role in J\/S-Result-V. J\/S-Result-V contains a position for each sentence role of Cur-Clause. Sentence roles with multiple constituents have the process type result value which has been determined from the J\/S-Criteria evaluation stored at the sentence role's position in J\/S-Result-V. Single constituent sentence roles have NULL stored at the sentence role's position in J\/S-Result-V. Finally  stores J\/S-Result-V at Cur-Verb-W-S's portion of Cur-Verb's SDS position.","After , or if there are no sentence roles with multiple constituents which implies that  is false,  is next, and is true if Cur-Verb is in another clause with an UNPROCESSED verb word sense number without a FALSE-BY-SENTENCE-ROLE truth value, and if every main sentence role constituent in at least one AND-group of every main sentence role of such a clause with a verb word sense number of Cur-Verb without a FALSE-BY-SENTENCE-ROLE truth value has In-Clause stored in its SDS position, i.e. an UNPROCESSED verb word sense number in a clause which makes  true. In this paragraph, UNPROCESSED is with respect to Ellipsis, Modal, Mood, and Process Selection Processing. If  is true,  sets Cur-Verb-W-S to the next UNPROCESSED word sense number of Cur-Verb in a clause which makes  true; Cur-Clause is set to the clause associated with Cur-Verb-W-S's Cur-Result-V; and  sets processing to continue at  which is described above. If  is false,  is next, and is true if the invocation sentence has a verb with an UNPROCESSED word sense number in a clause which makes  true. If  is true,  sets Cur-Verb to the next verb which makes  true. After ,  is next. If  is false, COMPLETION processing is successfully completed, and  is next.  sets C-Success to true; Ellip-Clause-Comb is set to false; REQ-SEL is set to false; and  returns control to the caller. This completes the description of Selector  processes.","Adjective Word Sense Number Selection Processes in Selector ","Adjective word sense number selection processes in Selector  include: looking up data related to an adjective or state abstract noun, processing adverbials modifying an adjective, processing a subject complement adjective in a sentence with a clausal subject, and processing selected adjective word sense numbers prior to purpose selection. Each state representation adjective word sense number has an associated data structure accessed with an adjective word sense number. The format for an adjective or state abstract noun word sense number is depicted in . A state abstract noun has the same word sense number format and data structure entry format as a state adjective as described above. A state abstract noun is processed in Selector , but a state abstract noun is mostly processed as a concrete noun by Selector  as described above. An adjective or state abstract noun word sense number is composed of an identification number and the owner word sense number. The components of an adjective and state abstract noun identification number are: a state number with a class number, a member number, an owner word sense identification number, and a value or value range for the state associated with the state number. The owner word sense number is the word sense number of a noun which owns the state associated with the state number. The owner word sense number can be specified in a full range of generality: most general to most specific. The owner word sense number provides the type, specificity and experience numbers of the adjective or state abstract noun. The adjective or state abstract noun word sense number encapsulates the state representation of an adjective or a state abstract noun: an owner's state for a value or value range of the state implied by the word sense number of the adjective modifying the owner or the adjective modifying a state abstract noun. The adjective and state abstract noun word sense number also addresses the data structure associated with an owner's state for a value or value range of the state.","The adjective and state abstract noun word sense number data structure entry format is depicted in . Each entry contains the adjective or state abstract noun word sense number which is used to access the entry. There are two types of entries. One type of entry is associated with the most general owner word sense number in the group which comprises entries which have common adjective or state abstract noun word sense identification numbers, and which have owner word sense numbers which have common identification numbers, and which have the same state value or state value range. The other type of entry is associated with members of such groups without the most general owner word sense number. Such members associated with the second type of entry within a related group have common word sense identification numbers, but such owner word sense numbers of the second type of group members have more specific type, specificity, and\/or experience numbers than the most general owner word sense number with a common identification number of such a group. As described above, the most general possible owner (a noun) word sense number has zero type, zero specificity, and zero experience numbers, and the most specific possible owner word sense number contains nonzero type, nonzero specificity, and nonzero experience numbers. Specificness increases as the type, then the specificity number, and then the experience number become nonzero. The most general owner word sense number of a related group, i.e., a group with common adjective or state abstract noun word sense identification numbers, including common owner word sense identification numbers, can be in the full range of specificness: from the most general possible to the most specific possible.","The first type of entry, the one associated with the most general word sense number of such a group of related entries with common adjective or state abstract noun word sense identification numbers, contains a field for the set of verbs which set the state to the value or value range of its associated entry's adjective or state abstract noun word sense identification number. However, this set of verbs can be empty. This entry of the most general owner word sense identification number of a related group also contains a list of adverbial subclasses which are used to select adverbials modifying the entry's associated adjective. The use of adverbial subclasses to select adverbial modifiers is described in the adverbial processing section above. Both types of entries contain a pointer to the entry's related purposes in Adjective and State Abstract Noun Purposes Memory . The field for verbs setting the entry's state and value, and a field for adverbial subclasses are not contained in the second type of entry. These fields are only in the first type of entry because they are common to the second type of entries in its related group. Both types of entries contain an adjective or state abstract noun word sense number field and a purpose pointer field. As depicted in for a single adjective word sense number entry, the Dictionary  structure of a natural language contains entries with adjective word sense numbers with the most general owner word sense number in the group of entries with common adjective and owner word sense identification numbers, i.e., adjective word sense numbers associated with the first type of adjective word sense number data structure entry in . The list of entries of such adjective word sense numbers in  are formed into groups which contain such adjective word sense numbers associated with a word set, and such a group associated with a word set is used for adjective and noun word sense number selection.",{"@attributes":{"id":"p-0612","num":"0634"},"figref":"FIGS. 20","i":["d","h "],"b":["20","50","50","5000","5000","5000","50100","5000","5004","5004","50200","5004","5008","5008","50300","5008","5012","5012","50500","5012","5016","50","50"]},"Look Up Processing","If  is true,  begins Look Up Processing.  is true if the invocation word is an adjective, and the invocation adjective has an unprocessed modifying adverbial. The invocation word is a state adjective or state abstract noun. If  is true,  sets Invo-Op to ADV-MOD-COMP; ADJ is set to the invocation adjective's SDS position; -Return is set to ; ADJ-W-S-Set is set to the list of adjective word sense numbers in the set of invocation adjective word sense numbers; and  calls [Invo-Op, ADJ, ADJ-W-S-Set, -Return]. After the ADV-MOD-COMP, which is described below in this section, processes ADJ for its modifying adverbials,  is next, and is true if ADV-Modifier-Success, a parameter set by the ADV-MOD-COMP process, is true. If  is false, the adverbials have no known relation to the given word sense numbers of ADJ, and  returns ADVERBIAL-MODIFIER-FAILURE to the caller of this process. If  is false,  sets ADJ-W-S-Set to the list of adjective or state abstract noun word sense numbers in the set of invocation adjective or state abstract noun word sense numbers. After , or if  is true,  is next, and is true if LOOK-UP-Type equals VERB-RESULT. LOOK-UP-Type is an invocation parameter which indicates the type of information to look up. If  is true,  stores a word sense number entry from ADJ-W-S-Set in Verb-Result-Set if the entry is compatible with the invocation word owner word sense number, and if the entry has an associated most general owner entry in  which contains a set of verbs which sets the entry's state and value. An entry in ADJ-W-S-Set is compatible if the associated entry's owner word sense number in  and the invocation adjective owner's word sense number have common identification numbers. After all entries meeting these conditions have been stored in Verb-Result-Set,  returns Verb-Result-Set to the caller.","If  is false,  stores the nearest owner entry in  of an entry from ADJ-W-S-Set in ADJ-Purpose-Set if the entry from ADJ-W-S-Set is compatible with the invocation word owner word sense number, and if the nearest owner entry in  contains a purpose pointer. The nearest owner entry in  of an entry in ADJ-W-S-Set is the entry in  with the same owner word sense identification number as the invocation word owner word sense identification number, and the entry which matches the invocation adjective owner's word sense number or which has the least general owner word sense number that generalizes the invocation word owner's word sense number. A first owner word sense number generalizes a second owner's word sense number by: the first matching the second's word sense identification number, and the first having zero type, specificity, and experience numbers; or by the first matching the second's word sense identification and type numbers, and the first having zero specificity and experience numbers; or by the first matching the second's word sense identification, type, and specificity numbers, and the first having a zero experience number. The cases for a first owner word sense number generalizing a second owner word sense number are listed in the order of the most general possible first owner word sense number to the least general possible first owner word sense number with respect to the first owner word sense number generalizing the second owner's word sense number. The least general owner word sense number in this case matches more word sense number components than a more general word sense number. After the match or the least general owner match for each Adj-W-S-Set word sense number that is matched has been stored in ADJ-Purpose-Set by ,  returns ADJ-Purpose-Set to the caller. This completes Look Up Processing.","Adverbial Modification of Adjective Processing","If  is true, Adverbial Modification of Adjective Processing starts at .  sets Cur-Invo-ADJ to the invocation adjective, and sets Cur-ADJ-W-S-Set to ADJ-W-S-Set, the set of adjective word sense numbers which are to be utilized for selecting possible adverbial modifiers of the invocation adjective.  is next, and is true if the invocation adjective has modifying coordinated adverbials which have unprocessed conjunctions. If  is true,  sets Cur-Conj-Set to the SDS positions of the conjunctions joining the adverbials modifying the invocation adjective; -Return is set to ; and  calls CONJ[Cur-Nat-Lang, Cur-Conj-Set, -Return]. After processing at CONJ,  is next.  forms sums of products of modifying adverbials for multi-level conjunctions; a copy of the invocation adjective is added for each \u201cor\u201d conjunction or other natural language equivalent at the SDS; one AND-group of modifying adverbials is assigned to each invocation adjective in the SDS; and  joins the invocation adjectives with \u201cor\u201d conjunctions in the SDS. After , or if  is false,  sets Cur-W-S to the next unprocessed adjective word sense number in Cur-ADJ-W-S-Set of Cur-Invo-ADJ. After ,  assigns the Current-Adverbial to be the next unprocessed adverbial modifier for Cur-W-S of Cur-Invo-ADJ; Pre-ADV is set to true; Verb-Subclass is set to the adverbial modification subclasses of Cur-W-S for the type of the Current-Adverbial, e.g. a prepositional adverbial; -Back is set to ; and  sets processing to continue at  which processes adverbials as described above in the Selector  processing section. The process starting at  was described for adverbials modifying verbs. The process for adverbials modifying adjectives is the same as the process for modifying verbs as was described in the adverbial processing section above. The process starting at  was described for verb modifiees for convenience. This process is utilized for adverbial processing by other processes. Here for ease of description, the process is described as a part of Selector .","After adverbial processing is completed,  is next, and is true if the Current-Adverbial was successfully processed. If  is false,  removes Cur-W-S from Cur-ADJ-W-S-Set. If  is true,  is next, and is true if there is another unprocessed adverbial modifying Cur-W-S which is unprocessed for Cur-W-S. If  is true,  is next as above. If  is false, processing continues at .  is true if Cur-W-S has a conflicting adverbial set modifying it. A conflicting adverbial set has more than one adverbial which modifies the same modifiee word sense number, and each adverbial in this set has exactly the same adverbial semantic role, but has a different adverbial subclass value. If  is true,  generates a vector with ones at adverbial positions in the conflicting adverbial set and with zeroes at other adverbial positions.  also stores the symbol, CONFLICTING-ADVERBIALS, and the generated vector at Cur-W-S in Cur-ADJ-W-S-Set. This information is stored in Cur-ADJ-W-S-Set for later processing at Step  which separates the conflicting adverbials so as to modify separate copies of Cur-Invo-ADJ for Cur-W-S. This processing is delayed until the word sense number of the invocation adjective is selected in subsequent processing.","After  or , or if  is false,  is next.  is true if there is an unprocessed word sense number in Cur-ADJ-W-S-Set. If  is true,  is next as described above. If  is false,  is next, and is true if Cur-ADJ-W-S-Set is not empty. If  is false,  is next, and is true if there are copies of the invocation adjective that were formed at . If  is true, the current AND-group of adverbial modifiers has failed to modify the current invocation adjective copy. However, since only one AND-group of adverbial modifiers has to modify an invocation adjective copy to produce a logically correct statement, other AND-groups of adverbs are evaluated. If  is true,  stores FAILED-ADVERBIAL-AND-GROUP at the current invocation adjective copy's SDS position, and sets processing to continue at  which is described below. If  is false, there is only one adverbial AND-group, and this invocation of the adverbial modification of adjectives processing has failed, and  sets ADV-Modifier-Success to false and returns processing control to the caller. If  is true, processing continues at .  stores Cur-ADJ-W-S-Set at the SDS position of Cur-Invo-ADJ. After  or ,  is next, and is true if there is an unprocessed copy of the invocation adjective. If  is true,  sets Cur-Invo-ADJ to the next unprocessed copy of the invocation adjective, and sets Cur-ADJ-W-S-Set to ADJ-W-S-Set. After ,  is next as above. If  is false, processing continues at .  is true if one or more adverbial AND-groups does not have FAILED-ADVERBIAL-AND-GROUP. If  is true, adverbial processing is successfully completed, and  is next.  sets ADV-Modifier-Success to true, and returns processing control to the caller. If  is false, adverbial processing has failed, and processing continues at  as described above. This completes the description of Adverbial Modification of Adjective Processing.","Subject Complement Adjective with a Clausal Subject",{"@attributes":{"id":"p-0618","num":"0640"},"b":["5008","5008","50300"]},{"@attributes":{"id":"p-0619","num":"0641"},"b":["50300","18","50300","50300","50302","60","60","50302","60","60854","60","60851","50302","50","50306","60","60","60","60","50302","50304","50304","50304","60","60","60","50","60","50306","50306","50308","140","18","50308","50310","50306","50312","50312","50304"]},"If  is false, ADJ-PREP processing has failed. If  is false, or if  is false,  begins the processing to determine if ADJ has an interpretation as an adverb modifying the verb in the clausal subject.  sets up parameters for and calls the implied adverbial process of Selector .  sets Invocation-Modification-Set to ADJ; Invocation-Verb is set to the verb of the clausal subject; Invocation-Opcode is set to ADJ-COMP-MOD; -Return is set to ; and  calls [Invocation-Opcode, Invocation-Modification-Set, Invocation-Verb, M-Find, -Return]. M-Find is the status value of the implied adverbial process, and M-Find is true if the adjectives in Invocation-Modification-Set can be converted to adverbials which modify the Invocation-Verb. After processing at  is completed,  is next, and is true if M-Find is true.  is true if ADJ has an interpretation as a conversion adverbial modifying the verb of the clausal subject.  being true implies that ADJ does not have a purpose relation to the clausal subject. Thus, if  is true, the ADJ-COMP-MOD has set ADJ to modify Invocation-Verb, and  is next.  returns processing to the caller without storing the purpose processing symbol of . If  is false,  is next, and stores the purpose processing symbol prior to  returning processing to the caller. The validity of the stored purpose relation is determined in subsequent processing.","Adjective Word Sense Number Completion Processing","If the current invocation opcode is COMPLETION,  is true, processing continues at  which begins Adjective Word Sense Number Completion Processing. Completion Processing is typically called by Step  after all word sense number selection processing of the current sentence is completed. Completion processing assigns pointers to the purpose relations associated with each state and value or value range selected during function word and state representation word processing of the words in the current sentence as described above in the preceding description. The new states and their associated values, selected in state representation word processing, and processed for completion processing, are used by Purpose Identifier  to relate the current sentence to the context of the conversation and previously stored experience and knowledge. The states of the current sentence processed in this Completion Process include: the result states of verbs, the states associated with stated adjectives, morphological words with adjective bases, adjectives with modifying adverbials with delayed evaluation functions, etc. The states which are processed for an invocation of completion processing are gathered into Invo-State-Set by the caller.","Adjective Word Sense Number Completion Processing begins at .  is true if there is an unprocessed state in Invo-State-Set. If  is false, completion processing is finished, and  returns processing control to the caller. If  is false,  sets Cur-State to the next unprocessed state in Invo-State-Set. After ,  is next, and is true if Cur-State's stated adjective has adverbial modifiers with delayed evaluation functions. Certain adverbial modifiers of adjectives have delayed evaluation functions. There are several types of such adverbial modifiers, but typically, such adverbials are time and space position setting adverbials which actually modify the owner of the stated adjective. Such adverbials have delayed evaluation functions because the adverbial subclasses are selected prior to the selection of the owner's word sense number. When such delayed evaluation functions are evaluated, they set the adverbial to modify the owner of the evaluated function and add the adverbial subclass to Context Memory . When such adverbials directly modify a noun, they are treated as direct modifiers of the noun like adjective and noun modifiers as described above. Such modifiers perform functions similar to the adjective and noun modifiers, but these modifiers also have a function which sets up the modifier to be added to the adverbial context when the noun they modify is added to the context. For example, the sentence, \u201cJohn was sick at home yesterday.\u201d, has the space position adverbial, \u201cat home\u201d, and the time position adverbial, \u201cyesterday\u201d modifying the adjective \u201csick\u201d. These adverbials actually set the space and time positions of \u201cJohn\u201d. Hence, this example sentence can be stated as: \u201cJohn was at home yesterday, and John was (simultaneously) sick.\u201d If  is true,  evaluates any delayed evaluation functions of the adverbials modifying the word associated with Cur-State. Other types of modifying adverbials with delayed functions are only related to timing considerations of the evaluation. After , or if  is false,  is next, and is true if Cur-State and\/or its associated value or value range is new to the context of the conversation. If  is true,  stores Cur-State, its value or value range, and a pointer to Cur-State's nearest owner entry in Memory  at New-State-Set. If  is false,  stores Cur-State, its value or value range, and a pointer to Cur-State's entry in  at Found-State-Set. After  or ,  is next as described above.","Purpose Identifier  Description","Purpose Storage","A PURPOSE is a stored combination of one or more clauses, and this combination contains experience and knowledge which can be more complicated or more detailed than can be contained in a single clause. A stored purpose can be expressed in natural language. Each clause is represented by a verb word sense number, abstract noun word sense number, or an adjective word sense number. A purpose is related to a clause's verb word sense number state (i.e., a result state and value), or to an adjective or state abstract noun's word sense number state (i.e., an owner's state and value). Examples of the general knowledge and experience contained in general purpose types include: actions to achieve a result, e.g., a purpose comprised of instructions to put a bicycle together; actions to achieve a verb word sense number result state (a process), e.g. a purpose comprised of actions to login on a remote data base; description of an event, e.g., a purpose comprised of occurrences during a vacation; information related to a situation (a set of related states and their values), e.g., the advantages gained from exercising; actions and information combined to achieve a result, e.g., a purpose comprised of steps to solve a problem with the reasons for selecting some or all of the steps; reactions to a situation; predictions for occurrences resulting from a situation; consequences of a situation; motivations for performing actions or reaching a state value; the normal states and actions of computer software or hardware; an online manual; etc.","Purposes are used in the process of interpreting incoming natural language in terms of stored experience and knowledge. Other uses of purposes include: a source of outgoing natural language; storage of methods for solving problems; storage of methods for learning new experience and knowledge; storage of methods for controlling communication, i.e., the Communication Manager; etc. The last two listed uses of purposes differ from the other described purposes in that these two types of purposes contain knowledge and experience of internal structures and processes Purposes such as methods for learning and the Communication Manager are called INTERNAL PURPOSES because such purposes are not directly related to natural language conversations. Purposes directly related to natural language conversations are called EXTERNAL PURPOSES.","External purposes have a relation to an adjective, verb, or abstract noun. Purposes stored in Adjective and State Abstract Noun Purpose Memory  are associated with an owner's state and value of an adjective or an owner's state abstract noun and its value. For example, an entry in Memory , as depicted in , has a pointer to a structure in Memory  which contains purposes related to the entry. Purposes stored in Memory  are associated with a verb word sense number. For example, an entry in Memory , as depicted in , has a pointer to a structure in Memory  which contains purposes related to the entry. The structures of purposes in Memories  and  have the same format as is described below. However, the information content of purposes of Memory  will differ with the information content of purposes of Memory . Internal purposes have a relation to the processes of this description.","All purposes have an address which is used to access the purpose associated with its address. A purpose is realized as a combination of clauses. The combination of clauses is a chain or tree of chains of clauses. A chain of clauses is a sequential string of clauses without branches. A tree of chains contains multiple chains of clauses such that except for the root of the tree and a leaf of a tree, one chain is connected to one or more chains at such a chain's beginning or end. Leaf and root chains are connected to other chains only at their beginnings and endings respectively. Multiple chains follow a chain at a branch. A branch can have criteria composed of states and values and other requirements which can be utilized for the selection of the next chain to include in the purpose being considered. A tree with selection criteria at branches is used to select the realization of the purpose. For example, consider the process to realize the word sense of a verb, and hence its associated clause. Such a process is in general determined by searching through its tree until a leaf is reached. The search begins at the root node of the process. This root node contains access conditions which select the next possible steps of the processes which are possible given the context of the conversation. The leaf node of a process corresponds to the result state which the process implements.","All stored purposes can be accessed through a purpose address. A purpose address is composed of an identification number and a descriptor as depicted in . The identification number is composed of a location and a function number. The location in a purpose address contains the base address of a purpose node table in Memories  or  plus an entry number in the purpose node table. The contents of the entry at the location of the purpose address is associated with the word sense number which owns the purpose table. The contents of a purpose table entry is depicted in and is described below. The function number of a purpose address is the type of purpose. The general types of purposes are: motivation, consequence, advantages, process realization, purpose selection requirement, comment, preference, emotion, goal, conditions, etc. A purpose type is any concept that labels a clause or more than related clause. The function number can contain a subtype component which selects a more specific category of the general purpose type. The descriptor of a purpose address contains a path type number, a path specificity number, and an experience number set. The path type number is related to the purpose. The path type number selects one set of paths in a purpose tree. The set of paths of a path type number have the same leaf node. However, a particular path in this set has at least one sub-path unique to this particular path. Such sub-paths have an associated path specificity number. If the purpose tree has only one path, the associated purpose only has a zero path type number and zero path specificity number. Note, the definition of trees that is being used here is not the strict mathematical definition of \u201ctree\u201d. Trees are being used here because they make it conceptually easier to understand this description. The strict mathematical term for the data structure being used here is a directed graph. A strict mathematical definition of \u201ctree\u201d does not allow a branch at one node of a tree to rejoin one or more alternate branches at a subsequent node, but a directed graph does. Thus, a purpose type can have paths with alternate sub-paths which eventually lead to the same leaf node in the definition of tree here. A directed graph and the realizations of a tree used here have an implicit direction.","The experience number set of a purpose address is a set of experience numbers related to the constituents participating in the purpose realization. A set is used to allow for multiple realizations in experience for the same path. Each particular experience number is common to the nouns, verbs and adjectives comprising a specific instance of the clauses of the purpose associated with the purpose address. The experience number of a noun implies that the noun meets the requirements of the verbs in a purpose having the same experience number for the sentence roles which the noun participates in as a sentence role. The experience number of a noun may qualify it for multiple purposes which have the same experience number in such purposes' experience set component of their purpose addresses. A zero path specificity number for a purpose, which requires a zero experience number set, corresponds to the typical path type with typical nouns utilized in the realization of such a purpose. A non-zero experience number is unique to a specific experience. A unique experience can be accessed in Memories  and\/or  through one or more purposes.","Each verb word sense number, state adjective word sense number, and abstract noun word sense number, can own a purpose node of entries in Purpose Memory  for adjectives and state abstract nouns or in Purpose Memory  for verbs and clausal abstract nouns. Concrete nouns can own a purpose node through a function A-Relation. depicts a general purpose node entry of an owner word sense number in Memories  or . This entry contains the owner word sense number, a purpose address function index, and a verb word sense number owner's clause constituent initial states. The owner word sense number identifies the clause or state related to the purposes in the node. The node can contain purposes which are owned by the owner word sense number such as the process which realizes the owner word sense number. The node can also contain purposes which own the owner for the realization of the owning purpose. In either type of purpose (owned or owning), the owner word sense number implies an expressible natural language clause which can be utilized for incoming or out-going natural language. For example, a verb word sense number implies a clause which is the verb word sense number's associated clause. The state and value of an adjective's word sense number can be expressed in English as a clause with the form: (adjective's owner) (\u201cto be\u201d verb form) adjective phrase). The state and value of a state abstract noun can be expressed in English as a clause with the form: (state abstract noun's owner) (\u201cto have\u201d (in the sense of \u201cto possess\u201d) verb form) (state abstract noun and optional value setting modifier). A clausal abstract noun implies an expressible clause, its characterizing clause.","The purpose address function index is used to look up the stored purpose realization entries in  or  which are related to the owner word sense number for a given purpose address function type. Realization entries are depicted in which is described below. The purpose address function index is composed of quadruplets partitioned by purpose function type. Each quadruplet contains a purpose address, a pointer to the realization entry in Purpose Memory  or , the succeeding link entry address of the purpose, and the relative frequency of the quadruplet's usage relative to the other quadruplets with the same function of the same function partition. Succeeding link entry addresses are described for which is described below. The link entry component of the quadruplet is used for expression of a specific purpose, or the typical realization of a general purpose. A verb word sense number owner's clause constituent initial states component of a purpose node entry contains the assumed initial states of constituents in the clause of the owner's verb word sense number. These assumed initial states are the starting states of the process which realizes the verb word sense number. For example, some assumed initial states for the owner's clause: \u201cJohn edited his thesis on the computer.\u201d is that the \u201cto edit\u201d process is started with \u201cthe computer\u201d \u201cbooted\u201d, i.e. \u201cinitialized\u201d, and the \u201ctext editor program\u201d \u201cstarted\u201d. Note that a clause constituent can be implied as the \u201ctext editor program\u201d in the example. Expressing a purpose, including processes for outgoing natural language for example, is accomplished by expressing the clause at the root node first, and then expressing the clauses in the succeeding purpose chains sequentially until the leaf clause is reached at the leaf node. A purpose is described in general by its purpose function in relation to its owner. A purpose function is the type of purpose such as motivation, consequence, advantages, etc. For example, a process is described in general as: \u201cA set of clauses which describe the realization of the result states of the process's verb word sense number.\u201d A more specific example is the process description for \u201cto turn a radio on\u201d: \u201cActivate the power switch to the on position.\u201d where \u201cactivate\u201d is realized as \u201cpush power button in\u201d, \u201cturn power switch to the on position\u201d, \u201cflip the power switch to the on position\u201d, etc. Note that the doer of the word sense number performs the process in this example.","The format for an entry of a purpose realization table is depicted in . A purpose realization entry in general contains the purpose node address(es) of the purpose address(es) which utilizes the entry and its associated owner clause in the realization of the purpose of the purpose address. Purpose node entries are depicted in . This component of the realization contains one or more purpose node entry addresses. Each purpose node entry address can have an optional path specificity number vector. One purpose node entry address selects a single purpose. A purpose node entry address plus a specificity number vector selects purposes with common identification number, common path type number and with the corresponding specificity numbers in the specificity number vector. The specificity number vector contains a set of positions. Each position corresponds to a specificity number of a purpose node entry with the common identification number, and the common path type number associated with the vector. A \u201cone\u201d in a position implies a purpose address comprised of the common identification number, the common path type number, the corresponding specificity number, and the experience number set associated with the specificity number in the purpose node entry. This corresponding purpose address's purpose has the purpose realization entry and contains this entry's corresponding owner clause in its realization. A \u201czero\u201d in the specificity number vector implies that the corresponding purpose address does not contain the purpose realization entry in its realization. The specificity number vector has the advantage that multiple purpose addresses with common identification and path type numbers with any subset of path specificity numbers can be compactly represented. Such multiple purpose addresses represented in this way correspond to the purpose realizations of such multiple purpose addresses which have the associated purpose realization entry and owner clause in common. As will be described below, it is possible to eliminate an owner clause and its purpose realization entry from consideration as a possible realization of a purpose. When an owner clause and its purpose realization entry are eliminated, the corresponding purpose addresses are also eliminated. Thus, the compact purpose address structure also allows for efficient elimination of purpose addresses which can not be realized in the current context. The purpose node address component can contain one or more owning purpose node entry addresses plus an optional specificity number for each purpose node entry address.","A purpose realization entry also contains zero or more purposes which are related to the entry's owner clause in the context of the purpose utilizing the clause in the purpose's realization. The types of purposes in a purpose node entry optionally include: a process application vector or process entry number, consequence purpose addresses, motivation purpose addresses, and other addresses. The other addresses include purpose addresses with purpose function types such as: advantage\/disadvantage, benefits, comments, alternatives, qualities, conditions, requirements, unusual circumstances, problems, etc. The other addresses also include addresses to state representations related to the owner clause such as a group of nouns utilized in classification purposes. For example, a classification purpose for \u201chomework problems\u201d has a pointer to a group of textual cues including: numbered paragraphs, specific labels, etc. A purpose entry in general also contains an address to an entry in Experience and Knowledge Memory . The format for the entry in  is depicted in and is described below. The entry in  is linked to related entries in  with addresses to purpose realization entries in  or .","There are two basic classes of purpose realization entries in  or . The first class of purpose realization entry contains the owner clause in the purpose realizations associated with the entry. This class of purpose entry contains the purpose node address component, the process application vector or number component, zero or more related purpose address components, and a Memory  entry address component. The second entry class contains the purposes which are owned by the owner clause. Purpose realization table entries of purpose realizations owned by the owner clause have the same components of a purpose entry as depicted in except for a specialization for the process application vector or number. The purpose node table entry containing the purposes owned by the owner clause contains the process entry number corresponding to the typical process for achieving the owner clause. One other exception is that the purpose realization table entry containing the purposes owned by the owner clause does not have a Memory  entry address component. The purposes owned by the owner clause are of two basic types. One type of owned purposes of an owner clause are processes to achieve the verb word sense number result state or state value of the owner clause. The other type of owned purposes of an owner clause are motivations, consequences, and various types of purposes. These other types of owned purposes are purposes of the owner clause which are generally applicable to all purposes of the first entry class in the owner clause's purpose table, i.e., those purposes utilizing the owner clause in the realization of those purposes. In other words, the other types of purposes of the purposes owned by the owner clause are generic to the owner clause. For a purpose realization entry of the first class, these other types of purposes are specific to the purposes owning the purpose realization entry.","The first class of purpose realization entry contains the owner clause in the purpose realizations associated with the entry. Each purpose node entry address of this first class of purpose realization entry can have an associated process application vector or number for each purpose node entry address's associated specificity vector. A purpose realization address with a specificity vector which contains specificity numbers that require different processes for different specificity numbers of the specificity vector has process application vectors. Other purpose realization addresses without a specificity vector or with a specificity vector which contains specificity numbers which have the same process for all the specificity numbers in the specificity vector have a process number. The process application vector contains a process number at a position which corresponds to a specificity number position of its associated specificity vector, and this process number selects a process which realizes the owner clause part of the purpose associated with the purpose address containing this specificity number. This process achieves the states associated with the owner clause in the purpose realization. A purpose realization address without a specificity vector has a process number which corresponds to a process which achieves the owner clause in the purpose realization of such a purpose address. The process number corresponds to the process's entry number in the process purpose function partition of the owner's purpose node table. A purpose node table is depicted in . Thus, the process number selects a process from the table entries of processes achieving the owner clause. However, processes are optional owned purposes for an owner clause. For example, the process to achieve an owner clause may be unknown.","The remaining type of entry associated with a purpose is the Experience and Knowledge Memory  purpose realization link entry, and the format for this Memory  link entry is depicted in . A purpose realization entry, as depicted in , has a Memory  entry address component. The Memory  link entry indicates how its associated purpose realization entry is related to other purpose realization entries in the purpose realization associated with a purpose address. One component of a Memory  link entry is the Purpose Realization Entry Address. This component of a link entry contains the address of the purpose realization entry which has the address of this Memory  link entry. Thus a purpose realization entry and its associated link entry have address components which point to each other. Another component of a link entry is the Link Type. A link type component of a link entry has a value which indicates the relation of its link entry to the tree of link entries which contain knowledge and experience to combine their associated purpose realization entries to store possible purpose realizations. The link type values are triplets of integers. The first integer corresponds to the number of preceding link entry addresses that this link entry is combined with, the second integer corresponds to the number of concurrent link entry address sets that this link entry is combined with, and the third integer corresponds to the number of succeeding link entry addresses that this link entry is combined with. For example: the pair (0, 0 or greater, 1 or greater) occurs when the link entry's associated owner clause is the first clause in the purpose with 0 or greater concurrent other concurrent clauses in the purpose; the pair (1 or greater, 0 or greater, 0) occurs when the link entry's associated owner clause is the last clause in the purpose with 0 or greater concurrent other last clauses realizing the purpose; the pair (1 or greater, 0 or greater, 1 or greater) occurs when the link entry's associated owner clause is between the first and the last clause in the purpose with 0 or greater concurrent clauses in the purpose. A realization of a purpose of a link entry has one succeeding and\/or preceding link entry and one link entry for each concurrent address set. Each concurrent address set corresponds to a set of purpose chains which starts at the link entry containing the concurrent address set. In a realization of a purpose, only one concurrent address in a concurrent address set is utilized, but more than one address set can be utilized. A realization of a purpose corresponds to selecting the clauses which comprise the purpose in the current context.","Another component of the Memory  purpose link is the Level Number and Order Type. The level number is the number of purpose link entries, i.e. clauses, between the owner clause of the entry link and the start of the purpose realization. The order type has a non-null value of either SET or VARIABLE. SET means that the owner clause in a realization of a purpose is fixed in its order with respect to the owner clause's preceding, concurring and\/or succeeding clauses. VARIABLE means the order is not fixed. The order type is SET for a specific purpose, and the order type can be VARIABLE for a purpose with 
