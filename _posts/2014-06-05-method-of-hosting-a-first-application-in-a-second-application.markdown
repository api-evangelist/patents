---
title: Method of hosting a first application in a second application
abstract: A method of hosting a first application (e.g., a virtual application) inside a second application (e.g., a control displayed by a web browser). The method includes executing the first application inside a runtime environment generated at least in part by a runtime engine. The executing first application calls user interface functions that when executed inside the runtime environment generate a first user interface. The runtime engine captures these calls, generates messages comprising information associated with the captured calls, and forwards the messages to a user interface manager that is a separate application from the runtime engine. The user interface manager receives the messages, translates the information associated with the captured calls into instructions for the second application, and sends the instructions to the second application. The control receives the instructions sent by the user interface manager, and displays a second user interface for the first application based on the instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208004&OS=09208004&RS=09208004
owner: CODE SYSTEMS CORPORATION
number: 09208004
owner_city: Seattle
owner_country: US
publication_date: 20140605
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATION(S)","BACKGROUND OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Client Application","Sandbox Manager","UI Configuration File","Methods","Configure Surface","Execute Virtual Application","Computing Device"],"p":["This application is a continuation of U.S. patent application Ser. No. 13\/088,265, now U.S. Pat. No. 8,763,009, filed on Apr. 15,2011, and claims the benefit of U.S. Provisional Application No. 61\/325,315, filed Apr. 17, 2010, and U.S. Provisional Application No. 61\/325,798, filed Apr. 19, 2010, both of which are incorporated herein by reference in their entireties.","1. Field of the Invention","The present invention is directed generally to a method of displaying a user interface of a first application within a user interface of a second application.","2. Description of the Related Art","A virtual application is a virtual machine image pre-configured with all of the files, registry data, settings, components, runtimes, and other dependencies required for a specific application to execute immediately and without installation on a host computing device. The virtual application is partially isolated from other applications implemented on a host computing device and partially isolated from an underlying host operating system installed and executing on the host computing device. The virtual application is encapsulated from the host operating system by a virtual runtime environment, which includes a virtual operating system, that receives operations performed by the virtualized application and redirects them to one or more virtualized locations (e.g., a virtual filesystem, virtual registry, and the like).","Thus, the virtual application may be conceptualized as including two components: a virtualization runtime and a virtual application configuration. The virtualization runtime implements the virtual runtime environment, which implements various operating system application programming interfaces (\u201cAPIs\u201d) in such a way that allows the executing virtual application to access and interact with items that may not be present on the host computer. The virtual application configuration includes data necessary to implement the virtual application within the virtualization runtime.","The virtual application is stored in and implemented by one or more data files and\/or executable files. Depending upon the implementation details, the one or more data files and\/or executable files storing and implementing the virtual application may include blocks of data corresponding to each application file of a natively installed version of the application. Herein, these blocks of data will be referred to as \u201cvirtual application files.\u201d The one or more data files and\/or executable files storing and implementing the virtual application also include configuration information. When the virtual application is executed, the configuration information is used to configure the virtual operating system to execute the virtual application. For example, the configuration information may contain information related to the virtual application files, virtual registry entries, environment variables, services, and the like. The virtual operating system is configured to communicate with the host operating system as required to execute the virtual application on the host computing device.","Presently, separate applications must be developed for local execution (e.g., within Microsoft Windows) and execution over the Internet (e.g., inside a web browser, such as Internet Explorer). In particular, different interfaces must be created for the separate applications. Therefore, a need exists for a method of hosting a first application (e.g., an application designed to execute within a local operating system such as Microsoft Windows) within a second application (e.g., a web browser) such that an interface developed for one environment (e.g., Microsoft Windows) may be implemented (or hosted) in a second different environment (e.g., a web browser). The present application provides these and other advantages as will be apparent from the following detailed description and accompanying figures.","As is apparent to those of ordinary skill in the art, most natively installed Microsoft Windows applications display a user interface by calling functions exposed in the Microsoft Windows Software Development Kit (hereafter \u201cSDK exposed functions\u201d). Generally, using these functions, each windows application creates its own unique windows in a customized order. Further, these windows may have predetermined behaviors.","To instead display an interface inside another application (e.g., a Web Browser), calls to the SDK exposed functions must be captured, translated into commands the other application will understand, and sent to that application.","The present disclosure describes a system and method for displaying the user interface (windows) of a first application (e.g., a virtual application) in a second application (e.g., a Web Browser).",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 1","FIG. 8"],"b":["5","7","9","10","11","10","7","7","9","10","11"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["22","9","35","126","128","130","132","134","22","9","132","136","136","134"]},"In the embodiment illustrated, the Client Application  communicates with the Sandbox Manager  over a communication link  that may be implemented as a Transmission Control Protocol (\u201cTCP\u201d) connection using TCP protocol. A cache  may be stored on the filesystem A for use by the Sandbox Manager .","As explained above, a virtualized application file  is transferred to the client computing device  from the server computing device . Likewise, the UI configuration file  may be transferred to the client computing device  from the server computing device . The virtualized application file  is illustrated in dashed lines to indicate that the virtualized application file  is stored in the cache  during and after the download. However, before the download begins, the virtualized application file  is not stored in the cache . The UI configuration file  may be stored in the cache  in a manner similar to that described with respect to the virtualized application file . As will be explained below, the virtualized application file  may be an executable file or a file configured to execute within a virtualized environment provided by a virtual machine.","The system memory A stores one or more files implementing one or more virtual machines. By way of a non-limiting example, the system memory A may include a plurality of virtual machine executable files  that when executed, each implement a different virtual machine. For example, each of the virtual machine executable files  may implement a different version of the same virtual machine. The virtual machine executable files  may be executed individually. When executed, a virtual machine executable file implements a virtualized environment. Execution of a virtual machine executable file may be initiated by the Sandbox Manager  using a command including a parameter (e.g., a file path) identifying a virtualized application file to execute. In response to receiving the parameter, the virtual machine executable file executes the identified virtualized application file inside the virtualized environment implemented by the virtual machine executable file. The virtual machine may execute within an operating system shell process. Optionally, the virtual machine executable files  may be stored in the cache .","The virtualized application file  includes a version identifier that may be used by the Sandbox Manager  to select which of the virtual machine executable files  is configured to execute the virtualized application file .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 1","FIG. 2","FIG. 1","FIG. 1"],"b":["22","7","22","35","126","128","130","22","140","35","9","35","9","140","35","7"]},"In the embodiment illustrated, the system memory B stores web server components  configured to implement a web server. The web server components  may be configured to provide a web page having one or more links to virtualized application files using standard http protocol. By way of non-limiting examples, the web server components  may include Internet Information Services (\u201cIIS\u201d) provided by Microsoft Corporation, Apache, and the like. While illustrated as being outside the filesystem B, those of ordinary skill in the art appreciate that the virtualized application file  and web server components  may be conceptualized as being within the filesystem B.","The virtualized application file  may include components necessary to implement a virtual runtime environment including a virtual operating system  configured to execute in the operating system A (see ) of the client computing device  (illustrated in ). Alternatively, the virtual runtime environment may be implemented by one of the virtual machine executable files  (see ). The virtualized application file  includes components necessary to implement a virtual application  configured to execute in the virtual runtime environment. In particular embodiments, a single virtualized application file is used to implement both the virtual operating system  and the virtual application . However, those of ordinary skill in the art appreciate that more than one virtualized application file may be used to implement the virtual operating system  and the virtual application . For example, the components implementing the virtual runtime environment may be stored in one of the virtual machine executable files  (see ) and the components implementing the virtual application  may be stored in the virtualized application file . Further, one or more of the files used to implement the virtual application  may be other than an executable file having the \u201cexe\u201d file extension.","The virtual operating system  includes a virtual filesystem , a virtual registry , and a virtual process environment and threading subsystems component . When executing, the virtual application  interacts with the virtual filesystem , virtual registry , and virtual process environment and threading subsystems component , instead of interacting directly with the filesystem A, the registry A, and the process environment and threading subsystems component A of the operating system A illustrated in . The virtual operating system  is configured to communicate with the operating system A illustrated in  as required to execute the virtual application .","The virtual application  executes inside a virtual runtime environment provided at least in part by the virtual operating system . Some virtual applications require one or more additional runtime environments to execute. For example, to execute a Flash application, the Flash runtime engine must also be installed. Therefore, to virtualize a Flash application, both the Flash application and Flash runtime engine must be included in the virtualized application file  and configured to execute in the portions of the virtual runtime environment provided by the virtual operating system . Collectively, all runtime components necessary to execute the virtual application  will be referred to as a virtual runtime engine. When executed, the virtual runtime engine generates, at least in part, the virtual runtime environment in which the virtual application  executes.","The virtualized application file  includes a configuration data block . The configuration data block  may include virtual application files A-C corresponding to each of the application files of a natively installed version of the same application. The virtualized application file  identifies one or more of the virtual application files A-C as a startup executable that executes when the virtual application  is first executed. The startup executable may be identified in the configuration data block .","When the virtualized application file  is executed, the configuration data block  configures the virtual operating system  to execute the virtual application . For example, the configuration data block  may contain configuration information related to files and directories in the virtual filesystem , keys and values in the virtual registry , environment variables, services, and the like.","The configuration data block  may also include basic application metadata and settings such as the application name, application version, and sandbox location. Further, the configuration data block  may provide isolation information to the virtual operating system . This information indicates which directories, virtual application files A-C, virtual registry entries, environment variables, and services are to be isolated from the operating system A (see ) of the client computing device  (see ). While illustrated as being outside the virtual filesystem , those of ordinary skill in the art appreciate that the application files A-C may be conceptualized as being within the virtual filesystem  when the virtual application  is executing.","To execute the virtual application , an initialization process is first performed. During this process, the virtual operation system  is launched and configured by the configuration data block . After the initialization process has completed, the appropriate startup executable(s) is\/are launched inside the virtual operating system . The virtual operating system  intercepts calls to the operating system A and routes them to corresponding components of the virtual operating system . For example, when the virtual application  requests access an application file that corresponds to the virtual application file A using a path of a natively installed version of the application, the virtual operating system  intercepts the request and routes the request to one of the virtual application file A. The virtual operating system  may also route some requests and actions to the operating system A (see ) of the client computing device  (see ) for processing.","U.S. patent application Ser. No. 12\/188,155, filed on Aug. 7, 2008, U.S. patent application Ser. No. 12\/188,161 filed on Aug. 7, 2008, and U.S. patent application Ser. No. 12\/685,576 filed on Jan. 11, 2010, all of which are incorporated herein by reference in their entireties, disclose systems that may be used to create and configure the virtualized application file . As described in greater detail in U.S. patent application Ser. Nos. 12\/188,155, 12\/188,161, and 12\/685,576, the virtualized application file  may be created by a virtual application executable constructor or authoring tool  using an application template that includes copies of files, such as a configuration file , application files A-C, and the like, used to configure the virtualized application file . However, the template is not a requirement. Instead, to build the virtualized application file , the authoring tool  needs only the configuration file  and copies of any applications files A-C necessary for a natively installed version of the application to execute. The applications files A-C, and the configuration file  are referred to collectively as an application configuration . In some embodiments, the authoring tool  combines the application configuration  and the components of the virtual runtime engine (e.g., the virtual operating system ) into an executable virtualized application file. However, in other embodiments, the authoring tool  omits the components of the virtual runtime engine from the virtualized application file to create a virtualized application file for execution by a virtual machine implemented by a virtual machine executable file, such as one of the virtual machine executable files .","For ease of illustration, the authoring tool  and the application configuration  have been illustrated as being stored in the system memory B of the server computing device  (see ). However, this is not a requirement. As is apparent to those of ordinary skill in the art, the virtualized application file  may be created on a computing device other than the server computing device , such as the computing device  illustrated in , and transferred to the server computing device  illustrated in  for storage thereon.","The authoring tool  may also be used to create a user interface (\u201cUI\u201d) configuration file . The UI configuration file  may be a separate file or included in the application configuration . The UI configuration file  may be downloaded along with the virtualized application file  or incorporate therein.","Returning to , as mentioned above, the system memory A of the client computing device  (see ) stores the Client Application  and the Sandbox Manager .","The Client Application  translates user commands (button clicks, etc) into requests for operations that the Sandbox Manager  performs. In embodiments in which the Client Application  is implemented as a web browser, the browser plug-in  or other type of translation application may be installed on the client computing device  (see ). Together the browser and browser plug-in  perform the functions of the Client Application .","By way of a non-limiting example, the browser plug-in  may be installed on the client computing device  (see ) by placing a dynamic link library (\u201cdll\u201d) implementing the plug-in  in a predetermined installation directory and registering the dll (i.e., an assembly) in the registry A (e.g., a Windows registry) of the client computing device  (see ). An Assembly Registration tool (e.g, Regasm.exe) may be used to register the dll in the registry A.","Once the plug-in  has been installed, the plug-in can be used by a website (implemented by the web server components  (see ) of the server computing device  illustrated in ) via client-scripting technologies, such as client-side javascript code executing in the Client Application . To access the plug-in  from the server computing device  illustrated in , a plug-in object reference is created and sent to the Client Application .","In response to receiving the reference to the plug-in , the Client Application  loads the plug-in by mime-type, ProgID, class GUID, and the like depending on the implementation details of the Client Application  (which in this embodiment, is implemented as a web browser). The plug-in  exposes methods which can be used to send requests to the Sandbox Manager .","The Client Application  has a user interface module  (see ) that generates a user interface  (see ). In the embodiment illustrated, the user interface  displays a web page. The user interface  may include one or more conventional windows. A control  may be displayed in the Client Application . For example, in embodiments in which the Client Application  is a web browser, a window of the web browser may display a web page displaying the control  displayed as a rectangular region. The control  may be implemented by the plug-in  (see ).","The requests include commands and optionally, one or more parameters. The requests may be implemented as strings, each including a command. If the request also includes parameters, the parameters may be separated from one another and the command by a predetermined character, such as a semi-colon, comma, and the like. In other words, the request may be implemented as a semi-colon delimitated string or a string delimited in another manner. The following Table A provides a list of commands that my be included in a request.",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE A"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Command","Parameters","Description of Command"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["ping","None","Commands the Sandbox Manager 134 to return"]},{"entry":[{},{},"a predetermined value. For example, the ping"]},{"entry":[{},{},"command may command the Sandbox Manager"]},{"entry":[{},{},"to return a predetermined string (e.g., \u201cTRUE\u201d)"]},{"entry":["start","an","Commands the Sandbox Manager 134 to start"]},{"entry":[{},"application","the transfer of the virtualized application"]},{"entry":[{},"identifier","file 140 identified by the application"]},{"entry":[{},{},"identifier to the client computing device"]},{"entry":["status","session","Commands the Sandbox Manager 134 to"]},{"entry":[{},"identifier","provide current status of the transfer of"]},{"entry":[{},{},"the virtualized application file 140"]},{"entry":[{},{},"identified by the session identifier"]},{"entry":["progress","session","Commands the Sandbox Manager 134 to"]},{"entry":[{},"identifier","provide current progress of the transfer of"]},{"entry":[{},{},"the virtualized application file 140"]},{"entry":[{},{},"identified by the session identifier."]},{"entry":[{},{},"The progress may be indicated as percentage"]},{"entry":[{},{},"of the virtualized application file 140"]},{"entry":[{},{},"transferred (e.g., 10%, 25%, and 100%)."]},{"entry":["exec","session","Commands the Sandbox Manager 134 to"]},{"entry":[{},"identifier;","execute the virtual application 110"]},{"entry":[{},"and","implemented at least in part by the"]},{"entry":[{},"optionally,","virtualized application file 140"]},{"entry":[{},"command-","identified by the session identifier that"]},{"entry":[{},"line","was transferred previously to the client"]},{"entry":[{},"arguments","computing device 9 illustrated in FIG. 1"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"As mentioned above, the Client Application  communicates with the Sandbox Manager  over the communication link , which may be implemented as a TCP connection. By way of a non-limiting example, the Client Application  may send the requests as text messages using TCP protocol to the Sandbox Manager  over the TCP connection. As described above, each of the requests includes a command and may include one or more parameters (e.g., a parameter list). These commands may be characterized as a communication protocol between the Client Application  and the Sandbox Manager .",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 4","FIG. 2","FIG. 1"],"b":["200","132","205","132","7","7","142","132","136","205","132","7","10","136","132","136","132","136"]},"In block , the Client Application  receives a command from the user via a conventional user interface (e.g., a mouse, keyboard, and the like). The user command instructs the Client Application  to download the virtualized application file  and\/or execute the virtualized application file .","The plug-in  is configured to request a different session for each virtualized application file being transferred and\/or executed. Thus, each virtualized application file being transferred and\/or executed may be identified by a unique session identifier.","In decision block , the plug-in  determines whether a session identifier is associated with the virtualized application file . The decision in decision block  is \u201cYES\u201d when a session identifier is associated with the virtualized application file . The decision in decision block  is \u201cNO\u201d when a session identifier is not associated with the virtualized application file .","When the decision in decision block  is \u201cNO,\u201d in block , the plug-in  requests a new communication session having a unique session identifier with the Sandbox Manager  over the communication link . Then, the Client Application  advances to block .","When the decision in decision block  is \u201cYES,\u201d the Client Application  advances to block .","In block , the Client Application  translates the user command received in block  into a request to be sent to the Sandbox Manager  over the communication link . For example, in embodiments in which the Client Application  is a web browser in which the plug-in  is loaded, in block , the web browser receives the user command (e.g., the user clicks on a hyperlink, presses a button, and the like) and in block , the plug-in  translates the user command into a request including a command (e.g., one of the commands listed in Table A above) and optionally, one or more parameters (e.g., the session identifier associated with the virtualized application file ). The user command may be an instruction to download the virtualized application file  (see ), an instruction to execute the virtualized application file , and the like. As mentioned above, the request may be a string including the command and parameters, if any.","Returning to , in block , the Client Application  transmits the request to the Sandbox Manager  over the communication link  (e.g., a TCP connection) illustrated in . Optionally, in block , the Client Application  may receive information from the Sandbox Manager . The information received may be a response to the command (e.g., a response to a \u201cping\u201d command), a result of performing the command, status and\/or progress information related to performing a command, an error message, and the like. Then, the method  terminates.","Returning to , the Sandbox Manager  receives requests from the Client Application  and performs the commands included in the requests. The Sandbox Manager  manages the transfer of the virtualized application file  (see ) from the server computing device  to the client computing device  illustrated in . The Sandbox Manager  also manages execution of the virtual application  (see ) on the client computing device  (see ). Turning to , the Sandbox Manager  includes a communications server  (e.g., a TCP server), one or more predefined Client Request object types , a Client Request Manager , a Downloader , an Executer , and a UI manager , referred to as a \u201cSurface.\u201d  is a diagram illustrating some of the structural components of an exemplary implementation of the Surface .","Returning to , as mentioned above, in block , the plug-in  requests a different communication session having a unique session identifier for each virtualized application file being transferred and\/or executed. Referring to , in response to each request for a new communication session, the communications server  establishes a communication session between the Client Application  and the Sandbox Manager  and generates a unique session identifier for the new communication session. In this manner, each virtualized application file being transferred and\/or executed may be identified by a unique session identifier.","Each of the predefined Client Request object types  is associated with a particular type of virtualized application file. For example, the Client Request object types  include a Client Request object type associated with the virtualized application file . The types are used to create a Client Request object for each virtualized application file to be downloaded and\/or executed by the Sandbox Manager . An object of the Client Request object type associated with the virtualized application file  is responsible for managing transfer and execution of the virtualized application file , including determining status, managing the cache  (see ) stored on the filesystem A, etc.","The Client Request Manager  determines whether a Client Request object has been created for a particular virtual ized application file associated with a session identifier. If a Client Request object has not been created for a virtualized application file, the Client Request Manager  (see ) identifies which of the predefined Client Request object type is configured to manage details about the virtualized application file, creates a Client Request object of the type identified, and associates the Client Request object with the session identifier associated with the virtualized application file. By way of a non-limiting example, a Client Request object may need to be created when the Sandbox Manager  receives a \u201cstart\u201d command for the first time to start downloading the virtualized application file . The Client Request Manager  may include a dictionary  configured to store Client Request objects for use in performing commands included in requests. The dictionary  may be stored in the cache  (see ) of the filesystem A (see ).","Each of the Client Request objects includes a status field indicating a status related to the transfer and\/or execution of the virtualized application file. Table B below provides non-limiting examples of status values or codes that may be stored in the status field.",{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE B"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Status Code","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Not Started","Transfer of virtualized application file is currently being"]},{"entry":[{},"initialized."]},{"entry":["In Progress","Transfer of virtualized application file is currently in"]},{"entry":[{},"progress."]},{"entry":["Complete","Transfer of virtualized application file has completed and"]},{"entry":[{},"the virtualized application file is ready to execute."]},{"entry":["Canceled","Transfer of virtualized application file has been cancelled."]},{"entry":[{},"Transfer may be canceled by a request from the Client"]},{"entry":[{},"Application 132. Alternatively, transfer of virtualized"]},{"entry":[{},"application file may be canceled by an internal operation of"]},{"entry":[{},"the Sandbox Manager 134."]},{"entry":["Error","Transfer of virtualized application file has been aborted due"]},{"entry":[{},"to an error. An error code may be sent to the Client"]},{"entry":[{},"Application 132. For example, an error code may be"]},{"entry":[{},"encoded in high-order bits of a message sent in response"]},{"entry":[{},"to the \u201cstart\u201d command. Table C below provides a non-"]},{"entry":[{},"limiting exemplary list of error codes."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The status field may be set to \u201cCanceled\u201d when user exits the web page (e.g., browses to another page, closes the browser window, and the like) on which the link to the virtualized application file being downloaded is displayed. By way of a non-limiting example, when the user exits the web page, a cancel call may be created automatically (e.g., by script code executing in the Client Application ) and sent to the plug-in . In response, the plug-in  sends a cancel message including the session identifier (e.g., \u201ccancel;<session id>\u201d) to the Sandbox Manager  over the communication link . If the status value of the status field of the Client Request object including the session identifier in the cancel message is \u201cIn Progress,\u201d the transfer is cancelled by the Sandbox Manager .","By way of a non-limiting example, the status value of the status field may be determined in the following manner. If the transfer of the virtualized application file has not yet started, the current status is \u201cNot Started.\u201d If the transfer has started and is in progress, the current status is \u201cIn Progress.\u201d If the transfer has started, is not in progress, and has completed, the current status is \u201cComplete.\u201d If the transfer has started, is not in progress, has not completed, and has been canceled, the current status is \u201cCanceled.\u201d If the transfer has started, is not in progress, has not completed, has not been canceled, and has encountered an error, the current status is \u201cError.\u201d Table C below provides a non-limiting example of error codes that may used by the Sandbox Manager .",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE C"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Error Code","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["None","No error occurred."]},{"entry":["Unknown","An unknown error occurred."]},{"entry":["Invalid Session Id","Session identifier is not valid."]},{"entry":["Network","An error occurred during transfer of the virtualized"]},{"entry":[{},"application file."]},{"entry":["Invalid Source","The source path of the virtualized application file"]},{"entry":[{},"(or one of its dependencies) is not valid (e.g., the"]},{"entry":[{},"path is not in the correct format)."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Each of the Client Request objects includes a progress field indicating an amount (e.g., a percentage from 0% to 100%) of the virtualized application file stored in the cache  (see ) of the filesystem A (see ).","Each of the Client Request objects may include a path to the transferred virtualized application file stored on the cache  (see ) of the filesystem A (see ).","The Downloader  downloads a particular virtualized application file identified by a session identifier.","The Executer  executes a particular virtualized application file identified by a session identifier.","The virtual runtime engine is configured to capture user interface messages (or API calls) made by an executing virtual application (e.g., the virtual application ) and forward them to the Surface . The Surface  processes or translates these messages into user interface commands sent to the Client Application . For example, the virtual runtime engine may capture a message to create a new window and display particular content therein made by an executing virtual application (e.g., the virtual application ) and instead of generating a new window, the virtual runtime engine forwards the message to the Surface . The Surface  may render the particular content inside the control  (see ). By way of non-limiting examples, the messages may include modifications to previously created windows (e.g., hide, change style, etc).","The Surface  may use the region occupied by the control  as a desktop area that will host the application's user interface (e.g., windows). The control  may be used by any window in the current window desktop session.","The Surface  includes one or more Listeners. Listeners are objects or procedures that are used to process events generated by the virtual application . Each Listener has one or more conditions that indicate which messages the Listener will process. For example, if the virtual application  makes a call to a SDK exposed function to open a new window (i.e., calls a window procedure), the virtual runtime engine forwards the request to the Surface . The Surface  determines whether it has loaded a Listener configured to process a new windowing message. In other words, the Surface  determines whether the new message request satisfies the condition(s) of any of the Listeners. By way of a non-limiting example, Table D below provides a list of Listeners that may be implemented by the Surface . Some of the Listeners in Table D are configured to receive data (e.g., a Windows Message ID value as defined in winuser.h in the Windows SDK).","As mentioned above, the Surface  may use a UI configuration file  to generate the UI in the control . The UI configuration file  does not describe how to render the control . Instead, the UI configuration file  defines rules for how the Surface  should render an entire window. For example, the UI configuration file  may indicate that a particular window should be rendered inside the Surface  or outside the Surface . By way of another non-limiting example, the UI configuration file  may indicate whether to show or hide a window's title bar. The UI configuration file  may have been downloaded by the Downloader  along with a particular virtualized application file identified by a session identifier.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":"FIG. 10","b":["169","169","169"]},"1. Imports","2. Inherited Configuration Files","3. Variables","4. Listeners","5. Action Packs","6. Condition Packs","1. Imports","An import object type identifies one or more extension code assemblies that include additional objects to be loaded by the Surface  during initialization. In this way, developers may extend the information directly embedded in the UI configuration file  by writing extension code assemblies (e.g., dlls) and identifying them in the UI configuration file  using import type objects. For each import type object, the Surface will automatically load the extension code assembly identified and resolve custom conditions, data objects, or actions specified in the extension code assembly.","An import type object has the following four properties: AssemblyName; Namespace; LoadType; and ResolveReferences. The AssemblyName property specifies the name of an extension code assembly including developer specified (or custom) conditions, data objects, or actions. The Namespace property specifies the namespace of the extension code assembly. The LoadType property specifies assembly load behavior. Load behaviors may include Never, Auto, and Lazy types. Never indicates the extension code assembly will never be loaded. Auto indicates loading will be performed when the extension code assembly identified by the import type object is needed. Lazy indicates loading will be performed when the UI configuration file  is resolved.","As is apparent to those of ordinary skill in the art, extension code assemblies identified in an import type object may include references to additional extension code assemblies. Thus, a tree structure of extension code assemblies (a \u201cextension code assembly dependency tree\u201d) may be specified by the UI configuration file . The ResolveReferences property of an import type object indicates how extension code assemblies referenced by a particular (or parent) extension code assembly will be resolved. The value specified may be None, All, and OneMoreStep. The value \u201cNone\u201d indicates none of the referenced extension code assemblies will be resolved. The value \u201cAll\u201d indicates all of the referenced extension code assemblies (i.e., the entire extension code assembly dependency tree) will be resolved. OneMoreStep indicates only referenced extension code assemblies of the current assembly will be loaded, any extension code assemblies identified in the referenced extension code assemblies will be ignored.","The following example XML code may be used to define an import type object in the UI configuration file .",{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Imports>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Import AssemblyName=\u201cXenocode.WPM\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Namespace=\u201cXenocode.WPM.ObjectModel\u201d"]},{"entry":[{},"LoadType=\u201cAuto\u201d ResolveReferences=\u201cAll\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Imports>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"2. Inherited Configuration Files","The UI configuration file  can be linked to other UI configuration files to support reusability of existing UI configuration files. An inherited file type object is used to identify the linked UI configuration files. Listeners, actions packs, and condition packs defined in inherited UI configuration files may be loaded by the Surface session.","Like the import object types, the inherited configuration files may also define a tree structure (an \u201cinheritance dependency tree\u201d) because an inherited file type object may include one or more inherited file type objects. The surface configuration inheritance is deep tree. In other words, all of the UI configuration files in the inheritance dependency tree may be loaded. The following example XML code may be used to define an inherited file type object in the UI configuration file .",{"@attributes":{"id":"p-0096","num":"0095"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Surface Name=\u201cDefaultChild\u201d Version=\u201c1.5\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherits>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherit Name=\u201cDefault\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Path=\u201cdefault13.xml\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Inherits>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The same inherited UI configuration file can be linked to the UI configuration file  more than once to create multiple instances of the same inherited UI configuration file. The following example XML code demonstrates the inclusion of a first reference (included in a first inherited file type object) and a second reference (included in a second inherited file type object) to the same inherited UI configuration file in the UI configuration file .",{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Surface Name=\u201cDefaultChild\u201d Version=\u201c1.5\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherits>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherit Name=\u201cDefault\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Path=\u201cdefault13.xml\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherit Name=\u201cDefault2_Instance\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Path=\u201cdefault13.xml\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Inherits>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Information and\/or objects included in an inherited UI configuration file may be accessed by using the name of the inherited file type object and the name of the item to be accessed. For example, the XML code below includes, an inherited file type object named \u201cdefault\u201d that includes a condition named \u201cValidateIsModalDialog.\u201d The condition \u201cValidateIsModalDialog\u201d is accessed in the XML below as \u201cDefault.ValidateIsModalDialog.\u201d All members of an inherited file type object, such as inherited file type objects, Variables, Listeners, Actions Packs, and Condition Packs, and the like can be accessed by this way.",{"@attributes":{"id":"p-0100","num":"0099"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Surface Name=\u201cDefault Ignore Modal Dialog Validations\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Version=\u201c1.5\u201d>"]},{"entry":[{},"<Inherits>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherit Name=\u201cDefault\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Path=\u201cdefault13.xml\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Inherits>"]},{"entry":[{},"<Listeners>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Listener Type=\u201cAfterStart\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Enabled=\u201cTrue\u201d>"]},{"entry":[{},"<Action Type=\u201cActionGroup\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"BreakOnError=\u201cFalse\u201d>"]},{"entry":[{},"<Action Type=\u201cAssignment\u201d>"]},{"entry":[{},"<Left"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Type=\u201cDataVariable\u201d"]},{"entry":[{},"Name=\u201cDefault.ValidateIsModalDialog\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"3. Variables","A variable collection object is a collection of variables. Variables are data storage objects used to store data. Depending upon the implementation details, it may be desirable for each of the variables to have a unique name. However, the same name may be given to two or more different variables in the different UI configuration files even if they are linked together as described above. Any type of data may be stored in a variable. Further, an initial value may be specified for a variable.","The variable collection object may include a \u201cLocked\u201d property. If the \u201cLocked\u201d property is set to \u201cFALSE,\u201d the Surface  can add variables to or remove variables from the variable collection object during runtime. Otherwise, if the \u201cLocked\u201d property is set to \u201cTRUE,\u201d the Surface  cannot add variables to or remove variables from the variable collection object during runtime.","Each variable may include a \u201cReadOnly\u201d attribute. If the ReadOnly attribute is set to \u201cTRUE,\u201d the data stored in the variable cannot be modified. Otherwise, if the ReadOnly attribute is set to \u201cFALSE,\u201d the data stored in the variable can be modified. The variables need not be strongly typed. Therefore, the data type of a variable may be changed so that any data may be stored in any variable. The following example XML code may be used to define a variable collection object and the variables in the collection in the UI configuration file .",{"@attributes":{"id":"p-0105","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Surface Name=\u201cDefault\u201d Version=\u201c1.5\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"<Variables Locked=\u201cFalse\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Variable Name=\u201cSurfaceHandle\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReadOnly=\u201cFalse\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Variable>"]},{"entry":[{},"<Variable Name=\u201cProcessId\u201d ReadOnly=\u201cFalse\u201d><\/Variable>"]},{"entry":[{},"<Variable Name=\u201cIsChildWindow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ReadOnly=\u201cFalse\u201d>False"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Variable>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Variables>"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A variable may be accessed using a Data type object (discussed in more detail below) of the type \u201cDataVariable.\u201d The XML code below illustrates how a Data type object having the type \u201cDataVariable\u201d accesses a variable named \u201cSurfaceHandle.\u201d In the XML code, the name attribute of the DataVariable type object is set to the name (\u201cSurfaceHandle\u201d) of the variable. The DataVariable type object may be used to change the value of the variable \u201cSurfaceHandle.\u201d",{"@attributes":{"id":"p-0107","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"..."]},{"entry":[{},"<Action Type=\u201cAssignment\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataVariable\u201d Name=\u201cSurfaceHandle\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataSurface\u201d Name=\u201cContainer\u201d><\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Action>"]},{"entry":[{},"..."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As demonstrated in the XML code below, variables may be accessed in inherited UI configuration files using the name of the inherited file type objects.",{"@attributes":{"id":"p-0109","num":"0108"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Inherits>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Inherit Name=\u201cNoResizable\u201d Path=\u201cnoresizable.xml\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Inherits>"},{"entry":"..."},{"entry":"<Left Type=\u201cDataVariable\u201d Name=\u201cNoResizable.Enabled\u201d><\/Left>"},{"entry":"..."},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Depending upon the implementation details, there may be no visibility limitations for the variables. In such implementations, the variables may be characterized as public members of the UI configuration file.","4. Listeners","As mentioned above, the Surface  includes one or more Listeners that process events generated by the virtual application . The UI configuration file  may include one or more Listener type objects used to configure the Listener(s) of the Surface . Table D below provides non-limiting examples of types of Listener type objects.",{"@attributes":{"id":"p-0113","num":"0112"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE D"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Listener Type","When Invoked","Data"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BeforeStart","before the Surface has started","Not"]},{"entry":[{},"to work","Supported"]},{"entry":["AfterStart","after the Surface has started","Not"]},{"entry":[{},"to work","Supported"]},{"entry":["BeforeStop","before the Surface is stopped","Not"]},{"entry":[{},{},"Supported"]},{"entry":["AfterStop","after the Surface is stopped","Not"]},{"entry":[{},{},"Supported"]},{"entry":["MainWindowChanged","when MainWindow property of the","Not"]},{"entry":[{},"Surface is changed.","Supported"]},{"entry":["WindowCreate","when a new Window is created in","Not"]},{"entry":[{},"the target application","Supported"]},{"entry":["WindowMessage","when a new windowing message","Windows"]},{"entry":[{},"is sent to any window of the","Message"]},{"entry":[{},"hosted application (e.g.,","ID"]},{"entry":[{},"the virtual application 110)"]},{"entry":["SurfaceWindowMessage","when a new windowing message is","Windows"]},{"entry":[{},"sent to the Host Panel control","Message"]},{"entry":[{},"(e.g., the control 129)","ID"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Windows Message ID listed in Table D above is defined in winuser.h in Windows SDK (ex: WM_SHOWWINDOW, WM_WINDOWPOSCHANGED, etc.).","Each Listener type object is associated with one or more conditions that indicate which messages the Listener configured by the Listener type object will process. A Listener type object may include one or more Data attributes that are used to determine which events and messages will be handled by the Listener configured by the Listener type object. For example, Listener type objects of the type \u201cWindowMessage\u201d include the Data attribute \u201cWindows Message ID.\u201d A MainWindow is the window whose properties can be shared between the Listeners during the lifetime of the Surface.","Depending upon the implementation details, the UI configuration file  may not define any Listener type objects. The UI configuration file  may include one or more Listener type objects of the same type. In such situations, the Surface  may invoke the Listeners defined by the Listener type objects in the order they are listed in the UI configuration file .","As demonstrated in the following XML code, each of the Listener type objects may include an Enabled attribute that indicates whether the Listener defined by the Listener type object is enabled or disabled at that moment. If the Listener is disabled, the Surface will ignore the Listener and not trigger it.",{"@attributes":{"id":"p-0118","num":"0117"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<!-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"WM_SHOWWINDOW (24) Listener, which is invoked"]},{"entry":[{},"when a window is going to be shown or hidden"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"-->"]},{"entry":[{},"<Listener Type=\u201cWindowMessage\u201d Data=\u201c24\u201d Enabled=\u201cTrue\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"..."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Listener>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Each of the Listener type objects may be associated with a Condition object and\/or an Action object. The Condition object specifies one or more conditions to be satisfied. The Action object specifies one or more actions to be performed. If a Condition object and an Action object are associated with the Listener type object and the one or more conditions of the Condition object are satisfied, the one or more actions of the Action object are performed. If a Condition object and an Action object are associated with the Listener type object but the one or more conditions of the Condition object are not satisfied, the Listener defined by the Listener type object is ignored and the one or more actions of the Action object are not performed. If an Action object is associated with the Listener type object but no Condition objects are associated with the Listener type object, the one or more actions of the Action object are performed.","The process of determining whether the one or more conditions of the Condition object are satisfied is referred to as \u201cvalidation.\u201d Condition objects may return TRUE or FALSE as the result of the validation. Each Condition object may have its own validation method(s).","The following XML code provides two non-limiting examples of Condition objects. Both Condition objects are type \u201cBooleanCondition.\u201d Each Condition object specifies a \u201cLeft\u201d value, a \u201cRight\u201d value, and an Operator. Table E below provides a non-limiting list of operators that may be used by the Condition objects. In the XML code below, the first Condition object returns TRUE if the \u201cLeft\u201d and \u201cRight\u201d values are equal. Thus, the first Condition object returns TRUE if the data window is the main window. The second Condition object returns TRUE if the \u201cLeft\u201d value is smaller than the \u201cRight\u201d value. Thus, the second Condition object returns TRUE if the x component of the location of the data window is less than five.",{"@attributes":{"id":"p-0122","num":"0121"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataWindow\u201d Name=\u201cIsMainWindow\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>True<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cSmallerThan\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataWindow\u201d Name=\u201cLocation.X\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>5<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Depending upon the implementation details, the Surface  may have an automatic type resolution system that converts data to a target type before using the data. Therefore, when comparing values having two different data types, the Surface  may convert the data type of one of the values (e.g., the \u201cRight\u201d value) into the data type of other values (e.g., the \u201cLeft\u201d value).","A ConditionGroup type object may be used to associate multiple Condition objects with a Listener type object. For example, the XML code below includes two ConditionGroup type objects. The first ConditionGroup type object returns TRUE when both the first Condition object and the second Condition object embedded in the first ConditionGroup type object return TRUE. The second ConditionGroup type object returns TRUE when either the first Condition object or the second Condition object embedded in the second ConditionGroup type object return TRUE.",{"@attributes":{"id":"p-0125","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Condition Type=\u201cConditionGroup\u201d Combination=\u201cAnd\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Left Type=\u201cDataVariable\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cEnableWindowCreateListener\u201d><\/Left>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Right Type=\u201cDataConstant\u201d>True<\/Right>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cPackedConditionCaller\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cIsTargetWindow\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Condition>"},{"entry":"<Condition Type=\u201cConditionGroup\u201d Combination=\u201cOr\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataVariable\u201d Name=\u201cCaptionVisible\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>True<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cEqual\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataVariable\u201d Name=\u201cBorderVisible\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>True<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Condition>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table E below provides non-limiting examples of Condition object types that may be included in the UI configuration file .",{"@attributes":{"id":"p-0127","num":"0126"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"98pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE E"},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}},{"entry":["Condition Object Type","Operators","Parameters","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["BooleanCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","Boolean values according"]},{"entry":[{},{},"Right: Any","to the operator."]},{"entry":[{},{},"data object"]},{"entry":["StringCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","data's according to the"]},{"entry":[{},{},"Right: Any","operator. Comparison will"]},{"entry":[{},{},"data object","be done according to the"]},{"entry":[{},{},{},"defined StringComparision"]},{"entry":[{},{},{},"value."]},{"entry":["IntegerCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","integer values according to"]},{"entry":[{},{},"Right: Any","the operator."]},{"entry":[{},{},"data object"]},{"entry":["UIntegerCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","unsigned integer values"]},{"entry":[{},{},"Right: Any","according to the operator."]},{"entry":[{},{},"data object"]},{"entry":["IntPtrCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","IntPtr values according to"]},{"entry":[{},{},"Right: Any","the operator."]},{"entry":[{},{},"data object"]},{"entry":["DoubleCondition","See","Left: Any data","Compares Left and Right"]},{"entry":[{},"Table F","object","double values according to"]},{"entry":[{},{},"Right: Any","the operator."]},{"entry":[{},{},"data object"]},{"entry":["ComparableCondition","See","Left: Any data","Compares data objects by"]},{"entry":[{},"Table F","object which is","using lComparable.CompareTo"]},{"entry":[{},{},"lComparable","method."]},{"entry":[{},{},"Right: Any"]},{"entry":[{},{},"data object"]},{"entry":["ConditionGroup","See",{},"Runs all inner conditions"]},{"entry":[{},"Table G",{},"and combine them"]},{"entry":[{},{},{},"according to the"]},{"entry":[{},{},{},"Combination mode and"]},{"entry":[{},{},{},"returns the result"]},{"entry":["PackedConditionCaller",{},"Name: Name","Runs the condition pack"]},{"entry":[{},{},"of a condition","which is defined by the"]},{"entry":[{},{},"pack","name and returns the"]},{"entry":[{},{},{},"result of it"]},{"entry":["IsMyWindow",{},"Data: Current","Validates that is current"]},{"entry":[{},{},"window","window which cause this"]},{"entry":[{},{},{},"Listener invoked is belongs"]},{"entry":[{},{},{},"to the host application."]},{"entry":{"@attributes":{"namest":"1","nameend":"4","align":"center","rowsep":"1"}}}]}}}}},"In addition to the Condition object types listed in Table E, the Surface  may also include one or more abstract base classes. Custom Condition objects may be implemented by inheriting from these abstract base classes.","Table F below lists condition operators.",{"@attributes":{"id":"p-0130","num":"0129"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE F"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Condition",{}]},{"entry":["Operator","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Equal","Returns true if Left and Right data objects are"]},{"entry":[{},"same. Otherwise returns false."]},{"entry":["NotEqual","Returns true if Left and Right data objects are"]},{"entry":[{},"not same. Otherwise returns false."]},{"entry":["StartsWith","Returns true if the Left data objects is starts with"]},{"entry":[{},"the Right data object. Otherwise it returns false."]},{"entry":[{},"This ConditionOperator can only be used with the"]},{"entry":[{},"StringCondition condition type."]},{"entry":["EndsWith","Returns true if the Left data object is ends with the"]},{"entry":[{},"Right data object. Otherwise it returns false."]},{"entry":[{},"This ConditionOperator can only be used with the"]},{"entry":[{},"StringCondition condition type."]},{"entry":["BiggerThan","Returns true if the Left data object is bigger than the"]},{"entry":[{},"Right data object. Otherwise it returns false."]},{"entry":["SmallerThan","Returns true if the Left data object is smaller than the"]},{"entry":[{},"Right data object. Otherwise it returns false."]},{"entry":["BiggerOrEqual","Returns true if the Left data object is equal or bigger"]},{"entry":[{},"than the Right data object. Otherwise it returns false."]},{"entry":["SmallerOrEqual","Returns true if the Left data object is equal or smaller"]},{"entry":[{},"than the Right data object. Otherwise it returns false."]},{"entry":["Contains","Returns true if Left data object contains Right data"]},{"entry":[{},"object in it. Otherwise it returns false."]},{"entry":[{},"This ConditionOperator can only be used with the"]},{"entry":[{},"StringCondition condition type."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Table G below lists combination operators for use by ConditionGroup type objects.",{"@attributes":{"id":"p-0132","num":"0131"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE G"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Combination",{}]},{"entry":["Operator","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["And","Returns true if all the inner conditions returns true."]},{"entry":[{},"Otherwise it returns false."]},{"entry":["Or","Returns true if at least one of the inner conditions returns"]},{"entry":[{},"true. Otherwise it returns false."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Data type objects are used to define DataObjects that are used to retrieve, set, and\/or modify data values. The following XML code provides a non-limiting example of a Data type object. The Data type object has a type \u201cDataSurface\u201d and stores the \u201cWindowHistories.SaveState.\u201d The Data type object defines two parameters (a constant \u201cDataConstant\u201d and a \u201cDataWindow\u201d parameter) and sets the value of a parameter type \u201cDataConstant\u201d to \u201cFirst State.\u201d The \u201cDataWindow\u201d parameter stores the value of the \u201cHandle\u201d of the \u201cDataSurface\u201d named \u201cWindowHistories.SaveState.\u201d",{"@attributes":{"id":"p-0134","num":"0133"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Data Type=\u201cDataSurface\u201d Name=\u201cWindowHistories.SaveState\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Parameter Type=\u201cDataConstant\u201d>First State<\/Parameter>"]},{"entry":[{},"<Parameter Type=\u201cDataWindow\u201d Name=\u201cHandle\u201d><\/Parameter>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Data>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following XML code provides additional non-limiting examples of Data type objects. As is apparent to those of ordinary skill in the art, the XML code below defines only portions of Condition type objects and are not complete definitions thereof.",{"@attributes":{"id":"p-0136","num":"0135"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Right Type=\u201cDataObject\u201d Name=\u201c#5\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Data Type=\u201cDataSurface\u201d Name=\u201cWindowHistories.GetState\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Parameter Type=\u201cDataWindow\u201d"]},{"entry":[{},"Name=\u201cHandle\u201d><\/Parameter>"]},{"entry":[{},"<Parameter Type=\u201cDataConstant\u201d>First State<\/Parameter>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Right>"},{"entry":"<Left Type=\u201cDataConstant\u201d>False<\/Left>"},{"entry":"<Left Type=\u201cDataVariable\u201d Name=\u201cDefault.ProcessId\u201d><\/Left>"},{"entry":"<Right Type=\u201cDataTypedObject\u201d TypeName=\u201cCommonOperations\u201d"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cSum\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Parameter Type=\u201cDataWindow\u201d Name=\u201cWidth\u201d><\/Parameter>"]},{"entry":[{},"<Parameter Type=\u201cDataConstant\u201d>15<\/Parameter>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Right>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The Surface  may change the type of data to match the data type of a DataObject. The Surface  may use simple and\/or complex data types. Data type objects may be used to access a DataObject itself or any member (method, constructor, field, property) of that DataObject.","Data type objects are generally used in Condition parameters, Action parameters, DataObject parameters etc. in the Surface. Table H below lists non-limiting examples of types of Data type objects.",{"@attributes":{"id":"p-0139","num":"0138"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE H"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Data Object",{},{}]},{"entry":["Type","Parameters","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["DataConstant",{},"Any Constant data."]},{"entry":["DataVariable","Name: The","Used to access any variable in the"]},{"entry":[{},"fully qualified","configuration object. It is also"]},{"entry":[{},"name of the","allows access any inherited"]},{"entry":[{},"Variable","configuration variables with this"]},{"entry":[{},{},"data type. The name is fully"]},{"entry":[{},{},"qualified ([name of inherited"]},{"entry":[{},{},"config].[name of element])."]},{"entry":["DataWindow","Name: The","Used to access any member in the"]},{"entry":[{},"fully qualified","ProxyWindow instance of the"]},{"entry":[{},"name of the","Window which is in the current"]},{"entry":[{},"member in the","listener context."]},{"entry":[{},"ProxyWindow"]},{"entry":["DataContext","Name: Path of the","Used to access any member in the"]},{"entry":[{},"member in the","current ListenerContext instance"]},{"entry":[{},"ListenerContext"]},{"entry":["DataCondition","Condition: Inner","Gets the inner condition result"]},{"entry":[{},"condition object","as the data"]},{"entry":["DataObject","Data: Inner data","Gets the result of the inner data"]},{"entry":[{},"object","object as the data"]},{"entry":["DataSurface","Name: Path of","Used to access any member in the"]},{"entry":[{},"the member in","Surface."]},{"entry":[{},"the Surface"]},{"entry":["DataTypedObject","Name: Path of","Invokes any member of any class"]},{"entry":[{},"any class and","and gets the result as the data."]},{"entry":[{},"its member"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Data type objects listed in Table H above may have different structures. For example, a DataVariable type (discussed above) is a reference to a variable and a DataWindow type allows access to a current ProxyWindow object (i.e., the window that triggered the current Listener).","ProxyWindow is a proxy class that can be used to access properties and methods of a Window. These methods and properties are generally sets of windowing message operations that together perform a group (or single) operation on the window. (ex. BorderVisible, CaptionVisible, Location, Bounds etc.)","As mention above, a Listener type object may be associated with one or more Condition objects and\/or one or more Action objects. Each Condition object specifies one or more conditions to be satisfied. Each Action object specifies one or more actions that will be performed by the Surface .","If the Listener type object is associated with one or more Condition objects, the one or more actions specified by the one or more Action objects associated with the Listener type object will be performed by the Surface  only if the conditions specified by the one or more Condition objects are satisfied. Otherwise, if the Listener type object is not associated with one or more Condition objects, the one or more actions specified by the one or more Action objects associated with the Listener type object will be performed by the Surface .","However, as demonstrated in the following XML code, Action objects may also be associated with one or more Condition object. Therefore, before the one or more actions specified by the Action object are performed, the conditions specified by the one or more Condition objects associated the Action object must be satisfied (or validated).",{"@attributes":{"id":"p-0145","num":"0144"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Action Type=\u201cActionGroup\u201d BreakOnError=\u201cFalse\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Action Type=\u201cAssignment\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cPackedConditionCaller\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cIsResizableWindow\u201d><\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataWindow\u201d Name=\u201cSize\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataSurface\u201d Name=\u201cContainerSize\u201d><\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Action>"]},{"entry":[{},"<Action Type=\u201cAssignment\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataWindow\u201d Name=\u201cSizeable\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Action>"]},{"entry":[{},"<Action Type=\u201cCenterWindow\u201d Options=\u201cCenterParent\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"RePaint=\u201cTrue\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Action>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Table I below provides non-limiting examples of types of Action objects.",{"@attributes":{"id":"p-0147","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE I"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Action Object Type","Parameters","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Assignment","Left: Any data type","Assigns Right data to"]},{"entry":[{},"Right: Any data type","the Left data"]},{"entry":["ActionGroup",{},"Contains a set of"]},{"entry":[{},{},"Actions in it, and"]},{"entry":[{},{},"applies all actions in"]},{"entry":[{},{},"the given order."]},{"entry":["BreakAction",{},"Breaks the current"]},{"entry":[{},{},"execution stack."]},{"entry":["CenterWindow",{},"Centers current"]},{"entry":[{},{},"Window context in the"]},{"entry":[{},{},"Host Panel control"]},{"entry":[{},{},"(e.g., the control 129)."]},{"entry":["CloseWindow",{},"Closes current Window"]},{"entry":[{},{},"context"]},{"entry":["EnableListener","Enable: Enable value of","Enables\/disables the"]},{"entry":[{},"the listener","given listener."]},{"entry":[{},"ListenerIndex: Index of"]},{"entry":[{},"the listener"]},{"entry":["EnumWindowsAction","WindowSource: Can be","Enumerates windows"]},{"entry":[{},"one of the following","which have been"]},{"entry":[{},"values;","defined by the window"]},{"entry":[{},"AllWindows,","source."]},{"entry":[{},"CurrentProcess,"]},{"entry":[{},"ProcessById,"]},{"entry":[{},"ProcessByName,"]},{"entry":[{},"SavedWindows,"]},{"entry":[{},"CurrentChild"]},{"entry":["InvalidateWindow",{},"Invalidates current"]},{"entry":[{},{},"window. Causes the"]},{"entry":[{},{},"window to be redrawn."]},{"entry":["MethodCallAction","Data: Data object which","Calls any method."]},{"entry":[{},"indicates the method"]},{"entry":["PackedActionCaller","Name: Packed action name","Calls any action pack."]},{"entry":["SendMessage","Msg: Windowing Message","Sends a message to"]},{"entry":[{},"WParam: Any data to","the current window."]},{"entry":[{},"identify the wparam"]},{"entry":[{},"LParam: Any data to"]},{"entry":[{},"identify the lparam"]},{"entry":["SaveWindowState","Name: Name of the state","Saves current window"]},{"entry":[{},{},"state as the given state"]},{"entry":[{},{},"name"]},{"entry":["RestoreWindowState","Name: Name of the state","Restores window's"]},{"entry":[{},{},"state to the given state"]},{"entry":["ParameterlessMessageAction","Msg: WindowMessage","Sends a windowing"]},{"entry":[{},{},"message with no"]},{"entry":[{},{},"parameters to the"]},{"entry":[{},{},"current window"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"When a new Listener event is triggered by the Surface, a ListenerContext object is created. The ListenerContext object contains the data objects that are available during the Listener session. For example, when a new WindowMessage Listener has been triggered, the Surface prepares a ListenerContext object that contains the Message structure and Window instance to which the windowing message that triggered the new WindowMessage Listener belongs.","When a new Listener invocation is triggered, the Surface creates the ListenerContext object, which contains two pieces of information: ListenerType and FilterData. When the Surface enters the Listeners loop (see discussion below of a method ), the Surface first checks to see that the current Listener has the same ListenerType as the ListenerContext object. If not the Listener will be ignored, otherwise the Surface will try to compare the Data object(s) of the Listener with the FilterData of the ListenerContext object.","ListenerContext objects also manage tracing operations. If an EnableTrace property of the ListenerContext object is TRUE, the Surface will write trace messages to the ListenerContext object during all condition validations and action processing.","ListenerContext objects also have an IsAlive property. This property indicates whether the Surface should continue to run the remaining Listeners. If this value is set to FALSE while a Listener is running, the Surface will stop running the remaining Listeners.","As demonstrated by the XLM code below, the members of the ListenerContext object may be accessed by a Data type object having the type \u201cDataContext.\u201d",{"@attributes":{"id":"p-0153","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ConditionPack Name=\u201cIsShowWindowMessage\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cIntPtrCondition\u201d Operator=\u201cNotEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Left Type=\u201cDataContext\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cHookedMessage.wParam\u201d><\/Left>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Right Type= \u201cDataConstant\u201d>0<\/Right>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ConditionPack>"]},{"entry":[{},"<ActionPack Name=\u201cBreak\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Action Type=\u201cAssignment\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<Left Type=\u201cDataContext\u201d Name=\u201cIsAlive\u201d><\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Action>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ActionPack>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"When the UI configuration file  includes inherited file type object, the Surface runs the Listener(s) of the UI configuration file  first. Then, the Surface  runs the Listeners of the inherited configurations.","5. Action Packs","An ActionPack object is a collection or set of Action objects packaged together to form a single action. An ActionPack object may be called by different Listeners. Thus, instead of including the same set of actions in the Action objects (e.g., action tags) of multiple Listener type objects, a single set of actions can be included in an ActionPack object and called as a unit by different Listener type objects.","Depending upon the implementation details, it may be desirable for each ActionPack object to have a unique name in the UI configuration file . An ActionPack object is executed by an Action object of the type \u201cPackedActionCaller.\u201d In particular implementations, an ActionPack object may be limited to having a single Action object. In such embodiments, an ActionGroup object may be used to include multiple Action objects.","The following XML code provides a non-limiting example of an ActionPack object having an embedded Condition object and Data type object.",{"@attributes":{"id":"p-0159","num":"0158"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ActionPacks>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ActionPack Name=\u201cSaveFirstState\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Action Type=\u201cMethodCallAction\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataConstant\u201d>False<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataSurface\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name=\u201cWindowHistories.Contains\u201d>"]},{"entry":[{},"<Parameter Type=\u201cDataWindow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cHandle\u201d><\/Parameter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Right>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Data Type=\u201cDataSurface\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name=\u201cWindowHistories.SaveState\u201d>"]},{"entry":[{},"<Parameter Type=\u201cDataConstant\u201d>First"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"State<\/Parameter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Parameter Type=\u201cDataWindow\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cHandle\u201d><\/Parameter>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Data>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Action>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ActionPack>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ActionPacks>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The following XML code provides a non-limiting example of a Listener type object having an embedded Action object of type \u201cPackedActionCaller\u201d that calls an ActionPack object named \u201cCaptureWindow.\u201d",{"@attributes":{"id":"p-0161","num":"0160"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<Listener Type=\u201cWindowMessage\u201d Data=\u201c24\u201d Enabled=\u201cTrue\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cConditionGroup\u201d Combination=\u201cAnd\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d Operator=\u201cEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Left Type=\u201cDataVariable\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cEnableWindowShowListener\u201d><\/Left>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Right Type=\u201cDataConstant\u201d>True<\/Right>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cPackedConditionCaller\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cIsTargetWindow\u201d><\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Action Type=\u201cPackedActionCaller\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cCaptureWindow\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Action>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/Listener>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"6. Condition Packs","A ConditionPack object is a collection or set of Condition objects packaged together to form a single reusable set of conditions for validation by the Surface . The ConditionPack object may be called from different objects (e.g., Listener type objects, Action objects, ActionPack objects, ActionGroup objects, and the like).","Depending upon the implementation details, it may be desirable for each ConditionPack object to have a unique name in the UI configuration file . A ConditionPack object is executed by an Action object of the type \u201cPackedConditionCaller.\u201d In particular implementations, a ConditionPack object may be limited to having a single Condition object. In such embodiments, a ConditionGroup object may be used to include multiple Condition objects.","The following XML code provides a non-limiting example of a Condition Pack object named \u201cIsTargetWindow\u201d having an embedded ConditionGroup object and Data type object.",{"@attributes":{"id":"p-0166","num":"0165"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<ConditionPacks>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ConditionPack Name=\u201cIsTargetWindow\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cConditionGroup\u201d Combination=\u201cAnd\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cIntPtrCondition\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataWindow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cParentHandle\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>0<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cConditionGroup\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Combination=\u201cOr\u201d>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataVariable\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cValidateIsModalDialog\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False"]},{"entry":[{},"<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataWindow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cIsModalDialog\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False"]},{"entry":[{},"<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cConditionGroup\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Combination=\u201cOr\u201d>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataVariable\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cValidateIsToolWindow\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False"]},{"entry":[{},"<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Condition>"]},{"entry":[{},"<Condition Type=\u201cBooleanCondition\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Operator=\u201cEqual\u201d>"]},{"entry":[{},"<Left Type=\u201cDataWindow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cIsToolWindow\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>False"]},{"entry":[{},"<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/ConditionPack>"]},{"entry":[{},"<ConditionPack Name=\u201cIsShowWindowMessage\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Condition Type=\u201cIntPtrCondition\u201d Operator=\u201cNotEqual\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Left Type=\u201cDataContext\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Name=\u201cHookedMessage.wParam\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Left>"]},{"entry":[{},"<Right Type=\u201cDataConstant\u201d>0<\/Right>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Condition>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ConditionPack>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/ConditionPacks>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The following XML code provides two non-limiting examples of Condition objects both of type \u201cPackedConditionCaller.\u201d The first one calls a Condition Pack object named \u201cIsShowWindowMessage.\u201d The second one calls a Condition Pack object named \u201cIsTargetWindow.\u201d",{"@attributes":{"id":"p-0168","num":"0167"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Condition Type=\u201cPackedConditionCaller\u201d"},{"entry":"Name=\u201cIsShowWindowMessage\u201d>"},{"entry":"<\/Condition>"},{"entry":"<Condition Type=\u201cPackedConditionCaller\u201d Name=\u201cIsTargetWindow\u201d>"},{"entry":"<\/Condition>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0169","num":"0168"},"figref":["FIG. 6","FIGS. 2 and 5"],"b":["350","134","355","134","132","360","134","132","134","134"]},"Next, in decision block , the parameters are validated. By way of a non-limiting example, the parameters may be validated by determining whether the number of parameters matches the number that were expected. The decision in decision block  is \u201cYES,\u201d when the parameter are valid (e.g., the number of parameters matches the number that were expected). Thus, if a particular command does not include parameters (e.g., the \u201cping\u201d command), the decision in decision block  is \u201cYES,\u201d if the request does not include any parameters. The decision in decision block  is \u201cNO,\u201d when the parameter are invalid (e.g., the number of parameters does not match the number that were expected).","When the decision in decision block  is \u201cNO,\u201d in block , an error message is sent to the Client Application . Then, the method  terminates.","When the decision in decision block  is \u201cYES,\u201d the Sandbox Manager  advances to decision block . In decision block , the Sandbox Manager  determines whether the request includes a session identifier. The decision in decision block  is \u201cYES\u201d when the request includes a session identifier. The decision in decision block  is \u201cNO\u201d when the request does not include a session identifier.","When the decision in decision block  is \u201cYES,\u201d in block , the session identifier is used to identify or locate a Client Request object associated with the session identifier and responsible for downloading and\/or executing the virtualized application file identified by the session identifier. The dictionary  of the Client Request Manager  may be used to lookup the Client Request object associated with the session identifier.","In decision block , the Sandbox Manager  determines whether a Client Request object associated with the session identifier has been identified. The decision in decision block  is \u201cYES,\u201d when a Client Request object associated with the session identifier has been identified. The decision in decision block  is \u201cNO,\u201d when a Client Request object associated with the session identifier has not been identified in block .","When the decision in decision block  is \u201cNO,\u201d in block , the Sandbox Manager  sends an error message to the Client Application . The error message may include the error indicator \u201cInvalid Session Id\u201d (see Table C above). Then, the method  terminates. Thus, if a command is sent to the Sandbox Manager  with a session identifier that is not in the dictionary , an error is returned to the Client Application  and a new request must be sent to the Sandbox Manager . For example, if a \u201cstatus,\u201d \u201cprogress,\u201d or \u201cexec\u201d command was received in block  including a session identifier not associated with a Client Request object, for the Sandbox Manager  to perform the command, the transfer must be started again with a new request including the \u201cstart\u201d command.","When the decision in decision block  is \u201cYES,\u201d the Sandbox Manager  advances to block  described below.","When the decision in decision block  is \u201cNO,\u201d the Sandbox Manager  advances to decision block  to determine whether the Sandbox Manager  should create a new Client Request object. Referring to Table A above, only two commands listed do not include the session identifier: the \u201cstart\u201d command; and the \u201cping\u201d command. The decision in decision block  is \u201cYES\u201d when the command in the request is the \u201cstart\u201d command. Otherwise, the decision in decision block  is \u201cNO.\u201d Thus, the decision in decision block  is \u201cNO\u201d when the request includes the \u201cping\u201d command.","When the decision in decision block  is \u201cYES,\u201d in block , the Sandbox Manager  creates a new Client Request object and associates the new Client Request object with a session identifier. By way of a non-limiting example, a method call may be made to the Client Request Manager  (see ) to create the new Client Request object. In response to the method call, the Client Request Manager  identifies the Client Request object type that manages details about the particular virtualized application file being transferred to and\/or executed on the client computing device  (see ). Then, a new Client Request object having the type identified by the Client Request Manager  is created.","The Client Request Manager  includes a Client Request object for each virtualized application file the Sandbox Manager  is transferring and\/or executing. The Client Request object may be cached in the dictionary  of the Client Request Manager , which may be configured to provide fast lookup of the Client Request object in response to subsequent requests including the session identifier involving the cached Client Request object. The Client Request object is responsible for managing the transfer of the virtualized application file, status of the transfer, progress of the transfer, execution of the virtualized application file, management of the cache  (see ), etc. Thus, when a transfer is started, a unique session identifier is generated, a Client Request object is created, the Client Request object is associated with the unique session identifier, and the Client Request object is stored in the dictionary  for future lookups. The status field of the new Client Request object is set to \u201cNot Started\u201d and the progress field is set to \u201c0%.\u201d","Then, the Sandbox Manager  advances to block  from block . When the decision in decision block  is \u201cNO,\u201d the Sandbox Manager  also advances to block .","In block , Sandbox Manager  performs the command. If applicable, the command is executed on the Client Request object identified in block  or created in block . Then, in optional block , Sandbox Manager  sends information back to the Client Application . For example, as discussed below with respect to the method  (see ), some commands instruct the Sandbox Manager  to perform operations that return values to the Client Application . Then, the method  terminates.","If the command is a \u201cping\u201d command, in blocks  and , the Sandbox Manager  sends a response to the Client Application . If the command is a \u201cstart\u201d command, in block , the Downloader  downloads the virtualized application file . If the command is a \u201cstatus\u201d command, in blocks  and , the Sandbox Manager  obtains the status value from the status field of the Client Request object identified in block  or created in block  and sends the status value to the Client Application . If the command is a \u201cprogress\u201d command, in blocks  and , the Sandbox Manager  obtains the progress value from the progress field of the Client Request object identified in block  or created in block  and sends the progress value to the Client Application . If the command is a \u201cexec\u201d command, in block , the Executer  executes the virtualized application file .",{"@attributes":{"id":"p-0183","num":"0182"},"figref":["FIG. 7","FIG. 2","FIG. 1","FIG. 2","FIG. 1","FIG. 1"],"b":["400","132","134","400","140","140","139","7","139","9","400","140","139","9","400","132","134","132","400"]},"In first block , the Client Application  receives a new user command to download and execute the virtualized application file . In block , the Client Application  sends a request including the \u201cping\u201d command to the Sandbox Manager . The \u201cping\u201d command is sent by the Client Application  to determine whether the Sandbox Manager  is in a state to service commands (e.g., available and functioning) and capable of responding to requests. If the Sandbox Manager  is running and in a state to service commands, the Sandbox Manager  will send a response to the Client Application .","In decision block , the Client Application  determines whether it has received a response from the Sandbox Manager  to the request sent in block . The decision in the decision block  is \u201cYES\u201d when the Client Application  has received a response from the Sandbox Manager  indicating that the Sandbox Manager  is in a state to service commands and is capable of responding to requests. The decision in the decision block  is \u201cNO\u201d when the Client Application  has not received a response from the Sandbox Manager  or receives a response indicating the Sandbox Manager  is not in a state to service commands (e.g., available and functioning) or is incapable of responding to requests.","When the decision in the decision block  is \u201cNO,\u201d the Client Application  returns to block . Alternatively, when the decision in the decision block  is \u201cNO,\u201d the method  may terminate. Optionally, the Client Application  may display a message to the user indicating the virtualized application file  is not available to download.","When the decision in the decision block  is \u201cYES,\u201d in block , the Client Application  establishes a new communication session with the Sandbox Manager  and sends a request including a \u201cstart\u201d command to the Sandbox Manager . As mentioned above, when the communications server  (see ) of the Sandbox Manager  initiates a new session, the communications server  generates a new and unique session identifier. The \u201cstart\u201d command commands the Sandbox Manager  to begin transferring the virtualized application file .","In block , when the Sandbox Manager  receives the \u201cstart\u201d command, the Client Request Manager  identifies a Client Request object type for the virtualized application file , creates a Client Request object of the type identified, and associates the session identifier with the new Client Request object. Then, the Sandbox Manager  determines whether at least a portion of the virtualized application file  is stored in the cache  (see ) of the filesystem A (see ). The decision in the decision block  is \u201cYES\u201d when at least a portion of the virtualized application file  is stored in the cache  (see ). Otherwise, the decision in the decision block  is \u201cNO.\u201d","When the decision in decision block  is \u201cYES,\u201d in decision block , the Sandbox Manager  determines whether the virtualized application file  is stored in its entirety in the cache  (see ) of the filesystem A (see ). The decision in the decision block  is \u201cYES\u201d when the virtualized application file  is stored in its entirety in the cache  (see ) of the filesystem A (see ). The decision in the decision block  is \u201cNO\u201d when less than the entire virtualized application file  is stored in the cache  (see ).","When the decision in decision block  is \u201cYES,\u201d the virtualized application file  need not be transferred to the client computing device  because the virtualized application file is already stored in the cache  (see ) of the filesystem A (see ). In block , the Sandbox Manager  updates the status field of the Client Request object to \u201cComplete\u201d and the progress field to \u201c100%.\u201d Then, the Sandbox Manager  advances to block .","When the decision in decision block  or decision block  is \u201cNO,\u201d the Sandbox Manager  begins transferring the virtualized application file.","If the decision block  was \u201cNO,\u201d in block , the Sandbox Manager  adds the virtualized application file  to the cache  (see ) of the filesystem A (see ). The Sandbox Manager  sets the status field of the Client Request object to \u201cNot Started\u201d and the progress field to \u201c0%.\u201d Then, in block , the Sandbox Manager  begins transferring the virtualized application file  from its beginning.","If the decision block  was \u201cYES\u201d but the decision block  was \u201cNO,\u201d in block , the Sandbox Manager  sets the status field of the Client Request object to \u201cIn Progress,\u201d calculates the progress value, and sets the progress field to the calculated progress value. Then, the Sandbox Manager  begins transferring the virtualized application file from wherever the previous transfer activities left off. The transfer may be started in a new thread using http protocol. In block , the progress field of the Client Request object is updated occasionally (e.g., periodically) to indicate the percentage of the virtualized application file  transferred. Then, the Sandbox Manager  advances to block .","In block , the Sandbox Manager  returns the session identifier associated with the virtualized application file  to the Client Application .","In block , the Client Application  sends a request to the Sandbox Manager  including the \u201cstatus\u201d command. In response to the \u201cstatus\u201d command, in block , the Sandbox Manager  sends the status value (e.g., \u201cin progress\u201d or \u201ccomplete\u201d) of the status field of the Client Request object to the Client Application . In block , the Client Application  receives the status value sent by the Sandbox Manager . Optionally, the Client Application  may display the status value of the transfer to the user.","In decision block , the Client Application  determines whether the entire virtualized application file has been downloaded. The decision in decision block  is \u201cYES,\u201d if the status field of the Client Request object indicates the entire virtualized application file has been downloaded (e.g., the status field has the value \u201cComplete\u201d). The decision in decision block  is \u201cNO,\u201d if the status field of the Client Request object indicates the virtualized application file  has not been completely downloaded (e.g., status field has the value \u201cIn Progress\u201d).","If the decision in decision block  is \u201cNO,\u201d in block , the Client Application  sends a request to the Sandbox Manager  including the \u201cprogress\u201d command to determine the progress value of the transfer of the virtualized application file . In response to the \u201cprogress\u201d command, in block , the Sandbox Manager  sends the progress value in the progress field of the Client Request object (e.g., \u201c10%,\u201d \u201c25%,\u201d etc.) to the Client Application . In block , the Client Application  receives the progress value sent by the Sandbox Manager . Optionally, the Client Application  may display the progress value to the user. Then, the Client Application  returns to block .","If the decision in decision block  is \u201cYES,\u201d in block , the Client Application  sends a request to the Sandbox Manager  including an \u201cexec\u201d command. In response to the \u201cexec\u201d command, in block , the Executer  (see ) of the Sandbox Manager  executes the virtual application  at least partially implemented by the virtualized application file  that the Sandbox Manager  has just transferred. Then, the method  terminates.","As mentioned above, the parameters of the \u201cexec\u201d command includes the session identifier (identifying the virtualized application file transferred) and optional command-line arguments. The session identifier is used to identify the Client Request Object storing the path to the transferred virtualized application file stored on the cache  (see ) of the filesystem A (see ). The path is then used to execute the transferred virtualized application file. The transferred virtualized application file may be executed via an operating system programming interface function call (e.g., ShellExecute, CreateProcess, and the like).","In block , if the virtualized application file  is configured to be executed inside a virtualized environment provided a virtual machine executable file (e.g., the virtualized application file  is not an executable file having the \u201c.exe\u201d extension), the Sandbox Manager  executes the virtual machine executable file and instructs the executing virtual machine to execute the virtualized application file . The Sandbox Manager  may send a command to the operating system A to execute the virtual machine inside an operating system shell process. The command may include the path to the virtualized application file  as a parameter that the virtual machine uses to locate and execute the virtualized application file .","If more than one virtual machine executable file (e.g., virtual machine executable files ) are stored in the system memory A, the Sandbox Manager  identifies which of the virtual machine executable files  is configured to execute the virtualized application file . As explained above, the virtualized application file  may include a version identifier that may be used by the Sandbox Manager  to select which of the virtual machine executable files  is configured to execute the virtualized application file . Each of the virtual machine executable files  may also include a version identifier that may be matched to the version identifier of a particular virtualized application file to determine whether the virtual machine executable file is configured to execute the particular virtualized application file.","By way of a non-limiting example, blocks , , , , , and  of the method  may be implemented in accordance with the following block of pseudo code.",{"@attributes":{"id":"p-0203","num":"0202"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ check filesystem cache"]},{"entry":[{},"long lTransferStartPoint = 0;"]},{"entry":[{},"string sPath = BuildCacheLocation(uriAppSource);"]},{"entry":[{},"if(File.Exists(sPath))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"long lFullSize = FindFullSize(uriAppSource);"]},{"entry":[{},"long lSizeOnDisk = File.GetSize(sPath);"]},{"entry":[{},"if(lSizeOnDisk == lFullSize) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ the app is already fully cached,"]},{"entry":[{},"\/\/ no transfer needed"]},{"entry":[{},"SetTransferComplete( );"]},{"entry":[{},"return;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"lTransferStartPoint = lSizeOnDisk;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ start the transfer"]},{"entry":[{},"StartDownload(uriAppSource, lTransferStartPoint);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"By way of a non-limiting example, the function named \u201cStartDownload\u201d used in the above block of pseudo code may be implemented as follows:",{"@attributes":{"id":"p-0205","num":"0204"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ a function to transfer the application"]},{"entry":[{},"function void StartDownload(Uri uriSource, long lStartPoint)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HttpWebRequest oReq = HttpWebRequest.Create(uriSource);"]},{"entry":[{},"oReq.AddRange(lStartPoint);"]},{"entry":[{},"HttpWebResponse oRes = oReq.GetResponse( );"]},{"entry":[{},"Stream oStream = oRes.GetResponseStream( );"]},{"entry":[{},"while(true) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int iBytes = oStream.Read(aBuffer);"]},{"entry":[{},"if(iBytes == 0) return;"]},{"entry":[{},"WriteBufferToCacheLocation(aBuffer);"]},{"entry":[{},"UpdateCurrentProgress( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"By way of a non-limiting example, the function named \u201cFindFullSize\u201d used in the first block of pseudo code may be implemented as follows:",{"@attributes":{"id":"p-0207","num":"0206"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ a function to return the full size of the"]},{"entry":[{},"\/\/ application to be transferred."]},{"entry":[{},"function long FindFullSize(Uri uriAppSource)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"string sResponse = DoHttpHeadRequest(uriAppSource);"]},{"entry":[{},"long lContentLength = ParseContentLength(sResponse);"]},{"entry":[{},"return lContentLength;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Referring to , the method  is performed as the Executer  initiates execution of the virtual application  in block  of the method  illustrated in  or block  of the method  illustrated in . When the virtual application  is executed by the Executer  and its user interface displayed by the Client Application , the virtual application  may be characterized as being \u201chosted\u201d inside the Surface .","To host the virtual application  inside the Surface, in block , a new instance of the Surface class is created. Then, in block , the UI configuration file  for the virtual application  is loaded by the Surface . When the instance is being created, the handle of the hosting panel or control  is forwarded to the Surface.","The following pseudo code provides an example of how the new instance of the Surface class may be created and how the handle of the control  may be provided to the new instance of the Surface class. As is apparent to those of ordinary skill in the art, the handle of the control  may have been passed to the Sandbox Manager  by the plug-in . The Sandbox Manager  may then provide the handle of the control  to the Surface .",{"@attributes":{"id":"p-0211","num":"0210"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Handle hWndHostingPanel = GetPanelHandle( );"]},{"entry":[{},"Surface surface = new Surface(hWndHostingPanel);"]},{"entry":[{},"\/\/ create the Start info for the target process"]},{"entry":[{},"ProcessStartInfo pInfo = BuildProcessInfo( );"]},{"entry":[{},"surface.Start (pInfo);"]},{"entry":[{},"\/\/ Load the configuration file"]},{"entry":[{},"string configPath = FindConfigFilePath( );"]},{"entry":[{},"surface.Configuration.Load(configPath);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"After the UI configuration file  is loaded, in block , the Surface  waits for notification messages from the virtual runtime engine. In block , the Surface  receives a notification message from the virtual runtime engine. After receiving the message, in block , the Surface triggers a new Listener event and creates a new ListenerContext object. As mentioned above, ListenerContext objects have a ListenerType value, FilterData, and an IsAlive property. The ListenerContext object may also include one or more Data type objects.","In block , the Surface  sets the values of Data type objects in the ListenerContext object, sets the ListenerType value, and sets the FilterData values based at least in part on the event that invoked the notification message received in block .","Starting in block , the Surface  loops through the Listeners. In other words, the Surface  analyzes each of the Listener type objects in the UI configuration file (or Listener objects defined thereby) to determine which, if any, are associated with the event that invoked the notification message. By way of a non-limiting example, in block , the Surface  may set the execution stack to the current UI configuration file (e.g., the UI configuration file ). In other words, the Surface  may loop through Listeners in the stack frame. In the method , the Surface  may examine each of the Listener type objects in the order they are defined in the UI configuration file .","In decision block , the Surface  determines whether the UI configuration file includes one or more Listener type objects.","If the UI configuration file does not include one or more Listener type objects, the decision in decision block  is \u201cNO,\u201d and the Surface  advances to block .","If the UI configuration file includes one or more Listener type objects, the decision in decision block  is \u201cYES,\u201d and in block , the Surface  selects a Listener type object to evaluate.","Then, in decision block , the Surface  determines whether the IsAlive property of the ListenerContext indicates it is alive. If the IsAlive property of the ListenerContext indicates it is not alive, the decision in decision block  is \u201cNO,\u201d and in block , the Surface  terminates the loop.","If the IsAlive property of the ListenerContext indicates it is alive, the decision in decision block  is \u201cYES.\u201d When the decision in decision block  is \u201cYES,\u201d in decision block , the Surface  validates that the Type of the Listener selected in block  is same as the ListenerType value of the ListenerContext object. If the type is not the same, the decision in decision block  is \u201cNO,\u201d and in decision block , the Surface  determines whether there is a next Listener. If there is a next Listener, the decision in decision block  is \u201cYES,\u201d and the Surface returns to in block  and selects another Listener. If there are no more Listeners, the decision in decision block  is \u201cNO,\u201d and the Surface  advances to block  to terminate the loop.","If the Type of the Listener is the same as the ListenerType value of the ListenerContext object, the decision in decision block  is \u201cYES.\u201d When the decision in decision block  is \u201cYES,\u201d the Surface  advances to decision block  whereat the Surface  determines whether the Listener is validated in view of the ListenerContext object. In decision block , the Surface  compares the Data of the Listener with the data of the FilterData of the ListenerContext object to determine whether the Listener should be processed further. In other words, in decision block , the Surface  determines whether the notification message received by the Surface  applies to the Listener.","If the validation fails, the decision in decision block  is \u201cNO,\u201d and the Surface  returns to block .","On the other hand, if the validation is successful, the decision in decision block  is \u201cYES,\u201d and in decision block , the Surface  determines whether the Listener type object is associated with one or more conditions. If the Listener type object is associated with one or more Condition objects, the decision in decision block  is \u201cYES,\u201d and in decision block , the Surface  determines whether the conditions specified by the Condition object(s) is\/are satisfied.","If the conditions are not satisfied, the decision in decision block  is \u201cNO,\u201d the Surface  returns to decision block  to determine whether there is a next Listener.","If the conditions are satisfied, the decision in decision block  is \u201cYES,\u201d in block , the Surface  identifies any Action objects associated with the Listener.","If the Listener type object is not associated with one or more Condition objects, the decision in decision block  is \u201cNO,\u201d and the Surface  advances to block .","In decision block , for each Action objects associated with the Listener, the Surface  determines whether the Action object is associated with one or more conditions. If the Action object is associated with one or more Condition objects, the decision in decision block  is \u201cYES,\u201d and in decision block , the Surface  determines whether the conditions specified by the Condition object(s) is\/are satisfied.","If the conditions are satisfied, the decision in decision block  is \u201cYES,\u201d and in block , the Surface  performs the action(s) specified by the Action object. Then, the Surface  returns to decision block  to determine whether there is at least one more Listener to evaluate.","If the Action object is not associated with one or more Condition objects, the decision in decision block  is \u201cNO,\u201d and in block , the Surface  performs the action(s) specified by the Action object.","If the conditions are not satisfied, the decision in decision block  is \u201cNO,\u201d and the Surface  returns to decision block  to determine whether there is at least one more Listener to evaluate.","After the loop through the Listeners is ended in block , in decision block , the Surface  determines whether the UI configuration file  includes one or more inherited file type objects (i.e., links to inherited UI configuration files) that have not been processed.","If the UI configuration file  includes one or more inherited file type objects that have not been processed, the decision in decision block  is \u201cYES,\u201d and in block , the Surface  selects an inherited file type object that has not been processed. Then, in block , the Surface  increases the stack level. Then, the Surface  returns to block  to start to loop through the Listener type objects of the inherited UI configuration file.","If the UI configuration file  does not include one or more inherited file type objects that have not been processed, the decision in decision block  is \u201cNO,\u201d and the method  terminates.","After the new instance of the Surface class is created in block  of the method , the Surface class initiates execution of the user interface of the virtual application  inside the Surface . However, the virtual runtime engine actually executes the virtual application .","By way of a non-limiting example, the Surface class may include a Start method that when executed initiates execution of a target process (e.g., the virtual application ). The following pseudo code, is a non-limiting example of an implementation of the Start method of the Surface class.",{"@attributes":{"id":"p-0235","num":"0234"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This function starts the target application"]},{"entry":[{},"\/\/ inside the Surface"]},{"entry":[{},"function void Start(ProcessStartInfo info)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ProcessCreator creator = new ProcessCreate(info);"]},{"entry":[{},"creator.Suspend = true;"]},{"entry":[{},"RunListener(creator, ListenerType.BeforeStart, null);"]},{"entry":[{},"If (creator.Start ( ))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"creator.Resume( );"]},{"entry":[{},"RunListener(creator, ListenerType.AfterStart, null);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the pseudo code above, a Start method of a ProcessCreator class object (named \u201ccreator\u201d) is responsible for starting the virtual application . By way of a non-limiting example, the following pseudo code may be used to implement the Start method of the ProcessCreator class.",{"@attributes":{"id":"p-0237","num":"0236"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ This function starts the target application"},{"entry":"function bool Start( )"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (_StartInfo.UseShellExecute)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ if ShellExecute use direct process start"]},{"entry":[{},"Process p = Process.Start (_StartInfo);"]},{"entry":[{},"if (p != null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003_Information.hProcess = p.Handle;"]},{"entry":[{},"\u2003_Information.ProcessId = p.Id;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return true;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ Create process with the Suspend mode"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"STARTUPINFO info = new STARTUPINFO ( );"]},{"entry":[{},"info.cb = Marshal.SizeOf (info);"]},{"entry":[{},"if (CreateProcess ("]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"StartInfo.FileName,"]},{"entry":[{},"StartInfo.Arguments,"]},{"entry":[{},"0, 0, false,"]},{"entry":[{},"Suspend ?"]},{"entry":[{},"CreationFlags.CREATE_SUSPENDED :"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"(CreationFlags)0,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"IntPtr.Zero,"]},{"entry":[{},"Path.GetDirectoryName (_StartInfo.FileName),"]},{"entry":[{},"ref info,"]},{"entry":[{},"ref _Information))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return true;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In the pseudo code above, if the virtual application  is not to be executed in an operating system shell, the virtual application  is started in a suspended state so that the Surface  can be completely initialized before any windowing messages are sent by the virtual application . For example, execution of the virtual application  may be suspended until the UI configuration file  has been loaded in block  of the method . On the other hand, if the virtual application  is to be executed in a shell, execution is initiated directly in an unsuspended state. By way of a non-limiting example, the Surface  may determine the virtual application  is to be executed in a shell when the UseShellExecute flag of the ProcessStartlnfo object is set to TRUE. In that case, the virtual application  will start directly without being suspended initially.","Thus, referring to , the Surface  may perform a method  when initiating execution of the virtual application  inside the Surface . In decision block , the Surface  determines whether the virtual application is to be executed in a shell. If the virtual application is to be executed in a shell, the decision in decision block  is \u201cYES,\u201d and in block , the Surface  executes the virtual application directly. Optionally, the user interface of the virtual application  may be displayed inside the control .","If the virtual application is not to be executed in a shell, the decision in decision block  is \u201cNO,\u201d in block , the Surface  executes the virtual application  in a suspended state until the Surface  has finished its initialization process. Then, in block , the suspension is ended and the virtual application  is executed in an unsuspended state. Then, the method  terminates.","As mentioned above, the virtual application  is actually executed (at least in part) by the virtual runtime engine. Further, the virtual runtime engine monitors the windowing messages generated by the virtual application  and forwards at least some of them to the Surface  for processing. By way of a non-limiting example, one or more hooks may be used to perform the monitoring.","As is appreciated by those of ordinary skill in the art, a hook may be used to monitor an operating system for certain events (e.g., to monitor a message-handling mechanism). For example, Microsoft Windows Operating System provides WH_CALLWNDPROC and WH_CALLWNDPROCRET hook types that may be used to monitor messages sent to window procedures (e.g., calls to the SDK exposed functions). The WH_CALLWNDPROC hook type monitors messages sent to window procedures. The WH_CALLWNDPROCRET hook type monitors the window procedures and determines when the procedures have finished processing messages. The events monitored by a hook may be associated with a particular thread or with all of the threads in the same desktop as the calling thread.","Custom procedures (referred to as \u201chook procedures\u201d) may be specified for a particular hook type. For example, a hook procedure may be specified for the WH_CALLWNDPROC hook type by calling a SetWindowsHookEx method and identifying the WH_CALLWNDPROC hook type as a parameter. The thread to be monitored may also be specified as a parameter.","When an event occurs that is monitored by the particular hook, the hook calls hook procedures specified for the particular hook type. The Windows Operating System allows the hook procedures specified for the WH_CALLWNDPROC hook to be called before the windowing messages are sent to receiving window procedures.","The virtual runtime engine may set up a hook procedure for each of the threads used by the target application at the moment. The virtual runtime engine may also set up a hook procedure for threads created later by calling SetWindowsHookEx method with the WH_CALLWNDPROC parameter.","Referring to , a method  may be performed by the virtual runtime engine. The method  sets up a hook procedure for the thread(s) created by the virtual application  as it executes.","In first block , the virtual runtime engine begins executing the virtual application . When the virtual application  is started, in block , the virtual runtime engine sets up one or more hook procedures to monitor one or more threads used by the virtual application . The virtual runtime engine sets a hook procedure for each thread initiated by the virtual application . By way of a non-limiting example, this may be accomplished by establishing one or more hook procedures on a hook configured to detect the creation of a new thread. For example, a hook configured to detect a call to the CreateRemoteThread function may be used. In such an embodiment, whenever the virtual application  creates a new thread, the virtual application  calls the CreateRemoteThread function.","The CreateRemoteThread function has two main parameters: (1) a pointer to a thread start routine; and (2) a pointer to application defined context data (i.e., a \u201ccontext\u201d pointer). The virtual runtime engine populates a data structure configured to store the values of these two parameters. The following code is an example of a data structure named \u201cSThreadStartlnfo\u201d configured to store the parameters of the CreateRemoteThread function.",{"@attributes":{"id":"p-0249","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00034","num":"00034"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typedef struct _SThreadStartInfo"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"LPTHREAD_START_ROUTINE RealStartRoutine;"]},{"entry":[{},"LPVOID RealParams;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"} SThreadStartInfo;"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"After the data structure is populated, the virtual runtime engine calls the real-implementation of the CreateRemoteThread function in the host operating system passing (1) a pointer to a substitute thread-start function and (2) a pointer to the data structure instead of the application provided parameter values (i.e., pointer values).","The substitute thread-start routine extracts the SThreadStartlnfo data structure from the \u201ccontext\u201d pointer (which as described above has been overridden). Then, per-thread initialization actions are performed that include setting up one or more SetWindowsHookEx callback functions. Lastly, control is passed to the application-defined thread start function along with the application-defined thread context data pointer. Both of which were cached in the SThreadStartlnfo structure.","In block , the hook procedures triggered by the hook monitoring the creation of new threads set up the one or more hook procedures that will be executed when the virtual application  calls a windowing function within the thread. Thus, the method  establishes one or more hook procedures that are executed when a windowing message is generated (or a function call is sent to a windowing function).","Then, in block , the virtual runtime engine waits for the virtual application  to create a new thread (e.g., by calling the CreateRemoteThread function). While the virtual runtime engine waits, the user may be interacting with the virtual application  causing new threads to be created.","In block , the virtual runtime engine receives an indication that a new thread has been created. The indication may be provided by the virtual operating system  after it detects that a call has been made to the CreateRemoteThread function. Then, in block , the virtual runtime engine sets up one or more new hook procedures for the new thread. In block , the virtual runtime engine may set up the new hook procedures for the new thread in substantially the same manner the virtual runtime engine set up the hook procedures in the block  described above. Then, the virtual runtime engine returns to block .","By way of a non-limiting example, in blocks  and , the virtual runtime engine may specify one or more hook procedures for the WH_CALLWNDPROC hook that listen for windowing messages generated by a particular thread. The hook procedure or function is executed whenever a windowing message is generated that will be passed to a window procedure of the operating system (e.g., the virtual operating system ). The following pseudo code is a non-limiting example of an implementation of a hook procedure or function configured to listen for windowing messages.",{"@attributes":{"id":"p-0256","num":"0255"},"tables":{"@attributes":{"id":"TABLE-US-00035","num":"00035"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Function for the Message Hook"},{"entry":"function LRESULT MessageHookProcedure(int nCode, WPARAM"},{"entry":"wParam, LPARAM lParam)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CWPSTRUCT * pInfo = (CWPSTRUCT*)lParam;"]},{"entry":[{},"\/\/ If is not in SurfaceCallback mode and message"]},{"entry":[{},"\/\/ is interested by the Surface"]},{"entry":[{},"if (!_InSurfaceCallback( ) &&"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_IsAcceptableMessage(pInfo\u2212>message))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Sets the flag for the SurfaceCallback mode"]},{"entry":[{},"_EnterSurfaceCallback( );"]},{"entry":[{},"\/\/ Send message to the Surface by using communication"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"object"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"_SendWindowMessageMessage(pInfo\u2212>hwnd,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003pInfo\u2212>message, pInfo\u2212>wParam, pInfo\u2212>lParam);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Exit Surface Callback mode"]},{"entry":[{},"_ExitSurfaceCallback( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ call next hook"},{"entry":"return CallNextHookEx(0, nCode, wParam, lParam);"},{"entry":"}"},{"entry":"\/\/ Send windows message info to the WPM"},{"entry":"Function HRESULT"},{"entry":"_SendWindowMessageMessage(HWND hwnd, DWORD wmsg,"},{"entry":"WPARAM wParam, LPARAM lParam)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CSafeHandle hPipeConnection;"]},{"entry":[{},"\/\/ We use another connection for synchronouse surface"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"notfications"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_ConnectNamedPipe(hPipeConnection, FALSE);"]},{"entry":[{},"CSurfaceMessages messages(hPipeConnection.Detach( ));"]},{"entry":[{},"_OnSurfaceMessage(hwnd, wmsg, wParam, lParam);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003}"},{"entry":"BOOL _fOk;"},{"entry":"\/\/ Main entry point for a window message in \u201csurface\u201d mode"},{"entry":"function HRESULT _OnSurfaceMessage(HWND hwnd, DWORD wmsg,"},{"entry":"WPARAM wParam, LPARAM lParam)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SWindowMessageMessage msg;"]},{"entry":[{},"msg.HWnd = hwnd;"]},{"entry":[{},"msg.Msg = wmsg;"]},{"entry":[{},"msg.WParam = wParam;"]},{"entry":[{},"nsg.LParam = lParam;"]},{"entry":[{},"\/\/ Transact message from the named pipe communication"]},{"entry":[{},"_TransactMessage((PVOID)&msg, sizeof(msg));"]},{"entry":[{},"while (_fOk)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CComObjectStackEx<CBinaryReader> reader ="]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"_InitializeReader( );"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ULONG idMsg;"]},{"entry":[{},"reader.ReadULONG(idMsg);"]},{"entry":[{},"switch(idMsg)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eNoMoreResponse:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_fOk = FALSE;"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eSetParent:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_OnSetParent(reader, msg);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case eEnableWindow:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_EnableWindow(reader, msg);"]},{"entry":[{},"break;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\/\/ All other Response Types exists in this method"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ Function which is called when SetParent api call from the"},{"entry":"Surface"},{"entry":"function HRESULT"},{"entry":"_OnSetParent(CBinaryReader & reader, SActionResponseMessage &"},{"entry":"msg)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HWND hwnd;"]},{"entry":[{},"HWND hwndParent;"]},{"entry":[{},"reader.ReadHWND(hwnd);"]},{"entry":[{},"reader.ReadHWND(hwndParent);"]},{"entry":[{},"msg.ReturnValue = SetParent(hwnd, hwndParent);"]},{"entry":[{},"msg.GetLastError = GetLastError( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0257","num":"0256"},"figref":["FIG. 14","FIG. 13"],"b":["820","821","110","821","812","818","820"]},"Then, in block , the virtual runtime engine enters a Surface Callback Mode. In block , the virtual runtime engine sends the message to the Surface . Then, in block , the virtual runtime engine waits for a response from the Surface .","A response is received in block . In decision block , the virtual runtime engine determines whether the response has been mapped to an operating system API function call (e.g., a WindowsAPI function call, a SDK exposed function, and the like).","If the response has been mapped, the decision in decision block  is \u201cYES,\u201d and in block , the API function call is made. Then, the virtual runtime engine advances to decision block .","If the response has not been mapped, the decision in decision block  is \u201cNO,\u201d and the virtual runtime engine advances to decision block .","In decision block , the virtual runtime engine determines whether any more responses will be sent. For example, when the Surface sends a response having the type \u201ceNoMoreResponse,\u201d the virtual runtime engine determines no more responses will be sent. In such cases, the decision in decision block  is \u201cYES.\u201d Otherwise, the decision in decision block  is \u201cNO.\u201d","When the decision in decision block  is \u201cNO,\u201d the virtual runtime engine returns to block .","When the decision in decision block  is \u201cYES,\u201d in block , the virtual runtime engine exists Surface Callback Mode. Then, in block , the virtual runtime engine executes the next hook procedure, if any. For example, in block , the virtual runtime engine may call the CallNextHookEx function. Thus, the method  may be repeated for each hook procedure associated with a particular windowing message. Then, the method  terminates.","As discussed above, to improve performance, the virtual runtime engine may receive a list of the windowing messages in which the Surface  is interested during initialization of the Surface session. The list of the messages (in which the Surface  indicates that it is interested) may be generated by the Surface  by searching its UI configuration file(s) for Listener type objects of the WindowMessage type. Thus, before entering Surface CallBack Mode in block , the virtual runtime engine may decide whether to send the windowing message to the Surface .","As discussed above, hook procedures are established for one or more hooks. The hook procedures may be associated with one or more specific threads created by the virtual application  as it executes. Thus, a hook procedure is executed by a hook when a particular event occurs within a particular thread. Further, the virtual runtime engine may be in Surface Callback Mode with respect to a particular thread but not with respect to other threads.","When a hook identifies an event (of the type monitored by the hook) has occurred (e.g., a windowing message has been generated), the hook triggers or executes any hook procedures associated therewith.","Optionally, in the method , each of the hook procedures triggered determines whether the virtual runtime engine is operating in \u201cSurface Callback Mode\u201d with respect to the relevant thread. The virtual runtime engine may determine the virtual runtime engine is operating in \u201cSurface Callback Mode\u201d with respect to the relevant thread(s) when an InSurfaceCallback flag stored in the Thread Local Storage is TRUE.","If the virtual runtime engine is operating in \u201cSurface Callback Mode\u201d with respect to the relevant thread(s), the windowing message detected in block  is passed on to the default message handler. Thus, the windowing message may be processed by the virtual runtime engine and displayed by the virtual operating system .","If the virtual runtime engine is not operating in \u201cSurface Callback Mode\u201d with respect to the relevant thread(s), optionally, before sending the windowing message to the Surface  in block , the virtual runtime engine may determine whether the windowing message is one in which the Surface is interested by searching the list.","If the windowing message is on the list, the virtual runtime engine sets the InSurfaceCallback flag to TRUE and sends a notification to the Surface  about the windowing message. The message is sent using a communication object configured to effect communication between the Surface  and virtual runtime engine. Then, in block  the Surface  waits for a response from the Surface .","When the Surface  receives the notification, it performs the method  described above. The method  analyzes the UI configuration file  to identify any Listeners for the windowing message and perform any actions associated therewith for which any associated conditions are satisfied.","The virtual runtime engine executing the virtual application  and the Surface  are separate applications both executing within a host operating system (e.g., the operating system A or B). While running the Listeners and performing their associated actions, the Surface  may generate or trigger one or more new windowing messages. When this occurs, the Surface  may need to call an operating system API function. However, instead of calling an API function of the windowing system of the host operating system, an API function call may be made to the virtual operating system . Thus, such messages may be sent to the target application (e.g., the virtual application ) executing inside the virtual operating system .","In other words, the Surface  does not call the required API function directly. Instead, the Surface  calls an API function in an IWindowsAPI interface implementation. IWindowsAPI is an interface that contains some shadow methods of the original Windows API functions which the Surface uses within the ProxyWindow. When the Surface  needs to call a Windows API function in the ProxyWindow class, instead of calling that method directly, the ProxyWindow object uses the IWindowsApi instance to call the required method. When a method is called in the IWindowsApi interface implementation, a response object is created that identifies the API method to be called and its parameters values. Then, the data of this response object is serialized and transferred to the virtual runtime engine (e.g., via a named-pipe connection).","Because the Surface  and the virtual runtime engine are different applications (e.g., different Microsoft Windows applications), it may be beneficial to use a synchronized named-pipe connection to communicate between the two applications. However, those of ordinary skill in the art appreciate that other communication methods may be used.","When virtual runtime engine receives the serialized response message, the virtual runtime engine de-serializes the response message. The _OnSetParent function in the pseudo code above provides an example of a deserialization process.","Then, the virtual runtime engine calls the API function (within the virtual operating system ) identified in the response message with the information included in the response. Alternatively, the virtual runtime engine could send the message to the Surface  to be processed.","This serialized response message has a message type value that indicates the type of the response message. By way of non-limiting examples, the response message type may include the values listed in Table J below.",{"@attributes":{"id":"p-0279","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00036","num":"00036"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Message Type Value","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["eNoMoreResponses","Indicates there are no more response"]},{"entry":[{},"messages. When virtual runtime engine"]},{"entry":[{},"sees this message, it finishes the"]},{"entry":[{},"send message notification to the"]},{"entry":[{},"Surface block and exits from the"]},{"entry":[{},"SurfaceCallback mode."]},{"entry":["eSetWindowText","Indicates the Surface wants to call"]},{"entry":[{},"SetWindowText API function."]},{"entry":["eSetWindowPos","Indicates the Surface wants to call"]},{"entry":[{},"SetWindowPos API function."]},{"entry":["eEnableWindow","Indicates the Surface wants to call"]},{"entry":[{},"EnableWindow API function."]},{"entry":["eSetWindowRgn","Indicates the Surface wants to call"]},{"entry":[{},"SetWindowRgn API function."]},{"entry":["eShowWindow","Indicates the Surface wants to call"]},{"entry":[{},"ShowWindow API function."]},{"entry":["eSetParent","Indicates the Surface wants to call"]},{"entry":[{},"SetParent API function."]},{"entry":["ePostMessage","Indicates the Surface wants to call"]},{"entry":[{},"PostMessage API function."]},{"entry":["eSendMessage","Indicates the Surface wants to call"]},{"entry":[{},"SendMessage API function."]},{"entry":["eSendMessageWithTimeout","Indicates the Surface wants to call"]},{"entry":[{},"SendMessageWithTimeout API function."]},{"entry":["eMoveWindow","Indicates the Surface wants to call"]},{"entry":[{},"MoveWindow API function."]},{"entry":["eSetForegroundWindow","Indicates the Surface wants to call"]},{"entry":[{},"SetForegroundWindow API function."]},{"entry":["eSetWindowLong","Indicates the Surface wants to call"]},{"entry":[{},"SetWindowLong API function."]},{"entry":["ePrintWindow","Indicates the Surface wants to call"]},{"entry":[{},"PrintWindow API function."]},{"entry":["eInvalidateRect","Indicates the Surface wants to call"]},{"entry":[{},"InvalidateRect API function."]},{"entry":["eUpdateWindow","Indicates the Surface wants to call"]},{"entry":[{},"UpdateWindow API function."]},{"entry":["eBringWindowToTop","Indicates the Surface wants to call"]},{"entry":[{},"BringWindowToTop API function."]},{"entry":["eSwitchToThisWindow","Indicates the Surface wants to call"]},{"entry":[{},"SwitchToThisWindow API function."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"As mentioned above, in addition to a type value, the serialized response message also includes the values of any arguments or parameters required to call the appropriate windowing API function.","Then, in blocks -, the virtual runtime engine waits for additional response messages from the Surface  until the virtual runtime engine receives a response message of the type \u201ceNoMoreResponses.\u201d When the virtual runtime engine receives response message of the type \u201ceNoMoreResponses,\u201d the virtual runtime engine exits Surface Callback Mode in block .","The following pseudo code provides a non-limiting example of a method that may be used by the Surface to prepare the serialized message.",{"@attributes":{"id":"p-0283","num":"0282"},"tables":{"@attributes":{"id":"TABLE-US-00037","num":"00037"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"function Handle WriteSetParentMessage (PipeConnection connection,"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003IntPtr hWndChild, IntPtr hWndParent)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"using (BinaryWriter writer = new BinaryWriter (new MemoryStream"]},{"entry":[{},"\u2003(connection.Buffer), Encoding.Unicode))"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"writer.Write ((int)eSetParent);"]},{"entry":[{},"writer.Write (hWndChild.ToInt32 ( ));"]},{"entry":[{},"writer.Write (hWndParent.ToInt32 ( ));"]},{"entry":[{},"connection.BufferSize = (int)writer.BaseStream.Position;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"connection.WriteMessageSync ( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\/\/ Puts into connection buffer which _extract reads from below"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"connection.ReadMessageSync ( );"]},{"entry":[{},"\/\/ Extract response"]},{"entry":[{},"return new IntPtr (_ExtractResponse (connection));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The SurfaceSession class receives the windowing messages from the application's virtual environment and calls the appropriate Listeners for the windowing message. In particular embodiments, the virtual runtime engine may redirect all windowing messages to the Surface . However, as discussed above, in alternate implementations, the virtual runtime engine may send only messages included on list to the Surface .",{"@attributes":{"id":"p-0285","num":"0284"},"tables":{"@attributes":{"id":"TABLE-US-00038","num":"00038"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ This function is called by the XVM to notify the Surface that a"]},{"entry":[{},"\/\/ new window message is received to the target application"]},{"entry":[{},"function Handle IntPtr ProcessSurfaceMessage (IWindowsApis"]},{"entry":[{},"apiProxy, Handle hWnd, int msg, Handle wParam, Handle lParam)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ create the ProxyWindow instance, which indicates"]},{"entry":[{},"\/\/ the owner window of this message"]},{"entry":[{},"ProxyWindow window = ProxyWindow.FromHandle (hWnd);"]},{"entry":[{},"\/\/ Set the api proxy"]},{"entry":[{},"window.ApiProxy = apiProxy;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003\/\/ create the message information"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"HOOK_MSG hmsg = new HOOK_MSG ( );"]},{"entry":[{},"hmsg.msg = msg;"]},{"entry":[{},"hmsg.wParam = wParam;"]},{"entry":[{},"hmsg.lParam = lParam;"]},{"entry":[{},"\/\/ create Surface ListenerContext which contains"]},{"entry":[{},"\/\/ the required data"]},{"entry":[{},"ListenerContext context = _Surface.CreateContext (hmsg,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ListenerType.SurfaceWindowMessage, Convert.ToInt32"]},{"entry":[{},"(hmsg.msg));"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Add required data to the Context"]},{"entry":[{},"context.SetData (apiProxy);"]},{"entry":[{},"context.SetData (window);"]},{"entry":[{},"context.SetData (hmsg);"]},{"entry":[{},"\/\/ Run listeners"]},{"entry":[{},"Surface.RunListener (context);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At this point, the APIProxy of the ProxyWindow is assigned to the APIProxy member of the ProcessSurfaceMessage. This APIProxy is the IWindowsApi interface implementation responsible for sending the called function information to the virtual runtime engine as the serialized response message. When the virtual runtime engine receives the response message, the virtual runtime engine calls the API function identified. Therefore, the function calls performed by the Surface are executed in the thread of the virtual application .","The following pseudo code provides a non-limiting example of a function named \u201cRunListener\u201d that may be used by the Surface  to implement a Listener.",{"@attributes":{"id":"p-0288","num":"0287"},"tables":{"@attributes":{"id":"TABLE-US-00039","num":"00039"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function void RunListener(ListenerContext context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Run all listeners in the current configuration file"]},{"entry":[{},"Configuration.RunListener(context);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"function void SurfaceConfiguration::RunListener(ListenerContext"]},{"entry":[{},"context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ add this config to the top of the execution stack"]},{"entry":[{},"context.Stack.Begin(this);"]},{"entry":[{},"\/\/ Run all listeners in this configuration while the context is"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Alive"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (int i = 0; i < Listeners.Count && context.IsAlive; i++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Listeners[i].Run(context);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Run inherited configuration's Listeners"]},{"entry":[{},"for (int i = 0; i < Inherits.Count; i++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Inherits[i].Configuration.RunListener(context);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ Remove this config from the Top of the execution stack"]},{"entry":[{},"context.Stack.Finish( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/\/ This function is runs the Listener according to the context"]},{"entry":[{},"function void Listener::Run(ListenerContext context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If Listener is disabled do not run"]},{"entry":[{},"if (!_Enabled)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If Data is not valid then do not run"]},{"entry":[{},"if (!_FilterData(context))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If there is condition and it is not validate then do not run"]},{"entry":[{},"if (Condition != null && !Condition.Validate(context))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ If there is an action, apply it"]},{"entry":[{},"if (Action != null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Action.Apply(context);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"A ListenerContext object may be validated by a method of a Condition object. For example, the Condition objects may include a method named \u201cValidate\u201d that receives a ListenerContext object as an argument. The \u201cValidate\u201d function determines whether the ListenerContext object is valid. Different types of Condition objects may have different \u201cValidate\u201d functions. The following pseudo code provides a non-limiting example of a \u201cValidate\u201d function that may be used by a Condition object of type \u201cBooleanCondition.\u201d",{"@attributes":{"id":"p-0290","num":"0289"},"tables":{"@attributes":{"id":"TABLE-US-00040","num":"00040"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"function bool BooleanCondition::Validate(ListenerContext context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bool left = (bool) Left.GetValue(context);"]},{"entry":[{},"bool right = (bool) Right.GetValue(context);"]},{"entry":[{},"switch (Operator)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ComparisionOperator.Equal:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return left == right;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"case ComparisionOperator.NotEqual:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return left != right;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In the above pseudo code, the left and right Boolean variable values are assigned the Left and Right values of a DataObject. Left and Right of the BooleanCondition are derived from DataBase class and are Data Objects. All data objects have a GetValue method to get the stored data and SetValue to store the data.","As mentioned above, Data type object of different types may have different working procedures. The following pseudo code provides non-limiting examples of GetValue and SetValue methods that may be included in Data type objects of type \u201cDataVariable.\u201d",{"@attributes":{"id":"p-0293","num":"0292"},"tables":{"@attributes":{"id":"TABLE-US-00041","num":"00041"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/\/ Function which Gets the value of a Variable with in the given"},{"entry":"Listener Context"},{"entry":"function object DataVariable::GetValue(ListenerContext context)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Resolve the variable"]},{"entry":[{},"_EnsureVariable(context);"]},{"entry":[{},"\/\/ Gets the variable's current value"]},{"entry":[{},"if (_Variable != null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return _Variable.Value;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new UnknownVariableException(Name);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ Finds the variable and put its reference"},{"entry":"function void _EnsureVariable(ListenerContext context)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ if we already resolve it, then ignore call"]},{"entry":[{},"if (_IsAlreadyResolved(context))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Split the parts of the name"]},{"entry":[{},"string[ ] parts = Name.Split(\u2018.\u2019);"]},{"entry":[{},"\/\/ From the current configuration objects begin to ResolveLink"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"to find the variables real configuration file"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SurfaceConfiguration config = context.Stack.Current;"]},{"entry":[{},"config = configuration.ResolveLink(parts, 0, parts.Length \u2212 1);"]},{"entry":[{},"if (config == null)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throw new UnknownConfigInheritance( );"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ put the configuration and variable for its resuability"]},{"entry":[{},"_Configuration = config;"]},{"entry":[{},"_Variable = config.Variables[parts[parts.Length \u2212 1]];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"\/\/ Sets the value of a variable"},{"entry":"function void SetValue(ListenerContext context, object value)"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_EnsureVariable(context);"]},{"entry":[{},"if (_Variable != null)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Variable.Value = value;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}else"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"_Variable = new Variable(Name);"]},{"entry":[{},"_Variable.Value = value;"]},{"entry":[{},"_Configuration.Variables.Add(_Variable);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Condition objects and Action objects of different types may also have different working methods. Further, each UI configuration file may include a unique configuration for Condition objects and\/or Action objects. For example, the following pseudo code provides non-limiting examples of a \u201cDoOperation\u201d method of an Action object having the type \u201cBreakAction.\u201d",{"@attributes":{"id":"p-0295","num":"0294"},"tables":{"@attributes":{"id":"TABLE-US-00042","num":"00042"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Operation method for the Break operation"]},{"entry":[{},"function bool BreakAction::DoOperation(ListenerContext context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ force that all remaining listeners won't work"]},{"entry":[{},"context.IsAlive = false;"]},{"entry":[{},"return true;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"For example, the following pseudo code provides non-limiting examples of a \u201cDoOperation\u201d method of an Action object having the type \u201cAssignment.\u201d",{"@attributes":{"id":"p-0297","num":"0296"},"tables":{"@attributes":{"id":"TABLE-US-00043","num":"00043"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Operation method for the Assignment action"]},{"entry":[{},"function bool Assignment::DoOperation(ListenerContext context)"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ get the Right data object value"]},{"entry":[{},"object value = Right.GetValue(context);"]},{"entry":[{},"\/\/ assign that value to the Left data object"]},{"entry":[{},"Left.SetValue(context, value);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0298","num":"0297"},"figref":["FIG. 8","FIG. 8"],"b":["9","132","134","137","140","169","7","140","169","142","170","10"]},"Moreover, those skilled in the art will appreciate that implementations may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. Implementations may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","The exemplary hardware and operating environment of  includes a general-purpose computing device in the form of a computing device . Each of the client computing device  and the server computing device  may be implemented in accordance with the computing device . By way of non-limiting example, the Client Application , the Sandbox Manager , the virtual machine executable files , the transferred virtualized application file , and the UI configuration file  may be implemented on a first computing device like the computing device . The web server components , and the authoring tool  may be implemented on a second computing device like the computing device  configured to store the virtualized application file  (and the UI configuration file ) and generate a web page displaying a link (e.g., a hyperlink) to the virtualized application file , a link to the UI configuration file , and providing a reference to the plug-in .","The computing device  includes the system memory . Each of the system memory A (see ) and the system memory B (see ) may be constructed in accordance with the system memory .","The computing device  also includes a processing unit , and a system bus  that operatively couples various system components, including the system memory , to the processing unit . There may be only one or there may be more than one processing unit , such that the processor of computing device  comprises a single central-processing unit (CPU), or a plurality of processing units, commonly referred to as a parallel processing environment. The computing device  may be a conventional computer, a distributed computer, or any other type of computer.","The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory, and includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within the computing device , such as during start-up, is stored in ROM . The computing device  further includes a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD, or other optical media.","The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical disk drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computing device . It should be appreciated by those skilled in the art that any type of computer-readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, USB drives, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs), and the like, may be used in the exemplary operating environment. As is apparent to those of ordinary skill in the art, the hard disk drive  and other forms of computer-readable media (e.g., the removable magnetic disk , the removable optical disk , flash memory cards, USB drives, and the like) accessible by the processing unit  may be considered components of the system memory .","A number of program modules may be stored on the hard disk drive , magnetic disk , optical disk , ROM , or RAM , including an operating system , one or more application programs , other program modules , and program data . A user may enter commands and information into the computing device  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computing device  may operate in a networked environment using logical connections to one or more remote computers, such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computing device  (as the local computer). Implementations are not limited to a particular type of communications device. The remote computer  may be another computer, a server, a router, a network PC, a client, a memory storage device, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computing device . The remote computer  may be connected to a memory storage device . The logical connections depicted in  include a local-area network (LAN)  and a wide-area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. The network  may include any of the aforementioned networking environments.","When used in a LAN-networking environment, the computing device  is connected to the local area network  through a network interface or adapter , which is one type of communications device. When used in a WAN-networking environment, the computing device  typically includes a modem , a type of communications device, or any other type of communications device for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computing device , or portions thereof, may be stored in the remote computer  and\/or the remote memory storage device . It is appreciated that the network connections shown are exemplary and other means of and communications devices for establishing a communications link between the computers may be used.","The computing device  and related components have been presented herein by way of particular example and also by abstraction in order to facilitate a high-level view of the concepts disclosed. The actual technical design and implementation may vary based on particular implementation while maintaining the overall nature of the concepts disclosed.","Returning to , the operating system A, the Client Application , the Sandbox Manager , the virtual machine executable files , the transferred virtualized application file , and the UI configuration file  may be stored as computer executable components on the system memory A. Each of the operating system A, the Client Application , the Sandbox Manager , the virtual machine executable files , the transferred virtualized application file , and the UI configuration file  may be implemented using software components that are executable by the processing unit  and when executed perform the functions described above.","Returning to , the virtualized application file , the UI configuration file , the web server components , and the authoring tool  may be stored as computer executable components on the system memory B. Each of the virtualized application file , the UI configuration file , the web server components , and the authoring tool  may be implemented using software components that are executable by the processing unit  and when executed perform the functions described above.","The memory A may store computer executable instructions that when executed by one or more processors cause the one or more processors to perform all or portions of the methods described above. Further, such instructions may be stored on one or more non-transitory computer-readable media.","The foregoing described embodiments depict different components contained within, or connected with, different other components. It is to be understood that such depicted architectures are merely exemplary, and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense, any arrangement of components to achieve the same functionality is effectively \u201cassociated\u201d such that the desired functionality is achieved. Hence, any two components herein combined to achieve a particular functionality can be seen as \u201cassociated with\u201d each other such that the desired functionality is achieved, irrespective of architectures or intermedial components. Likewise, any two components so associated can also be viewed as being \u201coperably connected,\u201d or \u201coperably coupled,\u201d to each other to achieve the desired functionality.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, changes and modifications may be made without departing from this invention and its broader aspects and, therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those within the art that, in general, terms used herein, and especially in the appended claims (e.g., bodies of the appended claims) are generally intended as \u201copen\u201d terms (e.g., the term \u201cincluding\u201d should be interpreted as \u201cincluding but not limited to,\u201d the term \u201chaving\u201d should be interpreted as \u201chaving at least,\u201d the term \u201cincludes\u201d should be interpreted as \u201cincludes but is not limited to,\u201d etc.). It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended, such an intent will be explicitly recited in the claim, and in the absence of such recitation no such intent is present. For example, as an aid to understanding, the following appended claims may contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim recitations. However, the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d (e.g., \u201ca\u201d and\/or \u201can\u201d should typically be interpreted to mean \u201cat least one\u201d or \u201cone or more\u201d); the same holds true for the use of definite articles used to introduce claim recitations. In addition, even if a specific number of an introduced claim recitation is explicitly recited, those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number (e.g., the bare recitation of \u201ctwo recitations,\u201d without other modifiers, typically means at least two recitations, or two or more recitations).","Accordingly, the invention is not limited except as by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE SEVERAL VIEWS OF THE DRAWING(S)","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 6","FIG. 2"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 15"}]},"DETDESC":[{},{}]}
