---
title: Computer security management, such as in a virtual machine or hardened operating system
abstract: A security scheme provides security to one or more self-contained operating environment instances executing on a computer. The security scheme may include implementing a set of security applications that may be controlled by a supervisory process, or the like. Both the set of security applications and the supervisory process may operate on a host system of the computer, which may also provide a platform for execution of the one or more self-contained operating environments. The security scheme protects processes running in the one or more self-contained operating environment and processes running on the computer outside of the self-contained operating environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07409719&OS=07409719&RS=07409719
owner: Microsoft Corporation
number: 07409719
owner_city: Redmond
owner_country: US
publication_date: 20041221
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The described technology relates generally to maintaining the security and integrity of computer operating systems.","When software that has been designed specifically to damage or disrupt a system (e.g., malicious software or \u201cmalware\u201d) invades a computer system, the integrity of the computer's operating system, and hence the entire computer system, is greatly compromised. While the security concerns and requirements of computer users range widely, given the rise of virus, worm, and Trojan threats, most computer users are concerned with the integrity of their computers' critical infrastructure components such as operating system processes, memory processes, etc.","Some types of malware use the operating system's privileged operations to attack the computer. Such privileged operations typically consist of instructions or sets of instructions that are accessible only by a privileged user or process. For example, when malware is somehow able to access one or more of these privileged operations, this may result in the deletion or corruption of operating system files, the attack of in-memory operating system components, the deletion of user files, and many other harmful possibilities. In some cases, even non-malicious processes may damage a computer system through inadvertent behavior that accesses privileged operations. More generally, almost any process may be able to obtain access to privileged operations by simply assuming the identity of a privileged user.","Normally, operating systems provide an infrastructure for hosting processes and providing system services to those processes. Operating systems typically provide basic security protections\u2014such as enforcing access control and ownership rights over system resources. For example, in normal operating system environments, protective security services such as host firewall, vulnerability assessment, patch detection, behavioral blocking, host or network intrusion detection, and antivirus technologies are all run as native applications in the operating system. Despite these measures, the operating system is sometimes unable to accurately determine whether it has been attacked. Specifically, once a piece of malicious code or other malware attacks a computer system and gains sufficient control (e.g., administrator-level access), all further attempts by the operating system to determine whether it is under attack are no longer trustworthy because the mechanisms for such attempts may also be corrupted. This is because the malicious code could effectively modify any of the in-memory or on-disk structures used by the operating system or the applications used to protect it.","One approach to protecting a computer system and its operating system involves installing a set of security applications such as antivirus software, personal firewalls, and intrusion detection systems. In systems with multiple computer systems, such as a computer network or a cluster of computer systems deployed in an array, each individual computer system runs its own set of security applications. This is because each computer system in the network or array is a physically separate entity with its own network attachment, its own central processing unit(s), its own instance of an operating system, etc. While such security applications may be installed on each computer system to prevent the computer system and its operating system from being compromised, such security applications may too fail to protect the computer system because, just like any of the other applications running on the computer system, they are also vulnerable to attack.","In another approach to protecting a computer system and its operating system, aspects of the computer system, such as the memory, are protected by isolating aspects of the computer system.","The computer security techniques described herein provide various security features, including the use of a single security process (or set of security processes) to monitor, protect, and repair multiple logically isolated virtual machines running on a host system. In some embodiments, the security techniques provide security to one or more self-contained operating environment instances executing on a computer. The security techniques may include implementing a security application that may be controlled by a supervisory process. The security application may monitor one or more virtual machines. This monitoring may be done using various techniques, including offline scanning of the virtual machines by the security application, implementing an agent security process running on each of the virtual machines, etc.","In some embodiments, both the set of security applications and the supervisory process may operate on a host system of the computer, which may also provide a platform for execution of the one or more self-contained operating environments. The security techniques may protect processes running in the one or more self-contained operating environments and processes running on the computer outside of the self-contained operating environments.","In the drawings, the same reference numbers identify identical or substantially similar elements or acts. To facilitate the discussion of any particular element or act, the most significant digit or digits in a reference number refer to the figure number in which that element is first introduced (e.g., element  is first introduced and discussed with respect to ).","The invention will now be described with respect to various embodiments. The following description provides specific details for a thorough understanding of, and enabling description for, these embodiments of the invention. However, one skilled in the art will understand that the invention may be practiced without these details. In other instances, well-known structures and functions have not been shown or described in detail to avoid unnecessarily obscuring the description of the embodiments of the invention.","It is intended that the terminology used in the description presented be interpreted in its broadest reasonable manner, even though it is being used in conjunction with a detailed description of certain specific embodiments of the invention. Certain terms may even be emphasized below; however, any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.","I. Overview","The computer security techniques described herein provide various security features, including the use of a single security process (or set of security processes) to monitor, protect, and repair multiple logically isolated virtual machines running on a host system.","In some embodiments, a host system, which executes on a physical machine, provides a virtual machine on which an operating system and applications can execute. While many processes may execute on the virtual machine, in general, the operating system and applications executing on the virtual machine cannot access resources (e.g., memory and devices) except as permitted by the host system that provides the virtual machine or as specified by a quest that has been assigned to a virtual machine.","If a virtual machine executes malware, any damage is confined to the operating system, applications, and accessible resources of the virtual machine. In this way, the computer is substantially protected from the effects of malware that executes on the virtual machine.","In some embodiments, the host system may prevent the operating system and applications executing on the virtual machines from performing privileged operations that can cause undesirable changes to the resources or operating system of the physical machine. For example, the operating system executing on the virtual machine may be given administrative privileges within the virtual machine, but not within the physical machine.","In some embodiments, the host system implements proactive security processes. Examples of such security processes include host firewall monitors, vulnerability assessment monitors, patch detection monitors, behavioral blocking monitors, host or network intrusion detection monitors, and antivirus technologies. In general, the security processes are configured to enhance the security of the virtual machines, the host system, and, subsequently, the physical machine.","In some embodiments, the security processes are embodied as or controlled by a supervisory process running on the host system. The supervisory process may facilitate or provide the security processes with some level of access and visibility to components of the virtual machines, including virtual memory, virtual disk, virtual network adaptors, virtual drivers, etc. (e.g., in the form of in-memory data structures or object models). For example, the supervisory process may allow the security process to scan a data structure in memory or stored on disk corresponding to a virtual machine's virtual hard disk for signs of malware or security breaches. In addition (or alternatively), when provided an object model that is supported by the host system, the supervisory process can facilitate returning information about the state of the virtual machine (such as memory state or communication state) to the host system. In general, because the host system and supervisory process provide some level of isolation, the security processes may supervise and monitor the security of the virtual machines, while still remaining inaccessible to harmful programs executing in these virtual machines. In this way, the security processes are protected from tampering or defeat by the programs that they are tasked with monitoring.","In some embodiments, the security processes may be used to monitor and repair a virtual machine that is in a saved state where the execution of the virtual machine monitor has been halted and where all information pertaining to the virtual machine's memory, device and CPU state has been written out to a physical file. The security processes may also be used to monitor and repair a virtual machine that is in a paused state, which is typically invoked by a virtual machine manager. During the paused state, the virtual machine ceases execution, but remains ready to resume a next instruction and processing. In either the paused or saved state scenario the virtual operating system inside of the virtual machine has no knowledge of the state change. Likewise, the security processes may have the ability to scan and repair or clean a virtual machine before it is loaded into the host system.","In some embodiments, the host system can mount a virtual machine's hard disk as if it were a physical disk and then scan the virtual hard disk on a block level (like any other mounted disk). For example, the host system may employ a disk driver that can be loaded into the physical machine's operating system. This disk driver may then interpret the virtual hard disk and present it to the host system as a locally attached disk.","Another approach to monitoring the virtual machines is to run an \u201cagent\u201d security process in each virtual machine. In this approach, the agent security process is associated with a primary security process on the host system. The agent security process opens a communication channel to the primary security process and assists in discovery of and recovery from an attack of the virtual machine. While this scenario may involve a risk of the agent security process being compromised during an attack, the agent may still have an external recovery option available to it via the primary security process. In some scenarios (e.g., scenarios involving the use of a hypervisor), the agent may run in a different virtual machine than the virtual machine it is actually monitoring.","In some embodiments, the host system can take periodic snapshots of the entire state of each virtual machine. Theoretically, this snap-shotting could be performed instantaneously, with minor performance overhead. However, many variations of this technique could be possible. If a security process detects an anomaly within the virtual machine (e.g., malware overwriting the operating system or malware that manifests itself as in-memory program), then the host system can restore the state of the virtual machine to that of the latest snapshot, take action to prevent the recurrence of the anomaly, and restart the virtual machine.","II. Representative System",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 1-5"},"Aspects of the invention can be embodied in a special purpose computer or data processor that is specifically programmed, configured, or constructed to perform one or more of the computer-executable instructions explained in detail herein. Aspects of the invention can also be practiced in distributed computing environments where tasks or modules are performed by remote processing devices, which are linked through a communication network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Aspects of the invention may be stored or distributed on computer-readable media, including magnetically or optically readable computer disks, as microcode on semiconductor memory, nanotechnology memory, organic or optical memory, or other portable data storage media. Indeed, computer-implemented instructions, data structures, screen displays, and other data under aspects of the invention may be distributed over the Internet or over other networks (including wireless networks), on a propagated signal on a propagation medium (e.g., an electromagnetic wave(s), a sound wave, etc.) over a period of time, or may be provided on any analog or digital network (packet switched, circuit switched, or other scheme). Those skilled in the relevant art will recognize that portions of the invention reside on a server computer, while corresponding portions reside on a client computer, such as a mobile device.","Referring to , a computer system (physical machine)  on which the computer security techniques can be implemented provides various components. These components include a host system  configured to run on the computer system  in addition to, in combination with, or in place of a standard or general purpose computer operating system . In some embodiments, the host system  may be configured so that it is inaccessible to everything except native and\/or privileged supervisory and security functions. The host system  may interface with one or more computer resources, such as a processor  with a memory management unit (MMU) , a disk , a memory , a communications subsystem , and one or more system drivers .","In some embodiments, the one or more virtual machines  run under the control of the host system  and may be subordinate to the host system . The virtual machines  may each be comprised of a collection of components that facilitate the virtualization or emulation of a processor and other machine resources. For example, as shown in the illustrated embodiment, each of the virtual machines  has access to a set of emulated resources, including virtual network adapters , virtual memory  (which may consist of an allocated portion of the physical machine's memory ), virtual disk , and one or more virtual drivers  that each represent a virtual instance of non-virtual system drivers . A virtual operating system instance  runs on each of these virtual machines . In some embodiments, the virtual operating system instance  may be a full or partial copy of the physical machine's operating system .","In general, the virtual machines  may depend on the MMU  to provide various page-level protections. In general, applications or processes  running on the each of the virtual machines use only the emulated resources (e.g., virtual memory , virtual disk , virtual drivers , operating system , etc.) of their respective virtual machine. Such applications or processes  are sometimes referred to as \u201cguest\u201d code. The emulated resources are generally assumed to be trustworthy in the sense that they honor standard protection mechanisms on the host system  and do not expose any host system user data to the guest code unless explicitly instructed to do so.","In some embodiments, the emulated resources may exchange data between the host system  and the guest code running on the virtual machine  using several integration techniques, such as I\/O port accesses, memory-mapped registers, direct memory access (DMA), interrupts, etc. Other data exchange techniques include clipboard sharing, file drag and drop, time synchronization, etc. To support such data exchange techniques, the virtual machines  may provide several facilities including asynchronous guest events, synchronous host calls, data transfer between the guest code and host system , an integration service registry, etc.","The virtual machines  may be created or initiated on the host system  using any of several possible techniques. For example, in one embodiment, the host system  may create and launch an instance of a virtual machine and configure parameters for the virtual machine at creation time. In some embodiments, the host system  may locate an existing virtual machine image on disk  (perhaps on a share) and load that image as a new virtual machine instance. In some cases, this loading is referred to as \u201cimporting\u201d a virtual machine instance and is in some ways analogous to an \u201cimport\u201d function that brings in data from one application into another.","In some embodiments, a set of one or more supervisory processes  runs on the host system . In some embodiments, the one or more supervisory processes  may have full or partial access to the virtual operating system instances , and can provide a security service to each of the virtual machines . In some embodiments, the supervisory processes  may also handle activities such as digital rights management (DRM) and licensing control. Because this configuration provides that any malware running on the virtual machines  cannot access resources outside each virtual machine, the supervisory process  is generally safe from corruption by the malware.","In some embodiments, the one or more supervisory processes  control a set of security applications (e.g., antivirus software, personal firewalls, intrusion detection systems, etc.) that may protect and\/or supervise all of the virtual machines  on the host system . For example, the one or more supervisory processes may facilitate offline scanning of multiple virtual machines by the set of security applications. Offline scanning may include configuring the set of security applications to be aware of each of the virtual machines' virtual resources as they reside as virtual objects on the computer system (physical machine). In this way, the set of security applications can examine (scan) those virtual resources from outside the virtual machine (e.g., using a knowledge of the internal format of the virtual machine data structures).","Although the terms \u201csecurity application\u201d and \u201csupervisory process\u201d are used herein, such concepts are not limited to applications or processes. Rather, any utility or facility that is configured to provide services to a virtual machine and\/or its resources could be implemented on the host system to achieve the desired results without departing from the scope of the invention. Some examples of such a utility or facility include an anti-adware utility, an anti-spyware utility, a disk defragmenter, etc.","The offline scanning of virtual machine resources may take place while the virtual machines are running or dormant (e.g., in a paused or saved state). For example, in the situation where a virtual machine may be created by locating and loading an existing virtual machine image onto the host system , the offline scanning (and any needed cleaning or repairs) could occur before the virtual machine instance is \u201cimported.\u201d Virtual machine resources that can be scanned in a paused or saved state include virtual hard disks, virtual machine memory contents, virtual communications port buffer structures, etc. In some implementations, it may not be possible to access the memory of a paused virtual machine. However, the virtual machine memory may still be accessible while the virtual machine is in a saved state or via a snapshot of a virtual machine.","Referring to , one example of an offline scanning configuration  is shown, illustrating various components of . In this configuration, a security application  and an optional supervisory process  reside on the host system . The security application , which may be at least partially controlled by the supervisory process , views the virtual machine 's resources as a data structure or set of data structures that can be scanned for signs of security breaches. To allow it to access the virtual machine 's resources in raw form and accurately detect security breaches, the security application  may rely on information about the semantics and configuration of data structures associated with the resources. In some embodiments, this information is updated to reflect any intentional changes in the semantics and configuration of the data structures.","For example, the security application  of  may be an antivirus scanning engine that scans the virtual machine  to determine if it is infected with one or more known viruses or worms. To begin the scanning process, the antivirus engine  loads a current signature definition file into its program memory. For example, the signature definition file may define the semantics and configuration of the virtual machine's virtual hard disk structure, thus providing a reference point for the antivirus engine as it scans the virtual machine's hard disk in its current state.","Next, the antivirus engine directs its scanning to read a portion of the physical machine's hard disk that correlates to the virtual machine's virtual hard disk. In this way, the antivirus engine effectively reads the contents of the virtual hard disk, and compares its content (e.g., a content object) with its list of known malicious content, using methods and techniques employed by those who are skilled in the art of detecting malicious software. For the purposes of this example, a content object within the virtual hard disk could be a file, or another object manipulated by the operating system such as a key from the Microsoft Windows System Registry, or any other object on disk that could be identified as part of an instance of malicious or undesirable software. Upon discovery of malicious software, the antivirus engine may attempt to remove any offending objects, or remove an infection that is located within an object.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3A","b":["300","302","128","304","302","304","304","102","118","304","302","302"]},"This configuration provides a designer of the virtual machine and a designer of the security application with some flexibility. For example, the designer of the virtual machine can alter data structures of the virtual machine without consequence to the designer of the security application. Thus, the security application  need only be developed to access this common format and not every format variation that a virtual machine may have.","In some embodiments, the offline scanning technique facilitates the synchronization of the virtual machine's current state with what the security application perceives as the virtual machine's current state, thus providing more accurate and consistent scanning capabilities. This synchronization may be useful in the case where the virtual machine's states are changing rapidly.","Referring to , one way that this synchronization can be achieved is by running an agent process  that provides a near-real time self-consistent view of the virtual machine. The agent process , which may run on the virtual machine , can then export this view of the virtual machine to the virtual machine object interface , which can then provide appropriate information to the supervisory process and\/or security application. In some embodiments, the agent process  may provide an application programming interface (API) for use by the virtual machine object interface . (Alternatively, the security application may provide a similar API for use by the virtual machine object interface .)","An alternative way that this synchronization can be achieved is to have the virtual machine  create constant snapshots of its state and store these snapshots in memory or on disk. While such snapshots may be a few seconds \u201cstale,\u201d they will nonetheless be self-consistent.","Referring to , an alternative technique for providing security scanning of the virtual machines is a system  configured so that a security application  and supervisory process  are running on a designated virtual machine  (instead of directly on the host system ). The security application  and supervisory process  can then monitor and\/or scan the other virtual machines  to detect problems. In this way, the designated virtual machine  (which may be dedicated to providing security monitoring) can remain protected from attack.","III. System Flows",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIGS. 4 through 8","FIG. 1"]},"Referring to , a supervisory routine  performed, for example, by the supervisory process of , may run on (or off) the host system to monitor, modify, and\/or configure processes or virtual operating systems running on the virtual machine. Alternatively, the supervisory routine  may monitor, modify, and\/or configure processes running on a hardened (but not virtual) operating system.","At block , the routine  pauses the virtual machine operating system. At decision block , the routine  checks for changes that may result from damaging activities (e.g., rogue processes) occurring within the virtual machine. For example, the routine  may scan a portion of the virtual machine operating system kernel to check for problems. As an alternative to (or in addition to) monitoring the virtual operating system kernel, the routine  may monitor other aspects connected with the virtual (or hardened) operating system. For example, the routine  may monitor virtual address spaces, monitor emulated devices, monitor an emulated hard drive, perform integrity verifications (e.g., perform checksums), check the integrity of files that reside on the virtual disk or in memory, etc.","If, at decision block , the routine  does not detect changes that may result from damaging activities, the routine  proceeds to block  to restart the virtual operating system kernel before ending. However, in some embodiments (not illustrated), the routine  may loop back to block  (after a time period elapses) to perform the pause and check steps again (unless the virtual operating system instance is terminated). If, however, at decision block , the routine  detects changes that may result from damaging activities, the routine proceeds to block , where the routine initiates containment actions. Example containment actions may include activities such as suspending the guest operating system to do additional scanning, suspending select processes, cleaning the malware and reformatting the virtual operating system to repair any damage, shutting down the virtual machine after taking a \u201csnapshot\u201d so that the virtual machine environment can be more or less restored once the virtual machine is restarted, etc.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 5","b":["500","501","500","502","503","504","503","500","501"]},{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 6","b":["600","600","601","600"]},"At block , the set of security applications scans the virtual hard drive structure (or in-memory structure, etc.). At decision block , if the scanned structure is compromised, then the routine  continues at block , where the security applications repair the virtual hard drive structure (or in-memory structure). If, however, at decision block , the scan component is not compromised, the routine proceeds to decision block .","At decision block , if all the structures or components of the virtual machine have been scanned, the routine ends. Otherwise, the routine loops back to block  to mount the next virtual machine structure or component.","In some embodiments, the routine  may be used in combination with optimization techniques that track changes occurring between scans in each of the virtual machine hard drives. In this way, the routine  may scan only changes since the last scan, thereby improving efficiency in scanning. For example, an optimization routine could track changes in the virtual machine's hard drive on a block level. Changes at the block level may then be mapped to changes at a file level for scanning purposes (as typical antivirus software scans at the file level). Alternatively, changes could be tracked by looking at modifications to master file table structures. This may involve checkpoint storage of prior master file tables in the host system.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 7","FIG. 6","FIG. 7"],"b":["700","700","701","700"]},"At decision block , if the scanned structure is compromised, then the routine  continues at block , where the security applications repair the virtual hard drive structure (or in-memory structure). If, however, at decision block , the scanned component is not compromised, the routine proceeds to decision block . At decision block , if all the structures or components of the virtual machine have been scanned, the routine ends. Otherwise, the routine loops back to block  to mount the next virtual machine structure or component.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 8","FIG. 3B"],"b":["800","800","322"]},"At block  the routine  establishes communication between the security application (such as the security application  of , which runs on the host system or on a virtual machine object interface) and the agent process via some inter-machine communications interface. At block  the routine  establishes access to the virtual machine's memory. For example, the agent process running on the host system may provide access to a virtual buffer that corresponds to the virtual machine's application memory. The routine continues at block , where the security application scans the memory for evidence of a security problem. For example, when the security application is an antivirus scanning engine, the antivirus scanning engine may scan the memory looking for code patterns that match signatures of known malicious software. At decision block , if any structures or components of the virtual machine have been compromised, the routine  continues at block , where the security application and\/or the agent process cleans the computer memory. Alternatively, the security application could signal the agent process to take corrective action directed to the virtual machine. If, however, at decision block , no structures or components have been compromised, then the routine ends.","IV. Conclusion","Unless the context clearly requires otherwise, throughout the description and the claims, the words \u201ccomprise,\u201d \u201ccomprising,\u201d and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense; that is to say, in the sense of \u201cincluding, but not limited to.\u201d Additionally, the words \u201cherein,\u201d \u201cabove,\u201d \u201cbelow\u201d and words of similar import, when used in this application, shall refer to this application as a whole and not to any particular portions of this application. When the claims use the word \u201cor\u201d in reference to a list of two or more items, that word covers all of the following interpretations of the word: any of the items in the list, all of the items in the list, and any combination of the items in the list.","The above detailed description of embodiments of the invention is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific embodiments of, and examples for, the invention are described above for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. For example, while processes or blocks are presented in a given order, alternative embodiments may perform routines having steps, or employ systems having blocks, in a different order, and some processes or blocks may be deleted, moved, added, subdivided, combined, and\/or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also, while processes or blocks are at times shown as being performed in series, these processes or blocks may instead be performed in parallel, or may be performed at different times. Where the context permits, words in the above Detailed Description using the singular or plural number may also include the plural or singular number, respectively, where the context permits.","The teachings of the invention provided herein can be applied to other systems, not necessarily the system described herein. The elements and acts of the various embodiments described above can be combined to provide further embodiments.","This application is related to commonly owned U.S. patent application Ser. No. 11\/018412, entitled \u201cMethod and System for a Self-healing Device\u201d filed Dec. 21, 2004. All of the above patents and applications and other references, including any that may be listed in accompanying filing papers, are incorporated herein by reference. Aspects of the invention can be modified, if necessary, to employ the systems, functions, and concepts of the various references described above to provide yet further embodiments of the invention.","These and other changes can be made to the invention in light of the above Detailed Description. While the above description details certain embodiments of the invention and describes the best mode contemplated, no matter how detailed the above appears in text, the invention can be practiced in many ways. As noted above, particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being re-defined herein to be restricted to any specific characteristics, features, or aspects of the invention with which that terminology is associated. In general, the terms used in the following claims should not be construed to limit the invention to the specific embodiments disclosed in the specification, unless the above Detailed Description section explicitly defines such terms. Accordingly, the actual scope of the invention encompasses not only the disclosed embodiments, but also all equivalent ways of practicing or implementing the invention under the claims.","While certain aspects of the invention are presented below in certain claim forms, the inventors contemplate the various aspects of the invention in any number of claim forms. For example, while only one aspect of the invention is recited as embodied in a computer-readable medium, other aspects may likewise be embodied in a computer-readable medium. Accordingly, the inventors reserve the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 3A","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3B","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3C","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 6","FIG. 1"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 7","FIG. 1"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 8","FIG. 1"]}]},"DETDESC":[{},{}]}
