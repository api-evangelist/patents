---
title: Standards-based formatting of flat files into markup language representations
abstract: A method of building an application response message can include receiving a master file specifying a message format for populating a particular data object of an application. The master document can specify element names which correspond to fields of the data object. A technique for mapping particular data items specified by at least one flat file to the element names specified in the master file can be determined; and a markup language representation of the data object can be generated according to the determined mapping technique and the specified message format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07093195&OS=07093195&RS=07093195
owner: International Business Machines Corporation
number: 07093195
owner_city: Armonk
owner_country: US
publication_date: 20020321
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Technical Field","The invention relates to the field of data processing, and more particularly, to formatting data into markup language representations of data objects.","2. Description of the Related Art","Many issues can arise when integrating data between two or more applications. This is especially true when integrating data from different enterprise resource planning (ERP) systems and\/or applications. For example, one application may utilize data objects for interacting with other applications while another application may store data in flat file form. If data is to be shared among the two applications, the data within the flat file must be converted or translated into a data object. Flat files, however, can be difficult to process due to the many possible data formats and file encodings.","One type of flat file, a comma separated value (CSV) file, consists of data organized in rows and columns with each element being separated by a comma. In a standard CSV file, all required data for an instance of an ERP data object is located in a row of a single CSV file. The column headers in the CSV file correspond to the field names in the ERP data object. For example, the structure of a CSV file typically is as follows: the first line contains the encoding of the file, the second line contains the column headers, and the third line contains the data associated with an individual occurrence of an ERP data object.","CSV files, however, do not always exist in standard format. Rather, numerous file format alternatives exist. For example, the data associated with a particular ERP data object may be contained in more than one CSV file. Other variations from the standard file format include cases in which CSV column names do not match the field names of the ERP object. Still, in other cases, CSV column data may map to multiple fields in the ERP object.","Integration service teams have developed several different techniques for dealing with the many different CSV file format variations. One technique has been to develop custom code to capture data from both standard and non-standard CSV file formats to subsequently populate ERP data objects. This technique provides streamline code which performs only those functions which are necessary to populate the ERP data objects. As a result, custom coded solutions often provide improved runtime performance. Still, limitations do exist. Specifically, developing custom code for each interface or engagement of different applications can be both time consuming and error prone. Additionally, the implementation and maintenance of custom code may require the customer to employ information technology (IT) support personnel. Finally, custom code may prove difficult to modify in the event that the ERP system is enhanced or expanded at some point in the future.","Another technique has been to capture ERP meta data within a database repository. Under this technique, rather than using custom code to generate data mappings, a graphical user interface (GUI) tool is provided for mapping the CSV file data to the appropriate fields of the ERP data object. As is known to those skilled in the art, meta data can provide a description of an interface to an application, in this case an ERP system data object. One benefit of the database technique is that all of the ERP system meta data is contained within a central repository.","The database technique does have disadvantages. In particular, to first load CSV data into a database, a mapping of each ERP system object first must be created. Additionally, the use of a database introduces another potential point of failure into a system. Another disadvantage of the database technique is that the overall runtime performance of a system decreases because of the frequent calls to the database to access the ERP system meta data.","The invention disclosed herein provides a flexible and customizable solution for loading comma separated value (CSV) data via standards based markup language messages. In particular, the present invention can facilitate the population of application and\/or enterprise resource planning (ERP) system data objects with CSV data using extensible markup language (XML) messages. Through a dynamic analysis of ERP system meta data, new ERP system data objects and data extensions can be automatically supported. Any new non-standard CSV data mapping scenarios can be accommodated through a mapping file. Rather than generating a custom solution on a per customer basis, the mapping file enables the same base solution to be utilized for more than one customer, despite the degree of data customization. In consequence, customers can define additional entries in the mapping file to support a new, non-standard mapping scenario. This allows customers to extend existing data objects or define new data objects without software coding changes. The invention disclosed herein can shorten implementation cycles and is less error prone than the generation of custom code for each customer engagement.","One aspect of the present invention can include a method of building an application response message. The method can include receiving a master file specifying a message format for populating a data object of an application. For example, the master document can be an XML document that is dynamically generated according to meta data describing the data object of the application. The master document can specify element names which can correspond to fields of the data object. One or more flat files, for example CSV files, specifying data items can be read. A technique for mapping particular data items specified by the one or more flat files to element names specified in the master file can be determined.","More specifically, the mapping technique can be determined by accessing mapping data which specifies the element names and associated data items. An entry corresponding to the data object can be identified within the mapping data. For example, where the data items are associated with column headings specified by the one or more flat files, the element names of the master document can be correlated with associated ones of the column headings. If the data items are specified by several flat files, the mapping data can identify a correlation column to correlate particular data items from the several flat files to particular element names. Notably, the correlation column may or may not be mapped to one of the elements. Still, as specified by the mapping data, a correlation column other than a first column of one of the flat files can be identified for mapping data items from the several flat files to selected element names. Also, predetermined values can be assigned to selected ones of the element names according to the mapping data.","Accordingly, a markup language representation, for example an XML representation, of the data object can be generated according to the determined mapping technique and the specified message format. As a result, selected data items of the flat file can be formatted into separate instances of the data object as specified by the markup language representation.","The invention disclosed herein provides for the population of application and\/or enterprise resource planning (ERP) system data objects with flat file formatted data. In particular, comma separated value (CSV) data can be extracted from one or more CSV files to generate a markup language message such as an extensible markup langauge (XML) message describing the ERP system data object. The markup language message provides a representation of the data object, and thus, can be used to generate the data object. The present invention can dynamically and automatically accommodate new ERP system data objects as well as ERP system data extensions. New, non-standard CSV data mapping scenarios also can be supported through a mapping file which can be modified as necessary by a customer without the need for software coding changes.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["105","110","115","120","120","120"]},"The ERP system  can include a defined application programming interface having a meta data interface  and a meta data repository . The meta data interface  provides external applications and tools with a means by which to access the meta data repository . The meta data repository  stores meta data which describes the various data objects of the ERP system . The data objects, for example the Java objects used to interact with the Ariba Buyer procurement application, allow applications and systems to exchange information with the ERP system , as well as access the various functions of the ERP system . Whether the data objects are pre-defined objects included within the base ERP system , or are provided by a user of the ERP system , the meta data within the meta data repository  can describe the various data objects of the ERP system . For example, the meta data can describe the data structures, methods, titles, and different subsections, including individual inputs, outputs, and data values for the various data objects of the ERP system .","The ERP system  can provide meta data  to one or more other applications and\/or systems responsive to a meta data request (not shown). Accordingly, the meta data to XML application  can receive the meta data  from the ERP system  via the meta data interface . The meta data to XML application  can generate one or more master markup language files such as master XML file  according to the received meta data . Each master XML file  can represent the formatting and type of a specific ERP data object which is to be populated. For example, the master XML file  can specify information such as which ERP system data object is to be populated, for instance a purchase order data object or an address data object, as well as the fields and attributes of the data object. The master XML file  can include element names which correspond to data items of the CSV files, and further corresponds to fields of the data object to which the master XML file  is associated.","The meta data to XML application  can generate the master XML file  in accordance with meta data  obtained from the ERP system . Within an ERP system such as Ariba Buyer, meta data can be organized into objects referred to as variants. The ERP system can define a base variant for data used by the ERP system itself as well as other variants for tracking information which may be necessary for interfacing with other applications. The variants in turn can include classes which can be identified as either inbound or outbound. Inbound classes are included within an inbound electronic document definition, such as an XML document type definition (DTD), which describes objects being provided to the ERP system. Outbound classes are included within an outbound electronic document definition (XML DTD) which specifies objects being provided from the ERP system. Each class further can include one or more elements. The meta data specifying the variants, classes, and elements can be recursively processed, for example using a parser, and represented within the master XML file .","The CSV adapter  can generate a markup language message such as XML message . The XML message  can be an XML representation of an ERP system data object. The CSV adapter  can access the master XML file  to determine which data items from the CSV file  must be extracted as well as the format of those data items to generate the XML data object representation (XML message ). If the data items of the CSV file  are not in standard format, then the CSV adapter can consult the mapping data , which can be specified, for example, as an XML mapping file. As mentioned, in a standard CSV file, all required data for an instance of an ERP data object is located in a row of a single CSV file. Also, the column headers of the CSV file correspond to the field names of the ERP data object. Because CSV files do not always exist in this standard format, the mapping data  can specify the particular ERP system data objects which do not follow this standard mapping format. Additionally, the mapping data  can specify how those non-standard situations are to be resolved. For example, the mapping data  can include entries for each ERP system data object for which following non-standard formatting applies, as well as rules for extracting data items from the CSV file or files for each of the following non-standard formatting scenarios:\n\n","The mapping data  can be organized into two primary sections. The first, which can be referred to as CSV reader information, can include a collection of CSV reader event elements. A CSV reader event element is used when data from multiple CSV files is combined to build a single ERP object and one of the following is true: (1) the correlation column between the CSV files is not the first column, and (2) the columns used for correlation between multiple CSV files is not to be included in the outgoing markup language message.","The second section of the mapping data  can be referred to as CSV event map information. The CSV event map information includes CSV event map elements which are used whenever mapping is required between the CSV file or files and the master XML file . The previously listed non-standard scenarios, for example, would require CSV event map elements to specify how each scenario is to be handled. For example, correlation columns can be specified as well as whether the correlation column is to be included in the resulting XML message . Notably, unless a CSV event map element is defined for a ERP data object, it can be assumed that the correlation column between multiple CSV files is the first column of each CSV file and that the first column is to be included in the response XML message.","The XML to object application  can receive the XML message  and produce an ERP system data object  from the XML representation. In particular, the XML message  can be processed to generate the type of data object specified by the XML message itself. For example, attribute data can be used to determine whether the data object to be added into the data table of the data object  being created should be a string or an object data type. Further determinations can be made as to whether the data object represents a subclass. For instance, the subclass determination can be performed by determining whether the field in the XML message has associated sub-elements. If the element in the XML message does contain sub-elements, the sub-elements can be recursively processed to form another ERP system data object.",{"@attributes":{"id":"p-0027","num":"0033"},"figref":["FIG. 2","FIG. 1"],"b":["200","205","210"]},"In step , one or more flat files, for example CSV files, can be read and stored. The CSV files can be read and then stored as vectors to facilitate processing of the large amount of data items contained therein. In step , a determination can be made as to whether the data object to be populated can be mapped using standard mapping techniques or requires more advanced, non-standard mapping of data items from the CSV file. Specifically, the data object specified by the master XML file can be identified. The mapping data then can be searched for a reference to the data object specified by the master XML file. If no entry for the data object exists within the mapping data, then standard data mapping can be used. In that case, there can be a direct mapping between the CSV column names of the one or more CSV files and the element names of the master XML file. For instance, data items from the column heading \u201cUniqueName\u201d can be mapped to a \u201cUniqueName\u201d element specified in the corresponding master XML file. If standard mapping can be used, the method can proceed to step .","If, however, an entry for the data object does exist within the mapping data, this indicates that non-standard mapping must be used to map data items from the CSV file or files to particular elements of the master XML file. Notably, if an entry for the data object has been identified within the mapping data, then the mapping data should include an entry for each element specified in the master XML, and not just contain entries only for those elements that do not conform to the standard mapping technique.","Continuing with step , in the case where non-standard mapping must be used, the entry corresponding to the identified ERP system data object can be identified as well as the corresponding tags and elements of the mapping data. The elements can specify a correlation column between multiple CSV files, wherein the correlation column is not the first column. The elements also can specify a correlation column to be used for correlating multiple CSV files, wherein the correlation column is not to be included within the outgoing XML message. For example, the mapping data can specify which element names of the master XML file are associated with particular columns of the CSV file, despite the fact that the element names and the column names of the CSV file or files do not match. The data object entry in the mapping data further can specify an ERP data object definition composed of a variable number of tags corresponding to the fields of the data object as specified in the master XML file. For example the content of each tag can be a numeric value indicating the relative column position of a data item in the CSV file which corresponds to an associated data object field. Tags also can specify a default value in cases where a value is desired but no data is specified in the indicated column of the CSV file. The default value can include a value of null or a \u201cnull string\u201d indicating the value of the field should be blank.","In step , the tags and elements of the mapping data can be applied to condition or reorder the CSV data for processing. For example, when processing multiple files, the columns to be mapped from the first CSV file can be defined by tags. In this embodiment of the present invention, columns to be mapped from subsequent files can be defined by sub-elements in the mapping file. Each of these sub-elements can specify a column attribute. This column attribute can be an integer value that is one more than the total number of columns in the first CSV file, plus the number of sub-elements already defined. In illustration, if there are 12 columns in the first CSV file and only columns 11 columns are required in the mapping occupying columns 0\u201310 in the outgoing XML message, the first sub-element must specify a column attribute of 12 because there must be an accounting of all of the columns, numbers 0\u201311, in the first CSV file even though not all of the columns are mapped. Additional sub-elements must specify the next available column number, in this case 13. Another example of conditioning the data can include replacing column headers in the CSV file or files with column headers which can be specified in the mapping data.","In step , a first element of the master XML document can be identified. As mentioned, the elements of the master XML file correspond to fields to be included in the XML representation of the ERP system data object. In step , the element can be processed. More specifically, the element can be associated with the data item that is mapped to the element. Notably, whether the CSV file was in standard format, or the data items within the CSV file have been conditioned for processing according to the mapping data, the elements are now mapped to corresponding data items, and both the standard and non-standard formatted CSV data items can be processed in the same manner.","In step , a determination can be made as to whether additional elements of the master XML file are to be processed. If so, the method can continue to step  and repeat as necessary to process the remaining elements of the master XML file. If no further elements exist, the method can continue to step  where the XML message can be generated. For example, each element can be written to an XML file along with the any data items associated with the elements. After step , the method can end.","As previously mentioned, the resulting XML message is an XML representation of an ERP system data object. Accordingly, the XML message can be provided to an XML to object application where the XML representation can be used to generate a data object which can be provided to an ERP system.","The invention disclosed herein provides for the population of application and\/or enterprise resource planning (ERP) system data objects with flat file formatted data. Notably, the embodiments disclosed herein require no vendor database repository. This exclusion of such a repository can result in significant improvement in load time. Also, the invention can accommodate customization of ERP system data objects through the dynamic generation of master XML files from ERP system meta data. Customization of ERP system data objects further can be accommodated through the use of user editable mapping data which reduces, if not eliminates, the need to modify the underlaying base code.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system, or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings embodiments which are presently preferred, it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 2","FIG. 1"]}]},"DETDESC":[{},{}]}
