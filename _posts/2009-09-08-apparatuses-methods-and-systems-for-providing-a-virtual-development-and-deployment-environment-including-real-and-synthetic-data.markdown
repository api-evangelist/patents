---
title: Apparatuses, methods and systems for providing a virtual development and deployment environment including real and synthetic data
abstract: The APPARATUSES, METHODS AND SYSTEMS FOR PROVIDING A VIRTUAL DEVELOPMENT AND DEPLOYMENT ENVIRONMENT INCLUDING REAL AND SYNTHETIC DATA (“SYNONYM”) provides a development and test environment with reduced database storage requirements that uses synthetic data based on anonymized real data. SYNONYM allows the use of sensitive data for testing while protecting such data as required by privacy laws, secrecy laws and company policies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08930275&OS=08930275&RS=08930275
owner: 
number: 08930275
owner_city: 
owner_country: 
publication_date: 20090908
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","SYNONYM","SYNONYM Controller","Computer Systemization","Power Source","Interface Adapters","Memory","Component Collection","Operating System","Information Server","User Interface","Web Browser","Mail Server","Mail Client","Cryptographic Server","The SYNONYM Database","The SYNONYMs","Distributed SYNONYMs"],"p":["The instant application describes inventive aspects of at least two distinct implementations, including:","a method for providing a virtual development and\/or test environment (with a suggested Class\/Subclass of 726\/26);","a method for data synthesization (with a suggested Class\/Subclass of 703\/22);","The instant application directs claims to Prevention Of Unauthorized Use Of Data Including Prevention Of Piracy, Privacy Violations, Or Unauthorized Data Modification (suggested class\/subclass: 726\/26). However, in order to develop a reader's understanding of the descriptions of the other implementations, the implementations have been compiled into a single application to illustrate and clarify how aspects of these implementations operate independently, interoperate as between individual embodiments, and\/or cooperate collectively. The application goes on to further describe the interrelations and synergies as between any of the various implementations within the context of an overarching inventive system; all of which is to further ensure compliance with 35 U.S.C. \u00a7112.","Furthermore, applicants hereby claim priority under 35 USC \u00a7119 for U.S. provisional patent application Ser. No. 61\/095,009 filed Sep. 8, 2008 entitled \u201cSYSTEM AND METHOD FOR PROVIDING A VIRTUAL BANKING ENVIRONMENT INCLUDING SYNTHETIC DATA.\u201d","The entire contents of the aforementioned application are herein expressly incorporated by reference.","The present invention is directed generally to apparatuses, methods, and systems of computer testing, and more particularly, to APPARATUSES, METHODS AND SYSTEMS FOR PROVIDING A VIRTUAL DEVELOPMENT AND DEPLOYMENT ENVIRONMENT INCLUDING REAL AND SYNTHETIC DATA.","Software testing is utilized by software developers to reduce programming errors in software applications. Integrated development environments (IDEs), such as Microsoft Visual Studio and Eclipse, and the debuggers included with such IDEs are one set of tools that may be used by software developers for software testing.","The APPARATUSES, METHODS AND SYSTEMS FOR PROVIDING A VIRTUAL DEVELOPMENT AND DEPLOYMENT ENVIRONMENT INCLUDING REAL AND SYNTHETIC DATA (hereinafter \u201cSYNONYM\u201d) provides a virtual development and deployment environment. In one embodiment, a method involves receiving request to create synthesized testing data. Real data records to be anonymized are identified and a source of conjured data for anonymization of real data records based on a unique identifier in the real data records is selected. The method involves creating an anonymized data set by replacing real data in the real data records, based on the unique identifier in the real data records, with the selected conjured data, and selecting a subset of the anonymized data set based on specified criteria for synthesization. The method further involves generating a synthetic database, wherein generation further includes: instantiating a shell synthetic database, populating the shell synthetic data by copying the selected subset of the anonymized data set into the shell synthetic database, generating synthetic unique identifiers, and replacing unique identifiers with synthetic unique identifiers, and instantiating the synthetic database.","The leading number of each reference number within the drawings indicates the figure in which that reference number is introduced and\/or detailed. As such, a detailed discussion of reference number  would be found and\/or introduced in . Reference number  is introduced in , etc.","As software applications have grown in size and complexity, testing of software applications has become increasingly more important. Having numerous components, including multiple database components, in large software applications exponentially increases the number of interactions that may happen among application components. Therefore, testing procedures should be used to check how changes in one application component affect other application components so as to prevent programming errors and inefficient implementations from being introduced into software applications as a result of changes to existing components or additions of new components. The amount and types of data used in software applications has also increased. As the number of users and options available to those users increases, the number of special cases, exceptions and languages supported by a software application also grows. Thus, the interactions between application components, including database components, and application data should also be tested to prevent errors. As the amount of testing that should be done increases, so does the cost, the length of time, and\/or the number of people necessary to perform such testing. Some companies choose to outsource or offshore certain aspects of testing to reduce the cost associated with testing. However, outsourcing or offshoring testing creates another set of challenges as customer data useful in testing must be protected as required by various privacy laws and company policy. The synthetic deployment environment includes applications allowing mirroring by duplicating current environments, load balancing of current systems by deploying a number of synthetic environments adding additional capacity, generating synthetic gaming deployment environments, generating synthetic educational deployment environments, generating synthetic training deployment environment, generating synthetic medical deployment environments, fostering quality improvement by allowing environmental variations for testing that does not affect production environments.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1A","FIG. 1A","FIG. 1C"],"b":["105","181","182","183","184","185","186","187"]},{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<XML>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<USER>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<USER NAME>Toni<\/USER NAME>"]},{"entry":[{},"<USER ID>U1234<\/USER ID>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/USER>"]},{"entry":[{},"<ENVIRONMENT>MAINFRAME<\/ENVIRONMENT>"]},{"entry":[{},"<PROJECT>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<PROJECT NAME>New_Application<\/PROJECT NAME>"]},{"entry":[{},"<PROJECT ID>P5678<\/PROJECT ID>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PROJECT>"]},{"entry":[{},"<REQUIRED APPLICATIONS>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<APPLICATION>Microsoft_Visio<\/APPLICATION>"]},{"entry":[{},"<APPLICATION>Eclipse<\/APPLICATION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/REQUIRED APPLICATIONS>"]},{"entry":[{},"<REQUIRED DATABASES>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DATABASE>SYN_CUSTOMERS<\/DATABASE>"]},{"entry":[{},"<DATABASE>SYN_ACCOUNTS<\/DATABASE>"]},{"entry":[{},"<DATABASE>SYN_DEPOSITS<\/DATABASE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/REQUIRED DATABASES >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/XML>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In some cases, it may useful to limit access from actual data, for privacy concerns, policy concerns, and\/or because US and international regulations limit the use and sharing of personal information and various regional, local, industry-wide, or company rules and\/or customs limit the use and disclosure of information regarding certain business relationships or transactions of a person or entity (e.g., various restrictions may exist with regard to using real customer data for testing, especially when such testing is outsourced or offshored). A virtual development and\/or test environment may therefore use synthesized data during testing instead of real data. In one embodiment, such synthesized data may be based on anonymized real data. In one implementation, anonymized data may be created  by replacing data values in particular database fields with anonymized versions of those data values. Further details regarding the creation of anonymized data are provided later in the specification. In one implementation, synthesized data may be created  by synthesizing new data records based on anonymized real data. In one implementation, the amount of data stored in a synthetic database (synbase) may be reduced to increase efficiency. Further details regarding the creation of synthesized data are provided later in the specification.","In alternative embodiments, real data and\/or modified real data, such as real data with modified IP addresses and\/or modified domain\/machine\/server names, may be used instead of synthesized data. In one embodiment, the synthetic deployment environment includes applications allowing mirroring by duplicating current environments. For example, real data and\/or modified real data may be used for mirroring using a synchronization technology, such as rsync, running through a job scheduler, such as cron. In one embodiment, the IP addresses may be dynamically assigned to such additional copies, the new domain\/machine\/server names may use the previous name and ad an incremental counter (e.g., PREVIOUS_NAME would become PREVIOUS_NAME02, PREVIOUS_NAME03, etc.). In another embodiment, the synthetic deployment environment includes applications allowing load balancing of current systems by deploying a number of synthetic environments adding additional capacity. For example, real data and\/or modified real data may be used for load balancing among multiple synthetic environments using a round robin scheduling algorithm. In such an embodiment, the subsequently duplicated synthetic environments with new identifiers may each become a part of the round robin pool geographically, or based on the round-robin time allocation (e.g., each synthetic environment handling a portion of work load for set quantum of time). In yet another embodiment, the synthetic deployment environment includes applications allowing grid computing by deploying a number of synthetic environments working in parallel. For example, real data and\/or modified real data may be used in grid computing using distributing computing technology, such as Mac OS X Xgrid (e.g., where the duplicated renamed synthetic environments act as individual processing nodes in the grid).","A virtual development and\/or test environment may be created  in response to the request to create a new virtual development and\/or test environment. In one embodiment, the virtual development and\/or test environment may be persistent (ENV) and shared across multiple projects. In another embodiment, the virtual development and\/or test environment may be created on demand (TED) and used by a single project. In yet another embodiment, the virtual development and\/or test environment may use a database containing synthesized data records (\u201csynbase\u201d hereinafter). In another implementation, the virtual development and\/or test environment may select one out of a plurality of synbase versions to use for testing. In one embodiment, the virtual development and\/or test environment may be physically and\/or logically separated from a production environment. See  for a block diagram illustrating dedicated use of hardware in a DvSZ in one embodiment of the SYNONYM. In , no sharing of hardware is allowed between the DvSZ  and the company intranet . An exception is made for the mainframe, and the mainframe is instead separated logically into RZ  and RZ\/  between the company intranet and the DvSZ respectively.","In one implementation, different security certificates (e.g., security certificates based on Public Key Infrastructure) may be issued to resources in the virtual development and\/or test environment and in the production environment. See  for an example SYNONYM embodiment showing a block diagram illustrating the use of public key infrastructure (PKI). In , the PKI  in the company intranet  issues security certificates to computers in the company intranet  and in the DvSZ . The PKI  issues different security certificates to resources in the company intranet  and to resources in the DvSZ . A communication between a client and a server can only succeed if both resources have either test security certificates or production security certificates. For example, such resources may include Java Application Platform servers, CORBA adapters, database servers, and\/or the like. In one implementation, a Development and Test Server Zone may be created to contain the virtual development and\/or test environment. For example, a dedicated network, separated from the rest of an organization's intranet and limited in its ability to access the organization's intranet, using components such as firewall, VPN Gateway, security certificates, and\/or the like may be setup using dedicated routers. Access to the DvSZ may be limited to strongly authenticated users only and no sensitive information may be accessible in the DvSZ. Furthermore, the DvSZ may be implemented as a \u201cblack hole\u201d network zone. As such, any information exchange between the DvSZ and outside data sources is allowed only if it is initiated from outside the DvSZ. See  for a block diagram illustrating transfer of sensitive info into the DvSZ in one embodiment of the SYNONYM. , illustrates that there is no automatic synchronization  of information between repositories  in the company intranet  and repositories  in the DvSZ . Only sensitive information cleared through a quality gate A-B may be transferred in the DvSZ. The establishment of a connection from inside the DvSZ  to a resource outside is blocked. Information cleared for use in the DvSZ may be accessible only to those users of the DvSZ that are authorized to use the information. See  for a block diagram illustrating DvSZ network layout in one embodiment of the SYNONYM.  illustrates how the network is set up A-C, and the hardware A-D used for the set up. Further details regarding the creation of a virtual development and\/or test environment are provided later in the specification. User accounts authorized to use a virtual development and\/or test environment may be instantiated . In one embodiment, a variety of user account types, with a range of rights and authentication requirements may be instantiated. Further details regarding the instantiation of user accounts are provided later in the specification.","Authorized users may perform required development and testing  using a virtual development and\/or testing environment and\/or associated synbase. In one embodiment, such testing may include unit testing, feature testing, application testing, and\/or the like. In one implementation, the testing may be performed by dedicated human testers checking test results against specified performance parameters. In another implementation, the testing may be performed by automated test routines checking test results against predefined values or tested averages. For example, the result of a \u201ccheck account balance\u201d operation used on a newly created account may be compared against a predefined value of $o to ensure that the operation behaves correctly for this test case. As another example, the time to complete \u201ccheck account balance\u201d operations may be tracked and the average completion time compared to the time taken to complete the current \u201ccheck account balance\u201d operation to test execution speed. In another embodiment, randomized values may be placed into input fields to determine if a program component handles errors properly, by logging\/tracking the program responses to such value entries. In another embodiment, application source code may be tested for hard coding of sensitive data. In one implementation, a Legal Parser may be used to identify potentially sensitive data within a source code file written in a programming language, such as PL\/I, Java, and\/or the like, which might violate established privacy or secrecy rules. For example, a department responsible for specifying privacy rules, such as Legal and Compliance department, may specify a list of potentially sensitive types of data (e.g., Names, CIF numbers, account numbers, and\/or the like). The Legal Parser may then be used to scan source code files of a project for potential matches and provide notification of any such matches. For example, source code and comments may be scanned using standard parsing techniques, such as by using the m\/\/ operator in Perl, e.g., m\/$LegalParser\/ for occurrences of a 12 digit number, which corresponds to the length of a CIF number. In such an embodiment, a LegalParser data structure (e.g., a file, memory struct, etc.) may house a list of flagged terms, numbers, etc., which will be used to check for unauthorized use of such. A variety of methods may be used to exchange information among test team members during testing. In one implementation, email, instant messaging, http posts, and\/or the like protocols may be used to exchange information. For example, test team members may send emails to each other using email software, such as Microsoft Outlook, Lotus Notes, and\/or the like, to ask questions and to receive answers. In another implementation, technologies, such as Microsoft SharePoint, that provide document management, discussion forums, surveys and email based notifications may be used to exchange information. In one embodiment, the synthetic deployment environment may be used to simulate a virtual bank. In another embodiment, the synthetic deployment environment may be used for generating synthetic deployment environments in fields such as, gaming, simulation, education, medicine, quality control, and\/or the like.","A virtual development and\/or test environment may be decommissioned  upon request. For example, a virtual development and\/or test environment may be decommissioned upon completion of testing required for a particular application component, project phase, project, and\/or the like. In one implementation, such decommissioning may involve secure deletion, including multiple data wipes, of user accounts and synbase associated with the virtual development and\/or test environment. In another embodiment, decommissioning may include archiving of the environment to an owning company, and secure deletion of the environment at an outsourcing vendor location.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1B","b":["150","160","170","165"]},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 2A","FIG. 2A"],"b":["205","251","252","253"]},{"@attributes":{"id":"p-0041","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<XML>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ANONYMIZATION DATABASES>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<DATABASE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DATABASE NAME>REAL_CUSTOMERS<\/DATABASE NAME>"]},{"entry":[{},"<TABLE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TABLE NAME>Customer_Info<\/TABLE NAME>"]},{"entry":[{},"<TABLE FIELD>Name<\/TABLE FIELD>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/TABLE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"231pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/DATABASE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/ANONYMIZATION DATABASES>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/XML>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In one embodiment, the above XML may result from user selections of pop-up menu entries in a web form. See  for a screen shot diagram illustrating a web form based user interface in one embodiment of the SYNONYM. In another implementation, the list may be stored in a database table and accessed by SYNONYM via an SQL SELECT command. In yet another embodiment, the list may be stored in a configuration file and accessed by SYNONYM using I\/O calls that allow reading from a file. Based on the list, the database tables to be anonymized are selected  and data records are extracted for processing . In one implementation, such selection may be accomplished via one or more SQL SELECT commands (e.g., SELECT CIF, Name FROM Customer_Info) and extraction may be accomplished by placing the selected data records into a data file. Anonymization rules and reference tables may be loaded at . Anonymization rules specify how to generate anonymized replacement values for a particular field.  is a table illustrating anonymization rules in one embodiment of the SYNONYM. Reference tables contain data that may be used as replacement values according to anonymization rules. For example, in one implementation, a reference table may contain a list of  male and female names along with a list of regions where each name is commonly used. In one embodiment, a table is populated with made up names; in one embodiment a name generator (e.g., www.fakenamegenerator.com) may be used to generate and\/or populate a database table of made up names.","In one embodiment, a data record containing real data may be selected  from the data file for anonymization. For example, I\/O calls that allow reading from a data file may be used. The data record may be parsed to select the next available field  using a parsing algorithm. In one implementation, standard XML formatting may be used to facilitate parsing. A determination is made whether the currently selected field needs to be anonymized  based on the anonymization rules. For example, the name of the field may be compared to the list of field names in the anonymization rules. If the field name is not one of the field names specified in the anonymization rules, then the current field value is kept . Otherwise, an appropriate rule for the field is selected  from the anonymization rules. In one implementation, the anonymization rules may be loaded and comparison performed using a programming language, such as PL\/I, Perl, and\/or the like. In one embodiment, an example of the PL\/I rules may take the following form:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ($fieldType == TYPE_FIRST_NAME)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"replaceFirstName($field);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if ($fieldType == TYPE_ADDRESS)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"replaceAddress($field);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Based on the anonymization rule, an anonymized value is generated for the field . In one embodiment, the anonymized value may be generated by randomly selecting a value from a list of applicable values from a reference table specified in the anonymization rules, e.g., from a made up name table. In another embodiment, the anonymized value may be randomly generated based on instructions specified in the anonymization rules. The generated anonymized value replaces the original field value . If there are more fields in the currently selected data record, the next field may be selected for anonymization , otherwise, the next available record may be selected for anonymization . Once all data records are anonymized, the anonymized data may be output to one or more data files  using I\/O calls that allow writing to a data file. In one implementation, the data is written out to a new data file. In another implementation, the existing data file is overwritten with new anonymized data. The anonymized data is propagated  to allow all parts of SYNONYM access to the anonymized data. For example, the anonymized data may be copied to files and\/or databases on storage partitions designed to work with various operating systems such as Microsoft Windows XP, Unix, Apple Macintosh OS and\/or the like.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 3","FIG. 3"],"b":"310"},{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<XML>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SYNTHESIZATION DATABASES>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DATABASE NAME>ANONYMIZED_CUSTOMERS<\/DATABASE NAME>"]},{"entry":[{},"<DATABASE NAME>ANONYMIZED_ADDRESSES<\/DATABASE NAME>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"252pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/SYNTHESIZATION DATABASES>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/XML>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"In another implementation, the list may be stored in a database table and accessed by SYNONYM via SQL commands. For example, a web interface that allows a user to select databases (e.g., via checkboxes) that should be used in the synthesization may be used. The above XML may be sent to SYNONYM, which may connect to the specified databases using database adapters, such as by using adapters available through the Open Database Connectivity (ODBC) API protocol, adapters available through the WebObjects Enterprise Objects Framework (EOF), and\/or the like. In yet another embodiment, the list may be stored in a configuration file and accessed by SYNONYM using I\/O calls that allow reading from a file. Based on the list, anonymized data is input  for synthesization. In one implementation, the anonymized data is input by providing the name of one or more files containing the anonymized data. In another implementation, the anonymized data is input by providing the name of one or more SQL databases and\/or tables containing the anonymized data and\/or through an SQL SELECT of the specified tables. In yet another implementation, the anonymized data is exported from one or more SQL database to one or more files and the names of these files are input. In one embodiment, other data associated with the anonymized data is also input.","The request to create synthesized data may also specify that a subset of the data representative of each customer type requested for testing should be selected for synthesization to reduce the amount of synthesized data. In one embodiment, the subset of data that should be selected may be specified in terms of business constellations, and business constellations may be specified in terms of equivalence classes. In one implementation, an equivalence class may include: Title, Business Unit, Branch Office, Nationality, Domicile, Language, Customer Type, Customer Segment, etc., and a business constellation may include a unique combination of values of one or more equivalence classes. For example, a business constellation may be specified as a male business customer from the US. This business constellation may be passed in XML format as part of the request as follows:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XML>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<BUSINESS CONSTELLATIONs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<BUSINESS CONSTELLATION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<CUSTOMER TYPE>Male<\/CUSTOMER TYPE>"]},{"entry":[{},"<CUSTOMER SEGMENT>Business<\/CUSTOMER"]},{"entry":[{},"SEGMENT>"]},{"entry":[{},"<DOMICILE>US<\/DOMICILE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/BUSINESS CONSTELLATION>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/BUSINESS CONSTELLATIONs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The data may be queried based on the specified business constellations . In one embodiment, programmatic commands, written in any programming language, such as C++, Perl, SQL, and\/or the like, may be issued to compare values of the data to values specified in a business constellation. In another embodiment, an SQL SELECT for a customer type may provide a subset of numerous search results, which may be used. A subset of data representative of all specified business constellations may then be obtained  based on the comparisons. In one implementation, the first data record encountered that satisfies all equivalence classes of a given business constellation is chosen to represent the given business constellation. Each business constellation may also be represented by multiple data records up to some maximum specified number.","Synthesized data is based on the subset of data representative of all specified business constellations. In one embodiment, new customer information files with new CIF numbers may be created for each customer in the subset of data, and the CIF numbers in the anonymized data and in other data associated with the anonymized data may be replaced with new synthetic CIF numbers . For example, new CIF numbers may be randomly and\/or serially generated to be unique and to have the same format as real CIF numbers. In one implementation, the number ranges used to generate synthesized CIF numbers may be forbidden in the production environment. After this is done, it is no longer possible to determine any actual customer identification information from the new CIF numbers or to trace the new synthesized CIF data to any actual customer. In one implementation, the resulting synthesized data is output to one or more data files using I\/O calls that allow writing to a data file.","A synthetic database may be created  to hold the new synthesized data. In one embodiment, a new synbase is created using any number of database platforms such as Microsoft SQL Server, MySQL, and\/or the like. For example, it may be created with the following mySQL SQL command:\n\ncreate database DBname;\n","In another embodiment, contents of an existing synbase may be deleted (e.g., using SQL DELETE FROM synbase_table_name [WHERE constraint]) and\/or be overwritten (e.g., using SQL UPDATE synbase_table_name SET field_value=\u2018SomeNewValue\u2019 [WHERE constraint]) with synthesized data.","In an alternative embodiment, other data corresponding to the synthesized data may be similarly synthesized before creating a synthetic database at . In one implementation, new accounts\/deposits with new account\/deposit numbers may be created for accounts\/deposits associated with the synthesized CIF data, and the account\/deposit numbers are replaced with new account\/deposit numbers . For example, new account\/deposit numbers may be randomly generated to be unique and to have the same format as real account\/deposit numbers. In one implementation, the number ranges used to generate synthesized account\/deposit numbers may be forbidden in the production environment.","The synthesized data is placed into a synbase . In one implementation, the synthesized data, stored in one or more data files, may be read using I\/O calls that allow reading from a data file, parsed, such as by using the m\/\/ operator in Perl (e.g., m\/|.*|\/ to extract a field value enclosed by \u201c|\u201d), and placed into a synbase using SQL commands. A determination is made as to whether the virtual development and\/or test environment should have transaction data in addition to synthesized data . In one embodiment, such determination may be made by checking the request to synthesize data for further information specifying end of day jobs (EODs) that should be run to create transaction data. For example, in one implementation, this information may be passed in XML format as part of the request as follows:",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XML>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<EODs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<EOD>MakePayments<\/EOD>"]},{"entry":[{},"<EOD>CancelPayments<\/EOD>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/EODs>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In one embodiment, EODs may specify the selection criteria for transactions that should be created for the virtual development and\/or test environment . For example, in one implementation, an EOD may trigger the creation of a specific type of transaction data (e.g., EOD MakePayments may create transaction data simulating payments being made by customers, while EOD CancelPayments may create transaction data simulating customers canceling payments). Thus, specifying that a given EOD should be run to create transaction data, also determines the kind of transaction data that should be created. Using EODs, a synbase version that includes transaction data is created . In one embodiment, transaction data, such as money transfers between two customers, may be simulated by an EOD by creating a specified number of random money transfer transactions (e.g., in Perl to select two random accounts, select a number within a specified range that represents an amount to be transferred, and transfer that amount from the first to the second account), and outputting data records representing these transactions to a file using I\/O calls. In one implementation the transaction data records along with synbase data are copied to a new synbase (e.g., by using adapters available through the Open Database Connectivity (ODBC) API standard, adapters available through the WebObjects Enterprise Objects Framework (EOF), and\/or the like), which comprises a new synbase version. In another implementation only the transaction data records are copied into a separate database or separate database table, and together with the synthesized data the two parts comprise a new synbase version.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 4","FIG. 4"],"b":"440"},{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XML>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<ENVIRONMENT>MAINFRAME<\/ENVIRONMENT>"]},{"entry":[{},"<REQUIRED APPLICATIONS>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<APPLICATION>Microsoft_Visio<\/APPLICATION>"]},{"entry":[{},"<APPLICATION> Eclipse<\/APPLICATION>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/REQUIRED APPLICATIONS>"]},{"entry":[{},"<REQUIRED DATABASES>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<DATABASE>SYN_CUSTOMERS<\/DATABASE>"]},{"entry":[{},"<DATABASE>SYN_ACCOUNTS<\/DATABASE>"]},{"entry":[{},"<DATABASE>SYN_DEPOSITS<\/DATABASE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/REQUIRED DATABASES >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"At , the requested runtime, middleware, database and\/or the like environments are installed. In one implementation, such software may comprise an operating system, such as Microsoft Windows XP, Unix, Apple Macintosh OS and\/or the like; runtime environments, such as Java Runtime Environment, GTK+, and\/or the like; middleware, such as CORBA, DCOM, RPC and\/or the like; and database environments, such as Microsoft SQL Server, MySQL, and\/or the like. At , the requested project specific applications, infrastructure and test tools are installed. In one implementation, such software may comprise applications, such as a web server for web-based projects; infrastructure, such as Concurrent Versioning System (CVS); and test tools, such as SilkTest. The requested synbase version is selected  and copied to one or more databases used by the virtual development and\/or test environment . In one embodiment, various synbase versions may reside on a \u201cmaster\u201d virtual development and\/or test environment. When a request to create a new virtual development and\/or test environment is received, the requested synbase version may be copied from the \u201cmaster\u201d virtual development and\/or test environment to the new virtual development and\/or test environment. In one implementation, a synbase version with no transaction data may be copied from the \u201cmaster\u201d virtual development and\/or test environment to the new virtual development and\/or test environment as part of the FIT image. For example, such copying may be done by a fast copy utility such as IBM FlashCopy. See  for a block diagram illustrating copying of a synthetic database from a \u201cmaster\u201d virtual development and\/or test environment  to new virtual development and\/or test environments in one embodiment of the SYNONYM. In , synbase version  is copied from the \u201cmaster\u201d virtual development and\/or test environment  to a persistent Env  virtual development and\/or test environment  using FlashCopy, and application specific data described in  is added to the data repository. Synbase version  is copied from the \u201cmaster\u201d virtual development and\/or test environment  to a new TED  virtual development and\/or test environment  using FlashCopy, and new application specific data described in  is added to the data repository.","In one embodiment, application specific data may be added  to the data repository used by the virtual development and\/or test environment. In one implementation, Wiki pages containing project specific information may store their data in one or more databases. In another implementation, source code in programming languages such as Java, PL\/I, and\/or the like is added through the CVS.",{"@attributes":{"id":"p-0063","num":"0062"},"figref":["FIG. 5","FIG. 5"],"b":["540","542","544"]},"A First Installation Tool (FIT) image is a collection of software that may be used to provide each computer in an organization with the same basic set of software. In one embodiment a FIT image may contain an operating system, such as Windows XP; a web browser, such as Microsoft Internet Explorer; an antivirus, such as McAfee Antivirus; VPN software, such as CheckPoint VPN Connectivity and Integrity Client; access software, such as IBM Personal Communications; and a set of office productivity software, such as Microsoft Word, Microsoft Excel, Microsoft PowerPoint, and Microsoft Outlook. In one implementation, development tools required by projects for development and testing may exist as pre-packaged bundles for FIT (e.g., TIPD, SSH clients, 3270 terminal emulation, Rational software, Eclipse, Clear Case, Clear Quest, and\/or the like). In one implementation, software included in a FIT image may differ based on predefined profiles. For example, such profiles may include a profile for a server, a desktop computer, a profile for a notebook computer, a profile for a mobile device, and\/or the like. In one implementation, the profiles may be specified as below:",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<XML>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<PROFILE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TYPE>DESKTOP<\/TYPE>"]},{"entry":[{},"<SOFTWARE>WindowsXP<\/SOFTWARE>"]},{"entry":[{},"<SOFTWARE>MicrosoftOfficeXP<\/SOFTWARE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/PROFILE>"]},{"entry":[{},"<PROFILE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TYPE>MOBILE<\/TYPE>"]},{"entry":[{},"<SOFTWARE>WindowsMobile6.0<\/SOFTWARE>"]},{"entry":[{},"<SOFTWARE>MicrosoftOfficeMobile<\/SOFTWARE>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/PROFILE>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/XML>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Additional software may also be installed on a computer with a FIT image on request. Such additional software may include programs such as Microsoft Visio, Microsoft Project, Eclipse, and\/or the like. At , a determination may be made which users in the specified set of users are regular users and which are offshore users. In one embodiment, users located locally may have a FIT image along with any additional software installed on their computers  using a deployment tool, such as Windows Deployment Services, and may access SYNONYM. In another embodiment, a VMware disk image may be used to package and deploy a FIT image. For example, software applications to be included in the FIT image may be packaged as VMware ThinApps and included in the VMware disk image. Additional required applications may be supplied with additional ThinApp installations over base (e.g., Desktop, Mobile, etc.) installations. The VMware disk image may then be deployed to a workstation using VMware software. In one embodiment, computers used by offshore users may be located in a secure offshore development center (ODC), which may be hosted by a third party provider. In one implementation, computers in an ODC are physically and\/or logically separated from any other computers and access to these computer is limited to authorized personnel. For example, an ODC may be installed in physically separated rooms with physical access control and dedicated assets and resources. The network in the ODC may not be connected to the remaining network of the third party provider. The ODC may be connected to the DvSZ via VPN and offshore users not working in the ODC may not have access to the DvSZ. See  for a block diagram illustrating physical access control at the ODC in one embodiment of the SYNONYM. In , the ODC  is physically separated from the rest of the third party provider's site . Only computers in the ODC  are allowed to connect with the DvSZ  and only through a VPN tunnel .","Users located offshore may have a virtual FIT image along with any additional software installed on their computers . In one implementation, software on the offshore users' computers may include an operating system, such as Windows XP; a virtualization software, such as VMware Player; and a FIT image used through the virtualization software (virtual FIT image). In one implementation, the virtual FIT image may be deployed using a Code Server located in the ODC. A Code Server may serve to install FIT image on workstations in an ODC, to distribute additional software to the workstations, and to provide updates (e.g., virus definition files updates for an antivirus program) for software installed on the workstations. For example, the code server may install an operating system, such as Windows XP, and a virtualization software, such as VMware Player, on a workstation. VMware Player may then be used to run a virtual FIT image packaged in a VMware disk image on the workstation. At , a VPN Tunnel may be established from the ODC to the virtual development and\/or test environment in the DvSZ that allows offshore users access to SYNONYM. In one implementation, authentication of the VPN counterparts may be done on a system level and not on a user level. In one implementation, offshore users may have access only to services inside the DvSZ. See  for a block diagram illustrating Developer Server Zone  and Offshore Development Centers A-C in one embodiment of the SYNONYM. In , a DvSZ , separated from the rest of the company intranet , is connected to ODCs - through VPN tunnels A-C. The workstations inside the ODCs A-F may communicate with services inside the DvSZ using the installed FIT images obtained from code servers A-C. The workstations may not access services in the company intranet outside the DvSZ.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 7","b":["701","701"]},"Typically, users, which may be people and\/or other systems, may engage information technology systems (e.g., computers) to facilitate information processing. In turn, computers employ processors to process information; such processors  may be referred to as central processing units (CPU). One form of processor is referred to as a microprocessor. CPUs use communicative circuits to pass binary encoded signals acting as instructions to enable various operations. These instructions may be operational and\/or data instructions containing and\/or referencing other instructions and data in various processor accessible and operable areas of memory  (e.g., registers, cache memory, random access memory, etc.). Such communicative instructions may be stored and\/or transmitted in batches (e.g., batches of instructions) as programs and\/or data components to facilitate desired operations. These stored instruction codes, e.g., programs, may engage the CPU circuit components and other motherboard and\/or system components to perform desired operations. One type of program is a computer operating system, which, may be executed by CPU on a computer; the operating system enables and facilitates users to access and operate computer information technology and resources. Some resources that may be employed in information technology systems include: input and output mechanisms through which data may pass into and out of a computer; memory storage into which data may be saved; and processors by which information may be processed. These information technology systems may be used to collect data for later retrieval, analysis, and manipulation, which may be facilitated through a database program. These information technology systems provide interfaces that allow users to access and operate various system components.","In one embodiment, the SYNONYM controller  may be connected to and\/or communicate with entities such as, but not limited to: one or more users from user input devices ; peripheral devices ; an optional cryptographic processor device ; and\/or a communications network .","Networks are commonly thought to comprise the interconnection and interoperation of clients, servers, and intermediary nodes in a graph topology. It should be noted that the term \u201cserver\u201d as used throughout this application refers generally to a computer, other device, program, or combination thereof that processes and responds to the requests of remote users across a communications network. Servers serve their information to requesting \u201cclients.\u201d The term \u201cclient\u201d as used herein refers generally to a computer, program, other device, user and\/or combination thereof that is capable of processing and making requests and obtaining and processing any responses from servers across a communications network. A computer, other device, program, or combination thereof that facilitates, processes information and requests, and\/or furthers the passage of information from a source user to a destination user is commonly referred to as a \u201cnode.\u201d Networks are generally thought to facilitate the transfer of information from source points to destinations. A node specifically tasked with furthering the passage of information from a source to a destination is commonly called a \u201crouter.\u201d There are many forms of networks such as Local Area Networks (LANs), Pico networks, Wide Area Networks (WANs), Wireless Networks (WLANs), etc. For example, the Internet is generally accepted as being an interconnection of a multitude of networks whereby remote clients and servers may access and interoperate with one another.","The SYNONYM controller  may be based on computer systems that may comprise, but are not limited to, components such as: a computer systemization  connected to memory .","A computer systemization  may comprise a clock , central processing unit (\u201cCPU(s)\u201d and\/or \u201cprocessor(s)\u201d (these terms are used interchangeable throughout the disclosure unless noted to the contrary)) , a memory  (e.g., a read only memory (ROM) , a random access memory (RAM) , etc.), and\/or an interface bus , and most frequently, although not necessarily, are all interconnected and\/or communicating through a system bus  on one or more (mother)board(s)  having conductive and\/or otherwise transportive circuit pathways through which instructions (e.g., binary encoded signals) may travel to effect communications, operations, storage, etc. Optionally, the computer systemization may be connected to an internal power source . Optionally, a cryptographic processor  may be connected to the system bus. The system clock typically has a crystal oscillator and generates a base signal through the computer systemization's circuit pathways. The clock is typically coupled to the system bus and various clock multipliers that will increase or decrease the base operating frequency for other components interconnected in the computer systemization. The clock and various components in a computer systemization drive signals embodying information throughout the system. Such transmission and reception of instructions embodying information throughout a computer systemization may be commonly referred to as communications. These communicative instructions may further be transmitted, received, and the cause of return and\/or reply communications beyond the instant computer systemization to: communications networks, input devices, other computer systemizations, peripheral devices, and\/or the like. Of course, any of the above components may be connected directly to one another, connected to the CPU, and\/or organized in numerous variations employed as exemplified by various computer systems.","The CPU comprises at least one high-speed data processor adequate to execute program components for executing user and\/or system-generated requests. Often, the processors themselves will incorporate various specialized processing units, such as, but not limited to: integrated system (bus) controllers, memory management control units, floating point units, and even specialized processing sub-units like graphics processing units, digital signal processing units, and\/or the like. Additionally, processors may include internal fast access addressable memory, and be capable of mapping and addressing memory  beyond the processor itself; internal memory may include, but is not limited to: fast registers, various levels of cache memory (e.g., level , , , etc.), RAM, etc. The processor may access this memory through the use of a memory address space that is accessible via instruction address, which the processor can construct and decode allowing it to access a circuit path to a specific memory address space having a memory state. The CPU may be a microprocessor such as: AMD's Athlon, Duron and\/or Opteron; ARM's application, embedded and secure processors; IBM and\/or Motorola's DragonBall and PowerPC; IBM's and Sony's Cell processor; Intel's Celeron, Core (2) Duo, Itanium, Pentium, Xeon, and\/or XScale; and\/or the like processor(s). The CPU interacts with memory through instruction passing through conductive and\/or transportive conduits (e.g., (printed) electronic and\/or optic circuits) to execute stored instructions (i.e., program code) according to conventional data processing techniques. Such instruction passing facilitates communication within the SYNONYM controller and beyond through various interfaces. Should processing requirements dictate a greater amount speed and\/or capacity, distributed processors (e.g., Distributed SYNONYM), mainframe, multi-core, parallel, and\/or super-computer architectures may similarly be employed. Alternatively, should deployment requirements dictate greater portability, smaller Personal Digital Assistants (PDAs) may be employed.","Depending on the particular implementation, features of the SYNONYM may be achieved by implementing a microcontroller such as CAST's R8051XC2 microcontroller; Intel's MCS 51 (i.e., 8051 microcontroller); and\/or the like. Also, to implement certain features of the SYNONYM, some feature implementations may rely on embedded components, such as: Application-Specific Integrated Circuit (\u201cASIC\u201d), Digital Signal Processing (\u201cDSP\u201d), Field Programmable Gate Array (\u201cFPGA\u201d), and\/or the like embedded technology. For example, any of the SYNONYM component collection (distributed or otherwise) and\/or features may be implemented via the microprocessor and\/or via embedded components; e.g., via ASIC, coprocessor, DSP, FPGA, and\/or the like. Alternately, some implementations of the SYNONYM may be implemented with embedded components that are configured and used to achieve a variety of features or signal processing.","Depending on the particular implementation, the embedded components may include software solutions, hardware solutions, and\/or some combination of both hardware\/software solutions. For example, SYNONYM features discussed herein may be achieved through implementing FPGAs, which are a semiconductor devices containing programmable logic components called \u201clogic blocks\u201d, and programmable interconnects, such as the high performance FPGA Virtex series and\/or the low cost Spartan series manufactured by Xilinx. Logic blocks and interconnects can be programmed by the customer or designer, after the FPGA is manufactured, to implement any of the SYNONYM features. A hierarchy of programmable interconnects allow logic blocks to be interconnected as needed by the SYNONYM system designer\/administrator, somewhat like a one-chip programmable breadboard. An FPGA's logic blocks can be programmed to perform the function of basic logic gates such as AND, and XOR, or more complex combinational functions such as decoders or simple mathematical functions. In most FPGAs, the logic blocks also include memory elements, which may be simple flip-flops or more complete blocks of memory. In some circumstances, the SYNONYM may be developed on regular FPGAs and then migrated into a fixed version that more resembles ASIC implementations. Alternate or coordinating implementations may migrate SYNONYM controller features to a final ASIC instead of or in addition to FPGAs. Depending on the implementation all of the aforementioned embedded components and microprocessors may be considered the \u201cCPU\u201d and\/or \u201cprocessor\u201d for the SYNONYM.","The power source  may be of any standard form for powering small electronic circuit board devices such as the following power cells: alkaline, lithium hydride, lithium ion, lithium polymer, nickel cadmium, solar cells, and\/or the like. Other types of AC or DC power sources may be used as well. In the case of solar cells, in one embodiment, the case provides an aperture through which the solar cell may capture photonic energy. The power cell  is connected to at least one of the interconnected subsequent components of the SYNONYM thereby providing an electric current to all subsequent components. In one example, the power source  is connected to the system bus component . In an alternative embodiment, an outside power source  is provided through a connection across the I\/O  interface. For example, a USB and\/or IEEE 1394 connection carries both data and power across the connection and is therefore a suitable source of power.","Interface bus(ses)  may accept, connect, and\/or communicate to a number of interface adapters, conventionally although not necessarily in the form of adapter cards, such as but not limited to: input output interfaces (I\/O) , storage interfaces , network interfaces , and\/or the like. Optionally, cryptographic processor interfaces  similarly may be connected to the interface bus. The interface bus provides for the communications of interface adapters with one another as well as with other components of the computer systemization. Interface adapters are adapted for a compatible interface bus. Interface adapters conventionally connect to the interface bus via a slot architecture. Conventional slot architectures may be employed, such as, but not limited to: Accelerated Graphics Port (AGP), Card Bus, (Extended) Industry Standard Architecture ((E)ISA), Micro Channel Architecture (MCA), NuBus, Peripheral Component Interconnect (Extended) (PCI(X)), PCI Express, Personal Computer Memory Card International Association (PCMCIA), and\/or the like.","Storage interfaces  may accept, communicate, and\/or connect to a number of storage devices such as, but not limited to: storage devices , removable disc devices, and\/or the like. Storage interfaces may employ connection protocols such as, but not limited to: (Ultra) (Serial) Advanced Technology Attachment (Packet Interface) ((Ultra) (Serial) ATA(PI)), (Enhanced) Integrated Drive Electronics ((E)IDE), Institute of Electrical and Electronics Engineers (IEEE) 1394, fiber channel, Small Computer Systems Interface (SCSI), Universal Serial Bus (USB), and\/or the like.","Network interfaces  may accept, communicate, and\/or connect to a communications network . Through a communications network , the SYNONYM controller is accessible through remote clients (e.g., computers with web browsers) by users . Network interfaces may employ connection protocols such as, but not limited to: direct connect, Ethernet (thick, thin, twisted pair 10\/100\/1000 Base T, and\/or the like), Token Ring, wireless connection such as IEEE 802.11a-x, and\/or the like. Should processing requirements dictate a greater amount speed and\/or capacity, distributed network controllers (e.g., Distributed SYNONYM), architectures may similarly be employed to pool, load balance, and\/or otherwise increase the communicative bandwidth required by the SYNONYM controller. A communications network may be any one and\/or the combination of the following: a direct interconnection; the Internet; a Local Area Network (LAN); a Metropolitan Area Network (MAN); an Operating Missions as Nodes on the Internet (OMNI); a secured custom connection; a Wide Area Network (WAN); a wireless network (e.g., employing protocols such as, but not limited to a Wireless Application Protocol (WAP), I-mode, and\/or the like); and\/or the like. A network interface may be regarded as a specialized form of an input output interface. Further, multiple network interfaces  may be used to engage with various communications network types . For example, multiple network interfaces may be employed to allow for the communication over broadcast, multicast, and\/or unicast networks.","Input Output interfaces (I\/O)  may accept, communicate, and\/or connect to user input devices , peripheral devices , cryptographic processor devices , and\/or the like. I\/O may employ connection protocols such as, but not limited to: audio: analog, digital, monaural, RCA, stereo, and\/or the like; data: Apple Desktop Bus (ADB), IEEE 1394a-b, serial, universal serial bus (USB); infrared; joystick; keyboard; midi; optical; PC AT; PS\/2; parallel; radio; video interface: Apple Desktop Connector (ADC), BNC, coaxial, component, composite, digital, Digital Visual Interface (DVI), high-definition multimedia interface (HDMI), RCA, RF antennae, S-Video, VGA, and\/or the like; wireless: 802.11a\/b\/g\/n\/x, Bluetooth, code division multiple access (CDMA), global system for mobile communications (GSM), WiMax, etc.; and\/or the like. One typical output device may include a video display, which typically comprises a Cathode Ray Tube (CRT) or Liquid Crystal Display (LCD) based monitor with an interface (e.g., DVI circuitry and cable) that accepts signals from a video interface, may be used. The video interface composites information generated by a computer systemization and generates video signals based on the composited information in a video memory frame. Another output device is a television set, which accepts signals from a video interface. Typically, the video interface provides the composited video information through a video connection interface that accepts a video display interface (e.g., an RCA composite video connector accepting an RCA composite video cable; a DVI connector accepting a DVI display cable, etc.).","User input devices  may be card readers, dongles, finger print readers, gloves, graphics tablets, joysticks, keyboards, mouse (mice), remote controls, retina readers, trackballs, trackpads, and\/or the like.","Peripheral devices  may be connected and\/or communicate to I\/O and\/or other facilities of the like such as network interfaces, storage interfaces, and\/or the like. Peripheral devices may be audio devices, cameras, dongles (e.g., for copy protection, ensuring secure transactions with a digital signature, and\/or the like), external processors (for added functionality), goggles, microphones, monitors, network interfaces, printers, scanners, storage devices, video devices, video sources, visors, and\/or the like.","It should be noted that although user input devices and peripheral devices may be employed, the SYNONYM controller may be embodied as an embedded, dedicated, and\/or monitor-less (i.e., headless) device, wherein access would be provided over a network interface connection.","Cryptographic units such as, but not limited to, microcontrollers, processors , interfaces , and\/or devices  may be attached, and\/or communicate with the SYNONYM controller. A MC68HC16 microcontroller, manufactured by Motorola Inc., may be used for and\/or within cryptographic units. The MC68HC16 microcontroller utilizes a 16-bit multiply-and-accumulate instruction in the 16 MHz configuration and requires less than one second to perform a 512-bit RSA private key operation. Cryptographic units support the authentication of communications from interacting agents, as well as allowing for anonymous transactions. Cryptographic units may also be configured as part of CPU. Equivalent microcontrollers and\/or processors may also be used. Other commercially available specialized cryptographic processors include: the Broadcom's CryptoNetX and other Security Processors; nCipher's nShield, SafeNet's Luna PCI (e.g., 7100) series; Semaphore Communications' 40 MHz Roadrunner 184; Sun's Cryptographic Accelerators (e.g., Accelerator 6000 PCIe Board, Accelerator 500 Daughtercard); Via Nano Processor (e.g., L2100, L2200, U2400) line, which is capable of performing 500+ MB\/s of cryptographic instructions; VLSI Technology's 33 MHz 6868; and\/or the like.","Generally, any mechanization and\/or embodiment allowing a processor to affect the storage and\/or retrieval of information is regarded as memory . However, memory is a fungible technology and resource, thus, any number of memory embodiments may be employed in lieu of or in concert with one another. It is to be understood that the SYNONYM controller and\/or a computer systemization may employ various forms of memory . For example, a computer systemization may be configured wherein the functionality of on-chip CPU memory (e.g., registers), RAM, ROM, and any other storage devices are provided by a paper punch tape or paper punch card mechanism; of course such an embodiment would result in an extremely slow rate of operation. In a typical configuration, memory  will include ROM , RAM , and a storage device . A storage device  may be any conventional computer system storage. Storage devices may include a drum; a (fixed and\/or removable) magnetic disk drive; a magneto-optical drive; an optical drive (i.e., Blueray, CD ROM\/RAM\/Recordable (R)\/ReWritable (RW), DVD R\/RW, HD DVD R\/RW etc.); an array of devices (e.g., Redundant Array of Independent Disks (RAID)); solid state memory devices (USB memory, solid state drives (SSD), etc.); other processor-readable storage mediums; and\/or other devices of the like. Thus, a computer systemization generally requires and makes use of memory.","The memory  may contain a collection of program and\/or database components and\/or data such as, but not limited to: operating system component(s)  (operating system); information server component(s)  (information server); user interface component(s)  (user interface); Web browser component(s)  (Web browser); database(s) ; mail server component(s) ; mail client component(s) ; cryptographic server component(s)  (cryptographic server); the SYNONYM component(s) ; and\/or the like (i.e., collectively a component collection). These components may be stored and accessed from the storage devices and\/or from storage devices accessible through an interface bus. Although non-conventional program components such as those in the component collection, typically, are stored in a local storage device , they may also be loaded and\/or stored in memory such as: peripheral devices, RAM, remote storage facilities through a communications network, ROM, various forms of memory, and\/or the like.","The operating system component  is an executable program component facilitating the operation of the SYNONYM controller. Typically, the operating system facilitates access of I\/O, network interfaces, peripheral devices, storage devices, and\/or the like. The operating system may be a highly fault tolerant, scalable, and secure system such as: Apple Macintosh OS X (Server); AT&T Nan 9; Be OS; Unix and Unix-like system distributions (such as AT&T's UNIX; Berkley Software Distribution (BSD) variations such as FreeBSD, NetBSD, OpenBSD, and\/or the like; Linux distributions such as Red Hat, Ubuntu, and\/or the like); and\/or the like operating systems. However, more limited and\/or less secure operating systems also may be employed such as Apple Macintosh OS, IBM OS\/2, Microsoft DOS, Microsoft Windows 2000\/2003\/3.1\/95\/98\/CE\/Millenium\/NT\/Vista\/XP (Server), Palm OS, and\/or the like. An operating system may communicate to and\/or with other components in a component collection, including itself, and\/or the like. Most frequently, the operating system communicates with other program components, user interfaces, and\/or the like. For example, the operating system may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses. The operating system, once executed by the CPU, may enable the interaction with communications networks, data, I\/O, peripheral devices, program components, memory, user input devices, and\/or the like. The operating system may provide communications protocols that allow the SYNONYM controller to communicate with other entities through a communications network . Various communication protocols may be used by the SYNONYM controller as a subcarrier transport mechanism for interaction, such as, but not limited to: multicast, TCP\/IP, UDP, unicast, and\/or the like.","An information server component  is a stored program component that is executed by a CPU. The information server may be a conventional Internet information server such as, but not limited to Apache Software Foundation's Apache, Microsoft's Internet Information Server, and\/or the like. The information server may allow for the execution of program components through facilities such as Active Server Page (ASP), ActiveX, (ANSI) (Objective-) C(++), C# and\/or .NET, Common Gateway Interface (CGI) scripts, dynamic (D) hypertext markup language (HTML), FLASH, Java, JavaScript, Practical Extraction Report Language (PERL), Hypertext Pre-Processor (PHP), pipes, Python, wireless application protocol (WAP), WebObjects, and\/or the like. The information server may support secure communications protocols such as, but not limited to, File Transfer Protocol (FTP); HyperText Transfer Protocol (HTTP); Secure Hypertext Transfer Protocol (HTTPS), Secure Socket Layer (SSL), messaging protocols (e.g., America Online (AOL) Instant Messenger (AIM), Application Exchange (APEX), ICQ, Internet Relay Chat (IRC), Microsoft Network (MSN) Messenger Service, Presence and Instant Messaging Protocol (PRIM), Internet Engineering Task Force's (IETF's) Session Initiation Protocol (SIP), SIP for Instant Messaging and Presence Leveraging Extensions (SIMPLE), open XML-based Extensible Messaging and Presence Protocol (XMPP) (i.e., Jabber or Open Mobile Alliance's (OMA's) Instant Messaging and Presence Service (IMPS)), Yahoo! Instant Messenger Service, and\/or the like. The information server provides results in the form of Web pages to Web browsers, and allows for the manipulated generation of the Web pages through interaction with other program components. After a Domain Name System (DNS) resolution portion of an HTTP request is resolved to a particular information server, the information server resolves requests for information at specified locations on the SYNONYM controller based on the remainder of the HTTP request. For example, a request such as http:\/\/123.124.125.126\/myInformation.html might have the IP portion of the request \u201c123.124.125.126\u201d resolved by a DNS server to an information server at that IP address; that information server might in turn further parse the http request for the \u201c\/myInformation.html\u201d portion of the request and resolve it to a location in memory containing the information \u201cmyInformation.html.\u201d Additionally, other information serving protocols may be employed across various ports, e.g., FTP communications across port 21, and\/or the like. An information server may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the information server communicates with the SYNONYM database , operating systems, other program components, user interfaces, Web browsers, and\/or the like.","Access to the SYNONYM database may be achieved through a number of database bridge mechanisms such as through scripting languages as enumerated below (e.g., CGI) and through inter-application communication channels as enumerated below (e.g., CORBA, WebObjects, etc.). Any data requests through a Web browser are parsed through the bridge mechanism into appropriate grammars as required by the SYNONYM. In one embodiment, the information server would provide a Web form accessible by a Web browser. Entries made into supplied fields in the Web form are tagged as having been entered into the particular fields, and parsed as such. The entered terms are then passed along with the field tags, which act to instruct the parser to generate queries directed to appropriate tables and\/or fields. In one embodiment, the parser may generate queries in standard SQL by instantiating a search string with the proper join\/select commands based on the tagged text entries, wherein the resulting command is provided over the bridge mechanism to the SYNONYM as a query. Upon generating query results from the query, the results are passed over the bridge mechanism, and may be parsed for formatting and generation of a new results Web page by the bridge mechanism. Such a new results Web page is then provided to the information server, which may supply it to the requesting Web browser.","Also, an information server may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses.","The function of computer interfaces in some respects is similar to automobile operation interfaces. Automobile operation interface elements such as steering wheels, gearshifts, and speedometers facilitate the access, operation, and display of automobile resources, functionality, and status. Computer interaction interface elements such as check boxes, cursors, menus, scrollers, and windows (collectively and commonly referred to as widgets) similarly facilitate the access, operation, and display of data and computer hardware and operating system resources, functionality, and status. Operation interfaces are commonly called user interfaces. Graphical user interfaces (GUIs) such as the Apple Macintosh Operating System's Aqua, IBM's OS\/2, Microsoft's Windows 2000\/2003\/3.1\/95\/98\/CE\/Millenium\/NT\/XP\/Vista\/7 (i.e., Aero), Unix's X-Windows (e.g., which may include additional Unix graphic interface libraries and layers such as K Desktop Environment (KDE), mythTV and GNU Network Object Model Environment (GNOME)), web interface libraries (e.g., ActiveX, AJAX, (D)HTML, FLASH, Java, JavaScript, etc. interface libraries such as, but not limited to, Dojo, jQuery(UI), MooTools, Prototype, script.aculo.us, SWFObject, Yahoo! User Interface, any of which may be used and) provide a baseline and means of accessing and displaying information graphically to users.","A user interface component  is a stored program component that is executed by a CPU. The user interface may be a conventional graphic user interface as provided by, with, and\/or atop operating systems and\/or operating environments such as already discussed. The user interface may allow for the display, execution, interaction, manipulation, and\/or operation of program components and\/or system facilities through textual and\/or graphical facilities. The user interface provides a facility through which users may affect, interact, and\/or operate a computer system. A user interface may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the user interface communicates with operating systems, other program components, and\/or the like. The user interface may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses.","A Web browser component  is a stored program component that is executed by a CPU. The Web browser may be a conventional hypertext viewing application such as Microsoft Internet Explorer or Netscape Navigator. Secure Web browsing may be supplied with 128 bit (or greater) encryption by way of HTTPS, SSL, and\/or the like. Web browsers allowing for the execution of program components through facilities such as ActiveX, AJAX, (D)HTML, FLASH, Java, JavaScript, web browser plug-in APIs (e.g., FireFox, Safari Plug-in, and\/or the like APIs), and\/or the like. Web browsers and like information access tools may be integrated into PDAs, cellular telephones, and\/or other mobile devices. A Web browser may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the Web browser communicates with information servers, operating systems, integrated program components (e.g., plug-ins), and\/or the like; e.g., it may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses. Of course, in place of a Web browser and information server, a combined application may be developed to perform similar functions of both. The combined application would similarly affect the obtaining and the provision of information to users, user agents, and\/or the like from the SYNONYM enabled nodes. The combined application may be nugatory on systems employing standard Web browsers.","A mail server component  is a stored program component that is executed by a CPU . The mail server may be a conventional Internet mail server such as, but not limited to sendmail, Microsoft Exchange, and\/or the like. The mail server may allow for the execution of program components through facilities such as ASP, ActiveX, (ANSI) (Objective-) C(++), C# and\/or .NET, CGI scripts, Java, JavaScript, PERL, PHP, pipes, Python, WebObjects, and\/or the like. The mail server may support communications protocols such as, but not limited to: Internet message access protocol (IMAP), Messaging Application Programming Interface (MAPI)\/Microsoft Exchange, post office protocol (POP3), simple mail transfer protocol (SMTP), and\/or the like. The mail server can route, forward, and process incoming and outgoing mail messages that have been sent, relayed and\/or otherwise traversing through and\/or to the SYNONYM.","Access to the SYNONYM mail may be achieved through a number of APIs offered by the individual Web server components and\/or the operating system.","Also, a mail server may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, information, and\/or responses.","A mail client component  is a stored program component that is executed by a CPU . The mail client may be a conventional mail viewing application such as Apple Mail, Microsoft Entourage, Microsoft Outlook, Microsoft Outlook Express, Mozilla, Thunderbird, and\/or the like. Mail clients may support a number of transfer protocols, such as: IMAP, Microsoft Exchange, POP3, SMTP, and\/or the like. A mail client may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the mail client communicates with mail servers, operating systems, other mail clients, and\/or the like; e.g., it may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, information, and\/or responses. Generally, the mail client provides a facility to compose and transmit electronic mail messages.","A cryptographic server component  is a stored program component that is executed by a CPU , cryptographic processor , cryptographic processor interface , cryptographic processor device , and\/or the like. Cryptographic processor interfaces will allow for expedition of encryption and\/or decryption requests by the cryptographic component; however, the cryptographic component, alternatively, may run on a conventional CPU. The cryptographic component allows for the encryption and\/or decryption of provided data. The cryptographic component allows for both symmetric and asymmetric (e.g., Pretty Good Protection (PGP)) encryption and\/or decryption. The cryptographic component may employ cryptographic techniques such as, but not limited to: digital certificates (e.g., X.509 authentication framework), digital signatures, dual signatures, enveloping, password access protection, public key management, and\/or the like. The cryptographic component will facilitate numerous (encryption and\/or decryption) security protocols such as, but not limited to: checksum, Data Encryption Standard (DES), Elliptical Curve Encryption (ECC), International Data Encryption Algorithm (IDEA), Message Digest 5 (MD5, which is a one way hash function), passwords, Rivest Cipher (RC5), Rijndael, RSA (which is an Internet encryption and authentication system that uses an algorithm developed in 1977 by Ron Rivest, Adi Shamir, and Leonard Adleman), Secure Hash Algorithm (SHA), Secure Socket Layer (SSL), Secure Hypertext Transfer Protocol (HTTPS), and\/or the like. Employing such encryption security protocols, the SYNONYM may encrypt all incoming and\/or outgoing communications and may serve as node within a virtual private network (VPN) with a wider communications network. The cryptographic component facilitates the process of \u201csecurity authorization\u201d whereby access to a resource is inhibited by a security protocol wherein the cryptographic component effects authorized access to the secured resource. In addition, the cryptographic component may provide unique identifiers of content, e.g., employing and MD5 hash to obtain a unique signature for an digital audio file. A cryptographic component may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. The cryptographic component supports encryption schemes allowing for the secure transmission of information across a communications network to enable the SYNONYM component to engage in secure transactions if so desired. The cryptographic component facilitates the secure accessing of resources on the SYNONYM and facilitates the access of secured resources on remote systems; i.e., it may act as a client and\/or server of secured resources. Most frequently, the cryptographic component communicates with information servers, operating systems, other program components, and\/or the like. The cryptographic component may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses.","The SYNONYM database component  may be embodied in a database and its stored data. The database is a stored program component, which is executed by the CPU; the stored program component portion configuring the CPU to process the stored data. The database may be a conventional, fault tolerant, relational, scalable, secure database such as Oracle or Sybase. Relational databases are an extension of a flat file. Relational databases consist of a series of related tables. The tables are interconnected via a key field. Use of the key field allows the combination of the tables by indexing against the key field; i.e., the key fields act as dimensional pivot points for combining information from various tables. Relationships generally identify links maintained between tables by matching primary keys. Primary keys represent fields that uniquely identify the rows of a table in a relational database. More precisely, they uniquely identify rows of a table on the \u201cone\u201d side of a one-to-many relationship.","Alternatively, the SYNONYM database may be implemented using various standard data-structures, such as an array, hash, (linked) list, struct, structured text file (e.g., XML), table, and\/or the like. Such data-structures may be stored in memory and\/or in (structured) files. In another alternative, an object-oriented database may be used, such as Frontier, ObjectStore, Poet, Zope, and\/or the like. Object databases can include a number of object collections that are grouped and\/or linked together by common attributes; they may be related to other object collections by some common attributes. Object-oriented databases perform similarly to relational databases with the exception that objects are not just pieces of data but may have other types of functionality encapsulated within a given object. If the SYNONYM database is implemented as a data-structure, the use of the SYNONYM database  may be integrated into another component such as the SYNONYM component . Also, the database may be implemented as a mix of data structures, objects, and relational structures. Databases may be consolidated and\/or distributed in countless variations through standard data processing techniques. Portions of databases, e.g., tables, may be exported and\/or imported and thus decentralized and\/or integrated.","In one embodiment, the database component  includes several tables -. A user table includes fields such as, but not limited to: customer ID, CIF number, name, an address, and\/or the like. The user table may support and\/or track multiple entity accounts on a SYNONYM. An account table includes fields such as, but not limited to: account number, account type, account opening date, asset ID, asset value, and\/or the like. A deposit table includes fields such as, but not limited to: deposit number, deposit type, deposit date, and\/or the like. An anonymization table includes fields such as, but not limited to: anonymization db name, anonymization db id, anonymization db table, anonymization db field, and\/or the like. A synthesization table includes fields such as, but not limited to: synthesization db name, synthesization db id, synthesization db table, synthesization db field, and\/or the like. A transactions table includes fields such as, but not limited to, transaction id, transaction account one, transaction account two, transaction type, transaction amount, and\/or the like. An anonymization replacement data table includes fields such as, but not limited to, replacement first name, replacement last name, replacement address, and\/or the like.","In one embodiment, the SYNONYM database may interact with other database systems. For example, employing a distributed database system, queries and data access by search SYNONYM component may treat the combination of the SYNONYM database, an integrated data security layer database as a single database entity.","In one embodiment, user programs may contain various user interface primitives, which may serve to update the SYNONYM. Also, various accounts may require custom database tables depending upon the environments and the types of clients the SYNONYM may need to serve. It should be noted that any unique fields may be designated as a key field throughout. In an alternative embodiment, these tables have been decentralized into their own databases and their respective database controllers (i.e., individual database controllers for each of the above tables). Employing standard data processing techniques, one may further distribute the databases over several computer systemizations and\/or storage devices. Similarly, configurations of the decentralized database controllers may be varied by consolidating and\/or distributing the various database components -. The SYNONYM may be configured to keep track of various settings, inputs, and parameters via database controllers.","The SYNONYM database may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the SYNONYM database communicates with the SYNONYM component, other program components, and\/or the like. The database may contain, retain, and provide information regarding other nodes and data.","The SYNONYM component  is a stored program component that is executed by a CPU. In one embodiment, the SYNONYM component incorporates any and\/or all combinations of the aspects of the SYNONYM that was discussed in the previous figures. As such, the SYNONYM affects accessing, obtaining and the provision of testing, information, services, transactions, and\/or the like across various communications networks.","The SYNONYM component enables the anonymization, synthesization, testing of production environments, and\/or the like and use of the SYNONYM.","The SYNONYM component enabling access of information between nodes may be developed by employing standard development tools and languages such as, but not limited to: Apache components, Assembly, ActiveX, binary executables, (ANSI) (Objective-) C(++), C# and\/or .NET, database adapters, CGI scripts, Java, JavaScript, mapping tools, procedural and object oriented development tools, PERL, PHP, Python, shell scripts, SQL commands, web application server extensions, web development environments and libraries (e.g., Microsoft's ActiveX; Adobe AIR, FLEX & FLASH; AJAX; (D)HTML; Dojo, Java; JavaScript; jQuery(UI); MooTools; Prototype; script.aculo.us; Simple Object Access Protocol (SOAP); SWFObject; Yahoo! User Interface; and\/or the like), WebObjects, and\/or the like. In one embodiment, the SYNONYM server employs a cryptographic server to encrypt and decrypt communications. The SYNONYM component may communicate to and\/or with other components in a component collection, including itself, and\/or facilities of the like. Most frequently, the SYNONYM component communicates with the SYNONYM database, operating systems, other program components, and\/or the like. The SYNONYM may contain, communicate, generate, obtain, and\/or provide program component, system, user, and\/or data communications, requests, and\/or responses.","The structure and\/or operation of any of the SYNONYM node controller components may be combined, consolidated, and\/or distributed in any number of ways to facilitate virtual development and\/or deployment. Similarly, the component collection may be combined in any number of ways to facilitate deployment and\/or development. To accomplish this, one may integrate the components into a common code base or in a facility that can dynamically load the components on demand in an integrated fashion.","The component collection may be consolidated and\/or distributed in countless variations through standard data processing and\/or development techniques. Multiple instances of any one of the program components in the program component collection may be instantiated on a single node, and\/or across numerous nodes to improve performance through load-balancing and\/or data-processing techniques. Furthermore, single instances may also be distributed across multiple controllers and\/or storage devices; e.g., databases. All program component instances and controllers working in concert may do so through standard data processing communication techniques.","The configuration of the SYNONYM controller will depend on the context of system deployment. Factors such as, but not limited to, the budget, capacity, location, and\/or use of the underlying hardware resources may affect deployment requirements and configuration. Regardless of if the configuration results in more consolidated and\/or integrated program components, results in a more distributed series of program components, and\/or results in some combination between a consolidated and distributed configuration, data may be communicated, obtained, and\/or provided. Instances of components consolidated into a common code base from the program component collection may communicate, obtain, and\/or provide data. This may be accomplished through intra-application data processing communication techniques such as, but not limited to: data referencing (e.g., pointers), internal messaging, object instance variable communication, shared memory space, variable passing, and\/or the like.","If component collection components are discrete, separate, and\/or external to one another, then communicating, obtaining, and\/or providing data with and\/or to other component components may be accomplished through inter-application data processing communication techniques such as, but not limited to: Application Program Interfaces (API) information passage; (distributed) Component Object Model ((D)COM), (Distributed) Object Linking and Embedding ((D)OLE), and\/or the like), Common Object Request Broker Architecture (CORBA), local and remote application program interfaces Jini, Remote Method Invocation (RMI), SOAP, process pipes, shared files, and\/or the like. Messages sent between discrete component components for inter-application communication or within memory spaces of a singular component for intra-application communication may be facilitated through the creation and parsing of a grammar. A grammar may be developed by using standard development tools such as lex, yacc, XML, and\/or the like, which allow for grammar generation and parsing functionality, which in turn may form the basis of communication messages within and between components. For example, a grammar may be arranged to recognize the tokens of an HTTP post command, e.g.:\n\n3\u2003\u2003Value1\n","where Value1 is discerned as being a parameter because \u201chttp:\/\/\u201d is part of the grammar syntax, and what follows is considered part of the post value. Similarly, with such a grammar, a variable \u201cValue1\u201d may be inserted into an \u201chttp:\/\/\u201d post command and then sent. The grammar syntax itself may be presented as structured data that is interpreted and\/or other wise used to generate the parsing mechanism (e.g., a syntax description text file as processed by lex, yacc, etc.). Also, once the parsing mechanism is generated and\/or instantiated, it itself may process and\/or parse structured data such as, but not limited to: character (e.g., tab) delineated text, HTML, structured text streams, XML, and\/or the like structured data. In another embodiment, inter-application data processing protocols themselves may have integrated and\/or readily available parsers (e.g., the SOAP parser) that may be employed to parse communications data. Further, the parsing grammar may be used beyond message parsing, but may also be used to parse: databases, data collections, data stores, structured data, and\/or the like. Again, the desired configuration will depend upon the context, environment, and requirements of system deployment.","The entirety of this application (including the Cover Page, Title, Headings, Field, Background, Summary, Brief Description of the Drawings, Detailed Description, Claims, Abstract, Figures, and otherwise) shows by way of illustration various embodiments in which the claimed inventions may be practiced. The advantages and features of the application are of a representative sample of embodiments only, and are not exhaustive and\/or exclusive. They are presented only to assist in understanding and teach the claimed principles. It should be understood that they are not representative of all claimed inventions. As such, certain aspects of the disclosure have not been discussed herein. That alternate embodiments may not have been presented for a specific portion of the invention or that further undescribed alternate embodiments may be available for a portion is not to be considered a disclaimer of those alternate embodiments. It will be appreciated that many of those undescribed embodiments incorporate the same principles of the invention and others are equivalent. Thus, it is to be understood that other embodiments may be utilized and functional, logical, organizational, structural and\/or topological modifications may be made without departing from the scope and\/or spirit of the disclosure. As such, all examples and\/or embodiments are deemed to be non-limiting throughout this disclosure. Also, no inference should be drawn regarding those embodiments discussed herein relative to those not discussed herein other than it is as such for purposes of reducing space and repetition. For instance, it is to be understood that the logical and\/or topological structure of any combination of any program components (a component collection), other components and\/or any present feature sets as described in the figures and\/or throughout are not limited to a fixed operating order and\/or arrangement, but rather, any disclosed order is exemplary and all equivalents, regardless of order, are contemplated by the disclosure. Furthermore, it is to be understood that such features are not limited to serial execution, but rather, any number of threads, processes, services, servers, and\/or the like that may execute asynchronously, concurrently, in parallel, simultaneously, synchronously, and\/or the like are contemplated by the disclosure. As such, some of these features may be mutually contradictory, in that they cannot be simultaneously present in a single embodiment. Similarly, some features are applicable to one aspect of the invention, and inapplicable to others. In addition, the disclosure includes other inventions not presently claimed. Applicant reserves all rights in those presently unclaimed inventions including the right to claim such inventions, file additional applications, continuations, continuations in part, divisions, and\/or the like thereof. As such, it should be understood that advantages, embodiments, examples, functional, features, logical, organizational, structural, topological, and\/or other aspects of the disclosure are not to be considered limitations on the disclosure as defined by the claims or limitations on equivalents to the claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying appendices and\/or drawings illustrate various non-limiting, example, inventive aspects in accordance with the present disclosure:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2A"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2C"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 6C"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 6D"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6E"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 6F"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6G"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
