---
title: Mapping between native data type instances
abstract: Mapping of a first native data type instance to a second native data type instance is performed in three stages: the first native data type instance is converted into a first programming language and platform independent representation conforming to a first schema capable of defining base and derived data types; the first programming language and platform independent representation is transformed into a second programming language and platform independent representation conforming to a second schema capable of defining base and derived data types; and the second programming language and platform independent representation is converted into the second native data type instance. The programming language and platform independent representations may be event-based extensible Markup Language (XML) representations implemented according to the Simple API for XML (SAX). The transformation may be governed by an extensible Stylesheet Language Transform (XSLT) stylesheet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07058645&OS=07058645&RS=07058645
owner: International Business Machines Corporation
number: 07058645
owner_city: Armonk
owner_country: US
publication_date: 20030303
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to computer software applications, and more particularly to mapping between instances of native data types in computer software applications.","Computer software applications employ various data types to represent and store data. These data types may for example be base types (e.g. integer, character, or string), derived data types including user-defined types (e.g. records or arrays), or alternatively object-oriented types such as classes. The data types are typically implemented in a particular programming language for a particular platform. Such implementations are referred to as \u201cnative\u201d date type instances, with the term \u201cnative\u201d denoting programming language and platform dependency.","Occasionally it may be necessary or useful to map one native data type instance to a different native data type instance. Such mapping, for example, permits native data from legacy applications to be incorporated into new applications. In some cases, mapping may be desired between instances implemented in different programming languages (e.g. mapping of a Java\u2122 integer to a COBOL string). In other cases, the desired mapping may be between instances that are both implemented in the same programming language but which differ in their structure (e.g. from one C structure representing an employee record into a different C structure representing a mailing address).","Most known approaches to mapping between native data type instances (or simply \u201cmapping between native data types\u201d, as it is sometimes referred to) map directly from a source data type to a target data type. For example, code is written to map directly from, e.g., one C structure to another, or to map directly from a Java\u2122 integer to a COBOL string. If it later becomes necessary to map either of the source or target native data types to a third native data type, the code may not be suited to such mapping due the fact that it is \u201chard-coded\u201d to the source and target native data types. The direct mapping approach is thus highly customized to a particular problem and fails to anticipate the possible need for mapping into different native types in the future or to facilitate same.","What is needed is a solution which addresses, at least in part, these or other shortcomings.","Mapping of a first native data type instance to a second native data type instance is performed in three stages: the first native data type instance is converted into a first programming language and platform independent representation conforming to a first schema capable of defining base and derived data types; the first programming language and platform independent representation is transformed into a second programming language and platform independent representation conforming to a second schema capable of defining base and derived data types; and the second programming language and platform independent representation is converted into the second native data type instance. The programming language and platform independent representations may be event-based extensible Markup Language (XML) representations implemented according to the Simple API for XML (SAX). The transformation may be governed by an extensible Stylesheet Language Transform (XSLT) stylesheet. For each part of a native data type, an XMLReader object representing a stream of serialized XML document parsing events and a ContentHandler object for handling XML document parsing events may be provided. Extraneous start or end document events of aggregated XMLReader objects may be eliminated to create a single XML document parsing event stream for a native instance. The native instances may be represented as Web service messages which may have multiple parts, each part optionally representing a further Web service message.","Advantageously, once a mapping from a first native data type instance to a second native data type instance is established, mapping from either the first or second native data type instance to a third native data type instance may be simplified, involving only a transformation of the programming language and platform independent representation of the first or second native data type into a third programming language and platform independent representation and conversion into the third native data type instance.","A possible application of the invention is in the implementation of a transformation Web service which receives a message having a format compatible with a format of a message associated with a first Web service (e.g. an input or output message of the first Web service) and transforms the message into a format that is compatible with an input message format of a second Web service. The implementation may support transformations involving multiple input and\/or output messages which have been aggregated into a single multi-part input and\/or output message.","In accordance with one aspect of the present invention there is provided a method of mapping a first native data type instance to a second native data type instance, comprising: converting the first native data type instance into a first programming language and platform independent representation conforming to a first schema capable of defining base and derived data types; transforming the first programming language and platform independent representation into a second programming language and platform independent representation conforming to a second schema capable of defining base and derived data types; and further converting the second programming language and platform independent representation into the second native data type instance.","In accordance with another aspect of the present invention there may be provided a computer program product having media including computer programmed instructions for directing a computing device to implement the above method.","In accordance with yet another aspect of the present invention there may be provided a computing device comprising a processor and persistent storage memory in communication with the processor storing processor readable instructions for directing the device to undertake the above method.","In accordance with still another aspect of the present invention there is provided a method of generating a single set of document parsing events from a plurality of sets of document parsing events, comprising: receiving the plurality of sets of document parsing events, the plurality of sets including a plurality of start document events and a plurality of end document events; firing a leading start document event; firing the events of the received plurality of sets of document parsing events that are not start document events or end document events; and firing a trailing end document event.","In accordance with yet another aspect of the present invention there is provided a computer program product having media including computer programmed instructions for directing a computing device to implement a software component representative of a Web service message having one or more parts, the software component comprising: for each of the parts: a first software component adapted to convert the part into a programming language and platform independent representation of the part; and a second software component adapted to convert the programming language and platform independent representation of the part into the part.","Other aspects and features of the present invention will become apparent to those ordinarily skilled in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["10","10","20","30","12","20","30"]},"Data network  is the Internet in the present embodiment. However, in alternative embodiments, data network  may be a private local area network or any other type of data network known to those skilled in the art.","Computing device  hosts a Web service . As known in the art, Web services are modular function descriptions which are discoverable on a network and facilitate remote invocation of the described functions from a web application regardless of the operating system and programming language in which the functions are implemented. Web service  is a customer order tracking service which receives a customer record comprising a customer's name and address and returns a string representative of tracking information for a mail order purchase made by the specified customer. The Web service  includes a Web services Description Language (WSDL) document  as well as business logic  which interact conventionally to provide the Web service  in a manner known to those skilled in the art. Web service  may be referred to as the \u201cexisting\u201d Web service.","The WSDL document  describes the customer order tracking Web service  using WSDL. As known in the art, WSDL is an extensible Markup Language (XML)-based language used to describe the capabilities of a Web service (i.e. the operations it provides), where it resides, and how to invoke it. The WSDL document  includes various elements, e.g., to describe the operations (functions) provided by the Web service and to permit clients to locate and invoke any of the Web service's public operations, as will be familiar to those skilled in the art. Among these elements is a message element which describes the input message to the Web service  as having the following structure:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<message name=\u201cCustomer\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<part name=\u201cname\u201d type=\u201cstring\u201d\/>"]},{"entry":[{},"<part name=\u201caddress\u201d type=\u201cstring\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/message>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The input message is expected to have a name field and an address field, each of which is defined to be a \u201cpart\u201d (i.e. a WSDL part element) of the message in the WSDL document .","The above message object conforms to the WSDL schema. As known to those skilled in the art, the WSDL schema is an XML schema, and as such is capable of defining base data types (e.g. integer, character, float, string etc.) and derived data types (i.e. data types defined using base types, e.g., arrays or records). The WSDL schema is set forth in Appendix A.","Business logic  is the proprietary executable code which actually performs the customer order tracking function of the Web service . Business logic  is coded in a chosen programming language (e.g. Java\u2122) for a particular operating system platform (e.g. Windows\u00ae) executed by the computing device .","The other computing device  shown in  hosts another Web service . Web service  is a customer order tracking service which receives a person record comprising a first name, last name, street name and street number, and returns a string representative of tracking information for a mail order purchase made by the customer represented by the person record. It will be appreciated that the Web service  provides similar functionality to the existing Web service , i.e. it receives an individual's name and address and returns mail order purchase tracking information. However, the format of the received customer information is different for the two Web services. The Web service  may be referred to as the \u201cnew\u201d Web service, as it is understood to have been created after the Web service  was already in existence in the present example.","The new Web service  includes a WSDL document  which describes the new postal code lookup Web service  using WSDL. The WSDL document  includes a message element describing the input message to the Web service  as having four string parts representative of first name, last name, street name and street number, as follows:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<message name=\u201cPerson\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<part name=\u201cfirstName\u201d type=\u201cstring\u201d\/>"]},{"entry":[{},"<part name=\u201clastName\u201d type=\u201cstring\u201d\/>"]},{"entry":[{},"<part name=\u201cstreetName\u201d type=\u201cstring\u201d\/>"]},{"entry":[{},"<part name=\u201cstreetNum\u201d type=\u201cstring\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/message>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This message object also conforms to the WSDL schema of Appendix A.","Computing device  further hosts a transformation Web service . Web service  is a transformation service which receives a message representing a person object and transforms it into a message representing a customer object of substantially equivalent semantic meaning. Transformation Web service  serves as an intermediate service for transforming or mapping objects that are received by the new Web service  into objects having the input format required by the existing Web service . Its purpose is to permit the Web service  to invoke the existing Web service  in furtherance of its own provision of mail order purchase tracking information to its clients.","Transformation Web service  includes a WSDL document  and business logic , which may be loaded from a computer program product having a readable medium, such as a removable optical or magnetic disk .","WSDL document  defines various WSDL elements including a portType element defining a single operation for transforming messages containing person information into messages containing customer information. This operation is referred to as the \u201cperson-to-customer\u201d mapping operation.","WSDL document  further defines a transformer binding to support the transformation operation. The purpose of a transformer binding is to provide a description, within the context of a WSDL Web service definition, of the transformation or mapping that is to be performed by the Web service, which in this case is between the input message format of Web service  and the input message format of Web service . Transformer bindings are an extension of WSDL and are described in more detail in the copending Canadian application no. 2,413,697, filed Dec. 6, 2002, entitled \u201cTransformations As Web Services\u201d, which application is incorporated by reference hereinto.","The transformer binding associates the \u201cperson-to-customer\u201d mapping operation with an extensible Stylesheet Language Transform (XSLT) stylesheet. As known in the art, an XSLT stylesheet provides instructions on transforming one XML object into another XML object. In the present case, the XSLT stylesheet provides instruction on transforming a person object into a customer object. This is achieved in the present example by concatenating the first and last name of the person object to create the name of the customer object and by concatenating the street number and street name of the person object to create the address of the customer object, as shown in the following XSLT stylesheet:",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:transform>"]},{"entry":[{},"<xsl:template match=\u201c\/\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Customer>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:value-of select=\u201cconcat"]},{"entry":[{},"(\/Person\/firstName,"]},{"entry":[{},"&quot; &quot;, \/Person\/lastName)\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/name>"]},{"entry":[{},"<address>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:value-of select=\u201cconcat"]},{"entry":[{},"(\/Person\/streetNum,"]},{"entry":[{},"&quot; &quot;, \/Person\/streetName)\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/address>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Customer>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:template>"]},{"entry":[{},"<\/xsl:transform>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"To illustrate the effect of executing such an XSLT stylesheet, consider an input person object having the following values:",{"@attributes":{"id":"p-0047","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Person>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<firstName>John<\/firstName>"]},{"entry":[{},"<lastName>Smith<\/lastName>"]},{"entry":[{},"<streetName>Avenue<\/streetName>"]},{"entry":[{},"<streetNum>111<\/streetNum>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Person>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The resultant customer object following transformation will be as follows:",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Customer>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<name>John Smith<\/name>"]},{"entry":[{},"<address>111 Avenue<\/address>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/Customer>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Referring again to , business logic  is the executable code which actually performs the transformation function of Web service . It is this business logic that is the focus of the present description.","Business logic  uses an Application Programming Interface (API) known as the Simple API for XML (SAX), which is known to those skilled in the art. Briefly, the SAX API is an event-based XML API which facilitates access to XML documents at run time. Event-based XML APIs utilize an XML parser (referred to as an \u201cXMLReader\u201d in SAX) to report events associated with a parsed XML document, such as the start of the XML document, the start of an XML element, the end of an XML element, etc., to an application through the use of callbacks (i.e. calls to application methods or functions). Applications employ event handlers to respond to the different XML element or attribute events, much in the same way that a graphical user interface event handler handles mouse or keyboard events. SAX is described in the following document: Chase, N., \u201cUnderstanding SAX\u201d, IBM\u00ae DeveloperWorks\u00ae, http:\/\/www.ibm.com\/developerWorks (\u201cTutorials and Training\u201d page), Sep. 5, 2001, which document is incorporated by reference hereinto.","Business logic  further employs known Java\u2122 technology from SUN\u2122 Microsystems for transforming XML objects of one type into XML objects of another type. In particular, business logic  employs javax.xml.transform and javax.xml.transform.sax classes from the Java\u2122 2 Platform SE (referred to herein as the \u201cJXTS classes\u201d). This technology is illustrated in . It should be appreciated that  do not illustrate actual components of the computing system  of , but rather illustrate JXTS classes in the abstract for purposes of briefly describing the technology, which is known to those skilled in the art. The use of this technology in the present embodiment will be described subsequently.","As can be seen in , the known architecture of the javax.xml.transform and javax.xml.transform.sax classes includes three primary components: a JXTS transformer , a SAXSource , and a SAXResult . SAXSource  and SAXResult  are arguments passed into the transform( ) method of the JXTS transformer , as denoted by the vertical arrows of .","JXTS transformer  is an object which orchestrates the transformations of XML objects of one format into XML objects of another format. JXTS transformer  is a product of a SAX Transformer Factory object, which is a known class of objects that receives an XSLT stylesheet describing an XML object transformation and generates therefrom a JXTS transformer, such as JXTS transformer , for performing the described transformation using SAX. JXTS transformer  is the \u201cengine\u201d which performs the XML object transformation in accordance with the original XSLT stylesheet in a manner known to those skilled in the art.","SAXSource  is an object representing the object to be transformed. Aggregated within SAXSource  is an XMLReader  (aggregation being indicated by the nested relationship of these objects in ). XMLReader  essentially converts the source object into a linear series of XML document events upon the invocation of its parse( ) method. Consider the following sample XML document representing an object to be transformed:",{"@attributes":{"id":"p-0056","num":"0055"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<?xml version=\u201c1.0\u201d?>"]},{"entry":[{},"<date>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<month>January<\/month>"]},{"entry":[{},"<day>27<\/day>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/date>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Upon invocation of the parse( ) method of the XMLReader , this document would be converted into the following linear series of document parsing events (the conversion alternatively being referred to as \u201cfiring events\u201d):\n\n","As can be seen above, the XMLReader  generates parsing events corresponding with the contents of the XML document, with an initial start document event and a trailing end document event.","SAXResult  is an object which represents the \u201ctransformed\u201d XML object. Aggregated within SAXResult  is a ContentHandler . ContentHandler  is an event handler which handles XML document parsing events associated with the transformed XML object through the use of callbacks, much in the same way that a graphical user interface event handler handles mouse or keyboard events. Upon the detection of a particular XML document parsing event, a callback from the ContentHandler  will trigger the execution of a particular segment of code (typically, application code) that is intended to be executed when that XML document parsing event is detected (e.g. upon the detection of a \u201cmonth\u201d element, code which determines the season of the year may be executed).","It should be emphasized that ContentHandler  handles events associated with the transformed XML object, not the original XML object. Thus, if the JXTS transformer  has been designed to convert the above date element into a \u201cdayOfYear\u201d element having a value from 1 to 366, the ContentHandler  would be capable of handling \u201cdayOfYear\u201d events but would not be capable of handling (i.e. would ignore or \u201cdrop\u201d) the original date, day and month events. The conversion of the source object's XML parsing events to the target object's XML parsing events is performed by the JXTS transformer  in a manner known to those skilled in the art.",{"@attributes":{"id":"p-0061","num":"0073"},"figref":["FIG. 3","FIG. 2"],"b":["56","60","56","50"]},{"@attributes":{"id":"p-0062","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void parse(InputSource input) throws IOException,"]},{"entry":[{},"SAXException {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"contentHandler.startDocument( );"]},{"entry":[{},"contentHandler.startElement(\u201c\u201d,\u201cdate\u201d,\u201c\u201d, null);"]},{"entry":[{},"contentHandler.characters(\u201c(white space)\u201d);"]},{"entry":[{},"contentHandler.startElement(\u201c\u201d,\u201cday\u201d,\u201c\u201d, null);"]},{"entry":[{},":"]},{"entry":[{},": (calls omitted)"]},{"entry":[{},":"]},{"entry":[{},"contentHandler.endElement(\u201c\u201d,\u201cdate\u201d,\u201c\u201d);"]},{"entry":[{},"contentHandler.endDocument( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ContentHandler  does not however receive the events fired by the XMLReader . Rather, in a technique known to those skilled in the art, the JXTS transformer  transforms these events, in accordance with the XSLT stylesheet from which the JXTS transformer  was created, into corresponding events of the transformed XML object. That is, the JXTS transformer  uses information from the events fired by the XMLReader  to fire transformed XML object events, e.g.:",{"@attributes":{"id":"p-0064","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},"contentHandler.startElement(\u201c\u201d,\u201cdayOfYear\u201d,\u201c\u201d, null);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"contentHandler.characters(\u201c[number","from","1\u2013366]\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"contentHandler.endElement(\u201c\u201d,\u201cdayOfYear\u201d,\u201c\u201d);"]},{"entry":[{},":"]},{"entry":[{},"(etc.)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The transformation performed by JXTS transformer  is represented by the dashed arrow  in .",{"@attributes":{"id":"p-0066","num":"0078"},"figref":["FIG. 4","FIG. 1"],"b":["46","46","64","42","64"]},{"@attributes":{"id":"p-0067","num":"0079"},"figref":"FIG. 5","b":["64","70","76","78","75","79"]},"Operation object  is an instance of a concrete WSIF class for the \u201cperson-to-customer\u201d transformation operation described in WSDL document . Operation object  contains a JXTS transformer  which is the \u201cengine\u201d for performing the transformation of a message object containing person information into a message object containing customer information (this transformation being represented in  by the arrow ). JXTS transformer  is the same type of JXTS transformer as shown in  (JXTS transformer ). In this case, the JXTS transformer  is created from the XSLT stylesheet which was provided in the transformer binding of the WSDL document  () of the transformation Web service .","Message object  is an instance of a concrete WSIF class for the person message described in WSDL document  (). Message object  may for example be a Java\u2122 language implementation. The message  is capable of containing person data, including first name, last name, street name and street number information, with each of these four types of information being represented as a single message part.","Message object  is an instance of a concrete WSIF class for the customer message described in WSDL document  (). Message object  may also be a Java\u2122 language implementation. The message  is capable of containing customer data including name and address information, with each of these two types of information being represented as a message part.","Person object  is a native data type instance containing person data including first name, last name, street name and street number information. It is this person object  which is represented by the message object . Person object  may for example be a Java\u2122 language implementation, and may be represented by the interface:",{"@attributes":{"id":"p-0072","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface Person {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public String getFirstName( );"]},{"entry":[{},"public String getLastName( );"]},{"entry":[{},"public String getStreetName( );"]},{"entry":[{},"public String getStreetNum( );"]},{"entry":[{},"public void setFirstName(String value);"]},{"entry":[{},"public void setLastName(String value);"]},{"entry":[{},"public void setStreetName(String value);"]},{"entry":[{},"public void setStreetNum(String value);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Customer object  is a different native data type instance containing customer data including name and address information. It is this customer object  which is represented by the message object . Customer object  may also be a Java\u2122 language implementation, and may be represented by the interface:",{"@attributes":{"id":"p-0074","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface Customer {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public String getName( );"]},{"entry":[{},"public String getAddress( );"]},{"entry":[{},"public void setName(String value);"]},{"entry":[{},"public void setAddress(String value);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},{"@attributes":{"id":"p-0075","num":"0087"},"figref":["FIG. 6","FIG. 5"],"b":["76","82","92","102","112"]},"Message object  includes four subordinate part objects , ,  and . Each of these part objects implements one of the message parts described in WSDL document  (). In particular, part  implements the firstName message part and contains first name data; part  implements the lastName message part and contains last name data; part  implements the streetName message part and contains street name data; and part  implements the streetNum message part and contains street number data. The contained part objects , , , and  are implemented in the Java\u2122 programming language in the present embodiment.","Each of the parts , , , and  has an associated FormatHandler , , , and  respectively. A FormatHandler is an object capable of transforming an object of one format into an object of another format. FormatHandlers are described in more detail in the aforementioned Canadian application no. 2,413,697, entitled \u201cTransformations as Web Services\u201d filed on Dec. 6, 2002, which application is incorporated by reference hereinto.","In the present embodiment, the FormatHandlers , , , and  are used during the conversion of the native person object  (), as represented by message object , into or from a corresponding programming language and platform independent representation, which in this case is an event-based XML representation implemented according to the SAX API, as will be described.","The FormatHandler , which is associated with part object , is capable of converting the data of part object  into and from corresponding XML document parsing events, as represented in  by way of double-headed arrow . For example, if the part object  stores first name data with the value \u201cJohn\u201d (e.g. as a Java\u2122 string), the FormatHandler  is capable of generating corresponding events as follows:",{"@attributes":{"id":"p-0080","num":"0092"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"start document"]},{"entry":[{},"start element: firstName"]},{"entry":[{},"characters: John"]},{"entry":[{},"end element: firstName"]},{"entry":[{},"end document"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"These XML document parsing events are illustrated as a dotted arrow emanating from XMLReader . To achieve this goal, the FormatHandler  aggregates a SAXSource object  containing an XMLReader . The XMLReader  has a parse( ) method which, when invoked, triggers the firing of events illustrated above.","To convert XML document parsing events comprising a programming language and platform independent representation of first name person data into the corresponding native part object , the ContentHandler  receives the events shown above and employs FormatHandler business logic to convert them to the first name part object . These received XML document parsing events are illustrated as a dotted arrow into the ContentHandler .","Each of the remaining part objects ,  and  similarly has an associated FormatHandler ,  and  which operates analogously to the FormatHandler  to convert its native last name, street name, and street number data into and from a corresponding programming language and platform independent representation, as represented by double-headed arrows ,  and , respectively.","As will become apparent, during the mapping of a person object  to a corresponding customer object  (), the SAXSource objects , ,  and  and associated XMLReader objects , , , and  are utilized. The ContentHandler objects , ,  and , however, are not utilized; these are present for versatility, for possible use in the event that it is later desired to map a native data type instance to the person object .",{"@attributes":{"id":"p-0085","num":"0097"},"figref":["FIG. 7","FIG. 5","FIG. 6"],"b":["78","132","142","78","132","142","78","130","140","132","142","131","141"]},"As will become apparent, during the mapping of a person object  to a corresponding customer object , the ContentHandler objects  and  are utilized. The SAXSource objects  and  and associated XMLReader objects  and , however, are not utilized; these are present for versatility, for possible use in the event that it later desired to map the customer object  to another native data type instance.",{"@attributes":{"id":"p-0087","num":"0099"},"figref":["FIG. 8","FIG. 6","FIG. 7"],"b":["72","160","170","177","180"]},"The JXTS transformer  is the same JXTS transformer as was shown in . It is the \u201cengine\u201d which drives the transformation of a message object  containing person information into a message object  containing customer information.","Aggregate SAXSource  is a SAXSource object comprising an aggregation of all of the SAXSource objects , ,  and  of the message object  shown in . The Aggregate SAXSource  is created by the message object , which instantiates the Aggregate SAXSource  as a list to which the SAXSource objects , ,  and  are added. The SAXSource objects , ,  and  are returned by a getSource( ) method of FormatHandlers , ,  and  respectively. The purpose of the getSource( ) method is to return code capable of firing events which represent the object in question (here, different parts of the message object ).","Aggregate XMLReader  has a parse( ) method which sequentially calls the parse( ) method of all its aggregated XMLReaders , ,  and . The Aggregate XMLReader also includes a Filter ContentHandler , which is described below.","Aggregate SAXResult  is a SAXResult object which contains Aggregate ContentHandler .","Aggregate ContentHandler  is a ContentHandler object comprising an aggregation of the ContentHandler objects  and . The ContentHandler objects  and  are returned by a getContentHandler( ) method of FormatHandlers  and  respectively. The purpose of the getContentHandler( ) method is to return code capable of handling events which represent the object in question (here, different parts of the message object ). Aggregate ContentHandler  delegates any received events to each of the aggregated ContentHandlers  and . The subordinate ContentHandlers  and  respond to different sets of recognized events and drop unrecognized events.","The Aggregate SAXSource  and Aggregate SAXResult  are arguments passed into the JXTS transformer , as denoted by the vertical arrows of .",{"@attributes":{"id":"p-0094","num":"0106"},"figref":["FIG. 9","FIG. 8"],"b":["170","180"]},"As may be seen in , the Filter ContentHandler  of Aggregate XMLReader  includes a ContentHandler . This ContentHandler  is supplied by the JXTS transformer . The purpose of the Filter ContentHandler  is to address the problem of redundant or extraneous start document and end document XML document parsing events generated by the XMLReaders , ,  and . The Filter ContentHandler  effectively combines the four XML document parsing event streams generated by the XMLReader objects , ,  and  (illustrated as dotted arrows , ,  and  respectively) into a single XML document parsing event stream (dotted arrow ) and provides this single event stream to the ContentHandler , as will be described.","Operation for mapping from the person object  to the customer object  () occurs in three stages as shown in .","In a first stage of operation (\u201cstage 1\u201d), the person object  (a native data type instance) is converted into XML document parsing events (a programming language and platform independent representation). The first stage occurs two phases in the present embodiment.","In the first phase of stage 1, the person object  is represented as a WSDL-compliant WSIF message . In the present example, code is executed to convert the person object , which may have been instantiated upon invocation of the transformation Web service  (e.g. through conversion of received message following the binding specified in the WSDL document , e.g., the Simple Object Access Protocol (SOAP), into a Java\u2122 bean), into the WSIF message object , e.g.:",{"@attributes":{"id":"p-0099","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Message personMsg = new WSIFDefaultMessage( );"]},{"entry":[{},"personMsg.setObjectPart(\u201cfirstName\u201d,"]},{"entry":[{},"person.getFirstName( ));"]},{"entry":[{},"personMsg.setObjectPart(\u201clastName\u201d, person.getLastName( ));"]},{"entry":[{},"personMsg.setObjectPart(\u201cstreetName\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"person.getStreetName( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"personMsg.setObjectPart(\u201cstreetNum\u201d,"]},{"entry":[{},"person.getStreetNum( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As will be appreciated, the \u201csetObjectPart\u201d method of the message object  sets the specified part to a specified value.","In the second phase of stage 1, the FormatHandlers , ,  and  associated with the parts , ,  and  of the message  () (which parts were populated in the first phase of stage 1) are each invoked to convert the parts , ,  and  into the corresponding SAXSource objects , ,  and , respectively. This is shown as already having occurred in .","The parse( ) method of the Aggregate XMLReader  invokes each of the parse( ) methods of the subordinate XMLReaders , ,  and  in sequence. Invocation of the subordinate XMLReaders' parse( ) methods causes the firing of a set of XML document parsing events corresponding to each message part. These events are illustrated as dotted arrows , , , and  in .","As described above with reference to , the firing of XML document parsing events is actually achieved by way of a series of calls to ContentHandler methods. In the present case, the ContentHandler that is called is the Filter ContentHandler . For example, in the case of the first part  of message  (), the events  () may be fired as follows:",{"@attributes":{"id":"p-0104","num":"0116"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"filterContentHandler.startDocument( );"]},{"entry":[{},"filterContentHandler.startElement(\u201c\u201d,\u201cfirstName\u201d,\u201c\u201d, null);"]},{"entry":[{},"filterContentHandler.characters(\u201cJohn\u201d);"]},{"entry":[{},"filterContentHandler.endElement(\u201c\u201d,\u201dfirstName\u201d,\u201c\u201d);"]},{"entry":[{},"filterContentHandler.endDocument( );"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Each of the other part objects ,  and  () similarly fires a set of XML document parsing events ,  and  (). Each set of events , ,  and  begins with a start document event and ends with an end document event.","In response to these method invocations, the Filter ContentHandler  combines the four XML document parsing event streams , ,  and  respectively into a single XML document parsing event stream . This is achieved by way of program logic within the Filter ContentHandler  which delegates only one leading start document event and one trailing end document event to the ContentHandler  supplied by the transformer , which eliminates (i.e. avoids delegation of) any extraneous start document events and extraneous stop document events fired by the XMLReaders , ,  and . The purpose of this processing is to avoid an interpretation of XML document completion by the ContentHandler , as might otherwise occur in view of the standard processing of end document events by ContentHandler objects (i.e. to consider the document as being complete). Non start document events and non end document events are delegated unchanged to the ContentHandler  by the Filter ContentHandler .","At this point, the message  has been converted to a programming language and platform independent representation, which here is set of XML document parsing events. The first stage of operation is thus concluded.","In the second stage of operation, in a manner analogous to that described with reference to , the JXTS transformer  transforms the events  into corresponding events of the message object , in accordance with the XSLT stylesheet from which the JXTS transformer  was created (which XSLT stylesheet originated from the transformer binding of WSDL document  of ).","That is, the JXTS transformer  uses information from the events fired by the XMLReaders , ,  and  to fire transformed XML object events, e.g.,",{"@attributes":{"id":"p-0110","num":"0122"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},":"]},{"entry":[{},"aggregateContentHandler.startElement(\u201c\u201d,\u201cname\u201d,\u201c\u201d, null);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"aggregateContentHandler.characters(\u201cJohn","Smith\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aggregateContentHandler.endElement(\u201c\u201d,\u201cname\u201d,\u201c\u201d);"]},{"entry":[{},"aggregateContentHandler.startElement(\u201c\u201d,\u201caddress\u201d,\u201c\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"null);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"aggregateContentHandler.characters(\u201c111","Avenue\u201d);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"aggregateContentHandler.endElement(\u201c\u201d,\u201caddress\u201d,\u201c\u201d);"]},{"entry":[{},":"]},{"entry":[{},"(etc.)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The transformation performed by JXTS transformer  is represented by the dashed arrow  in .","In turn, the Aggregate ContentHandler object  delegates unchanged each XML document parsing event received from the JXTS transformer  to subordinate ContentHandlers  and  (illustrated by way of the dotted arrows  and  in ). That is, each of the subordinate ContentHandlers  and  receives every event that is received by the Aggregate ContentHandler , processing the events that are relevant to it and dropping unrecognized events. In the present embodiment, the ContentHandler  processes name events and drops address events while the ContentHandler  conversely drops name events and processes address events. This concludes the second stage of operation.","In the third and final stage of operation (\u201cstage 3\u201d), XML document parsing events are converted into the customer object  (). Stage 3 occurs in two phases in the present embodiment which are essentially the converse of the first and second phases of the stage 1.","In the first phase of stage 3, after the ContentHandlers  and  have received the delegated event streams  and  respectively, operation of the FormatHandlers  and  associated with these ContentHandlers is triggered to convert the XML parsing events into native parts  and , respectively, of WSIF message  ().","In the second phase of stage 3, the customer object  is populated from the WSIF message , e.g.:",{"@attributes":{"id":"p-0116","num":"0128"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"customer.setName(CustomerMsg.getObjectPart(\u201cname\u201d)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"toString( ));"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"customer.setAddress(CustomerMsg.getObjectPart(\u201caddress\u201d)."]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"toString( ));"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cgetObjectPart\u201d method of the message object  retrieves the value of the specified part. The third stage of operation is thus concluded.","With the person object  now having been mapped to customer object , operation is complete.","Advantageously, the present embodiment may be used to support transformations involving multiple input and\/or output messages which have been aggregated into a single multi-part input and\/or output Web service message. This is because the Web service message is implemented as an object having subordinate parts even when these subordinate parts themselves represent messages.","The versatility of the present embodiment is illustrated in  which illustrates various software components involved in a reverse mapping from the customer object  to the person object (). Five components are illustrated: a JXTS transformer ; an Aggregate SAXSource ; an Aggregate XMLReader ; an Aggregate SAXResult ; and an Aggregate ContentHandler .","The JXTS transformer  is analogous to the JXTS transformer of , except that it drives a transformation of the message object  containing customer information into a message object  containing person information (rather than a transformation in the reverse direction). JXTS transformer  is be created from an XSLT stylesheet which describes the \u201ccustomer-to-person\u201d transformation.","Aggregate SAXSource  is a SAXSource object comprising an aggregation of the existing SAXSource objects  and  of the message object  shown in . The Aggregate SAXSource  is created by the message object , which instantiates the Aggregate SAXSource  as a list to which the SAXSource objects  and  are added.","Aggregate XMLReader  has a parse( ) method which sequentially calls the parse( ) method of all its aggregated XMLReaders  and . The Aggregate XMLReader also includes a Filter ContentHandler  which addresses the problem of redundant or extraneous start document and end document XML document parsing events generated by the XMLReaders  and .","Aggregate SAXResult  is a SAXResult object which contains Aggregate ContentHandler .","Aggregate ContentHandler  is a ContentHandler object comprising an aggregation of the ContentHandler objects , ,  and  of the message object  of . The Aggregate ContentHandler  is created by the message object , which instantiates the Aggregate ContentHandler  as a list to which the ContentHandlers , ,  and  are added. Aggregate ContentHandler  delegates any received events to each of the aggregated ContentHandlers , ,  and .","It will be appreciated that, in this reverse mapping of a customer object  to a corresponding person object , the existing ContentHandler objects , ,  and  and existing SAXSource objects  and  (and associated XMLReader objects  and ) are now utilized. However, the SAXSource objects , ,  and  () and ContentHandler objects  and  () are no longer utilized.","Implementation of the reverse mapping thus largely consists of creating a new JXTS transformer .","Advantageously, if it becomes necessary to map either person object  or customer object  (i.e. either of the first or second native data instances) to a third native data instance, mapping may be effected simply through provision of a suitable JXTS transformer generated from a developed XSLT stylesheet which describes the desired mapping and of (a) suitable FormatHandler object(s) corresponding to the part(s) of a third WSIF message object analogous to message object  or .","For example, if it is desired to map the person object  to a Java\u2122 employee object  () (as may be represented by message object , which has parts  and  containing employee name and street information, respectively, analogously to the representation of person and customer objects  and  by messages  and  (FIG. )), conversion may be effected through provision of a suitable JXTS transformer (not shown) generated from a developed XSLT stylesheet which describes the transformation of a person object to an employee object, and through provision of FormatHandler objects  and  corresponding to parts  and  respectively of message object . The creation of FormatHandler objects  and  would entail the implementation of getSource( ) and getContentHandler( ) methods similar to those previously described in respect of the above embodiment which retrieve SAXSource and ContentHandler objects appropriate for the parts of the employee message . Advantageously, message object  and its associated FormatHandlers , ,  and  () may be reused.","In an alternative implementation of the above-described embodiment wherein a person object  () is mapped to the customer object  (), it is assumed that the message element of WSDL document  () has the following alternative structure:",{"@attributes":{"id":"p-0131","num":"0143"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<message name=\u201cCustomerMessage\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<part name=\u201cCustomer\u201d type=\u201cxsd:Customer\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/message>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The \u201cCustomer\u201d part element of the message object conforms to the following schema:",{"@attributes":{"id":"p-0133","num":"0145"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<complexType name=\u201cCustomer\u201d>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<all>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<element name=\u201cname\u201d type=\u201cstring\u201d\/>"]},{"entry":[{},"<element name=\u201caddress\u201d type=\u201cstring\u201d\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/all>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/complexType>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this case, a modified message object \u2032 (not illustrated) will only have one FormatHandler. This FormatHandler will be capable of converting the data of the \u201cCustomer\u201d part element into and from corresponding XML document parsing events. Moreover, a modified version of JXTS Transformer  (referred to as JXTS transformer \u2032) is employed in place of JXTS Transformer  of . JXTS Transformer \u2032 is created from the following XSLT stylesheet which is provided in the transformer binding of an alternative version of WSDL document  ():",{"@attributes":{"id":"p-0135","num":"0147"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<xsl:transform>"]},{"entry":[{},"<xsl:template match=\u201c\/\u201d>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CustomerMessage>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<Customer>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u201cconcat"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\/Person\/firstName,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"&quot; &quot;, \/Person\/lastName)\u201d\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/name>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<address>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<xsl:value-of select=\u201cconcat"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(\/Person\/streetNum,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"&quot; &quot;, \/Person\/streetName)\u201d\/>"]},{"entry":[{},"<\/address>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/Customer>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/CustomerMessage>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/xsl:template>"]},{"entry":[{},"<\/xsl:transform>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Operation for mapping from person object  to customer object  in this embodiment is much the same as the operation described above for this mapping. One difference is that the single FormatHandler associated with the message object \u2032 will be responsible for converting the single part of that message object into XML document parsing events (rather than multiple FormatHandlers being used, as described previously).","Thus, this alternative embodiment illustrates an alternative approach to mapping between the same native data type instances  and  ().","As will be appreciated by those skilled in the art, modifications to the above-described embodiment can be made without departing from the essence of the invention. For example, although the XML programming language and platform independent representation of the present embodiment is implemented according to the SAX XML event-based API, other XML representations may be used. These representations need not necessarily be implemented according to event-based XML APIs. They may for example be implemented according to tree-based XML APIs, such as the World Wide Web Consortium's (W3C) Document Object Model (DOM) XML API.","Further, although the present embodiment employs XML as its programming language and platform independent representation, other such representations, such as Standard Generalized Markup Language, may be employed.","As well, although the programming language and platform independent representations of the first and second native data type instances in the above embodiments both conform to the same schema (i.e. the WSDL schema of Appendix A), it will be appreciated that the programming language and platform independent representations of the first and second native data type instances may conform to different schemas in alternative embodiments. Conformity to different schemas may for example be implemented through use of a different XSLT stylesheet to create the JXTS transformers  or .","Further, although the described embodiment illustrates a mapping between native data type instances that are substantially equivalent from a semantic standpoint, it is understood that semantic equivalence of the source native data type instance and output native data type instance is not required.","Also, in the case of transformation Web service implementations, it will be appreciated that constructs other than a transformer binding may be used to describe transformations. These constructs may or may not include XSLT stylesheets.","It is understood that \u201cconversion\u201d or \u201cconverting\u201d between a programming language and platform independent representation and a native data type instance as described herein does not necessarily imply or require the \u201csource\u201d form to be lost or destroyed when the \u201ctarget\u201d form is created. For example, when converting a native data type instance to a programming language and platform independent representation, it is not necessarily implied or required for the native data type instance to be lost or destroyed, although it could be lost or destroyed.","Finally, it is not necessary to adhere to the WSIF framework when an embodiment calls for the concrete implementation of a Web service. Other Web service implementations may be employed.","Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims. \n\n\n\n\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures which illustrate an example embodiment of this invention:",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 7","FIG. 5"]},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 8","FIG. 6","FIG. 7"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 9","FIG. 6","FIG. 7"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 10","FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
