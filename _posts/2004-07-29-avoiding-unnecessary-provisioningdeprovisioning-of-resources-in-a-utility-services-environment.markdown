---
title: Avoiding unnecessary provisioning/deprovisioning of resources in a utility services environment
abstract: Provided is a method for the deployment of resources in a utility services environment, in which various resources are allocated and deallocated according to a calculated need for those resources. Provides is a “weighted” period of time, or “window,” corresponding to requests for a particular resource. A configuration file stores information on each resource in the utility services environment and a weighted period of time value corresponding to each resource. A list of provisioning/deprovisioning, or “resource.” actions corresponding to each resource is maintained. Provisioning/deprovisioning actions are correlated with times of execution. When a request for a provisioning/deprovisioning action is received, the list of actions and the configuration file are examined to determine whether or not the requested action has been executed with respect to the particular action within the weighted period of time. If so, the request is discarded without any action taken. If not, the action is executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645540&OS=08645540&RS=08645540
owner: International Business Machines Corporation
number: 08645540
owner_city: Armonk
owner_country: US
publication_date: 20040729
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE FIGURES"],"p":["The present invention relates generally to management of a utility services environment and, more specifically, to a method for the provisioning and deprovisioning of resources based upon non-anomalistic conditions.","International Business Machines Corp. (IBM) of Armonk, N.Y. has frequently implemented new paradigms in business computing. Currently IBM is deploying products and services to support the \u201cOn Demand Business.\u201d An \u201cOn Demand Business\u201d is an enterprise whose business processes are integrated end-to-end across the company and with key partners, suppliers and customers and which can respond with speed to any customer demand, market opportunity or external threat. The information technology (IT) infrastructure necessary to support the On Demand Business must be flexible and variable, i.e. able to meet fluctuating demand levels. One technique employed to provide a flexible and variable IT infrastructure is a utility computing service. Utility computing is information technology (IT) services based upon \u201cpower by the hour\u201d in which a client pays only for the level of computing services actually used. In this paradigm, a resource may be allocated or deallocated based upon a customer's actual need for the resource.","Customers of a utility computing infrastructure transform their IT environment into a variable resource and pay only for the actual computing services received. The utility management infrastructure (UMI) provides the tools and services to effectively manage the utility computing environment. Like electricity, water and gas, IT is treated as another utility. Thus, by eliminating the responsibility of building and maintaining IT operations, providing necessary education and training to administrators, and having to comply with applicable regulations, the customer can focus on their core business while enjoying variable pricing, automated processes and the invaluable resilience and responsiveness of a shared infrastructure provided by the utility provider.","Customers transitioning from a dedicated IT environment to a utility computing environment may be concerned that needed resources are available and that the resources that are available are actually being utilized. Often, a customer is able to modify computing capacity and allocate and\/or de-allocate computing resources. Although this approach provides customers with a dynamic pool of needed resources, the customer must be aware of the specific demand for a particular application in order to effectively manage the allocation\/deallocation process.","Other programs provide for an automatic allocation\/deallocation of resources based upon the use of the resources. However, current systems do not provide a way to ensure that resources are allocated based upon actual need rather than merely an anomalous spike in demand. Further, current systems that automatically deallocate resources may base such action upon a temporary drop in usage. In this case, a particular resource may be unavailable when usage returns to normal levels.","Provided is a method for the deployment of resources in a utility services environment, in which various resources are allocated and deallocated according to a calculated need for those resources. Temporary fluctuations in demand for a particular resource may skew demand for that particular resource. For example, if the need for a resource is measured at the same time the resource is being allocated, or \u201cprovisioned,\u201d additional provisioning may be initiated even though the needed resources have been, or are in the process of being, provided. In the alternative, a drop in usage of a resource may initiate a request for deallocation, or \u201cdeprovisioning,\u201d even though the resource has recently been deprovisioned. The claimed subject matter enables the utility services environment to stabilize prior to the execution of a decision regarding the allocation or deallocation of a resource.","Basically, the current invention provides a \u201cweighted\u201d period of time corresponding to requests for a particular resource. Provisioning requests are persisted for variable lengths of time so that metrics corresponding to that resource are able to stabilize. This stabilization enables more intelligent decisions to be made concerning the allocation and deallocation of resources in the utility computing environment.","The weighted period of time is determined by best practices, or more specifically, a length of time corresponding to the time necessary to provision or deprovision the resource and to stabilize metrics collected for that resource. A configuration file stores information on each resource in the utility services environment and a weighted period of time value corresponding to each resource. A list of provisioning\/deprovisioning actions corresponding to each resource is maintained. Each provisioning\/deprovisioning action is correlated with a time of execution.","When a request for a provisioning\/deprovisioning action is received for a particular action, the list of actions and the configuration file are examined to determine whether or not the requested action has been executed with respect to the particular action within the weighted period of time. If so, the request is discarded without any action taken. If not, the action is executed and a corresponding entry is added to the list of actions. Periodically, actions in the list that fall outside the weighted period of time are removed form the list.","Although described with particular reference to a UMI environment, the claimed subject matter can be implemented in any information technology (IT) system in which the automatic allocation and deallocation of resources is desirable. Those with skill in the computing arts will recognize that the disclosed embodiments have relevance to a wide variety of computing environments in addition to those described below. In addition, the methods of the disclosed invention can be implemented in software, hardware, or a combination of software and hardware. The hardware portion can be implemented using specialized logic; the software portion can be stored in a memory and executed by a suitable instruction execution system such as a microprocessor, personal computer (PC) or mainframe.","In the context of this document, a \u201cmemory\u201d or \u201crecording medium\u201d can be any means that contains, stores, communicates, propagates, or transports the program author data for use by or in conjunction with an instruction execution system, apparatus or device. Memory and recording medium can be, but are not limited to, an electronic, magnetic, optical, electromagnetic, infrared or semiconductor system, apparatus or device. Memory and recording medium also include, but are not limited to, for example the following a portable computer diskette, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or flash memory), and a portable compact disk read-only memory or another suitable medium upon which a program and\/or data may be stored.","Turning now to the figures,  is a block diagram of an exemplary Universal Management Infrastructure (UMI) architecture  incorporating the claimed subject matter. An enterprise  services a number of customers, such as a customer_ , a customer_ , a customer_ , a customer_  and a customer_ . Enterprise  also has relations with a number of suppliers, a supplier_ , a supplier_  and a supplier_ . For the sake of this example, the particular type of business engaged in by enterprise  is not specified because UMI architecture , as well as the claimed subject, matter can be applied to practically any type of business that employs an information technology (IT) infrastructure. In fact, UMI architecture  can even apply to a hypothetical business that does not have customers and\/or suppliers.","In this example, suppliers - provide parts and services  to enterprise  and customers - purchase products, or offerings, . Enterprise  includes a business process_ , a business process_  and a business process_  to enable enterprise  to convert parts and services  into offerings . Examples of types of business processes include, but are not limited to, a manufacturing supply system, an accounting system, a billing system, a customer management system and a payroll system. The specific number of customers -, suppliers - and business processes - are used for the sake of an example only; the claimed subject matter applies equally well to small, medium and large enterprises with any particular number of such relationships.","Enterprise  incorporates a virtualized infrastructure, or an \u201cOn-Demand services (ODS) Framework,\u201d , which, in this example, is an e-business on demand (EBOD) utility computing environment designed by International Business Machines Corp. (IBM), of Armonk, N.Y. The IBM utility computing environment is designed for business customers and delivers, for example, accounting, human resource, and customer relationship management applications for a usage-based charge.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["129","167","167","129","165","165","167","129","165"]},"Also included in  is a business systems block , which represent any or all particular business process - () that may be required to provide access to one or more of the various ODS services offered by enterprise  (). Business systems  is coupled to ODS framework  via an order enable block , which can represent software, hardware or human operators for communicating information from business systems to ODS framework .","ODS framework  includes an integration hub  for coordinating the interactions among business system , ODS services  and ODS framework . Integration hub  includes a workflow component  and an integration middleware component . Workflow component  manages communication and requests from business systems  and integration middleware component  communication and requests from ODS block . While workflow component  communicates primarily with integration middleware component , integration middle ware component  is responsible for handling communication and requests from both workflow component  and ODS services block  to and from a UMI base services  to ODS component .","UMI base services  include a portal , which is a communications interface between UMI base services , the rest of ODS framework  and any entity, such as software from another vendor, that is external to ODS framework  and requires a direct communication link to UMI base services . Those with skill in the computing arts will realize there are a number of methods of implementing portal , including but not limited to, APIs and secure sockets. Additional components of UMI base services  include a help desk component , a service level agreement (SLA) component , a provisioning component , a reporting component , a Monitoring and Management component , a billing component , a metering component  and a test center component .","Help desk component  may be either an automated system such as a typical telephone response system or a fully or partially human staffed system in which help desk component  serves to automate communication and data retrieval tasks for employees that work at a corresponding help desk department of enterprise .","Service level agreement (SLA) management component  monitors and controls the interactions between OSD framework  and who or whatever interacts with ODS framework , such as customers - () and\/or suppliers - (). A SLA is typically a contractual agreement between the provider of ODS framework  and a particular customer or supplier concerning the amount of resources of ODS framework  to which the customer or supplier is entitled. In other words, SLA management component  determines whether or not a particular customer or supplier is meeting, exceeding or otherwise complying with their specific SLA and then takes appropriate actions based upon that information. Data concerning SLAs is stored in a data store .","Provisioning engine  provides for the automation of tasks and the distribution of resources related to the setup and modification of accounts within ODS framework . Specifically, provisioning engine  enables the creation, modification and removal of resources such as servers, data storage, network resources and firewalls from ODS framework . In addition, provisioning engine  facilitates the distribution of software within the ODS framework .","Reporting component  is responsible for the production of reports on any or all of enterprise , business processes ,  and , a corresponding customer - or supplier - and ODS framework . Reports may include, but are not limited to, production reports, billing reports, inventory reports, customer reports, performance reports and SLA compliance reports. Pre-defined report templates and generated reports are stored in data store .","Monitoring and Management (M&M) component  is responsible for the collection of information on and provides the interface for the management of OSD framework  and the other UMI base services . Collected information is stored in data store  and is made available, either directly or through data store , to help desk , reporting component  and a billing component , explained below.","Billing component  produces invoicing and billing information for customers and suppliers for their respective use of ODS framework , based primarily on information from SLA management component , and a metering component , described below.","Metering component  keeps track of customers - and suppliers - use of ODS framework , as well as any necessary internal information relative to the operation of ODS framework . Information collected by metering component  is stored in data store  and available for use by help desk component , reporting component , M&M component  and billing component .","Finally, test center component  controls such activities as customer profiling, test data generation, and test storage and scheduling for ODS framework . Test center component  is explained in more detail below in conjunction with .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 2","FIG. 2","FIG. 2"],"b":["129","181","2","154","158","153","154","158","181","157","155"]},"Metering component , which as explained above in conjunction with , keeps track of customers - and suppliers - use of ODS framework , also records requests for resource actions such as the provisioning and deprovisioning of resources. Information relating to provisioning and deprovisioning and other resource actions is stored in a Window Configuration (WC) data  of data store . The makeup of memory associated with WC data  is explained in more detail below in conjunction with .","Provisioning engine , which as explained above in conjunction with  provides for the automation of tasks and the distribution of resources related to the setup and modification of accounts within ODS framework , also determines whether or not a particular request for a provisioning or deprovisioning of a particular resource is warranted according to the parameters of the claimed subject matter. Examples of impacted resources include, but are not limited to, servers, data storage, network resources and firewalls. An Allocation\/Deallocation process  is explained in more detail below in conjunction with .","SLA Management component  is included in Resource Allocation\/Deallocation block  because any allocation and deallocation of a particular resource may be impacted by the parameters of a specific customer's service level agreement. In other word, even though a particular service is needed by a customer according to the disclosed method, the customer's SLA may preclude the allocation of that resource.","In addition to containing WC data , data store  also includes Resource Profile (RP) data  and SLA data . RP data  includes information concerning clients' resources allotments in ODS framework  as well as any other available resources. Examples of allocated resources might include, but are not limited to, processing cycles, number of required servers, network bandwidth and data storage requirements. Each of the allocated resources have parameters associated with them, such as a base resource allotment, a maximum resource allotment, a resource cost and rules for dynamically reallocating the resources based upon the client's workload demand. An example of an available resource is the types of available processors. SLA Data  includes information concerning customers' SLAs, which is employed by SLA Management component  for, among other things, to determine whether or not a particular customer can allocate additional resources.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 4","b":["200","200","201","200","203","200","205","200"]},"Attribute section  includes a \u201crwoID\u201d attribute , a \u201cresourceName\u201d attribute , a \u201ccurrentInstantiations\u201d attribute , a \u201cprovisionRequests\u201d attribute , a \u201cdeprovisionRequests\u201d attribute  and a \u201cwindow\u201d attribute . Instantiations of object  are stored in WC data  () of data store  ().","RwoID attribute  is a variable of type ResourceWindowObjectID that contains a reference to the particular instance of object . Each instance of object  has a unique value for attribute  that allows each instance to be uniquely identified. ResourceName attribute  is a variable of type String that stores the name of a resource associated with a particular instantiation of object . Both rwoID attribute  and ResourceName attribute  can be employed by process  to locate information concerning a particular resource prior to the allocation or deallocation of that resource.","Currentlnstantiations attribute  is a variable of type Integer that stores the number of instantiations of the corresponding resource. The number of instantiation of a particular resource may influence whether or not the corresponding resource is provisioned or deprovisioned, irrespective of the result of the calculations executed in accordance with the claimed subject matter. For example, if the resource is a disk drive, an entry in RP data  () indicates that there must be at least one provisioned disk drive, and the value of currentInstantiations attribute  is equal to \u20181\u2019, then a request to deprovision the resource is denied. If the number of instantiations is equal to \u20185\u2019 and SLA data  () indicates that the customer is only contractually entitled to five (5) disk drives, then a provisioning request is denied. However, other components of ODS framework , such as Reporting component , may notify a user of the denial and suggest a modification of a SLA may be in order.","ProvisionRequests attribute  is a variable of type Vector that stores information corresponding to the dates and times that the corresponding resource was requested provisioned, as well as information regarding whether or not the request was executed or ignored. In other words, attribute  contains a historical record of provisioning events with respect to the resource identified by resourceName attribute . Similarly, deprovisionRequests attribute  is a variable of type Vector that stores information corresponding to the dates and times that the corresponding resource was deprovisioned. In other words, attribute  contains a historical record of deprovisioning events with respect to the resource identified by resourceName attribute .","Window attribute  is a variable of type Interval that stores a calculated interval of time employed in the calculation of whether or not a particular provisioning or deprovisioning event should be executed. Attribute  is referred to throughout the specification as a Provisioning\/Deprovisioning (D\/P) window. The calculation of a specific value for attribute  is explained in more detail below in conjunction with . The use of attribute  is explained more fully below in conjunction with . In an alternative embodiment, a two or more values are calculated and stored, for example, one corresponding to a provisioning window and another to a deprovisioning window.","Method section  of object  includes an \u201cupdateProvisionRequests\u201d method , an \u201cupdateDeprovisionRequests\u201d method , a \u201cgetwindow\u201d method , a \u201csetWindow\u201d method  and an \u201cupdateRWO\u201d method .","UpdateProvisionRequests method  is called when a request to provision a resource is initiated or when provisionRequests attribute  is periodically purged of older entries. A request to provision a resource or update provisionRequests attribute  may be initiated either programmatically or in response to an explicit request by a user. When a provisioning event occurs, method  is called with two (2) arguments: \u201crwo,\u201d a ResourceWindowObjectID argument that uniquely identifies an instance of object  to be updated and \u201cdtime,\u201d a variable of type DateTime that stores the date and time of the request for inclusion in provisionRequests attribute .","When method  is called to purge provisionRequests attribute , the value of the dtime argument is set to a value of NULL and provisioning events that occurred some multiple of the length of time represented by attribute  are removed from the vector. In this manner, enough information is stored in provisionRequests attribute  so that attribute  can be used, if necessary, in the calculation of window attribute  but attribute  is not allowed to grow uncontrollably in size.","Similarly, UpdateDeprovisionRequests method  is called when a request to deprovision a resource is initiated or when deprovisionRequests attribute  is periodically purged of older entries. A request to deprovision a resource or update deprovisionRequests attribute  may be initiated either programmatically or in response to an explicit request by a user. When a deprovisioning event occurs, method  is called with two (2) arguments: \u201crwo,\u201d a ResourceWindowObjectID argument that uniquely identifies an instance of object  to be updated and \u201cdtime,\u201d a variable of type DateTime that stores the date and time of the request for inclusion in deprovisionRequests attribute .","When method  is called to purge deprovisionRequests attribute , the value of the dtime argument is set to a value of NULL and deprovisioning events that occurred some multiple of the length of time represented by window attribute  are removed from the vector. In this manner, enough information is stored in deprovisionRequests attribute  so that attribute  can be used, if necessary, in the calculation of P\/D window attribute  but attribute  is not allowed to grow uncontrollably in size.","GetWindow method  is called with a ResourceWindowObjectID argument and returns the value stored in window attribute  of the corresponding object . SetWindow method  is called with a ResourceWindowObjectID argument, an argument \u201cnewWin\u201d of type Interval and acts to store in window attribute  of the corresponding object  the value passed in the newWin argument. UpdateRWO method  is called with an argument of type ResourceWindowObjectID and initiates an update of provisionRequests attribute , deprovisionRequests attribute  and window attribute . More specifically, method  causes attributes  and  to be updated in a fashion similar to that explained above in conjunction with methods  and , respectively. Further, the value of window attribute  is recalculated based upon information stored in attributes  and  and RP data .","A getRwoID method (not shown) is employed to determine the value of rwoID attribute  if a user or program only knows the name of a resource. A resourceName argument of type String is passed to getRwoID method and a value corresponding to rwoID attribute  is returned.","It should be understood that RWO object  is only one example of a memory object that may be used to implement the claimed subject matter. Other memory objects with fewer, more and\/or different attributes and methods may be employed. In addition, there are many ways other than employing object  to implement the functionality and data storage of the claimed subject matter. For example, the claimed subject matter may be implemented by means of a computer program in conjunction with a relational database.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 5","FIG. 4"],"b":["250","250","251","253","250","255","250","200"]},"If, in block , process  determines that the resource does correspond to resource under the control of the claimed subject matter, then control proceeds to an \u201cID Known?\u201d block  during which process  determines whether or not the resource being referred to by name or by rwoID . If the resource is referred to by name, control proceeds to a \u201cGet RwoID\u201d block  during which process  calls GetRwoID method to determine the resource's rwoID attribute  by which the corresponding memory object  is uniquely identified.","From blocks  and , control proceeds to a \u201cCollect Data\u201d block  during which process  retrieves, from WC data  (), memory object  corresponding to the subject resource and any information concerning the resource that may be stored in RP data  () and SLA data  (). Control then proceeds to a \u201cProcess Data\u201d block  during which process  calculates a value for a P\/D window for the subject resource based upon best practices. More specifically, the P\/D window is based upon a length of time necessary to execute a provisioning or deprovisioning and an amount of time necessary for measurements related to the subject resource to stabilize following a provisioning or deprovisioning event. Such information is typically stored in RP data . The calculated value for the P\/D window can also depend upon values stored in provisionRequests attribute  and deprovisionRequests attribute , from which process  can determine how often the subject resource is subject to provisioning and deprovisioning.","Control then proceeds to a \u201cStore Window\u201d block  during which process  takes the value for a P\/D window calculated in block  and stores the value in the appropriate memory object  by calling setWindow method  (). Memory object  is then stored in WC data . Finally, control proceeds to an \u201cEnd Calculate Window\u201d block in which process  is complete.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 6","b":"300"},"Process  starts in a \u201cBegin P\/D Resource block  and control proceeds immediately to an \u201d ID Known? block . During block , process  determines whether or not a received request for a provisioning event is accompanied by a valid rwoID attribute  () or a resourceName attribute  (). If the provisioning request contains rwoID attribute , then control proceeds to a \u201cGet Data\u201d block . If the provisioning request does not contain rwoID attribute , then control proceeds a \u201cGet RwoID\u201d block  during which process  executes GetRwoID method to retrieve attribute  corresponding to the name of the requested resource. Control then proceeds to Get Data block .","During Get Data block , process  retrieves object  corresponding to the requested resource, as well as RP data  () and SLA data  () corresponding to the requested resource. Control then proceeds to a \u201cCompare P\/D Times To Window\u201d block  during which process  compares the current date and time to the date and times listed in provisionRequests attribute  (). Control then proceeds to a \u201cTiming OK?\u201d block  during which the difference between the current date and time and the values stored in provisionRequests attribute  are compared to the value stored in P\/D window attribute . If the difference is greater than the value of P\/D window attribute , then control proceeds to an \u201cExecute Request\u201d block  during which the requested resource is provisioned as requested. If, in block , the difference is less than the value in P\/D window attribute , then control proceeds to a \u201cDisregard Request\u201d block  during which process ignores the request for the resource.","Following blocks  and  control proceeds to an \u201cUpdate Rwo\u201d block  during which process  executes updateProvisionRequests method  to record the provisioning or attempted provisioning. currentInstantiations attribute  is also incremented to reflect the addition of the corresponding resource. Of course, if this example was describing a deprovisioning event rather than a provisioning event, updateDeprovisionRequests method  would be executed rather then method  and currentInstantiations attribute  would be decremented rather than incremented.","The example above simplifies the process of deciding whether or not a particular provisioning or deprovisioning request is executed or disregarded. Other factors also play a part in the decision, i.e. information in RP data  may indicate that a requested resource is simply not available. Further, information in SLA data  may indicate that the customer generating the request is not contractually entitled to a requested additional resource. The claimed subject matter is one factor in a decision to provision or deprovision a particular resource but the claimed subject matter enables a utility services environment to stabilize prior to the execution of a decision regarding the allocation or deallocation of a resource, thus preventing unnecessary and\/or duplicative requests from occurring.","While the invention has been shown and described with reference to particular embodiments thereof, it will be understood by those skilled in the art that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope of the invention, including but not limited to additional, less or modified elements and\/or additional, less or modified blocks performed in the same or a different order."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the disclosed embodiments is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
