---
title: Client-side callbacks to server events
abstract: Described herein are systems and methods for client-side callbacks to server events in which a Web server receives a message indicating a client-side event. The client-side event is associated with a specific component of a client resource, the specific component being one of multiple static components of the client resource. A server-side component generates a response to the received message and implements at least a subset of logic of the specific component. In generating the response to the message, server-side logic corresponding to other static components that are different than the specific component are not used.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07890604&OS=07890604&RS=07890604
owner: Microsoft Corproation
number: 07890604
owner_city: Redmond
owner_country: US
publication_date: 20040507
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Exemplary Callback Manager and Client-Side Callback Script APIs","Web Server Handling of a Client Callback Event Request","CONCLUSION"],"p":["This patent application is related to the following patent applications, each of which are commonly assigned to assignee of this application, and hereby incorporated by reference:","U.S. patent application Ser. No. 09\/574,165, titled \u201cPostback Input Handling by Server-Side Control Objects\u201d, filed on May 18, 2000, commonly assigned to the assignee hereof, and hereby incorporated by reference;","Japanese Patent Application no. 2001\/129925, titled \u201cPostback Input Handling by Server-Side Control Objects\u201d, filed on Apr. 26, 2001, and commonly assigned to the assignee hereof; and","European Patent Application no. 01\/111678.7, titled \u201cPostback Input Handling by Server-Side Control Objects\u201d, filed on May 14, 2001, and commonly assigned to the assignee hereof.","Systems and methods of the invention relates to server-based Web applications.","Creating Web applications that respond to user requests quickly, even when a large number of requests are being processed on the server, has been a challenge for developers and IT personnel since the Internet began. Response time is the amount of time that elapses from when a client request is communicated to a server, and when the response from the server becomes interactive at the client. When an application takes a long time to respond, the user may become impatient and go to another Web site. Ideally, the client experience should appear to be that of a continuously executing process. Unfortunately, most Web Form events require communicating a substantial amount of information to the server for processing, and communicating a substantial amount of information in a response back to the client (a round trip). Such round trips often result in long response times, causing unresponsive applications and distracting user experiences.","This amount of time that it takes to perform a round trip is exacerbated because events raised by server-based Web application server controls work somewhat differently than events in traditional client forms or in client-based applications. The difference arises primarily because of the separation of the event itself from where the event is handled. In client-based applications, events are raised and handled on the client. In server-based Web Forms pages, on the other hand, events associated with server controls are raised on the client but handled on a Web server.","For events raised on the client (typically click events), the Web Forms control event model requires that the Web Form and the event information be captured on the client, encapsulated in an event message, and sending the event message to the server via a full HTTP post of the page. The page framework on the server must interpret the post to determine what event occurred and then call the appropriate server method(s) to handle the event. Once the event has been processed, the server generates a completely new page with the server controls associated with the client-side user interface (UI) elements by rendering the HTML data for each of the client-side UI elements. The server then performs a full page postback of the newly rendered page\u2014an entire new Web Form\u2014to the client in an HTTP response. This means that for each action that requires processing, the entire form must be submitted to the server, the entire form must be recreated, processed, and returned in a full page postback to the client. This sequence of events is called a round trip.","For example, imagine a business scenario: A user enters an order on a Web Forms page (\u201cpage\u201d). Responsive to order entry, and to confirm sufficient inventory for the order, an application posts the page to the server at an appropriate point in the user's order-entry process. The server receives the post, identifies resources of the page, generates a control object hierarchy for the identified resources, examines the order, performs an inventory lookup, perhaps takes some action defined in business logic (such as modifying the page to indicate an error), and based on the results of the order entry in view of the business logic, renders the resulting page HTML for client-side presentation. At this point, the server returns the page in a full page postback to the browser for the user to continue.","In view of the above, full Web page submittals and full Web page postbacks for a server to handle a client application event are substantially problematic in that they typically result in a non-responsive application, which in turn generally leads to a poor user experience. To make matters worse, each full page post to a Web server to handle a client-side event may add an extraneous step to an application's page navigation history. For example, consider that a full page post by a Web browser application to a Web server creates an irrelevant step in the page's navigation history. In this scenario, if a user selects the browser's \u201cback\u201d navigation button, the browser will present a previous rendering of the same page, which is not the \u201creal\u201d previous page. As can be appreciated, generating such an extraneous navigation step in a page's navigation history responsive to a full page post is a substantial waste of processing power, resources, time, and can be confusing and frustrating to a user of the application. Accordingly, systems and methods to facilitate the appearance of a continuously executing process to a user when processing Web page events that do not generate extraneous page navigation steps, would be welcomed.","Systems and methods for client-side callbacks to server events are described. In one aspect, a Web server receives a message indicating a client-side event. The client-side event is associated with a specific component of a client resource. The specific component is one of multiple static components of the client resource. A server-side component generates a response to the message. The server-side component implements at least a subset of logic of the specific component. Server-side logic corresponding to other ones of the static components that are different than the specific component is not used to generate the response.","Overview","The following systems and methods for client-side callbacks to server events provide a framework to facilitate the appearance of a continuously executing process to a user when processing Web Forms events. More particularly, the framework provides a mechanism by which Web page code (Web Form(s)) in a client device or browser can invoke server-side code in a Web site and handle the server returned result in a client-side callback method. This framework for raising and handling events does not require that the client submit the full page that corresponds to the event to the server. Rather, only an event and a set of targeted server-side controls for handling the event and generating a response are identified in the client request for the server to handle a client-side event\u2014although, as described below, other information can be included in the request as well.","Responsive to receiving a client-side event handling request, the server executes\u2014through a server-side event\u2014only enough of the page's lifecycle to process the event. This means that the entire page is not pre-rendered and rendered in response to the client-side event request. Only the one or more server-side controls identified in the client-side event handle the request, and any other controls (e.g., children controls) specified by the one or more server-side controls, will respond to the event and communicate any data back to the client. The content and data format of the data generated in response to the client-side event is completely a function of the design of the server-side control(s) used to process the event at the server.","These techniques for processing a client-side event allow the server to more efficiently process Web Forms events, for example, as compared to conventional techniques that always execute full post-back page lifecycles, including pre-rendering and rendering operations for all page controls. Not only does this reduce the amount of time that the server needs to process an event message, but this approach also means that the page does not need to be fully refreshed on the client, allowing a user to continue to interact with other controls on a page that are not being updated responsive to the client-side event. Additionally, since a client-side event involving a client-side control does not result in a full post-back of a page, irrelevant steps in the corresponding page's navigation history are not generated. Each of these behaviors preserve a quality user experience on the client by providing the user with a less distracting and more responsive Web application experience.","These and other aspects of the systems and methods for client-side callbacks to server events are now described in greater detail.","An Exemplary System","Turning to the drawings, wherein like reference numerals refer to like elements, the systems and methods for client-side callbacks to server events are described and shown as being implemented in a suitable computing environment. Although not required, the invention is described in the general context of computer-executable instructions (program modules) being executed by a personal computer. Program modules generally include routines, programs, objects, components, data structures, etc., that perform particular tasks or implement particular abstract data types. While the systems and methods are described in the foregoing context, acts and operations described hereinafter may also be implemented in hardware.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","102","104","106","102","106","104","104"]},"Web server  creates one or more server-side controls  providing server-side processing of client-side callback requests  (hereinafter often referred to simply as \u201crequest(s) \u201d) from client computing device . Server-side control(s)  provide visual elements (e.g., HTML and static text) and program logic for one or more Web Form(s) presented at client . The visual elements logically correspond to client-side user interface (UI) elements . For instance, server-side control(s)  generate authoring language codes, or markup language, for use by a Web application  (e.g., a Web browser) executing on client  to display and process client-side UI elements , for example, as a Web page.","With respect to program logic provided by server-side control(s) , code behind class files for client-side user interface (UI) elements  is selectively executed at Web server  whenever a corresponding Web Forms page is requested by client . Moreover, in this implementation, server-side control(s)  capable of handling client-side events inject callback script  onto a persisted form for respective visual elements at the client . Callback script  acts as an intermediary between client-side generated events associated with client-side UI elements  and server-side events created at Web server  to process client-side events. Callback script  is injected\/rendered to client  so that client-side event(s) to retrieve data from Web server  can be generated without causing an entire Web page to post back from Web server . Only a server-side control  designed to process client-side callback events implement callback script . For purposes of illustration, callback script  which has been rendered to client  logically corresponds to client-side callback script  at client .","Client-side callback script , responsive to a client-side event (e.g., a click or select event on a static or visual element presented by Web application  to a user), interfaces with callback manager module  to generate out-of band request . For purposes of discussion, an out-of-band request is one that does not result in a full page postback from Web server . Client-side callback request  identifies the client-side event and the control(s) (i.e., server-side control(s) ) targeted to handle the client-side event. As described below, a control configured to handle a client-side event implements a RaiseCallbackEvent application programming interface (API). Request  may include additional information generated by client-side UI elements  associated with the client-side event and\/or the Web application  responsive to the client-side callback event. In one implementation, request  is an HTTP request to a Universal resource Identifier (URI). In this implementation, Web server  provides callback manager  to client , for example, during an initial rendering of a page that is based on a server control  that handles client-based callback events.","As described below, Web server  will process the client-side callback event associated with request  by communicating encapsulated information to the server-side control(s)  identified by request  (e.g., see the GetCallBackEventReference \u201cControl\u201d parameter). The identified control(s) generate data to process the indicated event and respectively communicate the data back to callback manager  via a response . Callback manager , responsive to receiving response , parses the data (response data ) in response  to generate parsed response data . Callback manager  passes parsed response data  to the specific client-side callback handler  that was specified by the Web application  with the GetCallbackEventReference method.","During rendering of a page, each server-side control  that handles a client-side callback event renders code (e.g., script) for execution at the client . The code includes a call to Page.GetCallbackEventReference( . . . ) to obtain a name of a client-side method to invoke a corresponding client-side callback event. The client-side method is implemented in the callback manager module  and provides both the functionality to package a callback request  to the server  and parse a callback response  from the server .",{"@attributes":{"id":"p-0029","num":"0028"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXEMPLARY API TO OBTAIN A CALLBACK EVENT REFERENCE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public class Page {"},{"entry":"\u2003\u2003\u2003public string GetCallbackEventReference(Control control, string"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003argument, string clientCallback, string context);"},{"entry":"\u2003\u2003\u2003public string GetCallbackEventReference(Control control, string"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003argument, string clientCallback, string context, string"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003clientErrorCallback);"},{"entry":"\u2003\u2003\u2003public string GetCallbackEventReference(string target, string"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003argument, string clientCallback, string context, string"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003clientErrorCallback);"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"GetCallbackEventReference will return a string which when treated as script on the client initiates a client callback. In this implementation, the GetCallbackEventReference has the following parameter overloads, each of which is designed to hook up the events in a different respect: Tables 2, 3, and 4 provide exemplary overload implementations of the GetCallbackEventReference API.",{"@attributes":{"id":"p-0031","num":"0030"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GetCallBackEventReference(control, argument,"},{"entry":"clientCallBack, context)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Prototype","Public string GetCallbackEventReference(Control"]},{"entry":[{},"control, string argument, string clientCallback,"]},{"entry":[{},"string context);"]},{"entry":["Control","The Control which implements RaiseCallbackEvent."]},{"entry":["Argument","In one implementation, this is client-side script that"]},{"entry":[{},"will be executed prior to making the call back. The"]},{"entry":[{},"evaluation of this script (on the client) will be sent"]},{"entry":[{},"to the RaiseCallbackEvent method via the"]},{"entry":[{},"eventArgument parameter. In another"]},{"entry":[{},"implementation, this is a static value."]},{"entry":["clientCallback","Name of the client side event handler"]},{"entry":[{},"(i.e., client-side callback handler 122) which"]},{"entry":[{},"will receive the result of a successful server event."]},{"entry":["Context","In one implementation, this is client-side script"]},{"entry":[{},"that will be evaluated on the client prior to the CallBack."]},{"entry":[{},"The result of this will be passed back to the client side"]},{"entry":[{},"event handler via the context parameter. In another"]},{"entry":[{},"implementation, this is a static value"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GetCallBackEventReference(control, argument,"},{"entry":"clientCallBack, context, ClientErrorCallBack)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Prototype","public string GetCallbackEventReference(Control"]},{"entry":[{},"control, string argument, string clientCallback,"]},{"entry":[{},"string context, string clientErrorCallback);"]},{"entry":["Control","The Control which implements"]},{"entry":[{},"RaiseCallbackEvent."]},{"entry":["Argument","Client Side Script that will be executed"]},{"entry":[{},"prior to making the call back. The evaluation"]},{"entry":[{},"of this script (on the client) will be sent to the"]},{"entry":[{},"RaiseCallbackEvent method via the"]},{"entry":[{},"eventArgument parameter."]},{"entry":["clientCallback","Name of the client side event handler"]},{"entry":[{},"which will receive the result of a"]},{"entry":[{},"successful server event."]},{"entry":["Context","Client Side Script that will be evaluated"]},{"entry":[{},"on the client prior to the CallBack. The result"]},{"entry":[{},"of this will be passed back to the client"]},{"entry":[{},"side event handler via the context parameter."]},{"entry":["clientErrorCallback","Name of the client side event handler"]},{"entry":[{},"which will receive the result of the"]},{"entry":[{},"RaiseCallbackEvent method when"]},{"entry":[{},"an error occurs."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"GetCallBackEventReference(target, argument, clientCallBack,"},{"entry":"context, ClientErrorCallBack)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Prototype","public string GetCallbackEventReference(string"]},{"entry":[{},"target, string argument, string clientCallback,"]},{"entry":[{},"string context, string clientErrorCallback);"]},{"entry":["Target","This is for the developer who wants the callback to"]},{"entry":[{},"go to something other than the server control's"]},{"entry":[{},"corresponding client-side control."]},{"entry":["Argument","Client Side Script that will be executed prior to"]},{"entry":[{},"making the call back. The evaluation of this script"]},{"entry":[{},"(on the client) will be sent to the"]},{"entry":[{},"RaiseCallbackEvent method via the"]},{"entry":[{},"eventArgument parameter."]},{"entry":["clientCallback","Name of the client side event handler XXX which"]},{"entry":[{},"will receive the result of a successful"]},{"entry":[{},"server event."]},{"entry":["Context","Client Side Script that will be evaluated on the"]},{"entry":[{},"client prior to the CallBack. The result of this will"]},{"entry":[{},"be passed back to the client side event"]},{"entry":[{},"handler via the context parameter."]},{"entry":["clientErrorCallback","Name of the client side event handler"]},{"entry":[{},"which will receive the result of the"]},{"entry":[{},"RaiseCallbackEvent method when an error"]},{"entry":[{},"occurs."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"The clientCallback parameter specifies the name of the client-side callback handler  which will receive the result of a successful server-side event. In this implementation, the client-side callback handler  has the following signature, wherein function name \u201cMyCallback\u201d is an arbitrary name:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"AN EXEMPLARY CLIENT-SIDE CALLBACK HANDLER"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<script>",{}]},{"entry":[{},"\u2003\u2003\u2003function MyCallback(result, context) { ... }"]},{"entry":[{},"<\/script>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In this implementation, a server-side control  (component) capable of handling callback events is invoked via an ICallBackEventHandler interface. This interface has a single RaiseCallbackEvent method. The RaiseCallbackEvent method may accept an optional argument that contains information relevant to processing the event.",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 6"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"AN EXEMPLARY CALLBACK EVENT HANDLER INTERFACE"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"14pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"namespace System.Web.UI {",{}]},{"entry":[{},"\u2003\u2003\u2003public interface ICallbackEventHandler {"]},{"entry":[{},"\u2003\u2003\u2003\u2003\u2003\u2003string RaiseCallbackEvent(string eventArgument);"]},{"entry":[{},"\u2003\u2003\u2003}"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["120","120","122"]},"In view of the above APIs, Web server  responsive to receiving a request , raises a server-side event by invoking one or more corresponding RaiseCallbackEvent methods. To this end, Web server  resolves the URI of request  and invokes an appropriate page handler . For example, if the URI specifies a dynamic content resource, e.g., an Active Server Page+(ASP.NET) resource, page handler  accesses the dynamic content resource by instantiating the specified page\/Web Forms along with the page's hierarchy of server-side control(s) . The page handler  execute only enough of the page's lifecycle events to handle\/process the client-side event. Exemplary such page lifecycle events include page initialization, loading, and invocation of respective server-side control(s)  configured to manage the client-side event by invoking one or more corresponding RaiseCallbackEvent methods. As indicated, the respective server-side controls are specified by request . The invoked server-side control(s)  generate response data . Thus, response data  is generated only by select ones of the server-side control(s)  (and possibly children of these select ones or other server-side controls invoked by one or more of the select ones) that were specified in request .","For instance, a hierarchy of server-side control(s)  associated to a server-side control  specified in request  may cooperate in processing response data . Although response data  can include markup language for one or more UI elements corresponding to server-side control(s)  that implement logic of the page, response data  can be any type of data in any type of data format, the type of data and data format being a function of respective design of the server-side control(s)  that generated response data . For example, in one implementation, a server-side control  generates response data  for updating a text string in a dialog box.","Page handler  packages response data into response , which in one implementation is an HTTP request, and communicates response  back to callback manager . Each server-side control  can generate response data , which can be packaged by page handler module . Callback manager  can un-package the response data  and call the appropriate callback handlers . As indicated above, responsive to receiving response , callback manager  parses response data  encapsulated in response  to generate parsed response data . Callback manager  passes parsed response data  to the specific client-side callback handler  that was specified by the particular server-side controls  that generated the response data  with the GetCallbackEventReference method.","An Exemplary Procedure",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","202","102","110","110","106","106","114","108","102","108","106","110","116","106","102"]},"At block , Web server , and more particularly a page handler module , identifies one or more specific server-side components  to process the client-side event specified by request . As indicated above, the one or more specific server-side components will be components logically corresponding to the specific component at client  responsible for firing the event. To facilitate identification of these corresponding components, request  identifies that targeted one or more specific server-side components . At block , page handle or  communicates information from request  to the one or more identified server-side controls \u2014this communication is a server-side event. The communicated information corresponds to the client-side event.","At block , and responsive to receiving the information from page handler , respective ones of the identified server-side controls  process the client-side event to generate a set of response data . At block , respective ones of the identified server-side controls  communicate the response data  via response(s)  to a callback manager module  executing at client . The callback manager  is configured to parse response(s)  and forward resulting parsed response data  to respective client-side callback event handlers . The client-side callback event handlers were specified by the respective ones of the identified server-side controls  during an initial rendering of logically corresponding client-side user interface elements  for presentation at client .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 3","FIG. 1"],"b":["300","302","106","110","106","118","118","112","102"]},"At block , client device  receives a response  that includes response data  associated with processing of the client-side event. The response  was communicated to client  from Web server . In one implementation, the response is received by a callback manager module . At block , the callback manager module  parses response data  in the response  to generate parsed response data . At block , the callback manager module  forwards the parsed response data  to a client-side callback handler . Logic for specifying and hooking into the client-side callback handler  by the callback manager  was specified prior to the callback-event by the one or more components of the targeted subset of server-side logic.","An Exemplary Operating Environment",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 1","FIGS. 2 and 3"],"b":["400","100","400","400","400"]},"The methods and systems described herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, multiprocessor systems, microprocessor-based systems, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and so on. Compact or subset versions of the framework may also be implemented in clients of limited resources, such as handheld computers, or other computing devices. The invention is practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","With reference to , an exemplary system for client-side callbacks to server events includes a general purpose computing device in the form of a computer . The following described aspects of computer  are exemplary implementations of server  () and\/or client . Components of computer  may include, but are not limited to, processing unit(s) , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example and not limitation, such architectures may include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","A computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer .","Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism, and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation, communication media includes wired media such as a wired network or a direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","System memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example and not limitation,  illustrates operating system , application programs , other program modules , and program data . In one implementation, application programs  include server-side controls(s)  and page handler module(s) . In this same scenario, program data  includes response data  and response(s) . In another implementation, application programs  include Web application(s) , client-side callback script , and callback manager module . In this same scenario, program data  includes client-side callback request(s) , client-side user interface elements , and parsed response data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that they are at least different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard  and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB).","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface . The computer  may also include an input peripheral interface .","The computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and as a function of its particular implementation, may include many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example and not limitation,  illustrates remote application programs  as residing on memory device . The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Referring to , client-side callback script (s)  and client-side callback framework  allow a Web application  using the client-side UI elements  to send request  to Web server , for example, to retrieve data, without requiring Web server  to postback an entire Web page, or Web Form, to the client . By designing and using client-side callback script  during design of a server-side control , a programmer enables a Web application  to call Web server , execute a server event, receive a response  including corresponding event data, and use the event data in any manner to facilitate operations of the Web application . A server-side control developer is abstracted away from the creation of the request back to the server and the logic needed to parse the server's response.","Although the systems and methods for client-side callbacks to server events have been described in language specific to structural features and\/or methodological operations or actions, it is understood that the implementations defined in the appended claims are not necessarily limited to the specific features or actions described. Accordingly, the specific features and actions are disclosed as exemplary forms of implementing the claimed subject matter."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures, the left-most digit of a component reference number identifies the particular figure in which the component first appears.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
