---
title: Performing threshold based connection status responses
abstract: A connection manager receives connection status indicators from a remote access service and invokes status threshold based responses. A received status indicator is received in response to a connection request. In another example, the status indicator is pushed to the connection manager. Status indicators are recorded in a status data structure. Status threshold based responses are identified in a status threshold response data structure. When a status indication count corresponds with a threshold value in a status threshold response data structure, a corresponding status threshold based response is invoked. A status data structure is sent to a remote server, and a new status data structure is received. In another example, a new status threshold response data structure is received. In another example, one or more new or updated status responses are received.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07287076&OS=07287076&RS=07287076
owner: Microsoft Corporation
number: 07287076
owner_city: Redmond
owner_country: US
publication_date: 20031229
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","COPYRIGHT AUTHORIZATION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION","Overview","Exemplary Network Connection","Exemplary Device","Exemplary Applications","Exemplary Connection Requests","Exemplary Remote Access Connection","Exemplary Connection Status Information","Exemplary Status Count","Exemplary Threshold Based Status Response","Exemplary TBSR State Machine","Exemplary Connections","Exemplary Connection Manager Components","Exemplary Connector","Exemplary Connector Data Storage","Exemplary Threshold Based Method","Exemplary TBSR With Updates","Exemplary Connection Request and TBSR","Exemplary TBSR on Five Status Codes","Exemplary TBSR Dialogue Windows","Exemplary Sending and Receiving Data Structures","Computing Environment","ALTERNATIVES"],"p":["The technical field relates to managing computing device connections to remote resources.","A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Microsoft Corporation, as an Internet service provider, provided MSN 8.0 software for connecting to the Internet. The software supported dial-up connections using a remote access service component. The software included an embedded phone book with plural dial-up connection telephone numbers that the computer calls to establish a connection. The phone book numbers were dialed in order until a connection is made. For example, when a connection request returned a busy telephone error code, that information was saved in a log for this dialing session. When a connection was finally made in this dialing session, the saved log of the previous dialing session was sent to a remote server. The sent dialing session log was used by the remote server to create new phone books based on dialing sessions for multiple users in a geographic location. However, until a new phone book is received, in subsequent dialing sessions, the existing phone numbers were dialed in the same order even when the first few numbers were busy multiple times in previous dialing sessions.","The described technologies provide methods and systems for managing a connection to a remote resource.","In one example, a connection manager receives connection status indicators from a remote access service and invokes status threshold based responses. In one such example, a received status indicator is received in response to a connection request. In another example, the status indicator is pushed to the connection manager. In an example, status indicators are recorded in a status data structure. In another example, status threshold based responses are identified in a status threshold response data structure. In other examples, when a status indication count corresponds with a threshold value in a status threshold response data structure, a corresponding status threshold based response is invoked. In one such example, a phonebook is modified locally in response to a threshold number of received status indicators. In another example, a status data structure is sent to a remote server, and a new status data structure is received. In another example, a new status threshold response data structure is received. In another example, one or more new or updated status responses are received.","Additional features and advantages will be made apparent from the following detailed description, which proceeds with reference to the accompanying drawings.","The following examples describe methods and systems for managing communications from a device to remote resources. One or more applications running on a computing device request a resource requiring remote access to another device, computer, and\/or network. The computing device is any type of device with a processor, memory, and a hardware component for connecting and communicating with a remote computer or network. The hardware component is a modem or other transmitter\/receiver that communicates with the computer or network via the connection. The connection and\/or communication is conducted according to any communications protocol, wireless or otherwise. Status information is available about a connection request or a connection state. Connection management logic maintains, requests, and\/or receives the status information. Status data is logged in a data structure. Status logs are compared against threshold data in order to identify corresponding behaviors. When a logged status is determined to have reached a threshold value, the corresponding behavior is performed.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["108","104","104","102","106","108","108","102","102"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 2","b":["202","204","206","208","210","212","200","202","204","214"]},"A device contains one or more applications requesting remote resources. Applications comprise any software requesting remote services. This does not require the application to have state indicating that the resource is remote, though it may. An application may request a resource that a device system service determines is a resource remote from the device. Further, an application may request a resource and a system service determines that a remote resource is required in order to perform the requested system service. Finally, system services also require remote resources from time to time. Thus, any software requesting a remote resource or causing other software to request a remote resource is contemplated as an application requesting a connection to a remote resource(s).","The types of applications that run on devices, whether wireless or otherwise, is well known in the arts, such as voice services, e-mail services, audio services, video services, database services, Internet services, etc.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 3","b":["324","320","322","326","328","306","302","324","306","308","308","310","308","306","324","310","302","308"]},"In one example, the device  is a personal computer, the shared connection is a dial-up connection , the hardware component  is an internal modem, the node  is an ISP, the remote resources are web servers , , and the connection  is \u201cutilized\u201d by one or more applications ,  (e.g., a browser, a multimedia player) requesting web services.","The device  includes an operating system kernel  exposing an application programming interface (API)  that an application uses to obtain access to system services. When an application  needs to obtain remote services at a network , the OS establishes a connection  to the network  using the hardware component . The hardware component  is a device that establishes a connection with a network, transmits and receives data over that connection, and terminates the connection. For example, if the hardware component is a modem or other transmitter or receiver, the OS will access a driver component  to send and receive communications via the hardware component  to the network. For example, if the hardware component is a modem, the driver component is a modem driver.","As shown, the device also comprises logic  for managing the connection . The logic for managing the connection holds state information about one or more applications (i.e., process) utilizing the connection . The logic for managing a shared connection  is shown with dotted lines to illustrate that the logic can be implemented as software or hardware, and that if it is implemented as software, it can reside anywhere in a method call path between an API call requesting a remote resource, and a call to the hardware component . Thus, in one example the logic  is implemented when a connect method is called after an application requests a resource that is a remote resource.","The logic for managing the connection  saves state about the connection, and maintains that connection so long as at least one application is using the connection. In one example, the logic  saves a process identification for each process requesting the shared connection, and as each process releases or disconnects the connection, the state is updated. When the last process releases or disconnects the connection, the logic  allows the disconnection to occur, or allows a disconnection call to disconnect the shared connection. Additionally, the logic determines whether a running application has died or completed running without releasing the connection. Once all processes that requested the connection  have died, completed, or released the connection, the shared resource  is disconnected.","In the example where the device is a cellular (e.g., wireless) phone, example applications ,  may include e-mail, a web browser, a camera, and\/or voice services. In such a case, the network connection  is wireless, the network is a wireless telephone network, and the node  is a transmitter\/receiver on the network. Of course, the wireless telephone network may also provide access to other resources or networks (e.g., Internet). Thus, existing networks provide many resources to applications once the described connection management logic is in place.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","402","404","406","408","410"]},"A connection manager comprises software that receives connection or disconnection requests caused by applications requesting remote resources. The connection or disconnection request received by the connection manager is received from a method call by an application. In another example, the connection or disconnection request received by the connection manager is received by a system service that receives a resource request from an application. In one such example, after the system service determines that the resource is remote, the system service issues a connection request on the connection manager .","A connection manager assembles information (e.g., parameters) required to call a connection method (e.g., a dial method) on a remote access service . In an example, when the connection is a dial-up connection, the assembled information includes a telephone number and possibly an area code, a user identification, or a password. In other examples, the assembled information will include information about the quality or reliability of service (e.g., bandwidth) required for the requested connection. The types of information gathered are well known and varied for the different types of requested connections, whether wireless or otherwise. Once the information is assembled, the connection manager calls a method on the remote access service requesting a connection. The remote access service returns information to the connection manager. In one example, the returned information indicates connection status information such as whether a connection was established. In another example, if the connection is established, the remote access service also returns other status information about the connection (e.g., type of connection, dial-up, wireless, bandwidth, protocol, etc.). In one example, a connection manager stores the status information about the connection, and later the connection manager compares this information to determine whether certain actions (e.g., threshold based status responses) should be performed based on the stored status information.","In one example, when no connection is established, the remote access service returns status information to the connection manager. In one such example, the remote access service returns a standard code indicating why the remote access server was unable to establish a connection. Such standard codes are also referred to as error codes and are very numerous and diverse in nature (e.g., hardware failure, line busy, no dial tone, wireless service out of range, password incorrect, requested service not available, etc.).","A remote access service receives a connection request from the connection manager and invokes certain methods on a hardware driver to establish and maintain a connection. In one example, a remote access service invokes methods on a hardware driver according to a standard. For example, Unimodem is a driver standard for communications hardware (e.g., modems) interfacing with connection requests on Microsoft Windows platforms.","Often a hardware component  manufacturer writes a software program designed to communicate with the hardware component. This software is often called a hardware driver . The hardware driver receives method calls formed according to a standard (e.g., Unimodem) and forwards them to the modem where they are sent out over a medium  (e.g., a cable, dial-up connection, radio frequency, etc.). The hardware  transmits and receives communications with other remote hardware over the medium , according to a communications protocol. Thus, the hardware driver contains methods that it expects a remote access service to call according to a communications standard.","In the Microsoft Windows operating environment, the remote access service is the Remote Access Service software (i.e., RAS component) from Microsoft Corporation. Other devices not using the RAS component may create their own remote access service, and it would have a possibly different set of codes used to identify errors returned from a call to the remote access service.","For example, on an Apple MacIntosh platform, a remote access service is called Open Transport (OT), and OT hosts a separate known communications standard and error codes. In such an example, the connection manager assembles information and requests an OT connection accordingly, and receives OT error codes.","A connection manager receives status information about connection requests , and about established connections . For example, if a remote access service is the Remote Access Service from Microsoft, upon a connection request, a connection request returns such errors as \u201c602\u201d, indicating port is already open, \u201c615\u201d, indicating port was not found, \u201c638\u201d, indicating the request timed out, and etc. In another example, if a remote access service is Open Transport from Apple Computer, upon a connection request, a connection request returns such error codes as \u201c7129\u201d, indicating that PPP authentication failed, \u201c7139\u201d, indicating that OT\/PPP cannot locate its preferences folder, etc. In another example, if a remote access service is Mobile Wireless Center from Cisco Corporation, a server request returns such error codes as \u201c2001\u201d, indicating unable to log-in a device, \u201c4008\u201d, feature does not exist, \u201c0\u201d, indicating a successful operation, \u201c4011\u201d, indicating server was unable to get telnetInfo, etc. Such various protocol error\/status codes, wireless or otherwise, are well known.","Status information is returned upon a connection request. Status information is also received by a connection manager on an open connection without a request (i.e., pushed status information). For example, a RAS status indicates an unexpected disconnect (i.e., RAS \u201c101\u201d). Additionally, status information about a connection can be obtained by a connection manager. Thus, when status information is received by a connection manager, that status information is being received as a result of a connection request, as a result of another request made on a remote access service, or is pushed to the connection manager from the remote access service as associated with a prior established connection request or connection session.","Connection logic (e.g., a connection manager) maintains a status indicator count for plural status indicators. When status information is received by a connection manager, if that status information includes status information that corresponds with one or more of the plural status indicators being counted, the connection manager adds one to the status count for that indicator.","A data structure such as an array, a table, a linked list, or other type of data structure is used to associate status identifiers with a count value. For example, as shown in , a list  data structure includes a list of records , . Each record in the list includes a status identifier (e.g., RAS \u201c676\u201d) and a count for that identifier (e.g., \u201c2\u201d). In another example, a status identifier is associated with an object property and\/or an object method. For example, as shown, a phone number property  has an associated list of status identifier counts , . In another example, not shown, a dial ( ) method on a remote access service has an associated status record, and\/or list of status records and counts for status identifiers received on a method.","In one example, when a connection manager receives a status indication, a count for that status record is incremented.","A connection manager (e.g., connection logic) provides certain behavior in response to determining that a threshold number of status information indicators have been received. In order to determine what behavior to perform, a connection manager has access to a data structure. The data structure identifies what action\/behavior to perform upon determining that a threshold number of indicators have been received for a given status. A threshold based status response (TBSR) data structure can be provided in the form of an array, a table, or other data structure. Additionally, a method may also contain a switch that calls other methods based on status identifier and threshold count input parameters. A state machine would also provide the desired TBSR behavior.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 6","b":["602","604","606","608","610","612","610","612","614","616"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":"FIG. 7","b":["700","702","704","706","316","608"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 8","b":"600"},"For example, if a status \u201c692\u201d is received , a threshold number of times , then a first action  is performed for one type of modem chip , and a second action  is performed for another type of modem chip .","Thus, qualifiers are used to provide a greater range of actions based on other conditions (e.g., hardware\/software platform, network environment, etc.). In another example, qualifiers are used in a TBSR Table by adding additional columns (not shown) to the table .","In one example, a client  is a personal computer and an application  is an Internet browser. A user opens the browser application and types www.espn.com into the address location. This begins a process of obtaining an Internet connection.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 9","b":["902","904","906","908","910","912","914","906","916","902"]},"The Connection Manager component uses a remote access server component (RAS)  to establish the pipe with the ISP. The RAS component dials up the ISP over local telephone lines. On the ISP, another server receives the telephone call and authenticates the call with a software component called a Network Authentication Server (NAS), not shown.","When the Connection Manager component asks RAS to provide a connection, it provides RAS with parameters such as the number to call at the ISP, credentials required to complete the connection, and other parameters defining the requested connection. The RAS component returns a handle to that session which includes a ticket to identify the session.","When the application has completed the session using the established pipe, the application  calls disconnect (e.g., InternetAutoDialHangup( )) on Wininet .","Later, when this or another application requests connection to a remote resource, these same components are used to create a pipe to the ISP.","When an application requests access to a remote resource, Wininet either allows access to established communications (e.g., a LAN, or a pipe), or blocks activity until the connection is established as described above.","As data is received on the pipe intended for one of the applications, it is directed to that application. In the case of TCP\/IP, Wininet assigns a communications port to each application, and packets sent and received via that port are directed to the corresponding application. This protocol specific information is known in the arts for the different types of networks, wireless or otherwise.","In another example, an application  requests a connection directly from the RAS component . In this example, the dialer component  is registered as a custom dialer (e.g., registered as a component in a system registry) in the registry. In this case, the RAS component consults the registry and requests the dialer to perform the dialing function. The dialer would establish the telephone connection via RAS, and RAS returns a handle to the dialer, and the dialer returns a handle to the calling component. This handle is used by the component to communicate over the connection.","There are many diverse ways that requests are generated for remote resources. Since these resources are remote, a communication pipe is established to one or more remote computers. Often a dialer is used to assemble the content required to populate the input parameters on a call to a RAS component.","In one example, a connector component assembles the data required to invoke a dial function on a RAS component.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 10","b":"1000"},"In a first example, a computer user clicks on a screen  icon  representing an Internet connection (e.g., a butterfly icon representing a Microsoft Network client). Clicking this icon causes the computer to load the Microsoft Network Services version 9 (MSN 9) environment , including a user interface software component called an MSN 9 client , and a dialer component . Next, the MSN 9 client  displays the user \u201cfiles,\u201d and if a clicked file represents a dial-up user, the MSN 9 client will call a connect( ) method  on the dialer component  (e.g., Connection Manager). In this example, the dialer component exposes a connection( ) method via the \u201cDialer COM\u201d interface.","In one example, data for a connection is obtained by a connection manager from a data store. In one such example, a dialer component calls a method  on a registry  to identify a connector. In many computer systems, a system service is provided to programmers for storing, altering, and obtaining information and programs in a system registry. In this example, the registry contains one or more (\u201cn\u201d) connectors  that can be used to establish a connection to the network. The registry connector  contains a data property known as the \u201ccurrent connector.\u201d Each connector (i.e., 0 . . . n) includes a set of rules  (e.g., \u201cdisable call waiting,\u201d \u201cdial 9 for outside line,\u201d etc.) which should be used for that current connector. Additionally, the connector component calls a phone book component  to identify a phone number for that current connector, and each phone number includes the number to dial, a geographic location such as \u201cAtlanta\u201d or \u201cNew York,\u201d and flags that indicate whether the number should be dialed using an area code prefix, and\/or the number \u201c1\u201d before the prefix for long distance. The information gathered at the dialing rules , the phone book , and the phone number flags , is used to assemble a number sequence to dial for the current connection. This information is returned to the dialer as a result of the connector call . Optionally, the registry also returns that users name and password from the connector call . This information is passed back to the dialer.","Next, the dialer component  calls a dial method  on a remote access service  (e.g., a RAS component). The dial call  includes parameters comprising the numbers required by a RAS component to establish a connection (e.g., phone number, password, prefix, etc.). The RAS component  returns a \u201cHRASCONN\u201d handle to the dialer component . This HRASCONN handle becomes the ticket used by the dialer to refer back to the connection, for example to disconnect the connection. The return from the dial call  can also contain other information, such as error codes (e.g., connection not established, invalid user name or password, etc.). Thus, the HRASCONN handle holds state regarding the status of the connection (e.g., bytes-up, bytes-down, bit rate, etc.).","When the application is finished using the connection, the MSN 9 client  calls disconnect on the dialer component , and the dialer component calls a disconnect method  on the RAS component.","In a second example, an application  requests access to a remote resource. This request triggers a call on the RAS component  either directly, or through a series of calls, for example, as discussed with respect to . In such an example, the application directly, or through WININET  will determine how RAS is configured  to connect to the Internet. For example, in a Microsoft Windows operating environment, if a registry configuration indicates dial-up access, and a Default Dialup connection  is set to the MSN connectoid, then the registry  will indicate that a \u201ccustom dialer\u201d  should be used to establish the connection. In such an example, when RAS calls a connect on the connectoid , the connectoid will call a method on the registry  and identify the custom dialer called \u201cCUSTDIAL.DLL.\u201d A method in the \u201cCUSTDIAL.DLL\u201d called \u201cRASCUSTOMDIAL( )\u201d determines whether the MSN 9 client  is installed on the computer by checking the registry. If the MSN 9 client  is installed on the computer, then the connection proceeds as discussed in the first example. Thus, applications requesting connection from the RAS component are directed back through the dialer to implement the shared connection technology. In such a case, the MSN 9 client will be loaded and run starting from the \u201ctiles,\u201d as discussed in the first example.","If the MSN 9 client is not installed on the computer, then the \u201cRASCUSTOMDIAL( )\u201d method will bypass the MSN 9 client , and pass the connection request directly to the dialer component , as otherwise discussed in the first example. Thus, in these two examples a connection request goes through the MSN 9 client , or is redirected to the dial component via CUSTDIAL .","When the application  has completed use of the remote resource, the application will call disconnect on the RAS component, either directly or indirectly through WININET . As before, the disconnect will be redirected via the custom dialer  to the dialer component .","Thus, some applications are designed to call a RAS interface which results in the dialer component being invoked via the \u201cRASCUSTOMDIAL( )\u201d method of registered \u201cCUSTDIAL.DLL,\u201d while other applications utilize the MSN 9 client which invokes the dialer component directly.","Finally, an application  can also request  a connection or disconnection directly from the dialer component by calling the connection\/disconnection method described above as exposed by the Dialer COM interface.","In the described scenarios, connection and disconnection requests are directed to the dialer component which contains logic  for managing the connection.","In one example, a device includes a connector component. The connector component is a set of parameters that are provided to a dialer on a connection call. The parameters tell the dialer what phone number to call, how to dial the phone number, what hardware component (e.g., modem) to use, dialing properties (e.g., \u201c9\u201d for outside line, etc.), what credentials to use (e.g., user, device, etc.), and what parameters to input into the API for the dialer (e.g., configuration information). It includes the information needed to establish the connection  that is later shared when requested by a second application.","The connection information is saved in memory (e.g., stored in the registry), and when a connection is requested, the connector is used to tell which information to use to dial and create the connection. Further, in cases where one connection fails, the connector contains the \u201cnext best\u201d connector information for a dialer to try.","In one example, the connector is implemented by a dialer component and is invoked by the dialer in order to obtain configuration information for requesting the connection.","As previously stated, in one example a connection manager (e.g., dialer component) assembles information for input to a remote access service connection request. A previous example provided this information via a system registry. However, in another example the information is provided via a database, a file, or other data structure. In one such example, the information is provided as an XML file. For example, in the Apple MacIntosh platform, the information is stored in an XML file.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 11","b":["1100","1102"]},"A programmer creating a connection manager stores, updates, and obtains information associated with configuring a connector in the XML file. The schema is used to create methods that traverse or parse the XML file and store, update or obtain information required to issue a connection call on the remote access component, and maintain the features discussed.","In one example, a MacIntosh platform exposes an interface used by programmers to store and access files associated and including their programs.","The interface is called a PList , in XML, and has interfaces , that the connection manager calls into to manage connector information. For example, the connector , the dial rules , the phone book , and the location  are accessible via the PList interface  on the MacIntosh platform.","Thus, the connector information is stored in an XML file for access as needed by a connection manager.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 12"},"At , the method receives status data about a connection. The received data is data about an established connection to a remote resource, data returned from a connection request, and\/or data requested from a remote access service (e.g., connection bit rate request). Step  is optional since status data is pushed to the method without the method's request in some cases (e.g., RAS error code \u201c101\u201d connection dropped).","At , status data received at  is counted when the method increments a status identifier count in a status data structure.","At , the method determines a threshold based status response (i.e., action). For example, the method determines that a counted status identifier has a corresponding threshold value in a threshold response data structure.","At , the method performs the determined action. Optionally, a response or action may include a final step of resetting a status identifier record count. Whether or not a status count is reset, the method may continue while the connection is open or being requested.","In one example, a method requests a connection  on a remote access service. The method receives 1204 a no answer status code from the remote access service, and updates  a status data structure by incrementing a busy signal count . The method then accesses a TBSR table and determines  a method to perform  on a first occurrence of no answer (e.g., call \u201c678( )\u201d). For example, the 678( ) method may disable this \u201cno answer\u201d number  in the phone book for this dialing session. Other actions may include counting \u201cno answer\u201d or \u201cbusy\u201d status codes until the third occurrence, and then to disable this phone number from the phone book.","In one example, a connection manager uses this method  between connection requests. In one such example, after the connection manager records a busy signal , it rolls to the next phone number in the phone book, or to the next connector in the connector object , and then tries again to establish the connection. In this regard, the connection attempts for a dialing session are recorded in the status data structure as received for each phone number or connector parameter properties. Further, in another example this information is recorded in status records for multiple sessions, and phone numbers, connector properties, dialing properties, etc., are recorded and compared to threshold values in order to perform actions and behaviors indicated in a TBSR table intended to improve user experience. In one such example, these status codes are counted over plural dialing sessions. In such a case, a threshold response will provide behavior that alters a connection manager's behavior over plural sessions. In one such example, if a phone book number is busy three times over five sessions, that phone number is disabled, thereby improving a user experience.",{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 13"},"At , a method receives a connection status. Optionally, the received status was in response to a request  made by the method.","At , the method increments a connection status count in a status record.","At , a threshold based status response is invoked based on a response determined in a threshold based status response data structure.","At , determine whether it is time to send status record counts to a remote server. The logged status record count (e.g., a status data structure or representation thereof) is sent  to a remote server periodically, every successful connection, every 20 connection sessions, every week upon a request received from a remote server, etc. In another example, the record is sent upon request of a remote server.","At , receive a new status record (e.g., a status data structure) for future status recording purposes. The received data structure is returned in response to the sent  data structure in one example, although this is not required. A new log data structure can be pushed\/posted to the method during any session, and at any time during the connection session.","Optionally, the method receives  an updated or new threshold based status response data structure. This updated TBSR contains one or more new or altered actions, one or more new or altered thresholds for a status, and\/or one or more new status codes with associated thresholds and actions.","In the case of an updated status data structure or TBSR, the method begins using these updated data structures, properties, and methods when logging future status data received  and when determining and performing responses .",{"@attributes":{"id":"p-0106","num":"0105"},"figref":"FIG. 14"},"At , a method receives a connection request from an application.","At , the method accesses a status data structure to determine a highest status code count. In one example, a status code count is a count of the number of status codes returned on prior connection requests made by the method in this and prior connect request sessions. In another example a status code count also includes a count of status codes pushed to the method (i.e., as opposed to a status code received in response to requests) in this or prior connection sessions. In the examples discussed for , a status code is associated with a property, method, phone book, and\/or a connector. In one example, the highest status count of all such data structure codes is returned along with the number of times that the status indicator was counted (e.g., ).","At , the method determines a threshold based status response  corresponding with the highest status code (e.g., \u201c3\u201d) and identifier (e.g., \u201c678\u201d).","At , the method executes the determined threshold based action . In one example, the threshold based action changes the properties or methods of the data structure at the highest threshold location. For example, the highest threshold \u201c3\u201d is associated with a RAS code for no answer \u201c678\u201d, and the performed action disables the telephone number  associated with the highest threshold status code . Thus, local self-healing is performed in response to a determining threshold for a status code. A flag (e.g., ) in the phone book is set to disable this number. If desirable, the method  resets the status count  to zero.","At , the method obtains properties (e.g., input parameters) required for a connection request on a remote access service (e.g., a dialing sequence and\/or other input parameters for a dial method call). In one example, the method obtains a telephone number from a phone book. In one such example, a telephone number that would otherwise next be dialed, is not dialed because a flag or other property associated with that telephone number indicates that it is disabled.","At , a connection method (e.g., dial ( )) request with associated input parameters is called on a remote access service.","At , a response to a connection method request is received from a remote access service. The response comprises connection information. In one example, the connection information is a status code (e.g., RAS\/OT error codes).","At , if connection request is successful, go to , otherwise record a status code  in a status data structure and return to .","At , since a connection is made, return a connection handle to the entity that was requesting the connection above at step .",{"@attributes":{"id":"p-0116","num":"0115"},"figref":"FIG. 15","b":["1500","602","678","680","691","101"]},"At , a method attempts a dial-up connection. The method calls a dial( ) method on a RAS component of Microsoft Corporation.","At , the method determines whether or not the dial request resulted in a connection . For example, the connection request returns a success code indicator or method call output.","At , since no connection was created, the dial method returns an error code which is recorded in a status data structure.","At , the method determines whether a threshold response has been reached, and calls any associated method. For example, if status  has a threshold value of 3 (e.g., ), then method \u201c6023( )\u201d is called by this method, and then this method returns to try connecting again . In this example, upon a threshold of \u201c3\u201d, the five selected RAS error codes have methods identified as 6023( ), 6783( ), 6803( ), 6913( ), and 1013( ). In this example, upon a threshold value of \u201c7\u201d, the five selected RAS error codes have methods identified as 6027( ), 6787( ), 6807( ), 6917( ), and 1013( ). In this example, for all other thresholds  for the selected RAS error codes, the method provides no additional behavior and returns to try another connection attempt.","In one such example, upon reaching a \u201c602\u201d status count of \u201c3\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window as shown in .","In one such example, upon reaching a \u201c678\u201d status count of \u201c3\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window as shown in .","In one such example, upon reaching a \u201c101\u201d status count of \u201c3\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window as shown in .","In one such example, upon reaching a \u201c680\u201d status count of \u201c3\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window as shown in .","In one such example, upon reaching a \u201c691\u201d status count of \u201c3\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window as shown in .","In one such example, upon reaching a \u201c678\u201d, \u201c602\u201d, \u201c101\u201d, \u201c691\u201d, or \u201c680\u201d status count of \u201c7\u201d over one or more dialing session(s), the method determines  that a threshold response requires displaying a graphical window (not shown), that directs the customer to contact customer support via telephone or otherwise. Thus, this example proves a two threshold solution to resolving a user's connection problems. The first phase  provides graphical suggestions directly to the user to solve the problem, and the second phase  provides a user with contact information for resolving the problem.","Additionally, in several discussed examples, since status data structures such as ,  are sent to a remote server, that information is available to a customer service representative to help understand the operating environment and to help provide clues to resolving connection.","As other RAS errors have behaviors (e.g., threshold based responses) provided, that behavior is provided when data structures are added (e.g., ) and\/or when thresholds and corresponding methods are added (e.g., ) to the method . Thus data structure and threshold method updates are periodically sent to a connection manager on the device, and the connection manager updates the existing data structures or replaces them completely with new ones.","As previously discussed, methods perform actions attempting to improve efficiencies when threshold status indicators are determined. Preferably these actions perform executable instructions that alter program behavior dynamically according to a TBSR data structure and without human interaction. However, sometimes it is necessary to involve a human in a self-healing process. In such cases, an action  includes a pop-up or dialogue message requesting human help. For example, a window may instruct the user to reset the computer or return the telephone handset to the phone on the dial-up line in order to obtain a dial tone.",{"@attributes":{"id":"p-0130","num":"0129"},"figref":"FIG. 16","b":["1602","1604","1606"]},{"@attributes":{"id":"p-0131","num":"0130"},"figref":"FIG. 17","b":"1510"},{"@attributes":{"id":"p-0132","num":"0131"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0133","num":"0132"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0134","num":"0133"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0135","num":"0134"},"figref":"FIG. 21"},"In one example, connection logic stores information about status indicators in a status data structure. In one such example, the status data structure contains status records integrated into other components and\/or other data structures (e.g., when status indicators are associated with properties or methods). In one such example, a status count data structure is associated with properties, methods, or attributes such as connectors, dialing rules, or phone books as discussed with respect to , , and . In one such example, a status data structure is sent to a remote server for evaluation. In one such example, when a specific user contacts a customer service representative (e.g., via telephone, e-mail, etc), a status data structure received by a remote server, provides valuable information to the customer service representative for diagnosing and improving a customer's connection experience. In another example, a new status data structure (e.g., phone book) is received from a remote source, and used for future connection purposes. In one such example, a new status data structure is received without sending a present status data structure (e.g., improvements made without regard to status identifier counts in the present status data structure). Thus, actual connection request and connection status information is available on an individual basis based on a specific user's environment (e.g., as indicated by their logged status indicators) and or based on connection or network conditions in a region where a specific user is located (e.g., as indicated by aggregate information about plural user's logged status indicators). This allows individual responses to a specific user's environment (e.g., hardware, software, network connection, etc), or aggregate responses based on regional conditions (e.g., network traffic, etc).","In another example, a new (TBSR) data structure is received by connection logic. In another example, one or more new or updated actions (e.g., , , etc.) are received by connection logic. In this regard a new TBSR data structure with new status conditions, thresholds, and\/or new actions are performed by the connection logic in subsequent connection sessions. This allows programmers to dynamically offer new and better responses to more or new status codes, as they are developed.","In one example, status data structures, threshold based response data structures, and\/or new or updated responses are sent and\/or received by connection logic with one or more remote servers. In one such example, the objects are sent and\/or received in a serialized format (e.g., an XML file).","In another example, in addition to recorded status indicators recorded in a status data structure, an indicator of modem make, a modem model, a driver version, an OS version, and\/or a connection speeds are sent to a remote server. In one example, the information is sent to the server a few minutes (e.g., five minutes) into a connection session.","In another example, a connector and\/or a connection includes additional state and\/or data such as a connection type (e.g., LAN, dial-up, etc.), a modem name, or Ethernet card type, a phone book identification, a line speed, a phone number(s), dialing rules (e.g., number to dial for outside line, number to block call waiting, area code, suffix number, long distance carrier requirements, number for credit card calls) and\/or an IP address. Status indicator count records are associated with one or more of the described state and\/or data properties.","In one example, recorded status indicators are stored in an XML file and will be sent or uploaded to a remote server for analysis. In one such example, a device receives an XML file comprising a new connector and\/or phone book. In such an example, the phone book and\/or connector objects comprise new methods and properties, along with any associated status record associations. A connection manager thereafter records status indicators in the new associated status records. In another example, the connection manager receives a new threshold based status response data structure and\/or any associated new or improved methods called by the TBSR data structure (e.g., , , etc.).","In one example, a connection manager comprises a method discussed with respect to , , , and or . In one such example, a status data structure is sent from a connection manager to a remote server. In another such example, a new status data structure is received by the connection manager wherein said new data structure includes a new status indicator count record (e.g., ) not in a previous status data structure. Additionally, a connection manager receives a new threshold response data structure , that contains a new status indicator  and corresponding threshold value , and action . Additionally, a connection manage receives a new executable methods identified by the new threshold response data structure , . Thereafter, the connection manager counts the new status indicator(s) , determines that a threshold value is reached , and invokes a new executable method , . Thus, the provided technology provides a framework for evolving status based threshold responses based on individual user experiences as received and responded to, and or based on aggregate user experiences. In one such example, this is provided by sending and receiving status data structures, receiving threshold based response data structures, and receiving new threshold responses.",{"@attributes":{"id":"p-0143","num":"0142"},"figref":"FIG. 22"},"With reference to , an exemplary system for implementation includes a conventional computer  (such as personal computers, laptops, servers, mainframes, and other variety computers) includes a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The processing unit may be any of various commercially available processors, including Intel x86, Pentium and compatible microprocessors from Intel and others, including Cyrix, AMD and Nexgen; Alpha from Digital; MIPS from MIPS Technology, NEC, IDT, Siemens, and others; and the PowerPC from IBM and Motorola. Dual microprocessors and other multi-processor architectures also can be used as the processing unit .","The system bus may be any of several types of bus structure including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of conventional bus architectures such as PCI, VESA, AGP, Microchannel, ISA and EISA, to name a few. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS), containing the basic routines that help to transfer information between elements within the computer , such as during start-up, is stored in ROM .","The computer  further includes a hard disk drive , a magnetic disk drive , e.g., to read from or write to a removable disk , and an optical disk drive , e.g., for reading a CD-ROM disk  or to read from or write to other optical media. The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, etc. for the computer . Although the description of computer-readable media above refers to a hard disk, a removable magnetic disk and a CD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored in the drives and RAM , including an operating system , one or more application programs , other program modules , and program data ; in addition to an implementation .","A user may enter commands and information into the computer  through a keyboard  and pointing device, such as a mouse . These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor, computers typically include other peripheral output devices (not shown), such as speakers and printers.","The computer  operates in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a server, a router, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although only a memory storage device  has been illustrated. The logical connections depicted include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications (e.g., via the LAN  and a gateway or proxy server ) over the wide area network , such as the Internet. The modem , which may be internal or external, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computing devices may be used, wireless or otherwise.","Having described and illustrated the principles of our invention with reference to illustrated examples, it will be recognized that the examples can be modified in arrangement and detail without departing from such principles. Additionally, as will be apparent to ordinary computer scientists, portions of the examples or complete examples can be combined with other portions of other examples in whole or in part. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa. Techniques from one example can be incorporated into any of the other examples.","In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the details are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 22"}]},"DETDESC":[{},{}]}
