---
title: Proxy server with byte-based include interpreter
abstract: According to this disclosure, a proxy server is enhanced to be able to interpret instructions that specify how to modify an input object to create an output object to serve to a requesting client. Typically the instructions operate on binary data. For example, the instructions can be interpreted in a byte-based interpreter that directs the proxy as to what order, and from which source, to fill an output buffer that is served to the client. The instructions specify what changes to make to a generic input file. This functionality extends the capability of the proxy server in an open-ended fashion and enables it to efficiently create a wide variety of outputs for a given generic input file. The generic input file and/or the instructions may be cached at the proxy. The teachings hereof have applications in, among other things, the delivery of web content, streaming media, and the like.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09549022&OS=09549022&RS=09549022
owner: Akamai Technologies, Inc.
number: 09549022
owner_city: Cambridge
owner_country: US
publication_date: 20160411
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation of U.S. application Ser. No. 14\/498,971, filed Sep. 26, 2014, which is a continuation of U.S. application Ser. No. 13\/329,081, filed Dec. 16, 2011 (now issued as U.S. Pat. No. 8,880,633), which claims the benefit of priority of U.S. Provisional Application No. 61\/424,092, filed Dec. 17, 2010, and of U.S. Provisional Application No. 61\/555,378, filed Nov. 3, 2011, and of U.S. Provisional Application No. 61\/424,482, filed Dec. 17, 2010, and of U.S. Provisional Application No. 61\/424,112, filed Dec. 17, 2010. The disclosures of all of the foregoing applications are hereby incorporated by reference in their entireties.","This patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever.","Technical Field","This application relates generally to distributed data processing systems and to the delivery of content over computer networks.","Brief Description of the Related Art","Distributed computer systems are well-known in the prior art. One such distributed computer system is a \u201ccontent delivery network\u201d or \u201cCDN\u201d that is operated and managed by a service provider. The service provider typically provides the content delivery service on behalf of third parties. A \u201cdistributed system\u201d of this type typically refers to a collection of autonomous computers linked by a network or networks, together with the software, systems, protocols and techniques designed to facilitate various services, such as content delivery or the support of outsourced site infrastructure. Typically, \u201ccontent delivery\u201d refers to the storage, caching, or transmission of content, or streaming media or applications on behalf of content providers, and ancillary technologies used therewith including, without limitation, DNS query handling, provisioning, data monitoring and reporting, content targeting, personalization, and business intelligence.","In a known system such as that shown in , a distributed computer system  is configured as a content delivery network (CDN) and is assumed to have a set of machines -distributed around the Internet. Typically, most of the machines are servers located near the edge of the Internet, i.e., at or adjacent end user access networks. A network operations command center (NOCC)  may be used to administer and manage operations of the various machines in the system. Third party sites affiliated with content providers, such as web site , offload delivery of content (e.g., HTML, embedded page objects, streaming media, software downloads, and the like) to the distributed computer system  and, in particular, to the CDN's servers (which sometimes referred to as content servers, or as \u201cedge\u201d servers in light of the possibility that they are located near an \u201cedge\u201d of the Internet). Such content servers may be grouped together into a point of presence (POP) .","Typically, content providers offload their content delivery by aliasing (e.g., by a DNS CNAME) given content provider domains or sub-domains to domains that are managed by the service provider's authoritative domain name service. End users that desire such content may be directed to the distributed computer system to obtain that content more reliably and efficiently. Although not shown in detail, the distributed computer system may also include other infrastructure, such as a distributed data collection system  that collects usage and other data from the content servers, aggregates that data across a region or set of regions, and passes that data to other back-end systems , ,  and  to facilitate monitoring, logging, alerts, billing, management and other operational and administrative functions. Distributed network agents  monitor the network as well as the server loads and provide network, traffic and load data to a DNS query handling mechanism , which is authoritative for content domains being managed by the CDN. A distributed data transport mechanism  may be used to distribute control information (e.g., metadata to manage content, to facilitate load balancing, and the like) to the content servers.","As illustrated in , a given machine  in the CDN (sometimes referred to as an \u201cedge machine\u201d) comprises commodity hardware (e.g., an Intel Pentium processor)  running an operating system kernel (such as Linux or variant)  that supports one or more applications -. To facilitate content delivery services, for example, given machines typically run a set of applications, such as an HTTP proxy , a name server , a local monitoring process , a distributed data collection process , and the like. The HTTP proxy  (sometimes referred to herein as a global host or \u201cghost\u201d process) typically includes a manager process for managing a cache and delivery of content from the machine. For streaming media, the machine typically includes one or more media servers, such as a Windows Media Server (WMS) or Flash 2.0 server, as required by the supported media formats.","The machine shown in  may be configured to provide one or more extended content delivery features, preferably on a domain-specific, customer-specific basis, preferably using configuration files that are distributed to the content servers using a configuration system. A given configuration file preferably is XML-based and includes a set of content handling rules and directives that facilitate one or more advanced content handling features. The configuration file may be delivered to the CDN content server via the data transport mechanism. U.S. Pat. No. 7,111,057 illustrates a useful infrastructure for delivering and managing CDN server content control information and this and other content server control information (sometimes referred to as \u201cmetadata\u201d) can be provisioned by the CDN service provider itself, or (via an extranet or the like) the content provider customer who operates the origin server.","The CDN may include a network storage subsystem (sometimes referred to herein as \u201cNetStorage\u201d) which may be located in a network datacenter accessible to the content servers, such as described in U.S. Pat. No. 7,472,178, the disclosure of which is incorporated herein by reference.","The CDN may operate a server cache hierarchy to provide intermediate caching of customer content; one such cache hierarchy subsystem is described in U.S. Pat. No. 7,376,716, the disclosure of which is incorporated herein by reference.","For live streaming delivery, the CDN may include a live delivery subsystem, such as described in U.S. Pat. No. 7,296,082, and U.S. Publication No. 2011\/0173345, the disclosures of which are incorporated herein by reference.","There are many cases where, using a distributed computing system such as that described in connection with , it is desirable to be able to serve custom or semi-custom content to individual requesting end-user clients, given generic source content. This need may come from the client (which may need, for example, a particular format in which to consume streaming media) or from the content provider (which may desire, for example, that its content be watermarked with information about the client or user to which the content was delivered, or with other information about the circumstances of the delivery). Further, the nature of such requirements may change over time, for example, as new media formats become popular, or new watermarking techniques are deployed, or entirely new demands arise for providing tailored content.","Hence, there is a need to provide an improved content delivery platform that can delivery custom or semi-custom content at scale and while meeting real-time performance requirements. There is also a need for an extensible system that can handle an increasing number of content delivery demands in an efficient way. The teachings herein address these and other needs that will become apparent in view of this disclosure.","This disclosure describes, among other things, a functionality which is can be implemented in conjunction with an HTTP proxy server to generate output objects given an input object and certain instructions. The instructions typically define manipulations or actions to be performed on the input data. Such functionality is intended to enable modification of payloads as they are served to a requesting client, allowing a server to easily provide, among other things, custom or semi-custom content given a generic object.","In general, components other than the given server are made responsible for generating the transforming logic\u2014along with, in some cases, binary \u201cdiff\u201d information. The server is able to execute the instructions and use the diff information to modify a generic source object. Furthermore, depending on the situation, the inputs (e.g., the generic source object, instructions, etc.) as well as the output of the process may be cached.","For convenience of illustration, in this disclosure this function is called BSI, for Binary-edge-Side Includes, or Binary Server Integration. Details of BSI will be described in subsequent sections.","Hence, in one non-limiting aspect of the invention, there is provided a computer apparatus for delivering content to a client over a computer network. The apparatus has a processor, computer memory, and operating system. It runs an HTTP proxy application that has an output buffer associated therewith. Further, the apparatus has a byte-based interpreter that takes data from one or more sources. The sources typically define a piece of data to be placed in the output buffer as part of the response to the client request. Using one or more actions, the byte-based interpreter instructs the HTTP proxy as to what order, and from which source, to fill the output buffer to generate a response to a client HTTP request.","The one or more sources together with the one or more actions typically exhibit a syntax, which is preferably XML based.","The apparatus may further include a cache, for storing source data or the instructions that specify the sources and actions. This data and instructions may be received from another apparatus (e.g., retrieved at the time of a client request for content) and cached for re-use in responding to other clients.","By way of example, the actions typically define a byte-range, and may include such commands as combine, insert, substitute, and remove. The actions can be associated with a fragment that is stored for re-use in the cache. An action may also exhibit conditional logic. Hence, the byte-based interpreter can parse and sort the actions to be taken, constructing an output buffer to be filled to respond to the client, arranging bytes from one or more sources to fill that buffer.","In another non-limiting aspect of the invention, a computer apparatus has a processor and memory storing instructions for execution by the processor. When executed, they provide a special purpose machine. The special purposes machine receives a client's request for content. It obtains content that is responsive to the request (e.g., which content may be retrieved from an origin server, or from the cache, etc.), the content being made up of binary data. It applies instructions that specify how to order, modify, or replace one or more bytes within the binary data to create output data that represents modified content, and sends the modified content to the client in response to the request.","The instructions are typically obtained from another server in the content delivery network, at the time of the client request, or in anticipation thereof. The instructions may be cached for re-use in responding to requests of other clients.","The subject matter described herein has a wide variety of applications in content delivery, including for example in watermarking and media stream delivery (e.g., converting a stream from one format to another), among others.","As those skilled in the art will recognize, the foregoing description merely refers to examples of the invention. It is not limiting and the teachings hereof may be realized in a variety of systems, methods, apparatus, and non-transitory computer-readable media. It should also be noted that the allocation of functions to different machines is not, as the functions recited herein may be combined or split amongst different machines in a variety of ways.","The following description sets forth embodiments of the invention to provide an overall understanding of the principles of the structure, function, manufacture, and use of the methods and apparatus disclosed herein. The systems, methods and apparatus described herein and illustrated in the accompanying drawings are non-limiting examples; the scope of the invention is defined solely by the claims. The features described or illustrated in connection with one exemplary embodiment may be combined with the features of other embodiments. Such modifications and variations are intended to be included within the scope of the present invention. All patents, publications and references cited herein are expressly incorporated herein by reference in their entirety.","Overview","In the context of a distributed computer system for delivering content to end-users such as that shown in , an HTTP proxy in the content server  can be extended to include generic functionality that enables modification of payloads as they are served to a requesting client. This functionality allows a content server to easily provide, among other things, custom or semi-custom content at the edge. In an exemplary embodiment, this functionality can be built into the HTTP proxy (ghost) application on the content server, but in other embodiments it might be implemented external to ghost.","Typically, many modifications made by the content server result in a minimal overall change to content, meaning that the resulting data served to the requesting client differs from the input by, for example, only a few percent. In one embodiment, a mechanism is defined for representing the difference (or \u201cdiff\u201d) between the source(s) and output content, allowing a generic feature in the content server to handle an increasing number of problems in an efficient way.","In general, components other than the content server are made responsible for defining or generating transforming logic and for providing instructions\u2014along with binary \u201cdiff\u201d information\u2014that can be understood by the content server. By providing a mechanism for representing the difference (or \u201cdiff\u201d) between the source(s) and output content, and providing the content server with a way to use these to modify a generic source object, the client-facing content server may handle an increasing number of requests efficiently. Furthermore, depending on the circumstances, the inputs (e.g., the generic source object, instructions, etc.) may be cached. The output of the process also may be cached in some cases.","As noted previously, for convenience of illustration, in this disclosure this function is called BSI, for Binary-edge-Side Includes, or Binary Server Integration. The BSI language, with proposed syntax described below, defines different sources\u2014incoming pieces of data that help construct the final output. Instructions (like \u2018combine\u2019 and others) define the byte ranges and order of how to merge these inputs, as well as controlling output headers. When generated in real-time, the BSI fragment and source object both can be cached (e.g., at the content server), placing far less load on the BSI generation tier than the content server would have handling them directly. For fixed\/on-demand applications, the BSI may be generated once, and a BSI fragment cached (e.g., either on the content server, or on network storage or other dedicated storage subsystem).","The BSI approach is ideally very fast. Preferably, the syntax is WL-based, and the number of instructions typically is kept very low, allowing fast parsing. The execution of BSI instructs the content server what order, and from which source, to fill an output buffer that is served to the client.","For convenience of illustration, the discussion below refers to a BSI language and provides various examples of BSI instructions; however, the particular language, instructions, and functions discussed herein should be viewed as illustrative only and not as limiting.","Language","As noted, in one embodiment, the syntax is in XML, which can be advantageous for easy parsing and compatibility with other content server functionality (e.g., control file metadata which may also be implemented in XML).","BSI accepts a definition of one or more sources. Subsequent actions refer to a source id.",{"@attributes":{"id":"p-0045","num":"0044"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"203pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Tag","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bsi:source","Element","Defines a source for later reference by actions. Sample Tag:"]},{"entry":[{},{},"<bsi:source id=\u201ca\u201d type=\u201cremote\u201d target=\u201chttp:\/\/origin\/path\/resource\u201d"]},{"entry":[{},{},"\/>"]},{"entry":["bsi:source.id","Attribute,","Sets the ID used to reference this source. Preferably starts with a"]},{"entry":[{},"String","letter, is not case sensitive, and should typically be short (one letter"]},{"entry":[{},{},"typically). Proposed pattern {circumflex over (\u2009)}[a-zA-Z][a-zA-Z0-9_]{0-9}$."]},{"entry":[{},{},"Preferably there is a way to indicate current buffer as a source, which"]},{"entry":[{},{},"could be a special\/reserved character, or simply by omitting the id."]},{"entry":["bsi:source.type","Attribute,","Sets the type to one of the following."]},{"entry":[{},"Enum","Remote: a URL to so forward to (as needed by ranges) as a source."]},{"entry":[{},{},"Local: A binary blob appended to the BSI response. Offset defined by"]},{"entry":[{},{},"a header in this case."]},{"entry":[{},{},"Inline: The source is binary data that is defined directly in this tag."]},{"entry":[{},{},"This could be limited to Base64 or it could be implemented as a"]},{"entry":[{},{},"format field to define Ascii, base64, hex, etc. In this case the test that"]},{"entry":[{},{},"defines the source is included in the body of the source tag."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Actions","Next are actions, which here refer to defined sources by id and instruct on how to order bytes from different sources to build the output that is served. Actions are best structured to make them easy to parse and as succinct as possible. The interpreter is able to parse all needed actions, and to sort them by order of use as the output buffer is created. This keeps the amount of buffered data at a minimum, and it allows short circuiting processing at any point if the client disconnects or an error is encountered.","When possible, use of instructions like combine should be used, as it allows the compiler\/interpreter to easily determine the exact order of bytes for the entire output object, serving it without an intermediate buffer.",{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"210pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Tag","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bsi:combine","Element,","Defines a list of ranges to include from sources. It defines a list of"]},{"entry":[{},"list","elements with syntax [Source_ID] : [Byte_Offset] : [Length]. Each"]},{"entry":[{},{},"element in the list is added to the end of the current buffer. Specifying"]},{"entry":[{},{},"offset + length, rather than a range, to be more concise. Could also"]},{"entry":[{},{},"allow exclusion of Source_ID, in which case the previous source is"]},{"entry":[{},{},"assumed. Byte offsets or lengths can be expressed in decimal or HEX"]},{"entry":[{},{},"(must begin with 0x or x, more concise for large values), and should"]},{"entry":[{},{},"handle up to 64bit integer values (or at *least* 48bit unsigned). A"]},{"entry":[{},{},"value of \u2018*\u2019 for length would indicate until the end of the source."]},{"entry":[{},{},"Sample tag (mix and match ranges from 3 sources): <bsi:combine>["]},{"entry":[{},{},"b:0:0x128, a:68:90, a:92:65043, b:0x124:0x26, c:0:* ]<\/bsi:combine>"]},{"entry":["bsi:insert","Element","Specifies a list of elements, each one pulling a range from a source"]},{"entry":[{},{},"and inserting it at an offset into the current buffer - shifting the"]},{"entry":[{},{},"current buffer to accommodate. It defines a list of elements with"]},{"entry":[{},{},"syntax: [Source_ID] : [Source_Offset] : [Length] : [Dest_Offset]. If a"]},{"entry":[{},{},"buffer does not already exist, the Dest_offset must be 0. The length"]},{"entry":[{},{},"can be * to indicate the remainder of the source, and the dest_offset"]},{"entry":[{},{},"can be *, indicating that the data is appended to the end of the current"]},{"entry":[{},{},"buffer."]},{"entry":[{},{},"Sample tag (fill buffer with \u2018a\u2019, then insert sections of \u2018b\u2019):"]},{"entry":[{},{},"<bsi:insert>[ a:0:*:0, b:0:64:128, b:64:*:*]<\/bsi:insert>"]},{"entry":["bsi:substitute","Element,","Similar to Insert, but substitute overwrites the buffer, rather than"]},{"entry":[{},"list","shifting it. This action works upon the current buffer, and thus"]},{"entry":[{},{},"requires a buffer to already be built through use of bsi:combine or"]},{"entry":[{},{},"bsi:insert. It defines a list of elements with syntax: [Source_ID] :"]},{"entry":[{},{},"[Source_Offset] : [Length] : [Dest_Offset]. Each element defines a"]},{"entry":[{},{},"byte range to be taken from a source, and overlaid upon a buffer at a"]},{"entry":[{},{},"certain position - replacing a number of bytes equal to the length. If"]},{"entry":[{},{},"the length exceeds the current (planned) buffer, then the command"]},{"entry":[{},{},"would further increase the virtual buffer to be served. The length can"]},{"entry":[{},{},"be *, indicating the remainder of the source."]},{"entry":[{},{},"Sample tag (overwrite portions of buffer with ranges of \u2018b\u2019):"]},{"entry":[{},{},"<bsi:substitute>[ b:0:0x128:0x578, b:0x124:0x26:0x2048"]},{"entry":[{},{},"]<\/bsi:substitute>"]},{"entry":["bsi:remove","Element","Specifies a list of elements, each one removing a range from the"]},{"entry":[{},{},"current virtual buffer. It defines a list of elements with syntax:"]},{"entry":[{},{},"[Dest_Offset] : [Length]. The length can be * to indicate the"]},{"entry":[{},{},"remainder of the dest, and the dest_offset can be negative, indicating"]},{"entry":[{},{},"to go from the end of the file."]},{"entry":[{},{},"Sample tag (remove a few bytes in the middle and then truncate"]},{"entry":[{},{},"buffer at 256 bytes): <bsi:remove>[ 128:2, 256:* ]<\/bsi:remove>"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"The Insert instruction provides a way to apply a function to a group of bytes that have already been assigned to the output buffer. For example, the instruction might be needed to apply a cipher or hash to bytes that are contiguous in the output, but not in our sources, so a function during an initial combine operation is not useful. One way would be to allow operations to pull from the output buffer, as indicated by a source of *. An optional dest-length parameter on this operation may also be implemented, which would allow writing the result into the same block, but shift the bytes if needed. This would be useful for ciphers that might pad the data. (Because function is already an optional item, it may be needed to distinguish a function, e.g., by prepending $).\n\n","Non-Action Commands","These are commands that, unlike actions, do not directly act upon the output buffer.",{"@attributes":{"id":"p-0053","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Tag","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bsi:set","Element","Sets a value to a target, apart from the output buffer."]},{"entry":[{},{},"Sample tag (mix and match ranges from 3 sources):"]},{"entry":[{},{},"<bsi:combine>[ b:0:0x128, a:68:90, a:92:65043, b:0x124:0x26,"]},{"entry":[{},{},"c:0:* ]<\/bsi:combine>"]},{"entry":["bsi:set.target","Attribute,","Possible values include \u2018Header\u2019 or \u2018Response Code\u2019."]},{"entry":[{},"String"]},{"entry":["bsi:set.name","Attribute,","In the case of set target=\u201cheader\u201d, the name of the header to set."]},{"entry":[{},"String"]},{"entry":["bsi:set.value","Attribute,","The value to set"]},{"entry":[{},"String"]},{"entry":["bsi:validate","Element","Provides validation values to compare the output with. Could be"]},{"entry":[{},{},"useful in some cases, but would likely require buffering the whole"]},{"entry":[{},{},"file before serving (or else validating only for the purposes of the"]},{"entry":[{},{},"log) and so may not be efficient in many cases."]},{"entry":[{},{},"Sample tag: <bsi:validate length=\u201c67373\u201d"]},{"entry":[{},{},"md5=\u201cd8e8fca2dc0f896fd7cb4cb0031ba249\u201d \/>"]},{"entry":["bsi:validate.length","Attribute,","Ensure the content length is as-expected before serving"]},{"entry":[{},"Int"]},{"entry":["bsi:validate.md5","Attribute,","Ensure the buffer md5 matches what is expected before serving."]},{"entry":[{},"md5 hash"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Transform Functions","Transforms define functions that can be applied to byte ranges as they are used in other commands.",{"@attributes":{"id":"p-0056","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"168pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}},{"entry":["Tag","Type","Description"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["bsi:transform","Element","Assigns a transform to an ID for later use in actions or"]},{"entry":[{},{},"upon sources."]},{"entry":[{},{},"Sample tag: <bsi:transform id=\u201caes_enc\u201d"]},{"entry":[{},{},"type=\u201cENC_AES128CBC\u201d"]},{"entry":[{},{},"parameters=\u201ckey=123,iv=456\u201d \/>"]},{"entry":["bsi:transform.id","Attribute,","Same rules as IDs for sources, used to later refer to this"]},{"entry":[{},"String","transform."]},{"entry":[{},{},"Sample pattern {circumflex over (\u2009)}[a-zA-Z][a-zA-Z0-9_]{0-9}$"]},{"entry":["bsi:transform.type","Attribute,","Selects the supported transform to use. Possibilities"]},{"entry":[{},"Enum","include:"]},{"entry":[{},{},"Encryption\/decryption with ciphers such as AES, 3DES,"]},{"entry":[{},{},"RC4"]},{"entry":[{},{},"Encoding\/decoding with formats base64, url encoding,"]},{"entry":[{},{},"string encoding (ascii\/utf8, etc)"]},{"entry":[{},{},"Compression; zip, etc."]},{"entry":[{},{},"Hash functions; md5, sha1, sha256, CRC, etc."]},{"entry":[{},{},"Math functions"]},{"entry":["bsi:transform.parameters","Attribute,","A list of key\/value pairs of parameters as needed by the"]},{"entry":[{},"String","selected transform, like keys for encryption, etc."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}}}},"Other","To support certain use cases, it may be desired to allow metadata variables to be placed in the code. At runtime, the HTTP proxy substitutes these with variables in metadata context. Conditional logic is also important for several uses, but it may impact the very streamlined and easy-to-interpret language described above. To address this, an \u2018enabled\u2019 attribute may be added to each statement, with that attribute then being controlled with ARL metadata variables. The following shows this being used as a sort of IF\/ELSE, depending on how the variable % (TEST) evaluates.",{"@attributes":{"id":"p-0059","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"1.","<!--Do this if \u2018TEST\u2019 evals as true -->"]},{"entry":[{},"2.","<bsi:combine enabled=\u201c%(TEST)\u201d >[ b:0:128, a:68:90,"]},{"entry":[{},{},"a:92:65043 ]<\/bsi:combine>"]},{"entry":[{},"3.","<!--Otherwise, do this instead. -->"]},{"entry":[{},"4.","<bsi:combine enabled=\u201c!%(TEST)\u201d >[ b:129:1024,"]},{"entry":[{},{},"a:68024:2048, b:1153:64, c:0:*]<\/bsi:combine>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"In this example, the value of enabled would be evaluated as boolean, accepting 0\/1 or true\/false, and would also allow \u2018!\u2019 to indicate \u2018NOT\u2019. The metadata variable replacement is done prior to parsing the BSI statements; preferably, any caching of BSI fragments need not include the variable replacements.","Variants","For insert and substitute, there may be an optional syntax that allows the same source data to be injected at multiple points in the destination. Another optimization is a notation that indicates the pattern at which to insert given data, such as:\n\n","In this example, where starting at offset , the section of bytes from source b is inserted every 128 bytes, for 10 iterations, and so forth. Such encoding would reduce the size and redundancy in a BSI fragment for certain types of transforms. Or, instead of a mathematical component, the interpreter may operate to simply cause storage of full headers in the diff, but have a repeating statement that has two offsets, which would be very fast. For example, assume the fragment starts at byte 64 of source B, taking 14 bytes for the packet header, and repeats every 14 bytes 200 times, essentially storing each header one after another in the diff. Then, on the destination side place those bytes every 188 bytes\u2014for 200 iterations. This syntax is as follows:\n\n","Example Use Cases","Watermarking Use Case","Watermarking content delivered from the content server is one application of BSI. Watermarking processes typically require integration of application-specific code into the content server. BSI may be used instead.","Like many other use-cases for BSI, in the case of watermarking, the actual modification to output files is generally a very small percentage of the original data, and it can be efficiently represented with BSI instructions for rearranging the original source, or combining it along with a binary object that contained the replacement data.","This is very advantageous, as it allows for much faster integration with a watermarking technique, would not require changes at the content server, and would accommodate modifications to the watermarking scheme with no content server release changes.","In one embodiment, which is non-limiting, each BSI fragment (for example) represents the modifications needed for one unique user, so in many cases thousands of fragments would be needed. In another embodiment, for some watermarking applications the BSI would just contain instructions for rearranging the source content bytes. In others, new unique data may be needed to replace data in the original file (or added to it). In this case, this data could be created in parallel during the pre-processing. Ideally the replacement data set would be fairly small as many unique bytes could be used in different ways by the individual fragments.","In some cases, the replacement data may not be created during pre-processing but rather obtained at request time. For example, the BSI could specify replacement of source data with a piece of information gleaned from the client request, such as a user id, or a client IP address.","It may be desirable to make some transforms (like substitutions for watermarking in particular) optional, so if a source is not available, or based on a condition, the content server would not perform certain actions. This could be done with conditional constructs like if\/then or choose\/when, or by allowing a tag like bsi:substitute that was optional depending on the availability of the source content.",{"@attributes":{"id":"p-0072","num":"0078"},"figref":"FIG. 3","b":["1","300","301"]},"In step (), the watermarking preprocessor  generates a BSI fragment for each unique user that is authorized to view the file, which is uploaded to Storage with the content file. There might be hundreds or thousands of fragments depending on the number of expected users. If the watermark requires new unique bytes then the output could also contain a binary replacement data object.","In step (), an end-user client (typically a player application) requests a media file for progressive play or download. In step () the content server requests the appropriate BSI fragment (e.g., keyed by user\/watermark ID) from Storage , or retrieves it from cache, if available. Storage  is typically dedicated storage, such a remote network storage system (\u201cNetStorage\u201d). In step (), the BSI is sent from the Storage system  to the content server . The response may be accompanied by the input media file itself, but preferably the response contains a reference to the media file. In step (), the content server  obtains the source media file, e.g., from cache or Storage or an origin server, as appropriate. The content server  executes the BSI, modifying the media file per the instruction to create a watermarked media file for the given end user. The content server then serves the media file to the client. The content server preferably caches the BSI for re-use, as well as the input (generic) media file.","Streaming Use Case","In the streaming use case, BSI functionality can be applied between an upstream machine and the content server to streamline the creation of an output object (e.g., media in a format for iPhone or other client device) from an input source (e.g., a media file in a source format). This use case is particularly applicable with live and on-demand streaming platforms, such as those discussed in U.S. application Ser. No. 12\/858,177, filed Aug. 17, 2010 (now published as US Publication No. 2011\/0173345), and U.S. application Ser. No. 13\/329,057, filed Dec. 16, 2011, the contents of both of which are hereby incorporated by reference. Those applications describe, among other things, integrated HTTP-based delivery platforms that provide for the delivery online of HD-video quality content to the most popular runtime environments and to the latest devices in both fixed line and mobile environments. The platforms support delivery of both \u201clive\u201d and \u201con-demand\u201d content.","Generally, in the streaming use case, an intermediate machine in a streaming platform (such as the SMT machine in above-mentioned U.S. application Ser. No. 13\/329,057) receives a stream fragment in one format, be it the original source format, or an intermediate format (IF) used within the streaming platform, as described in the above-mentioned application. The intermediate machine performs muxing steps. Instead of muxed content as output, the intermediate machine creates a dynamic BSI fragment that can be served to the content server, along with a binary object that contains the additional bits that the content server needs to combine with the IF fragment. The content server uses this information to create the muxed output object in the target output format.",{"@attributes":{"id":"p-0078","num":"0084"},"figref":["FIG. 4","FIG. 4"],"b":["402","403","1","401","2","401","400","401","4","401","401","400","5","400"]},"As the vast bulk of the data, which is represented by the stream fragment, is cached at the content server, the BSI response with its binary diff typically might be around a few percent of the overall size of the object to be served. The content server  applies the BSI, generating and serving a muxed output object to the client (step ). The BSI response, including both the instructions and the diff data, can be cached by the content server  for some period of time. Preferably, the parameters supplied in the request to the intermediate machine  (in step ) are used in the cache key so that only subsequent requests for content with the same parameters utilize the cached BSI response. The output of the BSI operation need not be cached.","The foregoing approach can provide a variety of advantages. Because the BSI instructions can be used tell the content server how to mux or otherwise create the output object, BSI provides a way for the process to support any streaming container format without needing associated code changes at the content server. To handle new container formats or bug fixes to support existing container formats, BSI instructions can change, but the content server logic remains the same. This eliminates any cross-component dependency with the content server when developing or implementing new streaming features.","Further, for streaming to client devices using different container formats, BSI can reduce the cache footprint size because the content server caches the fragments but muxes them into different native formats. Preferably, the muxed output is not cached; rather, only the fragment is cached. For example, the system can be used to stream Adobe Zeri (HTTP Streaming for Flash) to Android devices running Flash 10.1 and stream to MPEG2-TS to iPhone devices. For the live stream, only the generic fragment is cached and the content server muxes into Zeri for Android devices and muxes into MPEG2-TS for IPhone devices. These are just representative examples.","For streaming of progressive-download-style formats (like Shoutcast), data is streamed to client as a long-running unbound HTTP download. From the end user client perspective, it is downloading a file that never ends. BSI functionality can be used for progressive-download-style formats and, in particular, to mux fragment responses from the origin (e.g., a content provider origin or CDN storage subsystem) into a continuous HTTP download stream for the client. Using metadata applied by the content server (configurable by content provider) and progressive-download-style BSI from the SMT, BSI can also be used to implement progressive-download-specific features, like jump-to-live-on-drift and delayed metadata injection based on user-agent. Specific progressive-download-style requirements thus can be inherently supported through BSI without requiring any changes in the content server.","Fragmented output streaming formats (like iPhone\u00ae, and Silverlight\u00ae) may also use BSI functionality. For example, the intermediate machine  can send the content server  content in an output format or a BSI fragment that the content server muxes into the output format. Enabling or disabling using BSI is configurable, preferably on a content provider by content provider basis, and, for a given content provider, on a site by site basis, or even a file by file basis.","Encryption Use Case","BSI provides some advantages, but not as many, when used for encryption\/decryption or compression\/decompression of content. These processes modify every single byte in the data, so any binary diff would be just as large as the content itself. Nevertheless, BSI might be useful in some cases if it had these capabilities as functions. For example, during a BSI transform a decryption step could be applied using the described approach.","Other Use Cases","Another example generic use is to handle changes to other processes, e.g., while a code change is pending to some component involved in the creation or delivery of the content (e.g., encoder, encrypter, content server, origin server). In addition to cases of adding functionality, BSI could be used as a temporary bug-fix that applies a transform to a file to change a behavior while a proper fix was released.","Another use case is transforming a content provider library in a simple way. As one example, some content providers may have media content that is playable, but it would be more efficient if, for example, the moov atom was moved to the front of the file, for faster progressive download. A BSI fragment could express this in a few bytes. For this and other applications, the content delivery system may include a tool that performs a diff on two binary files, and outputs the BSI and binary object needed to transform one into the other.","BSI Examples\u2014the following are non-limiting examples of BSI.","Watermarking","Here is an example for a typical watermarking use case, for progressive download content. A similar process could be done on stream fragments prior to muxing, but would require pre-processing to be done on the stream:",{"@attributes":{"id":"p-0092","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20021.","<!--assign a source to a progressive DL MP4 file -->"]},{"entry":["\u20022.","<bsi:source id=\u201ca\u201d type=\u201cremote\u201d target=\u201chttp:\/\/origin\/content.mp4\u201d"]},{"entry":[{},"\/>"]},{"entry":["\u20023.","<!--assign a source to a file containing replacement data for"]},{"entry":[{},"watermarks -->"]},{"entry":["\u20024.","<bsi:source id=\u201cb\u201d type=\u201cremote\u201d target=\u201chttp:\/\/origin\/content.repl\u201d"]},{"entry":[{},"\/>"]},{"entry":["\u20025.","<!-- combine the two sources, inserting watermark data into original"]},{"entry":[{},"file. -->"]},{"entry":["\u20026.","<!-- This would typically be a transform every 10-"]},{"entry":[{},"60s of content by playtime, up to 400 or so for a full-length movie."]},{"entry":[{},"-->"]},{"entry":["\u20027.","<bsi:combine>"]},{"entry":["\u20028.","a:0x0:0x10307076c03, b:0xb342c3:0x710c,"]},{"entry":["\u20029.","a:0x1030707DD0F:0x9d309, b:0x7684b6:0x1a18,"]},{"entry":["10.","..."]},{"entry":["11.","<\/bsi:combine>"]},{"entry":["12.","<!--Set content length explicitly, so maybe the HTTP"]},{"entry":[{},"proxy doesn't have to use chunked encoding. If not set, chunked"]},{"entry":[{},"could be the default. -->"]},{"entry":["13.","<bsi:set target=\u201cheader\u201d name=\u201cContent-Length\u201d"]},{"entry":[{},"value=\u201c2147483647\u201d \/>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Muxing in a Streaming Platform","Here is an example for muxing that shows the usage of BSI tags:",{"@attributes":{"id":"p-0095","num":"0101"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20021.","<!--assign a source from a remote file that HTTP proxy will fetch, in"]},{"entry":[{},"this case IF. -->"]},{"entry":["\u20022.","<bsi:source id=\u201ca\u201d type=\u201cremote\u201d"]},{"entry":[{},"target=\u201chttp:\/\/origin\/IF_Fragment(time=%(TIME), bitrate=%("]},{"entry":[{},"BITRATE))\u201d \/>"]},{"entry":["\u20023.","<!--assign a source from \u2018local\u2019, meaning the binary that is appended"]},{"entry":[{},"to this response -->"]},{"entry":["\u20024.","<!--a header could tell the HTTP"]},{"entry":[{},"proxy where the XML response ends, and binary begins, for"]},{"entry":[{},"efficiency-->"]},{"entry":["\u20025.","<bsi:source id=\u201cb\u201d type=\u201clocal\u201d \/>"]},{"entry":["\u20026.","<!-- Though not as efficient you could assign a source from inline"]},{"entry":[{},"data, say in base64 -->"]},{"entry":["\u20027.","<bsi:source id=\u201cc\u201d type=\u201cinline\u201d"]},{"entry":[{},">bGxvdy11cCAoc29tZSBhbWJpZ3VpdHkgaGVyZSB3ZSBu"]},{"entry":[{},"ZWVkIHRvIGNsZWFu=<\/bsi:source>"]},{"entry":["\u20028.","<!-- combine the two sources, by providing a collection with source"]},{"entry":[{},"id : byte offset : length -->"]},{"entry":["\u20029.","<bsi:combine>[ b:0:128, a:68:90, a:92:65043, b:129:1024,"]},{"entry":[{},"a:68024:2048, b:1153:64, c:0:* ]<\/bsi :combine>"]},{"entry":["10.","<!--optional validate tag would enforce that the content-"]},{"entry":[{},"length and hash of output are as expected -->"]},{"entry":["11.","<bsi:validate length=\u201c67373\u201d"]},{"entry":[{},"md5=\u201cd8e8fca2dc0f896fd7cb4cb0031ba249\u201d \/>"]},{"entry":["12.","<!--This kind of thing is done as a function in edge-side-includes,"]},{"entry":[{},"rather than a first class tag. -->"]},{"entry":["13.","<bsi:set target=\u201cheader\u201d name=\u201cContent-Type\u201d value=\u201cvideo\/flv\u201d"]},{"entry":[{},"\/>"]},{"entry":["14.","<bsi:set target=\u201cheader\u201d name=\u201cContent-Length\u201d"]},{"entry":[{},"value=\u201c2147483647\u201d \/>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In some use cases like muxing, the BSI and replacement data can be generated dynamically, so the techniques herein also allow the data to be appended to the BSI fragment to prevent needing another roundtrip request. Thus, for example, a header could indicate that a particular binary blob is appended to the BSI code, for easier parsing by the content server:\n\n","Functions\/Transforms","For handling encryption or other transforms inline:",{"@attributes":{"id":"p-0099","num":"0106"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20021.","<bsi:source id=\u201ca\u201d type=\u201cremote\u201d"]},{"entry":[{},"target=\u201chttp:\/\/origin\/IF_Fragment(time=1234567, bitrate=120"]},{"entry":[{},"0)\u201d \/>"]},{"entry":["\u20022.","<bsi:source id=\u201cb\u201d type=\u201clocal\u201d range=\u201c*\u201d \/>"]},{"entry":["\u20023.","<bsi:source id=\u201cc\u201d type=\u201clocal\u201d range=\u201c*\u201d transform=\u201csha1\u201d\/>"]},{"entry":["\u20024.","<!--"]},{"entry":[{},"Content is encrypted, so assign a transform (Functional BSI :) and"]},{"entry":[{},"apply it during the combine -- >"]},{"entry":["\u20025.","<bsi:transform id=\u201cenc\u201d type=\u201c%(CIPHER)\u201d"]},{"entry":[{},"parameters=\u201c%(CIPHER_KV_PARAMS)\u201d \/>"]},{"entry":["\u20026.","<bsi:transform id=\u201csha1\u201d type=\u201cHASH_SHA1\u201d \/>"]},{"entry":["\u20027.","<!--"]},{"entry":[{},"combine the two sources, by providing a collection with source"]},{"entry":[{},"id : byte offset : length [ : TRAN SFORM ] -->"]},{"entry":["\u20028.","<bsi:combine>[ b:0:128, a:68:90:$enc, a:92:65043, b:129:1024,"]},{"entry":[{},"a:68024:2048, b:1153:64, c:0:* ]<\/bsi:combine>"]},{"entry":["\u20029.","<!-- optionally insert ECM and encrypt a portion directly from (and"]},{"entry":[{},"back to) output buffer -->"]},{"entry":["10.","<bsi:insert enabled=\u201c!%(ENC_ENABLED)\u201d >[ b:1217:128:512,"]},{"entry":[{},"*:512:1024:512:1024:$enc, b:1 345:128:2034,"]},{"entry":[{},"*:2034:256:2034:256:$enc ]<\/bsi:insert>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Pulling content from the output buffer means that the data must be buffered during BSI processing, as opposed to use of only the combine statement, which would allow the HTTP proxy to continuously flush this data.","Additional Actions","Other methods of manipulating data beyond bsi:combine, like substitute, remove, or insert, that could act upon the current buffer, may be implemented.",{"@attributes":{"id":"p-0103","num":"0110"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u20021.","<bsi:source id=\u201ca\u201d type=\u201cremote\u201d target=\u201chttp:\/\/origin\/resource?id\u201d"]},{"entry":[{},"\/>"]},{"entry":["\u20022.","<bsi:source id=\u201cb\u201d type=\u201cremote\u201d target=\u201chttp:\/\/something\/else\/\u201d \/>"]},{"entry":"\u20023."},{"entry":["\u20024.","<!-- in this case we just need to inject something. This would act"]},{"entry":[{},"upon the current buffer. -->"]},{"entry":["\u20025.","<!-- first fill the buffer with a, then insert the contents of b -->"]},{"entry":["\u20026.","<bsi:insert>[ a:0:*:0, b:0:128:1024 ]<\/bsi:insert>"]},{"entry":["\u20027.","<!-- and in this case we need to overwrite bytes, not shift them -->"]},{"entry":["\u20028.","<bsi:substitute>[ b:128:16:2048 ]<\/bsi:substitute>"]},{"entry":["\u20029.","<!--Finally, remove a few bytes -->"]},{"entry":["10.","<bsi:remove>[ 2048:8 ]<\/bsi:remove>"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Computer Based Implementation","The clients, servers, and other devices described herein may be implemented with conventional computer systems, as modified by the teachings hereof, with the functional characteristics described above realized in special-purpose hardware, general-purpose hardware configured by software stored therein for special purposes, or a combination thereof.","Software may include one or several discrete programs. Any given function may comprise part of any given module, process, execution thread, or other such programming construct. Generalizing, each function described above may be implemented as computer code, namely, as a set of computer instructions, executable in one or more processors to provide a special purpose machine. The code may be executed using conventional apparatus\u2014such as a processor in a computer, digital data processing device, or other computing apparatus\u2014as modified by the teachings hereof. In one embodiment, such software may be implemented in a programming language that runs in conjunction with a proxy on a standard Intel hardware platform running an operating system such as Linux. The functionality may be built into the proxy code, or it may be executed as an adjunct to that code, such as the \u201cinterpreter\u201d referenced above.","While in some cases above a particular order of operations performed by certain embodiments is set forth, it should be understood that such order is exemplary and that they may be performed in a different order, combined, or the like. Moreover, some of the functions may be combined or shared in given instructions, program sequences, code portions, and the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic.",{"@attributes":{"id":"p-0108","num":"0115"},"figref":"FIG. 5","b":["500","500"]},"Computer system  includes a processor  coupled to bus . In some systems, multiple processor and\/or processor cores may be employed. Computer system  further includes a main memory , such as a random access memory (RAM) or other storage device, coupled to the bus  for storing information and instructions to be executed by processor . A read only memory (ROM)  is coupled to the bus  for storing information and instructions for processor . A non-volatile storage device , such as a magnetic disk, solid state memory (e.g., flash memory), or optical disk, is provided and coupled to bus  for storing information and instructions. Other application-specific integrated circuits (ASICs), field programmable gate arrays (FPGAs) or circuitry may be included in the computer system  to perform functions described herein.","A peripheral interface  communicatively couples computer system  to a user display  that displays the output of software executing on the computer system, and an input device  (e.g., a keyboard, mouse, trackpad, touchscreen) that communicates user input and instructions to the computer system . The peripheral interface  may include interface circuitry, control and\/or level-shifting logic for local buses such as RS-485, Universal Serial Bus (USB), IEEE 1394, or other communication links.","Computer system  is coupled to a communication interface  that provides a link (e.g., at a physical layer, data link layer, or otherwise) between the system bus  and an external communication link. The communication interface  provides a network link . The communication interface  may represent a Ethernet or other network interface card (NIC), a wireless interface, modem, an optical interface, or other kind of input\/output interface.","Network link  provides data communication through one or more networks to other devices. Such devices include other computer systems that are part of a local area network (LAN) . Furthermore, the network link  provides a link, via an internet service provider (ISP) , to the Internet . In turn, the Internet  may provide a link to other computing systems such as a remote server  and\/or a remote client . Network link  and such networks may transmit data using packet-switched, circuit-switched, or other data-transmission approaches.","In operation, the computer system  may implement the functionality described herein as a result of the processor executing code. Such code may be read from or stored on a non-transitory computer-readable medium, such as memory , ROM , or storage device . Other forms of non-transitory computer-readable media include disks, tapes, magnetic media, CD-ROMs, optical media, RAM, PROM, EPROM, and EEPROM. Any other non-transitory computer-readable medium may be employed. Executing code may also be read from network link  (e.g., following storage in an interface buffer, local memory, or other circuitry).","It should be understood that the foregoing has presented certain embodiments of the invention that should not be construed as limiting. For example, certain language, syntax, and instructions have been presented above for illustrative purposes, and they should not be construed as limiting. It is contemplated that those skilled in the art will recognize other possible implementations in view of this disclosure and in accordance with its scope and spirit. The appended claims define the subject matter for which protection is sought.","It is noted that trademarks appearing herein are the property of their respective owners and used for identification and descriptive purposes only, given the nature of the subject matter at issue, and not to imply endorsement or affiliation in any way.","Pursuant to 37 CFR 1.96(b)(2), a computer program listing illustrating an example of a BSI interpreter is included below:",{"@attributes":{"id":"p-0117","num":"0124"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#!\/usr\/bin\/env python"},{"entry":"# encoding: utf-8"},{"entry":"\u201c\u201c\u201c"},{"entry":"bsi.py : Binary Server Includes (BSI) Interpreter"},{"entry":"Copyright (c) 2011 Akamai Technologies. All rights reserved."},{"entry":"\u201d\u201d\u201d"},{"entry":"import sys, os"},{"entry":"import getopt"},{"entry":"import xml.sax"},{"entry":"import xml.sax.handler"},{"entry":"import httplib"},{"entry":"import argparse"},{"entry":"args = None"},{"entry":"class Usage(Exception):"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def init(self, msg):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.msg = msg"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"class ErrorHandler:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003def init(self, parser):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.parser = parser"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"\u2003def fatalError(self, msg):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print msg"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"class Instruction(object):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def init(self, source, start, length):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.source = source.strip( )"]},{"entry":[{},"self.start = int(start)"]},{"entry":[{},"self.length = int(length)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def repr(self):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return self.source + \u201c \u201d + str(self.start) + \u201c-\u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"str(self.length)"},{"entry":"class Source(object):"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"target = None"]},{"entry":[{},"file = None"]},{"entry":[{},"data = None"]},{"entry":[{},"def init(self, id, type=\u201cremote\u201d, target=None):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.type = type"]},{"entry":[{},"self.id = id"]},{"entry":[{},"self.target=target"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def repr(self):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return self.type + \u201c: \u201d + str(self.target) + \u201c, \u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"str(self.file)"},{"entry":"class BsiHandler(xml.sax.handler.ContentHandler):"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def init(self):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.inCombine = 0"]},{"entry":[{},"self.inSource = 0"]},{"entry":[{},"self.inOther = 0"]},{"entry":[{},"self.instructions = [ ]"]},{"entry":[{},"self.sources = { }"]},{"entry":[{},"self.compile = \u201c.\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def startElement(self, name, attributes):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#print name + \u201c!\u201d"]},{"entry":[{},"if (args.verbose):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"print name,"]},{"entry":[{},"for a in attributes.keys( ):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u201c, \u201d + a + \u201c=\u201d + attributes[a].rstrip( ),"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u201c\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.inOther = 1"]},{"entry":[{},"if name == \u201csource\u201d:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.inSource = 1"]},{"entry":[{},"self.inOther = 0"]},{"entry":[{},"self.currentSource = Source(attributes[\u201cid\u201d],"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"attributes[\u201ctype\u201d], attributes[\u201ctarget\u201d])"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.sources[attributes[\u201cid\u201d]] = self.currentSource"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if name == \u201ccombine\u201d:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.inCombine = 1"]},{"entry":[{},"self.inOther = 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#print (str(self) + \u201c, \u201d + str(name) + \u201c, \u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"str(attributes), \u201c comp: \u201d + str(self.compile))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(self.compile != None):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (name==\u201cbsi\u201d):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c<bsi\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c <\u201d + name)#+ \u201c>\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if len(attributes) > 0:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for a in attributes.items( ):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c \u201d + a[0] + \u201c=\\\u201d\u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"a[1] + \u201c\\\u201d\u201d);"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def characters(self, data):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if self.inCombine:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"elements = data[1:\u22121].split(\u2018,\u2019)"]},{"entry":[{},"for element in elements:"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"esplit = element.split(\u2018:\u2019)"]},{"entry":[{},"inst = Instruction( esplit[0], esplit[1], esplit[2] )"]},{"entry":[{},"self.instructions.append(inst)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elif self.inSource:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.currentSource.data = data"]},{"entry":[{},"if(self.compile != None):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(data == None or len(data)==0):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c \/>\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.compile.write(\u201c>\u201d)"]},{"entry":[{},"self.compile.write(data)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elif self.inOther:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.compile.write(\u201c>\\n\u201d)"]},{"entry":[{},"self.inOther = 0"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"def endElement(self, name):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if self.inCombine :"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.inCombine = 0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elif self.inSource:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"self.inSource = 0"]},{"entry":[{},"if(self.compile != None):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(self.currentSource.data == None):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c \/>\\n\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c<\/\u201d + name + \u201c>\\n\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"elif (name != \u201cbsi\u201d):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(self.compile != None):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"self.compile.write(\u201c<\/\u201d + name + \u201c>\\n\u201d)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#if self.inCombine:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def parse (in_file, comp_file):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(in_file is httplib.HTTPConnection):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"in_file.request(\u201cGET\u201d, \u201cin_file\u201d)"]},{"entry":[{},"r1 = in_file.getresponse( )"]},{"entry":[{},"if (args.verbose):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print r1.status, r1.reason"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"data = r1.read( )"]},{"entry":[{},"temp.write(data)"]},{"entry":[{},"in_file.close( )"]},{"entry":[{},"in_file = temp"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (args.verbose):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u201cParsing: \u201d + str(in_file)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"parser = xml.sax.make_parser( )"]},{"entry":[{},"handler = BsiHandler( )"]},{"entry":[{},"handler.compile = comp_file"]},{"entry":[{},"parser.setContentHandler(handler)"]},{"entry":[{},"parser.setErrorHandler(ErrorHandler(parser))"]},{"entry":[{},"parser.parse(in_file)"]},{"entry":[{},"return handler.instructions, handler.sources"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def get_file(in_file, arg=\u2018r\u2019):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(arg==\u2018r\u2019 and (in_file == \u201c\u201d or in_file==None)):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return sys.stdin"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(in_file.startswith(\u201chttp\u201d) and arg==\u2018r\u2019):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"print \u201chttp\u201d"]},{"entry":[{},"return httplib.HTTPConnection(in_file)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"fname = os.path.abspath(in_file)"]},{"entry":[{},"if (args.verbose):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u201cFile: \u201d + str(fname) + \u201c \u201d + arg"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return open(fname, arg)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"except:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u201cError opening \u201d + in_file + \u201c, \u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"str(sys.exc_info( )[0])"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return None"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def execute (instructions, sources, output, comp_file):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for source in sources.values( ):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(source.target.startswith(\u201chttp\u201d)):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"source.file = httplib.HTTPConnection(sources[source])"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"f = os.path.abspath(source.target)"]},{"entry":[{},"source.file = open(f, \u2018rb\u2019)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (output==None or output==\u201c\u201d):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = sys.stdout"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output = open(output, \u2018r+b\u2019)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if (args.verbose):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for inst in instructions:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print str(inst) + \u201c,\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print \u2018\\n-------------------------------------\u2019"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(comp_file != None):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"comp_file.write(\u201c <combine>\u201d)"]},{"entry":[{},"first = True"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for inst in instructions:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#get data for this inst."]},{"entry":[{},"data ="]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"getData(sources[inst.source].file,inst.start,inst.length)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#write data to output"]},{"entry":[{},"output.write(data)"]},{"entry":[{},"if (comp_file):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"if (not first): comp_file.write(\u201c,\u201d)"]},{"entry":[{},"comp_file.write(str(inst.source)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"+\u201c:\u201d+str(inst.start)+\u201c:\u201d+str(inst.length))"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"first = False"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if(comp_file != None):"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"comp_file.write(\u201c<\/combine>\\n<\/bsi>\\n\u201d)"]},{"entry":[{},"comp_file.close( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#close input\/output files"]},{"entry":[{},"for s in sources.values( ):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s.file.close( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"output.close( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def getData(inp,start,length):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"data = None"]},{"entry":[{},"if (inp is httplib.HTTPConnection):"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"inp.request(\u201cGET\u201d, \u201cin_file\u201d)"]},{"entry":[{},"inp.putheader(\u201cRange\u201d, str(start) + \u201c-\u201d + str(start +"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"length) + \u201c bytes\u201d)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"inp.endheaders( )"]},{"entry":[{},"r1 = inp.getresponse( )"]},{"entry":[{},"print r1.status, r1.reason"]},{"entry":[{},"data = r1.read( )"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"inp.seek(start)"]},{"entry":[{},"data = inp.read(length)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"return data"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def get_args(argv):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if argv is None:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"argv = sys.argv"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"try:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"parser = argparse.ArgumentParser( )"]},{"entry":[{},"parser.add_argument(\u201c-i\u201d, \u2018--in_file\u2019, dest=\u201cin_file\u201d,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"help=\u201cInput BSI file to process\u201d)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"parser.add_argument(\u201c-o\u201d, \u2018--output\u2019, dest=\u201coutput\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"help=\u201cOutput results to file (rather than std_out)\u201d)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"parser.add_argument(\u201c-c\u201d, \u201c--compile\u201d, dest=\u201ccompile\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"help=\u201cOutput optimal BSI\u201d)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"parser.add_argument(\u201c-v\u201d, \u201c--verbose\u201d, action=\u201cstore_true\u201d,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dest=\u201cverbose\u201d, default=False, help=\u201cprint status messages to"},{"entry":"stdout\u201d)"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"args = parser.parse_args( );"]},{"entry":[{},"if (args.verbose): print \u201cArgs: \u201d + str(args)"]},{"entry":[{},"return args"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"except Usage, err:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"print >> sys.stderr, sys.argv[0].split(\u201c\/\u201d)[\u22121] + \u201c: \u201d +"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"str(err.msg)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"print >> sys.stderr, \u201c\\t for help use --help\u201d"]},{"entry":[{},"return None"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"def main(argv=None):"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#get command arguments"]},{"entry":[{},"global args"]},{"entry":[{},"args = get_args(argv)"]},{"entry":[{},"#set up output compiled file"]},{"entry":[{},"comp_file = get_file(args.compile, \u201cw\u201d)"]},{"entry":[{},"#set up input BSI file"]},{"entry":[{},"bsi = get_file(args.in_file)"]},{"entry":[{},"#parse bsi, compiling instructions and resolving source lisrt"]},{"entry":[{},"instructions, sources = parse (bsi, comp_file)"]},{"entry":[{},"#execute instructions"]},{"entry":[{},"execute (instructions, sources, args.output, comp_file)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"if name == \u201cmain\u201d:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"sys.exit(main( ))"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be more fully understood from the following detailed description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
