---
title: Mechanism for transparent real-time media server fail-over with idle-state nodes
abstract: In one embodiment, a mechanism for transparent real-time media server fail-over with idle-state nodes is disclosed. In one embodiment, a method includes replicating a start time of a request related to a bidirectional stream of media sent to an original master media server, receiving notification of selection as a new master media server after failure of the original master media server, determining an offset time by subtracting the replicated request start time from a current time, and resuming playback of the request at the offset time within the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08009555&OS=08009555&RS=08009555
owner: Red Hat, Inc.
number: 08009555
owner_city: Raleigh
owner_country: US
publication_date: 20090225
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DETAILED DESCRIPTION"],"p":["The embodiments of the invention relate generally to media servers for a telecommunications platform and, more specifically, relate to a mechanism for transparent real-time media server fail-over with idle-state nodes.","With the continued progress of globalization, more corporations than ever before have workgroups spread across countries and continents across the world. To support and increase the productivity of remote and telecommuting workgroups, communications companies are considering more cost effective network services and solutions that combine voice, wireless, data and video functionality. Acquiring these desired network services and solutions requires connections from the Internet and wireless and wireline networks to Public Switched Telephone Networks (PSTNs) using a flexible, robust, scalable and cost-effective media gateway.","Today, all communications can be routed through computers. Widespread access to broadband Internet and the ubiquity of Internet Protocol (IP) enable the convergence of voice, data and video. Media gateways provide the ability to switch voice media between a network and its access point. Using Digital Subscriber Line (DSL) and fast-Internet cable technology, a media gateway converts, compresses, and packetizes voice data for transmission back-and-forth across the Internet backbone for wireline and wireless phones. Media gateways sit at the intersection of the PSTNs and wireless or IP-based networks.","Multiple market demands are pushing companies to converge all of their media services using media gateways with VoIP capabilities. As such, the development of media servers has allowed this convergence of media services into media gateways with VoIP capabilities. A media server is responsible for sending a continuous stream of data representing audio, video or other media in real-time. Often times, high-availability for these systems are desired. To obtain high-availability more than one server is run, with one of them operating as the master (serving the clients directly) and the others operating in standby mode (called \u201cbackup nodes\u201d). If the master fails, a new master is selected from the backup nodes to serve clients. This switch from old master to new master is called fail-over. Transparent fail-over is when the clients do not notice the switch between servers.","In order to achieve transparent failover, the backup nodes must be aware of what the master is sending at any time. This typically requires all requests to be executed on all nodes simultaneously and the state of the master to be replicated to the other nodes so that they are ready to take over the master at any time. Usually, this is achieved via a standard technique to synchronize all of the servers by replicating the current buffer\/segment of the data that is being sent through all of the back-up nodes. This synchronization is done many times every second. Unfortunately, executing all requests on all nodes is a time and resource consuming process for the media server. Therefore, a mechanism to provide time and resource efficient transparent fail-over for media server nodes would be beneficial.","Embodiments of the invention provide a mechanism for transparent real-time media server fail-over with idle-state nodes. In one embodiment, a method of transparent real-time media server fail-over with idle-state nodes includes replicating a start time of a request related to a bidirectional stream of media sent to an original master media server, receiving notification of selection as a new master media server after failure of the original master media server, determining an offset time by subtracting the replicated request start time from a current time, and resuming playback of the request at the offset time within the request.","In the following description, numerous details are set forth. It will be apparent, however, to one skilled in the art, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201csending\u201d, \u201creceiving\u201d, \u201cattaching\u201d, \u201cforwarding\u201d, \u201ccaching\u201d, or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.","The present invention may be provided as a computer program product, or software, that may include a machine-readable medium having stored thereon instructions, which may be used to program a computer system (or other electronic devices) to perform a process according to the present invention. A machine-readable medium includes any mechanism for storing or transmitting information in a form readable by a machine (e.g., a computer). For example, a machine-readable (e.g., computer-readable) medium includes a machine (e.g., a computer) readable storage medium (e.g., read only memory (\u201cROM\u201d), random access memory (\u201cRAM\u201d), magnetic disk storage media, optical storage media, flash memory devices, etc.), a machine (e.g., computer) readable transmission medium (non-propagating electrical, optical, or acoustical signals), etc.","Embodiments of the invention provide a mechanism for transparent real-time media server fail-over with idle-state nodes. The mechanism for transparent real-time media server fail-over with idle-state nodes reduces the resources needed to achieve transparent fail-over by having backup media server nodes only keep track of two items for fail-over purposes: (1) what requests arrive at a master media server and (2) at what time they arrive. Embodiments of the invention are based on the concept of \u201cstate=time\u201d. When a media server node knows the request time, it will also know from where to resume the request by subtracting the request start time from the time of failure (i.e., the current time). Because the request time is known by all nodes, no other state information of the master media server needs to be replicated to the backup media servers in order for transparent fail-over to operate correctly. As a result, valuable time and resources can be conserved.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","120","130","120"]},"Within the PSTN , one or more businesses or consumers may place calls via telephones . Telephones  are connected to class V switches . Class V switches  are telephone switches or exchanges that directly serve subscribers. The class V switches  are in turn connected to a class IV switch . The Class IV switch  is a tandem switch or exchange connecting the various areas of a city or towns in a region, and is not directly connected to the end user or subscriber.","The class IV switch  is connected to the IP LAN  via a Media Gateway . In one embodiment, the media gateway  is a JBoss Communications Platform server. One task of the media gateway  is to convert PSTN signals into IP packets and vice versa. The media gateway  may also operate as a Session Border Controller at the boundaries of the IP LAN .","IP LAN  may also include one or more application servers , such as JBoss\u2122 application servers. Lastly, the IP LAN  may include one or more high-availability media servers  that may reside on the same or different computing devices. In one embodiment, the media servers  are Mobicents\u2122 Media Servers.","Media servers  offer a complete media gateway and server solution. Some capabilities of media servers  include, but are not limited to, digital signal processing to convert and compress voice circuit-switched signals into IP packets, announcement access points, conferencing, and high-level interactive voice response (IVR) engines. Media servers  are typically controlled by an external application server , such as a JBoss Communications Platform (JBCP) application server, which implements call control logic. In embodiments of the invention, media servers  each include a transparent real-time fail-over module  that implements transparent real-time fail-over with idle-state nodes, as further described below.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 2","FIG. 1","FIG. 2"],"b":["200","200","180","200","210","220","210","230","220"]},"In one embodiment, the media server  uses SLEE  for implementing its own communication capabilities. The SLEE container  does not serve as a call controller. In addition to control protocol modules, the SLEE container  is aimed at providing high-level features like Interactive Voice Response (IVR) and Drools or VoiceXML engines. The modules deployed under SLEE  control interact with the Media Server Service Provider Interface (SPI)  through the Media Server Control Resource Adapter, or MSC-RA . The MSC-RA  follows the recommendations of JSR-309 and implements asynchronous interconnection with the Media Server SPI stack .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","310","320","330","340","300","320","330","340","200"]},"The connection between the phone  and the media server  is over Real-Time Transport Protocol (RTP), which carries audio and video, for example. Along with the RTP connection, the phone  is connected to the call controller  over Session Initiation Protocol (SIP). The SIP connection between the phone  and the call controller  is established first and the settings on how to establish the RTP connection between the Media Server and the Phone are negotiated via this connection. Then the RTP connection is established.","In one embodiment, a load balancer  may be utilized to balance media stream loads between the media servers , , . In one embodiment, the load balancer  may be a component that front ends media server ,  and  and may be implemented as hardware (e.g., circuitry, dedicated logic, programmable logic, microcode, etc.), software (such as instructions run on a processing device), or a combination thereof.","In addition, a media server controller  external to the media servers , ,  may command the media servers to execute various operations, such as playing a file or playing some sequence of signals. In one embodiment, the controller  oversees the implementation of transparent media server fail-over with idle-state nodes by the media servers , , . The controller  is the application where the logic and the rest of the call state is located.","In one embodiment, the controller  application may be hosted in a SIP Servlets or a JAIN SLEE (JSLEE) container, which have other means of replicating state and failover. The controller  is responsible for the SIP(Session Initiation Protocol) portion of the communication with the phone . The media server , ,  is responsible for the media part (e.g., RTP) of the communication, which occurs after the SIP session is established. The call controller is the application, which controls the media server , ,  over JSR  interface or some other media server control interface, such as MGCP for example.","Once a call is initiated by the caller , it is answered by the master media server , which simulates a callee. Endpoints (not shown) in the media server  are capable of doing things like playing announcements or detecting key presses and other events, and forwarding them on to the call controller . The state associated with the call includes an address of the caller , what buttons the caller  has pressed, or what events the caller  has produced in the past. The media server  itself does not keep history (state) of these events; it just forwards them to an application.","The state that is kept in the media server  includes, but is not limited to, how much time has elapsed if there is an announcement playback occurring, the progress of an event being generated by the media server  (such as if the event is a dual tone multi-frequency (DTMF) signal), and the way endpoints of the media server  are connected to the caller  and to each other (changes in the way these are connected occur rarely, so replicating them is not an issue at all). Previously, this state was replicated in all of the backup media servers ,  in the system . However, embodiments of the invention present a technique to avoid replicating the state of a master media server  among all of its backup media servers , .","With transparent media server fail-over of embodiments of the invention, if a master media server  fails, the other back-up media servers ,  are waiting to replace it. Upon failure, a new master is selected by the controller  from the back-up media server nodes , . Assume for purposes of illustration that back-up media server  is selected as a new master. When media server  is selected as the new master, it needs to know how to resume the media stream at the exact same location where the first master  failed. Typically, the media servers , ,  were synchronized via a standard technique that involved replicating the current buffer\/segment of the media that was currently being sent out through all of the back-up nodes. This was done many times every second because the media was sent in a continuous real-time stream that changed every 20 ms. However, as previously mentioned, such a synchronization technique was not optimal as it was time and resource intensive.","In contrast, embodiments of the invention provide a technique that reduces the resources needed to achieve transparent fail-over by having backup media servers keep track of two items for fail-over purposes: (1) what requests arrive at a master media server and (2) at what time they arrive. Embodiments of the invention are based on the concept of \u201cstate time\u201d. When a media server node , ,  knows the time, it will also know from where to resume. Because the time is known by all media server nodes , , , no other state information of the master media server node  needs to be replicated to the backup nodes ,  in order for transparent fail-over of embodiments of the invention to operate correctly.","For example, assume the media server nodes , ,  receive a request R to play a file at time T. In response, the master node  starts to stream the file immediately. Then, at a time T+N the master node  fails and a new node  is selected as master. The new node  already knows about the request R and the time T, as this information was previously replicated to all backup nodes , . It also knows the current time (Tc) (i.e., the failure time) from its system clock and, as a result, can determine the place in the file where it should resume at. This time is at the offset (Tc\u2212T) in the file. As a result, the backup nodes ,  do not need to be operating at all the times in order to resume the playback of a file. Instead, they can start reading the file and data only when it is needed upon failure of a master node .","Embodiments of the invention are not limited to solely file playback operations. They may also be used to fail-over any scheduled requests and signal generators. For example, a scheduled request may include a request that arrives and instructs that after 10 seconds a call must be forwarded to another client. An example of a signal generator includes a DTMF signal sequence to be generated on the line, such as when an end user sends a request with the numbers \u201c1234\u201d. The scheduled request or signal generator tones may be performed at any media server node, no matter if fail-over occurs, as soon as all nodes know at what state they must resume the scheduled request or signal generation.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 4","FIG. 3"],"b":["400","400","400","300"]},"Method  begins at block  where a bidirectional stream of media is received at a master media server. At block , a start time of a request related to the bidirectional media is replicated at each backup media server for the master media server. In one embodiment, the request may include, but is not limited to, a file playback, a scheduled request, and signal generation. Then, at block , the master media server fails. As a result of the master media server failure, a new master media server is selected from one of the backup media servers at block . The selection process of a new master media server node is well known by one skilled in the art and beyond the scope of this application.","At block , an offset time is determined by the new master media server by subtracting the request start time, which was previously replicated at the new master media server, from the time of failure (i.e., current time). Finally, at block , the new master media server resumes playback of the request at the determined offset time within the request. For example, if the request was for playback of a welcome.wav file, the new master media server would determine the time within the welcome.wav file that is the same as the difference between the requested start time and the current time, and resume playback from this point in the file.","As shown in method , none of the backup media servers for a master media server are required to replicate the state of the master media server. Instead, the backup media servers only need to replicate a start time of a request and what the request is. As a result, embodiments of the invention provide an efficient and resource-friendly technique for transparent failover by letting backup nodes remain idle instead of duplicating the efforts of the master media server in step-by-step in real-time.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 5","b":"500"},"The exemplary computer system  includes a processing device , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) (such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processing device  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computer (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device  is configured to execute the processing logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a machine-accessible storage medium  on which is stored one or more set of instructions (e.g., software ) embodying any one or more of the methodologies of functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processing device  during execution thereof by the computer system ; the main memory  and the processing device  also constituting machine-accessible storage media. The software  may further be transmitted or received over a network  via the network interface device .","The machine-readable storage medium  may also be used to stored instructions to perform transparent media server fail-over with idle-state nodes described with respect to , and\/or a software library containing methods that call the above applications. While the machine-accessible storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-accessible storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-accessible storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-accessible storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, and optical and magnetic media.","Whereas many alterations and modifications of the present invention will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description, it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore, references to details of various embodiments are not intended to limit the scope of the claims, which in themselves recite only those features regarded as the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention. The drawings, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 5"}]},"DETDESC":[{},{}]}
