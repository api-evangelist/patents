---
title: Collaborative development of a model on a network
abstract: An application programming interface (API) is provided for use with a modeling software. The API allows users at several devices operating on a network to collaboratively develop a model of an object or a group of objects. The API receives an indication that a selected component has been modified by the modeling software in accordance user commands, generates component data indicative of the modifications of the selected component, and causes an update indication to be transmitted to a collaboration server via a communication network to synchronize the selected component between the first computing device and a second computing device. The update indication may include a component identifier, such that the component identifier uniquely identifies the selected component in the model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09323871&OS=09323871&RS=09323871
owner: Trimble Navigation Limited
number: 09323871
owner_city: Sunnyvale
owner_country: US
publication_date: 20110627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates to developing a three-dimensional model of an object or a group of objects and, in particular, to collaboratively developing a model on a communication network.","The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.","Today, professional as well as non-professional users in a variety of different fields, such as engineering, architecture, automotive design, graphic design, advertising, fashion design, medicine, etc., can develop three-dimensional (3D) models of buildings, vehicles, and other objects using 3D modeling software that operates on a computing device. A user typically interacts with 3D modeling software via input devices such as a keyboard, mouse, trackball, and\/or stylus, and the drafting document is displayed on a graphical display device, such as a computer monitor or screen.","In general, 3D modeling software allows a user to draw various three-dimensional shapes (directly or by defining two-dimensional faces that make up 3D shapes), apply colors and\/or textures to the shapes, move, scale, rotate, and skew the shapes, etc. 3D software typically provides the user with stock objects such as arcs, circles, rectangles, and other known geometric shapes and\/or provide tools to create such shapes. Further, 3D modeling software typically allows users to save models as files that conform to a certain predefined format. To share models, users transmit to each other files with the corresponding model data, or upload the files to data servers.","Users usually develop 3D models by sequentially entering various drawing and image manipulation commands via a graphical user interface (GUI). For example, to model a two-story building, a user may first draw a four-wall structure, draw a door in one of the walls, then draw several windows in the walls, etc. The user may then paint or texture the walls, the roof, and other portions of the model. Accordingly, it may take a significant amount of time for a single user to develop a complex and detailed model.","Further, to modify an existing model, a user typically uses 3D modeling software to open a file that stores model data, edit the model data, and save the model data to the file. In order for another user to safely edit the model, he or she must make another copy of the file or wait until the user currently editing the model finishes the edits and closes the file. In other words, when more than one user contributes to the development of a model, 3D modeling software receives input from only one user at a time.","In an embodiment, a computer-readable medium stores an application programming interface (API) for use with a software application for developing a three-dimensional (3D) model. The 3D model is stored as model data and includes a plurality of components, each component having one or more elements. A collaboration server is communicatively coupled to the first computing device and the second computing device via a communication network. The API includes a set of instructions that, when executed on a processor of the first computing device, cause the processor to receive an indication that a selected one of the plurality of components has been modified by the software application in accordance with a set of one or more modification commands received from a user interface of the first computing device, generate component data indicative of the modifications of the selected component, and cause an update indication to be transmitted to the collaboration server via the communication network to synchronize the selected component between the first computing device and a second computing device. To cause the update indication to be transmitted to the collaboration server, the instructions cause the processor to provide the component data in the update indication, and provide a component identifier in the update indication, such that the component identifier uniquely identifies the selected component in the model.","In another embodiment, a method in a first computing device for developing a 3D model in collaboration with a second computing device operating independently of the first computing device, where the model includes a plurality of components and where each component has one or more elements, includes causing the model to be stored on a computer-readable medium as model data including a hierarchical tree data structure having a plurality of branches corresponding to the plurality of respective components, in response to a selected one of the plurality of components having been modified at the first computing device, generating a serialized representation of the branch that corresponds to the modified component, and causing the model to be synchronized between the first computing device and the second computing device. Causing the model to be synchronized includes causing an update indication to be transmitted to a collaboration server communicatively coupled to the first computing device and the second computing device, where the update indication includes the serialized representation of the one of the plurality of the branches and an indication of the set of transformation operations.","In another embodiment, a method for managing collaborative development of a three-dimensional (3D) model at a plurality of client devices is implemented in a network device. The client devices are communicatively coupled to the network device via a communication network. The method includes receiving a plurality of update indications from the client devices, including receiving indications of respective sets of one or more operations applied to on a component of the model, storing the sets of operations on an operation stack, including preserving a relative order of the operations applied to the component, where the operation stack includes data on a computer-readable medium, receiving an indication of a last operation performed on the component by another client device, using the transformations stack, generating a list of operations applied to the component that are subsequent to the last operation, and providing the list of operations to the client device from which the indication of the last transformation is received.","In still another embodiment, a method for collaboratively developing a three-dimensional model stored as model data on a computer-readable medium is implemented in a first computing device. The model data includes a hierarchical tree data structure having a plurality of branches corresponding to a plurality of respective components of the three-dimensional model, each component having one or more elements. The method includes receiving a selection of one of the plurality of components of the model from an interactive user interface of the computing device, receiving a plurality of modification commands from the user interface, where the modification commands correspond to a set of one or more transformation operations to be performed on the selected component, modifying the selected component in accordance with the set of transformation operations, generating a serialized representation of the one of the plurality of the branches that corresponds to the selected component, and causing the 3D model to be synchronized with a second computing device. Further, causing the 3D model to be synchronized with the second where device includes causing an update indication to be transmitted to a collaboration server, wherein the update indication includes the serialized representation of the one of the plurality of the branches and an indication of the set of transformation operations, and where the collaboration server is communicatively coupled to the first computing device and the second computing device.","In embodiments described below, a collaborative development system permits two or more users to use respective client devices operating on a local area network (LAN) or a wide area network (WAN) to jointly develop models of various objects such as, for example, buildings, vehicles, and items of furniture. The client devices, which may be personal computers (PCs), may include 3D modeling software which the corresponding users operate to create and edit 3D models or components of the models. In some embodiments, the 3D modeling software includes built-in functionality that allows users to invite other users to participate in the development of a model and propagate updates to models or components to the participating users. However, in other embodiments, 3D modeling software supports interactions with a 3D model only on an individual computing device, and the collaborative development system includes a software component (e.g., a plugin) that extends the functionality of the 3D modeling software so as to permit collaboration with another computing device.","To give users more flexibility, the collaborative development system provides collaborative functionality via an application programming interface (API), according to an embodiment. The API may allow users to select various mechanisms for resolving or preventing conflicts between concurrent edits. In an embodiment, the API includes a locking function to lock the model or a component of the model so as to reserve the model or the component for editing. In response to a user activating the locking function, the API may generate a locking notification to notify one or more client devices that the component has been locked. The API may also include a function for generating a description of the modifications applied to the component in terms of an operational transformation (OT) that allows client devices to modify the same component in parallel without locking the component. In an embodiment, to generate an OT representation of a modified component, the API also generates a serialized representation of the component, i.e., an ordered listing of the elements included in the component that allows the API to precisely indicate to which of the elements in the component a transformation has been applied. These and other techniques for notifying other client devices of changes to the model or portions of the model are discussed in more detail below. As also discussed below, a collaboration server operates on a communication network to facilitate interactions with models between several client devices, according to an embodiment. The collaboration server may resolve conflicts between concurrent operations by several users or propagate updates to models to client devices for local conflict resolution, depending on the embodiment.","Next, an example communication system in which techniques for collaborative 3D modeling can be applied is discussed with reference to . By way of example, collaborative development techniques are discussed below in relation to three-dimensional (3D) models such as those used by architects, engineers, and hobbyists. However, these or similar techniques also may be applied to two-dimensional (2D) drawings and other types of data.","Referring to , in an embodiment, a communication system  includes a client device , another client device  that operates independently of the client device , and a communication network  to which the client devices  and  are communicatively coupled. Although the client devices  and  include similar hardware, software, and\/or firmware components, for ease of illustration, the components of only the client device  are shown in . In operation, a user operating the client device  develops a model of an object or a group of objects in collaboration with another user operating the client device . The communication system  may also include a collaboration server  in which a collaboration engine  facilitates interactions between the client devices  and  during the collaborative development process. The collaboration server  may be coupled to the client devices  and  via the communication network . Further, in an embodiment, the communication system  includes a model database  to store model data corresponding to various 3D models.","The client device  in some embodiments includes a central processing unit (CPU)  to execute computer-readable instructions, a random access memory (RAM) unit  to store data and instructions during operation, program storage  including persistent memory to store software applications, shared software components such as Dynamic-link Libraries (DLLs), and other programs executed by the CPU , and data storage  including persistent memory to store data used by the programs stored in the program storage . By way of example, the program storage  and the data storage  may be implemented on a hard disk drive (HDD) coupled to the CPU  via a bus. Generally speaking, the components , , , and  may be implemented in any suitable manner.","In the example implementation of , the client device  is a personal computer (PC). However, in general, the client device  may be any suitable stationary or portable computing device such as a tablet PC, a smartphone, etc. Although the computing device  in the example of  includes both storage and processing components, the client device  in other embodiments can be a so-called thin client that depends on another computing device for certain computing and\/or storage functions. For example, in one such embodiment, the data storage  and the program storage  are external to the computing device  and are connected to the client device  via a network link. Further, the client device  may be coupled to an input device  and an output device . The input device  may include, for example, a pointing device such as a mouse, a keyboard, a touch screen, a trackball device, a digitizing tablet, or a microphone, and the output device  may include an LCD display monitor, a touch screen, or another suitable output device. Using the input device  and the output device , a user can access a graphical user interface (GUI) of the client device .","With continued reference to , the program storage  may store a 3D modeling application  for developing 3D models of various objects. The 3D modeling application  includes a set of complied instructions executable on the CPU , according to an embodiment. Generally speaking, the 3D modeling application  provides a set of modeling controls to generate, position, and variously adjust three-dimensional shapes, apply textures to the shapes or surfaces, define interactions between shapes, etc. Models developed using the 3D modeling software  may be stored on a computer-readable medium, such as the data storage , as data files including model data that conforms to a certain non-image format. For example, the non-image format may specify a set of faces of a 3D models along with the corresponding attributes, such as the position and orientation of a face, the texture of the face, etc. Further, model data may include a hierarchical tree data structure with branches on two or more levels describing respective components. An example tree data structure that may be used to store model data is discussed in more detail with reference to .","According to some embodiments, the 3D modeling application  includes an interface via which certain functionality and data structures of the 3D modeling application  are made accessible to other programs, so that the functionality of the 3D modeling application  may be extended to include additional features. In an embodiment, a collaboration Application Programming Interface (API)  provides collaboration capability to the 3D modeling application, so that a user operating the client device  and another user operating the client device  can develop a 3D model together at the same time. The collaboration API  may include functions for inviting collaborators, generating modification updates, locking and unlocking components for conflict-free editing, generating a representation of a component in a serialized format for sharing with another client device, etc.","In an embodiment, the collaboration API  allows a set of instructions in a scripting language (i.e., a script) interpretable by the 3D modeling application  to access certain classes used by the 3D modeling application  and invoke certain methods used by these classes. For example, one or several scripts  that utilize the collaboration API  may be stored in the data storage . In an embodiment, the scripts  are stored in a directory which the 3D modeling application  is configured to automatically access in order to locate and load scripts, when available. During execution, a user may activate a GUI control that causes the 3D modeling application  to interpret one of the scripts  that invokes the collaboration API . For example, one of the scripts  may provide a GUI control that, when activated, attempts to lock the selected component for editing only at the client device  when the corresponding model is being collaboratively developed. The script  may cause the collaboration API  to generate a message that identifies the component as well as a request to lock the component, and to transmit the message to the client device  via the network . Depending on the embodiment, the message may be transmitted directly to the client device  or to the collaboration server  that processes and forwards the message.","According to some embodiments, the collaboration API  is provided as a plugin, e.g., a compiled software component which the user of the client device  may install to add collaboration functionality to the 3D modeling application . In another embodiment, the collaboration API  may be provided as a non-optional component of the 3D modeling application . In yet another embodiment, the collaboration API  is provided as a script interpreted by the 3D modeling application  at runtime. In this embodiment, the script interacts with a general-purpose API for accessing the functionality to the 3D modeling application . In other words, the collaboration API  may be provided as a \u201cbasic\u201d script to which the scripts  may add further functionality. The script in some embodiments may be provided in an encrypted (or \u201cscrambled\u201d) form recognized by the modeling application .","The data storage  may store model data  that describes a 3D model being collaboratively developed at the client devices  and . In some embodiments, each of the client devices  and  maintains a respective copy of model data . In one such embodiment, the client devices  and  exchange real-time or periodic updates describing modifications to the model data  at the corresponding client device, so that the 3D modeling application  executing on the client device can appropriately update the local copy of the model data . In other embodiments, the collaboration server  additionally or alternatively updates a \u201cmaster\u201d copy of the model , stored in the model storage , according to the updates received from the client devices  and .","To consider an example collaborative modeling scenario with reference to , user Abby operating the client device  begins to develop a 3D model such a model  illustrated in . User Abby initially is a single developer of the model . As can be seen in , the model  includes a house component  and a garage component . Each of the components  and  in turn may include several sub-components. For example, the house component  includes a door , walls including a southern wall S and an eastern wall E visible in , and a roof , while the garage component  includes a roof , a door , and walls including a southern wall S and an eastern wall E visible in . As also can be seen in , the model  may include other components such as windows and a chimney, for example, the discussion of which is omitted for ease of illustration. According to one embodiment, each of the components illustrated in  is made up of one or more elements such as 3D geographic shapes: cuboids, spheres, pyramids, etc. In another embodiment, the components of  may be generated using groups of two-dimensional faces: squares, circles, triangles, etc.","According to one embodiment, the 3D modeling application  generates components of the model  according to commands received from user Abby. For example, to draw the roof , Abby may draw multiple shapes and group the shapes using the user interface of the 3D modeling application  (e.g., by selecting several shapes with a mouse and activating an icon for generating a group of selected shapes). In general, a model can have nested components at multiple levels. For example, Abby may group several shapes to define a window frame component, then group the window frame component with several 3D shapes to define a window component, create several instances of the window component and group these several instances into a larger \u201cmultiple windows\u201d component, etc. Further, in some embodiments, the 3D modeling application  may allows users such as Abby to first define components as groups including multiple 3D shapes (and possibly other components) and then generate multiple instances of the defined component. When a user later edits an instance of a component, the changes are automatically applied to other instances of the component, according to an embodiment.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 3","FIG. 3"],"b":["150","100","50","100","50","62","150","36","150","152","154","156","152","156","100","154","160","114","156","170","122","170","122","150","62"]},"In an embodiment, the collaboration API  utilizes the data structure  to represent a selected component of the model  in a serialized format. Generally speaking, by generating a serialized representation a component branch, a device operating in a collaborative development environment permits another device, such as a client device or a collaboration server, to properly resolve conflicts and address collisions between modifications submitted at several devices using OT techniques. A serialized representation of a branch may include a sequence of basic 3D shapes (cuboids, spheres, etc.) that make up the corresponding component, in an embodiment.","As an additional example, collaborative OT-based development of a text document may be briefly considered and contrasted with development of a 3D model. If two users collaboratively edit version V of a string of text S, such as \u201cThis is modeling,\u201d modifications to the string can be easily expressed in terms of text editing commands (e.g., insert, delete, replace, etc.) applied at specific character positions within the string S. For example, a first user may wish to insert the world \u201ccollaborative\u201d following the eighth byte of the string S according to version V, and a second user may replace the word \u201cis\u201d in fifth and sixth bytes of the same version of the string S with the word \u201cwas.\u201d If the command from the second user is applied to the string S first, the unmodified command from the second user is then applied to the wrong portion of the string S. However, the commands from the first user and the second user can be easily reconciled by modifying the index at which the new word is to be inserted (in this case, the index can be modified to indicate the ninth byte rather than the eighth byte). In fact, in the example above, regardless of the order in which the two uses submit modifications to the string S, the conflict between the two commands is easily resolved, if the version V to which the corresponding command is applied is known. Thus, modifications to documents in which data is represented linearly (e.g., text documents) or in terms of numbered cells (e.g., spreadsheets) can be concurrently performed using indexing relative to a known version of the document. It is noted that this approach is compatible with lock-based as well as lock-free collaborative development.","On the other hand, unlike text or spreadsheet data, the model  is not easily described in a linear manner. The collaboration API  may generate the data structure  to describe the model as a hierarchical tree structure and, when necessary, generate serialized descriptions of branches to report updates to other devices, for example. The collaborative development system of  may define a set of operations recognized at participating client devices, such that the operations may be described with reference to the serialized descriptions of component branches. For example, the set may include such operations at delete, move, and resize. Thus, an OT-based description of how a certain component branch has been modified at a client device may include an indication that a delete operation was performed on the first sub-component (such as a cuboid) and a resize operation was performed on the fourth component (such as a sphere) in the serialized listing of the component, to consider just one example.","With continued reference to , 3D modeling application  and\/or the collaboration API  may generate a unique component identifier for a branch in the data structure , so that when multiple users collaboratively develop the model , they can unambiguously identify components within each other's copies of the data structure . In one embodiment, the collaboration API  generates a component identifier for a component at the time when a user defines the component. For example, once Abby defines the garage component , the collaboration API  may generate a component identifier as a string of alphanumeric characters and store the generated component identifier as an attribute of the branch . In another embodiment, the collaboration API  generates a component identifier for a component in response to receiving an indication that a user wishes to edit the component during a collaborative development session. The component identifier in some embodiments is generated randomly. For example, the collaboration API  may generate the component identifier that conforms to a Globally Unique Identifier (GUID) format and as such is associated with a low probability of duplication. In an embodiment, the collaboration server  verifies whether the component identifier generated at the client device  is available. Further, the client device  may maintain a look-up table (e.g., a hash table) to quickly retrieve component identifiers for various components of the model .","Referring back to , Abby may then decide to invite another user, Bob, to edit or further develop the model in collaboration with Abby. To this end, Abby may activate a control provided by the collaboration API  (e.g., a toolbar icon or a button labeled \u201cinvite\u201d) to generate an invitation to Bob in the form of an electronic message transmitted over the network , for example. The invitation includes Bob's email address, in an embodiment. The collaboration API  may automatically prompt the user to supply a name for the model  and verify, using the collaboration server , whether the supplied name is unique. User Abby, for example, may name the model  AbbysModel. The collaboration API  also may automatically group all previously ungrouped geometry (i.e., 3D geometric shapes) under the root node  into a single component so as to enable component-by-component locking during subsequent collaborative development. In some embodiments, the collaboration API  then uploads the model data  to the model storage  automatically or in response to a corresponding command from Abby.","The collaboration API  does not directly provide user-level controls for collaborative 3D modeling, according to an embodiment. Instead, the collaboration API  may provide a library of functions which various programs, such as scripts interpreted at runtime by the 3D modeling application , may invoke according to the desired collaboration method. Further, in an embodiment, the collaboration API  includes an observer module that translates relevant user interface events (e.g., user clicking on a certain icon) into functions included in the collaboration API . Thus, the end user need not have any specific knowledge of the collaboration API , nor does the end user need to be aware of when functions of the collaboration API  are invoked. The library of functions may include, for example, an invite function to generate an invitation to a specified user or specified host, a group_geometry function to group the 3D shapes under the root node, etc. In this manner, the functionality of the 3D modeling application  can be extended to support collaboration in more than a single manner. For example, one of the scripts  may utilize the collaboration API  to provide a lock-based framework, a set of controls, and a mechanism to notify users of modifications performed at other client stations.","In an embodiment, the collaboration API  provides a transform function which a script or a compiled program may invoke with a parameter list that include the identifier of an entity (e.g., a component, an element such as a 3D basic shape, etc.), a transformation operation selected from a predefined list (e.g., translate, rotate, scale), and a user identifier. The collaboration API  also provides a new_component function to add a definition and\/or an instance of a component under the root node . The new_component function may be invoked with a definition of the new component, a user identifier, and a component identifier. Also, the collaboration API  may include functions start_edit, edit, and end_edit, which the corresponding script invokes when a user begins to edit a component, edits the components, and completes editing the component, respectively. In an embodiment, invoking the function start_edit causes the collaboration API  to automatically lock the component, and invoking the function end_edit causes the collaboration API  to automatically unlock the component.","If desired, the collaboration API  also may support non-edit, or \u201csocial\u201d operations. For example, the API  may provide a chat function to send a specified text string to a specified user. The API  also may provide a fly function to allow a user who has changed his eye location (i.e., the perspective of the model) to notify other users of the change. Further, the API  may provide a sync function to allow a user to request the latest version of model data from the collaboration server . Still further, the API  may provide enter and exit functions to permit a user to enter and exit a collaborative development session, respectively.","In the scenario considered above, the collaboration API  and\/or the 3D modeling application  may transmit the invitation to the collaboration server  (and not directly to the client device ). The collaboration server  then may include a link to the model data  and forward the invitation to Bob's email address. For example, the invitation may be formatted as follows: http:\/\/modelshare\/AbbysModel.model, where .model is an extension used by the 3D modeling application . Once Bob receives, and attempts to process, the invitation, the copy of the 3D modeling application  executing on the client device  may verify that the collaboration API  (e.g., in the form of a plugin) is installed on the client device . If the collaboration API  is not yet installed on the client device , the 3D modeling application  may automatically prompt Bob to download and install the collaboration API . To this end, the invitation (or the model data ) may include a link to a location from which the collaboration API  may be retrieved. Once the collaboration API  is installed, a copy of the model  may be received directly from the client device  or from the model storage  for editing at the client device , so that the copy stored at the model storage  corresponds to a \u201cmaster copy\u201d which the collaboration server  maintains according to the updates received from the client devices  and . However, in other embodiments, the collaboration server  does not maintain a master copy, and each of the client devices  and  locally manages a local copy of the model data .","After Bob has accepted Abby's invitation, Bob may begin to work on the 3D model  using the client device  at the same time as Abby. For example, Abby may wish to modify the house component , while Bob may wish to edit the garage component . However, it is also possible that both Abby and Bob may decide to edit the same component of the model  at the same time. Further, Abby and Bob may wish to modify components corresponding to different branches of the data structure . For example, Bob may wish to add a tool shed as a new component of the model  while Abby continues to edit the house component . Bob's addition in this case may require that a new branch be added directly under the root node . Depending on the embodiment, Bob would need to lock the entire model  to add a new component, lock only the root component while allowing modifications to be applied to the house branch , or not apply a lock at all and instead rely on an OT technique or a similar methodology to apply changes to the model  in a lock-free manner. As briefly discussed above, the collaborative development system of  may provide one or several mechanisms for avoiding or resolving conflicts between modifications applied at different client devices.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 4","FIG. 1","FIG. 4"],"b":["200","200","202","204","202","204","202","204","206","12","14","202","204","18","206"]},"According to the example scenario introduced above, Abby may operate the device  and user Bob may operate the device . The device  may include 3D modeling software and a collaboration API similar to those discussed with reference to . Referring back to , Abby may lock the branch  corresponding to the house component . The collaboration API (e.g., in response to a command from a script executing on the device ) may generate a lock message  that identifies (i) the component  using, for example, a component identifier generated as discussed above, and (ii) Abby as the user requesting that the component  be locked for exclusive editing by Abby. The collaboration server  may verify that the component  has not yet been locked and forward the lock message  to the device  as a message . In an embodiment, the collaboration server  also updates the status of the component  in a table local to the collaboration server . In this manner, if another user attempts to lock the component , the collaboration server  may determine the status of the component  and reject the request to lock the component . Further, in some embodiments, the collaboration server  generates a lock confirmation message (not shown) and transmits the lock confirmation message to the device  in response to the lock message .","After the client device  has successfully locked the component , user Abby may modify the component . In particular, user Abby may apply a set of modification commands to the component  including, for example, commands to delete shapes, add shapes, reposition shapes, resize shapes, apply different colors or textures to elements, etc. Abby may then notify the collaboration server  of the modifications to the component  by activating a corresponding control on the user interface such as an update button, for example. The control causes an update message  to be generated including (i) an indication of the component to which modifications are applied and (ii) a description of the modifications and\/or of the modified component, according to an embodiment. The update message  may include a version identifier to specify a version of the model (or the component) to which the modifications have been applied, in an embodiment. Similar to the examples discussed above, the 3D modeling software and\/or the collaboration API executing on the client device  may provide functions and data structures to permit scripts to define user controls, generate and transmit messages, etc. In another embodiment, the collaboration API generates an update message automatically after a certain number of modifications applied to the currently locked component , periodically (e.g., once every two minutes), in response to detecting that Abby has finished her edits of the component , or according to another suitable scheme.","In still another embodiment, modifications of the model at the device  are reported to the device  in real time. For example, after a user moves the house component  via the user interface of the device , the modification is immediately reported as a move operation to the collaboration server  and thereafter forwarded to the client device . A user operating the device  may then see the modification on the user interface of the client device .","In an embodiment, the collaboration API of the device  generates a serialized representation of the branch that describes the component  to be included in the update message . For example, the collaboration API generates a linear listing of the elements and\/or sub-components of the component , so that the one or several modifications of the component  applied at the device  can be specified relative to the specific elements included in the component . As a more specific example, referring back to , the elements under the house branch  (corresponding to the house component ) may be sequentially listed as {Doors, Roof, N Wall, S Wall, E Wall, W Wall, . . . }. In this embodiment, the house branch  may be traversed in any suitable manner, but the traversal method at the device  should be recognized at the device  to avoid misalignment of elements.","In an embodiment, the serialized representation of the component branch  also may include an indication or description of modifications M, M, . . . Mapplied to the elements and components that make up the component branch . For example, the listing may include a description of the Roof component and an indication (a flag, a bitmask, etc.) that the Roof component has been modified at the device . In another embodiment, the update message  may identify only the modifications applied to the component  relative to a version of the component  available at the device  and\/or the collaboration server . The description of modifications conforms to an OT format, according to some embodiments. Of course, the update message  in some cases may specify only one modification.","In another embodiment, the message  includes a description of a new version of the component and does not specifically indicate which elements within the component have been modified. Similar to the embodiment discussed above, the message  need not include a description of the entire model , and may include only the description of the modified component. However, according to this embodiment, another client device may simply replace an older version of the component with the new version. In general, the update message  may describe the house component  in any suitable manner.","With continued reference to , the collaboration server  may forward the update message  to the device  as a message . In an embodiment, the collaboration server  also modifies the master copy of the model according to the update message  and generates a new version identifier for the updated version. Referring back to , for example, the collaboration server  may update the copy of the model data  in the model storage . For example, if the update message  indicates that the modifications M, M, . . . Mwere applied to version V of the model, the collaboration server  may update the master copy of the model, generate version identifier V+1, store the new version identifier V+1 along with the modified master copy of the model, and include the version identifier V+1 in the forwarded message . In other embodiments, the collaboration server  does not update a master copy of the model and merely forwards the modification information to the device .","For ease of illustration, only one instance of the update message  is shown in . However, client device in general may transmit any number of update messages prior to unlocking the component. When Abby completes modifications to the component , the collaboration API may generate an unlock message  in response to Abby activating the corresponding control on the user interface of the device  (which in turn may be provided by a script executing on the device ), for example. As illustrated in , the unlock message  may identify the component . The collaboration server  may forward the unlock message  to the client device  as a message . In an embodiment, the collaboration server  also updates the status of the component  and\/or of the model  in the model storage .","Next, several example methods that may be implemented in the communication system  or a similar environment to support collaborative development are discussed with reference to . In particular, flow diagrams of several methods that can be implemented in a client device participating in collaborative 3D modeling on a network are illustrated in , and flow diagrams of several methods that can be implemented in a collaboration server operating on a network are illustrated in . In general, the methods of  may be implemented using any suitable programming language and may be stored as instructions on a computer-readable medium. The instructions may execute on one or several processors, and may include compiled code, instructions interpreted by another software application (e.g., modeling software, a browser), or in any other suitable manner.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 5","b":["250","250","12","202","250","52"]},"At block , model data corresponding to a 3D model is stored as a hierarchical data structure. For example, a tree data structure discussed with reference to  may be used. In general, the hierarchical data structure may include any desired number of levels and branches that may be specified by a user. Next, at block , a selection of a component of the model is received. In an embodiment, the user selects the component for editing by highlighting a visual representation of the component on a user interface, or by pointing to the visual representation of the component and activating a certain control (e.g., a button). In another embodiment, the user modifies a component, activates a control on the user interface, such as a button labeled update, and the modified component is automatically selected at block . In yet another embodiment, the component selection is received at block  in response to detecting that a user has modified the component via the user interface.","In some cases, several shapes in a model may be ungrouped at the time of selection. If the user selects one of the ungrouped shapes, these shapes may be automatically grouped into a component at block . Further, if the user selects several components corresponding to different branches of the data structure the lowest available parent branch that includes all of the selected branches is automatically selected. For example, if the user selects the wall S and the roof  of the model  depicted in , the entire house branch (branch  in ) is selected.","Further, component data that includes a serialized representation of the selected component may be automatically generated at block . For example, the techniques discussed with reference to  may be used. In an embodiment, the serialized representation of the component identifies modifications applied to particular elements within the component, so that OT techniques can be applied to resolve collisions between concurrent modifications at several client devices. In another embodiment, the serialized representation of the component describes the modified component without identifying particular changes to the component.","At block , a unique component identifier for the selected component may be generated as discussed above. Component data that includes the unique component identifier and, in an embodiment, the serialized representation of the component generated at block , is then provided in an update message generated at block . In an embodiment, the update message generated at block  is similar to the update message  of . In particular, in addition to the component identifier, the update message generated at block  may identify the user of the device in which the method  is being executed.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["300","250","300","12","202","250","50","52","302","310","300"]},"At block , a 3D model is generated as discussed above in response to various user commands. The user may then decide to modify a component of the model and, at block , modifications commands may be received. The component may be modified in accordance with the received commands at block . Next, at block , component data including an OT representation of the modified may be generated. To this end, the techniques discussed above with reference to  may be used. At block , an update indication that includes the OT representation may be generated. The update indication generated at block  also may include other component data such a component identifier that uniquely identifies the component, for example.","Next,  illustrates a flow diagram of an example method  for generating an invitation for one or more users to join collaborative development of a model. The method  is implemented in a collaboration API such as the collaboration API , according to an embodiment. At block , model data is received from a modeling application such as the 3D modeling software , for example, and a proposed name for the model may be received from a user via a user interface at block . Next, at block , it is determined whether the user-supplied name is unique. To this end, in an embodiment, the name is forwarded to a collaboration server. If the collaboration server determines that the name is unique, the collaboration server  provides a positive acknowledgement, and the flow proceeds to block . Otherwise, if the collaboration server determines that the name is not unique, the flow returns to block , and the user is asked to propose a different name for the model.","At block , one or more email addresses (or other suitable identifiers) of users being invited to participate in collaborative modeling are received. For example, an appropriate dialogue box, via which a user may enter an email address, may be displayed on the user interface. The invitations are then generated and forwarded at block  to the invited users either via a collaboration server or directly, depending on the embodiment. Depending on the embodiment, an invitation forwarded at block  may include one or more of an identifier of the user who has generated the invitation, the model data received at block  or a link to a location where the model data is stored (e.g., the model storage  illustrated in ) and a link to a location from which a collaboration API can be downloaded (e.g., a website maintained by the collaboration server.","Now referring to , an example method  for processing update indications from one or several client devices can be implemented in the collaboration server , the collaboration server , or a similar device. At block , an indication of one or more transformation operations applied to a model is received from a client device. The operations (e.g., delete, move, resize) correspond to certain modifications of the model. In an embodiment, the transformation operations are reported along with an identifier of a version of the model to which the operations were applied, so that other devices may correctly apply these operations to the respective local copies of the model data.","At block , the received operations may be added to an operation stack. The operations may also be assigned unique identifiers, such as sequential numbers, so that the relative order of the operations is preserved. Using the operation stack, the collaboration server and\/or client devices may determine which operations have been performed at the client devices. For example, the stack may store operations Oand Oprior to receiving the new operations Oand Oat block . The stack accordingly may store operations Othrough Oupon executing the method steps at block . Next, at block , the operations Oand Omay be provided to one or several participating client devices automatically or in response to a query from a client device, depending on the embodiment.","In another embodiment, a client device participating in collaborative development may at some point \u201ccheck in\u201d with the collaboration server and indicate the last operation performed at the client device is. For example, the client device may identify operation Oas the last operation performed at the client device. In response, operations Othrough Omay be retrieved from the stack and provided to the client device, similar to the steps performed at block .","Thus, according to the technique of , operations reported by a client device are not necessarily applied to a centrally maintained copy of the model. Instead, in at least some of the embodiments, the operations are forwarded to participating client devices as appropriate, and the client devices apply these operations to respective local copies of model data.",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 9","b":["450","18","206","450","18","206","452","452","452","454","456","458","450","456"],"sub":["1 ","2 ","3 ","4 ","3 ","4 "]},"By way of a more specific example, users Abby and Bob may be editing a model of a kitchen that includes a refrigerator. When Abby moves the refrigerator in her copy of the model, a corresponding operation is reported to the collaboration server (e.g., the collaboration server ), and the operation is stored in the stack and assigned a certain number (e.g., \u201c6\u201d). Bob may observe Abby's modification and, not liking it, delete the refrigerator. The deletion may be added to the stack as operation . Meanwhile, Chad may be on a slow connection. Unaware that the refrigerator has been deleted, Chad moves the refrigerator, and the operation is added to the stack as operation . In this scenario, at block , operation  is recognized to have rendered operation  moot and operation  obsolete (as referring to a component that no longer exists). When Chad checks in to retrieve operations for application to his copy of model data, only operation  is provided. In an embodiment, at block , a master copy of the model is also updated in accordance in view of the results of conflict resolution between operations.","The following additional considerations apply to the foregoing discussion. Throughout this specification, plural instances may implement components, operations, or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations, one or more of the individual operations may be performed concurrently, and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter herein.","Certain embodiments are described herein as including logic or a number of components, modules, or mechanisms. Modules may constitute either software modules (e.g., code embodied on a machine-readable medium or in a transmission signal) or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments, one or more computer systems (e.g., a standalone, client or server computer system) or one or more hardware modules of a computer system (e.g., a processor or a group of processors) may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations as described herein.","Unless specifically stated otherwise, discussions herein using words such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining,\u201d \u201cpresenting,\u201d \u201cdisplaying,\u201d or the like may refer to actions or processes of a machine (e.g., a computer) that manipulates or transforms data represented as physical (e.g., electronic, magnetic, or optical) quantities within one or more memories (e.g., volatile memory, non-volatile memory, or a combination thereof), registers, or other machine components that receive, store, transmit, or display information.","As used herein any reference to \u201cone embodiment\u201d or \u201can embodiment\u201d means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. For example, some embodiments may be described using the term \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.","As used herein, the terms \u201ccomprises,\u201d \u201ccomprising,\u201d \u201cincludes,\u201d \u201cincluding,\u201d \u201chas,\u201d \u201chaving\u201d or any other variation thereof, are intended to cover a non-exclusive inclusion. For example, a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus. Further, unless expressly stated to the contrary, \u201cor\u201d refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).","In addition, use of the \u201ca\u201d or \u201can\u201d are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.","Upon reading this disclosure, those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for providing a collaborative development framework for 3D modeling through the disclosed principles herein. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes and variations, which will be apparent to those skilled in the art, may be made in the arrangement, operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
