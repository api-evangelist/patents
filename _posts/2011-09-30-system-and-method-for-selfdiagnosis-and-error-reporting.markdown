---
title: System and method for self-diagnosis and error reporting
abstract: A system for self-diagnosing and error reporting of a software application in a computer system having a plurality of software applications and background processes, the system comprising a diagnosis module configured to collect and monitor usage data of resources of the computer system, execution status of the software applications and background processes of the computer system, and software application error conditions, adjust logging level of log files according to the execution status of the software applications and background processes of the computer system and the software application error conditions, and generate diagnosis advisory based on the usage data of the resources of the computer system and the software error conditions, and a reporting module configured to collect and report the usage data of the resources of the computer system, the log files and the generated diagnosis advisory automatically to a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08732530&OS=08732530&RS=08732530
owner: Yokogawa Electric Corporation
number: 08732530
owner_city: Tokyo
owner_country: JP
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates generally to self-diagnosis and error reporting for software, more specifically, but not limited to, monitoring and detecting unexpected software errors and runtime conditions, and collecting information for further analysis.","Software has becoming an indispensable tool in many aspects of today's technological world, especially in the field of Industrial Automation, where control systems and other software are used to reduce the need for human work in the production of goods and services","Although software is usually rigorously tested by the software developers before the official release and ideally free from defects or errors of any kinds, in reality, software errors may still occur after the software is deployed to the customer's site due to events or runtime conditions which were not expected by the software developers during the development phase. Any unexpected errors causing the software to deviate from the normal operational behavior or to stop functioning can be referred to as software errors.","To analyze the cause of the software error and prevent the recurrence of the same error, the software developer needs to collect a lot of information, such as the computing environment, possible events that may lead to the software error and the effects of the software error. However, collecting such information may not be as easy one thinks due to a number of factors. First, the software developer usually does not have access to the customer environment due to various reasons such as geographical, infrastructure or access policy restrictions, and has to request the customer to provide the necessary information. Second, the customer may not have the knowledge about how to collect or where to look for the necessary information or files, and such request may be viewed as a trouble to the customer, adding to the customer's frustration and dissatisfaction. Third, because of the reactive approach described in the following paragraphs, the collected information for analyzing the error may not be sufficient to identify the root cause of the error: the logging level of the software system is by default set to very low to minimize the performance and resource impact on the system, and thus the vital information which can help identify the software defect is not recorded; an extended period of time, from the time the software error occurred to the time the log files are collected, may have passed, and the log files which contain the vital information may have been deleted or overwritten; the software error is totally not anticipated by the software developer, and as a result, no relevant or useful information is logged at all; the external factors or conditions, which caused the software error to occur, have disappeared or recovered. All these factors impair the software developer's ability to effectively grasp the situation, making it impossible for the software developer to respond to the problem in the shortest time possible.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1","b":["100","140","160"]},"When the customer encounters an unexpected software error  during normal operation , he reports it to the software developer  and expects the software developer to resolve the error by restoring the software to its normal operating state as well as preventing the error from recurring. In order for the software developer to fix the software error effectively, the software developer often needs to know the phenomenon of the software error accurately. Sometimes, the software developer may also need to reconstruct and reproduce the customer's environment in order to investigate and identify the root causes of the software error. When the software developer receives the complaint from the customer , the error descriptions and the computing environment descriptions may not be comprehensive and detailed enough. As a result, the software developer usually has to collect additional information , such as system configuration and software log files, either by accessing the customer's computer directly, or by requesting the customer to collect or provide such information . After investigating and analyzing the currently available information , if the information is sufficient for the software developer to identify the root cause of the software error , the software developer proceeds to fix the software error  and deploy it . However, in most cases, the software developer may find that the information is insufficient for various reasons discussed above. Thus, in order to obtain the vital information, the software developer needs to adjust and increase the logging level  and then requests the customer to resume operation of the software system , with the hope that the software error would occur again so that the new vital information needed would be collected for identifying the cause of the software error. However, it may be possible that the software error will not occur again, which means the error is not reproducible, and the root cause of the software error may no longer be identified and the chance for fixing a software defect may be lost.","Besides the problems of collecting vital information, adjusting the logging level may also cause problems to the customer as it involves the step of changing the software configuration on the customer's computer. Sometimes, it may even be necessary to modify the software modules to inject more logging statements to capture vital information which was not captured previously. If the computer is not accessible by the software developer, the customer will be requested to make the changes either by modifying a file or registry settings directly, or by applying a software patch, resulting in a risk of misconfiguration or upsetting the customer's system, as well as customer's dissatisfaction.","Further, the software is usually operated on a computer system having many software applications which are provided by different software vendors or developers and the status and behavior of these software applications are not monitored generally from the overall computer system's aspect. The fact that these software applications are running on the same physical hardware and operating platform means that they are in fact consuming the same pool of system resources, such as CPU, memory, storage space, object handles, etc. Thus, poorly designed software which consumes system resources uncontrollably may eventually cause resource starvation on the system and subsequently lead to unexpected software error in other software running on the same computer. In this case, the root cause of the software error cannot be identified easily as it lies in some other software that is not monitored.","In addition, because the usage of the system resource is not monitored from the overall system's aspect, it is not possible to provide warning or diagnosis advisory to the customer for taking preventive actions, and the customer will only recognize the problem after the software error has occurred.","According to a first exemplary aspect, there is provided a system for self-diagnosing and error reporting of a software application in a computer system having a plurality of software applications and background processes, the system comprising a diagnosis module configured to collect and monitor usage data of resources of the computer system, execution status of the software applications and background processes of the computer system, and software application error conditions, adjust logging level of log files according to the execution status of the software applications and background processes of the computer system and the software application error conditions, and generate diagnosis advisory based on the usage data of the resources of the computer system and the software error conditions, and a reporting module configured to collect and report the usage data of the resources of the computer system, the log files and the generated diagnosis advisory automatically to a user.","The system may further comprise a repository for storing the usage data of the resources of the computer system, a management Application Programming Interface configured to register the software applications and background processes of the computer system whose execution status needs to be collected and monitored, and a logging Application Programming Interface between the diagnosis module and the software applications. The logging Application Programming Interface is configured to output log files and report software error conditions.","The diagnosis module of the system may be further configured to analyze the usage data of the resources of the computer system to forecast the exhaustion of the resources and manage the system resources used by the system itself.","The diagnosis advisory preferably comprises the cause of resource exhaustion and actions to be taken by the user.","The reporting module may be further configured to provide a user graphical interface for interaction with the user and allow the user to make and edit screenshots, attach files and data, and set a desirable logging level to override the logging level set by the diagnosis module.","The reporting module may be further configured to collect related diagnosis information and package it together with the usage data of the resources of the computer system, the log files and the generated diagnosis advisory automatically to a user. The related diagnosis information may comprise captured screenshots, attached files or data, a complete file list, computer hardware specifications, operating system version and service pack level, Windows Event logs, a list of installed software packages and a list of running processes and services.","According to a second exemplary aspect, there is provided a method for self-diagnosing and error reporting of a software application in a computer system having a plurality of software applications and background processes, the method comprising collecting and monitoring usage data of resources of the computer system, execution status of the software applications and background processes of the computer system, and software application error conditions, adjusting logging level of log files according to the execution status of the software applications and background processes of the computer system and the software application error conditions, generating diagnosis advisory based on the usage data of the resources of the computer system and the software error conditions, and collecting and reporting the usage data of the resources of the computer system, the log files and the generated diagnosis advisory automatically to a user.","The method may further comprise registering the software applications and background processes of the computer system whose execution status needs to be collected and monitored, analyzing the usage data of the resources of the computer system to forecast the exhaustion of the resources, providing a user graphical interface for interaction with the user and allowing the user to set a desirable logging level to override the adjusted logging level.","The method may further comprise collecting related diagnosis information and package it together with the usage data of the resources of the computer system, the log files and the generated diagnosis advisory automatically to a user, and the related diagnosis information may comprise captured screenshots, attached files or data, a complete file list, computer hardware specifications, operating system version and service pack level, Windows Event logs, a list of installed software packages and a list of running processes and services.","The detailed description set forth below in connection with the appended drawings is intended as a description of the presently preferred embodiments of the invention, and is not intended to represent the only form in which the present invention may be practiced. It is to be understood that the same or equivalent functions may be accomplished by different embodiments that are intended to be encompassed within the scope of the invention.","As shown in , the exemplary system  has two sub systems: self-diagnosis system  for performing monitoring and diagnosing activities and error reporting system  for interaction with a customer or user  and outputting error reports to a software developer .","The self-diagnosis system  runs as a background service independently from any other services and applications in a computer system. It has a diagnosis module  which performs the main functions of the self-diagnosis system .","The diagnosis module  periodically captures and monitors the usage statistics of critical computer system resources , such as CPU, memory, hard disk spaces, object handles count, threads count and etc. The usage data is collected at the overall system level as well as at each process level. The diagnosis module  also performs trend analysis on the usage statistics to predict the possibilities of resource exhaustion and when it might occur, and generates daily, weekly, monthly, quarterly and annual forecasts based on the analysis.","The diagnosis module  is also configured to issues warnings or diagnosis advisories  to the customer  about the cause of resource exhaustion and appropriate actions to be taken. Such warnings or diagnosis advisories  are issued based on the generated forecasts as well as predefined diagnostic algorithms and diagnostic advisory knowledge base formulated and pre-defined by experienced engineers and stored in the self-diagnosis system . For example, if it determines that the resource exhaustion is due to genuine data growth, it would advise the customer to increase the system capacity. On the other hand, if it determines that the resource exhaustion is due to software defects such as resource leaks, then it would advise the customer  to report the phenomenon to the software developer  for further analysis.","Optionally, the diagnostic algorithms and diagnosis advisory knowledge base is extensible, capable of being added or updated dynamically.","A repository  stores the usage data of the computer system resources as Resource Usage History for trend analysis performed by the diagnosis module  and for possible troubleshooting in the future.","A management API (Application Programming Interface)  is provided to register software services and applications or background processes  at runtime for process status monitoring and management. Thus, the diagnosis module , through the management API , obtains and monitors the execution status of the registered software services and applications or background processes . With such information, the diagnosis module  is optionally configured to automatically restart the software services and applications or background processes  in the event that they are terminated unexpectedly or stopped responding in order to maintain software service availability.","A logging API (Application Programming interface) , an interface between the diagnosis module  and the software services and applications , is also provided to output tracing or debugging logs for the software services and applications  in a consistent and standardized manner. It also provides the avenue for software services and applications  to report software errors or abnormal software conditions to the diagnosis module .","In a preferred embodiment, the diagnosis module  manages the logging level of log files and adjusts the logging level automatically for software services and applications  which use the logging API . By default, the logging level will be set to low under a normal operating condition in order to minimize impact on performance and system resources. When the diagnosis module  detects any abnormal software conditions, such as when any registered software service and application or background process is terminated unexpectedly or stopped responding or when any software service and application reports a severe software error condition through the logging API , it then sets the logging level for the erroneous software application to high automatically. If the diagnosis module  no longer detects any abnormal software conditions over a period of predefined timeframe after a software application is updated, it then determines that the software error has been resolved and will adjust the logging level back to low automatically.","The diagnosis module  also generates diagnosis advisory  containing notification messages to inform the customer  about the detected abnormal software conditions and advices for the customer  to use the error reporting system  to report the error to the software developer .","Optionally, the diagnosis module  regulates and manages the system resources which are used by the self-diagnosis system , including CPU, memory and storage space, maintaining a minimal footprint and impact on the computer system. For example, it manages the storage capacity of log files  and the collected usage data of the computer system resources which is stored in the repository , and performs functions periodically, such as aggregating, compacting, compressing, archiving, overwriting, or deleting old data, to make sure that the self-diagnosis system  will not cause any system problems.","The error reporting system  provides a reporting module  which guides the customer  in providing the necessary information related to the software error via a graphical user interface (GUI) application . The reporting module  allows the customer to write textual descriptions as well as make and attach screenshots and additional supporting files easily. It provides an electronic form for the customer  to comment and describe about the software error or problem, including the descriptions about the steps to reproduce the problem. It also provides a function for the customer  to choose to take screenshots as full-screen, window or selected areas with a click of a predefined button on the GUI or by pressing a hot-key. The screenshots are stored automatically and the customer can review, annotate by adding comments or highlighting, or delete the screenshots easily. It also provides the option for the customer to attach additional files or data related to the software error.","Upon finalization by the customer , the reporting module  automatically assembles all diagnosis information available, including the log files , the resource usage reports  from the repository , diagnosis advisories , and other related information  to generates a Error Report Package  which can be sent to software developer  for further analysis and investigation either using email or courier. The automatic collection of diagnosis information by the reporting module  frees the customer from providing such information manually and eliminates human error. Other related information  may include, but not be limited to, captured screenshots, attached files or data, a complete file list having at least file names, time stamps and file versions, computer hardware specifications, operating system version and service pack level, Windows Event logs, a list of installed software packages and a list of running processes and services. The above list of other related information  may be configured to be extended to additional files or data which may be collected and included in the Error Report Package as default selection.","Thus, the Error Report Package  contains the clear description about the software error together with all the necessary information for the software developer to reconstruct and reproduce the customer's environment accurately and quickly, and to identify the root cause of the software error.","In an alternative embodiment, instead of generating the Error Report Package , the error reporting system  may also provide the customer with the option to submit the error report directly to the software developer  via interne.","The error reporting system  may provide a logging level module  for the customer to set the desirable logging level for software services and application, which overrides the logging level set automatically by the diagnosis module  of the self-diagnosis system .","It should be appreciated that the invention has been described by way of example only and that various modifications in design and\/or detail may be made without departing from the spirit and scope of this invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The present invention is illustrated by way of examples and is not limited by the accompanying figures, in which:",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
