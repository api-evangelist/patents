---
title: Network management interface with selective rendering of output
abstract: A network router management interface offers two different presentation modes for viewing configuration and operational information encoded in extensible markup language output obtained from a network router. The network router management interface provides an application programming interface (API) that permits client applications to formulate configuration and operational requests according to an extensible markup language, such as XML. In response to the configuration and operational requests submitted by a client application, the router produces XML output. On a selective basis, the user may elect to view or archive the XML output in either a rendered or unrendered format. In this manner, clients such as network administrators, installation technicians and applications developers can view raw XML output on a selective basis for use in development and debugging.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07054901&OS=07054901&RS=07054901
owner: Juniper Networks, Inc.
number: 07054901
owner_city: Sunnyvale
owner_country: US
publication_date: 20010531
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The invention relates to computer networks and, more particularly, to managing network routers.","A computer network is a collection of interconnected computing devices that exchange data and share resources. In a packet-based network, such as the Internet, the computing devices communicate data by dividing the data into small blocks called packets. The packets are individually routed across the network from a source device to a destination device. The destination device extracts the data from the packets and assembles the data into its original form. Dividing the data into packets enables the source device to resend only those individual packets that may be lost during transmission.","Devices within the network, often referred to as routers, maintain tables of routing information that describe available routes through the network. Each route defines a path between two locations on the network. Upon receiving an incoming data packet, the router examines header information within the packet to identify the destination for the packet. Based on the header information, the router accesses the routing table, selects an appropriate route for the packet and forwards the packet accordingly.","A router management interface provides access to software modules and other resources residing on the router. In particular, the router management interface permits various entities, such as human users and automated scripts, to configure the router and obtain operational information. Using the router management interface, the entities can make changes to the present router configuration and more efficiently manage router resources, policies and relationships with other routers. In addition, the router management interface provides access to a variety of information relating to router configuration, protocols, firewalls, interfaces, router chassis inventory, system parameters, routing policies, forwarding options, network flow statistics, error logs, and performance metrics.","The invention provides a network router management interface with different presentation modes for viewing configuration and operational information encoded in extensible markup language output obtained from a network router. The network router management interface provides an application programming interface (API) that permits client applications to formulate configuration and operational requests according to an extensible markup language, such as XML. XML is one example of an extensible markup language in the class encompassed by the Standard Generalized Markup Language (SGML) specification, and will be described herein for purposes of illustration.","In response to the configuration and operational requests submitted by a client application, the router produces XML output. In operation, the client application ordinarily renders the XML output graphically or textually for viewing by a user or archival to a file. On a selective basis, however, the user may elect to view or archive the XML output in an unrendered format. In other words, the network router management interface can be configured to present, at the client's option, either the rendered XML output or the raw XML output. As an example, the network router management interface may, in response to a command from a client application, emit XML output for display in an unrendered format. In general, the network router management interface may emit substantially the same XML output in either mode, but include a command for the client application, following a client request to display unrendered output, indicating whether the XML output should be rendered or presented in an unrendered form.","In one embodiment, the invention provides a network router management interface comprising a client interface that receives, from a network router client, configuration requests and operational requests encoded with extensible markup language tags. A storage device stores a network management interface schema that maps the extensible markup language tags to configuration and operational information associated with software modules running on a network router. The software modules include a chassis software module that defines an inventory of components in the network router chassis, a device configuration software module that defines a physical configuration of the network router, and a routing protocol module that administers protocols supported by the network router. A management server software module parses the configuration requests and the operational requests received at the client interface and accesses the corresponding configuration and operational information associated with the chassis software module, the device configuration software module, and the routing control software module according to the network management interface schema. The management server module emits to the client interface replies encoded with extensible markup language tags according to the network management interface schema. In response to a selection made by a user, the management server module emits the replies for presentation in either a rendered or unrendered format.","In another embodiment, the invention provides a method comprising receiving, at a client interface of a network router, configuration requests and operational requests encoded with extensible markup language tags. The method further includes accessing a network management interface schema that maps the extensible markup language tags to configuration and operational information associated with software modules running on a network router. The software modules include a chassis software module that defines an inventory of components in the network router chassis, a device configuration software module that defines a physical configuration of the network router, and a routing protocol module that administers protocols supported by the network router. The method also involves parsing the configuration requests and the operational requests, and accessing the corresponding configuration and operational information associated with the chassis software module, the device configuration software module, and the routing control software module according to the network management interface schema. In addition, the method includes communicating, to a network router client, replies encoded with extensible markup language tags according to the network management interface schema and, in response to a selection made by a user, emitting the replies for presentation in either a rendered or unrendered format. A computer-readable medium that carries instructions for performing such a method is also contemplated.","In an added embodiment, the invention provides a system comprising a client interface to transmit configuration requests and operational requests encoded with extensible markup language tags to a network router, and receive replies encoded with extensible markup language tags from the network router, and a management server module that emits the replies to a user for presentation in either a rendered or unrendered form in response to a selection made by the user.","In a further embodiment, the invention provides a method comprising transmitting configuration requests and operational requests encoded with extensible markup language tags to a network router, receiving replies encoded with extensible markup language tags from the network router, and presenting the replies to a user in either a rendered or unrendered form in response to a selection made by the user. A computer-readable medium that carries instructions for performing such a method is also contemplated.","A network router management interface and method consistent with the principles of the invention can provide a number of advantages. For example, at its option, a user can readily view unrendered XML output produced by the router. In particular, a client interface associated with the network router management interface can be configured to present replies to a user for presentation in either a rendered or unrendered form in response to a selection made by the user. When a client requests that XML output be displayed in an unrendered format, the network router management interface may respond by including with subsequent XML output a command that instructs the client application not to render the XML output. Thus, the XML output may be the same in either mode, but the response of the client application is different. In this manner, clients such as network administrators, installation and maintenance technicians and applications developers can view the raw XML output on a selective basis for use in development and debugging. With this capability, the user may be better equipped to trace the root of a problem and correct it.","The above summary of the invention is not intended to describe every embodiment of the invention. The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 1","FIG. 1"],"b":["10","10","10","12","14","16","10","18","20","22","12","20","22","12","21","10"]},"Routing engine  maintains and updates the routing information within routing table . Forwarding engine  analyzes the contents of routing table  prior to receiving packets and pre-selects routes to be used when forwarding packets. Forwarding engine  then stores the selected routes in forwarding table . Upon receiving an inbound packet, forwarding engine  examines information within the packet to identify the destination of the packet. Based on the destination, forwarding engine  selects an available route and forwards the packet to one of the IFCs . IFCs  may be configured according to one of several different network protocols.","As discussed in detail below, control unit  provides a network router management interface with two different output modes for viewing configuration and operational information encoded in extensible markup language output obtained from a router. The network router management interface provides an application programming interface (API) that permits client applications to formulate configuration and operational requests according to an extensible markup language, such as XML.","In response to the configuration and operational requests submitted by a client application, router  produces XML output. At the user's election, the client application either renders the XML output graphically or textually or presents XML output in an unrendered format, i.e., a format that permits the user to view the raw XML tags associated with the output. In this manner, clients such as network administrators, installation and maintenance technicians and applications developers can view the raw XML output on a selective basis for use in development and debugging.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 2","FIG. 2"],"b":["12","12","14","16","12","14","24","24"]},"As examples, routing engine  may include a chassis module , a device configuration module , and a routing protocol module  running as processes within the operating environment of operating system . A management server module  provides a user interface for interaction with software modules , , . Chassis module  defines an inventory and status of components installed in the chassis of network router , including IFCs . Device configuration module  defines and controls the physical configuration of network router . Routing protocol module  administers protocols supported by network router . For example, routing protocol module  may implement protocols for exchanging route information with other routing devices and for updating routing table  (shown in ).","Management server module  communicates with one or more client interface modules running on routing engine . In the example of , management server module  communicates with a command line interface (CLI) module . Together, management server module  and CLI module  form a network router management interface. CLI module  serves as a daemon process that listens for requests from clients. In some embodiments, CLI module  may give way to direct communication between clients and management server module , e.g., via script commands such as JUNOScript commands. The clients may take the form of human users such as system administrators or automated script applications. Initially, CLI module  listens for CLI commands, and passes them to management server module  for handling. Management server module , however, may dynamically replace CLI module  presented by control unit  with an XML-based API upon receipt of a particular CLI command from a client. More specifically, management server module  redirects incoming commands from CLI module  and services them based on the XML-based API.",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 3","b":"14"},"A network router management interface providing an XML-based API suitable for use with the invention is described, for example, in U.S. patent application Ser. No. 09\/871,458, to Philip Shafer, filed May 31, 2001, entitled \u201cNETWORK ROUTER MANAGEMENT INTERFACE WITH API INVOKED VIA LOGIN STREAM,\u201d the entire content of which is incorporated herein by reference.","XML is one example of an extensible markup language in the class encompassed by the Standard Generalized Markup Language (SGML) specification, and will be described herein for purposes of illustration. The official XML specification is governed by the World Wide Web Consortium and is available on the web at http:\/\/www.w3.org\/TR\/REC-xml. The structure of the XML tags communicated via the XML API may be defined using Data Type Definition (DTD) files, XML Schema Language files, or other similar devices for XML tag definition. As an example, the XML tags may conform to the evolving JUNOScript\u2122 API developed by Juniper Networks, Inc. of Sunnyvale, Calif. The JUNOScript\u2122 API is described, for example, in JUNOScript\u2122 API Guide and Reference, Version 4.3, available from Juniper Networks, Inc., the entire content of which is incorporated herein by reference.","In the example of , management server module  accesses one or more software modules ,  running on routing engine , as well as other router resources such as router configuration database , to serve client requests. Software modules ,  may include a variety of software modules such as chassis module , device configuration module , and routing protocol module  as described with reference to . Router configuration database  may store information associated with software modules ,  and router hardware such as configuration information. Management server module  may obtain operational information from software module , , indicating operational status of the router. A management interface schema  maps extensible markup language tags received by management server module  to information associated with software modules , , including the information in configuration database  and information that may be obtained directly from software modules , . Network management schema  may take the form of a data definition language (DDL) file, and can be stored on hard disk or other data storage media associated with packet routing engine .","Management server module  presents an XML API . A variety of clients such as CLI client , web browser client , or script client  may establish independent communication sessions with management server module  via XML API . Management server module  and XML API  together present a network router management interface . CLI client  may take the form of a remote computer operated by a human user who enters CLI commands encoded with XML tags that conform to the API. In this case, the client application running on CLI client  may render the XML output received from management server module  as command line output, e.g., in a textual form. Web browser client  may graphically render the XML output for human users, e.g., using style sheets communicated or identified by management server module  with particular XML replies. Script client  may take the form of an automated script application running on a remote client computer, and may render XML output into reports, logs, and the like. In addition, script client  may respond to XML replies with additional requests according to script code loaded into the script client.","In operation, management server module  receives both configuration requests and operational requests encoded with XML tags from clients , , . Configuration requests include requests to change router configuration or obtain information about the current configuration. Management server module  can make changes to the router configuration by modifying configuration records in database . The configuration information may be stored hierarchically in database , which may reside on a hard disk or other data storage medium. Operational requests include requests for information about router status such as network flow and performance. Management server module  can obtain operational information from database  or directly from modules , .","Management server module  serves requests received from clients , ,  by parsing the extensible markup language tags, and accessing schema  to map the tags to pertinent configuration or operational information associated with modules , , database , or both. The tags may include, for example, chassis tags pertaining to information about the chassis components installed in the router chassis, device configuration tags pertaining to information about the physical configuration of the network router, and routing protocol tags pertaining to information about the protocols supported by the network router. Upon accessing the corresponding configuration and operational information according to the network management interface schema, management server module  emits replies encoded with extensible markup language tags.","With further reference to , management server module  may receive output from software modules ,  or database  in either XML or ASCII format. In particular, some of the router resources , ,  may be configured to emit XML-encoded output, while others may simply emit ASCII output. When management server module  receives XML-encoded output, it may simply act as a conduit and communicate the output to a client , , , or include additional XML tags to further encode and integrate the XML-encoded output received from router resources , , . If management server module  receives ASCII output, however, it can be configured to encode the ASCII output with XML tags before sending it to a client application , , . Thus, in some instances, management server module  may \u201cwrap\u201d the ASCII output in XML tags to present replies that conform to XML API . Management server module  may access one or more DTD or XML Schema Language files for router  to ensure that the tags conform.","Clients , ,  parse the respective XML replies, extract pertinent information, and present the XML output as specified by the client application. Consistent with the principles of the invention, clients , ,  either render the XML output graphically or textually, or present the XML output in a raw, unrendered format, dependent on the nature of the replies emitted by management server module . Client applications , ,  may parse the XML tags in the replies using a parser that implements a standard API such as the Document Object Model (DOM) or Simple API for XML (SAX). DOM implementations are available for several programming languages, including C, C++, Perl, and Java. Management server module  may parse the requests using a similar API. XML API  greatly facilitates the parsing of requests and replies. Tag names and structural rules provided by a DTD or XML Schema Language file make the tag streams highly structured and predictable.","The following are some examples of operational and configuration requests made by client applications , ,  according to XML API  and corresponding replies emitted by management server module . The examples are from the JUNOScript\u2122 API. Again, an operational request may be a request for information about router status. As a first example, the following request is for detailed information about a router interface called \u201cge-2\/3\/0\u201d:",{"@attributes":{"id":"p-0037","num":"0036"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<rpc>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<get-interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<interface-name>ge-2\/3\/0<\/interface-name>"]},{"entry":[{},"<detail\/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/get-interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/rpc>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The reply from management server module  for the operational request described above provides reply tags for all of the request tags, as specified by XML API . For example, management server module  returns the information requested by the <get-interface-information> tag in a response tag called <interface-information>, and the information requested by the <get-chassis-inventory> tag in a response tag called <chassis-inventory>. The following sample reply includes information about the interface called \u201cge-2\/3\/0\u201d:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<rpc-reply>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<interface-name>ge-2\/3\/0<\/interface-name>"]},{"entry":[{},"<interface-index>20<\/interface-index>"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/rpc-reply>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"32"},"The client application associated with a client , ,  is configured to accept user input that specifies whether the XML reply from management server module  should be rendered or presented in an unrendered format. If rendered output is desired, the above reply could be displayed in any graphical or textual format as follows:","Interface Name: ge-2\/3\/0","Interface Index: 20",".",".",".","If unrendered output is desired, however, the client application simply presents the raw XML output communicated by management server module  as follows:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"<rpc-reply>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<interface-name>ge-2\/3\/0<\/interface-name>"]},{"entry":[{},"<interface-index>20<\/interface-index>"]},{"entry":[{},"."]},{"entry":[{},"."]},{"entry":[{},"."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/interface-information>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/rpc-reply>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["32","32","32","46","46","32","46","32","48","50","48","32","50"]},"Typically, the client application may have a default mode in which all XML output is rendered by client , , . In this case, a |display xml| pipe, or other command, entered by the user overrides the default mode and instructs the management server module  to transmit output for presentation of the XML output with a command that specifies an unrendered format. In other cases, the client application may include no default mode, and require that the user select one of the modes at the beginning of a session. In general, management server module  emits substantially the same XML output in either case. Following the |display xml| pipe, however, the XML output produced by management server module  is accompanied by a command to the client application indicating that the XML output should not be rendered. The command may precede the XML output, and may be in effect for an entire rpc reply. In response, CLI client  does not render the XML output, and instead displays it in a raw, unrendered format.","Generally, a user associated with a CLI client  or web browser client  should be able to change the presentation mode during a session. When the client application is in render mode, for example, a user may provide user input that instructs management server module  to change modes. In this case, management server module  may stay in the requested mode until additional user input instructs otherwise. Alternatively, the mode change command could be interpreted to enter a different mode for only one, or a series of, requests, and then revert back to a default mode. In one embodiment, a CLI client  does not commence rendering again until it receives the next closed XML tag, e.g., <\/rpc reply>.","In any event, the user is able to selectively control the presentation mode of the client application to view either rendered XML output or raw, unrendered XML output. The presentation of raw, unrendered XML output may be advantageous to application developers, network administrators, and installation and maintenance technicians in development and debugging. If management server module  seems to be producing erroneous output, for example, analysis of the raw XML output may permit inspection of the output emitted by a particular software module ,  or database . With this capability, the user may be better equipped to trace the root of a problem and correct it.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 4","FIG. 4"],"b":["46","48","50","10","52","32","10","42","54","32","36","38","40","56","58","46","48","50","60","36","38","40","32","32","46","48","50"]},"Before emitting a reply to client , , or , management server module  determines whether it is in a presentation mode that requires rendering of the XML output or presentation of the XML output in a raw, unrendered format. For example, management server module  may determine whether a user has entered a command such as the |display xml| pipe (). If not, management server module  emits a normal reply formulated for presentation as rendered XML output by the client application , , . The reply is not accompanied by a command that would instruct the client application to not render the XML output. Accordingly, in this case, the client application renders the XML output graphically or textually and presents the rendered output to the user via a display, archive file, or other output medium (). If the user has entered a command such as the |display xml| pipe, however, management server module  emits a reply formulated for presentation of the output in an unrendered format. In particular, management server module  emits the same XML output, but may precede the output with a command that instructs the client application not to render the output. In this case, the client application , ,  simply presents the XML output in a raw, unrendered form () for inspection by the user.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 5","FIG. 5"],"b":["46","10","46","56","68","70","72","68","32","70","70","72","46","78","76","14","78","46"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 6","FIG. 6","FIG. 3"],"b":["80","32","82","84","36","38","40","32","86"]},"Management server module  then receives a reply from the pertinent router resource (). If management server module  receives an ASCII format reply from the router resource, it \u201cwraps\u201d the ASCII format reply in appropriate XML tags specified by the XML API . As an alternative, management server module  could include a translator that translates ASCII into corresponding XML tags based on a heuristic translation engine. If management server module  receives an XML-encoded reply, there may be no need for additional encoding. Alternatively, management server module  may include additional XML tags within the reply to further encode and integrate the XML-encoded output received from router resources , , .","In each case, management server module  transmits the XML-encoded reply to the client application. Management server module  first determines whether it is in a default mode or the \u2018display xml\u2019 mode (). In the default mode, management server module  presents output for presentation by the client application in a rendered format. If the display xml mode applies, management server module  adds to the XML reply a command () that the client application should not render the XML reply. Instead, the client application should respond by preparing the XML reply for presentation in a raw, unrendered format. With the exception of the \u201cdisplay xml\u201d indication, the XML output emitted by management server module  otherwise may be the same in both modes. If the \u2018display xml\u2019 mode does not apply, management server module  transmits the XML reply to the client application (). The client application parses the XML reply (). In the event the XML reply is not accompanied by a \u2018display xml\u2019 mode command (), the client application accesses the render library () for rendering support, and renders output based on the contents of the XML reply () and any style sheets, ODL files, or other information provided by the render library. If the XML reply instructs the client application to present the XML reply in an unrendered format, the client application merely presents the XML code without additional textual or graphical rendering ().","Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
