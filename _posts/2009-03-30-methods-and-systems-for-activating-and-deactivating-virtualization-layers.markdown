---
title: Methods and systems for activating and deactivating virtualization layers
abstract: A computer-implemented method may include identifying an action associated with a software program. The computer-implemented method may also include determining that the software program is located in a virtualization layer. The computer-implemented method may further include changing an activation state of the virtualization layer in response to the action. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612994&OS=08612994&RS=08612994
owner: Symantec Corporation
number: 08612994
owner_city: Mountain View
owner_country: US
publication_date: 20090330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION OF EXEMPLARY EMBODIMENTS"],"p":["Information Technology (IT) administrators may spend a substantial amount of time managing software applications. Managing software applications may include resolving application conflicts, repairing damaged applications, migrating to new versions of applications, installing applications, and patching applications. These tasks may be frustrating and time consuming.","Application virtualization technologies may simplify many IT administration tasks. For example, application virtualization may allow an administrator to turn on or off a user's access to applications and data, which may reduce the time it takes to provide users with the resources they need. Application virtualization may also allow an administrator to reset broken applications to a known-good state without fear of damaging other applications. Application virtualization may ensure that each virtualized application has its own copy of DLL files that it would normally share with other applications. This eliminates conflicts that occur when two or more applications may require different versions of the same DLL, thereby rescuing administrators from a condition commonly referred to as \u201cDLL hell.\u201d","Application virtualization may allow different versions of the same application to peacefully coexist. Among other things, this means that an administrator may keep older versions intact and available while testing new versions. Even after migrating to a new version, an administrator may quickly rollback to the previous version at any time. Another advantage of some traditional virtualization technologies is the ability to deactivate a virtualization layer to conserve system resources. Unfortunately, managing multiple virtualization layers may be cumbersome. For example, a user may not remember to deactivate a virtualization layer or may not have time to deactivate a virtualization layer that is not in use. Furthermore, it may be time consuming for a user to activate a virtualization layer each time the user needs to access a program installed in the virtualization layer.","Embodiments of the instant disclosure may provide methods and systems for activating and deactivating virtualization layers on an as-needed basis. For example, a layer-management module may automatically activate a virtualization layer when a software program installed in the virtualization layer is needed to access a system resource (e.g., a file). The layer-management module may also deactivate a virtualization layer when a software program in the virtualization layer is no longer in use. Activating and deactivating virtualization layers may be referred to herein as changing activation states of virtualization layers.","Generally, a layer-management module may identify an action associated with a software program, determine that the software program is located in a virtualization layer, and change the activation state of the virtualization layer in response to the action. In some embodiments, identifying the action may include identifying a request to access the software program and\/or a file or other resource associated with the software program. In other embodiments, identifying the action associated with the software program may include identifying an attempt to close the software program, identifying an attempt to close a computer resource, and\/or identifying termination of a process associated with the software program.","In some embodiments, the action associated with the software program may include an attempt to open a file. The software program may be configured to open the file, and the layer-management module may determine that a file type of the file (e.g., a MIME type) is in a file-association list that identifies the file type as a file type that may be accessed by the software program installed in the virtualization layer. The virtualization layer may be activated to allow the file to be accessed by the software program. The virtualization layer may be deactivated when the software program is no longer in use. In some embodiments, after the virtualization layer is deactivated, the layer-management module may cause an icon associated with the software program to continue to be displayed for the file associated with the software program. The instant disclosure may also include various other embodiments, alternatives, and examples for activating and deactivating virtualization layers.","Throughout the drawings, identical reference characters and descriptions indicate similar, but not necessarily identical, elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather, the instant disclosure covers all modifications, equivalents, and alternatives falling within the scope of the appended claims.","Embodiments of the present disclosure provide methods and systems for activating and deactivating virtualization layers on an as-needed basis. For example, a layer-management module may identify an action associated with a software program, determine that the software program is located in a virtualization layer, and change an activation state of the virtualization layer in response to the action.  shows an exemplary system for activating and deactivating virtualization layers, and  show methods for accomplishing the same.  show exemplary application-layering technologies, and  illustrate an exemplary computing system and network architecture for implementing embodiments of the instant disclosure.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["100","100","110","120","130","110","112","114","112","114"]},"In certain embodiments, one or more modules shown in  may represent one or more software applications or programs that, when executed by a computing system, may cause the computing system to perform one or more steps disclosed herein. For example, as will be described in greater detail below, one or more of modules  may represent software modules configured to run on one or more computing devices, such as computing system  in  and\/or portions of exemplary network architecture  in . One or more of modules  in  may also represent all or portions of one or more special-purpose computers configured to perform one or more tasks associated with steps disclosed herein.","As previously mentioned, system  may also include a database . Database  may represent a portion of one or more computing devices. Database  may represent a portion of computing system  in  and\/or portions of exemplary network architecture  in . Database  may include any data structure capable of storing and\/or organizing virtualization-layer associations and processes.","Database  may store virtualization-layer associations , which may associate file types and\/or actions with one or more virtualization layers. For example, virtualization-layer associations  may include a list of file types associated with virtualization layer . A file type may be associated with a virtualization layer if one or more software programs installed in the virtualization layer are programmed to enable use of a file of the file type. A list of file types may include one or more file types associated with a virtualization layer.","Virtualization-layer associations  may include one or more lists that identifies one or more software programs associated with one or more virtualization layers. A software program may be identified in a list associated with a virtualization layer when the virtualization layer includes the software program.","Virtualization-layer associations  may also include one or more lists of actions associated with one or more virtualization layers. An action may be associated with a virtualization layer when a software application stored in the virtualization layer is capable of performing the action and\/or enabling performance of the action. For example, the action may include an attempt to access a network, and a network agent may enable access to the network. If the network agent is installed in virtualization layer , virtualization-layer associations  may associate attempts to access the network with virtualization layer . The discussions corresponding to  provide additional examples of virtualization-layer associations.","In addition to virtualization-layer associations , database  may include a process list . Process list  may include identify one or more processes that are associated with one or more software programs installed on one or more virtualization layers. Tracking module  may create and\/or use process list  to track processes associated with virtualization layers. If a virtualization layer is to be deactivated, tracking module  may terminate one or more processes associated with the virtualization layer.","System  may include one or more virtualization layers, such as virtualization layer . A detailed discussion of virtualization layers is provided in . Virtualization layer  may include a software program . Software program  may be installed on virtualization layer . Software program  may include any software application, software driver, software agent, and\/or other computer-executable code that may be included in a virtualization layer.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 2","FIG. 3"],"b":["200","112","132","210","112","132","112","132","132","132","132"]},"In some embodiments, identifying an action associated with a software program may include determining that the software program is not being used or is no longer needed. In such embodiments, layer-management module  may identify an action associated with the software program by identifying an attempt to close the software program, identifying an attempt to close a computer resource, and\/or identifying the termination of a process associated with the software program. Examples of determining that a software program is not in use are provided in the discussion corresponding to .","After identifying the action associated with software program , layer-management module  may determine that software program  is located in virtualization layer  (step ). In some embodiments, layer-management module  may determine that software program  is located in virtualization layer  by determining that the action associated with the software program is identified in virtualization-layer associations . For example, if the action is an attempt to open a file having a first file type, layer-management module  may determine that virtualization-layer associations  associates the first file type with virtualization layer .","By associating the first file type with virtualization layer , virtualization-layer associations  indicates that virtualization layer  includes a software program (e.g. software program ) capable of opening files having the first file type. Thus, by determining that virtualization-layer  is associated with the first file type, layer-management module  may determine that software program  is located in virtualization layer . In other words, by determining that virtualization-layer  is associated with the first file type, layer-management module  may determine that virtualization-layer  may need to be activated to allow the file of the first file type to be opened.","Once layer-management module  determines that software program  is located in virtualization layer , layer-management module  may change an activation state of virtualization layer  (step ). By changing an activation state of virtualization layer , layer-management module  may transform a software program installed on virtualization layer  from an unusable software program to a usable software program.","Layer-management module  may change an activation state of virtualization layer  by activating and\/or deactivating virtualization layer . For example, if the action associated with the software program is an attempt to open a file associated with software program , layer-management module  may activate virtualization layer  to enable software program  to open the file. In other embodiments, when the action is an action indicating that software program  is no longer being used, layer-management module  may change the activation state of virtualization layer  by deactivating virtualization layer .",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3"],"b":["112","310"]},"Examples of computer resources include files, network resources, input devices, output devices, and any other computer data, code, or hardware. A file may be associated with a software program if the software program is capable of opening, modifying, and\/or printing the file. A network resource (e.g., a network interface or agent) may be associated with a software program if the software program enables use of the network resource. Similarly, an input device or output device may be associated with a software program (e.g., a device driver) if the software program enables use of the input or output device.","Identifying an attempt to access a computer resource may include identifying one or more actions. In some embodiments, identifying an attempt to access a computer resource may include identifying a request to open a file, identifying a request to print a file, and\/or identifying a request to modify a file. For example, a user may attempt to open a file by clicking on the file. An operating system may search for a program capable of opening the file. For example, a WINDOWS operating system may check an HKEY_CLASSES_ROOT registry hive and\/or an HKEY_CURRENT_USER registry hive to search for a file association that identifies a program capable of opening the file. Some operating systems (e.g., LINUX) may provide file associations using MIME type-based associations, and other operating systems (e.g., MAC OS) may use type codes and\/or creator codes for file associations.","In some embodiments, if an operating system does not find a software program capable of opening the file, layer-management module  may receive the request to open the file and may determine whether a deactivated virtualization layer includes a program capable of opening the file. In other embodiments, layer-management module  may receive (e.g., intercept) the request to open the file before the operating system checks for file-system associations.","As another example of identifying an attempt to access a computer resource, layer-management module  may identify an attempt to use an output device (e.g., a printer, a display device, etc). In some embodiments, layer-management module  may receive a request to access the output device if an operating system cannot find a software program that enables use of the device. In other embodiments, layer-management module  may intercept a system call to use the output device before the operating system checks for software programs that enable use of the output device.","Returning to the method shown in , after identifying the request to access software program , layer-management module  may determine that software program  is located in virtualization layer  (step ). In embodiments where the request to access a software program includes an attempt to access (e.g., open, close, or print) a file associated with the software program, layer-management module  may check virtualization-layer associations  to determine whether a deactivated layer includes a software program capable of accessing the file. Layer-management module  may check virtualization-layer associations  to determine whether a list of file types associated with a layer includes a file type of the file. For example, the request may include a user's attempt to open a MICROSOFT WORD file (e.g., .doc file) by clicking on the file. After the user clicks on the file, layer-management module  may check to see whether a \u201c.doc\u201d file type is listed in virtualization-layer associations . In some embodiments, layer-management module  may check virtualization-layer associations  after an operating system fails to find a software program to access the file. In other embodiments, layer-management module  may check virtualization-layer associations  before the operating system checks other file associations.","In embodiments where the request to access a software program includes an attempt to directly open a software program (e.g., when a user clicks on a shortcut whose target is the software program), layer-management module  may check a program list in virtualization-layer associations  to determine whether the software program is included in a virtualization layer. In embodiments where the request to access a software program includes an attempt to use a network resource, an input device, an output device, or other computer resource, layer-management module  may search virtualization-layer associations  to determine whether the action that caused the request is in an action list associated with a virtualization layer.","After layer-management module  determines that software program  is located in virtualization layer , layer-management module  may activate virtualization layer  (step ). Virtualization layer  may be activated by making contents of virtualization layer  visible to an operating system and\/or users. After virtualization layer  is activated, a software program installed on virtualization layer  may be available for use.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 4","FIG. 4"],"b":["112","132","410","112","132","112","132","132","112","132","132","132"]},"After determining that software program  is not in use, layer-management module  may terminate each process associated with software program  (step ). Layer-management module  may track processes associated with virtualized software programs in process list  and may terminate each process listed for software program  in process list . Process list  may be updated each time a software program is opened and\/or closed. For example, when a virtualization layer is activated and a software program is launched in the virtualization layer, layer-management module  may identify each process (including background processes) associated with the software program and save a list of the processes in process list . A process associated with a software program may include a process executing code of the software program.","By terminating each process associated with software application , layer-management module  may prepare virtualization layer  to be deactivated. In other embodiments, layer-management module  may not terminate any processes associated with software application . For example, layer-management module  may not terminate a process associated with software program  if only one process is associated with software program  and the process terminates when software program  is closed.","Layer-management module  may deactivate virtualization layer  after determining that software program  is not in use and\/or after terminating each process associated with software application  (step ). In some embodiments, layer-management module  may deactivate virtualization layer  by directing a file-system filter driver to deactivate virtualization layer . In other embodiments, layer-management module  may include a file-system filter driver (or other code capable of deactivating virtualization layers) and may deactivate virtualization layer  directly. A deactivated layer may only be visible to a file-system filter driver or other layer-management software. In some embodiments, a file-system filter driver may obscure a deactivated virtualization layer's existence so that the deactivated virtualization layer may not be visible to an underlying operating system. A software program installed on a virtualization layer that is deactivated may not be available for use until the virtualization layer is activated.","In traditional virtualization technologies, after a virtualization layer is deactivated, icons for files associated with software programs installed on the virtualization layer may revert to generic icons. For example, a WINAMP music player may be installed in a virtualization layer, and .mp3 and .wav files may be associated with (i.e., opened by) WINAMP. When the virtualization layer containing WINAMP is deactivated, icons for .mp3 and .wav files may change from WINAMP icons to generic icons.","To make application virtualization more transparent to users, embodiments of the present disclosure may cause file icons associated with a software program to persist even after a software application's virtualization layer is deactivated. Returning to the previous example, layer-management module  may cause WINAMP icons to be displayed for .mp3 and .wav files even when the virtualization layer containing WINAMP is deactivated.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIGS. 5-8","FIG. 5"],"b":["500","510","510","500","508","508","506","508","506","504","506","510","512","512","501","506","502"]},"In some application-virtualization technologies, each virtualization layer may include two sublayers: a read-only sublayer and a writable sublayer. An example of a virtualization technology that utilizes read-only and read-write sublayers is SYMANTEC's WORKSPACE VIRTUALIZATION (SWV). A read-only sublayer may include an immutable base state of an application. In some embodiments, users may not\u2014even unintentionally\u2014make changes to the read-only sublayer. For example, in SWV and\/or other virtualization technologies, only administrators may be able to edit, update, and\/or delete the contents of read-only sublayers. An application may be reset by deleting the existing read-only sublayer and replacing it with a new read-only sublayer. A read-write (i.e., writeable) sublayer may capture changes to a base state of an application. For example, when a user alters an application by changing default preferences, these changes may be written to the read-write sublayer.","Virtualized applications that include read-only sublayers and read-write sublayers may be created in any suitable manner. For example, SWV and\/or other virtualization technologies may allow a user to specify a setup program for an application the user wants to capture for purposes of virtualizing the application. SWV and\/or other virtualization technologies may launch the setup program and capture all of the applications, files, and processes, including child processes and process-induced changes, in a single Virtual Software Package (VSP) or other virtual package. SWV and\/or other virtualization technologies may also capture MICROSOFT installer (MSI) and service control manager changes. When the setup process is complete, SWV and\/or other virtualization technologies may automatically stop the capture process. An administrator may then edit the VSP or other virtual package to include settings that the administrator wants to distribute to users.",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 6","FIG. 6"],"b":["600","601","601","602","604","602","604","606","601","608","601","602","602","608","602","602","604","606","604","606","608","602"]},"Application  may make another file access . The virtualization system may not find a corresponding entry in layer B , but may find an entry in layer A . A third file access request  may not have a corresponding entry in layer B  or layer A , and the virtualization system may therefore return an entry from base file system .",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 7","b":["700","714","714","716","718","712","714","701","712","708","701","712"]},"Management application  may provide notices to a WINDOWS EXPLORER  indicating that the contents of a mounted file system have been changed. Other applications  may interact with the system, performing read and write operations to the file system and registry through file system filter driver . A compression library  may be provided to compress layer information.","File system filter driver  may store components of each layer and sublayer in one of two redirect areas (i.e. areas to which it redirects system calls). For example, file system filer driver  may store registry settings and attributes in a registry subsystem  and may store files in a file system subsystem .","In each sublayer's registry redirection area, file system filter driver  may store information about the state of the layer to which the sublayer belongs. File system filter driver  may also store references to the sublayer's file redirection area, reference counts, and sub-keys that\u2014through a service control manager\u2014may enable it to handle duplicate services running in multiple layers. In addition, file system filter driver  may store references to registry keys that contain user identity information, data-layer specifications, a sub-key for information about exclude entries, and a list of variables that govern the location of layer-specific files. As the name suggests, exclude entries may define application files and processes that a user may want to exclude from layers.","In the root of the file redirection area, file system filter driver  may store variable entries that abstract operating system specific file locations to enable users to deploy Virtual Software Archives (VSAs) on computers running various types of operating systems. When file system filter driver  is loaded on a user's computer, file system filter driver  may determine values for user and system variables.","File system filter driver  may store files that comprise sublayers and numbered folders under a file-redirection-area directory. File system filter driver  may use registry and file redirection areas to present an operating system\u2014and by extension, applications and users\u2014with an aggregate view of virtualized files and data for activated virtualization layers.","For example, a user may launch WINDOWS EXPLORER to view the contents of a program file folder. The user's machine may be running a virtualized application, such as MOZILLA FIREFOX, and the FIREFOX layer may be activated. While the layer is activated, file system filter driver  may intercept EXPLORER's calls to the file system. From the base, which may include all files, settings, and processes that do not reside in layers on the user's machine, file system filter driver  may gather a list of non-virtualized applications that reside in the program files folder. File system filter driver  may also redirect Explorer's calls to include FIREFOX, which would normally reside in the program files folder but which, in this case, resides in the file redirection area. File system filter driver  may then respond to EXPLORER's calls with a complete list of folders that the system expects to see in the program files directory, including FIREFOX. In this example, if the FIREFOX layer were deactivated, file system filter driver  would obscure its existence.",{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 8","b":["802","806","802","804","806","804"],"i":["a","n","a","n","a","n ","a","n"]},"A layer may isolate an application from a base file system and may include files and a directory structure of the application's installation. The application files and directories may be shadowed or overlaid over the regular file system. Shared libraries (such as DLLs), system accessible configuration (such as registry entries), and version control may be managed by a layering subsystem.","Though each layer may be a separate and individual entity within a computing system, the application files, data, and system-accessible configuration may be presented as though they resided in their respective ordinary locations. Thus, an application stored in a layer may appear to the operating system of a computing system as if it had been installed using traditional installation techniques.","A software application installed in a virtualization layer may be an application in any commonly used meaning, including word processors, browsers, system tools, games, and the like, and the principles described herein may also extend to any other software installed on a computing system.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 9","b":["910","910","910","910","914","916"]},"Processor  generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments, processor  may receive instructions from a software application or module. These instructions may cause processor  to perform the functions of one or more of the exemplary embodiments described and\/or illustrated herein. For example, processor  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps described herein. Processor  may also perform and\/or be a means for performing any other steps, methods, or processes described and\/or illustrated herein.","System memory  generally represents any type or form of volatile or non-volatile storage device or medium capable of storing data and\/or other computer-readable instructions. Examples of system memory  include, without limitation, random access memory (RAM), read only memory (ROM), flash memory, or any other suitable memory device. Although not required, in certain embodiments computing system  may comprise both a volatile memory unit (such as, for example, system memory ) and a non-volatile storage device (such as, for example, primary storage device , as described in detail below).","In certain embodiments, exemplary computing system  may also comprise one or more components or elements in addition to processor  and system memory . For example, as illustrated in , computing system  may comprise a memory controller , an Input\/Output (I\/O) controller , and a communication interface , each of which may be interconnected via a communication infrastructure . Communication infrastructure  generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure  include, without limitation, a communication bus (such as an ISA, PCI, PCIe, or similar bus) and a network.","Memory controller  generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example, in certain embodiments memory controller  may control communication between processor , system memory , and I\/O controller  via communication infrastructure . In certain embodiments, memory controller  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the steps or features described and\/or illustrated herein, such as identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing.","I\/O controller  generally represents any type or form of module capable of coordinating and\/or controlling the input and output functions of a computing device. For example, in certain embodiments I\/O controller  may control or facilitate transfer of data between one or more elements of computing system , such as processor , system memory , communication interface , display adapter , input interface , and storage interface . I\/O controller  may be used, for example, to perform and\/or be a means for identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps described herein. I\/O controller  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Communication interface  broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system  and one or more additional devices. For example, in certain embodiments communication interface  may facilitate communication between computing system  and a private or public network comprising additional computing systems. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection to a remote server via a direct link to a network, such as the Internet. Communication interface  may also indirectly provide such a connection through, for example, a local area network (such as an Ethernet network or a wireless IEEE 802.11 network), a personal area network (such as a BLUETOOTH or IEEE Standard 802.15.1-2002 network), a telephone or cable network, a cellular telephone connection, a satellite data connection, or any other suitable connection.","In certain embodiments, communication interface  may also represent a host adapter configured to facilitate communication between computing system  and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include, without limitation, SCSI host adapters, USB host adapters, IEEE 1394 host adapters, SATA and eSATA host adapters, ATA and PATA host adapters, Fibre Channel interface adapters, Ethernet adapters, or the like. Communication interface  may also allow computing system  to engage in distributed or remote computing. For example, communication interface  may receive instructions from a remote device or send instructions to a remote device for execution. In certain embodiments, communication interface  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps disclosed herein. Communication interface  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , computing system  may also comprise at least one display device  coupled to communication infrastructure  via a display adapter . Display device  generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly, display adapter  generally represents any type or form of device configured to forward graphics, text, and other data from communication infrastructure  (or from a frame buffer, as known in the art) for display on display device .","As illustrated in , exemplary computing system  may also comprise at least one input device  coupled to communication infrastructure  via an input interface . Input device  generally represents any type or form of input device capable of providing input, either computer or human generated, to exemplary computing system . Examples of input device  include, without limitation, a keyboard, a pointing device, a speech recognition device, or any other input device. In at least one embodiment, input device  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps disclosed herein. Input device  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As illustrated in , exemplary computing system  may also comprise a primary storage device  and a backup storage device  coupled to communication infrastructure  via a storage interface . Storage devices  and  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. For example, storage devices  and  may be a magnetic disk drive (e.g., a so-called hard drive), a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash drive, or the like. Storage interface  generally represents any type or form of interface or device for transferring data between storage devices  and  and other components of computing system .","In certain embodiments, storage devices  and  may be configured to read from and\/or write to a removable storage unit configured to store computer software, data, or other computer-readable information. Examples of suitable removable storage units include, without limitation, a floppy disk, a magnetic tape, an optical disk, a flash memory device, or the like. Storage devices  and  may also comprise other similar structures or devices for allowing computer software, data, or other computer-readable instructions to be loaded into computing system . For example, storage devices  and  may be configured to read and write software, data, or other computer-readable information. Storage devices  and  may also be a part of computing system  or may be a separate device accessed through other interface systems.","Storage devices  and  may also be used, for example, to perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps disclosed herein. Storage devices  and  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","Many other devices or subsystems may be connected to computing system . Conversely, all of the components and devices illustrated in  need not be present to practice the embodiments described and\/or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system  may also employ any number of software, firmware, and\/or hardware configurations. For example, one or more of the exemplary embodiments disclosed herein may be encoded as a computer program (also referred to as computer software, software applications, computer-readable instructions, or computer control logic) on a computer-readable medium. The phrase \u201ccomputer-readable medium\u201d generally refers to any form of device, carrier, or medium capable of storing or carrying computer-readable instructions. Examples of computer-readable media include, without limitation, transmission-type media, such as carrier waves, and physical media, such as magnetic-storage media (e.g., hard disk drives and floppy disks), optical-storage media (e.g., CD- or DVD-ROMs), electronic-storage media (e.g., solid-state drives and flash media), and other distribution systems.","The computer-readable medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer-readable medium may then be stored in system memory  and\/or various portions of storage devices  and . When executed by processor , a computer program loaded into computing system  may cause processor  to perform and\/or be a means for performing the functions of one or more of the exemplary embodiments described and\/or illustrated herein. Additionally or alternatively, one or more of the exemplary embodiments described and\/or illustrated herein may be implemented in firmware and\/or hardware. For example, computing system  may be configured as an application specific integrated circuit (ASIC) adapted to implement one or more of the exemplary embodiments disclosed herein.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1010","1020","1030","1040","1045","1050","1010","1020","1030","910","1040","1045","1050"]},"As illustrated in , one or more storage devices ()-(N) may be directly attached to server . Similarly, one or more storage devices ()-(N) may be directly attached to server . Storage devices ()-(N) and storage devices ()-(N) generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions. In certain embodiments, storage devices ()-(N) and storage devices ()-(N) may represent network-attached storage (NAS) devices configured to communicate with servers  and  using various protocols, such as NFS, SMB, or CIFS.","Servers  and  may also be connected to a storage area network (SAN) fabric . SAN fabric  generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric  may facilitate communication between servers  and  and a plurality of storage devices ()-(N) and\/or an intelligent storage array . SAN fabric  may also facilitate, via network  and servers  and , communication between client systems , , and  and storage devices ()-(N) and\/or intelligent storage array  in such a manner that devices ()-(N) and array  appear as locally attached devices to client systems , , and . As with storage devices ()-(N) and storage devices ()-(N), storage devices ()-(N) and intelligent storage array  generally represent any type or form of storage device or medium capable of storing data and\/or other computer-readable instructions.","In certain embodiments, and with reference to exemplary computing system  of , a communication interface, such as communication interface  in , may be used to provide connectivity between each client system , , and  and network . Client systems , , and  may be able to access information on server  or  using, for example, a web browser or other client software. Such software may allow client systems , , and  to access data hosted by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), or intelligent storage array . Although  depicts the use of a network (such as the Internet) for exchanging data, the embodiments described and\/or illustrated herein are not limited to the Internet or any particular network-based environment.","In at least one embodiment, all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server , server , storage devices ()-(N), storage devices ()-(N), storage devices ()-(N), intelligent storage array , or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program, stored in server , run by server , and distributed to client systems , , and  over network . Accordingly, network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more of the identifying, determining, changing, activating, deactivating, tracking, terminating, detecting, adding, and removing steps disclosed herein. Network architecture  may also be used to perform and\/or be a means for performing other steps and features set forth in the instant disclosure.","As detailed above, computing system  and\/or one or more of the components of network architecture  may perform and\/or be a means for performing, either alone or in combination with other elements, one or more steps of the exemplary methods described and\/or illustrated herein. For example, a computing system (e.g., computing system  and\/or one or more of the components of network architecture ) may perform a computer-implemented method for activating and deactivating virtualization layers. For example, the computing system may identify an action associated with a software program. The computing system may determine that the software program is located in a virtualization layer. The computing system may also change an activation state of the virtualization layer in response to the action.","In some embodiments, the computing system may identify the action by identifying a request to access the software program. The computing system may change the activation state of the virtualization layer by activating the virtualization layer. In at least one embodiment, the computing system may identify the request to access the software program by identifying an attempt to access a computer resource. The software program may enable the use of the computer resource.","In some embodiments, the computing system may identify the attempt to access the computer resource by identifying a request to open a file, identifying a request to print the file, and\/or identifying a request to modify the file. In certain embodiments, the computing system may identify the attempt to access the computer resource by identifying an attempt to use an input device. The software program may enable the use of the input device. The computing system may identify the attempt to access the computer resource by identifying an attempt to use an output device. The software program may enable the use of the output device. The computing system may also identify the attempt to access the computer resource by identifying an attempt to access a network. The software program may enable access to the network.","In at least one embodiment, the computing system may identify the request to access the software program by identifying an attempt to open the software program. In some embodiments, the computing system may identify the action by identifying an attempt to close the software program. The computing system may identify the action by identifying an attempt to close a computer resource. The software program may enable the use of the computer resource. The computing system may also identify the action by identifying termination of a process associated with the software program. In certain embodiments, changing the activation state of the virtualization layer may include deactivating the virtualization layer.","In other embodiments, the computing system may cause, after the virtualization layer is deactivated, an icon associated with the software program to be displayed for a file associated with the software program. In at least one embodiment, the computing system may determine that the software program is located in the virtualization layer by determining that a file type associated with the software program is in a list associated with the virtualization layer. In some embodiments, the computing system may identify the action associated with the software program by identifying an attempt to open a file having a first MIME type. The computing system may also determine that the file type associated with the software program is in the list associated with the virtualization layer by determining that the list includes the first MIME-type.","In some embodiments, the computing system may track a process associated with the software program. The computing system may determine that the software program is no longer in use. The computing system may also terminate the process associated with the software program. The computing system may further change the activation state of the virtualization layer by deactivating the virtualization layer after terminating the process associated with the software program.","In other embodiments, the computing system may identify an attempt to open a file. The computing system may determine that a file type of the file is associated with a virtualization layer. The virtualization layer may comprise a software application capable of opening the file. The computing system may also activate the virtualization layer to enable the software application to open the file. In at least one embodiment, the computing system may track each process associated with the software application. The computing system may determine that the software application is no longer in use. The computing system may also terminate each process associated with the software application. The computing system may further deactivate the virtualization layer after terminating each process associated with the software application. In certain embodiments, the computing system may determine that the software application is no longer in use by detecting that the software application is closed.","In certain embodiments, a computing system may include a layer-management module. The layer-management module may identify an action associated with a software program. The layer-management module may determine that the software program is located in a virtualization layer and may change an activation state of the virtualization layer in response to the action. The computing system may also include a processor configured to execute the layer-management module.","In some embodiments, the computing system may include a database. The database may comprise a list that identifies file types that may be opened with software installed in the virtualization layer. The action associated with the software program may include an attempt to open a file. The software program may be configured to open the file. The layer-management module may determine that a file type of the file is in the list associated with the virtualization layer. The layer-management module may maintain the list that identifies file types by adding at least one entry to the list when software associated with the file type is installed in the virtualization layer, and\/or by removing at least one entry from the list when software associated with the file type is removed from the virtualization layer.","In some embodiments, the computing system may include a tracking module in communication with the layer-management module. The tracking module may track a process associated with the software program. The tracking module may also determine that the software program is no longer in use. The tracking module may further terminate the process associated with the software program. The layer-management module may deactivate the virtualization layer after the tracking module terminates the process associated with the software program. In at least one embodiment, the layer-management module may change the activation state of the virtualization layer by activating and\/or deactivating the virtualization layer.","While the foregoing disclosure sets forth various embodiments using specific block diagrams, flowcharts, and examples, each block diagram component, flowchart step, operation, and\/or component described and\/or illustrated herein may be implemented, individually and\/or collectively, using a wide range of hardware, software, or firmware (or any combination thereof) configurations. In addition, any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.","The process parameters and sequence of steps described and\/or illustrated herein are given by way of example only and can be varied as desired. For example, while the steps illustrated and\/or described herein may be shown or discussed in a particular order, these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and\/or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.","Furthermore, while various embodiments have been described and\/or illustrated herein in the context of fully functional computing systems, one or more of these exemplary embodiments may be distributed as a program product in a variety of forms, regardless of the particular type of computer-readable media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script, batch, or other executable files that may be stored on a computer-readable storage medium or in a computing system. In some embodiments, these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.","The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments described herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. It is desired that the embodiments described herein be considered in all respects illustrative and not restrictive and that reference be made to the appended claims and their equivalents for determining the scope of the instant disclosure.","Unless otherwise noted, the terms \u201ca\u201d or \u201can,\u201d as used in the specification and claims, are to be construed as meaning \u201cat least one of.\u201d In addition, for ease of use, the words \u201cincluding\u201d and \u201chaving,\u201d as used in the specification and claims, are interchangeable with and have the same meaning as the word \u201ccomprising.\u201d"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate a number of exemplary embodiments and are a part of the specification. Together with the following description, these drawings demonstrate and explain various principles of the instant disclosure.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
