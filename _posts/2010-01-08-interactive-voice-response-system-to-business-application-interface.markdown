---
title: Interactive voice response system to business application interface
abstract: In some embodiments, a method for interfacing an interactive voice response system with a business application comprises receiving a function call from an interactive voice response system. A first function is selected from a first function library in response to the function call. Using the first function, a request for information from a business application is posted to a memory. The request is retrieved from the memory. The information from the business application is retrieved in response to the request. A second function is selected from a second function library. The second function is executed to post the requested information to the memory. The requested information is retrieved from the memory and transmitted to the interactive voice response system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08406401&OS=08406401&RS=08406401
owner: Bank of America Corporation
number: 08406401
owner_city: Charlotte
owner_country: US
publication_date: 20100108
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present disclosure relates generally to an interactive voice response system and more specifically to an interactive voice response system to business application interface.","An interactive voice response (IVR) system is a system that allows a computer to detect voice and\/or keypad inputs. For example, a call processing system uses an IVR system to interact with callers. In one example, IVR systems allow callers to interact with the call processing system via a telephone keypad or by speech recognition.","In some embodiments, a method for interfacing an interactive voice response system with a business application comprises receiving a function call from an interactive voice response system. A first function is selected from a first function library in response to the function call. Using the first function, a request for information from a business application is posted to a memory. The request is retrieved from the memory. The information from the business application is retrieved in response to the request. A second function is selected from a second function library. The second function is executed to post the requested information to the memory. The requested information is retrieved from the memory and transmitted to the interactive voice response system.","Certain embodiments of the invention may provide one or more technical advantages. A technical advantage of one embodiment may include the capability to interface between an interactive voice response system and a java application. Yet another technical advantage of one embodiment may include the capability to support blocking and non-blocking requests. Yet another technical advantage of one embodiment includes the capability to improve performance by executing native code rather than interpreted Java code.","Various embodiments of the invention may include none, some, or all of the above technical advantages. One or more other technical advantages may be readily apparent to one skilled in the art from the figures, descriptions, and claims included herein.","It should be understood at the outset that, although example implementations of embodiments of the invention are illustrated below, the present invention may be implemented using any number of techniques, whether currently known or not. The present invention should in no way be limited to the example implementations, drawings, and techniques illustrated below. Additionally, the drawings are not necessarily drawn to scale.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","100","10","200","10"]},"Call processing system  may include processors , input\/output devices , network interfaces , and memory . In other embodiments, call processing system  may include more, less, or other components.","Processors  represent devices operable to execute logic contained within a medium. Examples of processor  include one or more microprocessors, one or more applications, and\/or other logic. Call processing system  may include one or multiple processors .","Input\/output devices  may include any device or interface operable to enable communication between call processing system  and external components, including communication with a user or another system. Example input\/output devices  may include, but are not limited to, a mouse, keyboard, display, and printer.","Network interfaces  are operable to facilitate communication between call processing system  and callers . Network interfaces  may connect to any number and combination of wireline and\/or wireless networks suitable for data transmission, including transmission of communications . Network interfaces  may, for example, communicate audio and\/or video signals, messages, internet protocol packets, frame relay frames, asynchronous transfer mode cells, and\/or other suitable information between network addresses. Network interfaces  connect to a computer network or a variety of other communicative platforms including, but not limited to, a public switched telephone network (PSTN); a public or private data network; one or more intranets; a local area network (LAN); a metropolitan area network (MAN); a wide area network (WAN); a wireline or wireless network; a local, regional, or global communication network; an optical network; a satellite network; a cellular network; an enterprise intranet; all or a portion of the Internet; other suitable network interfaces; or any combination of the preceding. In one example embodiment, network interfaces  may connect to one or more networks  of .","Memory  represents any suitable storage mechanism and may store any information for use by call processing system . Memory  may comprise one or more tangible, computer-readable, and\/or computer-executable storage medium. Examples of memory  include computer memory (for example, Random Access Memory (RAM) or Read Only Memory (ROM)), mass storage media (for example, a hard disk), removable storage media (for example, a Compact Disk (CD) or a Digital Video Disk (DVD)), database and\/or network storage (for example, a server), and\/or other computer-readable medium.","In some embodiments, memory  stores logic . Logic  facilitates operation of call processing system . Logic  may include hardware, software, and\/or other logic. Logic  may be encoded in one or more tangible media and may perform operations when executed by a computer. Logic  may include a computer program, software, computer executable instructions, and\/or instructions capable of being executed by call processing system . Example logic  may include any of the well-known OS2, UNIX, Mac-OS, Linux, and Windows Operating Systems or other operating systems. In particular embodiments, the operations of the embodiments may be performed by one or more computer readable media storing, embodied with, and\/or encoded with a computer program and\/or having a stored and\/or an encoded computer program. Logic  may also be embedded within any other suitable medium without departing from the scope of the invention.","In some embodiments, logic  facilitates operation of an interactive voice response (IVR) system , an interface , and\/or a business application . In operation, interface  facilitates communication between IVR system  and business application .","IVR system  allows call processing system  to detect voice and\/or keypad inputs. For example, in some embodiments, IVR system  collects information from callers  using analog signals generated by a human voice or other sound, and\/or digital signals where the calling party includes the ability to generate digital signals. Additionally, in some embodiments, IVR system  collects information from callers through a telephone keypad. For example, IVR system  may present menu options to callers , and callers  may respond to the menu options by using the telephone keypad. In one example, IVR system  provides the following prompt to callers : \u201cFor Sales, please press \u20181\u2019 or say Sales. For Service, please press \u20182\u2019 or say Service. For Billing, please press \u20183\u2019 or say Billing.\u201d","IVR system  may be used to handle incoming communications  without the use of an operator. IVR system  may collect information from one or more callers  and store that information for future reference, or use that information to perform one or more tasks. IVR system  may also send that information to one or more agents that handle the communication . IVR system  may store this information internally, or may store this information in a database (not shown in ) or other storage unit external to IVR system . IVR system  may also run one or more programs, execute one or more commands, or perform one or more processing functions on data collected from caller . IVR system  may record or play back messages, hold calls, or transfer calls to an attached switch, router, network, or other server.","In some embodiments, IVR system  may access information stored external to IVR system . In one exemplary embodiment, caller  requests billing information from IVR system . In this exemplary embodiment, business application  maintains the requested billing information. Accordingly, teachings of certain embodiments recognize the capability to provide interface  to facilitate communications between IVR system  and business application . Interface  may include any hardware, software, and\/or other logic that enables communications between IVR system  and business application .","Business application  may include any software suitable for managing information and\/or functions of a business or company. One example of business application  is an enterprise resource planning (ERP) system. An ERP system may include any software package configured to manage information and\/or functions of a commercial enterprise. Some ERP systems include multiple software modules. Example software modules may include, but are not limited to, product lifecycle management, supply chain management (e.g., purchasing, manufacturing, and distribution), warehouse management, project management, customer relationship management (e.g., sales and marketing, commissions, service, customer contact, call center support), sales order processing, online sales, financials (e.g., costing, billing, time and expense, performance units, activity management), human resources (e.g., payroll, training, time and attendance, rostering, benefits), and decision support systems.","ERP modules may access one or more databases  that store ERP data for the various software modules. Example ERP data may generally include, but is not limited to: human resources master data (e.g., employee-related data from a human resources module, such as employee ID, first name, last name, email, position, skills, and rate); customer data (e.g., customer-related data, such as customer ID, name, country, city, state, street, and email); employee assignment data (e.g., assignment of employees to specific events or tasks, and including employee ID, start date, and finish date); capability master data (e.g., capabilities that are needed to perform tasks; may be used to identify areas for partnership and includes capability ID, capability name, description, capability category, category name, and category description); vendor data by capability (e.g., information about vendors and partners and the capability provided by them; includes vendor ID, name, capability ID, and capability name); skills data by employee (e.g., skill data stored for each employee; may be used to assign employees according to requirements and their skill and includes skills ID, skills name, and employee ID); position data by skills (e.g., positions defined by a human resources system, and includes position ID, description, skills, and rate); material master data (e.g., material-related information, including material number, description, unit of measure, and unit price); and\/or any other suitable data.","Databases  may be organized according to any suitable model and accessible using any suitable query language. In one example embodiment, business application  may be configured to execute Java code. In this example, business application  may access databases  using a Java Database Connectivity (JDBC) Application Programming Interface (API). The JDBC API provides connectivity between the Java programming language and database . For example, business application  may access database  by calling Java methods through the JDBC API.","ERP systems are available in a variety of formats and configurations from a variety of providers. Example ERP system providers may include, but are not limited to, Oracle, SAP, and Microsoft. ERP systems may also include custom implementations, which may include integration of multiple software products.","Network  represents any suitable network operable to facilitate communications between call processing system  and callers . Examples of network  include a public switched telephone network (PSTN); a public or private data network; one or more intranets; a local area network (LAN); a metropolitan area network (MAN); a wide area network (WAN); a wireline or wireless network; a local, regional, or global communication network; an optical network; a satellite network; a cellular network; an enterprise intranet; all or a portion of the Internet; other suitable network interfaces; or any combination of the preceding.","Modifications or additions may be made to call processing system  without departure from the scope of the invention. For example, call processing system  may include more, fewer, or other sites, IVR systems , interfaces , and\/or business applications . As another example,  illustrates IVR system , interface , business application , and databases  sharing a common memory . However, teachings of certain embodiments recognize the capability to distribute these components across multiple memories  and\/or multiple call processing systems .",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 2","FIG. 1"],"b":["130","140","150","130","132","134","132","130","134","130","134","130"]},"In this exemplary embodiment, interface  features a requesting module , a shared memory , and a responding module . In some embodiments, interface  uses UNIX System V Inter-process Communication to facilitate communication between requesting module  and responding module .","Requesting module  includes a library  of functions . One example of library  is a Sun-Solaris shared library containing functions . Functions  may include any functions operable to post a request for information to shared memory . In some embodiments, functions  are C functions operable to post a Java request to shared memory . In operation, requesting module  may receive a function call from IVR system , select an appropriate C function  from library , and execute C function  to post a Java request for information to shared memory .","Shared memory  may include any real or virtual memory that may be simultaneously accessed by multiple programs, such as requesting module  and responding module . One example of shared memory  may include a UNIX shared memory segment.","In the illustrated embodiment, shared memory  features a first memory portion and a second memory portion . First memory portion represents a \u201cC\u201d to Java section, and second memory portion represents a Java to \u201cC\u201d section. In this example, requesting module  would write to first memory portion and read from second memory portion , and responding module  would read from first memory portion and write to second memory portion . Teachings of certain embodiments recognize that first and second memory portions and may reduce the need for memory locks and avoid race condition issues.","Responding module  includes a library  of functions . One example of library  is a Sun-Solaris shared library containing functions . Functions  may include any functions operable to post information to shared memory . In some embodiments, functions  are operable to post the information to shared memory  in C. In operation, responding module  may receive information from business application , select an appropriate function  from library , and execute function  to post the information to shared memory .","In one example embodiment, functions  are C functions operable to post the information to shared memory  in C. However, as explained above, business application  may be configured to execute Java code. Accordingly, teachings of certain embodiments recognize the provisioning of a Java native interface . Java native interface  is a programming framework that allows Java code to call and be called by native applications and libraries written in other languages, such as C. For example, in one embodiment, Java native interface  allows business application  to call functions  in C.","In operation, call processing system  receives communication  from caller . Call processing system  directs communication  to IVR system . Call processing system , in response to communication , determines that information may be needed from databases . In one example, databases  may store customer information associated with caller , and call processing system  may need access to the customer information during communication  with caller .","Accordingly, IVR system  submits a function call to requesting module  using C interface . In response to receiving the function call, requesting module  selects an appropriate function  from library . In this example, requesting module  selects an appropriate function  for posting a request for customer information to shared memory .","Responding module  retrieves the request from shared memory  and requests information from business application . In response, business application  delivers the information from databases  to responding module . In one embodiment, business application  uses java native interface  to call an appropriate function  to post the information to shared memory . Requesting module  retrieves the information from memory  and transmits the information to IVR system .","In some embodiments, requesting module  may post multiple, concurrent, separate, and\/or non-blocking requests to shared memory . Non-blocking requests may refer to any requests that do not block the processing of other requests. In one example, if IVR system  needs to query three different databases , it may do so without waiting for the first two requests to complete. In some embodiments, requesting module  may mix non-blocking and blocking requests, such as making two non-blocking and a final blocking request.","In some embodiments, the requests posted to shared memory  have a time stamp or a sequence number. A time stamp records the time at which requesting module  posts the request to shared memory . A sequence number records the order in which requesting module  posts requests to shared memory . For example, in one embodiment, responding module  searches shared memory  for requests and, if shared memory  has more than one posted request, retrieves the earliest posted request. Additionally, teachings of certain embodiments recognize the capability to cancel requests if the requested information is not posted to shared memory  before a defined time period has lapsed. In some embodiments, these defined time periods may be configured for performance. For example, in one embodiment, the defined time periods are set based on request volume.","In some embodiments, the request may be marked with a status. In one exemplary status, requesting module  marks the request as \u201cwaiting for response\u201d after posting the request to shared memory . Responding module  marks the request as \u201cin progress\u201d after retrieving the request from the shared memory . Responding module  marks the request as \u201ccompleted\u201d after posting the requested information to shared memory .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIGS. 3A and 3B","FIG. 3A"],"b":["130","150","200","130","150","141"]},"At step , requesting module  receives a function call from IVR system . At step , requesting module  selects function  from library . In this example, function  may be a C function.","At step , requesting module  executes function  to post a request to memory . In this example, requesting module  selects an appropriate function  for posting a request for customer information to shared memory .","At step , requesting module  determines whether responding module  has posted the requested information to memory .","If responding module  has not posted the requested information to memory , then requesting module  determines at step  whether the defined time period has lapsed. If the defined time period has lapsed, then method  ends. If the defined time period has not lapsed, then the method returns to step .","If responding module  has posted the requested information to memory , then requesting module  retrieves the requested information from memory  at step . In this example, requesting module  retrieves the requested information in C. At step , requesting module  transmits the requested information to IVR system .",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 3B","b":["300","130","150","145"]},"At step , responding module  retrieves the request for information from memory . At step , responding module  determines whether the request for information is ready for processing. For example, if memory  includes multiple requests for information, step  may include identifying the first-posted request for information.","If the request for information is not ready for processing, responding module  determines at step  whether the request has been terminated. If yes, then method  ends. If the request has not been terminated, then the method returns to step .","If the request for information is ready for processing, then responding module  retrieves the requested information from business application  at step .","At step , responding module  selects function  from library . In this example, responding module  selects an appropriate function  for posting the requested information to shared memory . Function  may be configured to post the requested information to memory  in C. At step , responding module  executes function  to post the requested information to memory .","Implementation Example","The following discussion presents an implementation example using a Peripro IVR system.","In this example, the following steps may be followed to implement a Java server application (one that serves one or more Peripro applications):","Peripro code:",{"@attributes":{"id":"p-0055","num":"0000"},"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["1) Include IC_JavaInterface.folder","2) Populate JavaInterface.gcUCI with the unique call identifier, populate JavaInterface.gnSystem-number, JavaInterface.gnApplication-number, (one time per call only)","3) Choose desired method to use (Post and Wait, or Post and Return, etc\u2014see below for details). Populate all other relevant variables before calling the java_interface function.","4) Call external function java_interface, passing only 1 parameter: the folder included above.\n\nJava Code:\n"]}}}},"Using ns_JtoC.java as a template, replace the code starting and ending the comments below with the server code or calls to the class.method to use to perform the request:","\/*","* Here, the real code should be processing the request.","The following code.","Up to the comment:","\/* End of sample code to be replaced by real code *\/","Installation:","The two Dynamic Load Libraries should be installed. libtree.so for Card or libdeptree.so for Deposits, version 3.0 or above should be installed in \/home\/peri\/T36893BoATelebanking\/lib. The Java Native Interface library libjtoc.so should also be installed where Java's LD_LIBRARY_PATH point to.","Note on Multi-Threaded Java Applications","If a Java application is going to use multiple threads to communicate with vengine for the same service, one of two methods should be used to avoid the scenario where two or more threads will process the same request under a race condition. The first one consists of using Java \u201csynchronized\u201d code when searching for requests in shared memory, effectively locking out other threads when searching for a request (see example Java code showing this method). The other method is to have each thread use a unique request code (see more details below). In order to have vengine and multiple Java threads using synchronized request codes, a convention could be adopted such as using port ranges for each thread. For example, if three threads in a certain application are going to be processing requests for Peripro in a system with 192 ports per TMS, Peripro could use code \u201c0001\u201d for ports 1-64, \u201c0002\u201d for ports 65-128 and \u201c0003\u201d for ports 129-192. Java would need to look for requests with a code of \u201c0001\u201d, \u201c0002\u201d and \u201c0003\u201d for threads n, n+1 and n+2 respectively.","API Details","Peripro applications may communicate with Java applications by the following mechanism:\n\n","Peripro communicates with its library's \u201cC\u201d function via a folder, IC_JavaInterface.folder, of type \u201cPublic, Include\u201d. The Peripro code populates this folder and calls the external function \u201cjava-interface\u201d, passing it only 1 argument, the folder. Upon completion of the request, the folder will contain the desired data if successful or a pertinent status code if unsuccessful.","The folder has an internal name of \u201cJavaInterface\u201d and consists of the following data cards:","gcVersion\u2014type: string, length: 80 (Version control info)","gnUCI\u2014type: number, length: 21. Unique Call Identifier, for error logs.","gcRequest-type\u2014type: string, length: 1",{"@attributes":{"id":"p-0067","num":"0000"},"ul":{"@attributes":{"id":"ul0005","list-style":"none"},"li":{"@attributes":{"id":"ul0005-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0006","list-style":"none"},"li":["\u20181\u2019=Post request and return immediately without waiting for results (non-blocking, asynchronous request).","\u20182\u2019=Test prior post status and return immediately (used in conjunction with \u20181\u2019 above, to see if request completed).","\u20183\u2019=Post request and wait for results (blocking, synchronous request\u2014will post request and wait until either request completes or timeout occurs).","\u20184\u2019=Wait prior post and return\u2014used in conjunction with \u20181\u2019 above, will wait until either request completes or timeout occurs.","\u20185\u2019=Post first part of multiple sub-buffer and wait for acknowledgement. Used when sending large buffers, a piece at a time. Will post request and wait for Java to retrieve buffer, but not wait for request completion. After final buffer is sent, Peripro must issue either a \u20182\u2019 (Test prior), or a \u20184\u2019 (Wait prior).","\u20186\u2019=Post next part of multiple sub-buffer request. Same as \u20185\u2019 above but for 2and subsequent (not last) sub-buffer.","\u20187\u2019=Post last part of multiple sub-buffer request. Same as \u20185\u2019 and \u20186\u2019 above but for last sub-buffer. Note that this request is non-blocking (asynchronous) and Peripro must follow it with either a \u201cTest prior post status and return immediately\u201d or \u201cWait prior post and return\u201d.","\u20188\u2019=Retrieve next buffer. Used when Java returns large buffers, after completing a request. After issuing a \u20182\u2019 (Test prior), \u20183\u2019 (Post and wait), or \u20184\u2019 (Wait prior), if the status returned is \u201ccomplete but in parts\u201d (\u201c001\u201d), \u201c2nd or subsequent buffer was returned\u201d (\u201c006\u201d), Peripro should use this command FOR THE 2nd and subsequent buffers and re-assemble output until it receives a \u201cfinal buffer\u201d (\u201c007\u201d) status.","gnSystem-number\u2014type: number, length: 5. TMS number needs to be moved to this card. For example, 00756.","gnApplication-number\u2014type: number, length: 5. Port number needs to be moved to this card. 00001 to 00192.","gcRequest-code\u2014type: string, length: 10. Used to provide the ability to run multiple Java applications or multiple threads within 1 Java application.","Each unique Java application (or thread) should use a unique code. For example, if using SpeechKey and Auxiliary Data Base lookups (like transfers key search, etc), SpeechKey could use \u201c0001\u201d and the Aux DB lookup app use \u201c0002\u201d. Also, if one Java application is using unsynchronized multiple threads to provide services to vengine, each thread must use a unique request code. This means that the Peripro code must be in \u201csynch\u201d with the Java Application (see note un multiple thread Java applications above). Note that if the request code length is less than 10, trailing spaces are removed when the code is moved to shared memory. This requires that the Java application refrain from using codes with trailing spaces (e.g., \u201c12345\u201d instead of \u201c12345\u201d)","gnRequest-number\u2014type: number, length: 1. Used for asynchronous requests, such as \u201cpost and return immediately\u201d. Peripro needs to populate this field with a value of 1 to 3.","gnInitial-delay-value\u2014type: number, length: 5. This card and the next 2 are used for \u201cpost and wait\u201d and \u201cwait prior\u201d request types. They provide a method to finely tune the request wait process. This card is to contain number of milliseconds to wait before testing for request completion the first time. An educated estimate should be made for the minimum number of milliseconds that the request will take, and set this card to that value. Range 1 to 500.","gnSubsequent-delay-value\u2014type: number, length: 5. The number of milliseconds to wait during each wait loop iteration. Range 1 to 100.","This value is a compromise. Too large a value will result in waiting for a request that has already been fulfilled (sort of \u201cignoring\u201d its completion), too small a value may steal unnecessary CPU cycles. Note that if the request is \u201cPost first, 2or subsequent or last part of multiple sub-buffer and wait for acknowledgement\u201d the 3 timer values should be smaller than for other request types, as Java only needs to retrieve the buffer and \u201cconcatenate\u201d it if not the 1part.","Note: Testing has shown that the delay process can be CPU intensive, so this value should be kept at around 20 milliseconds minimum. If the value is kept low, say 2 milliseconds and the iterations are high, the actual time the process will wait if there is no response will likely to be larger than specified due to the additional processing time taken to process the delay and Solaris' overhead (a 2 millisecond delay may actually take 4 milliseconds to execute).","gnMax-delay-iterations\u2014type: number, length: 5. This value controls the timeout value. It contains the maximum number of times to delay the value in gnSubsequent-delay-value above before declaring a timeout.","Use this formula to calculate this value: Iterations=(Timeout_value\u2212Initial_delay)\/Subsequent_delay. Example. If the request can take no less that 100 milliseconds and no more than 2 seconds, we would set the initial delay to 100, the subsequent delay value to 20 milliseconds and the max iterations to 95. This value is a compromise also. Too small a timeout value may cause the code to abandon a request that is about to complete, too large a value will affect the Customer's experience.","gnLength-of-input\u2014type: number, length: 4. Used for initial requests (Post and return, post and wait, post multiple). Since Peripro strings are not null terminated (rather fixed length, left justified and space filled to the right), it is important that this variable contain the actual length of the data in the input buffer below.","goInput-buffer\u2014type: string, length: 1000. Input to be sent to Java. Search key, etc.","gnLength-of-output\u2014type: number, length: 4. Length of buffer returned by Java below.","gcOutput-buffer\u2014type: string, length: 1000. Data returned by Java.","gnStatus\u2014type: number, length: 3.","\u201c000\u201d=If request was \u201cPost request and return immediately\u201d, request was initially successful (valid). If request was \u201cPost first, 2or last part of multiple sub-buffer and wait for acknowledgement\u201d, request was initially successful (valid) and Java retrieved the buffer. If request was \u201cPost request and wait for results\u201d or \u201cTest prior post status and return immediately\u201d or \u201cWait prior post and return\u201d, request was completed successfully.","\u201c001\u201d=If request was \u201cPost request and wait for results\u201d, \u201cTest prior post status and return immediately\u201d or \u201cWait prior post and return\u201d, request is complete but in parts. First of several sub-buffers was returned.","\u201c002\u201d=If request was \u201cPost request and wait for results\u201d, \u201cWait prior post and return\u201d or \u201cPost first, 2or last part of multiple sub-buffer and wait for acknowledgement\u201d, timeout has occurred.","\u201c003\u201d=Invalid parameters supplied. See peri_trace for actual error details. Examples, TMS number or port number is invalid, timer values out of range, etc).","\u201c004\u201d=Request failed (Returned by Java) or illogical status returned by Java. For example, Oracle request failed (not found, etc). See pertinent alarm or Java log for details.","\u201c005\u201d=If request is \u201cTest prior post status and return immediately\u201d, request has not yet completed.","\u201c006\u201d=If request is \u201cRetrieve next buffer\u201d, a 2or subsequent buffer was returned.","\u201c007\u201d=If request is \u201cRetrieve next buffer\u201d, the last buffer was returned.","\u201c008\u201d=Error opening, reading or parsing \/common\/etc\/tms\/tms.cfg file.","\u201c009\u201d=Error mapping shared memory segment, TMS configuration file Issues, input data too long, or a Unix error occurred (peri_trace should contain more detailed information).\n\nNote on the Use of the Partial Buffers Facility\n"]}}}},"The interface code allows partial buffers to be sent and received from Java, when sending large buffers. Although the facility exists, it is recommended that the maximum size of data to be sent and received be calculated and, unless it is extremely large, the buffer sizes should set accordingly. This affords much higher performance and a cleaner implementation. For example, if 8,000 byte Java to Peripro buffers are implemented, the amount of total memory used is 8 megabytes, which represents 0.2% of total RAM in Solaris 8, 2.1 systems with 4 gigabytes of memory (0.1% of total RAM for 8 gigabyte systems).","Step by Step Processing:",{"@attributes":{"id":"p-0069","num":"0000"},"ul":{"@attributes":{"id":"ul0007","list-style":"none"},"li":{"@attributes":{"id":"ul0007-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":["1. Peripro one-time (boot-up) Initialization code: Populates System-number, Application-number and Request-type. (Note: if there is no one-time boot-up init code, this should be done in call initialization below).","2. Peripro call initialization: Populates UCI.","3. Post request and return without waiting for the results. (This section also covers part of multiple buffer requests).\n        \n        ","4. Test prior post status and return immediately.\n        \n        ","5. Post request and wait for result.\n        \n        ","6. Wait prior post and return.\n        \n        ","7. Post first part of multiple sub-buffers and wait for acknowledgement.\n        \n        ","8. Post next part of multiple sub-buffer request.\n        \n        ","9. Post last part of multiple sub-buffer request.\n        \n        ","10. Retrieve next buffer (Used when a status of \u201c001\u201d was received).\n        \n        "]}}}},"Following are the Unix commands needed to display and clear the Java Interface Shared Memory segment:","ipcs-bomp","This command will display the status of all Solaris active Shared Memory segments. During normal operation, the display after this command is executed should look something like this:",{"@attributes":{"id":"p-0072","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"center"}},{"@attributes":{"colname":"10","colwidth":"35pt","align":"center"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}},{"entry":["T","ID","KEY","MODE","OWNER","GROUP","NATTCH","SEGSZ","CPID","LPID"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"315pt","align":"center"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"Shared Memory:"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"10"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"4","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"6","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"7","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"8","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"9","colwidth":"28pt","align":"char","char":"."}},{"@attributes":{"colname":"10","colwidth":"35pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["m","0","0x2000490f","--rw-rw-rw-","peri","root","24","147832","2118","5577\u2002"]},{"entry":["m","1","0x1","--rw-rw-rw-","peri","root","24","33148","2118","\u2014"]},{"entry":["m","300","0xca5a5","--rw-rw-rw-","peri","root","24","2451456","25900","26839 \u2190"]},{"entry":{"@attributes":{"namest":"1","nameend":"10","align":"center","rowsep":"1"}}}]}}]}}},"In a production or test environment, there will be several lines describing many shared memory segments, as Peripro's \u201cvengine\u201d creates them for shared folders, etc. The entry with the arrow on the right margin above is the one created by the Java Interface (identified by its unique key).","The number under the \u201cNATTCH\u201d heading represents the number of processes attached to the interface's shared memory segment.","Note that if the interface's segment is not displayed (such after a reboot where no calls that need the interface were made), it will be automatically created when the interface is called the first time.","Occasionally, the interface's shared memory segment may need to be removed without having to reboot the MPS (for example, when a new libtree.so or libdeptree.so is installed and the size of the interface's shared memory segment has changed). To do so, use the following command:","iperm-M Oxca5a5","The command should be followed by the \u201cipcs-bomp\u201d command to insure that the segment is indeed gone. Again, it will be re-created with the proper size the first time it is used. Obviously, if the MPS is rebooted, there's no need to remove the segment.","Miscellaneous Utilities","The following utilities can be used by the development team to trouble-shoot and to unit test the Java Interface: A utility named \u201cprint_shared_memory\u201d can be used to display the contents of the shared memory segment. Its data is formatted and displayed on stdout. A couple of utilities can be used to \u201cpoke\u201d data into a particular port's section of shared memory. \u201cset_c_to_j\u201d is used to set the \u201cC to Java\u201d section and \u201cset_j_to_c\u201d is used to set the \u201cJava to C\u201d section. These two utilities will optionally use command line arguments or configuration files that contain the data to be moved to shared memory.","Note that the \u201cset\u201d utilities are to be used separately and with only one side of the vengine\/Java running. For example, to unit test a Java application, the application should run without calls to vengine, while the developer sets shared memory segments using set_c_to_j and displaying the Java results using print_shared_memory.","To unit test a Peripro application that uses the interface, the developer would use set_j_to_c after making a call. This should be done quickly and within the timeout value, else a timeout condition will occur. (A long timeout value should be coded temporarily while using this method).","Modifications, additions, or omissions may be made to the systems and apparatuses described herein without departing from the scope of the invention. The components of the systems and apparatuses may be integrated or separated. Moreover, the operations of the systems and apparatuses may be performed by more, fewer, or other components. The methods may include more, fewer, or other steps. Additionally, steps may be performed in any suitable order. Additionally, operations of the systems and apparatuses may be performed using any suitable logic. As used in this document, \u201ceach\u201d refers to each member of a set or each member of a subset of a set.","Although several embodiments have been illustrated and described in detail, it will be recognized that substitutions and alterations are possible without departing from the spirit and scope of the present invention, as defined by the appended claims.","To aid the Patent Office, and any readers of any patent issued on this application in interpreting the claims appended hereto, applicants wish to note that they do not intend any of the appended claims to invoke paragraph 6 of 35 U.S.C. \u00a7112 as it exists on the date of filing hereof unless the words \u201cmeans for\u201d or \u201cstep for\u201d are explicitly used in the particular claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a more complete understanding of the present disclosure and its advantages, reference is now made to the following description taken in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A and 3B"}]},"DETDESC":[{},{}]}
