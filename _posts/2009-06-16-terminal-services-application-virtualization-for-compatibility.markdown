---
title: Terminal services application virtualization for compatibility
abstract: Systems, methods and computer-readable storage media are disclosed for providing a virtual single-user session to a client in a terminal server session. In an embodiment, requests to a resource in the system-space of a system made by an application are intercepted. A determination is made as to whether to virtualize the resource for the application. Where the resource is to be virtualized, a user-specific virtualized resource is created or maintained in user-space and provided to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141412&OS=09141412&RS=09141412
owner: Microsoft Technology Licensing, LLC
number: 09141412
owner_city: Redmond
owner_country: US
publication_date: 20090616
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","CONCLUSION"],"p":["A terminal server is a specialized computing system that aggregates multiple communication channels. One or more clients (or \u201cthin clients\u201d) may engage in bidirectional communication with the terminal server in a terminal server session. In such a session, applications are executed using server resources and images and sound corresponding to the output of those executing applications are sent to the client for local presentation. In this way, one using the client computer gets the experience that the applications are executing locally on the client machine, while the processing occurs on the server.","Many computing applications written without thought to a terminal server context may run without modification on a terminal server, which executes an instance of an application for each client session that wishes to execute it. However, there do exist compatibility issues with some applications that were originally designed to run on a single desktop machine.","This may be due to characteristics of the terminal server environment that differentiate it from a single-user environment. For example, a terminal server environment is a multi-user environment and an application may be accessed simultaneously by a plurality of users. Further, a user on a client may be a non-privileged user on the terminal server.","As such, some applications face issues that interfere with proper execution, such as unexpected sharing of data, corruption of data through simultaneous access by a plurality of application instances, inability to use more than one instance of an application, and requiring privileged user credentials to access system files or settings. Such an application may be designed to expect that only one instance of it executes on a computing device (for instance, that it writes to C:\\Data\\application.txt and that no other instance of the application will be present to simultaneously write there), that it has exclusive use of a file system, that it will run with administrator privileges.","It would therefore be an improvement to modify a terminal server environment to provide virtual single-user system to every client's instance of an application. For instance, in conjunction with an executing MICROSOFT WINDOWS\u2122 operating system, this may comprise a file system, registry and named objects presented like for a single-user computing environment.","This virtual single-user system may be effectuated by using a combination of filter drivers and application programming interface (API) shims to create a virtualized system (file system, registry and\/or named objects) that is driven by a configuration layer. The filter drivers query the configuration layer for paths to redirect to the virtual system and the configuration layer uses a user-driven configuration of virtualization depending on the application being used.","Such an environment allows the following scenarios to occur on a terminal server for applications that are incompatible with prior art terminal server implementations: (1) multiple users writing to the same file, registry, or named object entry. Since every user has a virtual store to which calls to these resources get redirected, these calls do not result in unexpected data access or corruption. (2) Write operations to a protected file, registry or named object may be done by a non-privileged user by creating a virtual copy of the system and allowing the user to write to that resource without affecting the actual system state, and allowing applications to execute as if they are running in a single-user environment with administrator privileges. (3) An administrator is able to configure which applications are incompatible and need a virtualized environment through a simple user interface.","Such an environment would improve the baseline compatibility of a terminal server for legacy or older applications, reduce the cost of migrating to a terminal server environment, and reduce the support needs of end users. Further, the present techniques allow for a virtual single-user system to be provided without modification to applications that run on the system. Additionally, several virtual-single user sessions may execute on the terminal server simultaneously. This enables a single terminal server to provide multiple virtual single-user system for enforcing compatibility with legacy applications that require a single-user environment.","Numerous embodiments of the present disclosure may execute on a computer.  and the following discussion is intended to provide a brief general description of a suitable computing environment in which the disclosure may be implemented. One skilled in the art can appreciate that the computer system of  can in some embodiments effectuate the server  of . In these example embodiments, the server  and client  can include some or all of the components described in  and in some embodiments the server  and client  can include circuitry configured to instantiate specific aspects of the present disclosure. For example, the term circuitry used through the disclosure can include specialized hardware components configured to perform function(s) by firmware or switches. In other example embodiments the term circuitry can include a general purpose processing unit, memory, etc., configured by software instructions that embody logic operable to perform function(s). In example embodiments where circuitry includes a combination of hardware and software, an implementer may write source code embodying logic and the source code can be compiled into machine readable code that can be processed by the general purpose processing unit. Since one skilled in the art can appreciate that the state of the art has evolved to a point where there is little difference between hardware, software, or a combination of hardware\/software, the selection of hardware versus software to effectuate specific functions is a design choice left to an implementer. More specifically, one of skill in the art can appreciate that a software process can be transformed into an equivalent hardware structure, and a hardware structure can itself be transformed into an equivalent software process. Thus, the selection of a hardware implementation versus a software implementation is one of design choice and left to the implementer.","Referring now to , an exemplary general purpose computing system is depicted. The general purpose computing system can include a conventional personal computer  or the like, including a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. The system memory includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within the personal computer , such as during start up, is stored in ROM . The personal computer  may further include a hard disk drive  for reading from and writing to a hard disk, not shown, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM or other optical media. In some example embodiments computer executable instructions embodying aspects of the present disclosure may be stored in ROM , hard disk (not shown), RAM , removable magnetic disk , optical disk , and\/or a cache of processing unit . The hard disk drive , magnetic disk drive , and optical disk drive  are connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer readable media provide non volatile storage of computer readable instructions, data structures, program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, Bernoulli cartridges, random access memories (RAMs), read only memories (ROMs) and the like may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM  or RAM , including an operating system , one or more application programs , other program modules  and program data . A user may enter commands and information into the personal computer  through input devices such as a keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite disk, scanner or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to the system bus, but may be connected by other interfaces, such as a parallel port, game port or universal serial bus (USB). A display  or other type of display device can also be connected to the system bus  via an interface, such as a video adapter . In addition to the display , personal computers typically include other peripheral output devices (not shown), such as speakers and printers. The exemplary system of  also includes a host adapter , Small Computer System Interface (SCSI) bus , and an external storage device  connected to the SCSI bus .","The personal computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be another personal computer, a server, a router, a network PC, a peer device or other common network node, and typically can include many or all of the elements described above relative to the personal computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  can include a local area network (LAN)  and a wide area network (WAN) . Such networking environments are commonplace in offices, enterprise wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the personal computer  can be connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the personal computer  can typically include a modem  or other means for establishing communications over the wide area network , such as the Internet. The modem , which may be internal or external, can be connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the personal computer , or portions thereof, may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used. Moreover, while it is envisioned that numerous embodiments of the present disclosure are particularly well-suited for computerized systems, nothing in this document is intended to limit the disclosure to such embodiments.","Referring now to , they generally illustrate example environments wherein aspects of the present disclosure can be implemented. One skilled in the art can appreciate that the example elements depicted by  are illustrated to provide an operational framework for describing the present disclosure. Accordingly, in some embodiments the physical layout of each environment may be different depending on different implementation schemes. Thus the example operational framework is to be treated as illustrative only and in no way limit the scope of the claims. One skilled in the art can also appreciate that the following discussion is introductory and the elements depicted by  are described in more detail within the discussion of the operational procedures depicted by .","Generally,  depicts a high level overview of a server environment that can be configured to include aspects of the present disclosure. In reference to the figure, depicted is a server  that can include circuitry configured to effectuate a terminal server, or in other embodiments the server  can include circuitry configured to support remote desktop connections. In the depicted example, the server  can be configured to generate one or more sessions for connecting clients such as sessions 1 through N (where N is an integer greater than 2). Briefly, a session in example embodiments of the present disclosure can generally include an operational environment that is effectuated by a plurality of subsystems, e.g., software code, that are configured to interact with a kernel  of server . For example, a session can include a process that instantiates a user interface such as a desktop window, the subsystems that track mouse movement within the window, the subsystems that translate a mouse click on an icon into commands that effectuate an instance of a program, etc. A session can be generated by the server  on a user by user basis by the server  when, for example, the server  receives a connection request over a network connection from a client . Generally, a connection request can first be handled by the transport logic  that can, for example, be effectuated by circuitry of the server . The transport logic  can in some embodiments include a network adaptor; firmware, and software that can be configured to receive connection messages and forward them to the engine . As illustrated by , the transport logic  can in some embodiments include protocol stack instances for each session. Generally, each protocol stack instance can be configured to route user interface output to a client and route user input received from the client to the session core  associated with its session.","Continuing with the general description of , the engine  in some example embodiments of the present disclosure can be configured to process requests for sessions; determine the functionality for each session; generate sessions by allocating a set of physical resources for the session; and instantiating a protocol stack instance for the session. In some embodiments the engine  can be effectuated by specialized circuitry components that can implement some of the above mentioned operational procedures. For example, the circuitry in some example embodiments can include memory and a processor that is configured to execute code that effectuates the engine . As depicted by , in some instances the engine  can receive connection requests and determine that, for example, a license is available and a session can be generated for the request. In the situation where the server  is a remote computer that includes remote desktop capabilities, the engine  can be configured to generate a session in response to a connection request without checking for a license. As illustrated by , a session manager  can be configured to receive a message from an engine  and in response to the message the session manager  can add a session identifier to a table; assign memory to the session identifier; and generate system environment variables and instances of subsystem processes in memory assigned to the session identifier.","As illustrated by , the session manager  can instantiate environment subsystems such as a runtime subsystem  that can include a kernel mode part such as the session core . For example, the environment subsystems in an embodiment are configured to expose some subset of services to application programs and provide an access point to the kernel of the operating system . In example embodiments the runtime subsystem  can control the execution of processes and threads and the session core  can send requests to the executive of the kernel  to allocate memory for the threads and schedule time for them to be executed. In an embodiment the session core  can include a graphics display interface  (GDI), a security subsystem , and an input subsystem . The input subsystem  can in these embodiments be configured to receive user input from a client  via the protocol stack instance associated with the session and transmit the input to the session core  for the appropriate session. The user input can in some embodiments include signals indicative of absolute and\/or relative mouse movement commands, mouse coordinates, mouse clicks, keyboard signals, joystick movement signals, etc. User input, for example, a mouse double-click on an icon, can be received by the session core  and the input subsystem  can be configured to determine that an icon is located at the coordinates associated with the double-click. The input subsystem  can then be configured to send a notification to the runtime subsystem  that can execute a process for the application associated with the icon.","In addition to receiving input from a client , draw commands can be received from applications and\/or a desktop and be processed by the GDI . The GDI  in general can include a process that can generate graphical object draw commands. The GDI  in this example embodiment can be configured to pass its output to the remote display subsystem  where the commands are formatted for the display driver that is attached to the session. In certain example embodiments one or more physical displays can be attached to the server , e.g., in a remote desktop situation. In these example embodiments the remote display subsystem  can be configured to mirror the draw commands that are rendered by the display driver(s) of the remote computer system and transmit the mirrored information to the client  via a stack instance associated with the session. In another example embodiment, where the server  is a terminal server, the remote display subsystem  can be configured to include virtual display driver(s) that may not be associated with displays physically attacked to the server , e.g., the server  could be running headless. The remote display subsystem  in this embodiment can be configured to receive draw commands for one or more virtual displays and transmit them to the client  via a stack instance associated with the session. In an embodiment of the present disclosure, the remote display subsystem  can be configured to determine the display resolution for each display driver, e.g., determine the display resolution of the virtual display driver(s) associated with virtual displays or the display resolution of the display drivers associated with physical displays; and route the packets to the client  via the associated protocol stack instance.","In some example embodiments the session manager  can additionally instantiate an instance of a logon process associated with the session identifier of the session that can be configured to handle logon and logoff for the session. In these example embodiments drawing commands indicative of the graphical user interface associated with the logon process can be transmitted to the client  where a user of the client  can input an account identifier, e.g., a username\/password combination, a smart card identifier, and\/or biometric information into a logon screen. The information can be transmitted to server  and routed to the engine  and the security subsystem  of the session core . For example, in certain example embodiments the engine  can be configured to determine whether the user account is associated with a license; and the security subsystem  can be configured to generate a security token for the session.",{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},"The depicted terminal server uses filter drivers and application programming interface (API) shims to create a virtualized system (including file system, registry, and named objects) that is driven by a configuration layer. In an embodiment, where a resource is said to be virtualized, that may be thought of as a \u201cvirtualized\u201d resource in a user-space unique to the end user of the terminal server session that corresponds to the requested resource in system-space, such that requests to the system-space resource are transparently directed to the user-space resource. The filter drivers query the configuration layer for paths to redirect to the virtual system (the virtual system comprises a call to user-space corresponding to the intended call to system-space, such that each user has a separate user-space corresponding to his terminal server session) and the configuration layer uses a user-driven configuration of virtualization depending on the application being used.","When a client in a terminal server session with terminal server  executes application  (herein, where a client is said to execute a process hosted on terminal server , it shall be meant that the client issues an instruction for the process to be executed and terminal server  executes the process and sends output from the process to the client), a unique instance of application  is executed for the client. That is, if another client is also executing application , each client executes a separate instance of application . As the client sends input to the application that cause the application to request resources of terminal server , those requests are sent to WINDOWS\u2122 APIs with shim framework  (where the resource comprises a named object) and input\/output (I\/O) manager  (where the resource comprises a file system or a registry). In an embodiment where terminal server architecture of  is developed in the server environment of , I\/O manager  is part of I\/O subsystem .","Where the resource comprises a named object, application  directs the request to WINDOWS\u2122 APIs with shim framework . A shim comprises a (typically small) library that transparently intercepts an API call, changes the parameters passed, handles the operation itself, or redirects the operation elsewhere. A named object comprises a mutex, semaphore, event, or timer object, and a corresponding name, such that processes may use the name to access or otherwise process the corresponding object. Shim  intercepts the request received by WINDOWS\u2122 with shim framework , and redirects the request to the appropriate venue. For instance, where the request comprises the creation of a named object in system-space, this may comprise creating a corresponding object in the user's user-space, that may be considered a \u201cvirtual\u201d version of the object in system-space.","Where the resource comprises a file system resource or a registry resource, application  directs the request to I\/O manager . Where the resource comprises a file system resource, the request is received at I\/O manager  by filter manager . Filter manager  comprises a file system filter driver that is inserted into terminal server's  driver stack to manage the execution of one or more filter drivers (or minifilters), such as file system minifilter driver . The combination of filter manager  and minifilter driver  intercepts a request to a registry resource via callbacks, and modifies the request to the files system of terminal server . This modification may comprise file read or write redirection to implement file virtualization.","Where the resource comprises a registry resource (in the WINDOWS\u2122 operating system, the registry comprises a database that stores settings and options for the operating system. It may contain information and setting for hardware, operating system software, some or all non-operating system software, and user-specific settings) the request is received at I\/O manager  by configuration manager . Registry filtering driver  interfaces with configuration manager  similar to how minifilter driver  interfaces with filter manager  to intercept and modify the request to the registry resource through a read or write operation to virtualize the registry of terminal server .","Whether processed by named object shims , minifilter driver , or registry filtering driver , that component queries configuration provider  to determine the virtualization policy of an application. For instance, the component may query configuration provider  with the name of application , and receive in return application's  virtualization policy. In an embodiment, configuration provider  comprises an API for such queries. In an embodiment, configuration provider  loads configuration information of one or more installed applications when terminal server  boots up and updates its cache based on triggers due to events such as the installation of a new application.","Configuration provider  determines the reply to such queries by accessing compatibility configuration store . Configuration store  comprises a repository, such as a database, that stores the rules for virtualization. It may contain a set of global policies (such as \u201cdo not virtualize all applications\u201d), a list of applications (including version information and a checksum signature, such as a md5 signature) to virtualize, and any defined exclusion or inclusion paths for each application.","Configuration provider  and compatibility configuration store  may be modified through use of TS application virtualization management . TS application virtualization management  comprises an administrative tool with exposed APIs and a user interface that allows a user, such as an administrator, to modify virtualization policies, add an application to compatibility configuration store , and specify exclusion of a file, folder, or registry from virtualization.","An application may be provided a partial virtual single-user session for an application, where some but not all resources are virtualized (including partial virtualization of a resource), or a complete virtual single-user session for an application. For instance, a text editor application may write template files to C:\\Data and edited text files to C:\\Windows. It may be that there is a low chance of two user's templates having the same name, or that it is desirable for users to be able to see each other's templates. However, it may be that it there is a high chance of two user's text files having the same name, or that it is undesirable for users to be able to see each other's templates. In such a case, the file system resource for C:\\Windows may be left un-virtualized, while the file system resource for C:\\Data may be virtualized.","In an embodiment, virtualized file system resources may be stored in a user profile of the user, and compatibility configuration store  maintains a correlation between the where the virtualized file system resource appears to the user to be located, and its location in the user profile, such that where the user attempts to access the file where he believes it to be located, it is presented to him there as if it were there.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 4"},"Operation  depicts initializing a terminal server session from a user on a client. In an embodiment, operation  takes place upon the user executing a terminal client application on his client computer, which then requests that a terminal server session be initialized across a communications network.","Operation  depicts receiving a request from the client to execute the application. In an embodiment, this occurs where the client is presented with a desktop display across the terminal server session and double-clicks on the application's icon.","Optional operation  depicts receiving a new virtualization policy regarding at least one application; and storing the new virtualization policy in a configuration store. In an embodiment, the configuration store comprises a database stored in memory.","In an embodiment, the new virtualization policy comprises one of a global policy, an application to provide a virtual single-user session, an application to cease providing a virtual single-user session, an exclusion path of an application to provide a virtual single-user session, and an inclusion path of an application to provide a virtual single-user session.","A global policy may comprise a policy to implement for all applications executed on a server, or for all terminal server sessions conducted by the server.","An application to provide a virtual single-user session may comprise the name of the application, the version(s) of the application, a checksum of the application (such as a md5 checksum), and a path in the file system where the application is or may be located.","An inclusion or exclusion path of an application may comprise a path in the file system where the application is or may be located. Where this is an inclusion path, it may be determined that all applications in that path, or in that path that meet certain criteria are to be provided a virtual single-user session. Where this is an exclusion path, it may be determined that all applications in that path, or in that path that meet certain criteria are not to be provided a virtual single-user session.","Operation  depicts determining that the application requires a virtual single-user session. In an embodiment, this comprises determining from the configuration store to provide the application a virtual single-user session. This may be effectuated, for example, by querying the configuration store with the name, path, or other identifying information of the application, and receiving in return an indication of whether or not the queried application is to be provided a virtual single-user session.","Operation  depicts intercepting a request from the application to a resource in a system-space.","In an embodiment, the request for the resource in the system-space is directed to a driver, and the request is intercepted by a resource virtualization driver. This may comprise, for example, a request to read or write a portion of a file system read or a registry.","In an embodiment, the request for the resource in the system space comprises an application programming interface (API) call to a create, access or modify a named object, and the request is intercepted by an API shim.","Optional operation  depicts, wherein the client is non-privileged, the user would be privileged if directly interacting with the terminal server, and the request to the resource comprises a privileged write operation, further comprising: creating a virtual copy of the requested resource, the virtual copy being the corresponding resource in the user-space of the user.","Operation  depicts redirecting the request to a corresponding resource in a user-space of the user. In an embodiment, this comprises modifying the request. For example, where the request is to a file and includes the path in the file system of the file, the request may be modified by substituting the path of the file with the path of the virtualized file located in user-space.","Optional operation  depicts receiving a request to initialize a terminal server session from a second user on a second client; receiving a request from the second client to execute the application; determining that the application requires a virtual single-user session; intercepting a request from the application to a resource in the system-space; and redirecting the request to a corresponding resource in a user-space of the second user","While the present disclosure has been described in connection with the preferred aspects, as illustrated in the various figures, it is understood that other similar aspects may be used or modifications and additions may be made to the described aspects for performing the same function of the present disclosure without deviating therefrom. Therefore, the present disclosure should not be limited to any single aspect, but rather construed in breadth and scope in accordance with the appended claims. For example, the various procedures described herein may be implemented with hardware or software, or a combination of both. Thus, the methods and apparatus of the disclosed embodiments, or certain aspects or portions thereof, may take the form of program code (i.e., instructions) embodied in tangible media, such as floppy diskettes, CD-ROMs, hard drives, or any other machine-readable storage medium. When the program code is loaded into and executed by a machine, such as a computer, the machine becomes an apparatus configured for practicing the disclosed embodiments. In addition to the specific implementations explicitly set forth herein, other aspects and implementations will be apparent to those skilled in the art from consideration of the specification disclosed herein. It is intended that the specification and illustrated implementations be considered as examples only."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The systems, methods, and computer readable media for providing a virtual single-user session to a client in a terminal server session, in accordance with this specification, are further described with reference to the accompanying drawings in which:",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
