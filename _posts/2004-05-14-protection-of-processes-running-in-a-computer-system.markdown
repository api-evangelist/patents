---
title: Protection of processes running in a computer system
abstract: In one embodiment, a protected process is monitored by one or more watchdog processes. Upon detection that the protected process has been abnormally terminated, the watchdog processes may initiate actions to identify and/or terminate one or more malicious processes terminating the protected process. For example, the watchdog processes may inject a detector in processes running in the computer. The detector may listen for an activity that would terminate the protected process, and report such activity to the watchdog processes. The watchdog processes may be configured to terminate malicious processes identified as abnormally terminating the protected process. Thereafter, the watchdog processes may restart the protected process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472288&OS=07472288&RS=07472288
owner: Trend Micro Incorporated
number: 07472288
owner_city: Tokyo
owner_country: JP
publication_date: 20040514
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Field of the Invention","The present invention relates generally to computer systems, and more particularly but not exclusively to techniques for combating malicious programs and processes.","2. Description of the Background Art","Malicious programs, such as computer viruses, spy wares, worms, and Trojans, pose a significant threat to computer systems. For example, a computer virus can corrupt or delete important files, send e-mails without user authorization, render a computer inoperable, or cause other types of damage to a computer. Computers may incorporate antivirus programs as a protective measure against viruses. However, an antivirus program is only effective while running in the computer. A malicious program may thus render the computer vulnerable by attacking the antivirus program first.","In one embodiment, a protected process is monitored by one or more watchdog processes. Upon detection that the protected process has been abnormally terminated, the watchdog processes may initiate actions to identify and\/or terminate one or more malicious processes terminating the protected process. For example, the watchdog processes may inject a detector in processes running in the computer. The detector may listen for an activity that would terminate the protected process, and report such activity to the watchdog processes. The watchdog processes may be configured to terminate malicious processes identified as abnormally terminating the protected process. Thereafter, the watchdog processes may restart the protected process.","These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure, which includes the accompanying drawings and claims.","The use of the same reference label in different drawings indicates the same or like components.","In the present disclosure, numerous specific details are provided, such as examples of apparatus, components, and methods, to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize, however, that the invention can be practiced without one or more of the specific details. In other instances, well-known details are not shown or described to avoid obscuring aspects of the invention.","Being computer-related, it can be appreciated that the components disclosed herein may be implemented in hardware, software, or a combination of hardware and software (e.g., firmware). Software components may be in the form of computer-readable program code stored in a computer-readable storage medium, such as memory, mass storage device, or removable storage device. For example, a computer-readable storage medium may comprise computer-readable program code for performing the function of a particular component. Likewise, computer memory may be configured to include one or more components, which may then be executed by a processor. Components may be implemented separately in multiple modules or together in a single module.","Referring now to , there is shown a schematic diagram of an example computer that may be used in embodiments of the present invention. Depending on its configuration, the computer shown in the example of  may be employed as a desktop computer or a server computer, for example. The computer of  may have less or more components to meet the needs of a particular application. As shown in , the computer may include a processor , such as those from the Intel Corporation or Advanced Micro Devices, for example. The computer may have one or more buses  coupling its various components. The computer may include one or more input devices  (e.g., keyboard, mouse), a computer-readable storage medium (CRSM)  (e.g., floppy disk, CD-ROM), a CRSM reader  (e.g., floppy drive, CD-ROM drive), a display monitor  (e.g., cathode ray tube, flat panel display), a communications interface  (e.g., network adapter, modem) for coupling to a network, one or more data storage devices  (e.g., hard disk drive, optical drive, FLASH memory), and a main memory  (e.g., RAM). Software embodiments may be stored in a computer-readable storage medium  for reading into a data storage device  or main memory .",{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 2","FIG. 2","FIG. 2"],"b":["107","108","107","210","220","230","210","220","210","220","210","222","210","101","108","210","212","212","1","212","2","108","212","212","212","212"],"ul":{"@attributes":{"id":"ul0001","list-style":"none"},"li":{"@attributes":{"id":"ul0001-0001","num":"0000"},"ul":{"@attributes":{"id":"ul0002","list-style":"none"},"li":["Watchdog process - creates a mutex (mutual exclusion object) with a designated name, say \u201cM.\u201d","Watchdog process - opens the mutex M, and get the mutex M using the \u201cWaitForSingleObject\u201d function.","Watchdog process - calls the \u201cWaitForSingleObject\u201d for mutex M.","If watchdog process - has been normally terminated, watchdog process - will release the mutex M by calling the \u201cReleaseMutex\u201d function. In that case, the \u201cWaitForSingleObject\u201d function call of watchdog process - for the mutex M will return a \u201cWAIT_OBJECT_.\u201d","If watchdog process - has been abnormally terminated, the \u201cWaitForSingleObject\u201d function call of watchdog process - for the mutex M will return a \u201cWAIT_ABANDONED.\u201d"]}}}},"Similarly, watchdog process - may perform the just described monitoring steps for watchdog process -. A watchdog process  may restart another watchdog process  that has been abnormally terminated. This helps protect the watchdog processes  from a malicious process .","Watchdog processes  may be configured to protect a designated process (\u201cprotected process\u201d), such as an antivirus process . Watchdog processes  may be configured to detect and terminate malicious processes targeting protected processes. In one embodiment, watchdog processes  may be normally (i.e., not abnormally) closed by the protected process by way of a secured communication. The protected process may notify watchdog processes  to close. In response, watchdog processes  may terminate themselves.","Antivirus program  may comprise computer-readable program code for combating malicious programs and processes. Executing antivirus program  creates an antivirus process  for detecting and eradicating malicious programs and\/or processes. Antivirus programs, in general, are known in the art and not further described. As previously discussed, an antivirus program  is only effective while running. A malicious process may disable an antivirus program  by terminating its processes, such as an antivirus process . As will be more apparent below, watchdog processes  may be configured to protect an antivirus process . Antivirus process  may be configured to normally close watchdog processes . For example, the user may activate a menu or icon to normally close antivirus process . In that case, antivirus process  will perform a normal \u201cexit\u201d and will notify watchdog processes  to also normally close.","A malicious process  may be a computer virus, spyware, worm, Trojan, or other type of unauthorized process. Malicious process  may be, but not necessarily, the result of running a malicious program embedded in a file  that have been infected, for example. A malicious process  may be designed to search out, delete, or otherwise disable an antivirus program . For example, a malicious process  may be designed to find and terminate an antivirus process . Doing so leaves the computer vulnerable to damaging attacks by the malicious process .","Files  may comprise data files, program files, system files, or other type of storable information. A malicious process  may corrupt and infect files  after disabling an antivirus program .",{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIGS. 3A-3F"},"As is well known, processes of programs in the Microsoft Windows\u2122 operating system are assigned a process ID (\u201cpid\u201d). For example, assuming the antivirus program  has a file name \u201cantivirus.exe,\u201d the antivirus process  created by running \u201cantivirus.exe\u201d will have a unique process ID. In one embodiment, watchdog processes  look for the processes of antivirus program  and identify them by process ID. Only one antivirus process  is shown in  for clarity of illustration. Depending on the application, watchdog processes  may protect one or more antivirus processes. For example, in the Microsoft Windows\u2122 operating system environment, watchdog processes  may utilize the \u201cWaitForMultipleObjects\u201d function to monitor several protected processes at the same time. Watchdog processes  may consult a monitoring list containing the process IDs of all protected processes.","In , watchdog processes , which mutually protect each other as described above, periodically monitor the state of an antivirus process . The antivirus process  is the designated protected process in this example. In one embodiment, watchdog processes  identify the antivirus process  by process ID and continually check to ensure that the process ID is still up and running.","In , a malicious process  terminates the antivirus process  (see arrow ). Thereafter, the next time watchdog processes  check on the antivirus process , watchdog processes  discover that the antivirus process  has been abnormally terminated (see arrow ). That is, watchdog processes  discover that the antivirus process  is no longer running without receiving a notification from the antivirus process  that it is normally closing.","In , watchdog processes  restart the antivirus process (see arrow ), which is now labeled as \u2032 to indicate that it has been restarted once. In one embodiment, watchdog processes  restart a protected process that has been abnormally terminated less than or equal to (or just less than, depending on implementation) a specified threshold before initiating actions to identify and terminate a possible malicious process. This helps decrease false positives, and takes into account the possibility that the abnormal termination of the protected process may be due to events other than a malicious process. For example, watchdog processes  may restart an antivirus process  at least once before looking for a malicious process.","In , the malicious process  terminates the antivirus process \u2032 (see arrow ). Again, watchdog processes  find the antivirus process \u2032 abnormally terminated (see arrow ). In one embodiment, watchdog processes  presume that a malicious process is running in the computer if a protected process has been abnormally terminated a number of times exceeding (or at least equal to, depending on implementation) a threshold value. The threshold value may take into account the number of times the protected process has been abnormally terminated, the time between terminations, or both. For example, the threshold may be 2 abnormal terminations per hour.","In , watchdog processes  inject a detector  (i.e., -, -, . . . ) in all other running processes in the computer. It should be noted that injecting techniques, in general, are well known in the Microsoft Windows\u2122 operating system environment. Other techniques for monitoring the activities of processes may also be used without detracting from the merits of the present invention. In the example of , a detector  is injected in malicious process  and other processes  (i.e. -, -, . . . ). A detector  monitors the activities of the injected process. In one embodiment, a detector  detects if the injected process terminates the protected process. In the Microsoft Windows\u2122 operating system environment, a detector  may hook to the application programming interface (API) \u201cTerminateProcess(pid),\u201d which terminates a process having the process ID \u201cpid.\u201d A detector  may detect all calls to \u201cTerminateProcess(pid)\u201d and compare the parameter \u201cpid\u201d to that of the protected process. If the \u201cpid\u201d matches that of the protected process, meaning the injected process is terminating the protected process, the detector  may so notify watchdog processes  and provide watchdog processes  the process ID of the injected process terminating the protected process. This allows watchdog processes  to terminate the injected process before restarting the protected process once again. Depending on implementation, a detector module  may notify watchdog processes  after the malicious injected process terminates the protected process one or more times.","In , malicious process  terminates the antivirus process \u2032 (see arrow ). Detector - accordingly notifies watchdog processes , and provides watchdog processes  the process ID of malicious process  (see arrow ). Watchdog processes  may use the process ID of malicious process  to terminate it. For example, in the Microsoft Windows\u2122 operating system environment, watchdog processes  may call the API \u201cTerminateProcess(pid)\u201d using the process ID of malicious process  in the parameter \u201cpid.\u201d Note that this technique may be employed to identify and terminate one or more malicious processes.","In , watchdog processes  terminate malicious process  (see arrow ). Thereafter, watchdog processes  restart the protected antivirus process, which is now labeled as \u2033 to indicate that it has been restarted twice.",{"@attributes":{"id":"p-0031","num":"0035"},"figref":"FIG. 4","b":["400","402","400","404"]},"In the path from step  to step , the protected process has been normally terminated (e.g., closed by the user). In that case, the protected process will no longer be monitored by the watchdog process. In one embodiment, step  is performed by removing the process ID of the protected process from a watchdog monitoring list.","In the path from step  to step , the watchdog process discovers that the protected process has been abnormally terminated. In step , the watchdog process determines if the protected process has been abnormally terminated a number of times exceeding (or at least equal to, depending on implementation) a terminate threshold. If the protected process has been abnormally terminated a number of times not exceeding the terminate threshold, the watchdog process may restart and continue monitoring of the protected process as indicated in steps  and . If the protected process has been abnormally terminated a number of times exceeding the terminate threshold, method  continues in step  to initiate detection and removal of the process terminating the protected process.","In step , the watchdog process monitors the activities of processes running in the computer. Depending on implementation, the watchdog process may monitor all or selected processes. In one embodiment, the watchdog process injects a detector in all other processes. The detector listens for activities of the injected process, such as calls to an API that terminates or kills the protected process.","In step , the detector detects that the injected process is terminating the protected process. For example, the detector may detect that the injected process, hereinafter the \u201cmalicious process,\u201d is calling an API that terminates a process having a process ID corresponding to that of the protected process.","In step , the detector identifies the malicious process to the watchdog process. For example, the detector may provide the watchdog process the process ID of the malicious process. Accordingly, the watchdog process terminates the malicious process and restarts the protected process as indicated in the path from step  to step  to step .","While specific embodiments of the present invention have been provided, it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIGS. 3A-3F"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
