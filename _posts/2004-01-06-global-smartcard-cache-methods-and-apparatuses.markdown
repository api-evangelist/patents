---
title: Global smartcard cache methods and apparatuses
abstract: Methods and apparatuses are provided for use with smartcards or other like shared computing resources. A global smartcard cache is maintained on one or more computers to reduce the burden on the smartcard. The global smartcard cache data is associated with a freshness indicator that is compared to the current freshness indicator from the smartcard to verify that the cached item data is current.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664916&OS=07664916&RS=07664916
owner: Microsoft Corporation
number: 07664916
owner_city: Redmond
owner_country: US
publication_date: 20040106
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present invention relates generally to computers and like devices, and more particularly to improved methods and apparatuses that provide global caches for use with smartcards and other like sharable computing resources.","Smartcards are portable devices that include logic and memory circuitry configured to interact with computers and other like devices. In a typical computer implementation, a computer includes or is otherwise connected to a smartcard interface device that operatively interacts with the smartcard to provide connectivity to the circuitry of the smartcard for applications and\/or other processes operating within the computer. Once the applicable connections are made, the smartcard circuitry can operate as designed\/programmed and begin processing requests received from the computer and\/or otherwise support the operations of the computer.","Smartcards and other like mechanisms can be configured to support a wide variety of functions. By way of example, a smartcard may be configured to support user verification, service authorization and cryptographic processes. The circuitry on such smartcards typically includes processing logic and static memory that allows secret\/preparatory data to be processed and stored within the smartcard in a secure manner.","Currently there are a variety of different manufactures designing and building smartcards, and hence there are different circuits with these smartcards. The smartcards are each designed to comply with certain standards, e.g., regarding the physical design, power requirements, communication interface, etc. This standardization allows different smartcards to utilize common smartcard interface devices, such as smartcard reader\/writer devices that connect to computers.","Once a smartcard is operatively coupled to a computer (or other like device) then processes operating within the computer can send access requests to the smartcard through the established communication interface. For example, a software application running on a computer processing unit may request access to the smartcard by generating a smartcard access request to which the smartcard is responsive in some manner. For example, a smartcard may respond to the command(s) stated in a smartcard access request by processing some data and outputting data to the requesting software application, process and\/or other like entity.","Since a smartcard can be accessed by a plurality of such entities, there is a need to control access to the smartcard. Typically, a smartcard is designed to handle only one request, or transaction, at a time. As such, arbitration logic or other like logic is usually provided to prevent multiple simultaneous transactions\/access attempts. Such arbitration logic may be provided, for example, within the computer and\/or smartcard interface device.","It has been found that at certain times smartcard operations can be relatively slow due in part to the amount of card input\/output (I\/O) being performed. For example, data read from a smartcard is typically only stored, or cached, locally to the consumer of the data. Here, for example, the consumer of the smartcard data may be a process running on a computer or other like computing device. In some situations smartcard data is not cached at all.","Therefore, certain pieces of smartcard data must be re-read every time the data is needed.","Most contemporary smartcard scenarios are adversely affected by such smartcard caching, or lack thereof, behavior. One example of a common scenario is user authentication, which for these reasons may be uncomfortably slow and therefore is viewed by many as less-desirable than more common, but potentially less secure, alternatives, such as, for example, password-based authentication.","Moreover, even when smartcard data is cached, no prior solution exists for keeping the data consistent and secure across multiple consumers, e.g., across multiple processes running on a computer system.","Consequently, there is a need for improved smartcard caching methods and apparatuses.","Improved smartcard caching methods and apparatuses are described. The methods and apparatuses significantly reduce smartcard I\/O by implementing robust global caching techniques. The resulting global smartcard cache is substantially secure and resistant to attempts to maliciously access\/modify it. The global smartcard cache is also resistant to attempts by unprivileged consumers to discover private or other like data.","The global smartcard cache is different from previous caches such as those used for file-systems and disk drives. For example, disk caches are able to distinguish between read and write operations and take the appropriate action for each. To the contrary, the global smartcard cache logic is not always able to make such distinctions due to the proprietary, non-standardized nature of current smartcard commands. In certain exemplary implementations, this issue is addressed by associating a freshness indicator (e.g., counter or other like verifiable attribute\/data technique) with each cached item. Thus, a change in the freshness indicator may be indicative of a potential change in the corresponding data item.","In certain other exemplary implementations, the global smartcard cache is able to cache data stored by any consumer so that any other privileged consumer may access\/use it, even after the computing system has been rebooted, or otherwise lost power, any number of times. The global smartcard cache logic is also able to find and store data across multiple systems, for example, in a client-server model.","The above stated needs and others are met, therefore, for example, by an apparatus that includes memory and logic. The logic is configured to determine a freshness indicator associated with at least selected item data previously output by a smartcard and store the freshness indicator and the selected item data as part of an item in a cache in the memory.","In certain implementations, the logic is further configured to receive a request for the selected item data, determine if the selected item data is stored in the cache, determine if the selected item stored in the cache is current based on the stored freshness indicator, output the selected item data if determined to be current, output a smartcard access request associated with the selected item data if the selected item data is not stored in the cache, and output a smartcard access request associated with the selected item data if the selected item data that is stored in the cache is not determined to be current.","In still other implementations, the logic is further configured to receive the selected item data in response to a smartcard access request associated with the selected item data, add the new item data to the cache, and receive the freshness indicator from the smartcard. The logic may also be configured to output a request for a new freshness indicator associated with at least the selected item data from the smartcard, receive the new freshness indicator, and compare the new freshness indicator with the stored freshness indicator.","In some implementations, for example, as part of the item in the cache maintained by the computing system, the logic is further configured to store at least one type of data, such as, e.g., smartcard identifier data, item identifier data, item length data, context handle data, access control information data, meta data, and other like useful data.","In certain implementations, the cache includes a plurality of partitions and at least two of the partitions are associated with different freshness indicators.","In still other implementations, the logic is further configured to selectively cause the smartcard to modify the freshness indicator. The logic may also be configured to selectively store content of the cache to a persistent memory medium of the computing system.","The above stated needs and others are also addressed by a smartcard that includes persistent memory and logic that is configured to selectively maintain, within the persistent memory, at least one freshness indicator associated with at least one item data that can be requested by an external entity. Here, for example, the freshness indicator may include a selectively modifiable attribute or other like feature or data.","Turning to the drawings, wherein like reference numerals refer to like elements, the invention is illustrated as being implemented in a suitable computing environment. Although not required, the invention will be described in the general context of computer-executable instructions, such as program modules, being executed by a personal computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the invention may be practiced with other computer system configurations, including hand-held devices, multi-processor systems, microprocessor based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":"120"},"Exemplary computing environment  is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the improved methods and apparatuses described herein. Neither should computing environment  be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in computing environment .","The improved methods and apparatuses herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable include, but are not limited to, personal computers, server computers, thin clients, thick clients, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","As shown in , computing environment  includes a general-purpose computing device in the form of a computer . The components of computer  may include one or more processors or processing units , a system memory , and a bus  that couples various system components including system memory  to processor .","Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) l bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Such media may be any available media that is accessible by computer , and it includes both volatile and non-volatile media, removable and non-removable media.","In , system memory  includes computer readable media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processor .","Computer  may further include other removable\/non-removable, volatile\/non-volatile computer storage media. For example,  illustrates a hard disk drive  for reading from and writing to a non-removable, non-volatile magnetic media (not shown and typically called a \u201chard drive\u201d), a magnetic disk drive  for reading from and writing to a removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d), and an optical disk drive  for reading from or writing to a removable, non-volatile optical disk  such as a CD-ROM, CD-R, CD-RW, DVD-ROM, DVD-RAM or other optical media. Hard disk drive , magnetic disk drive  and optical disk drive  are each connected to bus  by one or more interfaces .","The drives and associated computer-readable media provide nonvolatile storage of computer readable instructions, data structures, program modules, and other data for computer . Although the exemplary environment described herein employs a hard disk, a removable magnetic disk  and a removable optical disk , it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer, such as magnetic cassettes, flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like, may also be used in the exemplary operating environment.","A number of program modules may be stored on the hard disk, magnetic disk , optical disk , ROM , or RAM , including, e.g., an operating system , one or more application programs , other program modules , and program data .","The improved methods and apparatuses described herein may be implemented within operating system , one or more application programs , other program modules , and\/or program data .","A user may provide commands and information into computer  through input devices such as keyboard  and pointing device  (such as a \u201cmouse\u201d). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, camera, etc. These and other input devices are connected to the processing unit  through a user input interface  that is coupled to bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a universal serial bus (USB).","A monitor  or other type of display device is also connected to bus  via an interface, such as a video adapter . In addition to monitor , personal computers typically include other peripheral output devices (not shown), such as speakers and printers, which may be connected through output peripheral interface .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . Remote computer  may include many or all of the elements and features described herein relative to computer .","Logical connections shown in  are a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and the Internet.","When used in a LAN networking environment, computer  is connected to LAN  via network interface or adapter . When used in a WAN networking environment, the computer typically includes a modem  or other means for establishing communications over WAN . Modem , which may be internal or external, may be connected to system bus  via the user input interface  or other appropriate mechanism.","Depicted in , is a specific implementation of a WAN via the Internet. Here, computer  employs modem  to establish communications with at least one remote computer  via the Internet .","In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device. Thus, e.g., as depicted in , remote application programs  may reside on a memory device of remote computer . It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.","Attention is now drawn to , which is a block diagram depicting an example of a system , as in , being configured to support smartcard cache logic  and a global smartcard cache .","As shown, system  includes computer  having, in this example, data media interfaces  operatively coupled to a smartcard interface device . Smartcard interface device  is configured to operatively couple to smartcard . Illustrated within computer , are applications (App A  and App B ), which are each operatively configured to run using the resources of computer  as needed. Being so configured, both App A  and App B  are able to request access to smartcard  through arbitration logic , data media interfaces  and smartcard interface device . In certain implementations, for example, arbitration logic  may be provided as part of the operating system, as an application programming interface (API), and\/or other suitable program mechanism. Transaction  is illustrative of an access request by App B  to smartcard .","In this example, smartcard cache logic  is illustrated as being operatively coupled to arbitration logic . This is just one example as to how smartcard cache logic  may be implemented. In other systems smartcard cache logic  may be operatively coupled to other programs, logic, etc. Smartcard cache logic  is also illustrated as being coupled to global smartcard cache , which is created and maintained by smartcard cache logic .","As described in more detail below, generally speaking when an entity (e.g., application, program, process, consumer, etc.) seeks to access smartcard  with transaction , for example, the access request will be handled at least in-part by smartcard cache logic , which will determine if the item requested is available in global smartcard cache . If the requested item is available in global smartcard cache  then the item will be provide to the requesting entity. If the requested item is not available in global smartcard cache  then the item will need to be provided by smart card .","There are features described herein that ensure that an item provided from global smartcard cache  are current and that the requesting entity is authorized to access the item. For example, to ensure that the relevant data in a cached item is current (i.e., that it matches that which smartcard  would provide at the time of the access request), a freshness counter or other like verifiable attribute can be used to test if the data in the requested item may have been altered since it was last copied to global smartcard cache . This \u201cfreshness counter\u201d is maintained and persisted on smartcard  and updated accordingly by logic that can be implemented on the smartcard itself and\/or in another applicable device, such as, e.g., computer . Logic  as shown in smartcard , for example, can be configured to maintain and store (persistently) one or more freshness counters or like mechanisms in the static memory of the smartcard.","When an item is stored in global smartcard cache  so too is the current applicable freshness counter. As such, during a subsequent request for the item, the previously cached freshness counter for the item can be compared to a corresponding newly retrieved freshness counter from smartcard . If the two freshness counters match, then there should be no difference between the cached item and the item that the smartcard would provide if requested to do so. Consequently, the cached item can be provided to the requesting entity to satisfy the access request. This tends to improve performance substantially, without compromising reliability.","Before describing in greater detail some exemplary implementations of global smartcard cache , a distributed global smartcard cache arrangement will be described. Thus, attention is drawn to , which is a block diagram depicting an exemplary networked computer environment  supportive of one or more global smartcard caches.","Networked computer environment  includes a computer  acting as a client computer operatively coupled to a server computer . As above, computer  includes smartcard cache logic  and global smartcard cache , and is operatively coupled to smartcard interface device  which provides connectivity to smartcard . Server computer  also includes corresponding smartcard cache logic  and global smartcard cache . Server computer  is also running App C  and App D  in this example.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":"FIG. 3","b":["302","304","202","306","202","304","304","302","214","130","216","216","306","304","182","304","216","202","304","216"]},"Reference is now made to , which is a block diagram illustratively depicting certain exemplary features of an exemplary global smartcard cache .","In this example, global smartcard cache  includes one or more partitions  and  corresponding to one or more regions\/functions\/users\/etc. of the services\/items that smartcard  may provide. Partitioning is not required, but may improve performance in certain implementations. Each partition  and  in this example include one or more cached items. For example, partition I  includes item A  and item B . Similarly, partition II  includes item C  and item D .",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 5","b":["404","216"]},"Here, item A  includes a smartcard identifier  that at least substantially uniquely identifies the smartcard that provided item data . By way of example, smartcard identifier  may include the UUID of smartcard  or other like identifying information. Item A  also includes a freshness counter , which is used to determine if cached item data  is current. A lookup name  or other item data identifier is also included in this example of item A . This can be the name of the item as requested by an entity, for example. Item A  also include item data  and in this example a data length  that specifies the length of item data .","Other information may be included in cached item A . For example, as shown in , in certain implementations a context handle  may be included to identify a smartcard subsystem context handle. Access control information  may also be included in item A  to specify entities\/users\/groups\/accounts\/etc. that are authorized to access the cached item or portions thereof. In certain implementations an access control list (e.g., with SIDs) or other like mechanism can be employed as access control information . Determining access control to item A  may be handled by smartcard cache logic , for example, or other applicable logic. Item A  may also include other forms of meta data , such as, e.g., a timestamp, etc.","Attention is drawn next to , which is a flow diagram depicting certain exemplary acts associated with a method  for use in global smartcard cache logic , for example, as in .","In act , a smartcard access request associated with some desired item data is received, for example, from some entity. The access request in this example may identify the smartcard, the requested item data, and\/or the requesting entity. Other or different information may be included in an access request. In act , the applicable freshness counter is accessed from the specified smartcard. Note that in certain other implementations, various acts may be added, omitted, adapted, and\/or performed in a certain order or simultaneously. For example, act  may occur prior to act . The figures provided herein are for certain exemplary implementations.","In act  it is determined if the requested item is stored in the global smartcard cache. If the requested item is stored in the global smartcard cache, then in act  a verification of the freshness counter is completed. Here, for example, the freshness counter accessed from the smartcard in act  may be compared to a corresponding freshness counter stored in the requested item found in global smartcard cache in act .","If the requested item is not found in the global smartcard cache in act , then in accordance with act , the smartcard is accessed accordingly and the requested item returned.","In act , if the freshness counters compared in act  are verified (e.g., match) then the requested item is provided to the requesting entity from the global smartcard cache accordingly. To the contrary, if the freshness counters in act  are not verified, then in act  the smartcard is accessed accordingly and the requested item returned.","When the smartcard is accessed and the requested item returned per acts , , then in act  the global smartcard cache is updated with the latest requested item. The update may include, for example, deleting an older version of the item from the global smartcard cache.","Act  is optional in some implementations. In act , an applicable freshness counter in the smartcard is altered whenever the actions of the smartcard may have changed the item data. The freshness counter can be implemented in a variety of ways, each having a specific manner in which it is altered to reflect that there may have been a change made to item data, for example within a specific partition. As mentioned, act  may be a function of the smartcard cache logic and\/or a function of logic  of smartcard . In other implementations, act  may also be conducted by or initiated by the requesting entity as part of an operation\/transaction associated with an access request that has the potential of causing a change to the item data within the smartcard.","As illustrated herein, a freshness counter may take on various forms and include various types of data. In certain implementations there is a single freshness counter, while in other implementations there may be multiple freshness counters, e.g., one freshness counter per partition.","In act , which is optional and may be performed by various different logic supportive of the smartcard cache logic, the global smartcard cache is persisted to a storage medium, such as, e.g., a hard disk drive, when the computing system is shut down, and\/or at other useful times. As such, the smartcard global cache can be recreated\/re-populated later on without accessing the smartcard, for example, while rebooting the computing system.","In accordance with certain other aspects of the methods and apparatuses provided herein, freshness indication may also be implemented through some applicable counter mechanism that is not provided for and\/or stored on the smartcard, but rather maintained by other logic, such as, a smartcard subsystem of the operating system of the computer. For example, a counter or other like indicator of transmissions (e.g., read or write) to the smartcard may be employed to track the freshness of the data in the global smartcard cache. This approach may be less optimal, however. For example, it cannot differentiate between reads and writes, and does not allow cache persistency past removal of the smartcard. One benefit is that there is no need to maintain a smartcard based counter.","Although some preferred implementations of the various methods and apparatuses have been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it will be understood that the invention is not limited to the exemplary implementations disclosed, but is capable of numerous rearrangements, modifications and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A more complete understanding of the various methods and apparatuses of the present invention may be had by reference to the following detailed description when taken in conjunction with the accompanying drawings wherein:",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 6","FIGS. 2 and 3"]}]},"DETDESC":[{},{}]}
