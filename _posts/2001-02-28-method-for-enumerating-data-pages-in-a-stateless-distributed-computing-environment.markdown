---
title: Method for enumerating data pages in a stateless, distributed computing environment
abstract: The present invention discloses a method for enumerating data pages in a stateless, distributed computing environment. A user operating a uses interface calls a stateless application, which in turn invokes a stateful data structure to retrieve data from a datastore. Stateful data residing within the stateful data structure is converted to stateless data, and a display page comprising stateless data is returned to the user. Preferably, the stateless application and the stateful data structures are Enterprise JavaBeans (EJB) compliant session beans. In a preferred embodiment, a servlet generates the display page by retrieving the stateless data from the stateful session bean, the display page is returned to the user interface via a communication framework, and data is retrieved from the datastore via a persistence framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06856995&OS=06856995&RS=06856995
owner: Sprint Communications Company L.P.
number: 06856995
owner_city: Overland Park
owner_country: US
publication_date: 20010228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","EXAMPLES","Example 1","Example 2"],"p":["The present invention is a computer software method for enumerating pages of data in a stateless, distributed environment, and more specifically the invention allows a user to easily navigate through a large collection of data objects.","Enterprise-wide computing systems are often distributed computing systems, that is systems of individual computers, typically dispersed geographically across many separate office locations, linked together via a network to pass data and commands. A client\/server arrangement is one way of implementing a distributed computing system. In a client\/server arrangement, the server computer provides a service, for example reading and writing data in a database, to its client computer. Typically, the client computer calls the server computer and requests that an application or function be executed. During the session of the call, the client and server computers are said to share \u201cstate,\u201d that is the data and commands passed between the client and server have a context or state of being based upon the particular instance of service being provided to the client by the server. In a stateless distributed computing system, client and server computers maintain little or no state between calls, which works well for small, discrete transactions but poses problems when a client requests large data sets from a server. For example, the client could retrieve all of the desired data comprising a large data set from the server in a single call, but a user accessing the client computer would have to wait for the entire data set to be gathered and transmitted. Depending upon the size of the data set, for example a customer list for a major corporation, the wait time can be prohibitive. Alternatively, the client could manage context information between successive calls to the server. However, the server, being stateless, would have to rebuild the entire data set for each successive call and then search for the next subset of data to return to the client, which is inefficient and results in response delays. The present invention addresses the need for a data structure to allow clients to efficiently access large data sets from servers in a stateless, distributed computing environment.","The present invention discloses a method for enumerating data pages in a stateless, distributed computing environment. A user operating a user interface calls a stateless application, which in turn invokes a stateful data structure to retrieve data from a datastore. Stateful data residing within the stateful data structure is converted to stateless data, and a display page comprising stateless data is returned to the user. Preferably, the stateless application and the stateful data structures are Enterprise JavaBeans (hereinafter referred to as \u201cEJB\u201d) compliant session beans. In a preferred embodiment, a servlet generates the display page by retrieving the stateless data from the stateful session bean, the display page is returned to the user interface via a communication framework, and data is retrieved from the datastore via a persistence framework.","Referring to , user interface  (i.e., a workstation) is connected to application  (also referred to as an application controller) via network . The network connection can be any suitable type of network connection, for example an internet session, wherein user interface  comprises a web browser accessing a web server , which in turn is linked to an application server  hosting application . Application  may be any type of stateless, executable software or program, for example a database access program such as a pre-existing legacy application. Stateless application as used herein means that the application does not recall or remember attributes, parameters, configurations, and the like from any previous time the application was executed. Preferably, application  is written using the FJH industry specification, which is implemented in software packages available from Sun Microsystems, IBM, and other companies. More preferably, application  is a slateless session bean, which is an enterprise bean that is created by a server and exists only for the duration of a single client\/server request to perform operations such us calculations or accessing a database for the client. Use of stateless applications is desirable to avoid the problems an application server would encounter in trying to implement a stateful application, for example the burden of tracking, maintaining and storing the data (i.e., the \u201cstate\u201d) associated with each and every client call handled by the server.","Upon establishing the internet connection between the user interface and the application, the user can provide input  to the application. For example, a user might need to by perform a business task such as updating a client's account information using an account manager application and a datastore (i.e., database ) residing on a backend server. The user could identify the task and application by sending the corresponding uniform resource locator (URL) as input .","Datastore as used herein means any type of data storage software device or medium, including datafiles, databases, memory chips, hard drives, floppy drives, magnetic storage media, optical storage media, and the like. Preferably, the datastore is a database, which can be either a relational or object database. Examples of suitable databases arm relational databases produced by Oracle. Inc. and object databases produced by Versant Inc. The datastore can be located remotely and accessed, for example, through a JAVA database connectivity (JDBC) compliant connection. When the underlying datastore comprises a relational database, object-relational (O-R) mapping tools, such as TOPLink produced by The Object People, Inc., may be used in carrying out the invention. As known to those skilled in the art, O-R mapping tools serve as a bridge between object technology and relational database technology. Likewise, the JAVA\/Versant interface (JVI) available from Versant Inc. can be used in carrying out this invention to serve as a bridge between the JAVA programming language (which is available from Sun Microsystems Inc.) and object databases produced by Versant Inc.","The task the user seeks to perform may comprise a number of individual steps, each of which may require additional input  to application  (via servlet  and communication framework ) from the user interface. The sequence of the steps to perform a task is controlled by application . Subsequent steps should follow in a logical, ordered sequence as necessitated by the task being performed, and the computer application typically contains the underlying logic controlling the step sequence. The user navigates through the various steps by supplying input  to the application (also referred to as navigational or progressional input) in response to information and prompts (i.e., output ) communicated by the application to the user via the user interface.","Servlet  and communication framework  work together to generate output  to user interface . A servlet is a program written in the JAVA programming language that extends the functionality of a web server, generating dynamic content and interacting with web clients using a request-response paradigm. A preferred communication framework  for managing communication flow between user interface  and application  is disclosed and claimed in co-pending U.S. patent application Ser. No. 09\/671,981, filed Sep. 27, 2000 and entitled \u201cComputer Software Framework and Method for Managing Communication Flow Between a User Interface and a Computer Application,\u201d which is incorporated by reference herein in its entirety. Communication framework  abstracts the communication (i.e., presentation) functions from the business process functions\/logic. Communication framework  receives input  from user interface , which comprises a navigational input, and optionally additional task specific information (for example, a personal identification number, account number, etc.). Communication framework  queries application  (as represented by line ) and receives information from application  (as represented by line ) regarding the identity of the current step in the task corresponding to the navigational input from the user. Based upon the identity of the current step, communication framework  provides output  corresponding to the client step to user interface  across network .","In order to update an account, the first step might be to determine whether the account is a new or existing account, and thus the user would enter this information, if known. If unknown, a preliminary database search step may need to be executed by application  to determine if an account exists, wherein a large data set is accessed from database . Referring to , application controller  executes the appropriate business component associated with the step of searching for a list of customer accounts, for example a business component named \u201clist customer accounts\u201d that searches a database named \u201ccustomer account database.\u201d The application controller looks-up the appropriate business component in a JAVA Naming and Directory Interface (JNDI) (as represented by step ) and creates the business component (as represented by step ), for example by instantiating a business component object. In order to avoid the problems discussed previously, the business component (on behalf of slateless application controller ) invokes a stateful data structure to allow efficient access to such a large data set, as represented by step . The preferred stateful data structure used in carrying out the current invention is a page enumeration session bean  (also referred to generally as the page enumeration or page enumeration framework), which is a stateful session bean.","Prior to creating the page enumeration session bean, the business component must gather information and parameters needed for the creation of the page enumeration session bean. Referring to , the business component looks up the page enumeration in a JNDI, as represented by step . In addition to identifying the appropriate page enumeration, the business component must also gather from the relevant database the preliminary information and parameters (i.e., page enumeration set-up information) that will be used to create the page enumeration. For example, the business component might establish a database session with the customer accounts database to determine how many records are in the database, which when divided by the page size yields the total number of pages (a parameter that is then used in the creation of the page enumeration session bean). As shown in step  of , business component  obtains a database wrapper corresponding to the application properties parameter . A database wrapper is a database specific software component that establishes a connection to a particular type or brand of database (e.g., object database, relational database, etc.). More specifically, the database wrapper provides an application programming interface (API) for session and transaction management which allows access to a database's functionality. Using the database wrapper, a database session (step ) and transaction (step ) are begun, and an object factory (also referred to as a domain object factory) is obtained (step ). The domain object factory  is used to query the database for page enumeration set-up information (e.g., page size), as represented by step  of FIG.  and further detailed in FIG. . Referring to step  of , domain object factory  queries database  and returns a vector (i.e., a collection) of domain objects. The domain object factory  converts (step ) the vector of domain objects to a vector of handles, which are unique identifiers or \u201cshort-cuts\u201d to the domain objects themselves. The creation of the page enumeration session bean is specific to the required domain object factory . Thus, a database session must be started (steps  and  in ) and the domain object factory retrieved (step ) in order to create the page enumeration session bean. Using the page-enumeration set up information and vector of handles (e.g., page size, domain object factory name, vector of handles), the page enumeration session bean  is created by application controller  (or a business component thereof) calling a create method on page enumeration home interface .","Preferably, page enumeration session bean  is created via an instantiation of the JAVA framework comprising the classes shown in FIG. . As used in object technology, a class defines the methods and variables for a particular type of object; all objects of a given class are identical in form and behavior but contain different data in their variables. Accessors are the methods on a class that provide access to the variables of the class (for examples get and set commands). The methods and variables comprising each class are shown in , and it will be understood that these methods and variables may be modified by one skilled in the art without departing from the scope of the present invention.","Page enumeration home interface  is the main (i.e., public) entry point into page to enumeration framework , and as such page enumeration home interface is called by application  (via the business component) in order to use the functionality provided by the framework. An interface (also known as a message interface) is a communication surface that determines the signals (e.g., calls) that can pass through the surface; in other words, the interface defines which calls an object will respond to. That is, the interface defines the base functionality (i.e., methods) that is required for an implementation of the interface. An example of a method to create an instance of a page enumeration session bean is create(Properties appProperties, int pageSize, Class factoryInterface, Object[ ] handleArray), wherein a handle to the page enumeration bean is returned and the parameters are defined as follows:\n\n","In a preferred embodiment, data is accessed from a relational database using TOPLink, and the method to create an instance of a TOPLink implementation of a page enumeration session bean is create(Properties appProps, int pageSize, Class factoryInterface, ReadAllQuery query), wherein a handle to the page enumeration bean is returned and the parameters are defined as follows:\n\n","Upon creation of the page enumeration session bean, a handle to the bean is returned to the display servlet . The display servlet requests the next or previous display pages from the page enumeration session bean (as shown by steps  and  in ) in response to user requests via user interface . In response to the initial call by the client\/user, the next page requested by the servlet will typically be the first page. Based upon the page-enumeration set up information used in its creation, the page enumeration session bean knows the total size of the data set (e.g., the number of entries comprising the customer list), the number of entries per page (for example, one dozen), and the total number of display pages.","The page enumeration session bean retrieves the data entries comprising a display page from database  (FIG. ), as represented by step  in FIG. . The data entries retrieved by the page enumeration session bean are in the form of data objects. Handles are the commands (e.g., APIs) used to retrieve the data entries objects from a database. Although object handles typically operate in terms of JAVA data types, the internal object implementations can be in terms of datastore specific types. In the case of a Versant object database, the type Handle can be used for references to other objects. In the case of a relational database accessed via the TOPLink OR mapping tool, the ValueHolder type can be used to reference other objects residing in the database. A preferred framework anti method for retrieving data from a database (sometimes referred to as a persistence framework) is disclosed and claimed in U.S. patent application Ser. No. 09\/579,623, filed May 26, 2000 and entitled \u201cComputer Framework and Method for Isolating a Business Component from Specific Implementations of a Datastore.\u201d which is incorporated by reference herein in its entirety. Exemplary code using handles on an object residing in a relational database is shown in U.S. application Ser. No. 09\/579,623. Alternatively, the page enumeration can retrieve data entries from the database using the cursored stream feature available from TOPLink A cursored stream is TOPLink's version of the standard JAVA input stream class and provides stream access to a query result of objects.","In summary, the page enumeration session bean retrieves data entries comprising a display page from the database using handles, which serve as \u201caddresses\u201d or \u201cshortcuts\u201d to the full data entries, all of which remain resident in the database for the duration of the database session. In other words, the page enumeration session bean knows the identity and location of the data entries comprising the entire data set (e.g., customer list) requested by the business component, but rather than pull all of the information from the database (which would result in problematic time delays), the page enumeration session bean only pulls the data entries needed to populate the current display page to be sent to the user. Upon request by the servlet, the page enumeration session bean returns an initial block of data, typically corresponding to the first page of the business component being carried out by the application controller. Using the returned block of data, the servlet creates the display page which is returned to the user via network . Given that the page enumeration session bean is a stateful bean and has obtained the page data from the database in the context of a database session, the page data must be made transient (that is independent of the database session) before it can be returned to the servlet.","Data objects are considered persistent while in context of a database session and are not valid outside the database session. Therefore, the data objects comprising the page data should be made transient (i.e., independent of the database session) by the page enumeration before being passed back to the user via the display servlet. A transient object is a database neutral implementation of the object interface, as shown by reference numeral  in FIG. . As shown in FIG.  and step  of , the page enumeration session bean  calls a conversion method to make transient a vector (i.e., collection) of domain objects. The methods to convert the domain object from a persistent to a transient state (sometime referred to as a \u201cswizzle\u201d and shown by reference numeral  on ) are commonly known to those skilled in the art, and exemplary code for such a conversion is shown in U.S. patent application Ser. No. 09\/579,623, referenced previously. Upon making the data comprising the data page transient, the data page is returned to the user via display servlet , and network .","In response to the data page returned to the user, the user may request additional information from the data set by requesting that the next or previous page be displayed. As discussed previously, the user request is forwarded to the display servlet, which communicates directly with the page enumeration session bean in existence via a handle to the session bean. Given that the page enumeration bean already exists, the steps required to create the page enumeration session bean need not be repeated. As shown by steps  and  on , the display servlet calls next or previous methods on the page enumeration session bean, and these pagination methods are shown in  by reference numeral  on the page enumeration interface  and by reference numeral  on the page enumeration implementation class . Specific pagination methods include: next( ), which retrieves the next page of objects and returns a vector that contains transient objects (external implementations); hasNext( ), which answers whether a call to next( ) will succeed and should be called before attempting next( ); previous( ), which retrieves the previous page of objects and returns a vector that contains transient objects (external implementations); and hasPrevious( ), which answers whether a call to previous( ) will succeed and should be called before attempting previous( ). In a preferred embodiment, data is accessed from a relational database using TOPLink, and the pagination methods include: next( ), which retrieves the next page of objects and returns a vector that contains transient objects (external implementations); hasNext( ), which answers whether a call to next( ) will succeed and should be called before attempting next; previous( ), which retrieves the previous page of objects and returns a vector that contains transient domain objects (external implementations); hasPrevious( ), which answers whether a call to previous( ) will succeed and should be called before attempting previous( ); getFirstPage( ), which retrieves the first page of domain objects and returns a vector that contains transient objects (external implementations); getLastPage( ), which retrieves the last page of objects and returns a vector that contains transient objects (external implementations); getPage(integer), which retrieves the specified page of objects and returns a vector that contains transient objects (external implementations); getPageCount( ), which retrieves a count of the number of pages in the cursor stream on the database and returns an integer; and getRecordCount( ), which retrieves a count of the number of records in the cursor stream on the database and returns an integer.","The steps of populating a page with data, making the data transient, and returning the page to the user as described previously are repeated for each next or previous page requested by the user. Upon completion or termination by the user, the servlet calls ejbRemove on the page enumeration session bean, and the page enumeration session bean and associated database session are terminated, as shown by step  of FIG. . Should the user wish to perform another task requiring access to a large data set, the steps as described previously would be repeated for the new client\/server session.","While the code examples herein are written in the JAVA programming language, which is available from Sun Microsystems Inc., it is understood that other suitable programming languages may be used as will be readily apparent to one skilled in the art. Furthermore, it should be understood that the code examples are in skeleton or outline form, and are not necessarily intended to be in complete executable form, provided however that one skilled in the art could easily tailor executable code based upon these examples. Example 1 is exemplary code embodying the page enumeration framework as set forth in , and Example 2 is exemplary code embodying a preferred TOPLink implementation of the page enumeration framework for use with relational databases.",{"@attributes":{"id":"P-d0e1509","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public interface PageEnumeration extends EJBObject"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Vector next( ) throws RemoteException;"]},{"entry":[{},"public boolean hasNext( ) throws RemoteException;"]},{"entry":[{},"public Vector previous( ) throws RemoteException;"]},{"entry":[{},"public boolean hasPrevious( ) throws RemoteException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public interface PageEnumerationHome extends EJBHome"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public PageEnumeration create(Properties appProps, int pageSize,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"String dataSourceName, Class factoryInterface,"]},{"entry":[{},"Object[ ] handleArray )"]},{"entry":[{},"throws CreateException, RemoteException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class PageEnumerationImpl implements SessionBean"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void ejbActivate( ) throws java.rmi.RemoteException;"]},{"entry":[{},"public void ejbCreate(Properties appProps, int pageSize,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Class factoryInterface,"]},{"entry":[{},"Object[ ] handleArray)"]},{"entry":[{},"throws CreateException, RemoteException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void ejbPassivate( ) throws java.rmi.RemoteException"]},{"entry":[{},"public void ejbRemove( ) throws java.rmi.RemoteException;"]},{"entry":[{},"private Vector getPage(int pageNumber);"]},{"entry":[{},"private Vector getSwizzledPage(int pageNumber);"]},{"entry":[{},"public Vector next( );"]},{"entry":[{},"public boolean hasNext( );"]},{"entry":[{},"public Vector previous( );"]},{"entry":[{},"public boolean hasPrevious( );"]},{"entry":[{},"public void setSessionContext(SessionContext sessionContext)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws RemoteException"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"}"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public interface PageableFactory"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public Vector swizzle(Vector handleVector);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"P-d0e2015","num":"00002"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public Interface PageEnumerationTOPLinkImpl extends EJBObject"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public Vector next( ) throws RemoteException;"]},{"entry":[{},"public boolean hasNext ( ) throws RemoteException;"]},{"entry":[{},"public Vector previous( ) throws RemoteException;"]},{"entry":[{},"public boolean hasPrevious ( ) throws RemoteException;"]},{"entry":[{},"public Vector getFirstPage( ) throws RemoteException;"]},{"entry":[{},"public Vector getLastPage ( ) throws RemoteException;"]},{"entry":[{},"public Vector getPage(int) throws RemoteException;"]},{"entry":[{},"public int getPageCount ( ) throws RemoteException;"]},{"entry":[{},"public int getRecordCount ( ) throws RemoteException;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public interface PageEnumerationTOPLinkImplHome extends EJBHome"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"public PageEnumeration create(Properties appProps, int pageSize,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Class factoryInterface, ReadAllQuery query)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws CreateException, RemoteException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"public class PageEnumerationTOPLinkImplBean implements SessionBean"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void ejbActivate( ) throws java.rmi.RemoteException;"]},{"entry":[{},"public void ejbCreate(Properties appProps, int pageSize,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Class factoryInterface, ReadAllQuery query)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws CreateException, RemoteException;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"public void ejbPassivate( ) throwsjava.rmi.RemoteException"]},{"entry":[{},"public void ejbRemove( ) throws java.rmi.RemoteException;"]},{"entry":[{},"public Vector getPage(int pageNumber);"]},{"entry":[{},"private Vector getPageElements(int pageNumber);"]},{"entry":[{},"private Vector getTransientSwizzledPage(Vector page)"]},{"entry":[{},"public Vector next( );"]},{"entry":[{},"public boolean hasNext( );"]},{"entry":[{},"public int getPageCount( );"]},{"entry":[{},"public int getRecordCount( );"]},{"entry":[{},"public Vector getFirstPage( );"]},{"entry":[{},"public Vector getLastPage( )"]},{"entry":[{},"public Vector previous( );"]},{"entry":[{},"public boolean hasPrevious( );"]},{"entry":[{},"public void setSessionContext(SessionContext sessionContext)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"throws RemoteException"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"P-00005","num":"00005"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00006","num":"00006"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00007","num":"00007"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00008","num":"00008"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00009","num":"00009"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00010","num":"00010"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
