---
title: File system with access and retrieval of XML documents
abstract: A XML-aware file system exploits attributes encoded in a XML document. The file system presents a dynamic directory structure to the user, and breaks the conventional tight linkage between sets of files and the physical directory structure, thus allowing different users to see files organized in a different fashion. The dynamic structure is based upon content, which is extracted using an inverted index according to attributes and values defined by the XML structure. In one application, a dynamically changing federated repository is searchable using a system of local and merged master indices, wherein query results are presented as virtual directory paths that are semantically organized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07043472&OS=07043472&RS=07043472
owner: International Business Machines Corporation
number: 07043472
owner_city: Armonk
owner_country: US
publication_date: 20021011
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application is a continuation-in-part of application Ser. No. 09\/873,084, filed Jun. 4, 2001, now U.S. Pat. No. 6,745,206, issued Jun. 1, 2004, which claims the benefit of Provisional Application No. 60\/209,475, filed Jun. 5, 2000.","1. Field of the Invention","This invention relates to computer file systems. More particularly, this invention relates to an improved semantically based system for dynamically organizing XML files or files with markup tags in a context sensitive manner, so as to enable a shared federated repository to be browsed in a manner that is intuitive to a user.","2. Description of the Related Art","It has been recognized that static, hierarchical systems of organizing documents are inadequate to efficiently meet the needs of computer users attempting to access increasingly vast amounts of dynamically changing information. Conventional file systems are simply too unwieldy to deal with this information load in a way that is convenient to the user. They have become increasingly impractical for efficient document management.","A relational database is an alternative to a file system as a repository for documents, and many databases today provide some support for documents such as extended markup language (XML) documents. The XML document type declaration contains, or points to, markup declarations that provide a grammar for a class of documents. This grammar is known as a document type definition (DTD). However, the flexible document type declaration of a XML document, while easily represented as a graph, does not map naturally or efficiently into a flat static table. Moreover, the standard query language (SQL) interface of databases is not as commonly used in software applications, as is the conventional file system interface. Furthermore, management of large databases often requires a skilled administrator.","This approach to controlling the information explosion involves attaching metadata to documents. For example, using the MPEG-7 standard it is possible to attach attributes to video data.","It is proposed in the document . D. Gifford, P. Jouvelot, M. Sheldon, and J. O'Toole Jr., 13, October 1991, pp. 16\u201325, to provide access to documents using queries. Virtual directories are created, each pointing to files that satisfy a query. The concepts presented in this document provide a foundation for the invention disclosed herein.","The document Presto: , Paul Dourish, W. Keith Edwards, Anthony LaMarca, and Michael Salisbury, ACM Transactions on Computer-Human Interaction, 6(2) 1999, and the document , Paul Dourish, W. Keith Edwards, Anthony LaMarca, and Michael Salisbury, in Proceedings of the ACM Symposium on User Interface Software and Technology, UIST '99, Asheville, N.C., 1999, together disclose a document management system that emphasizes the attributes of documents being retrieved, while retaining some structural aspects of conventional file systems. The system is driven by attributes that are manually attached to the files, or extracted from the files using a filter. The attributes, including content, may be arbitrarily defined by different users and their numbers extended, such that different users have entirely different view of the document space. This arrangement has the drawbacks of requiring the user to execute a separate application using a separate interface.","Another approach is taken in the document, -, B. Gopal and U. Manber, Operating Systems Design and Implementation (OSDI), 1999. This document proposes to extend the file system interface, wherein users are able to create their own name spaces based on queries, path names, or combinations thereof. This approach has a drawback in that interoperability with existing applications is difficult.","Retrieval of information from federated data repositories is a field of increasing importance. A federated data repository typically comprises heterogeneous data distributed across an enterprise.","Distributed file systems, for example the Andrew File System (AFS), and the Network File System (NFS), provide a measure of information sharing. Hierarchical trees from different sources are exposed to the user by gluing the different tree structures side-by-side. The distributed file system can then be used to share information from the different sources. Thus, information from separate sources is typically presented side by side.","Peer-to-peer communication over data networks, realized, for example, in the currently popular Napster and Gnutella systems, embody a powerful concept for sharing and exchanging information over the Internet. Nevertheless, they utilize proprietary, specially tailored interfaces, and rely heavily on file naming for locating files.","Current peer-to-peer file sharing services allow for search, but do not support browsing well. Moreover, the search in such systems is typically based on file names, which lack necessary information, and may even be misleading. This is because naming conventions are not consistently enforced in such systems, and users are free to invent file names, which may have little relation to the file content.","Internet search engines typically employ search indices. However, these indices are not context sensitive, and irrelevant information is often returned from them on query. For example, when searching for a song called \u201cLet It Be\u201d, a free text search invariably retrieves many unrelated documents in which the search text appears. Moreover, updating of the indices is limited by the efficiency of offline Web crawling. Thus, Internet search indexes cannot be relied upon to be up-to-date. Typically, a snapshot of the indices in the system is taken from time to time, and serves as the basis for the query results. Ongoing changes in existing documents, document additions and deletions are not visible on query until the next scheduled index build.","Wide Area Information Servers (WAIS) is an arrangement that is intended to help users locate information over networks. This represents a unified interface that relies on natural language questions, and employs indexing. However, once again, the information in the indices is not context sensitive. Conventional free text searching and ranking is performed. WAIS is disclosed in further detail in the document, , B. Kahle, et al., ONLINE, Vol. 15, No. 5, p. 56\u201360, September 1991.","Distributed Lightweight Directory Access Protocol (LDAP) and X.500 (International Standard ISO\/IEC 9594-1) services, when queried, may cause one server to refer the client to a second server. Alternatively, the first server may query the second server, should it be unable to respond to the query. LDAP queries inherently force the user to specify attributes and values in constructing his query. Thus, these services are suitable only when there is ample advance knowledge of the subject.","Bio-informatics is an exemplary rapidly growing field in which above-noted difficulties in information retrieval from a variety of unrelated sources arise frequently, and are often stumbling blocks to research. A life sciences company typically has data stored in a cluster of repositories, and in multiple formats. Conventionally, it would be necessary to tailor a specific application in order to deal with the extraction and combination of data from all the sources. Furthermore, it is not uncommon for an external organization to gain access to several such clusters from several such companies. Using conventional technology, it is indeed daunting to try to establish a coherent system for convenient access to all the data. What is needed is a friendly facility from which to be able to query all the different data sources at once, and obtain combined results.","More generally, in the field of retrieval of information from federated repositories or the Internet, there is no efficient manner in which to combine several distinct resource repositories in a way that is convenient to use and is capable of supplying a meaningful response to a query in a dynamic environment. In such environments in such repositories not only do the resources themselves change with time, but the participating sites also vary.","It is a primary advantage of some aspects of the present invention that existing applications using the conventional file system applications programming interface (API) are supported.","It is still another advantage of some aspects of the invention that file organization dynamically accommodates changes in the document space.","If is a further advantage of some aspects of the invention that different users may see files organized in a different fashion, and that a given user is able to see the files organized in different ways.","It is yet another advantage of some aspects of the invention that a user can quickly determine what information is contained in a repository of files in a given context.","It is still a further advantage of some aspects of the invention that functions of internet search engines and distributed resources sharing services are combined and enhanced in a presentation that is convenient to a user seeking to locate information.","These and other advantages of the present invention are attained by a file system, which in a preferred embodiment exploits attributes encoded in a XML document. The file system presents a dynamic directory structure to the user, and breaks the conventional tight linkage between sets of files and the physical directory structure, thus allowing different users to see files organized in a different fashion. The dynamic structure is based upon content, which is extracted according to attributes defined by the XML structure. In accordance with the invention, the information from different sources is actually fused together in the same location. Thus, a user is able to locate all the files he had authored in a single directory rather than in multiple physically distributed directories, possibly as many as one directory per data source.","In a preferred embodiment of the invention, a XML-aware file system (XMLFS) combines the interface of a conventional file system with the organizational power of information retrieval to provide a repository for XML documents. It provides a solution for organizing, searching and browsing collections of XML documents. The semistructured nature of documents that comply with the XML standard implies that XML documents readily include metadata. Because of its popularity, XML appears to be an ideal format for innovation that results in sensibly ordering an ever-growing amount of information.","To the user, the XML-aware file system appears to be a completely conventional standard file system, and it supports any existing application that employs a standard file system applications programming interface. In addition, in some embodiments, since the XML-aware file system is built upon an existing file system, it can exploit existing support facilities, for example backup facilities.","In an important departure from the view presented by traditional hierarchical file systems, instead of showing files organized in a static directory structure, the XML-aware file system shows files organized in a dynamic hierarchy which is constructed on-the-fly. The user of the XML-aware file system is informed by the directory path as to what content is relevant at a particular instance in time. A directory path in the XML-aware file system is a sequence of attributes and values, and the contents of a directory are all of the XML documents that have the attributes and values named in the path. In other words, a directory path in the XML-aware file system reflects a query for a set of documents matching a set of constraints. As the path is being incrementally constructed, the user of the file system browses through a set of documents that match a partial query.","One aspect of the invention enables extraction of information in a federated repository composed of many different sources in disparate formats, each having its own directory structure. Navigation through the repository is accomplished in an intuitive and unified manner by providing a \u201cfile system union\u201d. The file system union is a taxonomy union of all distinct taxonomies residing on separate repositories, either on one machine, or distributed among many machines. The file system union is achieved without prearranged categorization of the available information, and without a priori knowledge of the kind of resources that may be encountered in the repository, or their content. Furthermore, no knowledge is presumed as to the kinds of queries, which will be made against the information in the federated repository.","Multiple instances of a XMLFS-like system are connected in a distributed fashion. Each individual instance or client maintains an index of the information that it holds locally. Upon start up, the local instance will register itself in a central register, which serves as the combined registry for the distributed system. Many different distributed indexing architectures are supported in this manner. When a document is located on one of the instances, it is brought to the client via a standard NFS protocol, which is supported by all XMLFS instances. Whenever an instance ceases its operation, it deletes itself from the central register. In case of a crash rather than a clean shutdown of one of the instances, the failed instance will be deleted the next time another instance attempts to connect to it.","In one aspect of the invention, inverted indices are prepared for each data repository, and the different individual repository indices are merged, physically or logically, into a higher level, multidimensional index. Unlike the above-noted AFS system of side-by-side presentation and sharing, elements in the structure representing identical entries are actually fused in the merged index. The merged index supports a display in response to a query of a unified intuitive structure that enables rapid location of needed information, without foreknowledge of a document identity or even a precise specification of the subject matter being sought. A display of query results presents an indication of what information is available in a region or context in which interest has been expressed.","The invention provides a computer implemented method of information retrieval, including the steps of retrieving structural information of memorized XML documents according to a document type declaration that corresponds to each of the documents, retrieving elements of the documents, attributes and values of the elements. The method further includes generating a multilevel inverted index from the structural information, the elements, the attributes and the values, and accepting a specification from a user that has members comprising at least one of the elements, the attributes or the values. The method further includes extracting data from the index responsive to the specification, wherein the data complies with at least one of the members. The method further includes displaying virtual directory paths of corresponding ones of the documents, wherein the directory paths each comprise a sequence of the members, and wherein contents of directories that are identified in the directory paths comprise selected ones of the documents possessing the specification.","According to an aspect of the method, the index includes a structural section that has postings of the structural information, and a words section that has postings of the values, wherein the values are words.","One aspect of the method includes arranging the directory paths in a hierarchy that is constructed in conformance with the specification. Arranging can be accomplished by extracting a document identifier from one of the postings of the values, extracting an offset of a context from the one of the postings of the values, and extracting an entry length of the context from the one of the postings of the values.","According to one aspect of the method, the documents are written in a markup language.","According to still another aspect of the method, the documents are XML documents.","An additional aspect of the method includes noting changes in a composition of a repository of the documents, and updating the index responsive to the changes.","According to another aspect of the method, the specification includes a partial query and a complete query.","According to yet another aspect of the method, a portion of the specification is stated as a path name by the user.","The invention provides a computer software product, including a computer-readable medium in which computer program instructions are stored, which instructions, when read by a computer, cause the computer to perform the steps of retrieving structural information of memorized documents according to a document type declaration that corresponds to each of the documents, retrieving elements, attributes and values of the elements, generating a multilevel inverted index from the structural information, the elements, the attributes and the values, and accepting a specification from a user that comprises at least one of the elements, the attributes and the values. Responsive to the specification the computer further performs the steps of extracting data from the index, associating the data with corresponding ones of the documents, and displaying the corresponding ones of the documents as virtual directory paths, wherein the directory paths each comprise a sequence of elements, the attributes and the values, and wherein contents of directories that are identified in the directory paths comprise selected ones of the documents possessing the specification.","According to an aspect of the computer software product, the index includes a structural section that has postings of the structural information, and a words section that has postings of the values, wherein the values are words.","An additional aspect of the computer software product includes arranging the directory paths in a hierarchy that is constructed in conformance with the specification. Arranging the directory paths can include extracting a document identifier from one of the postings of the values, extracting an offset of a context from the one of the postings of the values, and extracting an entry length of the context from the one of the postings of the values.","According to one aspect of the computer software product, the documents are written in a markup language.","According to another aspect of the computer software product, the documents are XML documents.","A further aspect of the computer software product includes noting changes in a composition of a repository of the documents, and updating the index responsive to the changes.","According to yet another aspect of the computer software product, the specification includes a partial query and a complete query.","According to still another aspect of the computer software product, the specification is stated as a path name by the user.","According to one aspect of the computer software product, the specification is issued via a file system applications programming interface.","According to another aspect of the computer software product, the instructions define a file system engine that issues calls to an operating system.","The invention provides a computer implemented information retrieval system for presenting a semantically dependent directory structure of XML files to a user, including a file system engine that receives a file request via a file system application programming interface and issues file system calls to an operating system, wherein the file request specifies a file content of memorized files. The system also includes a XML parser linked to the file system engine that retrieves structural information of XML documents, the XML parser further retrieving at least one of elements, attributes and respective values thereof from the XML documents. The system also includes an indexer linked to the XML parser for constructing an inverted index of the elements, the attributes and the respective values thereof, wherein responsive to the file request, the file system engine retrieves postings of the inverted index that satisfy requirements of the file request, and returns directory paths to the file system application programming interface of selected ones of the XML documents corresponding to the postings.","According to an aspect of the information retrieval system, the inverted index includes a structural section that has postings of the structural information, and a words section that has postings of words of the XML documents.","According to yet another aspect of the information retrieval system, the postings of the structural information and the postings of words comprise a document identifier of one of the XML documents, an offset of a context in the one XML document, and an entry length in the context of the one XML document.","Still another aspect of the information retrieval system includes a XML analyzer for updating the inverted index, wherein the XML analyzer analyzes additions to the memorized files.","According to an additional aspect of the information retrieval system, the XML parser retrieves the structural information from document type declarations of the XML documents.","According to one aspect of the information retrieval system, the file request includes a partial query and a complete query.","According to another aspect of the information retrieval system, a portion of the file request is a path name.","According to a further aspect of the information retrieval system, the repository of the XML documents can be a networked file system.","The invention provides a computer implemented information retrieval system for presenting a semantically dependent directory structure of document files to a user, wherein documents of the document files are written in a markup language, including a file system engine that receives a file request via a file system application programming interface and issues file system calls to an operating system, wherein the file request specifies a file content of memorized files. The system includes a parser of the markup language, linked to the file system engine, that retrieves structural information of the documents, the parser further retrieving at least one of elements, attributes and respective values thereof from the documents. The system includes an indexer, linked to the parser, for constructing an inverted index of the elements and the attributes and the respective values thereof, wherein responsive to the file request, the file system engine retrieves postings of the inverted index that satisfy requirements of the file request, and returns directory paths to the file system application programming interface of selected ones of the documents corresponding to the postings.","According to an aspect of the information retrieval system, the inverted index includes a structural section that has postings of the structural information, and a words section that has postings of words of the documents.","According to one aspect of the information retrieval system, the postings of the structural information and the postings of words include a document identifier of one of the documents, an offset of a context in the one document, and an entry length of the context in the one document.","Another aspect of the information retrieval system includes an analyzer for updating the inverted index, wherein the analyzer analyzes additions to the memorized files.","According to a further aspect of the information retrieval system, the parser retrieves the structural information from document type declarations of the documents.","According to yet another aspect of the information retrieval system, the file request includes a partial query and a complete query.","According to still another aspect of the information retrieval system, a portion of the file request is a path name.","According to an additional aspect of the information retrieval system, a repository of the documents can be a networked file system.","The invention provides a method of information retrieval from a federated repository. For each data source in the federated repository, the method includes generating an inverted repository index in a common format to define a plurality of repository indices. The method further includes merging the repository indices into a master index, wherein semantically common elements of the repository indices are fused into a single element, accepting a query for information contained in the federated repository. Responsive to the query, the method further includes consulting the master index to identify documents of the federated repository having characteristics semantically consistent with the query, and displaying virtual directory paths of the documents that are organized according to semantics of the documents.","In an aspect of the method merging is performed by merging different ones of the repository indices into a plurality of secondary merged indices, and merging the secondary merged indices into the master index.","According to a further aspect of the method, an identification of the documents of the federated repository includes a data source of origin, and an identification of one of the repository indices.","Yet another aspect of the method includes dynamically adding new repository indices and deleting current repository indices that respectively become available and unavailable in the federated repository.","In still another aspect of the method, consulting the master index includes simultaneously consulting different ones of the repository indices that are merged therein.","In an additional aspect of the method generating the repository index in the common format is performed using a XML parser.","The invention provides a method of information retrieval from a federated repository. For each of a plurality of data sources in the federated repository, an inverted repository index is generated in a common format. The method further includes accepting a query in a query manager for information contained in the federated repository to define a plurality of repository indices, distributing the query to the repository indices. Responsive to the query, the method further includes consulting each of the repository indices to develop indications of documents of one of the data sources associated therewith that satisfy the query, returning the indications from the repository indices to the query manager, and merging the indications into a unitary response to the query that includes virtual directory paths of the documents that are organized according to semantics of the documents.","According to one aspect of the method, an identification of the documents of the federated repository includes one of the data sources, and an identification of one of the repository indices.","Another aspect of the method includes dynamically adding new repository indices and deleting current repository indices that respectively become available and unavailable in the federated repository.","In a further aspect of the method generating the repository index in the common format is performed using an XML parser.","The invention provides a computer software product, including a computer-readable medium in which computer program instructions are stored, which instructions, when read by a computer, cause the computer to perform a method of information retrieval from a federated repository, including for each data source in the federated repository generating an inverted repository index in a common format, merging each the inverted repository index into a multidimensional master index, wherein semantically common elements of each the inverted repository index are fused into a single element in the master index, accepting a query for information contained in the federated repository. Responsive to the query, the method includes consulting the master index to identify documents of the federated repository having characteristics semantically consistent with the query and displaying virtual directory paths of the documents that are organized according to semantics of the documents.","The invention provides an information retrieval system for accessing a federated repository, wherein a master server linked to a plurality of client servers. Each of the client servers has a data source of the federated repository stored therein. The client servers have access to a first program for generating an inverted repository index of the data source in a predetermined format. The master server has a second program for merging the repository indices of the client servers into a master index, wherein semantically common elements of the repository indices are fused into a single element in the master index. The master server has a third program for accepting a query for information contained in the federated repository, and responsive to the query, consulting the master index to identify documents of the federated repository having characteristics semantically consistent with the query, and providing a display of virtual directory paths of the documents that are organized according to semantics of the documents.","According to an aspect of the information retrieval system, an identification of the documents of the federated repository includes its associated data source.","According to another aspect of the information retrieval system, the identification of the documents further includes an identification of one of the repository indices.","According to one aspect of the information retrieval system, the second program of the master server is adapted for dynamically adding new repository indices and deleting current repository indices that respectively become available and unavailable in the federated repository.","The invention provides an information retrieval system for accessing a federated repository, including a plurality of master servers, each linked to a plurality of client servers. Each of the client servers has a data source of the federated repository stored therein. The client servers have access to a first program for generating an inverted repository index of their respective data sources in a predetermined format. The master servers each have a second program for merging the repository indices of the client servers into a master index, wherein semantically common elements of the repository indices are fused into a single element in the master index. A query server is linked to the master servers. The query server has a third program for accepting a query for information contained in the federated repository. The query server has a fourth program for distributing the query to the master servers and for instructing the master servers to consult their respective master indices to identify documents of the federated repository having characteristics semantically consistent with the query. The query server has a fifth program for receiving from the master servers result reports, including virtual directory paths of the documents that are organized according to semantics of the documents, and for organizing the reports into a common display.","In the following description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances well-known circuits, control logic, and the details of computer program instructions for conventional algorithms and processes have not been shown in detail in order not to unnecessarily obscure the present invention. Software programming code, which embodies aspects of the present invention, is typically maintained in permanent storage, such as a computer readable medium. In a client\/server environment, such software programming code may be stored on a client or a server. The software programming code may be embodied on any of a variety of known media for use with a data processing system, such as a diskette, hard drive, or CD-ROM. The code may be distributed on such media, or may be distributed to users from the memory or storage of one computer system over a network of some type to other computer systems for use by users of such other systems. The techniques and methods for embodying software program code on physical media and distributing software code via networks are well known and will not be further discussed herein.","While the teachings of the invention are disclosed with reference to a XML-aware file system, the invention is not limited to XML documents. It can be applied to documents written in other markup languages. The teachings herein can be applied to any sort of database-mail combination, for example Lotus Notes\u00ae, and not necessarily in a file system. The file system is the currently preferred embodiment, as it is universally familiar and is known to be an interoperable repository for storing documents. Almost all applications work with a file system interface. In addition, there is a large set of support facilities for file systems, e.g., backup, and security utilities. Moreover, there are numerous applications written for the file system applications programming interface. Those applications can operate with the present invention without any modifications whatsoever.","Turning now to the drawings, reference is made to , which displays a high level block diagram of a XML-aware file system, which is constructed and operative in accordance with a preferred embodiment of the invention. An arrangement  allows a computer user to access stored data. In the arrangement , there is a basic underlying physical file structure , which is conventional. The file structure  can be realized by a physical file system. A XML-aware file system  forms a functional layer between the file structure  and the file system applications programming interface  that is seen by a user application . Shielded by the file system applications programming interface , the XML-aware file system  presents itself to the outside world in a completely standard fashion.","The XML-aware file system  has several components that cooperate to provide a file system applications programming interface for accessing files in a context-sensitive manner. These components include an indexer , a XML analyzer , and a file system engine .","The indexer  produces a multilevel inverted index that can support several kinds of queries. Queries that are supported include supplying all valid values in a given context, including child elements, attributes, and actual values from the files stored in the repository. An example of this type of query is, \u201cSupply all possible values of the context \/profile\/name\u201d. In other words, supply all child elements and attributes of the element \u201cname\u201d, and all the values of this element from the files themselves.","Another supported query is a request to supply all files which have a particular value in a given context. An example is the query, \u201cSupply all the files which have the word INC in the context \/profile\/name\u201d.","The conjunction of several queries is supported, for example the query \u201c\/profile\/name\/INC\/and\/profile\/ticker\u201d. This query will supply all valid values in the context \/profile\/ticker from all the files which have the word INC in their \/profile\/name element.","The XML analyzer  is responsible for updating the index created by the indexer  when newer files appear. The file system engine  implements basic file system functions, and may do this by building upon an existing file system, for example by issuing basic file system calls to the operating system. A main difference of the file system engine , as compared with a conventional file system engine, is the consultation of the indexer  when information about the directory structure is required. This occurs, for example, when reading, or traversing directories. The file system engine  receives instructions from the file system applications programming interface . It then passes a directory path to the indexer , which interprets the path as a query. The indexer  returns information which enables the file system engine  to respond to the file system applications programming interface  as if a conventional directory were accessed.","The XML-aware file system  adapts the concept of semantic file systems, which is proposed in the above noted document, , and uses it in combination with information retrieval techniques in the context of XML documents. Semantic file systems attempt to gather underlying semantics of the files, and present the files to the users in virtual directories that are organized according to the file semantics in order to ease navigation. The XML-aware file system  exploits the file content to derive metadata, which is, needed in order to automatically and semantically organize the files. In order to derive the metadata, each file that is added to the file structure  has to be parsed in order to retrieve meaningful information that makes the search functions and browse functions of a XML document repository possible. The XML-aware file system  uses a XML-parser , which is associated with the XML analyzer . The XML-parser  retrieves the underlying structural information of a XML document, as well as individual elements and attributes, together with their respective values. A conventional IBM parser, XML4J, is suitable. This structural information, which is an integral part of the document according to well-known XML specifications, is used by the indexer  to construct an inverted index that supports automatic meaningful organization of documents by content. This process is completely automatic and transparent to the user.","In the currently preferred embodiment, the components of the XML-aware file system  are written in Java. However, many programming languages could be equally applied. A prototype system currently operates under the Microsoft Windows\u00ae Operating System.","Reference is now made to , which illustrates aspects of the indexer  in further detail. The description of  is to be read in conjunction with . The indexer  operates on a multilevel inverted index . The index  consists of two main portions, a structural section , and a words section . The structural section  is compliant with each underlying structure of each document  being indexed, as dictated by its respective DTD , and the words section  keeps track of all the words which appear as values in each of the documents . The structural section  maintains a list of postings  for each element of the document , and the words section  maintains a list of postings . The postings ,  include a file identification, offset and length, and are accessed from the index  when preparing responses to relevant queries.","A new entry in the structural section  is created only once for each different DTD encountered during the essentially using queries to indicate what content is relevant at each point in time. A directory path is a sequence of attributes, names and values, and the contents of a directory comprise all the XML documents, which have the attributes and values, named in the path. There are two types of queries: partial and complete. A partial query is invoked in order to retrieve all possible child elements that are placed in various levels of a hierarchical virtual directory. The partial query also retrieves attributes, and actual values in the current context from the documents stored in the repository. A complete query retrieves all the documents in which a word appears within a given context. In other words, a directory path reflects a query for a set of documents matching a set of constraints. As the path is being incrementally constructed, the user of the file system browses through a set of documents that match a partial query. The user can search or browse the files by encoding queries that result in the generation of paths to the files in the repository. For example, a query may have the form, \u201c\/xmlfs\/attribute\/value\/ and \/attribute\/value\u201d. This query produces a virtual directory that presents all the documents satisfying the condition \u201cattribute=value and attribute=value\u201d. In another example, the path \u201c\/xmlfs\/attribute\/value\/ and \/attribute\u201d corresponds to a partial query that produces a virtual directory that presents documents having any possible value of the context attribute from the files, satisfying the condition \u201cattribute=value\u201d.","Reference is now made to , which presents a flow chart that illustrates query processing, and is helpful in understanding the index  and its components. The description of  is to be read in conjunction with . The encoding scheme for the queries indexing process. When other documents having the same DTD are presented to the indexer , they merely result in an update of existing entries and postings within the relevant portion of the structural section  and the accompanying actual values in the words section .","Reference is now made to , which is a composite diagram that illustrates a simple example of a DTD and a portion of its corresponding structure index. The description of  is to be read in conjunction with . The DTD  is shown on the upper portion of . The structure index  is indicated on the lower portion of the figure. In the structure index , elements are indicated by rectangles, and attributes are represented by ellipses. Postings and values lists are shown representatively by the list  and the list  respectively. Postings and values lists are associated with each element and attribute in the structure index .","Reference is now made to , which illustrates an example of the index in the words section  in further detail. The description of  is to be read in conjunction with . The bracketed list  and the bracketed list  are a portion of a words index that represents the words g and g. In a response to a file addition that includes the words g and g, data extracted from the index that includes the lists ,  would flow to the postings , , representing indexing entries associated with the words g and g respectively.","Using the components shown in  and , documents are organized in a dynamic hierarchy, which is constructed on-the-fly. By presenting a dynamic directory structure, the traditional tight coupling between the sets of files and the directory structure is broken, thus allowing different users to see documents organized in a different fashion. Users establish the directory path follows a rule set, which allows the file system engine  to recognize which type of query is being posed. A distinction is needed between a call for values and a complete query of a word within a given context.","In initial step , a query is stated by the user, for example, \u201c\/xmlfs\/attribute\/value\/ and \/attribute\u201d. The syntax of the example is a path name. The indexer , operating on the index , must interpret the path name, and translate it into a query. In general, all items preceding the last \u201cand\u201d instance of a query comprise the initial portion of the query. The initial portion comprises one or more complete subqueries. The items following the last \u201cand\u201d instance, comprise the terminal portion of the path name. In any particular query, the terminal portion needs further analysis, since it can be a partial query or a complete query. If the terminal portion is already known in the index , it is interpreted as a request for values of the particular element or attribute. Otherwise, the terminal portion is interpreted as a complete subquery, in which the last element is a word being sought in the context suggested by the initial portion of the last subquery. The term \u201cword\u201d, as used herein, is to be broadly construed. For example, a word could be a suitably demarcated alphanumeric string. Other data types could be encompassed within the term \u201cword\u201d as well, for example date fields, or various types of numeric fields. Next complete subqueries are performed. At step , all the postings  of the context attribute are retrieved from the structure index . Each of the postings  consists of a trio: a XML document identifier, the offset of the context attributed within the file relating to the XML document, and the entry length of the context. At step  a subset of the postings  that relate to the value value are extracted from the words section . For convenience of presentation, step  and step  are shown in sequence. However in practice both the postings ,  may be processed in parallel, either as separate threads on a uniprocessor, or using a multiprocessor.","Next, an evaluation is made of the files that are referenced in the subsets of the postings ,  that were retrieved in step  and step  respectively. At step , a file is selected from the subset of the postings . At step  a search is made in the subset of the postings  in order to determine if any of them refer to the file that was selected in step . This is done by evaluating the trio that comprises each of the postings , . If, for the XML identifier matching the file that was selected in step , there is at least one instance in which the offset and length entries for the attribute attribute in a member of the subset of the postings  match corresponding entries in the subset of the postings , then it is determined that the value value appears within the context attribute. This determination is made at decision step .","If, at decision step , it was determined that the value value appears within the context attribute, the file is added to the results set at step . Otherwise control proceeds directly to decision step .","All the members of the subset of the postings  are processed in the same manner. At decision step , a determination is made whether more members of the subset of the postings  remain to be processed. If so, then control returns to step .","If no more members of the subset of the postings  remain, then at decision step  it is determined if the query contains more complete subqueries. If so then control returns to initial step  to process another query. Otherwise, at step  a join operation is performed on the results set obtained in each of the subqueries. If there was only one subquery, then the join operation is omitted. Upon completion of final step , there is a list of files, which satisfy all subqueries in the initial portion of the query. In some applications, it may be desirable to process the subqueries in parallel.","Attention is now directed to the terminal portion of the query. In this example, the terminal portion is a partial query, which is a request for values. This is realized in step  by extracting another subset of postings  in which each member of the subset has a values pointer deriving from the attribute entry attribute. Each pointer points to a word of the words section  and the file in which it appears.","All the members of the subset extracted in step  are next examined. At step , a member is selected. Then at decision step  it is determined if the word pointed to by the values pointer deriving from the attribute entry attribute corresponds to a file from the results set obtained in step . If so, then at step  the value corresponding to the member is added to a set of values to be presented to the user. Otherwise control proceeds to decision step .","At decision step  it is determined if there are more members of the subset extracted in step  to be evaluated. If so control returns to step . Otherwise, at final step  the set of documents developed in step  is presented to the user.","Reference is now made to , which represents a computer monitor screen display. The description of  is to be read in conjunction with . The arrangement  is employed in the following example, which excerpts a session in which a user desires to identify all the companies that are listed on the stock exchange mechanism, NASDAQ, using documents that are stored in the file structure .","The screen display  represents the relevant portion of the output of the well-known Windows Explorer\u00ae application of the Microsoft Windows\u00ae operating system. The entry  of the left panel  is a NFS volume that corresponds to the XML repository. The right panel  is an expansion of the entry , and displays a plurality of file folders . The file folders  are roots of a virtual hierarchical tree containing the document type declarations of the files that are currently represented in the file structure . A particular folder , entitled \u201cprofile\u201d is one of these roots.","Reference is now made to , which represents a computer monitor screen display. The description of  is to be read in conjunction with . The left panel  of the display  shows the first level of the expansion of the entry , including the folder . The right panel  of the display  shows a plurality of folders , which are the expansion of the folder . The folder  includes the element ticker, represented by the folder . The display  displays an expanded portion of the document type declarations, which is one level deeper in the hierarchy than the screen display . The folder  has no values itself, but consists of a plurality of child elements.","Reference is now made to , which represents a computer monitor screen display. The description of  is to be read in conjunction with  and . The left panel  of the display  now shows an expansion of the folder , including the element ticker represented by the folder . The right panel  of the display  shows a plurality of folders , which are the expansion of the folder , including the element Nasdaq, represented by the folder . The display  thus presents the result of expanding the element ticker. The folders  contain files having actual values of the element \/profile\/ticker from the files stored in the repository. The result that is presented to the user is derived from all values subsumed below the element ticker satisfying the query.","Reference is now made to , which represents a computer monitor screen display. The description of  is to be read in conjunction with , , and . The left panel  of the display  shows an expansion of the folder , including the folder . The right panel  of the display  shows a plurality of documents , which are the expansion of the folder , including the document . The display  thus presents the result of expanding the element Nasdaq. In the right panel , the user is presented with all the files which have the word nasdaq in the context \/profile\/ticker.","Reference is now made to , which represents a computer monitor screen display. The description of  is to be read in conjunction with , , , and . The display  comprises a portion of the text of the document , and includes the string , having the value Nasdaq. The display  is a particular example of a document satisfying the user's query, which can be quickly accessed using the Windows Explorer application of the Microsoft Windows operating system.","In an alternate embodiment of the invention, the XML-aware file system disclosed above is modified in order to permit the extraction of information from a federated repository including many different sources having disparate formats, each source installed in a client having its own directory structure. Navigation through the repository is accomplished in an intuitive and unified manner by providing a \u201cfile system union\u201d. The file system union is a taxonomy union of all distinct taxonomies residing on separate repositories, either on one machine, or distributed among many machines.","The file system union is achieved by merging a plurality of repository indices. This is done in a deep fashion in which elements in the index structure that represent identical entries are fused, rather than being displayed side-by-side.","Each participating site develops a local semantic index, also referred to herein as a repository index, as disclosed in the discussion of the first embodiment. This local index is built by each client of the distributed system. Each such index supplies all the needed information regarding the files on that specific site. These individual indices are then unified in order to enable global navigation through all available information. The combined index changes dynamically, at any time only represents information originating in sources that are currently accessible.","In order to understand how to create a unified taxonomy that supports browsing in heterogeneous data sources, it is necessary to appreciate where such a shared taxonomy originates. Two separate cases can be distinguished.","In a first and simpler case, related documents adhere to the same metamodel. For example, related XML documents that reside in separate repositories may adhere to the same document type definition. The navigation paradigm according to the invention relies on the documents' structure. As the structure of each document is similar, documents from different repositories seamlessly merge into the same virtual hierarchical structure, and any of the architectures disclosed herein readily support a fused common directory structure from different sources.","In a second, more complex case, related documents have different structures. For example, related XML documents that reside in separate repositories have different document type definitions. The second case can present itself in different ways:","In a first presentation of the second case, different names or different structures in different document type definitions have a common semantic meaning. For example, one structure can contain a semantic element named \u2018author\u2019 while another structure refers to this element as \u2018writer\u2019.","In a second presentation of the second case, the same element name has a different semantic meaning in different structures. This represents a more complicated situation, which requires a mapping in order to achieve a meaningful presentation to the end-user. Such a mapping can be constructed using existing XML transformation creation tools. The original structures are converted into new ones in which semantically similar tags will reside together. In order to accomplish the mapping, the specific data sources and their respective formats must be known in advance, and corresponding analysis on the structure of the different formats is also required. Thus, in one data source, documents may have a XML format, while in another source, they may have an entirely different format and not follow XML conventions. It is assumed that the documents in the data sources are at least semi-structured documents. A transformation, either a transformation according to the well-known Xpath language for addressing parts of a XML document, or a variant of a Xpath transformation, is performed on the data sources in order to unify them semantically. Other methods of transforming documents from a non-XML source to a structure similar to XML are known, and can be used to prepare indices. The original documents themselves are stored without modification, but for the purpose of indexing, both transformed documents and original documents may be used.","It is believed that the first case will become common, because much of the power of XML relies on the use of identical structures. It is to be expected that each industry segment will converge around a single set of document type definitions, which will be used uniformly. Mapping will not often be required, as it is anticipated that a relatively small set of document type definitions, will be encountered. A mapping itself only needs to be created on a server once per structure.","Fusion of two indices can be appreciated initially with reference to , which is a representation of information taken from two different directory structures based on different file types, in which attributes and values are represented as hierarchical trees , . Both of the hierarchical trees ,  have a common root element, indicated by an element patient  and an element patient . Different reference numerals are shown in order to emphasize that while the attribute is common, the hierarchical trees ,  represent two different individuals. The next lower layers ,  share a common element Name , but an element phone  and an element diagnosis  of the layer  differ from an element address  and an element symptoms  of the corresponding layer . The hierarchical tree  has a lowermost layer  that is lacking in the hierarchical tree .","Reference is now made to , which illustrates a hierarchical tree  representing a combination of the hierarchical trees ,  () achieved by conventional distributed file systems. The hierarchical tree  has a root element  which links the hierarchical trees , , both of which retain their original structures, and are identifiable as branches in the hierarchical tree .","Reference is now made to , which illustrates a hierarchical tree  that is a combination of the hierarchical trees ,  in accordance with the invention, using the techniques disclosed in the discussion of the first embodiment herein. The original hierarchical trees ,  are no longer distinguishable, and elements having attributes common to the two trees are fused into a new element having the same attribute. For example, the element patient  and the element patient  no longer exist. Instead, an element patient  is present, and is an index entry pointing to information for both the element patient  and the element patient .","Master Index.","Continuing to refer to , the fused index indicated by the hierarchical tree  is prepared by receiving a plurality of individual indices for different data sources. An indexing technique is then applied to the plurality of individual indices to create a multidimensional or multilevel master index, which is a logical meta-index representing a merger of the individual indices. The indexing techniques disclosed with respect to the first embodiment are suitable for the preparation of the master index. Referring again to , it is necessary to modify the document identification element of the postings ,  to indicate the data source or computer of origin for each indexed document, and to include the index name, which is typically a file system mount point. Preferably, a master index is organized as a tree structure, which is a forest of indices. Dynamic additions and deletions are accomplished using standard tree manipulation algorithms. Alternatively, the master index may be constructed as a sorted list.","Upon arrival of a new index at the central server, it is first determined whether that specific index already exists in the master index. In case it does, the process is treated as an index refresh operation. In a first state, the old version of individual index is deleted. In a second stage, a new child entry is created under the meta-index root, and the newly received index is associated with the newly created child. Queries are processed by inspecting each individual index of the master index, a task that can be done in parallel, followed by merging the results based on designated ranking characteristics.","Deletion of a specific index from the master index is performed simply by erasing the link to the individual index from the central index's root. Such a deletion can stem from a client's request to delete its index or an indication from another component in the federation that the server holding the index in question is no longer responding.","A spectrum of architectures based on the local indexes is possible. Reference is now made to , which is a block diagram of an index architecture at one end of the spectrum in accordance with a preferred embodiment of the invention. A hierarchy  forms a tree structure. A single master index  may be stored in a central server , which maintains an index for the complete collection of files. A system of local indices , , , , maintained on the same or different servers, is currently accessible to the master index . The local indices , , ,  are maintained by respective clients , , , , which hold data sources of the federated repository. Links between objects, indicated by double arrows, have the notations \u201cquery\u201d and \u201cindex\u201d associated therewith, indicating that queries and indices are communicated on the respective links. The links are typically links across a data network, for example the Internet.","Each of the clients , , ,  in the federated repository generates a current version of its respective one of the local indices , , , , and sends it to the central server , which then merges the individual local indices , , ,  into the master index . The central server , functioning as a query manager, is then capable of responding to queries from an end-user . The queries are global within the local indices , , , . Updates of the local indices , , ,  are required to be transferred to the central server  in order to maintain currency of the master index . This architecture is similar to Napster's model.","Reference is now made to , which is a block diagram of an index architecture representing the other end of the spectrum in accordance with an alternate embodiment of the invention. The symbols in  have the same meaning as in , and like elements are given like reference numerals. In this architecture, a hierarchy  forms a tree structure similar to the hierarchy  (). But now, the master index  has been replaced by a central query manager , which distributes queries from the end-user  to the clients , , , . In this architecture, the local indices , , ,  are maintained as in the hierarchy  (), but the local indices are not communicated to the query manager . Instead each of the clients , , ,  receives a copy of the query of the end-user  via the query manager , and consults its respective one of the local indices , , ,  in order to respond to the query. The results are returned to the query manager . The query manager  then merges the individual query results and prepares a consolidated display for the end-user , using the same techniques for displaying information as are disclosed above with respect to the first embodiment. While the clients , , ,  are not burdened with responsibility for transmitting updated versions of their respective local indices, they are still responsible for registering and deregistering their availability with the query manager .","Hybrid versions of the two above-disclosed architectures can be used. Reference is now made to , which is a block diagram of a hierarchy  in accordance with an alternate embodiment of the invention. The description of  should be read in conjunction with  and , in which like elements are given like reference numerals and like symbols have the like meanings. The hierarchy  includes the query manager  and a layer of subordinate index managers , , , . Only one level of index managers is shown in ; however, an arbitrary number of levels of subordinate index managers may be provided as required. Each of the index managers , , ,  is responsible for a subset of clients in the federated repository. Thus, the index manager  collects and merges local indices , , for which it is responsible. It will be noted that queries and results are communicated on the links connecting the query manager  and the index managers , , , . Indices are communicated on the links connecting the index managers , , ,  and the local indices, for example, the links connecting the index manager  and the local indices , .","Queries are sent from the end-user  to the query manager , which distributes the queries to the index managers , , , . Query responses are prepared by the index managers , , , , and are then submitted to the next higher level, which in  is the query manager . The query manager  then merges the results.","In all variants of the architectures represented by , , and , queries are not required to be passed through the query manager . Knowledgeable users may alternatively direct queries to lower levels of the hierarchy, either to the index managers, or directly to the clients themselves.","In preparing a master index, or a merged response to a query, in the case of a distributed indexing architecture, duplicate documents may be encountered in different data sources of the federated repository. This may be dealt with using any of several policies. For example, if a document appears in different indices, all the different occurrences may be returned to the user for him to choose whichever copy he favors. Alternatively, the duplicates may be all be indexed, and one of them marked as an active or principal replica. The system may employ an arbitration technique to determine which of several documents is to be treated as the principal replica for purposes of retrieval. Arbitration can be based on various performance factors, for example server response time, or bandwidth. In some circumstances, it may be possible to improve throughput by retrieving different portions of a duplicated document from different data sources.","If the files of the federated repository contain XML-encoded data, the attributes and values can be derived automatically from the files contents, as with XMLFS. Predefined filters can also be employed to extract the attributes and values from non-XML files, as suggested by the above-noted article, ","The master index is used to determine whether requested data exists, as well as for actually locating the data. Once a user locates an interesting file, it is transferred to him directly from the client on which it actually resides. This approach eliminates any intermediate servers or other mediators, which could constitute artificial barriers to information sharing between a content provider and the consumer. Migration of data sources is facilitated, since users do not connect directly to the physical location of the documents but receive them indirectly through the query manager or master index. Thus when a file system needs to be migrated from one server to another, only one master pointer, found in a central location in any of the architectures, needs to be changed.","Operation.","Reference is now made to , which is a flow chart illustrating a method of obtaining information from a federated repository according to an alternate embodiment of the invention. The steps of the method are shown in an exemplary order, but may be carried out in many different orders. Some steps may be conveniently performed in parallel. The process begins at initial step . Here one or more index managers and query managers are configured in a data network. The data network may comprise any of the hierarchical architectures disclosed with respect to , , or . Indeed, in some cases the hierarchy can be configured dynamically, in accordance with changing network conditions, such as load balancing requirements, variation in regional response times, and packet losses in various portions of the data network.","Clients within a federated repository are responsible to register themselves as being available to queries. This process begins by the preparation of updated local semantic indices by clients for their respective data sources. At step , each client prepares a local semantic index. The clients typically accomplish this independently. The client pool varies dynamically, and although step  is indicated as part of a sequence of steps, it will be understood that as the composition of the client pool changes, the various steps of  relating to the recognition and management of the client pool are also performed asynchronously.","Control proceeds to step , where each of the clients communicates a message to the next highest level of the hierarchy that was established at initial step  that it is on-line. The client pool is not predetermined. The number and hierarchical arrangement of index managers is flexible. Thus, a large client pool may require a relatively large number of index managers, and when a threshold is crossed, the index managers are automatically reorganized in a multilevel hierarchy. In step , during the client registration process, a determination is made whether each client is to be appointed as an index manager and at which hierarchical level. Links within the hierarchy of index managers are adjusted dynamically as the client pool grows or shrinks. Typically, the first few clients to join the pool are appointed as index managers, while latecomers are not accorded this responsibility.","When a new client registers or leaves the client pool the query manager  obtains the updated registration information and is responsible for adjusting hierarchy of clients and index managers accordingly","Next, at decision step , as part of the client registration process, a determination is made if the indices prepared by the clients at step , need to be communicated to an index manager at a higher level of the hierarchy that was established at initial step . In the cases of the architectures disclosed with reference to  and  there is a higher-level index manager. In the case of the architecture disclosed with reference to , the clients themselves receive copies of queries, and consultation of the indices is performed at the lowest level of the hierarchy.","If the determination at decision step  is negative, then control proceeds to step , which is disclosed below.","If the determination at decision step  is affirmative, then control proceeds to step , where a higher-level index manager receives a local index from a client.","Next, at decision step  a determination is made whether more indices need to be received by the index manager noted in step . If the determination at decision step  is affirmative, then control returns to step .","If the determination at decision step  is negative, then control proceeds to step , where all the indices received by a particular index manager in step  are merged. Control then returns to decision step .","It will be appreciated from a consideration of the hierarchy  () that the sequence of steps comprising decision step , step , decision step , and step  are performed iteratively within one level of the hierarchy. However, in a hierarchy in which two or more levels of index managers occur, then the sequence must be repeated for each level of index managers, in which case a subordinate index manager plays the role of the client. A recursive implementation of the sequence may be convenient in the case of a computer implementation of a multilevel hierarchy of index managers.","Step  is performed if the determination at decision step  is negative. The indices of the federated repository are now established, and management responsibilities for index management are assigned. A query is now received from a user.","As explained above, a query could avoid the index managers entirely, in which case decision step  and step , which are now disclosed, would be omitted. At decision step  a test is made to determine if the query received at step  needs to be distributed to a subordinate index manager. In the case of the architecture disclosed with respect to , if the recipient of the query is itself the master index manager, then no further distribution is necessary. In the case of the architecture disclosed with respect to , the recipient of the query is a query manager. The clients themselves function as index managers, and the query needs to be distributed to each of them. In the case of architecture disclosed with respect to , regional index managers occur at a lower level of the hierarchy than the query manager. Each of them needs to receive a copy of the query.","If the determination at decision step  is affirmative, then control proceeds to step . The query is distributed to an index manager by the query manager. Control then returns to decision step .","If the determination at decision step  is negative, then control proceeds to step . Here a local index or a merged index is consulted by a client or by a higher-level index manager in regard to the query.","Next, at decision step  a determination is made whether more local indices or merged indices remain to be consulted. If the determination at decision step  is affirmative, then control returns to step .","If the determination at decision step  is negative, then control proceeds to step . A query result is reported from each index manager to the element from which the query was received in step .","Control now proceeds to decision step  where it is determined if more query results are expected from index managers lower in the hierarchy. Where the recipient of the query is itself the master index manager () this is never the case.","If the determination at decision step  is negative, then control proceeds to step , which is disclosed below.","If the determination at decision step  is affirmative, then control proceeds to decision step , where it is determined if a predetermined time interval has elapsed. This time interval is established in order that the operation of the system not be delayed if one or more clients or index managers are slow to respond or otherwise disabled.","If the determination at decision step  is negative, then control returns to step .","If the determination at decision step  is affirmative, then control proceeds to step .","At step , results are merged if they have been received from more than one index manager in step . Where the recipient of the query is itself the master index manager (), it is not necessary to merge results.","Control now proceeds to final step . The final query result is sent to the end-user who submitted it, and the process ends.","Assume that Fred wants to share files f and f that have sets of <attribute, values> as shown in Listing 1. These files reside on a machine called Fred in directories called \/home\/fred\/public\/music\/beatles\/f, and \/home\/fred\/public\/music\/rock\/general\/f:",{"@attributes":{"id":"p-0179","num":"0178"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"f1: {<artist, \u201cbeatles\u201d>, <title, \u201crevolution\u201d>, <year, 1967>}"]},{"entry":[{},"f2: {<artist, \u201crolling stones\u201d>, <title, \u201csatisfaction\u201d>, <year, 1967>}."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"John has files j and j which reside on a machine called John in directories called d:\\john\\stuff\\songs\\j and d:\\john\\stuff\\songs\\j as shown in Listing 2.",{"@attributes":{"id":"p-0181","num":"0180"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"j1: {<artist, \u201cbeatles\u201d>, <title, \u201clove me do\u201d>, <year, 1962>}"},{"entry":"j2: {<artist, \u201ceric clapton\u201d>, <title, \u201ci shot the sheriff\u201d>, <year, 1967>}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"Mary has files m and m which reside on a machine called Mary in directories called: d:\\m and c:\\system32\\m as shown in Listing 3.",{"@attributes":{"id":"p-0183","num":"0182"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Listing 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"m1: {<artist, \u201cbeatles\u201d>, <\u201ctitle\u201d, \u201chelp\u201d>, <year, \u201c1967\u201d>}"]},{"entry":[{},"m2: {<artist, \u201ccrosby stills nash & young\u201d>, <title, \u201cdeja vu\u201d>,"]},{"entry":[{},"<year, 1967>}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Connecting all these files via a distributed sharing mechanism, which allows for browsing, requires navigation through a hierarchy created by another person. As noted above, the indexing technique according to the alternate embodiment creates an intuitive virtual structure of all the combined information that is navigable. Files are visible in all the possible places where they might reasonably be sought. Thus, a directory \u201c\/artist\/beatles\u201d lists the files f, j, m; a directory \u201c\/artist\/beatles\/and\/year\/1967\u201d narrows this list to the files f, m. Similarly, a directory \u201c\/year\/1967\u201d lists the files f, f, j, m and m.","The directories as presented in this example are seen as if they were conventionally displayed by a known file system (e.g., a NFS client). Applications or end-users are able to manipulate the files in the same manner as conventionally listed files. Thus, end-users can navigate using standard tools, such as Windows Explorer, copy files using the standard file manipulation commands of their particular operating system, or open the files using applications, such as word processors, or MP3 players.","A new information organization paradigm has herein been disclosed, which is semantic rather than physical. Documents are presented to the user, not according to their real physical path, but rather in a context sensitive manner, which attempts to present the user with the relevant information at each moment in time. Thus, an associative access to content is established. This solution to the problem of information management allows users to remain within a familiar working application environment, rather than requiring mastery and separate use of yet another information management tool. The user is provided with information, which is always organized according to his current needs. The organization of the information is dynamic, in that document updates are immediately integrated into the hierarchical views presented to the user.","While this invention has been explained with reference to the structure disclosed herein, it is not confined to the details set forth, and this application is intended to cover any modifications and changes as may come within the scope of the following claims."],"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENT","EXAMPLE 1","ALTERNATE EMBODIMENT","EXAMPLE 2"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["For a better understanding of these and other objects of the present invention, reference is made to the detailed description of the invention, by way of example, which is to be read in conjunction with the following drawings, wherein:",{"@attributes":{"id":"p-0084","num":"0083"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0087","num":"0086"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0088","num":"0087"},"figref":["FIGS. 5A\u20135B","FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0089","num":"0088"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0090","num":"0089"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0092","num":"0091"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0094","num":"0093"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 12","FIG. 11"]},{"@attributes":{"id":"p-0096","num":"0095"},"figref":["FIG. 13","FIG. 11"]},{"@attributes":{"id":"p-0097","num":"0096"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0098","num":"0097"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0099","num":"0098"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIG. 17A","FIG. 17B","FIG. 17"]}]},"DETDESC":[{},{}]}
