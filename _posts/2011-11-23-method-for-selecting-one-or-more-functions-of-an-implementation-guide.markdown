---
title: Method for selecting one or more functions of an implementation guide
abstract: A computer-implemented method for selecting one or more functions for display is provided. The selection may be performed via an implementation guide that is a hierarchy comprising nodes. A node may represent one function. The method may comprise retrieving a first list of switches in response to selection of a function, extracting one or more switches from the first list such that the extracted switches include function switches and/or conflict switches, determining whether each of the extracted switch is an active conflict switch and, if yes, adding the active conflict switch to a second list of switches. After removing all switches from the first list or having added all of them to the second list, the method processes the second list to determine which functions can be executed on the processor without conflicts and presenting a function GUI element representing a function determined to be executable without conflicts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08869069&OS=08869069&RS=08869069
owner: SAP SE
number: 08869069
owner_city: Walldorf
owner_country: DE
publication_date: 20111123
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS:","FIELD OF THE INVENTION","Background and Related Art","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is a continuation in part of U.S. application Ser. No. 12\/952,688, filed Nov. 23, 2010 (pending), and also claims priority to the European Patent Application No. 11 189 119.8., filed Nov. 15, 2011, the contents of both applications are incorporated herein by reference.","Enhancement packages are software packages used to provide updated computer application functionality and features to a user of a particular computer application, such as an enterprise resource management system or customer relationship management system.","Using current systems, a user can choose when to roll out a particular computer application function. For example, in an enhancement package that is used by a number of departments within an entity, a human resources department of the entity may activate computer application functions provided in the enhancement package immediately, while an accounting department of the entity may delay activation of accounting functionality until a later date, e.g., after the end of the fiscal year. The information technology (IT) administrator, for example, can perform the activation steps for the particular department.","Enhancement packages are provided to a customer, such as a manufacturing entity or services entity. A group of data structures identifying the functions and computer objects that provide the functions are typically delivered with the computer code. The computer code and the group of data structures may be installed on the entity's computer system. A portion of the data structures may arrange in a hierarchical fashion the numerous functions that are part of the computer application enhancement. The hierarchy may be configured in the commonly known trunk, branch, node, and leaf structure. The nodes in the hierarchy may have assigned computer objects, which may be assigned in particular to the leaf nodes of said data structure. Said computer objects comprise or are responsible for making available and executing a particular function. This particular data structure may be called an implementation guide. Some of the nodes of said implementation guide may be represented by GUI elements and displayed on a display device, e.g., a screen. A purpose of the implementation guide is to allow easy indication of the enhancement package functions currently selected and available for execution. The selection may be in particular performed by users such as an IT administrator who may select the computer application functions his employee requires. In order to maintain computer application configuration management integrity as enhancement packages are introduced, changes to the implementation guide should reflect only changes to a computer application function. The function selection may change the kind and sequence the corresponding computer objects are executed. The hierarchy, when presented in a graphical user interface, allows a user to see which computer objects are affected by the selection of a particular node or leaf within the hierarchy. For example, when a department of an entity may want to implement a new computer application function provided with the installed enhancement package, a function specific to the particular department may be selected.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","1","3","5","120","1","3","5","150","152","154","156","158","160","150"]},"However, given the complex nature of an enterprise-wide computer application, the selection of particular nodes (including the leaf nodes) may cause conflicts with other nodes. For example, a selection of a computer object on one node may call for a software module that performs an operation that is an opposite operation performed by another computer object that has been selected by the user. In this case, the two computer objects and corresponding functions are said to \u201cconflict.\u201d The tool  may present to the user both functions even though the switches conflict.","For example,  illustrates a table for explaining the problem resulting from conflicting computer objects. Structure nodes (e.g. NODE  and NODE ) and activities may be assigned to software switches e.g., S and S, that include settings that can define how the nodes\/activities may react depending upon the state (e.g., on or off separately, or both on or off simultaneously) the switches S and S are in after a particular selection. It may be possible to assign more than one switch to the same implementation guide node\/activity. When two or more switches are assigned to the same implementation guide node\/activity, the probability of the possible reactions to the switch state causing a conflict increases. A data structure accessible by a processor may be maintained in a data storage that tracks the assignment of particular function switches to nodes or sub-nodes and vice versa. In , the different combination of settings for each switch and resulting reactions at the respective nodes are shown in rows -. In the illustrated example, possible reactions are \u2018hide\u2019 and \u2018show\u2019, which means the node\/activity associated with the particular switch may, respectively, either be hidden (hide) from view in the user interface, or visible (show) on the user interface based on the switch setting. For example, in row , the switches S and S are both in a switched OFF state, and the assigned nodes NODE  and NODE , respectively, are both \u201cHIDDEN.\u201d Rows  and  show the reactions related to the respective nodes, NODE  and NODE , when switch S is on and switch S is off, and when switch S is off and switch S is on. Switches with the reaction \u201cVISIBLE\u201d (i.e., show) override all switches that have the reaction \u201chide.\u201d In other words, one switch may cause a node to be visible and the other may cause a node to be hidden. In that case, the switch with the reaction to \u201cshow\u201d will override the switch with the reaction to \u201chide.\u201d In more detail, consider the situation shown in :","Structure nodes NODE and NODE are sibling nodes within an implementation guide hierarchy because in the enhancement package, NODE is semantically a full replacement of NODE. When the enhancements in the enhancement package are implemented, NODE is intended to replace NODE.","Structure node NODE is assigned to switch S with reaction \u2018show\u2019 when switch S is switched on, and a reaction \u2018hide\u2019 when switch S is off. This means a graphical representation of NODE should be hidden when switch S is switched on (reaction \u2018hide\u2019 for NODE) because switch S displays the new replacement structure node NODE. But as mentioned above, a problem is that it is not possible to hide the graphical representation of NODE with switch S when S is switched on. This is because reaction \u2018show\u2019 has been predetermined in the system to \u201cwin\u201d over the reaction \u2018hide\u2019. As a result, graphical representations of both nodes NODE and NODE are presented (i.e., visible) to a user in the graphical user interface. The problem of conflicting computer objects (or conflicting functions thereof) in the implementation guide are typically resolved by the developers before a customer ever has the opportunity to make a conflicting selection. The developers typically implement a work around in the implementation guide to resolve the conflicts by assigning additional nodes.","To resolve the conflict, a developer may configure a \u201cwork around\u201d to the implementation guide. For example, the developer may create a new node, say NODE, in the implementation guide structure to address conflicting computer objects. The new node, say NODE, may be assigned to switch S with a reaction to hide the graphical representation of NODE when switch S is on. NODE may also be the parent node of NODE. NODE is also assigned to switch S with a reaction to show its graphical representation. By NODE being the parent of NODE, this takes advantage of the rule that all children of a node take the same reaction as the parent. So if NODE is given the reaction to hide its graphical representation when switch S is on, NODE will also be hidden. When switch S is selected to be on, a graphical representation of NODE is visible and presented in the graphical user interface, and the graphical representations of NODE and its child, NODE, are hidden.","The additional node (NODE) and its corresponding graphical representation, without corresponding additional functions, can make the hierarchy of the implementation guide confusing because the additional node only addresses a specific conflict between two nodes. The confusion may be compounded by future enhancements that add further nodes that merely address node conflicts to the computer application. In addition, the configuration management protocols for the implementation guide may be compromised because changes to the implementation guide do not reflect only changes to a computer application function, but also include the switch workarounds.","An example shown in  illustrates a scenario in which a switch is activated and a computer function is presented in a screenshot A of a graphical user interface. A graphical user interface presents to a user the screenshot A displaying in a hierarchy graphical representations of the nodes of the implementation guide (IMG) for an exemplary enhancement package. Elements  and  graphically represent nodes in a hierarchical data structure at which the particular nodes \u201cUser Interface Settings\u201d and \u201cWork Settings\u201d may be located. Also present in the data structure may be the switches that turn \u201con\u201d or activate the particular computer functions indicated by the respective nodes. In the illustrated example, the switch  labeled \u201cSS\u201d may be a switch that activates the particular computer functions represented by nodes \u201cUser Interface Settings\u201d and \u201cWork Settings.\u201d Depending upon the reaction (\u201cshow\u201d or \u201chide\u201d) assigned to the particular state of switch  name \u201cSS\u201d, either node \u201cUser Interface Settings\u201d  and \u201cWork Settings\u201d  may be presented in the graphical user interface A.","An example of a workaround as presented in a screenshot B of a graphical user interface is shown in . The node \u201cUser Interface Settings\u201d  may be, in the illustrated example, semantically replaced with the new functions at node \u201cSettings for User Interface and Process\u201d . In the workaround screenshot B, the nodes \u201cProcess for Global Employee Management\u201d , \u201cUser Interface Settings\u201d  and \u201cWork Settings\u201d  are assigned to switch SS , while the workaround \u201cUser Interface Settings\u2014General\u201d  and semantic replacement \u201cSettings for User Interface and Process\u201d  nodes are assigned to switch SS . In the illustrated example, the \u201cSettings for User Interface and Process\u201d  computer function may be a semantic replacement for the \u201cUser Interface Settings\u201d  computer function. In this case, the present example illustrates the state of the implementation guide (IMG) when switch SS (element ) is \u201con\u201d and switch SS (element ) is \u201coff.\u201d The workaround inserts the node  entitled \u201cUser Interface Settings\u2014General\u201d in the hierarchy as a node above the \u201cUser Interface Settings\u201d node . The node  (and implicitly node  which is a sub-node to node ) may have the reaction \u201chide\u201d assigned to it, and node  has the reaction \u201cshow\u201d when the switch SS  is switched \u201con.\u201d",{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2C","FIG. 2C"],"b":["200","287","289","282","284","280","286","288","287","289"]},"As can be seen in , the \u201cworkaround\u201d solution creates an additional node, e.g., , which based on its name, \u201cUser Interface Settings\u2014General\u201d is not very descriptive of the nodes true purpose. Furthermore, if and when additional nodes are required, other names must be given to those nodes further cluttering the implementation guide and masking the purpose of the presented nodes. Accordingly, the inventors have recognized the need for a tool that presents the implementation guide in a format absent of additional \u201cwork around\u201d nodes that addresses the conflicting computer objects and satisfies the configuration management protocols of the implementation guide.","It is an objective of the invention to provide for an improved method for selecting computer application functionality for implementation from an enhancement package and for a corresponding computer-readable storage medium and computer system. This object is solved by the features of the independent claims. Advantageous embodiments are given in the dependent claims.","An \u2018enhancement package\u2019 as used herein is a software package used to provide updated computer application functionality and features to a user of a particular computer application, such as an enterprise resource management system or customer relationship management system. According to embodiments, an enhancement package is structured such that a user can select which parts of the enhancement package the user wants to install or use after installation has occurred. As a result, both the installation of the enhancement package and the roll out of all of the updated computer application functions to the users do not have to occur substantially simultaneously. According to some embodiments, enhancement packages are be cumulative from a functional perspective, e.g., may contain the entire content of earlier packages. So each enhancement package may be based on the previous one. Enhancement packages may also have the same maintenance duration as the underlying core application. Each enhancement package may contain new versions of existing software components. With the enhancement packages customers can choose which software components are updated in their systems, depending on the new\/extended functionality they want to use. In some embodiments it may be that new function must be explicitly switched on to become active\/visible in the system. A functional unit within an enhancement package which can be activated\/switched on may be referred to as a \u2018business function\u2019, \u2018functionality\u2019 or \u2018function\u2019. The selection of a business function may trigger switches, which then may influence the execution of the code enhancements. These switches may ensure that customers only see, feel, or can make use of the new functionality if they have activated them. The activation process may additionally start a job in the overall system that automatically performs all the needed changes in the system.","A \u2018software switch\u2019 or \u2018switch\u2019 as used herein is a software implemented switching function for switching on or off the execution of a particular fragment of executable code that implements a function. According to embodiments, a switch may be implemented as any kind of stateful data structure or runtime object, i.e., a data structure runtime object having assigned the attribute value \u201cactive\u201d or \u201cinactive\u201d.","An \u2018implementation guide\u2019 as used herein is a hierarchical data structure at least some of whose nodes are represented by function GUI elements, each function GUI element representing a computer-interpretable function. Preferentially, said functions are provided by an enhancement packet. A configuration guide as used herein is used for enabling a user by means of a graphical user interface (GUI) to select and deselect one or more of said functions and\/or to inspect the set of currently selected functions. According to embodiments, the function GUI elements of the implementation guide may in addition provide a user with means for selecting one of said functions and for automatically updating a display device showing a graphical representation of the implementation guide based on a user's selection. According to preferred embodiments, the enhancement packet is a cumulative enhancement packet and comprises all functions of a core application program to be enhanced. According to said embodiments, the implementation guide may display all said cumulated functions of said enhancement packet for selection by the user. The functions may be displayed on a display device and may be represented by \u2018function GUI elements\u2019 such as check boxes, radio buttons, selectable nodes of a dynamically expandable tree and the like. According to embodiments only the functions are graphically represented as function GUI elements. The term \u2018implementation guide\u2019 as used herein should not be considered as a specification for implementing one or more functions by writing some code sections, but rather as a data structure for selecting which of a plurality of existing application software functions provided by an enhancement package should be enabled and thereby made available for execution as part of an application program. Said application program may be, for example, specified within a core section of the enhancement package or by a computer object provided by said packet, the computer object being external to said core. An example of an implementation guide is the \u2018SAP Reference IMG\u2019.","According to embodiments, the selectable function GUI elements of the implementation guide represent computer implemented functions encoded in the enhancement package. The execution of said functions depends on the selection state of their respective function GUI element in the implementation guide. For example, the source code of an enhancement packet may comprise a method which comprises a checking routine. Said checking routine may trigger the evaluation of the selection state of a function GUI element of the implementation guide before said method is executed as part of one or more complex business workflows provided by the enhancement packet. The method is only executed in case the result of said check returned that the corresponding function GUI element was selected.","A \u2018function switch\u2019 as used herein is a switch which is assigned to a function or a sub-function of an enhancement packet. According to embodiments, an \u2018active function switch\u2019 as used herein is a function switch whose assigned function or sub-function is represented by a function GUI element of the implementation guide having been selected by the user. Accordingly, an \u2018inactive function switch\u2019 as used herein may be a function switch whose assigned function or sub-function is represented by a currently unselected function GUI element of the implementation guide.","A \u2018conflict switch\u2019 as used herein is a switch having assigned at least two switches of any combination of a function switch or a conflict switch. According to embodiments, a conflict switch is a special type of switch which becomes not switched on when a function is selected and activated but when all of its assigned switches become active. Conflict switches are used to handle conflicting selected functions by offering an enhancement implementation which is executed in case of a conflicting selection instead of the selected conflicting functions.","An \u2018active conflict switch\u2019 as used herein is a conflict switch whose assigned functions have all been selected by a user. Depending on the embodiment and the particular conflict switch, the assignment between the conflict switch and the functions may be based on a \u2018direct\u2019 or \u2018short path\u2019 connection via one single function switch between each function and the conflict switch or may be based on an \u2018indirect\u2019 or \u2018long path\u2019 connection based on said in-between function switch in combination with a chain of one or more additional conflict switches between said conflict switch and the in-between function switch. Correspondingly, an \u2018inactive conflict switch\u2019 as used herein is a conflict switch having directly or indirectly assigned at least one function switch whose corresponding function is currently not selected.","According to embodiments, each conflict switch may have assigned one or more attributes. An attribute may be indicative of the conflict switch's current state (active or inactive), the type of the switch (conflict switch, function switch or others) and\/or the type and identity of all function switches and\/or conflict switches currently assigned to the conflict switch.","According to embodiments, the compilation and analysis of the first list of switches for updating the displayed implementation guide in dependence on the analysis result is executed upon each single selection of a function GUI element and the results of said calculation are used to automatically update the implementation guide and the selection status of the function GUI elements.","A \u2018computer object\u2019 as used herein is any structural unit of an enhancement packet, e.g. a class, a set of classes, a script or a set of scripts or the like which comprises one or more functions which may be activated or deactivated via a selection of function GUI elements of the implementation guide.","A \u2018computer-readable storage medium\u2019 or \u2018computer program product\u2019 as used herein encompasses any tangible storage medium which may store instructions which are executable by a processor of a computing device. The computer-readable storage medium may be referred to as a computer-readable non-transitory storage medium. The computer-readable storage medium may also be referred to as a tangible computer readable medium. In some embodiments, a computer-readable storage medium may also be able to store data which is able to be accessed by the processor of the computing device. Examples of computer-readable storage media include, but are not limited to: a floppy disk, punched tape, punch cards, a magnetic hard disk drive, a solid state hard disk, flash memory, a USB thumb drive, Random Access Memory (RAM), Read Only Memory (ROM), an optical disk, a magneto-optical disk, and the register file of the processor. Examples of optical disks include Compact Disks (CD) and Digital Versatile Disks (DVD), for example CD-ROM, CD-RW, CD-R, DVD-ROM, DVD-RW, or DVD-R disks. The term computer readable-storage medium also refers to various types of recording media capable of being accessed by the computer device via a network or communication link. For example a data may be retrieved over a modem, over the internet, or over a local area network. References to a computer-readable storage medium should be interpreted as possibly being multiple computer-readable storage mediums. Various executable components of a program or programs may be stored in different locations. The computer-readable storage medium may for instance be multiple computer-readable storage medium within the same computer system. The computer-readable storage medium may also be computer-readable storage medium distributed amongst multiple computer systems or computing devices.","\u2018Computer memory\u2019 or \u2018memory\u2019 or \u2018storage\u2019 is an example of a computer-readable storage medium. Computer memory is any memory which is directly accessible to a processor. Examples of computer memory include, but are not limited to: RAM memory, registers, and register files. References to \u2018computer memory\u2019 or \u2018memory\u2019 or \u2018storage\u2019 should be interpreted as possibly being multiple memories. The memory may for instance be multiple memories within the same computer system. The memory may also be multiple memories distributed amongst multiple computer systems or computing devices.","A \u2018computer system\u2019 as used herein encompasses any device comprising a processor. A \u2018processor\u2019 as used herein encompasses an electronic component which is able to execute program code. References to the computing device comprising \u201ca processor\u201d should be interpreted as possibly containing more than one processor or processing core. The processor may for instance be a multi-core processor. A processor may also refer to a collection of processors within a single computer system or distributed amongst multiple computer systems. The term computer system should also be interpreted to possibly refer to a collection or network of computing devices each comprising a processor or processors.","A \u2018user interface\u2019 as used herein is an interface which allows a user to interact with a computer or computer system. A \u2018user interface\u2019 may also be referred to as a \u2018human interface device.\u2019 A user interface may provide information or data to the user and\/or receive information or data from the user. A user interface may enable input from a user to be received by the computer and may provide output to the user from the computer. In other words, the user interface may allow a user to control or manipulate a computer and the interface may allow the computer indicate the effects of the user's control or manipulation. The display of data or information on a display or a graphical user interface is an example of providing information to a user. The receiving of data through a keyboard, mouse, trackball, touchpad, pointing stick, graphics tablet, joystick, gamepad, webcam, headset, gear sticks, steering wheel, pedals, wired glove, dance pad, remote control, one or more switches, one or more buttons, and accelerometer are all examples of user interface components which enable the receiving of information or data from a user.","A \u2018display\u2019 or \u2018display device\u2019 as used herein encompasses an output device or a user interface adapted for displaying images or data. A display may output visual, audio, and or tactile data. Examples of a display include, but are not limited to: a computer monitor, a television screen, a touch screen, tactile electronic display, Braille screen, Cathode ray tube (CRT), Storage tube, Bistable display, Electronic paper, Vector display, Flat panel display, Vacuum fluorescent display (VF), Light-emitting diode (LED) displays, Electroluminescent display (ELD), Plasma display panels (PDP), Liquid crystal display (LCD), Organic light-emitting diode displays (OLED), a projector, and Head-mounted display.","A \u2018database\u2019 as used herein encompasses a data file or repository which contains data that may be accessed by a processor. Examples of databases are, but are not limited to: a data file, a relational database, a file system folder containing data files, a collection of data tables and a spreadsheet file.","Embodiments of the present invention are directed to a tool that allows users to selectively activate, implement and\/or deploy computer application functions provided in an enhancement package. In particular, the disclosed embodiments may provide a tool that facilitates a more efficient selection of computer application functions that will be applied to the application as part of an enhancement package add-on.","In one aspect, the invention relates to a computer-implemented method for selecting one or more functions, the functions preferentially being provided by an enhancement package, for display. The selection is performed via an implementation guide. The implementation guide is a hierarchical data structure comprising nodes, wherein at least some of said nodes respectively represent one of said one or more functions. The method comprises:\n\n","Said features may be advantageous, because contrary to state of the art systems only function GUI elements are displayed which do not conflict with other functions already having been selected by said or another user. Thus, a potential conflict of two or more functions caused by a selection of the user is automatically resolved as functions having been determined not to executable without conflicts are not displayed to the user.","According to embodiments, the list of \u2018relevant switches\u2019 or \u2018second list of switches\u2019 as used herein is may be considered as a set of switches which are determined after evaluating a plurality of switches assigned to a user-selected function. The switches of the second list of switches are \u2018relevant\u2019 for resolving and\/or prohibiting conflicts and are used as input for automatically updating the displayed function GUI elements. At first, one or more conflict switches may be activated in dependence on the selection of function GUI elements of the implementation guide. The selected function switches and conflict switches may be used as input for determining if any of the function GUI elements of the implementation guide should be displayed or hidden for avoiding a conflict. The display screen is then refreshed and the set of displayed function GUI elements updated. Function GUI elements representing functions which conflict with each other may be hidden and not displayed as part of the implementation guide at all. In many cases the list of relevant switches will only contain one or more conflict switches and no other switches. This means that the resulting reaction, i.e., hiding or showing the one or more function GUI elements having caused the conflict, is a kind of \u201cnew function\u201d assigned to the conflict switch. With this new logic it is possible to activate, implement or deploy a proper solution for each situation which was not possible in state-of-the-art systems wherein additional \u201cdecision nodes\u201d not having assigned any executable function merely made the topology of the implementation guide more complex but did not provide for any extra functionality for resolving conflicts arising from a co-selection of two or more functions. As the conflict switch is not represented in the implementation guide as a GUI element, the topology of the implementation guide according to embodiments as claimed is not further complicated. Instead, by triggering the hiding of functions GUI elements by an active conflict switch the complexity of the implementation guide is further reduced.","According to embodiments the \u201cactivation of a computer object\u201d or an \u201cactivation of a function of the enhancement package\u201d selected by the user may comprise displaying a GUI element, in particular a function GUI element, i.e., a GUI element representing a particular function provided by an enhancement packet, enabling the execution of a program routine or set of routines at a particular predefined checkpoint within the code of a module of the enhancement packet or the like.","According to some embodiments, each function, function switch and\/or conflict switch has respectively assigned one or more attributes.","According to further embodiments, the retrieving comprises:\n\n","Said features are advantageous as the attributes may comprise information being indicative of the assignment of functions to function switches and of function switches to conflict switches. Said attributes may be stored in a configuration having e.g. the form of a relational database or having the form of one or more configuration files. By modifying any of said attributes via a GUI, a developer may modify the assignment between functions and switches without having to recompile the enhancement packet.","According to embodiments the attributes are stored in a tabular configuration data structure of the enhancement package. At least some first ones of the attributes are indicative of \u2018if\u2019 and \u2018which one\u2019 of the function switches are assigned to any of the functions. At least some second ones of the attributes are indicative of \u2018if\u2019 and \u2018which one\u2019 of the conflict switches are assigned to any of the function switches. And at least some third ones of the attributes are indicative of the status of the function, said status being \u2018active\u2019 if the function GUI element of said function is currently selected by the user, said status otherwise being \u2018inactive\u2019.","That some attributes are indicative of the status information of their respective function may be advantageous, because it is not necessary to traverse the whole graph of interconnected functions, function switches and conflict switches in order to determine if a particular function switch or conflict switch is active or not. Rather, this may be determined only once for a currently selected or deselected function and may then be stored in the attributes of all function switches and conflict switches affected by said selection or deselection. Thus, redundant calculations of the state of a particular switch can be avoided and the performance of the method may be increased.","According to embodiments the data content of the configuration data structure is automatically updated upon the receipt of the selection of the one function by the user if in addition the one selected function was automatically determined not to conflict with any of the other functions, wherein updating an attribute in dependence on the users selection implies changing one of the third attributes assigned to the selected functions from \u2018inactive\u2019 to \u2018active\u2019. Said features may be advantageous as automatically updating the attributes in the configuration file in accordance with the automatically calculated result ensures that two conflicting functions can never be stored as \u2018activated\u2019 at the same time, thus ensuring integrity of data and workflows.","According to embodiments the first list of switches is sorted before executing the extraction step in a way that conflict switches appear prior to function switches within said first list of switches. Said feature may be advantageous as this feature may allow to skip the step of evaluating whether an active function switch is assigned to a conflict switch: after having processed all conflict switches being contained in the first list of switches, analyzing the function switches may be skipped completely as the aim of the analysis may be reached already after having evaluated all conflict switches for active conflict switches.","According to embodiments the determining whether the extracted switch is an active conflict switch comprises:\n\n","According to embodiments the processing the second list of switches comprises identifying, for each active conflict switch in the second list, a switch conflict resolution indicated by said active conflict switch, the switch conflict resolution being a set of program instruction for prohibiting the execution of two conflicting ones of the one or more functions; and executing the identified switch conflict resolution, thereby modifying the displaying of at least one of the one or more function GUI elements representing conflicting functions. According to embodiments, a switch conflict resolution is a program routine provided by the enhancement packet and being operable to guarantee that the two conflicting functions cannot be selected and activated concurrently. For example, such a switch conflict resolution may trigger the hiding of a function GUI element of one of two or more conflicting functions and an automated deselection and deactivation of such a conflicting function.","According to embodiments the modification comprises hiding and\/or displaying function GUI elements in dependence on the result of the functions having been determined to be executable without conflicts on the processor.","According to embodiments the method further comprises updating the display of the function GUI elements upon each selection of one of the functions by the user, wherein the visibility of the updated function GUI elements depends on the result having been calculated upon said selection and being indicative of one or more conflicting functions.","According to embodiments the user selection of one of the one or more functions comprises the steps of:\n\n","Said features may be advantageous as they provide the user feedback that a particular conflicting function may have been disabled and prohibit a user from selecting such conflicting functions.","According to embodiments presenting the one or more function GUI elements as a result of the processing comprises hiding at least one first and at least one second function GUI element, the at least one first GUI element representing a first one of the one or more functions, the at least one second GUI element representing a sec- and one of the one or more functions, the first function having been determined to conflict with the second function.","According to embodiments the method further comprises: evaluating each switch in the first list of switches to determine whether the switch is a conflict switch; for switches determined to be a conflict switch, determining whether the conflict switch is active or inactive.","According to embodiments nodes comprise leaf-nodes and non-leaf nodes and wherein at least some of the non-leaf nodes respectively represent one of the functions displayed via the implementation guide and wherein each leaf node represents computer-implemented routines operable to execute one of said functions or parts thereof.","According to embodiments the method further comprises:\n\n","In a further aspect the invention relates to a computer readable non transitory storage medium embodied with program instructions executable by a processor, the instructions causing the processor to perform a method for selecting one or more functions for display in an implementation guide according to anyone of the above embodiments.","In a further aspect the invention relates to a computer system comprising:\n\n","In a further aspect, the invention relates to a method for selecting computer application functionality for implementation from an enhancement package, the method comprising:\n\n","According to embodiments, the retrieving comprises:\n\n","According to embodiments the determining whether the extracted switch is an active conflict switch comprises: determining the extracted switch is an active conflict switch when all function or conflict switches assigned to the extracted switch that are switched on; otherwise, the extracted switch is an inactive conflict switch; and deleting the inactive conflict switch from the list of all switches.","According to embodiments processing the list of relevant switches comprises indentifying the switch conflict resolution indicated by the active conflict switch; and modifying the implementation guide according to the identified switch conflict resolution.","In a further aspect, the invention relates to an enhancement implementation analysis method, the method comprising:\n\n","In a further aspect, the invention relates to an enhancement implementation analysis tool, the tool comprising:\n\n","According to embodiments the processor is further configured to construct the list of all switches by:\n\n","According to embodiments the processor is further configured to determine whether the extracted switch is an active conflict switch, by: determining the extracted switch is an active conflict switch when all function or conflict switches assigned to the extracted switch that are switched on; otherwise, the extracted switch is an inactive conflict switch; and deleting the inactive conflict switch from the list of all switches.","According to embodiments the processor is further configured to process the list of relevant switches by: indentifying the switch conflict resolution indicated by the active conflict switch; and modifying the implementation guide according to the identified switch conflict resolution.","In a further aspect, the invention relates to a computer readable medium embodied with program instructions executable by a processor, the processor performing a method for selecting computer application functionality for implementation from an enhancement package, comprising:\n\n","According to embodiments, the retrieving comprises:\n\n","According to embodiments determining whether the extracted switch is an active conflict switch, comprises: determining the extracted switch is an active conflict switch when all function or conflict switches assigned to the extracted switch that are switched on; otherwise, the extracted switch is an inactive conflict switch; and deleting the inactive conflict switch from the list of all switches.","According to embodiments the processing the list of relevant switches, comprises: indentifying the switch conflict resolution indicated by the active conflict switch; and modifying the implementation guide according to the identified switch conflict resolution.","In a further aspect the invention relates to an enhancement implementation analysis method, comprising:\n\n","Disclosed embodiments provide an enhancement implementation analysis method. A processor may determine a node in an implementation hierarchy to be analyzed for conflicts. As a result of the determination by the processor, a list of all switches assigned to the node in the implementation hierarchy may be retrieved from a data store. The list of retrieved switches may be checked to determine whether the switch is a conflict switch. For switches determined to be a conflict switch, the processor may further determine whether the conflict switch is active. Upon a determination that the conflict switch is an inactive conflict switch, the conflict switch may be deleted from the retrieved list of all switches. If the conflict switch is determined to be an active conflict switch, the conflict switch may be added to a list of relevant switches, and the list of relevant switches may be processed to resolve conflicts.","Also, the disclosed embodiments provide an enhancement implementation analysis tool that include a display device and a processor. The display device may display a graphical user interface. The processor may be configured to construct, in response to a selection of a specific computer application function in the graphical user interface, a list of all switches assigned to the selected function. The selected function may be represented as a node in a data structure, and the node may have a plurality of leafs representing sub-functions related to the selected function. The processor may also be configured to extract individual switches from the list of all switches. All switches in the list may include function switches and conflict switches. A conflict switch may have at least two switches of any combination of function or conflict switches assigned to it and function switches are assigned to either a function or sub-function. The processor may further be configured to determine whether the extracted switch is an active conflict switch, and based on the determination that the extracted switch is an active conflict switch, add the active conflict to a list of relevant switches. After all switches in the list of switches have either been removed from the list of all switches or added to the list of relevant switches by the configured processor, the processor may process the list of relevant switches. As a result of the processing, the processor may present in the graphical user interface on the display device, an implementation guide indicating which specific computer application functions are to be executing on the processor.","In order to be able to provide this selectivity for functions within a computer application, the developers must perform more tasks during development that facilitates the selection of the new, or enhanced, functions provided by the respective changes to the computer objects of the computer application. For example, a switch enhancement framework may be implemented that analyzes the switches referred to in . The switch enhancement framework may provide additional capabilities beyond the current switching techniques used in other areas, such as the adaptation of source code, user interfaces, presentation of screens and application menus.","As explained with reference to , when a computer function is selected for implementation in a graphical user interface, a switch may be set turning on the computer objects that provide the selected functionality, related implementation guide development objects, and other objects. In the switch enhancement framework, the switches may be assigned to a particular computer application function, such as HR management or invoicing functions. These switches may be referred to as function switches. The function switches are turned on when the particular computer application function to which it is assigned is turned on, e.g. by a user selecting a corresponding function GUI element. Said corresponding function GUI element may be provided by the implementation guide itself or by another software component of the computer system hosting the enhancement package or of the enhancement package itself. The switches may include attribute settings (e.g., flags, or identifiers) that indicate that the switch is a function switch.","The switch enhancement framework may also include switches referred to as a conflict switches. Conflict switches may be assigned to a function switch and may only be turned on when the function switch to which the conflict switch is assigned is turned on. A conflict switch may be assigned to more than one function switch, in which case, the conflict switch is turned on when all of the function switches assigned to it are also turned on. The conflict switches may also have attribute settings (e.g., flags, or identifiers) that indicate the switch is a conflict switch.",{"@attributes":{"id":"p-0086","num":"0160"},"figref":"FIG. 3","b":["300","310","320","330","300"]},"In a first path, the decision at step  is YES, the switch is a conflict switch, the process  proceeds to step . The decision to be made at step  is whether the conflict switch is assigned to another active conflict switch. If the answer at step  is \u201cYes\u201d, the process  proceeds to step  to delete the conflict switch from the list of switches. Otherwise, the answer is \u201cNo, the conflict switch is not assigned to another conflict switch, and process  proceeds to step . At step , it may be determined whether the conflict switch is an active conflict switch. An active conflict switch may be a conflict switch that is activated when all of the function switches that are assigned to the conflict switch have been selected by a user. If the conflict switch is determined NOT to be an active switch at step , the process  may proceed to step , where the tool may delete the switch from the list of all switches. Otherwise, if the answer is \u201cYes\u201d, the process may proceed to step . At step , the conflict switch may be added to the list of relevant switches. Subsequently, the process  may proceed to step . At step , the tool may retrieve any remaining switches assigned to the conflict switch from the list of all switches, and, if present, from the list of relevant switches (it may be possible that a switch that is assigned to a conflict switch may be processed and added to the list of relevant switches prior to the conflict switch being analyzed). The process  may proceed to step , where the retrieved remaining switches may be deleted from the list of all switches, and, if present, from the list of relevant switches. After which the process may determine whether any switches remain in the list at step . If the answer is \u201cYes, switches remain in the list,\u201d the process  may identify at step , the next switch in the list, and the process  restarts at step . If the answer is \u201cNo, switches do not remain in the list,\u201d the process  proceeds to step  to process the list of relevant switches.","The processing of the list of relevant switches at step  may include executing the rules of the relevant conflict switches, and implementing the functions indicated by the conflict switches. In addition, the execution of the rules of the relevant conflict switch may cause the graphical user interface to present the functions that are indicated by the rules of the conflict switch.","Alternatively, in a second path, if it is determined from the results of the attribute analysis, at step , that the switch is not a conflict switch, the process  may proceed to step .","At step , a inquiry may be made whether the switch is an active, function switch. If the response to the inquiry is \u201cNo\u201d at step , the process  may proceed to step , where the switch may be deleted from the list of all switches. Otherwise, if the response to the inquiry at step  is \u201cYes\u201d, the process  proceeds to step . At step , a decision whether the active function switch is assigned to an active conflict switch may be made. If the response to the inquiry at step  is \u201cYes\u201d, the process  may proceed to step , where the switch may be deleted from the list of all switches. Alternatively, if the response to the inquiry at step  is \u201cNo\u201d, the process  proceeds to step . At step , the switch may be added to the list of relevant switches. After which the process  may proceed to delete the active function switch from the list of all switches at step . Subsequently, the process  may continue and execute the steps , and either  or  as explained above.","The processing of the list of relevant switches at step  may include causing the graphical user interface to present the functions that are indicated by the rules of the conflict switch.","In an example, assume that switches SA and SB have a conflict. The conflict may be resolved by conflict switch CS. Switches SA and SB are assigned to conflict switch CS. Further assume another conflict exists between conflict switch CS and another switch SC. Another conflict switch CS may be used to resolve this conflict. Switch SC and conflict switch CS may be assigned to conflict switch CS. In the process , the list of assigned switches may contain switches SA, SB, SC and conflict switches CS and CS. Further assume that all of the switches are active (i.e., switched on). The process  may work through the list of switches recognizing that switches CS and CS are conflict switches. The processing of conflict switch CS will cause switches SA and SB to be removed from the list of all switches assigned to the particular node, while CS will cause switches SC and CS to be cleared from the list as well. Only CS will remain in the list of relevant switches for processing. After the list or relevant switches is processed in step , the process  may proceed to step , where an implementation structure, such as an implementation guide, is presented on a display device.","In an alternative embodiment, the process  may include a step  between steps  and  in which the list of all switches would be sorted. Sorting may be done, for example, where conflict switches are ordered to appear prior to function switches in the list of all switches. In this case, step  may not be needed as step  and  would have already deleted all function switches which are assigned to an active conflict switch.",{"@attributes":{"id":"p-0094","num":"0168"},"figref":["FIG. 4","FIG. 2","FIG. 4"],"b":["1","1","2","2","400","3","1","2","1","2","3","461","464","1","2","3","2","461","1","2","1","2","3","462","1","2","1","2","3","463","1","2","1","2","3","464","1","2","1","2","3","3","3","1","2","1","2","3","1","2"]},"As shown in , computer application functions are not assigned to conflict switches instead function and\/or conflict switches are assigned to a conflict switch. A conflict switch may have a number of settings that respond to the states of one or more assigned function and\/or conflict switches. To be clear, other conflict switches may be assigned to a conflict switch.",{"@attributes":{"id":"p-0096","num":"0170"},"figref":"FIG. 5","b":["500","510","520","515","510","510","535","520","535","1","2","3","1","2","3","515","520","520","510","1"]},"An application programming interface (API) may be used to implement processes referred to in . For example, the functionality of obtaining a list of switches assigned to a particular conflict switch may be implemented by a specific API developed to perform that function. In addition, a function may be developed that implements the determination of whether a switch is a function switch or a conflict switch. This function may, for example, return a TRUE when the switch in question is a conflict switch, otherwise the function may return a FALSE. Another example may be of a function that returns an answer to the inquiry of whether the conflict switch is active. The function may use an identifier of the conflict switch in question, and return a TRUE when all of the conflicting switches (both function and conflict switches) assigned to the conflict switch are activated (i.e., switched on). Of course, other functions or APIs may be needed, and the above APIs and functions are only exemplary.","The server  and\/or the client terminal  may include computer readable storage media, such as RAID devices, hard disk drives, memory devices, such as USB flash memory, ROM and RAM or any other magnetic or optical storage devices that may store computer readable data, and executable program instructions, such as computer application  and data structures -. The client terminal  and processor  may access the included computer readable storage media as well as data storage device . The data storage device  may also include hard disk drives or any other magnetic or optical device suitable for storing data and\/or executable program instruction code.",{"@attributes":{"id":"p-0099","num":"0173"},"figref":"FIG. 6","b":["612","614","616","608","618","620","610","622","624","606","626","628","604","630","632","602","646","656","638","1","638","2","638","3","612","616","614","638"]},"A developer of the enhancement package who may work on a computer system of the provider of the enhancement package (not shown) may pre-configure the enhancement package by assigning function GUI elements of the enhancement package to function switches and conflict switches in a way ensuring that the functions which can be selected via the implementation guide IG  at the same time do not conflict. In case an enhancement package was developed for updating an existing application program comprising a set of existing function with additional functions, said enhancement package may comprise said existing functions and the new functions. The switches may be assigned to the existing functions and the new functions in a way that the selection of a new function being incompatible with one of the existing function automatically results in a deselection of said existing function and in hiding a function GUI element representing said conflicting existing function. Thus, the end-user is provided with an implementation guide never comprising two or more selected conflicting functions irrespective of the end-user's selection. The implementation guide may be an integral part of each enhancement package or may be, according to other embodiments, an external component having access to the configuration  of the enhancement package, said package having being installed on a end-user computer system or having been compiled on a computer system of the provider of the enhancement package.","Said features may be advantageous because they enable an developer of the enhancement package having in-depth knowledge on the functions of that package to pre-configure an enhancement package before it is delivered to one of the end users in such a way that the end-user is provided with a consistent view on function GUI elements of the implementation guide wherein some function GUI elements of pre-existing functions may be hidden. This may be advantageous in particular when existing functions of an already installed software application, e.g. of an enhancement package of an earlier version, already exist and need to be replaced by a new function provided as part of a new enhancement package. Thus, it is avoided that a new function conflicts with an existing selection of one or more existing function provided by a previously installed enhancement package. The automated process of showing and hiding function GUI elements in dependence on an evaluation of active and inactive conflict switches of the implementation guide guarantees that the selected functions never conflict with each other: if a user has selected a first function which may conflict with a second function, the selection of the first function automatically triggers updating the display of the implementation guide, whereby the updated view of the implementation guide hides the function GUI element representing the conflicting second function, thus disabling the user from selecting said second function. Thus, configuring a received enhancement package by an end-user is made much more easy and error robust compared to state-of-the-art systems.",{"@attributes":{"id":"p-0102","num":"0176"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["644","710","712","714","716","702","708","718","7200","722","724","770","750","752","754","756","750","702","752","704","644","770","728","726","730","730","728","726","730","702","704","728","718","720","728","730","708","726","724","702","704","706","728","718","720"]},"According to embodiments, the assignment between function GUI elements, function switches and conflict switches as depicted in  is executed in a pre-configuration step by a user e.g. by means of a GUI or other pre-configuration facilities.","As conflict switches  and  have assigned the unselected function , conflict switches  and  are determined to be inactive conflict switches. An analysis of the active conflict switches allows for the determination that conflict switch  is an active conflict switch being indicative of a conflict between functions  and . This automated determination may allow the system to automatically execute program instructions resulting in the hiding of function GUI element  which represents one of the conflicting functions  when the graphical representation of the implementation guide is updated on the display device. The executed program instructions may also result in hiding, highlighting, emphasizing or otherwise modifying the display of function GUI elements to provide for a consistent and easily comprehensible view on the implementation guide. The selection of conflicting functions may thus be prohibited without having introduced any additional \u201cparent node\u201d in the implementation guide as known in prior art systems. Thus, the disadvantage of state-of-the-art systems using additional parent nodes making the topology of the implementation guide more complex and therefore less intelligible is avoided.","Several features and aspects of the present invention have been illustrated and described in detail with reference to particular embodiments by way of example only, and not by way of limitation. Those of skill in the art will appreciate that alternative implementations and various modifications to the disclosed embodiments are within the scope and contemplation of the present disclosure."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the following embodiments of the invention are explained in greater detail, by way of example only, making reference to the drawings in which:",{"@attributes":{"id":"p-0073","num":"0147"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0074","num":"0148"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0075","num":"0149"},"figref":"FIGS. 2A-2C"},{"@attributes":{"id":"p-0076","num":"0150"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0077","num":"0151"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0078","num":"0152"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0079","num":"0153"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0080","num":"0154"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
