---
title: Object model for a user interface
abstract: Various embodiments provide techniques and processes for defining elements of a user interface (UI) using a tree of objects created based on a markup language. In some embodiments, a client application provides markup that defines one or more aspects of a UI to an application programming interface (API). The API parses the markup to determine a namespace and one or more UI elements defined by the namespace. Instances of the UI elements are created, and properties of the UI elements are set on the instances. A user interface may then be displayed that includes the instances of the UI elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08245144&OS=08245144&RS=08245144
owner: Microsoft Corporation
number: 08245144
owner_city: Redmond
owner_country: US
publication_date: 20080627
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","CONCLUSION"],"p":["Object-oriented programming (OOP) provides techniques for creating binary software components (objects) that can interact with each other. One example of OOP is the Component Object Model (COM). COM specifies an object model and programming requirements that enable this object interaction. A COM object can be created using one of a variety of different programming languages (e.g., C++, Visual Basic, and so on). The flexibility and simplicity of COM have enabled it to become a widely adopted and long-lived standard. However, certain aspects of COM present challenges when creating a graphical user interface (GUI).","First, COM typically lacks the ability to support a new object class which extends from a base class. As a result, a first party is unable to create a COM object that derives from and extends a COM object that is created by another party. Second, it is difficult to interface COM objects with declarative markup languages (e.g., XAML) to specify layouts, appearances, behaviors of a particular part or parts of a GUI. These particular challenges can make it difficult for COM to be used to implement a GUI.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Various embodiments provide techniques and processes for defining elements of a user interface (UI) using a tree of objects created based on a markup language. In some embodiments, a client application provides markup that defines one or more aspects of a UI to an application programming interface (API). The API parses the markup to determine a namespace and one or more UI elements defined by the namespace. Instances of the UI elements are created, and properties of the UI elements are set on the instances. A user interface may then be displayed that includes the instances of the UI elements.","Overview","Various embodiments provide a user interface (UI) platform that implements aspects of a markup language (e.g., XML, XAML, and so on) and object-oriented programming methods to provide flexible and customizable ways of defining and\/or generating a graphical UI. While the UI platform is discussed with reference to component object model (COM) methodology and terminology, this is not intended to be limiting, and any suitable object-oriented programming methodology may be utilized without departing from the spirit and scope of the claimed embodiments.","The UI platform includes a User Interface Object Model (UIOM) that enables developers to create new object class types that inherit and\/or override functionality from base classes. UIOM also enables objects and\/or object properties to be referenced by name (e.g., within a namespace), such that objects and\/or properties can be coded in a markup language to specify the layout, appearance, and\/or behavior of one or more aspects of a UI. In some embodiments, UIOM includes an application programming interface (API) that manages the loading, registration, instantiation, and\/or initialization of UIOM classes. A UIOM class may also inherit properties and\/or behavior from a base class defined by UIOM.","In an implementation example, the UI platform receives markup from a client application that defines one or more aspects of a UI. The UI platform then parses the markup looking for a namespace and a class name of a UI object within the namespace. In some embodiments, a namespace comprises multiple class type objects, with each class type object representing one or more UI elements such as a button, a textbox, a banner, and so on. In this example, if the platform encounters the markup \u201cacme:textbox\u201d, the platform recognizes that the markup designates the namespace \u201cacme\u201d and the \u201ctextbox\u201d class name within the \u201cacme\u201d namespace. The UI platform then creates a tree of one or more COM objects that correspond to the namespace \u201cacme\u201d and class name \u201ctextbox\u201d, and sets properties (e.g., visual attributes such as size, color, and so on) on the object(s) within the tree. The tree includes a \u201ctextbox\u201d node with particular properties, and the \u201ctextbox\u201d node is used to display a textbox in a UI. As discussed above, the \u201ctextbox\u201d node may inherit properties and or functionally from a UIOM base class.","In the discussion that follows, a section entitled \u201cOperating Environment\u201d is provided and describes an environment in which one or more embodiments can be employed. Following this, a section entitled \u201cExample Architecture\u201d is provided and describes one example of an object-oriented architecture that can implement various principles and techniques discussed herein. Next, a section entitled \u201cExample Processes\u201d discusses a few examples of processes that may implement various techniques discussed herein for defining and\/or generating various aspects of a user interface. Following this, a section entitled \u201cImplementation Specifics\u201d discusses a variety of implementation details for implementing the UIOM architecture in one or more embodiments. Finally, some example object interfaces are provided that implement a variety of UI creation methods that utilize the UIOM architecture.","Operating Environment",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1","b":["100","100","102","104","106","108","102","102"]},"Stored on computer-readable media  are one or more client applications  and a UI platform . Examples of client applications include a web browser, a media rendering application, an instant messaging client, a web development application, and so on. As part of UI platform  are markup parser , a User Interface Object Model (UIOM) framework  and UI customization features . Markup parser  processes markup code and converts the markup into a form that can be utilized by the UI platform. The UIOM framework is an object model that provides, among other things, the ability for class types to extend and\/or override functionality in base classes, as well as functionality for creating and initializing instances of classes based on markup namespace identifiers. The UI customization features enable developers and other parties to create custom UI objects and\/or properties that can be used by the UIOM framework to create a UI.","Example Architecture",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2","b":["200","110","202","204","206","208","210","212","214","216","218","220"]},"Each of the objects in architecture  includes one or more interfaces that can expose functions and\/or methods that can be accessed by applications, objects, and\/or processes to implement the techniques for UI creation discussed herein. In this particular example, the double-headed arrows indicate that a particular object is created and\/or owned by another object, application, and\/or process. For example, Type Manager object  may be created by client application . The single-headed arrows indicate that one object is holding a reference to another object. Implementation examples of architecture  and its interfaces and methods are discussed below.","In example architecture , the Type Manager object is a top-level interface to the UIOM framework. The Type Manager manages loading and creation of classes of objects for one or more namespaces. In some embodiments, a namespace represents one or more sets of related classes of UI elements that are defined by the same party (e.g., a software developer). One or more of the namespaces are represented by the Namespace Manager object , which handles communication with one or more Namespace Type Factory objects  provided by an entity that creates custom types (e.g., custom UI objects). A custom type is represented by the Class Type object , which specifies a base class type, and provides a factory for creating instances of the class. In some embodiments, the Class Type object provides functionality to query for class-specific interfaces to set properties, subscribe to events, and access other functionality that may be exposed by an interface.","Example Processes",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 3 and 4","b":"200"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3","b":["300","302","304","306"]},"At , the UIOM framework determines a namespace and a class name from the parsed markup. In one example, the UIOM framework receives the markup \u201cacme:textbox\u201d, from which it determines that the namespace is \u201cacme\u201d and the class name is \u201ctextbox\u201d. At , the UIOM framework creates a tree of objects that includes one or more class types and class instances that correspond to the namespace and the class name. In the current example, the class instances include a textbox instance of the textbox class. At , one or more properties are set on the objects of the object tree, which may include the class instance(s). Continuing the current example, the size and color of the textbox are specified. At , one or more of the class instances are displayed. In the current example, this can include displaying the text box in a UI.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4","b":["400","400","300","400","200"]},"At , a client application creates a type manager. In one example, the client application calls a CoCreateInstanceo API that creates an instance of the type manager. At , to register a namespace with the type manager, the client application calls a method on the type manager (e.g., the RegisterNamespace method discussed below in the \u201cInterfaces\u201d section) and provides a string name of the namespace and an identifier (e.g., a class identifier) for a namespace type factory for the namespace. At , the type manager associates the string name with the identifier and a pointer to a namespace manager. Initially, the pointer value is set to null. At , the client application provides markup to the type manager and requests that the type manager parse the markup and create a tree of objects from the markup. At , the type manager parses the markup and determines one or more namespaces from the markup. The type manager may implement its own markup parser, or it may send the markup to an external parser to be processed. At , a class in the namespace is determined from the markup and, in response, a method is called that creates a namespace manager. In one or more embodiments, the namespace manager is not created until a class in the namespace is encountered and\/or the client application calls an API to access a class in the namespace. This \u201con demand\u201d aspect provides a more efficient and economical way of generating a UI and UI elements.","The type manager calls a method on the namespace manager that requests that a namespace type factory be created for the namespace (block ). According to some embodiments, the type manager provides a globally unique identifier (GUID) to the namespace manager and requests that the namespace manager create a namespace type factory that is associated with the GUID. For example, a developer may create a namespace type factory and register the namespace type factory using the GUID. The namespace manager handles communication with the namespace type factory.","At , the namespace type factory is created and the namespace manager calls a method on the namespace type factory that asks the namespace type factory for its identifier (e.g., its namespace, its GUID, and so on). If the namespace type factory returns the identifier that the namespace manager used to request the creation of the factory, this verifies that the correct namespace type factory has been created. At , the client application calls a method that creates a class type manager. The class type manager provides one or more interfaces to class type objects that are to be created. At , the client application calls a method that creates a class type object. Using the example discussed above in , the client application calls a method on the namespace type factory that creates a class type object with the class name \u201ctextbox\u201d.","To create an instance of the class, at  a method is called that creates a class instance. Using the example from , the class instance would comprise a textbox object. As one example of the creation of a textbox object, the class type manager includes an IUIClassFactory interface that provides a method for creating an instance of a class. This interface is accessible to one or more of the objects in the UI architecture, as well as the client application. The object(s) and\/or the client application may call the method to initiate the creation of the class instance. At , one or more base class instances for the class instance are created. In one or more embodiments, the base class instances include functionality and\/or properties that the class instance inherits from the base classes. A base class instance may include one or more interfaces for registering properties for the base class. The class instance may also override and\/or extend properties and functionality of one or more of its base classes. At , properties are set on the class instance and\/or its base class instance(s). Properties may include visual aspects (e.g., size, color, and so on) as well as behavior and functionality.","This example process is effective to create a tree of objects that are used to define one or more aspects of a UI. For purposes of simplicity, this example process discusses the creation of a tree that includes a single instance of a single class and one or more base classes (i.e., the text box instance of the text box class). However, in many implementation scenarios, a tree of objects will be created with multiple different class types, class instances, and base classes.","Implementation Specifics","The following sections discuss particular UIOM implementation specifics, according to one or more embodiments.","Implementation Inheritance","In some embodiments, the UIOM framework utilizes a DependencyObject base class, from which one or more class types may inherit properties and\/or functionality. The DependencyObject type exposes interfaces for accessing properties and for subscribing to and raising UIOM events. For generating a UI, a hierarchy of objects that define different aspects of the UI may descend from the DependencyObject type.","In some embodiments, the UIOM framework utilizes COM-based aggregation techniques such as blind aggregation. The following pseudo-code illustrates one example of a ToggleButton class that inherits properties and\/or functionality from a Button class using COM-based aggregation:",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class ToggleButton :"},{"entry":"\u2003\u2003public CComObjectRootEx<CComObjectThreadModel>,"},{"entry":"\u2003\u2003public IUIToggleButton"},{"entry":"{"},{"entry":"\u2003\u2003CComPtr<IUINamespaceTypeFactory> m_spCoreFactory;"},{"entry":"\u2003\u2003ToggleButton(IUINamespaceTypeFactory pCoreFactory)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\/\/ Store a ref to the factory for types from the core namespace."},{"entry":"\u2003\u2003\u2003\u2003m_spCoreFactory = pCoreFactory;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003CComPtr<IUIButtonBase> m_spButtonBase;"},{"entry":"\u2003\u2003HRESULT FinalConstruct( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\/\/ COM blind-aggregation to reuse the Button base class"},{"entry":"implementation."},{"entry":"\u2003\u2003\u2003\u2003m_spButtonBase = m_spCoreFactory-"},{"entry":">CreateInstance(\u201cButton\u201d, GetUnknown( ));"},{"entry":"\u2003\u2003}"},{"entry":"BEGIN_COM_MAP( )"},{"entry":"\u2003\u2003COM_INTERFACE_ENTRY(IUIToggleButton)"},{"entry":"\u2003\u2003COM_INTERFACE_ENTRY_AGGREGATE_BLIND"},{"entry":"(m_spButtonBase)"},{"entry":"END_COM_MAP( )"},{"entry":"\u2003\u2003\/\/ Add only IUIToggleButton functionality"},{"entry":"\u2003\u2003BOOL m_fToggled;"},{"entry":"\u2003\u2003STDMETHOD IsToggled(BOOL* pValue)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003return m_fToggled;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003STDMETHOD Toggle( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003m_fToggled = !m_fToggled;"},{"entry":"\u2003\u2003}"},{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In some embodiments, IUINamespaceTypeFactory is used for creating ClassTypes and ClassFactories are used for creating instances. The following is some sample UIElement Code that blind aggregates a TreeElement, which it creates by calling pClassFactoryTreeElement\u2192CreateBaseInstance.",{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"class ATL_NO_VTABLE CUIElement :"},{"entry":"\u2003\u2003public CComObjectRootEx<CComSingleThreadModel>,"},{"entry":"\u2003\u2003public CUIElementBase"},{"entry":"{"},{"entry":"public:"},{"entry":"\u2003\u2003DECLARE_NO_REGISTRY( )"},{"entry":"\u2003\u2003DECLARE_GET_CONTROLLING_UNKNOWN( )"},{"entry":"\u2003\u2003BEGIN_COM_MAP(CUIElement)"},{"entry":"\u2003\u2003\u2003\u2003COM_INTERFACE_ENTRY(IUIElement)"},{"entry":"COM_INTERFACE_ENTRY_AGGREGATE_BLIND"},{"entry":"(_pUnkTreeElement)"},{"entry":"\u2003\u2003END_COM_MAP( )"},{"entry":"\u2003\u2003DECLARE_PROTECT_FINAL_CONSTRUCT( )"},{"entry":"\u2003\u2003HRESULT FinalConstruct( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003_pUnkTreeElement = NULL;"},{"entry":"\u2003\u2003\u2003\u2003return S_OK;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003CHKMETHOD InitializeBaseClass(IUIClassFactory"},{"entry":"*pClassFactoryTreeElement)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003RETURN_IF_FAILED(pClassFactoryTreeElement-"},{"entry":">CreateBaseInstance(GetControllingUnknown( ), &_pUnkTreeElement));"},{"entry":"\u2003\u2003\u2003\u2003return S_OK;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003void FinalRelease( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003if (_pUnkTreeElement)"},{"entry":"\u2003\u2003\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\u2003\u2003\u2003_pUnkTreeElement->Release( );"},{"entry":"\u2003\u2003\u2003\u2003}"},{"entry":"\u2003\u2003}"},{"entry":"};"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Creating a New Type and Overriding a Base Class ImplementationIn some embodiments, COM-based containment may be used to override a base class implementation. The following pseudo-code illustrates a new class WrapPanel that inherits from a Panel base class. In this example, the WrapPanel class overrides the IUILayout interface implementation utilized by the Panel base class. As illustrated below, new logic is provided by the new WrapPanel class for Measure and Arrange functions (indicated in bold below) of the Panel base class. Other interfaces implemented by the Panel base class may be blind aggregated by the WrapPanel class.",{"@attributes":{"id":"p-0036","num":"0035"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003class WrapPanel :"},{"entry":"\u2003\u2003public CComObjectRootEx<CComObjectThreadModel>,"},{"entry":"\u2003\u2003public IUILayout"},{"entry":"\u2003{"},{"entry":"\u2003\u2003CComPtr<IUINamespaceTypeFactory> m_spCoreFactory;"},{"entry":"\u2003\u2003WrapPanel(IUINamespaceTypeFactory pCoreFactory)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ Store a ref to the factory for types from the core namespace."},{"entry":"\u2003\u2003\u2003m_spCoreFactory = pCoreFactory;"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003CComPtr<IUILayout> m_spPanelBase;"},{"entry":"\u2003\u2003HRESULT FinalConstruct( )"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ COM blind-aggregation to reuse the Panel base class"},{"entry":"\u2003implementation."},{"entry":"\u2003\u2003\u2003m_spPanelBase = m_spCoreFactory->CreateInstance(\u201cPanel\u201d,"},{"entry":"\u2003GetUnknown( ));"},{"entry":"\u2003\u2003}"},{"entry":"\u2003BEGIN_COM_MAP( )"},{"entry":"\u2003\u2003COM_INTERFACE_ENTRY(IUILayout) \/\/ override IUILayout"},{"entry":"interface"},{"entry":"\u2003\u2003COM_INTERFACE_ENTRY_AGGREGATE_BLIND"},{"entry":"\u2003\u2003(m_spPanelBase"},{"entry":"\u2003)"},{"entry":"\u2003END_COM_MAP( )"},{"entry":"\u2003\u2003\/\/ Override IUILayout methods"},{"entry":"\u2003\u2003STDMETHOD (SIZE available, SIZE* pDesiredSize)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ Re-use base class implementation to measure children."},{"entry":"\u2003\u2003\u2003return m_spPanelBase->Measure(available, pDesiredSize);"},{"entry":"\u2003\u2003}"},{"entry":"\u2003\u2003STDMETHOD (SIZE available)"},{"entry":"\u2003\u2003{"},{"entry":"\u2003\u2003\u2003\/\/ Perform custom logic to arrange children in the space available."},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003\u2003..."},{"entry":"\u2003\u2003}"},{"entry":"\u2003}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In some embodiments, UIOM elements are COM objects, but are not necessarily created using the CoCreateInstance( ) API. One or more DLLs may be utilized to provide UIOM functionality, and the DLLs may provide one or more \u201celement factories\u201d, such as the namespace type factory, which are logically mapped to a markup namespace and include functionality to create instances of UIOM elements (e.g., a class instance) using an element name string (e.g., \u201cacme:textbox\u201d from the example given above). Utilizing these techniques, a tree of UI elements may be created starting with an outer object (e.g., a UI window frame) and creating internals for the outer object (e.g., a button and a textbox for the UI window frame). The element factories may also provide class type information and one or more interfaces for setting object dependency properties and subscribing to events. Pseudo-code for creating an UIOM element utilizing an element factory is provided below:",{"@attributes":{"id":"p-0038","num":"0037"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Init UserInterface framework factory for built-in types."},{"entry":"\u2003CComPtr<IUIUserInterfaceTypeFactory> spSCF ="},{"entry":"::CoCreateInstance(CLSID_UserInterfaceCoreFactory);"},{"entry":"\u2003CComPtr<IUIButton> spButton = spSCF->CreateInstance(\u201cButton\u201d);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In some embodiments, the UIOM framework utilizes a DependencyObject base class as the ultimate base class for UIOM objects. An IUIDependencyObject interface includes methods for obtaining and setting properties on UIOM objects. The pseudo-code illustrated below presents one implementation of the IUIDependencyObject as an implementation of IUITreeElement and\/or IUITreeContainer interfaces, which define methods for object tree traversal, including references to one or more child nodes in an object tree and\/or one or more pointers to a parent node.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2003\/\/ Init UserInterface framework factory for built-in types."]},{"entry":[{},"\u2003CComPtr<IUIUserInterfaceTypeFactory> spSCF ="]},{"entry":[{},"::CoCreateInstance(CLSID_UserInterfaceCoreFactory);"]},{"entry":[{},"\u2003\/\/ Create outer window, a layout panel, and a trio of controls."]},{"entry":[{},"\u2003CComPtr<IUITreeElement> spOverlappedWindow = spSCF-"]},{"entry":[{},">CreateInstance(\u201cOverlappedWindow\u201d);"]},{"entry":[{},"\u2003CComPtr<IUITreeContainer> spWrapPanel = spSCF-"]},{"entry":[{},">CreateInstance(\u201cWrapPanel\u201d);"]},{"entry":[{},"\u2003CComPtr<IUITreeElement> spButton = spSCF-"]},{"entry":[{},">CreateInstance(\u201cButton\u201d);"]},{"entry":[{},"\u2003CComPtr<IUITreeElement> spTextBox = spSCF-"]},{"entry":[{},">CreateInstance(\u201cTextBox\u201d);"]},{"entry":[{},"\u2003CComPtr<IUITreeElement> spLabel = spSCF-"]},{"entry":[{},">CreateInstance(\u201cLabel\u201d);"]},{"entry":[{},"\u2003\/\/ Wire up the tree."]},{"entry":[{},"\u2003CComPtr<IUIElementList> spChildren = spWrapPanel-"]},{"entry":[{},"\u2003>GetChildren( );"]},{"entry":[{},"\u2003spChildren->Add(spButton);"]},{"entry":[{},"\u2003spChildren->Add(spTextBox);"]},{"entry":[{},"\u2003spChildren->Add(spLabel);"]},{"entry":[{},"\u2003spOverlappedWindow->SetContent(spWrapPanel);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"In some embodiments, retrieving and setting object properties uses a pair of Get\/Set methods associated with one or more object interfaces. This is illustrated in the following pseudo-code:",{"@attributes":{"id":"p-0042","num":"0041"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"spButton->SetWidth(34.5);"]},{"entry":[{},"spButton->SetHeight(67.8);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"Underlying storage for property values can be implemented in a property system. In some embodiments, a property system stores property values for a variety of UI elements. When a value for a property is requested for a UI element (e.g., a width value for a text box), the value can be retrieved from the property system. For example, the DependecyObject may store property values for one or more object UI element properties. Further to the ToggleButton example discussed above, the property accessors may be strongly-typed wrappers for DependencyObject properties. This is illustrated below is pseudo-code:",{"@attributes":{"id":"p-0044","num":"0043"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/\/ Add IUIToggleButton functionality"]},{"entry":[{},"STDMETHOD IsToggled(BOOL* pValue)"]},{"entry":[{},"{"]},{"entry":[{},"\u2003CComQIPtr<IUIDependencyObject> spThisDO = GetUnknown( );"]},{"entry":[{},"\u2003spThisDO->GetBoolValue(\u201cIsToggled\u201d, pValue);"]},{"entry":[{},"}"]},{"entry":[{},"STDMETHOD Toggle( )"]},{"entry":[{},"{"]},{"entry":[{},"\u2003CComQIPtr<IUIDependencyObject> spThisDO = GetUnknown( );"]},{"entry":[{},"\u2003BOOL currentValue;"]},{"entry":[{},"\u2003spThisDO->GetBoolValue(\u201cIsToggled\u201d, &currentValue);"]},{"entry":[{},"\u2003spThisDO->SetBoolValue(\u201cIsToggled\u201d, !(currentValue));"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In some embodiments, properties are set according to their string name and with a string value. This may be accomplished by accessing the UIOM element's IUIDependencyObject interface, as illustrated in the following pseudo-code:",{"@attributes":{"id":"p-0046","num":"0045"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CComQIPtr<IUIDependencyObject> spElementDO = spElement;"]},{"entry":[{},"spElementDO->SetStringValue(\u201cIsToggled\u201d, \u201cTrue\u201d);"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Properties may be set on one or more elements in a tree of objects, even if an element is of an unrelated type. Thus, in some embodiments, property values can be considered to be inherited by one or more descendent tree elements. In some embodiments, an ancestor element on a tree (e.g., a parent node) does not know the set of properties for a child element. In these embodiments, a child element's properties are set on the node's namespace type factory object. The following example of pseudo-code sets the TextBox::FontSize property on an ancestor element higher up in a tree of elements:",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the TextBlock::FontSize property on this panel, to be inherited by"},{"entry":"all child elements:"},{"entry":"\u2003\/\/\u2003<Panel TextBlock.FontSize=\u201c24\u201d>"},{"entry":"\u2003CComQIPtr<IUITextBlockProperties> spTextBlockProperties = spSCF-"},{"entry":">GetTypeInfo(\u201cTextBlock\u201d);"},{"entry":"\u2003spTextBlockProperties->SetFontSize(spPanelElement, 24);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Properties may also be set on a descendant element based on one or more of its ancestor elements. These are known as attached properties. Properties may be set on the descendent element's namespace type factory object. The following pseudo-code sets a Panel::ZIndex property on a child element:",{"@attributes":{"id":"p-0050","num":"0049"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the Panel::ZIndex attached property, on the child element:"},{"entry":"\u2003\/\/\u2003<Child Panel.ZIndex=\u201c1\u201d>"},{"entry":"\u2003CComQIPtr<IUIPanelAttachedProperties> spPanelProperties = spSCF-"},{"entry":">GetTypeInfo(\u201cPanel\u201d);"},{"entry":"\u2003spPanelProperties->SetZIndex(spChildElement, 1);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Client applications may use CoCreateInstanceo to obtain a factory for one or more core UIOM classes, and may also use CoCreateInstanceo to obtain a factory for a third party component that is developed outside of the core UIOM architecture. One example of a client application startup utilizing the core UIOM architecture and one or more third party components is illustrated in the following pseudo-code. The following pseudo-code:","(1) creates an instance of a type manager;","(2) registers one or more namespaces;","(3) instantiates IUINamespaceTypeFactory (if this has not already been done). In some embodiments, this is implemented before a class type is used in a namespace;","(4) retrieves a class factory for instantiating one or more classes; and","(5) saves the class factory for creating future instances of the class.",{"@attributes":{"id":"p-0052","num":"0051"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CComPtr<IUITypeManager> spTypeManager;"},{"entry":"\u2003::CoCreateInstance(CLSID_UITypeManager, NULL,"},{"entry":"CLSCTX_INPROC_SERVER, _uuidof(IUITypeManager), (void"},{"entry":"**)&spTypeManager);"},{"entry":"\u2003spTypeManager->RegisterNamespace(L\u201cThirdPartyNamespace\u201d,"},{"entry":"CLSID_ThirdPartyNamespace);"},{"entry":"\u2003CComPtr<IUINamespaceManager> spThirdPartyNamespace;"},{"entry":"\u2003spTypeManager->GetNamespaceManager(L\u201cThirdPartyNamespace\u201d,"},{"entry":"&spThirdPartyNamespace);"},{"entry":"\u2003CComPtr<IUIClassFactory> spClassFactoryCoolButton;"},{"entry":"\u2003spThirdPartyNamespace->GetClassFactory(L\u201cCoolButton\u201d, &"},{"entry":"spClassFactoryCoolButton);"},{"entry":"\u2003CComPtr<ICoolButton> spCoolButton;"},{"entry":"\u2003spClassFactoryCoolButton->CreateInstance(&spCoolButton);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"This section presents several interfaces that may be implemented to generate a UI using the UIOM architecture. The interfaces are explained in Interface Design Language (IDL), and include an explanation of the functionality of each interface.","Interface: IUITypeManager: IUnknown",{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Clients call RegisterNamespace before attempting to call"},{"entry":"GetNamespaceManager or parse XAML that refers to the given namespace"},{"entry":"\u2003\/\/ The name passed in should match that returned by"},{"entry":"IUINamespaceTypeFactory::GetNamespaceName, or calls to"},{"entry":"GetNamespaceManager may fail"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RegisterNamespace"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] PCWSTR namespaceName,","\/\/ Globally"]},{"entry":"unique namespace name"},{"entry":["\u2003\u2003[in] REFCLSID rclsidNamespaceTypeFactory","\u2003\/\/ ID of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"CoCreatable class that implements IUINamespaceTypeFactory"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get an IUINamespaceManager for the given namespace"},{"entry":"\u2003\/\/ If necessary, the appropriate registered class is CoCreated behind the"},{"entry":"scenes"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetNamespaceManager"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003[in] PCWSTR namespaceName,","\/\/ Globally"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"unique namespace name, same as passed to RegisterNamespace"},{"entry":"\u2003\u2003[out, retval] IUINamespaceManager **namespaceManager"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Release all namespaces to all allow IUINamespaceTypeFactory"},{"entry":"implementions to be destroyed"},{"entry":"\u2003\/\/ It is possible to subsequently call GetNamespaceManager and"},{"entry":"create new instances"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RevokeNamespaces"},{"entry":"\u2003("},{"entry":"\u2003);"},{"entry":"};"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(5B3614A0-795E-4c23-8017-C18E2088727B),"},{"entry":"\u2003helpstring(\u201cIUINamespaceManager Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to a system-created object managing access to classes in a"},{"entry":"namespace"},{"entry":"\/\/ Internally communicates with IUINamespaceTypeFactory class"},{"entry":"registered for namespace"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"interface IUINamespaceManager: IUnknown",{"@attributes":{"id":"p-0057","num":"0056"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Get the class type object for a given class within a namespace"},{"entry":"\u2003\/\/ This may cause the class type to be initialized and registered for the"},{"entry":"first time"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetClassType"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003[in] PCWSTR className,","\/\/ Class name,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"unique within the namespace"},{"entry":"\u2003\u2003[out, retval] IUIClassType **classType"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get a class factory for a given class within a namespace"},{"entry":"\u2003\/\/ This may cause the class type to be initialized and registered for the"},{"entry":"first time"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetClassFactory"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003[in] PCWSTR className,","\/\/ Class name,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"unique within the namespace"},{"entry":"\u2003\u2003[out, retval] IUIClassFactory **classFactory"},{"entry":"\u2003);"},{"entry":"};"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(6CACFBFA-E51A-4d51-B133-3695725E4486),"},{"entry":"\u2003helpstring(\u201cIUINamespaceTypeFactory Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to a client-created object for mapping class names to Class"},{"entry":"Type objects"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"interface IUINamespaceTypeFactory: IUnknown",{"@attributes":{"id":"p-0059","num":"0058"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Get the namespace name"},{"entry":"\u2003\/\/ This should match the name passed to"},{"entry":"IUITypeManager::RegisterNamespace or calls to"},{"entry":"IUITypeManager::GetNamespace may fail."},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetNamespaceName"},{"entry":"\u2003("},{"entry":"\u2003\u2003[out, retval, annotation(\u201c_deref_out\u201d)] PWSTR"},{"entry":"\u2003\u2003*namespaceName\u2003\/\/"},{"entry":"The namespace name - the client should CoTaskMemFree this string when"},{"entry":"finished with it"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Create a class type object for the given class"},{"entry":"\u2003\/\/ This may only be called once per class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003CreateClassType"},{"entry":"\u2003("},{"entry":"\u2003\u2003\u2003[in] PCWSTR className,\u2003\u2003\u2003\u2003\/\/ Class name,"},{"entry":"unique within the namespace"},{"entry":"\u2003\u2003[out, retval] IUIClassType **classType"},{"entry":"\u2003);"},{"entry":"};"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(318929FF-80FF-47bf-B7C3-8F78A7A76628),"},{"entry":"\u2003helpstring(\u201cIUIClassType Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to a client-created object representing the type of a class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"interface IUIClassType: IUnknown",{"@attributes":{"id":"p-0061","num":"0060"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Initialize the class and register its properties and events"},{"entry":"\u2003\/\/ This may only be called once per namespace"},{"entry":"\u2003\/\/ All calls to the IUIClassDeclaration passed in should be made before"},{"entry":"this method returns"},{"entry":"\u2003HRESULT"},{"entry":"\u2003Initialize"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUITypeManager *typeManager,","\/\/ The one"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"TypeManager, which can be used for obtaining the base class"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUIClassDeclaration *classDeclaration","\/\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IUIClassDeclaration to be used for registering properties and events"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the base class type"},{"entry":"\u2003\/\/ This may be called multiple times and should always return the same"},{"entry":"answer"},{"entry":"\u2003\/\/ Every class may have a base class, with the sole exception of"},{"entry":"DependencyObject"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetBaseClassType"},{"entry":"\u2003("},{"entry":"\u2003\u2003[out, retval] IUIClassType **baseClassType"},{"entry":"\u2003);"},{"entry":"};"},{"entry":"cpp_quote(\u201c#ifndef USE_HELPER_TEMPLATES\u201d)"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(A1E9854E-16B9-4857-BD70-F8813A3B5FEE),"},{"entry":"\u2003helpstring(\u201cIUIClassFactory Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to a client-created class factory object"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"interface IUIClassFactory: IUnknown",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Create an instance of the class and return the requested interface"},{"entry":"\u2003HRESULT"},{"entry":"\u2003CreateInstance"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003[in] REFIID riid,","\/\/ Requested Interface ID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003[out, retval, iid_is(riid)] IUnknown **object"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Create an instance of the class to serve as the base class of an instance"},{"entry":"of another class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003CreateBaseInstance"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003[in] IUnknown *outerObject,","\u2003\/\/ The instance"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"of the derived class"},{"entry":"\u2003\u2003[out, retval] IUnknown **object"},{"entry":"\u2003);"},{"entry":"};"},{"entry":"\/\/ The currently supported types of properties"},{"entry":"typedef enum"},{"entry":"{"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003UI_PROPERTY_TYPE_DATA,","\/\/ An"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"arbitrary block of bytes, containing no pointers - each data property has"},{"entry":"its own fixed size"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003UI_PROPERTY_TYPE_STRING,","\u2002\/\/ A null-"]},{"entry":"terminated Unicode (UTF-16) string"},{"entry":["\u2003UI_PROPERTY_TYPE_OBJECT,","\u2002\/\/ An"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"IUnknown*, which may be AddRef'ed and Released appropriately"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003UI_PROPERTY_TYPE_CHILD,","\/\/ A child"]},{"entry":"IUITreeElement*"},{"entry":["\u2003UI_PROPERTY_TYPE_CHILDLIST","\u2003\/\/ A list of"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"IUITreeElement* children"},{"entry":"} UI_PROPERTY_TYPE;"},{"entry":"\/\/ Event routing strategies"},{"entry":"typedef enum"},{"entry":"{"},{"entry":"\u2003UI_ROUTING_STRATEGY_TUNNEL,"},{"entry":"\u2003UI_ROUTING_STRATEGY_BUBBLE,"},{"entry":"\u2003UI_ROUTING_STRATEGY_TUNNEL_THEN_BUBBLE"},{"entry":"} UI_ROUTING_STRATEGY;"},{"entry":"[v1_enum]"},{"entry":"typedef enum"},{"entry":"{"},{"entry":"\u2003UI_PROPERTY_DEPENDENCY_NONE\u2003= 0x00000000,"},{"entry":"\u2003UI_PROPERTY_DEPENDENCY_MEASURE\u2002= 0x00000001,"},{"entry":"\u2003UI_PROPERTY_DEPENDENCY_ARRANGE\u2002= 0x00000002,"},{"entry":"\u2003UI_PROPERTY_DEPENDENCY_RENDER\u2002= 0x00000004"},{"entry":"} UI_PROPERTY_DEPENDENCIES;"},{"entry":"cpp_quote(\u201cDEFINE_ENUM_FLAG_OPERATORS-"},{"entry":"(UI_PROPERTY_DEPENDENCIES"},{"entry":");\u201d)"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(C8090FD7-1D36-4db0-8B80-3D791F1AC0E4),"},{"entry":"\u2003helpstring(\u201cIUIClassDeclaration Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to a system-created object passed to IUIClassType::Initialize,"},{"entry":"to be used for registering properties and events supported by a class"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"interface IUIClassDeclaration: IUnknown",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ DependencyObject concepts"},{"entry":"\u2003\/\/ Register a data property that may be managed by the base"},{"entry":"DependencyObject"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RegisterDataProperty"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003[in] PCWSTR propertyName,","\u2003\u2003\u2003\/\/ Property name,"]},{"entry":"unique for the class"},{"entry":["\u2003\u2003\u2003[in] UINT32 size,","\/\/ The size of the"]},{"entry":"property, in bytes - should be > 0"},{"entry":"\u2003\u2003[out, retval] IUIProperty **property"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Register a property that may be managed by the base DependencyObject"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RegisterProperty"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003[in] PCWSTR propertyName,","\u2003\u2003\u2003\/\/ Property name,"]},{"entry":"unique for the class"},{"entry":["\u2003\u2003\u2003[in] UI_PROPERTY_TYPE type,","\u2003\u2003\u2003\u2003\/\/ The type of"]},{"entry":"the property, may not be UI_PROPERTY_TYPE_DATA"},{"entry":"\u2003\u2003[out, retval] IUIProperty **property"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Register a property that may be managed by instances of the class directly"},{"entry":"(which may or may not in turn call the base DependencyObject)"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RegisterCustomProperty"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003\u2003[in] PCWSTR propertyName,","\u2003\u2003\u2003\/\/ Property name,"]},{"entry":"unique for the class"},{"entry":["\u2003\u2003\u2003[in] UI_PROPERTY_TYPE type,","\u2003\u2003\u2003\u2003\/\/ The type of"]},{"entry":"the property"},{"entry":["\u2003\u2003\u2003[in] UINT32 vtableOffsetSet,","\u2003\u2003\/\/ Vtable offset of"]},{"entry":"set method with appropriate signature for the given type"},{"entry":"\u2003\u2003[out, retval] IUIProperty **property"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the handler to be called when the value of any property changes on"},{"entry":"instances of the class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetGenericPropertyChangeHandler"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] IUIGenericPropertyChangeHandler *handler","\u2003\u2003\u2003\u2003\u2003\/\/ Handler"]},{"entry":"to be called"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the handler to be called when the value of the given property changes"},{"entry":"on instances of the class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetPropertyChangeHandler"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ Property that, when"]},{"entry":"changed, may cause handler to be called"},{"entry":["\u2003\u2003[in] IUIPropertyChangeHandler *handler","\u2003\u2003\u2003\u2003\/\/ Handler to"]},{"entry":"be called"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the aspects of layout and rendering that depend on a given property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetPropertyDependencies"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property for"]},{"entry":"which the dependencies are being set"},{"entry":["\u2003\u2003[in] UI_PROPERTY_DEPENDENCIES dependencies","\u2003\u2003\u2003\u2003\u2003\u2003\/\/"]},{"entry":"The layout and rendering dependencies on the property"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the default value of a data property on instances of the class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetPropertyDefault"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_DATA"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] UINT32 size,","\/\/ Size of the value, in"]},{"entry":"bytes; this should match the size registered for the property"},{"entry":["\u2003\u2003[in, size_is(size)] const void *value","\u2003\u2003\/\/ Default value of"]},{"entry":"the property"},{"entry":"\u2003);"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\/\/ Set the default value of a string property on instances of the class"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetStringPropertyDefault"},{"entry":"\u2003("},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"interface IUIDependencyObject: IUnknown",{"@attributes":{"id":"p-0067","num":"0066"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"{"},{"entry":"\u2003\/\/ Method to be called by derived objects at construction time, so a"},{"entry":"DependencyObject knows the type of the object it is being re-used by"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetClassType"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUIClassType *classType","\u2003\u2003\/\/ The class of the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"outermost (most-derived) object aggregating this DependencyObject"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the class type of the outermost (most-derived) object aggregating this"},{"entry":"DependencyObject"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetClassType"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[out, retval] IUIClassType **classType","\u2003\u2003\u2003\/\/ The class of"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"the outermost (most-derived) object aggregating this DependencyObject"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Set the value of a data property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetValue"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to set,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_DATA"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003[in] UINT32 size,","\/\/ Size of the value, in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bytes; this should match the size registered for the property"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in, size_is(size)] const void *value","\u2003\u2003\/\/ New value of the"]},{"entry":"property"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Set the value of a string property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetStringValue"},{"entry":"\u2003("},{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to set,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_STRING"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] PCWSTR value","\u2003\/\/ New value of the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"property - the system may make its own copy of the string"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Set the value of an object property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003SetObjectValue"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to set,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_OBJECT"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[in] IUnknown *value","\u2002\/\/ New value of the"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"property - the system may AddRef the object for as long as it is stored"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the value of a data property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetValue"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003\u2003[in] IUIProperty *propety,","\u2003\/\/ The property to get,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_DATA"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003\u2003\u2003[in] UINT32 size,","\/\/ Size of the value, in"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"bytes; this should match the size registered for the property"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[out, retval, size_is(size)] void *value","\u2003\u2003\/\/ The current"]},{"entry":"value of the property"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the value of a string property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetStringValue"},{"entry":"\u2003("},{"entry":["\u2003\u2003\u2003\u2003\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to get,"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_STRING"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003[out, retval, annotation(\u201c_deref_out\u201d)] PWSTR *value","\u2003\u2003\u2003\u2003\/\/ The"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"current value of the property - the client should CoTaskMemFree this string"},{"entry":"when finished with it"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the value of an object property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetObjectValue"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to get,"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"which should have been registered with type UI_PROPERTY_TYPE_OBJECT"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003[out, retval] IUnknown **value","\u2003\u2003\/\/ The current"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"value of the property - the client should Release this pointer when finished with"},{"entry":"it"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Get the aspects of layout and rendering that depend on a given property"},{"entry":"\u2003HRESULT"},{"entry":"\u2003GetPropertyDependencies"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] IUIProperty *property,","\u2003\/\/ The property to get"]},{"entry":"the dependencies of"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2003[out, retval] UI_PROPERTY_DEPENDENCIES *dependencies"},{"entry":"\/\/ The layout and rendering dependencies on the property"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Add a handler for a given event"},{"entry":"\u2003\/\/ Any number of handlers may be added for a given event on a given"},{"entry":"DependencyObject"},{"entry":"\u2003HRESULT"},{"entry":"\u2003AddHandler"},{"entry":"\u2003("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2003[in] IUIEvent *event,","\/\/ The event to handle"]},{"entry":["\u2003\u2003[in] IUIEventHandler *eventHandler","\u2003\u2003\u2003\/\/ The handler to"]},{"entry":"be called when the event is raised"},{"entry":"\u2003);"},{"entry":"\u2003\/\/ Raise an event on this DependencyObject"},{"entry":"\u2003\/\/ All of the registered handlers for the given event on this"},{"entry":"DependencyObject may be called"},{"entry":"\u2003HRESULT"},{"entry":"\u2003RaiseEvent"},{"entry":"\u2003("},{"entry":["\u2003\u2003[in] IUIEvent *event,","\u2003\/\/ The event to be"]},{"entry":"raised"},{"entry":["\u2003\u2003[in, unique] IUnknown *eventArgs","\u2003\u2003\u2003\/\/ The arguments"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"266pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"to be passed to each event handler - this should be an interface with the ID"},{"entry":"registered for the event"},{"entry":"\u2003);"},{"entry":"};"},{"entry":"["},{"entry":"\u2003object, local, pointer_default(unique),"},{"entry":"\u2003uuid(A4EFBC06-40A3-4f39-B26E-4E82FB264E8E),"},{"entry":"\u2003helpstring(\u201cIUITreeElementType Interface\u201d)"},{"entry":"]"},{"entry":"\/\/ Interface to the IUITreeElement Type, the base class of all UI classes which"},{"entry":"participate in the Tree"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"These interfaces are part of a UIOM API that controls the loading, registration, instantiation, and initialization of UIOM classes which, in some embodiments, inherit properties and\/or functionality from the DependencyObject base class.","Various techniques may be described herein in the general context of software or program modules. Generally, software includes routines, computer-executable instructions, programs, objects, components, data structures, and so forth that perform particular tasks or implement particular abstract data types. An implementation of these modules and techniques may be stored on or transmitted across some form of computer-readable media. Computer-readable media can be any available medium or media that can be accessed by a computing device. By way of example, and not limitation, computer readable media may comprise \u201ccomputer storage media\u201d.","\u201cComputer storage media\u201d include volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules, or other data. Computer storage media include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by a computer.","The above-described principles and techniques provide for user interface creation using markup language and object-oriented programming techniques. Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like features.",{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
