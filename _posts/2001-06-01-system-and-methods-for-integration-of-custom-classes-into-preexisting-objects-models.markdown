---
title: System and methods for integration of custom classes into pre-existing objects models
abstract: Computer-implemented methods, systems and apparatus implement techniques for generating custom coclasses. A runtime environment includes a client application implementing an object model, which includes a hierarchy of object classes that can be instantiated in the client application. The object model includes class templates, each having an associated class type, and includes class functionality information—including required class functionality and elective class functionality—for custom classes that can be implemented in the client application. When a user requests the creation of a custom class of a specified type, a design-time environment is launched and class functionality information is retrieved for a class template associated with the type. A custom class is created, based on a class definition defining a class having the required class functionality and the specified elective class functionality. Objects belonging to the custom class can be instantiated from the runtime environment independent of the design-time environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06968538&OS=06968538&RS=06968538
owner: Symyx Technologies, Inc.
number: 06968538
owner_city: Santa Clara
owner_country: US
publication_date: 20010601
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This invention relates to the field of graphical computer programming environments.","In traditional object-oriented programming environments, the incorporation of new functionality into an existing object model involved the hand generation of extensive quantities of software code specifically defining the implementation of the new functionality\u2014e.g., one or more additional object classes encapsulating the desired functionality\u2014and integrating that implementation into the existing object model. To do so typically required the application developer to assess user needs, evaluate the impact of any proposed change on hardware and software system components and implement changes at the source code level, using object-oriented programming languages such as C++. This process placed the extension of an existing object model squarely in the hands of the application developer, requiring a level of programming knowledge beyond the reach of many application users.","More recently, the introduction of integrated development environments that are directly embedded into a software application such as Microsoft's Visual Basic\u00ae for Applications (VBA) has simplified the process of application customization and extension for the end user. VBA includes both host and standalone project types that an end user can create. Host projects allow the end user to extend the object model of an application, but the extensions are limited to objects that are tightly coupled to the GUI instance of the application and the VBA IDE. As a result, such objects cannot be publicly created separate from the specific application instance. Also the mechanisms involved do not provide for easily adding new templated classes to the object model for extension by the end user and do not assist the user in integrating new instances into an instance of an existing object model.","VBA 6.x,, available from Microsoft Corporation, includes a multithreading capability (VBAMT) that allows the developer to create multithreaded projects, i.e., projects containing multiple threads that can execute concurrently. These projects are \u201cstandalone\u201d in that the code that executes is not tightly coupled to the GUI instance of the application that hosts the VBA IDE. The process begins with a host application that registers one or more multithreading (\u201cMT\u201d) project types. Using these registered project types and an ActiveX VBA MT Designer, users of the application can create multithreaded projects, which are compiled and published as stand-alone DLLs.","A published MT project DLL can be used by other multithreaded host applications. To do so, a thread creates an instance of a VBA MT runtime object and an instance of a global application object associated with the MT project, against which the MT project executes code. The VBA MT runtime object is initialized through the IVbaMT interface, which loads all registered MT project DLLs. The collection of loaded MT project DLLs can be accessed through the IVbaMTDlls interface. Any number of threads can use an MT project DLL concurrently.","When a new MT project is created, a design instance of the MT Designer is created and associated with a logical group of threads. The user can then add classes, forms, and modules to the project. However, VBA MT provides that these classes are not publicly creatable outside of the VBA environment. Nor are these classes instances of the templated objects of an object model. The VBAMT capability provides no mechanisms to assist the end user with integrating a VBAMT project object into an enterprise wide application with a minimum of knowledge by the end user of the specifics of how to integrate into the enterprise environment.","VBA does allow the public creation of an ActiveX designer instance from a standalone project, but ActiveX designers require high-level programming skill and still do not provide the convenient object model integration support that a typical end user would require.","The invention provides methods, systems, and computer program products that provide the benefits of an application-embedded integrated development environment in designing object classes, but that allow users to instantiate and use objects of those classes outside of the development environment.","In general, in one aspect, the invention features methods, systems and computer programs implementing programming techniques for generating custom object classes. The techniques include providing a runtime environment including a client application implementing an object model, receiving in the client application a first user input including a custom class creation request specifying a class type for a custom class, in response to the first user input, launching a design-time environment for defining custom object classes, retrieving class functionality information for a class template associated with the specified class type, receiving in the design-time environment a second user input specifying a subset of the elective class functionality to be implemented in the custom class, and generating in the design-time environment a class definition defining a custom class having the required class functionality and the specified elective class functionality. The object model includes a hierarchy of object classes capable of being instantiated in the client application. The object model also includes one or more class templates. Each class template has an associated class type and includes class functionality information for a custom class that can be implemented in the client application. The class functionality information for each class template includes a set of required class functionality for the class type and a set of elective class functionality for the class type. Objects belonging to the custom class can be instantiated from the runtime environment independent of the design-time environment.","Particular implementations of the invention can include one or more of the following features. The class functionality information can include information identifying a set of mandatory interfaces defining the required class functionality for the associated class type and information identifying a set of elective interfaces defining the elective class functionality for the associated class type. After the class functionality information for the class template is retrieved, a list of the set of elective interfaces defining the elective class functionality can be displayed to the user. The second user input can include a user selection of one or more of the elective interfaces from the displayed list of elective interfaces. Generating the class definition can include aggregating a plurality of objects implementing the mandatory interfaces and the selected elective interfaces. Each of the elective interfaces can have a set of associated interface properties and interface methods, and a third user input can be received in the design-time environment including one or more code fragments further defining one or more of the interface properties and\/or interface methods associated with at least one of the selected elective interfaces. Code skeletons can be generated for one or more of the interface properties and interface methods associated with the selected elective interfaces based on object metadata describing the specified elective interface that is associated with the interface property or interface method. Code skeletons can be displayed to the user. The design-time environment can include a graphical user interface. The runtime environment can be independent of the graphical user interface. An object of the custom class can be instantiated in the runtime environment. The class definition can be generated as a dynamic linked library. Instantiating the object can include calling the dynamic linked library in the runtime environment. The runtime environment can include a wrapper object operable to execute code in the dynamic linked library. The client application can be an automated process control program and the custom class can be a resource class for defining an apparatus driver for an apparatus coupled to the automated process control program. The client application can be an automated process control program and the custom class can be an action class for defining an action capable of being implemented by the automated process control program.","Advantages that can be seen in particular implementations of the invention include one or more of the following. The user can create and implement custom component object classes in a graphical design environment, while resulting instances of the custom class are decoupled from the graphical design environment. The custom class instances can be integrated into a larger object hierarchy that is separate from the graphical design environment. Decoupling the object model and services from a particular graphical design environment provides greater scalability, reuse, extensibility, and transactional isolation. In this conceptualization, a particular graphical user interface or application is just a \u201cview\u201d or \u201cport\u201d into the particular object model.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","The invention provides a computer-implemented process and computer program products for an end user to define component object classes (or \u201ccoclasses\u201d) in a host graphical design environment and to instantiate those classes as objects suitable for merging into an existing object model that is separate from the graphical design environment (e.g., an object hierarchy implemented in a computer program application running in a process separate from the host design environment). As used in this specification, a \u201ccoclass\u201d is a component class description that specifies the definition of that class\u2014that is, the functionality that members of the class must possess\u2014typically by specifying the interfaces that class members (instances) must implement. A component class is a class that can be instantiated by programming language independent means. Coclasses are generally implemented in DLLs or in executable files, each of which can contain one or more coclasses. As used in this specification, an \u201cobject\u201d is a particular instance of a coclass. An object's functionality is defined by the interfaces specified for the corresponding coclass, which define the set of methods that control the object's operation. Although the disclosed implementation describes the integration into an existing object model of coclasses defined in the Visual Basic for Applications integrated development environment (\u201cVBA IDE\u201d) (available from Microsoft Corporation of Redmond, Wash. and Summit Software of Jonesville, N.Y.) the invention is equally applicable to other well-known programming environments, such as, e.g., a Java Virtual Machine or a variety of scripting languages.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","130","120","130","135","130","137","120","110","110","140","150","155","150","145","140","120","130","152","100","160","110","110","140","110","140"]},"Referring to , coclass design module  provides a design-time environment  including a container application  hosting an integrated development environment. Container application  includes an instance of a custom Add-In . As used in this specification, an Add-In is a software component that is placed into a software application (and its embedded IDE) to configure that application in a predefined (or particular) way. Add-In  includes a code generator object . Additionally, container application  can contain multiple software projects  in which new coclasses are defined, each of which contains an instance of a custom designer . As used in this specification, a designer is a software component that can be placed into a software project to configure that project in a predefined (or particular) way. Each project also includes the coclass design time code  for a new coclass. Object instantiation module  provides a runtime environment  that includes context wrapper objects , which provide an interception layer that executes code in a project , and include an instance of a system multithread runtime object  and an instance of the custom designer runtime  that is compatible with system multithread runtime object .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["300","135","137","310","320","135","120","137","110","135","330","120","152","340"]},"Coclass design module  displays the list of interfaces to the user on output device  and the user selects one or more interfaces to be implemented in the coclass (step ). Coclass design module  creates a new project and a coclass (step ). For each selected interface, coclass design module  locates a type library  containing property and method definitions for each property and method associated with the interface, and a code skeleton for each such property and method, which are displayed to the user (step ). The user can then enter additional code implementing the properties and methods (step ), and completes the process by compiling and registering the project containing the coclass (step ). The coclass is then available for use in runtime environment , as will be described in more detail below.","In one implementation, the integrated development environment is implemented in the Visual Basic for Applications IDE, and includes Add-In  and a design-time instance of custom designer , both of which are compatible with the VBA IDE. In this implementation, projects  are generated in runtime environment  as VBA project dlls. In multithreaded VBA, there can only be one instance of a designer class in the dll per thread, and only designer runtime instances are directly externally creatable. Accordingly, system  uses the designer object in runtime environment  as a class factory for classes that would otherwise not be publicly creatable (e.g., classes normally flagged as PublicNotCreatable). Each project includes one of these designer objects. The designer used for VBA class object instantiation implements a class factory interface that creates an instance of the implementation of a templated VBA coclass. Also the designer provides for custom registration of the implementation of a templated VBA coclass. Other designers can be used in the VBA project for other purposes such as to design a database connection or a form.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 4A-E"},{"@attributes":{"id":"p-0034","num":"0033"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HKEY_CLASSES_ROOT (hive)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Object Model Controllers(list,key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CustomID(for each Object Model Controller)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Object Model Controller Name(value)"]},{"entry":[{},"CATIDs (list,key)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CATID(key)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Component Categories"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CATID"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"ElectiveInterfaces (list, contains interfaces that"]},{"entry":[{},"the user can implement in the VBA coclass,key)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(default)Interface Name(value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(multi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mandatory Implemented Interfaces(list, contains"]},{"entry":[{},"interfaces that must be implemented in the coclass"]},{"entry":[{},"and which are supplied to user)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(default)Interface Name(value)"]},{"entry":[{},"CLSID(Of implementation of the"]},{"entry":[{},"interface,value)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(multi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mandatory Non-Implemented Interfaces(list,"]},{"entry":[{},"contains interfaces that must be implemented in"]},{"entry":[{},"the coclass, but which must be provided by the"]},{"entry":[{},"user)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(default)Interface Name(value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(multi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Mandatory Default Interfaces(list, includes"]},{"entry":[{},"interfaces that will be supplied to user if no"]},{"entry":[{},"implementation is provided)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"IID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(default)Interface Name(value)"]},{"entry":[{},"CLSID(Of default implementation of"]},{"entry":[{},"the interface,value)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(multi)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Additional Designer Property Pages(list)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"CLSID(key)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Additional Type Libraries(list)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"TypeLib(key)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Threading Model(Value)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Upon receiving an instruction from the user to create an implementation of a coclass, client application  launches the design environment, loads an Add-In and passes the Add-In an object model controller ID (CATID) identifying the existing object model into which the new coclass is to be integrated (step ). The Add-In uses the CategoryID to retrieve from the registry a list of templated coclasses for the object model, which list is displayed to the user (step ). The user selects a coclass type to create (step ), and the Add-In gets a list of required and elective interfaces for the selected coclass type from the registry (step ). Registry data also identifies context information (e.g., mandatory or default interfaces) to be aggregated before and after the coclass. Registry data can also include additional designer property pages, which can be used in customizing a coclass within the IDE before saving and\/or making a project. In general, customizations are based on user selections in these property pages, which when implemented may, for example, programmatically inject code into the VBA coclass (e.g., through a coclass initialize method). Property pages may also permit binding of resources such as toolbar bitmaps into the compiled project dll. The Add-In displays an interface selection dialog, such as Interface Selection Dialog  shown in , discussed in more detail below, and the user selects the desired interfaces to be implemented in the new coclass from the list view (step )\u2014for example, by marking the boxes corresponding to the desired interfaces in list .","The Add-In gets from the registry a list of objects to be aggregated before and after the coclass and any additional designer property pages (step ), and prompts the user for a project name, opening the named project or creating a new project if the named project does not exist (step ). The Add-In creates an instance of the custom designer and creates a corresponding new VBA class in the specified VBA project (step ). The Add-In reads the type libraries for the selected interfaces and inserts code skeletons into a code pane for the new VBA class, as shown in  (step ). The Add-In adds \u201cImplements\u201d statements to the top of the code pane for each custom interface to be implemented by the new coclass. A code generator object generates property and method code skeletons for each interface to be implemented in the new VBA coclass.","The code generator object defines and implements an IVBACodeGenerator interface whose primary method is GenerateVBACode. GenerateVBACode takes an Interface ID in parameter, and searches in the registry for the type library containing the type information for that interface. The method then loads the type library and programmatically accesses the type information for the interface using known (e.g., Microsoft-defined) methods. The method uses the type information to generate a code segment including code skeletons of all of the property and methods defined by the interface. The Add-In adds the resulting code skeletons to the code pane for each of the properties and methods in the coclass. The user adds any desired code to the provided skeletons, as shown in FIG. D.","Coclass design module  implements the code and any customizations from the designer property pages (step ), and compiles and saves the project as illustrated in  (step ). The Add-In adds the ProgID for each new Public Creatable class to a Select Case implementation in the ISymyxVbaClassFactory::CreateInstance method in the Designer (step ), and adjusts the project dll Type Library and registry settings as will be described in more detail below (step ).","When the user instructs coclass design module 120 to compile the project (e.g., by selecting the Make entry in the File menu within the VBA IDE), the designer adds the custom code to the designer instance in the VBA IDE including the ISymyxVbaClassFactory::CreateInstance method which creates an instance of the VBA coclass and returns an automation reference to the instance. Next, the VBA IDE compiles the project into a project dll and performs standard VBA registration on the dll. Then the VBA IDE calls the IDesignerRegistration::GetRegistrationInfo method in the designer, which serializes custom registration data into a byte array, a pointer to which is passed to the DllRegisterDesigner for custom registration. Finally, the VBA IDE calls the DllRegisterDesigner function in the designer, which makes custom registry entries for the new coclass as set out in Table 2.",{"@attributes":{"id":"p-0040","num":"0039"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"HKEY_CLASSES_ROOT(hive)"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"CLSID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\u2002(Default) \u2003{ProgID} \u2002(value)"]},{"entry":[{},"AppID \u2003{AppID}} \u2002(value)"]},{"entry":[{},"Description {ProgID} ( value added by the custom"]},{"entry":[{},"registration code)"]},{"entry":[{},"InsertCategory Custom( value added by the custom"]},{"entry":[{},"registration code)"]},{"entry":[{},"Resource ID( value added by the custom registration"]},{"entry":[{},"code)"]},{"entry":[{},"Additional Designer Property Pages( key added by the"]},{"entry":[{},"custom registration code)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002(value not set) (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) (value not set) (value)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Aggregate After( key added by the custom registration"]},{"entry":[{},"code)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002(value not set) (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) (value not set) (value)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Aggregate Before( key added by the custom registration"]},{"entry":[{},"code)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002(value not set) (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CLSID} \u2002(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) (value not set) (value)"]},{"entry":[{},"(multi)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Implemented Categories"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"{CATID \u2002(Automation Objects set by VBE) (key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002(value not set) (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{CATID} (User selected CATID added by the custom"]},{"entry":[{},"registration code) \u2002(key)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) (value not set) (value)"]},{"entry":[{},"(others)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"InProcServer32( key added by the custom registration"]},{"entry":[{},"code)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) \u2002{path}\\VBACoclassWrapper.dll} (value)"]},{"entry":[{},"Threading Model"]},{"entry":[{},"{path}\\VBACoclassWrapper.dll} (value)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"ProgID(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002{ProgID} \u2002(value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Programmable (key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) (value not set) (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"SymyxVBAClassFactory( key added by the custom"]},{"entry":[{},"registration code)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002{ CLSID } \u2002(value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"TypeLib(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(Default) \u2002{LIBID} (value)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"VERSION(key)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(Default) {x.x} (key)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this implementation, coclass design module  updates the registry settings for the VBA PublicCreateable coclasses, adding four keys: (1) an InProcServer32 key having a string value identifying the path to an interception layer and a string value identifying the threading model; (2) an ISymyxVbaClassFactory key having a string value identifying the class ID (\u201cCLSID\u201d) of the instance of the designer in the VBA project; (3) an AggregateBefore key identifying (e.g., by CLSID) any coclasses to be aggregated by object instantiation module  before the new coclass is instantiated; (3) an AggregateAfter key identifying (again, e.g., by CLSID) any coclasses to be aggregated by object instantiation module  after the new coclass is instantiated. Three values are added to the default key: a string value of a menu insert category; a string value of a menu description (e.g., used for a menu or toolbar button caption); and a numeric value identifying resource ID to access resources bound into the project dll (e.g., used to access a toolbar button bitmap).","Next, DllRegisterDesigner also updates the bound dll type library by loading the bound type library and accessing its ITypeLib interface. It then creates a temporary type library file that is essentially a clone of the bound one, iterating through the bound type library and copying the type information using the ICreateTypeLib and ICreateTypeInfo interfaces on the temporary type library file, setting the type flags for all of the new coclasses to PublicCreateable, and swapping the bound type library in the dll with the cloned type library by updating the resource section of the project dll.","The user can save the project to a disk file or to other storage, such as a database. When the project is saved (e.g., by selecting a Save entry in the File menu, the design-time environment serializes standard VBA project information into the storage location. The design-time environment then calls the IPersistStream::Save method in the designer, which serializes the context information into the project file.","The user can open a saved project as illustrated in FIG. E. When the user opens a saved project within the VBA IDE, the design-time environment deserializes the standard project information from the storage location and recreates the design-time instance of the designer and the coclasses. Next, the design-time environment calls the IPersistStream::Load method in the designer to deserialize the context information for the PublicCreateable coclasses.","When the user inserts\/deletes the custom designer into\/from a project within the design-time environment, or inserts\/deletes a class into\/from a project within the design-time environment, the VBCommandBarEvents::Click event handler in the Add-In and designer, respectively, add to or delete from the data caches in the Add-In and designer. When the user selects deleting a project from the VBA IDE, the Add-In's VBProjectsEvents::ProjItemRemoved handler removes the project's custom settings in the data structures in the Add-In.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5","b":["500","300","135","137","110","510","130","520","100","530","100","540","550","560","100","570","580","100","590","135","137"]},"Object instantiation module  creates coclass instances using known methods. Programs written in the C++ language use #import on the type library or libraries or #include on the Microsoft Interface Definition Language generated header files, which do component creation through the normal COM application programming interface calls. Visual Basic and VBA implementations add a reference to the project dll: the Add-In adds references to the type libraries of implemented interfaces, and instances are created through the CreateObject call or the New operator. Scripting clients instantiate the objects with a CreateObject call.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6","b":"130"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 7","FIG. 6. A"]},"VBA coclasses can implement more than one dual interface, but Automation clients can normally only access the default interface of a coclass. The multiple dual interface implementation in VbaCoclassWrapperObj allows Automation clients to access all of the dual interfaces of a VBA coclass.","System  implements multiple dual interfaces through the CNestedDispatch and CFlyweightDispatch.classes in NestedDispatch.h, as is illustrated in . Normally, an automation object can only support one automation interface (the default interface). Additional automation objects are returned as a property or the out parameter on a method of the default interface such as in a standard automation hierarchy. In one implementation, a flyweight object is created for each non-default interface on demand and cached so that the flyweight object is available for both early and late bound automation calls as well as vtable calls, and includes a custom vtable. The first seven entries in the vtable contain addresses to methods that pass the IUnknown and IDispatch methods to the flyweight object. The IUnknown implementations delegate to the controlling unknown's methods except that calling QueryInterface for the IDispatch interface returns the flyweight's object IDispatch interface. For vtable calls of the methods of a custom interface, the custom vtable entry calls an assembler method that swaps the \u201cthis\u201d pointer on the call stack with the pointer to vtable of the custom interface as implemented in an aggregated object such as the VBA class instance. The flyweight object caches this interface pointer as a fixed offset into the flyweight object. The flyweight object also caches the ITypeInfo pointer for the custom interface in the aggregated object so that the flyweight object can delegate the IDispatch calls to it. The use of the ITypeInfo interface enables the generic implementation of the IDispatch interface through the flyweight object.","The CNestedDispatch class implements IDispatch on behalf of the default interface in VbaCoclassWrapperObj. A derived implementation of CComObject (CMultiDispComObject) provides an implementation of IUnknown::QueryInterface that returns a pointer to a flyweight object for a nondefault interface after either getting the cached pointer or creating a new flyweight object on behalf of the nondefault interface. The CNestedDispatch holds the list of cached flyweight objects and the creation\/initialization code.","The implementation in VbaCoclassWrapperObj is essentially a custom implementation of aggregation. The implementation of the multi-dual interfaces is embedded in the classes CNestedDispatch and CFlyweightDispatch and is not dependent on the custom aggregation. The CVbaCoclassWrapperObj uses those classes to provide interface pointers to clients, but the IUnknown::QueryInterface implementation is provided by a CMultiDispComObject that handles the custom aggregation. The CNestedDispatch and CFlyweightDispatch classes are useable in coclass implementations that do not use the custom aggregation implementation and are therefore independent of CVbaCoclassWrapperObj. Because one of the aggregated objects in VbaCoclassWrapperObj can be an ActiveX Template Library (ATL) implemented coclass that may use the multiple dual interfaces implementation, the ATL coclass has the option of a preprocessor switch that does not use the multidisp implementation when it is aggregated. Otherwise a multiple dual interfaces implementation would be provided by both the object and by VbaCoclassWrapperObj on behalf of the object or stipulate that such objects never derive from CNestedDispatch.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIGS. 10A-F","b":"100"},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"interface IValve : IDispatch"]},{"entry":[{},"{"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[propget] HRESULT Positions([out, retval] long *pVal);"]},{"entry":[{},"[propput] HRESULT Position([in] long newVal);"]},{"entry":[{},"[propget] HRESULT Position([out, retval] long *pVal);"]},{"entry":[{},"HRESULT Initialize( );"]},{"entry":[{},"HRESULT Wait( );"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"For example, a \u201cSet Valve Position\u201d action object can move the valve to a new position by setting the valve's \u201cPosition\u201d property. Preferably, the \u201cSet Valve Position\u201d object has no knowledge of the inner workings of the particular valve; instead, the generic characteristics of a stream selection valve are abstracted into the IValve interface. This permits programmers and\/or users to develop new valve resources (and, by analogy, other resources and\/or actions), and allows those new resources to be used transparently by existing valve actions, so long as the new resource implements the IValve interface. In addition, since the resources and actions are implemented as COM objects, the new resource can be implemented in a separate DLL and made available to the rest of the application by registering the DLL with the operating system. The rest of the application's code base remains untouched by the addition of the new resource. This modularity promotes extensibility and maintainability.","To create a custom coclass, the user first selects the Create VBA Coclass button  in window . Coclass design module  displays an Interface Selection Dialog  on output device . The user selects an object model controller and a custom object type (e.g., a Resource type defining a device driver for controlling an apparatus  or an Action type defining an action to be performed by apparatus control system ) from dropdown lists  and , respectively, and selects one or more interfaces from list  for implementation in the custom object. After the user enters a new project name or selects an existing project file, system  launches the VBA IDE, creates or opens the specified project, and creates an instance of the custom designer and a new class. The code generator generates code skeletons  for each property and method of the selected interfaces, which are displayed in code pane . The user then adds custom code  and saves the project. Once coclass design module  compiles the project file into a project dll, the new custom coclass is available as an entry  in the list  of available objects in the object model environment (implemented in client applications , ). Selection of the custom coclass entry in client applications ,  causes object instantiation module  to create an instance of the coclass, for example, the custom valve object  shown in FIG. F. Although  illustrate a graphical-user-interface based implementation of system , those of ordinary skill in the art will recognize that comparable functionality could readily be implemented in a non-graphical environment using known programming techniques.","To continue the process control example, assume a user desires to add support for a new (hypothetical) \u201cXYZ\u201d stream selection valve. After initiating the client application, the user selects button  to create a custom coclass and selects \u201cImpressionist Object Model Controller\u201d and \u201cSymyx Impressionist Custom Resource\u201d from the dropdown lists  and  in the resulting dialog. A list of interfaces is displayed from which the user can choose.","Some interfaces must be implemented in order for the object to work with the specified object model controller. In this example, the INode interface must be implemented, because it provides the properties and methods used by client application to display, modify and persist the object. Mandatory interfaces are selected and grayed-out to prevent de-selection by the user. While the INode interface is mandatory, the user does not need to implement it because the client application provides an implementation of INode by aggregating another coclass that provides the INode interface. Thus, much of the complexity involved in creating a resource is completely hidden from the user.","Other interfaces are elective and must be selected based on the type of resource being implemented. In this example, the user selects the IValve interface (and clicks \u201cOK\u201d). The client application responds by creating a new coclass project that includes skeleton source code for a class that implements the selected elective interfaces. At this point, the user could save and compile the project, and the new resource would be available for use by the valve-related actions in the client application. It would perform no useful function, however, since the implementation is empty. The specific programming necessary to interface with the actual device is provided by the user.","In this example, objects will typically have associated properties (displayed in the left hand pane of the object editor when the object is selected), through which the user can customize or configure the object. Thus, for example, a valve resource may have properties for specifying the valve's address and number of positions. This property information is managed by the aggregated coclass implementing INode (and can be included in object representations\u2014e.g., in XML\u2014so property settings can be persisted). Properties can be added to custom coclasses in the Class_Initialize method (as illustrated in FIG. D). The global variable \u201cTheContextObject\u201d provides a mechanism by which the custom coclass can access its aggregated coclasses. Once the INode interface pointer has been obtained, property objects (m_Address and m_NumPositions in this case) can be created, configured, and added to the INode properties collection. Coclass properties can be created, deleted and configured using, e.g., a property editor incorporated in the VBA environment. An analogous process can be followed to create a custom action (or, indeed, some other coclass in a corresponding environment), except that the list of available interfaces will be different (e.g., action objects may be required to implement an IAction interface).","The invention can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Apparatus of the invention can be implemented in a computer program product tangibly embodied in a machine-readable storage device for execution by a programmable processor; and method steps of the invention can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. Each computer program can be implemented in a high-level procedural or object-oriented programming language, or in assembly or machine language if desired; and in any case, the language can be a compiled or interpreted language. The custom objects of the invention can be implemented as component objects implementing an appropriate interface or interfaces in a component software architecture such as Microsoft Corporation's Component Object Model (COM) or Distributed Component Object Model (DCOM) or NET standards, or the Object Management Group's Common Object Request Broker Architecture (CORBA) standard, or the Simple Object Access Protocol (SOAP) or related HTTP based protocols. Suitable processors include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory and\/or a random access memory. Generally, a computer will include one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM disks. Any of the foregoing can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).","A number of embodiments of the invention have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example, although coclass design module  has been described as being implemented in Visual Basic for Applications, the functionality of that program can be implemented in other programming environments. Similarly, although the custom object definition and instantiation features have been described in the context of an automated process control object model, those features can be advantageously applied to the extension of other object models and the implementation of other templated domain object types as well, such as, for example and without limitation, non-GUI server-side business logic and data access components, domain model objects, and client side GUI forms. Accordingly, other embodiments are within the scope of the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIGS. 4B-C","FIG. 4A"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4D"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 4E"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 8 and 9"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 10A-F"},"Like reference symbols in the various drawings indicate like elements."]},"DETDESC":[{},{}]}
