---
title: Dealing with annotation versioning through multiple versioning policies and management thereof
abstract: Methods, systems, and articles of manufacture for maintaining annotations for changing source documents are provided. For some embodiments, an annotation system may support multiple policies, with each policy dictating how (or if) an annotation created for a version of a source document should be applied to subsequent versions of the source document. For some embodiments, a user creating an annotation may select from a group of available policies to be applied to the annotation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689578&OS=07689578&RS=07689578
owner: International Business Machines Corporation
number: 07689578
owner_city: Armonk
owner_country: US
publication_date: 20040115
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS","An Exemplary Environment","Exemplary Annotation Versioning Policies","Exemplary Graphical User Interface Screens","Annotation Versioning Policy Enforcement","Conclusion"],"p":["The present application is related to commonly-owned U.S. Pat. No. 6,519,603, entitled \u201cMethod And System For Organizing An Annotation Structure And For Querying Data And Annotations\u201d, commonly-owned, co-pending application Ser. No. 10\/083,075, entitled \u201cApplication Portability And Extensibility Through Database Schema And Query Abstraction,\u201d Ser. No. 10\/600,014, entitled \u201cUniversal Annotation Management System\u201d, Ser. No. 10\/310,192, entitled \u201cAnnotation Validation Using Partial Checksums\u201d, and application Ser. No. 10\/757,792, entitled: \u201cMaintaining Annotations for Distributed and Versioned Files\u201d, filed herewith, which are herein incorporated by reference in their entirety.","1. Field of the Invention","The present invention generally relates to annotating data objects and, more particularly, to maintaining annotations across different versions of data objects.","2. Description of the Related Art","An annotation system is one where descriptive information is stored about objects, or parts of objects, as an annotation. Some annotation systems store annotations separately, without modifying the objects themselves. An annotation store, typically a database, contains information for the annotation, typically in the form of descriptive text, or other classifiers. An indexing scheme is typically used to map each annotation to the object or positions of annotated portions within the object. The annotation system may be configured to display the annotation in response to the user selecting the annotated portions of the object. For example, one common method for displaying annotations is in a flyover text box generated when a user positions a mouse pointer in proximity to the annotated portion or portions of the object.","The annotations themselves may serve different functions for different applications. For example, for some applications, annotations may serve as an interactive help system, providing description of the functionality, or explain the use of the annotated object. As an example, in a business application, an annotation may explain the use of an economic performance parameter, such as a current year's revenue by division. For other applications, annotations may serve to provide expert feedback, comments, or clarifications from a reviewer or a creator of a document or other data object. As examples, the creator of a document may insert an annotation highlighting the relevance of a certain piece or group of data, while a reviewer of the same document may insert an annotation with instructions for revising the document, possibly to correct an error.","A challenge is presented, however, when an annotated document is changed, for example, creating a new version of the document. A policy should be established that determines how annotations should be maintained for different versions of a document. One approach is to apply a \u201cno-change\u201d policy on the document, whereby annotations are maintained for the original document only and do not apply to subsequent versions. While this approach is simple, there may be many cases where at least some annotations would apply to a subsequent version of a document, such as when the particular portion described by the annotation has not changed. Therefore, another approach would be to \u201ccarry-forward\u201d annotations to subsequent versions of a document. However, in some cases, some of the annotations may no longer apply, such as when an annotated portion of the document is edited to render the annotation invalid or deleted entirely. Further, even if the annotation does apply to the new version, annotation indexes indicating the corresponding annotated portions of the document may need to be updated to reflect the changes in the document.","Thus, each of these policies has drawbacks and using either alone provides a less than ideal solution. Accordingly, there is a need for an annotation system that supports multiple policies for maintaining annotations after changes to an annotated source document, for example, allowing an annotation author to select one or more policies that best fit a particular situation.","The present invention generally is directed to a method, system and article of manufacture for annotating multiple versions of a document.","One embodiment provides a method for applying annotations to multiple versions of a document generally including providing an interface allowing a user to create an annotation for a current version of a document and to specify how the annotation should be applied to a subsequent version of a document.","Another embodiment provides a method for managing annotations for multiple versions of documents. The method generally includes selecting one or more annotation versioning policies dictating how annotations made for a current version of a document should be applied to a subsequent version of the document and allowing creators of annotations for a current version of a document to select one or more of the annotation versioning policies to dictate how the annotations should be applied to subsequent versions of the document.","Another embodiment provides a computer-readable medium containing a program for managing annotation for multiple versions of documents. When executed by a processor, the program performs operations generally including providing an interface allowing a user to create an annotation for a current version of a document and to specify how the annotation should be applied to a subsequent version of a document.","Another embodiment provides a data processing system generally including at least one application for manipulating a document, an annotation store for storing annotation records containing annotations for the document, and one or more interface screens, accessible from the at least one application, allowing a user to create an annotation for a selected portion of a current version of the document and to specify how the annotation should be applied to subsequent versions of the document. The data processing system may also include an executable component generally configured to detect changes resulting in a subsequent version of the document and apply the annotation to the subsequent version of the document in a manner specified by the user via the one or more interface screens.","The present invention provides methods, systems, and articles of manufacture for maintaining annotations for changing source documents. For some embodiments, an annotation system may support multiple policies, with each policy dictating how (or if) an annotation created for a version of a source document should be applied to subsequent versions of the source document. A user creating an annotation may select from a group of available policies to be applied to the annotation.","As used herein, the term document generally refers to any type of content containing data object including, but not limited to, text documents, spreadsheets, schematics, images, media files, and the like. The term version, when applied to a document, merely refers to the content of the document at a corresponding time and does not imply that multiple versions of a document necessarily exist at any time. In other words, a subsequent version of a document may exist without of previous version still existing. Further, there is no implication that different versions of a document will have a common file name with version appended (e.g., v2, v3, etc.). Accordingly, a document modified and saved with an entirely different name may still constitute a different version of the document. As used herein, the term annotation generally refers to any type of descriptive information associated with one or more data objects. Annotations may exist in various forms, including textual annotations (descriptions, revisions, clarifications, comments, instructions, etc.), graphical annotations (pictures, symbols, etc.), sound clips, etc. While an annotation may exist in any or all of these forms, to facilitate understanding, embodiments of the present invention may be described below with reference to textual annotations as a particular, but not limiting, example of an annotation. Accordingly, it should be understood that the following techniques described with reference to textual annotations may also be applied to other types of annotations, as well, and, more generally, to any type of reference to a data object.","As used herein, the term change detection value generally refers to any numerical, derived, or filtered value, regardless of length, generated by an algorithm performed on portions of data to encode, detect changes in, or validate completeness of the portions of data. Any suitable algorithm may be used to generate the change detection value, including, but not limited to, simple summing algorithms and more complex algorithms, such as cyclic redundancy check (CRC) algorithms and MD5 filtering functions commonly used to generate checksums. Further, a change detection value may be larger than the portions of data or the portions of data may be used as a change detection value. While a change detection value may be all of these, to facilitate understanding, embodiments of the present invention may be described with reference to a checksum as a particular, but not limiting, example of a change detection value. Accordingly, the following references to checksums may be applied to change detection values in general.","Further, as used herein, the term user may generally apply to any entity utilizing the annotation system described herein, such as a person (e.g., an individual) interacting with an application program or an application program itself, for example, performing automated tasks. While the following description may often refer to a graphical user interface (GUI) intended to present information to and receive information from a person, it should be understood that in many cases, the same functionality may be provided through a non-graphical user interface, such as a command line and, further, similar information may be exchanged with a non-person user via a programming interface.","One embodiment of the invention is implemented as a program product for use with a computer system such as, for example, the enterprise system  shown in  and described below. The program(s) of the program product defines functions of the embodiments (including the methods described herein) and can be contained on a variety of computer-readable medium. Illustrative computer-readable mediums include, but are not limited to: (i) information permanently stored on non-writable storage media (e.g., read-only memory devices within a computer such as CD-ROM disks readable by a CD-ROM drive);(ii) alterable information stored on writable storage media (e.g., floppy disks within a diskette drive or hard-disk drive); or (iii) information conveyed to a computer by a communications medium, such as though a computer or telephone network, including wireless communications. The latter embodiment specifically includes information downloaded from the Internet and other networks. Such computer-readable mediums, when carrying computer-readable instructions that direct the functions of the present invention, represent embodiments of the present invention. A computer-readable storage mediums include CD-ROM disks readable by a CD-ROM drive and storage media (e.g., floppy disks within a diskette drive or hard-disk drive).","In general, the routines executed to implement the embodiments of the invention, may be part of an operating system or a specific application, component, program, module, object, or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine-readable format and hence executable instructions. Also, programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition, various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However, it should be appreciated that any particular nomenclature that follows is used merely for convenience, and thus the invention should not be limited to use solely in any specific application identified and\/or implied by such nomenclature.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100"]},"As illustrated, the system  generally includes one or more client computers  (e.g., user workstations) and at least one server computer . The client computers  and server computer  may be connected via a network . In general, the network  may be any combination of a local area network (LAN), a wide area network (WAN), wireless network, or any other suitable type network, including the Internet.","As illustrated, the client computers  generally include a Central Processing Unit (CPU)  connected via a bus  to a memory , storage , input devices , output devices , and a network interface device . The input devices  may be any devices to give input to the client computer , such as a mouse, keyboard, keypad, light-pen, touch-screen, track-ball, or speech recognition unit, audio\/video player, and the like. The output devices  may be any suitable devices to give output to the user, including speakers and any of various types of display screen. Although shown separately from the input device , the output device  and input device  could be combined (e.g., a display screen with an integrated touch-screen.","The network interface device  may be any entry\/exit device configured to allow network communications between the client computer  and the server computer  via the network . For example, the network interface device  may be a network adapter or other network interface card (NIC). Storage  is preferably a Direct Access Storage Device (DASD). Although shown as a single unit, storage  may be any combination of fixed and\/or removable storage devices, such as fixed disc drives, floppy disc drives, tape drives, removable memory cards, or optical storage. The memory  and storage  could be part of one virtual address space spanning multiple primary and secondary storage devices.","The memory  is preferably a random access memory (RAM) sufficiently large to hold the necessary programming and data structures of the invention. While the memory  is shown as a single entity, it should be understood that the memory  may in fact comprise a plurality of modules, and that the memory  may exist at multiple levels, from high speed registers and caches to lower speed but larger DRAM chips. Illustratively, the memory  contains an operating system . Examples of suitable operating systems, which may be used to advantage, include Linux and Microsoft's Windows\u00ae, as well as any operating systems designed for handheld devices, such as Palm OS\u00ae, Windows\u00ae CE, and the like. More generally, any operating system supporting the functions disclosed herein may be used.","The memory  is also shown containing at least one application  (optionally shown with an associated annotation plug-in  and an annotation broker ). The application  may be any of a variety of applications used to manipulate (e.g., create, view, and\/or edit) documents . For example, the application  may be a text editor\/word processor used to manipulate annotatable documents, a document generator\/viewer (such as Adobe's Acrobat\u00ae and Acrobat Reader) used to manipulate documents, or data analysis software, such as Decision Site available from Spotfire, Inc., imaging software used to manipulate images, and any other types of applications used to manipulate various types and forms of data that may be embodied in documents .","The documents  may be stored in a separate data store  than annotations describing them (which may be stored in an annotation store ). Different versions of documents  may exist at any given time. As described herein, a number of different \u201cannotation versioning\u201d policies may be available to determine how annotations originally made for one version of a document  may be applied to subsequent versions of the same document .","Some application programs  may be configured to communicate with the annotation server  directly, for example, via a set of application programming interface (API) functions (not shown) provided for the annotation server . As used herein, the term API generally refers to any set of interface functions (e.g., implementing any suitable inter-process protocol) that may be used to communicate between a client computer or process and a server computer or process. Other application programs, however, may communicate with the annotation server  via plug-in components  and\/or the annotation broker  (e.g. also via API functions). In other words, annotation capability may be added to an existing application  via the plug-in components . The plug-in components  may, for example, present graphical user interface (GUI) screens to users of applications , thus allowing the creation and retrieval of annotations from within the applications used to manipulate the annotated data.","The annotation broker  is an optional component and may be implemented as a software component configured to present a standard interface to the annotation server  from various applications , for example, communicating with plug-in components  from multiple applications running on the same client computer . Hence, the annotation broker  may provide a degree of separation between the applications  and the annotation server , hiding detailed operation of the annotation server  and facilitating development of plug-in components . In other words, new applications  may be supported through the development of plug-in components  written in accordance with the annotation broker interface.","Components of the server computer  may be physically arranged in a manner similar to those of the client computer . For example, the server computer  is shown generally comprising a CPU , a memory , and a storage system, such as a database management system , coupled to one another by a bus , which may all functions as similar components described with reference to the client computer . The server computer  is generally under the control of an operating system  (e.g., IBM OS\/400\u00ae, UNIX, Microsoft Windows\u00ae, and the like) shown residing in memory .","As illustrated, the server computer  may be configured with the annotation server , also shown residing in memory . The annotation server  provides annotation clients (e.g., running on one or more client computers ) with access to the annotation store , for example, via annotation API functions. In other words, the annotation API functions generally define the interface between annotation clients and the annotation server . As used herein, the term annotation client generally refers to any user interface (or other type front-end logic) of the annotation system that communicates with the annotation server to manipulate (e.g., create, update, read and query) annotation data. Examples of annotation clients include applications  communicating with the annotation server  (directly, or via plug-in components ) or an external application, such as an annotation browser (not shown).","The annotation server  may be configured to perform a variety of operations, such as responding to requests to create annotations for specified data objects, formulating and issuing queries against the annotation store  to search for annotations for a specified data object, and formulating and issuing queries against the annotation store  to search for annotations satisfying one or more specified conditions (e.g., having a specified author, creation date, content, and the like). The annotations may be contained in annotation records , for example, stored in an annotation store .","The annotation records  may also contain various information about the annotation, such as the author and creation date of the annotation, as well as an index identifying annotated portions of documents . For some embodiments, the annotation server  may include an indexing component (shown in ) configured to generate an index for an annotated data object, for example, based on one or more parameters identifying the annotated data object (e.g., a database table, row, and\/or column). Indexes created for annotated portions of documents  may be stored in an index table  in the annotation store . For some embodiments, the index table  may be queried to identify annotations for documents .","As illustrated, the annotation server  may have an associated maintenance component  generally configured to maintain annotations for documents . As will be described in greater detail below, the annotation maintenance component  may play a role in implementing and enforcing policies for maintaining annotations when changes are made to annotated documents .",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 2","b":["144","153","117","143","142","151","153","151","117"]},"A corresponding entry for the index  may be placed in the index table , allowing the index table  to be queried to identify documents and portions of documents having corresponding annotations. For some embodiments, entries in the index table  may simply contain ID parameters indicating an annotated data object (e.g., identification of a data source\/table, a row, and column). For other embodiments, however, table entries may include index parameters generated based on the ID parameters. Such indexing techniques are described in the commonly assigned, co-pending application Ser. No. 10\/600,382, entitled \u201cHeterogeneous Multi-Level Extendable Indexing For General Purpose Annotation Systems,\u201d filed Jun. 20, 2003.","The annotation maintenance component  may also generate a change detection value  (e.g., a checksum or hash value, such as MD5) for the annotated document or annotated portion of the document, to be stored in the annotation record . The annotation maintenance component  may detect changes in a document  or portion of a document  associated with an annotation by generating a new change detection value and comparing it to the change detection value stored in the corresponding annotation record . The generation and use of change detection values is described in detail in the commonly assigned, co-pending application Ser. No. 10\/310,192, entitled \u201cAnnotation Validation Using Partial Checksums.\u201d In response to detecting a change to an annotated document , the annotation maintenance component  may delete, modify (e.g. update an index ), or maintain the annotation record  as-is, depending on a type of policy selected for maintaining annotations for different versions of documents , which may be stored in the annotation record as a versioning policy attribute .",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 3","b":"300"},"In any case, the first policy shown in table  is a \u201cno-change\u201d policy dictating that annotations stay with the original version of a document for which they were created and do not apply to subsequent versions. In other words, if a document is changed, the old annotation does not apply to the new document. Indexes to the original document apply to the annotation, while indexes in the new document do not. Content of the annotation may be changed, with the changed content applying to the same version document as the original content.","The second policy shown in table  dictates that annotations are applied to multiple versions of a document. An annotation on an original document also points to subsequent (changed) versions of the document, for example, by modifying an index in an annotation record to refer to the multiple versions of the document. In other words, a user would see the same annotation whether viewing the old or a newer version of the document. If a change is made to the annotation content, the change in annotation content will appear whether the old or newer version of the document is displayed. While this may cause confusion if the changes to the source document are large and varied, it may be a preferred policy in some cases. For example, there may be cases where an annotation captures a general insight regarding a topic addressed in an annotated portion. As such, the annotation is likely to remain valid regardless of changes to the annotated document or the annotated portion of the document.","A third policy shown dictates that for each changed version of a document, each annotation is carried forward to the most accurate position in the document. In other words, multiple copies of annotation records  may exist for each annotation, with the index of each subsequent copy updated to reflect the changes between versions. For some embodiments, indexes may be updated automatically (e.g., an application may scan a document to identify an originally annotated portion in a subsequent version). In some cases, however, an originally annotated portion may not be readily identified in a subsequent version, due to the magnitude of changes or deletion. As a result, in some cases, this approach may lead to annotations being carried forward regardless of semantic and contextual correctness.","Therefore, for some embodiments, a user may specify that annotations must be validated (by someone with authority) before they are carried forward to new versions of a document. This policy (last in table ) may be applicable in an environment where the person who makes the changes to the document also has authority to see and determine the applicability of a previous annotation to the changed document. This policy may be used in conjunction with the second or third policies. A related policy may dictate that annotations viewed from a different version of a document (e.g., other than the version for which it was created) should be marked as unverified indicating it was carried forward but has not been formally approved, effectively putting a viewer on notice they must determine whether the annotation still applies. An authorized user, such as the original author of the annotation, may re-verify the annotation, resulting in removal of the unverified marking. In some cases, other types of users may be authorized to re-verify an annotation, for example, if they are in a position to be able to determine the annotation still applies to a new version.","It should be understood that the listed policies are exemplary only and that different embodiments of annotation systems may support more, less, or different policies than those listed. Further, as will be described below, some of the listed policies may be combined. Policies may also be added and removed from the system, for example, according to customer or administrative needs. An administrator of the system may select one or more policies to make available to users during system configuration and may also indicate a default policy. Users may also be allowed to set their own policy from the set of available policies. In other words, a user creating an annotation may select from whatever policies are allowed to apply to their annotation.","For example,  illustrate exemplary graphical user interface GUI screens that may be used to create and view an annotation for a document and to select a policy for applying the annotation to subsequent versions of the document.  illustrates an exemplary GUI screen  of a text editor used to edit a patent application. As shown, the screen  may include Create and View Annotations buttons  and  provided, for example, as part of an annotation plug-in for the text editor, allowing a user to create and view annotations.","For example, a user may select a highlighted portion of text  and select (e.g., click) the Create Annotations button  to access a Create Annotation GUI screen  shown in . As illustrated, the GUI screen  may allow the user to enter a comment in a text box , for example, related to the highlighted text . Of course, other types of annotation GUI screens may allow for various other types of annotation content other than text comments, such as values associated with quality, approval, and the like. In any case, the user may be able to specify one or more policies that dictate how the annotation should be applied to subsequent versions of the document. For example, the user may be able to specify the annotation should be carried forward to subsequent versions of the document (e.g., as with the second and third policies listed in table  of ).","The user may also be able to specify policy options for applying the annotation to subsequent versions of the document, for example, via the GUI screen  of , which may be accessed via a VERSIONING POLICY OPTIONS button . As illustrated, the GUI screen  may allow, the user (via radio buttons , , and ) to specify whether the annotation should be applied to all versions of the document (i.e., the second policy of table ), carried forward to subsequent versions of the document (i.e., the third policy of table ), or applied only to the original annotated version of the document (i.e., the first policy of table ), respectively.","A number of validation options may be specified if the annotation is applied or carried forward to subsequent versions. For example, a user may specify (via radio buttons , , and , respectively) that validation may be required prior to carrying the annotation forward to subsequent versions, that the annotation may be carried forward automatically and marked as unverified, or neither. As will be described in greater detail below, if user validation is required, the annotation maintenance component may be configured to notify the user (e.g., via e-mail, instant message, or other type of notification technique) in the event a change to the annotated document is detected.",{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 4D","FIG. 4A"],"b":["480","480","400","404","480","486","484","486"]},"For some embodiments, the types of annotation versioning policies available to a user may be set by an administrator. For example, the administrator may determine what type of policies are available to the user via the GUI screens described above and\/or may select some type of versioning policies to be applied as a default. In some cases, the types of policies made available may depend on the type of document being annotated, some type of user credential (e.g., a specified user role or authorization level), or a combination thereof. For example, certain annotation versioning policies, such as carrying an annotation forward, may only be available to certain authorized users.","For some embodiments, the annotation maintenance component  may enforce annotation versioning policies when a document  is modified, creating a new version of the document (regardless of whether a previous version is maintained). For example,  illustrates a relational view of software components of a system  in which an annotation maintenance component  enforces annotation versioning policies as annotated documents  are modified by an application program .","Operation of the system  may be described with reference to , which illustrates a flow chart of exemplary operations  that may be performed, for example by the annotation maintenance component , to maintain annotations for multiple versions of documents according to one embodiment of the present invention. In some cases, the annotation maintenance component  may be integrated with an application  as a plug-in component. While the operations  will be described generally with reference to modifications of annotated documents, it should be understood that the operations  also apply to changes that are specific to annotated subportions of a document.","The operations  begin, at step , by receiving an annotated document , for example, by the annotation maintenance component  that has been modified via an application . At step , a determination is made as to whether the document has changed, for example, by comparing a change detection value  stored in a corresponding annotation record  with a changed detection value calculated for the document . If the document  has not changed, the operations  are exited, at step .","If the document  has changed, the document  is saved as a new version (or at least the revised document  is saved), at step . At step , a determination is made as to whether annotations are to be carried forward to the new version of the document . If not, the operations  are exited, at step . If annotations are to be carried forward to the new version of the document , new annotation records  for the new version of the document are created (or existing annotation records  are updated) at step . At step , the annotation indexes  are updated to refer positions in the new version of the document  and a new change detection value  is generated for the new version of the document, at step .","Depending on the annotation versioning policy selected (e.g., by the annotation author), the annotation maintenance component  may carry annotations forward to refer to their respective positions within a document  when that document  changes. For example, after the revised document  has been saved, the annotation maintenance component  may then create and store new annotation records (with indexes referring to the revised document ) in the annotation store . As previously described, the annotation maintenance component  may update the corresponding index  to reflect the revised document and update the change detection value  (illustratively shown as a checksum) to reflect revisions to the annotated document  or the corresponding annotated portion thereof.","As previously described with reference to FIGS.  and A-D, exactly when and how annotations are carried forward (e.g., steps - of ) may depend on options a user selected when creating the annotation and whether a current user (is authorized. In some cases, annotation records may be automatically created\/updated or user interaction may be required, in some instances.  illustrates a flow diagram of exemplary operations  that illustrate how and when an annotation may be carried forward and when user interaction may be sought, for example, based on options selected creator or author of the original annotation.","The operations  begin, at step , by receiving a document . At step , a determination is made as to whether the annotation creator enabled annotation carry forward, for example, via check box  of . If so, a determination is then made, at step , as to whether a current user (e.g., a user checking in the document ) is authorized to carry forward annotations. For example, depending on the system settings, only users operating in certain roles may be authorized to carry annotations forward. If the current user is not authorized to carry annotation forward, the operations are exited, at step , for example, by checking in the document  without carrying annotations forward.","If the user is authorized to carry annotations forward, annotations from previous versions of the document are retrieved, at step . As previously described, for some embodiments, the annotation maintenance component  may be configured to automatically update indexes to refer to annotated portions of a revised document. Therefore, at step , an algorithm is run to identify (previously) annotated portions in the new version of the document . For example, the algorithm may employ pattern matching, searching the new version of the document  for annotated portions from the previously annotated version of the document . If the annotated portions are identified by the algorithm (step ), the indexes are automatically updated, at step  and new change detection values are generated at step , prior to exiting the operations , at step .","If the algorithm did not identify the annotated portions in the new version of the document , a user (e.g., the original annotation author or last user to modify the annotation) may be notified, at step . For example, the user may be given the opportunity to utilize a tool to manually identify the portions of the new version of the document  to which the annotations should be carried forward. For some embodiments, the tool may indicate to the user where the annotation may apply based on results of the algorithm (e.g., by highlighting text in the document , such highlighted text  in ) and lets the user carry the annotations forward to the new version of the document . Input from the user (e.g., a manual selection indicating annotated portions in the new version of the document ) may be received, at step , and used to update the indexes at step .","As previously described, user input may also be required if the creator of the annotation specified that validation is required for carrying an annotation forward (e.g., by the annotation author or other authorized user). In any case, a user may be able to access a document while the carrying forward of annotations related to the document is pending another user's actions to carry it forward (e.g., validation or identification of the annotated portions in a new version). In such cases, the user accessing the document may be notified that there are pending changes to be made for annotations related to the document. Further, as previously described, annotations for such a document may be marked as unverified while the changes are pending.","By supporting multiple policies for applying annotations to different versions of documents, users may be able to select a policy that best fits their needs and gain some level of assurance the annotations will be properly applied as the document changes. As a result, multiple users accessing a shared set of documents may be assured that annotations for the documents are valid and apply to the current versions of the documents.","While the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["So that the manner in which the above recited features, advantages and objects of the present invention are attained and can be understood in detail, a more particular description of the invention, briefly summarized above, may be had by reference to the embodiments thereof which are illustrated in the appended drawings.","It is to be noted, however, that the appended drawings illustrate only typical embodiments of this invention and are therefore not to be considered limiting of its scope, for the invention may admit to other equally effective embodiments.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 4A-4D"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
