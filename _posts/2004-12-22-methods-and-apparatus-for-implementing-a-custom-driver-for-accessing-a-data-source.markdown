---
title: Methods and apparatus for implementing a custom driver for accessing a data source
abstract: Methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources are disclosed. A design-time driver for the additional data source is obtained, where the design-time driver supports the definition of data including one or more fields of the additional data source to retrieve from the additional data source. In addition, a run-time driver for the additional data source is obtained, where the run-time driver supports retrieval of data corresponding to the one or more fields from the additional data source and where the run-time driver has a second application programming interface. The design-time driver is executed via a first application programming interface, where the first application programming interface enables definition of the data including the one or more fields to be retrieved from the additional data source. The data is then retrieved from the additional data source via the run-time driver using the second application programming interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831633&OS=07831633&RS=07831633
owner: Actuate Corporation
number: 07831633
owner_city: South San Francisco
owner_country: US
publication_date: 20041222
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to implementing a custom driver to access data from a corresponding data source and, more specifically, to implementing a design-time and run-time component of a custom driver to access data from a corresponding data source.","Many systems require access to data. For instance, systems such as reporting systems obtain data from various data sources. Typically, reporting systems that are sold to customers include interfaces to commonly used data sources via packaged applications. In this manner, a customer may access data that has been stored in these data sources.","Unfortunately, customers often wish to access data in data sources that are not supported by the software they have purchased. This generally requires extensive coding by the customer to access the data in these additional data sources.","In view of the above, it would be beneficial if a customer could more easily access data from data sources that are not supported by a particular application.","The present invention enables a custom driver to be invoked to access data from any data source. This is accomplished, in part, via a design-time component and a run-time component of the custom driver. In this manner, a customer may retrieve data from any data source, regardless of whether it was originally supported by the system.","In accordance with one aspect of the invention, methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources include obtaining a driver (e.g., run-time driver) for the additional data source. The driver is executed via an application programming interface associated with the driver, wherein a format of the application programming interface is pre-defined. The driver enables data corresponding to a data definition to be retrieved from the additional data source.","In accordance with another aspect of the invention, methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources include obtaining a design-time component such as an executable file for the additional data source, the executable file supporting creation of a data definition of data including one or more fields of the additional data source to retrieve from the additional data source. In addition, a run-time component such as one or more libraries for the additional data source are obtained, where the libraries support retrieval of data corresponding to the one or more fields from the additional data source. The executable file is executed via a first application programming interface, wherein the first application programming interface of the executable file enables a data definition of the data to be retrieved from the additional data source to be generated or obtained. The data corresponding to the one or more fields is then retrieved from the additional data source using a second application programming interface and the one or more libraries.","In accordance with yet another aspect of the invention, methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources include obtaining a design-time driver for the additional data source, where the design-time driver supports the definition of data including one or more fields of the additional data source to retrieve from the additional data source, where the design-time driver has a first application programming interface. In addition, a run-time driver for the additional data source is obtained, where the run-time driver supports the retrieval of data corresponding to the one or more fields from the additional data source, where the run-time driver has a second application programming interface. The design-time driver is executed via the first application programming interface, where the first application programming interface enables the definition of the data including the one or more fields to be retrieved from the additional data source to be generated or obtained. The data is then retrieved from the additional data source via the run-time driver using the second application programming interface.","In accordance with yet another aspect of the invention, methods and apparatus for supporting an additional data source in a system adapted for processing data from one or more data sources include obtaining a design-time driver for the additional data source, the design-time driver supporting definition of data including one or more fields of the additional data source to retrieve from the additional data source. In addition, a run-time driver for the additional data source is obtained, where the run-time driver supports the retrieval of data corresponding to the one or more fields from the additional data source. The design-time driver is executed via a first set of application programming interfaces, where the first set of application programming interfaces is pre-defined and where the first set of application programming interfaces enables definition of the data to be retrieved from the additional data source. The data is then retrieved from the additional data source using a second set of application programming interfaces, where the second set of application programming interfaces is pre-defined.","In accordance with yet another aspect of the invention, a system adapted for processing data from a plurality of data sources includes a data processor and a set of one or more drivers, each of the drivers having a driver interface, and each of the drivers being capable of generating a data definition defining data to be retrieved from an associated data source and being capable of retrieving the data defined by the data definition from the associated data source. The system also includes a driver receiving mechanism for receiving a new driver and adding the new driver to the set of one or more drivers and includes a driver calling mechanism configured to call a selected one of the drivers via the corresponding driver interface. In addition, the data processor is configured to process the data retrieved from the data source associated with the selected driver.","These and other features of the present invention will be presented in more detail in the following detailed description of the invention and the associated figures.","The described embodiments enable a customer to load, select, and invoke a custom driver. In accordance with various embodiments of the invention, the custom driver includes a design-time component and a run-time component. The design-time and run-time components may be implemented in the same driver or separate drivers. Through the custom driver, the customer may access data from any data source. Specifically, the design-time component enables the customer to define a data definition defining the data to retrieve from the data source, while the run-time component enables the data corresponding to the data definition to be retrieved from the data source. In this manner, the customer may access data from any data source, regardless of whether it was originally supported by the system.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["102","104","106","108","104","106","108","110","112","114"]},"Each of the drivers , ,  has a driver interface or a set of driver interfaces. The interface may simply include the name of the driver, enabling the driver to be executed. Alternatively, the interface may include a number of parameters, such as a set of input parameters and\/or output parameters. Moreover, the interface may include a call to each of a set of procedures (e.g., supported design-time or run-time operations) to be implemented in the driver. In addition, a set of specifications may be provided to ensure that a particular set of procedures is implemented in the driver, regardless of whether the interface includes a call to these procedures. In other words, the format of the driver and\/or the driver interface may be, pre-defined to include a supported set of procedures and\/or supported parameters.","In accordance with one embodiment, the interface of the driver or format thereof is pre-defined to enable the customer to create a custom driver that will interface with the underlying system. Thus, the interface of each of the custom drivers may have the same format. Of course, the format may include required parameters, as well as optional parameters. These required and optional parameters may be provided to the customer in the form of driver interface specifications. For instance, XML schema for each of the driver interfaces may be provided to the customer. As a result, even though the interface of each of the custom drivers may have the same format, the interface of each of the custom drivers will differ depending upon the value of the required parameters, as well as the optional parameters that are implemented.","An application programming interface (API) may be pre-defined using a pre-defined set of data types. For instance, the pre-defined data types may include scalar data types such as integer, string, double, date (e.g., including a time portion, up to seconds), time (e.g., no date portion), timestamp (e.g., similar to date, but includes up to nano-seconds), and decimal. The pre-defined data types may also include complex data types such as various data structures. For instance, a complex data type may include a data structure including a single row or collection of data fields, or a table including one or more homogenous rows of data fields, where each field is a scalar data type. If these data types used in the API are different from those in the driver, these data types are mapped to the internal data types used in the driver.","Through the use of a custom driver, data may be retrieved from any data source for use, by a data processor . For instance, the data source may be an XML, SAP or other data source. Specifically, a driver calling mechanism  is configured to call a selected one of the drivers via the corresponding driver interface (e.g., upon selection of one of the drivers). The driver calling mechanism  may be implemented in the data processor , or separately from the data processor . The data processor  is configured to process the data retrieved from the data source associated with the selected driver. For instance, the data processor  may include a report generation module for generating a report from the retrieved data. As another example, the data processor  may be a spreadsheet designer for generating a spreadsheet from the retrieved data.","As set forth above, the data processor  such as a report generation module processes the retrieved data. In accordance with one embodiment, the report generation module incorporates the data definition that has been generated into the report executable. This may be accomplished via a design-time interface of a design-time component or driver. The data may then be retrieved from the data source upon execution of the report executable, which may be accomplished via a run-time interface of a run-time component or driver. Thus, the data processor or report executable may call both the design-time component or driver via the design-time interface and the run-time component or driver via the run-time interface.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIG. 2","FIG. 1"],"b":["202","204","206","204","208","208","204","208","202","208","210","202","212","206","212","210","214","202","204","210"]},"In accordance with one embodiment, the design-time driver  includes an executable file and the run-time driver  includes one or more libraries. The design-time driver or associated API may enable a user to generate a data definition via a graphical user interface. In this manner, queries against a data source may be defined. The libraries may be Dynamic libraries loaded by the host. The design-time driver may be implemented in any suitable programming language such as Java, C or C++. The design-time driver API may be defined in any suitable programming language, such as XML. The run-time driver API may be defined in any suitable programming language, such as Java or C. The APIs may be defined in a programming language that is independent from the programming language used to generate the corresponding driver(s). Data types may therefore be converted internally within the driver(s), as set forth above.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 3","b":["302","304"]},"In accordance with one embodiment, all drivers are placed under a particular folder (e.g., <Actuate>\/oda\u201d). Each driver will have a separate subfolder under this folder. For instance, the driver name may be used as the subfolder name. All driver files may then be stored under this subfolder.","From a set of drivers, a user may select a driver for a particular data source from a list of drivers at . Each driver may include a configuration file (e.g., odaconfig.xml) that identifies a design-time driver and a run-time driver. Specifically, the configuration file may include a design-time driver application programming interface (API) (or set of APIs) and a run-time driver API (or set of APIs). Thus, the configuration file of the selected driver is read at , thereby enabling the design-time driver and the run-time driver to be executed. Specifically, the configuration file may identify the driver via the driver name, and may identify the design-time interface and the run-time interface, as well as the corresponding data source(s). The design-time driver is executed at  via the design-time driver API to generate a data definition defining a query and therefore the data to be retrieved from a particular data source. Specifically, the configuration file may be responsible for executing the design-time driver. In addition, the run-time driver is executed at  via the run-time driver API to obtain data from the data source corresponding to the data definition. The run-time driver may also be responsible for opening the data source prior to obtaining the data and closing the data source after the data has been obtained. In this manner, data corresponding to the defined queries may be retrieved.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 4","FIG. 3"],"b":["310","402","404","406","408","410"]},"In accordance with one embodiment, the design-time interface includes two components: a Design Session Request interface and a Design Session Response interface. Specifically, the most current data definition may be provided to the design-time driver at block  via a Design Session Request interface, while the updated data definition may be obtained from the design-time driver at block  via the Design Session Response interface. The Session Request and Response provide the information corresponding to the data definition to enable the host to access the data source. Specifically, the Session Request and Response may each include a name, type, short description, command, and properties, which may include public and\/or private properties, as well as input and\/or output parameters, a primary result set definition, and metadata which includes information associated with the data. The term \u201cresult set definition\u201d is typically used to refer to the core definition of the data to be returned by the run-time driver. Exemplary information that may be included in the result set definition will be described in further detail below with reference to . The name is a string and is the external name of the data source. The type is a string and is the type of the data source. The short description may be a string that includes a short business description of the data source. The command (e.g., query) may be a string that executes at runtime to retrieve the data or perform another command (e.g., write to a data source). For instance, the command may identify one or more parameters (e.g., fields) of a data source, which may be separated by a character such as a colon, as well as the types of each of the parameters (e.g., metadata). For example, the command may be a SQL statement and identify one or more parameters. Public Properties may be specified to identify properties such as database server name, while Private Properties may be specified to identify properties such as a version of a data source. Public Properties may be edited by a user, while Private Properties may be treated as pass-through values. Thus, the public and private properties may be used to identify name-value pairs that can be used to establish a connection to the data source. The information in the Session Response may then be obtained from the design-time driver so that the current data definition can be updated. Similarly, the information in the Session Response can be provided to the run-time driver, thereby enabling data for the current data definition to be retrieved.","In accordance with one embodiment, each input parameter of the Design Session Request interface may be mapped to a parameter of the host . In addition, the Design Session Response interface may include one or more output parameters, including a name of an output parameter, a native type code that identifies a native data type (e.g., a data type that is identifiable within the driver and can be mapped to a data type that is identifiable by the host ), and a record definition that identifies each field in a complex parameter.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIGS. 5-6","FIG. 5","FIG. 6","FIG. 5"]},"In accordance with one aspect, a trace logging utility is provided, which enables runtime drivers to be debugged. In order to access this trace logging utility, the configuration file of the driver may indicate that the trace logging utility is to be accessed. For instance, the configuration file may include information such as a log level, log directory, log filename prefix, and\/or a Java log formatter provided by the runtime driver. The log level may be used to determine the level of information that should be logged. The log directory identifies the directory where the log file should be written. The log filename prefix may identify a prefix to be used in the filename. The Java log formatter may be optionally specified. If the Java log formatter is not specified, a default log formatter provided by the system may be applied. In this manner, a customer may indicate whether their custom runtime driver invokes the trace logging utility.","As set forth above, a run-time driver may be used to retrieve data from a corresponding data source.  is a diagram presenting exemplary operations that may be performed by a run-time driver via a run-time interface. Each of these operations may be implemented by the run-time driver, and may also be accessed via the run-time interface. In accordance with one embodiment, each of the features should be supported by the run-time driver, while the optional features indicated need not be supported by the run-time driver.","In this example, various exemplary operations are set forth that may be implemented by a run-time driver. Specifically, three connection-related operations are set forth: 1) Establishing a connection to a data source based upon one or more properties, which may be defined in name-value pairs; 2) Obtaining information on the capabilities of a run-time driver, design-time driver, and\/or data source; 3) Committing or rolling back any transaction associated with a database or connection to a database. A statement (or command) is what the data source should execute to return the data requested. For instance, the statement may be a SQL statement such as \u201cSELECT column1 FROM table1.\u201d Three statement-related operations are set forth: 1) Creating one or multiple concurrent data source specific statements, such as; 2) Assigning data source specific, runtime properties to a statement, such as a request identifier, which enables the data source to include the request identifier in its audit trail, thereby enabling a request in the host application to be correlated with the corresponding data source statement\/command; 3) Preparing a query command, where the command syntax may be specific to a particular data source. Five parameter-related operations are set forth: 1) Assigning values to one or more input parameters of a statement; 2) Obtaining metadata of parameters of a statement, if supported by a data source; 3) Executing a statement that has no result set (e.g., that returns no data) and returns only output parameters. For instance, a stored procedure in a Relational Database System may be executed without returning a row of data; 4) Retrieving the values of output parameters; 5) Handling scalar and complex input and output parameters, if supported by a data source. Six operations related to cursors (e.g., context of fetching data from a data source) or result sets are set forth: 1) Handling one or more cursors, or result sets, in a single statement; 2) Accessing multiple cursors, sequentially or concurrently, as supported by a data source; 3) Accessing a cursor by name, if supported by a data source; 4) Obtaining the metadata (e.g., type, etc.) of result sets; 5) Fetching a row of data columns in a sequential, forward direction; 6) Setting the limit on the number of rows returned by a statement or a cursor.","In accordance with one embodiment, the run-time interfaces are modeled after JDBC. Thus, the run-time interfaces may include JDBC capabilities such as those that are suitable for applications such as reporting applications. For instance, these capabilities may include binding parameter values, fetching data for each column of a row, etc. Other capabilities that are not defined in JDBC may also be implemented, such as the access of a result set(s) by name. In addition, complex, non-scalar input and output parameters may be supported, as well as any type of data source. Any query command text (e.g., not limited to SQL statement syntax) may be supported to query a data source. In addition, the same connection may be used to create different types of data-source specific statements. For example, a SAP connection can be used for a SAPBW BEx Query data source, a SAP BW ODS data source and a SAP R\/3 BOR BAPI (RFM) data source.","Various output parameters may be defined as output parameters of a data definition. In other words, the output parameters are those that will include data obtained from the data source during run-time.  is a diagram presenting exemplary output parameters of a data definition generated by a design-time driver. For instance, an output parameter may include a name, display name, description, native type code as implemented in the run-time driver. This native type code may then be mapped to a type code supported by the system. An output parameter may also have a native type name and a record definition. A record definition may include a definition of each field in an output parameter.","A result set definition defines a result set. Specifically, a result set is defined via the design-time driver in order to establish the data that is to be returned via the run-time driver.  is a diagram presenting a result set definition generated by a design-time driver. In accordance with one embodiment, a result set is mapped to a row of data. Thus, the result set definition is a named collection of one or more defined data columns. As shown in this example, the result set definition may be identified by a name, and include a set of columns found in each row of a result set. A result column may have a name, position, display name, native type code (e.g., internal to the run-time driver), native type name, display length, display format, horizontal alignment, heading, description, help text, lineage, and axis. Specifically, a lineage names the original data source of the column value, while the term axis refers to a dimension of a multi-dimensional data source. For example, for a multi-dimensional data source that contains sales data, one axis can be \u201cPurchaseDate,\u201d while \u201cSalesRegion\u201d can be another axis.","As set forth above, a data definition may be provided by a user or a host application to a design-time driver via a design session request, while an updated data definition may be obtained by a user or a host application from the design-time driver via a design session response. Exemplary design session request and response formats will be described in further detail below with reference to .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 11"},"The manipulations of data described herein are often referred to in terms, such as storing, obtaining, providing, or generating. In any of the operations described herein that form part of the present invention, these operations are machine operations. Useful machines for performing the operations of the present invention include general-purpose digital computers, networks of such computers, or other programmable systems. In all cases, there is a distinction between the method of operations in operating a computer and the method of computation itself. The present invention relates to method steps for operating a computer in processing electrical or other physical signals to generate other desired physical signals.","The present invention also relates to an apparatus for performing these operations. This apparatus may be specially constructed for the required purposes, or it may be a general purpose computer or network of computers selectively activated or reconfigured by a computer program stored on a machine readable medium. The processes presented herein are not inherently related to any particular computer or other apparatus. In particular, various general-purpose machines may be used with programs written in accordance with the teachings herein, or it may be more convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these machines will appear from the description herein.","Still further, the present invention relates to machine-readable media on which are stored program instructions for performing operations on a computer. Such media includes by way of example magnetic disks, magnetic tape, optically readable media such as CD ROMs, semiconductor memory such as PCMCIA cards, etc. In each case, the medium may take the form of a portable item such as a small disk, diskette, cassette, etc., or it may take the form of a relatively larger or immobile item such as a hard disk drive or RAM provided in a computer.","A preferred computer system invention includes a server and one or more clients. In preferred embodiments, software providing the disclosed functionality is provided on the server and can be accessed through the various clients. The server in accordance with the present invention includes a central processing unit (CPU), input\/output (I\/O) circuitry, and memory\u2014which may be read only memory (ROM) and\/or random access memory (RAM). The server may also optionally include a display, a mass storage unit, a keyboard, and a clock.","In one embodiment, the CPU is preferably one or more microprocessor chips selected from complex instruction set computer (CISC) microprocessors, reduced instruction set computer (RISC) microprocessors, or other available microprocessors. The CPU is coupled to a memory by a bi-directional data bus, but may also be coupled by a unidirectional data bus in the case of ROM. The memory is also coupled to the CPU by appropriate control and address busses, as is well known to those skilled in the art.","The CPU is coupled to the I\/O circuitry by a bi-directional data bus to permit data transfers with peripheral devices. I\/O circuitry preferably includes a number of latches, registers and direct memory access (DMA) controllers. The purpose of the I\/O circuitry is to provide an interface between CPU and such peripheral devices as display assembly, mass storage (e.g., disks), keyboard, and clients. The display assembly of server receives data from the I\/O circuitry via the bus and displays that data on a suitable screen. Mass storage can be coupled to I\/O circuitry by a bi-directional data bus. Generally, mass storage will be a hard disk drive, a tape drive, or some other long-term storage device. It may be used to store report templates (e.g., template objects) of this invention, programs for accessing or generating such report templates, programs for viewing such report templates, and programs for generating a report from such report templates.","The keyboard communicates with the CPU via data bus and I\/O circuitry. In addition to keyboard, other types of input device can also be used in conjunction with the present invention. For example, a computer mouse, a track ball, a track pad, or a pen-based tablet can be used to manipulate a pointer on display screen. A clock preferably comprises a real-time clock to provide real-time information to the system. Alternatively, the clock can simply provide regular pulses to, for example, an interrupt port of the CPU, which can count the pulses to provide the time function. The clock is coupled to the CPU by a data bus.","The clients may include terminals, personal computers, workstations, minicomputers, and mainframes. For purposes of this invention, any data processing devices which can access the report templates (e.g., report objects) or report template generating software on server are clients. It should be understood that the clients may be manufactured by different vendors and may also run different operating systems such as MS-DOS, Microsoft Windows, Microsoft NT, various forms of UNIX, OS\/2, MAC OS and others. Clients are connected to I\/O circuitry via bi-directional lines. Bidirectional lines may be any suitable media such as coaxial cable, twisted pair wiring, fiber optic line, radio channels, and the like. Further, the network resulting from the interconnection of the lines may assume a variety of topologies, including ring, bus, star, and may include a collection of smaller networks linked by gateways and bridges. As with the clients, it should be understood that the server may run different operating systems such as MS-DOS, Microsoft Windows, Microsoft NT, UNIX, VMS, OS\/2, MAC OS and others. The clients need not use the same operating system as the server.","It is also within the scope of this invention to implement the apparatus and methods for generating a data definition and accessing data corresponding to the data definition from a data source on a \u201cstand-alone\u201d computer that does not form part of a network.","Although the foregoing invention has been described in some detail for purposes of clarity of understanding, it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. For instance, although the specification has described an example illustrating APIs and procedures implemented via a design-time driver and run-time driver, different types of APIs and procedures may be implemented as well. In addition, the reader will understand that the processes described herein are illustrative only. Thus, the methods, apparatus, and data structures for obtaining data from a data source via a custom driver as disclosed herein may be used with other processes and data structures."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"],"b":"310"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 5-6"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 11"}]},"DETDESC":[{},{}]}
