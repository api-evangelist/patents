---
title: System and method for comprehensive general electric protection for computers against malicious programs that may steal information and/or cause damages
abstract: In the prior art of computer security by default programs are allowed to do whatever they like to other programs or to their data files or to critical files of the operating system, which is as absurd as letting a guest in a hotel bother other guests as he pleases, steal their property or copy it or destroy it, or have free access to the hotel's management resources. The present concept is based on automatic segregation between programs. This is preferably done by creating automatically an unlimited number of Virtual Environments (VEs) with virtual sharing of resources, so that the programs in each VE think that they are alone on the computer, and (unless explicitly allowed by the user) any changes that they think they made in virtually shared resources are in reality only made in their own VE, while the user preferably has an integrated view of the computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213836&OS=09213836&RS=09213836
owner: BARHON MAYER, BATYA
number: 09213836
owner_city: Jerusalem
owner_country: IL
publication_date: 20041020
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This patent application is a continuation in part of U.S. application Ser. No. 10\/301\/575 of Nov. 22, 2002, hereby incorporated by reference in its entirety, which is a continuation in part of PCT application PCT\/IL01\/00487 which was filed in Israel on May 28, 2001 (which claims priority from Israeli patent application 136414 of May 28, 2000 and from U.S. Provisional patent application 60\/209,593 of Jun. 6, 2000, and from U.S. Provisional patent application 60\/284,019 of Apr. 15, 2001), and which claims benefit and priorities from the following U.S. Provisional patent applications, hereby incorporated by reference in their entirety:\n\n","This patent is also a CIP of and claims priority from U.S. application Ser. No. 10\/622,841 of Aug. 21, 2003, which is also a CIP of the above U.S. application Ser. No. 10\/301,575, and which also claims priority from Canadian application 2,431,681 of Jun. 19, 2003.","This patent application also claims priority from Canadian application 2,446,144 of Oct. 20, 2003, and from U.S. provisional application 60\/557,453 of Mar. 28, 2004, and from U.S. provisional application 60\/579,148 of Jun. 9, 2004, and from Indian application 1158\/DEL\/2004 of Jun. 21, 2004, and from British application 0413851.7 of Jun. 21, 2004, hereby incorporated by reference in their entireties.","1. Field of the invention","The present invention relates to security in computers (including personal computers, servers, or other computerized gadgets, as explained in the definitions) and more specifically to a powerful comprehensive generic Security System and method for computers, based on automatic segregation between programs.","2. Background","Malicious software attacks on personal computers and\/or servers (especially through the Internet) are becoming more and more common and more and more dangerous. According to recent study by the American CSI research institute (The Computer Security Institute), during the last year alone approximately 50 percent of the largest American companies were attacked by at least one malicious Internet software, with an average damage of about 500,000 USD per attack.","For example, according to various estimates, the total damage accrued in 2002 as a result of computer attacks is said to be approximately $47 billion. This high figure confirms that despite the market being inundated with protection techniques, there is still a very real threat with no concrete and lasting solution. In addition, for example a new report by Symantec released on Oct. 2, 2003 found that the number of computers inflicted by malicious software with backdoors that allow remote control or stealing of information has increased by 50% during the first half of 2003.","As the attacks for example by the \u201cI LOVE YOU\u201d virus and its derivatives demonstrate, which affected almost instantly tens of millions of computers and caused estimated damages of more than 10 billion dollars\u2014the conventional anti-virus programs and their methods are inadequate to handle such threats because they are dependent on past familiar code patterns of known malicious software instead of trying to prevent in advance all kinds of attacks in principle. Such attacks are enabled because of an almost infinite number of loopholes and vulnerabilities in operating systems, by the fact that far too many processes occur under the surface without the user's knowledge, and by badly-engineered applications. These loopholes and vulnerabilities include for example:\n\n","Unless these vulnerabilities and loopholes are treated on the most thorough and basic level, and since the Internet keeps growing at an exponential rate and more and more businesses are becoming dependent on it\u2014such attacks may increase in the near future to the point of almost unlimited damages to a very large percent of the computers that are connected to the Internet.","Other methods such as for example packet filtering are also limited in principle, since the rules of which packets to accept or not may contain for example subjective decisions based on trusting certain sites or certain applications. However, once security is breached for any reason, for example due to an error or intended deception, a hostile application may take over the computer or server or the entire network and create unlimited damages (directly or by opening the door to additional malicious applications), which until detected might be already too late to repair. For example, a self-resendable via e-mail macro-virus (such as for example \u201cI LOVE YOU\u201d and its derivatives and similar viruses) can arrive from your best and most trusted friends after their own computer has been compromised. Also, filtering for allowed types of protocols such as for example FTP versus SMTP and so on can be rendered useless by programs that encrypt or disguise a given protocol type to appear as another. Another major limitation of packet filtering is that it can't be relied upon to scan for stolen data in packets, since malicious applications can encrypt the data and\/or disguise it to look like something else, so as to appear for example as a gif image.","Antiviruses and firewalls are also not effective against security holes for example in browsers or e-mail programs or in the operating system itself. According to an article in ZDnet from Jan. 24, 2001, security holes in critical applications are discovered so often that just keeping up with all the patches is impractical. Also, without proper generic protection for example against Trojan horses, which can identify any malicious program without prior knowledge about it, even VPNs (Virtual Private Networks) and other forms of data encryption, including digital signatures, are not really safe because the info can be stolen before or below the encryption.","Even attempts to monitor in some ways a certain group of specifically marked executables or applications are limited by nature, because the security breaches can come from many other directions. For example, A Trojan horse may already be lurking in the system for a long time and then suddenly create tremendous damage before being detected, or enter the system any time new applications are installed from any source.","On the other hand, attempts for example to disallow completely any script within e-mail attachments to execute creates too many restrictions and doesn't separate between safe scripts that the user may want to run and scripts that actually try to perform malicious acts.","The present invention is a novel concept which tries to go deeply into the roots of the causes of above described problems and thus to eliminate completely the above-described problems by creating what is to the best of our knowledge a very powerful, comprehensive, general and generic Security System for computers. This System and method is adapted to protect computers (which may include for example personal computers, servers, and other devices or gadgets with one or more processor that can run programs, as explained below in the definitions) against all kinds of malicious programs that may steal information and\/or cause damages including for example changes of data, deletion of data, interfering with function, and so on (such as for example Viruses, Vandals, Trojan horses, Worms, Macro viruses and Malicious e-mails). The system and method can be used in many operating systems, such as for example various platforms of Microsoft Windows, Linux, Macintosh, or other operating systems, eventhough the preferred embodiments use mainly the terminology of Windows, which is the most common and familiar operating system.","The most important principles and objects of this protection system preferably include:\n\n","The main logic behind the rules that define appropriate versus suspect behavior is preventing as much as possible all the elements and activities that are required by malicious programs in order to be able steal any data or do any damage or propagate themselves. The Security System preferably uses a set of heuristics and basic rules for defining suspicious or potentially dangerous activities that are automatically suitable for most users. By using the general default rules and adding to them for example statistical analysis of normal system and applications behavior and what is learned from the user's responses to authorization requests, the Security System quickly learns what is considered reasonable or well-behaved behavior of programs on the user's personal computer or server. Preferably, some of the learning is performed in advance for each operating system and is included in the distribution database, so that the system that is installed by the user has already learned various rules that are relevant by default to most users of that operating system. The security rules and functions performed by the Security System preferably include at least some of the following:\n\n","As explained below, the automatic segregation is preferably done by creating automatically an unlimited number of Virtual Environments (VEs) with virtual sharing of resources, so that preferably the programs in each VE think that they are alone on the computer, and preferably (unless explicitly allowed by the user) any changes that they think they made in virtually shared resources are in reality only made in their own VE (preferably through Copy-On-Write), while the user preferably has an integrated view of the computer with all the programs installed on it.","Clarification and Definitions","Throughout the patent when variations or various solutions are mentioned, it is also possible to use various combinations of these variations or of elements in them, and when combinations are used, it is also possible to use at least some elements in them separately or in other combinations. These variations are preferably in different embodiments. In other words: certain features of the invention, which are described in the context of separate embodiments, may also be provided in combination in a single embodiment. Conversely, various features of the invention, which are described in the context of a single embodiment, may also be provided separately or in any suitable sub-combination.","Many times for simplicity of understanding we use terms that are most commonly used within Microsoft Windows environment (which is the most common operating system for personal computers), so it should be kept in mind that in other operating systems such as for example Linux or Macintosh some of these might have different names, somewhat different implementations, etc., although the principles are similar.","As used throughout the present specifications and claims, the following words have the indicated meanings:","\u201cProgram\u201d, \u201cexecutable\u201d or \u201capplication\u201d is any file or area in memory that contains executable commands, such as for example .exe or .com files, batch files, various Macro files, etc.","\u201cMacro\u201d is an executable written usually in a scripting language and executed by a complex application, such as for example Microsoft's Outlook or Word.","\u201cDLL\u201d is a dynamic link library. This term is common for example in all versions of the Windows operating system. In other operating systems it might have different names but the principle is similar. In general it is a term for a set of routines that can be called from executables, loaded and linked into them during run time.","\u201cDevice driver\u201d or \u201cDriver\u201d is a software component that allows an operating system to communicate with one or more specific hardware devices attached to a computer, such as for example a hard disk controller, network card or display card. However, this can include also any software component running in the privileged mode\u2014in the Kernel.","\u201cOS\u201d or \u201coperating system\u201d is software responsible for controlling the allocation and usage of computer hardware resources such as for example memory, CPU time, disk space, and peripheral hardware devices.","\u201cIRQ\u201d or \u201cInterrupt request line\u201d is a hardware line over which a hardware device, such as for example an input\/output port, keyboard, or disk drive, can send interrupt requests to the central processing unit (CPU). Interrupt request lines are built into the computer's internal hardware and are assigned different levels of priority so that the CPU can determine the sources and relative importance of incoming service requests. IRQ is an Intel concept to rank Hardware and Software requests according to their importance.","\u201cUser\u201d or \u201cusers\u201d as used throughout the text are always meant interchangeably to be either user or users. The user or users can be for example the individual user of a computer or computers or a corporation or organization that uses the computers. Therefore, preferably various types of authorizations for example can be given either by the individual user of the computer or for example by the security administrator of the company, or any combination of these. For example some companies might want to give full authority on critical issues only to the system administrator, while others might want to let the employees or certain employees have much more direct control.","\u201cUser authorization\u201d as used throughout the text can include also of course additional guidance and options.","\u201cDatabase\u201d or \u201cDatabases\u201d as used throughout the text are always meant interchangeably to be either database or databases.","\u201cNetwork\u201d as used throughout the text is always interchangeable as either network or networks and represents a connection from a computer (as defined below) by any way to one or more computers or any other compatible communication device.","\u201cFile\u201d is one or more areas on one or more disks and may have a definition in the FAT that may be represented as a name, directory, etc. and may have other parameters.","\u201cRegistry\u201d is one or more files that may contain operating system and other program settings and mainly managed by the operating system.","\u201cComputer\u201d can refer to a personal computer or workstation or server, or any automated device or gadget with one or more processor or CPU, capable of more than simple arithmetic functions. This can include for example also cellular phones and portable computing devices such as for example a palm pilot. This can include also, for example, computers in cars, which may for example become very important as cars become more automated or even capable of automatic driving, since if hackers are able to damage them for example by Internet or satellite connection, it might even cause life-threatening malfunctions. Other examples can be computers in satellites (In which case, user authorization, when needed, preferably should be requested remotely by encrypted communication with user remote verification), sensitive computer systems in airplanes, etc. So, eventhough we give the examples usually from a PC and Windows perspective, similar principles can be applied also to palm devices, cellular phones, and other types of computerized devices. Also, \u201ccomputer\u201d or \u201ccomputers\u201d as used throughout the text are always meant interchangeably to be either computer or computers. Therefore, whenever the word \u201ccomputer\u201d or \u201ccomputers\u201d is used throughout the text of this patent, including the claims, it can mean any of the above defined devices.","\u201cServer\u201d is a computer on a network that is running software that provides data and services to clients over the network. The term server can also apply to a software process that similarly sends information to clients and that appears on the same computer as a client process, or even within the same application.","\u201cKernel\u201d is the portion of the operating system that manages and controls access to hardware resources. It performs for example: thread scheduling and dispatching, interrupt and exception handling, and multiprocessor synchronization.","\u201cDMA\u201d is Direct Memory Access.","\u201cImage Loading\u201d as used throughout the text refers to an executable code that is being loaded for execution or unloaded\/terminated.","\u201cHooked function\u201d as used throughout the text refers to an executable filtering code placed between the calling code and called function and thus has the ability for example to monitor and\/or intercept and\/or redefine the function that is being hooked.","\u201cAPI\u201d stands for Application Programming Interface.","\u201cDisk\u201d or \u201cdisks\u201d is short for \u201chard disk\u201d or \u201chard disks\u201d, unless indicated otherwise. \u201cDisk\u201d or \u201cdisks\u201d or \u201chard disk\u201d or \u201chard disks\u201d can mean interchangeably either single or plural.","It is to be understood that in the preferred embodiments hard disks are just an example of the storage devices or storage media which the patent summary and other parts of the patent refer to. So throughout the patent, including the claims, where disks are mentioned, it can also refer to other non-volatile storage devices that exist or may exist in the future, such as for example Magnetic RAM (MRAM), or other types of secondary memory which have or will have a similar function to a hard-disk. Similarly, whenever files or directories are mentioned it can also be files or directories on such other non-volatile storage devices.","All of the descriptions in this and other sections are intended to be illustrative and not limiting.","Referring to , we show the preferred main elements of the Security System () within a typical structure of an operating system () in a computer (which can be for example a server, a personal computer, or other computerized gadgets or devices as explained in the definitions), with some of the hooked peripheral device drivers, especially those related to storage devices () and communication devices (), and preferable places and ways that the various parts of the Security System () are coupled to and interact with the above typical structure. The entire system and method can be regarded also as a virtual machine that performs the described functions.","The Security System is preferably comprised of the following main elements:\n\n","The Security System may also include (as another possible variation) an optional hardware element () shown in more detail in , which can alert the Security System's software to any events where access has been made to the security-sensitive ports () and\/or memory () without an apparent corresponding event on the system level as monitored by said Security System's software. Another possible variation is to put a similar element for example, instead or in addition, in the modem or communication card itself, and\/or for example in the motherboard or in the CPU itself, and\/or for example on the hard disk interface.","Further referring to , preferably the main rules and functions performed by the Security System include at least one or some or more (but preferably most) of the following:\n\n","As explained in the beginning of the clarification section, any feature or element of the above features or elements or at least some of them, like other features or elements described in this application, can be used also independently of the other features or elements. Among other things, this system and method are important for example for the prevention of theft of highly sensitive codes, such as for example private encryption keys or credit card details. This is important because in the USA a recent legislation regards digital signatures as no less obligating than handwritten signatures, and in other countries there are similar legislations in process. One of the biggest service suppliers in this area bragged that it could take almost infinite time to break the private keys in these digital signatures, but ignored the simple fact that there is no need to break the keys since it is much easier to steal them, for example by a Trojan horse arriving by e-mail or through a web page by exploiting various loopholes in browsers or e-mail programs. Since such a signature can be compelling in any kind of contract, including wills and huge real estate deals especially in places where it comes with a non-repudiation policy, it is clear that the damage from stolen keys can be enormous. This is especially dangerous since many times such private keys are generated and stored for example by the browsers. By enforcing the rules, such as the automatic segregation rules and requesting authorization from the user about any access to any communication channels, such theft can be thoroughly avoided. However, in the cases where the keys are generated or stored by the browsers, preferably additional rules are used in order to identify the directories where these keys are held, otherwise accessing the keys by the browser would be within the browser's default authorization. Also, preferably, in this case the Security System also learns various characteristics of the way the user is normally accessing the keys, so that when sudden unusual characteristics are apparent, preferably a special interception and warning can be issued. Even if hardware cards, such as for example smart cards, are used for storing the encryption keys, these keys might still be stolen by Trojans for example by overwriting parts of the programs that access these cards or by monitoring the data in memory while it is being generated by these programs. Another possible variation is that, preferably in addition, preferably the user can keep various different keys, preferably each limited to one or more specific purposes (for example one only good for communications with the USPTO, one only good for a certain type of documents, one only good for certain types of authorizations, one good only for authorizing expenses up to $1000, etc), so that even if keys are stolen then they preferably cannot be used without knowing the limitations of each key and cannot do damage beyond their limited abilities. The list or lists of limitations are preferably kept in an isolated separate place with encryption, or for example are kept only at a separate authority, for example the authority that issued each key.","In cellular phones, for example, eventhough they usually don't have yet sophisticated or sensitive operating systems and file systems compared to Windows, for example, and the operating system is usually EPROMM based, still at least some of the principles of the present system and method can be applied, such as for example:\n\n","More technical details are described in the following figures.",{"@attributes":{"id":"p-0069","num":"0126"},"figref":["FIG. 1","FIG. 1","FIG. 1","FIG. 1"],"i":"b ","b":["102","1002","770","740","1106","1108","5"]},"A preferable way of viewing and\/or modifying the database of authorizations is for example in the form of a table which lists the names and preferably various identification marks of applications allowed to access communication channels (and preferably possibly also a list of which channels), or to exceed their natural environments, or to have any other privileges which normal applications do not have by default, and lists which such privileges they have been given. Some activities might remain unallowed to any applications, such as for example trapping the keyboard device in order to catch keystrokes. Preferably this table includes also various statistical data about the behavior of each program, as explained before. In an organization where most control is in the hands of the system administrator, preferably the security system installed on each computer still runs a similar table and maintains a similar database, however the system can limit what the employee can change without the administrator's authorization. In such an organization, preferably on the administrator's computer this table contains also additional information and controls, such as for example the list of computers connected to the system within the organization, preferably with a unique identifier to each computer, and preferably with additional statistical information on the behavior of each computer in the list, so that preferably the system can automatically alert the administrator for example whenever a computer in the system starts to deviate significantly from its normal behavior, such as for example unusual disk activity or unusual communications activity. Such data is preferably also logged. Preferably the communication between the administrator's computer and the employees' computers is encrypted and secure. Preferably, in addition to this, the Security System on the administrator's computer constantly sends short communications at short intervals to the other computers in the system in order to be able to notice quickly for example if the Security System on any computer has been damaged or disabled. Preferably, this short communication can contain for example special codes with different keys for each computer, so that only an active Security System can respond to it properly, and so that a different response will come from a working computer where the Security System has been disabled or is not working properly (including for example if the computer was booted from a diskette instead of the hard disk), and no response from a computer that is turned off for example. U.S. application 20030055962 by Gregor Freund, filed Aug. 30, 2001 (3 months after the above feature was already included in our PCT\/IL01\/00487, for which the present application is a CIP) and published Mar. 20, 2003, describes similarly such querying by a gateway computer to check if the individual computers have a properly working security system, and uses this information to block computers that have not responded properly from access to the Internet through the gateway. However, intercepting or blocking communication attempts in cases of unauthorized or suspect activities is clearly one of the options available for action\u2014as mentioned already in many other places in our PCT, including interception at the gateway. Of course other actions are also possible, such as for example checking preferably immediately what is going on in the computers that have not responded properly (for example by sending someone immediately to this computer or computers and\/or for example sending some signal that can temporarily deactivate the system on the computer, which is done preferably by a secret driver that is preferably installed in the OS and can respond to the special deactivation code), since as explained above in clause 4 of the reference to , a compromised computer might also for example steal data for example through the modem or the fax or wireless channels and thus might bypass the gateway, or for example might be operated by an employee or an infiltrator who is trying to steal data physically, for example though a CD-R drive. Another possible variation is that preferably, in addition to this, if the computers in the organization are configured to access the web for example only through one (or more) central gateway computer (which might be the administrator's computer, or a separate computer), as shown in  (so that for example each normal computer in the system does not have an independent modem and only has for example a network card), this might be used as an additional control for catching backdoors that might exist for example even in the operating system itself: In this case, preferably all communications are routed also through the administrator's computer, and the Security System on each computer preferably reports to the Security System on the administrator's computer all the time or at preferably short intervals for example how much data it has allowed to be sent out from the computer's communication channels, so that the Security System on the administrator's computer can preferably notice and intercept immediately or after a short interval communication attempts from computers where the amount of actual communication does not fit the amount reported by the Security System of that computer. In order to find how much data has been actually sent by each computer, the Security System on the administrator's computer can for example check the packet headers by itself or use for this for example the services of the network firewall on the gateway computer if such a firewall is being used, or use some other routing information to know from which computers the data is coming (such other routing information, for example by letting each communication card add its own unique stamp to the data after it leaves the computer, or by other hardware features of each line, is preferable since the source addresses in packet headers can be easily falsified for example by hostile Trojan applications that send out stolen data. If the communication cards adds its unique stamp, preferably it also checks and removes any such stamps that come from the computer in order to avoid falsification, or for example the gateway or the Security System on the administrator's computer can discover such falsification because it will cause redundant stamps). This feature is very important and can be used also independently of other features to find cases where the actual amount of data sent-out does not fit the amount reported, even for example the amount reported by the dialer of the operating system. (Of course this can also catch for example also a hostile network card or modem card that might for example through hostile firmware steal data directly from the disk controller and send it out, except that in this case the unique stamp provided by such a card cannot be relied upon, and that is why preferably also other hardware features are used to identify uniquely each line). Another possible variation is that the security system of each computer preferably reports to the Security System on the administrator's computer (or for example on the gateway) in addition to this also additional data identifying the packets that are being sent out, such as for example special CRCs or various statistical characteristics, in order to prevent for example a case where a hidden backdoor (or Trojan that managed to slip through the Security System) blocks exactly the same amount of legitimate outgoing data while sending the same amount of stolen data so that the total amount of data sent out does not change. If a hostile Trojan application will for example falsify the source address of each packet (for example in a version where no additional hard routing information is available), then the central Security System will either see an illegal source or some other source computer will thus be attributed the additional data, and with the above additional feature the statistics or CRC can also help to pinpoint more easily the computer which has been taken over. Another possible variation is that, instead of or in addition to the above, the Security System of each computer preferably also encrypts the outgoing data packets (or at least their statistics or CRC data or other identifying data or fingerprints or a redundant copy of such data) with a unique identifier for each computer and a special signature (preferably also with a time & date stamp which preferably also changes all the time), preferably like in all the secure control communications with the Security system of the administrator's computer, and the Security System on the administrator's computer or the gateway decrypts the data and allows it to pass only if it is legitimate and thus can discover immediately when some illegal communication is happening. Another possible variation is to use for example the IPSEC protocol for the communication between each computer for example to the gateway and\/or administrator's computer, in combination with control information of the Security System that describes at least the amount of data that is sent out each time, so that no packets can be changed or replaced with other packets or replayed. In this case, preferably VPN (virtual Private Network) and IPSEC is required for communications within the internal network, and preferably the gateway computer opens it. This way, the IPSEC and all its negotiations are done by the Security System, and thus attackers cannot use the communication interface below without having to go through the Security System for communication. However, in order to enable the checking of mismatch between what was sent and what was received, preferably the security system is able to monitor and take into account for example re-broadcasting of presumed lost packets in the socket layer. Of course, more than one administrator\/gateway computer can exist. Another possible variation is to use for example for each computer (or each group of computers) a modem or network card or other communications device ( in ) capable of monitoring at least the amounts of data sent out so that this communication device can preferably report back to the Security System of the computer how much data actually went out, so that preferably the communications can be immediately blocked and an alert issued if the amount of actual communication does not fit the amount reported by the Security System of that computer. (Preferably the blocking in this case is done by the Security system, however another possible variation is that it can be done also by the communications device itself, or by the administrator's computer or the gateway computer in organizations where all the traffic goes through them). This has the advantage that it can be used also for single computers or small groups of computers that don't use central control, however it could be used also in organizations with central control. Again, this is important and can be used also independently of the other features of this invention to find cases where the actual amount of data sent-out does not fit the amount reported, even for example the amount reported by the dialer of the operating system. Another advantage of this is that there is no problem of falsifying the origin addresses in packet headers, since all packets that reach the modem or network card come from a single computer coupled to it. Additional variations can also be used here like those described above in the case of these checks being done at the gateway or administrator's computer (As explained above, it should be clear that in the above variations functions that can be done on the administrator's computer can be done in addition or instead at the gateway computer or vice versa or they can be the same computer). Preferably if such a communication device is used, it has a firmware that cannot be changed by software but only by physical replacement, in order to reduce the chance for hostile takeover of this device itself, and preferably the communication device is also capable of generating automatically various reports on outgoing and\/or incoming data and preferably the security system makes sure that no other applications can interfere with the device driver of the communication card and thus mess with these reports. Another possible variation of this is for example reporting similarly also how much data went in. Another possible variation in organizations is that reports about such cases of incongruities are reported automatically by these communication devices also (or instead) for example to the system administrator. Of course, various combinations of the above and other variations can also be used.",{"@attributes":{"id":"p-0071","num":"0128"},"figref":["FIG. 2","FIG. 1"],"b":["201","202","203","700","204","211","700","700","207","1001","1002","212"],"i":"b"},{"@attributes":{"id":"p-0072","num":"0129"},"figref":["FIG. 3","FIG. 1"],"b":["301","302","303","700","304","311","700","700","307","1001","1002","312"],"i":"b"},{"@attributes":{"id":"p-0073","num":"0130"},"figref":"FIG. 4","b":["401","402","403","700","404","411","700","700","407","1001","1002","412"]},{"@attributes":{"id":"p-0074","num":"0131"},"figref":["FIG. 5","FIG. 2","FIG. 2"],"b":["501","502","700"]},{"@attributes":{"id":"p-0075","num":"0132"},"figref":["FIG. 6","FIG. 8"],"b":["601","602","700","603","604","1002","605"]},"Referring to , we show preferable main parts and methods of a Security System database. The database or parts of it are located in computer's memory and in storage media. Any access to the database is encrypted () and its origin identified (). The authentication is checked () and if hacking was spotted the program preferably proceeds to special termination process (). If the access is authenticated the database may set or retrieve information () from or to the records () which preferably contain statistics records (), Process ID (PID) records (), additional records (), log of activity () and Security rules () which preferably contain info such as for example file records (), Network records () and Registry records (). Each group of the rule records preferably contains the following information: acquired user's rules, pre-distribution acquires rules, default rules and variant parameters (as described above). If the request is for storing information, the request is performed and returned to caller () (one of the Security System inner functions). If the request is for retrieving information, the following preferably occurs: The database keeps track of statistics and analyzes (). If the Security System spots any suspicious deviation in activity, the answer returned to the caller function is negative and the appropriate explanation passed through () (this action is performed when handling information that is not inner security database such as for example PID-, etc.), otherwise it returns the answer that was retrieved from the database ().","Referring to , another possible variation is that the Security System may also include an optional hardware element () which gathers () and\/or logs () monitored hardware port accesses (), DMA (), IRQ (), etc.","Preferably the monitoring hardware mainly monitors access to storage devices (especially hard disk controller) and access to network devices (such as for example modem, network cards, etc.). Preferably, the monitoring hardware has an interface () for transfer of information from the Security System's software () to said hardware element () (such as for example through accessing read and\/or write ports in said hardware element ()) and for immediate feedback to the Security System's software () (such as for example through accessing read and\/or write ports in said hardware element (), through interrupts, etc.) so that it can alert the Security System's software () to any events that have been defined in the built-in local database (). The comparison of events between the software monitoring and the hardware monitoring can preferably be done by either the hardware element (), by the software part of the Security System () or by both. When either the hardware element () or the Security System's software decides that unknown access has been made to the above monitored hardware without apparent corresponding event on the top system level as monitored by the Security System software (), the event is intercepted and reported. Monitoring and catching these events enables the Security System to further close any remaining loopholes in the operating system and programs that may override agents hooking, and ultimately even catch and intercept even backdoors in the operating system if they exist.","Referring to , we show an overview of a preferable self-preservation method. Any Security System part that is being called () performs a regular check every defined time () for all Security System files integrity () and its running functions' (as described in ) integrity (). If a deviation is found (), it preferably informs the user for full understanding of the situation and performs a Self-preservation interception and report (). In addition to this, in order to protect itself in memory, preferably the security system defines a part of the physical memory so that no other process can access it except by using a limited number of calling gates (such as for example when calling one of the hooked functions), and any other attempt to access this memory area for example for reading or writing causes a CPU exception which transfers control to the Security System. Since the Security system can know from this which application tried to \u201cattack\u201d it, the security system preferably initiates \u201canti-hacking\u201d measures, such as for example disabling the attacking part of the process, terminating the process, destroying the process's environment, etc.","Referring to , we show a preferable method of the interception process. It preferably contains two major interception routes: The first is a normal interception ()\u2014it is used when an executable tries to perform an unauthorized activity. In that case it can for example notify the user () (as described above), blocks the parameters from reaching the original function (), and can for example inform the original caller (the program that requested the function) about function failure. The second is a Self-preservation interception (). It is used when the Security System detects an intrusion of any kind by an offensive program or a hacker. In that case preferably it terminates the offensive program immediately () (such as for example unload from memory, etc.) (Method of termination may be different from operating system to another), and the Database () is modified so it marks the offensive program and\/or its files accordingly () (such as for example not allowing the access to them, etc.). A self-check is being performed () (as described in ) and if the Security System is endangered (), it starts Survival emergency procedures () (such as for example reinstall, shutdown parts, reload, etc.). If not, it continues monitoring (). Although it may seem from the diagram that in certain cases there might occur endless loops, this is not the case in reality, it only seems so because the diagram is simplified.","Referring to , we show a graphic illustration of a preferable way in which processes may be segregated and controlled. Whenever a process () attempts to access other processes or their natural environments () or possibly important system resources (-), it has to go through the Security System's interception and decision engine, so that practically a virtual environment (referred to below as VE) or virtual computer () is created around it. However, it should be noted that this graphic illustration is just a possible example. Not all of these functions are necessarily implemented, however, preferably, most or all are implemented. (Category \u2014other\u2014refers to other possible resources that may be relevant for example in other operating systems or other CPUs, or for example other devices or other virtual environments). A more extreme possible implementation of this concept (as illustrated also in and ) is for example that every time a new program is installed, it is given the illusion that nothing else exists on the computer but itself and the operating system and the computer resources (For example software and hardware) that it is allowed to see, so that only the user and certain programs such as for example the relevant parts of the Windows directory explorer and privileged programs given special explicit permission by the user or by predefined rules can see the real directory structure and resources. Preferably these permissions can be given either at the level of an entire program, or for example at the level of segments or parts of the program, so for example the part of explorer that deals with the screen does not need to be given permission to access the directory system. This can further limit for example the extent of damage that can be caused by various exploits. This way, it is like an infinite set of new installed computers, each with a clean and new operating system, and each computer runs only one program: For example, one runs Internet Explorer, a second runs Windows Word, a third runs DOOM II, and so on. However, as explained for example in function no.  of , of course more than one program can share the same Virtual Environment (referred to below as VE), since more than one executable can be for example in the same directory. This means that of course, like in the other variations of the automatic segregation, the user preferably sees the normal desktop appearance, as is graphically illustrated for example in , which includes various applications regardless of the VE (Virtual Environment) boundaries, and similarly the user of course preferably sees normally for example the list of installed programs for example in the Windows start menu (i.e. preferably the merged view, as explained below). Similarly, when viewing the directory structure itself preferably the user sees only the normal directories and\/or files (preferably including for example the registry) and\/or other resources, preferably as they would be if there was no actual segregation to virtual environments, so that the user does not have to see for example additional directories or subdirectories and\/or files that are needed for the actual implementation and\/or enforcing of the virtual environments, such as for example directories and\/or files needed for the implementation of the \u201ccopy-on-write\u201d principle explained in clause 8 of  or for the implementation of Sub-VEs, as explained below. This is preferably implemented by automatic merges of the various VEs, as explained below. However, as explained below, another possible variation is that when for example a file exists for example in c:\\ only virtually but exists really only in one or more VEs then the user does not see it as if it exists in c:\\, especially for example in the mode where the user can see the real directory structure. Also, if there is for example a crash and the user needs to repair the disk structure for example from a diskette or from command-mode only, using a standard disk fixing utility might for example confuse the user since he might suddenly be exposed also to files and\/or directories that are related to the actual lower level implementation and\/or enforcement of the VE segregation. Therefore, in this variation preferably the Security system includes also its special rescue and\/or repair and\/or maintenance utilities so that for example questions can be displayed to the user through the merged view. Another possible variation is that the user can see also the special directories or files needed for the actual implementation or enforcing of the VE system or at least some of them, and\/or the user can for example switch back and forth between a mode where they are hidden and a mode where they are revealed, thus preferably seeing the real directory structure. This can be very convenient, so that in this variation preferably for example the user sees the merged view for example at the desktop and when viewing the list of installed programs, but when looking at the directory structure for example in the explorer or with a DOS or CMD window can preferably see the real directory structure and files, preferably without seeing the merged files, and can preferably switch between this mode and the merged view mode. (As explained above, another possible variation is that when the user looks at the directory structure he can see for example both the merged view and the actual directories in which the virtual files really reside). Anyway, regardless of which variation or which exact implementation is used for the virtual environments, it should be emphasized that preferably there is a single installation of the OS with shared resources, and preferably the user can see a merged view of the Virtual Environments and can preferably work freely without VE limitations.","If the user wants to run for example a virus-scan program, which preferably has no VE limitations, then (apart from the fact that the user or for example the administrator needs to give it these access rights, as explained below), preferably the virus-scan program can access freely all the real files and directories, including for example files and\/or directories created for the implementation of Copy-On-Write or of sub-VEs. This is desirable, since the user should preferably know of any known viruses that exist on the computer, even if they are in a limited VE or for example sub-VE or for example Copy-On-Write file (or other special files or directories that are needed for the implementation of the VEs), since the user (or the administrator) might for example at least in some cases want to remove the entire infected VE (for example if it is a directory and\/or other resources that belongs to the virus itself). This is also preferable as an additional precaution, since the user might for example inadvertently give a virus access rights outside its VE or be for example cheated by misleading questions in the dialogue box as explained in the reference to , so leaving a known virus even when it is isolated is not desirable. This means that when the anti-virus program reports a virus or asks the user for a confirmation for deleting a virus, the user might be exposed again also to the special files and\/or directories. This is another reason why preferably the user should be made aware of the existence of such special files and directories and preferably the user can switch between a mode that shows them and a mode that does not show them. (If, on the other hand, the user is never allowed to see these additional files or directories, this means that preferably either the Security System comes with its own special anti-virus program or programs, or for example it interferes whenever the anti-virus program wants to show the user any of these special files or directories, and then for example the security system can answer automatically instead of the user and\/or for example questions can be displayed to the user through the merged view. However, this variation is less preferable since it might involve deciding instead of the user at least in some cases, or hiding from the user for example the fact that a virus was discovered in some sub-VE or in some Copy-On-Write file and removed. This also would contradict the principle of letting the user know what is really going-on on his computer. In addition, in this variation if the user for example decides to run an independent anti-virus program in command-mode only or from a diskette, this might again cause inconsistencies). On the other hand, since the anti-virus program might need for example to scan various registry entries, preferably the security system lets the anti-virus program see properly at least the merged version of the registry. Another possible variation is that the Security System for example lets the antivirus run automatically each time on the next VE, seeing each time only the scope of that VE, but that is less preferable since it could have for example the side effect that the user would see each time the antivirus reporting again for example that it scans the same sequence of directories, (for example c:\\, c:\\windows, etc.), and for example sometimes a virus is found there (because there is a virus in the currently scanned VE), and sometimes not, or after the virus has been removed it reappears, etc. Another possible variation is that the Security System runs either a special antivirus or for example interferes when the antivirus shows results and then for example reports the results to the users in terms of VE's\u2014for example this and this VE was found to contain a virus, and\/or for example asks the user if he want to remove the virus or for example remove the entire VE. Similar principles preferably apply for example when running for example scandisk or similar programs, so that preferably one or more similar variations are used in this case. However, as explained in other places in the present application, at least in some embodiments preferably at least part of the Security System is activated even when the computer is booted from other sources, such as for example a diskette, a CD, or another disk or partition. And since the Security System is preferably installed below the OS, this means of course that preferably the security system or at least part of it is active of course also if the computer is started for example only in command mode for example without Windows running, or for example if Windows is started in safe-mode.","For the implementation of the VE segregation preferably the Security System is the first thing installed after the operating system, and the security system preferably relies mainly on identifying if the user or the program initiated each security-sensitive action in order to decide automatically if to allow it or not, as explained in the reference to . (However, it should be kept in mind that in the variations or modes where the user is shown the merged view of the directory structure and\/or file system, of course the dialogue box is preferably also consistent with this). This way preferably the amount of nagging to the user is reduced to the minimum. However, this still preferably involves additional safeguards, as explained for example in the references to and in other sections. So since the user can see the entire directory structure (or for example at least the allowed parts of it if he has less than root privileges) and the program can only see its own VE (Virtual Environment) unless explicitly given additional rights, preferably all of the actions initiated by the program are automatically limited to the scope of its own VE. As explained in the reference to , preferably the VE contains mainly its own directory with its sub-directories, but preferably the program or programs in the VE can access also essential non-strategic OS directories or files, preferably for read-only, and if they try to change these files, preferably the file that needs to be changed is copied to the VE and changed only there. However if we take this to the extreme, it creates the problem that when the user tries for example to run an anti-virus scan program or any other program that needs access for example to the entire disks or at least to other directories in order to do its work properly, the program will be able to scan only the scope of its limited VE, and the user might not even notice that the program actually didn't do its job. So, again, preferably there is a mechanism that allows the Security software to ask the user about it and\/or at least a mechanism that allows the user to explicitly give these programs the additional access rights that they need, as explained in the reference to . Another problem is that some programs that can access the Internet, such as for example MSIE, Windows Media player, and others, may behave like integral parts of the operating system or at least might already be installed automatically during the installation of the operating system itself. Therefore, in order to isolate them into their appropriate VE's, preferably the Security system uses various heuristics in order to define the boundaries of their VE's, and\/or for example uses predefined rules. These heuristics can include of course automatically limiting them by default to their default directories and subdirectories, as explained for example in the reference to , and for example limiting their access to needed DLLs that are in appropriate System areas, to Read-only access. For special programs such as for example Microsoft Word and\/or other Microsoft Office programs (which are dangerous also because they can access critical or secret user data files and because they can also access the internet and because various exploits have already been used on them in the past), preferably predefined rules are used anyway, even if they are installed after the security system, because they behave in many ways like an integral part of the operating system after they are installed and because they can show some behaviors that would be considered highly suspicious if a normal program performed them. For example, when Word is loaded, it can quickly access multiple directories, even in other drives. Preferably such behaviors are analyzed in advance for creating the predefined rules about them, since such behavior might for example be used for spying purposes or for causing damages, if for example some Internet exploit (such as for example some buffer overflow) manages to take over Word. However, since Word is running in its own VE and therefore cannot see any directories and\/or resources other than the resources it is allowed to see, the scope of such scanning behavior is automatically limited anyway. On the other hand, lets consider for example what happens when Word is being installed: Since \u201cC:\\My Documents\u201d is created by Word itself and it can even insert various files in it then, it could normally be interpreted that this directory is part of its VE, so it can freely access any \u201c.doc\u201d files it likes in this directory. Now consider for example what will happen if Word (which can also access the internet) is compromised for example by buffer overflow or for example by an exploit using unsafe active-x and then immediately deletes for example all the \u201c.doc\u201d files. Of course it can do it because it is in its own VE. Or for example the compromised Word process in memory changes for example the disk copy of Word.exe, which is within its VE, and inserts for example a slow Trojan horse which for example secretly sabotages each file as it is being saved (as in the example given in the reference to ), or for example deceives the user into giving it additional access outside it own VE. This is another example why preferably additional safeguards are also used, as explained in the refs. to . Apart from for example preventing such changes in executables, another possible variation is for example that after an installation of a program has finished in its VE, any further changes to files in this VE are automatically copied to another sub-VE or related VE or child-VE, which is preferably subject to even more limitations than the original VE. This means of course that similarly any new files that are created in that VE are preferably actually created in the sub-VE. Preferably programs in the sub-VE have no access to their creating VE, but from the point of view of the creating VE the sub-VE appears to be merged in the VE. This sub-VE can be called also for example spill area. The connection between such related VEs can be for example through pointers (preferably reciprocal) and\/or table of relations and\/or through encryptions. Of course, if the Operating System allows various authorizations to different users, such as for example root user and normal users, the various VEs are preferably limited also within each user space. Another possible variation is to decide for example by predefined rules or by stricter VE rules, that Word cannot even access directly or see any \u201c.doc\u201d files that were saved by the user. However even this is not safe enough without the additional safeguards, since Word for example saves many copies of \u201c.doc\u201d files in temporary files, and since this saving is initiated by Word itself, these files are within its own VE. So now if Word for example becomes compromised for example by buffer overflow, the hostile code might for example make it send out on the Internet all the temporary doc files it can access. And like in the above example, without the additional safeguards, the hostile code can still for example change the disk copy of Word.exe and start sabotaging each time the current \u201c.doc\u201d file. In addition, this implementation still has the same problems as discussed in the reference to , that if the user wants to run for example in any of the Office programs Scripts that can really affect other files, he needs to be able to give these programs or at least these scripts additional access rights. Another possible variation is that when a new program is being installed the user has the option of choosing for example new VE (Virtual Environment) for that program (preferably this is the default), or for example allow it to become part of an already existing VE, so for example if the user is sure that this is indeed a legitimate update of Word, he can allow the update to update and\/or inherit all the current VE of Word, or for example allow it to have free access to the entire computer, if for example the user is sure that he is indeed installing now a Windows update for example from an original Windows CD or for example a system update or security patch that he has downloaded directly from Microsoft. So if for example the user installs an anti-virus program that needs to be able to scan the entire disks, he needs to install it at the highest level. But this, again, leaves the user vulnerable to installing by mistake programs at the highest access level that should not be there (for example a malicious program that pretends to be an anti-virus program), so, again, the additional safeguards are preferably also used. And also, preferably the user is able to correct mistakes for example by moving such a program back into a limited VE. Another possible variation is for example not to ask the user anything or almost anything and rely mainly on the VEs, and preferably also on additional safeguards, so that for example preferably at least some potentially highly dangerous activities are automatically blocked, even if the user apparently authorized them to the perpetrating program (or for example some are automatically blocked and some are decided by asking the user). (Another possible variation is to rely for example only on the VE and thus not ask the user for example about Internet access by programs that are limited in their VE and have not been given any additional access rights, but this embodiment is less preferable, since it would enable for example a compromised Word.exe to send files outside without permission, or a Virus for example to further propagate itself, or for example a zombie program to participate in a DDOS attack (Distributed Denial of Service) or become for example a relay station for spam (as is done for example by the SoBig worm), or a malicious program for example to simply take over the Internet connection and for example waste or block most or all of the bandwidth). However, If the user is an organization, then for example the system administrator might have much more control, for example as described in any of the relevant variations in the reference to . In that case the Sys admin can be for example the only one who authorizes programs to be installed with access rights outside their normal VE, and then there is no need for the Security System to tell the individual PC users for example if a program cannot function properly since it is trapped in its VE. On the other hand, since the administrator might also make mistakes or his computer might be for example compromised, preferably the additional safeguards are still applied for each computer for example when programs that have higher access rights try to do highly dangerous or suspect activities, or when the user gives such access rights to programs (for example by mistake or on purpose) for example through the dialog box. However, as described in the reference to , one of the possible variations in this case is that all the warnings are for example sent to the System administrator's computer, and preferably only he can authorize them or not. (Of course the administrator can also mean for example a user who is logged-in as root or administrator on a single computer, so that for example some decisions, such as or example if to allow a new program to be installed without VE limitations can be made only when logging-in as the root or administrator on that computer).","Another possible variation is that the Security System and\/or for example the Operating system can also alert the user and\/or automatically prevent or take action for example if a malicious program tries to misuse for example the CPU resources and\/or the free RAM memory and\/or the free space of the disk (and\/or other non-volatile storage devices) and\/or for example creates on purpose an artificial load on disk activity, etc., since taking over one or more of these resources on purpose can easily cripple the system or freeze it or even crush it. This can be done for example by at least one of the following ways: Taking over the free disk space and\/or creating false load on the disk activity can be prevented for example by a default quota for each newly installed application and\/or for each VE (which preferably can be easily changed by the user if needed), and\/or for example by detecting automatically suspect behaviors such as for example duplicating junk into large areas, rewriting again and again large areas or the same areas, etc. However, since such a malicious program can write data which cannot normally be identified as junk, preferably the identification is based mainly on statistical analysis of typical disk activities, so that for example sudden large usage of disk space preferably in combination with unusual various patterns or parameters of the activities or behaviors can be preferably identified as suspect. Similar analysis can be applied also to other resources, such as for example CPU, network or memory. Since it is very hard to decide automatically when a certain use of CPU or RAM resources is legitimate or not, preferably the Security System and\/or the Operating System automatically shows to the user (and\/or for example to the administrator in an organization, preferably with an indication of the relevant computer) for example on some part of the screen, for example whenever any of these resources become too low (preferably over a certain minimal period, so that normal short bursts do not create false alarms), or whenever significant deviations from normal statistics in these resources are detected, which applications are taking up most of these resources, preferably sorted in descending order of the resource consumption, and preferably also the percent they are using, and preferably also, to the extent possible, what they are doing, at least in general (preferably the VE of these processes is also indicated, so that the user can see easily if for example more than one program in a certain VE are involved in these activities). Similarly, the system preferably shows the user and\/or the administrator also the programs that take most of the Internet bandwidth, preferably also in descending order, so that the user and\/or administrator can easily notice for example if some program has unexpectedly started to take over the bandwidth without any apparent justification. And since an entire VE can preferably be removed by the user (and\/or for example by the administrator if it is an organization) preferably instantly and without leaving any traces, as soon as such a problem is discovered it can preferably be instantly solved by simply removing the problematic VE, for example by a simple click of the mouse. However, like the other things that can preferably instantly also be undone (as explained in the section that deals with undo), preferably any deletion of a VE can also be instantly undone at least for a certain time period, so that if for example an entire VE is deleted by mistake, this can be instantly corrected. Another possible variation is to automatically detect suspect activities such as for example entering the CPU into useless loops or other suspect cyclic activities, etc. (However, such activities are preferably automatically detected by hardware in the CPU itself since that is much more efficient than having a software detect this). Also, preferably the OS or the Security System requests authorization from the user if a program requests Real-time Priority (or any other priority that can significantly slow down other processes), at least the first time it tries to get such priority or for example every time unless the user gives it such a privilege from then on.","If shared drives are allowed for example in a network, preferably either only the user is allowed to access files on shared drives on other computers, or for example each program is allowed to see and access in each shared drive only the same VE that it has on its own computer, so that for example it can see only corresponding subdirectories on the other computers or for example it can see only files and\/or directories (and\/or other resources) which it created or was given access to, so that the remote shared drive is regarded like any other local drive on the system. Another possible variation is that it can see the corresponding subdirectories only on shared drives that have the same drive letters as the drive or drives on which its own VE resides. As explained above in the reference to and in function  of the reference to , preferably when a device driver attempts to be installed, the user or the administrator is explicitly asked about it, and preferably additional limitations are also used, such as for example limiting each device driver to only one specified type of device or devices, and\/or associating at least some device drivers to only a certain program or VE. (For example, in order to know which ports belong to which devices, the security system preferably also controls and\/or maps and\/or monitors for example the bus and the cards for example for ports, memory, interrupts, DMA channels, types, and\/or other resources, so that the security system knows more easily which ports and\/or other resources belong to which devices and can for example prevent a driver from accessing a port or other resource that belongs to an irrelevant device or for example can let the driver access the device only in a limited way for example by using various manipulations). Since device drivers that handle for example the storage media (and especially the hard disks), device drivers that handle the computer's memory and device drivers that handle the communication channels, are typically the most strategically important, preferably the user is warned more explicitly about attempts to install such drivers, and\/or for example only the administrator is allowed to authorize them, and\/or for example such drivers can only come with the operating system itself and\/or for example they are replaced by drivers supplied by the security system itself In device drivers that can access directly for example the hard disk or the RAM, enforcing segregation might be problematic, since by their very nature they can be used to by-pass the segregation rules. However, if for example some new game is willing to run only with its own screen driver, preferably, such driver is allowed to be used only within the VE of that game. If this screen driver is indeed limited to access only the screen and cannot leave for example side effects that can affect other programs while swapping out during multi-tasking, then there can be also embodiments where there is no need for permission from the user to install such device drivers. Another possible variation is that even for example drivers that go to the disk (and\/or to other resources) can be associated with a certain VE, so if they are for example in ring  and the security system in ring , the security system decides which actions to allow them to perform according to the definitions of their VE. In other words, preferably the same VE limitations are applied also to device drivers. Another possible variation is that no application is allowed to install any drivers that access directly hardware elements, but only drivers that call the actual hardware drivers. Another possible variation is that for example no applications are allowed to install any drivers at all, however that is of course a much less preferable variation since it creates unnecessary limitations. Another possible variation is that for example only device drivers supplied by the operating system itself and\/or duly certified and digitally signed device drivers that have not been changed since the certification are allowed, and no application is allowed to install any other device drivers, or at least any device drivers that can access for example the storage media, the memory or the communication cards. Of course, various combinations of the above and other variations can also be used.","Since all new programs are installed in their own VE (except when explicitly requested otherwise by the user), it becomes very easy to undo (or at least remove) any installation that has gone bad, for example because of some bug in the operating system or in the program or because it is a malicious program. So the user can very easily request an undo of the installation. However, if the user requests the undo after additional programs have been installed who's VE is for example based in part on the previous VE, then preferably either they are removed too, or for example the security system is able to automatically restore them after removing the problematic program with its VE. Another possible variation is that even if the user for example allows a newly installing program to inherit or overwrite an existing VE, the security system preferably first creates a virtual private environment copy of the modified directories (like described for example in Feature number 8 of the reference to ), at least for a certain period, so that the user can preferably still request to undo this if he made a mistake, at least for a certain period. After this period preferably for example the VE limitations can be lifted or this VE is merged with the intended VE. Another possible variation is that the security system backs up all the changed files or directories at least for a certain time and\/or keeps for example a rollback log of all changes that were made to the relevant files and directories or even of all changes anywhere in the disk, in order to enable the undo if the user needs it. Another possible variation is that even when the user allows a program to be installed without VE limitations, any changes in the entire hard disk after or during the installation, are completely undo-able at least for a certain time period (This can be done for example by keeping a roll-back log and\/or by making the changes first at least for a certain period only virtually, like in the above variation). This is more comprehensive than the current \u201cundo\u201d feature that Microsoft offers after installing new software, since the current features only allow restoring the registry and system files, and even that not always completely, whereas any other changes to directories or files cannot be undone. An even more extreme variation is that for example any changes at all that happen on the hard disk (and possibly even on other connected media) at any time are completely undo-able at least for a certain time period, in a way similar for example to the undo feature in a single Word document. This can be enabled for example by creating a backup of each changed file or directory in another area at least for a certain time period or until for example the backup buffer becomes full and older backups have to be deleted automatically. Another possible variation, which saves much more space, is for example to keep preferably a rollback log of all changes for example of directories, files, FAT areas, and\/or any other data (such as for example even any low-level changes in disk tracks), so that any changes that were made on the storage media can be rolled back by simply tracing back the log of changes. Preferably this rollback log is based on a circular buffer. Preferably this log is encrypted and is highly guarded and\/or is kept also in more than one place, in order to reduce the chance of its destruction by mistake or by some malicious software. This way even if the user has made a horrible mistake and the entire system has been compromised, even the worst damage can preferably still be automatically undone. Since the Security System constantly guards itself and its files and preferably also these logs from any unauthorized changes, it is still safe to activate the undo when the user needs it. Another possible variation of implementing this is that even if the user requested installation without VE limitation, the new program is first installed in a separate VE, and only after a certain time period or after the user authorizes it (and\/or for example after the security system checks various parameters to see that things seem ok), the VE limitations are lifted or this VE is merged with the unlimited VE. The various embodiments or features of this invention and especially those described here may be very useful for example in combination with the new Palladium system recently suggested by Microsoft (and\/or similar systems that exists or will exist in he future), because the Palladium is like a safety vault in a bank, except that there is only one safe in the entire bank and programs can access this common safe and request various services from it only if they have some signatures that mean that they have been certified by someone and have not been changed since then. The concept of such certification can be very problematic because it means that programs have to be certified in advance in order to be allowed to run on the OS or request certain services from it, so it could make development of new programs problematic, and also various falsifications could insert dangerous Trojan horses or compromise the concept in many other ways. Also, the certification process itself might be of limited value even if for example during the certification various behaviors of new programs are checked, since it could miss the fact that some certified program is actually a Trojan horse designed to explode for example 2 years later or is designed to become for example a spyware for example only under certain conditions that are not discovered while it is being certified, or the certified program has for example numerous security flaws that can later be discovered and exploited. Or the certification might not include any behavior checks but rely only on identifying vendors with some Id and making sure that the certified program has not been changed in any way since its certification, but this could still be very unreliable by itself because of the possibility of falsification and because dangerous behavior of a certified program can be caused for example by error or by some employee that inserts dangerous code on purpose. And even for example a security patch that has been certified and thus can for example update another certified program might still have for example a falsified certificate or for example is legitimate but inadvertently introduces new vulnerabilities. In contrast, the concept of the automatic segregation can make much better use of the Palladium, because by default any program can preferably request services from that safe only for accessing is own segregated world. In other words, Palladium only separates \u201ca trusted area\u201d from a \u201cnon-trusted area\u201d but does not offer protection from each other between programs (and their data) within the \u201ctrusted area\u201d and between programs and their data within the \u201cnon-trusted\u201d area. In addition, the two U.S. patents of Microsoft that seem to be the basis of Palladium (U.S. Pat. Nos. 6,333,670 and 6,327,652) only deal with encryption for protecting files against stealing the contents, but there is no reference to using other forms of protection for example to protect the disk from unauthorized deletion or corruption of the encrypted data. Therefore clearly Palladium (which later was renamed NGSCB\u2014Next Generation Secure Computing Base) at least needs to be improved so that programs that are not trusted preferably cannot have any access whatsoever in the disks (or other nonvolatile storage devices) to data files or directories that belong to trusted programs and to the trusted programs themselves, which preferably includes reading, writing, deleting, etc. (The enforcement of this can be done for example by any of the methods described in the present patent application. In other words, in a variation where a general trusted area and non-trusted area are enforced, preferably for example at least two VEs are created, one for the trusted area and one for the non-trusted area, and the virtual sharing between them is done preferably by any of methods described in the present application. In addition, in this case preferably there is also an OS mode or Update mode where the user and\/or the administrator can install applications and\/or drivers that need to be used in both areas (or at least in more than one VE). In this OS mode preferably the user can see a merged view of the two VEs and\/or for example see the real directory structure, including for example the sub-directories that are used for implementing the two VEs, and\/or for example see the view of one of the two VEs (preferably the secure VE). Preferably the system indicates clearly to the user, for example by special desktop wallpaper shapes and\/or colors and\/or for example by the color of top title bar of various windows, if he is currently in the trusted environment, the untrusted, or the Update mode. For this the system might enforce for example a set of one or more available different wallpapers for the desktop of each environment, or for example add its own markings upon whatever wallpaper the user chooses. Using these methods for enforcing the segregation between for example one or more trusted environments and one or more untrusted environments can be done of course also independently of the palladium or of any palladium-related hardware. Of course, the trusted environments can be for example in a hierarchy of levels, so that for example each trusted environment has a different level of security. When installing the security system in this variation on a computer that already has various applications installed on it, preferably the system automatically creates for the user a list of recommended files that should be migrated to the trusted VE, such as for example Microsoft office files and program source codes. The generation of this list can be created for example by any of the above described heuristics for deciding which types of files or directories are most important and\/or by user definitions or pre-defined definitions of these types, and after the user agrees to the list preferably all of the relevant file types and\/or directory types are automatically searched and added to the suggested migration list. In addition, if some malicious program for example damages the OS on the untrusted VE, preferably the user can activate a command that can preferably instantly undo the recent changes or for example delete the changed copies of the OS files on that VE so that the original shared OS files reappear in the view of that VE. Preferably it is possible to define separately for each VE what resources are available on it, so that for example the administrator might decide that the CD-R or other removable storage mechanisms or for example any wireless devices or for example specific programs or for example specific system services are not available in the secure VE. Another possible variation is that access to the network is divided so that for example the Internet can only be accessed from applications that are running in the non-trusted area and applications that are running in the trusted area can only access other computers within the internal network of the organization. This can be done for example by a built-in firewall that limits the ranges of IP addresses that can be accessed from each area. Another possible variation is to create for example even just one VE, for example to protect the OS). Another possible variation is to use these environments to enforce much better segregation between users, so that each user preferably has at least one VE of his\/her own (For example each user might have just one VE, or for example a number of VEs that belong to him, or for example there is an internal division into separately defined VEs within the user's VE), and\/or for example to enforce different profiles or configurations for the same users. This is different from the normal protection between users for example in windows NT or XP or in Unix or other multi-user systems, since in a normal multi-user environment only the administrator can install applications that need to update system files (for example the registry, etc.), so for example for various types of installations users have to login as the administrators, and then what they do affects all the other users. On the other hand, in Windows many types of programs can be installed through the Windows Installer, which gets temporary administrator rights during the installation, and thus, again, the installation can affect the entire computer even if the user is not the administrator. In comparison to this, using at least one special VE for each user allows the user to make whatever changes he wants in the computer without affecting the other users, preferably based on virtual sharing with Copy-On-Write, and thus any viruses or Trojans that succeed entering while he is the active user affect only his current VE. In this variation preferably there is also an update mode, as described above, so that for example special programs that are needed by all the users, such as for example Word, Internet browsers, and other Office programs, etc., are preferably installed in the update mode, so that they need to be installed only once for all the users, but, as explained above, any changes that individual users afterwards make in these installed programs are preferably created only in their own VE, based on virtual sharing. Preferably only one or a few of the users can access the update mode, such as for example the system administrator in a business or company, or for example the parents in homes, so as to reduce the dangers that ordinary users enter the update mode and cause damages on purpose or by mistake (Preferably the user that has rights to access the update mode can also for example specify that certain applications will not be visible to some of the users, as explained above about the possibility to define which resources are available or not available on each VE). These or similar variations can be used also for example in educational institutions, so that for example each student and\/or for example each class has its own user-VE (and\/or for example the class has a different VE of user VE's, etc.), and\/or for example in public-access sites, such as for example Internet Caf\u00e9s, and\/or in other situations where multiple users or multiple groups of users have to share the same PC. The virtual sharing is much more efficient than alternative methods of creating a virtual computer, such as for example emulation, which is very slow, or physically separating the virtual computers on the disks and installing a separate copy of the OS on each virtual computer. Another possible variation is that instead of instantly switching between users (for example by clicking on some icon or pressing some key, as described above for switching for example between the trusted and untrusted VEs), in order to switch users the users have to reboot the computer\u2014this makes the implementation more simple because no services have to be duplicated (see below) and this way the virtual sharing for this is not needed for a large number of objects but only or mainly for storage (file system and registry). However this variation is of course much less preferable since if users have to turn the computer off and on in order to switch users, many users will hate to do it and just keep working from the same user environment. Preferably this separate boot per each user or profile (or other methods of preferably instantly switching between them, such as for example simply clicking an icon or a button, as described above) is in addition to the normal division into users, so that for example once the user enters the computer in the Special VE that he\/she desires, he\/she can still use within it a system of normally defined users and administrator, etc. (However, some users might find this redundant and unnecessary to have such an additional internal division). Another possible variation is that this is preferably fully integrated within the OS itself, so that for example the experience of division into users and administrator is the same, but the higher separation is enforced by the above methods (i.e. virtual sharing is implemented within the normal user separation mechanism of the OS). Regarding the speed of switching between these VEs (or user VEs), it should be noted that our experiments have shown that in the variations where no boot is required to switch between those VEs, the switching is instantaneous\u2014much faster than switching between users for example in Windows XP. Another possible variation is that the hardware support of the Palladium\/NGSCB can be used for example to further ensure that the data in \u201ctrusted\u201d areas of the disk cannot be accessed at all by un-trusted software for example even if the computer is booted for example from a diskette or CD with a different OS. This can be done for example by any of the methods described in clause 9 of the reference to , so that for example the CPU will always activate at least part of the security system (or the relevant part of the OS that performs these security functions) even if the system was booted from another source. Another possible variation is that for example the hardware of the CPU and\/or the hardware of the disk itself does not allow any access to a file unless the software that tries to access it is identified as its rightful owner, for example by means of providing the appropriate password. This is very different from the concept of needing a password in order to decipher the data in a file, since in the encryption of a file does not protect it from sabotage or from deletion. However, for the reasons explained above, is it much more preferable to enforce the automatic segregation between programs as explained above, and not just create a binary separation between \u201ctrusted programs\u201d and \u201cun-trusted programs\u201d. Of course the Security System can make use of the trusted area of the Palladium in order to have stronger control. Another possible variation is to use the above suggested hardware enforcement of not having any access to a file without the password to help enforce more easily the automatic segregation, as mentioned above in a variation at the end of clause 9 of the reference to . Another possible variation is to use the automatic segregation in combination with one or more trusted and\/or untrusted areas, so that for example the automatic segregation (preferably into VEs) can be done for example separately and\/or differently within the \u201ctrusted\u201d area and separately and\/or differently within the \u201cun-trusted\u201d area, so that for example at least some rules or policies are different between the two areas and\/or for example even stricter rules are used if a program in the \u201cun-trusted\u201d area requests from the user to access a file in the \u201ctrusted\u201d area, or for example the automatic segregation into automatic VE is activated similarly within each separately defined VE (or for example within each user's VE) or within at least some of them. Of course, various combinations of the above and other variations can also be used.","Another issue is handling various OS services, such as for example print spoolers, MAPI, Windows installer, etc. Since services can work for multiple VEs at the same time and it is also difficult to know for which VE the service is working at a given moment, this might create a security risk, since for example a buffer overflow or other problems in one of the services could cause data to leak between different VEs. In order to solve this preferably at least some services are duplicated so that each VE has a different copy of the thread or process of the service that is running for that VE. However, for efficiency reasons, preferably these services are initially duplicated only into stubs or empty shells (preferably created for example by fork) for each VE in order not to use up resources before they are needed, and preferably the stub or shell is loaded with actual resources only when it becomes needed. This is also one of the possible variations that can be used for example for forcing the VE segregation also on various drivers. Another possible variation is of course that at least some of the services, instead of being duplicated, are regarded as an extension of the OS and thus are preferably treated like other shared resources. This is preferably done at least with specific services which are an integral part of the OS (Such as for example the server and the RPC) and which preferably have a well-known operation. Preferably at least some of the duplication of services is initiated by duplicating for example the services.exe utility of the OS itself during the booting.","Another issue is that in the new Longhorn Microsoft intends to add extensive indexing of files and their contents and\/or of other resources on the entire computer, so that the user will be able to carry on efficient searches in a way similar to Internet search engines, and various applications will probably be able to create and\/or use these searchable indexes. However, this feature of course may cause conflicts with the requirements of the automatic segregation. Of course, preferably this is solved according to the above described rules and principles, so that preferably only one or a few special applications which are preferably part of the OS or of the Security system are allowed to run such indexing on the entire computer, and preferably normal applications which are limited to their own VE can only create and\/or use such index or indexes in their own VE. However, if the Indexing is done for example by special OS applications, then this means that these applications preferably create a separate index for each VE, in addition the global index which is available at the OS view. However this might create some efficiency problems for example when various merges are used, since for each merged view different indexes would have to be merged. Another possible variation is that there is only one or more global indexes that are conducted for example by the appropriate OS or security application, and in this index or indexes preferably each file or resource has a code or mark that indicates the VE to which it belongs, and preferably when accessing this index only the files or other elements that belong to the appropriate VE or VEs are made visible. Of course various combinations of the above and other variations can also be used.","In order to make this more efficient in organizations (for example when installing the security system on computers that already have other software installed on them), preferably one computer can be used for example for learning all of the segregation rules and virtual environment parameters for each program, and this knowledge can be transferred to all the other computers in the organization, without the need to install the Security System before the other applications in the other computers. This last option is preferably used for example in organizations that want to install the security system on computers that are already installed with various programs after the Operating System. So preferably that one computer is installed from the beginning with the security system before any other program is installed on the OS, and then preferably all the other programs that are installed on computers in the organization are installed on it in order to learn the basic rules automatically so that they can be transferred to the other computers in the organization. Another possible variation is that if the Security System is installed on a computer that already has other programs installed on it after the OS, then preferably the Security System is able to cause preferably each installed program to automatically uninstall itself, preferably one program at a time, except that this uninstall is preferably virtual, so that the uninstalling program preferably doesn't really uninstall or doesn't really change anything, but the security system tracks the steps of the attempted uninstall and thus can learn about the associated files and directories and\/or other resources, and can preferably move them or parts of them for example to virtual directories and\/or files when needed. Of course, this might not work for programs where there is no uninstall information, so as explained above, preferably the Security system can also use various heuristics in order to define the boundaries of VE's of programs that were already installed before the Security System. Of course, if the security system is made part of the operating system itself (for example integrated into it by Microsoft, in case of a Microsoft OS such as windows), then the security system is by definition installed always during the installation of the operating system in all new computers that install this new OS, so by definition it is automatically installed before any other program. Preferably, in this case it is also installed for example before any applications that can access the Internet even if those applications are considered an integral part of the Operating system, such as for example MSIE, Microsoft Media Player, etc., so that for example the VE of these applications can be automatically determined during their installation. Another possible variation is that the security system is installed for example BEFORE the operating system or before most other parts of it. Of course various combinations of the above and other variations can also be used, as explained above. In addition, in systems that are always connected to the Internet even without opening or closing a connection Icon (such as for example some of the ADSL and\/or Cable modem systems) there is a problem that the OS might open the connection for example between the network card and the modem for example sometime during the booting process, before the boot has finished and before a normal firewall program is typically even started. This has the danger of leaving the system open to outside attacks even during the boot process itself. So another advantage of the current System is that if it is integrated in the OS and\/or is loaded before it then of course it can catch anything even before the boot of the OS itself is complete.","Referring to -, we show in more detail a few preferable implementation variations related to the sharing of files and\/or other resources between different VEs and to merging between different VEs. As explained above, a Virtual Environment is preferably like a bubble facility that encapsulates in it one or more applications with all the necessary resources that they may need to function, store data, communicate, and perform any other desired action for their intended purpose, based on shared facilities such as operating system, resources, etc. A Program running inside a VE preferably sees only resources available only in the local environment. However, typically a Virtual Environment cannot work by itself\u2014it must have at least some sharing with others, not necessarily equally, for example a program in the VE might have to use common files installed in the operating system, or for example two VEs, transparent to each another, might have to use the same file or other resource. A VE may for example delete or update shared files and\/or other resources, but the effect is preferably only contained in its environment. In order to enable this, the updating is preferably done by the Copy-On-Write (or \u201cCOW\u201d) principle described above. (Another possible variation is that instead of simply copying a file that is changed to the appropriate VE, the system for example can decide to save just the changes, so that for example if just a few bytes are changed in a huge file, only the difference is saved, like a roll-forward buffer (or for example the system can implement Copy-on-Write also on sub-sections of files), and then whenever that file needs to be viewed in the changed version the system can for example preferably automatically provide the correct view of the file with the changes included, for example by creating another temporary copy when the file is needed, or merging the changes on the fly when programs read or write to the file. However, such a method could be problematic and CPU consuming to implement with normal files, unless for example if it is supported by special hardware and\/or for example the file system itself is changed to support better different handling of sub-sections of files. In addition, if such implementation is used then preferably the system can automatically decide after a certain amount of changes have accumulated to switch automatically to actually saving a full copy, so that preferably this would be used at most only temporarily or in special cases). (As explained above in clause 8 of the reference to , for example in the registry preferably copy-on-write is used on individual keys, however it is much easier to deal with the keys separately since the keys are independent, so it is more like a directory in which each key is like a file). For deleting files and\/or other resources, preferably a similar principle is used, which can be called for example Leave-On-Delete (or \u201cLOD\u201d). When a program in a certain VE deletes a file, there are several possible situations that may occur: 1. The file belongs only to that VE. 2. The file belongs to another VE and may be seen by share (read-only). 3. The file belongs to more than one other VE and may be seen by share (read-only). 4. The file exists in more than one VE in different versions, for example due to Copy-On-Write. Preferably if real deletion cannot be preformed due to VE permissions, it is marked as \u201cLeave On Delete\u201d and thus will not be seen in merges, or in other words the VE that deleted it will continue to see the illusion that is was deleted. If that shared file is subsequently changed in the other VE or VEs where the share exits, preferably the file (and\/or other resource) remains unseen by programs in the deleting VE, but if the file is for example subsequently renamed or copied to another file in the shared VE or VEs then preferably it will become visible again also to the deleting VE. Preferably whenever a program or the user needs to see files or directories or resources that are logically on the same place (for example a certain directory) but are actually in a different place (for example because of the Copy-On-Write or for example because of the sub-VEs), all the relevant files are merged into a united view of what the directory structure would be without for example the Copy-On-Write or the sub-VEs.","Preferably if the user drags a file between different VEs it causes the receiving VE to access the dragged-and-dropped file, as if the user allowed it though the dialogue box. Similarly, with file completion objects, such as for example start\u2192run menu, this preferably works normally when used for example from the OS explorer, but when normal programs use this interface they can preferably query only their own VE, and for that a layer of secured object is preferably added. In other words, if a program tries to use this interface, preferably the Security System takes control over this interface, like it does for example with the dialogue box. Similarly, if a program such as for example Microsoft Word or a compiler lets the user choose from a menu to reopen a recent file, this creates the problem that the program might open a file without authorization by the user, since in this case there is no dialogue box. To solve this, one possible variation is that the security system takes control of this too and\/or monitors it and thus checks for example if the user really clicked on the file shown to him, or for example the security system overrides this interface with its own implementation of it, however these two solutions might be problematic since unlike the file completion this is not a standard interface. Another possible variation, which is more preferable, is that the Security System for example automatically allows the program to reopen the last N files that it was allowed to open, for example the last 5 files, or any other reasonable number. However, this has the problem that if the program, for example Word, allows the user to pick one of  or more files, then if the user picks for example the 6or 7file then the Security System will not allow the access (Preferably by telling Word that the path or file does not exist) and Word will report to the user that the file is not found or the path does not exist, etc. A similar solution is preferably used if for example a browser or a download utility is allowed to automatically complete an interrupted download of one or more files without asking the user explicitly again which files to access. Preferably the security system takes into account also the time that elapsed since the last time that these files were opened by that program and\/or for example the time since the last time the user explicitly allowed to open them for example through the dialogue box. Preferably if the executable code of such a program has changed for any reason, it automatically looses these reopen rights, and\/or is automatically transferred to another VE, as described for example in the reference to . (Preferably the time factor is also taken into consideration for example when opening a file normally with the dialog box, since typically after the user chooses a file though the dialog box the program will actually open it for example within a few seconds).","Similarly, if the user activates a program from a command line with one or more parameters that contain a file name or a path, it is preferably regarded by the security system as if the user entered the file name or path from the dialogue box, as is dictated by the above explained principle of regarding user input in a command line as a user authorized activity. Similarly, of course, if the user opens for example a DOS or CMD window and is for example in directory e:\\ttt and activates for example the command fgrep.com which is for example in I:\\util (and which is found for example according to the \u201cpath\u201d searching sequence defined in autoexec.bat), and the file name to be searched is given to fgrep.com as a parameter, the Security System again preferably regards it as a permission by the user to i:\\fgrep.com to search the requested file on e:\\ttt. Another possible variation is that preferably at least some semantic parsing is done on the command line parameters. On the other hand for example fgrep.com or any other DOS program might for example ask the user which file or files to open, and use for that question for example any graphic or textual format that it pleases. In this case, the Security system preferably handles this in a way similar to the dialogue box, so that for example textual questions and responses are monitored by the security system (for example by monitoring the text screen and preferably including semantic analysis of the displayed text), and graphical questions are for example blocked, and\/or other limitations are imposed on programs that user them. Another possible variation is that when the user has to answer DOS programs about file access, he for example clicks on the mouse and thus activates for example the dialogue box that is controlled by the security system.","As explained for example in clause 8 of the reference to , preferably the behavior between virtual environments can use similar principles (for example for virtual sharing and\/or for merging) for example for also other resources apart from storage, such as for example registry, graphical sub-systems, memory shared areas, etc., although their exact implementation may vary according to the resource.","The possible relationships between resources between 2 VEs for example regarding files are:\n\n","When there are multiple sharing relations there may be a problem that there can be multiple versions of the same file, for example because of the Copy-on-Write or because of multiple installations of the same file in the same virtual place (for example in c:\\ or in c:\\windows), and therefore there can be dilemmas which version should be regarded as the most relevant, which are preferably solved by defining hierarchical scopes of view. For example, if one or more VEs virtually change an existing file for example in c:\\ by copy-on-write, according to the above explanations and principles as explained already in other places in this application, the user of course preferably sees in c:\\ the original unchanged file, since that file is changed for the user only if the user himself initiates the access to the file or allows a program in a VE to access it for example through the dialogue box. (In other words the first default scope is the OS level). Similarly, if for example a program from some VE creates a real file in c:\\ (which means that the user allowed it for example through the dialogue box), then that file is of course seen by the user since it is at the OS scope. On the other hand, if one or more VEs create a virtual file for example in c:\\ that exists really only in their own VE, then preferably either the user does not see that file in c:\\, or the user can see in c:\\ a version of the file according to the order of scopes, so that for example if the file exists in one of the VEs that are created at the administrator level, then preferably the user will see that version of the file, and if the file exists only in one of the VEs that were created in the user level then preferably the user will see that version of the file. Within the administrator level and within the user level, if the file exists in more than one VE, then preferably an additional internal hierarchy of scopes is used, so that for example the version shown will be the version that was most recently updated or for example the earliest version or for example the version of the most recently installed VE, or for example the version from the earliest installed VE. However, allowing the user to see the virtual file as if it really exists in c:\\ is at least sometimes less preferable since at least sometimes it can create inconsistency and confusion: In this case for example if the user has an autoexec file of even just two lines, and a virus virtually modifies it through copy-on-write into its own VE, then preferably the user of course sees only the original autoexec file and not the modified file, and this real autoexec file of course takes effect in the user's scope. On the other hand, according to this variation, if the user had previously no other autoexec file then the user will suddenly see the autoexec file of the virus's VE, although it will have no real effect on the OS scope. An even worse problem could occur if for example there are at least some VEs that contain viruses or other malicious programs which decide every day (or for example every hour or any other period) to create and then erase again various files for example in c:\\ or for example in c:\\windows. This would mean that although there is no real damage in the OS scope, the user might constantly see files appearing and disappearing at least in the shared area of the OS. Another problem that can happen for example if the user did not have an autoexec file and is shown the virtual autoexec file created by a virus as if it exists in c:\\, is that the user might for example regard it by mistake as valid file and for example edit it or for example rename it or copy it or for example copy parts of it by cut and paste and then use for example a dangerous part of it in another file (If the user edits it then preferably the real file remains in the VE where it exists, however, if the user for example copies it or a part of it then there is a problem that the new copy could be the real OS scope). Therefore as explained above another possible variation is that the user does not see the virtual file as if it exists in c:\\ or does not see it at least in some cases. Anyway, in the variations and\/or in the modes where the user and\/or the administrator is shown such virtual files as if they really exist in the OS scope, preferably there is at least a preferably clear indication near each such file (and\/or directory) if it is a real file or a virtual file, and\/or the user can see for example by clicking on the file and\/or for example by the color of the file name (or icon) and\/or by other indication to which VE it really belongs (The name of the VE is preferably the name of the main directory of that VE). As explained above in the reference to , preferably in the modes or variations where the user sees the real directory structure there is no need to show him in the same mode also the merged view when browsing the directory structure. However, another possible variation is to allow the user to see ALSO the merged files in this mode, but preferably together with the above indication which files are real and which are virtual and preferably also to which VE each belongs. Another possible variation is using similar indications for example also in the start menu and\/or in the list of installed programs and\/or when viewing the registry and\/or when viewing other resources, so that preferably the user can easily know what files and\/or programs belong to which VE.","Similarly, if the user deletes the file, for example c:\\autoexec.bat, then one possible variation is that it is deleted only in the OS scope. Another possible variation is that it is deleted also in all the other VE's where another copy of the file exists for example at a result of Copy-on-Write, or for example to leave at least some of the other copies of the file, at least in some cases. However, this is less preferable since deleting for example the autoexec file in some other VE might cause the programs there not to function properly. On the other hand, if the user changes the file, then preferably it is changed only in the real file at the OS scope.","Similar principles preferably apply for the VE's point of view. For example, if VE has a write access to several other VEs (for example VE, VE and VE in or for example only read access to some of them as in ) and a copy of the same file exists in each of them in a different version, there is again the question of what version should be regarded as the most updated or the most relevant and\/or what VE should be updated. Preferably the hierarchy of scopes again applies, so that when VE tries to access the resource, preferably a merge of the resources is done by the security system (this component can be called for example VE router), which preferably first looks for the file in VE (This is different from the user since in the case of the user preferably the first default is the OS scope, as explained above). If the file is not found there, then it preferably looks for the file in the shared part of the OS, then preferably in shared VEs that were installed by the administrator, and preferably only then in shared VEs that were installed by the user.","This is similar to the merge that the user can preferably see, except that the user and preferably for example explorer and regedit and\/or other designed GUI utilities (which preferably have no VE limitations), can preferably see a merge of the same resource from all the VEs at least within the user scope (for example if he has less then root privileges) (for example the registry, file system and\/or other resources). This merged view by the user while each application runs in its own VE helps to keep the transparency to the user. Preferably when the system boots, for example, preferably for example the startup files that were installed by all the VE's are started, (preferably being normally merged) except that each runs in his own VE. However, as explained above in the reference to , another possible variation is that the user (and\/or at least the administrator) can see the real directory structure including for example copy-on-write files and sub-VE directories at least when using the explorer or for example browsing directories within a DOS or CMD window, or can for example switch between modes that show it or not, and the merged view is preferably used even in this mode for example at least for viewing the desktop, the list of installed programs in the Start menu, and the registry.","Preferably the divergence between the real directory structure (that includes for example copy-on-write files and sub-VE directories) and the merged view is kept at a necessary minimum, so that for example when a newly installing program requests to create a new directory and the user allows it, preferably the requested directory is really created at the requested path. (Another possible variation is to create the new directory only virtually, which has the advantage of allowing easier management, however that could make the divergence much bigger and is therefore less preferable). As explained above in the reference to , when a newly installing program needs to make changes for example in root drives or in system areas, preferably, unless the user for example explicitly defines it as an update to the OS itself (for example by having to choose special install options in a menu), any changes it makes for example in C:\\ and in system areas are based on Virtual sharing, preferably EVEN IF the user allows the program to install itself there through the common dialogue box. However, since new directories are preferably created in the real path, this means that preferably any sub-directories for example in \u201cc:\\windows\\Program Files\u201d are created indeed in the real path and thus do not become another source of unnecessary divergence. On the other hand, preferably new files in the root drives or in the system areas and changed files are preferably kept in the virtual-share sub-directories in the relevant VE. Similarly, as explained above, preferably if a new program for example requests to install itself in another existing directory, for example in the Pegasus email directory, then if the user allows it through the dialogue box or for example defines it explicitly as an update to Pegasus then the newly installing program can preferably install itself in the real Pegasus directory, otherwise (for example if the newly installing program tries to install itself in the Pegasus directory without even asking the user), then since the program preferably cannot even see the real Pegasus directory, a new empty Pegasus directory is preferably created for it virtually. (Another possible variation is that through the common dialog box the user can allow a program to access only specific files but not to access directories). On the other hand, as explained above, if after installation a new program for example requests to access a certain file for example in C:\\ or for example in c:\\windows and the user allows it for example through the dialog box, then preferably the program can access the real file. Preferably, in order to identify a new installation even if the program does not use for example a standard install-shield, preferably any first time a new program is run is considered by the Security System as a new installation. In addition, as explained above in other sections, if a program for example installs itself without asking the user anything, although any changes it makes (preferably except creating new directories) are preferably made by virtual sharing, preferably the system first asks the user if he wants to allow the program to install at all. This way, although newly installed programs are limited by default to their own VE, the user knows for example if any browser exploit is trying to install any software on his machine and can prevent it completely.","On the other hand, when dealing for example with copy-on-write versions of the autoexec file, the situation is different, since if programs from various VEs make changes in it, then preferably each change or addition takes effect only within the VE that made it, which can be more problematic. In addition, for example in Windows XP and NT the autoexec file is typically only activated when the user activates a DOS or CMD window or only if the user manually activates it after entering the window. However, for example in Windows 98 or Windows-Me the autoexec file is activated before the Windows loads and takes effect globally. Therefore, one possible solution that is good for both of these types of Windows is that each line (or for example each command within a line in the autoexec file) has a mark (for example within the file or elsewhere) which indicates to which VE it belongs (or for example this is the result of a merged view of the virtual autoexec files), and preferably when executing the autoexec file each program or command will be run within the limitations of the VE that added it to the autoexec file. (In other words, for example in systems like Windows 98 and Windows ME one of the possible variations is that the commands in the merged autoexec file are preferably executed automatically, but preferably each command is executed within the limitations of the VE that added it to the autoexec file, and of course the autoexec file has to be executed only after the Security System is already running). Another possible variation that is relevant for example for windows XP and NT is that when the user enters a DOS or CMD window, the relevant autoexec is automatically executed when the user activates some program that needs it, and preferably all the programs that are activated by it are then limited to the VE of that program. In this variation, if the user for example then activates again the same program or another program in the same VE then the relevant autoexec file is not reactivated but remains in effect from the previous time, and only activating a program from a different VE causes another relevant autoexec to be activated if it exists or is needed. In other words, the rule in this variation is preferably that whenever a program is activated within the DOS or CMD window, if there is an autoexec file that is associated with this VE, it is activated unless it is already active.","Referring to -, we show a preferable way in which embedded objects or plug-ins are executed each at a separate VE but appear visually integrated. Normally, without VEs, embedded objects or plug-ins cause unwanted code migration. For example, opening an ActiveX object inside Internet Explorer causes the ActiveX to operate in the Internet Explorer's context. Another example: a PGP plug-in for outlook normally runs in outlook's context and will enable a merge of code. In order to prevent this, preferably the Security System creates only visual integration, so that the ActiveX or plug-in appears for example as a button for example in the browser (in the example of the Sync component appears to be a button in Microsoft Outlook, and in the example of an isolated ActiveX control appears to be a normal element in the page shown by the browser), but there is no real connection between the two objects other than their internal communication stream, and preferably the security system filters or controls this communication. The visual integration is preferably implemented with the aid of a graphical proxy which makes a combination of programs look as if they are integrated, but in reality they preferably run in different contexts, i.e. in different VEs. In addition, preferably each COM (Component Object Module) server is allowed to run only in one VE, thus avoiding the situation where the same COM server could be giving services at the same time to programs that are on separate VEs.","Referring to , we show another visual illustration of the more extreme implementation of keeping preferably each program in a \u2018Bubble\u2019 of virtual environment, so that the application can preferably only see itself () and not other programs or directories except its virtual environment (), which contains the operation system and the resources it is allowed to see.","Preferably only by explicit permission from the user can the program see other programs or directories or their data or access other system resources. Referring to , we show a visual illustration of a preferable configuration in a possible variation in which individual computers in an organization (-), each with its own installation of the Security System, are connected to the Internet () through the central authority's computer, such as for example the system administrator () (or though another gateway computer, such as for example the network's firewall, which supplies information to the central authority about the amount of data actually sent from each computer), with its own installation of the Security System, so that the Security System on the central authority's computer can also for example notice and intercept communication attempts from computers where the amount of actual communication does not fit the amount reported by the Security System of that computer, as described in the reference to ","While the invention has been described with respect to a limited number of embodiments, it will be appreciated that many variations, modifications, expansions and other applications of the invention may be made which are included within the scope of the present invention, as would be obvious to those skilled in the art."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0044","num":"0082"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0045","num":"0083"},"figref":"FIG. 1","i":"b "},{"@attributes":{"id":"p-0046","num":"0084"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0047","num":"0085"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0048","num":"0086"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0049","num":"0087"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0050","num":"0088"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0051","num":"0089"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0052","num":"0090"},"figref":"FIG. 8","b":"2"},{"@attributes":{"id":"p-0053","num":"0091"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0054","num":"0092"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0055","num":"0093"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0056","num":"0094"},"figref":"FIG. 11","i":"a "},{"@attributes":{"id":"p-0057","num":"0095"},"figref":"FIGS. 11","i":["b","c "]},{"@attributes":{"id":"p-0058","num":"0096"},"figref":"FIGS. 11","i":["d","e "]},{"@attributes":{"id":"p-0059","num":"0097"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0060","num":"0098"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
