---
title: API to increase debug log performance
abstract: A method for increasing debug log performance uses pre-logging subroutines, i.e., helper methods, to pass multiple elements of a string message as separate parameters. The helper methods typically determine whether a debug logging system is enabled at a specific logging level before allocating memory or CPU resources for string concatenation. If the debug logging system is disabled, the method returns to the client program without allocating resources to concatenate and log the message, thus significantly increasing debug log performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06951012&OS=06951012&RS=06951012
owner: Hewlett-Packard Development Company, L.P.
number: 06951012
owner_city: Houston
owner_country: US
publication_date: 20011002
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This patent application is related to U.S. patent application, Ser. No. 09\/968,553, entitled \u201cAPI to Enforce Internationalization,\u201d and filed on the same day herewith.","The technical field relates to computer software systems, and, in particular, to application programming interfaces that increase debug log performance.","All computer software programs need to be debugged and tested to ensure that they properly perform the tasks they are designed to perform. The act of identifying cause of known problems (referred to as bugs) and fixing these problems in a program is called \u201cdebugging\u201d the program.","One way to debug a computer program is to insert output statement at various points in the program. The output of these statements may be directed to a debug log, where multiple elements, i.e., parameters, of a message are complied together. These output statements may be implemented as simpler print or write statements, as defined in the programming language. More typically, these output statements are implemented as calls to logging methods, giving a programmer the capability of turning debug messages on or off, altering the messages, or directing the messages to a log file.","In its simplest form, a debug message is a text string presented to a user on a screen display device or written to a file storage device. In reality, a debug message is only useful if it displays the values of interesting parameters from the program. To display these values, the program typically evaluates the parameters using CPU resources to convert these values to displayable strings. These strings are combined with other strings supplied by the user into a single string to be displayed or logged. This string concatenation process consumes additional CPU and memory resources. One of the most important causes of resource consumption is the dynamic allocation of memory to contain concatenated strings.","In a typical implementation of a debug log, even before a decision to log a message is made, all resources required to evaluate parameters and concatenate results into a displayable string have been expended. While this expense may be minor compared to actually logging the message, in a well instrumented system with thousands of debug log messages, the high volume of these messages (even if not logged) can have a significantly adverse impact on performance or the program.","String concatenation is an expensive operation in any programming language, but is particularly expensive in Java language because Java language creates a new immutable string object for each concatenation and discards the prior object at each step. This process involves expensive object creation as well as extensive fragmentation, which adversely impacts garbage collection. Garbage collection is the process of finding and recovering dynamically allocated memory and returning this memory to the pool of available memory that can be allocated as needed in the future.","Various efforts have been made to selectively enable debug logging to isolate problems, while at the same time, disabling the majority of debug logging to increase performance. One solution is to use conditional compilation to disable debug logging in production code. Conditional compilation uses compiler directives to cause certain code to be included or excluded during a compilation process. However, this solution may make the debug logging only available to the developer, and inaccessible to on-line or off-line support personnel. In addition, conditional compilation is not available in all computer languages (e.g. Java language).","Another solution is commenting out the debug logging prior to release. Commenting out means manually editing the code to convert debug logging code to comments. However, this solution is tedious and difficult to do without the risk of causing other defects associated with improper editing. In addition, if the commenting out is performed later in the development cycle, more risk is incurred; but if performed earlier, less benefit is received.","Yet another solution is removing and\/or simplifying some logging to reduce the performance impact. However, the logging removed may be just the logging required to isolate a problem.","Still another solution is tolerating poor performance. However, lackluster performance may be tolerable, but is never desirable. Additionally, the impact is not only on the program containing the debug logging, but also on all programs that contend for resources on the system.","A method for increasing debug log performance includes receiving a message, which includes parameters, from a client program and allocating resources to evaluate the parameters into multiple strings. The method further includes calling a pre-logging subroutine, i.e., helper method, that passes each string of the message as a separate parameter to a debug logging system, and determines whether the debug logging system is enabled at a specific logging level. If the debug logging system is disabled, the method includes returning to the client program without allocating additional resources to concatenate and log the message.","The helper methods provide an enhancement to the debug logging system that may defer as much of the processing of a debug log statement as possible until after the decision to log or not log the message can be made. Because the helper methods determine whether a debug logging system is enabled at a specific logging level before allocating memory or CPU resources for string concatenation, the method may significantly increase debug log performance.","A method for increasing debug log performance uses pre-logging subroutines, i.e., helper methods, to pass multiple elements of a string message as separate parameters. The helper methods typically determine whether a debug logging system is enabled at a specific logging level before allocating memory or CPU resources for string concatenation, thus significantly increasing debug log performance.","In a typical software application, logging may be performed at a variety of different logging levels. One end of the spectrum is filled with low volume, high priority messages that must be logged. At the other end are thousands of high volume, low priority debug messages. To reduce the flood of the debug log messages, the user typically sets a limit based on the log level of the message. This limit typically excludes the high volume messages. A programmer, i.e., developer, typically has the ability to \u201cturn up\u201d or re-enable debug log messages for portions of program that he or she is interested in debugging.",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1","b":["110","140","150","191","192","110","191","192","140","191","192","150","110","131","132"]},"The interface  for operational logging typically processes operational log messages  intended for helping the users to operate the client program , such as warning information concerning a potential problem or an error indicating the failure of a certain function. The interface  for debug logging typically processes debug log messages  to be used by the developers to isolate defects in the client program . The logging of the debug log messages  typically consumes more time and memory resources. Both interfaces , , may be used by the developer, who decides which interface to use depending on the intent of the message, , . The only significant difference between the interfaces , , is the logging level.","Method signatures of the helper methods  for the debug log messages  typically accept both a localized message  and a string message , which is a text string to be presented to the user or to be logged. A method signature is a formal definition of calls to a method (or subroutine) that includes the name of the method and the number and types of parameters that may be passed to the method. In modern (and particularly object oriented) computer languages, the method signature is used to select which version of a method will be called when multiple versions (i.e., methods with the same method name but different parameters) of a method exist.","As noted above, besides high volume localized messages , the helper methods  for debug logging typically accept string messages  that are parsed into multiple parameters, i.e., strings. An exemplary call statement to log a debug string message  is shown below. The call statement contains three string concatenation operations that may be performed prior to calling a debug helper method .","\u2003log_.debug (\u201cAt );","The following statement passes each element of the string message  to the debug logging system as a separate parameter.\n\nlog_.debug (\u201cAt );\n","The helper methods  may be defined for any number of parameters up to an arbitrary limit, which may be extended as needed by defining additional helper methods .","To ensure minimum resource utilization, the helper method  for debug logging may first determine whether the debug logging system is disabled at a specific logging level before allocating resources for string concatenation. The helper method  may return immediately if logging is not enabled at the logging level. Accordingly, the separate strings are concatenated into a single message  only if debug logging actually occurs. By deferring string concatenation until after this logging decision is made, the method saves memory and CPU resources, and increases debug log performance.","Heavily instrumented code may contain hundreds or even thousands of debug statements, many of which may be executed repetitively in tight loops. Since the method for increasing debug log performance may yield performance many times faster than other debug logging methods, the performance of heavily instrumented code may be greatly influenced by the efficiency of the logging API. The method may also reduce the impact of debug logging on garbage collection. By only allocating space to concatenate the strings actually needed, there is no need to recover the resources for the hundreds of log messages that are not logged.","Because string concatenation is particularly expensive in Java language, the use of the helper methods  has a big impact on Java language applications. However, the method for increasing debug log performance may be equally applied to any other programming language.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["192","210","110","220","110","132","230","132","192","140","192","240","110","192","250","260","270","110","280","192","280","192"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3","b":["300","300","318","300","302","312","314","316","310","308"]},"The memory  may include random access memory (RAM) or similar types of memory. The secondary storage device  may include a hard disk drive, floppy disk drive, CD-ROM drive, or other types of non-volatile data storage, and may correspond with various databases or other resources. The processor  may execute information stored in the memory , the secondary storage , or received from the Internet or other network . The input device  may include any device for entering data into the computer , such as a keyboard, keypad, cursor-control device, touch-screen (possibly with a stylus), or microphone. The display device  may include any type of device for presenting visual image, such as, for example, a computer monitor, flat-screen display, or display panel. The output device  may include any type of device for presenting data in hard copy format, such as a printer, and other types of output devices including speakers or any device for providing data in audio form. The computer  can possibly include multiple input devices, output devices, and display devices.","Although the computer  is depicted with various components, one skilled in the art will appreciate that the computer  can contain additional or different components. In addition, although aspects of an implementation consistent with the present invention are described as being stored in memory, one skilled in the art will appreciate that these aspects can also be stored on or read from other types of computer program products or computer-readable media, such as secondary storage devices, including hard disks, floppy disks, or CD-ROM; a carrier wave from the Internet or other network; or other forms of RAM or ROM. The computer-readable media may include instructions for controlling the computer  to perform a particular method.","While the method and apparatus for increasing debug log performance have been described in connection with an exemplary embodiment, those skilled in the art will understand that many modifications in light of these teachings are possible, and this application is intended to cover any variations thereof."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF THE DRAWINGS","p":["The preferred embodiments of a method for increasing debug log performance will be described in detail with reference to the following figures, in which like numerals refer to like elements, and wherein:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3","b":"2"}]},"DETDESC":[{},{}]}
