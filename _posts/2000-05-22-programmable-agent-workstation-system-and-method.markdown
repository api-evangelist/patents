---
title: Programmable agent workstation system and method
abstract: A programmable workstation system and method for network based call center with telephony functions provided over the IP network and using a personal computer is disclosed. For such automated call centers there exists a need to coordinate the telephony functions with agent availability functions. Existing solutions use a switch and PSTN phone to communicate information to an automated call director (ACD). The present invention solves the problem of doing similar reporting and with coexistence of telephony functions along with agent data functions. Features of invention include (a) special protocols to relay agent information to Virtual ACD and coexist with H.323 signaling and (b) the ability to relay agent status and provide screen based interface to agent also for such information for agent availability and alerting. The system disclosed generally incorporates JavaPhone (), PlusTcp (), and PlusTapi () APIs with associated method functions to implement the major functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07010610&OS=07010610&RS=07010610
owner: International Business Machines Corporation
number: 07010610
owner_city: Armonk
owner_country: US
publication_date: 20000522
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["STATEMENT REGARDING FEDERALLY SPONSORED RESEARCH OR DEVELOPMENT","REFERENCE TO A MICROFICHE APPENDIX","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","Overview","General System Architecture","DESCRIPTION OF THE PRIOR ART","OBJECTS OF THE INVENTION","BRIEF SUMMARY OF THE INVENTION","Overview","Generalized System Architecture","DESCRIPTION OF THE PRESENTLY PREFERRED EXEMPLARY EMBODIMENTS","Embodiments are Exemplary","Definitions","System","EXEMPLARY WORKSTATION DESIGN","JavaPhone Application (FIG. ) (, )","PlusTcp DLL (FIG. ) (, )","PlusTapi DLL (FIG. ) (, )","Call Status Window (CSW)","Method","Computer Software","CONCLUSION"],"p":["Not Applicable","Not Applicable","The invention is related in the general area of network call centers and programmable agent workstations.","The present invention discloses a programmable workstation system and method for network based call center with telephony functions provided over the IP network and using a personal computer. For such call center, there is a need to coordinate the telephony functions with agent availability functions. Existing solutions use a switch and PSTN phone to communicate information to an automated call director (ACD). There is a need to solve the problem of doing similar reporting and with coexistence of telephony functions along with agent data functions. Features of invention include (a) special protocols to relay agent information to Virtual ACD and coexist with H.323 signaling and (b) the ability to relay agent status and provide screen based interface to agent also for such information for agent availability and alerting.","The general system architecture of the present invention is illustrated in , with the agent workstation () being the focus of the present invention teachings.","Existing solutions to the problem solved by the present invention use a switch and PSTN phone to communicate information to an automated call director (ACD). However, there have been recent efforts to integrate these functions. See Nicholas Cravotta, \u201cVoice Over Packet\u2014Putting it all Together\u201d, ELECTRONIC DESIGN MAGAZINE, pages 107\u2013118 (Mar. 16, 2000).","Referencing , the present state of the art includes telephone equipment (), public switched telephone networks (), and public branch exchanges (). Remaining elements in this figure may be incorporated using the teachings of the present invention to provide features not present in the prior art.","Accordingly, the objects of the present invention are (among others) to circumvent the deficiencies in the prior art and affect one or more of the following objectives:\n\n","While these objectives should not be understood to limit the teachings of the present invention, in general these objectives are achieved by the disclosed invention that is discussed in the following sections.","The invention is related in the general area of a programmable workstation for network based call center with telephony functions provided over the IP network and using a personal computer. For such call center, there was a need to coordinate the telephony functions with agent availability functions. Existing solutions use a switch and PSTN phone to communicate information to an ACD. We need to solve the problem of doing similar reporting and do coexistence of telephony functions along with agent data functions. Features of invention (1) Special protocol to relay agent information to Virtual ACD and coexist with H.323 signaling (2) Ability to relay agent status and provide screen based interface to agent also for such information for agent availability and alerting.","IP based agent technology is evolving for IP call centers. The major problems with legacy call centers have been proprietary interfaces for service creation within switches that are complex to change. Most switch vendors control what information is accessible and makes development of new services very difficult.","Referencing , the present invention when incorporated into a system environment () enables a virtual ACD environment () with integrated Voice response unit (VRU) and Virtual Automatic Call Distributor (VACD) () to have a programmable interface () with a common script logic so that the complete call flow can be executed in a single process. The operator interface () may take a variety of forms.","While this invention is susceptible of embodiment in many different forms, there is shown in the drawings and will herein be described in detailed preferred embodiment of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the embodiment illustrated.","The numerous innovative teachings of the present application is described with particular reference to the presently preferred embodiments, wherein these innovative teachings are advantageously applied to the particular problems of a programmable agent workstation system and method. However, it should be understood that these embodiments are only examples of the many advantageous uses of the innovative teachings herein. In general, statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover, some statements may apply to some inventive features but not to others. In general, unless otherwise indicated, singular elements may be in the plural and visa versa with no loss of generality.","Throughout the discussion in this document the following definitions is utilized:","System Blocks\/Procedural Steps Not Limitive","The present invention may be aptly described in terms of exemplary system block diagrams and procedural flowcharts. While these items are sufficient to instruct one of ordinary skill in the art the teachings of the present invention, they should not be strictly construed as limiting the scope of the present invention. One skilled in the art is aware that system block diagrams may be combined and rearranged with no loss of generality, and procedural steps may be added or subtracted, and rearranged in order to achieve the same effect with no loss of teaching generality. Thus, it should be understood that the present invention as depicted in the attached exemplary system block diagrams and procedural flowcharts is for teaching purposes only and may be reworked by one skilled in the art depending on the intended target application.","Personal Computer Not Limitive","Throughout the discussion herein there is examples provided that utilize personal computer (PC) technologies to illustrate the teachings of the present invention. The term \u2018personal computer\u2019 should be given a broad meaning in this regard, as in general any computing device may be utilized to implement the teachings of the present invention, and the scope of the invention is not limited just to personal computer applications.","Operating System Not Limitive","Additionally, while the present invention may be implemented to advantage using a variety of Microsoft\u00ae operating systems (including a variety of Windows\u2122 variants), nothing should be construed to limit the scope of the invention to these particular software components. In particular, the system and method as taught herein may be widely implemented in a variety of systems, some of which may incorporate a graphical user interface.","Overview","The present invention generally can be viewed in terms of the exemplary system architecture illustrated in . This exemplary architecture will now be described in detail.","The following discussion details the functional specification and other elements necessary for Directory Assistance (DAS) workstations to support a proposed Network Call Center.  illustrates a high-level representation of the proposed system architecture. There are several enhancements to the Directory Assistance System environment in the proposed Network Call Center, including:\n\n","All of the switch related controls, such as \u201cmake busy\u201d, along with the audio signal, is sent over the TCP\/IP network to the \u201cJavaPhone\u201d application (, ) residing on the workstation. The workstation generally provides a panel that contains visual indicators to the operator of the current call and audio states. This panel is referred to in this document as the \u201cCall Status Window\u201d (CSW).","Assumptions","The following design points and assumptions have been identified for the DISP\/IWSP workstation:\n\n","The following sections describe the implementations for each of the identified features required for the Network Call Center. The workstation may continue to be implemented as a 16-bit Windows\u2122 application but can also execute in a Windows\u2122 95 environment. Additional workstation components is required for the new features.  illustrates a sample pictorial representation of the exemplary DA workstation software components.","The new components are shown in  with bold lines and bold blue lettering and include:\n\n","The existing components that will require modifications are shown in bold lines with normal black lettering and include a DISP DLL (Directory Assistance client application). The following sections will describe each of these discrete components as well as identify other implementation requirements for the Network Call Center.","The JavaPhone application (, ) as illustrated in  () and  () provides two basic functions:\n\n","The JavaPhone application (, ) supports a local TCP\/IP socket interface that will allow the workstation software (DISP\/IWSP) to perform the various operations available and to receive any status events or attributes. A single local TCP\/IP socket is used for communicating both audio and call controls.","JavaPhone Audio Controls ()","The audio path will involve sending \u201cVoice over Data\u201d (VoD) using the H.323 protocol. The operator will utilize a headset that is connected either to the ShelCad product (external to the PC hardware). The JavaPhone application (, ) will transmit and receive the audio data through a TCP\/IP socket connection to the \u201cVoD Gateway\u201d.","The following audio features may be implemented in this functional block:\n\n","The call controls is transmitted and received between the JavaPhone application (, ) and the Call Director using the Java Telephony API (JTAPI). The following call controls and status events are generally available in the present invention:\n\n","The TCP\/IP messaging API provides all of the audio and call controls sent across the local socket connection.","The PlusTcp DLL (, ) will receive data into the buffers provided by the calling application (in this case, the PlusTapi DLL (, )). Consequently, there is no need for the PlusTcp DLL (, ) to internally buffer messages received from any of the open sockets.","PlusTcp Enumerated Commands ()","As illustrated in , this new IWSP DLL provide the following commands:\n\n","The above commands support the basic TCP\/IP messaging needed for any IWSP DLL communicating with another application residing either on the same PC (as in the case of the JavaPhone application) or elsewhere in the TCP\/IP network. Each command specifies a \u201cconversation\u201d number that the PlusTcp DLL (, ) can send and receive data on the proper socket.","The PlusTcp DLL (, ) supports an advisement scheme that is used for notifying the associated client (in this case, the PlusTapi DLL (, )) that data is available. The using IWSP DLL enumerates a non-persistent variable that is used for invoking a callback routine whenever data is received on an open socket. This non-persistent enumerated variable must be declared to the IWSP platform and then specified as a parameter in the TcpOpen command (see below). When the PlusTcp DLL (, ) is notified through the WINSOCK DLL API that data is available on an open socket, the PlusTcp DLL (, ) will invoke the IWSP's PlusPokeData command, specifying the enumerated non-persistent variable provided on the TcpOpen command. The IWSP platform will then detect that the enumerated variable is non-persistent and invoke the specified callback routine (in this case, the routine in the PlusTapi DLL (, )). The owning DLL (i.e.\u2014PlusTapi) should then pust itself a WindowsT\u2122 \u201cWM_USER\u201d message to indicate to itself that it needs to read from the socket. It should not perform the TCP\/IP receive on the same thread of execution of the callback routine. When the owning DLL later receives its WM USER message, it must then invoke the TcpRecv command (enumerated by the PlusTcp DLL) to read the data from the TCP\/IP socket. Note that due to the nature of the TCP\/IP socket data stream, a single TcpRecv operation can return more than one message from the JavaPhone application.","The PlusTcp DLL (, ) is designed to support up to eight (8) socket connections for usage by one or more IWSP DLLs. Each session is identified with a \u201cconversation number\u201d that is specified as the first parameter in each of the PlusTcp DLL (, ) enumerated commands. The PlusTcp DLL (, ) maintains and enumerate to IWSP the internal variables containing any errors received during the last TCP\/IP API call, thereby allowing the client applications to obtain this information.","TcpOpen Command ()","This command is invoked whenever an IWSP DLL wishes to open a TCP\/IP socket to another application that is acting as a TCP\/IP server. An advisement variable is specified in the parameter list that would be subsequently invoked whenever data is received on the socket.",{"@attributes":{"id":"p-0061","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Format:","TcpOpen (nConv, sInetAddress, nPortNumber,"]},{"entry":[{},"sAdviseVar)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","Nconv","\u201cConversation number\u201d."]},{"entry":["meters:",{},"The PlusTcp DLL supports"]},{"entry":[{},{},"up to 8 different"]},{"entry":[{},{},"sessions. Each session"]},{"entry":[{},{},"can have one active"]},{"entry":[{},{},"socket. Valid values are"]},{"entry":[{},{},"1\u20138."]},{"entry":[{},"sInetAddress","TCP\/IP address of the"]},{"entry":[{},{},"server system (e.g.,"]},{"entry":[{},{},"9.83.85.218 or \u201cLocalHost\u2019"]},{"entry":[{},"nPortNumber","Port number of the server"]},{"entry":[{},{},"system (e.g. - 23)"]},{"entry":[{},"sAdviseVar","This should be a \u201cnon-"]},{"entry":[{},{},"persistent\u201d enumerated"]},{"entry":[{},{},"variable declared to IWSP."]},{"entry":[{},{},"The callback routine"]},{"entry":[{},{},"specified in this"]},{"entry":[{},{},"enumerated variable is"]},{"entry":[{},{},"called whenever data is"]},{"entry":[{},{},"received on the active"]},{"entry":[{},{},"socket."]},{"entry":["Returns:","PLUS_COMMAND_OK","Socket opened successfully"]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not installed."]},{"entry":[{},"NOT_AVAIL"]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":[{},"\u2212100","Invalid parameters passed."]},{"entry":[{},"\u2212101","Invalid conversation"]},{"entry":[{},{},"number."]},{"entry":[{},"\u2212102","Requested conversation"]},{"entry":[{},{},"number already in use."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"5522"},"This command is invoked whenever an IWSP DLL wishes to close a previously opened TCP\/IP connection.",{"@attributes":{"id":"p-0063","num":"0102"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TcpClose (nConv)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","Nconv","\u201cConversation number\u201d,"]},{"entry":[{},{},"previously initialized"]},{"entry":[{},{},"with an invocation of the"]},{"entry":[{},{},"TcpOpen command."]},{"entry":["Returns:","PLUS_COMMAND_OK","Socket successfully"]},{"entry":[{},{},"closed."]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":[{},{},"The IWSP DLL should"]},{"entry":[{},{},"invoke the"]},{"entry":[{},{},"TcpGetLastError com-"]},{"entry":[{},{},"mand to obtain the TCP\/"]},{"entry":[{},{},"IP failure indication."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"5523"},"This command is invoked whenever an IWSP DLL wishes to write data to a TCP\/IP socket previously established with the TcpOpen command.",{"@attributes":{"id":"p-0065","num":"0104"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TcpSend (nConv, sDataName, nOfset,nLength)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","Nconv","\u201cConversation number\u201d,"]},{"entry":["meters:",{},"previously initialized with"]},{"entry":[{},{},"an-invocation of the T en"]},{"entry":[{},{},"command."]},{"entry":[{},"SDataName","Enumerated variable name"]},{"entry":[{},{},"that contains the data to be"]},{"entry":[{},{},"written to the socket."]},{"entry":[{},"Noffset","Offset into the sDataName"]},{"entry":[{},{},"buffer that the data is to"]},{"entry":[{},{},"be written from."]},{"entry":[{},"Nlength","Length of the data to be"]},{"entry":[{},{},"written."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not installed."]},{"entry":[{},"NOT_AVAIL"]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":[{},{},"The IWSP DLL should invoke"]},{"entry":[{},{},"the TcpGetLastError com-"]},{"entry":[{},{},"mand to obtain the TCP\/"]},{"entry":[{},{},"IP failure indication."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"5524"},"This command is invoked whenever an IWSP DLL wishes to read data from a TCP\/IP socket previously established with the TcpOpen command. Note that TCP\/IP data is received as a data stream, which implies that the buffer could contain more than one application message in it. It is the responsibility of the receiving application to parse through the data, decoding its contents.","Note: This command does not block on the read of the TCP\/IP socket. If no data is available, it will return immediately to the caller with a return code of 0.",{"@attributes":{"id":"p-0068","num":"0107"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TcpRecv (nConv, sDataName, nOffset, nLength)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","Nconv","initialized with an"]},{"entry":["meters:",{},"invocation of the TcpOpen"]},{"entry":[{},{},"command."]},{"entry":[{},"SDataName","Enumerated variable name"]},{"entry":[{},{},"that is to contain the data"]},{"entry":[{},{},"read from the socket."]},{"entry":[{},"Noffset","Offset into the sDataName"]},{"entry":[{},{},"buffer that the data is to"]},{"entry":[{},{},"be read into."]},{"entry":[{},"Nlength","Maximum length of the data"]},{"entry":[{},{},"to be read."]},{"entry":["Returns:","0","No data available."]},{"entry":[{},">0","Length of data read from"]},{"entry":[{},{},"socket."]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not installed."]},{"entry":[{},"NOT_AVAIL"]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":[{},{},"The IWSP DLL should invoke"]},{"entry":[{},{},"the TcpGetLastError com-"]},{"entry":[{},{},"mand to obtain the TCP\/"]},{"entry":[{},{},"IP failure indication."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"5525"},"This command is invoked whenever an IWSP DLL wishes to obtain the specific error indication that occurred during the invocation of one of the other available PlusTcp DLL (, ) commands (see above).",{"@attributes":{"id":"p-0070","num":"0109"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TcpGetLastError (nConv sDataName)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","NConv","\u201cConversation"]},{"entry":["meters:",{},"number\u201d, previously"]},{"entry":[{},{},"initialized with an"]},{"entry":[{},{},"invocation of the TcpOpen"]},{"entry":[{},{},"command."]},{"entry":[{},"SDataName","Enumerated variable name"]},{"entry":[{},{},"that is loaded with the last"]},{"entry":[{},{},"TCP\/IP return code. This"]},{"entry":[{},{},"variable should be an"]},{"entry":[{},{},"unsigned short data type."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not installed."]},{"entry":[{},"NOT_AVAIL"]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"5526"},"This command will return a message string that contains the textual description corresponding to the error return code obtained through the TcpGetLastError command.",{"@attributes":{"id":"p-0072","num":"0111"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TcpGetErrorString (nErrNum, sDataName,nMaxBytes)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","NerrNum","Error number returned"]},{"entry":["meters:",{},"through usage of the"]},{"entry":[{},{},"TcpGetLastErr command."]},{"entry":[{},"SdataName","Data item name that is loaded"]},{"entry":[{},{},"with the string corresponding"]},{"entry":[{},{},"to the nErrNum parameter"]},{"entry":[{},"NmaxBytes","Maximum number of bytes,"]},{"entry":[{},{},"including the Null"]},{"entry":[{},{},"terminator, that are to be"]},{"entry":[{},{},"copied into the sDataName"]},{"entry":[{},{},"variable."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTcp DLL not installed."]},{"entry":[{},"NOT_AVAIL"]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure occurred."]},{"entry":[{},"\u2212103","Invalid Error number."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The PlusTcp DLL (, ) will always return a negative numeric (PLUS_COMMAND_ERROR) return code through the IWSP DLL API whenever one of its calls to the Winsock API produces an error. This will allow the calling DLL (in this case, PlusTapi) to choose to deal with the error either programmatically or by generating an error message to the operator. When an error with the Winsock API is detected during the handling of a TcpSend, TcpRecv, or TcpClose command, PlusTcp will store the return code of the specific failure in its internal variable accessible through the TcpGetLastError command. The calling DLL will receive only the PLUS_COMMAND_ERROR return code through the IWSP DLL API. It should then perform the TcpGetLastError command, specifying the appropriate conversation number, to obtain the specific error code. The calling DLL can then optionally call the TcpGetError String to obtain an error message string (from the currently selected language file) that matches the error number obtained through the TcpGetLastError call. Since the PlusTcp enumerates a message string for each of the possible error conditions, the calling DLLs do not need to enumerate equivalent strings. The customer can alter the textual content of these strings through usage of the IWSP Define Language utility. Note that the TcpOpen command does return more specific return codes since these failures would be occurring before a TCP\/IP conversation could be established with the Winsock DLL.","If an unexpected TCP\/IP error occurs which results in the termination of an active session, the PlusTcp DLL (, ) will not attempt to perform any retries to reestablish the session. Subsequent command invocations on the affected conversation (socket) will generate error status in response. The calling DLL can then report the error through the man-machine interface.","The PlusTapi DLL enumerates the commands and data items to the IWSP platform that will allow a DA operator to communicate with the JavaPhone application (, ) and perform the related audio and call control operations. The PlusTapi DLL (, ) enumerated commands support usage of IWSP Softkeys or DISP Macro Keys for invoking the operations that will perform the required messaging to the JavaPhone application. The PlusTapi DLL (, ) utilize the PlusTcp DLL (, ) to send and receive the TCP\/IP messaging to and from the JavaPhone application.","The PlusTapi DLL (, ) also provides visual status indicators to the operator (such as for Microphone Muted). This is accomplished through textual displays on the existing \u201cInfoWin DLL\u201d.","The PlusTapi DLL (, ) utilizes the PlusTcp DLL (, ) command (TcpOpen) to establish a local socket connection to the JavaPhone application (, ) during startup. Retry logic is provided to handle any startup synchronization of the two applications.","The PlusTapi interface with the JavaPhone application (, ) is handled independently from the existing DISP-CPG interface. All messaging related to call processing is sent and received through the JavaPhone API. When the PlusTapi DLL (, ) receives an indication of a call arrival from the JavaPhone, it will instruct DISP to simulate a start of call by invoking the PosNewCall command. Similarly, when the PlusTapi DLL (, ) receives from the JavaPhone the indication that the call has terminated, it will instruct DISP to simulate an end of call by invoking the PosCallRelease command. These commands will allow DISP to track rudimentary operator statistics. Call completion is offered, which is accomplished by performing a \u201cblind conference\u201d operation through the JavaPhone API. When the call completion operation is successful, the Call Director is instructed to remove the call from the operator position. At that point, the JavaPhone, and subsequently PlusTapi, will receive a CalIRemoved message. PlusTapi would perform the appropriate advisement on the \u201cmacro event\u201d, allowing for the update of the Call Status Window.","With each message that PlusTapi sends to the JavaPhone application, it will receive a corresponding response indicating the success or failure of the request. These responses are directly generated by the component that is actually performing the requested operation. For example, if PlusTapi sends the AgentNotReady message to the JavaPhone application, the request will flow up to the \u201cCall Director Custom Server\u201d and then to the \u201cVirtual ACD\u201d before returning back down to the JavaPhone application (, ) and then onto PlusTapi. When the response is received, PlusTapi will trigger any events that are associated with the request. In the \u201cagent not ready\u201d example, the \u201cTapiEventNotReady\u201d macro advisement event would be triggered, most likely resulting in textual display change on the InfoWin DLL for the operator's visual confirmation of the request. The fact that responses are directly generated by the owning system component will guarantee that the visual display to the operator accurately reflects the resulting success or failure of the request (as opposed to JavaPhone generating immediate successful responses indicating that the request has only been forwarded on to the appropriate system component).","PlusTapi will receive a CalICreated message and a CalIRemoved message with each call received at the workstation. This will apply regardless of how the call was initiated or terminated.","The PlusTapi DLL (, ) enumerates all of the commands required for handling both the audio and call control interfaces as defined by the JavaPhone application. These include:\n\n","The PlusTapi DLL (, ) also enumerates the following additional commands that to facilitate the usage of the JavaPhone APIs in an DA operator environment:\n\n","Refer to the section, PlusTapi Enumerated Commands for additional information.","The PlusTapi DLL (, ) will display any detected errors using standard Windows\u2122 controls (Dialog Boxes, Messageboxes, etc.) so as to not tie usage of the PlusTapi DLL (, ) with the DISP DLL. In other words, DISP should not be a prerequisite to usage of PlusTapi. This design point implies that although the PlusTapi enumerated commands will generate numeric return codes to the calling DLL or macro, PlusTapi will automatically generate a Windows\u2122 Messagebox containing any error messages to the operator. In the future this could be changed so that PlusTapi would rely on the invoking DLL to either generate an error message or handle the failure programmatically.","PlusTapi Startup","During startup, the PlusTapi DLL (, ) must perform the required initialization sequence with the JavaPhone application. In order to communicate with the JavaPhone application, the PlusTapi DLL (, ) must first establish a TCP\/IP socket connection by invoking the PlusTcp DLL's TcpOpen command with the appropriate parameters. The TCP\/IP address is configured using the initialization command enumerated by the PlusTapi DLL (, ). This TCP\/IP address will either be the specific value assigned to the PC that the JavaPhone software is installed on or the string, \u201clocalhost\u201d that will indicate that the JavaPhone is running on the same PC. The PlusTapi DLL (, ) will request the \u201cconversation number\u201d in the TcpOpen command that is specified with the utility mode setting (see the section PlusTapi Utility Mode). Retry logic is included for establishing the initial socket connection. If PlusTapi failed to establish a socket connection with the JavaPhone application, none of the PlusTapi macro events would have been triggered, resulting in the Call Status Window not having any call-related icons displayed.","After the initialization sequence with the JavaPhone is completed, the PlusTapi DLL (, ) will request a \u201cDUX Advisement\u201d on the DISP sign on operation. This will result in PlusTapi being notified whenever the operator performs a successful sign on operation. See the next section for additional information about operator sign on.","Note: The remainder of the JavaPhone initialization sequence, including the opening of the connections to the Call Director and VoD Gateway is not initiated until the time of the operator sign on sequence.","At the completion of its startup logic, the PlusTapi DLL (, ) must be prepared to accept any incoming calls. This is accomplished through usage of a \u201ccallback\u201d routine. This callback routine is identified in the enumerated non-persistent variable, (TapiReadAvail) is specified in the TcpOpen command. See the section Inbound Call Processing for additional information.","Operator Sign on ()","PlusTapi relies on the operator's invocation of the existing DISP sign on operation as a means of obtaining the operator's ID (i.e. \u2014user ID) for usage in the logon to the Call Director. The workstation is configured to enable the password validation feature of the MAP. An operator will invoke the DISP sign on panel and enter a valid operator ID and password. Once the sign on validation is completed, DISP will execute a \u201cDUX Advisement\u201d that will in turn notify PlusTapi that the sign on has occurred.","Once the operator sign on notification is received, the PlusTapi DLL (, ) will invoke the InitPhone command to initialize the telephony environment with the JavaPhone application (, ) and provide the address of the \u201cVirtual ACD\u201d. The response to this message will provide a \u201ctelephone handle\u201d that must be used in all subsequent operations with the JavaPhone application (, ) so that the telephone toolkit can distinguish between different clients.","If the InitPhone request fails, PlusTapi will enter into a retry sequence that is controlled by the corresponding utility mode parameter setting (see PlusTapi Utility Mode). PlusTapi will reissue the InitPhone message for the specified duration, pausing one second between each attempt. If all retries fail, PlusTapi will also close the previously opened TCP\/IP socket with the JavaPhone application (, ) and then display an error Messagebox to the operator. The retry sequence is reinitiated whenever a logon sequence is attempted.","When the response is received for the InitPhone message to the JavaPhone application, PlusTapi will perform one of two possible macro advisements:\n\n","These macro callback events allow the customer to update the Call Status Window with textual data indicating the status of the operator position.","Should one of both of the connections between the JavaPhone and either the Call Director Custom Server or the VoD Gateway be lost at any time subsequent to the startup sequence, the ConnectionStatusChanged message is sent by the JavaPhone application (, ) to PlusTapi. PlusTapi will then perform any requested advisements on either the TapiEventActive or TapiEventlnactive events. PlusTapi will next attempt to reestablish the connections by utilizing its retry logic as described in the preceding paragraph. If the connections are reestablished, PlusTapi will attempt to relogon the operator (assuming one was logged on during the failure). If all retries to establish the connections fail, PlusTapi will close the previously opened TCP\/IP socket with the JavaPhone application (, ) and then display an error Messagebox to the operator. The retry sequence is reinitiated whenever a logon sequence is subsequently attempted.","Once the JavaPhone is successfully initialized with the InitPhone message, PlusTapi will request two of the JavaPhone's internal properties:\n\n","These two values are stored in PlusTapi global (static) variables since they is required in any subsequent processing of the associated commands used for increasing or decreasing these settings. These values will also be available as enumerated variables, TapiVolumeLevel and TapiMicGainLevel.","PlusTapi will next attempt to execute the \u201cCalActive\u201d command to determine if Common Logon is in effect (the CAL DLL is installed). If so, PlusTapi should inhibit usage of the TapiLogon command (accessed through the IWSP \u201cDllCommandExecute\u201d entry point), thereby forcing an operator to utilize the CAL Common Logon in order to handle DA calls. If the CAL DLL is not installed (i.e.\u2014the \u201cCalActive\u201d command fails), PlusTapi should set an internal state flag indicating that Common Logon is not in effect.","PlusTapi will then invoke the AgentLogon command of the JavaPhone application. PlusTapi will use the existing DISP API to obtain the operator ID that was used for the sign on. The JavaPhone application (, ) will perform the necessary messaging with the Call Director and eventually respond with the AgentLogon response message to PlusTapi. The AgentLogon response will contain the logon status and, if successful, the \u201cAgent ID\u201d. This Agent ID must be saved by PlusTapi for usage in other commands subsequently issued to the JavaPhone application.","If the status received in the AgentLogon response indicates a failure, PlusTapi will generate a standard Windows\u2122 Messagebox to display the appropriate error message to the operator.","After the operator successfully logs on, the position will initially be placed in the \u201cnot ready\u201d state. The operator must toggle to the \u201cready\u201d state before the first call can be received from the Call Director.",{"@attributes":{"id":"p-0101","num":"0167"},"figref":"FIG. 7"},"Operator Sign Off ()","When PlusTapi receives a sign off notification from DISP, it will issue the AgentLogoff command to the JavaPhone application. In order for a logoff to be initiated to the Call Director, the following two conditions will apply:\n\n","If either of the two conditions is not met, PlusTapi will receive an AgentLogoff response with error status. PlusTapi will subsequently generate a standard Windows\u2122 Messagebox to display the appropriate error message to the operator. The Logoff operation will then be blocked until the operator performs corrective action. Note that if a call is active, DISP should prevent the operator from performing a sign off operation.",{"@attributes":{"id":"p-0104","num":"0172"},"figref":"FIG. 8","b":["105","4400"]},"Operator Headset ()","The JavaPhone application (, ) apprises the PlusTapi DLL (, ) of any change in status of the operator headset (plugged or unplugged) by sending the HeadSetStatusChanged message. Whenever this message is received from the JavaPhone application, PlusTapi will update its enumerated variable, TapiHeadSetStatus.","When the PlusTapi DLL (, ) is notified by the JavaPhone application (, ) that the headset has been unjacked, it will first check to assure that a call is not active and then request DISP to perform a sign off operation by invoking the PosSignOff command. If a call is active when the headset is unjacked, PlusTapi will display an error message to the operator in a standard Windows\u2122 Message box and then start a timer to allow the operator sufficient time to jack the headset back in. The length of this timeout is configured with the PlusTapi utility mode. If the timer expires before the headset is plugged back in, PlusTapi will initiate the appropriate messaging to the JavaPhone to request that the active call be transferred to another operator.","Should an operator unjack the headset and walk away while a call is active, the exemplary message sequence in illustrated in  is generated.","Inbound Call Processing ()","After the PlusTapi DLL (, ) has established the socket connection and initialized the JavaPhone telephony environment, it must be prepared to accept any incoming calls. This is accomplished through usage of a \u201ccallback\u201d routine as illustrated in . This routine is identified in the enumerated non-persistent variable, \u201cTapiReadAvail\u201d, that is specified in the TcpOpen command. Whenever data is received on the socket connection with the JavaPhone application, the callback routine specified with the TapiReadAvail enumerated variable post a WM_USER message to itself so that it can later (on a separate thread of execution) perform a TcpRecv operation and parse through the message(s) received Note that a single TcpRecv operation can contain more than one message from the JavaPhone application.","The basic message format is:\n\n","The callback routine must parse through each buffer of data received and perform the required actions.","The PlusTapi DLL's (, ) callback routine will handle all incoming calls received over the network. Each DA call consists of several messages being sent and received between PlusTapi and the JavaPhone application. As can be seen in the figure below, the JavaPhone application (, ) will send two messages on each call arrival:\n\n","Once the call is established, PlusTapi will perform any requested advisements on the TapiEventCall macro callback event. This provides a means for the Call Status Window to be updated to reflect that a call is now active. Similarly, when the CallRemoved message is received, PlusTapi will perform any requested advisements on the TapiEventNoCall macro event. This would complete the sequence for each call arrival. The PlusTapi DLL (, ) contains a state machine that tracks the required messaging.","Any updating of the Call Status Window display (through the macro event advisements) is not be performed until all of the messaging is completed for the call arrival sequence. If an unexpected message is received (unknown or out of sequence), the error is logged and a standard Windows\u2122 Messagebox is generated, informing the operator that an error has occurred related to the switch messaging.","Outbound Call Processing ()","This feature may not be included in many invention embodiments. The PlusTapi DLL (, ) allows the operator to dial an outbound call. A command, TapiMakeCall, can associated with a DISP Macro Key. This command will generate a small Windows\u2122 dialog box, allowing the operator to enter the target phone number. The dialog box should be centered in the screen and appear as depicted in the exemplary embodiment of .","The operator is able to enter a phone number that contains any number of digits and possibly dashes or parentheses. The operator will then either press the standard Windows\u2122 Enter key or the Alt-D key combination to initiate the dialing sequence. The PlusTapi DLL (, ) will then invoke the corresponding JavaPhone command (MakeCall) to initiate the call. If the operator presses either the standard Windows\u2122 Escape key or the Alt-C key combination, the dialog will be dismissed without the number being dialed.","The JavaPhone application (, ) will produce the message sequence as illustrated in . The PlusTapi DLL (, ) will generally display any error that is detected in a standard Windows\u2122 Messagebox.","Call Hold Processing ()","The PlusTapi DLL (, ) supports placing a call on hold and removing a call from hold. Three commands are defined:\n\n","The TapiHoldCall command includes a parameter that specifies the Call ID. However, normal usage of this command is to leave the parameter blank, placing the active call on hold. Whenever this command is invokes, the PlusTapi DLL (, ) stores the Call ID of the active call so that it can be utilized when the call is removed from hold. This command invokes the corresponding JavaPhone command, HoldCall. The TapiHoldCall command does not wait for the response from the HoldCall command. When the HoldCall response is asynchronously received, PlusTapi performs an advisement on the TapiEventHold macro event, allowing for an update to the Call Status Window that indicates that the call is now on hold. If an error is received with the HoldCall response, PlusTapi generates a Windows\u2122 Messagebox with the error information for the operator.","The TapiUnholdCall command also includes a parameter for specifying the Call ID. However, normal usage of this command is to leave the parameter blank, unholding the last call placed on hold through usage of the TapiHoldCall command. This command invokes the corresponding JavaPhone command (UnholdCall) that requires a Call ID to be specified. The TapiUnholdCall command will not wait for the response from the JavaPhone UnholdCall command. When the UnholdCall response is asynchronously received, PlusTapi DLL (, ) performs an advisement on the TapiEventUnhold macro event, allowing for an update to the Call Status Window that indicates that the call is now off hold. If an error is received with the UnholdCall response, PlusTapi DLL (, ) will generate a Windows\u2122 Messagebox with the error information for the operator.","The TapiHoldToggle command performs an internal call to either the TapiHoldCall or TapiUnholdCall commands, depending on the current state of the call. It is anticipated that the customer will have a DISP Macro Key or IWSP Softkey defined that includes this command, allowing the operator to press a single key that will either place the call on hold or remove it from hold. Through usage of the Call Status Window, the operator should also be presented with a visual indication of the current hold status.",{"@attributes":{"id":"p-0121","num":"0199"},"figref":"FIG. 13"},"Call Transfers ()","This feature is optional in a production system. PlusTapi (, ) allows the operator to transfer an active call to another number. The command, TapiBlindXferCall, accepts a single parameter that specifies the target phone number to transfer the active call to. If the parameter is left blank, the DialNumber Dialog as shown in  is displayed. The TapiBlindXferCall command invokes the corresponding command, BlindTransferCall, of the JavaPhone application, supplying the Call ID of the active call and the target phone number (from either the dialog box or command parameter).","PlusTapi (, ) performs the required messaging with the JavaPhone application (, ) to complete the call transfer operation.  shows the message sequence involved with a call transfer in which the operator enters another phone number using the Dial Number Dialog box ().","Call Conferencing ()","PlusTapi (, ) allows the operator to conference an active call with another party, another available operator, or another available supervisor. The command, TapiBlindConfCall, accepts a single parameter that specifies the target phone number to include in the conference with the active call. If the parameter is left blank, the Dial Number Dialog as illustrated in  is displayed. The TapiBlindConfCall command invokes the corresponding command, BlindConferenceCall, of the JavaPhone application, supplying the Call ID of the active call and the target phone number (from either the dialog box or command parameter).","PlusTapi DLL (, ) performs the required messaging with the JavaPhone application (, ) to complete the call conference operation.  contains the message flow for a call conferencing operation between the caller, the operator, and another supervisor. In the depicted scenario, the operator eventually presses the DisconnectCall key to drop off the call, leaving the supervisor connected with the caller.","Call Disconnect ()","When the operator has a need to disconnect from an active call, the JavaPhone DisconnectCall command is generated through a DISP Macro key or Softkey invoking the PlusTapi TapiDisconnect command.",{"@attributes":{"id":"p-0127","num":"0205"},"figref":"FIG. 16"},"Ready\/Not Ready Controls","Three commands are enumerated by PlusTapi for controlling the Ready\/Not Ready status of the workstation:\n\n","There are three possible macro events that can be triggered through usage of the above commands:\n\n","If a call is active when the operator requests to be placed in the \u201cnot ready\u201d state, the operator will first be placed in the \u201cnot ready pending\u201d state. This will prevent any subsequent calls from being sent to the position; however, the operator will not enter the \u201cnot ready\u201d state until the active call has completed. The PlusTapi DLL tracks the \u201cpending\u201d state since the JavaPhone and Call Director consider the operator in the \u201cnot ready\u201d state even when a call is active. This implies that PlusTapi must know to trigger the macro event, TapiEventNotReady, whenever the active call is terminated during a \u201cnot ready pending\u201d state.","The TapiReady and TapiNotReady commands do wait for the response from the corresponding JavaPhone commands. When the responses are asynchronously received, PlusTapi will perform an advisement on either the TapiEventReady or TapiEventNotReady macro events. This provides for a means of updating the Call Status Window with an indication of the agent's state. If an error is received with the JavaPhone response, PlusTapi will generate a Windows Messagebox containing with the error information for the operator.","Volume Control","Three commands are enumerated by PlusTapi (, ) for controlling the volume of the headset:\n\n","Each of these commands requires a parameter with a value of 1 to 100, indicating the amount to increase or decrease the headset volume. Since the JavaPhone application (, ) sets the absolute value of the volume (not an increase or decrease) through a property setting, the PlusTapi DLL (, ) tracks the current value that was last used with the SetProperty command. When the TapiVolumeUp command is invoked, the value provided as the parameter of this command is used as the increment to the current value (the value last specified with the SetProperty command). The incremented value is saved as the current headset volume and used as the parameter for the SetProperty command. Similarly, the TapiVolumeDown command will decrement the current value and then pass it as the parameter in the JavaPhone SetProperty command.","The TapiVolumeSet command would be used to set the volume to an absolute value by passing it a parameter indicating the percentage of full volume (0\u2013100). This command could be used to reset the volume to a predetermined acceptable setting, allowing the operator to press a single key after having temporarily adjusted the volume manually. It could also be used in a start-up macro as a means of setting the volume to a predefined value.","PlusTapi will provide a macro callback event that would allow the user to configure the Call Status Window to contain a single InfoWin Field that displays the numeric value of the volume setting (0\u2013100).","Microphone Gain Control","Four commands are enumerated by PlusTapi DLL (, ) for controlling the microphone gain:\n\n","Each of these commands require a parameter with a value of 1 to 100, indicating the amount to increase or decrease the microphone gain (the volume that the subscriber hears). Since the JavaPhone application (, ) sets the absolute value (not an increase or decrease) of the microphone gain with the SetProperty command, the PlusTapi DLL (, ) tracks the current setting that was last used with the SetProperty command. When the TapiMicGainUp command is invoked, the value provided as the parameter of this command is used as the increment to the current value (the value last specified with the SetProperty command). The incremented value is saved as the current microphone gain value and used as the parameter for the SetProperty command. Similarly, the TapiMicGainDown command will decrement the current value and then pass it as the parameter in the JavaPhone SetProperty command.","The TapiMicGainSet command would be used to set the microphone gain to an absolute value by passing it a parameter indicating the percentage of full gain (0\u2013100). This command could be used to reset the microphone gain to a predetermined acceptable range, allowing the operator to press a single key after having temporarily adjusted the gain manually.","The TapiMuteToggle command acts as a microphone mute toggle function. If the current microphone gain setting is non-zero, this command sets the microphone gain to zero (i.e. \u2014mute the microphone) and saves off the previous setting. If the current microphone setting is zero, this command restores the previous setting (i.e. \u2014unmute the microphone).","PlusTapi also provides a macro callback event that would allow the user to configure the Call Status Window to contain a single InfoWin Field that displays the numeric value of the gain setting (0\u2013100).","Property Settings","The JavaPhone application (, ) contains a set of \u201cproperties\u201d that can be accessed or altered. The property values, are displayed in the following table:",{"@attributes":{"id":"p-0142","num":"0233"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 1"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"Property Settings"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Property name","Property values"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"HoldPlayFile","A wave file name (e. g. - \u201cc:\\iws"]},{"entry":[{},{},"\\holdmusic wav\u201d"]},{"entry":[{},"AudioDevice","ShelCad SoundCard"]},{"entry":[{},"AudioMode","HeadSet"]},{"entry":[{},{},"FullDuplex"]},{"entry":[{},{},"HalfDuplexAuto"]},{"entry":[{},{},"HalfDuplexMan"]},{"entry":[{},"ComPort","1"]},{"entry":[{},{},"2"]},{"entry":[{},{},"3"]},{"entry":[{},{},"4"]},{"entry":[{},"Gateway Address","The default PSTN gateway address"]},{"entry":[{},"AudioCoder","G711AL"]},{"entry":[{},{},"G711ML"]},{"entry":[{},{},"G723"]},{"entry":[{},{},"GSM"]},{"entry":[{},{},"AUTO"]},{"entry":[{},"ConnectionType","DialUp LAN"]},{"entry":[{},"Volume","1\u2013100"]},{"entry":[{},"MicGain","1\u2013100"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"PlusTapi enumerates two commands:\n\n","The TapiSetProperty () command can be used to select one of the available properties and change its value. The TapiGetProperty () command will retrieve the named property and display it in a standard Windows\u2122 Messagebox. These commands will invoke the corresponding SetProperty and GetProperty commands of the JavaPhone application. It is not anticipated that either of these commands is needed for operator usage but are provided for potential administrative or diagnostic purposes.","Shutdown","The PlusTapi DLL (, ) implementation of the IWSP \u201cDLLTerminate\u201d API routine invokes the ShutDown command to the JavaPhone application (, ) so that it can perform its required termination across the TAPI interface.","PlusTapi DLL (, ) can also receive the ShutDown message from the JavaPhone unsolicitedly due to some external event (from the Call Director, VoD Gateway, etc.). In this case, PlusTapi DLL (, ) clears the internal state (assume all calls have been terminated and the operator is already logged off) and initiate a DISP signoff.","PlusTagi Enumerated Commands ()","The following sections provide the formats for each of the proposed commands that is enumerated by the PlusTapi DLL (, ). Additional information about the corresponding JavaPhone commands can be found in the JTAPI standard specification.","TapiMakeCall ()","This feature is optional in the production system. This command is used to establish a phone call to the requested address. When only a telephone number is given, the default gateway address is used. This command will generate a Windows\u2122 Dialog box as described in the section, Outbound Call Processing. This command will invoke the JavaPhone's MakeCall command once the operator enters the target phone number.",{"@attributes":{"id":"p-0149","num":"0242"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiMakeCall (sPhoneNumber)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"91pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Para-","sPhoneNumber","The phone number to be"]},{"entry":["meters:",{},"dialed. If this"]},{"entry":[{},{},"parameter is blank, a"]},{"entry":[{},{},"Windows\u2009\u2122 dialog box is"]},{"entry":[{},{},"displayed (see the"]},{"entry":[{},{},"section Dial be Number"]},{"entry":[{},{},"Dialog)"]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6622"},"This command will place a call on hold. When no call id is specified (normal usage) the active call is put on hold. When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisement on the TaptiEventHold macro event.",{"@attributes":{"id":"p-0151","num":"0244"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiHoldCall (sCallID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sCaIIID","The specified Call ID"]},{"entry":[{},{},"that should be put on"]},{"entry":[{},{},"hold. This parameter"]},{"entry":[{},{},"would normally be blank"]},{"entry":[{},{},"to lace the current call"]},{"entry":[{},{},"on hold."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6623"},"This command will remove the specified call from hold. When no call ID is provided (normal usage) it will unhold the last call placed on hold. When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventUnhold user exit.",{"@attributes":{"id":"p-0153","num":"0246"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiUnHoldCall (sCallID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sCallID","The Call ID that should"]},{"entry":[{},{},"be taken off hold. This"]},{"entry":[{},{},"parameter would normally"]},{"entry":[{},{},"be blank to unhold the"]},{"entry":[{},{},"last call placed on hold"]},{"entry":[{},{},"with the TapiHoldCall"]},{"entry":[{},{},"command."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6620"},"This command will toggle the hold state of the specified call. When no call ID is provided (normal usage) it will unhold the last call placed on hold or place the active call on hold. When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any necessary advisements on either the TapiEventHold or the TapiEventUnhold macro events.",{"@attributes":{"id":"p-0155","num":"0248"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiHoldToggle (sCallID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sCallID","The Call ID that should"]},{"entry":[{},{},"be placed on hold or"]},{"entry":[{},{},"taken off hold. This"]},{"entry":[{},{},"parameter would normally"]},{"entry":[{},{},"be blank to hold the"]},{"entry":[{},{},"active call or unhold"]},{"entry":[{},{},"the last call placed on"]},{"entry":[{},{},"hold with the"]},{"entry":[{},{},"TapiiHoldCall command."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6624"},"Note: this feature may not be included in many invention embodiments. This command is used to transfer a call to another party (which is not connected yet), and retrieves the next call in the queue. This command can also be used for transferring the call to either another available operator or a supervisor by setting the sPhoneNumber parameter to one of the following:\n\n",{"@attributes":{"id":"p-0157","num":"0252"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiBlindXferCall (sPhoneNumber)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPhoneNumber","The phone number to be"]},{"entry":[{},{},"dialed. If this"]},{"entry":[{},{},"parameter is blank, a"]},{"entry":[{},{},"Windows\u2009\u2122 dialog box is"]},{"entry":[{},{},"displayed (see the"]},{"entry":[{},{},"section Dial Number"]},{"entry":[{},{},"Dialog)"]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6625"},"This command will disconnect the identified call or the active call if none is specified.",{"@attributes":{"id":"p-0159","num":"0254"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiDisconnect (sCallID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sCallID","The Call ID that is to"]},{"entry":[{},{},"be disconnected. If"]},{"entry":[{},{},"this parameter is blank,"]},{"entry":[{},{},"the currently active"]},{"entry":[{},{},"call is disconnected."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":[{},"\u22123","No call active or"]},{"entry":[{},{},"invalid Call ID."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6626","ul":{"@attributes":{"id":"ul0024","list-style":"none"},"li":["1. CODE=OPERATOR","2. CODE=SUPERVISOR"]}},{"@attributes":{"id":"p-0160","num":"0257"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiBlindConfCall (sPhoneNumber)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPhoneNumber","This phone number is to"]},{"entry":[{},{},"be dialed. If this"]},{"entry":[{},{},"parameter is blank, a"]},{"entry":[{},{},"Windows\u2009\u2122 dialog box is"]},{"entry":[{},{},"displayed (see the"]},{"entry":[{},{},"section Dial Number"]},{"entry":[{},{},"Dialog)"]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":[{},"\u22123","No call active or"]},{"entry":[{},{},"invalid phone number."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6640"},"This command will generate a DTMF (Dual Tone Multi-frequency) signal via the JavaPhone application. This command can be utilized to send individual DTMF signals or multiple signals (for multiple digits). For example, to send individual signals, separate commands could be assigned to a numeric keypad (e.g., numeric keypad digit 7 would invoke the command TapiDTMF(7), which would result in a single DTMF for number 7 being generated.",{"@attributes":{"id":"p-0162","num":"0259"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiDTMF (sDigits)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sDigits","One or more digits for"]},{"entry":[{},{},"which to generateDTMF"]},{"entry":[{},{},"signals."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure occurred."]},{"entry":[{},"ERROR"]},{"entry":[{},"\u22123","No call active"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6628"},"PlusTapi will store the \u201cAgent ID\u201d returned from the JavaPhone with a successful logon for usage with subsequent commands that require this parameter.",{"@attributes":{"id":"p-0164","num":"0261"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Format:","TapiLogon (sUserID, sPassword)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Parameters:","sUserID","The User ID of the"]},{"entry":[{},{},{},"operator"]},{"entry":[{},{},"sPassword","The password of the"]},{"entry":[{},{},{},"operator"]},{"entry":[{},"Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},{},"successfully."]},{"entry":[{},{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},{},"NOT_AVAIL","installed."]},{"entry":[{},{},"PLUS_COMMAND","General failure"]},{"entry":[{},{},"ERROR","occurred."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":"6629"},"Note that the \u201cAgent ID\u201d used in the invocation of the corresponding parameter of this command can either be supplied (most likely by another DLL or stand-alone application) or if left blank, PlusTapi will supply the Agent ID returned with the last successful logon.",{"@attributes":{"id":"p-0166","num":"0263"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiLogoff (sAgentID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sAgentID","The Agent ID of the"]},{"entry":[{},{},"operator, returned with"]},{"entry":[{},{},"a previous logon. If"]},{"entry":[{},{},"this parameter is left"]},{"entry":[{},{},"blank, PlusTapi will use"]},{"entry":[{},{},"the Agent ID that it"]},{"entry":[{},{},"stored internally from"]},{"entry":[{},{},"the last successful"]},{"entry":[{},{},"logon."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND_","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6641"},"PlusTapi DLL (, ) will track the current state of the agent (either \u201cready\u201d or \u201cnot ready\u201d). Invocation of this command will toggle the position from its current state. When a successful response from the JavaPhone application (, ) is received for this message, PlusTapi DLL (, ) will perform any necessary advisements on either the TapiEventReady, TapiEventNotReady, or the TapiEventNotReadyPend macro event.",{"@attributes":{"id":"p-0168","num":"0265"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiReadyToggle (sAgentID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","SAgentID","The Agent ID of the"]},{"entry":[{},{},"operator, returned with"]},{"entry":[{},{},"a previous logon. If"]},{"entry":[{},{},"this parameter is left"]},{"entry":[{},{},"blank, PlusTapi DLL"]},{"entry":[{},{},"(110, 6600) will use"]},{"entry":[{},{},"the Agent ID that it"]},{"entry":[{},{},"stored internally from"]},{"entry":[{},{},"the last successful"]},{"entry":[{},{},"logon."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6631"},"Invocation of this command will change the current state of the agent to \u201cnot ready\u201d. When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi DLL (, ) will perform any requested advisements on either the TapiEventNotReady (if no call is active) or the TapiEventNotReadyPend (if a call is active) macro event.",{"@attributes":{"id":"p-0170","num":"0267"},"tables":{"@attributes":{"id":"TABLE-US-00019","num":"00019"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiNotReady (sAgentID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sAgentID","The Agent ID of the"]},{"entry":[{},{},"operator, returned with"]},{"entry":[{},{},"a previous logon. If"]},{"entry":[{},{},"this parameter is left"]},{"entry":[{},{},"blank, PlusTapi will use"]},{"entry":[{},{},"the Agent ID that it"]},{"entry":[{},{},"stored internally from"]},{"entry":[{},{},"the last successful"]},{"entry":[{},{},"logon."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":["6632","105","4400","110","6600"]},{"@attributes":{"id":"p-0171","num":"0268"},"tables":{"@attributes":{"id":"TABLE-US-00020","num":"00020"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiReady (sAgentID)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sAgentID","The Agent ID of the"]},{"entry":[{},{},"operator, returned with"]},{"entry":[{},{},"a previous logon. If"]},{"entry":[{},{},"this parameter is left"]},{"entry":[{},{},"blank, PlusTapi will"]},{"entry":[{},{},"use the Agent ID that"]},{"entry":[{},{},"it stored internally"]},{"entry":[{},{},"from the last"]},{"entry":[{},{},"successful to logon"]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6643"},"This command will increase the level of the headset volume by the specified amount. For example, if the current volume is set to the value of 60 (60% maximum volume), the command TapiVolumeUp(10) would change the current volume setting to 70 (70% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi DLL (, ) will perform any requested advisement on the TapiEventVolChange macro event. A value for the sPercentagePoints parameter which would increase the current setting to a value which is greater than 100 will set the volume to 100%.",{"@attributes":{"id":"p-0173","num":"0270"},"tables":{"@attributes":{"id":"TABLE-US-00021","num":"00021"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiVolumeUp (sPercentagePoints)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentagePoints","The number of"]},{"entry":[{},{},"percentage points (1\u2013"]},{"entry":[{},{},"100) that the headset"]},{"entry":[{},{},"volume should be"]},{"entry":[{},{},"increased."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND_","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6644"},"This command will decrease the level of the headset volume by the specified amount. For example, if the current volume is set to the value of 60 (60% maximum volume), the command TapiVolumeDown(10) would change the current volume setting to 50 (50% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventVolChange macro event. A value for the sPercentagePoints parameter which would decrease the current setting to a value that is less than 0 will set the volume to 0%.",{"@attributes":{"id":"p-0175","num":"0272"},"tables":{"@attributes":{"id":"TABLE-US-00022","num":"00022"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiVolumeDown (sPercentagePoints)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentagePoints","The number of per-"]},{"entry":[{},{},"centage points (1\u2013100)"]},{"entry":[{},{},"that the headset vol-"]},{"entry":[{},{},"ume should"]},{"entry":[{},{},"be decreased."]},{"entry":["Returns:","PLUS_COMMAND_","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6633"},"This command will set the level of the headset volume to the specified percentage of full volume. For example, if the current volume is set to the value of 80 (80% maximum volume), the command TapiVolumeSet(50) would change the current volume setting to 50 (50% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventVolChange macro event.",{"@attributes":{"id":"p-0177","num":"0274"},"tables":{"@attributes":{"id":"TABLE-US-00023","num":"00023"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiVolumeSet (sPercentage)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentage","The percentage (0\u2013100)"]},{"entry":[{},{},"of maximum volume"]},{"entry":[{},{},"that the headset"]},{"entry":[{},{},"volume should be"]},{"entry":[{},{},"set to."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND_","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_","General failure occurred."]},{"entry":[{},"ERROR"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6645"},"This command will increase the level of the microphone gain by the specified amount. For example, if the current microphone gain is set to the value of 60 (60% maximum gain), the command TapiMicGainUp(10) would change the current gain setting to 70 (70% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventGainChange macro event. A value for the sPercentagePoints parameter which would increase the current setting to a value which is greater than 100 will set the microphone gain to 100%.",{"@attributes":{"id":"p-0179","num":"0276"},"tables":{"@attributes":{"id":"TABLE-US-00024","num":"00024"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiMicGainU (sPercentagePoints)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentagePoints","The number of percent-"]},{"entry":[{},{},"age points (1\u2013100) that"]},{"entry":[{},{},"the microphone gain"]},{"entry":[{},{},"should be increased by."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6646"},"This command will decrease the level of the microphone gain by the specified amount. For example, if the current microphone gain is set to the value of 60 (60% maximum gain), the command TapiMicGainDown(10) would change the current gain setting to 70 (70% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventGainChange macro event. A value for the sPercentagePoints parameter which would decrease the current setting to a value that is less than 0 will set the microphone gain to 0%.",{"@attributes":{"id":"p-0181","num":"0278"},"tables":{"@attributes":{"id":"TABLE-US-00025","num":"00025"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiMicGainUp (sPercentaePoints)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"84pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentage","The number of percentage"]},{"entry":[{},"Points","points (1\u2013100) that the"]},{"entry":[{},{},"microphone gain should be"]},{"entry":[{},{},"increased by."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure occurred."]},{"entry":[{},"ERROR"]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6647"},"This command will set the level of the microphone gain to the specified percentage of maximum gain. For example, if the current microphone gain is set to the value of 80 (80% maximum gain), the command TapiMicGainSet(50) would change the current gain setting to 50 (50% of maximum). When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any requested advisements on the TapiEventGainChange macro event.",{"@attributes":{"id":"p-0183","num":"0280"},"tables":{"@attributes":{"id":"TABLE-US-00026","num":"00026"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiMicGainSet (sPercentage)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPercentage.","The percentage"]},{"entry":[{},{},"(0\u2013100) of"]},{"entry":[{},{},"maximum that the"]},{"entry":[{},{},"micro hone gain"]},{"entry":[{},{},"should be set to."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6642"},"This command is a microphone mute toggle function. PlusTapi DLL (, ) will check the current setting of the microphone gain (stored internally). If the gain is currently set to a non-zero value, PlusTapi will save the current setting and then set the microphone gain to zero (i.e. \u2014the microphone is muted). If the gain is currently zero, PlusTapi will restore the previously saved setting. When a successful response to this message from the JavaPhone application (, ) is received, PlusTapi will perform any necessary advisements on either the TaptEventMute or TapiEventUnmute macro event.",{"@attributes":{"id":"p-0185","num":"0282"},"tables":{"@attributes":{"id":"TABLE-US-00027","num":"00027"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiMute_Toggle ( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","None",{}]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6635"},"This command is used for changing one of the available properties in the JavaPhone application. Refer to the Property Settings table in  for additional information on the available properties and their possible values. Note that all property names and values are provided in string format.",{"@attributes":{"id":"p-0187","num":"0284"},"tables":{"@attributes":{"id":"TABLE-US-00028","num":"00028"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Format:","TapiSetProperty (sPropertyName, sProperty"]},{"entry":[{},"Value)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPropertyName","The name of the"]},{"entry":[{},{},"JavaPhone application"]},{"entry":[{},{},"property that is to be"]},{"entry":[{},{},"updated."]},{"entry":[{},"sProperty Value","The new property value."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6636"},"This command is primarily intended for diagnostic purposes. It will request the specified property from the JavaPhone application (, ) and display it in a standard Windows\u2122 Messagebox.",{"@attributes":{"id":"p-0189","num":"0286"},"tables":{"@attributes":{"id":"TABLE-US-00029","num":"00029"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiGetProperty (sPropertyName)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sPropertyName","The name of the"]},{"entry":[{},{},"JavaPhone application"]},{"entry":[{},{},"property that is to"]},{"entry":[{},{},"be accessed and"]},{"entry":[{},{},"displayed in a"]},{"entry":[{},{},"Windows\u2009\u2122"]},{"entry":[{},{},"Messagebox."]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6637"},"This command can be invoked in order to request the JavaPhone application (, ) to terminate. Note that this command would not be needed for normal workstation operation as the PlusTapi DLL (, ) will terminate the JavaPhone application (, ) when D1SP\/IWSP terminates.",{"@attributes":{"id":"p-0191","num":"0288"},"tables":{"@attributes":{"id":"TABLE-US-00030","num":"00030"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiShutDown ( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","None",{}]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND","General failure"]},{"entry":[{},"ERROR","occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6638"},"This diagnostic command can be used to test the message path between the client application and the Call Director by sending a test message. PlusTapi will send the corresponding message to the JavaPhone application. When the response is received, PlusTapi will generate a standard Windows\u2122 Messagebox informing the user that the ping response has been received.",{"@attributes":{"id":"p-0193","num":"0290"},"tables":{"@attributes":{"id":"TABLE-US-00031","num":"00031"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"168pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiPing ( )"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"63pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","None",{}]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND_","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"6648"},"This command is used for setting the operating mode of the PlusTapi DLL (, ). When the parameter, sParm, is set to \u201cYES\u201d, PlusTapi DLL (, ) will generate a Windows\u2122 Messagebox containing an informative message whenever an error is detected during the execution of one of the available PlusTapi commands. When the parameter, sparm, is set to \u201cNO\u201d, PlusTapi will not display any. Messageboxes but will instead report all failures back through the IWSP API. The default setting after startup is to display errors to the operator.",{"@attributes":{"id":"p-0195","num":"0292"},"tables":{"@attributes":{"id":"TABLE-US-00032","num":"00032"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["Format:","TapiDisplayErrs (sParm)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["Parameters:","sParm","The sParm is set to one"]},{"entry":[{},{},"of two possible values:"]},{"entry":[{},{},"YES"]},{"entry":[{},{},"NO"]},{"entry":["Returns:","PLUS_COMMAND_OK","Command executed"]},{"entry":[{},{},"successfully."]},{"entry":[{},"PLUS_COMMAND","PlusTapi DLL not"]},{"entry":[{},"NOT_AVAIL","installed."]},{"entry":[{},"PLUS_COMMAND_ERROR","General failure"]},{"entry":[{},{},"occurred."]},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"The PlusTapi DLL (, ) will enumerate variables to the IWSP platform containing the following audio and call status values:\n\n","Each of the above-enumerated variables also support the generation of DLL and DDE advisements whenever their values are altered.","PlusTapi DLL (, ) also enumerates two variables used for recording error conditions:\n\n","The descriptions of these variables are provided in the following sections.","TapiPositionStatus","This data item contains the status of the position as follows:\n\n","A value of 0 indicates that no operator has logged on. All other states imply that an operator has successfully logged on.","Format: NULL terminated ASCII string (1 character plus terminating NULL).","TapiLogonStatus","This data item contains the string returned from the JavaPhone application (, ) and the Call Director in the AgentLogon response message.","Format: NULL terminated ASCII string","TapiAgentID","This data item contains the current Agent ID returned from the JavaPhone application (, ) after a successful logon to the Call Director. If the position is not presently logged on, the variable is NULL.","Format: NULL terminated ASCII string","TapiCallID","This data item contains the current Call ID that was received from the JavaPhone application. If no call is active, the variable is NULL.","Format: NULL terminated ASCII string","TapiCallStatus","This data item contains the status of the current call in the JavaPhone application. It will contain one of the following enumerated strings, or NULL if no call is active:\n\n","Format: NULL terminated ASCII string","TapiPartyStatus","This data item contains the party status of the current call in the JavaPhone application. It will contain one of the following enumerated strings, or NULL if no call is active:\n\n","Format: NULL terminated ASCII string","TapiVolumeLevel","This data item contains the current volume level setting of the headset. Possible values are 0 to 100.","Format: NULL terminated ASCII string (1 to 3 digits plus a NULL)","TapiMicGainLevel","This data item contains the gain setting of the microphone. Possible values are 0 to 100.","Format: NULL terminated ASCII string (1 to 3 digits plus a NULL).","TapiHeadSetStatus","This variable contains the current status of the operator headset as indicated in the HeadSetStatusChanged message most recently received from the JavaPhone application. It contains one of the two following values:\n\n","Format: NULL terminated ASCII string","TapiConnectionStatus","This variable contains the current status of the JavaPhone connections to the Voice Over Data Gateway and the Call Director. It contains one of the two following values:\n\n","Format: NULL terminated ASCII string","TapiLastErrCode","This data item contains the return code value received during the execution of the last command that failed or was generated by a PlusTapi internal error. This variable is automatically cleared when its value has been requested. Other IWSP DLLs or standalone applications can respectively request a DUX or DDE advisement whenever this variable is changed. This will allow for the requesting application to be informed whenever an error is asynchronously received from the JavaPhone application.","Format: short","TapiLastCmdErr","This data item contains the name of the last command that failed during its execution. This variable is automatically cleared when its value has been requested. Note that this variable can be NULL (even when the TapiLastErrCode contains a value) if the error is due to a condition that was not the direct result of executing one of the available PlusTapi commands.","Format: NULL terminated ASCII string (up to 24 characters plus terminating NULL)","Plus Tapi Error Handling","PlusTapi has two modes of operation related to error handling:\n\n","The \u201cError Display\u201d mode is the default setting for the position after successful startup. The \u201cNo Display\u201d mode can be selected only through the invocation of the provided command, TapiDisplayErrs. With this mode, errors are reported back through the IWSP platform so that the invoking IWSP DLL or standalone application (using DDE) can handle the error programmatically.","Whenever any of the PlusTapi DLL (, ) enumerated commands experiences a failure (regardless of the operating mode), PlusTapi will store the specific return code (e.g., as provided by the JavaPhone application) in the enumerated variable, TapiLastErrCode. The command that generated the failure (if any) will also be stored in the enumerated variable, TapiLastCmdErr. If PlusTapi is in the \u201cError Display\u201d mode, the command will always return the PLUS_COMMAND_OK status to the platform after the Messagebox is displayed. If PlusTapi is in the \u201cNo Display\u201d mode, the command will always return the general failure status, PLUS_COMMAND_ERROR, to the invoking IWSP DLL or standalone application whenever the error is detected on the same thread of execution. In the case that the error is received with an asynchronous response from the JavaPhone application, PlusTapi will perform any DUX or DDE advisements previously requested on the TapiLastErrCode variable. The invoking application should then immediately request the TapiLastErrCode and the TapiLastCmdErr values whenever failure status is returned.","Any of the JavaPhone responses that report an error will include a return code. PlusTapi (, ) enumerates a message string for each of the possible error conditions, allowing the customer to alter the textual content through usage of the IWSP Define Language utility. Errors will normally be reported to the operator by displaying a standard Windows\u2122 Messagebox. PlusTapi will also generate a Windows\u2122 Messagebox for each of the possible errors that can be returned by the PlusTcp DLL. Note that the strings for each corresponding error that the PlusTcp DLL can detect are enumerated by the PlusTcp DLL (, ) (even though it will always return a numeric return code and never display any text).","PlusTapi (, ) attempts to recover from conditions involving lost connections between the JavaPhone application (, ) and either the Voice Over Data Gateway or the Call Director. The recovery involves a retry sequence that is described in section PlusTapi Startup. PlusTapi will not attempt to recover from any severe errors received either from PlusTcp or the JavaPhone. All errors will also be logged.","Plus Tapi Macro Advisement Events","PlusTapi (, ) also supports \u201cDUX\u201d macro callback advisements on selected \u201cevents\u201d, allowing for the invocation of user-defined macros. This macro advisement support is utilized for displaying informational text in the Call Status Window (CSW) display.","The following PlusTapi events that support DUX macro invocations is supported:\n\n","The above events will perform the internal DuxExecMacroAdvise command that will execute any macro previously identified with the Dux&tMacroAdvise command.","Through usage of the existing DuxSetMacroAdvise command, the position can be configured to update the Call Status Window with either text or an icon. For example, if the IWSP startup macro (configured in the Platform Setup utility) was defined to include the following commands:\n\n","InfoWinSetText(1, 0, \u201c \u201d),","then the operator would have visual feedback whenever the call was placed on hold.","Similarly, the other DUX user exits in PlusTapi would be configured to display text in predefined InfoWin Fields. See the section Call Status Window for additional information.","The TapiEventActive advisement is made when PlusTapi establishes communications with the JavaPhone application. Similarly, the TapiEventInactive advisement is made whenever communications with the JavaPhone application (, ) are lost.","Plus Tagi Utility Mode ()","The PlusTapi DLL (, ) supports the IWSP utility mode in order to provide a means of setting the necessary configuration parameters. The  diagram depicts the PlusTapi utility mode panel.","The parameters are defined in the following table:",{"@attributes":{"id":"p-0239","num":"0382"},"tables":{"@attributes":{"id":"TABLE-US-00033","num":"00033"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":{"entry":"TABLE 2"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"PlusTapi DLL Utility Mode Parameters"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Utility Parameter","Definition"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"PlusTop conversation number","This parameter is used by"]},{"entry":[{},"for telephony support (1\u20138):","PlusTapi in the \u201cTcpOpen\u201d"]},{"entry":[{},{},"command of the PlusTcp DLL."]},{"entry":[{},{},"Valid values are 1\u20138."]},{"entry":[{},"TCP\/IP address of telephony","This is the TCP\/IP address"]},{"entry":[{},"support:","of the JavaPhone"]},{"entry":[{},{},"application. This parameter"]},{"entry":[{},{},"can be set to the string"]},{"entry":[{},{},"\u201cLocalHost\u201d as a way of"]},{"entry":[{},{},"indicating that the"]},{"entry":[{},{},"JavaPhone application is"]},{"entry":[{},{},"resident on the same PC."]},{"entry":[{},"TCP\/IP port number of","This parameter specifies the"]},{"entry":[{},"telephony support:","numeric port number of the"]},{"entry":[{},{},"TCP\/IP socket connection to"]},{"entry":[{},{},"the JavaPhone application."]},{"entry":[{},{},"This value must match the"]},{"entry":[{},{},"value that the JavaPhone"]},{"entry":[{},{},"application is configured"]},{"entry":[{},{},"for."]},{"entry":[{},"Timeout value for","This parameter controls the"]},{"entry":[{},"initialization of telephony","duration of the PlusTapi"]},{"entry":[{},"support (seconds):","retry logic that is applied"]},{"entry":[{},{},"during startup when trying"]},{"entry":[{},{},"to establish a TCP\/IP socket"]},{"entry":[{},{},"connection with (and"]},{"entry":[{},{},"initialization of) the"]},{"entry":[{},{},"JavaPhone application."]},{"entry":[{},"Timeout for establishing","This parameter controls the"]},{"entry":[{},"telephony connection","duration of the PlusTapi"]},{"entry":[{},"(seconds):","retry logic to request the"]},{"entry":[{},{},"connections between the"]},{"entry":[{},{},"JavaPhone application and"]},{"entry":[{},{},"the Voice Over Data Gateway"]},{"entry":[{},{},"and the Call Director."]},{"entry":[{},"Timeout for allowing","This parameter indicates the"]},{"entry":[{},"operator to replug headset","number of seconds that the"]},{"entry":[{},"(seconds):","system will allow for the"]},{"entry":[{},{},"operator to replug a headset"]},{"entry":[{},{},"that is removed during an"]},{"entry":[{},{},"active call. If the headset"]},{"entry":[{},{},"is not replugged during the"]},{"entry":[{},{},"specified time, the PlusTapi"]},{"entry":[{},{},"DLL will attempt to transfer"]},{"entry":[{},{},"the call to another"]},{"entry":[{},{},"available operator and then"]},{"entry":[{},{},"logoff the operator."]},{"entry":[{},"TCP\/IP Address of Call","This is the TCP\/IP address"]},{"entry":[{},"Director Custom Server.","of the system that is"]},{"entry":[{},{},"running the Call Director"]},{"entry":[{},{},"Custom Server application"]},{"entry":[{},"TCP\/IP Address of Voice Over","This is the TCP\/IP address"]},{"entry":[{},"Data Custom Server.","of the system that is"]},{"entry":[{},{},"running the Voice Over Data"]},{"entry":[{},{},"Custom Server application"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"PlusTapi includes embedded calls to the existing diagnostic support generating the following possible log entries:\n\n","The InfoWin is utilized for defining a display window containing the various call status indicators. This window is referred to as the \u201cCall Status Window\u201d (CSW).",{"@attributes":{"id":"p-0242","num":"0390"},"figref":["FIG. 18","FIG. 19"],"b":["1","2"]},"In this example, InfoWin Field  is displaying a \u201chold\u201d indication, InfoWin Field  is displaying a \u201cmute\u201d indicator. InfoWin Field  is displaying whether there is a \u201ccall active\u201d, while InfoWin Fields \u2013 display the called and calling numbers. Field  could be utilized for displaying \u201cNot Ready\u201d text.","All of the displays shown are strictly provided for demonstration purposes as the customer would be free to customize the content and format of the Call Status Window using a combination of the following available features:\n\n","The system block diagrams illustrated in  may be utilized by one skilled in the art in conjunction with the data flow diagrams of  to generate appropriate flowcharts that describe a corresponding method of implementing the programmable agent workstation. One skilled in the art will recognize that these steps may be rearranged and\/or augmented with no loss of generality in the teachings of the present invention.","The teachings of the present invention are sufficiently broad to not limit the manner in which the above-mentioned steps are to be performed as well as not limiting the method to any particular hardware, operating system, API, or graphical user interface. Thus, while the particular information gathered within the context of  and the specific function calls listed in the exemplary flow diagrams are preferred for some embodiments, they are by no means Limitive of the present invention teachings or the scope thereof.","As would be known by one skilled in the art and as indicated in the exemplary embodiments above, the system and method described herein and generally illustrated in  may be reduced to computer instruction codes and embodied on a computer readable storage means. This may take the form of a wide variety of storage media well known in the art and\/or contemplated for future use. Thus, the present invention specifically anticipates the incorporation of the system and methods discussed herein in the form of tangible computer software products.","Furthermore, while not limiting the scope of the present invention, the present invention specifically anticipates that one or more components of the present invention may be implemented using the Microsoft\u00ae Windows\u2122 operating environment and\/or the IBM AIX operating environment in all their variations or their equivalent commercial embodiments, including but not limited to any system incorporating a graphical user interface.","A programmable workstation system and method for network based call center with telephony functions provided over the IP network and using a personal computer is disclosed. For such automated call centers there exists a need to coordinate the telephony functions with agent availability functions. Existing solutions use a switch and PSTN phone to communicate information to an automated call director (ACD). The present invention solves the problem of doing similar reporting and with coexistence of telephony functions along with agent data functions.","Features of invention include (a) special protocols to relay agent information to Virtual ACD and coexist with H.323 signaling and (b) the ability to relay agent status and provide screen based interface to agent also for such information for agent availability and alerting. The system disclosed generally incorporates JavaPhone (, ), PlusTcp (, ), and PlusTapi (, ) APIs with associated method functions to implement the major functions of the invention.","As illustrated in , while the foregoing discussion has been limited to single-call applications, the present invention is capable of wide application in environments where the agent workstation () communicates with a wide variety of remote communication systems (, , ) using a wide variety of protocols and data types.","Although a preferred embodiment of the present invention has been illustrated in the accompanying Drawings and described in the foregoing Detailed Description, it is understood that the invention is not limited to the embodiments disclosed, but is capable of numerous rearrangements, modifications, and substitutions without departing from the spirit of the invention as set forth and defined by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The file of this patent contains at least one drawing\/photograph executed in color. Copies of this patent with color drawings\/photographs is provided by the Patent and Trademark Office upon request and payment of the necessary fee.","For a fuller understanding of the advantages provided by the invention, reference should be made to the following detailed description together with the accompanying drawings wherein:",{"@attributes":{"id":"p-0016","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0022"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0023"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0024"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0025"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0026"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0027"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0024","num":"0028"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0025","num":"0029"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0026","num":"0030"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0027","num":"0031"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0028","num":"0032"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0029","num":"0033"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0030","num":"0034"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0031","num":"0035"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0032","num":"0036"},"figref":"FIG. 17"},{"@attributes":{"id":"p-0033","num":"0037"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0034","num":"0038"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0035","num":"0039"},"figref":"FIG. 20"}]},"DETDESC":[{},{}]}
