---
title: System and method for dynamically exposing SQL statements as web protocols
abstract: A system, method, and program product is provided that receives a client request from a client computer system over a computer network, such as the Internet. The client request includes a request method and also includes a resource identifier. The system traverses a directory structure using the resource identifier. A resource file is located based on the traversing. The name associated with the resource file also includes the name of the resource method. A database query statement is retrieved from the located resource file. The retrieved database query statement is executed. The execution of the database query statement yields one or more database results, such as records from a database table. These database results are returned to the client computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818337&OS=07818337&RS=07818337
owner: International Business Machines Corporation
number: 07818337
owner_city: Armonk
owner_country: US
publication_date: 20071228
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION"],"p":["1. Technical Field","The present invention relates to a system and method that dynamically exposes Structured Query Language (SQL) statements as web protocols. More particularly, the present invention relates to a system and method that exposes data by executing SQL queries that are stored in files and directories using a naming convention that reduces programming within the individual files.","2. Description of the Related Art","Web 2.0 applications introduce the notion of mash-ups. Mash-up is a way of quickly pulling together data from various sources to create totally new applications. In order for data to become \u201cmashupable,\u201d a developer needs to expose data via Web 2.0 protocols. Often times, this means creating applications for the sole purpose of exposing the data.","Using current technology, exposing data via Web 2.0 protocols involves writing a full fledged application to translate result sets into a user interface (UI) format. Existing web technologies contain many layers for executing business logic and middleware function, that involves moving data from result sets, into intermediate middleware object, such as ordinary Java objects (also known as \u201cPlain Old Java Objects\u201d or \u201cPOJO's\u201d), or Enterprise Java Beans (EJB's), and then translating them to a client side technology.","The obvious challenge of using current technology is the need to write full-fledged applications in order to expose data from the middleware to the Web 2.0 applications. The present invention addresses this challenge.","It has been discovered that the aforementioned challenges are resolved using a system, method and computer program product that receives a client request from a client computer system over a computer network, such as the Internet. The client request includes a request method and also includes a resource identifier.","The system traverses a directory structure using the resource identifier. A resource file is located based on the traversing. The name associated with the resource file also includes the name of the resource method. A database query statement (e.g., an SQL statement) is retrieved from the located resource file.","The retrieved database query statement is executed. The execution of the database query statement yields one or more database results, such as records from a database table. These database results are returned to the client computer system over the computer network.","The foregoing is a summary and thus contains, by necessity, simplifications, generalizations, and omissions of detail; consequently, those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects, inventive features, and advantages of the present invention, as defined solely by the claims, will become apparent in the non-limiting detailed description set forth below.","Certain specific details are set forth in the following description and figures to provide a thorough understanding of various embodiments of the invention. Certain well-known details often associated with computing and software technology are not set forth in the following disclosure, however, to avoid unnecessarily obscuring the various embodiments of the invention. Further, those of ordinary skill in the relevant art will understand that they can practice other embodiments of the invention without one or more of the details described below. Finally, while various methods are described with reference to steps and sequences in the following disclosure, the description as such is for providing a clear implementation of embodiments of the invention, and the steps and sequences of steps should not be taken as required to practice this invention. Instead, the following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather, any number of variations may fall within the scope of the invention, which is defined by the claims that follow the description.","The following detailed description will generally follow the summary of the invention, as set forth above, further explaining and expanding the definitions of the various aspects and embodiments of the invention as necessary. To this end, this detailed description first sets forth a computing environment in  that is suitable to implement the software and\/or hardware techniques associated with the invention. A networked environment is illustrated in  as an extension of the basic computing environment, to emphasize that modern computing techniques can be performed across multiple discrete devices.",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1","b":["100","100","110","112","112","110","115","115","120","110","125","115","118","115","125","125","130"]},"Northbridge  and Southbridge  are connected to each other using bus . In one embodiment, the bus is a Direct Media Interface (DMI) bus that transfers data at high speeds in each direction between Northbridge  and Southbridge . In another embodiment, a Peripheral Component Interconnect (PCI) bus is used to connect the Northbridge and the Southbridge. Southbridge , also known as the I\/O Controller Hub (ICH) is a chip that generally implements capabilities that operate at slower speeds than the capabilities provided by the Northbridge. Southbridge  typically provides various busses used to connect various components. These busses can include PCI and PCI Express busses, an ISA bus, a System Management Bus (SMBus or SMB), a Low Pin Count (LPC) bus. The LPC bus is often used to connect low-bandwidth devices, such as boot ROM  and \u201clegacy\u201d I\/O devices (using a \u201csuper I\/O\u201d chip). The \u201clegacy\u201d I\/O devices () can include serial and parallel ports, keyboard, mouse, floppy disk controller. The LPC bus is also used to connect Southbridge  to Trusted Platform Module (TPM) . Other components often included in Southbridge  include a Direct Memory Access (DMA) controller, a Programmable Interrupt Controller (PIC), a storage device controller, which connects Southbridge  to nonvolatile storage device , such as a hard disk drive, using bus .","ExpressCard  is a slot used to connect hot-pluggable devices to the information handling system. ExpressCard  supports both PCI Express and USB connectivity as it is connected to Southbridge  using both the Universal Serial Bus (USB) the PCI Express bus. Southbridge  includes USB Controller  that provides USB connectivity to devices that connect to the USB. These devices include webcam (camera) , infrared (IR) receiver , Bluetooth device  which provides for wireless personal area networks (PANs), keyboard and trackpad , and other miscellaneous USB connected devices , such as a mouse, portable storage devices, modems, network cards, ISDN connectors, fax, printers, USB hubs, and many other types of USB connected devices.","Wireless Local Area Network (LAN) device  is connected to Southbridge  via the PCI or PCI Express bus . LAN device  typically implements one of the IEEE 802.11 standards of over-the-air modulation techniques that all use the same protocol to wireless communicate between information handling system  and another computer system or device. Optical storage device  is connected to Southbridge  using Serial ATA (SATA) bus . Serial ATA adapters and devices communicate over a high-speed serial link. The Serial ATA bus is also used to connect Southbridge  to other forms of storage devices, such as hard disk drives. Audio circuitry , such as a sound card, is connected to Southbridge  via bus . Audio circuitry  is used to provide functionality such as audio line-in and optical digital audio in port , optical digital output and headphone jack , internal speakers , and internal microphone . Ethernet controller  is connected to Southbridge  using a bus, such as the PCI or PCI Express bus. Ethernet controller  is used to connect information handling system  with a computer network, such as a Local Area Network (LAN), the Internet, and other public and private computer networks.","While  shows one information handling system, an information handling system may take many forms. For example, an information handling system may take the form of a desktop, server, portable, laptop, notebook, or other form factor computer or data processing system. In addition, an information handling system may take other form factors such as a personal digital assistant (PDA), a gaming device, ATM machine, a portable telephone device, a communication device or other devices that include a processor and memory.","The Trusted Platform Module (TPM ) shown in  and described herein to provide security functions is but one example of a hardware security module (HSM). Therefore, the TPM described and claimed herein includes any type of HSM including, but not limited to, hardware security devices that conform to the Trusted Computing Groups (TCG) standard, and entitled \u201cTrusted Platform Module (TPM) Specification Version 1.2.\u201d The TPM is a hardware security subsystem that may be incorporated into any number of information handling systems, such as those outlined in .",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 2","FIG. 1","FIG. 2","FIG. 2"],"b":["210","270","210","220","230","240","250","260","280","200","260","265","270","275","280","285"]},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 3","b":["300","310","330","312","332"]},"The end nodes are files that include SQL statements corresponding to the particular request. Within the {employee_identifier} subdirectory three different nodes (files) are shown\u2014\u201cdelete.theDB.zsql\u201d (file ) would include the SQL statements needed to delete the particular employee from the database. Likewise \u201cget.theDB.zsql\u201d (file ) would include SQL statements to get (retrieve) the particular employee's record from the database and return the data to the caller (as will be explained in further detail). Similarly, \u201cput.theDB.zsql\u201d would include SQL statements used to add the particular employee to the database. Corresponding files also exist within the {customer_identifier} subdirectory. The file \u201cdelete.theDB.zsql\u201d (file ) includes the SQL statements needed to delete the particular customer from the database. Likewise \u201cget.theDB.zsql\u201d (file ) would include SQL statements to get (retrieve) the particular customer's record from the database and return the data to the caller. Similarly, \u201cput.theDB.zsql\u201d would include SQL statements used to add the particular customer to the database.","End nodes also are provided for the higher-level directory elements. In particular, \u201cget.theDB.zsql\u201d (files  and ) are provided for both the employees directory as well as the customers directory. These files include SQL statements to retrieve an entire table and are shown in files  and , respectively. File  shows that the \u201cget.theDB.zsql\u201d to retrieve employees executes an SQL statement included in the file that reads \u201cSELECT * FROM EMPLOYEES\u201d. Likewise, file  shows that the \u201cget.theDB.zsql\u201d to retrieve customers executes an SQL statement included in the file that reads \u201cSELECT * FROM CUSTOMERS\u201d. Those skilled in the art will recognize that these SELECT statements are retrieving entire tables from a relational database.","Having benefit of this disclosure, it will be readily apparent that modifications can be applied to these teachings to allow variables (parameters) to be transmitted in order to provide a variable to revise the selection set. For example, taking a parameter value of {employee_criteria}, the SELECT statement in file  could be modified to be \u201cSELECT * FROM EMPLOYEES WHERE {employee_criteria}\u201d. The system would then replace the {employee_criteria} placeholder with search criteria provided by the client, such as \u201cSELECT * FROM EMPLOYEES WHERE LASTNAME=SMITH\u201d in order to retrieve all employees with a last name of \u201cSmith.\u201d",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 4","FIG. 3"],"b":["400","405","405","200","410"]},"At predefined process , a dispatcher routine is executed in order to identify the resource (e.g., file) being requested by the client (see  and corresponding text for processing details). After the dispatcher routine has executed, at predefined process  the contents of the request are parsed (e.g., analyzed) in order to identify the SQL resource and execute the SQL statement included in the SQL resource (see  and corresponding text for processing details). When the data has been retrieved, predefined process  completes the request by retrieving data from the database (using the SQL statements from the identified SQL resource) and formatting the data into formatted results  (e.g., XML code, JSON, etc.). Formatted results are, as the name implies, in a format more suitable for use (e.g., display) at client . Formatted results  are then returned to client  via computer network .",{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 5","b":["500","510","405","514","516"]},"At step , RESTful structure  is searched for the selected resource. A determination is made as to whether the resource is found within the structure (decision ). If the resource is found, decision  branches to \u201cyes\u201d branch  whereupon, at step , the identified branch, or node, of the RESTful structure is traversed. On the other hand, if the particular resource is not found it can either mean that the resource does not exist or that the resource level allows a variable parameter, such as an employee's name, that is passed to the resource (e.g., in order to perform a GET request for all employees with the last name of \u201cSmith\u201d). If the particular resource name is not found, then decision  branches to \u201cno\u201d branch  whereupon, a determination is made as to whether the resource level provides for use of a variable parameter (decision ). In one embodiment, a file notation is provided using braces ({ }) that enclose a parameter name. For example, a RESTful structure that includes a level of \u201cemployees\\{employee_identifier}\u201d provides for a variable parameter following the \u201cemployees\u201d level. In this example, a GET request for \u201c\/employees\/Smith\u201d would traverse to the {employee_identifier} level of the structure in order to retrieve a resource (e.g., get.theDB.zsql) that uses the parameterized variable (e.g., \u201cSmith\u201d) in the resource in order to, for example, retrieve all employee records where the employee's name is \u201cSmith.\u201d If a parameter is supported, then decision  branches to \u201cyes\u201d branch  whereupon, at step , the branch that accepts the parameterized variable is traversed (e.g., the {employee_identifier} level of the RESTful structure). On the other hand, if a variable parameter is not supported and the requested resource or level is not found in RESTful structure , then decision  branches to \u201cno\u201d branch  whereupon, at step , an error is returned indicating that the requested resource was not found and processing ends at .","Returning to step , if a fixed branch or terminal is found (e.g., \u201c\/employees\u201d) or if a variable branch is found (e.g., \u201c{employee_identifier}\u201d), then the branch is traversed. A determination is made as to whether processing has reached the terminal, or last, node (decision ). The terminal node being a resource file (a .zsql file). If a terminal node has not yet been reached, then decision  branches to \u201cno\u201d branch  which loops back to traverse further levels of the RESTful structure according to the client request. This looping continues until a terminal node of the RESTful structure is reached, at which point decision  branches to \u201cyes\u201d branch  whereupon predefined process  is executed to identify and execute the database resource (see  and corresponding text for processing details).",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 6","b":["600","602","604","300"]},"A determination is made as to whether the requested resource is found in the RESTful structure (decision ). If the resource is not found, then decision  branches to \u201cno\u201d branch  whereupon processing ends with an error being returned at  indicating that the requested resource was not found. On the other hand, if the resource was found, then decision  branches to \u201cyes\u201d branch  whereupon, at step  the database connection identified in the resource (e.g., \u201ctheDB\u201d) is retrieved from configuration file . The retrieved database connection attributes are used to connect to the database upon which the SQL query will be performed. In this manner, a RESTful structure can support connections to multiple databases and multiple types of database connections based upon the database connection attributes included in configuration file .","At step , the database resource file is opened (e.g., the \u201cget.theDB.zsql\u201d file). A determination is made as to whether parameterized data, such as an employee's name, was included in the client's request (decision ). If such parameterized data was included in the request, then decision  branches to \u201cyes\u201d branch  whereupon, at step , the placeholder in the resource file is replaced with the data supplied in the client request. For example, if the SQL statement in the file is \u201cSELECT * FROM EMPLOYEES WHERE LASTNAME={employee_identifier}\u201d and the client had sent a request of \u201cGET http:\/\/host\/resources\/employees\/Smith\u201d then the placeholder in the SELECT clause would be replaced with the parameter provided in the client request, resulting in \u201cSELECT * FROM EMPLOYEES WHERE LASTNAME=Smith\u201d being the resulting SQL statement. This resulting SQL statement is then processed by predefined process  (see  and corresponding text for processing details). If a parameterized variable is not provided in the client request, then decision  branches to \u201cno\u201d branch  bypassing step  and, at predefined process , the SQL statement in the resource file (the .zsql file) is executed and the resulting data is returned to the client (see  and corresponding text for processing details).",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 7","b":["700","705","405","710","710","715","720"]},"If the client has requested a particular output content type, then decision  branches to \u201cyes\u201d branch  whereupon, at step , raw data  is converted to the output content type specified in the client request. On the other hand, if the client request did not specify a particular output content type, then decision  branches to \u201cno\u201d branch  whereupon, at step , raw data  is converted to a default content type, such as XML.","At step , a search is made as to whether a storage key was specified in the resource file (e.g. in the .zsql file). The storage key is in a format that identifies a location where the resulting data should be stored so that the data can be readily retrieved without having to re-execute the SQL statement. For example, if the SQL statement is used to populate a combo box, the storage key might be \u201c<\/request\/comboboxdata\u201d. A determination is made as to whether a storage key is identified in the resource file (decision ). If the storage key is specified, then decision  branches to \u201cyes\u201d branch  whereupon, at step , the converted results are stored at the server in a location specified by the storage key. On the other hand, if the storage key is not specified in the resource file, then decision  branches to \u201cno\u201d branch  whereupon, at step  the converted results are stored in a default storage area.","At step , formatted results (e.g., in JSON format, in XML format, etc.) are returned to client  using computer network , such as the Internet. Processing of the client's database request is now complete.","One of the preferred implementations of the invention is a client application, namely, a set of instructions (program code) or other functional descriptive material in a code module that may, for example, be resident in a tangible computer readable, such as the random access memory of the computer, as a computer program product. Until required by the computer, the computer program product may be stored in another tangible computer readable medium, for example, in a hard disk drive, or in a removable memory such as an optical disk (for eventual use in a CD ROM) or floppy disk (for eventual use in a floppy disk drive). Thus, the present invention may be implemented as a computer program product stored in a computer readable medium for use in a computer. In addition, the set of instructions may be downloaded via the Internet or other computer network. Furthermore, although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software, one of ordinary skill in the art would also recognize that such methods may be carried out in hardware, in firmware, or in more specialized apparatus constructed to perform the required method steps. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes, but is not limited to, computer programs, instructions, rules, facts, definitions of computable functions, objects, and data structures.","While particular embodiments of the present invention have been shown and described, it will be obvious to those skilled in the art that, based upon the teachings herein, that changes and modifications may be made without departing from this invention and its broader aspects. Therefore, the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore, it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended, such intent will be explicitly recited in the claim, and in the absence of such recitation no such limitation is present. For non-limiting example, as an aid to understanding, the following appended claims contain usage of the introductory phrases \u201cat least one\u201d and \u201cone or more\u201d to introduce claim elements. However, the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles \u201ca\u201d or \u201can\u201d limits any particular claim containing such introduced claim element to inventions containing only one such element, even when the same claim includes the introductory phrases \u201cone or more\u201d or \u201cat least one\u201d and indefinite articles such as \u201ca\u201d or \u201can\u201d; the same holds true for the use in the claims of definite articles."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention may be better understood, and its numerous objects, features, and advantages made apparent to those skilled in the art by referencing the accompanying drawings, wherein:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
