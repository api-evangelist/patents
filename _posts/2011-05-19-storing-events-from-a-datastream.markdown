---
title: Storing events from a datastream
abstract: A data stream is stored in a database. An event pipe stores a sliding window of events from the data stream. A query is responded to by utilizing the sliding window of events stored in the event pipe.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09465846&OS=09465846&RS=09465846
owner: Hewlett Packard Enterprise Development LP
number: 09465846
owner_city: Houston
owner_country: US
publication_date: 20110519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A data warehouse is typically composed of one or more databases that store data that a company accumulates and uses when making management decisions. Data access from a data warehouse is conventionally accomplished using data queries to the data warehouse.","Many business applications that require access to relational or object databases within a data warehouse utilize a data access objection (DAO). Within the DAO an application programming interface (API) such as a Java Database Connectivity (JDBC) provides the capability to execute queries, for example structure query language (SQL) queries, to a data warehouse.","When a data stream, such as a stream of stock quotes for a particular stock on a stock exchange, is stored in a data warehouse, access of portions of the data stream to perform calculations on \u201csliding-window\u201d segments of the data can be cumbersome. This is because access to such data streams can require a large number of queries to the data warehouse. Each query requires system overhead such as query set-up and query tear-down.","A data stream composed of a continuous stream of events can be stored in a database within a data warehouse. The events can be data providing information about any phenomena. For example, the stream of events could be price quotes for a stock listed on a stock exchange. Applications may require access to the data stream, for example, to calculate a moving average of the price quotes for the stock. If the data stream is not managed or persisted by the application, the application would typically need to query the data warehouse for each price quote of the stock. This can be cumbersome and resource intensive because each query requires system overhead such as query set-up and query tear-down.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},"In , data from a data stream , composed of a stream of events, is stored by a database  within a data warehouse. An application  within a computing system  performs processing on a sliding window of events within data stream . A sliding window of events is serial data, in this case representing a plurality of events, that is received in a buffer. When the buffer is full an operation can be performed on the data or in response to the data. The buffer is then emptied allowing new serial data to be received into the buffer.","A continuous data access object (CDAO)  is a component that is used by application  to access database . An application program interface (API)  within ODA( ) is used to route queries to database . For example, API  is a Java Database connectivity (JDBC) application program interface.","For one time queries, represented in  by a query , API  routes the queries to database  in accordance with the conventional handling of such queries by a database management system (DBMS). Continuous queries, as represented in  by a continuous query , are handled by accessing streamed events stored in an event pipeline .","Event pipeline  acts as a buffer that receives and stores a sliding window of data from data stream  as delivered by a query engine . The sliding window of data stream  is represented in  by data for events  which are stored in event pipe . Events  represent events that after being removed from event pipe  are accessible from within database .","Event pipeline  can be implemented within API  or external to API . For example, event pipeline  can be implemented within API  using a continuously running event pipe query (EPQ) , shown in .","EPQ  captures and\/or processes incoming events continuously, buffers the most recent results in sliding windows, and delivers these results upon request. The returned query results represent the effects of on-demand query evaluation on the contents of events  within event pipe .","A streaming capture function (SCF)  receives data stream  and receives information requests to deliver designated continuous query results. As SCF  receives data from data stream , SCF  generates stream elements , which are stored as tuples within event pipe . A tuple is a finite function that maps attributes to values. A particular event can be interpreted such that it causes SCF  to signal end-of-data to query engine  to terminate the current query execution.","A sliding window function (SWF)  provides buffering and continuously maintains events , or current data derived from events , that are currently within event pipeline .","When there is no current information request, SWF  continues to update events , dropping old windows of event data out of pipeline  as new event data are acquired. When API  requests sliding window data from pipeline , the current events  buffered within pipeline  or event processing results from the current events  buffered within pipeline  are returned to API  in a serial transfer from pipeline  to API . API  issues an END-OF-DATA query, to indicate when to stop sending event data from pipeline  to API . SWF  will then continue to update events , moving old event data out of pipeline  as new event data is acquired.","For example, suppose SCF  is a function: stream_reader(source). That is, the function stream_reader(source) is a streaming capture function (SCF) implemented in API . The parameter \u201csource\u201d is a stream source ID that identifies the data stream from which data is taken.","For example, the function stream_reader(source) returns tuples with attributes for a stock symbol listed on a stock exchange. The parameter \u201csource\u201d identifies the data stream for the stock symbol. Each tuple identifies values for the following attributes pertaining to the stock symbol: a stock identifier, a price, a time, and a special attribute with Boolean values\u2014\u201ccut\u201d. The \u201ccut\u201d is set true when information about the stock value over time is requested by the application.","Next, for example, suppose SWF  is a function: sliding_window(minutes,symbol,price,time,cut). That is, the function sliding_window(minutes,symbol,price,time,cut) is a sliding window function (SWF) implemented in API . The function sliding_window(minutes,symbol,price,time,cut) is used to continuously update and buffer the moving average of certain stock prices supplied by the data stream.","The first parameter of sliding_window( )\u201cminutes\u201d indicates a number of minutes which boundaries of sliding window, i.e., the amount of time for which the stock data is stored in the event pipe. The parameter \u201csymbol\u201d indicates a symbol for the stock. The parameter \u201cprice\u201d indicates a price for the stock. The parameter \u201ctime\u201d indicates a time at which the price occurs. The parameter \u201ccut\u201d is set true when stock quotes for a particular stock ticker are requested. When no request is received from the client applications, the value of \u201ccut\u201d is false and the function sliding_window( )returns nothing (NULL). When the value of \u201ccut\u201d is false, although an event processing query (EPQ) is running, its only effect is to maintain the sliding window container with nothing returned.","As shown in , event processing  selects data from SWF  to be returned, including the performance of any desired processing on the data returned from SWF . For example, event processing  could calculate a moving average of the price quotes for the stock as supplied by SWF .","For example, an event pipe query that uses SCF stream_reader( )and SWF sliding_window( )might look like the following:","SELECT sliding_window(60, symbol, price, time, cut)","FROM stream_reader();","In the simple query above the parameter \u201c1\u201d indicates the stream source idea for a particular stock.","When \u201ccut\u201d is set true and passed in the function sliding_window( ) together with the requested stock symbol, one or more tuples derived from the current sliding window content will be returned from sliding_window( )via event processing .","When cut is false, sliding_window( )returns NULL. When sliding_window( )returns NULL, event processing on the results of sliding_window( ) even database operations, such as an aggregate-group by operation, on the results of the sliding_window( )have no effect, do not accumulate data and do not cause a data jam.","Sliding windows can be used in a wide varied of ways. For example, within API , sliding windows of data on multiple data streams may be kept and updated with SWFs. There can be multiple SWFs for holding sliding windows in a single event pipe query. The content of a sliding window can express the raw events themselves or the data derived from them.","The foregoing discussion discloses and describes merely exemplary methods and embodiments. As will be understood by those familiar with the art, the disclosed subject matter may be embodied in other specific forms without departing from the spirit or characteristics thereof. Accordingly, the present disclosure is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
