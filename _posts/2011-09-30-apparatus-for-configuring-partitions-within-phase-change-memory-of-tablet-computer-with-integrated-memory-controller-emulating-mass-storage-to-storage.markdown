---
title: Apparatus for configuring partitions within phase change memory of tablet computer with integrated memory controller emulating mass storage to storage driver based on request from software
abstract: A non-volatile random access memory (NVRAM) is used in a computer system to perform multiple roles in a platform storage hierarchy, specifically, to replace traditional mass storage that is accessible by an I/O. The computer system includes a processor to execute software and a memory coupled to the processor. At least a portion of the memory comprises a non-volatile random access memory (NVRAM) that is byte-rewritable and byte-erasable by the processor. The system further comprises a memory controller coupled to the NVRAM to perform a memory access operation to access the NVRAM in response to a request from the software for access to a mass storage.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529708&OS=09529708&RS=09529708
owner: Intel Corporation
number: 09529708
owner_city: Santa Clara
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATION","BACKGROUND","DETAILED DESCRIPTION"],"p":["This patent application is a U.S. National Phase Application under 35 U.S.C. \u00a7371 of International Application No. PCT\/US2011\/054414, filed Sep. 30, 2011, entitled NON-VOLATILE RANDOM ACCESS MEMORY (NVRAM) AS A REPLACEMENT FOR TRADITIONAL MASS STORAGE.","Field","Embodiments of the invention relate to a computer system; and more specifically, to the use of non-volatile random access memory as a replacement for traditional mass storage.","Description of the Related Art","A. Current Memory and Storage Configurations","One of the limiting factors for computer innovation today is memory and storage technology. In conventional computer systems, system memory is typically implemented by dynamic random access memory (DRAM). DRAM-based memory consumes power even when no memory reads or writes occur because it must constantly recharge internal capacitors. DRAM-based memory is volatile, which means data stored in DRAM memory is lost once the power is removed.","With respect to mass storage, conventional mass storage devices typically include non-volatile magnetic media (e.g., hard disk drives) and\/or flash memory (also referred to as \u201cflash\u201d) (e.g., solid state drives (SSDs)). These storage devices are block-addressable, which means that a single byte of storage cannot be accessed individually. Rather, bytes are read and written as multi-byte (e.g., 16 bytes or larger) blocks of data. Generally, these storage devices are considered I\/O devices because they are accessed by the processor through various I\/O adapters that implement various I\/O protocols. These I\/O adapters and I\/O protocols consume a significant amount of power and can have a significant impact on the die area and the form factor of the platform. Additionally, for portable or mobile devices (e.g., tablet computers, cameras and mobile phones) that have limited battery life, their storage devices (e.g., Embedded Multimedia Card (eMMC) and Secure Digital (SD) card) are typically coupled to the processor via low-power interconnects and I\/O controllers in order to meet active and idle power budgets. These interconnect and I\/O controllers cannot consistently deliver the bandwidth required for a satisfying user experience.","With respect to firmware memory, a conventional computer system typically uses flash memory devices to store persistent system information that is read often but seldom (or never) written to. For example, Basic Input and Output System (BIOS) images are typically stored in a flash memory device. Flash memory devices that are currently available in the market generally have limited speed (e.g., 50 MHz). This speed is further reduced by the overhead for read protocols (e.g., 2.5 MHz). In order to speed up the BIOS execution speed, conventional processors generally cache a portion of BIOS code during the Pre-Extensible Firmware Interface (PEI) phase of the boot process. However, the processor cache has a very limited amount of capacity. Thus, the amount of BIOS code that can be used for the initial system configuration is also very limited. The size limitation of the processor cache places a significant restriction on the size of the BIOS code used in the PEI phase (also known as the \u201cPEI BIOS code\u201d). Therefore, the PEI BIOS code cannot be easily extended to support a large mix of memory configurations and multiple processor families. With the rising demand for initialization of processors, process interconnects, memory and storage implemented with various technologies and multiple processor families, the need for more versatile PEI BIOS code also grows. One solution is to build a larger processor cache for caching the code. However, the size of the processor cache cannot be easily increased without a negative impact on the rest of the system.","B. Phase-Change Memory (PCM) and Related Technologies","Phase-change memory (PCM), also sometimes referred to as PCME, PRAM, PCRAM, Ovonic Unified Memory, Chalcogenide RAM and C-RAM, is a type of non-volatile computer memory which exploits the unique behavior of chalcogenide glass. As a result of heat produced by the passage of an electric current, this material can be switched between two states: crystalline and amorphous. Recent versions of PCM can achieve two additional distinct states, effectively doubling memory storage capacity. PCM is one of a number of new memory technologies competing in the non-volatile role with flash memory. Flash memory has a number of practical problems which these replacements hope to address.","For example, PCM can offer much higher performance in applications where writing quickly is important, in part because the memory element can be switched more quickly, and also because individual bits may be changed to either 1 or 0 without the need to first erase an entire block of cells (as is the case with flash). The high performance of PCM makes it potentially very beneficial in non-volatile memory roles that are currently performance-limited by memory access timing.","Additionally, while PCM devices degrade with use (like flash), they degrade much more slowly. A PCM device may survive approximately 100 million write cycles. PCM lifetime is limited by mechanisms such as degradation due to GST thermal expansion during programming, metal (and other material) migration, and other mechanisms.","In the following description, numerous specific details are set forth. However, it is understood that embodiments of the invention may be practiced without these specific details. In other instances, well-known circuits, structures and techniques have not been shown in detail in order not to obscure the understanding of this description.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","In the following description and claims, the terms \u201ccoupled\u201d and \u201cconnected,\u201d along with their derivatives, may be used. It should be understood that these terms are not intended as synonyms for each other. \u201cCoupled\u201d is used to indicate that two or more elements, which may or may not be in direct physical or electrical contact with each other, co-operate or interact with each other. \u201cConnected\u201d is used to indicate the establishment of communication between two or more elements that are coupled with each other.","Bracketed text and blocks with dashed borders (e.g., large dashes, small dashes, dot-dash, dots) are sometimes used herein to illustrate optional operations\/components that add additional features to embodiments of the invention. However, such notation should not be taken to mean that these are the only options or optional operations\/components, and\/or that blocks with solid borders are not optional in certain embodiments of the invention.","Embodiments of the invention described below define platform configurations that enable hierarchical memory subsystem organizations for the use of NVRAM. The use of NVRAM in the memory hierarchy also enables new usages such as expanded boot space and mass storage implementations, as described in detail below.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 1","b":["100","130","100","100","130","130","130"]},"In one embodiment, NVRAM  can be configured to implement the roles in a typical platform storage hierarchy as one or more of the following: cache, system memory (also known as main memory, primary memory, executable memory), storage (also known as secondary storage and mass storage), and firmware memory (such as boot memory (also known as BIOS flash), Trusted Platform Module (TPM) memory, Gigabit Ethernet network integrity controller (NIC) for storing its media access control (MAC) address, and the like). Platform storage hierarchies with different roles are also contemplated and the application of NVRAM  is not limited to the roles described above.","NVRAM (e.g., NVRAM ) is distinguishable from other instruction and data memory\/storage technologies in terms of its characteristics and\/or its application in the platform storage hierarchy. For example, NVRAM is different from:\n\n","In one embodiment of the invention NVRAM has the following characteristics:\n\n","As mentioned above, in contrast to flash memory, which must be rewritten and erased a complete \u201cblock\u201d at a time, the level of granularity at which NVRAM is accessed in any given implementation may depend on the particular memory controller and the particular memory bus to which the NVRAM is coupled. For example, in some implementations where NVRAM  is used as system memory, NVRAM may be accessed at the granularity of a cache line (e.g., a 64-byte or 128-byte cache line), notwithstanding an inherent ability to be accessed at the granularity of a byte, because cache line is the level at which the memory subsystem accesses memory. Thus, when NVRAM is deployed within a memory subsystem, it may be accessed at the same level of granularity as the DRAM (e.g., the \u201cnear memory\u201d) used in the same memory subsystem. Even so, the level of granularity of access to the NVRAM by the memory controller and memory bus or other type of bus is smaller than that of the block size used by flash and the access size of the I\/O subsystem's controller and bus.","NVRAM  may be used as instruction and data storage that has sufficiently short access time requirements to cause little impact on the processors. Here, program instructions and data may be loaded into NVRAM  from deeper, flash\/magnetic\/optical mass storage  prior to being executed by the processors. Moreover, as described in detail below, NVRAM  may be placed on a memory bus and may communicate directly with a memory controller that, in turn, communicates directly with the processors.","The presence of the new memory technology for NVRAM  provides for a wealth of new possibilities. Although discussed at much greater length further below, some of these possibilities are quickly highlighted immediately below.","According to one possible implementation, NVRAM  acts as a total replacement or supplement for traditional DRAM technology in system memory. In one embodiment, NVRAM  represents the introduction of a second-level system memory (e.g., system memory is as a combination of DRAM  and some or all of NVRAM ). As such, the system memory may be viewed as having a near memory part NM A and a far memory part FM . It is appreciated that in different embodiments, a near memory can serve as a memory-side cache (e.g., near memory cache B), a scratch pad, and other roles that are different from the system memory. In the embodiments described herein, the NM A portion of NVRAM  serves only as system memory to simplify the discussion.","According to some embodiments, NVRAM  provides NVRAM storage, which acts as a total replacement or supplement for traditional mass storage, e.g., flash\/magnetic\/optical mass storage . The term \u201ctraditional mass storage\u201d or in the application refers to mass storage that is based on optical, magnetic and\/or flash technology, such as disk and flash memory. For simplicity of the discussion, flash\/magnetic\/optical mass storage  is also referred to as traditional mass storage . Thus, the non-volatile mass storage for computing system  may be implemented using NVRAM, flash memory, magnetic storage, or any combination thereof. In an embodiment where NVRAM storage  acts as a total replacement for traditional mass storage , it is not necessary to use storage drivers for block-addressable storage access. The removal of storage driver overhead from storage access can increase access speed and save power. In alternative embodiments where it is desired that NVRAM storage  appears to the OS and\/or applications as block-accessible and indistinguishable from traditional mass storage , emulated storage drivers can be used to expose block-accessible interfaces (e.g., Universal Serial Bus (USB) Bulk-Only Transfer (BOT) 1.0, Serial Advanced Technology Attachment (SATA) 3.0, and the like) to the software for accessing NVRAM storage . In some embodiments, the byte addressability of NVRAM  can be used by a lowest-level storage driver to move blocks of NVRAM storage  and emulate block accessible mass storage without incurring the cost of I\/O interfaces. An embodiment of utilizing the byte addressability of NVRAM  with a lowest-level storage driver will be described later in greater detail with reference to .","According to some embodiments, NVRAM  provides BIOS NVRAM  and TPM NVRAM , which act as a total replacement or supplement for firmware memory such as BIOS flash  and TPM flash . Firmware memory is commonly implemented with flash technology and commonly stores the initial instructions (e.g., BIOS) executed by a processor to initialize key system components during a boot process. Firmware memory can also store system persistent states used by a TPM  to protect sensitive system information (e.g., encryption keys). In one embodiment, the use of NVRAM  for firmware memory removes the need for third party flash parts to store code and data that are critical to the system operations.","The choice of memory and storage devices may depend on the type of platform on which the devices are used. For example, in a personal computer, tablet computer, notebook computer, mobile device (e.g., smartphone or PDA), the non-volatile mass storage may be implemented using NVRAM storage  alone, or using NVRAM storage  in combination with flash\/magnetic storage. In other implementations (e.g., large-scale servers), the non-volatile mass storage may be implemented using magnetic storage (e.g., hard drives) or any combination of magnetic storage, flash, and NVRAM storage . In such a case, computer system hardware and\/or software responsible for storage may implement various intelligent persistent storage allocation techniques to allocate blocks of persistent program code and data between the FM \/NVRAM storage  and traditional mass storage  in an efficient or otherwise useful manner. In some embodiments, NVRAM  may become the sole memory\/storage device off chip (i.e., off the processor chip). In some embodiments, instead of the off-chip DRAM , DRAM may be used to provide an on-chip cache (e.g., near memory cache B). These embodiments can be specifically relevant to very small platforms (e.g., smartphone or PDA), where multiple memory classes\/technologies may be cost prohibitive and more transistors (including storage) can be placed on chip.","The NVRAM  may incorporate \u201cwear leveling\u201d algorithms to account for the fact that the storage cells at the far memory level begin to wear out after too many write accesses. Since high cycle count blocks are most likely to wear out in this manner, wear leveling spreads writes across the far memory cells by swapping addresses of high cycle count blocks with low cycle count blocks. Note that most address swapping is typically transparent to the end user because it is handled by hardware, software (e.g., a low level driver or operating system), or a combination of the.","In one embodiment, NVRAM  can be implemented with a non-volatile random access memory (NVRAM) such as PCM or, more specifically, PCMS (also known as (PRAM or PCRAM), Ovonic Unified Memory (OUM), (CRAM). Other possible technology choices for far memory include, but are not limited to byte-addressable persistent memory (BPRAM), storage class memory (SCM), universal memory, Ge2Sb2Te5, Programmable metallization cell (PMC), Resistive memory (RRAM), RESET (amorphous) cell, SET (crystalline) cell, PCME, Ovshinsky, ferroelectric memory (also known as polymer memory and poly(N-vinylcarbazole)), ferromagnetic memory (also known as Spintronics, SPRAM (spin-transfer torque RAM), STRAM (spin tunneling RAM), Magnetoresistive, Magnetic memory, and Magnetic random access memory (MRAM)), and Semiconductor-oxide-nitride-oxide-semiconductor (SONOS, also know dielectric memory).","For convenience of explanation, most of the remainder of the application will sometimes refer to \u201cPCM\u201d or \u201cPCMS\u201d as the technology selection for NVRAM . As such, the terms NVRAM, PCM and PCMS may be used interchangeably in the following discussion. However it should be realized, as discussed above, that different technologies may also be utilized for NVRAM .","Continuing then with a discussion of the system of , in some embodiments, the architecture of computer system  may include multiple processors, although a single processor  is illustrated in  for simplicity. Processor  may be any type of data processor including a general purpose or special purpose central processing unit (CPU), an application-specific integrated circuit (ASIC) or a digital signal processor (DSP). For example, processor  may be a general-purpose processor, such as a Core\u2122 i3, i5, i7, 2 Duo and Quad, Xeon\u2122, or Itanium\u2122 processor, all of which are available from Intel Corporation, of Santa Clara, Calif. Alternatively, processor  may be from another company, such as ARM Holdings, Ltd, of Sunnyvale, Calif., MIPS Technologies of Sunnyvale, Calif., etc. Processor  may be a special-purpose processor, such as, for example, a network or communication processor, compression engine, graphics processor, co-processor, embedded processor, or the like. Processor  may be implemented on one or more chips included within one or more packages. Processor  may be a part of and\/or may be implemented on one or more substrates using any of a number of process technologies, such as, for example, BiCMOS, CMOS, or NMOS.","In one embodiment, the processor  includes an integrated graphics unit  which includes logic for executing graphics commands such as 3D or 2D graphics commands. While the embodiments of the invention are not limited to any particular integrated graphics unit , in one embodiment, the graphics unit  is capable of executing industry standard graphics commands such as those specified by the Open GL and\/or Direct X application programming interfaces (APIs) (e.g., OpenGL 4.1 and Direct X 11).","The processor  may also include one or more cores , although a single core  is illustrated in , again, for the sake of clarity. In many embodiments, core  includes internal functional blocks such as one or more execution units, retirement units, a set of general purpose and specific registers, etc. If core  is multi-threaded or hyper-threaded, then each hardware thread may be considered as a \u201clogical\u201d core as well. The cores  may be homogenous or heterogeneous in terms of architecture and\/or instruction set. For example, some of the cores may be in order while others are out-of-order. As another example, two or more of the cores may be capable of executing the same instruction set, while others may be capable of executing only a subset of that instruction set or a different instruction set.","The processor  may also include one or more caches, such as cache  which may be implemented as a SRAM and\/or a DRAM. In many embodiments that are not shown, additional caches other than cache  are implemented so that multiple levels of cache exist between the execution units in the core(s)  and memory devices A and . For example, the set of shared cache units may include an upper-level cache, such as a level 1 (L1) cache, mid-level caches, such as level 2 (L2), level 3 (L3), level 4 (L4), or other levels of cache, a last level cache (LLC), and\/or different combinations thereof. In different embodiments, cache  may be apportioned in different ways and may be one of many different sizes in different embodiments. For example, cache  may be an 8 megabyte (MB) cache, a 16 MB cache, etc. Additionally, in different embodiments the cache may be a direct mapped cache, a fully associative cache, a multi-way set-associative cache, or a cache with another type of mapping. In other embodiments that include multiple cores, cache  may include one large portion shared among all cores or may be divided into several separately functional slices (e.g., one slice for each core). Cache  may also include one portion shared among all cores and several other portions that are separate functional slices per core. In one embodiment, cache  may include a DRAM near memory cache B.","The processor  may also include a home agent  which includes those components coordinating and operating core(s) . The home agent unit  may include, for example, a power control unit (PCU) and a display unit. The PCU may be or include logic and components needed for regulating the power state of the core(s)  and the integrated graphics unit . The display unit is for driving one or more externally connected displays.","In some embodiments, processor  includes an integrated memory controller (IMC)  to provide an interface for communicating with a memory and storage subsystem . More specifically, in one embodiment, IMC  contains logic necessary for reading from, writing to and refreshing DRAM device . IMC  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","In some embodiments, processor  includes an I\/O subsystem  coupled to IMC . I\/O subsystem  enables communication between processor  and the following serial or parallel I\/O devices: one or more networks  (such as a Local Area Network, Wide Area Network or the Internet), storage I\/O device (such as traditional mass storage , BIOS flash , TPM flash ) and one or more non-storage I\/O devices  (such as display, keyboard, speaker, and the like). I\/O subsystem  may include a platform controller hub (PCH) (not shown) that further includes several I\/O adapters  and other I\/O circuitry to provide access to the storage and non-storage I\/O devices and networks. To accomplish this, I\/O subsystem  may have at least one integrated I\/O adapter  for each I\/O protocol utilized. I\/O subsystem  can be on the same chip as processor , or on a separate chip and\/or package connected to processor .","I\/O adapters  translate a host communication protocol utilized within the processor  to a protocol compatible with particular I\/O devices. For traditional mass storage , some of the protocols that I\/O adapters  may translate include Peripheral Component Interconnect (PCI)-Express 3.0, Universal Serial Bus (USB) 3.0, Serial Advanced Technology Attachment (SATA) 3.0, Small Computer System Interface (SCSI), Redundant Array of Inexpensive Disks (RAID) and 1394 \u201cFirewire,\u201d among others. For BIOS flash , some of the protocols that I\/O adapters  may translate include Serial Peripheral Interface (SPI), Microwire, among others. Additionally, there may be one or more wireless protocol I\/O adapters. Examples of wireless protocols are Bluetooth 4.0, IEEE 802.11-based wireless protocols, and cellular protocols, among others.","In some embodiments, I\/O subsystem  also includes a Management Engine (ME) , which is a microprocessor that allows a system administrator to monitor, maintain, update, upgrade, and repair computer system . In one embodiment, a system administrator can remotely configure computer system  through ME  via networks . In one embodiment, the configuration can be stored in a decode table  within processor . Decode table  can be read by IMC  and I\/O subsystem , which then decide where a data access request should be directed.","In some embodiments, processor  includes a Trusted Platform Module (TPM)  to control access to system persistent states, such as secure data, encryption keys, platform configuration information and the like. In one embodiment, these system persistent states are stored in a TPM NVRAM , which can be implemented with PCM-based memory such as PCMS. In the embodiment shown in , TPM NVRAM  is part of NVRAM .","In one embodiment, TPM  is a secure micro-controller with cryptographic functionalities. TPM  has a number of trust-related capabilities; e.g., a \u201cseal\u201d capability for ensuring that data protected by a TPM is only available for the same TPM. TPM  can protect data and keys (e.g., secrets) using its encryption capabilities. In one embodiment, TPM  has a unique and secret RSA key (which is generated based on the RSA algorithm developed by Ron Rivest, Adi Shamir and Leonard Adleman), which allows it to authenticate hardware devices and platforms. For example, TPM  can verify that a system seeking access to data stored in computer system  is the expected system. TPM  is also capable of reporting the integrity of the platform (e.g., computer system ). This allows an external resource (e.g., a server on a network) to determine the trustworthiness of the platform but does not prevent access to the platform by the user.","It should be understood that a computer system can utilize NVRAM  for system memory, mass storage, firmware memory and\/or other memory and storage purposes even though its processor does not have all of the above-described components of processor , or has more components than processor .","In one embodiment, computer system  includes a NVRAM controller  to control data access to NVRAM . NVRAM controller  is coupled to IMC  and I\/O subsystem . NVRAM controller  can read the configuration data from decode table , or alternatively, can rely on the decoding results passed from IMC  and I\/O subsystem . In an embodiment where NVRAM  is implemented with PCMS, NVRAM controller  is a PCMS controller that performs byte-level access with protocols consistent with the PCMS technology. Although IMC  and NVRAM controller  can be two discrete controllers (as shown in  with a dotted line separating the two controllers), in some embodiments these two controllers can be implemented as one combined controller to control the access to memory and storage.","In , NVRAM controller  is shown connected to FM , NVRAM mass storage  and BIOS NVRAM  using three separate lines. This does not necessarily mean, however, that there are three separate physical buses or communication channels connecting NVRAM controller  to these portions of the NVRAM . Rather, in some embodiments, a common memory bus or other type of bus is used to communicatively couple the NVRAM controller  to the FM , NVRAM mass storage , and BIOS NVRAM . For example, in one embodiment, the three lines in  represent a DDR bus, such as a memory bus (e.g., a DDR3, DDR4, etc.) over which NVRAM controller  implements a transactional protocol to communicate with NVRAM . NVRAM controller  may also communicate with NVRAM  over a bus supporting a native transactional protocol such as a PCI express (PCI-E) bus, desktop management interface (DMI) bus, or any other type of bus utilizing a transactional protocol.",{"@attributes":{"id":"p-0059","num":"0072"},"figref":["FIG. 2","FIG. 1","FIG. 1"],"b":["200","130","152","162","172","200","210","280","280","140","130","130","142","150","160","170","210","110","238","138","130","152","162","172"]},"Configurable Partitioning of the NVRAM","As described before, NVRAM  can be partitioned into multiple partitions that have different roles in a platform storage hierarchy. As discussed above, the term \u201cplatform storage hierarchy\u201d refers to cache, system memory, mass storage, and firmware memory that serve different purposes (e.g., BIOS storage and TPM storage). In one embodiment, the means by which access is steered to different partitions of NVRAM  is via a decode logic. For example, at either manufacturing time or in the field, computer system  can program decode table  to mark different regions of NVRAM  as system memory, mass storage, firmware, among others.","In the embodiment of , NVRAM  is partitioned into FM , NVRAM storage , BIOS NVRAM  and TPM NVRAM . The address range of each partition can be defined in decode table . In one embodiment, when IMC  receives an access request, the target address of the request is decoded to reveal whether the request is directed toward memory or I\/O. If it is a memory request, IMC  further determines from the target address whether the request is directed to NM A or FM . For FM  access, IMC  forwards the request to NVRAM controller . IMC  passes the request to the I\/O subsystem  if this request is directed to I\/O (e.g., non-storage and storage I\/O devices). I\/O subsystem  further decodes the address to determine whether the address points to NVRAM storage , BIOS NVRAM , or other non-storage and storage I\/O devices. If this address points to NVRAM storage  or BIOS NVRAM , I\/O subsystem  forwards the request to NVRAM controller . If this address points to TPM NVRAM , I\/O subsystem  passes the request to TPM  to perform secured access. In one embodiment, each request forwarded to NVRAM controller  is accompanied with an attribute (also known as a \u201ctransaction type\u201d) to indicate the type of access. In one embodiment, NVRAM controller  may emulate the access protocol for the requested access type, such that the rest of the platform remains unaware of the multiple roles performed by NVRAM  in the platform storage hierarchy. In alternative embodiments, NVRAM controller  may perform memory access to NVRAM  regardless of which transaction type it is. It is understood that the decode path can be different from what is described above. For example, IMC  may decode the target address of an access request and determine whether it is directed to NVRAM . If it is directed to NVRAM , IMC  generates an attribute according to decode table . Based on the attribute, IMC  then forwards the request to appropriate downstream logic (e.g., NVRAM controller  and I\/O subsystem ) to perform the requested data access. In yet another embodiment, NVRAM controller  may decode the target address if the corresponding attribute is not passed on from the upstream logic (e.g., IMC  and I\/O subsystem ). Other decode paths may be implemented.",{"@attributes":{"id":"p-0062","num":"0075"},"figref":["FIG. 3","FIG. 3"],"b":["330","130","113","320","330","130","142","150","160","170","330","130","133","330"]},"In one embodiment, decode logic  decodes input addresses based on the configuration data stored in decode table . In one embodiment, decode table  stores an attribute , a base address  and a length  for each of the partitions in NVRAM . Decode table  can be built by the BIOS at boot time. For example, the BIOS can read the configuration data stored in control status registers (CSRs)  at boot time. CSRs  may include a range (e.g., a size) for each partition to be configured in NVRAM . The BIOS then builds decode table  accordingly.","It should be noted that decode logic  is a logical representation of the decoding operations performed within the platform (e.g., computer system  of  or computer system  of ). The hardware that implements decode logic  may reside in a single function unit (e.g., IMC ) or in multiple function units (e.g., any combination of IMC , I\/O subsystem  and\/or NVRAM controller ). Similarly, translation logic  may be implemented by a single function unit (e.g., IMC ), by multiple function units (e.g., any combination of IMC , I\/O subsystem  and\/or NVRAM controller ), or by a combination of software and hardware. Decode logic  and\/or translation logic  may also reside outside of and coupled to IMC , I\/O subsystem  and NVRAM controller . For simplicity of illustration, the embodiments of  show that each of IMC , I\/O subsystem  and NVRAM controller  has a connection to decode table  to indicate the possibility that all of them may read from decode table  to perform the function of decode logic . However, it should be understood that in alternative embodiments, only IMC  is, or IMC  and I\/O subsystem  are, connected to decode table  to perform the function of decode logic .","In one embodiment, CSRs  can be implemented by hardware fuses (e.g., programmable read-only memory (PROM) that is programmable only once), re-programmable ROM (e.g., electrically-erasable programmable ROM (EEPROM)), or other programmable hardware. In an embodiment where decode table  is re-programmable, those address ranges in decode table  can be remotely programmed by an authorized server as described in the embodiment of .",{"@attributes":{"id":"p-0066","num":"0079"},"figref":["FIG. 4","FIG. 4","FIG. 1","FIG. 2","FIGS. 1 and 2","FIG. 4"],"b":"400"},"Referring to , in one embodiment, computer system  requests configuration data from an authorized server for configuring the partitions with NVRAM  via a network connection (block ). The authorized server may be controlled or owned by a manufacturer of computer system , a third-party authority, or any authority that holds the rights to configure the NVRAM . Via the network connection, computer system  (e.g., ME ) can send its credentials (e.g., encryption keys, which are securely stored in TMP NVRAM ) to the authorized server (block ). After the authorized server authenticates computer system , it sends back a signed message including the requested configuration data (block ). Upon receiving the signed message, MC  can set CSRs  according to the received address ranges (block ), such that decode table  can be programmed at boot time. Computer system  then reboots (block ). During boot time, the BIOS of computer system  programs decode table  (block ). The BIOS also propagates the configuration to the OS; e.g., the BIOS can build a number of tables that contains the configuration data for OS to read (block ).","After computer system  is fully booted up and upon receipt of a data access request with an NVRAM physical address, decode logic  decodes the address indicated in the request based on the configuration data in decode table  (block ). Decode logic  generates an attribute indicating one of the partitions in NVRAM  (block ). Based on the attribute, decode logic  forwards the request to appropriate downstream logic (e.g., I\/O adaptors , TPM , and the like) (block ). The request may be forwarded with a transaction type indicating an attribute of the NVRAM partition. In one embodiment, the downstream logic can determine the appropriate protocol for accessing the partition based on the attribute.","In one embodiment, one of these tables created at block  is an affinity table, which stores a logical distance for each underlying memory device. The affinity table allows kernel-level OS code to differentiate between different portions of the system memory that are implemented with different technologies, such as DRAM (NM A) and NVRAM (FM ), and to appropriate OS page migration policy accordingly. For example, NM A can be used for frequently accessed data to absorb some of the writes during regular operation of the computer system .","In one embodiment, the affinity table includes a logical distance for a range of memory addresses, where the logical distance indicates an actual physical distance, a domain, an access speed\/time, or any other metric to represent an access time or distance of a local memory. Based on the information in the affinity table, the OS can direct memory accesses to different locations of memories. For example, an OS can make thread scheduling decisions and resource allocation to operations based on the logical distance of a local memory. Numerous considerations, such as the time critical nature of the operation, may be used to determine which local memory to utilize. For example, an operation that is extremely time-critical can be scheduled to utilize a DRAM (NM A), as it is represented in the affinity table by a shorter logical distance than FM A. In the alternative, a thread that is to run in the background, which is not time intensive, can be scheduled to use FM A, to ensure that NM  is available for other operations. Other considerations such as the size of local memory, the type of thread or operation to be executed or performed, or any other known consideration for choosing a memory based on access distance or speed that may be used in determining which local memory to utilize.","Removing Storage Driver Overhead in Storage Access","As described above, NVRAM  is non-volatile and randomly accessible. It can be accessed at the granularity of a byte and its access latency is close to today's volatile RAM. As this non-volatile memory offers high capacities closer to traditional storage media, it can replace traditional I\/O attached non-volatile mass storage devices in the platform.","As shown in , the use of NVRAM  for both system memory (e.g., FM ) and NVRAM storage  can blur the line between the roles of these two different tiers in the platform storage hierarchy. Since both FM  and NVRAM storage  reside in the same NVRAM , they can be viewed as one continuous partition and can be accessed in the same way via the same memory interconnects. Thus, the use of NVRAM storage  can remove the burden of traditional I\/O data access. That is, I\/O protocols such as SATA, PCI-E, and the like, are no longer necessary for storage access. As a result, in some embodiments, NVRAM storage  can be accessed without a storage driver performing I\/O operations, and instead using CPU memory instructions to copy from storage to memory buffers, thus emulating block access for the OS and application software. Alternately, the OS file system can be aware of the memory addressable storage (i.e., NVRAM storage ), and directly map the NVRAM storage  address space into the application address space. This saves the cost of the copying and the amount of memory used in the system. NVRAM storage  is herein referred to as \u201cmemory addressable,\u201d because it is directly addressable in the physical memory address space and all of the instructions that use memory addresses as oprands will work with the addresses of NVRAM storage .","However, legacy software (e.g., OS and applications) may still operate on the assumption that a storage driver exists in the computer system to perform block access. For example, typical legacy operating systems consider data that is in the mass storage but not in the system memory as non-resident, and would trigger a page fault when that data is accessed. A page fault handler then signals the storage driver to bring the data into the system memory. This can be handled in the storage driver by emulating block storage. Alternately, in an OS with a file system aware of the memory addressable storage, page fault handling may be memory-map operation instead of a memory copy or I\/O operations.","The benefits of removing the I\/O interface and I\/O controllers, as well as the reduction of access cost, generally outweigh the cost of software modification due to power saving and increase of speed in storage access. Embodiments of the invention use the PCMS as high-performance storage in the platform, taking advantage of its properties of low power, high capacity, non-volatility and memory mode. Embodiments of the invention remove the traditional storage stack I\/O path and make the storage addressable and cacheable by a processor to achieve fastest performance at lowest power.","Embodiments of the invention provide an interface between software and storage (implemented by NVRAM such as PCMS) at a number of levels, which will be described below with reference to . Software (e.g., the OS and applications) and hardware operations shown in these figures can be executed by the embodiment of processor  and  of , as well as embodiments other than those shown in these figures. Additionally, the embodiments discussed with reference to  can perform different operations than those discussed with reference to the diagram of .",{"@attributes":{"id":"p-0076","num":"0089"},"figref":["FIG. 5","FIG. 2"],"b":["130","131","130","131","513","513","131","200","513","512","130"]},"In the embodiment shown in , when OS  initiates a storage I\/O (e.g., in response to a page fault to bring in a page that is not resident in the system memory such as NM A and FM ), it calls storage driver  and provides a memory address, a storage address, a length and an operation type (e.g., read or write) (block ). Storage driver  communicates these parameters to IMC  using an interface different from standard I\/O interfaces\/protocols such as SATA 3.0, PCI-E 3.0, and the like (block ). The memory address indicates a memory location (in either NM A or FM ) that is to swap pages with the storage location specified by the storage address. IMC  translates the storage address into a physical address in NVRAM  (block ). NVRAM controller  (or IMC  if it implements the protocol for accessing NVRAM ) then copies data from the memory address to the storage address (if the operation is read), or copies data from the storage address to the memory address (if the operation is write) (block ).","In one embodiment, the memory address falls within the address space of FM . In this embodiment, IMC  also translates the memory address into a physical address in NVRAM . NVRAM controller  (or IMC  if IMC can directly access NVRAM ) then copies data between the memory address and the storage address by performing a memory-to-memory copy within the same NVRAM. In another embodiment where the memory address falls within the address space of NM A, the copy involves a memory-to-memory copy between two memory devices (e.g., NVRAM  and DRAM ). After the copy is completed, IMC  signals storage driver  (block ), which in turn signals OS  indicating that the I\/O is completed.",{"@attributes":{"id":"p-0079","num":"0092"},"figref":["FIG. 6A","FIG. 2","FIG. 7","FIG. 6A"],"b":["680","680","150","650","650","660","650","130","162","172","650"]},{"@attributes":{"id":"p-0080","num":"0093"},"figref":["FIG. 7","FIG. 6A"],"b":["130","680","142","712","650","712","650","650","713","712","712","130"]},"In the embodiment shown in , when OS  initiates a disk I\/O (e.g., in response to a page fault to bring in a page that is not resident in the system memory such as NM A and FM  of ), it calls the RAM disk driver  and provides a memory address, a storage address, a length and an operation type (e.g., read or write) (block ). The memory address indicates a memory location (in either NM A or FM ) that is to swap pages with the storage location specified by the storage address. IMC  translates the storage address into a physical address in NVRAM  (block ). NVRAM controller  (or IMC  if it implements the protocol for accessing NVRAM ) then copies data from the memory address to the storage address (if the operation is read), or copies data from the storage address to the memory address (if the operation is write) (block ).","In one embodiment, the memory address falls within the address space of FM . In this embodiment, RAM disk driver  also translates the memory address into a physical address in NVRAM . NVRAM controller  (or IMC  if IMC can directly access NVRAM ) then copies data between the memory address and the storage address by performing a memory-to-memory copy within the same NVRAM device. In another embodiment where the memory address falls within the address space of NM A (which acts as system memory), the copy involves a memory-to-memory copy between two memory devices (e.g., NVRAM  and DRAM device ). After the copy is completed, IMC  signals RAM disk driver  (block ), which in turn signals OS  indicating that the I\/O is completed.",{"@attributes":{"id":"p-0083","num":"0096"},"figref":["FIGS. 8A and 8B","FIG. 6B","FIG. 6B","FIG. 6B","FIG. 8B","FIG. 6B"],"b":["130","682","130","850","142","660","130","162","172"]},"In a memory-mapped file system, the files used by an application  (and are, therefore, in a virtual address space  allocated to application ) can be directly mapped to NVRAM device address space . Each address location in NVRAM device address space  is directly-addressable by the processor, and is, therefore, \u201cresident\u201d in memory. There is no need to trigger a page fault to bring in a page from storage, because OS  understands that the storage is the same as the memory. In this embodiment, OS  needs modification to utilize NVRAM  but application  can be used without modification. By contrast, in a non-memory-mapped file system, each read\/write by an application is a system call. If the read\/write is directed to a page not already in the memory, the access to that page will involve storage I\/O access performed by a storage driver, which is much slower than memory access.",{"@attributes":{"id":"p-0085","num":"0098"},"figref":["FIG. 8","FIG. 8A","FIGS. 8A and 8B"],"b":["810","821","860","850","821","841","870","131","131","132","841","130","830","880","850","810","810","821","822","821","820","830","130","830"]},{"@attributes":{"id":"p-0086","num":"0099"},"figref":["FIG. 9","FIG. 6B"],"b":["130","682","910","130","910","930","910","920","130","910","130"]},"The techniques shown in the diagrams of  can be implemented using instructions and data stored on non-transitory machine-readable or computer-readable media, such as non-transitory machine-readable or computer-readable storage media (e.g., magnetic disks; optical disks; random access memory; read-only memory; flash memory devices; and phase-change memory).","Embodiments of the invention may also be provided as a computer program product which may include a non-transitory machine-readable medium having stored thereon instructions which may be used to program a computer (or other electronic device) to perform a process. The non-transitory machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, magnet or optical cards, propagation media or other type of media\/machine-readable medium suitable for storing electronic instructions. Embodiments of the invention may also be downloaded as a computer program product, wherein the program may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation medium via a communication link (e.g., a modem or network connection).","While the invention has been described in terms of several embodiments, those skilled in the art will recognize that the invention is not limited to the embodiments described, can be practiced with modification and alteration within the spirit and scope of the appended claims. The description is thus to be regarded as illustrative instead of limiting."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by referring to the following description and accompanying drawings that are used to illustrate embodiments of the invention. In the drawings:",{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 5","FIG. 2"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 6A"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 8B","FIG. 8A"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
