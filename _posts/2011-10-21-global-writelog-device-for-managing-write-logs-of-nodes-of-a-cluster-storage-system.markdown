---
title: Global write-log device for managing write logs of nodes of a cluster storage system
abstract: A cluster system comprises a plurality of nodes that provides data-access service to a shared storage, each node having at least one failover partner node for taking over services of a node if the node fails. Each node may produce write logs for the shared storage and periodically send write logs at predetermined time intervals to a global device which stores write logs from each node. The global device may detect failure of a node by monitoring time intervals of when write logs are received from each node. Upon detection of a node failure, the global device may provide the write logs of the failed node to one or more partner nodes for performing the write logs on the shared storage. Write logs may be transmitted only between nodes and the global device to reduce data exchanges between nodes and conserving I/O resources of the nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08261125&OS=08261125&RS=08261125
owner: Net App. Inc.
number: 08261125
owner_city: Sunnyvale
owner_country: US
publication_date: 20111021
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATIONS","FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This patent application claims benefit to and is a continuation of the U.S. patent application entitled \u201cGlobal Write-Log Device for Managing Write Logs of Nodes of a Cluster Storage System,\u201d having Ser. No. 12\/432,404, filed on Apr. 29, 2009 now U.S. Pat. No. 8,069,366.","The present invention relates to networked storage systems, and particularly, to managing write logs of nodes of a cluster storage system using a global write-log device.","A storage system typically comprises one or more storage devices into which information may be entered, and from which information may be obtained, as desired. The storage system includes a storage operating system that functionally organizes the system by, inter alia, invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including, but not limited to, a network-attached storage environment, a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array, wherein the term \u201cdisk\u201d commonly describes a self-contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive (HDD) or direct access storage device (DASD).","The storage operating system of the storage system may implement a high-level module, such as a file system, to logically organize the information stored on volumes as a hierarchical structure of data containers, such as files and logical units (LUs). For example, each \u201con-disk\u201d file may be implemented as set of data structures, i.e., disk blocks, configured to store information, such as the actual data for the file. These data blocks are organized within a volume block number (vbn) space that is maintained by the file system. The file system may also assign each data block in the file a corresponding \u201cfile offset\u201d or file block number (fbn). The file system typically assigns sequences of fbns on a per-file basis, whereas vbns are assigned over a larger volume address space. The file system organizes the data blocks within the vbn space as a \u201clogical volume\u201d; each logical volume may be, although is not necessarily, associated with its own file system.","A known type of file system is a write-anywhere file system that does not overwrite data on disks. If a data block is retrieved (read) from disk into a memory of the storage system and \u201cdirtied\u201d (i.e., updated or modified) with new data, the data block is thereafter stored (written) to a new location on disk to optimize write performance. A write-anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations, particularly for sequential read operations, directed to the disks. An example of a write-anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout (WAFL\u00ae) file system available from NetApp, Inc. Sunnyvale, Calif.","The storage system may be further configured to operate according to a client\/server model of information delivery to thereby allow many clients to access data containers stored on the system. In this model, the client may comprise an application, such as a database application, executing on a computer that \u201cconnects\u201d to the storage system over a computer network, such as a point-to-point link, shared local area network (LAN), wide area network (WAN), or virtual private network (VPN) implemented over a public network such as the Internet. Each client may request the services of the storage system by issuing access requests (read\/write requests) as file-based and block-based protocol messages (in the form of packets) to the system over the network.","It is advantageous for the services and data provided by a storage system, such as a storage node, to be available for access to the greatest degree possible. Accordingly, some storage systems provide storage system nodes interconnected as a cluster, with a first storage system node being clustered with a second storage system node to provide high availability of data access. Each node of the cluster may include (i) a storage server (referred to as a \u201cD-module\u201d) adapted to service particular aggregate(s) or volume(s) and (ii) a multi-protocol engine (referred to as an \u201cN-module\u201d) adapted to redirect the data access requests to any storage server of the cluster. In the illustrative embodiment, the storage server of each node is embodied as a disk element (D-module) and the multi-protocol engine is embodied as a network element (N-module). The N-module receives a multi-protocol data access request from a client, converts that access request into a cluster fabric (CF) message and redirects the message to an appropriate D-module of the cluster.","The nodes of the cluster may be configured to communicate with one another to act collectively to increase performance or to offset any single node failure within the cluster. Each node in the cluster may have a predetermined failover \u201cpartner\u201d node. When a node failure occurs (where the failed node is no longer capable of processing access requests for clients), the partner node of the failed node may \u201ctakeover\u201d the data services of the failed node. In doing so, access requests sent to the failed node may be re-directed to the partner node for processing. As such, the cluster may be configured such that a partner node may take over the work load of a failed node. A node may be referred to as a local\/primary node when referring to a current node being discussed, whereas a remote\/partner node refers to a predetermined failover partner node of the local\/primary node. As used herein, various components residing on the primary node may likewise be referred to as a local\/primary component (e.g., local memory, local write-log layer, etc.) and various components residing on a remote node may likewise be referred to as a remote component (e.g., remote memory, remote write-log layer, etc.).","The shared storage may comprise a plurality of aggregates, where each aggregate may be configured to contain one or more volumes. The volumes may be configured to store content of data containers, such as files and logical units, served by the cluster in response to multi-protocol data access requests issued by clients. Each node of a cluster may \u201cown\u201d an assigned predetermined set of aggregates (aggregate set) within the shared storage, whereby only the assigned node is configured to service data for the predetermined aggregate set during normal operating conditions (when no node has failed). However, upon failure of a node, \u201cownership\u201d of the entire aggregate set of the failed node may be transferred to the partner node (so that servicing of data for the entire aggregate set of the failed node may be taken over by the partner node). As such, a cluster may be configured such that a partner node may takeover the work load of a failed primary node where the partner node assumes the tasks of processing and handling any data access requests normally processed by the failed primary node.","Each node of a cluster provides data-access service to clients by providing access to shared storage (comprising a set of storage devices). Typically, clients will connect with a node of the cluster for data-access sessions with the node. During a data-access session with a node, a client may submit access requests (read\/write requests) that are received and performed by the node. For the received write requests, the node may produce write logs that represent the write requests and locally store the write logs to a local memory device (from which, the node may at a later time perform the write logs on the storage devices). To ensure data consistency, the write logs of a primary node may also be periodically sent\/transmitted to the partner nodes in the cluster for remote storage at the partner nodes. As such, if the local\/primary node fails, a remote\/partner node will have a copy of the write logs and will still be able to perform the write logs on the shared storage.","However, as cluster storage systems become larger and contain more nodes, whereby each primary node in the cluster has more partner nodes, the transmission and remote storage of write logs may consume valuable storage space and I\/O resources of the nodes in the cluster. For example, if a cluster has four nodes (whereby each primary node has three failover partner nodes), each node may locally store its own write logs and the write logs of each of the three partner nodes. As such, as the number of nodes in the cluster increases, the amount of storage space at each node required to store the write logs of the partner nodes increases as well. Also, since write logs are periodically sent to each partner node, the number of write log data exchanges (sending and receiving) between the nodes of a cluster increases with each node added to the cluster. This may consume significant I\/O resources of the nodes in the cluster. As such, an improved method for managing write logs of a cluster storage system is needed.","In some embodiments, a cluster storage system comprises a plurality of nodes that access a set of storage devices (shared storage), each node having one or more predetermined failover partner nodes configured to takeover the workload of the node if the node fails. Each node may receive (from clients) write requests for the shared storage, produce write logs representing the write requests, and periodically send the write logs to a global write-log device. The global write-log device may be connected with each node in the cluster and receive and store write logs from each node. Upon detection of a failure of a node, the global write-log device may provide the write logs of the failed node to one or more failover partner nodes for performing the write logs on the shared storage. In some embodiments, the write logs may be transmitted only between the nodes and the global write-log device and is not transmitted between the nodes, thus reducing data exchanges between the nodes, and thus conserving I\/O resources (receive\/send operations) of the nodes. Also, in some embodiments, only upon failure of a node in the cluster storage system does a partner node receive or read write logs from the global write-log device. In some embodiments, the write logs of each node may be stored in the global write-log device rather than on partner nodes, thus reducing the amount of storage space in the nodes needed to store write logs.","In some embodiments, each node may be configured for periodically communicating\/sending accumulated write logs to the global write-log device at time intervals determined by a predetermined time interval. The global write-log device may detect failure of a node by monitoring the time intervals of when write logs are received from each node in the cluster. The global write-log device may determine failure of a node if it has not received write logs from the node for a longer time period than the predetermined time interval (since the last time the global write-log device received write logs from the node). In some embodiments, the global write-log device may determine failure of a node if it has not received write logs from the node within a predetermined time threshold period that is approximately equal to or greater than the predetermined time interval to provide a buffer period before a node is determined as failed. By providing a centralized global device for managing write-logs of all nodes of the cluster, a new method of detecting failure of a node is also provided through monitoring of the write-logs received by the nodes. As such, the cluster storage system may forego other methods of node failure detection (e.g., use of heartbeat signal passed between the nodes, as discussed below).","In some embodiments, the global write-log device is external to each node in the cluster and is configured to operate independently from each node. The global write-log device may be configured for maintaining operation upon failure of any node or all nodes in the cluster storage system. In some embodiments, each node directly interacts with the global write-log device without requiring any operations of another node. As such, even if one or more nodes fail in the cluster, the global write-log device can still manage write logs of the cluster. In some embodiments, the global write-log device is a device dedicated to the management of the write logs of the nodes and is not configured to provide the functions of a node to provide data-access service to the shared storage. As such, the global write-log device may comprise a dedicated device that is less prone to operational failure than a node.","In some embodiments, the global write-log device may comprise a memory device that provides a storage space. The global write-log device may sub-dividing the storage space into at least one logical storage partition, each storage partition being assigned to a particular node in the cluster for storing write logs received from the particular node. Upon detection of failure of a node, the global write-log device may provide the write logs from the storage partition assigned to the primary node to at least one partner node of the failed node. For example, upon detection of the failure of the node, the global write-log device may send the write logs from the assigned partition to the at least one partner node or may allow access to the assigned partition to the at least one partner node for reading the write logs from the assigned partition.","In some embodiments, the global write-log device may comprise a global write-log management (GWLM) engine configured for performing the write-log management operations described herein. The GWLM engine may use and maintain write-log data structures for performing the write-log management operations described herein. In some embodiments, the write-log data structures may include an aggregate failover data structure (AFDS) that specifies which partner node is to take over which aggregates owned by a failed node. In these embodiments, a primary node may own\/service an aggregate set in the shared storage and produce write logs for performing on the aggregate set. The global primary node may receive and store the write logs for the aggregate set from the primary node. The aggregate set may comprise a first aggregate sub-set and a second aggregate sub-set. The AFDS may specify a first partner node to take over the first aggregate sub-set and a second partner node to take over the second aggregate sub-set upon failure of the primary node. As such, upon detection of failure of the primary node, the GWLM engine provides the write logs of the failed node to the first and second partner nodes. The first partner node then receives and performs write logs only for the first aggregate sub-set and the second partner node receives and performs write logs only for the second aggregate sub-set.","In some embodiments, a cluster storage system comprises a shared storage and a plurality of sites that access the shared storage. Each site may comprise a plurality of nodes connected with a global write-log device, the global write-log device receiving write logs from each node at the site. The global write-log devices of the different sites may be connected for transmitting write logs between the global write-log devices. For example, a first global write-log device at a first site may transmit its write logs to a second global write-log device at a second site for remote storage of its write logs. Upon failure of a primary node at the first site, the second global write-log device may then provide the write logs of the primary node to a partner node at the second site, the partner node being configured to take over the data-access services of the primary node upon failure of the primary node. As such, by replicating write logs across different sites, failover protection of the primary node may be provided by a node at the first site (referred to as \u201clocal failover protection\u201d) as well as by a node at the second site (referred to as \u201cremote failover protection\u201d). As the sites may be geographically located at far distances from each other, a single connection between each global write-log device at each site may be more feasible than multiple connections between a global write-log device and multiple nodes located at far distances from the global write-log device.","As described above, by providing a centralized global write-log device for managing write-logs of all nodes of a cluster, data exchanges between nodes may be reduced data exchanges between the nodes (thus conserving I\/O resources of the nodes). For example, in normal operation, write logs may be sent from nodes to only the global write-log device and only upon failure of a node in the cluster storage system does a node receive or read write logs from the global write-log device. Also, the write logs of the nodes may be stored in the global write-log device rather than on the nodes, thus reducing the amount of storage space in the nodes needed to store write logs. The global write-log device further provides a new method of detecting node failure by providing centralized monitoring of the write-logs received by the nodes. Global write-log devices connected between distant storage sites may also be used to provide local or remote protection for node failures.","The disclosure of U.S. patent application entitled \u201cGlobal Write-Log Device for Managing Write Logs of Nodes of a Cluster Storage System,\u201d having Ser. No. 12\/432,404, filed on Apr. 29, 2009, is expressly incorporated herein by reference.","In the following description, numerous details are set forth for purpose of explanation. However, one of ordinary skill in the art will realize that the embodiments described herein may be practiced without the use of these specific details. In other instances, well-known structures and devices are shown in block diagram form in order not to obscure the description with unnecessary detail.","The description that follows is divided into seven sections. Section I describes a cluster environment in which some embodiments operate. Section II describes a storage operating system having a write-log module for producing write logs of received write requests. Section III describes a shared storage of the cluster. Section IV describes taking over of a node on a per aggregate basis. Section V describes managing write-logs of nodes of a cluster using a global write-log device. Section VI describes using global write-log devices at multiple storage sites. Section VII describes data structures and components of a global write-log device.","I. Cluster Environment",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIGS. 1A-B","b":["100","100","200","135","200","100"]},"As shown in , each node  may be organized as a network element (N-module ) and a disk element (D-module ). The N-module  includes functionality that enables the node  to connect to clients  over a computer network , while each D-module  connects to one or more storage devices, such as disks  of a disk array . It should be noted that although disks  are used in some embodiments described below, any other type of storage device may be used as well. For example, a solid state storage device may be used instead, the solid state device having no mechanical moving parts for reading and writing data. Some examples of solid state devices include flash memory, non-volatile random access memory (NVRAM), Magnetic Random Access Memory (MRAM), Phase Change RAM (PRAM), etc. In other embodiments, other storage devices other than those mentioned here may also be used.","Also, it should be noted that while there is shown an equal number of N and D-modules in the illustrative cluster , there may be differing numbers of N and\/or D-modules, and\/or different types of modules implemented in the cluster  in accordance with various embodiments. For example, there may be a plurality of N-modules and\/or D-modules interconnected in a cluster configuration  that does not reflect a one-to-one correspondence between the N and D-modules. As such, the description of a node  comprising one N-module and one D-module should be taken as illustrative only. For example, a node  may also have one N-module and a plurality of D-modules, a plurality of N-modules and one D-module, or a plurality of N-modules and a plurality of D-modules.","The nodes  are interconnected by a cluster switching fabric  which, in the illustrative embodiment, may be embodied as a Gigabit Ethernet switch. In other embodiments, the cluster switching fabric  may be embodied as another clustering network connection. An exemplary distributed file system architecture is generally described in U.S. Patent Application Publication No. US 2002\/0116593, entitled METHOD AND SYSTEM FOR RESPONDING TO FILE SYSTEM REQUESTS, by M. Kazar et al. published Aug. 22, 2002.","In general, the nodes  in the cluster  may continually monitor each other to detect a failure of any node, e.g., by notifying one another of continued operation using a heartbeat signal passed between the nodes. If a partner node detects the absence of a heartbeat signal from a primary node, a failure is detected and a takeover procedure of the primary node may be initiated. In other embodiments, detection of node failure is provided by a global write-log device monitoring write logs received by nodes  in the cluster . In these embodiments, use of heartbeat signals for detecting node failure may be omitted. A failure of a node may be caused by a variety of reasons, such as a software failure (e.g., failure of the N-module or D-module) or hardware failure. Also, note that a node  \u201cfailure\u201d may occur unintentionally or intentionally (e.g., where a node is taken offline for servicing by an administrator or a command to takeover a node is received from an administrator).","In general, the takeover of a node may be triggered\/initiated for any variety of reasons. Upon detecting a node failure, takeover of ownership of the aggregates of a \u201cfailed\u201d node may be initiated. As such, in the embodiments described below, a \u201cfailed\u201d node may be construed broadly to include any node where takeover of the aggregates owned by the node is triggered\/initiated (for whatever reason). In some embodiments, when a takeover procedure of a \u201cfailed\u201d node is triggered\/initiated, one or more partner nodes of the cluster  assert ownership of the aggregates owned by the failed node according to an aggregate failover data structure (AFDS). After the takeover operation is complete, the data in the aggregates previously owned by the failed node are served and serviced by the one or more partner nodes.","The clients  may be general-purpose computers configured to interact with the node  in accordance with a client\/server model of information delivery. That is, each client  may request the services of the node  (e.g., by submitting read\/write requests), and the node  may return the results of the services requested by the client , by exchanging packets over the network . The client  may submit access requests by issuing packets using file-based access protocols, such as the Common Internet File System (CIFS) protocol or Network File System (NFS) protocol, over the Transmission Control Protocol\/Internet Protocol (TCP\/IP) when accessing information in the form of files and directories. Alternatively, the client may submit access requests by issuing packets using block-based access protocols, such as the Small Computer Systems Interface (SCSI) protocol encapsulated over TCP (iSCSI) and SCSI encapsulated over Fibre Channel (FCP), when accessing information in the form of blocks.","In some embodiments, a client  connects to a node  for a data-access session with the node , the node providing data-access services. During a data-access session, the client  may submit access requests that are received and performed by the node . Such access requests may include storage state requests, a storage state request comprising a request that alters the data state of a storage device . Examples of storage state requests include requests for storing new data to a file, deleting a file, changing attributes of a file, etc. For illustrative purposes, storage state requests may be generically referred to herein as write requests.","In some embodiments, the totality of storage space provided by the disks  and disk arrays  of the cluster  comprise a total shared storage space (referred to as \u201cshared storage \u201d) of the cluster . In other embodiments, the shared storage  comprises the totality of storage space provided by other types of storage devices (such as solid state storage devices). The shared storage  is accessible by each D-module  of each node  in the cluster . The shared storage  is discussed in detail in Section III. In some embodiments, the cluster  may provide high availability of service to clients  in accessing the shared storage . For example, the nodes  may be configured to communicate with one another (e.g., via cluster switching fabric ) to act collectively to offset any single node  failure within the cluster . Each disk  in the shared storage  may store ownership information  at an on-disk ownership location . Ownership information  of a disk  may indicate which node or D-module within the cluster  has permission to access the disk  (i.e., \u201cowns\u201d the disk ).",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 1B","b":["100","200","200","200","200","100","350","350","100","350","350"]},"Each node is configured for providing data-access service to clients connected with the node. When a node  failure occurs (where the failed node is no longer capable of processing access requests for clients ), the one or more partner nodes  are configured to automatically resume\/takeover the data-access service functions provided by the failed node . As such, when a node failure occurs, access requests sent to the failed node  may be re-directed to the one or more partner nodes  for processing and execution.","As opposed to each node  having only a single partner node  where the entire additional workload (of the failed node) is imposed on a single partner node, the additional workload may thus be distributed among one or more partner nodes. A cluster  wherein a node  may have one or more predetermined failover partner nodes  may be referred to herein as an \u201cN-way system.\u201d In some embodiments, each partner node takes over the workload of a failed primary node on a per aggregate basis, which is further described in detail in U.S. patent application Ser. No. 12\/401,458, entitled \u201cTakeover of a Failed Node of a Cluster Storage System on a Per Aggregate Basis,\u201d by Susan M. Coatney, et al., filed Mar. 10, 2009, which is incorporated herein by reference. Various components of the nodes  described below may communicate through the cluster switching fabric  to operate in conjunction to perform aggregate failover procedures described herein.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 2","FIGS. 1A-B"],"b":["200","200","222","224","225","226","228","230","223"],"i":"a,b"},"The cluster access adapter  comprises a plurality of ports adapted to couple the node  to other nodes of the cluster  (e.g., using the cluster switching fabric ). In the illustrative embodiment, Ethernet is used as the clustering protocol and interconnect media, although it will be apparent to those skilled in the art that other types of protocols and interconnects may be utilized within the cluster architecture described herein. In alternate embodiments where the N-modules and D-modules are implemented on separate storage systems or computers, the cluster access adapter  is utilized by the N\/D-module for communicating with other N\/D-modules in the cluster .","Each node  is illustratively embodied as a dual processor storage system executing a storage operating system  that preferably implements a high-level module, such as a file system, to logically organize the information as a hierarchical structure of named data containers, such as directories, files and special types of files called virtual disks (hereinafter generally \u201cblocks\u201d) on the disks. However, it will be apparent to those of ordinary skill in the art that the node  may alternatively comprise a single or more than two processor system. Illustratively, one processor executes the functions of the N-module  on the node, while the other processor executes the functions of the D-module .","The network adapter  comprises a plurality of ports adapted to couple the node  to one or more clients  over point-to-point links, wide area networks, virtual private networks implemented over a public network (Internet) or a shared local area network. The network adapter  thus may comprise the mechanical, electrical and signaling circuitry needed to connect the node to the network. Illustratively, the computer network  may be embodied as an Ethernet network or a Fibre Channel (FC) network. Each client  may communicate with the node  over the network  by exchanging discrete frames or packets of data according to pre-defined protocols, such as TCP\/IP.","The storage adapter  cooperates with the storage operating system  executing on the node  to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape, optical, DVD, magnetic tape, bubble memory, electronic random access memory, micro-electro mechanical and any other similar media adapted to store information, including data and parity information. However, as illustratively described herein, the information is preferably stored on the disks  of array . The storage adapter comprises a plurality of ports having input\/output (I\/O) interface circuitry that couples to the disks over an I\/O interconnect arrangement, such as a conventional high-performance, FC link topology.","Storage of information on each array  is preferably implemented as one or more storage \u201cvolumes\u201d that comprise a collection of physical storage disks  cooperating to define an overall logical arrangement of volume block number (vbn) space on the volume(s). Each logical volume is generally, although not necessarily, associated with its own file system. The disks within a logical volume\/file system are typically organized as one or more groups, wherein each group may be operated as a Redundant Array of Independent (or Inexpensive) Disks (RAID). Most RAID implementations, such as a RAID-4 level implementation, enhance the reliability\/integrity of data storage through the redundant writing of data \u201cstripes\u201d across a given number of physical disks in the RAID group, and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID-4 level implementation, although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.","The memory  illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data used in some embodiments. The processors and adapters may, in turn, comprise processing elements and\/or logic circuitry configured to execute the software code and manipulate the data stored in the memory . In some embodiments, the memory  may comprise a form of random access memory (RAM) comprising \u201cvolatile\u201d memory that is generally cleared by a power cycle or other reboot operation.","The storage operating system , portions of which is typically resident in memory and executed by the processing elements, functionally organizes the node  by, inter alia, invoking storage operations in support of the storage services implemented by the node. It will be apparent to those skilled in the art that other processing and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to embodiments described herein. In some embodiments, the storage operating system  comprises a plurality of software layers\/engines (including a takeover module\/engine ) that are executed by the processors. In some embodiments, a software layer or a module (e.g., takeover module ) may comprise an engine comprising firmware or software and hardware configured to perform embodiments described herein. In general, functions of a software layer or module described herein may be embodied directly in hardware, or embodied as software executed by a processor, or embodied as a combination of the two. In some embodiments, the takeover modules\/engines of the nodes  of a cluster  operate in conjunction to takeover aggregates of a failed node. As discussed below, a takeover module\/engine  may do so using an aggregate failover data structure (AFDS)  that is loaded and stored to memory .","The local non-volatile memory device  may comprise one or more storage devices (such as disks or solid state devices) utilized by the node to locally store configuration information (e.g., in a configuration table) provided by one or more management processes that execute as user mode applications. Alternatively, such information may be stored remotely. The local non-volatile memory device  that may be employed as a backup memory that ensures that the storage system does not \u201close\u201d received information, e.g., CIFS and NFS requests, in the event of a system shutdown or other unforeseen problem. In some embodiments, the non-volatile memory device  may comprise a rewritable computer memory for storing data that does not require power to maintain data\/information stored in the computer memory and may be electrically erased and reprogrammed. Some examples of non-volatile memory devices include flash memory, non-volatile random access memory (NVRAM), Magnetic Random Access Memory (MRAM), Phase Change RAM (PRAM), etc. In other embodiments, other non-volatile memory devices are used other than those listed here. As discussed below, the local non-volatile memory device  may store local write logs  (produced by the local storage operating system ) and remote write logs  (produced by a remote node  and retrieved or received from a global write-log device).","II. Storage Operating System","To facilitate access to the disks , the storage operating system  implements a write-anywhere file system that cooperates with one or more virtualization modules to \u201cvirtualize\u201d the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each \u201con-disk\u201d file may be implemented as set of disk blocks configured to store information, such as data, whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module(s) allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers (luns).","In the illustrative embodiment, the storage operating system is preferably the Data ONTAP\u00ae software operating system available from NetApp, Inc., Sunnyvale, Calif. that implements a Write Anywhere File Layout (WAFL\u00ae) file system. However, it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such, where the term \u201cWAFL\u201d is employed, it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of the embodiments herein.","A. Software Layers of Storage Operating System",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 3","FIG. 2"],"b":["300","200","300","325","310","180","200","325","312","314","316","315"]},"A file system protocol layer provides multi-protocol file access and, to that end, includes support for the Direct Access File System (DAFS) protocol , the NFS protocol , the CIFS protocol  and the Hypertext Transfer Protocol (HTTP) protocol . A VI layer  implements the VI architecture to provide direct access transport (DAT) capabilities, such as RDMA, as required by the DAFS protocol . An iSCSI driver layer  provides block protocol access over the TCP\/IP network protocol layers, while a FC driver layer  receives and transmits block access requests and responses to and from the node. The FC and iSCSI drivers provide FC-specific and iSCSI-specific access control to the blocks and, thus, manage exports of luns to either iSCSI or FCP or, alternatively, to both iSCSI and FCP when accessing the blocks on the node .","In addition, the storage operating system includes a series of software layers organized to form a storage server  (D-module ) that provides data paths for accessing data stored on the disks  of the node . The file system module  interacts in cooperating relation with a volume striping module (VSM) , a RAID system module  and a disk driver system module . The RAID system  manages the storage and retrieval of information to and from the volumes\/disks in accordance with I\/O operations, while the disk driver system  implements a disk access protocol such as, e.g., the Small Computer System Interface (SCSI) protocol. However, it should be understood that processes other than the RAID system  may in other embodiments perform such tasks while remaining within the scope of the present invention.","The VSM  illustratively implements a striped volume set (SVS) and, as such cooperates with the file system  to enable storage server  to service a volume of the SVS. In particular, the VSM  implements a Locate( ) function  to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.","B. Disk Ownership","A disk ownership module  manages ownership of the disks with respect to their related aggregates and volumes using, for example, one or more data structures such as tables, including, for example, the disk ownership table . In particular, the ownership module  cooperates with the disk driver system  to identify the appropriate D-module for processing data access requests for particular volumes on the disk array . To that end, the ownership module consults disk ownership table , which contains disk ownership information that is illustratively generated at boot-up time, and that is updated by various components of the storage operating system to reflect changes in ownership of disks. Further details regarding the data structure implemented as ownership table  are provided in U.S. patent application Ser. No. 11\/606,727, filed on Nov. 30, 2006, entitled \u201cSYSTEM AND METHOD FOR STORAGE TAKEOVER,\u201d by Susan M. Coatney et al., which is incorporated herein by reference.","Notably, the disk ownership module  includes program instructions for writing proper ownership information  at a proper location  on each disk (as shown in ). Ownership information  of a disk  may indicate which node or D-module within the cluster  has permission to access the disk  (i.e., \u201cowns\u201d the disk ). The disk ownership module  may do so using SCSI reservation tags (discussed in detail in above referenced U.S. patent application Ser. No. 11\/606,727). The disk ownership table , which is maintained by the ownership module  of the storage operating system , may comprise a plurality of entries, one for each disk in the shared storage .","C. Takeover Module","Referring again to , the storage operating system  also comprises a takeover module  that operates in conjunction with the other software layers of the storage operating system  to takeover a failed node as described herein. The takeover module  may maintain and update data structures such as VLDB  and AFDS  () used for taking over a failed node on a per aggregate basis. A takeover module  may reside and execute on each node  of the cluster . The takeover modules  in the nodes  may be configured to communicate and operate in conjunction with each other to perform the techniques described herein.","In some embodiments, each node  in the cluster  may receive (from clients) write requests for the shared storage and produce write logs representing the write requests. Each node  may be configured for periodically communicating\/sending accumulated write logs to a global write-log device at time intervals (determined\/specified by a predetermined time interval). In some embodiments, each node  may not be configured to send write logs to other nodes  in the cluster . In these embodiments, write logs are transmitted only between a node  and the global write-log device.","As discussed below, the global write-log device may detect failure of a node by monitoring the time intervals of when write logs are received from each node  in the cluster . If failure of a primary node is detected, the global write-log device may send a node-failure message indicating the failure of the primary node to one or more partner nodes in the cluster . In the rare instance a node has no accumulated write logs to transfer by the predetermined time interval, the node may produce \u201cempty\u201d write logs (e.g., comprising empty messages having null data) and send to the global write-log device, which are then treated by the global write-log device as receiving write logs from the node by the predetermined time interval (so the global write-log device does not determine the node has failed).","Receiving the node-failure message may trigger\/initiate the takeover modules  residing and executing on the partner nodes  to operate in conjunction to takeover the aggregates of the failed primary node . In some embodiments, the takeover modules  residing on one or more partner nodes of a failed primary node each perform takeover procedures of the primary node on a per aggregate basis. In these embodiments, each takeover module  residing on a partner node begins takeover procedures for taking over an assigned aggregate sub-set owned by the failed primary node.","Each takeover module  of a partner node may refer to an aggregate failover data structure (AFDS) to determine which partner node takes over which aggregate sub-set of a failed node. In some embodiments, each node may maintain its own copy of the AFDS  (e.g., the AFDS  may be stored and maintained in the VLDB ). In performing the takeover of an aggregate sub-set of the primary node, the takeover module  may operate in conjunction with other software layers and modules residing on the partner node , such as the file system , the RAID system , the ownership module  and the disk driver system , instructing each to perform particular routines\/threads to implement the takeover procedures.","D. File System","The file system  implements a virtualization system of the storage operating system  through the interaction with one or more virtualization modules illustratively embodied as, e.g., a virtual disk (vdisk) module (not shown) and a SCSI target module . The vdisk module enables access by administrative interfaces in response to a user (system administrator) issuing commands (e.g., node takeover command) to the node . The SCSI target module  is generally disposed between the FC and iSCSI drivers ,  and the file system  to provide a translation layer of the virtualization system between the block (lun) space and the file system space, where luns are represented as blocks.","The file system  is illustratively a message-based system that provides logical volume management capabilities for use in access to the information stored on the storage devices, such as disks. That is, in addition to providing file system semantics, the file system  provides functions normally associated with a volume manager. These functions include (i) aggregation of the disks, (ii) aggregation of storage bandwidth of the disks, and (iii) reliability guarantees, such as mirroring and\/or parity (RAID). The file system  illustratively implements the WAFL\u00ae file system (hereinafter generally the \u201cwrite-anywhere file system\u201d) having an on-disk format representation that is block-based using, e.g., 4 kilobyte (kB) blocks and using index nodes (\u201cinodes\u201d) to identify files and file attributes (such as creation time, access permissions, size and block location). The file system uses files to store metadata describing the layout of its file system; these metadata files include, among others, an inode file. A file handle, i.e., an identifier that includes an inode number, is used to retrieve an inode from disk.","Broadly stated, all inodes of the write-anywhere file system are organized into the inode file. A file system (fs) info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume (file system) has an fsinfo block that is preferably stored at a fixed location within, e.g., a RAID group. The inode of the inode file may directly reference (point to) data blocks of the inode file or may reference indirect blocks of the inode file that, in turn, reference data blocks of the inode file. Within each data block of the inode file are embedded inodes, each of which may reference indirect blocks that, in turn, reference data blocks of a file.","Operationally, an access request (read\/write request) from the client  is forwarded as a packet over the computer network  and onto the node  where it is received at the network adapter . A network driver (of layer  or layer ) processes the packet and, if appropriate, passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write-anywhere file system . Here, the file system produces operations to load (retrieve) the requested data from disk  if it is not resident \u201cin core\u201d, i.e., in memory . If the information is not in memory, the file system  indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system ; the logical vbn is mapped to a disk identifier and disk block number (disk,dbn) and sent to an appropriate driver (e.g., SCSI) of the disk driver system . The disk driver accesses the dbn from the specified disk  and loads the requested data block(s) in memory for processing by the node. Upon completion of the access request, the node  (and storage operating system ) returns a reply to the client  over the network .","E. Storage Operating System Implementations","It should be noted that the software \u201cpath\u201d through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is, in an alternative embodiment, a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC). This type of hardware implementation increases the performance of the storage service provided by node  in response to a request issued by client . Moreover, in another alternate embodiment of the invention, the processing elements of adapters ,  may be configured to offload some or all of the packet processing and storage access operations, respectively, from processor , to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes, architectures and procedures described herein can be implemented in hardware, firmware or software.","As used herein, the term \u201cstorage operating system\u201d generally refers to the computer-executable code operable on a computer to perform a storage function that manages data access and may, in the case of a node , implement data access semantics of a general purpose operating system. The storage operating system  can also be implemented as a microkernel, an application program operating over a general-purpose operating system, such as UNIX\u00ae or Windows NT\u00ae, or as a general-purpose operating system with configurable functionality, which is configured for storage applications as described herein.","In addition, it will be understood to those skilled in the art that the invention described herein may apply to any type of special-purpose (e.g., file server, filer or storage serving appliance) or general-purpose computer, including a standalone computer or portion thereof, embodied as or including a storage system. Moreover, the teachings of this invention can be adapted to a variety of storage system architectures including, but not limited to, a network-attached storage environment, a storage area network and disk assembly directly-attached to a client or host computer. The term \u201cstorage system\u201d should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write anywhere file system, the teachings of the present invention may be utilized with any suitable file system, including a write in place file system.","F. N-Module and D-Module","In the illustrative embodiment, the storage server  is embodied as D-module  of the storage operating system  to service one or more volumes of array . In addition, the multi-protocol engine  is embodied as N-module  to (i) perform protocol termination with respect to a client issuing incoming data access request packets over the network , as well as (ii) redirect those data access requests to any storage server  of the cluster . Moreover, the N-module  and D-module  cooperate to provide a highly-scalable, distributed storage system architecture of the cluster . To that end, each module includes a CF interface module adapted to implement intra-cluster communication among the N- and D-modules, including D-module-to-D-module communication for data container striping operations.","The protocol layers, e.g., the NFS\/CIFS layers and the iSCSI\/FC layers, of the N-module  function as protocol servers that translate file-based and block-based data access requests from clients into CF protocol messages used for communication with the D-module . That is, the N-module servers convert the incoming data access requests into file system primitive operations (commands) that are embedded within CF messages by the CF interface module  for transmission to the D-modules  of the cluster . Notably, the CF interface modules  cooperate to provide a single file system image across all D-modules  in the cluster . Thus, any network port of an N-module that receives a client request can access any data container within the single file system image located on any D-module  of the cluster.","G. CF Messages","In some embodiments, the N-module  and D-module  are implemented as separately-scheduled processes of storage operating system . In other embodiments, the N-module  and D-module  may be implemented as separate software components\/code within a single operating system process. Communication between an N-module and D-module in the same node  is thus illustratively effected through the use of CF messages passing between the modules. In the case of remote communication between an N-module and D-module of different nodes, such CF message passing occurs over the cluster switching fabric .","A known message-passing mechanism provided by the storage operating system to transfer information between modules (processes) is the Inter Process Communication (IPC) mechanism. The protocol used with the IPC mechanism is illustratively a generic file and\/or block-based \u201cagnostic\u201d CF protocol that comprises a collection of methods\/functions constituting a CF application programming interface (API). Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from NetApp, Inc. The SpinFS protocol is described in the above-referenced U.S. Patent Application Publication No. US 2002\/0116593.","The CF interface module  implements the CF protocol for communicating file system commands\/messages among the modules of cluster . Communication is illustratively effected by the D-module exposing the CF API to which an N-module (or another D-module) issues calls. To that end, the CF interface module  is organized as a CF encoder and CF decoder. The CF encoder of, e.g., CF interface on N-module  encapsulates a CF message as (i) a local procedure call (LPC) when communicating a file system command to a D-module  residing on the same node  or (ii) a remote procedure call (RPC) when communicating the command to a D-module residing on a remote node of the cluster . In either case, the CF decoder of CF interface on D-module  de-encapsulates the CF message and processes the file system command. As used herein, the term \u201cCF message\u201d may be used generally to refer to LPC and RPC communication between modules of the cluster. Further detail regarding CF messages is described in the above-referenced U.S. patent application Ser. No. 11\/606,727.","H. Write Logs","In general, during a data-access session with a node , a client  may submit access requests (read\/write requests) that are received and performed by the node . For the received write requests, each node  may perform write requests in two stages. In a first stage, a primary node  may receive write requests and produce a write log for each received write request. The write logs may be stored to a local memory device. In a second stage, upon occurrence of a predetermined initiating event (referred to as a \u201cconsistency point\u201d), accumulated write logs  stored in the local memory device may be performed on the storage devices  of the shared storage  (whereby the received blocks of data are written to the storage devices).","In particular, in each node , the file system  may be configured to receive write requests for files and perform the received write requests in two stages. In the first stage, write requests are received by the file system layer , whereby a write request may contain blocks of data to be written. The file system  produces a write log for each received write request, the write log representing the write request and containing the blocks of data to be written. As used herein, a primary node produces \u201clocal write logs\u201d  that may be stored locally to a non-volatile memory device, for example, to the local non-volatile storage  (as shown in ).","As discussed below, to ensure data consistency, each node  may be configured to periodically send its write logs  to a global write-log device for remote storage. As such, if a local\/primary node fails, a remote copy of the write logs of the failed primary node will be stored at the global write-log device which provides the write logs of the failed primary node to one or more partner node(s). As such, the partner nodes will still be able to perform the write logs on the storage devices  if the primary node fails. As used herein, a node receives \u201cremote write logs\u201d  of a failed node from the global write-log device and stores the remote write logs  to a local non-volatile memory device  (as shown in ).","In a second stage, upon occurrence of an initiating event (referred to as a \u201cconsistency point\u201d) at the primary node, accumulated local write logs  stored in the local volatile memory device may be performed on the storage devices  (e.g., whereby the received blocks of data are written to the storage devices). To do so, the accumulated local write logs  may be sent to the RAID system layer  that then performs the write logs (e.g., by writing the blocks of data in the write logs to a storage device). The consistency point may be initiated by various predetermined initiating events such as the occurrence of a predetermined time interval, the storage size of the accumulated local write logs  reaching a predetermined threshold size, etc. Note that the consistency point may be initiated at different times for each node  in the cluster .","After the second stage is initiated at the consistency point, after a write log is performed on a storage device, the write log is committed to disk and thus may be deleted. As such, after the accumulated local write logs  are performed at the consistency point, the local write logs  may then be deleted from the local non-volatile memory device . Also, the local write logs  sent to the global write-log device may also be deleted from the global write-log device. To do so, after the accumulated local write logs  are performed, the node  may send a message to the global write-log device to delete the performed write logs . After the consistency point, the process repeats as new write logs are produced for new received write requests, the new write logs being processed by the file system .","III. Shared Storage","As discussed above, in relation to , the totality of storage space provided by the disks  and disk arrays  of the cluster  comprise a total shared storage space (referred to as \u201cshared storage \u201d) of the cluster . The shared storage  is accessible by each D-module  of each node  in the cluster . Referring to , for illustrative purposes, node A may be referred to as the local\/primary node that may experience a failure, primary node A having one or more remote partner nodes (such as remote partner nodes B, C, and D) that are configured to assume the workload of the primary node A upon failure.",{"@attributes":{"id":"p-0094","num":"0093"},"figref":["FIG. 4","FIG. 1B","FIG. 4"],"b":["135","100","135","135","135","135","200","100","410","135","200","135"]},"In some embodiments, each node  owns an aggregate set  that comprises a system aggregate  and a plurality of data aggregates . Each system aggregate  may be used for storing local system information for the associated node . Such system information may include a volume location database (VLDB)  having information for mapping data containers to nodes that own the data containers within the cluster  (discussed further below). Although described as a database in some embodiments, the VLDB  may comprise any data structure in any variety of forms (e.g., table, list, database, etc.). As used herein, the VLDB  owned by a particular node  may be referred to as a \u201clocal\u201d VLDB  of the particular node . In some embodiments, VLDB  also includes an aggregate failover data structure (AFDS)  that lists, for each node in the cluster , aggregate sub-sets owned by the node and one or more partner nodes assigned to takeover each aggregate sub-set (discussed further below). For example, the VLDB  and AFDS  may be stored to a root volume in the system aggregate , where upon boot\/startup of the node , the VLDB  and AFDS  may be loaded and stored to memory  (as shown in ).","As such, each node  may access, maintain, and store its own separate local copy of the VLDB  and AFDS  in a system aggregate  in the shared storage  owned by the node . In some embodiments, takeover of the aggregate set of a primary node is performed based on the AFDS  which specifies which partner node is to take over which aggregate sub-set (data aggregates ) of the primary node. After takeover of the aggregate set of the primary node by the partner nodes, the VLDB  in each system aggregate  for each node  is updated in the shared storage  to reflect which partner nodes now own which data aggregates  of the primary node.","Each data aggregate  may be used for storing client data for the associated node , whereby clients  may read and write to the data aggregate . In some embodiments, upon a takeover of a primary node, the partner nodes takeover the data aggregates  owned by the primary node (and not the system aggregate  owned by the primary node). In some embodiments, each node owns a set of one or more data aggregates  (aggregate set) in the shared storage, the aggregate set being sub-divided into one or more sub-sets of data aggregates (\u201caggregate sub-sets\u201d). Each aggregate sub-set may comprise one or more data aggregates  owned by the primary node.","In normal operation (when node failures have not occurred), the D-module  of each node  may be configured to access only the aggregate set assigned to the node  that it owns. For example, in normal operation, the D-module  of node A may be configured to access and serve data from only aggregate set A and the D-module  of node B may be configured to access and serve data from only aggregate set B. Therefore, in normal operation, all access requests (received at any N-module  of any node  in the cluster) for data stored in aggregate set A are routed through the D-module  of node A (and have physical addresses\/file handles that specify the D-module  of node A). Note that the N-module  of each node can receive access requests for data in any aggregate  of the shared storage , and will route the access requests to the appropriate D-module  that services the requested data.","In the event of a node failure, the failed node is no longer capable of processing access requests (read\/write requests) from clients  for data in the aggregate set assigned to the failed node. In such an event, the access requests sent to the failed node  may be re-directed to the one or more remote partner nodes  for processing. The remote partner nodes  of the failed node may be configured to collectively replace the failed node by accessing and serving data in the aggregate set assigned to the failed node (as well as the accessing and serving data in its own assigned aggregate). As such, upon failure of a node, \u201cownership\u201d of the aggregate set assigned to the failed node may be transferred to the partner nodes (so that servicing of data for the aggregate set of the failed node may be taken over by the partner nodes). For example, upon failure of primary node A, remote partner nodes B, C, and D may each be configured to access and serve data stored in aggregate set A (whereas under normal operating conditions, the remote partner nodes B, C, and D would not have access to or serve data from aggregate set A). In some embodiments, upon failure of the primary node, each of the one or more partner nodes takes over ownership and servicing of an aggregate sub-set of the failed primary node. Thus, the additional workload of the failed primary node may be distributed among one or more partner nodes.",{"@attributes":{"id":"p-0100","num":"0099"},"figref":"FIG. 5","b":["500","500","530","500","500","510","510","500","510","502","504","506","508","500","550","550","560","530","135","135","135","500","510"]},"As discussed above, the VLDB  is a database process that records\/tracks the locations of the data containers (e.g., SVSs, flexible volumes, aggregates, etc.) within the shared storage  of the cluster  for routing requests throughout the cluster . Each data container (e.g., flexible volume, aggregate, etc.) may have an associated identifier (ID) that uniquely identifies the data container within the shared storage . Also, each node  may have an associated identifier (ID) that uniquely identifies the node  within the cluster . Further, each D-module  may have an associated identifier (ID) that uniquely identifies the D-module  within the cluster . In some embodiments, the D-module ID of a D-module  may be the same as the node ID of the node in which the D-module  resides. The VLDB  may comprise a database containing information for mapping a data container identifier (e.g., contained in a request received from a client ), to a particular node  (or D-module ) that \u201cowns\u201d (services) the requested data container within the cluster . For example, the VLDB  may contain a plurality of entries, each entry comprising a data container ID (e.g., aggregate ID) and a corresponding node ID (or D-module ID) that owns the data container.","The entries of the VLDB  may be used to provide the contents of entries in a configuration table. Alternatively, the entries of the VLDB  may be loaded to memory  (as shown in ). In general, when receiving an access request, the N-module  of a node  may access the VLDB  for mapping a data container ID (received in the request) to a D-module  of a node  that owns the data container within the cluster . The N-module  may then route the request to the D-module  of the identified node  (e.g., through the cluster switching fabric ). For example, when receiving a request, the N-module  of a node  may access the VLDB  for mapping the SVS ID of a data container handle to a D-module  of a node that owns the data container. In some embodiments, VLDB entries keep track of the locations of the flexible volumes (hereinafter generally \u201cvolumes \u201d) and aggregates  within the cluster.","As discussed above, the VLDB  may also include an aggregate failover data structure (AFDS)  used for taking over a failed primary node on a per aggregate basis (as described in U.S. patent application Ser. No. 12\/401,458, entitled \u201cTakeover of a Failed Node of a Cluster Storage System on a Per Aggregate Basis,\u201d by Susan M. Coatney, et al., filed Mar. 10, 2009, incorporated herein by reference).  shows a conceptual diagram of the contents of an exemplary AFDS . Note that an AFDS  may comprise a data structure in any variety of forms (e.g., table, list, database, etc.) and  is for illustrative purposes only. In some embodiments, each node may maintain its own copy of the AFDS . For each primary node in the cluster , the AFDS  may specify one or more aggregate sub-sets, each aggregate sub-set comprising one or more aggregates within the shared storage that are owned by the primary node. For each aggregate sub-set, the AFDS may specify at least one partner node assigned and configured to takeover the aggregate sub-set if the primary node fails.","As shown in , for each primary node , the AFDS  may include a plurality of entries  representing a plurality of aggregate sub-sets owned by the primary node. Each entry  may comprise an aggregate sub-set field  and a failover partner node field . The aggregate sub-set field  specifies one or more identifiers (aggregate IDs) of one or more aggregates of the aggregate sub-set. The partner node field  specifies an identifier (node IDs or D-module IDs) of a partner node or D-module assigned and configured to takeover the one or more aggregates specified in the aggregate sub-set field  (e.g., if the primary node fails or a command is received to do so). For example, for primary node A, the AFDS may list an entry  for a first aggregate sub-set comprising aggregate  to be taken over by partner node B, a second aggregate sub-set comprising aggregates - to be taken over by partner node C.","IV. Takeover of a Node on a Per Aggregate Basis",{"@attributes":{"id":"p-0105","num":"0104"},"figref":"FIG. 7","b":["700","600","700","700","200","100","700","360","376","200","100","376","200","700"]},"At step  of the method , each node  in the cluster  produces write logs for write requests received from clients and periodically communicates\/sends the write logs to the global write-log device at predetermined time intervals. The takeover module  residing on a partner node then receives (at ), from the global write-log device, a node-failure message indicating the failure of the primary node that initiates\/triggers a takeover process of the aggregate set owned by the primary node. The primary node  may own an aggregate set comprising one or more aggregate sub-sets. The method  then retrieves and examines\/reads (at step ) the AFDS , and scans each entry  for the primary node in the AFDS . The method  sets (at step ) the first entry  for the primary node as the \u201ccurrent entry\u201d . The current entry  may represent and specify an aggregate sub-set (in the aggregate sub-set field ) owned by the primary node and specify a failover partner node (in the failover partner node field ) to take over the aggregate sub-set specified in the current entry  (referred to below as the \u201cspecified aggregate sub-set\u201d).","The method then determines (at ) whether the partner node  or D-module  (in which the takeover module  resides) is specified in the current entry . For example, the method may determine whether the identifier for the partner node  (or D-module ) is contained in the partner node field  in the current entry . If not, the partner node is not assigned to take over the specified aggregate sub-set and the method  then continues at step . If the method determines (at \u2014Yes) that the partner node is specified in the current entry, the method  then takes over ownership (at step ) of the specified aggregate sub-set. Details of the takeover process of the specified aggregate sub-set (in step ) is discussed below in relation to .","At step , the method  determines whether the current entry is the last entry  for the primary node in the AFDS . If not, the method  sets (at step ) the next entry  for the primary node in the AFDS  as the current entry  and returns to step . If the method  determines (at step \u2014Yes) that the current entry is the last entry , the method continues at step .","Note that other takeover modules  on one or more other partner nodes (remote partner node) of the primary node may be simultaneously performing the above steps to take over another aggregate sub-set of the primary node. After taking over an aggregate sub-set of the primary node, the remote partner node may then send a \u201cVLDB-update\u201d message to each other partner node in the cluster . As discussed below, the VLDB-update message, received from a remote partner node taking over a particular aggregate sub-set, may contain information for updating the separate local copy of the VLDB  to reflect the new ownership of the particular aggregate sub-set by the remote partner node. At step , the method  may receive one or more VLDB-update messages from one or more other partner nodes in the cluster  and then updates its separate copy of its VLDB  according to the one or more VLDB-update messages.","After the VLDB  for each partner node in the cluster is updated to reflect the new owners of the aggregate sub-sets of the primary node, the N-modules of the partner nodes will be able to receive requests from clients and route the requests to the appropriate D-modules of the partner nodes. At step , the N-module of the partner node receives and routes requests to the appropriate D-modules in the cluster using the updated VLDB . At step , the D-module of the partner node receives requests for the aggregate set owned by the partner node (including requests for the newly obtained aggregate sub-set previously owned by the primary node) and processes the requests until further notice (e.g. the primary node is brought back online).",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 8","FIG. 7"],"b":["800","605","600","800","740","800","800","376","376","200","360","380","382","390","800"]},"The aggregate sub-set to be taken over may comprise a set of one or more storage devices (e.g., disks ). The method  may takeover the one or more storage devices following the below procedures. The method may instruct (at step ) the disk driver system  to pre-empt existing SCSI reservations on each disk of the aggregate sub-set (that were previously placed on the disks by the D-module of the primary node) and assert new SCSI-3 reservations on each disk of the aggregate sub-set. Using SCSI-3 reservations, a D-module can write to a disk if it holds the SCSI-3 reservations for that disk so that non-owning D-modules are prevented from writing to these disks because they do not have the SCSI-3 reservation. However, the non-owning file service can still read ownership information  from a predetermined location  on the disk. In some embodiments, if the SCSI-3 reservations do not match the on-disk ownership location data, the on-disk ownership information is used.","The method  then calls (at step ) the RAID system  to assimilate all newly owned disks of the aggregate sub-set into a new data container. Illustratively, the RAID system  performs block-based assimilation of the newly acquired disks into aggregates, and the proper RAID calculations and configurations are performed. The method  then calls (at step ) the RAID system  to change ownership information  on each disk  of the aggregate sub-set to indicate that the partner node is the new owner of the disk . Thereafter, the aggregate sub-set is owned by the D-module of the partner node .","The method  then retrieves (at step ), from the global write-log device, write logs of the failed primary node that include the write logs for the aggregate sub-set being taken over. The global write-log device may allow the partner node to access and read the write logs of the failed primary node from a storage partition assigned to the failed primary node. In other embodiments, the method  receives (at step ), from the global write-log device, the write logs of the failed primary node. The write logs of the failed primary node may be stored to a local non-volatile memory device  (shown as remote write logs  in ). The method  then calls (at step ) the file system  to perform, on the disks  of the aggregate sub-set in the shared storage , only those write logs for the aggregate sub-set being taken over. By performing write logs for the aggregate sub-set, the data in the aggregate sub-set will be as current\/up-to-date as possible. The method  then sends (at step ) a \u201cwrite-log completion\u201d message to the global write-log device indicating the write logs for the assigned aggregate sub-set have been performed. In some embodiments, after receiving a write-log completion message from each partner node assigned to take over an aggregate sub-set of the failed primary node, the global write-log device may delete the write logs of the failed primary node.","The method  then updates (at step ) the VLDB  to reflect that, for each aggregate in the aggregate sub-set, the partner node (specifically, the D-module of the partner node) is the new owner of the aggregate and is servicing data for the aggregate. As discussed above, the VLDB  is used to map identifiers of data containers (e.g., volumes and aggregates) within the cluster  to the appropriate node that owns the data container. The VLDB  may include a plurality of aggregate entries, each entry having an aggregate ID field and a node ID\/D-module ID field. For each entry for each aggregate in the aggregate sub-set, the method may update the node ID\/D-module ID field to contain the node ID\/D-module ID of the partner node that now owns the aggregate identified in the aggregate ID field.","The method  then sends (at step ) a \u201cVLDB-update\u201d message to each other partner node  in the cluster . The VLDB-update message may contain information for the partner node  receiving the VLDB-update message to update its own copy of the VLDB  to reflect the new owner for each aggregate in the aggregate sub-set. For example, the VLDB-update message may contain aggregate IDs for each aggregate in the aggregate sub-set and the node ID\/D-module ID for the new owner of each aggregate. The method  then ends.","V. Global Write-Log Device","A. Cluster Environment Implementing a Global Write-Log Device",{"@attributes":{"id":"p-0117","num":"0116"},"figref":["FIG. 9","FIG. 1B","FIG. 1B","FIG. 6"],"b":["900","905","200","900","200","135","200","150","200","200","200","600"]},"As shown in , each node  may be connected to the global write-log device  through a network . The network  may comprise the network  of , the cluster switching fabric  of , or a separate network dedicated to transmitting data regarding write-logs and write-log management. In some embodiments, the global write-log device  is physically external to each node  in the cluster  and is configured to operate independently from each node . The global write-log device  may be configured for maintaining operation upon failure of any node  or all nodes  in the cluster storage system . In some embodiments, each node  directly interacts with the global write-log device  to perform write-log procedures without requiring any operations of another node . For example, node A may directly interact with the global write-log device  without requiring operational assistance of nodes B, C, or D  in the cluster. As such, even if one or more nodes fail in the cluster, the global write-log device can still manage write logs of the cluster. In some embodiments, the global write-log device is a device dedicated to the management of the write logs of the nodes and is not configured to provide the functions of a node to provide data-access service to the shared storage. As such, the global write-log device may comprise a dedicated device that is less prone to operational failure than a node .","The global write-log device  may comprise a global write-log management (GWLM) module  and a non-volatile memory device . The global write-log device  may also comprise additional components, such as a processor, etc. (as described below in relation to ). The global write-log management (GWLM) module  may be configured to perform the global write-log management techniques described herein. In some embodiments, a module (e.g., GWLM module ) may comprise an engine comprising firmware or software and hardware configured to perform embodiments described herein. In general, functions of a module described herein may be embodied directly in hardware, or embodied as software executed by a processor, or embodied as a combination of the two. The non-volatile memory device  may comprise a component such as local non-volatile memory device  (described above in relation to ). Examples of non-volatile memory devices include flash memory, non-volatile random access memory (NVRAM), Magnetic Random Access Memory (MRAM), Phase Change RAM (PRAM), etc. In other embodiments, other non-volatile memory devices are used other than those listed here.","The GWLM module  may produce or maintain write-log data structures  (stored in memory device ) for storing data used in managing the write-logs of the nodes  in the cluster . As described below in relation to , the write-log data structures  may include a copy of the AFDS  and node data structures for collecting data about the nodes  (such as when write-logs were last received from each node and if the predetermined time interval for receiving write-logs has expired).","The memory device  may comprise a storage space. The GWLM module\/engine  may be further configured for sub-dividing the storage space into a plurality of logical storage partitions , and allocating\/assigning each partition  to a particular node  in the cluster  for storing write logs received from the node . In the example of , the GWLM module\/engine  has sub-divided the storage space of the memory device  into a \u201cnode A\u201d partition  assigned to store write logs received from node A, a \u201cnode B\u201d partition  assigned to store write logs received from node B, etc.","B. Normal Condition Operations",{"@attributes":{"id":"p-0122","num":"0121"},"figref":"FIG. 10","b":["900","200","135","180","1025","1025","230","1025","1025","230","230"]},"Each node  may be configured to periodically communicate\/send (through network ) its write logs  (accumulated and stored in NV Memory ) to the global write-log device . The GWLM module\/engine  may be configured to receive write logs  from each node  and store the write logs to the non-volatile memory device . In particular, the GWLM module\/engine  may store write logs  received from a node  to the storage partition  (in the memory device ) assigned to the node . For example, the GWLM module\/engine  may store write logs  received from node A to \u201cnode A partition\u201d , store write logs  received from node B to \u201cnode B partition\u201d , etc., as shown conceptually in .","Each node  may be configured to periodically send its write logs  to the global write-log device  at time intervals determined by a predetermined time interval. For example, each node may be configured to communicate\/send write logs  to the global write-log device  every X seconds (the predetermined time interval). In the rare instance a node has no accumulated write logs to transfer by the predetermined time interval, the node may produce \u201cempty\u201d write logs (e.g., comprising empty messages having null data) and send to the global write-log device, which are then treated by the global write-log device as receiving write logs from the node by the predetermined time interval (so the global write-log device does not determine the node has failed). In some embodiments, each node  may not be configured to send write logs  to other nodes  in the cluster . In these embodiments, write logs are transmitted only between a node  and the global write-log device .","The global write-log device  may be configured to detect failure of a node  in the cluster  by monitoring the time intervals of when write logs are received from each node . By providing a centralized global device for managing write-logs of all nodes of the cluster, a new method of detecting failure of a node is also provided through monitoring of the write-logs received by the nodes. As such, the cluster storage system may forego other methods of node failure detection (e.g., use of heartbeat signal passed between the nodes).","The global write-log device  may determine failure of a node  if it has not received write logs from the node  for a longer time period than the predetermined time interval (since the last time the global write-log device  received write logs from the node ). As such, when not receiving write logs from a node for longer than the predetermined time interval when write logs were expected from the node , the global write-log device may determine that the node has failed (is in a failed state). In some embodiments, the global write-log device  may determine failure of a node if it has not received write logs  from the node within a predetermined time threshold period that is approximately equal to or greater than the predetermined time interval. For example, the predetermined time threshold period may be X seconds plus Y seconds to provide a buffer period before a node is determined as failed.","C. Failed Node Operations",{"@attributes":{"id":"p-0127","num":"0126"},"figref":["FIG. 11","FIG. 11"],"b":["900","910"]},"Upon detecting the failure of node A, the GWLM module  may then examine the AFDS  (stored in the memory  as a write-log data structure ) which specifies which partner node is to take over which aggregates of a failed node. As shown in the exemplary AFDS  of , node A may service an aggregate set in the shared storage  comprising a first aggregate sub-set comprising aggregate  and a second aggregate sub-set comprising aggregates -. The AFDS  further specifies that partner node B is assigned to take over first aggregate sub-set and partner node C is assigned to take over the second aggregate sub-set if node A fails.","The GWLM module  initiates\/triggers one or more partner nodes in the cluster  to resume the data-access services of failed node A. The GWLM module  may do so by informing each partner node of the failure of node A (e.g., by communicating\/sending a \u201cnode-failure\u201d message indicating the failure of node A to each partner node B, C, and D in the cluster). Receiving the node-failure message may trigger\/initiate each partner node  to takeover the aggregates of the failed primary node  (e.g., using the methods shown in ). In some embodiments, a node-failure message may include information regarding the aggregate set owned by the failed primary node that is to be taken over and\/or information regarding which aggregate sub-set the partner node is to take over (according to the AFDS ). In some embodiments, the node-failure message may be sent to only those partner nodes assigned to take over an aggregate sub-set of the failed primary node (according to the AFDS ).","Note that the global write-log device  may have previously received write logs for the aggregate set from node A (referred to as \u201cnode A write-logs\u201d ) and stored the write logs in \u201cnode A partition\u201d  assigned to node A. The GWLM module  may then provide node A write-logs  to one or more partner nodes based on the information in the AFDS . In some embodiments, the GWLM module  may do so by allowing access to the node A partition  to the one or more partner nodes based on the AFDS , so the one or more partner nodes may retrieve\/read the node A write-logs . In other embodiments, the GWLM module  may do so by retrieving node A write-logs  from the node A partition  and communicating\/sending the write logs to the one or more partner nodes based on the AFDS . For example, based on the AFDS , the GWLM module  may provide node A write-logs  to partner nodes B and C.","In some embodiments, the GWLM module  may provide all the write logs of the failed node to each partner node assigned to takeover an aggregate sub-set of the failed node. In other embodiments, the GWLM module  may provide to a partner node only those write logs for the aggregate sub-set of the failed node it is assigned to takeover. For example, the GWLM module  may provide all the write logs of the node A to each partner node B and C. In other embodiments, the GWLM module  may provide to partner node B only those write logs for the first aggregate sub-set (aggregate ) and provide to partner node C only those write logs for the second aggregate sub-set (aggregates -).","As shown in , a partner node may retrieve\/read or receive all or some write logs of the failed node from the GWLM module . Each partner node retrieving or receiving write logs of the failed node may store the write logs to a local memory device. For example, as shown in , partner nodes B and C each receive write logs of node A and store the write logs to NV memory . Note that node D does not retrieve or receive write logs of node A since, according to the AFDS , it is not assigned to take over any aggregates of failed node A. As such, the GWLM module  may not send any write logs of node A to node D, and may not allow node D to access the node A partition  to retrieve\/read the write logs of node A.","Each partner node receiving write logs of the failed node may then perform the write logs on the storage devices of the shared storage . Each partner node receiving write logs of the failed node may perform only those write logs for the aggregate sub-set in the shared storage  it is assigned to take over. Other write logs of the failed node received or retrieved that are for other aggregate sub-sets being taken over by another partner node may be ignored\/deleted. For example, node B may perform on the shared storage  only those write logs of node A that are for the first aggregate sub-set and node C may perform on the shared storage  only those write logs of node A that are for the second aggregate sub-set.","After a partner node completes performing the write logs on its assigned aggregate sub-set, the partner node sends a write-log completion message to the global write-log device . In some embodiments, after receiving a write-log completion message from each partner node assigned to take over an aggregate sub-set of the failed primary node, the global write-log device may delete the write logs of the failed primary node. For example, after receiving a write-log completion message from partner node B (indicating it has completed performing write logs on the first aggregate sub-set) and from partner node C (indicating it has completed performing write logs on the second aggregate sub-set), the GWLM module  may delete node A write logs  from node A partition .","The above described interactions and operations between each node  and the global write-log device  may be performed using various types of commands, such as Remote Direct Memory Access (RDMA) commands, read\/write commands, CF messages, etc. The commands and data may be sent over a network  that may comprise the network  of , the cluster switching fabric  of , or a separate network dedicated to transmitting data regarding write-logs and write-log management.","D. Method for Managing Write Logs",{"@attributes":{"id":"p-0136","num":"0135"},"figref":"FIG. 12","b":["1200","200","900","1200","1200","910","905","920","600","915","905","1200"]},"The method  begins by sub-dividing (at ) the storage space of the memory device  into a plurality of logical partitions , and allocating\/assigning each partition  to a particular node  in the cluster  for storing write logs received from the node . The method  then receives (at ) write logs from one or more nodes  in the cluster  and stores the received write logs from a node to the partition  assigned to the node .","The method  monitors (at ) the time intervals of receiving write logs from each node . The method then determines (at ) whether a node failure in the cluster has occurred (e.g., by detecting that write logs from the failed node have not been received for a longer time period than a predetermined time interval when the write logs were expected from the failed node). If a node failure has not been detected, the method  continues at step .","If a node failure has been detected, the method  then retrieves and examines\/reads (at step ) the AFDS  (stored in memory device ) to determine one or more partner nodes assigned to take over data-access services of the aggregate set owned by the failed primary node. The method  then sends (at ) to one or more other nodes in the cluster a node-failure message indicating the failure of the node (primary node) that initiates\/triggers a takeover process of the aggregate set owned by the primary node. In some embodiments, a node-failure message sent to a node may include information regarding the aggregate set owned by the failed primary node that is to be taken over and\/or information regarding which aggregate sub-set the partner node is to take over (according to the AFDS ). In some embodiments, the node-failure message may be sent to only those partner nodes assigned to take over an aggregate sub-set of the failed primary node (according to the AFDS ).","The method  provides (at ) each assigned partner node the write logs of the failed primary node (e.g., by allowing the partner nodes to access the storage partition  assigned to the failed primary node or by sending the write logs of the failed primary node to each assigned partner node). The method  then receives (at ) a write-log completion message from each assigned partner node indicating that each assigned partner node has performed the write logs of the failed primary node on the shared storage . As such, the write logs of the failed primary node are deleted (at ) from the storage partition  assigned to the failed primary node. The method then ends.","VI. Global Write-Log Devices Used at Remote Storage Sites","A. Multi-Site Cluster Environment","In some embodiments, a cluster storage system  may comprise a global write-log device  connected with a plurality of nodes  at a single storage site, the cluster storage system  comprising a \u201csingle-site\u201d cluster (e.g., as shown in ). In other embodiments, a cluster storage system may comprise a plurality of remote storage sites each implementing a separate global write-log device. The multi-site cluster storage system may comprise a shared storage  that the plurality of sites each access.",{"@attributes":{"id":"p-0142","num":"0141"},"figref":["FIG. 13","FIG. 1B","FIG. 9"],"b":["1300","1300","1305","1305","905","200","200","1300","135","1305","1300","135","1300","900"]},"At each site  the global write-log device  receives and stores write logs from each node  within the site. As described above, the write logs stored at the global write-log device  may provide failover protection for nodes within the same site (referred to as \u201clocal failover protection\u201d). In local failover protection, a partner node may takeover data-access services of a failed primary node, the partner node and the primary node being located within the same storage site . For example, as shown in , node B may provide local failover protection to node A if node A fails.","In some embodiments, the global write-log device  does not receive write logs directly from nodes  of another site . In these embodiments, the global write-log devices  of different sites  are connected by a network . The network  may comprise the network  of , the network  of , the cluster switching fabric  of , or a separate network dedicated to transmitting data regarding write-logs between storage sites . The geographical distance between storage sites  may typically be far (e.g., California and New York storage sites). In some embodiments, the storage sites  are only directly connected through the global write-log devices  of the different sites , which are connected through the network . Given the typically long distances between the storage sites , a single connection between the global write-log devices  at the storage sites  may be the only feasible option (rather than multiple connections between global write-log devices  and each node  at different storage sites ).","The global write-log devices of the different sites  may be connected for transmitting write logs between the global write-log devices and the sites . The write logs stored remotely at a global write-log device  in a different site  may provide failover protection for nodes that are not within the same site (referred to as \u201cremote failover protection\u201d). In remote failover protection, a partner node may takeover data-access services of a failed primary node, the partner node and the primary node being located within different storage sites .","For example, as shown in , node C may provide remote failover protection to node A if node A fails. To do so, a first global write-log device at a first site may transmit its write logs to a second global write-log device at a second site for remote storage of its write logs. Upon failure of primary node A at the first site, the second global write-log device may then provide the write logs of the primary node to partner node C at the second site, partner node C being configured to take over the data-access services of primary node A upon failure of the primary node. As such, by replicating write logs across different sites, failover protection of the primary node may be provided by a node at the first site (\u201clocal failover protection\u201d) as well as by a node at the second site (\u201cremote failover protection\u201d).","B. Normal Condition Operations",{"@attributes":{"id":"p-0147","num":"0146"},"figref":["FIGS. 14 and 15","FIGS. 14"],"b":["1300","1300","15","1305","200","1025","230","1","1025","1025","2","1025","1025","1305","200","1025","905","1305"]},"At each site, the global write-log device  receives write logs  from each node  within the same site  and stores the write logs to a storage partition  (in the memory device ) assigned to the node . For example, as shown in , at site , a first global write-log device  may store write logs  received from node A to \u201cnode A partition\u201d  and store write logs  received from node B to \u201cnode B partition\u201d . As shown in , at site , a second global write-log device  may store write logs  received from node C to \u201cnode C partition\u201d  and store write logs  received from node D to \u201cnode D partition\u201d .","In some embodiments, a global write-log device may also be configured for periodically communicating\/sending (through network ) its write logs (stored in memory device ) to one or more other global write-log devices located at different sites  for remote storage of its write logs. For example, as shown in , at site , the first global write-log device  may transmit write logs  received from node A (stored in node A partition ) and write logs  received from node B (stored in node B partition ) to the second global write-log device located at site . The second global write-log device  may receive the write logs from the first global write-log device  and store the write logs to its memory device . For example, as shown in , at site , the second global write-log device  may store write logs  of node A to a \u201cnode A partition\u201d  and store write logs of node B to a \u201cnode B partition\u201d  in memory device . As shown in , similar operations are performed at site , whereby write logs stored at the second global write-log device  are transmitted and stored to the first global write-log device .","C. Failed Node Operations","At each site , the global write-log device  may monitor time intervals of receiving write logs from each node within the site  to determine if a node has failed. For illustrative purposes, in the examples given below, the global write-log device  may detect failure of node A (in site ) which comprises a failed primary node. For illustrative purposes, an exemplary AFDS  (shown in ) specifies that partner node B (located in the same site  as node A) is assigned to take over a first aggregate sub-set of primary node A and that partner node C (located in different site  as node A) is assigned to take over a second aggregate sub-set of primary node A upon failure of primary node A.",{"@attributes":{"id":"p-0151","num":"0150"},"figref":["FIG. 16","FIG. 16","FIG. 6"],"b":["1300","905","1","1","905","600","915","920","600","600","1","2"]},"The first global write-log device  then initiates\/triggers one or more partner nodes in the cluster  to resume the data-access services of failed node A. The first global write-log device  may do so by informing each other node in site  of the failure of node A (e.g., by communicating\/sending a \u201cnode-failure\u201d message indicating the failure of node A to each partner node B). The first global write-log device  may also inform the second global write-log device  in site  of the failure of node A (e.g., by communicating\/sending a \u201cnode-failure\u201d message indicating the failure of node A). The second global write-log device  may then inform each node within its same site (site ) of the failure of node A (e.g., by communicating\/sending a \u201cnode-failure\u201d message indicating the failure of node A to nodes C and D).","In some embodiments, a node-failure message sent to a node or another global write-log device  may include information regarding the aggregate set owned by the failed primary node that is to be taken over and\/or information regarding which aggregate sub-set a partner node is to take over (according to the AFDS ). In some embodiments, the node-failure message may be sent to only those partner nodes assigned to take over an aggregate sub-set of the failed primary node (according to the AFDS ). For each node in the cluster , receiving the node-failure message may trigger\/initiate the node  to takeover the aggregates of the failed primary node  (e.g., using the methods shown in ). For example, node B in site  and nodes C and D in site  may be triggered to initiate takeover operations of failed node A.","Note that each global write-log device  in the cluster  may have previously stored write logs for the aggregate set (referred to as \u201cnode A write-logs\u201d ) and stored the write logs in \u201cnode A partition\u201d  assigned to node A. Each global write-log device  may then provide write logs of the failed node (e.g., by allowing access to the write logs or sending the write logs) to one or more partner nodes within the same site, based on the information in the AFDS . For example, based on the AFDS , the first global write-log device  may provide node A write-logs  to partner node B at site  and the second global write-log device  may provide node A write-logs  to partner node C at site .","As shown in , a partner node may store write logs of the failed node to a local memory device. For example, as shown in , partner nodes B and C each receive write logs of node A and store the write logs to local NV memory . Note that node D does not retrieve or receive write logs of node A since, according to the AFDS , it is not assigned to take over any aggregates of failed node A. Each partner node receiving write logs of the failed node may then perform only those write logs for the aggregate sub-set in the shared storage  it is assigned to take over.","After a partner node completes performing the write logs on its assigned aggregate sub-set, the partner node sends a write-log completion message to the global write-log device  within the same site. After receiving a write-log completion message from each partner node in the same site assigned to take over an aggregate sub-set of the failed primary node, the global write-log device may delete the write logs of the failed primary node from its memory device . For example, after receiving a write-log completion message from partner node B, the first global write-log device  may delete node A write logs  from node A partition . Likewise, after receiving a write-log completion message from partner node C, the second global write-log device  may delete node A write logs  from node A partition .","The above described interactions and operations between each node  and the global write-log device  may be performed using various types of commands, such as Remote Direct Memory Access (RDMA) commands, read\/write commands, CF messages, etc. The commands and data may be sent over a network  that may comprise the network  of , the network  of , the cluster switching fabric  of , or a separate network dedicated to transmitting data regarding write-logs and write-log management.","As described above, global write-log devices connected between distant storage sites  may be used to provide local or remote protection for node failures. In some embodiments, data exchanges between the storage sites  is reduced. In these embodiments, write log data is transmitted between the storage sites only through the global write-log devices. Also, the storage sites may be directly connected only through the global write-log devices (using network ). In these embodiments, each node  of a site may be configured to not send write logs  to any other nodes  (in the same or different sites) and also be configured to not send write logs  to a global write-log device of another site. As such, use of I\/O resources of the nodes  at each site  may be reduced. Also, each node may be configured to not store write logs of another node in the cluster storage system to reduce use of storage resources.","D. Method for Managing Write Logs in Multi-Site Cluster",{"@attributes":{"id":"p-0159","num":"0158"},"figref":["FIG. 17","FIG. 17","FIG. 12"],"b":["1700","200","1300","1305","1700","1700","910","905","1305","1300","1700","1700","1200"]},"The method  begins when a global write-log device  at a site receive (at ) write logs from one or more nodes  in the same site and stores the received write logs. The global write-log device  then sends (at ) the write logs received from the one or more nodes to one or more other global write-log devices  at one or more other sites . The global write-log device  then receives (at ) write logs one or more other global write-log devices  at one or more other sites .","The global write-log device  then determines (at ) whether a node failure in any of the sites  of the cluster  has occurred. In some embodiments, the global write-log device  may determine that a node failure within the same site (referred to as a local node failure) has occurred by monitoring time intervals of when write logs are received from each node. In other embodiments, the global write-log device  may determine that a node failure in a different site has occurred (referred to as a remote node failure) by receiving a node-failure message from another global write-log device  at another site . In some embodiments, if a node failure has been detected at any site (local or remote), the global write-log devices  at all sites will communicate node failure and establish common status of the affected node, and then the node will be declared failed. If a node failure has not been detected, the method  continues at step .","If a node failure has been detected (at \u2014Yes), the global write-log device  then retrieves and examines\/reads (at step ) the AFDS  (stored in memory device ) to determine one or more partner nodes in the same site  that are assigned to take over data-access services of the aggregate set owned by the failed primary node. The global write-log device  then sends (at ) to one or more other nodes in the same site  a node-failure message indicating the failure of the node (primary node) that initiates\/triggers a takeover process of the aggregate set owned by the primary node. If the node failure is a local node failure in the same site, the global write-log device  then sends (at ) a node-failure message to one or more other global write-log device(s) at one or more other site(s) in the cluster indicating that the primary node has failed. In some embodiments, a node-failure message sent to a node or another global write-log device  may include information regarding the aggregate set owned by the failed primary node that is to be taken over and\/or information regarding which aggregate sub-set each partner node is to take over (according to the AFDS ). In some embodiments, the node-failure message may be sent to only those partner nodes assigned to take over an aggregate sub-set of the failed primary node (according to the AFDS ).","The global write-log device  then provides (at ) each assigned partner node in the same site  the write logs of the failed primary node (e.g., by allowing the partner nodes to access the storage partition  assigned to the failed primary node or by sending the write logs of the failed primary node to each assigned partner node). The global write-log device  then receives (at ) a write-log completion message from each assigned partner node in the same site indicating that each assigned partner node has performed the write logs of the failed primary node on the shared storage . As such, the write logs of the failed primary node are deleted (at ) from the storage partition  assigned to the failed primary node. The method then ends.","VII. Global Write-Log Device Data Structures and Components",{"@attributes":{"id":"p-0164","num":"0163"},"figref":"FIG. 18","b":["920","910","200","100","920","915","905","1305","910","920","200","1305","920","600","1820","1825","1825","200","100"]},"A node data structure  may be used to collect and store operational and status data (referred to as \u201cnode data\u201d) about the assigned node . Such node data may be stored or updated in the node data structure  by the GWLM module  or may be stored or updated directly by the assigned node . The node data structure  may be used by the GWLM module  for monitoring and managing access to a corresponding storage partition  allocated to the assigned node .","Node data may include information regarding each aggregate the assigned node currently owns\/services (referred to as \u201caggregate data\u201d). Each node  may send data on its assigned aggregates which is logged to the node data structure  and updated if there is a change in its assigned aggregates. Node data may also include information regarding which node(s) are permitted to access the write logs stored in the corresponding storage partition . Under normal operating conditions (when no nodes have failed), only the assigned node would be permitted to access the corresponding storage partition . If the assigned node has failed, however, each partner node assigned to takeover an aggregate sub-set of the failed node would be permitted to access the corresponding storage partition . Such partner nodes would be determined based on the AFDS  and be listed in the node data structure  (which the GWLM module  may use for controlling access to the corresponding storage partition ).","Node data may include information (time stamp) of the when write logs were last received from the assigned node. The GWLM module  may use the time stamp in the node data structure  to determine whether the assigned node has failed (e.g., by determining whether the predetermined time interval for receiving write-logs has expired). Node data may also include a failed node flag indicating whether it has been determined that the assigned node has failed.","Upon a partner node taking over an aggregate sub-set of the failed node and performing the write logs of the failed node stored in the corresponding storage partition , a write-log completion message may be sent to the global write-log device . Node data may also include a write-log completion flag indicating that a write-log completion message has been received from each assigned partner node and the write logs of the failed node stored in the corresponding storage partition  may be deleted. In other embodiments, the node data structure  stores other operational and status data about the assigned node  other than those discussed herein.","The global data structure  may be used to collect and store operational and status data (referred to as \u201cglobal data\u201d) regarding all nodes  in the storage site . The global data structure  may be used by the GWLM module  for monitoring and managing access to all storage partitions  allocated to all nodes. Data in the global data structure  may replicate data contained in the separate node data structures  and be used to transfer\/share data between separate node data structures . For example, the global data structure  may contain information (aggregate data) regarding all aggregates owned by all nodes of the storage site , information regarding which node(s) are permitted to access each storage partition , information (time stamp) of the when write logs were last received from each node, a failed node flag for each node, etc. As such, if a node data structure  for a primary node contains a node failure flag indicating the primary node has failed, this data is copied to the global data structure  which may then be copied to the other node data structures . Thus, each node data structure  will contain data indicating that the primary node has failed.",{"@attributes":{"id":"p-0170","num":"0169"},"figref":["FIG. 19","FIG. 2"],"b":["905","200","905","222","224","225","915","223"]},"The global write-log device  is illustratively embodied as a computer system executing the GWLM module . The network adapter  comprises a plurality of ports adapted to couple the global write-log device  to nodes  or to another global write-log device  over a network  or . The memory  illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data used in some embodiments. The processors and adapters may, in turn, comprise processing elements and\/or logic circuitry configured to execute the software code and manipulate the data stored in the memory .","Portions of the GWLM module  are typically resident in memory and executed by the processor. It will be apparent to those skilled in the art that other processing and memory means, including various computer readable media, may be used for storing and executing program instructions pertaining to embodiments described herein. In some embodiments, the GWLM module  may comprise an engine comprising firmware or software and hardware configured to perform embodiments described herein.","The non-volatile memory device  may comprise a rewritable computer memory for storing data that does not require power to maintain data\/information stored in the computer memory and may be electrically erased and reprogrammed. As discussed above, the non-volatile memory device  may store write-log data structures  for storing data used in managing write-logs and may be sub-divided into a plurality of logical partitions .","In some embodiments, the global write-log device  is physically external to each node  in the cluster  and is configured to operate independently from each node . The global write-log device  may be configured for maintaining operation upon failure of any node  or all nodes  in the cluster storage system . In some embodiments, each node  directly interacts with the global write-log device  to perform write-log procedures without requiring any operations of another node . In some embodiments, the global write-log device comprises a dedicated computer system configured for the management of the write logs of nodes and is not configured to provide the data-access functions of a node. As such, the global write-log device may comprise a dedicated device that is less prone to operational failure than a node .","Some embodiments may be conveniently implemented using a conventional general purpose or a specialized digital computer or microprocessor programmed according to the teachings herein, as will be apparent to those skilled in the computer art. Appropriate software coding may be prepared by programmers based on the teachings herein, as will be apparent to those skilled in the software art. Some embodiments may also be implemented by the preparation of application-specific integrated circuits or by interconnecting an appropriate network of conventional component circuits, as will be readily apparent to those skilled in the art. Those of skill in the art would understand that information and signals may be represented using any of a variety of different technologies and techniques. For example, data, instructions, commands, information, signals, bits, symbols, and chips that may be referenced throughout the above description may be represented by voltages, currents, electromagnetic waves, magnetic fields or particles, optical fields or particles, or any combination thereof.","Some embodiments include a computer program product comprising a computer readable medium (media) having instructions stored thereon\/in when executed (e.g., by a processor) perform methods, techniques, or embodiments described herein, the computer readable medium comprising sets of instructions for performing various steps of the methods, techniques, or embodiments described herein. The computer readable medium may comprise a storage medium having instructions stored thereon\/in which may be used to control, or cause, a computer to perform any of the processes of an embodiment. The storage medium may include, without limitation, any type of disk including floppy disks, mini disks (MD's), optical disks, DVDs, CD-ROMs, micro-drives, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices (including flash cards), magnetic or optical cards, nanosystems (including molecular memory ICs), RAID devices, remote data storage\/archive\/warehousing, or any other type of media or device suitable for storing instructions and\/or data thereon\/in.","Stored on any one of the computer readable medium (media), some embodiments include software instructions for controlling both the hardware of the general purpose or specialized computer or microprocessor, and for enabling the computer or microprocessor to interact with a human user and\/or other mechanism utilizing the results of an embodiment. Such software may include without limitation device drivers, operating systems, and user applications. Ultimately, such computer readable media further includes software instructions for performing embodiments described herein. Included in the programming (software) of the general\/specialized computer or microprocessor are software modules for implementing some embodiments.","Those of skill would further appreciate that the various illustrative logical blocks, modules, circuits, techniques, or method steps of embodiments described herein may be implemented as electronic hardware, computer software, or combinations of both. To illustrate this interchangeability of hardware and software, various illustrative components, blocks, modules, circuits, and steps have been described herein generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application, but such implementation decisions should not be interpreted as causing a departure from the embodiments described herein.","The various illustrative logical blocks, modules, and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device, discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor, but in the alternative, the processor may be any conventional processor, controller, microcontroller, or state machine. A processor may also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration.","The techniques or steps of a method described in connection with the embodiments disclosed herein may be embodied directly in hardware, in software executed by a processor, or in a combination of the two. In some embodiments, a software module or software layer may comprise an engine comprising firmware or software and hardware configured to perform embodiments described herein. In general, functions of a software module or software layer described herein may be embodied directly in hardware, or embodied as software executed by a processor, or embodied as a combination of the two. A software module may reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read data from, and write data to, the storage medium. In the alternative, the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user device. In the alternative, the processor and the storage medium may reside as discrete components in a user device.","While the embodiments described herein have been described with reference to numerous specific details, one of ordinary skill in the art will recognize that the embodiments can be embodied in other specific forms without departing from the spirit of the embodiments. Thus, one of ordinary skill in the art would understand that the embodiments described herein are not to be limited by the foregoing illustrative details, but rather are to be defined by the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIGS. 1A-B"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0036","num":"0035"},"figref":"FIG. 17","b":"1300"},{"@attributes":{"id":"p-0037","num":"0036"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
