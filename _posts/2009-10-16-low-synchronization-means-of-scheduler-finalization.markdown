---
title: Low synchronization means of scheduler finalization
abstract: Shutting down a computer work scheduler. The work scheduler includes a number of virtual processors, each of which is either active or inactive. An active processor executes work, searches for work, or is idle. An inactive has no context running atop it. The method includes determining that all processors controlled by the scheduler are idle. As a result of determining that all controlled by the scheduler are idle, the method proceeds to a first phase of a shutdown operation, which when successful, includes: performing a sweep of all collections searching for any work in the scheduler and determining that no work is found in the scheduler. As a result of determining that no work is found in the scheduler, the method proceeds to a second phase of a shutdown operation, which when successful includes messaging all contexts in the scheduler and telling them to exit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08276147&OS=08276147&RS=08276147
owner: Microsoft Corporation
number: 08276147
owner_city: Redmond
owner_country: US
publication_date: 20091016
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","Background and Relevant Art","BRIEF SUMMARY","DETAILED DESCRIPTION"],"p":["Computers and computing systems have affected nearly every aspect of modern living. Computers are generally involved in work, recreation, healthcare, transportation, entertainment, household management, etc.","Modern computing systems often include multiple processor, multiple core and\/or multiple thread architectures. This allows the systems to simultaneously perform different tasks among the different processors. Thus, different portions of a computing operation can be performed by different threads within the same system.","Work schedulers can be used to assign work to different threads. Work schedulers can implement a number of different virtual processors and can assign work to the different virtual processors to facilitate the work being accomplished. Work is defined as some computing task.","Some work schedulers, such as the ConcRT scheduler available from Microsoft Corporation of Redmond Wash., have semantics such that once they are released by the user, they shut down and finalize after all work queued to the schedulers is completed. Unfortunately, counting work within the scheduler may be prohibitively expensive due to the significant cache line contention it would generate. Illustratively, assignment of each work task would need to include an operation to increment a counter implemented on a shared cache line. To increment the counter, the cache line would need to be locked out by the thread incrementing the counter from other threads. In software transactional system, other threads that needed to increment the counter, would be stuck waiting for the lock to be released before they could increment the counter and begin the work. In hardware based transactional systems, concurrent attempts to access the cache line may result in large numbers transaction failures and cache line invalidations.","Because many different threads within the scheduler add and remove work from a variety of different collections, a hierarchical count of work suffers the same type of problems.","The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather, this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.","One illustrative embodiment includes a method that may be practiced in a computing system. The method includes acts for shutting down a computer work scheduler. The work scheduler includes a number of virtual processors, each representing the ability to execute a single thread. Each virtual processor is either active or inactive. An active processor has a context running atop it performing at least one of executing work, searching for work, or being idle after not finding work after a predetermined amount of searching for work. An inactive processor has no context running atop it.","The method includes determining that all processors in a given set of active virtual processors controlled by the scheduler are idle. As a result of determining that all processors in the given set of active virtual processors controlled by the scheduler are idle, the method proceeds to a first phase of a shutdown operation, which when successful, includes: performing a sweep of all collections searching for any work in the scheduler and determining that no work is found in the scheduler. As a result of determining that no work is found in the scheduler, the method proceeds to a second phase of a shutdown operation, which when successful includes messaging all contexts in the scheduler and telling them to exit.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used as an aid in determining the scope of the claimed subject matter.","Additional features and advantages will be set forth in the description which follows, and in part will be obvious from the description, or may be learned by the practice of the teachings herein. Features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the present invention will become more fully apparent from the following description and appended claims, or may be learned by the practice of the invention as set forth hereinafter.","Some embodiments described herein include functionality for shutting down a work scheduler. Embodiments include functionality whereby a scheduler effectively watches for each virtual processor in the scheduler which is performing work or searching for work to become idle. A virtual processor becoming idle is an indication that it cannot find work. Once all virtual processors have become idle, the changing of processor state to active, either from idle or inactive, of virtual processors is gated such that the shutting down can be aborted and rolled back if needed. The scheduler ensures that no more work exists in any scheduler collection. If such can be verified, while all active processors are idle, finalization of the shutdown begins. Otherwise, shutdown is rolled back until the next time that all virtual processors become idle.","Some embodiments include functionality for using idle detection on a collection of a completely independent set of virtual processors as a means of detecting when to start finalization. Embodiments may include multiple phase shutdown with rollback, where the rollback is either due to finding work or virtual processors being resurrected from idle or inactive states to perform new work in the scheduler. Resurrection implies that work was found. As used herein resurrection happens when a reference count (which will be described in more detail below) of the scheduler falls to zero, thus starting the attempt to finalize, and then some context unblocks and starts up. That context increments the reference count of the scheduler to pass it to another thread. Some embodiments may include a virtual processor gate mechanism and transition semaphore, with state bits in a machine word to guarantee atomic transitions. Some embodiments may use a sweep mechanism after idle detection to determine whether to proceed with finalization.","Illustrative embodiments will now be illustrated. Referring now to , a scheduler  is illustrated. The scheduler  is a reference counted object that an external client can manipulate, such as for example, through standard Reference\/Release application programming interfaces (APIs). The scheduler  includes a reference count . The reference count, in this example, stores a count defining a number of external clients that have called and are presently using the scheduler . In the illustrated embodiment, when the reference count  of the scheduler falls to zero, the scheduler begins a shutdown process, that when successful, finishes executing all the work assigned to it, shuts itself down (sometimes this process is referred to herein as finalization), and optionally notifies the users\/clients that have called the scheduler. In some embodiments, notification can occur as a result of the user requesting to be notified.","The scheduler  itself contains a number of virtual processors referred to herein genetically as . Each virtual processor  represents the ability to execute a single thread. A virtual processor executing a thread may be described as having a context running atop it. Virtual processors  can be either active or inactive. Active virtual processors have a context  running atop them which is either executing work, searching for work, or idle. A virtual processor  may transition to an idle state if the virtual processor  cannot find work to execute after repeated searching. Inactive virtual processors are virtual processors which have yet to become active in that they have no context running atop them.","Referring now to , a state diagram is shown illustrating transitions of virtual processors. For convenience,  illustrates virtual processors in one of three states. The three states include an inactive state , an active but idle state , and an active and non-idle state . As noted previously, a virtual processor in the inactive state  is a virtual processor with no context running atop it. A processor in an active but idle state  is a processor that is not actively performing work or searching for work, but is nonetheless running a context atop it and is available for work. A processor in an active and non-idle state  is a processor that has a context running atop it and is actively either performing work or searching for work.","When a given context executing atop a virtual processor finishes executing its assigned work item, it begins a process referred to as search for work. It may go through all collections  in the scheduler in specific order and try to find a new work item to execute. A collection  may be a member of collections (e.g., queues) of runnable contexts or realized chores. A collection  may also or alternatively be collections (e.g., work stealing queues) of tasks which may be stolen to load balance parallel work. If a virtual processor  cannot find such a work item, the virtual processor  puts itself into, or is put into by an external agent, a state  referred to as idle. In particular, the virtual processor  it is put to sleep until new work arrives in the scheduler , at which time the virtual processor  is awoken and is no longer idle, but is in the active a non-idle state . Conceptually, when the reference count  of the scheduler hits zero and all active virtual processors  have become idle, the scheduler  attempts to proceed into a first phase of shutdown.","To coordinate detection of idle, activation\/removal of virtual processors via a dynamic resource manager, and awakening of idle virtual processors via work (e.g.: recently unblocked contexts), the scheduler's internal state maintains a shutdown gate . In the embodiment illustrated, the shutdown gate  is a single machine word. The lower bits of the machine word (29 in this case) are the gate count . In this particular embodiment, this is the number of active virtual processors minus the number of idle virtual processors. The topmost 3 bits of the machine word shutdown gate  are flags which are changed atomically with respect to the lower 29 bits.","When the scheduler reference count  falls to zero\u2014indicating that the client wants the scheduler to shutdown\u2014the scheduler will atomically set a shutdown initiated flag  with a CAS (atomic compare-and-swap) loop. The CAS loop atomically compares the value of the machine word shutdown gate  at the beginning and end of the CAS loop, and if the compare is equal, then the shutdown initiated flag  is set. If the gate count  is zero at the time the CAS succeeds, this indicates that there are no active virtual processors that are not idle. This means that no virtual processor within the scheduler was able to find work in any collection. However, there may be work which will be scheduled at a later time (e.g.: blocked contexts that may be unblocked from another thread). These instances will be discussed later herein. Once the shutdown initiated flag  is set while the gate count indicates that there are no active virtual processors that are not idle, the scheduler proceeds to phase one shutdown.","At the start of phase one shutdown, the scheduler executes a CAS loop to set the active suspend state flag . This flag  is only set if the gate count  is zero. If the CAS fails because the gate count  has changed, shutdown is aborted and will be reattempted the next time the gate count  reaches zero. If the CAS succeeds, a computing system including the scheduler prevents virtual processors from performing a state transition (e.g. from idle  to active  or from inactive  to active ) until the flag  is cleared. During this time, the scheduler performs a sweep of all collections  and searches for any work in the scheduler  (including work items that are not runnable such as those assigned to blocked contexts). If any work is found, the scheduler clears the suspend state flag , wakes any virtual processor blocked on a state transition, and rolls back shutdown. If no work is found, the scheduler  proceeds to phase two of shutdown.","During phase two of shutdown, the scheduler  messages all contexts  and tells them to exit. It then utilizes a CAS loop to atomically set the shutdown completed flag  and clear the active suspend state flag ","Once the CAS loop succeeds, the resultant gate count indicates how many virtual processors to awaken via that level of change to a transition semaphore. It then decrements a reference count . In the embodiment illustrated, the internal reference count  is the number of contexts within the scheduler plus one. The plus one is for the thread which is calling the final release which may not be one of the scheduler's own contexts. When this reference count  falls to zero, the scheduler finalizes and signals the client of this. In other embodiments, other instrumentalities may be used. In particular, the reference count , or other instrumentality, is used to tell when the scheduler is completely finalized and the memory associated with it can be released (e.g.: the C++ objects destroyed, etc). Additionally, it may be an indication that the client can be notified","State transitions of virtual processors, as illustrated in , may follow a careful set of rules to synchronize with this process at key points. In particular, as noted, no synchronization is performed except during state transitions between active  to and from inactive , and between active  to and from idle .","When a virtual processor  wants to go from the inactive state  to active state , the virtual processor  first checks the shutdown completed flag . If set, the activation fails. If not set, the virtual processor  waits until the suspend state flag  in the gate is clear and then performs a CAS operation on the shutdown gate  machine word to increment the gate count while ensuring that no agent simultaneously manipulates the active suspend state flag . Waiting may be accomplished, in one embodiment, by the virtual processor  spin polling. The CAS operation is retried until it either succeeds or the shutdown completed flag  is set.","When a virtual processor  wants to go from active  to idle , for example as the result of not finding work, or active  to inactive , for example as the result of wanting to retire a virtual processor from dynamic resource management, the virtual processor  atomically decrements the shutdown gate  machine word, effectively decrementing the gate count in the illustrated embodiment. If the result of the decrement shows the gate count  to be zero and the shutdown initiated flag  is set, the scheduler tries to CAS-set the active suspend state flag . If the CAS succeeds with the gate count  remaining zero, phase one of shutdown occurs as described above.","When a virtual processor wants to go from an idle state  to an active state , it atomically increments the shutdown gate  machine word (effectively incrementing the gate count ). If the result of the increment shows the active suspend state flag  as zero, the state transition is allowed. If the result shows the active suspend state flag  as non-zero, the state transition blocks on the transition semaphore.","If the scheduler decides to roll back shutdown due to work being found in phase one shutdown, etc, it atomically clears the active suspend state flag  via a CAS loop. Once the CAS-loop succeeds, the resultant gate count  is examined and the transition semaphore is released that number of times to wake any blocked virtual processors so they may complete state changes.","The scheduler  may also fully roll back finalization by clearing the shutdown initiated flag . This may happen if, for instance, a blocked context which existed when the scheduler  started phase one shutdown unblocked, passed a pointer to the scheduler to a new thread which then took a reference count, incrementing the reference count  from zero to one and would fully roll back shutdown.","The following discussion now refers to a number of methods and method acts that may be performed. It should be noted, that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order, no particular ordering is necessarily required unless specifically stated, or required because an act is dependent on another act being completed prior to the act being performed.","Referring now to , a method  is illustrated. The method  includes acts for shutting down a computer work scheduler. The work scheduler includes a number of virtual processors (e.g. virtual processors  illustrated in ). Each virtual processor represents the ability to execute a single thread (e.g. the contexts  illustrated in ). Each virtual processor is either active in that it has a context running atop it performing at least one of executing work, searching for work, or idle after not finding work after a predetermined amount of searching for work, or inactive in that it has no context running atop it. The method includes determining that all processors in a given set of active virtual processors controlled by the scheduler are idle (act ). In one embodiment, as illustrated above, this may be accomplished by using a data structure, such as the gate count  illustrated in  above.","The method  further includes, as a result of determining that all processors in the given set of active virtual processors controlled by the scheduler are idle, proceeding to a first phase  of a shutdown operation. The first phase , when successful, includes performing a sweep of all collections searching for any work in the scheduler (act ) and determining that no work is found in the scheduler (act ). When the first phase is not successful, shutdown may be aborted. The first phase may not be successful as a result of the failure of a CAS operation as described above, and as will be illustrated in examples below.","As a result of determining that no work is found in the scheduler, the method  proceeds to a second phase  of a shutdown operation, which when successful includes messaging all contexts in the scheduler and telling them to exit (act ).","The method  may be practiced where the method is performed as a result of determining that a scheduler reference count has fallen to zero. The scheduler reference count comprises a counter included in the scheduler. An example of the scheduler reference counter is illustrated at  in .","The method  may be practiced where the computing system includes a block of memory, such as the shutdown gate . The block of memory may be transactional shared memory. For example, in one embodiment, the block of memory includes an atomic machine word. In the example illustrated in , a 32 bit machine word is used.","The block of memory includes a gate count portion (e.g. gate count ) including at least a portion of the block of memory that includes a count based on the number of active virtual processors minus the number of idle virtual processors. Determining that all processors in the given set of active virtual processors controlled by the scheduler are idle (act ) may include determining that the gate count portion indicates that all processors in the given set of active virtual processors controlled by the scheduler are idle.","The block of memory may also include a block of memory that can be read atomically, such as transactional memory. The block of memory may further include a shutdown initiated flag (e.g. ), an active suspend state flag (e.g. ), and a shutdown completed flag (e.g. ). Proceeding to a first phase of a shutdown operation may also be performed as a result of successfully setting the shutdown initiated flag  using an atomic compare and swap operation on the block of memory, and detecting that the gate count  was zero. In the illustrated embodiment, the shutdown initiated flag  is always set when reference counter  falls to zero. Processing proceeds to the first phase if the gate count was zero at the time shutdown initiated flag  was set. Thus, processing only proceeds with the first phase of shutdown if there were zero active virtual processors at the time the shutdown initiated flag  is set.","The first phase of the shutdown operation may further include successfully setting the active suspend state flag using an atomic compare and swap operation on the block of memory. This ensures that count of the gate count portion continues to indicate that all processors in the given set of active virtual processors controlled by the scheduler are idle at the conclusion of setting the active suspend state flag. As noted, virtual processors in the work scheduler may be prevented from performing a state transition until the active suspend state flag is cleared.","The second phase of the shutdown operation may further include successfully setting the shutdown completed flag and clearing the active suspend state flag using an atomic compare and swap operation on the block of memory.","In some embodiments, a virtual processor may attempt to transition from an inactive to active state. In these embodiments, the virtual processor checks the shutdown completed flag. When the shutdown completed flag is not set, the virtual processor waits until the active suspend state flag is clear and then performs an atomic compare and swap operation to increment the count of the gate count portion while ensuring that the active suspend state flag is not manipulated.","In some embodiments, when a virtual processor attempts to transition from an active to idle state or active to inactive state, the gate count portion is decremented. In some embodiments, when a virtual processor attempts to transition from an idle to active state, the gate count portion is incremented.","The method  may further include signaling a client indicating that the scheduler has been shut down.","Referring now to , an overview method figure is shown illustrating method steps for various actions such as virtual processor state transitions and scheduler dereferencing.  will be explained with reference to .","Referring now to , at  a virtual processor  requests going from an inactive state  to an active state . At , a determination is made whether or not the shutdown completed flag  is set. If the shutdown completed flag  is set, as illustrated at , the request to go from an inactive state  to an active state  is denied inasmuch as the scheduler  is shutting down. However, if the shutdown completed flag  is not set, then as illustrated at  the virtual processor  will spin poll until the suspended state flag  is cleared. Once the suspended state flag  is cleared, an atomic compare and swap loop operation is attempted to increment the gate count  as illustrated at . The atomic compare and swap loop operation may fail as a result of the suspend flag  being set. In this case processing returns to  were the virtual processor continues to spin until the active suspend state flag  is cleared. The compare and swap loop operation illustrated at  may alternatively fail because the shutdown completed flag  is set. In this case, processing returns to  wherein the request to go from an inactive state  to an active state  is denied inasmuch as the scheduler  is shutting down. The atomic compare and swap loop operation illustrated at  may succeed in which case the virtual processor  is active and can run work as illustrated at .",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 4","b":["414","104","204","206","110","416","112","110","116","116","412","104","116","418","420","412","104","104","106","104","422","424","120","100","120","120","426","120","120","428"]},"Reference is now directed to  which illustrates the process of events when a virtual processor  goes from an active state  to an idle state  or from an active state  to an inactive state . When the virtual processor  changes state, the gate word  is decremented as illustrated at . If the resulting gate count  is greater than zero or the shutdown initiated flag  is cleared then no further shutdown actions are performed as illustrated at . Alternatively, if the gate count  is equal to zero and the shutdown initiated flag  is set, then processing proceeds to  wherein an atomic compare and swap loop is attempted to set the active suspend state flag . If the atomic compare and swap loop operation fails due to the gate count  being greater than zero, then no further shutdown actions are performed at the present time as illustrated at . However, if the atomic compare and swap loop operation setting the suspend state active suspend state flag  succeeds, then processing proceeds to  wherein operations sweeping the scheduler  for work are performed. If work is found during the sweep operation, then the active suspend state flag  is cleared, and the gate count  is used to wake a number of virtual processors  as indicated by the gate count  using the transition semaphore as illustrated at , whereafter no further shutdown actions are performed at the present time as illustrated at . However, if no work is found, phase two shutdown is begun whereafter the shutdown completed flag  is set, one or more cancellation messages are sent directing all virtual processors to shut down, and all virtual processors are woken so as to initiate shutdown of the virtual processors  as illustrated at . Processing proceeds to decrementing the internal reference count  and a determination is made of the result of the internal reference count so as to determine whether or not finalization and client notification should occur as illustrated at  or not performing any further shutdown actions as illustrated at .",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":["442","100","444","428","114","446","112","110","428","112","114","434","436","440","424","426","438","428"]},"Embodiments of the present invention may comprise or utilize a special purpose or general-purpose computer including computer hardware, as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer-readable media for carrying or storing computer-executable instructions and\/or data structures. Such computer-readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer-readable media that store computer-executable instructions are physical storage media. Computer-readable media that carry computer-executable instructions are transmission media. Thus, by way of example, and not limitation, embodiments of the invention can comprise at least two distinctly different kinds of computer-readable media: physical storage media and transmission media.","Physical storage media includes RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.","A network is defined as one or more data links that enable the transport of electronic data between computer systems and\/or modules and\/or other electronic devices. When information is transferred or provided over a network or another communications connection (either hardwired, wireless, or a combination of hardwired or wireless) to a computer, the computer properly views the connection as a transmission medium. Transmissions media can include a network and\/or data links which can be used to carry or desired program code means in the form of computer-executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer-readable media.","Further, upon reaching various computer system components, program code means in the form of computer-executable instructions or data structures can be transferred automatically from transmission media to physical storage media (or vice versa). For example, computer-executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module (e.g., a NIC), and then eventually transferred to computer system RAM and\/or to less volatile physical storage media at a computer system. Thus, it should be understood that physical storage media can be included in computer system components that also (or even primarily) utilize transmission media.","Computer-executable instructions comprise, for example, instructions and data which cause a general purpose computer, special purpose computer, or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be, for example, binaries, intermediate format instructions such as assembly language, or even source code. Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather, the described features and acts are disclosed as example forms of implementing the claims.","Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations, including, personal computers, desktop computers, laptop computers, message processors, hand-held devices, multi-processor systems, microprocessor-based or programmable consumer electronics, network PCs, minicomputers, mainframe computers, mobile telephones, PDAs, pagers, routers, switches, and the like. The invention may also be practiced in distributed system environments where local and remote computer systems, which are linked (either by hardwired data links, wireless data links, or by a combination of hardwired and wireless data links) through a network, both perform tasks. In a distributed system environment, program modules may be located in both local and remote memory storage devices.","The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is, therefore, indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["To describe the manner in which the above-recited and other advantages and features can be obtained, a more particular description of the subject matter briefly described above will be rendered by reference to specific embodiments which are illustrated in the appended drawings. Understanding that these drawings depict only typical embodiments and are not therefore to be considered to be limiting in scope, embodiments will be described and explained with additional specificity and detail through the use of the accompanying drawings in which:",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
