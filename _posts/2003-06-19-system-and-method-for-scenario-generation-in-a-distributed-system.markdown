---
title: System and method for scenario generation in a distributed system
abstract: A system and method may emulate scenarios for testing a distributed system. The distributed system may include a plurality of nodes, each having one or more resources. The system may include a resource driver for each type of the one or more resources in the distributed system, as well as one or more agents configured to access each resource through the corresponding resource driver. At least one node in the distributed system may be configured to run on a different platform than another node in the distributed system. The system may further include a central controller configured to communicate with each agent. The central controller may further execute a test scenario script containing one or more test scenarios for the distributed system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07401259&OS=07401259&RS=07401259
owner: Sun Microsystems, Inc.
number: 07401259
owner_city: Santa Clara
owner_country: US
publication_date: 20030619
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["1. Field of the Invention","This invention relates to the field of distributed computer systems and, more particularly, to testing heterogeneous distributed systems.","2. Description of the Related Art","As workloads on modern computer systems become larger and more varied, more and more computational resources are needed. For example, a request from a client to web site may involve one or more load balancers, web servers, databases, application servers, etc. Alternatively, some large-scale scientific computations may require multiple computational nodes operating in synchronization as a kind of parallel computing.","Any such collection of resources tied together by a data network may be referred to as a distributed system. A distributed system may be a set of identical or non-identical nodes connected together by a local area network. Alternatively, the nodes may be geographically scattered and connected by the Internet, or a heterogeneous mix of computers, each providing one or more different resources. Each node may have a distinct operating system and be running a different set of applications.","Because of the large number of possible system configurations described above, testing such a system for reliability may prove difficult. Multiple test scenarios are needed to examine the system's response to various crashes, outages, workloads, and other events. Certain common scenarios may be covered by manual testing, but such manual tests may not be nearly exhaustive, and require extensive manpower resources.","Alternatively, automated testing and scripting methods may be used to expand the footprint of coverage, but these methods also have limits. Scripting may have to be individually tailored for each node or resource, and may require extensive modification in the event of a configuration change. In addition, scripts may not be applicable across different operating systems. For example, a UNIX shell script may provide ample testing functionality for a given server cluster, but would need to undergo significant modification if new servers were added to the cluster. The UNIX shell script would also not be operable on a system running Microsoft Windows\u2122.","Furthermore, scripting for each resource may not allow for extensive interaction between resources, and may lack a central point of control and analysis. For example, a UNIX shell script running on one node may not be able to control the operation of another node. Because a distributed system may be useful precisely because it allows the interaction of scattered heterogeneous resources to be directed from a central location, this may represent a limitation in any such testing strategy.","A system and method may emulate scenarios for testing a distributed system. The distributed system may include a plurality of nodes, each having one or more resources. The system may include a resource driver for each type of the one or more resources in the distributed system, as well as one or more agents configured to access each resource through the corresponding resource driver. In some embodiments, one or more nodes in the distributed system may be configured to run on one or more different platforms than other nodes in the distributed system. The system may further include a central controller configured to communicate with each agent. The central controller may further execute a test scenario script containing one or more test scenarios for the distributed system.","While the invention is susceptible to various modifications and alternative forms, specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Turning now to , an exemplary distributed system  is shown along with a central controller , according to one embodiment. Distributed system  includes nodes A-C, each of which further includes a corresponding agent A-C. Central controller  may include configuration file , test scenario script , and core controller , as well as result data , result analyzer , and load generator . Nodes A-C communicate to central controller  by some form of interconnect, which may be a system backplane, a local area network (LAN), a wide area network (WAN), the Internet, or some combination thereof.","Each node A-C may represent a computer system operable to perform one or more of a variety of functions within the distributed system . Such functions may include, but are not limited to, acting as a database, web server, directory server, application server, or e-commerce server. In addition, each node A-C in  may represent a cluster of multiple nodes acting in parallel but addressable as a single computer system. Alternatively, multiple nodes may be located on a single computer system, in the form of multiple virtual machines executing on a multi-processor system, for example. In one embodiment, one or more node A-C may be configured to run on a different platform than other nodes A-C in distributed system . In other embodiments, nodes A-C may all run on the same type of computing platform.","Each agent A-C is operable to receive unit operations from central controller  and implement the commands, as will be described below. Each agent A-C communicates with various resources , ,  and A-B, which may correspond to various software applications, services or hardware devices located on each individual node A-C. Resources , ,  and A-B may be operable to provide the functionality described above in regard to distributed system . For example, resource  may correspond to an SQL server, while resource A-B may correspond to an SQL client.","Each agent A-C contains drivers , ,  and  which correspond to and are operable to access resources , , , and A-B, as will be described in further detail below. It is noted that in one embodiment, each driver , ,  and  may correspond to a type of resource, rather than a single resource. In one embodiment, resources A-B may represent two instances of a single resource type, such as a SunONE (formerly iPlanet) application server, for example. As a result, both resources A-B may be accessible by driver .","Central controller  is operable to communicate with nodes A-C and control agents A-C in accordance with test scenario script , as will be described below. Core controller  may also be operable to read configuration file , which includes a list of which nodes are connected to central controller , as well as which resources are available on each node. Core controller  may also read test scenario script , which may contain one or more test scenarios to be performed by distributed system .","Each test scenario represents a sequence of script commands designed to access one or more resources , ,  and , and thereby test the functionality of one or more nodes A-C. An end user may be able to select one or more of the test scenarios in test scenario script  via a user interface. Each selected test scenario may then be executed on central controller , thereby allowing the end user to test any functionality which may be tested by a test scenario.","Each test scenario in test scenario script  may be written as a Java program, Bean shell or any other scripting language, depending on implementation. For example, the following is an exemplary script implemented using the Bean shell:\n\n","Thus, for example, a first instance of a resource type called \u201ciWS\u201d that implements a method called \u201crestart( )\u201d may be invoked in the script by calling:\n\n","Test scenario commands are ultimately used to interact with resources , ,  and A-B as will be described below. Any results that are output from resources , ,  and A-B in response to the test scenario commands may then be stored as result data . Result analyzer  is operable to analyze result data  by subjecting result data  to set of pass\/fail criteria, as will be described below.","Core controller  further comprises script interpreter  and event listener . Script interpreter  is operable to translate the test scenario commands from a given scripting language into actions for central controller  to execute, and unit operations, which may be communicated to distributed system  by core controller . These unit operations may then be carried out by resources , , , and A-B as described below.","It is noted that many of the details in  are purely illustrative, and that other embodiments are possible. For example, the number of nodes, resources, drivers and interconnections between nodes may differ from what is shown in . Furthermore, central controller  is shown as a separate entity from distributed system , and in some embodiments may be a standalone computer system of many different types. However, some or all of the illustrated components of central controller  may also be software processes executed on a node within distributed system . Furthermore, many of the components of central controller may be stored at other locations, such as in a networked shared storage location, for example.","It is also noted that various communications protocols may be employed between central controller  and agents A-C, including RMI\/IIOP, JMS, or other protocols, for example.","Turning now to , a flowchart illustrating the operation of central controller  and distributed system  is shown. Referring collectively now to , core controller  is operable to read configuration file , as indicated at . Configuration file  may contain information on resources , ,  and A-B in distributed system . Configuration file  may also include information on agents A-C which are connected to central controller , such as agent identification numbers or agent network addresses, port numbers, for example. Configuration file  may further include information on the location of resources , ,  and A-B on nodes A-C in distributed system .","In , core controller  initiates communication with agents A-C. Core controller  may also communicate to each agent A-C information on which resources , ,  and A-B, are under that particular agent's control.","In , script interpreter  parses a test scenario from test scenario script . These test scenarios may be written in a scripting language such as Bean shell, for example, and may be parsed into one or more unit operations targeted towards only one specific resource type. In  core controller  sends out the unit operations from  to agents A-C. In response, agents A-C may relay the commands to drivers , , , and .","In  drivers , , , and  operate the respective resources , , , and A-B as indicated by the received unit operations. In response to executing the unit operations, resources , ,  and A-B may output various results, which may then be relayed to agents A-C. As disclosed above, resources , ,  and A-B may be operable to provide various functionalities of distributed system . Thus, testing resources , , , and A-B may successfully test the functionality of distributed system .","In  agents A-C relay one or more results of carrying out the platform independent commands on resources , ,  and A-B. These results are then stored as result data  on central controller .","In  central controller  may use result analyzer  to examine result data . By comparing result data  to a set of pass\/fail criteria, result analyzer  may determine if distributed system  has passed or failed the test scenario outlined in test scenario script .","In one embodiment, result analyzer  may be a set of libraries. The set of libraries may include functions for comparing strings and files, for example. In one embodiment, the result analyzer library set may include one or more functions for searching for an occurrence of a key word from a file or log. In one embodiment, the user may define logic in the script for deciding PASS or FAIL. The inputs may be return value of the remote commands, result of string\/file comparison, number of occurrences of a keyword in a file\/log\/http response, etc. The following is a bean shell (java syntax) script as an example:",{"@attributes":{"id":"p-0037","num":"0040"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/* set a pointer at the end of the log *\/"},{"entry":"s1as1.initializeLog( );"},{"entry":"\/* Stops the application server identified by s1as1 *\/"},{"entry":"String a1 = s1as1.stop( );"},{"entry":"\/* sends an HTTP request of id 1 at http:\/\/host:port\/helloworld"},{"entry":"with POST method and name value pair country=Nepal&lang=Nepali *\/"},{"entry":"HttpRequestGenerator.sendHttpRequest(1, s1as1.getProp(\u201chost\u201d),"},{"entry":"s1as1.getProp(\u201cport\u201d), \u201c\/helloworld\u201d, \u201cPOST\u201d,"},{"entry":"\u201ccountry=Nepal&lang=Nepali\u201d);"},{"entry":"\/* Check for word \u2018ERROR\u2019(case insensitively) in the response of"},{"entry":"request id 1 *\/"},{"entry":"int a2 - HttpRequestGenerator.presentInResponse(1, \u201cERROR\u201d,"},{"entry":"\u201cNONCASE\u201d);"},{"entry":"\/* Checking Number of times the word \u2018Shutting down\u2019 is present in"},{"entry":"the log of application server identified by s1as1 *\/"},{"entry":"int a3 = s1as1.isPresentInLog(\u201cShutting down\u201d);"},{"entry":"\/* Now deciding the PASS\/ FAIL of the test case *\/"},{"entry":"if ((a1.startsWith(\u201cOK\u201d))&&(a2>=1)&&(a3>=1))"},{"entry":"\u2003\u2003testcasePass( );"},{"entry":"else"},{"entry":"\u2003\u2003testcaseFail( );"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In step  central controller  determines if there are test scenarios remaining in test scenario script . If additional test scenarios remain, central controller  returns to step  and reads the next set of platform independent commands from test scenario script . If there are no remaining test scenarios, the method may end.",{"@attributes":{"id":"p-0039","num":"0042"},"figref":"FIG. 3","b":["10","120","112","116","118","122","126","128","110","300","310","320","322","326","328","122","126","128","110","110"]},"In accordance with  above, central controller  communicates unit operations to an agent , which operates resources , ,  and A-B as indicated by the unit operations. This process begins with the communication of a unit operation from the core controller  to core agent . Core agent  is operable to relay the platform independent commands to generic driver interface  through generic driver .","Generic driver interface  implements an application programming interface (API) such that the generic driver may communicate with drivers , ,  and , and thereby pass unit operations through drivers , ,  and  to resources , ,  and A-B. Thus, central controller  is operable to interact with resources , ,  and A-B, each of which may be specific to a certain platform or operating system.","It is noted that, depending on the scripting language used and the particular structure of the script commands, it may thus be possible for a user to construct a script that is applicable to a variety of similar resources on multiple platforms. For example, a test scenario may test a resource's implementation of various structured query language (SQL) commands. This same test scenario may thus be applicable, with minimal modification, to any resource that uses SQL commands with minimal modification, as long as all tested resources are operable to interact with a corresponding driver that implements generic driver interface .","It is further noted that new types of resources may be added to any node A-C in the system, thus providing scalability. As long as the corresponding driver for the new resource implements the generic driver interface, the associated agent A-C may be operable to communicate with the new driver, as will be described below.","Turning now to , a flowchart illustrating the addition of a new resource to distributed system  is shown. In , an additional resource is added to one or more nodes A-C in distributed system . In , the user must determine if the new resource is of a new type, and thus incompatible with the existing drivers , ,  and .","If the resource is of a new type, the user may add a new driver to any agents A-C which exist on nodes A-C which include the new resource in . The new driver may be configured to operate any features of the new resource that the user wishes to test. The new driver may also implement generic driver interface , which allows communication between the driver and the corresponding agent A-C, as described below.","After a new driver has been added to agents A-C, or if a new driver is not needed for the new resource to interact with agent A-C, the user advances to . In , the user modifies configuration file  to indicate for central controller  which nodes A-C contain the new resource.","In , the user executes one or more test scenarios from test scenario script  on distributed system , which includes the new resource. Because central controller  and distributed system  have been configured to interact with the new driver, any test scenario in test scenario script  that is operable to interact with the new resource may not have to be modified, since all configuration for the new resource is already complete. Also, the resource driver implementation may be modified at anytime without modification of the test scenario script.","Each driver , ,  and  may also have a corresponding event watcher , ,  and , as shown in , which monitors resource-specific events that may occur during execution of the test scenario. One instance on an event might be a specific server in a server cluster becoming the primary server in the cluster, for example.","In response to a resource-specific event, each event watcher , ,  and  may be operable to notify event listener , which may be configured to maintain an event log of all such event notifications. In certain embodiments, this event log may be included in result data , and may be used as part of the criteria used by result analyzer  to determine if a test scenario has passed or failed.","Furthermore, test scenario script  may specify a set of events which may trigger additional platform independent commands to be sent to agents A-C. More specifically, test scenario script  may contain a command for registering one or more specific events, and one or more additional commands that will be issued if and when the one or more specific events occur. For example, the following is an exemplary command structure for the registerEBC script command, which controls registration of one or more event-based commands as described above:",{"@attributes":{"id":"p-0051","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"registerEBC(.*<event1>.*[<event2>|<event3>]*.*<event4>,\u2003\u2002<command"},{"entry":"or series of commands>)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Thus, upon detection of a series of events registered with central controller  by the registerEBC script command, central controller  may execute the command or series of commands indicated by the registerEBC command.","Likewise, test scenario script  may contain a set of times or time periods which may trigger additional commands to be issued out when said times or time periods elapse. It is noted that, in various implementations, time-based commands may incorporate both a single time period (e.g. 10 minute from a given timer initialization) and a periodic timer (e.g. every 10 minutes from a given timer initialization). For example, the following is an exemplary command structure for the registerTBC script command, which controls registration of one or more time-based commands as described above:",{"@attributes":{"id":"p-0054","num":"0057"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"registerTBC([1|0],<time-variable>=value,\u2003<command\u2003or\u2003series\u2003of"},{"entry":"commands>)"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Another command used in time-based commands is the initTV script command, which may be used to initialize a given time period or periodic timer. For example, the following is an exemplary command structure for the initTV script command:\n\n","Test scenario script  may also act through the central controller  to control load generator , which is operable to generate a workload on distributed system . It is noted that load generator  may be a built-in component to central controller , a separate plug-in component, or a completely separate application. Event-based, time-based, and simulated workloads may thus allow for a more varied range of test scenarios with minimal human intervention.",{"@attributes":{"id":"p-0057","num":"0061"},"figref":["FIG. 5","FIG. 5"],"b":["100","130","130","500","120","510"]},"Turning now to , an exemplary computer subsystem  is shown. Computer subsystem  includes main memory , which is coupled to multiple processors A-B, and I\/O interface . It is noted that the number of processors is purely illustrative, and that one or more processors may be resident on the node. I\/O interface  further connects to network interface . Such a system is exemplary of a load balancing node, a server node or any other kind of computing node in a distributed system.","Processors A-B may be representative of any of various types of processors such as an x86 processor, a PowerPC processor or a CPU from the SPARC family of RISC processors. Likewise, main memory  may be representative of any of various types of memory, including DRAM, SRAM, EDO RAM, Rambus RAM, etc., or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. It is noted that in other embodiments, main memory  may include other types of suitable memory as well, or combinations of the memories mentioned above.","As described in detail above in conjunction with , processors A-B of computer subsystem  may execute software configured to test various resources on a distributed system. The test software may be stored in memory  of computer subsystem  in the form of instructions and\/or data that implement the operations described above.","For example,  illustrates an exemplary central controller  stored in main memory . The instructions and\/or data that comprise central controller  and any components contained therein may be executed on one or more of processors A-B, thereby implementing the various functionalities of central controller  described above. Likewise,  illustrates an exemplary node  stored in main memory  which may also be executed by processors A-B in a similar fashion.","In addition, other components not pictured such as a display, keyboard, mouse, or trackball, for example may be added to node . These additions would make node  exemplary of a wide variety of computer systems, such as a laptop, desktop, or workstation, any of which could be used in place of node .","Various embodiments may further include receiving, sending or storing instructions and\/or data that implement the operations described above in conjunction with  upon a computer readable medium. Generally speaking, a computer readable medium may include storage media or memory media such as magnetic or optical media, e.g. disk or CD-ROM, volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc. as well as transmission media or signals such as electrical, electromagnetic, or digital signals conveyed via a communication medium such as network and\/or a wireless link.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 6A and 6B"}]},"DETDESC":[{},{}]}
