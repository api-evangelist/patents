---
title: Virtual port multiplexing
abstract: To achieve the foregoing, and in accordance with the purpose of the present invention, a method and apparatus is disclosed which provides communication between at least two applications. The communication is achieved by accepting a connection from a second application on a first port and allocating a second port to receive the communication from the second application. Once the second port has been allocated the second port translation is recorded. The communication is sent to the first port from the second application and received on the second port. The communication is then delivered to a first application from the second port. In one embodiment the first application requests the communication from the first port and the first port is translated to determine the second port such that the communication is delivered to the first application in the step of delivering the communication to the first application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06859835&OS=06859835&RS=06859835
owner: VERITAS Operating Corporation
number: 06859835
owner_city: Mountain View
owner_country: US
publication_date: 20001005
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO RELATED APPLICATIONS","FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The present application claims priority to and incorporates the following applications by reference: DYNAMIC SYMBOLIC LINK RESOLUTION, Prov. No. 60\/157,728, filed on Oct. 5, 1999; SNAPSHOT VIRTUAL TEMPLATING, Prov. No. 60\/157,729, filed on Oct. 5, 1999; SNAPSHOT RESTORE OF APPLICATION CHAINS AND APPLICATIONS, Prov. No. 60\/157,833, filed on Oct. 5, 1999; VIRTUAL RESOURCE-ID MAPPING, Prov. No. 60\/157,727, filed on Oct. 5, 1999; and VIRTUAL PORT MULTIPLEXING, Prov. No. 60\/157,834, filed on Oct. 5, 1999.","The present invention relates generally to the multiplexing of ports. More specifically, the present invention relates to the rerouting of communication to alternative ports allowing a plurality of computers and\/or applications to send and receive data directed at the same port number.","Prior art computers communicate or transmit data through communication channels accessed through ports. A port is an endpoint to a logical connection. Communication between computers is achieved by forwarding data to a particular address, such as an IP address, on a predefined port number. Each port has a port number and the port number identifies what type of port each port is. For example, port  is used for HTTP traffic. Ports are utilized in several different protocol networks including TCP\/IP and UDP networks.","When a first application running on a first computer transmits data directed to a second application on a second computer, the first application will transmit the data directed at a predefined port to be received by the second computer and application. If the port is unknown, the data cannot be forwarded. Further, if a first application is currently listening on a given port, a second application that listens on the same port will fail because the port is already in use. The port cannot be initialized for listening by the second application if the port is already in use by the first application.","To achieve the foregoing, and in accordance with the purpose of the present invention, a method and apparatus is disclosed which provides communication between at least two applications. The communication is achieved by accepting a connection from a second application on a first port and allocating a second port to receive the communication from the second application. Once the second port has been allocated the second port translation is recorded. The communication is sent to the first port from the second application and received on the second port. The communication is then delivered to a first application from the second port. In one embodiment the first application requests the communication from the first port and the first port is translated to determine the second port such that the communication is delivered to the first application in the step of delivering the communication to the first application.","In one embodiment, the communication is received on the first port following the step of sending the data to the first port, the first port is translated to determine the second port prior to the step of receiving the communication on the second port, and the step of receiving the communication on the second port includes queuing the communication on the second port from the first port.","In one embodiment, the second application requests to connect with the first port prior to the step of accepting the connection. Once the second port is allocated, the second port is negotiated including negotiating the second port between a first and second virtual port multiplexer. Further, the second application is connected with the second port following the step of allocating the second port. The step of recording the translation including, first, recording the translation of the second port in association with the first application, and second, recording the translation of the second port in association with the second application.","Among other aspects and innovations, the invention provides structure, system, method, method of operation, computer program product, and business model and method for providing multiplexing of a port, for example a TCP\/IP port, into multiple virtual ports. Where a port, in one embodiment, is a bidirectional software construct identifying a data stream. The novel port multiplexing provided by the present invention allows multiple applications and processes, such as multiple socket-based server processes, to utilize the same port number without interfering with the operation and data transfer associated with each application and process. In one embodiment, the present method and apparatus allows a plurality of different computers to direct data communication at the same port number without interference, while still maintaining accurate communication. In one embodiment, the present method and apparatus transparently redirects communication to alternate ports establishing independent data streams without an application's knowledge.","By allowing the multiplexing of a port into multiple virtual ports, multiple applications and processes, such as socket-based applications and processes, can monitor, accept and transmit data on the same port number, while each application and process functionally receives a unique port to send and receive data. In one embodiment, the virtual port multiplexing allows two separate instances of the same application to operate on the same computer without interference between the two instances, and while avoiding errors or misdirected data during data communication. For example, two separate instances of the same application will direct data to the same port. Thus potential errors are likely to result due to the separate instances attempting to simultaneously send or receive data on the same port. The present invention will prevent this potential conflict by rerouting at least one of the instances by multiplexing the port and transparently rerouting the at least one instance to an alternative port. Further, the present invention allows a plurality of computers to communicate while the plurality of computers attempt to reference the same port without interfering or corrupting the data transferred. In one embodiment, the virtual port multiplexing is accomplished without interaction from the applications or processes, and further, the applications or processes are unaware of the virtual streams. The applications or processes only have knowledge of the original fixed port number.",{"@attributes":{"id":"P-00022","num":"00022"},"figref":"FIG. 1A","b":["100","102","1","102","2","100","106","104","106","108","1","108","2","108","106","108","102","106","110","1","110","2"],"i":"n"},"In one embodiment, the method and system of the present invention is implemented in a computer readable medium, such as a computer program executed on a computer  as illustrated in the high level block diagram of FIG. B. As shown, computer  incorporates a processor  utilizing, in one embodiment, a central processing unit (CPU) and supporting integrated circuitry. A memory  which is any type or combination of memory including fast semiconductor memory (e.g., RAM, NVRAM or ROM), slower magnetic memory (e.g., hard disk storage), optical memory and any conventional memory known in the art, to facilitate storage of the computer program and the operating system software. In one embodiment, also included in computer  are interface devices including, but not limited to, keyboard , pointing device , and monitor , which allow a user to interact with computer . Mass storage devices such as disk drive  and CD ROM  may also be included in computer  to provide storage of information. Computer  may communicate with other computers and\/or networks via modem  and telephone line  to allow for remote operation, or to utilize files stored at different locations. Other media may also be used in place of modem  and telephone line , such as a direct connection, high speed data line or a wireless connection, and the like. In one embodiment, the components described above may be operatively connected by a communications bus . In one embodiment, the components may be operatively connected by wireless communication.",{"@attributes":{"id":"P-00024","num":"00024"},"figref":["FIG. 2","FIG. 2","FIG. 3","FIG. 2"],"b":["148","152","154","148","154","156","152","154","148","152","154","152","154","156","156","148","148","158","156","148","152","154"],"i":["a-d ","a-g","a-c ","a-g","a-d ","a-g ","a-d ","a-g ","a-c ","a-d ","a-g "],"sub":["1-4 ","1-4 ","1-4 "]},"Still referring to , the computers  are any computer system or network. For example, computer is a computer having a plurality of servers providing application processing. Computers are individual computers providing a client or client application with access to computer and server applications . Computer is a computer network having at least two clients allowing access to computer and servers . In one embodiment, computer  is a single network location or address regardless of the number of physical computers represented by the single address, whether operating server applications  or client applications . In one embodiment, servers are physically independent computer systems within a computer network . In one embodiment, servers are server applications, such as software programs, which provide services by listening and responding to network requests on an IP address and a port, such as port 9000. In one embodiment, a port is a pre-assigned port that is known to provide a predefined service. One example of an server application  is a Web Server with a database module that provides real estate listings, that listens on a TCP port  for HTTP requests. Another example is a service provided over the Internet such as driving directions and detailed maps obtain from a web site, such as Yahoo Maps\u00ae. In one embodiment, clients are physically independent computer systems within a computer or computer network. In one embodiment, clients are client applications, such as software programs, which attempt to communicate with other computers  and\/or applications  at predefined IP addresses through network connections cdirected at predefined ports. An example of a client application is a java applet running within a Web browser, or an internet browser itself such as Netscape Browser\u00ae or Internet Explorer\u00ae.",{"@attributes":{"id":"P-00026","num":"00026"},"figref":["FIG. 4","FIG. 4"],"b":["148","156","148","160","210","150","160","212","162","160","214","150","216","150","160","162","220","222","150","150","160","162","224","150"],"sub":["1","1","1","1","2 ","2 ","2 ","1 ","1 ","1","2","2","2"]},{"@attributes":{"id":"P-00027","num":"00027"},"figref":"FIG. 5","b":["150","4","150","162","160","230","150","232","150","162","234","162","160","150","150","236","240","160","242","150","244","160","246","160"],"sub":["2","1","2 ","2 ","1","2 ","1 ","1","2","2 ","2 ","1","1 ","2","2 ","1"]},{"@attributes":{"id":"P-00028","num":"00028"},"figref":"FIG. 6","b":["148","150","160","260","150","262","162","160","264","150","160","266","270","150","272","274","150","150","150","162","162","280","150","150","162","150","150","160","150","162","150","150","150","150","150","282","150"],"i":["a-b","a ","b ","a ","a ","a ","b ","a ","b ","a ","b ","a ","b ","b ","a","a","b ","a. "],"sub":["1","1 ","1 ","1 ","1","2","2","2 ","2","2 ","2 ","1 ","1 ","2 ","1 "]},"Still referring to , once the new port phas been negotiated between both VPMs and , the second VPM acknowledges the new port pto the first VPM (step ), and connects on the new port p(step ). Once the second VPM connects with the new port p, the connection is accepted (step ) by the transport protocol layer , such as a TCP layer. The first and second VPMs register or record the port translation (step  and , respectively) and the second VPM returns a virtual port connection or socket connection to the server application at IP address 192.168.1.1 over virtual port 9000 (step ).","Once the new port phas been negotiated and translated between both the first and second VPMs , both the server and client applications are capable of transmitting and receiving data utilizing the virtual port.  shows a simplified block diagram of one implementation of one embodiment of the data transfer or communication through the VPM system providing cooperative communication similar to that shown in FIG. . In this embodiment, the client application  is transferring data to the server application  through the virtual port p. Initially client application  attempts to send data to server application at IP address 192.168.1.1 on an initial port p, for example port 9000 (step ). The second VPM receives the data and translates the initial port pto the new port p(step ). In one embodiment, the translation by the second VPM includes obtaining or extracting the client application AID a, the client source IP address (192.168.1.70) and client source port address, for example, port 24111 (not shown). The second VPM then determines the rerouted destination, including server destination IP address (192.168.1.1) and server destination port or new port p(for example, port 12760) as negotiated between first and second VPMs (see step ). Once the port translation is completed and the virtual port is returned, the data is sent over the new port p(step ) and received on the new port p(step ). Once the server application  requests to read the data on the initial port p(step ), the first VPM translates the initial port pto the new port p(step ) as negotiated. Once the first VPM translates the initial port p, the data is then forwarded from the virtual port 9000 (new port p) to the server application  (step ).","A similar translation is performed when a response is generated by the server application or when data is forwarded from the server application  to the client application . For example, when the server application  forwards the data to the first VPM , the first VPM extracts the server application AID a, the server application IP address (192.168.1.1) and the server application port number (9000). Using this information, first VPM performs a lookup to determine where to reroute the response. For example, the response is rerouted to client application IP address (192.168.1.70) at client source port address (for example, 24111) through virtual port, which is functionally equivalent to the new port p.","In one embodiment, the redirecting or rerouting of the data to the new port pincludes rewriting the protocol headers and recalculating a corresponding checksum. When data is transferred between components of a computer network, often the data being transferred is packetized prior to transferring. The packets of data are often formatted with a header, to identify at least the destination, and usually the source of the data. Many packetized formats include additional information such as IP addresses, port numbers, and checksums in the data structure layout of a packet, such as a TCP packet as defined by a TCP protocol. In one embodiment of the present invention, the data is packetized and these packets are rerouted to the virtual ports as described above. Because the packets are rerouted from an initial port (i.e., port p) to alternate ports (i.e., new port p), the parameters of the header are altered to reflect the actual port providing the packet communication. In one embodiment, because the packets are being communicated through the virtual port, the headers of the packets are rewritten to designate the virtual port as the communication port. Thus, to ensure that the multiplexing of the ports is transparent to the applications communicating, the VPM system  alters the virtual port number in the header of each packet back to the initial port number (i.e., port p) before delivering the packets to the destination application or process thus making the virtualization transparent to the destination application or process receiving the packets. Changing the port number changes the checksum of the packet, so the VPM  further calculates a new checksum and replaces the old checksum in the packet with a new checksum. Thus allowing the packets of data to be effectively rerouted to and from the virtual ports transparently.","In one embodiment, virtual port multiplexing of the present invention allows for the implementation of a virtual layer in a protocol stack, such as a TCP\/IP protocol stack. The virtual layer is implemented by intercepting a request to bind or connect to a specific socket, allocating an anonymous port, registering or storing a mapping between the original fixed port and the new anonymous port, and redirecting the request to the new port. As described above, packets of data are redirected by rewriting the protocol headers and recalculating the corresponding checksums.","In one embodiment, the present VPM system  groups applications or processes attempting to access the same port number. For example, if a first application or process is accessing a first port and has been allocated a first virtual stream, and another different application, another instance of the same application or another process attempts to access the same port number, the VPM system  will determine if the second application, instance or process has an AID that matches the first application's AID. If the AID is found to be the same as the first application, the different application, instance or process will receive the same virtualized stream. If the different application, instance or process AID does not match that of the first application's AID, a new virtualized stream is created.","In one embodiment, when VPM system  attempts to allocate a new virtualized port, a port must be available. In one embodiment, if a port is not available, the allocation of the virtualized port fails. In one embodiment, if there is not an available port when VPM system  attempts to allocate a new virtualized port, the request for the port is queued and VPM system  waits for a port to become available. In one embodiment, if the port does not become available within a predefined period, the attempt fails and an error signal is returned.",{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 8","b":["160","162","150","150"],"sub":"2 "},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 9","b":["410","412","414","160","148","412","148","412","412","412","412"]},"In one embodiment, the application configurator  communicates configuration information regarding the associated application to aid in the initialization of the application. The configuration information includes any information relating to the associated application including, but not limited to, the AID of the associated application, and ports to be multiplexed. In an example for non-cooperative multiplexing, the configurator  supplies, for a given application pathname, at least the AID of the application. In one embodiment, the configurator  further supplies a list of port numbers, such as TCP port numbers, that are to be multiplexed by VPM and a list of source IP address\/port number pairs that should correspond be routed to this AID. In an example for cooperative multiplexing, the configurator  supplies at least the AID of the application, and in one embodiment configurator  further supplies a list of port numbers that are to be multiplexed.","In one embodiment, the application configurator  operates without assistance from the application associated with the configurator . One example of an application configurator  is an application library. In one embodiment, application configurator  exists in the server application environment. In one embodiment, the application configurator  is implemented as a server process that proxies application information to an operating system as needed.","In one embodiment, the present invention further provides snapshot virtual templating by creating virtual application templates for the purpose of propagating a single application snapshot into multiple, distinct images. Snapshot virtual templates allow multiple application instances to use the same fixed resource identifier by making the resource identifier virtual, privatizing it, and dynamically mapping it to a unique system resource identifier. When a snapshot is cloned from a virtual template, the common or shared data is used exactly as is, whereas the non-sharable data is either copied-on-write, multiplexed, virtualized, or customized-on-duplication. The present invention greatly reduces the required administrative setup per application instance. Snapshot virtual templating works by noting access to modified resources, fixed system IDs\/keys and unique process-related identifies and automatically inserting a level of abstraction between these resources and the application. The resources contained in a snapshot virtual template can be dynamically redirected at restore time. Access to memory and storage is managed in a copy-on-write fashion. System resource handles are managed in a virtualize-on-allocate fashion or by a multiplex-on-access mechanism. Process-unique resources are managed in a redirect-on-duplicate fashion. Rules may be defined through an application configurator that allows some degree of control over the creation of non-sharable data.","In one embodiment, the present invention further provides snapshot restoring by saving all process state, memory, and dependencies related to a software application to a snapshot image. Interprocess communication (IPC) mechanisms such as shared memory and semaphores must be preserved in the snapshot image as well. IPC mechanisms include any resource that is shared between two process or any communication mechanism or channel that allow two processes to communicate or interoperate is a form of IPC. Sockets, shared memory, semaphores and pipes are some examples of IPC mechanisms. Between snapshots, memory deltas are flushed to the snapshot image, so that only the modified-pages need be updated. Software modules that track usage of resources and their corresponding handles are included as part of the snapshot\/restore framework of the present invention. At snapshot time, state is saved by querying the operating system kernel, the application snapshot\/restore framework components, and the process management subsystem that allows applications to retrieve internal process-specific information not available through existing system calls. At restore time, the reverse sequence of steps for the snapshot procedure is followed and state is restored by making requests to the kernel, the application snapshot\/restore framework, and the process management subsystem.","The present invention has been described generally as operating under or in cooperation with a TCP\/IP protocol, however, the virtual port multiplexing apparatus and method is capable of providing virtual port multiplexing for communications and data being transferred under substantially any communication protocol. For example, the present VPM system  is capable of providing port multiplexing for protocols which supports point-to-point data links.","Having disclosed exemplary embodiments and the best mode, modifications and variations may be made to the disclosed embodiments while remaining within the scope of the present invention as defined by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention, together with further advantages thereof, may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"P-00010","num":"00010"},"figref":"FIG. 1A"},{"@attributes":{"id":"P-00011","num":"00011"},"figref":"FIG. 1B"},{"@attributes":{"id":"P-00012","num":"00012"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00013","num":"00013"},"figref":["FIG. 3","FIG. 2"],"sub":"1-4 "},{"@attributes":{"id":"P-00014","num":"00014"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00015","num":"00015"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"P-00016","num":"00016"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00017","num":"00017"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"P-00018","num":"00018"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00019","num":"00019"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
