---
title: Controlling access to multiple memory zones in an isolated execution environment
abstract: The present invention provides a method, apparatus, and system for controlling memory accesses to multiple memory zones in an isolated execution environment. A processor having a normal execution mode and an isolated execution mode generates an access transaction. The access transaction is configured using a configuration storage that stores configuration settings. The configuration settings include a plurality of subsystem memory range settings defining memory zones. The access transaction also includes access information. A multi-memory zone access checking circuit, coupled to the configuration storage, checks the access transaction using at least one of the configuration settings and the access information. The multi-memory zone access checking circuit generates an access grant signal if the access transaction is valid.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06934817&OS=06934817&RS=06934817
owner: Intel Corporation
number: 06934817
owner_city: Santa Clara
owner_country: US
publication_date: 20031010
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["RELATED APPLICATION","BACKGROUND","DESCRIPTION","ARCHITECTURE OVERVIEW"],"p":["This application is a Continuation of Application No. 09\/618,489, filed Jul. 18, 2000, now issued as U.S. Pat. No. 6,633,963, which claims the benefit of U.S. Provisional Patent Application No. 60\/198,227 filed on Mar. 31, 2000.","1. Field of the Invention","This invention relates to microprocessors. In particular, the invention relates to processor security.","2. Description of Related Art","Advances in microprocessor and communication technologies have opened up many opportunities for applications that go beyond the traditional ways of doing business. Electronic commerce (E-commerce) and business-to-business (B2B) transactions are now becoming popular and are conducted throughout global markets at continuously increasing rates. Unfortunately, while modern microprocessor systems provide users convenient and efficient methods of doing business, communicating and transacting, they are also vulnerable for unscrupulous attacks. Examples of these attacks include virus, intrusion, security breach, and tampering, to name a few. Computer security, therefore, is becoming more and more important to protect the integrity of the computer systems and increase the trust of users.","Threats caused by unscrupulous attacks may be in a number of forms. An invasive remote-launched attack by hackers may disrupt the normal operation of a system connected to thousands or even millions of users. A virus program may corrupt code and\/or data of a single-user platform.","Existing techniques to protect against attacks have a number of drawbacks. Anti-virus programs can only scan and detect known viruses. Security co-processors or smart cards using cryptographic or other security techniques have limitations in speed performance, memory capacity, and flexibility. Further, redesigning operating systems creates software compatibility issues and requires tremendous investment in development efforts.","The present invention is a method, apparatus and system to control memory accesses to multiple memory zones in an isolated execution environment. A processor having a normal execution mode and an isolated execution mode generates an access transaction. The access transaction is configured using a configuration storage that stores configuration settings. The configuration settings include a plurality of subsystem memory range settings defining multiple memory zones. The access transaction also includes access information. A multi-memory zone access checking circuit, coupled to the configuration storage, checks the access transaction using at least one of the configuration settings and the access information. The multi-memory zone access checking circuit generates an access grant signal if the access transaction is valid.","In one embodiment, the configuration settings include an isolated setting, a plurality of subsystem memory range settings, and an execution mode word. The access information includes a physical address. The configuration storage includes a setting storage to store the isolated setting that defines an isolated memory area in a memory external to the processor. The isolated setting includes a base register, a mask register and a length register to store a base value, a mask value and a length value, respectively. A combination of at least two of the base, mask and length values can be used to form the isolated setting. The configuration storage further includes a subsystem memory range storage that stores the plurality of subsystem memory range settings. Each subsystem memory range setting defines a memory zone for a subsystem in the isolated memory area. Each subsystem memory range setting includes a subsystem mask value, a subsystem base value and a subsystem length value. A combination of at least two of the subsystem base, mask and length values can be used to define a memory zone. The subsystem memory range storage further includes ID values for each subsystem to identify each subsystem and the subsystem's associated memory zones as defined by the subsystem memory range setting. The configuration storage also includes a processor control register to store the execution mode word. The execution mode word is asserted as an execution mode word signal identifying a currently active subsystem and indicating that the processor is configured in the isolated execution mode. The isolated memory area is only accessible to the processor when it is configured in the isolated execution mode.","In one embodiment, the multi-memory zone access checking circuit includes a subsystem address detector. The subsystem address detector detects if the physical address is within a currently active subsystem's associated memory zone as defined by the subsystem memory range setting for the subsystem. If the physical address is within the subsystem's associated memory zone, the subsystem address detector generates a subsystem address matching signal. An access grant generator is coupled to the subsystem address detector and the processor control register. The access grant generator generates an access grant signal if both the subsystem address matching signal and the execution mode word signal, identifying the currently active subsystem operating in the isolated execution mode, are asserted. Thus, only if the physical address requested by a processor, operating in an isolated execution mode, is within the correct memory zone for the currently initialized subsystem will the access transaction be granted.","In the following description, for purposes of explanation, numerous details are set forth in order to provide a thorough understanding of the present invention. However, it will be appreciated to one skilled in the art that these specific details are not required in order to practice the present invention. In other instances, well-known electrical structures and circuits are shown in block diagram form in order not to obscure the present invention.","One principle for providing security in a computer system or platform is the concept of an isolated execution architecture. The isolated execution architecture includes logical and physical definitions of hardware and software components that interact directly or indirectly with an operating system of the computer system or platform. An operating system and the processor may have several levels of hierarchy, referred to as rings, corresponding to various operational modes. A ring is a logical division of hardware and software components that are designed to perform dedicated tasks within the operating system. The division is typically based on the degree or level of privilege, namely, the ability to make changes to the platform. For example, a ring- is the innermost ring, being at the highest level of the hierarchy. Ring- encompasses the most critical, privileged components. In addition, modules in Ring- can also access to lesser privileged data, but not vice versa. Ring- is the outermost ring, being at the lowest level of the hierarchy. Ring- typically encompasses users or applications level and has the least privilege protection. Ring- and ring- represent the intermediate rings with decreasing levels of privilege.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1A","b":["50","50","50","0","10","1","20","2","30","3","40","52","52","50","50","52"]},"Ring- includes two portions: a normal execution Ring- and an isolated execution Ring-. The normal execution Ring- includes software modules that are critical for the operating system, usually referred to as kernel. These software modules include primary operating system (e.g., kernel) , software drivers , and hardware drivers . The isolated execution Ring- includes an operating system (OS) nub  and a processor nub . The OS nub  and the processor nub  are instances of an OS executive (OSE) and processor executive (PE), respectively. The OSE and the PE are part of executive entities that operate in a protected environment associated with the isolated area  and the isolated execution mode. The processor nub loader  is a protected bootstrap loader code held within a chipset in the system and is responsible for loading the processor nub  from the processor or chipset into an isolated area as will be explained later.","Similarly, ring-, ring-, and ring- include normal execution ring-, ring-, ring-, and isolated execution ring-, ring-, and ring-, respectively. In particular, normal execution ring- includes N applications to and isolated execution ring- includes K applets to .","One concept of the isolated execution architecture is the creation of an isolated region in the system memory, referred to as an isolated area, which is protected by both the processor and chipset in the computer system. The isolated region may also be in cache memory, protected by a translation look aside (TLB) access check. Access to this isolated region is permitted only from a front side bus (FSB) of the processor, using special bus (e.g., memory read and write) cycles, referred to as isolated read and write cycles. The special bus cycles are also used for snooping. The isolated read and write cycles are issued by the processor executing in an isolated execution mode. The isolated execution mode is initialized using a privileged instruction in the processor, combined with the processor nub loader . The processor nub loader  verifies and loads a ring- nub software module (e.g., processor nub ) into the isolated area. The processor nub  provides hardware-related services for the isolated execution.","One task of the processor nub  is to verify and load the ring- OS nub  into the isolated area, and to generate the root of a key hierarchy unique to a combination of the platform, the processor nub , and the operating system nub . The processor nub  provides the initial set-up and low-level management of the isolated area including verification, loading, and logging of the operating system nub , and the management of a symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware.","The operating system nub  provides links to services in the primary OS  (e.g., the unprotected segments of the operating system), provides page management within the isolated area, and has the responsibility for loading ring- application modules , including applets to , into protected pages allocated in the isolated area. The operating system nub  may also load ring- supporting modules.","The operating system nub  may choose to support paging of data between the isolated area and ordinary (e.g., non-isolated) memory. If so, then the operating system nub  is also responsible for encrypting and hashing the isolated area pages before evicting the page to the ordinary memory, and for checking the page contents upon restoration of the page. The isolated mode applets to and their data are tamper-resistant and monitor-resistant from all software attacks from other applets, as well as from non-isolated-space applications (e.g., to ), dynamic link libraries (DLLs), drivers and even the primary operating system . Only the processor nub  or the operating system nub  can interfere with or monitor the applet's execution.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1B","b":["10","0","10","3","40","50","60"]},"The accessible physical memory  includes an isolated area  and a non-isolated area . The isolated area  includes applet pages  and nub pages . The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system and processor operating in isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and processor.","The normal execution ring- including the primary OS , the software drivers , and the hardware drivers , can access both the OS pages  and the application pages . The normal execution ring-, including applications , to , can access only to the application pages . Both the normal execution ring- and ring-, however, cannot access the isolated area .","The isolated execution ring-, including the OS nub  and the processor nub , can access both the isolated area , including the applet pages  and the nub pages , and the non-isolated area , including the application pages  and the OS pages . The isolated execution ring-, including applets to , can access only to the application pages  and the applet pages . The applets to reside in the isolated area .",{"@attributes":{"id":"p-0034","num":"0033"},"figref":["FIG. 1C","FIG. 1B","FIG. 1C"],"b":["70","75","75","0","10","3","40","50","60","60","70","80","70","75","75","75","71","75","75"],"sub":["0","N","0","N","0 ","1","n"]},"To support the multiple subsystems, one of the subsystems is defined as the master subsystem . As illustrated in , for exemplary purposes, the master subsystem  resides in master memory zone-and includes the processor nub  (processor executive (PE)) as processor nub pages . The processor nub  is loaded into one portion of the master memory zone-. The master subsystem  is configured to include the entire isolated memory area  allowing it to control the memory used by the other zones. All other subsystems are configured as subsets of the master subsystem  and exclude the memory used by the processor nub . The master subsystem  is delegated with managing and creating the other subsystems and the other multiple memory zones (-). Particularly, the processor nub code executing in the master subsystem  provides the management and maintenance functions for the other subsystems such as allocating, configuring, initializing, and cleaning up the other memory zones. The master subsystem  is the only subsystem that can create additional subsystems by defining memory zones (e.g. -) in the isolated memory area . Also, only code executing from the master subsystem may change the configuration of the other subsystems. Further, no subsystem can examine or modify the contents of the master subsystem  or any other subsystem.","As shown in , the present invention can have N number of memory zones to support N number of subsystems operating with N number of operating systems (OS's) and their corresponding OS nubs . Accordingly, the isolated memory area  can include multiple memory zones (-) each of which is associated with an operating system to define a subsystem. Only one memory zone and operating system is active at a time. Each OS nub corresponds to either the primary OS  or one of the multiple OS's , respectively. For example, a first subsystem could reside in memory zone-and includes the OS nub- pages and applet pages . As an example, the OS nub- pages could correspond to the OS nub for the primary OS  which could be, for example, a Windows\u2122 operating system. Further, a second subsystem may reside in memory zone-and includes one of the multiple OS nubs  as OS nub- pages and applet pages . As an example, a Linux\u2122 operating system could be a second subsystem residing in memory zone-. Furthermore, other operating systems can be located in the other remaining memory zones -.","The non-isolated area  includes application pages  and operating system pages . The isolated area  is accessible only to elements of the operating system that is currently associated with the initialized subsystem and when the processor is operating in the isolated execution mode. The non-isolated area  is accessible to all elements of the ring- operating system and processor.","The normal execution ring- includes the primary OS , other multiple OS's , the software drivers , and the hardware drivers , all of which can access both the OS pages  and the application pages . The normal execution ring-, including applications  to N, can access only the application pages . Both the normal execution ring- and ring-, however, cannot access the isolated area .","The isolated execution ring- includes the OS nubs  and the processor nub . Only the currently active subsystem associated with a particular memory zone (-) in the isolated memory area , as previously discussed, can access that memory zone and its associated OS Nub pages (-) and applet pages (-). Further, no subsystem can examine or modify the contents of the master subsystem  or any other subsystem. However, the isolated execution ring-, including the OS nubs  and the processor nub , can access the non-isolated area , including the application pages  and the OS pages . Also, the isolated execution ring-, including applets to , can access the application pages .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1D","b":["100","100","110","120","130","140","150","160","170","175","180","182","184","186","130","150","130","100"]},"The processor  represents a central processing unit of any type of architecture, such as complex instruction set computers (CISC), reduced instruction set computers (RISC), very long instruction word (VLIW), or hybrid architecture. In one embodiment, the processor  is compatible with an Intel Architecture (IA) processor, such as the Pentium\u00ae processor series, the IA-32\u2122 and the IA-64\u2122. The processor  includes a normal execution mode  and an isolated execution circuit . The normal execution mode  is the mode in which the processor  operates in a non-protected environment, or a normal environment without the security features provided by the isolated execution mode. The isolated execution circuit  provides a mechanism to allow the processor  to operate in an isolated execution mode. The isolated execution circuit  provides hardware and software support for the isolated execution mode. This support includes configuration for isolated execution, definition of an isolated area, definition (e.g., decoding and execution) of isolated instructions, generation of isolated access bus cycles, and generation of isolated mode interrupts.","In one embodiment, the computer system  can be a single processor system, such as a desktop computer, which has only one main central processing unit, e.g. processor . In other embodiments, the computer system  can include multiple processors, e.g. processors , , , etc., as shown in FIG. D. Thus, the computer system  can be a multi-processor computer system having any number of processors. For example, the multi-processor computer system  can operate as part of a server or workstation environment. The basic description and operation of processor  will be discussed in detail below. It will be appreciated by those skilled in the art that the basic description and operation of processor  applies to the other processors and , shown in , as well as any number of other processors that may be utilized in the multi-processor computer system  according to one embodiment of the present invention.","The processor  may also have multiple logical processors. A logical processor, sometimes referred to as a thread, is a functional unit within a physical processor having an architectural state and physical resources allocated according to some partitioning policy. Within the context of the present invention, the terms \u201cthread\u201d and \u201clogical processor\u201d are used to mean the same thing. A multi-threaded processor is a processor having multiple threads or multiple logical processors. A multi-processor system (e.g., the system comprising the processors , , and ) may have multiple multi-threaded processors.","The host bus  provides interface signals to allow the processor  or processors , , and to communicate with other processors or devices, e.g., the MCH . In addition to normal mode, the host bus  provides an isolated access bus mode with corresponding interface signals for memory read and write cycles when the processor  is configured in the isolated execution mode. The isolated access bus mode is asserted on memory accesses initiated while the processor  is in the isolated execution mode. The isolated access bus mode is also asserted on instruction pre-fetch and cache write-back cycles if the address is within the isolated area address range and the processor  is initialized in the isolated execution mode. The processor  responds to snoop cycles to a cached address within the isolated area address range if the isolated access bus cycle is asserted and the processor  is initialized into the isolated execution mode.","The MCH  provides control and configuration of memory and input\/output devices such as the system memory  and the ICH . The MCH  provides interface circuits to recognize and service isolated access assertions on memory reference bus cycles, including isolated memory read and write cycles. In addition, the MCH  has memory range registers (e.g., base and length registers) to represent the isolated area in the system memory . Once configured, the MCH  aborts any access to the isolated area that does not have the isolated access bus mode asserted.","The system memory  stores system code and data. The system memory  is typically implemented with dynamic random access memory (DRAM) or static random access memory (SRAM). The system memory  includes the accessible physical memory  (shown in FIG. B). The accessible physical memory includes a loaded operating system , the isolated area  (shown in FIG. B), and an isolated control and status space . The loaded operating system  is the portion of the operating system that is loaded into the system memory . The loaded OS  is typically loaded from a mass storage device via some boot code in a boot storage such as a boot read only memory (ROM). The isolated area , as shown in , is the memory area that is defined by the processor  when operating in the isolated execution mode. Access to the isolated area  is restricted and is enforced by the processor  and\/or the MCH  or other chipset that integrates the isolated area functionalities. The isolated control and status space  is an input\/output (I\/O)-like, independent address space defined by the processor  and\/or the MCH . The isolated control and status space  contains mainly the isolated execution control and status registers. The isolated control and status space  does not overlap any existing address space and is accessed using the isolated bus cycles. The system memory  may also include other programs or data which are not shown.","The ICH  represents a known single point in the system having the isolated execution functionality. For clarity, only one ICH  is shown. The system  may have many ICH's similar to the ICH . When there are multiple ICH's, a designated ICH is selected to control the isolated area configuration and status. In one embodiment, this selection is performed by an external strapping pin. As is known by one skilled in the art, other methods of selecting can be used, including using programmable configuring registers. The ICH  has a number of functionalities that are designed to support the isolated execution mode in addition to the traditional I\/O functions. In particular, the ICH  includes an isolated bus cycle interface , the processor nub loader  (shown in FIG. A), a digest memory , a cryptographic key storage , an isolated execution logical processing manager , and a token bus interface .","The isolated bus cycle interface  includes circuitry to interface to the isolated bus cycle signals to recognize and service isolated bus cycles, such as the isolated read and write bus cycles. The processor nub loader , as shown in , includes a processor nub loader code and its digest (e.g., hash) value. The processor nub loader  is invoked by execution of an appropriate isolated instruction (e.g., Iso-Init) and is transferred to the isolated area . From the isolated area , the processor nub loader  copies the processor nub  from the system flash (e.g., the processor nub code  in non-volatile memory ) into the isolated area , verifies and logs its integrity, and manages a symmetric key used to protect the processor nub's secrets. In one embodiment, the processor nub loader  is implemented in read only memory (ROM). For security purposes, the processor nub loader  is unchanging, tamper-resistant and non-substitutable. The digest memory , typically implemented in RAM, stores the digest (e.g., hash) values of the loaded processor nub , the operating system nub , and any other critical modules (e.g., ring- modules) loaded into the isolated execution space. The cryptographic key storage  holds a symmetric encryption\/decryption key that is unique for the platform of the system . In one embodiment, the cryptographic key storage  includes internal fuses that are programmed at manufacturing. Alternatively, the cryptographic key storage  may also be created with a random number generator and a strap of a pin. The isolated execution logical processing manager  manages the operation of logical processors operating in isolated execution mode. In one embodiment, the isolated execution logical processing manager  includes a logical processor count register that tracks the number of logical processors participating in the isolated execution mode. The token bus interface  interfaces to the token bus . A combination of the processor nub loader digest, the processor nub digest, the operating system nub digest, and optionally additional digests, represents the overall isolated execution digest, referred to as an isolated digest. The isolated digest is a fingerprint identifying the ring- code controlling the isolated execution configuration and operation. The isolated digest is used to attest or prove the state of the current isolated execution.","The non-volatile memory  stores non-volatile information. Typically, the non-volatile memory  is implemented in flash memory. The non-volatile memory  includes the processor nub .","The processor nub  provides the initial set-up and low-level management of the isolated area  (in the system memory ), including verification, loading, and logging of the operating system nub , and the management of the symmetric key used to protect the operating system nub's secrets. The processor nub  may also provide application programming interface (API) abstractions to low-level security services provided by other hardware. The processor nub  may also be distributed by the original equipment manufacturer (OEM) or operating system vendor (OSV) via a boot disk.","The mass storage device  stores archive information such as code (e.g., processor nub ), programs, files, data, applications (e.g., applications to ), applets (e.g., applets to ) and operating systems. The mass storage device  may include compact disk (CD) ROM , floppy diskettes , and hard disk , and any other magnetic or optic storage devices. The mass storage device  provides a mechanism to read machine-readable media.","I\/O devices  may include any I\/O devices to perform I\/O functions. Examples of I\/O devices  include controller for input devices (e.g., keyboard, mouse, trackball, pointing device), media card (e.g., audio, video, graphics), network card, and any other peripheral controllers.","The token bus  provides an interface between the ICH  and various tokens in the system. A token is a device that performs dedicated input\/output functions with security functionalities. A token has characteristics similar to a smart card, including at least one reserved-purpose public\/private key pair and the ability to sign data with the private key. Examples of tokens connected to the token bus  include a motherboard token , a token reader , and other portable tokens  (e.g., smart card). The token bus interface  in the ICH  connects through the token bus  to the ICH  and ensures that when commanded to prove the state of the isolated execution, the corresponding token (e.g., the motherboard token , the token ) signs only valid isolated digest information. For purposes of security, the token should be connected to the digest memory.","When implemented in software, the elements of the present invention are the code segments to perform the necessary tasks. The program or code segments can be stored in a machine readable medium, such as a processor readable medium, or transmitted by a computer data signal embodied in a carrier wave, or a signal modulated by a carrier, over a transmission medium. The \u201cprocessor readable medium\u201d may include any medium that can store or transfer information. Examples of the processor readable medium include an electronic circuit, a semiconductor memory device, a ROM, a flash memory, an erasable programmable ROM (EPROM), a floppy diskette, a compact disk CD-ROM, an optical disk, a hard disk, a fiber optic medium, a radio frequency (RF) link, etc. The computer data signal may include any signal that can propagate over a transmission medium such as electronic network channels, optical fibers, air, electromagnetic, RF links, etc. The code segments may be downloaded via computer networks such as the Internet, Intranet, etc.","Controlling Access to Multiple Memory Zones in an Isolated Execution Environment",{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 2A","FIG. 1D"],"b":["115","115","205","220"]},"The core execution circuit  includes an instruction decoder and execution unit  and a translation lookaside buffer (TLB) . The instruction decoder and execution unit  receives an instruction stream  from an instruction fetch unit. The instruction stream  includes a number of instructions. The instruction decoder and execution unit  decodes the instructions and executes the decoded instructions. These instructions may be at the micro- or macro-level. The instruction decoder and execution unit  may be a physical circuit or an abstraction of a process of decoding and execution of instructions. In addition, the instructions may include isolated instructions and non-isolated instructions. The instruction decoder and execution unit  generates a virtual address  when there is an access transaction, caused by the execution of instructions. The TLB  translates the virtual address  into a physical address.","The core execution circuit  interfaces with the access manager  via control\/status information , operand , and access information . The control\/status information  includes control bits to manipulate various elements in the access manager  and status data from the access manager . The operand  includes data to be written to and read from the access manager . The access information  includes address (e.g., the physical address provided by the TLB ), read\/write, and access type information.","The access manager  receives and provides the control\/status information  and the operand , and receives the access information  from the core execution circuit  as a result of instruction execution, and further receives an external isolated access signal  from another processor in the system. The external isolated access signal  is asserted when another processor in the system attempts to access the isolated memory area. The access manager  generates a processor isolated access signal  and an access grant signal . The processor isolated access signal  may be used to generate an isolated bus cycle sent to devices (e.g., chipsets) external to the processor  to indicate that the processor  is executing an isolated mode instruction. The processor isolated access signal  and the access grant signal  may also be used internally by the processor  to control and monitor other isolated or non-isolated activities.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":["FIG. 2B","FIG. 2A"],"b":["220","220","250","270","220","224","226","205","2","220","278","2","226","282","284","286","226","110","286"]},"The configuration storage  stores configuration parameters to configure an access transaction generated by the processor . The processor  has a normal execution mode and an isolated execution mode. The access transaction includes access information  as discussed above. The configuration storage  receives the operand  from the instruction decoder and execution unit  () and includes a processor control register , an isolated setting register , and an isolated subsystem memory range setting register . The processor control register  contains an execution mode word . The execution mode word  is asserted as an execution mode word signal when the processor  is configured in the isolated execution mode. In one embodiment, the execution mode word  stores the ID of the currently active subsystem operating in the isolated execution mode or an indicator that the processor is not currently in isolated execution mode.","The isolated setting register  contains an isolated setting . The isolated setting  defines the isolated memory area (e.g. the isolated area  in the accessible physical memory  shown in FIGS. B and C). The isolated setting register  includes a mask register , a base register , and a length register . The mask register  stores an isolated mask value . The base register  stores an isolated base value . The length register  stores an isolated length value . The isolated mask, base, and length values , , and  form the isolated setting  and are used to define the isolated memory area. The isolated memory area may be defined by using any combination of the mask, base, and length values ,  and . For example, the base value  corresponds to the starting address of the isolated memory area, while the sum of the base value  and the length value  corresponds to the ending address of the isolated memory area.","The isolated subsystem memory range setting register  stores the isolated subsystem memory range settings . The isolated subsystem memory range settings  can be represented as a table having a plurality of rows and columns that store the settings for the subsystems within the isolated area. This table may represent the settings for all the possible subsystems in the isolated memory area, or it may represent a cache of settings for selected subsystems. Each row corresponds to a different subsystem and has a number of column entries that describe the subsystem and the subsystem's associated memory zone (-) in the isolated memory area  (FIG. C). Each row includes an ID value , an entry attribute , a subsystem range setting , and an entry context . The ID value is a unique identifier for each subsystem. The entry attribute  includes a plurality of values including page size (such as large or normal sized), read or write access, and a master subsystem flag.","Each subsystem identified by the isolated subsystem memory range settings  includes a subsystem range setting  having a subsystem mask value, a subsystem base value, and a subsystem length value, as will be discussed in more detail, that defines a memory zone (-) for a respective subsystem in the isolated memory area  (FIG. C). Each subsystem identified by the isolated subsystem memory range settings  also includes an entry context . The entry context  is used for entry by a subsystem into its associated memory zone for isolated execution.","One subsystem is defined as the master subsystem, and given a pre-defined fixed ID . This master subsystem is configured to include the entire isolated memory area. The processor nub is loaded into one portion of the master subsystem memory. All other subsystems are configured as subsets of the master subsystem, and exclude the memory used by the processor nub. The code executing in the master subsystem provides the management and maintenance functions for the other subsystems. Only code executing from the master subsystem may change the content of the isolated subsystem memory range setting register , thereby changing the configuration of the other subsystems.","When a master subsystem is initialized it fills in a row of the isolated subsystem memory range setting register  for itself including: setting its predetermined ID value , setting the master subsystem flag as a fixed entry in the entry attributes  to identify itself as the master subsystem, defining its associated memory zone using the subsystem range setting , and setting its entry address in the entry context . The isolated subsystem memory range setting register  is controlled by the master subsystem executive which corresponds to the processor nub  (or processor executive (PE)) of the master subsystem  (FIG. C). As the master subsystem initializes new subsystems it creates new rows in the isolated subsystem memory range setting register  defining each new subsystem.","To pass control from a first subsystem to a second subsystem, a subsystem control change instruction is issued. The subsystem control change instruction uses the second subsystem ID which is called as a parameter. The processor checks the IDs  of the isolated subsystem memory range settings  for a match, and if a match is found, the processor extracts the subsystem range setting  (e.g. subsystem mask value, subsystem base value, and subsystem length value to define the memory zone of the second subsystem) and the entry context field  of the second subsystem and copies them into the current subsystem range setting configuration register  and the current entry context configuration register , respectively. These new configuration registers represent the configuration for the currently active subsystem, and are used to drive the multi-memory zone access checking circuit , as will be discussed.","The current subsystem range setting configuration register  includes a subsystem mask register , a subsystem base register , and a subsystem length register . The subsystem mask register  stores a subsystem mask value . The subsystem base register  stores a subsystem base value . The subsystem length register  stores a subsystem length value . The memory zone (-) of the isolated memory area  () for the currently active subsystem may be defined by any combination of the subsystem mask, base, and length values , , and . For example, the base value  corresponds to the starting address of the memory zone for the currently active subsystem, while the sum of the base value  and the length value  corresponds to the ending address of the memory zone for the currently active subsystem. The current entry context configuration register  includes an entry frame register  to store an entry frame address  copied from the entry context field . The entry address  is the physical address of the entry frame.","The processor can then enter into an isolated execution mode (e.g. iso_enter) under the control of the second subsystem. To do this, the processor loads an entry frame into a frame register set. The entry frame is pointed to by the entry address  in the entry frame register . The processor is now configured in an isolated execution mode under the control of the second subsystem, which is now the currently active subsystem, the memory zone of which is identified by the values stored in the current subsystem range setting configuration register , as previously discussed.","However, if an ID match does not occur, and a corresponding row of the isolated subsystem memory range settings  does not exist for the second subsystem, the processor checks the isolated subsystem memory range settings  for the master subsystem, which is identified by the set master subsystem flag in the entry attributes . The processor loads the parameters of the corresponding row of the subsystem isolated subsystem memory range settings  for the master subsystem and passes control to the master subsystem. Upon entry of the master subsystem, the processor determines that the second subsystem parameter ID is not for the master subsystem, but a different subsystem. If the second subsystem exists, the master subsystem defines the second subsystem in the isolated subsystem memory range settings  by creating a new row for the second subsystem. If the memory range setting register  is a cache, with fewer entries than the possible subsystems, and there are no unused entries available, then the master subsystem may evict one of the existing entries to replace it with the new row for the second subsystem. Only the master subsystem entry cannot be replaced. Control is then passed from the master subsystem (i.e. the first subsystem) to the second subsystem as previously discussed. However, if the second subsystem does not exist, the processor generates a failure or fault condition.","The multi-memory zone access checking circuit  checks the access transaction using at least one of the configuration parameters (e.g. the execution mode word  and the current subsystem range setting configuration ) and the access information . The multi-memory zone access checking circuit  generates the processor isolated access signal  and the access grant signal . The processor isolated access signal  is asserted when the processor  attempts a memory access to a physical address within the isolated memory area . The access grant signal  indicates whether a memory access request can be granted. The access grant signal  is asserted if the requested memory address is outside the isolated memory range, OR, the processor is currently executing in isolated mode AND the address is within the currently active isolated subsystem memory range.",{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 3","b":["270","270","310","311","315"]},"The isolated area address detector  receives the isolated setting  (e.g., the isolated mask value , the isolated base value , the isolated length value ) from the configuration storage  in FIG. B. The isolated area address detector  detects if the physical address  is within the isolated memory area defined by the isolated setting . The isolated area address detector  includes a masking element , a comparator , and a combiner . The masking element  masks the physical address  with the isolated mask value . In one embodiment, the masking element  performs a logical AND operation. The comparator  compares the result of the masking operation done by the masking element  and the isolated base value , and generates a comparison result. In other embodiments, the comparator  can also use the isolated length value  in generating the comparison result. The combiner  combines the comparison result with other conditions to generate the processor isolated access signal . The processor isolated access signal  is asserted when the physical address  is within the isolated memory area as defined by the isolated mask and base values  and , and in some embodiments, the length value .","The subsystem address detector  receives the values of the current subsystem range setting configuration register  (e.g., the isolated subsystem mask value , the isolated subsystem base value , and the isolated subsystem length value ) from the configuration storage  in FIG. B and receives access information  (e.g. a physical address ). The subsystem address detector  detects if the physical address  is within a subsystem's associated memory zone as defined by the values of the current subsystem range setting configuration . The subsystem address detector  includes a masking element , a comparator , and a combiner . The masking element  masks the physical address  with the subsystem mask value . In one embodiment, the masking element  performs a logical AND operation. The comparator  compares the result of the masking operation done by the masking element  and the subsystem base value , and generates a comparison result. In other embodiments, the comparator  can also use the isolated length value  in generating the comparison result. The combiner  combines the comparison result with other conditions to generate a subsystem address matching signal . The subsystem address matching signal  is asserted when the physical address  is within a currently active subsystem's associated memory zone (-) as defined by the values of the current subsystem range setting configuration .","The access grant generator  combines the subsystem address matching signal , the execution mode word , and the processor isolated access signal  to generate the access grant signal . The access grant signal  indicates whether a memory access request can be granted. The access grant signal  is asserted and a memory access is granted, if the requested memory address is outside the isolated memory area , OR, the processor is currently executing in isolated mode AND the address is within the currently active isolated subsystem memory range. For example, when the processor isolated access signal  is not asserted, the requested physical address is outside the isolated memory range and the access grant signal  is asserted to grant a memory access to the non-isolated memory area. Alternatively, the access grant signal  is asserted when the processor isolated access signal  is asserted and both the subsystem address matching signal  and the execution mode word  for the currently active subsystem are asserted. This indicates that an isolated access to the memory zone in the isolated memory area for the currently active subsystem is valid or allowed as configured. In one embodiment, the access grant generator  performs a logical AND operation of these signals. Thus, only if the physical address requested by a processor, operating in an isolated execution mode, is within the correct memory zone for the currently active subsystem will the access transaction be granted.",{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 4","b":"400"},"Upon START, the process  defines as an isolated memory area using the isolated setting (e.g., isolated mask value, isolated base value, and length value) (block ). Next, the process  defines isolated memory zones for each subsystem in the isolated memory area using isolated subsystem range settings (e.g., subsystem mask and base values, ID's, entry attributes, and entry contexts) (block ). Then, the process  receives access information from an access transaction. The access information includes a physical address as provided by the Translation Lookaside Buffer and access type (block ). The process  then determines if the physical address is within the isolated memory area (block ). If not, then the process  generates an access grant signal for normal execution (block ).","If the physical address does fall within the isolated area of memory, then the process  determines whether the physical address falls within the memory zone of the isolated memory area for the currently active subsystem (block ). If not, the process  generates a failure or fault condition (block ). However, if the physical address does fall within the memory zone for the currently active subsystem, then the process  determines if the execution mode word signal is asserted for the currently active subsystem (block ). If not, the process  generates a failure or fault condition (block ). Otherwise, the process generates an access grant signal to the memory zone for the currently active subsystem for isolated execution (block ). The process  is then terminated. Thus, only if the physical address requested by a processor, operating in an isolated execution mode, is within the correct memory zone for the currently active subsystem will the access transaction be granted.","While this invention has been described with reference to illustrative embodiments, this description is not intended to be construed in a limiting sense. Various modifications of the illustrative embodiments, as well as other embodiments of the invention, which are apparent to persons skilled in the art to which the invention pertains are deemed to lie within the spirit and scope of the invention."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The features and advantages of the present invention will become apparent from the following detailed description of the present invention in which:",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 1C","FIG. 1B"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 2A","FIG. 1D"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2B","FIG. 2A"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
