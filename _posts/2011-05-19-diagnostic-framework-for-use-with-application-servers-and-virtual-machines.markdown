---
title: Diagnostic framework for use with application servers and virtual machines
abstract: Described herein are systems and methods for providing diagnostic information between an application server (e.g., a WebLogic server), and a virtual machine (VM) (e.g., a JRockit VM). In accordance with an embodiment, the system includes a diagnostic monitoring component adapted to obtain diagnostic data indicative of all available data on an application server, including diagnostic information from one or more application server components running on the application server, obtain diagnostic data from the virtual machine, and persists the diagnostic data obtained from the application server and the virtual machine into a diagnostic data image file. The system further includes a console that provides access to the diagnostic data persisted into the diagnostic image file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645764&OS=08645764&RS=08645764
owner: Oracle International Corporation
number: 08645764
owner_city: Redwood Shores
owner_country: US
publication_date: 20110519
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM OF PRIORITY","COPYRIGHT NOTICE","FIELD OF INVENTION","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application claims the benefit of priority to U.S. Provisional Patent Application No. 61\/424,588, titled \u201cDIAGNOSTIC FRAMEWORK FOR USE WITH APPLICATION SERVERS AND VIRTUAL MACHINES\u201d, filed Dec. 17, 2010, which is herein incorporated by reference.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","Embodiments of the present invention are generally related to computer systems and application servers, and are particularly related to systems and methods for providing diagnostic information between an application server and a virtual machine or other system.","Enterprise-class computer servers are becoming increasingly sophisticated and complex, which poses a greater need to monitor system health, and prevent unintended system interruptions. Traditionally, system administrators log system activity, and use this knowledge to estimate system health. However, this approach is not as useful in fast-changing environments, which may include application servers and virtual machines. These are the areas that embodiments of the invention are intended to address.","Described herein are systems and methods for providing diagnostic information between an application server (e.g., a WebLogic server), and a virtual machine (VM) (e.g., a JRockit VM). In accordance with an embodiment, the system includes a diagnostic monitoring component adapted to obtain diagnostic data indicative of all available data on an application server, including diagnostic information from one or more application server components running on the application server, obtain diagnostic data from the virtual machine, and persists the diagnostic data obtained from the application server and the virtual machine into a diagnostic data image file. The system further includes a console that provides access to the diagnostic data persisted into the diagnostic image file.","Described herein are systems and methods for providing diagnostic information between an application server (e.g., a WebLogic server), and a virtual machine (VM) (e.g., a JRockit VM). In accordance with an embodiment, the system includes a diagnostic monitoring component adapted to obtain diagnostic data indicative of all available data on an application server, including diagnostic information from one or more application server components running on the application server, obtain diagnostic data from the virtual machine, and persists the diagnostic data obtained from the application server and the virtual machine into a diagnostic data image file. The system further includes a console that provides access to the diagnostic data persisted into the diagnostic image file.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 1","FIG. 1"],"b":["106","110","112","114"]},"In accordance with an embodiment, diagnostic information can also be provided from the application server (e.g., a WebLogic Application server)  or components on the application server such as EJBs , web applications , JDBC , JTA , WS  and other resources  to the diagnostic monitoring component. For example, the diagnostic framework instrumentation configuration , instrumentation engine , and monitors and actions groups , can be configured to obtain diagnostic information from the application server and\/or the application server components. A producer API  can be used to obtain such diagnostic information and feed it to, e.g., the JRockit Flight Recorder, for further use by that product.","In accordance with an embodiment, diagnostic information at the diagnostic monitoring component can be captured as a separate file having a file name of, e.g., \u201cJRockitFlightRecorder.jfr\u201d. The diagnostic image file then contains the diagnostic information from the diagnostic monitoring component (e.g., JRockit Flight Recorder), and the diagnostic information provided by the diagnostic framework (e.g., WLDF). The data from the diagnostic monitoring component can be defined in a unique format, e.g., a JRockit format, which can be directly consumed by tools understanding that format. The contents of the JRockitFlightRecorder.jfr can contain all available diagnostic information from the JRockit, and can depend on a data gathering volume used by the diagnostic monitoring component. If Flight Recording is not installed, or is disabled, the diagnostic image file  will contain only data obtained from the regular WLDF diagnostic framework.","In accordance with an embodiment, other monitoring and\/or data gathering components can use an extension  (e.g., a Dynamic Monitoring System Diagnostic Framework extension) to access and use the data gathering volumes provided by the diagnostic framework to monitor for and obtain diagnostic information regardless whether the diagnostic monitoring component is being used. For example, a monitoring system  (e.g., a dynamic monitoring system (DMS)) extension can plug in monitoring system specific actions (DMS Actions)  that are used to obtain diagnostic information at the application server and\/or the application server components regardless of whether the diagnostic monitoring component is being used or is enabled.","In accordance with an embodiment, a console  can be used to access the diagnostic image file using an image manager  (e.g., a Weblogic Scripting Tool Image Manager). The console can be a web interface (e.g., WebLogic Server Console), a scripting interface (e.g., WebLogic Server Scripting Tool), or another form of interface. In accordance with an embodiment, functions (e.g., Weblogic Scripting Tool functions) can be provided which can list available captured images and provide the ability to access the named images and named entries within them to named local files. For example, WLST function String [ ] getAvailableCapturedImages( ) returns an array of image names which identify the images and can include the file name of the image excluding the path. WLST function string saveDiagnosticImageCaptureFile(imageName, outputFile=None) can provide the ability to access the name images, where imageName is a String valued retrieved by getAvailableCapturedImages( ) and outputFile is the name of the local file to create which contains the diagnostic image capture data. In the defaulted case, the output file name can be the same as the imageName param on the client machine in the working directory of WLST, i.e., .\/imageName.","Capture Diagnostic Information from a Diagnostic Monitoring Component",{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},"The diagnostic information obtained and recorded by the WLDF diagnostic framework, similarly depends on a diagnostic framework data gathering volume. The data gathering volume of the diagnostic framework can be set in an off volume; low (default) volume; medium volume; or high volume.","In accordance with an embodiment, a consumer API such as a JRockit Flight Recorder API can be used to capture the diagnostic information at the diagnostic monitoring component provided from the virtual machine or from the diagnostic framework into a diagnostic framework image source, which can then be persisted into a diagnostic image file. The diagnostic information captured from the diagnostic monitoring component can be supplied to the diagnostic image file as a separate file having a file name of, e.g., \u201cJRockitFlightRecorder.jfr\u201d along with the diagnostic information provided directly from the diagnostic framework. The diagnostic image file then contains the diagnostic information from JRockit Flight Recorder, and the diagnostic information provided by WLDF. In accordance with an embodiment, the data from the diagnostic monitoring component can be defined in a unique format, e.g., a JRockit format, which can be directly consumed by tools understanding that format and can contain all available diagnostic information from the diagnostic monitoring component.","Provide Diagnostic Information to a Diagnostic Monitoring Component",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 3"},"The diagnostic information obtained and recorded by the WLDF diagnostic framework depends on a diagnostic framework data gathering volume.","For example, when the WLDF diagnostic framework data gathering volume is set in an off volume, no data is gathered or recorded from the application server and\/or application server components.","When the WLDF diagnostic framework data gathering volume is set in a low (default) volume, data marked as low volume will be gathered and recorded from the application server and\/or the application server components. Automatic severity based message recording will automatically record emergency, alert and critical messages that are logged.","When the WLDF diagnostic framework data gathering volume is set in a medium volume, data marked as low and medium will be gathered and recorded from the application server and\/or application server components. Automatic severity based message recording will automatically record error level and above messages that are logged.","When the WLDF diagnostic framework data gathering volume is set in a high volume, data marked as low, medium and high volumes will be gathered and recorded from the application server and\/or application server components. Automatic message based recording will not gather additional detail over what is gathered at medium volume, and will automatically record error and above messages that are logged.","In accordance with an embodiment, the diagnostic framework data gathering volume can be dynamically changed from one data gathering volume to another data gathering volume to change the scope of data gathered without having to restart the application server. In other words, the diagnostic volume setting is dynamic. By changing the diagnostic volume, the scope of collected diagnostic data can be changed without requiring the application server to be restarted.","In accordance with an embodiment, WLDF uses a WLDFServerDiagnosticMBean which can be extended to provide configuration to control the diagnostic framework diagnostic volume. For example, the WLDFServerDiagnosticMBean can be extended to include:",{"@attributes":{"id":"p-0028","num":"0027"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"public String OFF_VOLUME=\u201cOff\u201d;"},{"entry":"public String LOW_VOLUME=\u201cLow\u201d;"},{"entry":"public String MEDIUM_VOLUME=\u201cMedium\u201d;"},{"entry":"public String HIGH_VOLUME=\u201cHigh\u201d;"},{"entry":"\/**"},{"entry":"* <p>Specifies the volume of diagnostic data that is"},{"entry":"automatically"},{"entry":"produced by WebLogic Server at run time."},{"entry":"* Note that the WLDF diagnostic volume setting does not affect explicitly"},{"entry":"configured diagnostic modules."},{"entry":"* For example, this controls the volume of events generated for JRockit"},{"entry":"Flight Recorder.<\/p>"},{"entry":"* <p>This attribute has the following settings:<\/p>"},{"entry":"* <ul>"},{"entry":"* <li><code>Off<\/code> No diagnostic data is produced.<\/li>"},{"entry":"* <li><code>Low<\/code> Minimal amounts of automatic diagnostic"},{"entry":"data are"},{"entry":"produced. This is the default.<\/li>"},{"entry":"* <li><code>Medium<\/code> Additional diagnostic data is automatically"},{"entry":"generated beyond the amount generated for <code>Low<\/code>.<\/li>"},{"entry":"* <li><code>High<\/code> Additional diagnostic data"},{"entry":"is automatically"},{"entry":"generated beyond the amount generated for <code>Medium<\/code>.<\/li>"},{"entry":"* <\/ul>"},{"entry":"* @dynamic true"},{"entry":"* @return The diagnostic volume"},{"entry":"*\/"},{"entry":"public String getWLDFDiagnosticVolume( );"},{"entry":"\/**"},{"entry":"* <p>Specifies the volume of diagnostic data that is automatically"},{"entry":"produced by WebLogic Server at run time."},{"entry":"* Note that the WLDF diagnostic volume setting does not affect explicitly"},{"entry":"configured diagnostic modules."},{"entry":"* For example, this controls the volume of events generated for JRockit"},{"entry":"Flight Recorder.<\/p>"},{"entry":"* <p>This attribute has the following settings:<\/p>"},{"entry":"* <ul>"},{"entry":"* <li><code>Off<\/code> No diagnostic data is produced.<\/li>"},{"entry":"* <li><code>Low<\/code> Minimal amounts of automatic"},{"entry":"diagnostic data are"},{"entry":"produced. This is the default.<\/li>"},{"entry":"* <li><code>Medium<\/code> Additional diagnostic data is automatically"},{"entry":"generated beyond the amount generated for <code>Low<\/code>.<\/li>"},{"entry":"* <li><code>High<\/code> Additional diagnostic data is automatically"},{"entry":"generated beyond the amount generated for <code>Medium<\/code>.<\/li>"},{"entry":"* <\/ul>"},{"entry":"* @param mode Specifies the diagnostics volume"},{"entry":"* @see #getWLDFDiagnosticVolume"},{"entry":"* @default WLDFServerDiagnosticMBean.LOW_VOLUME"},{"entry":"* @legalValues WLDFServerDiagnosticMBean.OFF_VOLUME,"},{"entry":"WLDFServerDiagnosticMBean.LOW_VOLUME,"},{"entry":"WLDFServerDiagnosticMBean.MEDIUM_VOLUME,"},{"entry":"WLDFServerDiagnosticMBean.HIGH_VOLUME"},{"entry":"*\/"},{"entry":"public void setWLDFDiagnosticVolume(String volume);"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In accordance with an embodiment, diagnostic framework instrumentation related enhancements, such as server managed monitors, actions groups, actions and instrumentation configuration is provided by the diagnostic framework to support integration of the diagnostic monitoring component with the diagnostic framework. For example, instrumentation related enhancements can be used to modify application server component classes and\/or add additional code to get information about application server component behavior, e.g., to find out how an EJB is performing. The diagnostic framework identifies places in the application server components by named entities called monitors, which identifies a point of code entry in the application sever component, and an action identifies the structure of the code.","In accordance with an embodiment, diagnostic framework server managed monitors (e.g., WLDF monitors) are provided by the diagnostic framework to support integration of the diagnostic monitoring component with the diagnostic framework. These server managed monitors can be available at the server level configuration, regardless of whether there is a diagnostic module enabled. The enablement of these monitors is controlled using the diagnostic framework data gathering volume, and the data gathering level specified for the monitor. A Boolean attribute \u201cserver-managed\u201d can be added to the server managed monitor in the instrumentation configuration (e.g., WLDF instrumentation configuration). This setting allows system scoped monitors to indicate if they should be managed by the server configuration even when no diagnostic modules are configured or used. The default Boolean attribute is set to false. A setting of true can only be applied to monitors of server scope, and indicates that the monitor is always available to be enabled (based on the diagnostic framework diagnostic volume) regardless of whether the diagnostic framework system is enabled\/disabled. A string attribute \u201cdiagnostic-mode\u201d can be added to the monitor in the instrumentation configuration. This setting allows the monitor to indicate which diagnostic volume it can automatically be included in.","In accordance with an embodiment, action groups provided by the diagnostic framework allow other data gathering components (e.g., a Dynamic Monitoring System Diagnostic Framework extension) to use an extension to access and use the data gathering volumes provided by the diagnostic framework to monitor for, and obtain diagnostic data, regardless whether the diagnostic monitoring component is being used. For example, a monitoring system (e.g., a dynamic monitoring system (DMS)) extension can plug in monitoring system specific actions at the same points used by the diagnostic framework and capture diagnostic data regardless of whether the diagnostic monitoring component is being is enabled. In accordance with an embodiment, example action groups can be one of DataGatheringStatelessActions and DataGatheringAroundActions, and can be used to allow extensions to use the monitors.","In accordance with an embodiment, actions provided by the diagnostic framework can be provided to retrieve diagnostic data from the application server and\/or the application server components, and supply the data to the diagnostic monitoring component. In accordance with an embodiment, example actions include FlightRecorderAroundAction and FlightRecorderStatelessAction, and can be added into the corresponding action group.","In accordance with an embodiment, instrumentation configuration includes instrumentation grammar to provide a means to mark specific arguments and return values as being recorded. Additionally, the instrumentation grammar does not expose arguments or return values to actions by default. The instrumentation grammar can also mark specific arguments and return values as being allowed to be supplied to actions. Further, the instrumentation grammar can specify a custom Value Renderer for rendering arguments and return values of specified types.","In accordance with an embodiment, the instrumentation configuration schema can be extended to add optional wls-value-renderers, which is an optional list of custom Value Renders which can be used in the instrumentation configuration. A Value Render has a name, and the classname of the class which implements the ValueRender interface. Optionally the Value Render may specify the classname of the Type it should be used for if it is a type based Value Renderer. For example:",{"@attributes":{"id":"p-0035","num":"0034"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<wls-value-renderers>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<wls-renderer name=\u201dFooNoType\u201d"]},{"entry":[{},"className=\u201dcom.oracle.bar.Foo\u201d\/>"]},{"entry":[{},"<wls-renderer name=\u201dFooBarType\u201d"]},{"entry":[{},"className=\u201dcom.oracle.bar.FooBar\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"typeClassName=\u201dcom.oracle.bar.Bar\u201d\/>"]},{"entry":[{},"<\/wls-value-renderers>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The ValueRenderer can be used to transform parameter values, return values, and the \u201cthis\u201d value supplied to all actions in the Joinpoint. This applies to all actions, including existing instrumentation actions. In accordance with an embodiment, diagnostic framework internals can supply a default value renderer which can return the either the original Object, or a transformed Object. The default value render will always be applied before custom renderers are applied. The default renderer will always honor the \u201csensitive\u201d status of a value (default) by simply returning a special string. Custom value renderers are not required but add flexibility for rendering more complex values which are gathered and recorded.","In accordance with an embodiment, meta-operators are provided to the instrumentation configuration grammar for the Pointcut expression language which can be specified for the class, param's, and returnSpec's to indicate special processing. For example, the new meta-operators can include:\n\n","The default ValueRenderer can be applied to all values first. Custom renderers may be applied in addition, but they will be applied after the default renderer has been applied and must be defensively coded to check whether the object being supplied has been transformed (i.e., a custom renderer must not assume it is still the original type).","In accordance with an embodiment, the order in which a custom ValueRenderer is chosen is as follows: (1) if a named ValueRenderer is specified for a param or returnSpec, that ValueRenderer is used to render the value, (2) if a type-based ValueRenderer matches a param or returnSpec, that ValueRenderer is used to render the value. In accordance with an embodiment, if a value is \u201csensitive\u201d, \u201csensitive\u201d always is honored and the value is not rendered. For example, if an argument is sensitive (default) and has both \u201c#\u201d, and \u201c\u02dcname\u201d, the # and \u02dcname will be ignored.","In accordance with an embodiment, if more than one type based ValueRenderer can match a param or returnSpec, the most specific ValueRenderer will be used if one can be determined. In cases where this cannot be determined, the behavior in terms of which specific ValueRenderer is used to render the value will be undefined and one ValueRenderer will be selected. For example, provided that ClassA implements InterfaceX and InterfaceY, and provided that type based ValueRenderers for InterfaceX and InterfaceY is provided, then either ValueRenderer could match.","The diagnostic data to be gathered can be added to the Joinpoint that is supplied to the actions. The order in which parameter names supplied to diagnostic monitoring component events are determined as follows: (1) if an explicit parameter name was specified in the instrumentation configuration that will be used, (2) if no name was specified in the instrumentation configuration, and there is a symbolic name available for the parameter the symbolic name will be used, otherwise a name will be generated: \u201cparam_\u201d+parameter-index+\u201c_\u201d+param-.","In accordance with an embodiment, messages associated with events produced by the application server and\/or application server components can provide information about what occurs at runtime. The ability to select specific messages to record can be used to add valuable context into the diagnostic monitoring component using existing information. Additionally, being able to have messages recorded based on their severity level and the diagnostic framework data gathering volume adds valuable context. For example, a broad set of important messages can be recorded without making any changes to the message catalog and messages can be recorded not in the message catalog.","In accordance with an embodiment, the diagnostic framework can specify a message as a diagnostic monitoring component message in the message catalog, and\/or automatically record messages based on severity. For example, the message catalog can be extended to allow specific messages to be marked as being gathered and recorded by the diagnostic monitor component. Messages of any severity level can be marked in the message catalog with diagnosticmode=\u201clow\u201d to indicate they should be recorded if logged and if the diagnostic volume for the server matches. In accordance with an embodiment, diagnosticmode (off|default|medium|high) \u201coff\u201d can be added to the msgcat.dtd to add an optional string attribute named \u201cdiagnosticmode\u201d to the logmessage element, which defaults to \u201coff\u201d. Recording can be detected when the message is logged. In accordance with an embodiment, an example logged message is:",{"@attributes":{"id":"p-0044","num":"0046"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<logmessage"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"messageid=\u201c123456\u201d"]},{"entry":[{},"severity=\u201cinfo\u201d"]},{"entry":[{},"method=\u201clogSomethingInteresting( )\u201d"]},{"entry":[{},"methodtype=\u201cgetter\u201d"]},{"entry":[{},"diagnosticmode=\u201clow\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<messagebody> ...<\/messagebody>"]},{"entry":[{},"<messagedetail>...<\/messagedetail>"]},{"entry":[{},"<cause>... <\/cause>"]},{"entry":[{},"<action>... <\/action>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/logmessage>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In accordance with an embodiment, the diagnostic framework can automatically record messages of specific severity levels, based on the diagnostic framework data gathering volume setting. Messages with a level of \u201cemergency\u201d, \u201calert\u201d, or \u201ccritical\u201d can be recorded at diagnostic volumes: low, medium, and high. Messages with a level of \u201cerror\u201d or higher can be recorded at diagnostic volumes: medium, and high. In accordance with an embodiment, the recording of messages based on their severity takes precedence over the specific diagnosticmode attribute in the message catalog. For example, if an \u201cemergency\u201d message is marked with diagnosticmode=\u201coff\u201d, the emergency message can still be recorded. Setting the Diagnostic Volume on the WLDFServerDiagnosticMBean to \u201coff\u201d can disable recording messages based on severity.",{"@attributes":{"id":"p-0046","num":"0048"},"figref":"FIG. 4","b":["402","404"]},"At step , APIs are provided that can be used to both retrieve diagnostic information from, and provide diagnostic information to, the diagnostic monitoring component. For example, a consumer API is provided that can be used to capture diagnostic information from a diagnostic monitoring component into a diagnostic framework image source, which can then be persisted into a diagnostic image file on a computer readable storage medium or another type of medium. A producer API can be used by the diagnostic framework to provide diagnostic information to the diagnostic monitoring component from other sources, such as an application server, application server components and\/or enterprise manager (EM).","At step , diagnostic information indicative of all available data on an application server including diagnostic information from the one or more application server components is provided to the diagnostic monitoring component. At step , diagnostic information indicative of all available data at the virtual machine level is provided to the diagnostic monitoring component using the producer API. At step , the diagnostic data provided from the application server, application server components, and the virtual machine to the diagnostic monitoring component is persisted into a diagnostic data image file.","In accordance with an embodiment, the diagnostic information obtained from the diagnostic monitoring component can be defined in a unique format, e.g., a JRockit format, which can be directly consumed by tools understanding that format. In accordance with an embodiment, the diagnostic image file can contain both diagnostic information from the diagnostic monitoring component and diagnostic information obtained from a diagnostic framework. The diagnostic information obtained and recorded by the diagnostic framework can depend on a diagnostic framework data gathering volume. For example, the diagnostic framework data gathering volume can be set in an off, low, medium and high volume, which controls the amount of data recorded from the application server, application server components and\/or other data recording components by the diagnostic framework.","At step , the diagnostic information can be accessed, e.g., remotely or locally by other component. Additionally or alternatively, the diagnostic image file can be transmitted to an external component, such as an external diagnostic program or external monitor, to be analyzed. In accordance with an embodiment, the diagnostic image file can be copied in its entirety or a specific entry from within the diagnostic image can be copied to the external component or some other component. In accordance with an embodiment, a console can be used to remotely access the diagnostic image file having diagnostic information. The console can be a web interface (e.g., WebLogic Server Console), a scripting interface (e.g., WebLogic Server Scripting Tool), or another form of interface, and can used to copy the diagnostic image file on the application server or another producer which captured the diagnostic image file. Alternatively, the diagnostic image file can be accessed directly from the producer which captured the diagnostic image file.","Method Memory Allocation Actions","In accordance with an embodiment, a virtual machine (e.g., a JRockit JVM) can be used to track the total amount of memory allocated by a thread at the application server and provides an internal API to access this information. Diagnostic framework instrumentation can integrate with this API to track the memory allocated within method calls. In accordance with an embodiment, TraceMemoryAllocationAction and MethodMemoryAllocationStatisticsAction are actions which call the diagnostic monitoring component API to track memory allocation per method within the same thread. In accordance with an embodiment, TraceMemoryAllocationAction uses the diagnostic monitoring component API to trace the number of bytes allocated by that thread during a method call and can be used from Delegating and Custom Monitors. In accordance with an embodiment, MethodMemoryAllocationStatisticsAction uses the diagnostic monitoring component API that tracks the number of bytes allocated by that thread during a method call. Statistics will be kept, e.g., count, min, max, avg, sum, sum_of_squares, and std_deviation statistics, in-memory on the memory allocations. In accordance with an embodiment, the statistics are available through the WLDFInstrumentationRuntimeMBean when the diagnostic monitoring component is available.","The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer, computing device, machine, or microprocessor, including one or more processors, memory and\/or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure, as will be apparent to those skilled in the software art.","In some embodiments, the present invention includes a computer program product which is a storage medium or computer readable medium (media) having instructions stored thereon\/in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include, but is not limited to, any type of disk including floppy disks, optical discs, DVD, CD-ROMs, microdrive, and magneto-optical disks, ROMs, RAMs, EPROMs, EEPROMs, DRAMs, VRAMs, flash memory devices, magnetic or optical cards, nanosystems (including molecular memory ICs), or any type of media or device suitable for storing instructions and\/or data.","The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application, thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE FIGURES","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
