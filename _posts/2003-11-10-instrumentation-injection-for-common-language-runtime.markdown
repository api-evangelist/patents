---
title: Instrumentation injection for common language runtime
abstract: An exemplary media implementation precipitates a device to perform actions including: determining if an instruction of a line of common intermediate language (CIL) code meets a predetermined exception-related criterion; and if so, injecting a decision point in association with the instruction of the line of CIL code, the decision point enabling a decision as to whether an exception is to be thrown with respect to the instruction. An exemplary device implementation includes: instrumented CIL code that includes a test couplet corresponding to a decision point and an associated instruction, the associated instruction capable of causing a fault; a decision runtime library that is adapted to evaluate the test couplet to selectively decide whether to throw an exception with respect to the associated instruction; and a common language runtime component that interprets the decision point so as to call the decision runtime library prior to executing the associated instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07421682&OS=07421682&RS=07421682
owner: Microsoft Corporation
number: 07421682
owner_city: Redmond
owner_country: US
publication_date: 20031110
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This disclosure relates in general to reliability testing for code and in particular, by way of example but not limitation, to injecting instrumentation instructions into code with regard to a common language runtime (CLR) environment.","Computer programs impact every phase of modern life from communication to transportation, from entertainment to education, from finance to manufacturing, and so forth. As evident from personal productivity desktop applications, for example, features and abilities provided by computer programs are constantly expanding and increasing. Concomitantly, the size and complexity of such computer programs is also expanding and increasing. The larger size and greater complexity of modern computer programs present ever-increasing challenges to the software engineers that are responsible for producing error-less and trouble-free software code.","Some software engineers are charged with testing such software code to ensure high reliability. They attempt to test every facet of the software code in as many different operational phases and situations as possible, which is a daunting if not genuinely unbounded goal. Unfortunately, this reliability testing is further exacerbated by the multitude of different programming environments, each of which may introduce additional individual picayune requirements. Accordingly, there is a need for schemes and techniques that facilitate software code testing in one or more diverse programming environments, such as a CLR environment.","In an exemplary media implementation, one or more processor-accessible media include processor-executable instructions that, when executed, direct a device to perform actions including: determining if an instruction of a line of common intermediate language code meets a predetermined exception-related criterion; and if so, injecting a decision point in association with the instruction of the line of common intermediate language code, the decision point enabling a decision as to whether an exception is to be thrown with respect to the instruction.","In an exemplary device implementation, a device includes: instrumented common intermediate language code that includes a test couplet corresponding to a decision point and an associated instruction, the associated instruction capable of causing a fault; a decision runtime library that is adapted to evaluate the test couplet to selectively decide whether to throw an exception with respect to the associated instruction; and a common language runtime component that interprets the decision point so as to call the decision runtime library prior to executing the associated instruction.","Other method, system, apparatus, approach, application programming interface (API), device, procedure, media, scheme, technique, arrangement, etc. implementations are described herein.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","104","116","104","100","102","102","106","106"]},"Source code  undergoes compilation  to produce common intermediate language (CIL) code . Although not explicitly shown, compilation  of source code  also typically produces metadata for utilization in CLR environment .","CIL code  is usable as managed code in a CLR environment . In CLR environment , CIL code  is just-in-time (JIT) compiled  into native code . Native code  may be in a machine language that is processor-consumable for a particular device type. Thus, particular instruction lines of CIL code  are JIT compiled  by a CLR component  as the particular instruction lines are due to be executed or otherwise utilized.","Users prefer that CIL code  be errorless and trouble-free. Hence, a tester (which may be the same individual(s) as the developer of source code ) is tasked with verifying that any exceptions that may result from executing CIL code  are properly handled, to the extent reasonably possible or desired, without causing a program crash (e.g., without causing a failure of a CLR component ). In other words, loss of data, unintended program cessation, user confusion and\/or inconvenience, etc. may be minimized or at least reduced with proper and thorough testing. Enabling reliability testing  for the managed code of CIL code  in CLR environment  is therefore described below.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["116","208","212","110","202","204","202","110","208","206","204","204"]},"Specifically in a described implementation, for each line of CIL code  that includes an instruction which may cause an exception, transformation  causes a decision point  to be injected  thereat. Injecting  decision points  into CIL code  thus produces instrumented CIL code . Each decision point  serves as a bookmark for an instruction that may result in an exception and that can therefore be evaluated (e.g., considered for further analysis) during an execution phase of reliability testing.","In an execution phase of reliability testing, instrumented CIL code  is JIT compiled and executed . During execution , an exception can be selectively thrown  at each decision point  of instrumented CIL code . An exemplary instrumentation tool for injection  of decision points  is described further below with reference to . An exemplary decision point  is described further below with reference to . And an exemplary decision runtime library (DRL) for selectively throwing exceptions  is described further below with reference to .",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3","b":["116","304","208","206","304","206","208","204","204"]},"As illustrated, each line of code may include an instruction . If execution of instruction  can result in an exception, instrumentation tool  causes a decision point  to be injected  into instrumented CIL code  (e.g., immediately) prior to instruction .","Decision point  and instruction  together form a test couplet  that are evaluated during an execution phase of reliability testing. Instrumentation at the CIL instruction level, as opposed to at a source code level, can increase reliability testing flexibility, can expand the applicability of reliability testing to a greater number of languages without language-specific tailoring, can permit exception targeting to a finer degree, and so forth.","Generally, instrumentation tool  is capable of progressing through instrumented CIL code  and analyzing each instruction  thereof to determine if it meets a predetermined exception-related criterion. If so, instrumentation tool  is adapted to inject  a decision point  into instrumented CIL code  in association with instruction  (e.g., as a corresponding test couplet ).","In a described implementation, instrumentation tool  determines if each instruction  meets a predetermined exception-related criterion by determining if instruction  can result in an exception with reference to CIL specification . CIL specification , possibly in addition to other information, lists available and\/or possible instructions for CIL code  and indicates which instructions can result in an exception. Furthermore, CIL specification  indicates what type(s) of exceptions can be thrown for each listed instruction.","Using CIL specification  is one (relatively exhaustive) manner for determining whether a given instruction comports with a predetermined exception-related criterion. Alternatively, instructions may be considered as meeting the predetermined exception-related criterion if they are known to be prone to failure. For example, instructions that allocate memory are prone to resulting in exceptions. Memory allocation instructions include \u201cnewobj\u201d, \u201cbox\u201d, \u201ccallvirt\u201d, and so forth. Thus, memory allocations may be considered a category of likely exceptions. Other exception categories include security-related instructions, disk input\/output calls, arithmetic overflow, divide by zero, missing method exception, type load exception, and so forth.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":["FIG. 4","FIG. 5","FIG. 3"],"b":["206","206","206","402","404","404","204","104","402","302","308"]},"In a described implementation, bookmark entry  includes an instruction type indicator A and an identifier B. Instruction type indicator A indicates the type of instruction of the associated instruction . The instruction type may be indicated by a name, a numeral, an alphanumeric variable generally, some combination thereof, and so forth. Identifier B comprises a value that uniquely identifies each decision point . For example, identifier B may be formed from an incrementing counter.","An exemplary decision point  is described now in the context of a \u201cdivide instruction\u201d that can cause an exception if CIL code  attempts to divide by zero. For an original CIL stream (e.g., from CIL code ):",{"@attributes":{"id":"p-0032","num":"0031"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . ."]},{"entry":[{},"\u201cDivide Dividend by Divisor\u201d"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"204"},{"@attributes":{"id":"p-0033","num":"0032"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . ."]},{"entry":[{},"ldc.i4 ABCxMNO "]},{"entry":[{},"call void DRL module "]},{"entry":[{},"\u201cDivide Dividend by Divisor\u201d"]},{"entry":[{},". . ."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In the exemplary instrumented CIL stream above, two instruction lines [1] and [2] are used to realize decision point . The first line [1] implements bookmark entry , and the second line [2] implements call to DRL . The first line [1] loads a code ABC\u00d7MNO that jointly includes both instruction type indicator A and identifier B, with \u201cABC\u201d representing instruction type indicator A and \u201cMNO\u201d representing identifier B. Alternatively, bookmark entry  may be implemented with two separate lines, one for each of instruction type indicator A and identifier B. The second line [2] makes a call to the DRL module; it includes \u2018void \u2019 so that the lines of instrumentation (e.g., decision points ) do not affect the overall programmatic execution.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 5","b":["116","502","210","204","104","206","206","502","404"]},"In a described implementation, DRL  is adapted to selectively decide whether to throw an exception (e.g., induce a failure) for an instruction  (of ) that is associated with decision point  as part of a corresponding test couplet . If an exception is thrown, DRL  consequently simulates an appropriate error condition in order to enable the testing of CIL code  for reliability. For example, an out of memory error condition can be induced for a decision point  that is associated with a memory allocation type of instruction . DRL  makes a selective decision regarding whether to throw an exception responsive to bookmark entry , which includes instruction type indicator A and identifier B.","DRL  may be implemented in any of many manners, including extensible manners. For example, DRL  may be capable of handling any exception category and any instruction type. Alternatively, DRL  may be targeted for one or more specific exception categories and\/or one or more specific instruction types. Thus, as indicated in , DRLs  may optionally be targeted by exception area. For example, they may be modularized by exception category and\/or dependent on instruction type. This permits program testers with individual testing interests or tasks to focus on desired exception areas when testing the reliability of a particular CIL code \/instrumented CIL code .","As illustrated, DRL  is capable of making a selective decision regarding whether to throw an exception responsive to bookmark entry  and based on at least one throw exception decision (TED) logic factor . Although three exemplary TED logic factors (1, 2, 3) are shown, four or more TED logic factors  may alternatively be employed by DRL  either individually or jointly.","TED logic factor (1) causes a decision regarding whether to throw an exception to be made based on a random determination. For example, DRL  may be configured such that it induces a fault on a particular instruction type, as indicated by instruction type indicator A, half of the time. TED logic factor (2) causes a decision regarding whether to throw an exception to be made based on whether the instruction  that is associated with the decision point  that is being evaluated has been previously encountered. For example, DRL  may be configured such that it induces a fault on a first occurrence of any given instruction , as identified by identifier B of bookmark entry . TED logic factor (3) causes a decision regarding whether to throw an exception to be made based on whether the instruction  that is associated with the decision point  that is being evaluated has been previously reached by a current program path. For example, DRL  may be configured such that it induces a fault a first time that a particular instruction  is reached from a particular calling routine.","Hence, DRL  may utilize any one or more of many possible exemplary TED logic factors , including those illustrated in . Additional TED logic factor  examples follow. For example, DRL  can always induce a fault at each decision point  for all instruction types or a subset thereof. As another example, DRL  can factor into the exception decision selectivity evaluation what method was previously called. As yet another example, DRL  can ascertain at what location instrumented CIL code  is being executed from a programmatic perspective. A stack walk can be performed to ascertain who the previous caller is. This TED logic factor  may be employed when a particular instruction , and its associated decision point  for a corresponding test couplet , may be encountered in two programmatic locations and a failure is to be induced at each calling.","Transformation  (at ) of CIL code  to produce instrumented CIL code  thus introduces a new dependency for the execution thereof. In other words, to execute the binary form of instrumented CIL code  (at least when performing reliability testing thereon), DRL  is utilized in addition to any other libraries that are already utilized when executing the binary form of CIL code .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 6","FIGS. 2-5"],"b":["116","116","602","620","606","606","602","620"]},"For example, the flow diagram of exemplary technique * is divided into three parts: instrumentation tool , CLR component , and DRL module . As illustrated, instrumentation tool  performs the actions of blocks -, CLR component  performs the actions of blocks -, and DRL module  performs the actions of blocks -. Although illustrated separately, one or more modules for DRL  may actually be executing within, as part of, and\/or in conjunction with a CLR environment .","At block , a line of CIL code that has an instruction is retrieved. For example, a line of code that includes instruction  may be retrieved from CIL code  by instrumentation tool . At block , it is determined if the retrieved instruction is capable of causing an exception. For example, instrumentation tool  may determine if the retrieved instruction  can result in an exception (e.g., when executed by a CLR component ) with reference to CIL specification .","As described above with reference to , DRL  can be configured to throw an exception based on instruction type. Similarly, instrumentation tool  can be configured to instrument a subset of those instructions  that meet a predetermined exception-related criterion. In other words, instrumentation tool  specifically, and instrumentation injection scheme A generally, may be configured to inject  decision points  for a particular instruction or set of instructions and\/or a particular exception category. The determination action of block  can therefore entail determining whether the retrieved instruction is to be evaluated in a subsequent execution phase of reliability testing.","If the retrieved instruction is determined to be capable of causing an exception (at block ), then a decision point is injected at block . For example, instrumentation tool  may inject a decision point  in association with the retrieved instruction  to form a test couplet . To inject the decision point (at block ), a bookmark entry is injected at block A, and a DRL call is injected at block B. For example, as at least part of decision point , instrumentation tool  may inject bookmark entry  and call to DRL .","After the injection of the decision point (at block ) or if the retrieved instruction is determined to not be capable of throwing an exception (at block ), then flow continues at block . At block , it is ascertained whether there are more lines of CIL code to be analyzed. For example, instrumentation tool  may ascertain whether any additional lines of CIL code  remain to be analyzed for possible exception-throwing capabilities. If so, the next line is retrieved at block .","If, on the other hand, it is ascertained that there are no more lines of CIL code (at block ), then flow continues at block . At block , instrumented CIL code is produced. For example, a transformation  that has been effectuated by instrumentation tool  on CIL code  with injection  of decision points  produces instrumented CIL code . This instrumented CIL code  may optionally be stored on disk until the execution phase of reliability testing is to begin.","When the execution phase of reliability testing commences, the instrumented CIL code is JIT compiled and executed. For example, instrumented CIL code  may be provided to CLR component  for JIT compiling\/execution . Each line of the instrumented CIL code is addressed by the CLR environment. For example, each instruction line of instrumented CIL code  is managed by CLR component .","Eventually, at block , a decision point in the instrumented CIL code is detected during execution thereof. For example, CLR component  may detect decision point  in instrumented CIL code . At block , a DRL module is called. For example, because of call to DRL  that is part of decision point , CLR component  calls DRL module .","At block , it is selectively decided whether execution of the instrumented CIL code is to fail at the detected decision point. For example, DRL module  evaluates the detected decision point  responsive to bookmark entry  and based on at least one TED logic factor . If it is decided that the detected decision point is not to result in a testing failure (at block ), then flow continues at block  for the detection of another decision point during execution of the instrumented CIL code. For example, control may be returned to CLR component  so that execution of instrumented CIL code  may continue.","If, on the other hand, it is decided that the detected decision point is to result in a testing failure (at block ), then which exception is to be thrown is chosen at block . For example, some instructions  can result in more than one type of exception being thrown (e.g., as stipulated by CIL specification ). In such circumstances, a particular failure may be chosen that is context-appropriate, may be chosen randomly, may be chosen by exception area of concern, and so forth.","After the exception to be thrown is chosen (at block ), a failure is induced at block . For example, DRL module  may induce a failure of CLR component  with respect to the instruction  that is associated with the detected decision point  in order to simulate an intended failure condition when testing CIL code  for reliability.","The aspects, features, schemes, etc. of  and the technique(s) of , for example, are illustrated in diagrams that are divided into multiple blocks. However, the order and\/or layout in which they are described and\/or shown is not intended to be construed as a limitation, and any number of the blocks can be combined, rearranged, augmented, omitted, etc. in any manner to implement one or more systems, methods, devices, procedures, media, APIs, apparatuses, arrangements, etc. for instrumentation injection with regard to a common language runtime environment. Furthermore, although the description herein includes references to specific implementations such as those of  (as well as the exemplary operating environment of ), the approaches, schemes, and techniques thereof can be implemented in any suitable hardware, software, firmware, or combination thereof and using any suitable programming language(s), runtime environment(s), object-oriented paradigm(s), application programming interface(s), managed code mechanisms(s), and so forth.",{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 7","b":["700","700"]},"Exemplary computing device operating environment  is only one example of an environment and is not intended to suggest any limitation as to the scope of use or functionality of the applicable computing device architectures (including those of computers, consumer electronics, game consoles, set-top boxes, mobile appliances, etc.). Furthermore, computing device environment  is not to be interpreted as having any dependency or requirement relating to any one or any combination of components as illustrated in . Moreover, the applicable computing devices are not limited by the processors\/processing mechanisms employed therein. For example, such processors\/processing mechanisms may include, but are not limited to, electronic integrated circuits (ICs), quantum computing, optical computing, mechanical computing (e.g., using nano technology), and so forth.","Additionally, instrumentation injection with regard to a common language runtime environment may be implemented with numerous other general purpose or special purpose computing device (including electronic device) environments or configurations. Examples of well known computing (device) systems, environments, and\/or configurations that may be suitable for use include, but are not limited to, personal computers, server computers, thin clients, thick clients, personal digital assistants (PDAs) or mobile telephones, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, video game machines, game consoles, portable or handheld gaming units, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, some combination thereof, and so forth.","Implementations for instrumentation injection with regard to a common language runtime environment may be described in the general context of processor-executable instructions. Generally, processor-executable instructions include routines, programs, objects, components, data structures, other code, etc. that perform particular tasks or implement particular abstract data types. Instrumentation injection with regard to a common language runtime environment, as described in certain implementations herein, may also be practiced in distributed computing environments where tasks are performed by remotely-linked processing devices that are connected through a communications link and\/or network. Especially in a distributed computing environment, processor-executable instructions may be located in separate storage media, executed by different processors, and\/or extant on or propagated over transmission media.","Computing device environment  includes a general-purpose computing device in the form of a computer , which may comprise any computing device with computing and\/or processing capabilities. The components of computer  may include, but are not limited to, one or more processors or processing units , a system memory , and a system bus  that couples various system components including processor  to system memory .","System bus  represents one or more of any of many types of wired or wireless bus structures, including a memory bus or memory controller, a point-to-point connection, a switching fabric, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, such architectures may include an Industry Standard Architecture (ISA) bus, a Micro Channel Architecture (MCA) bus, an Enhanced ISA (EISA) bus, a Video Electronics Standards Association (VESA) local bus, a Peripheral Component Interconnects (PCI) bus also known as a Mezzanine bus, some combination thereof, and so forth.","Computer  typically includes a variety of processor-accessible media. Such media may be any available media that is accessible by computer  or another computing device, and it includes both volatile and non-volatile media, removable and non-removable media, and storage and transmission media.","System memory  includes processor-accessible storage media in the form of volatile memory, such as random access memory (RAM) , and\/or non-volatile memory, such as read only memory (ROM) . A basic input\/output system (BIOS) , containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules\/instructions that are immediately accessible to and\/or being presently operated on by processing unit .","Computer  may also include other removable\/non-removable and\/or volatile\/non-volatile storage media. By way of example,  illustrates a hard disk drive or disk drive array  for reading from and writing to a (typically) non-removable, non-volatile magnetic media (not separately shown); a magnetic disk drive  for reading from and writing to a (typically) removable, non-volatile magnetic disk  (e.g., a \u201cfloppy disk\u201d); and an optical disk drive  for reading from and\/or writing to a (typically) removable, non-volatile optical disk  such as a CD-ROM, DVD-ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are each connected to system bus  by one or more storage media interfaces . Alternatively, hard disk drive , magnetic disk drive , and optical disk drive  may be connected to system bus  by one or more other separate or combined interfaces (not shown).","The disk drives and their associated processor-accessible media provide non-volatile storage of processor-executable instructions, such as data structures, program modules, and other data for computer . Although exemplary computer  illustrates a hard disk , a removable magnetic disk , and a removable optical disk , it is to be appreciated that other types of processor-accessible media may store instructions that are accessible by a computing device, such as magnetic cassettes or other magnetic storage devices, flash memory, CD-ROM, digital versatile disks (DVD) or other optical storage, RAM, ROM, electrically-erasable programmable read-only memories (EEPROM), and so forth. Such media may also include so-called special purpose or hard-wired integrated circuit (IC) chips. In other words, any processor-accessible media may be utilized to realize the storage media of the exemplary computing system and environment .","Any number of program modules (or other units or sets of processor-executable instructions) may be stored on hard disk , magnetic disk , optical disk , ROM , and\/or RAM , including by way of general example, an operating system , one or more application programs , other program modules , and program data . By way of specific example but not limitation, instrumentation tool  and DRL  (of , , and ) may be all or a portion of any one or more of such program modules , , , and . Also, instrumented CIL code  and optional CIL specification  may be all or a portion of program data .","A user may enter commands and\/or information into computer  via input devices such as a keyboard  and a pointing device  (e.g., a \u201cmouse\u201d). Other input devices  (not shown specifically) may include a microphone, joystick, game pad, satellite dish, serial port, scanner, and\/or the like. These and other input devices are connected to processing unit  via input\/output interfaces  that are coupled to system bus . However, they may instead be connected by other interface and bus structures, such as a parallel port, a game port, a universal serial bus (USB) port, an IEEE 1374 (\u201cFirewire\u201d) interface, an IEEE 802.11 wireless interface, a Bluetooth\u00ae wireless interface, and so forth.","A monitor\/view screen  or other type of display device may also be connected to system bus  via an interface, such as a video adapter . Video adapter  (or another component) may be or may include a graphics card for processing graphics-intensive calculations and for handling demanding display requirements. Typically, a graphics card includes a graphics processing unit (GPU), video RAM (VRAM), etc. to facilitate the expeditious performance of graphics operations. In addition to monitor , other output peripheral devices may include components such as speakers (not shown) and a printer , which may be connected to computer  via input\/output interfaces .","Computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computing device . By way of example, remote computing device  may be a personal computer, a portable computer (e.g., laptop computer, tablet computer, PDA, mobile station, etc.), a palm or pocket-sized computer, a gaming device, a server, a router, a network computer, a peer device, other common network node, or another computer type as listed above, and so forth. However, remote computing device  is illustrated as a portable computer that may include many or all of the elements and features described herein with respect to computer .","Logical connections between computer  and remote computer  are depicted as a local area network (LAN)  and a general wide area network (WAN) . Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, the Internet, fixed and mobile telephone networks, other wireless networks, gaming networks, some combination thereof, and so forth. Such networks and communications connections, as well as the underlying physical hardware, are examples of transmission media.","When implemented in a LAN networking environment, computer  is usually connected to LAN  via a network interface or adapter . When implemented in a WAN networking environment, computer  typically includes a modem  or other means for establishing communications over WAN . Modem , which may be internal or external to computer , may be connected to system bus  via input\/output interfaces  or any other appropriate mechanism(s). It is to be appreciated that the illustrated network connections are exemplary and that other means of establishing communication link(s) between computers  and  may be employed.","In a networked environment, such as that illustrated with computing device environment , program modules or other instructions that are depicted relative to computer , or portions thereof, may be fully or partially stored in a remote memory storage device. By way of example, remote application programs  reside on a memory component of remote computer  but may be usable or otherwise accessible via computer . Also, for purposes of illustration, application programs  and other processor-executable instructions such as program modules  and operating system  are illustrated herein as discrete blocks, but it is recognized that such programs, components, and other instructions reside at various times in different storage components of computing device  (and\/or remote computing device ) and are executed by data processor(s)  of computer  (and\/or those of remote computing device ).","Although systems, media, devices, methods, procedures, apparatuses, schemes, techniques, approaches, procedures, arrangements, and other implementations have been described in language specific to structural, logical, algorithmic, and functional features and\/or diagrams, it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or diagrams described. Rather, the specific features and diagrams are disclosed as exemplary forms of implementing the claimed invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The same numbers are used throughout the drawings to reference like and\/or corresponding aspects, features, and components.",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
