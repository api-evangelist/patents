---
title: Software and related software tracking during software modification
abstract: A system and method for tracking and notifying related software, modules, and configuration files during software development and maintenance. A database, software build programming, a software module tracker, requirements management tools, and software source code that includes a comments area are implemented in connection with user interfacing to provide the method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08490054&OS=08490054&RS=08490054
owner: The United States of America as represented by the Secretary of the Army
number: 08490054
owner_city: Washington
owner_country: US
publication_date: 20110923
---

{"@attributes":{"id":"description"},"GOVINT":[{},{}],"heading":["GOVERNMENT INTEREST","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT(S)"],"p":["The invention described here may be made, used and licensed by and for the U.S. Government for governmental purposes without paying royalty to me.","1. Field of the Invention","The present invention generally relates to a system and method for tracking and notifying related software, modules, and configuration files during software development and maintenance.","2. Background Art","Conventional systems and methods for tracking and notifying related software, modules, and configuration files during software development and maintenance (e.g., integrated development environments, source control or version management, requirements management tools, and the like) may be ineffective at identifying and resolving issues that are generated when software modifications are made. For example, an undocumented change to one module may cause the same or a different module that had performed correctly to malfunction.","Thus, there exists a need and an opportunity for an improved system and method for tracking and notifying related software, modules, and configuration files during software development and maintenance. Such an improved system and method may overcome one or more of the deficiencies of the conventional approaches.","Accordingly, the present invention may provide an improved system and method for tracking and notifying related software, modules, and configuration files during software development and maintenance.","According to the present invention, a computer implemented system of tracking and notifying a user with regard to associated software, associated modules, and associated configuration files during development and maintenance of a given software, the system comprising:","an interface including display and input\/output capability for the user; and","a development system having a processor and memory, wherein the development system is coupled to the user interface, the development system comprises:","a database, build programming for the given software, a software module tracker, requirements management tools, and the given software and the associated software include a comments area that includes an @author tag and an @modified tag, wherein the database, the build programming, the requirements management tools, and the given software are coupled to the software module tracker, and the build programming is coupled to the given software and the associated software, wherein the memory includes programming to control the processor to perform a method comprising the steps of:\n\n","The system wherein, the software module tracker is operated as a documentation to identify relationships among the associated software and the requirements satisfied by the associated software.","The system wherein, the software module tracker is operated by the user at any time to view the relationships among the associated software and the requirements satisfied by the associated software.","The system wherein, the software module tracker is operated in a batch mode.","The system wherein, the software module tracker further queries the database and sends alert emails to the POC to indicate possible changes needed for the associated module.","The system wherein, the software module tracker provides the user capability to develop the given software, and maintain the given software without involvement of an original developer.","The system wherein, the software module tracker informs the user which of the associated modules was modified.","The system wherein, the database is a relational database.","The system wherein, the software module tracker is programmed in C++.","The system wherein, the software module tracker is programmed in JAVA programming language.","Also according to the present invention, a computer system implemented method of tracking and notifying a user with regard to associated software, associated modules, and associated configuration files during development and maintenance of a given software may be provided. The method including the steps of\n\n","The method wherein, the software module tracker is operated as a documentation to identify relationships among the associated software and the requirements satisfied by the associated software.","The method wherein, the software module tracker is operated by the user at any time to view the relationships among the associated software and the requirements satisfied by the associated software.","The method wherein, the software module tracker is operated in a batch mode.","The method wherein, the software module tracker further queries the database and sends alert emails to the POC to indicate possible changes needed for the associated module.","The method wherein, the software module tracker provides the user capability to develop the given software, and maintain the given software without involvement of an original developer.","The method wherein, the software module tracker informs the user which of the associated modules was modified.","The method wherein, the database is a relational database.","The method wherein, the software module tracker is programmed in C++.","The method wherein, the software module tracker is programmed in JAVA programming language.","The above features, and other features and advantages of the present invention are readily apparent from the following detailed descriptions thereof when taken in connection with the accompanying drawings.","Definitions and Terminology:","The following definitions and terminology are applied as understood by one skilled in the appropriate art.","The singular forms such as \u201ca,\u201d \u201can,\u201d and \u201cthe\u201d include plural references unless the context clearly indicates otherwise. For example, reference to \u201ca material\u201d includes reference to one or more of such materials, and \u201can element\u201d includes reference to one or more of such elements.","As used herein, \u201csubstantial\u201d and \u201cabout\u201d, when used in reference to a quantity or amount of a material, characteristic, parameter, and the like, refer to an amount that is sufficient to provide an effect that the material or characteristic was intended to provide as understood by one skilled in the art. The amount of variation generally depends on the specific implementation. Similarly, \u201csubstantially free of\u201d or the like refers to the lack of an identified composition, characteristic, or property. Particularly, assemblies that are identified as being \u201csubstantially free of\u201d are either completely absent of the characteristic, or the characteristic is present only in values which are small enough that no meaningful effect on the desired results is generated.","A plurality of items, structural elements, compositional elements, materials, subassemblies, and the like may be presented in a common list or table for convenience. However, these lists or tables should be construed as though each member of the list is individually identified as a separate and unique member. As such, no individual member of such list should be considered a de facto equivalent of any other member of the same list solely based on the presentation in a common group so specifically described.","Concentrations, values, dimensions, amounts, and other quantitative data may be presented herein in a range format. One skilled in the art will understand that such range format is used for convenience and brevity and should be interpreted flexibly to include not only the numerical values explicitly recited as the limits of the range, but also to include all the individual numerical values or sub-ranges encompassed within that range as if each numerical value and sub-range is explicitly recited. For example, a size range of about 1 dimensional unit to about 100 dimensional units should be interpreted to include not only the explicitly recited limits, but also to include individual sizes such as 2 dimensional units, 3 dimensional units, 10 dimensional units, and the like; and sub-ranges such as 10 dimensional units to 50 dimensional units, 20 dimensional units to 100 dimensional units, and the like.","With reference to the Figures, the preferred embodiments of the present invention will now be described in detail. Generally, the present invention provides an improved system and method for tracking and notifying related software, modules, and configuration files during software development and maintenance.","When a given module or configuration file is updated on a given software (which was originally developed to satisfy a given system requirement), users are notified with a list of all of the related modules, software, and configuration files ((which were originally developed to satisfy a given system requirement) that may need to be changed due to this module or configuration file change. These relationship maintenance and notifications are automatic. The invention may also automatically parse the source code and provide the capability to import data from associated requirements tools.","If a given system requirement is satisfied by multiple number of software which are developed by multiple vendors, the present invention may have the capability to identify all of the related software, configuration files, and modules that were developed for the given system requirement. The present invention may also have the capability to identify and notify the list of related modules, software and configuration files when a given module\/software\/configuration file is modified. The relationship maintenance and alerts may be automatic. The present invention may have the capability to control via user interface.","When developing computer software programs, a developer or a designer may have to work with a lot of issue such as requirements, deadlines, platform, technologies, etc. As such, the software developers may fail to consider the maintainability of the developed software. The developer that originally developed a given software may no longer be accessible or available to fix any bugs or problems with the software. When another new developer tries to fix bugs or modify a software program developed by others, the new developer may forget or not be aware of linked or related programs or code segments (which were originally developed to satisfy a given system requirement). Many conventional compilers and conventional integrated development environments (IDEs) provide the capability to see the linkage only through the code segment (only when a given module is referenced by other modules in the software). However, conventional compilers and conventional IDEs may fail to identify functional or requirement links with other code blocks or other software. The failure can grow exponentially when software is developed by multiple vendors, especially if a given requirement is implemented using multiple software and is developed using different languages. Analysis of such relationships and coordination can be difficult and may fail when conventional tools and processes are used.","The present invention may provide one or more of the following advantages when compared to conventional tools: (1) If a given system requirement is satisfied by multiple vendors in multiple software, the present invention may have the capability to populate all the related software, modules, and configuration files developed for a given system requirement. This feature may reduce the number of bugs identified during application testing and may improve software maintainability and reliability. (2) The relationship information may be centralized in a database which may allow all the applicable parties to visualize the related modules, software, and configuration files for a given requirement at any given time using any tools which can query relational databases. (3) Automatic alerts may be shown to developers or designers with a list of related software, modules, and configuration files when a given module or configuration file is changed in given software. (4) The requirements details, software details such as software name, vendor, point\/person of contact (POC), modules, and configuration file names are automatically extracted from source code files, requirements management tools, etc. (5) The present invention may also include a reporting tool to get a list of all the related modules, configuration files and software for a given system requirement. (6) The present invention may also include both automatic and user interface capability to perform all the intended functions of the invention.","Referring to , a diagram of a system (e.g., apparatus, combination, etc.)  of the present invention is shown. The system  generally comprises at least one (and generally a plurality of) user(s) sub-systems (e.g., interfaces, terminals with keyboards and\/or other control devices, printers and displays, input\/output devices, and the like) , and a computer implemented hardware\/software combination (e.g., processor(s), CPU, arithmetic logic unit, cache, busses, internal and external memory, development system, software build environment, and the like)  that is coupled (e.g., connected, interfaced, etc.) to the sub-system . The user sub-systems  are generally operated by users (e.g., developers, designers, builders, information technology operators, etc.) to design, develop, build, maintain, update, review, modify, etc. operating system, computer software, databases, files, programming, software modules, code including source code, instructions, requirements, I\/O, hardware components, etc. that are generally implemented (e.g., executed, performed, run, etc.) via the computer system . The conventional hardware and software components and interfaces of the system  are implemented as would be understood having skill in the art.","The system  comprises a database , a software module tracker , a software build , requirements management tools , and software source code . As noted above the elements of the computer system  (e.g., the database , the software module tracker , the software build , the requirements management tools , and the software source code ) are generally implemented within (e.g., stored, interconnected, interfaced, linked, etc.) a computerized (e.g., processor controlled) environment as a combination of direct hardwire (e.g., cable, fiber optic, and the like), wireless, local and\/or external internet\/intranet, Web-based interfaces, communications, linkages, software, firmware, and\/or hardware for any particular implementation.","An example of a computer system that is typical of hardware implemented in connection with the system  may be found, for example, in U.S. Pat. No. 7,890,872, which is incorporated by reference in its entirety on  and in the related description at col. 3, line 60 through col. 5, line 2; and on  and in the related description at col. 14, line 66 through col. 16, line 7.","As discussed below in connection with , examples of interfaces, communications, requests, invokes, imports\/exports, process steps, method blocks, etc. that may be implemented via the system  include but are not limited to display\/print\/show information to users via the sub-system ; insert requirements and insert\/update software or module or configuration file information between the database  and the software module tracker ; analyze the collected data and indicate the modules or configuration files that need to be changed if a given module or configuration file is changed via the software module tracker ; invokes between the software module tracker  and the software build ; import requirements details between the software module tracker  and the requirements management tools ; parse modules and configuration files between the software module tracker  and the software source code ; builds software code between the software build  and the software source code ; and add tags (e.g., @author and @modified) to source code in comments area immediately above every module\/function) in connection with the software source code .","Referring again to , the system  comprises: (a) the database ; (b) the software module tracker (i.e., software requirement relationship tracker (SRRT)) tool  comprises four components: (1) Requirements Importer (RI); (2) Software Parser (SP); Database Updater (DU); and Relationship Processor (RP); (c) developer added @author and @modified tags in the source code near the comments area for every module and configuration file. The @modified tag may have the date modified in mm\/dd\/yyyy or other appropriate format. If more dates are added, each may be followed by a comma, e.g., 01\/01\/2010, 01\/02\/2010, etc. The @author tag will generally have the email id of the author, e.g., aa@aa.com; and (d) modification of build or script to invoke the SRRT tool .","The system  generally includes programming (software) that is stored in memory (e.g., within the environment ) and included in or coupled to the software tracker module (SRRT tool) , and the programming is generally implements via processor operation, a method to analyze collected data, and indicate the modules or configuration files that need to be changed if a given module or configuration file is changed.","Referring to , a diagram illustrating the relational database  that may be implemented in connection with (e.g., stored within) the system  of  is shown: The database  comprises five tables: Requirements Details (RD); Software Details (SD); Module Details (MD); Configuration Details (CD); and Relationship Traceability (RT). Columns in the database  and the respective table, in parentheses, may include ReqId (RD and RT); SoftId (SD); ModId (MD and RT); ConfigId (CD and RT); TraceId (RT); ReqName (RD); SoftName (SD); ModName (MD); ConfigName (CD); Author (SD, MD, and CD); vendorName (SD); POC (SD); Status (SD, MD, CD, and RT); Timestamp (RD, SD, MD, CD, and RT); ConfigType (CD); and Comments (CD and RT).","A more detailed description of the method of the present invention is provided below in connection with . Referring to , a high level description of the method of the present invention includes the following steps.\n\n","(b) The SRRT tool  may be developed in C++, JAVA programming language, or any appropriate programming language.\n\n","The SRRT tool  can also be executed at any time to view details and use as a documentation to identify the relationship among various software and the requirements satisfied by the various software.","The SRRT tool  can run in a batch mode, and can query the database \u201cRT\u201d and send alert emails to the configured people to indicate the possible changes needed for the module, and informs which module was modified.","The SRRT tool  can provide any developer the capability to develop software, and maintain the software without the need to involve the original developer.","Referring to  (shown as interrelated (linked) , B, and C), a flow diagram of a method  (e.g., process, steps, blocks, etc.) of the present invention is shown. The method  is generally implemented in connection with the system . Computer software that implements the method  is generally stored in memory within and\/or accessed by and implemented in connection with the computer system  (e.g., within the environment ). The process  generally provides a method for tracking and notifying related software, modules, and configuration files during software development and maintenance.","A build of a given software (i.e., development, modification, update, etc. of software code) is initiated (step or block ). The process  generally proceeds to a decision step or block . The process  generally determines whether the build is a first build (the decision step or block ). At the decision step or block , when the build that is initiated at the block  is a first build (i.e., the YES leg of the decision block ), the method  generally proceeds to a decision step or block .","At the decision block , the process  determines whether requirements are managed in a tool. When requirements are managed in the tool (the YES leg of the decision block ), the process  may import details of the requirements from the tool (step or block ); and store the requirements details in a database (e.g., the relational database ) (step or block ). When requirements are not managed in the tool (the NO leg of the decision block ), the process  may display a screen to allow the users to enter the requirements details (step or block ); and store the requirements details in the database (the step or block ).","From the step or block , the process  may invoke a software module tracker (step or block ); parse the software code for modules (step or block ); for each module found, parse details of the module to retrieve the configuration files used for the module (step or block ); store configuration file details for the module (step or block ); finalize data collection (step or block ); display a screen to the user a list of all of the requirements that are in the database for the software (step or block ); display in a dropdown for each requirement all of the associated modules, software, and configuration files (step or block ); allow (provide for) users to associate requirements with all of the modules, software, and configuration files to establish an associated relationship (step or block ); and store the associated relationship in the database (step or block ).","Returning to the block , for each module found, parse the details of the module (step or block ); and determine whether an @author tag is present (decision step or block ). When the @author tag is present (the YES leg of the decision step or block ), parse author tag data (step or block ); and determine whether an @modified tag is present (decision step or block ). Returning to the block , when the @author tag is not present (the NO leg of the decision step or block ), proceed to the decision block .","At the decision block , when the @modified tag is present (the YES leg of the decision step or block ), the process  may parse the modified tag data (step or block ); retrieve the module name and the software name (step or block ); display a screen for the user to enter the vendor name or POC for the software along with (in addition to) the name (step or block ); store the module details along with the software name and the vendor details (e.g., the vendor name or POC for the software) to a table (e.g., a table in the database ) (step or block ); and proceed to the block .","Returning to the decision block , when the @modified tag is not present (the NO leg of the decision block ), the process  may proceed to the block .","Returning to the decision block , when the software build is not the first build (the NO leg of the decision block ), the process  may build a given software a second (or subsequent) time after the software was updated or modified (step or block ); invoke the software module tracker  (step or block ); parse the software code for modules (step or block ); and determine whether one or more of the modules or the configuration files have been deleted (decision step or block ).","When one or more of the modules or the configuration files have been deleted (the YES leg of the decision block ), the process  may mark as \u201cdeleted\u201d all of the references of the deleted modules in the database  (step or block ); and determine whether new modules or configuration files added (decision step or block ).","Returning to the decision block , when one or more of the modules or the configuration files have not been deleted (the NO leg of the decision block ), the process  may proceed to the block .","At the decision block , when new modules or configuration files added (the YES leg of the decision block ), the process  may perform the steps  through  (step or block ). When new modules or configuration files not added (the NO leg of the decision block ), the process  may determine whether one or more modules or configuration files have been updated (decision step or block ).","When one or more modules or configuration files have been updated (the YES leg of the decision block ), the process  may retrieve related (associated) modules and configuration files from the database  (step or block ); display to users, a list of the related (associated) modules, software, and configuration files for the modified (updated) module (step or block ); and the user can look at the list that is displayed at the step , and decide whether to modify the source code (decision step or block ).","When the user decides to modify the source code (the YES leg of the decision block ), the process  may return to the block . When the user decides to not modify the source code (the NO leg of the block ), the process  may end analysis (i.e., using the software tracker  may stop) (step or block ).","Returning to the decision step , when one or more modules or configuration files are not updated, the process  may proceed to the block  and end the analysis.","As is apparent then from the above detailed description, the present invention may provide an improved system (e.g., the system ) and method (e.g., the method ) for tracking and notifying related software, modules, and configuration files during software development and maintenance. In particular, the present invention may have the capability to identify all of the related modules, configuration files, and software developed for a given system requirement. The system  and the method  may identify all of the related modules, configuration files, and software developed for a given system requirement even if all of the related modules, configuration files, and software developed for a given system requirement are developed by multiple vendors.","Various alterations and modifications will become apparent to those skilled in the art without departing from the scope and spirit of this invention and it is understood this invention is limited only by the following claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0031","num":"0099"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0032","num":"0100"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0033","num":"0101"},"figref":["FIG. 3","FIGS. 3A"],"b":["3","3"]}]},"DETDESC":[{},{}]}
