---
title: Fault surveillance and automatic fail-over processing in broker-based messaging systems and methods
abstract: An exemplary method includes attempting, by a message broker subsystem, to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval, determining, by the message broker subsystem, that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval, and automatically performing, by the message broker subsystem, a fail-over process on one or more other messages intended for the recipient software application in response to the determination that the recipient software application is in the fault state. Corresponding methods and systems are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08078902&OS=08078902&RS=08078902
owner: Verizon Patent and Licensing, Inc.
number: 08078902
owner_city: Basking Ridge
owner_country: US
publication_date: 20091030
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND INFORMATION","DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS"],"p":["Message-oriented middleware is infrastructure that increases the interoperability, portability, and flexibility of software applications by allowing the software applications to communicate one with another by transmitting messages therebetween. Message-oriented middleware reduces the complexity of developing software applications that span multiple operating systems and network protocols by insulating application developers from the details of the various operating system and network interfaces. Accordingly, software developers can more easily integrate new software applications with existing software applications.","In typical message-oriented middleware configurations, messages are transmitted from one software application to another by way of a message broker. However, in some instances, a particular software application may be in a fault state during which it is unable to receive messages from a message broker. For example, a network connection used to transport messages between the message broker and the software application may be temporarily disabled and\/or the software application itself may have one or more glitches, bugs, or other problems.","A typical message broker that receives a message intended for a software application that is in a fault state will repeatedly attempt to deliver the message to the software application for a predetermined time interval before determining that the message is undeliverable and returning it to an originating software application, even if the message broker has already failed to deliver other messages to the software application. Such repeated attempts to deliver each message intended for a software application in a fault state can cause undesirable delays, consume valuable network resources, and result in frustrating experiences for end users.","Exemplary methods and systems for performing fault surveillance and automatic fail-over processing in a broker-based messaging system are described herein. As described in more detail below, a message broker subsystem may attempt to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval. The message broker subsystem may determine that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval. In response to this determination, the message broker subsystem may automatically perform a fail-over process on the one or more messages and\/or one or more other messages intended for the recipient software application. For example, the message broker subsystem may automatically attempt to deliver the one or more messages and\/or one or more other messages to another software application that has been designated as an alternative recipient software application to the recipient software application. Alternatively, the message broker subsystem may return one or more messages intended for the recipient software application to a software application that originated the one or more messages.","By automatically performing a fail-over process on one or more messages intended for a recipient software application that has been determined to be in a fault state, time and resources associated with attempting to deliver the one or more messages to the recipient software application may be minimized or avoided.","As used herein, the term \u201csoftware application\u201d may refer to any software instance such as, but not limited to, a software product (e.g., a software program), a module within a software product, and\/or any other software component (e.g. an enterprise java bean, a servlet, etc.) as may serve a particular application. As used herein, an \u201coriginating software application\u201d is one that generates a message to be sent to another software application (referred to herein as a \u201crecipient software application\u201d).","A \u201cmessage\u201d generated by a software application may include any data that may be read or otherwise processed by a message broker subsystem and\/or a recipient software application. A message may be transmitted in encrypted form or as cleartext (i.e., non-encrypted form).","A \u201cfault state\u201d refers to a condition or state wherein a recipient software application is unable to receive a message from a message broker subsystem. A recipient software application may be in a fault state for any of a number of different reasons. For example, a recipient software application may include one or more glitches, bugs, or other problems that cause the recipient software application to be in a fault state. Additionally or alternatively, a recipient software application may be in a fault state while stuck in a database lookup or otherwise overloaded. Additionally or alternatively, a fault state may be caused by a resource drain on a computing device that is executing the recipient software application and\/or a disabled, delayed, or otherwise faulty network connection between the recipient software application and the message broker subsystem. A fault state of a recipient software application may be temporary (e.g., only a few seconds) or more permanent (e.g., until fixed by a software developer).",{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","102","104","106","102","104","106","104","100"]},"System , including software application subsystem , message broker subsystem , and global directory service subsystem , may include any computer hardware and\/or computer-implemented instructions (e.g., software), or combinations of computer-implemented instructions and hardware, configured to perform one or more of the processes described herein. For example, system , including software application subsystem , message broker subsystem , and global directory service subsystem , may include computer hardware (e.g., one or more computing devices) configured to perform one or more of the processes described herein. In some examples, system  may be implemented on one physical computing device or may be implemented on more than one physical computing device. Accordingly, system  may include any number of computing devices, and may employ any of a number of computer operating systems.","One or more of the processes described herein may be implemented at least in part as instructions executable by one or more computing devices. In general, a processor (e.g., a microprocessor) receives instructions, from a computer-readable medium, (e.g., a memory, etc.), and executes those instructions, thereby performing one or more processes, including one or more of the processes described herein. Such instructions may be stored and\/or transmitted using any of a variety of known computer-readable media.","A computer-readable medium (also referred to as a processor-readable medium) includes any medium that participates in providing data (e.g., instructions) that may be read by a computer (e.g., by a processor of a computer). Such a medium may take many forms, including, but not limited to, non-volatile media and\/or volatile media. Non-volatile media may include, for example, optical or magnetic disks and other persistent memory. Volatile media may include, for example, dynamic random access memory (\u201cDRAM\u201d), which typically constitutes a main memory. Common forms of computer-readable media include, for example, a floppy disk, flexible disk, hard disk, magnetic tape, any other magnetic medium, a CD-ROM, DVD, any other optical medium, a RAM, a PROM, an EPROM, a FLASH-EEPROM, any other memory chip or cartridge, or any other medium from which a computer can read.","Software application subsystem , message broker subsystem , and global directory service subsystem  may communicate using any communication platforms and technologies suitable for transporting data, including known communication technologies, devices, media, and protocols supportive of remote or local data communications. Examples of such communication technologies, devices, media, and protocols include, but are not limited to, data transmission media, communications devices, Transmission Control Protocol (\u201cTCP\u201d), Internet Protocol (\u201cIP\u201d), File Transfer Protocol (\u201cFTP\u201d), Telnet, Hypertext Transfer Protocol (\u201cHTTP\u201d), Hypertext Transfer Protocol Secure (\u201cHTTPS\u201d), Session Initiation Protocol (\u201cSIP\u201d), Ethernet, and any other suitable communications technologies, devices, media, and protocols.","In some examples, software application subsystem , message broker subsystem , and global directory service subsystem  may communicate via one or more networks, including, but not limited to, wireless networks, broadband networks, closed media networks, cable networks, satellite networks, the Internet, intranets, local area networks, public networks, private networks, optical fiber networks, and\/or any other networks capable of carrying data and communications signals between software application subsystem , message broker subsystem , and global directory service subsystem .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 2","b":["200","100","102","104","106","202","202","102","104","106","102","104","106"]},{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["102","102","302","304","306","302","306"]},"Communication facility  may be configured to facilitate communication between software application subsystem  and message broker subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between software application subsystem  and message broker subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem . The one or more connections established between software application subsystem  and message broker subsystem  may include one or more secure connections and\/or one or more non-secure connection. An exemplary secure connection includes, but is not limited to, a secure sockets layer (\u201cSSL\u201d) connection. An exemplary non-secure connection includes, but is not limited to, a non-SSL connection.","Communication facility  may additionally or alternatively be configured to facilitate communication between software application subsystem  and global directory service subsystem . For example, communication facility  may be configured to transmit data specifying one or more alternative recipient software applications for fail-over processing and\/or any other data as may serve a particular application.","Messaging facility  may be configured to process a message generated by an originating software application and\/or a message received by a recipient software application. Exemplary, but not exclusive, processing of a message that may be performed by messaging facility  includes encrypting a message, decrypting a message, preparing a message for transmission to a recipient software application via message broker subsystem , processing of a message received from message broker subsystem , etc.","Storage facility  may be configured to maintain message data  and application programming interface (\u201cAPI\u201d) data . It will be recognized that storage facility  may maintain additional or alternative data as may serve a particular application.","Message data  may include data representative of one or more messages generated and\/or received by a software application. Message data  may additionally include delivery instructions corresponding to one or more messages. For example, message data  may include a name or identification number of an intended recipient software application and\/or computing device that executes the recipient software application.","API data  is representative of one or more APIs configured to facilitate integration of one or more software applications executed by software application subsystem  with message broker subsystem  and\/or global directory service subsystem . For example, one or more APIs may interface with one or more software applications executed by application subsystem  to facilitate encryption of messages generated by the one or more software applications, communication with message broker subsystem  and\/or global directory service subsystem , and\/or any other feature as may serve a particular application.",{"@attributes":{"id":"p-0038","num":"0037"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":["104","104","402","404","406","408","410","402","410"]},"Communication facility  may be configured to facilitate communication between message broker subsystem  and software application subsystem . For example, communication facility  may be configured to establish and\/or assist in establishing one or more connections between message broker subsystem  and software application subsystem  over which one or more messages may be transmitted from software application subsystem  to message broker subsystem  and\/or from message broker subsystem  to software application subsystem .","Communication facility  may additionally or alternatively be configured to facilitate communication between message broker subsystem  and global directory service subsystem . For example, communication facility  may be configured to transmit data representative of a request for fail-over processing data from global directory service subsystem  and\/or any other data as may serve a particular application.","Delivery facility  may be configured to deliver one or more messages received from one or more originating software applications to one or more recipient software applications in accordance with delivery instructions included within the message(s). To this end, delivery facility  may be configured to utilize one or more connections established by communication facility .","In some instances, however, a recipient software application may be in a fault state when delivery facility  attempts to deliver one or more messages thereto. For example, the connection over which message broker subsystem  attempts to deliver the one or more messages to the recipient software application may be faulty. Hence, as will be described in more detail below, delivery facility  may attempt to deliver each message to the recipient software application during a corresponding and predetermined message interval (e.g., ten seconds). If a particular message cannot be delivered during its corresponding message interval, delivery facility  may cease attempting to deliver the message and the message may be designated for fail-over processing by fail-over processing facility , as will be described in more detail below.","Delivery facility  may continue this process of attempting to deliver messages during message intervals to the recipient software application for a predetermined amount of time, referred to herein as a \u201cfault interval.\u201d The fault interval may be user configurable and may include any period of time (e.g., five minutes) equal to or greater than a message interval as may serve a particular application. As will be described in more detail below, if delivery facility  fails to deliver any message during the fault interval, the recipient software application may be deemed to be in a fault state.","Fault surveillance facility  may be configured to monitor whether delivery facility  is able to successfully deliver messages to a recipient software application. For example, fault surveillance facility  may monitor attempts made by delivery facility  to deliver one or more messages to a recipient software application during a predetermined fault interval. If delivery facility  fails to deliver the one or more messages during the fault interval, fault surveillance facility  may determine that a recipient software application is in a fault state.","Fault surveillance facility  may direct delivery facility  to cease attempting to deliver one or more queued messages and\/or any subsequently received messages intended for a software application deemed by fault surveillance facility  to be in a fault state. In some examples, as will be described in more detail below, delivery facility  may continue to attempt to deliver one of the messages to the recipient software application after fault surveillance facility  determines the recipient software application to be in a fault state in order for fault surveillance facility  to continue to monitor an operational state of the recipient software application (i.e., whether the recipient software application comes out of the fault state).","Fail-over processing facility  may be configured to perform a fail-over process on any message that cannot be delivered within its corresponding message interval. For example, if a message having a message interval of ten seconds cannot be delivered by delivery facility  to a recipient software application, fail-over processing facility  may perform a fail-over process on the message.","Additionally or alternatively, fail-over processing facility  may be configured to automatically perform a fail-over process on one or more messages intended for a recipient software application in response to a determination by fault surveillance facility  that the recipient software application is in a fault state. For example, fail-over processing facility  may direct delivery facility  to automatically deliver the one or more messages to an alternative recipient software application specified by global directory service subsystem  without first attempting to deliver the one or more messages to the recipient software application during corresponding message intervals. To this end, as will be described in more detail below, fail-over processing facility  may query global directory service subsystem  to identify the alternative recipient software application prior to directing delivery facility  to deliver the one or more messages to the alternative recipient software application. Alternatively, if no alternative recipient software application is specified by global directory service subsystem , fail-over processing facility  may return the one or more messages to one or more originating software applications. Examples of such fail-over processing will be described in more detail below.","In some examples, the fail-over processing may be performed on one or more messages received by message broker subsystem  and queued for delivery to a recipient software application before fault surveillance facility  determines that the recipient software application is in a fault state. Additionally or alternatively, the fail-over processing may be performed on one or more messages received by message broker subsystem  after fault surveillance facility  determines that the recipient software application is in a fault state.","As will be described in more detail below, fail-over processing facility  may automatically perform the fail-over processing on one or more messages without delivery facility  attempting to deliver the one or more messages after the recipient software application has been determined to be in a fault state. In this manner, time and resources associated with attempting to deliver the one or more messages to the recipient software application may be minimized or avoided.","As mentioned, delivery facility  may continue to attempt to deliver a message (e.g., a message selected from the one or more messages attempted to be delivered by delivery facility ) to the recipient software application after fault surveillance facility  determines the recipient software application to be in a fault state so that fault surveillance facility  may continue to monitor an operational state of the recipient software application (i.e., whether the recipient software application comes out of the fault state). In some examples, delivery facility  may be configured to attempt to deliver the selected message during a predetermined period of time (referred to herein as a \u201cdefunct interval\u201d) immediately following the fault interval. If delivery facility  fails to deliver the selected message during the predetermined time, fault surveillance facility  may determine that the recipient software application is in a \u201cdefunct state.\u201d A defunct state is similar to a fault state in that the recipient software application is unable to receive a message from message broker subsystem . However, a defunct state implies that the recipient software application may be in a fault state for a relatively long period of time and that it is not worth attempting to deliver messages thereto until the software application reestablishes a connection with message broker subsystem . Hence, in some examples, fault surveillance facility  may be configured to direct communication facility  to terminate a connection between message broker subsystem  and the recipient software application in response to a determination made by fault surveillance facility  that the recipient software application is in a defunct state. In response to the connection termination, fail-over processing facility  may perform a fail-over process on the selected message.","In some examples, a recipient software application deemed to be in a defunct state may be fixed or otherwise come out of the defunct state. The recipient software application may then transmit a request to message broker subsystem  to reestablish the terminated connection between message broker subsystem  and the recipient software application. Communication facility  may be configured to receive the request initiated by the recipient software application and reestablish the connection. In response, fail-over processing facility  may cease the automatic performing of the fail-over process and direct delivery facility  to resume delivering messages to the recipient software application.","Storage facility  may be configured to maintain message data  representative of one or more messages to be delivered to a recipient software application, fault surveillance data  representative of data utilized by fault surveillance facility  (e.g., user-configurable data representative of a fault interval and\/or a defunct interval), and fail-over processing data  representative of data utilized by fail-over processing facility  (e.g., data representative of one or more alternative recipient software applications). Storage facility  may maintain additional or alternative data as may serve a particular application.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5","FIG. 5"],"b":["106","106","502","504","102","104","106","104"]},"Communication facility  may be configured to facilitate communication between global directory service subsystem  and software application subsystem . Communication facility  may be further configured to facilitate communication between global directory service subsystem  and message broker subsystem .","Storage facility  may be configured to maintain broker information data , software application information data , and\/or any other data as may serve a particular application.","Broker information data  may include information descriptive of or otherwise corresponding to message broker subsystem . For example, broker information data  may include a list of broker names and corresponding IP addresses and location port numbers. Broker information data  may be registered dynamically and\/or statically as may serve a particular application.","Software application information data  may include information descriptive of or otherwise corresponding to one or more software applications. For example, software application information data  may include a list of software application names, associated broker names, and one or more names of alternative software applications for fail-over processing. Software application information data  may be registered dynamically and\/or statically as may serve a particular application. For example, software application information data  may be periodically updated (e.g., nightly).","As mentioned, software application subsystem , message broker subsystem , and global directory service subsystem  may each be implemented on one or more computing devices. For example, software application subsystem  may be implemented on a first computing device configured to execute an originating software application and a second computing device configured to execute a recipient software application. Alternatively, software application subsystem  may be implemented on a single computing device configured to execute both the originating and recipient software applications.","In some examples, software application subsystem , message broker subsystem , and global directory service subsystem  are implemented on distinct computing devices. Alternatively, subsystems - may be implemented on the same computing device. Any other implementation of subsystems - may be realized in accordance with the systems and methods described herein.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["600","102","104","106","600"]},"As shown, computing device  may include a communication interface , a processor , a storage device , and an input\/output (\u201cI\/O\u201d) module  communicatively connected via a communication infrastructure . While an exemplary computing device  is shown in , the components illustrated in  are not intended to be limiting. Additional or alternative components may be used in other embodiments. Components of computing device  shown in  will now be described in additional detail.","Communication interface  may be configured to communicate with one or more computing devices. In particular, communication interface  may be configured to transmit and\/or receive one or more messages, encryption configuration data, communication signals, and\/or other data. Examples of communication interface  include, without limitation, a wired network interface (such as a network interface card), a wireless network interface (such as a wireless network interface card), a modem, and any other suitable interface. In at least one embodiment, communication interface  may provide a direct connection between two or more of subsystems - via a direct link to a network, such as the Internet. Communication interface  may additionally or alternatively provide such a connection through, for example, a local area network (such as an Ethernet network), a personal area network, a telephone or cable network, a cellular telephone connection, a satellite data connection, a dedicated URL, or any other suitable connection. Communication interface  may be configured to interface with any suitable communication media, protocols, and formats, including any of those mentioned above.","Processor  generally represents any type or form of processing unit capable of processing data or interpreting, executing, and\/or directing execution of one or more of the instructions, processes, and\/or operations described herein. Processor  may direct execution of operations in accordance with one or more applications  or other computer-executable instructions such as may be stored in storage device  or another computer-readable medium. As an example, processor  may be configured to process data representative of a message generated by a software application, including encrypting, decrypting, and\/or parsing the data.","Storage device  may include one or more data storage media, devices, or configurations and may employ any type, form, and combination of data storage media and\/or device. For example, storage device  may include, but is not limited to, a hard drive, network drive, flash drive, magnetic disc, optical disc, random access memory (\u201cRAM\u201d), dynamic RAM (\u201cDRAM\u201d), other non-volatile and\/or volatile data storage units, or a combination or sub-combination thereof. Electronic data, including data described herein, may be temporarily and\/or permanently stored in storage device . For example, data representative of one or more executable applications  (which may include, but are not limited to, one or more of the software applications described herein) configured to direct processor  to perform any of the operations described herein may be stored within storage device . In some examples, data may be arranged in one or more databases residing within storage device .","I\/O module  may be configured to receive user input and provide user output and may include any hardware, firmware, software, or combination thereof supportive of input and output capabilities. For example, I\/O module  may include hardware and\/or software for capturing user input, including, but not limited to, a keyboard or keypad, a touch screen component (e.g., touch screen display), a receiver (e.g., an RF or infrared receiver), and\/or one or more input buttons.","I\/O module  may include one or more devices for presenting output to a user, including, but not limited to, a graphics engine, a display (e.g., a display screen, one or more output drivers (e.g., display drivers), one or more audio speakers, and one or more audio drivers. In certain embodiments, I\/O module  is configured to provide graphical data to a display for presentation to a user. The graphical data may be representative of one or more graphical user interfaces (\u201cGUIs\u201d), GUI views, media content views, and\/or any other view as may serve a particular application.","In some examples, any of the facilities described herein may be implemented by or within one or more components of computing device . For example, one or more applications  residing within storage device  may be configured to direct processor  to perform one or more processes or functions associated with communication facility , messaging facility , communication facility , delivery facility , fault surveillance facility , fail-over processing facility , and\/or communication facility . Likewise, storage facility , storage facility , and\/or storage facility  may be implemented by or within storage device .",{"@attributes":{"id":"p-0068","num":"0067"},"figref":["FIG. 7","FIG. 7","FIG. 7"],"b":["700","700","104"]},"In step , a message broker subsystem attempts to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval. The one or more messages may be generated by an originating software application and may be attempted to be delivered by the message broker subsystem in any of the ways described herein. The fault interval may be user configurable and may be of any suitable length.","In step , the message broker subsystem determines that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval. The message broker subsystem may perform the determination in any of the ways described herein.","In step , the message broker subsystem automatically performs a fail-over process on one or more other messages intended for the recipient software application in response to the determination that the recipient software application is in the fault state. The fail-over process may include any of the fail-over process described herein. For example, the message broker subsystem may automatically deliver the one or more other messages to an alternative recipient software application specified by a global directory service subsystem. Alternatively, if no alternative recipient software application is specified by the global directory service subsystem, the message broker subsystem may return the one or more other messages to one or more originating software applications.","Specific implementations and examples of the systems and methods described herein will now be described in connection with . It will be recognized that the implementations and examples described in connection with  are merely illustrative of the many possible implementations and examples of the systems and methods described herein.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 8","FIG. 8"],"b":["800","100","802","1","802","2","802","804","806","102","802","104","804","106","806","802","1","804","808","802","2","804","810","806","802","1","802","2","804","812","1","812","2","812","3"]},"As shown in , client - may be configured to execute a software application -. Software application - may reside within client -, as depicted in , or may be located within any other subsystem or device. Software application - may be configured to generate a message that is to be transmitted to another software application - executed by and\/or residing within client -. Hence, software application - may be referred to as an originating software application and software application - may be referred to as a recipient software application.","Configuring both software applications - and - (collectively \u201csoftware applications \u201d) to interface directly one with another may be costly, difficult, cumbersome, and sometimes impossible. Hence, messages may be transmitted between software applications  via message broker , which is configured to interface with both software applications . To this end, client - may be configured to selectively establish connection  with the message broker . Message broker  may in turn selectively establish connection  with client -. A message generated by originating software application - may be transmitted to message broker  by way of connection . Message broker  may deliver the message to recipient software application - by way of connection .","If message broker  has already determined that recipient software application - is in a fault state (i.e., unable to receive the message from message broker ), message broker  may automatically perform fail-over processing on the message and\/or one or more other messages intended for recipient software application -.","To this end, message broker  may query global directory service server  to determine the type of fail-over processing to be performed on messages intended for recipient software application -. Global directory service server  may maintain data representative of a fail-over process to be performed on messages that cannot be delivered to recipient software application -. In the example of , there are no other software applications connected to message broker , so global directory service server  may indicate that message broker  is to simply return messages to originating software application - while the recipient software application is in a fault state.","In some examples, message broker  may locally cache the fail-over processing data obtained from global directory service server  so that message broker  may avoid querying global directory service server  each time a message intended for recipient software application - is processed by message broker . Message broker  may be configured to periodically re-query global directory service server  for the fail-over processing data in the event that the fail-over processing data changes.","As described previously, message broker  may hold a message (i.e., not perform fail-over processing on the message) and continue to attempt to deliver the message to recipient software application - after determining that recipient software application is in a fault state. If at any time message broker  is successful in delivering the message to recipient software application -, message broker  may immediately cease performing the fail-over processing on messages intended for recipient software application - and resume delivering the messages to recipient software application -.",{"@attributes":{"id":"p-0080","num":"0079"},"figref":["FIG. 9","FIG. 9","FIG. 8"],"b":["900","100","900","800","900","802","3","804","902","806","812","4","802","3","814","3"]},"In some examples, software application - may be specified by global directory service server  as an alternative recipient software application corresponding to recipient software application -. Hence, if recipient software application - is in a fault state, message broker  may automatically deliver messages intended for recipient software application - to software application -.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":["FIG. 10","FIG. 10"],"b":["1000","100","104","804","804","1","804","4","1002","1002","1","1002","6","804","806","1004","1004","1","1004","4","804","806","804","1","804","2","804","3","804","4"]},"Each message broker  may be associated with one or more software applications  (e.g., software applications - through -). For example, message broker - is associated with software applications -, -, and - in . Message brokers - through - may be associated with the other software applications , as illustrated in . Each message broker  is configured to receive messages from and\/or deliver messages to its associated software applications .","Though not illustrated specifically in , the software applications  shown in  may each reside within and\/or be executed by one or more clients. For example, software application - may be executed by a first client, software application - may be executed by a second client, and software application - may be executed by a third client. In an alternative configuration, all of software applications -, -, and - may be executed by a single client. One or more other clients may be configured to execute the other software applications  shown in .","Global directory service server  may be configured to maintain broker information data associated with the message brokers  shown in . To illustrate,  shows an exemplary broker information table  comprising broker information data that may be maintained by global directory service server . The broker information data may be maintained in the form of a look up table, for example.","As shown in , broker information table  may include a list of broker names, location IP addresses, and location port numbers associated with each message broker . The information included within broker information table  may be accessed by message brokers  and\/or software applications  to determine appropriate delivery instructions for messages to be transmitted from one software application  to another.","Global directory service server  may be further configured to maintain software application information data associated with the software applications  shown in . To illustrate,  shows an exemplary software application information table  comprising software application information data that may be maintained by global directory service server . The software application data may be maintained in the form of a look up table, for example.","As shown in , software application table  may include a list of names of each of the software applications . For example, software application - may be named \u201capplication \u201d, software application - may be named \u201capplication \u201d, etc. Software application table  may further include the name of a message broker  that is associated with each of the software applications . For example, software application information table  shows that application  (i.e., software application -) is associated with broker A (i.e., message broker -), application  (i.e., software application -) is associated with broker D (i.e., message broker -), etc. Software application table  may further include the names of one or more software applications that have been designated as alternative software applications for one or more of the software applications . For example, application  (i.e., software application -) and application  (i.e., software application -) are shown to be designated as alternative software applications for application  (i.e., software application -).","The information included within software application information table  may be used to determine the type of fail-over processing performed on a message intended for a software application that has been determined to be in a fault state. For example, a message intended for application  (i.e., software application -) may be instead delivered to application  (i.e., software application -) if software application - is in a fault state. If software application - is also in a fault state, the message may be delivered to application  (i.e., software application -). If software applications -, -, and - are all in a fault state, the message may be returned to an originating software application.","Returning to , an example illustrating fail-over processing that may be performed on a message will now be given. Software application - may generate a message intended for software application -. Software application - may transmit the message to message broker -. Message broker - may process the delivery instructions included in the message to determine that the message is to be delivered to software application -. Message broker - may then query global directory service server  to determine whether software application - is registered with global directory service server . Global directory service server  may inform message broker - that software application - is a registered software application and that it is associated with message broker -. Global directory service server  may also provide message broker - with the location IP address and location port number of message broker -. Using this information, message broker - establishes a connection (i.e., connection -) with message broker - (unless the connection has already been established). Message broker - may then transmit the message to message broker -.","Message broker - may receive and attempt to deliver the message to software application -. If message broker - fails to deliver the message within a predetermined message interval or fault interval, message broker - may determine that software application - is in a fault state. Message broker - may then return the message to message broker - indicating that software application - is in the fault state.","Message broker - may then query global directory service server  to determine that software application - has been designated as an alternative software application for software application -. Alternatively, message broker - may have this fail-over processing information already cached. In this case, message broker - may proceed with fail-over processing on the message without first querying global directory service server .","Message broker - may query global directory service server  to determine whether software application - is registered with global directory service server . Global directory service server  may inform message broker - that software application - is a registered software application and that it is associated with message broker -. Global directory service server  may also provide message broker - with the location IP address and location port number of message broker -. Using this information, message broker - establishes a connection (i.e., connection -) with message broker - (unless the connection has already been established). Message broker - may then transmit the message to message broker -.","Message broker - may receive and attempt to deliver the message to software application -. If the delivery is successful, message broker - may notify message broker - accordingly. If message broker - fails to deliver the message within a predetermined message interval or fault interval, message broker - may determine that software application - is in a fault state. Message broker - may then return the message to message broker -, which may return the message to originating software application - indicating that both software applications - and - are in a fault state.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIG. 13","FIG. 13","FIG. 13"],"b":["1300","1300","104"]},"In step , a message broker subsystem attempts to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval. The one or more messages may be generated by an originating software application and may be attempted to be delivered by the message broker subsystem in any of the ways described herein. The fault interval may be user configurable and may be of any suitable length.","In step , the message broker subsystem determines that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval. The message broker subsystem may perform the determination in any of the ways described herein.","In step , the message broker subsystem queries a global service subsystem to identify an alternative recipient software application to the recipient software application. A software application may be designated as an alternative recipient software application in any of the ways described herein.","In step , the message broker subsystem automatically attempts to deliver one or more other messages intended for the recipient software application to the alternative recipient software application in response to the determination that the recipient software application is in the fault state. The message broker may attempt to deliver the one or more other message to the alternative recipient software application in any of the ways described herein.","As detailed above, the methods and systems described herein facilitate fault surveillance and automatic fail-over processing in broker-based messaging systems. As an example, an exemplary method includes attempting, by a message broker subsystem, to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval, determining, by the message broker subsystem, that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval, and automatically performing, by the message broker subsystem, a fail-over process on one or more other messages intended for the recipient software application in response to the determination that the recipient software application is in the fault state.","Another exemplary method includes attempting, by a message broker subsystem, to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval, determining, by the message broker subsystem, that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval, querying, by the message broker subsystem, a global service subsystem to identify an alternative recipient software application to the recipient software application, and automatically attempting, by the message broker subsystem, to deliver one or more other messages intended for the recipient software application to the alternative recipient software application in response to the determination that the recipient software application is in the fault state.","An exemplary system includes a delivery facility configured to deliver one or more messages intended for a recipient software application to the recipient software application during a predetermined fault interval, a fault surveillance facility communicatively coupled to the delivery facility and configured to determine that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval, and a fail-over processing facility configured to automatically perform a fail-over process on one or more other messages intended for the recipient software application in response to the determination that the recipient software application is in the fault state.","Another exemplary system includes a message broker configured to deliver messages to a recipient software application and a global directory service server selectively and communicatively coupled to the message broker and configured to maintain software application information data representative of a name of a software application designated as an alternative recipient software application for the recipient software application. The message broker is further configured to attempt to deliver one or more messages to the recipient software application during a predetermined fault interval, determine that the recipient software application is in a fault state after failing to deliver the one or more messages to the recipient software application during the predetermined fault interval, query the global directory service server for the software application information data, and automatically attempt to deliver at least one of the one or more messages to the alternative recipient software application in response to the determination that the recipient software application is in the fault state.","In the preceding description, various exemplary embodiments have been described with reference to the accompanying drawings. It will, however, be evident that various modifications and changes may be made thereto, and additional embodiments may be implemented, without departing from the scope of the invention as set forth in the claims that follow. For example, certain features of one embodiment described herein may be combined with or substituted for features of another embodiment described herein. The description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The accompanying drawings illustrate various embodiments and are a part of the specification. The illustrated embodiments are merely examples and do not limit the scope of the disclosure. Throughout the drawings, identical or similar reference numbers designate identical or similar elements.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 8","FIG. 1"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 9","FIG. 1"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 10","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
