---
title: Compression of image regions according to graphics command type
abstract: A method according to the invention conserves host system resources by compressing an image region according to the type of graphics command used to generate or modify the region. As an image is being rendered, a list of modified image regions is maintained. For each modified image region, metadata are associated with the region to identify the type of graphics command that was used to produce the modification. Per-region choices of compression algorithms can then be made responsive to the metadata without regard to the content of the image data itself.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07903119&OS=07903119&RS=07903119
owner: Hewlett-Packard Development Company, L.P.
number: 07903119
owner_city: Houston
owner_country: US
publication_date: 20041029
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["This invention relates generally to computer graphics. More specifically, the invention relates to techniques for efficiently compressing frame buffer contents or other image data.","It is often beneficial to compress frame buffer contents or other image data. For example, in a networked environment in which frame buffer contents must be transmitted over a network from one computing device to another, compression of the frame buffer contents prior to transmission conserves network bandwidth. Compression of image data also helps to conserve the capacity of storage devices used to store the data.","As it happens, the efficiency of compression techniques varies depending on the types of image data to which they are applied. In addition, images differ with regard to the quality of compression that is required to process them in an acceptable manner. Consequently, it is known to pre-process a document prior to compressing it such that the document is decomposed into a number of regions. The contents of the image data contained within the regions are then analyzed so that the regions may be classified according to these contents. Once the regions have been so classified, different compression techniques may be applied to the different regions as appropriate. This technique enables greater efficiency to be achieved when compressing the document than could be achieved by using a single compression technique for the entire document. One decomposition and content-based classification scheme that has proved useful in this context is described in U.S. Pat. No. 6,744,919, titled \u201cClassification of Blocks for Compression Based on Numbers of Distinct Colors\u201d (hereinafter \u201cthe '919 patent\u201d).","One of the significant challenges in applying any, of the decomposition and classification techniques of the prior art, however, is their computational complexity. Because the techniques of the prior art consume significant amounts of memory and a significant number of processor cycles, they impact the performance of and increase the cost of the systems that utilize them.","In one aspect, a system according to the invention conserves host system resources by compressing image data based on the type of graphics command that was used to generate or modify the image data. As an image is being rendered, a list of modified image regions is maintained. For each modified image region, metadata are associated with the region to identify the type of graphics command that was used to produce the modification. Per-region choices of compression algorithms can then be made responsive to the metadata. For a given region, if the associated metadata indicates that the graphics command type used to modify the region satisfies predetermined criteria, then an efficient compression algorithm maybe chosen for the region without analyzing the contents of the image data contained within the region.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1","b":["100","102","104","100","106","108","110","110"]},"Numerous outcomes may result from block . Certain image data content may be compressed most effectively using a lossy low-quality compression algorithm. If the region being processed falls within such a category, then such a low-quality algorithm may be used to compress the region as indicated in block . Certain other image data content may be compressed most effectively using a lossy high-quality compression algorithm. If that is the case for the region being processed, then the region may be compressed using such a high-quality algorithm as indicated in block . Finally, other image data content can be most effectively compressed using a lossless compression algorithm such as, for example, a run-length style encoding scheme. If the region being processed falls in the latter category, then it may be compressed using a lossless algorithm as indicated in block .","As was discussed previously, it is computationally expensive to choose a compression algorithm based on the content of an image. Thus, one of the benefits of the inventive technique is that step  may be avoided if it is determined in step  that the graphics command type for the region being processed satisfies at least one predetermined criterion. Such a predetermined criterion might include, for example, whether the graphics command was a \u201cfill,\u201d \u201ctext,\u201d \u201cline\u201d or \u201cbitmap\u201d type command, and whether the command involved not more than two colors. Other criteria may also be included, such as whether the graphics command was an \u201carc,\u201d \u201cpoint\u201d or \u201cpolygon\u201d type command. Typically, regions rendered using these types of commands\u2014especially those involving two or fewer colors\u2014may be compressed using any of various run-length style compression algorithms such as classic run-length encoding, rise-run-length encoding or hextile encoding. Thus, if the determination made in step  is affirmative, then step  may be bypassed, and such a run-length-style compression algorithm maybe chosen to compress the region.","Embodiments of the invention may be constructed for a variety of computing platforms and a variety of deployment configurations.  presents, by way of illustrative example and not by way of limitation, a representative number of such deployment configurations . In configurations , a sender process or daemon  in an application host  communicates via a network  with a receiver process or daemon  in one or more remote hosts . An application program  in host  generates graphics commands according to an application programming interface (\u201cAPI\u201d). A wide variety of API's may be employed for this purpose such as, for example, the graphics device interface (\u201cGDI\u201d) promulgated by Microsoft Corporation, the Xwindow system interface (\u201cX\u201d), or the openGL (\u201cOGL\u201d) interface promulgated by Silicon Graphics, Incorporated. Graphics commands issued by application  may be processed by a graphics subsystem . Processing of API graphics commands by graphics subsystem  may result in some optimization of the commands and generally results in a stream of driver-level graphics commands being issued to a graphics driver . In turn, graphics driver  signals graphics hardware system  appropriately to generate corresponding images on a display device.","In a first class of preferred embodiments, graphics subsystem  issues the graphics command stream not only to graphics driver , but also to an optional mirror driver . Mirror driver  does not necessarily control any graphics hardware, but may accumulate metadata about the command stream in a manner to be further detail below. It is believed that this class of embodiments will work well in a GDI environment. In such a case, the role of graphics subsystem  may be played by the operating system of host .","In a second class of preferred embodiments, graphics subsystem  may take the form of a modified X server or a modified OGL implementation. The modifications would include command wrappers that intercept graphics commands in the command stream. For example, if application  issued an XDrawLines command, an XDrawLines command wrapper would be invoked. The XDrawLines command wrapper would accumulate metadata about the command in an optional shared memory  in a manner to be further described below, and then would invoke the driver-level function or functions necessary to implement the originally-issued command.",{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 3","FIG. 2"],"b":["300","300","212","214","302","304","214","216","220","220","306","214","220","220","220"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 4","FIG. 2"],"b":["400","300","212","214","402","404","220","222","406","216"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5","b":["500","202","202","502","208","208","202","202","204","504","202","220","222","506","202","202","508","202","218","510","202","100","512","202","208","208","210"]},"While the invention has been described in detail with reference to preferred embodiments thereof, the described embodiments have been presented by way of example and not by way of limitation. It will be understood by those skilled in the art that various changes may be made in the form and details of the described embodiments without deviating from the spirit and scope of the invention as defined by the appended claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 2"]}]},"DETDESC":[{},{}]}
