---
title: Computer CPU and memory to accelerated graphics port bridge having a plurality of physical buses with a single logical bus number
abstract: A core logic chip set in a computer system provides a bridge between processor host and memory buses and a plurality of Accelerated Graphics Port (AGP) buses. Each of the plurality of AGP buses have the same logical bus number. The core logic chip set has an arbiter having Request (“REQ”) and Grant (“GNT”) signal lines for each AGP device connected to the plurality of AGP physical buses. Each of the plurality of AGP buses has its own read and write queues to provide transaction concurrency of AGP devices on different ones of the plurality of AGP buses when the transaction addresses are not the same or are M byte aligned. Upper and lower memory address range registers store upper and lower memory addresses associated with each AGP device. Whenever a transaction occurs, the transaction address is compared with the stored range of memory addresses. If a match between addresses is found then strong ordering is used. If no match is found then weak ordering may be used to improve transaction latency times. AGP device to AGP device transactions may occur without being starved by CPU host bus to AGP bus transactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06954209&OS=06954209&RS=06954209
owner: Hewlett-Packard Development Company, L.P.
number: 06954209
owner_city: Houston
owner_country: US
publication_date: 20020403
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED PATENT APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF SPECIFIC EMBODIMENTS"],"p":["This patent application is a continuation-in-part of U.S. patent application Ser. No. 09\/730,948, filed Dec. 6, 2000, entitled \u201cMulti-mode Graphics Address Remapping Table for an Accelerated Graphics Port Device\u201d by Sompong P. Olarig.","1. Field of the Invention","The present invention relates to computer systems using a bus bridge(s) to interface a central processor(s), random access memory and input-output peripherals together, and more particularly, in utilizing in a computer system a bridge to a plurality of Accelerated Graphics Port (\u201cAGP\u201d) buses wherein the plurality of AGP buses have the same logical bus number.","2. Description of the Related Art","This section is intended to introduce the reader to various aspects of art which may be related to various aspects of the present invention which are described and\/or claimed below. This discussion is believed to be helpful in providing the reader with background information to facilitate a better understanding of the various aspects of the present invention. Accordingly, it should be understood that these statements are to be read in this light, and not as admissions of prior art.","Use of computers, especially personal computers, in business and at home is becoming more and more pervasive because the computer has become an integral tool of most information workers who work in the fields of accounting, law, engineering, insurance, services, sales and the like. Rapid technological improvements in the field of computers have opened up many new applications heretofore unavailable or too expensive for the use of older technology mainframe computers. These personal computers may be used as stand-alone workstations (high-end individual personal computers) or linked together in a network by a \u201cnetwork server\u201d which is also a personal computer that may have a few additional features specific to its purpose in the network. The network server may be used to store massive amounts of data, and may facilitate interaction of the individual workstations connected to the network for electronic mail (\u201cEmail\u201d), document databases, video teleconferencing, whiteboarding, integrated enterprise calendar, virtual engineering design and the like. Multiple network servers may also be interconnected by local area networks (\u201cLAN\u201d) and wide area networks (\u201cWAN\u201d).","A significant part of the ever-increasing popularity of the personal computer, besides its low cost relative to just a few years ago, is its ability to run sophisticated programs and perform many useful and new tasks. Personal computers today may be easily upgraded with new peripheral devices for added flexibility and enhanced performance. A major advance in the performance of personal computers (both workstation and network servers) has been the implementation of sophisticated peripheral devices such as video graphics adapters, local area network interfaces, SCSI bus adapters, full motion video, redundant error checking and correcting disk arrays, and the like. These sophisticated peripheral devices are capable of data transfer rates approaching the native speed of the computer system's microprocessor central processing unit (\u201cCPU\u201d). The peripheral devices' data transfer speeds are achieved by connecting the peripheral devices to the microprocessor(s) and associated system random access memory through high-speed expansion local buses. Most notably, a high-speed expansion local bus standard has emerged that is microprocessor independent and has been embraced by a significant number of peripheral hardware manufacturers and software programmers. This high-speed expansion bus standard is called the \u201cPeripheral Component Interconnect\u201d or \u201cPCI.\u201d","Several official specifications and other documents relating to various aspects of the PCI Local Bus are currently available from the PCI Special Interest Group. Some examples of those documents include the PCI Local Bus Specification, revision 2.1; the PCI Local Bus Specification, revision 2.2 (PCI Conventional 2.2 Specification), the PCI-X 1.0a Specification, the Mini PCI Specification, the PCI\/PCI Bridge Specification, revision 1.0; the PCI System Design Guide, revision 1.0; the PCI BIOS Specification, revision 2.1, the Small PCI 1.5s Specification, and the Engineering Change Notice (\u201cECN\u201d) entitled \u201cAddition of \u2018New Capabilities\u2019 Structure,\u201d dated May 20, 1996, the disclosures of which are hereby incorporated by reference. These PCI specifications and ECN are available from the PCI Special Interest Group, P.O. Box 14070, Portland, Oreg. 97214.","A computer system has a plurality of information (data and address) buses such as a host bus, a memory bus, at least one high speed expansion local bus such as the PCI bus, and other peripheral buses such as the Small Computer System Interface (SCSI), Extension to Industry Standard Architecture (EISA), and Industry Standard Architecture (ISA). The microprocessor(s) (CPU) of the computer system communicates with main memory and with the peripherals that make up the computer system over these various buses. The microprocessor(s) communicate(s) to the main memory over a host bus to memory bus bridge. The main memory generally communicates over a memory bus through a cache memory bridge to the CPU host bus. The peripherals, depending on their data transfer speed requirements, are connected to the various buses which are connected to the microprocessor host bus through bus bridges that detect required actions, arbitrate, and translate both data and addresses between the various buses.","The choices available for the various computer system bus structures and devices residing on these buses are relatively flexible and may he organized in a number of different ways. One of the more desirable features of present day personal computer systems is their flexibility and ease in implementing custom solutions for users having widely different requirements. Slower peripheral devices may be connected to the ISA or EISA bus(es), other peripheral devices, such as disk and tape drives may be connected to a SCSI bus, and the fastest peripheral devices such as network interface cards (NICs) and video graphics controllers may require connection to the PCI bus. Information transactions on the PCI bus may operate at 33 MHz or 66 MHz clock rates and may be either 32 or 64-bit transactions.","A PCI device may he recognized by its register configuration during system configuration or POST, and the speed of operation of the PCI device may be determined during POST by reading the 66 MHz-CAPABLE hit in the status register, and\/or by a hardwired electrical signal \u201cM66EN\u201d as an active \u201chigh\u201d input to the 66 MHz PCI device card. If any of the PCI devices on the PCI bus are not 66 MHz capable then the non-66 MHz capable PCI card will deactivate the M66EN signal pin by pulling it to ground reference. If all PCI devices on the PCI bus are 66 MHz capable then M66EN remains active high and each 66 MHz capable PCI card will operate at a 66 MHz bus speed.","The PCI 2.1 and 2.2 Specifications supports a high 32-bit bus, referred to as the 64-bit extension to the standard low 32-bit bus. The 64-bit bus provides additional data bandwidth for PCI devices that require it. The high 32-bit extension for 64-bit devices requires an additional 39 signal pins: REQ#, ACK#, AD[::], C\/BE[::]#, and PAR. These signals are defined more fully in the PCI 2.1 and 2.2 Specifications incorporated by reference hereinabove. 32-bit PCI devices work unmodified with 64-bit PCI devices. A 64-bit PCI device must default to 32-bit operation unless a 64-bit transaction is negotiated. 64-bit transactions on the PCI bus are dynamically negotiated (once per transaction) between the master and target PCI devices. This is accomplished by the master asserting REQ# and the target responding to the asserted REQ# by asserting ACK#. Once a 64-bit transaction is negotiated, it holds until the end of the transaction. Signals REQ# and ACK# are externally pulled up by pull up resistors to ensure proper behavior when mixing 32-bit and 64-bit PCI devices on the PCI bus. A central resource controls the state of REQ# to inform the 64-bit PCI device that it is connected to a 64-bit bus. If REQ# is deasserted when RST# is deasserted, the PCI device is not connected to a 64-bit bus. If REQ# is asserted when RST# is deasserted, the PCI device is connected to a 64-bit bus.","Increasingly sophisticated microprocessors have revolutionized the role of the personal computer by enabling complex applications software to run at mainframe computer speeds. The latest microprocessors have brought the level of technical sophistication to personal computers that, just a few years ago, was available only in mainframe and mini-computer systems. Some representative examples of these new microprocessors are the \u201cPENTIUM\u201d, and \u201cPENTIUM PRO\u201d, \u201cPENTIUM II\u201d, \u201cPENTIUM III\u201d and \u201cPENTIUM 4 (registered trademarks of Intel Corporation). Advanced microprocessors are also manufactured by Advanced Micro Devices, Cyrix, IBM, Digital Equipment Corp., and Motorola.","These sophisticated microprocessors have, in turn, made possible running complex application programs using advanced three dimensional (\u201c3-D\u201d) graphics for computer aided drafting and manufacturing, engineering simulations, games and the like. Increasingly complex 3-D graphics require higher speed access to ever larger amounts of graphics data stored in memory. This memory may be part of the video graphics processor system, but, preferably, would be best (lowest cost) if part of the main computer system memory. Intel Corporation has proposed a low cost but improved 3-D graphics standard called the \u201cAccelerated Graphics Port\u201d (\u201cAGP\u201d) initiative. With AGP 3-D, graphics data, in particular textures, may be shifted out of the graphics controller local memory to computer system memory. The computer system memory is lower in cost than the graphics controller local memory and is more easily adapted for a multitude of other uses besides storing graphics data.","The proposed Intel AGP 3-D graphics standard defines a high speed data pipeline, or \u201cAGP bus,\u201d between the graphics controller and system memory. This AGP bus has sufficient bandwidth for the graphics controller to retrieve textures from system memory without materially affecting computer system performance for other non-graphics operations. The Intel 3-D graphics standard is a specification which provides signal, protocol, electrical, and mechanical specifications for the AGP bus and devices attached thereto. This specification is entitled \u201cAccelerated Graphics Port Interface Specification Revision 1.0,\u201d dated Jul. 31, 1996, (\u201cAGP1.0\u201d) the disclosure of which is hereby incorporated by reference. Enhancements to the AGP 1.0 Specification are included in the \u201cAccelerated Graphics Port Interface Specification Revision 2.0,\u201d dated May 4, 1998 (\u201cAGP 2.0\u201d), the disclosure of which is hereby incorporated by reference. Both the AGP1.0 and AGP 2.0 Specifications are available from Intel Corporation, Santa Clara, Calif.","The AGP 1.0 interface specification uses the 66 MHz PCI (Revision 2.1) specification as an operational baseline, with three performance enhancements to the PCI specification which are used to optimize the AGP1.0 Specification for high performance 3-D graphics applications. These enhancements are: 1) pipelined memory read and write operations, 2) demultiplexing of address and data on the AGP bus by use of sideband signals, and 3) data transfer rates of 133 MHz for data throughput in excess of 500 megabytes per second (\u201cMB\/s\u201d). The remaining AGP1.0 Specification does not modify the PCI specification, but rather provides a range of graphics-oriented performance enhancements for use by 3-D graphics hardware and software designers. The AGP1.0 Specification is neither meant to replace nor diminish full use of the PCI standard in the computer system. The AGP1.0 Specification creates an independent and additional high speed local bus for use by 3-D graphics devices such as a graphics controller, wherein the other input-output (\u201cI\/O\u201d) devices of the computer system may remain on any combination of the PCI, SCSI, EISA and ISA buses. The AGP1.0 Specification supports only 32-bit memory addressing. Further definition and enhancement of the AGP 1.0 Specification is more fully defined in \u201cCompaq's Supplement to the \u2018Accelerated Graphics Port Interface Specification Version 1.0\u2019,\u201d Revision 0.8, dated Apr. 1, 1997, which is hereby incorporated by reference.","The AGP 2.0 Specification supports 64-bit memory addressing, which is beneficial for addressing memory sizes allocated to the AGP device that are larger than 2 GB. The AGP 2.0 Specification also includes several other enhancements. For example, the AGP 2.0 Specification supports 1) 4x transfer mode with low (1.5V voltage electrical signals that allows four data transfers per 66 MHz clock cycle, providing data throughput of up to 1GB\/second; 2) five additional sideband signals; 3) a fast write protocol; 4) new input\/output buffers; and 5) new mechanical connectors. The AGP 2.0 Specification is hereby incorporated by reference herein.","A draft version of the AGP 8x Specification (AGP Specification 3.0, Draft Version 0.95) was promulgated by Intel in May, 2001. The AGP 3.0 data bus introduces AGP 8x transfer mode, which provides a peak theoretical bandwidth of 2.1 GB\/s (32 bits per transfer at 533 MT\/s). Both the common clock and source synchronous data strobe operation and protocols are similar to those employed by AGP 2.0 with all modifications guided by the need to support the 8x data transfer rate of AGP 3.0's source synchronous mode. The AGP 3.0 Specification, Draft Version 0.95, is hereby incorporated by reference herein.","Regardless of the version of the AGP specification, to functionally enable the AGP 3-D graphics bus, new computer system hardware and software are required. This requires new computer system core logic designed to function as a host bus\/memory bus\/PCI bus to AGP bus bridge meeting the AGP1.0 or AGP 2.0 Specifications, and new Read Only Memory Basic Input Output System (\u201cROM BIOS\u201d) and Application Programming Interface (\u201cAPI\u201d) software to make the AGP dependent hardware functional in the computer system. The computer system core logic must still meet the PCI and\/or PCI-X standards referenced above and facilitate interfacing the PCI bus(es) to the remainder of the computer system. In addition, new AGP compatible device cards must be designed to properly interface, mechanically and electrically, with the AGP bus connector.","AGP and PCI device cards are not physically or electrically interchangeable even though there is some commonality of signal functions between the AGP and PCI interface specifications. The AGP specifications only make allowance for a single AGP device on an AGP bus. Whereas the PCI specification allows two PCI devices on a PCI bus running at 66 MHz. The single AGP device is capable of functioning in a 1x mode (264 MB\/s peak), a 2x mode (532 MB\/s peak), a 4x mode (1 GB\/s peak) or an 8x mode (theoretical limit of 2.1 GB\/s peak). The AGP bus is defined as a 32 bit bus, or four bytes per data transfer. The PCI bus is defined as either a 32 bit or 64 bit bus, or four or eight bytes per data transfer, respectively. The AGP bus, however, has additional sideband signals which enables it to transfer blocks of data more efficiently than is possible using a PCI bus.","The purpose of the original AGP bus and the extensions set forth in subsequent versions of the specification is to An AGP bus running in the 2x mode (532 MB\/s peak) may provide sufficient video data throughput to allow increasingly complex 3-D graphics applications, particularly games, to run on personal computers. Some personal computer uses do not require high end 3-D graphics, but would greatly benefit from having an additional AGP card slot for accepting an additional input-output device such as another video graphics card (dual head monitors), a high speed network interface card (\u201cNIC\u201d), a SCSI adapter, a wide area network digital router, and the like. Since the AGP specification is comprised of a superset of the 66 MHz, 32 bit PCI specification, a PCI device may also function on the AGP bus (different card slot connectors for the AGP and PCI device cards would be necessary). Thus, embedded (directly connected to the computer system motherboard) or card slot pluggable AGP and PCI devices could share the same AGP\/PCI bus, controller and arbiter of a core logic chip set used in a computer system.","Another advance in the flexibility and ease in the implementation of personal computers is the emerging \u201cplug and play\u201d standard in which each vendor's hardware has unique coding embedded within the peripheral device. Plug and play software in the computer operating system software auto configures the peripheral devices found connected to the various computer buses such as the various PCI, AGP, EISA and ISA buses. In addition, the plug and play operating system software configures registers within the peripheral devices found in the computer system as to memory space allocation, interrupt priorities and the like.","Plug and play initialization generally is performed with a system configuration program that is run whenever a new device is incorporated into the computer system. Once the configuration program has determined the parameters for each of the devices in the computer system, these parameters may be stored in non-volatile random access memory (NVRAM). An industry standard for storage of both plug and play and non-plug and play device configuration information is the Extended System Configuration Data (ESCD) format. The ESCD format is used to store detailed configuration information in the NVRAM for each device. This ESCD information allows the computer system read only memory (ROM) basic input\/output system (BIOS) configuration software to work together with the configuration utilities to provide robust support for all peripheral devices, both plug and play, and non-plug and play.","During the first initialization of a computer, the system configuration utility determines the hardware configuration of the computer system including all peripheral devices connected to the various buses of the computer system. Some user involvement may be required for device interrupt priority and the like. Once the configuration of the computer system is determined, either automatically and\/or by user selection of settings, the computer system configuration information is stored in ESCD format in the NVRAM. Thereafter, the system configuration utility need not be run again. This greatly shortens the startup time required for the computer system and does not require the computer system user to have to make any selections for hardware interrupts and the like, as may be required in the system configuration utility.","However, situations often arise which require rerunning the system configuration utility to update the device configuration information stored in the NVRAM when a new device is added to the computer system. One specific situation is when a PCI peripheral device interface card having a PCI\u2014PCI bridge is placed into a PCI connector slot of a first PC bus of the computer system. The PCI\u2014PCI bridge, which creates a new PCI bus, causes the PCI bus numbers of all subsequent PCI buses to increase by one (PCI\u2014PCI bridge may be a PCI interface card having its own PCI bus for a plurality of PCI devices integrated on the card or for PCI bus connector slots associated with the new PCI bus). This creates a problem since any user configured information such as interrupt request (IRQ) number, etc., stored in the NVRAM specifies the bus and device\/function number of the PCI device to which it applies. Originally, this information was determined and stored in the NVRAM by the system configuration utility during the initial setup of the computer system and contains configuration choices made at that time.","During normal startup of the computer system (every time the computer is turned on by the user), a Power On Self Test (POST) routine depends on prior information stored in the NVRAM by the system configuration utility. If the PCI bus numbers of any of the PCI cards change because a new PCI bus was introduced by adding a new PCI\u2014PCI bridge to the computer, the original configuration information stored in the NVRAM will not be correct for those PCI cards now having different bus numbers, even though they remain in the same physical slot numbers. This situation results in the software operating system not being able to configure the PCI cards now having bus numbers different than what was expected from the information stored in the NVRAM. This can be especially bothersome for a PCI device such as a controller which has been configured as a system startup device, but now cannot be used to startup the computer system because its registers have not been initialized during POST to indicate that it is supposed to be the primary controller.","The PCI 2.1 and 2.2 Specifications allows two PCI devices on a PCI bus running at 66 MHz. When more than two 66 MHz PCI devices are required in a computer system, a PCI to PCI bus bridge must be added. The PCI to PCI bus bridge is one load, the same as a PCI device card. Thus, adding PCI to PCI bridges is not very efficient when 66 MHz operation of the PCI buses is desired. Each time a PCI to PCI bridge is added to the computer system it creates a new PCI bus having a new PCI bus number. Multiple PCI to PCI bridges running at 66 MHz would typically have to be connected together sequentially, i.e. one downstream from another. Sequentially connecting the PCI to PCI bridges causes increased propagation time and bus to bus handshake and arbitration problems.","PCI devices are connected to the computer system CPU through at least one PCI bus. The at least one PCI bus is in communication with the host bus connected to the CPU through a Host\/PCI bus bridge. There exists on the computer system motherboard a set of electrical card edge connector sockets or slots\u201d adapted to receive one PCI card for each slot. These PCI card slots are numbered as to their physical location on the motherboard and define a unique characteristic for each of the respective PCI card slots and the PCI cards plugged therein. The PCI card slots may be interspersed with other ISA or EISA bus connector slots also located on the computer system motherboard.","The PCI bus closest to the CPU, i.e., the PCI bus just on the other side of the host\/PCI bridge is always bus number zero. Thus, any PCI device card plugged into a PCI slot connected to the number zero PCI bus is defined as being addressable at PCI bus number zero. Each PCI card comprises at least one PCI device that is unique in the computer system. Each PCI device has a plurality of registers containing unique criteria such as Vender ID, Device ID, Revision ID, Class Code Header Type, etc. Other registers within each PCI device may be read from and written to so as to further coordinate operation of the PCI devices in the computer system. During system configuration, each PCI device is discovered and its personality information such as interrupt request number, bus master priority, latency time and the like are stored in the system non-volatile random access memory (NVRAM) using, for example, the ESCD format.","The number of PCI cards that may he connected to a PCI bus is limited, however, because the PCI bus is configured for high speed data transfers. The PCI specification circumvents this limitation by allowing more than one PCI bus to exist in the computer system. A second PCI bus may be created by connecting another Host-to-PCI bridge to the host bus of the CPU. The second PCI bus connected to the downstream side (PCI bus side) of the second Host-to-PCI bridge is defined as \u201cnumber one\u201d if there are no other PCI\/PCI bridges connected to the PCI bus number zero.","Other PCI buses may be created with the addition of PCI\/PCI bridges. For example, a PCI card having a PCI\/PCI bridge is plugged into a PCI slot connected to PCI bus number zero on the motherboard of the computer system. In this example, bus number zero is the primary bus because the first host\/PCI bridge's PCI bus is always numbered zero. The upstream side of the PCI\/PCI bridge is connected to PCI bus number zero and the down stream side of the PCI\/PCI bridge now creates another PCI bus which is number one. The prior PCI bus number one on the down stream side of the second Host-to-PCI bus now must change to PCI bus number two. All PCI\/PCI bridges connected to or down stream of PCI bus number zero are sequentially numbered. This causes the number of the PCI bus that was created by the second Host-to-PCI bridge to be incremented every time a new PCI bus is created with a PCI\/PCI bridge down stream from PCI bus number zero.","When two PCI\/PCI bridges are connected to the PCI bus number zero, two PCI buses, numbers one and two, are created. For example, a first PCI card having a PCI\/PCI bridge is plugged into motherboard PCI slot number , creating PCI bus number one with the PCI\/PCI bridge of the first PCI card. A second PCI card having a PCI\/PCI bridge is plugged into motherboard PCI slot number , creating PCI bus number two with the PCI\/PCI bridge of the second PCI  card. PCI bus numbers one or two may be connected to PCI devices on the respective first and second PCI cards, or there may be additional PCI card slots on one or both of the first and second PCI cards. When slots are available on a PCI card having a PCI\/PCI bridge, additional PCI cards having PCI\/PCI bridges may be plugged into the PCI card slots, thus creating more PCI buses. Each PCI\/PCI bridge handles information to and from the CPU host bus and a downstream PCI device according to the PCI Specifications referenced above. All embedded PCI devices on the computer system motherboard are assigned a physical slot number of zero (0) and must be differentiated by their respective PCI device and bus numbers.","A computer system may be configured initially with two Host-to-PCI bridges connected to the CPU host bus, which results in the creation of two PCI buses numbered zero and one. These two PCI buses are available for connecting the PCI devices used in the computer system to the CPU. The system configuration program is run once to establish the personality of each of the PCI devices connected to the two PCI buses, to define interrupt priorities and the like. The configuration information for each of the PCI devices and their associated PCI bus numbers may be stored in the NVRAM using the ESCD format. Thereafter each time the computer system is powered up, the configuration information stored in the NVRAM may be used for initializing and configuring the PCI devices during startup of the operating system and eventually running the application programs.","Initial startup of the computer system is by programs stored in the computer system read only memory (ROM) basic input\/output system (BIOS) whose contents may be written into random access memory (RAM) space along with the configuration information stored in the NVRAM so that the computer system may do its startup routines more quickly and then load the operating system software from its hard disk. During the POST routine the computer system depends on the configuration information stored in the NVRAM to access the PCI devices at the PCI bus numbers determined during execution of the original system configuration program.","All of the stored PCI device bus numbers in the NVRAM must match the actual PCI bus numbers for the PCI devices (hard disk SCSI interface, etc.) required during startup of the computer system. If the PCI bus numbers stored in the NVRAM do not match the actual PCI bus numbers, proper computer system operation may be impaired. PC bus numbers may change if new PCI\/PCI bridges are added to the computer system after the configuration program was run to store the system configuration settings in the NVRAM in ESCD format.","Another requirement of the PCI 2.1 and 2.2 Specifications is the PCI bridges must follow certain transaction ordering rules to avoid \u201cdeadlock\u201d and\/or maintain \u201cstrong\u201d ordering. To guarantee that the results of one PCI initiator's write transactions are observable by other PCI initiators in the proper order of occurrence, even though the write transactions may be posted in the PCI bridge queues, the following rules must be observed:","1) Posted memory writes moving in the same direction through a PCI bridge will complete on the destination bus in the same order they complete on the originating bus;","2) Write transactions flowing in one direction through a PCI bridge have no ordering requirements with respect to write transactions flowing in the other direction of the PCI bridge; and","3) Posted memory write buffers in both directions must he flushed or drained before starting another read transaction.","Newer types of input-output devices such as \u201ccluster\u201d I\/O  controllers may not require \u201cstrong\u201d ordering but are very sensitive to transaction latency.","Computer system peripheral hardware devices, i.e., hard disks, CD-ROM readers, network interface cards, video graphics controllers, modems and the like, may be supplied by various hardware vendors. These hardware vendors must supply software drivers for their respective peripheral devices used in each computer system even though the peripheral device may plug into a standard PCI bus connector. The number of software drivers required for a peripheral device multiplies for each different computer and operating system. In addition, both the computer vendor, operating system vendor and software driver vendor must test and certify the many different combinations of peripheral devices and the respective software drivers used with the various computer and operating systems. Whenever a peripheral device or driver is changed or an operating system upgrade is made, retesting and recertification may be necessary.","The demand for peripheral device driver portability between operating systems and host computer systems, combined with increasing requirements for intelligent, distributed input-output (\u201cI\/O\u201d) processing has led to the development of an \u201cIntelligent Input\/Output\u201d (\u201cI0\u201d) specification. The basic objective of the I0 specification is to provide an I\/O device driver architecture that is independent of both the specific peripheral device being controlled and the host operating system. This is achieved by logically separating the portion of the driver that is responsible for managing the peripheral device from the specific implementation details for the operating system that it serves. By doing so, the part of the driver that manages the peripheral device becomes portable across different computer and operating systems. The I0 specification also generalizes the nature of communication between the host computer system and peripheral hardware, thus providing processor and bus technology independence. The I0 specification, entitled \u201cIntelligent I\/O (I0) Architecture Specification,\u201d Draft Revision 1.5, dated March 1997, is available from the I0 Special Interest Group, 404 Balboa Street, San Francisco, Calif. 94118; the disclosure of this I0 specification is hereby incorporated by reference.","In the I0 specification an independent intelligent input-output processor (1OP) is proposed which may be implemented as a PCI device card. The 1OP connects to a PCI bus and is capable of performing peer-to-peer PCI transactions with I\/O PCI devices residing on the same or other PCI buses. A problem may exist, however, in computer systems having one or more high speed central processing units that perform a plurality of host to PCI transactions. These host to PCI transactions may occur so frequently and quickly that PCI to PCI transactions may be starved due to lack of PCI bus availability.","What is needed is an apparatus, method, and system for a computer that provides a core logic chip set having a bridge for a CPU(s) host bus and random access memory bus to a plurality of AGP buses wherein the plurality of AGP buses have the same logical bus number and are capable of operation at 66 MHz or faster. In addition, a way to determine the strength of write transaction ordering is desired so that maximum advantage may he used to reduce bus transaction latency by taking transactions out of order when these transactions are determined not to require \u201cstrong\u201d ordering. Further, a way to prevent AGP to AGP transactions from being starved by host-to-PCI (or AGP) transactions is desired.","The present invention provides a computer system having a core logic chip set that is capable of bridging between a CPU(s) host bus, a random access memory bus and a plurality of physical Accelerated Graphics Port (\u201cAGP\u201d) buses, wherein the plurality of physical AGP buses have the same logical bus number and are capable of operating at 66 MHz or faster. In the present invention, each of the plurality of physical AGP buses may be connected to two AGP devices or two AGP device card connectors. One or more of the physical AGP buses also may be connected to more than two AGP devices or AGP device card connectors and operate at 33 MHz. The plurality of physical AGP buses all have the same logical AGP bus number of zero since no intermediate AGP to AGP bridges are needed nor desired in the present invention. Thus, identification of AGP devices in the computer system during startup is greatly simplified because there can be no confusion as to which AGP bus numbers the AGP devices are associated. Configuration information stored in the NVRAM is also simplified since the same AGP bus number (zero) is typically associated with each AGP device. A AGP-to AGP bridge on a multi-function AGP device card would create a new AGP bus number (only to that card and the multiple AGP devices thereon), however, and is contemplated in the present invention. An arbiter(s) in the core logic chip set provides Request (\u201cREQ\u201d) and Grant (\u201cGNT\u201d) signal lines for each one of the AGP devices connected to the plurality of physical AGP buses in the computer system. The embodiments of the present invention contemplate a core logic chip set which may be one or more integrated circuit devices such as an Application Specific Integrated Circuit (\u201cASIC\u201d), Programmable Logic Array (\u201cPLA\u201d), and the like.","The AGP bus is designed to provide connectivity to very high bandwidth devices such as 3-D graphics and gigabit input-output (\u201cI\/O\u201d) devices. Specifically, the AGP bus is designed to operate at a clock frequency of 66 MHz. However, any AGP bus operational speed is contemplated herein for the present invention. Those of ordinary skill in the art will recognize that the AGP bus represents a compatible superset of the buses set forth in the original PCI 2.1 and 2.2 Specifications.","As contemplated herein, the core logic chip set is connected to a plurality of physical AGP buses capable of running at 66 MHz. These 66 MHz physical AGP buses may also be connected to a combination of PCI (or PCI-X) devices embedded on the computer system motherboard and\/or AGP device cards plugged into AGP card edge connectors also on the computer system motherboard. In the present invention, there is no practical limit to the number of physical AGP buses, therefore, as many PCI, AGP and PCI-X devices and card slot connectors as needed may he utilized in the computer system. Typically, the number of PCI, AGP or PCI-X devices would be limited by the number of Initialization Device Select (\u201cIDSEL\u201d) addresses that are available and how the address data lines AD [::] are configured on the computer system motherboard to the embedded AGP devices and\/or the AGP card slot connectors. Therefore, the host to AGP bus bridge, according to the present invention, will handle transactions with the AGP devices as if they were all on the same AGP bus.","In the present invention, AGP device to AGP device transactions are also contemplated herein. When an AGP device on a physical AGP bus addresses another AGP device's memory or I\/O addresses on the same physical AGP bus or on another physical AGP bus, this is referred to hereinafter as \u201cpeer-to-peer\u201d PCI bus transactions. It is contemplated in the present invention that peer-to-peer transactions may be enabled or disabled by setting a control register bit in the core logic. The present invention may broadcast the peer-to-peer transaction address onto the physical AGP buses so that the intended AGP target may respond. Once the target AGP device responds, the peer-to-peer transaction is completed. There is no host bus or memory bus activity required for peer-to-peer AGP bus transactions. Concurrent transaction activity may occur, however, on other physical AGP buses between the memory bus and\/or host bus as more fully described hereinafter. This is especially useful when using intelligent, distributed input-output (\u201cI\/O\u201d) processing as more fully defined in the \u201cIntelligent Input\/Output\u201d (\u201cI0\u201d) specification, entitled \u201cIntelligent I\/ (I0) Architecture Specification,\u201d Draft Revision 1.5, dated March 1997; the disclosure of which is incorporated by reference hereinabove.","In an embodiment of the present invention, the host or memory to AGP bus bridge handles requests from AGP devices on the different physical AGP buses, as mentioned above, just as if they came from the same logical AGP bus. This embodiment of the present invention allows only one AGP transaction to occur at a time and the arbiter thereof only asserts GNT# to the AGP device associated with the current transaction. However, the next AGP transaction requested on a different physical AGP bus can be pipelined, i.e., the AGP device making the next AGP bus transaction request may have its GNT# signal issued a few clocks earlier than it could if both of the AGP devices were on the same physical AGP bus. In this embodiment, the core logic chip set arbiter detects that the current bus master is about to terminate the current transaction or target initiated termination, then and only then will the GNT# signal be issued to the AGP device requesting the next transaction. This easily handles AGP locked cycles which require the arbiter to wait until the current lock cycle transactions are complete before allowing another AGP device transaction to occur.","Another embodiment of the present invention provides in the core logic chip set, separate queues for each of the plurality of physical AGP buses so that AGP devices on the different physical AGP buses may perform transactions concurrently when the transactions from the different physical AGP buses are defined by different memory addresses so long as these memory addresses have been marked as prefetchable. An AGP device can mark an address range as prefetchable if there are no side effects on reads, the AGP device returns all bytes on reads regardless of the byte enables, and the core logic host bridge can merge processor (s) writes without causing errors.","For example, a AGP read transaction is occurring on the physical AGP bus A and there is a bus request on the physical AGP bus B. The arbiter can assert (GNT# to the AGP device on the physical AGP bus B immediately without waiting for the current transaction to be completed on the physical AGP bus A. Once the command and address are valid on the physical AGP bus B, the core logic chip set of the present invention inserts at least one wait state to compare the transaction address of physical bus A with the transaction address of physical bus B. If the transaction addresses of physical buses A and B are prefetchable memory addresses, and they are not accessing the same cache-line nor are they M byte aligned, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., the transaction request from the physical AGP bus B is allowed to continue until completion. If the transaction addresses are I\/O addresses, not prefetchable memory addresses, or physical buses A and B are accessing the same cache-line or are M byte aligned (the transaction addresses from the two physical AGP buses overlap the M byte address space), then the transaction request from the physical AGP bus B may be delayed by issuing a \u201cretry\u201d to the PCI bus B initiator.","A \u201cretry\u201d is defined in the PCI 2.1 Specification as a termination requested by a target before any data is transferred because the target is busy and temporarily unable to process the transaction. A retry is issued during the first data phase which prevents any data being transferred. Retry is indicated to the initiator by asserting Stop (\u201cSTOP#\u201d) and deasserting Target Ready (TRDY#) while keeping Device Select(\u201cDEVSEL#\u201d) asserted. This tells the initiator that the target does not intend to transfer the current data item (TRDY# deasserted) and that the initiator must stop the transaction on this data phase (STOP# asserted). The continued assertion of DEVSEL# indicates that the initiator must retry the transaction at a later time (when the commonly addressed transaction on the AGP physical bus A has completed). Furthermore, the initiator must use the exact same address, command and byte enables. If it is a write transaction, it must use exactly the same data in the first data phase. The access must be retried until the transaction is completed.","Another embodiment of the present invention comprises at least two memory address range registers for each AGP device in the computer system. At least a top address and a bottom address range register is contemplated for each AGP device. The computer system software or application programming interface (API) software for a specific AGP device may be used to program the top and bottom address range registers for the specific AGP device, i.e., an upper memory address is written into the top address range register and a lower memory address is written into the bottom address range register. This may be performed during computer system POST or dynamically at any time by different API or applications programs. The range of addresses between the upper and lower memory addresses for each AGP device may be used by the present invention in determining whether \u201cstrong\u201d or \u201cweak\u201d ordering of AGP write transactions are appropriate.","\u201cStrong\u201d ordering requires that the results of one AGP initiator's write transactions are observable by other AGP initiators in the proper order of occurrence, even though the write transactions may be posted in the AGP bridge queues. This is accomplished by the following rules:","1) Posted memory writes moving in the same direction through a AGP bridge will complete on the destination bus in the same order they complete on the originating bus;","2) Write transactions flowing in one direction through a AGP bridge have no ordering requirements with respect to write transactions flowing in the other direction of the AGP bridge; and","3) Posted memory write buffers in both directions must be flushed or drained before starting another read transaction.","These \u201cstrong\u201d ordering rules may increase AGP bus transaction latency. Newer types of input-output devices such as \u201ccluster\u201d I\/O controllers may not require \u201cstrong\u201d transaction ordering, but are very sensitive to AGP bus transaction latency. According to the present invention, strong ordering for a AGP device may be required for a range of memory addresses defined as the upper and lower addresses stored in the respective AGP device's top and bottom address range registers. Whenever write transactions are pending that fall within any AGP device's current or pending write transactions, then the \u201cstrong\u201d ordering rules for bus transactions are appropriate. However, when there are no current or pending write transactions falling within the respective AGP device's memory address range requiring strong ordering rules, the present invention may do out-of-order AGP transactions, i.e., read transactions may bypass posted write transactions. It is also contemplated herein that additional range registers for each AGP device may also define \u201cweak\u201d ordering addresses for the respective AGP device. In this way a determination of whether to use \u201cstrong\u201d or weak\u201d transaction ordering rules for current and pending queued transactions may be made.","Another embodiment of the present invention comprises registers which store the I\/O and memory address ranges used by the AGP devices connected to each physical AGP bus. Each AGP device is assigned unique memory and\/or I\/O address ranges by the configuration software. These memory and I\/O address ranges are stored in the AGP device's configuration registers during initialized at startup (POST). The present invention may also store the memory and I\/O address ranges of each AGP device connected to a physical AGP bus. When a transaction is initiated, the present invention may determine which physical AGP bus the target AGP device is on by the transaction address. When the transaction address is within an address range associated with a particular physical AGP bus, only that AGP bus will broadcast the transaction. Thus, only the physical AGP bus connected to the intended AGP target is activated by the transaction. This feature allows more efficient concurrent transactions within the core logic of the present invention because host-to-AGP bus and\/or memory-to-AGP bus transactions may occur concurrently with the AGP-to-AGP transactions.","Still another embodiment of the present invention prevents peer-to-peer AGP transactions from being starved by repetitive host-to-AGP transactions. Host-to-AGP transactions may occur rapidly and frequently enough where attempts by one AGP device to transact with another AGP device is blocked by the higher priority host-to-AGP transactions. The present invention solves this problem by allowing at least one PCI-to-AGP transaction to occur between host-to-AGP transactions. If a AGP-to-AGP transaction is pending and a host-to-AGP transaction is completing or has just completed, the present invention asserts a \u201cretry\u201d signal to the processor host bus if another host-to-AGP transaction request is pending. This \u201cretry\u201d signal causes the host processor initiating the host-to-AGP transaction request to abort its request and do something else. Later the same host-to-AGP transaction request will be initiated again. This allows the processor(s) on the host bus to continue other transactions while the pending AGP-to-AGP transaction is allowed to proceed. Implementation of this \u201cretry\u201d signal will vary with the type of processor(s) used in the computer system. For example, using the Intel Corp., PENTIUM PRO processor, a \u201cRetry Response\u201d is allowed when DEFER# (with HITM# inactive) is asserted during the Snoop Phase. With this Retry Response, the response agent informs the request agent (host processor) that the transaction must be retried. The \u201cPentium Pro Family Developer's Manual,\u201d ISBN 1-5552-251-5 is available from Intel Corporation, and is incorporated herein by reference. For the Intel Corp., PENTIUM and 80486 processors, a \u201cretry\u201d is when the Backoff input (BOFF#) is asserted to abort all outstanding host bus cycles that have not yet completed. The processor remains in bus hold until BOFF# is deasserted at which time the processor restarts the aborted bus cycle(s) in their entirety. \u201cPentium and Pentium Pro Processors and Related Products,\u201d ISBN 1-5552-251-5 is available from Intel Corporation, and is incorporated herein by reference. Once the current AGP-to-AGP transaction is underway, i.e., is the last transaction to occur, the \u201cretry\u201d signal is deasserted on the host bus and another host-to-AGP transaction request is allowed to occur regardless of whether another AGP-to-AGP transaction is pending. The present invention thus alternates between host-to-AGP transactions and AGP-to-AGP transactions if both are pending.","The present invention eliminates the need to use PCI to PCI bridges to increase AGP card slots on the computer system motherboard, thus, multiple delayed transactions and potential deadlock cycles may be avoided. Further, AGP transactions on different physical AGP buses may be concurrent if the transaction addresses are different. \u201cStrong\u201d or \u201cweak\u201d ordering rules may be used for transactions depending on memory address ranges programmed for each AGP device.","The present invention additionally allows the computer system to utilize more than two of the higher data throughput (bandwidth) AGP devices such as additional video graphics controller cards or high speed NICs. This is accomplished by using a plurality of physical AGP buses without the problems associated with PCI-to-PCI bridges and the confusion and possible system crashes associated with multiple PCI bus numbers, which can easily change when a PCI-to-PCI bridge is added, or PCI device cards are moved from one PCI bus slot to another in the computer.","The present invention contemplates individual queues for each of the plurality of physical AGP buses in the computer system. Also contemplated is checking the next transaction request address with the current transaction request address by inserting a wait state to the AGP device requesting the next transaction so as to compare the current transaction address with the next transaction address to determine if concurrent transactions are appropriate. If the compared addresses neither match nor are M byte aligned, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., concurrent transactions may proceed. If the addresses match or are M byte aligned, then a retry cycle is asserted to the PCI initiator requesting the next transaction.","In the present invention, out-of-order AGP transactions may occur when current or pending transactions are \u201cweak\u201d in relation to one another as determined by \u201cstrong\u201d or \u201cweak\u201d ordering address ranges programmed for each AGP device. The present invention also allows a AGP-to-AGP transaction to occur between host-to-AGP transactions.","Other features and advantages of the invention will be apparent from the following description of the invention, given for the purpose of disclosure and taken in conjunction with the accompanying drawings.","The following patents are hereby incorporated by reference:","U.S. Pat. No. 6,175,889, filed Oct. 21, 1998, entitled \u201cApparatus, Method and System for a Computer CPU and Memory to High Speed Peripheral Interconnect Bridge Having a Plurality of Physical Buses with a Single Logical Bus Number\u201d by Sompong P. Olarig;","U.S. Pat. No. 5,878,237, filed Jul. 11, 1997, entitled \u201cApparatus, Method and System for a Computer CPU and Memory to PCI Bridge Having a Plurality of Physical PCI Buses\u201d by Sompong P. Olarig.","One or more specific embodiments of the present invention will be described below. In an effort to provide a concise description of these embodiments, not all features of an actual implementation are described in the specification. It should be appreciated that in the development of any such actual implementation, as in any engineering or design project, numerous implementation-specific decisions must be made to achieve the developers' specific goals, such as compliance with system-related and business-related constraints, which may vary from one implementation to another. Moreover, it should be appreciated that such a development effort might be complex and time consuming, but would nevertheless be a routine undertaking of design, fabrication, and manufacture for those of ordinary skill having the benefit of this disclosure.","The present invention is an apparatus, method and system for providing a core logic chip set in a computer system capable of implementing a bridge between host processor and memory buses and a plurality of AGP buses wherein the plurality of AGP buses all have the same logical bus number. The present invention is capable of supporting all features of the AGP protocol. In addition, the present invention is capable of mixed mode operation, wherein a mix of PCI-only and AGP compatible devices operate concurrently. Computer systems utilizing the present invention experience less latency with multiple AGP compatible devices than prior art bridges and configurations.","The AGP bus was developed to have sufficient data bandwidth for high performance peripherals such as a video controller, a high speed network interface card(s), a hard disk controller(s), a SCSI adapter, a wide area network digital router, and the like. According to the AGP Specifications, an AGP bus is designed to support up to two loads. Sophisticated graphics and increased network data transfer requirements have put upward pressure on the PCI buses for faster data transfers between the computer system main memory, host processor(s), peripherals and data from other computers on the network. Accordingly, computer systems that implement a more than two AGP devices may be desirable. If so, a plurality of AGP to AGP bridges may be required. to provide enough AGP device card slots for a computer system such as a network server or graphics workstation. In this situation, AGP-to-AGP bus bridges would create new AGP bus numbers and introduce increasingly complex data protocol and handshake requirements, multiple delayed transactions, additional bus latency, and potential deadlock cycles.","For illustrative purposes, prior art references and preferred embodiments of the present invention are described hereinafter for computer systems utilizing the Intel x86 microprocessor architecture and certain terms and references will be specific to that processor platform. AGP is an interface standard, however, that is hardware independent and may be utilized with any host computer designed for this interface standard. It will be appreciated by those skilled in the art of computer systems that the present invention may be adapted and applied to any computer platform utilizing the AGP interface standard including those systems utilizing the Windows, UNIX, OS\/2 and Linux operating systems.","Referring now to the drawings, the details of preferred embodiments of the present invention are schematically illustrated. Like elements in the drawings will be represented by like numbers, and similar elements will he represented by like numbers with a different lower case letter suffix.","Referring to , a schematic block diagram of a prior art computer system utilizing multiple PCI buses is illustrated. The prior art computer system is generally indicated by the numeral  and comprises a central processing Unit(s) (\u201cCPU\u201d) , core logic , system random access memory (\u201cRAM\u201d) , a video graphics controller , a local frame buffer , a video display , a PCI\/SCSI bus adapter , a PCI\/EISA\/ISA bridge , a PCI\/IDE controller , and PCI\/PCI bus bridges , . Single or multilevel cache memory (not illustrated) may also he included in the computer system  according to the current art of microprocessor computer systems. The CPU  may be a plurality of CPUs  in a symmetric or asymmetric multi-processor configuration.","The CPU(s)  is connected to the core logic  through a CPU host bus . The system RAM  is connected to the core logic  through a memory bus . The core logic  includes a host-to-PCI bridge between the host bus , the memory bus  and a first PCI bus . The local frame buffer  is connected between the video graphics controller  and the first PCI bus . PC\/PCI bridges , are connected to the first PCI bus . The PCI\/SCSI bus adapter  and PCI\/EISA\/ISA bridge  are connected to the PCI\/PCI bridge through a second PCI bus . The PCI\/IDE controller  and a network interface card (\u201cNIC\u201d)  are connected to the PCI\/PCI bridge through a third PCI bus . Some of the PCI devices such as the Video controller  and NIC  may plug into PCI connectors on the computer system  motherboard (not illustrated). Three PCI buses ,  and  are illustrated in , and may have logical PCI bus numbers of zero, one and two, respectively.","Hard disk  and tape drive  are connected to the PCI\/SCSI bus adapter  through a SCSI bus . The NIC  is connected to a local area network . The PCI\/EISA\/ISA bridge  connects over an EISA\/ISA bus  to a ROM BIOS , non-volatile random access memory (NVRAM) , modem , and input-output controller . The modem  connects to a telephone line . The input-output controller  interfaces with a keyboard , real time clock (RTC) , mouse , floppy disk drive (\u201cFDD\u201d) , and serial\/parallel ports , . The EISA\/ISA bus  is a slower information bus than the PCI bus , but it costs less to interface with the EISA\/ISA bus .","When the computer system  is first turned on, start-up information stored in the ROM BIOS  is used to begin operation thereof. Basic setup instructions are stored in the ROM BIOS  so that the computer system  can load more complex operating system software from a memory storage device such as the disk . Before the operating system software can be loaded, however, certain hardware in the computer system  must be configured to properly transfer information from the disk  to the CPU . In the computer system  illustrated in , the PCI\/SCSI bus adapter  must be configured to respond to commands from the CPU  over the PCI buses  and , and transfer information from the disk  to the CPU  via buses ,  and . The PCI SCSI bus adapter  is a PCI device and remains platform independent. Therefore, separate hardware independent commands are used to setup and control any PCI device in the computer system . These hardware independent commands, however, are located in a PCI BIOS contained in the computer system ROM BIOS . The PCI BIOS is firmware that is hardware specific but meets the general PCI specification. Plug and play, and PCI devices in the computer system are detected and configured when a system configuration program is executed. The results of the plug and play, and PCI device configurations are stored in the NVRAM  for later use by the startup programs in the ROM BIOS  (PCI BIOS) which configure the necessary computer system  devices during startup.","Referring now to , a schematic block diagram of a computer system utilizing the present invention is illustrated. The computer system, according to the present invention, is generally indicated by the numeral . Some of the general functions, components and signal paths not dealing with the present invention are the same as in the computer system  (FIG. ), described above. Noticeably absent from the computer system , however, are the AGP\/AGP bridges , Instead of requiring multiple AGP\/AGP bridges for a plurality of 66 MHz AGP devices, the present invention utilizes a plurality of AGP bus interfaces in the core logic  which are connected to physical AGP buses , , . The AGP buses , ,  are capable of operation at 66 MHz using both 32-bit and 64-bit transactions, as more fully defined in the AGP Specifications incorporated by referenced above.","The video graphics controller  is connected to the local frame buffer memory  which is connected to the core logic  through the AGP bus . The AGP\/SCSI bus adapter  and AGP\/EISA\/ISA bridge  are connected the core logic  through the AGP bus . The AGP\/IDE controller  and a network interface card (\u201cNIC\u201d)  are connected to the core logic  through the AGP bus . All of the remaining components of the computer system  are connected and operate the same as the components of the above mentioned computer system  (FIG. ). The AGP buses , ,  are physically separate AGP buses capable of independent concurrent transactions but appear to the computer S startup and operating system software as one logical AGP bus. This greatly simplifies keeping track of AGP devices connected in the computer system since all AGP devices are on only one logical AGP bus, and each AGP device has its own unique device number (e.g., 1-16). No longer does the computer system software need to remember which AGP device is on which AGP bus number, nor is there ever a possibility that a AGP device bus number will change, causing a system startup problem. Furthermore, no AGP to AGP bridge type one configuration transactions take place. The disclosed embodiment greatly simplifies and speeds up recognition of the AGP devices in the computer system and improves transaction times thereof for the computer system .","Referring now to , a schematic diagram of a computer system motherboard according to  is illustrated in plan view. The computer system motherboard  comprises printed circuit board  on which components and connectors are mounted thereto. The printed circuit hoard  comprises conductive printed wiring which is used to interconnect the components and connectors thereon. The conductive printed wiring (illustrated as buses , , ,  and ) may be arranged into signal buses having controlled impedance characteristics. On the printed circuit board is the core logic , CPU(s) , RAM , AGP\/ISA\/EISA bridge , ISA\/EISA connectors , 66 MHz, 32-bit AGP connector (AGP physical bus ), AGP connectors , (AGP physical bus ), AGP connectors , and 64-bit AGP connectors , (AGP physical bus ). The connectors , carry the additional signals required for 64-bit data width AGP operation. Either or both 32-bit and 64-bit data width, 66 MHz AGP buses are contemplated herein.","Referring now to , a schematic functional block diagram of the present invention according to the computer system of  is illustrated. The core logic  comprises AGP read\/write queues , . ; CPU read\/write queues , memory read\/write queues , AGP bus interfaces , , ; CPU interface , memory interface and control , AGP address comparator , AGP target flow controller , and AGP arbiter . In the preferred embodiment of the present invention, a clock  is included to synchronize data transmissions among the various devices. Such a clock could be, for example, a phase locked loop (PLL) clock.","Address, data and control information is transferred between the AGP read\/write queues , ,  and the CPU read\/write queues  over internal bus , between the memory read\/write queues  over internal bus , between the AGP read\/write queues , ,  over internal bus , and between the memory read\/write queues  and CPU read\/write queues  over internal bus . The AGP bus interfaces , ,  are connected to the AGP buses , , , respectively, and transfer information to and from the AGP read\/write queues , , . The CPU interface  is connected to the CPU host bus  and transfers information to and from the CPU read\/write queues . The memory interface and control  is connected to the memory bus  and transfers information to and from the memory read\/write queues .","The AGP read\/write queues , ,  in conjunction with the physically separate AGP buses , ,  allow independent concurrent transactions for AGP devices on these buses. The AGP address comparator  monitors transaction addresses on each of the AGP buses , ,  and compares the transaction addresses for each of these AGP buses to determine if the AGP devices (each on a separate AGP bus) are trying to access the same cacheline or M byte aligned, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc. At least one wait state may be introduced in the PCI bus transaction timing cycles by the PCI target flow controller , which is a subset of an AGP target flow controller, so sufficient time is available to compare the different physical PCI transaction addresses with one another. If the transaction address comparison indicates no M byte aligned address commonality, then concurrent transactions from the different physical AGP buses are allowed to proceed over the internal buses , , . However, if there is any M byte aligned address commonality between the transactions then a \u201cretry\u201d is issued to the second AGP device having the M byte aligned address request. This is necessary if either or both of the AGP devices on the separate physical AGP buses , ,  is performing or wants to perform a write transaction. When only read transactions are being performed or requested to be performed by the AGP devices, then byte aligned addresses are irrelevant to concurrent transactions among the separate physical AGP buses if the addresses are prefetchable","AGP device to AGP device transactions may occur directly between the AGP read\/write queues , ,  over internal bus . When an AGP device on a physical AGP bus addresses another AGP device's memory or I\/O addresses on the same physical AGP bus or on another physical PCI bus, this is referred to hereinafter as \u201cpeer-to-peer\u201d AGP bus transactions. Peer-to-peer transactions may he enabled or disabled by setting a control register bit (not illustrated) in the core logic . The present invention may broadcast the peer-to-peer transaction address to all of the physical AGP buses , ,  so that the intended AGP target may respond. Once the target AGP device responds, the peer-to-peer transaction has been negotiated and will complete according to the AGP Specification. The CPU read\/write queues , or memory read\/write queues  are not required for peer-to-peer AGP bus transactions. Concurrent transaction activity may occur, however, on other physical AGP buses between the memory bus  and\/or host bus  as described herein. This is especially useful when using intelligent, distributed input-output (\u201cI\/0\u201d) processing operating system software as more fully defined in the \u201cIntelligent Input\/Output\u201d (\u201cI0\u201d) specification, entitled \u201cIntelligent I\/O (I0) Architecture Specification,\u201d Draft Revision 1.5, dated March 1997, incorporated by reference hereinabove.","Referring now to , a partial schematic functional block diagram of a further embodiment of the invention of  is illustrated. The core logic is similar to the core logic  illustrated in , but with the addition of transaction address filters , ,  connected between the AGP read\/write queues ,,, respectively, and the internal buses , , . The purpose of the transaction address filters , ,  is to allow only those AGP transactions intended for the specific AGP devices connected to the AGP buses , , , respectively. The transaction address filters , ,  may comprise registers or other mechanisms for storage (not illustrated) which store the memory and 10 address ranges of each AGP device connected to the respective AGP bus (, , ), and logic which only allows transactions having addresses which fall within these address ranges to pass to the respective AGP read\/write queues , , . The transaction address filters , , , thus prevent unnecessary AGP bus traffic on the physical buses not connected to the intended target AGP devices. This may reduce transaction latency time when peer-to-peer AGP bus transactions are occurring and host-to-AGP or AGP-to memory transactions are also occurring concurrently therewith. If all AGP devices are graphics devices then there is no need to do address comparison or write ordering. During bus enumeration, the bridge determines which device is on which physical bus and can thus maintain write ordering of each device accordingly. In the case of graphics devices, the transfer will happen without any wait states to optimize for graphics performance.","Host-to-AGP transactions, typically, have a higher priority than other AGP transactions such as memory or peer-to-peer transactions. In the present invention, it is contemplated that peer-to-peer AGP transactions may be enabled or disabled under software control by setting a hit in a register in the core logic  (not illustrated). When peer-to-peer AGP transactions need to occur, there is a possibility of the peer-to-peer AGP transactions being starved due to heavy host-to-AGP transactions. The present invention solves this problem by allowing at least one AGP-to-AGP transaction to occur between host-to AGP transactions. For example, the AGP target flow controller  () observes that a AGP-to-AGP transaction is pending and asserts a processor \u201cretry\u201d on control bus  which causes the CPU interface  to assert a processor retry signal on the host bus . This processor retry signal may be the Backoff (BOFF#) input for 486 and PENTIUM type processors, or a Retry Response (DEFER# asserted with HITM# inactive during the Snoop Phase) for the PENTIUM PRO processors. Other types of processors have similar types of processor retry inputs and are well known to those skilled in the art of microcomputer and microprocessor design. Once the AGP-to-AGP transaction is underway, the processor \u201cretry\u201d signal is deasserted and another host-to-AGP transaction request is allowed to occur. The present invention thus alternates between host-to-AGP transactions and AGP-to-AGP transactions if both are pending.","The PCI Specification requires that the bridges must follow certain transaction ordering rules to avoid \u201cdeadlock\u201d and\/or maintain \u201cstrong\u201d ordering. These rules may also be followed for AGP bridges. To guarantee that the results of one AGP initiator's write transactions are observable by other AGP initiators in the proper order of occurrence, even though the write transactions may be posted in the AGP bridge queues, the following rules must be observed:","1) Posted memory writes moving in the same direction through an AGP bridge will complete on the destination bus in the same order they complete on the originating bus;","2) Write transactions flowing in one direction through an AGP bridge have no ordering requirements with respect to write transactions flowing in the other direction of the PCI bridge; and","3) Posted memory write buffers in both directions must be flushed or drained before starling another read transaction.","A \u201cretry\u201d is defined in the PCI Specification as a termination requested by a target before any data is transferred because the target is busy and temporarily unable to process the transaction. An \u201cAGP retry\u201d may be defined as a termination requested by a target before any data is transferred because the target is busy and temporarily unable to process the transaction. The AGP target flow controller  issues a \u201cAGP retry\u201d over control bus  during the first transaction data phase if there is M byte aligned address commonality, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., as determined by the AGP address comparator , thus concurrent data is prevented from being transferred during any M byte aligned address transactions where a write transaction is involved. The AGP retry is indicated to the AGP device initiator by the respective AGP bus interface (,  or ) asserting Stop (\u201cSTOP#\u201d) and deasserting Target Ready (\u201cTRDY#) while keeping Device Select (\u201cDEVSEL#\u201d) asserted. This tells the AGP transaction initiator that the AGP target does not intend to complete transaction (TRDY# deasserted) and that the AGP transaction initiator must stop the transaction on this data phase (STOP# asserted). The continued assertion of DEVSEL# indicates that the AGP transaction initiator must retry the transaction at a later time (when the commonly addressed transaction on the other AGP physical bus has completed). Furthermore, the AGP transaction initiator must use the exact same address, command and byte enables. If it is a write transaction, it must use exactly the same data in the first data phase. The access must be retried until the transaction is completed. In this way, transactions which have M byte aligned addresses and involve a write transaction, therefore should not occur concurrently, are thus easily handled by the core logic .","Each AGP device embedded on the computer system motherboard, or as a device card inserted into the AGP connectors , , ,  () requires request (REQ#) and grant (GNT#) signals. According to the AGP Specification, a AGP device is selected and allowed to become the AGP bus initiator when it asserts its respective REQ# signal onto the AGP bus and the AGP arbiter acknowledges the AGP device bus initiator request by asserting the respective GNT# signal back to AGP device requesting the AGP bus. In the core logic  of the present invention, a plurality of request and grant signals are available for all of the AGP devices in the computer system. The AGP arbiter , through the respective AGP bus interface, may assert a grant signal to another PCI device requesting a transaction before the present AGP device transaction is finished as disclosed above.","An additional feature of the present invention is the ability to operate with a \u201cmixed mode\u201d of AGP compatible devices and non-AGP (i.e., PCI) devices. Such a mixed mode configuration is shown in FIG. . Referring to , the core logic  is shown in the center. The host bus  and the memory bus  are both connected to the core logic . As before, the core logic  contains the target flow controller , an arbiter , and an address comparator . In addition, one or more configuration memory registers  are provided to retain the configuration information regarding the various devices connected to the core logic. This configuration may be determined upon startup (POST) or later by a standard polling mechanism. The configuration information, such as whether a particular device is AGP compatible, its attendant address range, and its bandwidth capabilities, are stored in the configuration registers . Alternatively, the configuration information can be kept in main memory (system RAM) . In one embodiment of the present invention, a clock  is also provided within the core logic . However, the run time clock  (see ) or some other system clock could be used instead.","Referring now to , a schematic functional block diagram of an embodiment of a portion of the invention of  is illustrated. Signals shown in  are for a system that is compliant with the AGP 2.0 Specification. For clarity only two of the separate physical AGP buses ,  and their respective AGP bus interfaces ,  are illustrated. More than two physical AGP buses, however, are contemplated herein for the present invention. All AGP bus signals are connected between the AGP buses ,  and their respective bus interfaces , . A 32-bit address and data bus (AD [::]) is illustrated but a 64-bit address and data bus (AD[::]) is also contemplated herein as more fully defined in the PCI Specification.","For example, a transaction occurring with AGP device A (not illustrated) on the AGP bus  (bus A), generates addresses on the AGP bus  which are also sent to the AGP address comparator  (bus A addr). When a transaction is requested (REQ#) by another AGP device B (not illustrated) on the AGP bus  (bus B), a grant (GNT#) is issued by the AGP arbiter  to the PCI device B. Once the grant is received by the AGP device B, the AGP device B asserts its transaction address on the AGP bus . The asserted address from the AGP device B is sent to the AGP address comparator  where the AGP device B address is compared with the current transaction address of the AGP device A. In order for the AGP address comparator  to compare the addresses from each one of the AGP devices A, B, a wait state is initiated by the AGP target flow controller  (wait state enable B) to the AGP bus interface . The AGP bus interface  causes a wait state to occur by delaying (blocking) assertion of Target Ready (TRDY#) from the target AGP device to the AGP device B which is the initiator of the new transaction on the AGP bus . If the compared prefetchable memory addresses are not to the same cache-line, nor are they M byte aligned, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., then the AGP bus interface  allows assertion of (unblocks) TRDY# from the target AGP device and the transaction on the AGP bus  proceeds to its data phase. Thus, concurrent transactions may occur on the AGP buses , . However, if the compared addresses are the same or are M byte aligned, then the AGP target flow controller initiates a AGP Retry (retry b) to the AGP bus interface  which issues a AGP Retry to the AGP device B. AGP Retry need only be asserted when one or both of the AGP devices A, B are doing or intend to do write transactions. Since the ordering rules are always \u201cstrong\u201d in this embodiment of the present invention, pending write queues are emptied first before starting the next transaction having aligned addresses.","Referring now to , a schematic functional block diagram of another embodiment of a portion of the invention of  is illustrated. Signals shown in  are for a system that is compliant with the AGP 2.0 Specification. Operation of the embodiment illustrated in  is similar to the embodiment of  except that range registers  and transaction queue controller  have been added so that when \u201cweak\u201d ordering of memory transactions is appropriate, out-of-order AGP transactions such as read transactions bypassing posted write transactions may be performed to reduce latency of the AGP bus transactions. It is contemplated in this embodiment that there is at least one pair of range registers for each AGP device in the computer system. The at least one pair of range registers holds the upper and lower memory addresses of the respective AGP device which require \u201cstrong\u201d ordering for that AGP device. Any AGP memory transactions outside of the \u201crange\u201d of memory addresses defined by the upper and lower memory addresses stored in the pair of range registers would not require \u201cstrong\u201d ordering, thus \u201cweak\u201d ordering may be used to improve bus transaction latency.","The transaction queue controller  determines whether an AGP device transaction requires \u201cstrong\u201d or \u201cweak\u201d ordering by comparing the current and pending transaction addresses in the queues ,  with the corresponding AGP device address ranges defined by the range registers . When the current and pending transaction addresses do not correspond to those in the range registers , the transaction queue controller  may instruct the AGP target flow controller  to advance transactions out of order and\/or do read transactions before the write transactions (\u201cweak\u201d ordering) have been flushed from the queues , . On the other hand, when the current and pending transaction addresses do correspond to those in the range registers , the transaction queue controller  instructs the AGP target flow controller ) to advance transactions in accordance with the aforementioned AGP Specification ordering rules (\u201cstrong\u201d ordering).","FIG. B and  are similar, respectively, to FIG.  and FIG. A. FIG. B and  show signals for a system that is compliant with the AGP 3.0 Specification.","Referring now to , a schematic representation of range registers according to the aforementioned embodiment of the present invention is illustrated. Each AGP device(x), where x is a to n, has a tag ID register  and at least one pair of range registers ,  associated therewith. The lower address range register  may contain the lowest memory address of interest to the associated AGP device. The range register  may be a full 32 or 64-bit register and contain the absolute value lower address. The upper address range register  may contain only the offset address of the address stored in the range register , i.e., the contents of the range register  is added to the contents of the range register  to give the absolute value upper memory address of interest to the associated AGP device. A plurality of range register pairs also may be associated with a AGP device, thus allowing non-contiguous memory address ranges to be programmed for a particular AGP device. The computer system startup software during POST, or an API or applications program may also load the range registers ,  with the desired memory address ranges that require strong ordering of AGP transactions. The remaining memory addresses which fall outside of the strong ordering address ranges may be treated by the present invention as weak ordering which allows AGP transactions to be taken out of order so as to improve AGP bus transaction latency times.","Referring to , a schematic state diagram of the present invention is illustrated. Signal conventions hereinafter are the same or similar to those disclosed in Appendix B of the PCI Specifications incorporated herein by reference. The present invention functions substantially the same as the state machine represented and described in Appendix B of the PCI 2.1 Specification.","Referring now to ,  and , a process flow diagram of the present invention is illustrated. The aforementioned process flow diagram describes the operation of preferred embodiments of the present invention. In step , the present invention detects a AGP bus transaction(s) and in step  asserts a wait state. The step  wait state is used to allow sufficient time for comparison of a current AGP transaction address with a new (pending) AGP transaction address in step . During the address comparison in step , the present invention determines from the pending transaction address whether the pending transaction is a peer-to-peer (decision step ), an I\/O cycle (decision step ), or a prefetchable memory (decision step ) transaction, and whether there is an address match or M byte aligned, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., address commonality (decision step ).","Host-to-AGP transactions, typically, have a higher priority of execution than either AGP-to-memory or AGP-to-AGP transactions. The logic of the present invention will alternate (flip-flop) between execution of a host-to-AGP transaction and a peer-to-peer AGP transaction so that the peer-to-peer AGP transactions are not \u201cstarved\u201d by the higher priority host-to-AGP transactions. Decision step  determines whether there is a peer-to-peer AGP transaction pending. Decision step  determines if the destination AGP bus required by the pending peer-to-peer AGP transaction is being used by another AGP bus master, i.e., a AGP transaction is occurring on the destination AGP bus needed for the pending peer-to-peer AGP transaction. If the destination AGP bus is not being used, then decision step  determines if there is a pending host-to-AGP transaction. If there is a pending host-to-AGP transaction, then decision step  determines if a priority status bit is set to one. The priority status bit may be a bit in a status register in the core logic of the present invention and may be used as a one bit flip-flop register to indicate the last type of AGP transaction to occur, i.e., execution of a host-to-AGP transaction sets the status bit to \u201cone\u201d and execution of a peer-to-peer AGP transaction resets the status bit to \u201czero.\u201d Thus, by reading this status bit, the present invention may determine at any time whether a host-to-AGP transaction or a peer-to-peer AGP transaction occurred last.","If the decision step  determines that the status bit is not \u201cone\u201d then a peer-to-peer AGP transaction occurred last, and the pending host-to-AGP transaction should execute next. This is accomplished in step  by asserting a AGP retry to the peer-to-peer AGP initiator which causes this AGP initiator to drop its AGP bus request and retry the same request later. In step , the host-to-AGP transaction proceeds to execution, and in step , the status bit is set to one\u201d so that the next peer-to-peer AGP transaction request will be given priority over a host-to-AGP transaction request.","If the decision step  determines that the status bit is set to \u201cone\u201d then a host-to-AGP transaction occurred last, and the pending peer-to-peer AGP transaction should execute next. This is accomplished in step  by asserting a retry to the host processor which causes the host processor to drop its AGP bus request and retry the same request later. In step , the peer-to-peer AGP transaction proceeds to execution, and in step , the status bit is set to \u201czero\u201d so that the next host-to-AGP transaction request will be given priority over a peer-to-peer AGP transaction request. Step  deasserts the retry to the host processor.","In decision step , if the required destination AGP bus is being used for another AGP transaction, then a retry signal is asserted to the pending peer-to-peer PCI initiator in step . This causes the pending peer-to-peer AGP initiator to retry its transaction request later. If there is a host-to-AGP transaction pending, step  allows the host-to-AGP transaction to proceed, and step  will then set the priority status bit to one as described above.","The decision step  determines whether the pending AGP transaction is a memory address or an I\/O address. If a memory address, decision step  determines whether the pending AGP transaction is a prefetchable memory address. Decision step  then determines whether the pending and current AGP transactions are accessing the same cache-line or have M byte aligned addresses, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc. If there is no address match or alignment of the current and pending AGP transactions, then decision step  determines whether the pending AGP transaction requires weak or strong ordering. In step , strong ordering requires that all current posted writes must be flushed before a read transaction may proceed, in accordance with the AGP Specification. In step , weak ordering allows read transactions to bypass current posted write transactions which may improve AGP bus transaction latency times.","If step  determines that the pending AGP transaction is an I\/O cycle, step  determines that the pending AGP transaction is not a prefetchable memory address, or step  determines that the pending and current AGP transactions are accessing the same cache-line or have M byte aligned addresses, where M=16\u00d72and n is 0, 1, 2, 3, 4, etc., then step  allows only one AGP transaction to occur. Decision step  determines whether more than one AGP transaction is pending and if so, step  issues a retry to the AGP device making the latest transaction request, thus forcing this AGP device to retry its request at a later time. When only one AGP transaction is pending, step  lets that single pending AGP transaction to wait by not asserting its GNT# signal until the current AGP transaction has finished. When the current AGP transaction is finished, the GNT# signal is asserted so that the pending AGP transaction may execute in step .","Referring now to , a process flow diagram of the arbiter of the present invention is illustrated. An AGP transaction request, REQ#, is detected in step  and decision step  determines whether the AGP buses are idle or not. If the AGP buses are idle, then a grant signal, GNT#, is returned in step  to the requesting AGP device. If any of the AGP buses are not idle, i.e., there is current AGP transaction in progress, then decision step  determines if pipelined AGP transactions are allowed. Decision step  determines whether the current and pending transactions are on the same or different physical AGP buses.","If step  determines that pipelined AGP transactions are allowed and step  determines that the current and pending AGP transactions will be on different physical AGP buses, the step  allows the grant signal, GNT#, to be returned to the AGP device requesting a pending AGP transaction. Otherwise, GNT# is not returned to the requesting AGP device until the current AGP transaction has completed.","While the invention may be susceptible to various modifications and alternative forms, specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However, it should be understood that the invention is not intended to be limited to the particular forms disclosed. Rather, the invention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the invention as defined by the following appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing and other advantages of the invention will become apparent upon reading the following detailed description and upon reference to the drawings in which:",{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":["FIG. 4","FIGS. 2 and 3"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 4A","b":"4"},{"@attributes":{"id":"p-0073","num":"0072"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 5A","FIG. 4"]},{"@attributes":{"id":"p-0075","num":"0074"},"figref":["FIG. 5B","FIG. 4"]},{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 5C","FIG. 4"]},{"@attributes":{"id":"p-0077","num":"0076"},"figref":["FIG. 5D","FIG. 5A"]},{"@attributes":{"id":"p-0078","num":"0077"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0079","num":"0078"},"figref":"FIGS. 7","b":["8","9","10"]}]},"DETDESC":[{},{}]}
