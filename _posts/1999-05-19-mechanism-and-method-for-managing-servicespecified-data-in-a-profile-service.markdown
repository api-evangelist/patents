---
title: Mechanism and method for managing service-specified data in a profile service
abstract: A profiling service for accessing user data. The profiling service includes a hierarchical structure of profile objects. Each profile object contains true-data attributes and meta-data attributes associated to the true-data attributes. Methods in the profiling service allow a client to access user data according to meta-data attribute settings. The true-data attributes may include the user data, or an external reference to the user data. The profile objects may also include bindings to other profile objects. Meta-data attributes can be identified with a prefix field in a meta-data value field, and methods to read and write the true and meta-data attributes may be included in the profile objects. The methods may also set an owner, an access privilege, a group, a creation time, a update time, expiration time, a trigger location, a binding flag, and an assurance level of true-data attributes. The profile objects can include profile level meta-data attributes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06920455&OS=06920455&RS=06920455
owner: Sun Microsystems, Inc.
number: 06920455
owner_city: Palo Alto
owner_country: US
publication_date: 19990519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["1. Field of the Invention","The present invention relates, in general, to enterprise computing systems and methods, and, more particularly, to a method and system that provides a high performance tool to integrate, store, retrieve and manage reference information about entities.","2. Relevant Background","Computer systems including business systems, entertainment systems, and personal communication systems are increasingly implemented as distributed software systems. These systems are alternatively referred to as \u201centerprise networks\u201d and \u201centerprise computing systems\u201d. These systems include application code and data that are distributed among a variety of data structures, data processor systems, storage devices and physical locations. They are intended to serve a geographically diverse and mobile set of users. This environment is complicated because system users move about the distributed system, using different software applications to access and process data, different hardware to perform their work, and often different physical locations to work from. These trends create a difficult problem in providing a secure yet consistent environment for the users.","In general, distributed computing systems must scale well. This means that the system architecture desirably adapts to more users, more applications, more data, and more geographical distribution of the users, applications, and data. The cost in money and time to switch over a network architecture that is adapted to a smaller business to one suited for a larger business is often prohibitive.","A conventional computing system uses a client\/server model implemented on a local area network (LAN). In such systems powerful server computers (e.g., application servers and file servers) are used to process and access data. The requested data is then transmitted to the client computer for further processing. To scale to larger networks, multiple LANs may be internetworked using, for example, leased data lines to create a wide area network (WAN). The equipment required to implement a WAN is expensive and difficult to administer. Also, as networks become larger to include multiple LANs and multiple servers on each LAN it becomes increasingly difficult to find resources (i.e., files, applications, and users) on any one of the LANs.","As computing power continues to become less expensive, clients tend to process and store their own data, using the server primarily as file servers for sharing data with other client computers. Each software application running on the client, or the client's operating system (OS) may save client-specific configuration data that is used by the client to fine-tune and define the user's software environment at runtime.","As used herein, the term \u201cprofile information\u201d refers to any information or meta-data used by a particular piece of hardware, software application, or operating system to configure a computer. The profile information may be associated with a particular application or group of applications, a particular hardware device or group of devices, as well as a particular user or group of users. Some operating systems store user profile information that is used during boot operations application start-up, to tailor a limited number of the system characteristics to a particular machine user. However, this profile information is closely tied to a single machine and operating system. As a result, the profile information is not useful to a new user the first time that user logs onto a particular machine. Moreover, this information is not available to remote users that are accessing the LAN\/WAN using remote access mechanisms.","Existing mechanisms tend to focus on a single type of profile information\u2014user information or application information or hardware information. Also, because these mechanisms are very application specific they limit the number and type of attributes that can be retained. Further, the profile information is isolated and fails to indicate any hierarchical or relational order to the attributes. For example, it may be desirable that a user group is required to store all files created using a particular application suite to a specific file server. Existing systems, if such a service is available at all, must duplicate profile information in each application program merely to implement the required file storage location preference. Storage location direction based on a user-by-user or user group basis is difficult to implement and may in fact require a shell application running on top of the application suite. Even then, the system is not extensible to access, retrieve, and use profile information for a new user that has not used a particular machine before.","As in the example above, existing systems for storing configuration information lead to duplicative information stored in many locations. Each application stores a copy of its own configuration information, as does each hardware device and each user. Much of this information is identical. It is difficult to maintain consistency among these many copies. For example, when the specified file storage location changes, each copy of the configuration information must be changed. The user or system administrator must manually track the location and content of each configuration file. An example of the inefficiencies of these types of systems is found in the Windows 95 registry file that holds profile information but has an acknowledged tendency to bloat over time with duplicative and unused data. Moreover, the registry file in such systems is so closely tied to a particular machine and instance of an operating system that it cannot be remotely accessed and used to configure other computers or devices. Hence, these systems are not generally extensible to manage multiple types of profile information using a single mechanism. A need exists for profile information that is readily accessible to all machines coupled to a network and to machines accessing the network through remote access mechanisms.","Another complicating influence is that networks are becoming increasingly heterogeneous on many fronts. Network users, software, hardware, and geographic boundaries are continuously changing and becoming more varied. For example, a single computer may have multiple users, each of which work more efficiently if the computer is configured to meet their needs. Conversely, a single user may access a network using multiple devices such as a workstation, a mobile computer, a handheld computer, or a data appliance such as a cellular phone or the like. A user may, for example, use a full featured e-mail application to access e-mail while working from a workstation but prefer a more compact application to access the same data when using a handheld computer or cellular phone. In each case, the network desirably adapts to the changed conditions with minimal user intervention.","In order to support mobile users, the network had to provide a gateway for remote access. Typically this was provided by a remote access server coupled to a modem. Remote users would dial up the modem, comply with authorization\/authentication procedures enforced by the server, then gain access to the network. In operation the mobile user's machine becomes like a \u201cdumb terminal\u201d that displays information provided to it over the dial-up connection, but does not itself process data. For example, a word processing program is actually executing on the remote access server, and the remote user's machine merely displays a copy of the graphical user interface to the remote user. The remote user is forced to use the configuration settings and computing environment implemented by the remote access server. A need exists for a method and system for remote access that enables the remote user to process data on the remote machine without being confined to using configuration settings imposed by a remote access server.","Attributes of such a heterogeneous environment, however, are difficult to manage for a single data structure. For example, profile information may be controlled by or owned by any number of a variety of entities, such that a user may own profile information related to that user's preferences, passwords, and the like. However, a workgroup administrator may own profile information related to group membership, group security policies, and the like. Further still, individual applications may own profile information describing that application's configuration operations. In an environment where any entity can change the information contained in any profile that it owns at any time, it quickly becomes an intractable problem to integrate profile information into a single directory structure. A need exists for a system and methods for maintaining profile information owned by a diverse set of entities in a heterogeneous environment.","From a network user's perspective these limitations boil down to a requirement to manually configure a given computer to provide the user's desired computing environment. From a remote user's perspective these limitations require the user to manually reconfigure the remote access computer to mimic the desired computing environment or tolerate the generic environment provided by default by the remote access server. From a network administrator's perspective, these complications require software and operating systems to be custom configured upon installation to provide the desired computing environment. In each case, the time and effort consumed simply to get \u201cup and running\u201d is a significant impediment to efficient use of the distributed computing environment. What is needed is a system that readily adapts to a changing, heterogeneous needs of a distributed network computing environment.","One solution to the problem of finding resources in a distributed system is to use directories. Directories are data structures that hold information such as mail address book information, printer locations, public key infrastructure (PKI) information, and the like. Because of the range of functions and different needs of driving applications, most organizations end up with many different, disparate directories. These directories do not interact with each other and so contain duplicative information and are difficult to consistently maintain.","Meta-directories are a solution that provides directory integration to unify and centrally manage disparate directories within an enterprise. A meta-directory product is intended to provide seamless integration of the multiple disparate directories. However, existing solutions fall short of this seamless integration because the problems to be solved in directory integration are complex. Existing meta-directory solutions tend to require significant up front configuration effort to account for these complexities. Also, a meta-directory product must be aware of the data format for each of the data structures that is supposed to integrate. This required knowledge makes meta-directories difficult to maintain in a computing environment that is rapidly changing. As a result, meta-directory solutions are not sufficiently extensible to account for the wide variety of resources available on a distributed network. In the past, meta-directory technology has not been used to catalog meta-data of sufficiently general nature to meet the needs of a dynamically growing and changing distributed computing environment.","Directory and meta-directory structures handle only a finite range of data types and cannot be extended unless the developer has a prior knowledge about how the program will be extended. A need exists for a directory access mechanism in which information about the data is coupled with the data itself in a manner that enables expansion.","Briefly stated, the present invention involves a profiling service for accessing user data. The profiling service includes a plurality of profile objects containing at least one true-data attribute. The true-data attribute includes a true-data key and at least one true-data value field. At least one meta-data attribute is associated with the true-data attribute, and includes a meta-data key and at least one meta-data value field. Methods within each profile object access the user data according to the meta-data attribute.","The true-data attribute may include the user data, or an external reference to the user data. The profile object may include at least one true-data attribute binding to another one of the profile objects. The meta-data key can be equated with the true-data key. Furthermore, the meta-data attribute can be identified with a prefix field in the meta-data value field. The methods to read and write the true and meta-data attributes may be included in the profile object. The methods may also set an owner, an access privilege, a group, a creation time, a update time, expiration time, a trigger location, a binding flag, and an assurance level of the true-data attribute. The profile service may include at least one profile level meta-data attribute.","The present invention is illustrated and described in terms of a distributed computing environment such as an enterprise computing system using public communication channels such as the Internet. However, an important feature of the present invention is that it is readily scaled upwardly and downwardly to meet the needs of a particular application. Accordingly, unless specified to the contrary the present invention is applicable to significantly larger, more complex network environments as well as small network environments such as conventional LAN systems.","It is contemplated that the present invention will be particularly useful in environments that require a data structure that is quickly searched and where the data is suited to a hierarchical representation. Also, the system of the preferred implementation is optimized to store and make available relatively compact units of data that serve to configure devices and computer environments rather than operational or analytical data upon which the computer environment may operate at runtime. Hence, the present invention is best used when it stores and retrieves data that is frequently searched and retrieved, but infrequently changed.","To aid understanding several words and terms used herein to describe the present invention are defined below:","Attribute\u2014The combination of a key related to one or more values. Frequently described as a key=value pair.","Meta-data\u2014Special data attributes used by a Profile Service to help maintain and manage Profiles and user data within the Profiles.","Binding\u2014A special type of attribute where the value of the key=value pair is itself a Profile. Binding one Profile to another in a chained fashion it is possible build tree structures of related profiles and attribute information (called a profile tree).","Profile\u2014A collection of attributes related either directly or indirectly to a EntityProfile that contains data or links to data used by an entity.","EntityProfile\u2014A collection of attributes that establish the root of a profile tree and serve as the base representation of some entity. This is the core data object around which the entire Profile Service is designed to function. In an object oriented sense an EntityProfile extends a Profile to add special functions and behavior.","ProfileList\u2014A special type of Profile whose member attributes (with the exception of some system attributes) are themselves Profiles. In an object oriented sense a ProfileList extends a Profile to add special functions and behavior.","Profile Service\u2014The term generally used to refer to all of the functional interfaces of Profile Service and\/or an implementation of. The term is frequently used to refer specifically to the core Profile Service interface.","Profile Service Interface\u2014The core functional interface of the Profile Service. This interface provides functions for creating, searching and removing profiles in addition to some administrative utilities.","Profile Interfaces\u2014A term used to collectively refer to the functional interfaces of Profile, EntityProfiles and ProfileLists. These interfaces provide functions for manipulating the composition of individual Profiles.","Profile Protocol\u2014A data transport methodology that exposes functional interfaces in a language and platform independent manner. It is a distributed communication mechanism implemented in the examples herein as extensible markup language (XML) over hypertext transfer protocol (HTTP).","Resource ID\u2014An identifier that is constructed by the Profile Service to uniquely identify every constituent profile and attribute therein. Resource IDs have a well defined string structure.","Profile Type\u2014A special attribute of all Profiles. This attribute is mandatory for all profiles and plays an important role in generating resource IDs and data indexing.","Entity\u2014Entity ID\u2014A special attribute of all EntityProfiles. This attribute plays an important role in generating resource IDs and data indexing. The Profile Service enforces the rule that all entity IDs are unique within the set of all EntityProfiles of the same type.","List Key\u2014A special attribute of all ProfileLists. This attribute plays an important role in generating resource IDs and data indexing. The Profile Service enforces the rule that all profiles bound to a ProfileList are bound to the key such that that the ProfileLists may only have one member Profile with a specific list key value.","List Members\u2014A term used to refer to the collection of Profiles bound to a ProfileList. Each bound profile is referred to as a member.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIG. 1","b":["100","101","102","103","101","110","105","102","103","102","103","102","103","101"]},"LAN  includes one or more workstations such as personal computer (PC) . LAN  also includes a server machine  and one or more shared devices such as printer . A hub or router  provides a physical connection between the various devices in LAN . Router  is coupled through gateway  to provide shared access to network . Gateway  may implement any desired access and security protocols to manage access between network  and devices coupled to network . Similarly, network  comprises a collection of workstations ,  and  that share a common connection to network  through gateway .","Distributed computing environment  further includes a wide variety of devices that have a logical connection to the network supported by a physical connection to network . For example, a stand alone workstation  may couple to network  through a modem or other suitable physical connection. Likewise, notebook computer  and palmtop computer  may connect to network  using known connection technologies. It is contemplated that a wide variety of devices may join the distributed network  including mobile phones, remote telemetry devices, information appliances, and the like. An important feature of the present invention is that it tolerates and adapts to an environment filled with heterogeneous hardware devices coupled to the network  from a variety of physical locations.","Each of the devices shown in  may include memory, mass storage, and a degree of data processing capability sufficient to manage their connection to network . The computer program devices in accordance with the present invention are implemented in the memory of the various devices shown in FIG.  and enabled by the data processing capability of the devices shown in FIG. . In addition to local memory and storage associated with each device, it is often desirable to provide one or more locations of shared storage such as disk farm  that provides mass storage capacity beyond what an individual device can efficiently use and manage. Selected components of the present invention may be stored in or implemented in shared mass storage such as disk farm .","The computer program product devices in accordance with the present invention include elements that operate in a server such as a server , a client such as a workstation , or both. It is contemplated that elements may be stored remotely, delivered to a client system on demand by a server computer, and executed partially or completely by the server and client. Accordingly, the present invention is not limited by the methods of distribution or packaging that a particular application involves. In other words, the present invention may be distributed client-only software devices, server-only devices, or as system software that is distributed to both client and server devices.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 2","FIG. 2"],"b":["201","202","203","2","204","201","201","206","201","202","203","206","207","208"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["104","105","1","301","302","303","303","301","303","303","303","303"]},"Core profile engine  responds to the client application requests by executing requested functions on virtual profile data store . Core profile engine  maintains a set of meta-data about every attribute and binding for every profile. This meta-data controls how the profile engine  makes the profile data available to client applications . This meta-data includes, but is not limited to, information regarding owner identity, read-write-modify permissions, group membership, timestamps, triggers, and the like.","Virtual profile data store  may comprise a single data storage device, but more often comprises a plurality of disparate, heterogeneous data storage devices. The specific example of  includes a relational database , lightweight directory access protocol , flat data file , object oriented database , and X.500 directory . An adapter  may also access another data application  where the data application  provides an API compatible with the adapter  and operates to access other local and distributed data stores. In a particular implementation, adapter(s)  comprise an adapter for each data store device and\/or protocol. Each adapter  includes an interface to core profile engine  and a special purpose interface configured to the specific data store within virtual data store  that it is intended to access. Virtual data store  includes a dynamically changing number of data store devices as devices can be added, changed, and deleted by modifications to the associated adapter .","The profile service in accordance with the present invention provides a high-speed mechanism to lookup, structure and store key\/value pairs. These key\/value pairs represent information about \u201centities\u201d such as application software, users, hardware devices, and the like. The present invention is preferably implemented as a service running on a gateway server. The present invention is Intended to integrate several physical data stores into a single, distributed logical data store of reference information.","As used herein, a \u201cprofile\u201d is a group or set of key\/value pairs, such as shown in FIG. A and  where each key\/value pair is referred to as an \u201cattribute\u201d. The value associated with a given key may be either a primitive value (e.g., a numeric value, string value, logical value, and the like) or may be another profile. When the value is another profile the value is referred to as a \u201csub-profile or binding\u201d and illustrates the hierarchical nature of the present invention.","All profiles contain a type attribute. When the value of an attribute is a sub-profile, the key will be the type of the sub-profile. In the case when the value is a sub-profile the key\/value pair is called a \u201cbinding\u201d. By binding several profiles it is possible to build hierarchical trees of information. It is possible to bind a profile to multiple parent profiles which is referred to herein as \u201clinking\u201d. Linking enables the representation of relational information by creating a DAG (Directional Asyclical Graph) in addition to hierarchical information.","Profiles are not restricted in type as defined by the profile's attribute key or number of attributes that may be stored in a single profile. Moreover, individual attributes may have multiple values set as illustrated by the publickey attribute in FIG. B. However, each binding has only a single value, although each profile may contain any number of bindings. As described hereinafter, a user may define a schema that forces profiles of specified types to contain at least a minimum set of attributes upon creation. A schema aids in providing uniformity and a minimal level of compatibility without limiting the dynamic and extensible nature of the profiles in accordance with the present invention.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 4A","b":["400","400","400","400","400","4"]},"An individual profile in data structure  comprises 0 to n attribute value pairs  and 0 to n subprofile bindings  where \u201cn\u201d is an arbitrary value selected to meet the needs of a particular application. In the example of , profile names are enclosed by brackets [ ] and attributes  are represented as key=value pairs. The profile shown in  is named \u201csession-100\u201d and has a number of attributes  and one subprofile binding  to a \u201cclient profile\u201d that comprises information about the client who initiated this session. The client subprofile in data structure  is also referred to as a \u201cchild\u201d profile.","Significantly, all profiles have a \u201ctype\u201d attribute. This attribute is set when the profile is created and is not changed. Attributes may have multiple values as does the \u201caltsid\u201d attribute in data structure . Attribute and binding keys are unique within the profile. Attribute values are either a string, another profile, or an external data reference. The attribute \u201cip=128.734.11.2\u201d in data structure  is an example of an external data reference.","In general, when a profile is created it must be the \u201cchild\u201d of some other profile, or it must be an \u201centity profile\u201d. An entity profile , such as shown in , is a special subclass of a profile object that has an additional fixed attribute  called an ID. In this sense, the profile shown in  is not truly accurate because it is neither a child (i.e., it is not within another profile) nor an entity profile (i.e., it does not include an entityID attribute). The profile service in accordance with the present invention provides facilities for generating the ID in a manner such that all entity profiles of the same type have unique IDs. Essentially, entity profiles serve a special role of establishing roots from which other profiles may be attached. Entity profiles support all of the operations of a profile, but add additional support for some specialized method for accessing the ID attribute.","The data structure in  shows an entity profile \u201cContact\u201d that includes a number of attributes including -a subprofile binding \u201cDemographicList\u201d. The profile DemographicList itself contains subprofile bindings \u201cemail\u201d, \u201cpostalworkList\u201d, and \u201cSecurity\u201d.","Entity profiles are used to represent data that has no single child relationship to another profile, or when no other profile exists. Entity profiles are useful to represent users, contacts, resources, components, groups, and the like. All of these entities have a discreet and meaningful independent existence and role in the real world. In contrast, conventional profiles (i.e., non-entity profiles) must always be attached as a child to either an entity profile or another non-entity profile. Non-entity profiles are useful for representing data such as display preferences, demographic information, identification information, and the like. All of these groups of information are meaningless unless related to some stand alone concept such as a user, resource, component, and the like.","PostalworkList in  is an example of another special profile type called a \u201cprofilelist\u201d. A profilelist relates multiple profiles of the same type to a single parent. This is done by binding a single profile list (e.g., postalworklist) to the parent (e.g., Contact) with multiple member profiles (e.g., \u201cgb\u201d and \u201cus\u201d in ) added to the list. While ProfileLists serve to collect profiles of the same type, it is contemplated that they may also be used as a convenient collection object for subprofiles of different types. It is important to note that profilelist member profiles contain a limited set of attributes and do not support the concept of a schema. As a result of this limitation, several profile operations are not supported by ProfileLists.","An important feature of the present invention is that profile attributes are associated with sets of meta-data attributes. For clarity, a true-data attribute is defined herein as an attribute that contains a value (e.g. data, external reference, or binding) used by a user entity or client. A meta-data attribute is defined as an attribute associated with a true-data attribute which contains information used and maintained by the core profile engine  (shown in FIG. ). Meta-data attributes may also contain information associated with an entire profile, rather than an particular true-data attribute.","FIG. A and  show a representation of two exemplary profile objects of the present invention; an entity profile  and a subprofile . Both the entity profile  and the subprofile  include true data attributes  and associated meta-data attributes . In addition, both profiles  and  contain meta-data attributes  associated with each profile, and not with any particular true-data attribute. Preferably, meta-data attributes  and  are stored in the same profile object containing the associated true-data attributes , however, it is contemplated that meta-data attributes  and  may be stored in objects separate from the profile. By storing the meta-data attributes along side with true-data attributes, the profile service does not suffer any performance penalty when both attributes are retrieved. In addition, storing true and meta-data attributes in the same profile object keeps meta-data attributes from becoming out of sync with their associated true-data attributes.","The entity profile  has a profile name  of \u201cuser-smith\u201d and the subprofile  has a profile name  of \u201cuser-smith\/columbia\u201d. Each true-data attribute  contains a key=value pair holding information used by an entity. Each meta-data attribute  with the same key as a true-data attribute  is associated to the true-data attribute  and is created at the time the true-data attribute  is created. For example, in FIG. A and , every meta-data attribute  with the key \u201ctype\u201d is associated to the true-data attribute  \u201ctype=user\u201d. Associated meta-data attributes  contain information which tell the profile engine how to control the true-data attribute . Other meta-data attributes  not associated to any true-data attribute contain profile level information.","The structure of meta-data attributes is the same as the structure of true-data attributes. Each meta-data attribute contains a key=value pair. Depending on the type of data they hold, meta-data attributes may contain multiple values for the same key field. The type of information contained within a meta-data attribute  is identified by a known value prefix in the key=value pair. For example, the entity profile  contains a meta-data attribute  \u201ccolumbia=bnd_true\u201d associated to a true-data attribute  \u201ccolumbia=\u201d. Since the prefix \u201cbnd_\u201d of the meta-data attribute  is set to \u201ctrue\u201d, the associated true-data attribute  is identified as a binding to a subprofile . Table 1 describes the prefix values of associated meta-data attributes  shown in FIG. A and FIG. B. It should be noted that Table 1 is not meant as an exhaustive list of meta-data prefix values contemplated by the present invention.",{"@attributes":{"id":"p-0069","num":"0068"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"5","colwidth":"42pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}},{"entry":[{},{},"User",{},"Default"]},{"entry":["Prefix","Meta-data","Settable","Constraints","Value"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["mod","Mode","X","Any valid","764"]},{"entry":[{},{},{},"Unix file"]},{"entry":[{},{},{},"permission"]},{"entry":["own","Owner","X","Must be a","The entity"]},{"entry":[{},{},{},"string","ID of the"]},{"entry":[{},{},{},{},"user"]},{"entry":[{},{},{},{},"creating"]},{"entry":[{},{},{},{},"the"]},{"entry":[{},{},{},{},"attribute"]},{"entry":["grp","Group","X","Must be a","none"]},{"entry":[{},{},{},"string"]},{"entry":["cre","Creation",{},"NA","The time"]},{"entry":[{},"timestamp",{},{},"at which"]},{"entry":[{},{},{},{},"the value"]},{"entry":[{},{},{},{},"was set"]},{"entry":["upd","Last update",{},"NA","The last"]},{"entry":[{},"timestamp",{},{},"time a"]},{"entry":[{},{},{},{},"value was"]},{"entry":[{},{},{},{},"set"]},{"entry":["exp","Expiration","X","No greater","7 days"]},{"entry":[{},"timestamp",{},"than 7 years","from the"]},{"entry":[{},{},{},"from the","initial"]},{"entry":[{},{},{},"current time","creation"]},{"entry":[{},{},{},{},"of the"]},{"entry":[{},{},{},{},"attribute"]},{"entry":["trg","Triggers","X","Must be in a","none"]},{"entry":[{},{},{},"format"]},{"entry":[{},{},{},"understood"]},{"entry":[{},{},{},"by the"]},{"entry":[{},{},{},"enabled"]},{"entry":[{},{},{},"notification"]},{"entry":[{},{},{},"mechanism"]},{"entry":["xrf","External",{},"NA","none"]},{"entry":[{},"data"]},{"entry":[{},"reference"]},{"entry":["bnd","Bind flag","X","Must be","false"]},{"entry":[{},{},{},"either true"]},{"entry":[{},{},{},"or false"]},{"entry":["lvl","Assurance",{},"NA","none"]},{"entry":[{},"level"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}}}},"The mode meta-data attribute  (mod_) provides a data level access control mechanism and in a particular example is analogous to the Solaris\u2122 or Unix file permissions. Solaris is a trademark or registered trademark of Sun Microsystems, Inc. in the United States and other countries. For example, in the mode meta-data field the first digit after the mod_ prefix indicates owner privileges, the second digit indicates group privileges, and the third digit represent world privileges. Each digit are allowed to have a value that is any combination (e.g., sum) of read(4), write(2), execute(1) and none(0) following Unix file permission methodology. A value of \u201c7\u201d indicates read, write, and execute privileges whereas a value of \u201c4\u201d indicates read only, a value of 3 indicates write and execute only, and the like. This encoding mechanism is provided by way of example only and other equivalent permission encoding schemes may be equivalently substituted to meet the needs of the profile service environment. In this manner the meta-data storage feature described hereinbefore enables an owner and group membership to be specified for every attribute and binding within a profile. Access permissions can be specified on an attribute and binding basis for the specified owner, group and world. This feature of the present invention provides a powerful tool for both sharing information within a profile while controlling the information that is shared with other systems and users.","For example, the profile service can be used to create a plurality of entity profiles where each entity profile corresponds to a workgroup in an organization (e.g., the entity profile type is set to \u201cgroup\u201d). Each group is allowed to contain a reference to another group or some other entity having an entity profile. In this example, each entity profile representing a group has its permissions set to \u201c744\u201d such that the owner has read, write, and execute privileges, while the group members and world have read only privileges. The owner of the group profile is separately specified in the owner meta-data field, and may be an individual, software application, or a plug in group service that is added on to the core profile service engine.","In this manner, the attributes stored in each of the group entity profiles may be read by any entity in an enterprise. Other users, other software applications, and other instances of the profile service can read the profile data and create enterprise wide unique ID's for profiles so long as that other entity can connect to the profile service maintaining the group entity profiles. However, only the specified owner can modify the group entity profiles.","In another example a user service has standardized the definition of \u201cUsers\u201d by creating an entity profile of the type \u201cuser\u201d. This service sets the mode on each attribute of the User profile to \u201c744\u201d so that user profiles as they are defined are read only unless the user service itself accesses the profile as the owner of the attribute. Significantly, the 744 mode designation applies only to attributes created by the user service that initially created the profile. A subsequent entity can add additional attributes, including bindings to subprofiles, to the profile without breaking the 744 access control rules. These added attributes can be created with a new specified owner and new permissions. In other words, attributes and bindings within a single profile may have multiple owners and multiple permissions. For example, by specifying the permissions on the added attributes as \u201c600\u201d the owner of the new attributes can read and write the new attributes even though the owner has no write permission to the original attributes in the profile. Essentially, no other entity can see that the original profile has been extended. This example demonstrates the dynamic extensibility of the profile service in accordance with the present invention. Although this dynamic extensibility feature is desirably activated, it can be deactivated by a profile owner.","In yet another example, a user desires to share access to data and\/or application software (referred to herein as the limited access data and\/or software) with a select set of other entities. To enable this information to be exclusively shared with the desired entities, the user creates an entity profile for herself where the entity profile includes a subprofile (e.g., \u201cusers\u201d) that contains attributes needed to access the limited access data and\/or software. The user then defines a group of authorized entities and sets the group meta-data entry for the user subprofile binding to the defined group. By setting the permission for this subprofile binding to \u201c640\u201d the authorized group will have read privileges for the limited access data and\/or software. The subprofile is invisible to all but the limited access data and\/or software and entities that are members of the defined group. However, members of the group can now read the user profile extensions to enable exclusive access to the limited access data and\/or software application.","To understand the power of these examples it is important to note once again that an entity may be a human user, another software application, hardware device, or the like. It may be intended that the limited access data and\/or software of the latter example be accessible to one suite of application software while not available to other application software. In such a case the defined group comprises the authorized application software. More specifically, the limited access data may represent bank account numbers or the like that should only be accessible to applications that provide suitable security. The bank account numbers can be made accessible to email or web browser applications that enforce the required security, while made unavailable to corresponding applications that fail to supply the required security protocols. Remaining portions of the user profile can be made available to both types of email applications making the shared information readily accessible.","It is contemplated that the owner and group entities are specified in meta-data attributes. For example, in , the true-data attribute  has an owner value equal to \u201cprincipal\u201d set by meta-data attribute . The group value of meta-data attribute  is not specified, indicating the true-data attribute  has no group assigned to it. In one embodiment of the invention, the owner and group values are set by the core profile engine. The default value for the owner value is typically set to the entity ID of the user creating the true-data attribute. The default value for the group value is typically set to an empty value. In an alternative embodiment of the present invention, the owner and group entity values can be set by an authorizing service which interfaces with the core profile engine. Such an authorization service may support enterprise level access control enforcement by authorizing and authenticating user entities. Once the entity ID is established, the authorization service can report the entity ID to the profile service engine to record.","Meta-data attributes relating creation time and update time of true-data attributes are used to maintain data integrity of the profile service. The core profile engine timestamps true-data attributes with a creation time and an update time stored in meta-data attributes. The timestamps are preferably based on a single time zone reference, e.g. Greenwich mean time, such that various entities physically located in several time zones are synchronized. This enables entities to identify and retrieve the most recently updated true-data attribute. In a particular implementation, timestamps are stored as \u201cstringified\u201d long values such that they are readily converted to date objects in a computing environment such as the Java\u2122 computing environment. Java is a trademark or registered trademark of Sun Microsystems, Inc. in the United States and other countries.","Each true-data attribute may also be with an expiration time. An expiration time helps eliminate data from the profile service which has become obsolete. It is contemplated that the profile service contains an aging process which continuously scans the system data base and purges expired attributes. In this manner, the profile system continuously cleans house by removing unused attributes which may otherwise clutter the profile services data structures. In a particular embodiment, the default expiration time is seven days, and the default maximum time is seven years. If the default mode or expiration is not a value that is desired, users are able to change the default value assuming the user has execute permission on that attribute or binding. If expiration longer than the default maximum of seven years is desired the attribute's creator will have to arrange to update the attribute before the expiration.","A true-data attribute may also be associated with one or more trigger values. It is contemplated that a notification service may receive the trigger values whenever the true-data attribute is changed or deleted. These trigger values are used to alert a entity referenced by the trigger values that the true-data attribute has been modified. For example, in a more specific embodiment, trigger values contain one or more URL (Uniform Resource Locator) addresses used to alert an entity when data has been changed or deleted. In , meta-data attributes  and  contain URL locations of entities to be notified whenever true-data attribute  is modified or deleted. It is contemplated that the notification service can function asynchronously relative the core profile engine. Additionally, other notification attributes may be utilized in the present invention, such as Java Remote Method Invocation (RMI) protocol.","The present invention may also support meta-data assurance level values set by an authorization service module. The assurance level can be an arbitrary floating point scale set by the authorization service to denote the confidence level that an entity is actually who it says it is. In this manner, profile access privileges can be limited to entities that return an assurance level equal to or greater than the recorded profile meta-data assurance level. In , meta-data attribute  associates an assurance level of 5.6 to the true-data attribute .","As previously mentioned, some meta-data attributes are associated to an entire profile rather than an individual true-data attribute of the profile. These control attributes  are identified by reserved keys in the key=value pair in FIG. A and FIG. B. Table 2 describes the set of profile control attributes  shown in FIG. A and FIG. B. For example, the \u201cbds\u201d key specifies the profiles which the current profile is bound to, the \u201ctpl\u201d key helps maintain profile uniformity by specifying one or more templates, the \u201cobjectclass\u201d key identifies the profile class, and the \u201cobjectrid\u201d key identifies the profile object resource ID.",{"@attributes":{"id":"p-0082","num":"0081"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"63pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"105pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},{},"Multiple",{}]},{"entry":[{},"Key Value","values","Description"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"bds","yes","Records the profile resource"]},{"entry":[{},{},{},"ID this profile is bound to."]},{"entry":[{},"tpl","yes","Records profile resource IDs"]},{"entry":[{},{},{},"of templates associated with"]},{"entry":[{},{},{},"this profile."]},{"entry":[{},"objectclass","no","Records a value indicating"]},{"entry":[{},{},{},"type of profile represented."]},{"entry":[{},"objectrid","no","Records the resource ID for"]},{"entry":[{},{},{},"the profile."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}}},"FIG. A and  illustrate an exemplary class structure indicating basic functional objects and characteristics of a profile service in accordance with the present invention. The profile service supports two basic functional objects, profiles themselves and a \u201cprofile manager\u201d. The profile manger interface is alternatively referred to as the profile service interface. The logical interfaces shown in FIG. A and  are not intended to be literal. Instead they are intended to articulate the fundamental functional operations that the service supports. All implementation of the profile service desirably support these classes of functions. In addition, individual implementations may support additional methods that are not supported in all implementations to meet the needs of a particular application.","A profile class includes variables, data and methods necessary to define basic functional interfaces of general profiles described hereinbefore. In particular, profile class methods include a method for retrieving and creating true-data attribute information (getAttrib and setAttrib). The profile class also includes a method for looking at the contents of meta-data attributes (getMetaData), a method for creating meta-data attributes (setMetaData), a method for removing a trigger value (removeTrigger), a method for creating a subprofile binding (bind), a method for removing a binding (unbind), a method for changing attribute access privileges (chmod), methods to change an attribute's owner and group (chown and chgrp), and methods of checking a profile's template settings (hasSchema, getSchema, and conformsToSchema). The basic operation of some of the Profile class methods is summarized in Table 3.",{"@attributes":{"id":"p-0085","num":"0084"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Operation Summary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getAttrib","Given a true-data attribute key,"]},{"entry":[{},{},"the getAttrib method will return"]},{"entry":[{},{},"the value of the true-data attribute."]},{"entry":[{},"setAttrib","Given a true-data attribute key and"]},{"entry":[{},{},"an attribute value the setAttrib"]},{"entry":[{},{},"method sets an attribute on a"]},{"entry":[{},{},"profile, where key = value."]},{"entry":[{},"removeAttrib","Given a true-data attribute key and"]},{"entry":[{},{},"value, removes a specified"]},{"entry":[{},{},"attribute value from a profile. If"]},{"entry":[{},{},"no attribute value is set, the"]},{"entry":[{},{},"entire  attribute is removed. An"]},{"entry":[{},{},"entity must have execute privilege"]},{"entry":[{},{},"to perform this operation."]},{"entry":[{},"listAttrib","Returns a list of true-data"]},{"entry":[{},{},"attributes which exist on a profile."]},{"entry":[{},"getProfileType","Returns a profile's object class type."]},{"entry":[{},"getResourceID","Returns a profile's resource ID value."]},{"entry":[{},"getMetaData","Given a meta-data attribute key and"]},{"entry":[{},{},"a value prefix index, returns the"]},{"entry":[{},{},"value of the meta-data attribute."]},{"entry":[{},"setMetaData","Given a meta-data attribute key and"]},{"entry":[{},{},"value, sets the attribute on the"]},{"entry":[{},{},"profile where key = value."]},{"entry":[{},"removeTrigger","Removes a specified trigger from a"]},{"entry":[{},{},"profile's trigger meta-data attribute."]},{"entry":[{},"bind","Established a parent child"]},{"entry":[{},{},"relationship between a first"]},{"entry":[{},{},"profile and a second profile (the"]},{"entry":[{},{},"child). Essentially, an attribute"]},{"entry":[{},{},"is established in the first profile"]},{"entry":[{},{},"pointing a subprofile."]},{"entry":[{},"unbind","Causes a profile binding to be removed."]},{"entry":[{},"listBindings","Lists the profiles bound to a profile."]},{"entry":[{},"search","Returns all the true-data"]},{"entry":[{},{},"attributes that match specified"]},{"entry":[{},{},"filters relative to a profile."]},{"entry":[{},"chmod","Given a true-data attribute key,"]},{"entry":[{},{},"changes the attribute's access"]},{"entry":[{},{},"privileges. In order to execute"]},{"entry":[{},{},"this method, the caller must have"]},{"entry":[{},{},"execute privilege on the attribute."]},{"entry":[{},"chown","Changes the owner of a true-data"]},{"entry":[{},{},"attribute. In order to execute"]},{"entry":[{},{},"this method, the caller must be the"]},{"entry":[{},{},"current owner of this attribute and"]},{"entry":[{},{},"have execute privilege."]},{"entry":[{},"chgrp","Changes the group of a true-data"]},{"entry":[{},{},"attribute. In order to execute"]},{"entry":[{},{},"this method, the caller must be the"]},{"entry":[{},{},"attribute's current owner or a"]},{"entry":[{},{},"member of its group and have"]},{"entry":[{},{},"execute privilege."]},{"entry":[{},"hasSchema","Determines if a profile is"]},{"entry":[{},{},"associated to one or more templates."]},{"entry":[{},"getSchema","Returns a profile template's"]},{"entry":[{},{},"required attributes."]},{"entry":[{},"conformsToSchema","Returns a true or false depending"]},{"entry":[{},{},"on whether or not a profile"]},{"entry":[{},{},"conforms to its templates."]},{"entry":[{},"setAutoRefresh","Sets the automatic refresh state of"]},{"entry":[{},{},"a profile. Automatic refreshing of"]},{"entry":[{},{},"a profile causes the profile to be"]},{"entry":[{},{},"synchronized with all other"]},{"entry":[{},{},"instances of the profile. This"]},{"entry":[{},{},"feature ensures that users are"]},{"entry":[{},{},"immediately seeing the changes made"]},{"entry":[{},{},"by other users."]},{"entry":[{},"refresh","Explicitly forces a profile to"]},{"entry":[{},{},"synchronize with a  master data"]},{"entry":[{},{},"record. Any changes to the master"]},{"entry":[{},{},"record and all updates performed by"]},{"entry":[{},{},"other users on the master record"]},{"entry":[{},{},"will be reflected in the profile"]},{"entry":[{},"close","Closes a profile and releases any"]},{"entry":[{},{},"resources it may have had."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The entity profile class includes variables, data and methods necessary to define basic functional interfaces of entity profiles described hereinbefore. In the specific example of  the entity profile class extends the profile interface (i.e., it supports all the methods found in the profile interface) by providing several methods that are specific to entity profiles. Table 4 summarizes these special methods.",{"@attributes":{"id":"p-0087","num":"0086"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 4"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Operation Summary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"getEntityID","Returns the entity ID of a specified"]},{"entry":[{},{},"entity profile."]},{"entry":[{},"getEntityType","Returns the value of the type attribute"]},{"entry":[{},{},"of a specified entity profile."]},{"entry":[{},"getEntityName","Sets the value of the name attribute of"]},{"entry":[{},{},"a specified entity profile."]},{"entry":[{},"getEntityName","Returns the value of the name attribute"]},{"entry":[{},{},"of a specified entity profile."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"The profile list class includes variables, data and methods necessary to define basic functional interfaces of profile lists described hereinbefore. The profile list class also extends the profile interface and provides additional methods used to look at and manipulate the contents of a profile list. Table 5 summarizes operation of the components of a Profile list object shown in FIG. A.",{"@attributes":{"id":"p-0089","num":"0088"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 5"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Method","Operation Summary"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["getListKey","Returns the key to a list. All"]},{"entry":[{},"members of a list contain an attribute"]},{"entry":[{},"reference by a list key and no two"]},{"entry":[{},"members have the same value assigned"]},{"entry":[{},"to this key."]},{"entry":["first","Moves the  list index to the first"]},{"entry":[{},"member profile in the list"]},{"entry":["last","Moves the  list index to the last"]},{"entry":[{},"member profile in the list"]},{"entry":["next","Moves the list index to the next"]},{"entry":[{},"member profile in the list."]},{"entry":["previous","Moves the list  index to the previous"]},{"entry":[{},"member profile in the list."]},{"entry":["moveTo","Moves the list index to a member"]},{"entry":[{},"profile with a specified key value."]},{"entry":["list","Returns a list's profiles members."]},{"entry":["hasMoreElements","Indicates whether a profile list has"]},{"entry":[{},"more elements based on the current"]},{"entry":[{},"position of the list index."]},{"entry":["size","Returns the number of members"]},{"entry":[{},"currently in the profile list."]},{"entry":["addMember","Adds a specified profile to the list membership."]},{"entry":["removeMember","Removes a profile associated with a"]},{"entry":[{},"specified key from the list membership."]},{"entry":["get","Returns the profile at the current"]},{"entry":[{},"list index. The caller must have read"]},{"entry":[{},"privilege on the profile member."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"The functions described in Tables 3-5 are representative only and it is contemplated that the profile, entity profile, and profile list classes will implement a variety of other methods to meet the needs of a particular application. The specific methods and interfaces identified herein can be implemented in any available object-oriented programming environment such as, for example, SmallTalk, C++, Java, and the like.",{"@attributes":{"id":"p-0091","num":"0090"},"figref":"FIG. 6B"},{"@attributes":{"id":"p-0092","num":"0091"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 6"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Method","Operation Summary"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"newProfile","Given a set of initializing"]},{"entry":[{},{},"criteria, the method creates a"]},{"entry":[{},{},"new profile."]},{"entry":[{},"newProfileList","Given a set of initializing"]},{"entry":[{},{},"criteria, the method creates a"]},{"entry":[{},{},"new profile list."]},{"entry":[{},"newEntity","Given a set of initializing"]},{"entry":[{},{},"criteria, the method creates a"]},{"entry":[{},{},"new entity profile."]},{"entry":[{},"retrieveProfile","Retrieves a profile with a"]},{"entry":[{},{},"specified resource ID."]},{"entry":[{},"removeProfile","Removes an profile with a"]},{"entry":[{},{},"specified resource ID. If the"]},{"entry":[{},{},"profile is referenced by other"]},{"entry":[{},{},"profiles, the removed profile"]},{"entry":[{},{},"will simply be relocated and"]},{"entry":[{},{},"assigned a new resource ID."]},{"entry":[{},"search","Given a search expression the"]},{"entry":[{},{},"search method returns a list"]},{"entry":[{},{},"of subprofiles and\/or"]},{"entry":[{},{},"attribute values of a profile"]},{"entry":[{},{},"that match the given search"]},{"entry":[{},{},"expression. This method can"]},{"entry":[{},{},"search all profiles."]},{"entry":[{},"defineProfileSchema","Creates a template which"]},{"entry":[{},{},"defines what a profile should"]},{"entry":[{},{},"look like."]},{"entry":[{},"removeProfileSchema","Removes a template definition"]},{"entry":[{},{},"from a profile."]},{"entry":[{},"defineExternalDataStore","Defines a new external data"]},{"entry":[{},{},"store for integration into the"]},{"entry":[{},{},"profile service virtual data store."]},{"entry":[{},"removeExternalDataStore","Removes a specified external"]},{"entry":[{},{},"data store definition."]},{"entry":[{},"listExternalDataStore","Returns a list comprised of"]},{"entry":[{},{},"all the external data store"]},{"entry":[{},{},"resource IDs currently defined."]},{"entry":[{},"newExternalDataStore","Creates a new external data"]},{"entry":[{},{},"reference object that can be"]},{"entry":[{},{},"assigned to the value of any attribute."]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Optionally, profile service engine  includes an interface for communicating with other services. Examples of such services include an authorization service that supports enterprise level access control enforcement by authorizing and authenticating user entities. Another example is a group service that provides a mechanism for defining and maintaining group entity profiles. This enables the profile service in accordance with the present invention to dynamically integrate functionality as new services and software applications become available that can communicate with the provided optional interface.","It will be appreciated that the profile service described herein provides generic profiling capability and defines the fundamental behavior, representation, and functional interfaces for profile objects. In addition, data replication between instances of the profile services are integrated. The generic capabilities described herein enable the definition of data structures to occur independently of and after, a core profile is created and defined. This dynamic extensibility yields a product of wide ranging utility.","Although the invention has been described and illustrated with a certain degree of particularity, it is understood that the present disclosure has been made only by way of example, and that numerous changes in the combination and arrangement of parts can be resorted to by those skilled in the art without departing from the spirit and scope of the invention, as hereinafter claimed."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 3"},"FIG. A and  show exemplary data structures for holding profile objects in accordance with the present invention;","FIG. A and  show a representation of two exemplary profile objects of the present invention; and","FIG. A and  show class structure and relationships between classes used in an exemplary embodiment of the present invention."]},"DETDESC":[{},{}]}
