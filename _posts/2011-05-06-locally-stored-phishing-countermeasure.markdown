---
title: Locally stored phishing countermeasure
abstract: A system and method for authenticating a resource such as a website or webpage is provided. In response to a script provided with a resource, a verification file is initially generated and stored at a client device. The verification file may be selected or generated with user input. On a subsequent occasion when a resource is accessed by the client device, a script is executed to attempt to retrieve the verification file and display the file at the client device. If the verification file is successfully retrieved and displayed and recognized as the correct verification file, the resource is authenticated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08984604&OS=08984604&RS=08984604
owner: BlackBerry Limited
number: 08984604
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20110506
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND","DETAILED DESCRIPTION"],"p":["This application claims priority to U.S. Provisional Application No. 61\/332,451 filed on 7 May 2010, the entirety of which is incorporated herein by reference.","1. Technical Field","The present application relates generally to computer security and anti-phishing measures.","2. Description of the Related Art","Consumers increasingly rely on online web services for personal, financial, and business-related transactions. Access to these online services frequently requires the user to supply credentials, such as a userid and a password. In a common implementation involving a server system providing the online services and a browser client operating on a user communication device, the user enters the userid and password in form fields presented in a webpage displayed by the browser client, and the userid and password are transmitted to the server system, which validates the userid and password against records at the server system to determine whether access to the services should be granted.","A common type of fraud perpetrated in connection with such services provided over the Internet is \u201cphishing\u201d, in which an attacker attempts to gain confidential information, such as the user's credentials, so that the attacker can then access the user's online services. For example, banking services are commonly provided over the Internet over a web portal; users may access the services by providing a userid and password. An attacker who wishes to gain access to a user's bank account and related financial information may create a fraudulent website mimicking the content of a financial institution's legitimate website including any form fields for entry of user credentials, and then direct the user to the fraudulent website. If the user does not detect that the website is indeed fraudulent, the user may enter his or her userid and password, which are then received by the attacker. The attacker may then use these credentials to access the user's account information using the financial institution's legitimate website.","The embodiments described herein provide phishing countermeasure systems and methods to reduce the likelihood of a successful phishing attack. The following embodiments are described generally in relation to a user communication device or data processing device capable of communication over a network with a service, and in particular over the Internet with an online web service typically accessible via a web server and associated system. The user device may be a personal computer adapted for network communications. It will be appreciated by those skilled in the art, however, that this description is not intended to limit the scope of the described embodiments to personal computers. The methods and systems described herein may be applied to any appropriate communication or data processing device enabled for communications over fixed or wireless links, whether portable or not, including without limitation cellular phones, smartphones, wireless organizers, personal digital assistants, desktop computers, terminals, laptops, tablets, handheld wireless communication devices, wirelessly-enabled notebook computers and the like. For ease of reference, the device is generally referred to as a \u201cclient device\u201d below.","Further, the embodiments described herein are generally described in the context of resources delivered to and displayed at a client device. The resources may generally be webpage documents or other structured documents, for example authored in hypertext markup language (HTML) or in another structured markup language. The resources may comprise or be rendered in conjunction with scripts, dynamic content, presentation markup, style sheets, or other programming content that is processed within the environment provided by a client application executing on the client device. The client application may be a client browser application or other content viewer for displaying the content of the resource. The construction of HTML web pages and other structured content using known structural and presentation standards such as HTML 4.01, XHTML 1.0, HTML 5, DOM Levels 1 through 3, and CSS Levels 1 through 3, published by the World Wide Web Consortium (W3C) at w3.org, will be known to those skilled in the art. The resources may comprise or be associated with elements such as JavaScript published by the Mozilla Foundation, Mountain View, Calif., www.mozilla.org; Adobe Flash technologies from Adobe Systems Incorporated, San Jose, Calif.; dynamic HTML technology, widgets, modules, code snippets, and the like, which may be delivered together with the resource to the client device, or which alternatively may be downloadable separately by the client application for use with the resource. The selection and implementation of these and other suitable existing and future structural or presentation standards, various elements, scripting or programming languages and their extensions, will be known to those of skill in the art.","The embodiments described herein may be implemented on a client device that is a mobile communication device, such as that illustrated in . The communication device may communicate with other devices over a wireless communication system or enterprise system as illustrated in . The communication device  may be a mobile device with two-way communication and advanced data communication capabilities including the capability to communicate with other mobile devices or computer systems through a network of transceiver stations. The communication device  can also have voice communication capabilities. Throughout the specification, terms such as \u201cmay\u201d and \u201ccan\u201d are used interchangeably and use of any particular term should not be construed as limiting the scope or requiring experimentation to implement the claimed subject matter or embodiments described herein.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","102","100","104","100","103"]},"The communication subsystem  receives messages from and sends messages to a wireless network . In this exemplary embodiment of the communication device , the communication subsystem  is configured in accordance with one or more of Global System for Mobile Communication (GSM), General Packet Radio Services (GPRS) standards, Enhanced Data GSM Environment (EDGE) and Universal Mobile Telecommunications Service (UMTS). New standards are still being defined, but it is believed that they will have similarities to the network behavior described herein, and it will also be understood by persons skilled in the art that the embodiments described herein are intended to use any other suitable standards that are developed in the future. The wireless link connecting the communication subsystem  with the wireless network  represents one or more different Radio Frequency (RF) channels, operating according to defined protocols specified for GSM, GPRS, EDGE, or UMTS, and optionally other network communications. With newer network protocols, these channels are capable of supporting both circuit switched voice communications and packet switched data communications.","Other wireless networks can also be associated with the communication device  in variant implementations. The different types of wireless networks that can be employed include, for example, data-centric wireless networks, voice-centric wireless networks, and dual-mode networks that can support both voice and data communications over the same physical base stations. Combined dual-mode networks include, but are not limited to, Code Division Multiple Access (CDMA) or CDMA2000 networks, GSM\/GPRS networks, third-generation (3G) networks like EDGE, HSPA, HSPA+, EVDO and UMTS, or fourth-generation (4G) networks such as LTE and LTE Advanced. Some other examples of data-centric networks include WiFi 802.11\u2122, Mobitex\u2122 and DataTAC\u2122 network communication systems. Examples of other voice-centric data networks include Personal Communication Systems (PCS) networks like GSM and Time Division Multiple Access (TDMA) systems. The mobile device  may be provided with additional communication subsystems, such as the wireless LAN (WLAN) communication subsystem  also shown in . The WLAN communication subsystem may operate in accordance with a known network protocol such as one or more of the 802.11\u2122 family of standards developed by IEEE. The communication subsystem  may be separate from, or integrated with, the communication subsystem  or with the short-range communications module . The main processor  also interacts with additional subsystems such as a Random Access Memory (RAM) , a flash memory , a display , an auxiliary input\/output (I\/O) subsystem , a data port , a keyboard , a speaker , a microphone , short-range communications  and other device subsystems . The communication device may also be provided with an accelerometer , which may be used to detect gravity- or motion-induced forces and their direction. Detection of such forces applied to the device  may be processed to determine a response of the device , such as an orientation of a graphical user interface displayed on the display assembly  in response to a determination of the current orientation of which the device .","Some of the subsystems of the communication device  perform communication-related functions, whereas other subsystems can provide \u201cresident\u201d or on-device functions. By way of example, the display  and the keyboard  can be used for both communication-related functions, such as entering a text message for transmission over the network , and device-resident functions such as a calculator or task list.","A rendering circuit  is included in the device . When a user specifies that a data file is to be viewed on the display , the rendering circuit  analyzes and processes the data file for visualization on the display . Rendering data files originally optimized or prepared for visualization on large-screen displays on a portable electronic device display often requires additional processing prior to visualization on the small-screen portable electronic device displays. This additional processing may be accomplished by the rendering engine . As will be appreciated by those of skill in the art, the rendering engine can be implemented in hardware, software, or a combination thereof, and can comprise a dedicated image processor and associated circuitry, or can be implemented within main processor .","The communication device  can send and receive communication signals over the wireless network  after required network registration or activation procedures have been completed. Network access is associated with a subscriber or user of the communication device . To identify a subscriber, the communication device  requires a SIM\/RUIM card  (i.e. Subscriber Identity Module or a Removable User Identity Module) or another suitable identity module to be inserted into a SIM\/RUIM interface  in order to communicate with a network. The SIM\/RUIM card  is one type of a conventional \u201csmart card\u201d that can be used to identify a subscriber of the communication device  and to personalize the communication device , among other things. Without the SIM\/RUIM card , the communication device  is not fully operational for communication with the wireless network . By inserting the SIM\/RUIM card  into the SIM\/RUIM interface , a subscriber can access all subscribed services. Services can include: web browsing and messaging such as e-mail, voice mail, Short Message Service (SMS), and Multimedia Messaging Services (MMS). More advanced services can include: point of sale, field service and sales force automation. The SIM\/RUIM card  includes a processor and memory for storing information. Once the SIM\/RUIM card  is inserted into the SIM\/RUIM interface , it is coupled to the main processor . In order to identify the subscriber, the SIM\/RUIM card  can include some user parameters such as an International Mobile Subscriber Identity (IMSI). An advantage of using the SIM\/RUIM card  is that a subscriber is not necessarily bound by any single physical mobile device. The SIM\/RUIM card  can store additional subscriber information for a mobile device as well, including datebook (or calendar) information and recent call information. Alternatively, user identification information can also be programmed into the flash memory .","The communication device  may be a battery-powered device including a battery interface  for receiving one or more rechargeable batteries . In at least some embodiments, the battery  can be a smart battery with an embedded microprocessor. The battery interface  is coupled to a regulator (not shown), which assists the battery  in providing power V+ to the communication device . Although current technology makes use of a battery, future technologies such as micro fuel cells can provide the power to the communication device .","The communication device  also includes an operating system  and software components  to  which are described in more detail below. The operating system  and the software components  to  that are executed by the main processor  are typically stored in a persistent store such as the flash memory , which can alternatively be a read-only memory (ROM) or similar storage element (not shown). Those skilled in the art will appreciate that portions of the operating system  and the software components  to , such as specific device applications, or parts thereof, can be temporarily loaded into a volatile store such as the RAM . Other software components can also be included, as is well known to those skilled in the art.","The subset of software applications  that control basic device operations, including data and voice communication applications, will normally be installed on the communication device  during its manufacture. Other software applications include a message application  that can be any suitable software program that allows a user of the communication device  to send and receive electronic messages. Various alternatives exist for the message application  as is well known to those skilled in the art. Messages that have been sent or received by the user are typically stored in the flash memory  of the communication device  or some other suitable storage element in the communication device . In at least some embodiments, some of the sent and received messages can be stored remotely from the device  such as in a data store of an associated host system that the communication device  communicates with.","The software applications can further include a device state module , a Personal Information Manager (PIM) , and other suitable modules (not shown). The device state module  provides persistence, i.e. the device state module  ensures that important device data is stored in persistent memory, such as the flash memory , so that the data is not lost when the communication device  is turned off or loses power.","The PIM  includes functionality for organizing and managing data items of interest to the user, such as, but not limited to, e-mail, contacts, calendar events, voice mails, appointments, and task items. A PIM application has the ability to send and receive data items via the wireless network . PIM data items can be seamlessly integrated, synchronized, and updated via the wireless network  with the mobile device subscriber's corresponding data items stored and\/or associated with a host computer system. This functionality creates a mirrored host computer on the communication device  with respect to such items. This can be particularly advantageous when the host computer system is the mobile device subscriber's office computer system.","The communication device  also includes a connect module , and an information technology (IT) policy module . The connect module  implements the communication protocols that are required for the communication device  to communicate with the wireless infrastructure and any host system, such as an enterprise system, that the communication device  is authorized to interface with. Examples of a wireless infrastructure and an enterprise system are given in , which are described in more detail below.","The connect module  includes a set of Application Programming Interfaces (APIs) that can be integrated with the communication device  to allow the communication device  to use any number of services associated with the enterprise system. The connect module  allows the communication device  to establish an end-to-end secure, authenticated communication pipe with the host system. A subset of applications for which access is provided by the connect module  can be used to pass IT policy commands from the host system to the communication device . This can be done in a wireless or wired manner. These instructions can then be passed to the IT policy module  to modify the configuration of the device . Alternatively, in some cases, the IT policy update can also be done over a wired connection.","Other types of software applications can also be installed on the communication device . These software applications can be third party applications, which are added after the manufacture of the communication device . Examples of third party applications include games, calculators, utilities, etc.","The additional applications can be loaded onto the communication device  through at least one of the wireless network , the auxiliary I\/O subsystem , the data port , the short-range communications subsystem , or any other suitable device subsystem . This flexibility in application installation increases the functionality of the communication device  and can provide enhanced on-device functions, communication-related functions, or both. For example, secure communication applications can enable electronic commerce functions and other such financial transactions to be performed using the communication device .","The data port  enables a subscriber to set preferences through an external device or software application and extends the capabilities of the communication device  by providing for information or software downloads to the communication device  other than through a wireless communication network. The alternate download path can, for example, be used to load an encryption key onto the communication device  through a direct and thus reliable and trusted connection to provide secure device communication. The data port  can be any suitable port that enables data communication between the communication device  and another computing device. The data port  can be a serial or a parallel port. In some instances, the data port  can be a USB port that includes data lines for data transfer and a supply line that can provide a charging current to charge the battery  of the communication device .","The short-range communications subsystem  provides for communication between the communication device  and different systems or devices, without the use of the wireless network . For example, the subsystem  can include an infrared device and associated circuits and components for short-range communication. Examples of short-range communication standards include standards developed by the Infrared Data Association (IrDA), Bluetooth\u2122, and the 802.11\u2122 family of standards.","In use, a received signal such as a text message, an e-mail message, or web page download will be processed by the communication subsystem  and input to the main processor . The main processor  will then process the received signal for output to the display  or alternatively to the auxiliary I\/O subsystem . A subscriber can also compose data items, such as e-mail messages, for example, using the keyboard  in conjunction with the display  and possibly the auxiliary I\/O subsystem . The auxiliary subsystem  can include devices such as: a touchscreen, mouse, track ball, infrared fingerprint detector, or a roller wheel with dynamic button pressing capability. The keyboard  may be an alphanumeric keyboard and\/or telephone-type keypad. However, other types of keyboards can also be used. A composed item can be transmitted over the wireless network  through the communication subsystem . It will be appreciated that if the display  comprises a touchscreen, then the auxiliary subsystem  may still comprise one or more of the devices identified above.","For voice communications, the overall operation of the communication device  is substantially similar, except that the received signals are output to the speaker , and signals for transmission are generated by the microphone . Alternative voice or audio I\/O subsystems, such as a voice message recording subsystem, can also be implemented on the communication device . Although voice or audio signal output is accomplished primarily through the speaker , the display  can also be used to provide additional information such as the identity of a calling party, duration of a voice call, or other voice call related information.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 2","FIG. 2"],"b":["104","104","150","152","154","156","158","160","104","200","100"]},"Signals received by the antenna  through the wireless network  are input to the receiver , which can perform such common receiver functions as signal amplification, frequency down conversion, filtering, channel selection, and analog-to-digital (A\/D) conversion. A\/D conversion of a received signal allows more complex communication functions such as demodulation and decoding to be performed in the DSP . In a similar manner, signals to be transmitted are processed, including modulation and encoding, by the DSP . These DSP-processed signals are input to the transmitter  for digital-to-analog (D\/A) conversion, frequency up conversion, filtering, amplification and transmission over the wireless network  via the antenna . The DSP  not only processes communication signals, but also provides for receiver and transmitter control. For example, the gains applied to communication signals in the receiver  and the transmitter  can be adaptively controlled through automatic gain control algorithms implemented in the DSP .","The wireless link between the communication device  and the wireless network  can contain one or more different channels, typically different RF channels, and associated protocols used between the communication device  and the wireless network . An RF channel is a limited resource that should be conserved, typically due to limits in overall bandwidth and limited battery power of the communication device . When the communication device  is fully operational, the transmitter  is typically keyed or turned on only when it is transmitting to the wireless network  and is otherwise turned off to conserve resources. Similarly, the receiver  is periodically turned off to conserve power until it is needed to receive signals or information (if at all) during designated time periods.",{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 3","FIG. 3"],"b":["202","200","200","202","144","100","202","200","202","202","204","206","208","210","212","214","216","218","220","202","200"]},"In a GSM network, the MSC  is coupled to the BSC  and to a landline network, such as a Public Switched Telephone Network (PSTN)  to satisfy circuit switched requirements. The connection through the PCU , the SGSN  and the GGSN  to a public or private network (Internet)  (also referred to herein generally as a shared network infrastructure) represents the data path for GPRS capable mobile devices. In a GSM network extended with GPRS capabilities, the BSC  also contains the Packet Control Unit (PCU)  that connects to the SGSN  to control segmentation, radio channel allocation and to satisfy packet switched requirements. To track the location of the communication device  and availability for both circuit switched and packet switched management, the HLR  is shared between the MSC  and the SGSN . Access to the VLR  is controlled by the MSC .","The station  is a fixed transceiver station and together with the BSC  form fixed transceiver equipment. The fixed transceiver equipment provides wireless network coverage for a particular coverage area commonly referred to as a \u201ccell\u201d. The fixed transceiver equipment transmits communication signals to and receives communication signals from mobile devices within its cell via the station . The fixed transceiver equipment normally performs such functions as modulation and possibly encoding and\/or encryption of signals to be transmitted to the communication device  in accordance with particular, usually predetermined, communication protocols and parameters, under control of its controller. The fixed transceiver equipment similarly demodulates and possibly decodes and decrypts, if necessary, any communication signals received from the communication device  within its cell. Communication protocols and parameters can vary between different nodes. For example, one node can employ a different modulation scheme and operate at different frequencies than other nodes.","For all communication devices  registered with a specific network, permanent configuration data such as a user profile is stored in the HLR . The HLR  also contains location information for each registered mobile device and can be queried to determine the current location of a mobile device. The MSC  is responsible for a group of location areas and stores the data of the mobile devices currently in its area of responsibility in the VLR . Further, the VLR  also contains information on mobile devices that are visiting other networks. The information in the VLR  includes part of the permanent mobile device data transmitted from the HLR  to the VLR  for faster access. By moving additional information from a remote HLR  node to the VLR , the amount of traffic between these nodes can be reduced so that voice and data services can be provided with faster response times and at the same time requiring less use of computing resources.","The SGSN  and the GGSN  are elements added for GPRS support; namely packet switched data support, within GSM. The SGSN  and the MSC  have similar responsibilities within the wireless network  by keeping track of the location of each communication device . The SGSN  also performs security functions and access control for data traffic on the wireless network . The GGSN  provides internetworking connections with external packet switched networks and connects to one or more SGSNs  via an Internet Protocol (IP) backbone network operated within the network . During normal operations, a given communication device  must perform a \u201cGPRS Attach\u201d to acquire an IP address and to access data services. This requirement is not present in circuit switched voice channels as Integrated Services Digital Network (ISDN) addresses are used for routing incoming and outgoing calls. Currently, all GPRS capable networks use private, dynamically assigned IP addresses, thus requiring the DHCP server  connected to the GGSN . There are many mechanisms for dynamic IP assignment, including using a combination of a Remote Authentication Dial-In User Service (RADIUS) server and a DHCP server. Once the GPRS Attach is complete, a logical connection is established from a communication device , through the PCU , and the SGSN  to an Access Point Node (APN) within the GGSN . The APN represents a logical end of an IP tunnel that can either access direct Internet compatible services or private network connections. The APN also represents a security mechanism for the network , insofar as each communication device  must be assigned to one or more APNs and communication devices  cannot exchange data without first performing a GPRS Attach to an APN that it has been authorized to use. The APN can be considered to be similar to an Internet domain name such as \u201cmyconnection.wireless.com\u201d.","Once the GPRS Attach operation is complete, a tunnel is created and all traffic is exchanged within standard IP packets using any protocol that can be supported in IP packets. This includes tunneling methods such as IP over IP as in the case with some IPSecurity (Ipsec) connections used with Virtual Private Networks (VPN). These tunnels are also referred to as Packet Data Protocol (PDP) Contexts and there are a limited number of these available in the network . To maximize use of the PDP Contexts, the network  will run an idle timer for each PDP Context to determine if there is a lack of activity. When a communication device  is not using its PDP Context, the PDP Context can be de-allocated and the IP address returned to the IP address pool managed by the DHCP server .",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 4","FIG. 4"],"b":["250","100","144","250","250","100","250","202","200"]},"The host system  comprises a number of network components connected to each other by a network . For instance, a user's desktop computer with an accompanying cradle  for the user's communication device  is situated on a LAN connection. The cradle  for the communication device  can be coupled to the computer by a serial or a Universal Serial Bus (USB) connection, for example. Other user computers -are also situated on the network , and each can be equipped with an accompanying cradle . The cradle  facilitates the loading of information (e.g. PIM data, private symmetric encryption keys to facilitate secure communications) from the user computer to the communication device , and can be particularly useful for bulk information updates often performed in initializing the communication device  for use. The information downloaded to the communication device  can include certificates used in the exchange of messages.","It will be understood by persons skilled in the art that the user computers -are typically also connected to other peripheral devices, such as printers, etc., which are not explicitly shown in . Furthermore, only a subset of network components of the host system  are shown in  for ease of exposition, and it will be understood by persons skilled in the art that the host system  will comprise additional components that are not explicitly shown in  for this exemplary configuration. More generally, the host system  can represent a smaller part of a larger network (not shown) of the organization, and can comprise different components and\/or be arranged in different topologies than that shown in the exemplary embodiment of .","To facilitate the operation of the communication device  and the wireless communication of messages and message-related data between the communication device  and components of the host system , a number of wireless communication support components  can be provided. In some implementations, the wireless communication support components  can include a message management server , a mobile data server , a web server, such as Hypertext Transfer Protocol (HTTP) server , a contact server , and a device manager module . HTTP servers can also be located outside the enterprise system, as indicated by the HTTP server  attached to the network . The device manager module  includes an IT Policy editor  and an IT user property editor , as well as other software components for allowing an IT administrator to configure the communication devices . In an alternative embodiment, there can be one editor that provides the functionality of both the IT policy editor  and the IT user property editor . The support components  also include a data store , and an IT policy server . The IT policy server  includes a processor , a network interface  and a memory unit . The processor  controls the operation of the IT policy server  and executes functions related to the standardized IT policy as described below. The network interface  allows the IT policy server  to communicate with the various components of the host system  and the communication devices . The memory unit  can store functions used in implementing the IT policy as well as related data. Those skilled in the art know how to implement these various components. Other components can also be included as is well known to those skilled in the art. Further, in some implementations, the data store  can be part of any one of the servers.","In this exemplary embodiment, the communication device  communicates with the host system  through node  of the wireless network  and a shared network infrastructure  such as a service provider network or the public Internet. Access to the host system  can be provided through one or more routers (not shown), and computing devices of the host system  can operate from behind a firewall or proxy server . The proxy server  provides a secure node and a wireless internet gateway for the host system . The proxy server  intelligently routes data to the correct destination server within the host system .","In some implementations, the host system  can include a wireless VPN router (not shown) to facilitate data exchange between the host system  and the communication device . The wireless VPN router allows a VPN connection to be established directly through a specific wireless network to the communication device . The wireless VPN router can be used with the Internet Protocol (IP) Version 6 (IPV6) and IP-based wireless networks. This protocol can provide enough IP addresses so that each mobile device has a dedicated IP address, making it possible to push information to a mobile device at any time. An advantage of using a wireless VPN router is that it can be an off-the-shelf VPN component, and does not require a separate wireless gateway and separate wireless infrastructure. A VPN connection may be a Transmission Control Protocol (TCP)\/IP or User Datagram Protocol (UDP)\/IP connection for delivering the messages directly to the communication device  in this alternative implementation.","Messages intended for a user of the communication device  are initially received by a message server  of the host system . Such messages can originate from any number of sources. For instance, a message can have been sent by a sender from the computer within the host system , from a different mobile device (not shown) connected to the wireless network  or a different wireless network, or from a different computing device, or other device capable of sending messages, via the shared network infrastructure , possibly through an application service provider (ASP) or Internet service provider (ISP), for example.","The message server  typically acts as the primary interface for the exchange of messages, particularly e-mail messages, within the organization and over the shared network infrastructure . Each user in the organization that has been set up to send and receive messages is typically associated with a user account managed by the message server . Some exemplary implementations of the message server  include a Microsoft Exchange\u2122 server, a Lotus Domino\u2122 server, a Novell Groupwise\u2122 server, or another suitable mail server installed in a corporate environment. In some implementations, the host system  can comprise multiple message servers . The message server  can also be adapted to provide additional functions beyond message management, including the management of data associated with calendars and task lists, for example.","When messages are received by the message server , they are typically stored in a data store associated with the message server . In at least some embodiments, the data store can be a separate hardware unit, such as data store , with which the message server  communicates. Messages can be subsequently retrieved and delivered to users by accessing the message server . For instance, an e-mail client application operating on a user's computer can request the e-mail messages associated with that user's account stored on the data store associated with the message server . These messages are then retrieved from the data store and stored locally on the computer . The data store associated with the message server  can store copies of each message that is locally stored on the communication device . Alternatively, the data store associated with the message server  can store all of the messages for the user of the communication device  and only a smaller number of messages can be stored on the communication device  to conserve memory. For instance, the most recent messages (i.e. those received in the past two to three months for example) can be stored on the communication device .","When operating the communication device , the user may wish to have e-mail messages retrieved for delivery to the communication device . The message application  operating on the communication device  can also request messages associated with the user's account from the message server . The message application  can be configured (either by the user or by an administrator, possibly in accordance with an organization's IT policy) to make this request at the direction of the user, at some pre-defined time interval, or upon the occurrence of some pre-defined event. In some implementations, the communication device  is assigned its own e-mail address, and messages addressed specifically to the communication device  are automatically redirected to the communication device  as they are received by the message server .","The message management server  can be used to specifically provide support for the management of messages, such as e-mail messages, that are to be handled by mobile devices. Generally, while messages are still stored on the message server , the message management server  can be used to control when, if, and how messages are sent to the communication device . The message management server  also facilitates the handling of messages composed on the communication device , which are sent to the message server  for subsequent delivery.","For example, the message management server  can monitor the user's \u201cmailbox\u201d (e.g. the message store associated with the user's account on the message server ) for new e-mail messages, and apply user-definable filters to new messages to determine if and how the messages are relayed to the user's communication device . The message management server  can also, through an encoder (not shown) associated therewith, compress message data, using any suitable compression\/decompression technology (e.g. YK compression, JPEG, MPEG-x, H.26x, and other known techniques) and encrypt messages (e.g. using an encryption technique such as Data Encryption Standard (DES), Triple DES, or Advanced Encryption Standard (AES)), and push them to the communication device  via the shared network infrastructure  and the wireless network . The message management server  can also receive messages composed on the communication device  (e.g. encrypted using Triple DES), decrypt and decompress the composed messages, re-format the composed messages if desired so that they will appear to have originated from the user's computer , and re-route the composed messages to the message server  for delivery.","Certain properties or restrictions associated with messages that are to be sent from and\/or received by the communication device  can be defined (e.g. by an administrator in accordance with IT policy) and enforced by the message management server . These may include whether the communication device  can receive encrypted and\/or signed messages, minimum encryption key sizes, whether outgoing messages must be encrypted and\/or signed, and whether copies of all secure messages sent from the communication device  are to be sent to a pre-defined copy address, for example.","The message management server  can also be adapted to provide other control functions, such as only pushing certain message information or pre-defined portions (e.g. \u201cblocks\u201d) of a message stored on the message server  to the communication device . For example, in some cases, when a message is initially retrieved by the communication device  from the message server , the message management server  can push only the first part of a message to the communication device , with the part being of a pre-defined size (e.g. 2 KB). The user can then request that more of the message be delivered in similar-sized blocks by the message management server  to the communication device , possibly up to a maximum pre-defined message size. Accordingly, the message management server  facilitates better control over the type of data and the amount of data that is communicated to the communication device , and can help to minimize potential waste of bandwidth or other resources.","The mobile data server  encompasses any other server that stores information that is relevant to the corporation. The mobile data server  can include, but is not limited to, databases, online data document repositories, customer relationship management (CRM) systems, or enterprise resource planning (ERP) applications. The mobile data server  can also connect to the Internet or other public network, through HTTP server  or other suitable web server such as an File Transfer Protocol (FTP) server, to retrieve HTTP webpages and other data. Requests for webpages are typically routed through mobile data server  and then to HTTP server , through suitable firewalls and other protective mechanisms. The web server then retrieves the webpage over the Internet, and returns it to mobile data server . As described above in relation to message management server , mobile data server  is typically provided, or associated, with an encoder  that permits retrieved data, such as retrieved webpages, to be decompressed and compressed, using any suitable compression technology (e.g. YK compression, JPEG, MPEG-x, H.26x and other known techniques), and encrypted (e.g. using an encryption technique such as DES, Triple DES, or AES), and then pushed to the communication device  via the shared network infrastructure  and the wireless network . While encoder  is only shown for mobile data server , it will be appreciated that each of message server , message management server , and HTTP servers  and  can also have an encoder associated therewith.","The contact server  can provide information for a list of contacts for the user in a similar fashion as the address book on the communication device . Accordingly, for a given contact, the contact server  can include the name, phone number, work address and e-mail address of the contact, among other information. The contact server  can also provide a global address list that contains the contact information for all of the contacts associated with the host system .","It will be understood by persons skilled in the art that the message management server , the mobile data server , the HTTP server , the contact server , the device manager module , the data store  and the IT policy server  do not need to be implemented on separate physical servers within the host system . For example, some or all of the functions associated with the message management server  can be integrated with the message server , or some other server in the host system . Alternatively, the host system  can comprise multiple message management servers , particularly in variant implementations where a large number of mobile devices need to be supported.","The device manager module  provides an IT administrator with a graphical user interface with which the IT administrator interacts to configure various settings for the communication devices . As mentioned, the IT administrator can use IT policy rules to define behaviors of certain applications on the communication device  that are permitted such as phone, web browser or Instant Messenger use. The IT policy rules can also be used to set specific values for configuration settings that an organization requires on the communication devices  such as auto signature text, WLAN\/VoIP\/VPN configuration, security requirements (e.g. encryption algorithms, password rules, etc.), specifying themes or applications that are allowed to run on the communication device , and the like.","A typical phishing attack is characterized by an attempt to fool a user into disclosing confidential information, such as login credentials, to the attacker. In a common scenario, a user may be registered with an online service, such as a financial institution's online banking service. The service may require the user to supply both a userid (in the case of a banking service, the userid may be a bank card number) and a password. To access the service, the user invokes a client browser application, which requests the online service's login page. When the login page is displayed in the client browser, the user enters the userid and password in form fields within the login page and actuates a \u201csubmit\u201d function, and these credentials are then transmitted to the web server of the online service. The online service then verifies the received data to authenticate the user. If the data is authenticated, then access to online service functions is granted to the client browser.","An attacker may subvert this process by interposing its own communications to the user. The attacker may set up a fraudulent website with a domain name similar to the legitimate online service's domain name. For example the legitimate domain name may be \u201conlinebanking.com\u201d, whereas the attacker's domain name may comprise a common typographic error or a different alphanumeric character that is similar in appearance to a character in the legitimate domain name, such as \u201conlinbanking.com\u201d or \u201conlinebanking.com\u201d. Webpages on the attacker's site may mimic the content of the legitimate site's webpages, by replicating logos and copy, and other elements from the legitimate webpages. But for the different Uniform Resource Indicator (URI) associated with them, the attacker's webpages may appear to the user to be the legitimate pages. The attacker would then set up a webpage to mimic the legitimate login page, so that users who submitted their userids and passwords via the attacker's login page would actually provide their credentials to the attacker rather than the legitimate service. The attacker could then use those credentials itself to gain access to the legitimate service in the user's name, and make use of the services for its own gain and\/or to harm the user. For example, if the online service is a banking service, the attacker could then log into the online service with the user's credentials, and transfer funds out of the user's account and into an account associated with the attacker.","While the attacker may rely on chance to capitalize on a user's typographical error in typing in an address in the client browser's address bar, attackers may sent fraudulent communications to the user to attract the user to the fraudulent website. A common device is a phishing e-mail, ostensibly sent in the name of the legitimate service, advising the user that it is necessary to follow a hyperlink provided in the e-mail to log into a website to verify information. The hyperlink is, of course, a link to the fraudulent website. Thus, the attacker generally relies on deceiving the user regarding the source of the e-mail and the legitimacy of the website to gain access to the user's credentials. Unsophisticated users may not notice the difference between the URIs of the attacker's webpages and the URIs of the legitimate service's webpages, and may not realize that a website is fraudulent.","The information sought by the attacker need not be limited to credentials such as userids, passwords and account numbers; the information can be other types of confidential or quasi-confidential information typically used by the user to establish his or her identity to others, including personal habits, mother's maiden name, and the like.","Countermeasures against phishing attacks may be implemented at a number of stages of the process. A countermeasure may involve prevention\u2014preventing potential phishing communications from reaching the user at all. One such countermeasure is the implementation of a \u201cblacklist\u201d, which identifies suspected phishing attackers (for example, by IP address or domain name). The blacklist is provided to the client browser or another network element between the user and the attacker, such as a firewall at the periphery of the user's home network. Communications from blacklisted sources are then blocked by the client browser or firewall, or else if such communications are allowed through, a warning may be displayed to the user to warn that the source of the communication may be malicious. Conversely, a \u201cwhitelist\u201d can be established to expressly list those IP addresses, domain names, or uniform resource indicators that have been determined to be safe or authentic. The client's browser is permitted to communicate only with those sources identified in the whitelist. Another prevention countermeasure is the filtering of e-mails and other messages that are suspected of being fraudulent before they are viewed by the user. Blacklists, whitelists and filters, however, generally require updating to keep up with new phishing activities.","Another type of countermeasure alerts the user after the fact regarding transactions carried out with the user's online account. After a transaction, such as a bank transaction, is carried out online using the user's credentials, a message is sent out-of-band to the user confirming that the transaction had taken place. The out-of-band message is sent over a different channel than the online communications channel used to carry out the transaction, or using a different user contact address than that associated with the online account, to minimize the risk that the attacker will have gained control of the out-of-band communications. For example, after a funds transfer is carried out, the financial institution may transmit an SMS message to the user confirming the transfer. If the user reviews the SMS message and realizes that he or she did not order that transfer, the user can then take steps to have the transaction reversed. However, this countermeasure takes place after the fraudulent activity has occurred, requires the existence of a second communication mechanism or contact address, and is actually remedial in nature, as it requires the user to review the confirmation message after the event and take action should it be determined that the transaction was unauthorized. This countermeasure also fails to address the circumstance where the user intended to effect a transaction, but was misled into carrying out the transaction via a fraudulent website; in that case, no confirmation message will be received by the user.","Other countermeasures are addressed to the authentication communications that take place between a user's client browser and the online service. The user authentication process can be enhanced with additional mechanisms to verify that the correct parties\u2014user and online service\u2014are communicating with each other. For example, one countermeasure makes use of two-factor authentication, in which the user carries a separate hardware token configured to generate one-time use access codes, for example based on a seed value or a nonce. When the user wishes to access the online service, the one-time use access code is input with a userid. The algorithm for generating the codes is synchronized with an algorithm implemented in the online system, so the online service can determine whether the received access code is correct. Because the one-time code requires possession of a hardware token, there is increased assurance that the party seeking access to the online system is the legitimate user, and not an attacker.","As another example, a multiple login process or a process making use of added personal entropy may be implemented. Not only may the user be required to select or be assigned a userid and a password, but the user may also be required to select or define further information that is not necessarily unique, but is personal to that user. This further information is provided to the online service. The next time the user attempts to log in with the userid and password, the online service will verify the userid and password, then query the user concerning the further personal information. If the user answers correctly or confirms the personal information, then the user and the online service are provided with some assurance that the legitimate online service and legitimate user have been contacted.","For example, the user may be required to answer one or more security questions, which may or may not be predefined questions, with information that is known personally by the user (e.g., \u201cwhat is your pet's name?\u201d). When the user subsequently attempts to log in, the online service may verify the userid and password, then respond with a further query based on one of the security questions. The user must answer the question correctly to proceed. In some embodiments, the user is also required to register their primary computer or primary communication device with the service. If the user attempts to log in from the primary computer, the online service may grant access to its services once the userid and password have been verified. If the user attempts to log in from a different device, then the online service may pose one or more of the security questions to obtain a correct response before granting access.","In a variant, at the time of registration with an online service the user may define special information (such as a picture or a passphrase) to be stored by the online service and displayed to the user by the online service when the user attempts to log in. When the user subsequently attempts to log in, partway through the authentication process the online service retrieves and provides the special information to the user for confirmation. If the user is satisfied that the special information is correct, then the user proceeds with the balance of the authentication process.","These countermeasures directed to the authentication process function as phishing countermeasures for the most part because they are capable of confirming that the correct user, and not an attacker, has accessed the online service with the user's credentials. However, it is still possible that an attacker may have already obtained the user's credentials. Further, these countermeasures are still vulnerable to man-in-the-middle or eavesdropping attack.",{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 5","FIG. 5"],"b":["500","505","510","515","520"]},"Subsequently, the user may wish to log into the online service to transact business. At , the online service receives a request for a login page. This request may be received from the user's client browser. At , the online service responds by transmitting the page requested, which may request the user enter a userid in a form field in the page. At , the user's device  receives the userid input by the user, which may be input into the form field, and at  the userid is transmitted to the online service.","Next, the online service uses the received userid to retrieve the user-selected identifier at . This user-selected identifier is then presented to the user for confirmation at , for example by transmitting it as an object in a further webpage to be rendered in the client browser. The user, having received the identifier included in the further webpage, may then determine at  whether the identifier is the correct one. If it is not, then the source of the further webpage may be fraudulent; the user thus may be alerted to the potential phishing attempt and may know to cease providing information to this online service until its legitimacy has been confirmed. If the identifier is the correct one, then at  the client device  receives the password from the user, and transmits the password to the online service, which then completes the authentication of the user.","The foregoing process provides for a form of confirmation by the user that the correct online service has been accessed, based on the premise that only the legitimate online service should know which image the user had selected. Similarly, the online service may be said to have confirmed that the legitimate user supplied the userid and password, since presumably only the legitimate user should know which image was selected. This process remains vulnerable, though, because an attacker may interpose itself between the user and the online service after the initial account setup phase had been completed. As described above, the user may be subsequently misdirected to the attacker's website, which may mimic the online service's login page requesting the user's userid at . At , then, the client device  may transmit the userid to the fraudulent website. The attacker may then use the userid to complete the communication with the legitimate online service between steps  and  by commencing the login procedure at the legitimate online service with the user's userid. The online service, having received the userid, would then retrieve the user-selected identifier and provide it to the attacker. The attacker in turn may then present the identifier to the client device , where the user may confirm its accuracy at , and cause the password to be transmitted at  to the attacker. Thus, the attacker may still obtain the user's credentials, as well as gain knowledge of the user's selected identifier.","The particular vulnerability described above is due to the fact that communications between the client device and the online service may be intercepted, and completion of the authentication process requires the online service's server  and the client device  to exchange user-specific data\u2014not only the userid and password, but also the user-selected identifier. Additional security steps may be taken to discourage interception; for example, communications between the server  and client device  may take place in an encrypted session, for example using cookies, or over an encrypted channel, for example using the Transport Layer Security defined in RFC 5246, published by the Internet Engineering Task Force, or using its predecessor Secure Socket Layer protocol. While such encryption mechanisms may be employed for particularly sensitive transactions, such as the financial transactions mentioned above, not every online transaction will make use of encryption protocols to protect communications between the server and client. The use of encryption typically requires that at least one of the server or the client be in possession of a digital certificate, and thus adds to the general overhead cost of communications since the certificate is usually checked to ensure its validity and provenance, and since every communication is thereafter encrypted. Even if a required certificate is not available or is expired, the user of the client device  may not appreciate the significance of the missing or invalid certificate.","Therefore, in a further embodiment, a process is implemented in which a user-selected identifier, or verification file, is used to assist in the verification of the legitimacy of an online service's website, but the verification file is not transmitted between the server  and the client device . An overview of this process is illustrated in . At an initial stage, at  the server  for the online service receives a request for a webpage or other resource from the client device . The server transmits the resource in response to the request at . The resource may be an initial account setup webpage, a login page, or any other resource served from the online service's server . At , the client device  receives the resource, renders and displays it using a client browser or other viewing application in a display at the client device .","In this embodiment, the resource received from the server  may be configured to include a script for generating and storing verification data in a verification file at the client device , obtaining a verification file already stored at the client device , or both. For example, if the resource is a webpage, the webpage may contain a javascript or other script to be executed automatically when the webpage is rendered in a client browser application. At , the script is executed locally at the client device , optionally with input received from the user of the client device , thus causing new verification data to be generated and presented to the user, or alternatively identifying verification data already available at the client device . The verification data is then stored as a verification file locally in memory at the client device  in association with information regarding the origin of the resource, such as its URI or a portion thereof. Subsequently, the local storage or the client browser or viewer may be configured to restrict access to the verification file only to requestors or processes identified as originating from the same originating host as the script or resource that was received from the server  at .","When the online service's website is again accessed from the client device , a request for a resource, such as a login page, is received at the server  at step . At , the server  transmits the resource to the client device . At , the client device  receives the resource. While the resource received at the client device  at  from the server  can be identical to the resource originally received at , in some embodiments the format or content of the subsequent resource received at  may be altered from the format or content of the original resource received at . In the case of a webpage, different objects may be embedded in the subsequently received webpage, or its layout may be altered. For example, the server  may transmit differently formatted versions of the same resource (such as a webpage) according to the display capabilities, configuration, or type of browser or viewer application executing on the client device. The request for the resource transmitted from the client device  can include an identifier of the format type required, or of the client device or browser type. In addition or alternatively, the resource may be embedded or configured to include custom or dynamically inserted information; accordingly, the subsequently received resource may differ from the originally received resource. Notwithstanding these possible differences, however, the resource is configured to also retrieve a verification file previously stored at the client device , for example by including a script for retrieving the verification file. If a script is included in the resource, at  a determination is made whether the script has adequate permission to execute and to access the local storage at the client device . As noted above, the local storage in which the verification file is stored may restrict access to the verification file to only those processes that originated from the same source as the original webpage or resource at . If the script is not permitted to execute or to access the verification file, the cause may be that the origin of the script or the resource received at  is not from the originating source server . Accordingly, the resource received at  may be identified as potentially fraudulent at  because the verification file is not retrievable. The identification of the resource as potentially fraudulent may be made upon determination that the verification file, or data comprised in the verification file, has not been rendered for display on the device . Optionally, if retrieval or display fails, a warning may be displayed to the user that the legitimacy or authenticity of the resource being displayed is doubtful.","If the resource or its script is permitted to execute and access the local storage, then at  an attempt is made to retrieve the verification file from the local storage, and to present the verification file for the user's review. If the resource is a webpage served from a server  that is rendered and presented using a client browser application at the client device , the retrieved verification file may be rendered and presented either within the webpage currently being displayed, or alternatively in a separate window in the client device display . The data that is presented need not be the verification file itself; for example, the data stored in the verification file may be used to generate a further representation, such as an image, text string, sound, and the like, which is then presented via an output interface at the device . At  a determination is made whether the correct verification file, or data comprised therein, has been retrieved and presented. This determination may be made visually by the user, although the determination may be made by other means, as discussed below. In an alternate method, the resource contains a direct link or reference to the stored verification file, and upon receipt at the client device , it is rendered with any referenced objects, and the browser or other application attempts to retrieve the verification file without actual execution of a script so that the verification data can be rendered for presentation at the device. This is reflected by the dashed arrow shown in .","If it is determined that the correct verification file has been displayed, for example as a result of visual verification by the user determining that the verification data as rendered matches an expected rendering based on a previous viewing of the verification data, then the resource may be deemed authenticated, and at  the client device  may receive the user's credentials, which are then transmitted to the server  for authentication at . If, however, the user finds that the verification file displayed is not or does not appear to be the same as the verification file generated previously, then the user is alerted to the possibility that the resource delivered at  is potentially fraudulent .",{"@attributes":{"id":"p-0095","num":"0094"},"figref":["FIGS. 7 and 8","FIG. 6","FIG. 7"],"b":["1000","100","700","100","710","720","610","615","700","730","700","100","730","100","1000","730","100","1000","100","100","100","1000","810","820"]},"In this embodiment, an option to regenerate the visual hash image  may be provided. Actuation of the \u201cgenerate\u201d button  by the user may cause the script to re-execute and generate a new visual hash image . The user may thus repeatedly generate new visual hash images  until an appropriate image, that the user considers to be easy to memorize, is displayed. Once a particular visual hash image  has been settled on, the image may be saved to the local storage. In this embodiment, a \u201csave\u201d button  is provided, and actuation of this button may cause the script to save the currently displayed visual hash image  to local storage. The \u201ctoggle\u201d button  may be actuated to invoke a function to switch the appearance of the visual hash image  between a line, as shown in , and a filled-in shape, as shown in .","Once the visual hash image  has been generated and saved, in a subsequent \u201cvisit\u201d to the online service, a visual hash image is used to assist the user in verifying the authenticity of the resources delivered to the client device . The webpage of  is an example of a resource that may be delivered to the client device  in accordance with step  of . The webpage may again be a login page, with fields ,  for inputting user credentials such as card number and password, as in . In addition to these fields, the webpage may include a script for retrieving a verification file from the local storage of the client device . As explained above, the local storage and\/or the client browsing application at the client device  may be configured to only permit access to the verification file to those resources and scripts originating from the same source or host as the resource or script that caused the verification file to be stored in the local storage initially. Thus, in this case, since the origin of the webpage and its script is the same as the origin of the webpage , the script from the webpage may be granted permission to access the local storage and retrieve the verification file stored there, which in this case is the image . The image  is then displayed in the webpage . To increase the probability that the user will see and inspect the image , it may be displayed proximate to the password field  or to the \u201csubmit\u201d button or other user interface element used to initiate an instruction to transmit the input user credentials to the server . The user can then inspect the image , and if the image matches the image that the user had previously selected, then the user is provided with some assurance that the origin of the webpage is authentic or legitimate, since it matches the origin of the previously accessed webpage .","In this example, the webpage provides an option for regenerating or redefining the verification data. Actuation of the \u201crenew\u201d button  may invoke a script included in the webpage for generating a new visual hash image, as described above.","Thus, the process illustrated in  provides a means for a user to verify that the webpages or other resource subsequently received at the client device  from an online service are in fact from the original source for which the verification file was originally generated and saved, as only the scripts or resources from that original source are permitted to access the local storage to obtain the verification file. If an attacker constructed a website spoofing the legitimate online service's website, the attacker may replicate the webpages and other resources from the legitimate server . These replicated resources could include the scripts contained in the legitimate pages from the server ; however, even if the scripts were the same, they would not be granted access to the local storage at the client device  to retrieve and display the image .  provides an example of a webpage received from an attacker's server and which may be rendered and displayed at a client device . In this example, even though the attacker's resource may have included a script intended to access the local storage at the client device  and retrieve the verification file, access to the verification file stored in association with the authentic online source was denied because the source of the attacker's server is not the same as the source of the original resource . Accordingly, in this example an empty box or an error message  is displayed in the webpage , thus signifying to the user that the webpage may not be legitimate, i.e. that it may be a phishing attempt. Although the attacker may also provide a spoofed verification file for rendering and display in the webpage , the verification data displayed to the user would likely be different than the data that the user had previously selected and memorized, as the attacker would not have had access to the correct verification data stored at the client device .",{"@attributes":{"id":"p-0100","num":"0099"},"figref":["FIGS. 9A and 9B","FIG. 9A","FIG. 9A"],"b":["100","900","110","100","900","910","920","900","100","930","940","1000"],"i":["a ","a ","a ","a"]},"If the user makes use of a navigation input system such as a trackpad, trackball, scroll wheel, or the like to select the various user interface elements in the graphical user interface for input or for actuation, it is likely that the user will be able to see focus move (for example, though visual highlighting or outlining) from the elements ,  to the submit button  in response to a scroll command invoked using the navigation input system. This may increase the likelihood that the user's attention will be drawn to the graphic . The graphic itself could be rendered in the graphical user interface so that it, too, is capable of gaining focus. Thus, as focus moves downward from the elements , , it will move first to the graphic and thence to the submit button , potentially further increasing the likelihood that the user's attention will be drawn to the graphic .","In the foregoing examples, the verification data has been rendered for display in the same view or screen as the fields or elements intended to receive the inputted user credentials or other sensitive or private information. In an alternative embodiment, the verification data may be presented to the user in advance of the screen or view at which the user credentials are input. Turning to , when data from the server  is initially provided, a first resource configured to retrieve the verification file from local storage is provided, but without any input fields for receiving user credentials, as shown in the graphical user interface . The user's attention is thus drawn to the rendering of the verification data from the verification file, illustrated in  by the graphic , as it becomes a central object or perhaps the main object displayed to the user. In this embodiment, before any transaction with the server  can be commenced, the user must select one of the user interface elements  or  to initiate a response to be transmitted to the server  to indicate whether the verification data displayed is correct. If it is confirmed that the verification data is correct, then the user can proceed to submit credentials. This may involve the server  transmitting a new resource to the client device  for receiving the user-inputted credentials upon receipt of the response indicating the verification data is correct. It should be noted that in the example of , the step of confirming the authenticity of the verification data is disassociated from the input of user credentials, since a separate resource must be delivered to the client device  in response to the confirmation response.","Although the embodiments above were described generally in the context of a login page for an online service, such as a financial institution's online banking website, it will be appreciated by those skilled in the art that the processes above may be implemented in connection with other services, including e-commerce, social networking, and productivity services and websites. Further, the first and second resource retrieved need not necessarily comprise the same content. For example, the first resource may be provided by an online payment service to permit users to define and store their verification files, which will be accessible by resources originating from the online payment service and rendered at the client device . The online payment service may permit registered users to transfer funds between them, and may offer shopping cart modules for use third party online vendors.","Subsequently, the user, while perusing a third-party website implementing the online payment service's shopping cart module, can initiate a purchase from the third party. In response to a request transmitted from the user's client browser or other application, a second, subsequent resource may be received from the online payment service, such as a \u201ccheckout\u201d page for completing the purchase. The checkout page can include fields and other user interface elements for the user to enter and submit sensitive financial information, such as credit card numbers, userids, passwords, and card verification numbers of personal identification numbers. This subsequent resource can include a script or other executable instructions for retrieving the verification file from the client device 's local storage, and rendering data from the verification file for display in a user interface. Since the subsequent resource is received from the same source as the online payment service used by the user to define the verification file, permission should be granted to access the verification file from the local storage. The accuracy of the verification data may then be visually confirmed by the user prior to completing the checkout procedure by submitting the financial information. Thus, the verification file previously set by the user in association with the online payment service,",{"@attributes":{"id":"p-0105","num":"0104"},"figref":["FIGS. 10A and 10B","FIG. 10A","FIGS. 10A and 10B","FIG. 10A"],"b":["1005","100","1500","1010","1020","1500","1500"],"i":"a "},"If the retailer collects the user's payment details directly from the user, the subsequent page may be served from the retailer's web server . However, the retailer may instead make use of a merchant service that permits customers to make online payments without requiring the customers to provide his or her financial information directly to the retailer. In that case, the subsequent page received at the client device  may be transmitted from the online payment server  rendered as shown in the interface in . The graphical user interface here includes elements such as text input fields , ,  for entry of customer account information for the online payment service. The account information can include an account identifier such as account or customer name, a userid, or the like, and additionally or alternatively an account number, as well as some form of authentication data such as a password, or a verification code or personal identification number (such as a card verification value or security code).","Similarly to , the subsequent page delivered to the client device  is also configured to initiate an attempt at retrieving the verification file from the local storage at the device , if the verification file is available; or else alternatively the subsequent page may permit the user to set or reset the verification data as described above. Again, as with , the retrieved verification data is rendered and displayed at , proximate to the user input fields , ,  or the \u201csubmit\u201d button  or other user interface element for initiating submission of the customer account information to the server , to increase the likelihood that the user will note its appearance. If no verification data is displayed, or if the representation displayed at  is determined to be incorrect, the user can cancel the transaction by actuating the \u201ccancel\u201d user interface element , which can transmit a response to either the online payment server  or the web server  indicating that the transaction has been aborted. Further, the resource may be rendered in the user interface such that the \u201csubmit\u201d button  is disabled (i.e., incapable of gaining focus and\/or being actuated in the user interface) until the user expressly checks a checkbox  or another user interface element to indicate that the rendered verification data  is recognized as correct or legitimate.","If the user-entered account information is submitted to the server , the payment may then be processed by the online payment service. Upon confirmation of completion of payment or approval of the payment at the online payment service, the server  may transmit a payment notification to the retailer's web server . The client device's browser may also be redirected back to the retailer's website. In this embodiment, the user may make use of the verification data previously established for the online payment service to verify the likely authenticity of the source of the payment page displayed in the user interface . In this way, there is no need for the user to commit to memory different verification information for each retailer website or other service accessed by the client device , provided each of these services makes use of the payment submission process described above.","Communication flow in the above embodiment is illustrated in . In response to a request  received from the client device , the retailer server  transmits a checkout webpage , as described above, to the client device . The checkout page can include an option to select a payment method, and in particular to select an online payment service offered via the server . Once this selection has been made, the client device  transmits to the server  a request  indicating that the online payment service has been selected. This request  can include purchase details such as item description, dollar amount, merchant identifier, order number, and other purchase information that may facilitate the transaction. In response to this request, the server  transmits a payment form  to be rendered at the client device  for user submission of payment details, such as a credit or debit card number, other account identifier, and password or other authentication code, and the like. This payment form , as described above, includes the code or script which, when executed at the client device , attempts to retrieve a verification file from local storage associated with the origin of the payment form , i.e., the server , for rendering and display of verification data at the client device . If the verification data is confirmed by the user, the user may then input payment details, which are then transmitted in a response  to the server . After receipt of the payment details, the server  may then process the payment, and provide an approval message  to the retailer server  confirming the payment has been made. The retailer server  may then transmit a confirmation message  (for example, a webpage confirming order details) to the client device .","The foregoing communication flow, as illustrated, omits other possible steps. For example, additional messages may be transmitted between the servers ,  and the client device  during the course of the transaction. Further, not every message illustrated in  need be transmitted using the same protocols or channels. For example, the communications between the client device  and the retailer server  or the server  may be carried out using HTTP while the approval message  and other messages passed between the servers ,  are transmitted using another protocol.","The foregoing embodiments were described in the context of two separate resources (such as webpages  and ) transmitted to the client device , each resource comprising a separate script for either generating and saving, or retrieving and displaying, a verification file. These tasks may be merged in a single script or process. Turning to , an overview of a merged process is shown. At , the server  receives a request for a resource, such as a login webpage. At  the requested resource is transmitted to the client device , and at  the resource is received at the client device . The resource may comprise executable instructions or a script to determine first whether the resource is being displayed in a frame or iframe, or is being displayed in a mode that may be indicative of an attempt to \u201cclickjack\u201d the resource, in which user actions on elements in the resource (such as clicking buttons or entering data) are actually directed towards the attacker's own webpage, which may be displayed invisibly over the legitimate resource. The resource may then determine whether a verification file exists in local storage at the client device  at . If no verification file exists, then at  the process may generate new verification data and store in the local storage a new verification file comprising the verification data. The process may then move to , where user credentials are obtained and transmitted over a network to the server  for authentication at .","If at  it is determined that a verification file exists, then at  the verification file is retrieved and the data comprised in the file is rendered and displayed. At , a determination is made whether the verification file as presented at the device is the correct verification file. If the verification file is correct, then at  user credentials may be received by the client device  and then transmitted to the server  for authentication at .","Thus, following the process of , a first resource is accessed and a verification file is generated and stored. Subsequently, a second resource is accessed. If the second resource originates from the same source as the first resource accessed, then the second resource may be presumed to be legitimate. The first and second resources may be determined to originate from the same source through the use of the verification file; because it is accessible only to those resources originating from the same source, it follows that if the second resource is capable of retrieving and displaying the correct verification file to the user in a manner such that the resource is displayed as expected by the user, the second resource must have originated from the same source as the first resource. This solution does not require that the verification file be transmitted between the server  and the client device , thus reducing a potential vulnerability to man-in-the-middle attacks.","The foregoing processes may be implemented using any suitable communication technologies and protocols. The processes of generating, storing, and retrieving the verification file may be carried out using any suitable programming language and libraries. As mentioned above, access to the verification files stored in local storage at the client device  may be restricted only to processes and resources that originate from the same source as the process or resource associated with the original generation of the verification file. A schematic diagram of the data that may be stored in the local storage is shown in . Local storage , which may be resident in persistent memory at the client device , may comprise one or more sets of data , , , each of which may be associated with a particular source or origin (indicated in  with the URIs such as \u201chttp:\/\/example1.com\u201d). Each data set may comprise a key value , ,  such as \u201cvisualHashstore\u201d, and a corresponding value , ,  which may comprise the data object itself (i.e., the verification file), or a pointer to the verification file elsewhere in memory at the client device . Access to a data set , ,  may be restricted only to those processes or resources originating from the same origin as that associated with the data set. Thus, a webpage running a script received from http:\/\/example2.com may not access the data set stored in association with http:\/\/example1.com. In some embodiments, access to a data set may be restricted not only by origin (i.e., by hostname, such as \u201cexample1.com\u201d), but also by port (e.g. verification files set by resources originating from http:\/\/example1.com may not be accessed by resources originating from https:\/\/example1.com). However, resources originating from a host within a related subdomain may be granted access to the same verification files (e.g. verification files set by resources originating from http:\/\/example1.com may be accessed by resources originating from http:\/\/example1.com\/services). Further, although only a single key-value pair is illustrated in the data sets , , , a data set may comprise further verification files for different resources originating from the same source. It will be appreciated by those skilled in the art that the representation of the data sets in  in tabular format are not intended to be limiting; the data comprised in the data sets , ,  may be stored in any other suitable format in the memory of the client device . In some embodiments, for example, no key value may be stored if the only file stored in association with a given origin is the verification file.","While these processes may be implemented using applets embedded in the resources delivered by the server , in some embodiments these processes may be implemented using the DOM Storage features provided in the HTML5 specification, and in particular the localStorage attribute, which provides for the persistent storage of multiple data objects in association with a given origin. Unlike cookies, data stored as a localStorage object may be persisted across multiple browser sessions. The lifetime of the localStorage object may be unlimited, although the client browser may delete the contents of the local storage upon a received user command, or may automatically set the contents to expire after a predetermined time. Thus, the client device  would be provided with a client browser application implementing the Storage application programming interface specified in the HTML5 Web Storage draft specification. Use of the localStorage attribute will then restrict access to the localStorage object stored at the client device  to only those scripts and resources with an effective origin that is the same as the origin of the resource that caused the data to be stored in the localStorage object.","The verification file, when generated and stored as described above, is limited to a single client device . If the user moves to a different client device and attempts to access the same online service, the verification file will not be present, and the process of  will initiate the generation and storage of a new, different verification file at the new client device. Thus, in a further embodiment, the client device  may be configured to synchronize its data stores, including any data in the local storage , with another client device. This synchronization may occur either directly between the two client devices, or alternatively through synchronization of the first client device  with a server or other synchronization device, such as a personal computer, and subsequent synchronization of the second client device with the server or other synchronization device.","An image file may be selected as the verification file, since login pages and other resources are generally displayed to a user in a graphical user interface, and visual inspection of an image may be carried out faster than inspection of a detailed block of text or other types of files. However, the verification file may be any type of suitable data that is capable of being presented to and perceived by the user at the client device , and in particular, capable of being perceived by the user in association with, or in proximity to, a password entry field, or some other interface element or subsystem used to collect confidential information from the user. For example, the verification file may comprise a text phrase, an image, a music or sound clip, or a movie or animation clip, which may be played back or displayed to the user at around the same time as the user is requested to supply his or her credentials for transmission to the server . The verification file that is stored in the local storage at  may be a file that is already present on the client device ; for example, an interface in the resource displayed to the user at step  of  may provide a file selection tool for the user to locate, optionally preview, and select a pre-existing file stored in the memory of the client device  as the verification file. The verification file may comprise a string of text, such as a memorable sentence or verse, which the user selects or inputs. This process is illustrated in , where at  the client device  receives an identification of a user-selected file, or receives an input from the user comprising data to be stored in the verification file, and at  the file or input is stored in the local storage  of .","As illustrated or described above in the embodiments of , A, and A through B, the verification file may comprise a virtual hash image. A virtual hash image is an image generated from a seed value, which may be a random or quasi-random value, and according to any one of a number of suitable algorithms for generating a distinguishable graphic design. Referring to , at  a seed value is obtained. While the seed value may be random or quasi-random, it could optionally be derived using a current timestamp or other inputs (for example, values resulting for digitization of an input signal received via an input subsystem at the device due to the user manipulating the input subsystem). The seed value itself may be used to generate the visual hash, although a hash function could be applied to the seed value at , and the hashed seed value used as input for the visual hash generation. A representation is then derived from the hash for display or presentation to the user at . Optionally, the user can choose to regenerate the hash representation at , and repeat steps  through  until a representation that the user wishes to select is generated. At , the device  receives confirmation from the user that the currently presented representation is to be used (for example, by the user actuating the \u201csave\u201d button  in ). The hash value In , A, A, B and B, and also in , examples of visual hash images , , , , , , , , and  generally resembling a written \u201csignature\u201d shape are shown. The general shape of the visual hash image may assist the user in recalling the image at a later time, as the path traced by the image is somewhat reminiscent of a person's written signature.","The visual hash images illustrated herein are generated from a predetermined number of bytes of random or quasi-random data extracted from the seed value or hashed seed value, to which an algorithm is applied to define tangents and Bezier curves to yield a wavy line. In the example of , a fill command is applied around a midpoint of the line to define a solid shape or sequence of solid shapes. The visual hash image may be displayed against a background comprising grid points  as indicated in . The Bezier curves may be drawn on the background so as to connect select ones of the grid points . Further, the grid points  may be used as in the visual hash computation to assist the user in recognizing the shape represented by the image. Of course, the image may be shown without any background reference points, as in .","The visual hash, thus computed, is then rendered in the display of the client device . If the user is not satisfied with the appearance of the visual hash thus displayed, the user may initiate an instruction to regenerate the visual hash at . If the user is satisfied with the appearance of the representation of the visual hash, then the user may confirm the selection of that visual hash, and the client device  receives that confirmation at . At , the device  then stores either the seed value or hashed seed value, or alternatively the generated image, in the local storage at the device. If the resource comprising the visual hash image element is an HTML document, the image may be rendered using a canvas element when the document is displayed at the device . Thus, the device  need only store the seed value or the hashed seed value in the local storage, as the visual hash representation is regenerated each time the resource is rendered for display at the device . In other embodiments, the representation itself (e.g., the visual hash image) is stored in the local storage.","Using the process described in  above, the user may repeatedly re-seed the algorithm with different quasi-random values to generate an image that the user considers to be sufficiently memorable for use as a verification file. By generating a visual hash at the client device , a quasi-unique image may be generated that is available only to the client device , and which is less likely to be replicated by an attacker. Further, because the visual hash or other verification file is intended to be stored only at the client device , there is no need to share a secret with the server , which may be intercepted; nor is there a need to correlate or coordinate images or values for generating images between the server  and the client device . In addition, because the user is able to re-seed the visual hash (or other representation), and because the verification file thus generated and stored is maintained only locally at the client device , the ability to reset the verification file is within the user's control, and there is no need for the user to contact the operator of the server  to obtain a change of password or identifier.","Other types of images may be generated in a manner similar to a visual hash. For example, geometric patterns may be generated based on random or quasi-random seed values, nonces, or other input values, such as the patterns , ,  shown in , B and , respectively. Similarly, sounds or text passages may be generated using the seed value or hashed seed value as input.","Thus, in accordance with the embodiments described herein, there is provided a client device comprising at least one transceiver configured to receive and transmit data over the network; local storage; and a processor, wherein the processor is configured to: enable receipt, over the network, of a resource comprising instructions for retrieving a verification file, the verification file being previously generated at the client device and stored in the local storage as a result of a process originating from an originating host, wherein access to the verification file is restricted to processes originating from the originating host; execute said instructions for retrieving the verification file; if the received resource is determined to originate from the originating host, enable retrieval of the verification file and rendering of the resource and the verification file thus retrieved for presentation via a user interface, wherein the received resource is determined to be authenticated when the rendering of said verification file corresponds to an expected rendering.","In an aspect of the client device, the resource comprises at least one user interface element for input of credentials, and the processor is further configured to enable transmission of credentials input using said at least one user interface over the network if the received resource is determined to be authenticated.","In another aspect, the resource further comprises at least one user interface element for initiating transmission of said input credentials over the network, and the processor is further configured to enable rendering of the verification file thus retrieved such that it is proximate to said at least one user interface element for initiating transmission.","In still another aspect, verification file comprises a seed value, and the processor is further configured to enable said rendering by generating a visual hash graphic using said seed value.","In yet a further aspect, the processor is further configured to enable display of an indication that the received resource may not be legitimate if the received resource is determined not to originate from the originating host.","The embodiments described herein further provide a method implemented at a client device, the method comprising receiving, over a network, a resource comprising instructions for retrieving a verification file, the verification file being previously generated at the client device and stored in memory local storage at the client device as a result of a process originating from an originating host, wherein access to the verification file is restricted to processes originating from the originating host; executing said instructions for retrieving the verification file; and if the received resource is determined to originate from the originating host, retrieving the verification file and rendering the resource and the verification file thus retrieved for presentation via a user interface, wherein the received resource is determined to be authenticated when the rendering of said verification file corresponds to an expected rendering.","In an aspect of the above method, the resource comprises at least one user interface element for input of credentials, the method further comprising transmitting credentials input using said at least one user interface over the network if the received resource is determined to be authenticated.","In another aspect, the resource further comprises at least one user interface element for initiating transmission of said input credentials over the network, and rendering the verification file thus retrieved comprises rendering the verification file such that it is proximate to said at least one user interface element for initiating transmission.","In yet another aspect, the verification file comprises a seed value, and rendering the verification file thus retrieved comprises generating a visual hash graphic using said seed value.","In a further aspect, if the received resource is determined not to originate from the originating host, the method provides for displaying an indication that the received resource may not be legitimate.","In further aspects of the client device and method, resource comprises a webpage and the originating host comprises a web server; the visual hash graphic resembles a written signature; and\/or the resource comprises instructions executable at the client device for generating verification data for storage in the local storage. In still a further aspect, the instructions for retrieving the verification file are compliant with the HTML5 Web Storage specification, and the verification file is stored in an HTML5 local storage object in the local storage. Further, the client device may be a mobile communication device and the network may be a wireless network.","The systems and methods disclosed herein are presented only by way of example and are not meant to limit the scope of the subject matter described herein. Other variations of the systems and methods described above will be apparent to those in the art and as such are considered to be within the scope of the subject matter described herein. For example, it should be understood that steps and the order of the steps in the processing described herein may be altered, modified and\/or augmented and still achieve the desired outcome.","The systems' and methods' data may be stored in one or more data stores. The data stores can be of many different types of storage devices and programming constructs, such as RAM, ROM, flash memory, programming data structures, programming variables, etc. It is noted that data structures describe formats for use in organizing and storing data in databases, programs, memory, or other computer-readable media for use by a computer program.","Code adapted to provide the systems and methods described above may be provided on many different types of computer-readable media including computer storage mechanisms (e.g., CD-ROM, diskette, RAM, flash memory, computer's hard drive, etc.) that contain instructions for use in execution by a processor to perform the methods' operations and implement the systems described herein.","The computer components, software modules, functions and data structures described herein may be connected directly or indirectly to each other in order to allow the flow of data needed for their operations. It is also noted that a module or processor includes but is not limited to a unit of code that performs a software operation, and can be implemented for example as a subroutine unit of code, or as a software function unit of code, or as an object (as in an object-oriented paradigm), or as an applet, or in a computer script language, or as another type of computer code.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by any one of the patent document or patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyrights whatsoever."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In drawings which illustrate by way of example only embodiments of the present application,",{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 4","FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIGS. 8A and 8B"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIGS. 10A and 10B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 14A and 14B"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIGS. 15A to 15D"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIGS. 16A to 16C"}]},"DETDESC":[{},{}]}
