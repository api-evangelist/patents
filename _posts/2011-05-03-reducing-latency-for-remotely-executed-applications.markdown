---
title: Reducing latency for remotely executed applications
abstract: Disclosed are various embodiments that reduce video encoding latency for remotely executed applications. An application is executed in response to a client request. A video frame generated by the application is obtained before the video frame is sent to an external port of a graphics device. The video frame is encoded into a compressed video stream. The compressed video stream is sent to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384276&OS=09384276&RS=09384276
owner: Amazon Technologies, Inc.
number: 09384276
owner_city: Seattle
owner_country: US
publication_date: 20110503
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","DETAILED DESCRIPTION"],"p":["A graphics device in a computing device typically has one or more external ports to which monitors or other display devices may be physically attached. Keyboard-video-monitor (KVM) extenders and\/or other systems may capture a video signal from the external port of the graphics device, encode the video signal, and send the encoded video signal to another location for rendering on a display device. In such a system, an application executed in one computing device may be viewed by a user at a remotely located device. However, such systems introduce significant encoding latencies.","The present disclosure relates to reducing video encoding latency for applications that are remotely executed over a network. Applications, such as high twitch-action video games and other applications, may be executed in one computing device but controlled by a user at a remotely located computing device. To this end, video, audio, and\/or other data generated by the application may be sent over the network to the remotely located computing device. Input commands for the application may be obtained over the network from the remotely located computing device and provided to the application. The video generated by the application is encoded using a video compression encoding in order to be efficiently and reliably transmitted over the network.","One approach to encoding the video involves a capture device coupled to an external port of a graphics device. Such an approach may introduce significant latency due, at least in part, to buffering in the graphics device and the capture device. Such latency may degrade the user experience in high twitch-action video games and\/or other latency-dependent applications.","By contrast, various embodiments of the present disclosure achieve a latency reduction relative to such an approach by obtaining the video before it is sent to an external port of a graphics device. In some examples, the video may be rendered in software and may be captured before being sent to the graphics device. In other examples, the video may be partially or fully rendered in hardware and may be captured from a back buffer of the graphics device. In some embodiments, the video encoding may introduce up to approximately five milliseconds of latency, or even no latency at all. In the following discussion, a general description of the system and its components is provided, followed by a discussion of the operation of the same.","With reference to , shown is a networked environment  according to various embodiments. The networked environment  includes one or more computing devices  in data communication with one or more clients  by way of a network . The network  includes, for example, the Internet, intranets, extranets, wide area networks (WANs), local area networks (LANs), wired networks, wireless networks, or other suitable networks, etc., or any combination of two or more such networks.","The computing device  may comprise, for example, a server computer or any other system providing computing capability. Alternatively, a plurality of computing devices  may be employed that are arranged, for example, in one or more server banks or computer banks or other arrangements. For example, a plurality of computing devices  together may comprise a cloud computing resource, a grid computing resource, and\/or any other distributed computing arrangement. Such computing devices  may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience, the computing device  is referred to herein in the singular. Even though the computing device  is referred to in the singular, it is understood that a plurality of computing devices  may be employed in the various arrangements as described above.","Various applications and\/or other functionality may be executed in the computing device  according to various embodiments. Also, various data is stored in a data store  that is accessible to the computing device . The data store  may be representative of a plurality of data stores  as can be appreciated. The data stored in the data store , for example, is associated with the operation of the various applications and\/or functional entities described below.","The components executed on the computing device , for example, include a media server application , a plurality of wrappers . . . N, a plurality of applications . . . N, a plurality of video encoders . . . N, and other applications, services, processes, systems, engines, or functionality not discussed in detail herein. The media server application  may correspond to a type of application session server. The media server application  is executed to launch applications , which are executed within the wrappers . The media server application  is also executed to obtain application input data  from the clients  and provide the application input data  to the respective wrapper .","The media server application  is also executed to send application output data  that is captured from the application  to the clients . The media server application  may communicate with the client  over various protocols such as, for example, hypertext transfer protocol (HTTP), simple object access protocol (SOAP), representational state transfer (REST), real-time transport protocol (RTP), real time streaming protocol (RTSP), real time messaging protocol (RTMP), user datagram protocol (UDP), transmission control protocol (TCP), and\/or other protocols for communicating data over the network . The media server application  may be configured to maintain state information  and input queues  associated with the executing applications .","In various embodiments, the media server application  may be configured to generate a user interface using one or more network pages. The network pages may include the streaming video generated by the emulated application . In various embodiments, images of virtual input devices may be rendered in conjunction with the streaming video. For example, a virtual keyboard for the emulated computing device may be included in the network page. Where the emulated computing device is a mobile computing device, an image of the mobile computing device may be included in the network page. The media server application  may facilitate interaction with the image of the mobile computing device in conjunction with the application . Where the emulated computing device corresponds to a mobile computing device with a screen, the video captured from the application  may be surrounded by the image of the mobile computing device, as if the video were shown on the screen of the mobile computing device.","The application  may correspond, for example, to a game or other types of applications. As non-limiting examples, the application  may correspond to a high twitch-action game, a first-person shooter game, an action game, an adventure game, a party game, a role-playing game, a simulation game, a strategy game, a vehicle simulation game, and\/or other types of games. The application  may be originally designed for execution in a general-purpose computing device or in a specialized device such as, for example, a smartphone, a video game console, a handheld game device, an arcade game device, etc. The applications  may also correspond to mobile phone applications, computer-aided design (CAD) applications, computer-aided manufacturing (CAM) applications, photo manipulation applications, video editing applications, office productivity applications, operating systems and associated applications, emulators for operating systems, architectures, and capabilities not present on a consumer device, and other applications and combinations of applications.","The application  may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices, input devices, or other devices. In some cases, the application  may request exclusive access to one or more of the resources, whereby no other applications may have access to the particular resources.","The wrapper  corresponds to an application that provides a hosted environment for execution of the application . In various embodiments, the wrapper  may be configured to provide a virtualized environment for the application  by virtualizing one or more of the resources that the application  expects to access. Such resources may include a keyboard, a mouse, a joystick, a video device, a sound device, a touchscreen, built-in buttons, etc. In this way, the wrapper  is able to provide input commands to the application  as if the wrapper  emulates a keyboard, a mouse, or another type of input device.","Further, the wrapper  is able to obtain a video signal generated by the application  as if the wrapper  emulates a display device, an audio device, or another type of output device. The wrapper  is able to encode the video signal by way of a video encoder  into a media stream. The media stream may include an audio signal generated by the application  as well. To this end, the wrapper  may include various types of video encoders , such as, for example, Moving Pictures Experts Group (MPEG) encoders, H.264 encoders, Flash\u00ae video encoders, etc. Such video encoders  may be selected according to factors such as, for example, data reduction, encoding quality, latency, etc. In some embodiments, the wrappers  may communicate directly with the clients  to obtain the application input data  and to serve up the application output data .","Different types of wrappers  may be provided for different applications  or classes of applications . As non-limiting examples, different wrappers  may be provided for applications  using different application programming interfaces (APIs) such as OpenGL\u00ae, DirectX\u00ae, the Graphics Device Interface (GDI), and so on. Where the application  is configured for execution in a specialized device or another type of computing device, the wrapper  may include an emulation application that emulates the device. In some embodiments, the output of the application  may be captured by the wrapper  at a device level. For example, the application  may be executed in a physical game console, and the video output may be captured by way of a video graphics array (VGA) connection, a high-definition multimedia interface (HDMI) connection, a component video connection, a national television system committee (NTSC) television connection, and\/or other connections.","The state information  that is maintained by the media server application  includes various data relating to application sessions that are currently active. For example, the state information  may track the users that are currently participating in the application session, status information associated with the users, security permissions associated with the application session (e.g., who can or cannot join), and so on. In some embodiments, some or all of the state information  may be discarded when an application session ends. The input queues  collect input commands from the application input data  for a given application . The input commands may be reordered to a correct sequence and delays may be inserted between commands to ensure that they are interpreted correctly when presented to the corresponding application .","The data stored in the data store  includes, for example, applications , video encoders , wrappers , saved state data , user data , and potentially other data. The applications  correspond to a library of different applications that are available to be launched as applications . The applications  may correspond to executable code within the computing device . Alternatively, the applications  may correspond to code that is executable within another type of device but is not executable within the computing device . Such applications  may be referred to as \u201cbinaries,\u201d read-only memory images (ROMs), and other terms. A particular application  may be executed as multiple instances of the applications  for multiple application sessions.","The video encoders  correspond to the various types of video encoders  that may be employed in the computing device . Some video encoders  may correspond to specific formats, such as, for example, H.264, MPEG-4, MPEG-2, and\/or other formats. The wrappers  correspond to the executable code that implements the various types of wrappers . The wrappers  are executable in the computing device  and may be executed as multiple instances of the wrappers  for multiple application sessions.","The saved state data  corresponds to game states that have been saved by the applications . Because the applications  may be executed in a virtualized environment, the applications  may write state information to a virtual location, which is then mapped for storage in the data store  as the saved state data . The saved state data  may correspond to data saved normally by the application  or may correspond to a memory image of the application  that may be resumed at any time. The user data  includes various data related to the users of the applications , such as, for example, types of computing devices associated with a user, security credentials, application preferences, billing information, a listing of other users that are permitted to join application sessions started by the user, and so on.","The client  is representative of a plurality of client devices that may be coupled to the network . The clients  may be geographically diverse. The client  may comprise, for example, a processor-based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer, a laptop computer, personal digital assistants, cellular telephones, smartphones, set-top boxes, music players, web pads, tablet computer systems, game consoles, electronic book readers, or other devices with like capability.","The client  may include a display . The display  may comprise, for example, one or more devices such as cathode ray tubes (CRTs), liquid crystal display (LCD) screens, gas plasma-based flat panel displays, LCD projectors, or other types of display devices, etc. The client  may include one or more input devices . The input devices  may comprise, for example, devices such as keyboards, mice, joysticks, accelerometers, light guns, game controllers, touch pads, touch sticks, push buttons, optical sensors, microphones, webcams, and\/or any other devices that can provide user input. Additionally, various input devices  may incorporate haptic technologies in order to provide feedback to the user.","The client  may be configured to execute various applications such as a client application  and\/or other applications. The client application  is executed to allow a user to launch, join, play, or otherwise interact with an application  executed in the computing device . To this end, the client application  is configured to capture input commands provided by the user through one or more of the input devices  and send this input over the network  to the computing device  as application input data . In various embodiments, the client application  corresponds to a browser application.","The client application  is also configured to obtain application output data  over the network  from the computing device  and render a screen  on the display . To this end, the client application  may include one or more video and audio players to play out a media stream generated by an application . In one embodiment, the client application  comprises a plug-in or other client-side code executed within a browser application. The client  may be configured to execute applications beyond the client application  such as, for example, browser applications, email applications, instant message applications, and\/or other applications. In some embodiments, multiple clients  may be employed for one or more users to interact with the application . As non-limiting examples, some clients  may be specialized in display output, while other clients  may be specialized in obtaining user input. It is noted that different clients  may be associated with different latency requirements which may affect a delay employed before providing input commands to the application .","With reference to , shown is a schematic block diagram of the computing device  according to an embodiment of the present disclosure. The computing device  includes at least one processor circuit, for example, having a processor , a memory , and one or more graphics devices , all of which are coupled to a local interface . To this end, the computing device  may comprise, for example, at least one server computer or like device. The local interface  may comprise, for example, a data bus with an accompanying address\/control bus or other bus structure as can be appreciated.","The graphics devices  may correspond to high-performance graphics hardware, including one or more graphics processors . The graphics devices  are configured to render video corresponding to the applications  executed in the computing device . In some embodiments, one or more of the graphics devices  may be integrated into the system board of the computing device  and may use the processor  and\/or the memory  for rendering. In other embodiments, one or more of the graphics devices  may correspond to separate system cards or external devices that may be coupled to the local interface .","Each graphics device  may include a back buffer , a front buffer , and external ports . The back buffer  is configured to store a video frame that corresponds to the next video frame to be displayed. The front buffer  is configured to store a video frame that corresponds to the currently displayed video frame. The external ports  correspond to physical interfaces to which a video receiving device may be connected to receive a video signal. Such a video receiving device may include a display device such as a monitor, etc., a video recording device, a video encoding device, and\/or other video receiving device. In some embodiments, the external ports  may be absent from the graphics device .","Stored in the memory  are both data and several components that are executable by the processor . In particular, stored in the memory  and executable by the processor  are the media server application , the wrappers , the applications , the video encoders , and potentially other applications. Also stored in the memory  may be a data store  and other data. In addition, an operating system  may be stored in the memory  and executable by the processor .","Next, with reference to , a general description of the operation of the various components of the networked environment  is provided. To begin, a user at the client  sends a request to launch an application  to the media server application . The media server application  obtains the corresponding application , video encoder , and wrapper  from the data store . The media server application  then launches the application  in the corresponding wrapper . The media server application  tracks the status of the application  within the state information .","The wrapper  provides a hosted environment for execution of the application . In some embodiments, the hosted environment may include a virtualized environment for the application  that virtualizes one or more resources of the computing device . Such resources may include exclusive resources, i.e., resources for which the application  requests exclusive access. For example, the application  may request full screen access from a video device, which is an exclusive resource because normally only one application can have full screen access. Furthermore, the wrapper  may virtualize input devices such as, for example, keyboards, mice, etc. which may not actually be present in the computing device . In various embodiments, the wrapper  may correspond to a virtual machine and\/or the wrapper  may be executed within a virtual machine.","The user at the client  enters input commands for the application  by use of the input devices  of the client . As a non-limiting example, the user may depress a left mouse button. Accordingly, the client application  functions to encode the input command into a format that may be transmitted over the network  within the application input data . The media server application  receives the input command, adds it to the input queue  for the application , and ultimately passes it to the wrapper . The wrapper  then provides a left mouse button depression to the application  by way of a virtualized mouse.","Meanwhile, the graphical output of the application  is captured by the wrapper  and encoded into a media stream. Additionally, the audio output of the application  may be captured and multiplexed into the media stream. The audio output of the application  may be captured by hardware devices of the computing device  in some embodiments. Alternatively, the audio output of the application  may be captured in a manner similar to the graphical output, for example, by intercepting operating system function calls, obtaining the audio from a buffer in an audio device of the computing device , or other approaches. The media stream may be configured with timestamps and\/or other data to provide synchronization of the video and audio streams when played back by the client application . The latency of the audio stream and the latency of the video stream may differ. Thus, the relative latencies of audio and video may be determined and controlled (e.g., by buffering, etc.) to ensure proper synchronization of audio and video. The media stream is transmitted by the media server application  to the client  over the network  as the application output data . The client application  obtains the application output data  and renders a screen  on the display  in a user interface .","Various techniques may be employed in order to reduce latency related to encoding and\/or compressing the graphical output of the application . To begin, it may be advantageous to have code corresponding to the wrapper  and\/or the video encoder  to be executed within a process of the application . Rather than have the application  be customized for the system that is described, various libraries relating to OpenGL\u00ae, DirectX\u00ae, GDI, etc. may be modified to perform the video capture functions. For example, drawing function calls to the operating system  or to a common API that are made by the application  may be intercepted by the wrapper . To this end, the entry points of various library functions may be rewritten.","Where an application  renders its graphical output solely in software, the graphical output may be captured before being sent to a graphics device , which may be absent. Where an application  renders its graphical output with the assistance of hardware (e.g., for rendering textures and\/or other complex rendering), the graphical output may be captured from the back buffer  of the graphics device , rather than the front buffer  or the external port  of the graphics device . The graphical output may be read directly from the back buffer  using direct memory access (DMA) to avoid delays involving the processor .","The front buffer  contains the video frame that is currently being sent out through the external port , while the back buffer  contains the next video frame that is to be sent out through the external port . By capturing from the back buffer  instead of the front buffer , latency may be reduced by one frame, e.g., 16.7 milliseconds at 60 frames per second. By capturing the video frame before it is sent out through the external port , additional latency reductions are realized as additional buffering and latency overhead may be eliminated. Further, graphics devices  that lack an external port  may be used for rendering with this technique. An additional enhancement may include conversion to an alternate color space (e.g., YUV) to result in faster transfer to and\/or from the graphics device .","Once the video frame is captured, the frame may be encoded with a low-latency data compression scheme such as H.264. A video encoder  that performs zero-latency encoding may be used to further reduce latency. Such a video encoder  may lack internal buffering and may encode one video frame at a time. A non-limiting example of such a video encoder  is x264. Furthermore, by performing the video encoding within the process of the application , latency due to inter-process communication and other multi-process sources may be eliminated. However, in some embodiments, the video encoder  may execute as a separate process. In some embodiments, the graphics device  may be configured to assist with at least a portion of the encoding (e.g., color space transformation, etc.). Ultimately, various embodiments are able to achieve encoding latency of less than approximately five milliseconds.","Once the video frame is encoded into a compressed video frame, the compressed video frame may be sent from the video encoder  to the media server application  via a pipe or other form of inter-process communication when the media server application  is executed in the same computing device  as the video encoder . In one embodiment, the same compressed video frame may be sent by the video encoder  multiple times to reduce resource consumption and\/or improve latency. By increasing the frame rate, latency may be reduced. The media server application  is configured to send a media stream that includes the compressed video signal to one or more clients .","In some embodiments, a user may start an application  at one client  and continue the application  at another client . Furthermore, multiple users at diverse locations may participate in an application . As a non-limiting example, an application  may have been developed to be executed in one device with multiple controllers. Accordingly, the wrapper  may be configured to map input commands from one client  to a first virtual controller and input commands from another client  to a second virtual controller. As another non-limiting example, an application  may have been developed to be executed in one device, where one side of the keyboard controls the first player and the other side of the keyboard controls the second player. Accordingly, the wrapper  may be configured to map input commands from one client  to keys on one side of a virtual keyboard and input commands from another client  to keys on another side of the virtual keyboard.","Various embodiments enable input generated through one type of input device  in a client  to be transformed by the wrapper  into input commands provided to the application  through an entirely different type of virtual input device. As a non-limiting example, input generated by an accelerometer in the client  may be translated by the wrapper  into input provided through a virtual mouse. Thus, completely different kinds of input devices  may be used in the application  that may not have been contemplated when the application  was implemented.","Where the input devices  incorporate haptic technologies and devices, force feedback may be provided to the input devices  within the application output data . As a non-limiting example, a simulated automobile steering wheel may be programmed by force feedback to give the user a feel of the road. As a user makes a turn or accelerates, the steering wheel may resist the turn or slip out of control. As another non-limiting example, the temperature of the input device  may be configured to change according to force feedback. In one embodiment, force feedback generated from the application input data  of one client  may be included in the application output data  sent to another client .","Because the client  is decoupled from the hardware requirements of the application , the application  may be used remotely through a diverse variety of clients  that are capable of streaming video with acceptable bandwidth and latency over a network . For example, a game application  may be played on a client  that is a smartphone. Thus, the client  need not include expensive graphics hardware to perform the complex three-dimensional rendering that may be necessary to execute the application . By contrast, the hardware of the computing device  may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments, the video signal in the media stream sent by the media server application  may be scaled according to the bitrate and\/or other characteristics of the connection between the computing device  and the client  over the network .","Referring next to , shown is a flowchart that provides one example of the operation of a portion of the media server application  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the media server application  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the media server application  obtains a request from a client  () to begin a session of an application  (). In some examples, it is noted that multiple clients  may join the session of the application . In box , the media server application  loads the corresponding application  (), video encoder  (), and wrapper  () from the data store  () and executes the application  in a hosted environment using the wrapper  () and video encoder  (). In box , the media server application  obtains a compressed video signal and audio signal from the wrapper . In some examples, the media server application  may obtain other supplemental data from the wrapper .","From the compressed video signal, audio signal, and\/or other data, the media server application  may generate a media stream. In box , the media server application  sends the media stream to the client  in the application output data  (). In box , the media server application  determines whether user input is to be obtained from the client . If user input is to be obtained, the media server application  continues to box  and obtains one or more input commands from the client  in the application input data  (). In box , the media server application  provides the input command(s) to the application  via the wrapper , potentially after reordering using the input queues  (). In some embodiments, the wrapper  may provide the input command(s) to the application  via one or more virtualized input devices. In other embodiments, the wrapper  may provide the input command(s) to the application  via an application programming interface (API).","The media server application  continues to box . If the media server application  instead determines in box  that no user input is to be obtained, the media server application  also proceeds to box . In box , the media server application  determines whether the application session is to be ended. If the application session is not to be ended, the media server application  returns to box  and continues to obtain the compressed video signal and audio signals from the wrapper . Otherwise, the media server application  proceeds to box  and ends execution of the application  by the wrapper . Thereafter, the portion of the media server application  ends.","Moving on to , shown is a flowchart that provides one example of the operation of a portion of the wrapper  according to various embodiments. It is understood that the flowchart of  provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the wrapper  as described herein. As an alternative, the flowchart of  may be viewed as depicting an example of steps of a method implemented in the computing device  () according to one or more embodiments.","Beginning with box , the wrapper  loads a video encoder  () in a process of the application  (). In some embodiments, the wrapper  may also be loaded in the process of the application . It is understood that the video encoder  may be a separate process communicating with the wrapper  via inter-process communication in some embodiments. In box , the wrapper  determines whether the video signal generated by the application  is generated solely by software-based rendering. If the video signal is generated solely by software-based rendering, the wrapper  moves to box  and obtains a video frame from the application . The wrapper  then proceeds to box .","If the video signal is not generated solely by software-based rendering, the wrapper  instead moves from box  to box . In box , the wrapper  obtains the video frame from a back buffer  () of a graphics device  (). The wrapper  continues to box . In box , the wrapper  determines whether the video frame is to be compressed. If the video frame is not to be compressed, the wrapper  proceeds to box  and sends the uncompressed video frame to the media server application . The wrapper  then transitions to box .","Alternatively, if the wrapper  determines in box  that the video frame is to be compressed, the wrapper  moves to box  and compresses the video frame using the video encoder , thereby generating a compressed video frame or signal.","In box , the wrapper  sends the compressed video frame to the media server application . In one embodiment, the media server application  is executed in the same computing device  as the wrapper , and the compressed video frame is sent to the media server application  using a pipe or other form of inter-process communication. In other embodiments, the media server application  and the wrapper  may be executed in different computing devices . Various communication approaches (e.g., SOAP, HTTP, remote procedure call (RPC), common object request broker architecture (CORBA), etc.) may be employed to send the compressed video frame to the media server application  across a network  (). The wrapper  continues to box .","In box , the wrapper  determines whether there is another video frame to process from the application . If there is another video frame to process, the wrapper  returns to box . Otherwise, if no other video frames remain to be processed, the portion of the wrapper  ends.","With reference again to , it is understood that there may be other applications that are stored in the memory  and are executable by the processors  as can be appreciated. Where any component discussed herein is implemented in the form of software, any one of a number of programming languages may be employed such as, for example, C, C++, C#, Objective C, Java\u00ae, JavaScript\u00ae, Perl, PHP, Visual Basic\u00ae, Python\u00ae, Ruby, Delphi\u00ae, Flash\u00ae, or other programming languages.","A number of software components are stored in the memory  and are executable by the processor . In this respect, the term \u201cexecutable\u201d means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be, for example, a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory  and run by the processor , source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory  and executed by the processor , or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory  to be executed by the processor , etc. An executable program may be stored in any portion or component of the memory  including, for example, random access memory (RAM), read-only memory (ROM), hard drive, solid-state drive, USB flash drive, memory card, optical disc such as compact disc (CD) or digital versatile disc (DVD), floppy disk, magnetic tape, or other memory components.","The memory  is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus, the memory  may comprise, for example, random access memory (RAM), read-only memory (ROM), hard disk drives, solid-state drives, USB flash drives, memory cards accessed via a memory card reader, floppy disks accessed via an associated floppy disk drive, optical discs accessed via an optical disc drive, magnetic tapes accessed via an appropriate tape drive, and\/or other memory components, or a combination of any two or more of these memory components. In addition, the RAM may comprise, for example, static random access memory (SRAM), dynamic random access memory (DRAM), or magnetic random access memory (MRAM) and other such devices. The ROM may comprise, for example, a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other like memory device.","Also, the processor  may represent multiple processors  and the memory  may represent multiple memories  that operate in parallel processing circuits, respectively. In such a case, the local interface  may be an appropriate network  () that facilitates communication between any two of the multiple processors , between any processor  and any of the memories , or between any two of the memories , etc. The local interface  may comprise additional systems designed to coordinate this communication, including, for example, performing load balancing. The processor  may be of electrical or of some other available construction.","Although the media server application , the wrappers , the applications , the video encoders , the client application  (), and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above, as an alternative the same may also be embodied in dedicated hardware or a combination of software\/general purpose hardware and dedicated hardware. If embodied in dedicated hardware, each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include, but are not limited to, discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals, application specific integrated circuits having appropriate logic gates, or other components, etc. Such technologies are generally well known by those skilled in the art and, consequently, are not described in detail herein.","The flowcharts of  show the functionality and operation of an implementation of portions of the media server application  and the wrapper . If embodied in software, each block may represent a module, segment, or portion of code that comprises program instructions to implement the specified logical function(s). The program instructions may be embodied in the form of source code that comprises human-readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor  in a computer system or other system. The machine code may be converted from the source code, etc. If embodied in hardware, each block may represent a circuit or a number of interconnected circuits to implement the specified logical function(s).","Although the flowcharts of  show a specific order of execution, it is understood that the order of execution may differ from that which is depicted. For example, the order of execution of two or more blocks may be scrambled relative to the order shown. Also, two or more blocks shown in succession in  may be executed concurrently or with partial concurrence. Further, in some embodiments, one or more of the blocks shown in  may be skipped or omitted. In addition, any number of counters, state variables, warning semaphores, or messages might be added to the logical flow described herein, for purposes of enhanced utility, accounting, performance measurement, or providing troubleshooting aids, etc. It is understood that all such variations are within the scope of the present disclosure.","Also, any logic or application described herein, including the media server application , the wrappers , the applications , the video encoders , and the client application , that comprises software or code can be embodied in any non-transitory computer-readable medium for use by or in connection with an instruction execution system such as, for example, a processor  in a computer system or other system. In this sense, the logic may comprise, for example, statements including instructions and declarations that can be fetched from the computer-readable medium and executed by the instruction execution system. In the context of the present disclosure, a \u201ccomputer-readable medium\u201d can be any medium that can contain, store, or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer-readable medium can comprise any one of many physical media such as, for example, magnetic, optical, or semiconductor media. More specific examples of a suitable computer-readable medium would include, but are not limited to, magnetic tapes, magnetic floppy diskettes, magnetic hard drives, memory cards, solid-state drives, USB flash drives, or optical discs. Also, the computer-readable medium may be a random access memory (RAM) including, for example, static random access memory (SRAM) and dynamic random access memory (DRAM), or magnetic random access memory (MRAM). In addition, the computer-readable medium may be a read-only memory (ROM), a programmable read-only memory (PROM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), or other type of memory device.","It should be emphasized that the above-described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above-described embodiment(s) without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Many aspects of the present disclosure can be better understood with reference to the following drawings. The components in the drawings are not necessarily to scale, emphasis instead being placed upon clearly illustrating the principles of the disclosure. Moreover, in the drawings, like reference numerals designate corresponding parts throughout the several views.",{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIG. 1"]}]},"DETDESC":[{},{}]}
