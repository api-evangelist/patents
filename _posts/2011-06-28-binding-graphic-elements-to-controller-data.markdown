---
title: Binding graphic elements to controller data
abstract: System(s), device(s), and method(s) provide bi-directional mechanisms for binding graphic element definitions to industrial automation data types in an industrial control system. Moreover, a system that automatically provides data searching and filtering of an item based on user interactions with either the graphic element definition or a controller data type is provided. Further, a graphic element definition is associated with a data source type information, to simplify configuration of an instance of that graphic element and populate suitable data source fields based on instances of the associated data source type. In addition, a system to automatically generate the graphic element based on data from a logic controller is provided. Moreover, the graphic element can be updated to reflect a change in the data, without a manual refresh.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08798775&OS=08798775&RS=08798775
owner: Rockwell Automation Technologies, Inc.
number: 08798775
owner_city: Mayfield Heights
owner_country: US
publication_date: 20110628
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["This application is related to co-pending U.S. patent application Ser. No. 12\/869,524, filed on Aug. 26, 2010, entitled \u201cAUTOMATED OPERATOR INTERFACE GENERATION IN A CONTROL SYSTEM.\u201d The entirety of which is incorporated herein by reference.","The subject disclosure relates to automation control, and more specifically, to a system and method for binding graphic elements to controller data.","Industrial control systems regulate operation of equipment in an industrial environment, where operation of the equipment includes process(es) typically directed to accomplishment of a complex task or a streamlined, automated task, such as large scale manufacturing. Regulation of operation of the equipment and related process(es) typically exploit and produce substantive amounts of control data, which include configuration data such as controller code, human-machine interface (HMI) data, process recipe(s) and report definitions, or the like. In addition, operation of industrial control systems also produces both real-time and historical data about the status of regulated equipment and related process(es), the data including alarms, process values, and audit\/error logs. To operate industrial control systems, various HMIs in the industrial environment render control data (real-time (or last known) and historical data) through operator interfaces which convey process overviews or equipment detail. Multiple operator interfaces are created to provide rich information related to the various control processes implemented in the industrial control system so that the operator can switch between them to monitor various aspects of the equipment and related process(es) under control.","Various factors contribute to the time and human resources necessary to configure operator interface(s) employed to render control data in an industrial environment; such factors include complexity of the equipment and related process(es) that are regulated through one or more controllers, amount of control data collected as part of controlling the equipment and the related process(es), and security protocols and associated data necessary to ensure operational integrity of the equipment. Yet, in conventional industrial control systems, development of an operator interface to consume control data through a dedicated human-machine interface (HMI) is a highly manual process that generally occurs after control design or equipment configuration and contributes significantly to the development cost. Specifically, most traditional HMI systems do not support structured data types, and those that do support structured data, provide only one-way interactions.","The following presents a simplified summary in order to provide a basic understanding of some aspects of the subject disclosure. This summary is not an extensive overview, and it is not intended to identify key\/critical elements of the subject disclosure or to delineate any scope. The sole purpose of this summary is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.","One or more embodiments in the subject disclosure provide a system and method for providing a bi-directional binding between graphic elements and industrial automation data types. For example, a definition of a graphic element can be bound\/linked\/mapped to a controller data type. Moreover, type mappings, such as, but not limited to, strongly-typed, loosely-typed, and\/or un-typed mappings can be utilized to bind a property within the graphic element definition to the controller data type. Typically, the system disclosed herein can provide support for bi-directional workflows with graphic elements and data types, including, but not limited to, structured data types.","Further, another embodiment of the subject specification includes methods and systems for associating\/linking\/binding a definition of a graphic element with a data source definition, for example, a user defined type (UDT) or an add on instruction (AOI). Moreover, when an instance of the graphic element is created, for example in an HMI configuration environment, the instance can be configured based on population of data source fields by employing instances of the data source type. Typically, a user input can be received to select suitable data sources from a previously configured program file.","Yet another embodiment of the subject disclosure provides a system and method that automatically generates graphic elements based on controller content. Moreover, a new, e.g., previously un-programmed, human machine interface (HMI) can be connected to a logic controller and based on the data on the logic controller, a set of screens can be automatically created in the HMI, with or without (or with minimal) user interaction. In addition, the HMI application can be refined, customized, and\/or modified as the controller program is modified (e.g., tag renamed, new control programs, etc.). Moreover, HMI content can be dynamically displayed and modified on a terminal as the controller program is being refined, customized, and\/or modified.","To the accomplishment of the foregoing and related ends, certain illustrative aspects of the disclosed innovation are described herein in connection with the following description and the annexed drawings. These aspects are indicative, however, of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.","The subject disclosure is now described with reference to the drawings, wherein like reference numerals are used to refer to like elements throughout. In the following description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident, however, that the subject disclosure can be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to facilitate a description thereof.","As used in this application, the terms \u201ccomponent,\u201d \u201csystem,\u201d \u201cplatform,\u201d \u201ccontroller,\u201d \u201cterminal,\u201d \u201cstation,\u201d \u201cnode,\u201d \u201cinterface,\u201d \u201ceditor,\u201d are intended to refer to a computer-related entity or an entity related to, or that is part of, an operational apparatus with one or more specific functionalities, wherein such entities can be either hardware, a combination of hardware and software, software, or software in execution. For example, a component can be, but is not limited to being, a process running on a processor, a processor, a hard disk drive, multiple storage drives (of optical or magnetic storage medium) including affixed (e.g., screwed or bolted) or removably affixed solid-state storage drives; an object; an executable; a thread of execution; a computer-executable program, and\/or a computer. By way of illustration, both an application running on a server and the server can be a component. One or more components can reside within a process and\/or thread of execution, and a component can be localized on one computer and\/or distributed between two or more computers.","Components as described herein can execute from various computer readable storage media having various data structures stored thereon. The components may communicate via local and\/or remote processes such as in accordance with a signal having one or more data packets (e.g., data from one component interacting with another component in a local system, distributed system, and\/or across a network such as the Internet with other systems via the signal). As another example, a component can be an apparatus with specific functionality provided by mechanical parts operated by electric or electronic circuitry which is operated by a software or a firmware application executed by a processor, wherein the processor can be internal or external to the apparatus and executes at least a part of the software or firmware application. As yet another example, a component can be an apparatus that provides specific functionality through electronic components without mechanical parts, the electronic components can include a processor therein to execute software or firmware that provides at least in part the functionality of the electronic components. As further yet another example, interface(s) can include input\/output (I\/O) components as well as associated processor, application, or Application Programming Interface (API) components. While the foregoing examples are directed to aspects of a component, the exemplified aspects or features also apply to a system, platform, interface, controller, terminal, and the like.","As used herein, the terms \u201cto infer\u201d and \u201cinference\u201d refer generally to the process of reasoning about or inferring states of the system, environment, and\/or user from a set of observations as captured via events and\/or data. Inference can be employed to identify a specific context or action, or can generate a probability distribution over states, for example. The inference can be probabilistic\u2014that is, the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher-level events from a set of events and\/or data. Such inference results in the construction of new events or actions from a set of observed events and\/or stored event data, whether or not the events are correlated in close temporal proximity, and whether the events and data come from one or several event and data sources. Typically, the term \u201cdata source\u201d used herein can include a generalization of a controller or most any device (e.g., industrial automation device) capable of providing its data type definitions.","In addition, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor.\u201d That is, unless specified otherwise, or clear from the context, the phrase \u201cX employs A or B\u201d is intended to mean any of the natural inclusive permutations. That is, the phrase \u201cX employs A or B\u201d is satisfied by any of the following instances: X employs A; X employs B; or X employs both A and B. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims should generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from the context to be directed to a singular form.","Various aspects or features will be presented in terms of systems that may include a number of devices, components, modules, and the like. It is to be understood and appreciated that the various systems may include additional devices, components, modules, etc. and\/or may not include all of the devices, components, modules etc. discussed in connection with the figures. A combination of these approaches also can be used.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["110","120","130","130","110","120","130","110","120","110","140","140","110","140","120"]},"A controller in control environment  can be embodied in one of a programmable automation controller (PAC), which can be a dedicated programmable logic controller (PLC); a PC-based controller; or the like. Control code and control data structures in the control environment  represent control logic that administers equipment , and related processes, functionally coupled to the control environment . In an aspect, control environment  is an industrial automation control environment and the control logic is automation control logic. Control environment  includes a design environment in which control logic is developed and a runtime environment in which the control logic is implemented (e.g., executed). In the design environment, in an aspect, instruction(s), data type(s), and metadata tag(s) that comprise control code are produced and retained as part of configuration, or composition, of a control project. Likewise, rendering environment  includes a design environment and a runtime environment; the design environment enables generation of operator interfaces than can render information associated with the entities or processes regulated via the control environment .","According to one embodiment, the binding component  enables the definition of a graphic element, for example, an externally defined graphic element (EDGE), to be utilized against a broader set of data types. Typically, the binding component  provides \u201cType Mappings\u201d that enable alternative data types to be employed as bindings for properties of an EDGE definition, for example, specified by a designer. Moreover, the EDGE can employ both a primary data type defined by the property in the EDGE definition and the data type(s) defined in the type mappings. Accordingly, the binding component  provides additional flexibility for both the designer of the EDGE definition (e.g., who can include type mappings as part of the EDGE) and the end user\/customer (e.g., who can define additional type mappings relative\/customized to his system). Although one or more embodiments disclosed herein refer to EDGEs, it can be appreciated that the embodiments can be applied to most any graphic element and are not limited to EDGEs. As an example, the graphic element can include an icon, an animated image, a sound file or other aural indicia, a screen or display, a faceplate, a navigation panel, or the like.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 2","b":["200","210","120","200","200","210","250","245","245"]},"Controller  is part of a control environment (e.g., ) within the control system, and includes a control platform  that enables the controller  to regulate equipment (e.g., ) and associated process(es) in accordance with control code retained in control logic storage , also referred to as control logic . Control data related to regulation of the associated process(es) can be retained in data storage ; other data also can be retained in data storage . The control code is based on one or more control data structures that are part of a set of control data structures available to program the controller . The set of control data structures is extensible and specific to controlled equipment and related process(es). In an aspect, a control data structure comprises a control instruction, a data type, and a memory tag. As an example, a memory tag, or tag, can be a composite data structure that includes (a) metadata (e.g., tag metadata) that defines the data related to the memory tag and (b) a data value(s). Control data structure(s) storage  retains control data structure(s). Typically, the data type includes at least one of various common types employed in control systems, such as numerical data (real data, integer data, complex data, etc.) and logical data, character data, in addition to user defined data types such as array (vectors, matrices, etc.) data types or composite data types, e.g., a data type with a logical variable and an array data type. In one aspect, these control data structures are bound (e.g., mapped\/linked) to one or more properties of a graphic element (e.g., EDGE) definition.","Controller  also includes input\/output (I\/O) interface(s)  that enable generation of the control code. I\/O interface(s)  also allows communication amongst the controller  and terminal  and the controller  and device(s), such as sensor(s) (not shown); such communication effected in part through access network(s) . In an aspect, at least one I\/O interface of I\/O interface(s)  is associated with a group of I\/O module(s) that can be retained in memory  as one or more sets of computer-executable code instructions (not shown). The group of I\/O module(s) enables the at least one I\/O interface, and thus controller , to communicate and control I\/O functionality (which can be defined in the group of I\/O modules). In addition, controller  includes processor(s) , memory , and other circuitry that enables implementation of control process(es) (e.g., execution of control logic, or control code instructions) related to a specific equipment (e.g., ). In one or more embodiments of the subject disclosure, controller  is an industrial controller or an industrial automation controller. Generally, industrial controllers or industrial automation controllers are purpose-specific processing devices employed to regulate automated or semi-automated entities such as industrial processes, machines, manufacturing equipment, plants, or the like. A typical industrial controller or automation controller executes, through a processor(s) , for example, control logic to measure one or more variables or inputs representative of a status of a controlled entity, or effectuate outputs associated with control of the entity. Such inputs and outputs can be digital or analog; inputs and outputs are not shown in  for the sake of simplicity.","In example system , terminal  includes a display component  that presents an instance of the graphic element (e.g., EDGE) with an associated tag value, for example, received from the controller . Typically, the definition of the graphic element (e.g., EDGE) can be mapped with one or more data types associated with the controller . In an aspect, the type mapping described herein can be generated one time (e.g., at a time terminal  is manufactured or provisioned), for example, by employing the binding component , and it can be utilized at runtime (control runtime, rendering runtime, or both) to create a variety of collections of display objects based on control logic, as described hereinbefore. In one aspect, the type mapping can be retained in the binding component . Although the binding component  is illustrated to reside within the terminal , it can be appreciated that the binding component  can reside outside the terminal , for example, on most any server\/memory within system  or within controller . As an example, the type mapping can link a property in the definition of a graphic element (e.g., an icon, an animated image, a screen or display, a faceplate, navigation panel) to the data type. In one aspect, a definition editor  can be utilized to modify property types on the definition of the graphic element (e.g., EDGE definition) as well as the internal elements within the definition. Moreover, the definition editor  can be employed to define controller data types as properties of the definition. Typically, when defining bindings in the internal elements of the graphic element, a browser component  that can provide a data type browser can be utilized by the definition editor  to locate the appropriate members of structure. In one aspect, the browser component  can provide the ability to browse data types, graphic element definitions (e.g., EDGEs), tags, and\/or graphic element instances (e.g. elements on screens). Further, the definition editor  can provide various functions, such as, but not limited to, design-time validation to identify binding problems, Intelli-sense, look-ahead, and\/or auto-fill, verification and\/or validation, ename tracking and\/or propagation, run-time binding verification, etc.","An available collection of graphic elements (e.g., EDGEs) for a specific product\/project associated with controller  can be obtained by display component , wherein the display component  can generate a rendering project based at least on such collection. Display component  can execute the rendering project to produce an operator interface; in an illustrative aspect, display component  can exploit processor(s)  to execute the rendering project. The operator interface so generated is thus based at least on the control logic executed by controller . In addition, display component  can enable data entry from an end user (e.g., a customer, a control engineer or operator); for example, display component  can receive data input through various user-interface interaction modalities (speech gestures, motion gestures, touch gestures, etc.) and conduits, for example, keyboards, keypads, touch screens, microphones, cameras, or the like.","One or more operator interfaces generated as described herein enable terminal  to render control data associated with various control processes regulated through controller  based on specific control code. The display component  in terminal  can render the one or more operator interfaces through visual or aural indicia. The one or more operator interfaces can be associated with one or more sets of control screens, and rendered in accordance with at least one of graphic display object(s) or gesture rendering object(s) that compose the control screen(s) in the one or more sets of control screens. Various schemes can be employed to render the one or more operator interface(s) or other content(s) such as window-based schemes, e.g., iconic representation, pop-up representation of indicia; or text-based representation, with scroll-down or scroll-sideways delivery, or static rendering. In addition, the one or more operator interfaces or other content(s) can be organized in various configurations within a rendering area (e.g., display screen) that can be a part of display component .","In terminal , at least a portion of I\/O interface(s)  enables functional coupling, e.g., communicative coupling, of terminal  with access network(s) ; the functional coupling allows communication (e.g., exchange of data and signaling) of terminal  with other controller(s) (e.g., controller ); other terminal(s) such as terminal  and terminal ; device(s), such as device ; and\/or server(s) (not shown). In an aspect, device  is functionally coupled to access network  via interface(s) , and includes at least one control data structure retained in memory element . In addition to control data structure(s) , device  also includes data storage (not shown). In an embodiment, device  can be an intelligent device, such as a variable speed drive for a motor or an intelligent valve. In another embodiment, device  can be an I\/O device, such as various sensors, a scanner, a key pad, a touch pad, or the like. In one or more embodiments, device  can include at least one data structure, other than a control data structure, that can be exploited to automatically generate an operator interface in accordance with aspects described herein. Device  can be part of equipment .","The portion of I\/O interface(s)  that enables communication of terminal  with other terminal(s), controller(s), or server(s) via access network(s)  can include network adaptor(s), port(s), reference link(s), or the like. I\/O interface(s)  also can functionally couple (e.g., communicatively couple) the terminal  with peripheral devices (e.g., device ) and with an electric grid that can supply power for operation of the terminal . To at least that end, I\/O interface(s)  can include a set of connectors and suitable circuitry (transformers, power amplifiers, etc.). In an aspect, I\/O interface(s)  can be distributed and deployed in part within display component  to enable acquisition of data in response to conveyance of control data through one or more operator interfaces. The portion of I\/O interface(s)  that is part of display component can be embodied in data entry components, e.g., keypad, touch detection components, and related circuitry that enables functional coupling of the portion of I\/O interface(s)  with one or more components or functional elements (e.g., processor(s), memory, bus) of terminal .","In example system , terminal  also includes processor(s) , which can be configured to execute or can execute computer-executable code instructions (not shown) stored in memory  to implement or provide at least part of the described functionality of terminal . Such computer-executable code instructions can include program modules or software or firmware applications that implement specific tasks which can be accomplished, for example, through one or more of the methods described in the subject specification and that are associated, at least in part, with functionality or operation of example system . Memory  also can retain data resource(s) retrieved or received at least from controller  or other controller(s) (not shown). In addition to, or as part of, stored data resources, memory  also can retain state information (e.g., alarm condition(s)) associated to a terminal, a controller, a device, or other equipment. In an aspect, memory  can include various graphic elements (e.g., EGDGEs) definitions or gesture data object definitions.","Referring now to , there illustrated is an example system overview  of the resources in a project and its associated product and project libraries. As discussed supra, the display component  presents an instance of a graphic element, such as, but not limited to, an EDGE. In one aspect, an EDGE can be most any graphic element developed by an external group, for example, a third-party, an original equipment manufacturer (OEM), etc., via a configuration component . Moreover, a consistent architecture for both EDGE and user-defined graphic elements (UDGE) is provided herein. It can be appreciated that the EDGE property and data type concepts disclosed herein can apply to most any type of graphic elements (e.g., EDGE and\/or UDGE). Typically, library  includes definitions, for example an EDGE definition , which is a definition of an EDGE in an element browser. In one example, the library  can include a product library  and\/or a project library  that can store graphic element(s) and\/or data specific to a product and\/or a project respectively. Typically, the library  can be included within memory, for example memory  residing within terminal  or memory residing within a server, external to, but communicatively coupled with terminal .","The EDGE definition  can include at least one property that is a discrete (scalar or complex) type exposed by the EDGE definition to its users. In one aspect, the property value can be set by the user when an EDGE instance  is created on a screen . The user can set (e.g., via the binding component ) the property value to either a fixed value or can bind (e.g., via the binding component ) the property value to a dynamic value, such as, but not limited to a controller Tag and\/or another EDGE instance on the same screen. Typically, the properties can be either required or optional. In one aspect, a controller data type  can be used in an EDGE definition  as the type of a property. In one example, the binding component  can be utilized to link the controller data type  with the EDGE definition . In general, a designer (e.g., third party) of the EDGE definition  does not know the full range or potential uses for the EDGE definition . Moreover, the end user can employ the EDGE definition  from the OEM (or other library provider) for data types that are specific to the end user's project. Most often, the designer is unaware of these intended projects in which the EDGE can be utilized. To support this scenario, the types used by properties in the EDGE definition  can be extended by users of it, but in a manner such that the EDGE definition remains intact. In one aspect, \u201cType Mappings\u201d are utilized for binding data types  to properties of the EDGE definition , for example, by employing the binding component . This enables the definition  of a single EDGE to be used against a broader set of data types . Moreover, the type mappings do not impact the visual layout because bindings in the visual layout can only refer to properties of the EDGE definition ; they are isolated from the details of the mappings. In one embodiment, the data type  can be a structure; for example, a complex type. Moreover, the data type  definition can include system-defined, user-defined, Add-On Instruction (AOI)-defined, and\/or module-defined data types, as explained in detail infra.","Properties can define the interface (e.g., a collection of properties that an EDGE exposes to its users) of the EDGE definition  to a user. In one aspect, the properties of the EDGE definition  can be extended in various areas, for example, property types can include controller data types and\/or additional flexibility. Typically, strongly-typed properties are provided for complex data structures or scalars. Further, loosely-typed properties are provided for scalar types (e.g., anyNum). Furthermore, un-typed properties are provided for deferred connectivity and\/or parameter substitution. In one example, meta-information that designates a property as \u201crequired\u201d or \u201coptional\u201d to support design-time validation and\/or conditional bindings in the EDGE definition  can also be provided. In another example, meta-information that provides a hint\/indication that the property is intended to be bound to a live data value can be provided. Additionally, the EDGE definition  can support multiple complex properties (e.g., multiple controller data types). When doing so, the user can select\/set a default binding for one property that references another property (e.g., via the binding component ).","According to an aspect, during run time, an EDGE instance  can be displayed on various screens  for displaying data from a tag . In one example, when the EDGE definition  is instantiated , the data type in a strongly-typed property must exactly match the data type of the bound tag . Using strongly-typed properties provides the greatest opportunity for an integrated design-time experience. For example, strongly-typed properties enable design-time features for the EDGE definition , such as, but not limited to, Intelli-sense, look-ahead, and\/or auto-fill, verification and\/or validation, rename tracking and\/or propagation for data types  and their members. In scenarios where the designer of the EDGE definition  and the end user of that EDGE are more decoupled, the end user may want to use the EDGE in a screen , but the data types of the EDGE it are not a good fit for the current project , product or system. In such a case, the type mapping mechanisms described herein can be used to map between types. Alternatively, the EDGE designer can select to use loosely or un-typed properties to provide additional flexibility. In another example, when the EDGE definition  is instantiated  in the design-time or displayed on a screen  in the run-time, the system must verify that the conversion from data type in the bound tag  to the data type  in the property is valid. The design-time provides the ability for early validation and\/or feedback for the user, but is not the final authority on whether or not the conversion is valid. The final decision occurs in the run-time system to validate that the on-line tag value can be appropriately converted.","Loosely-typed properties can generally be utilized for scalar data types and do not apply to complex or structured types. Typically, loosely-typed properties provide greater flexibility in supporting a range of data types. However, when multiple property bindings are needed, multiple, scalar bindings would need to be created, rather than employing a structure. Generally, use of loosely-typed properties is well suited for simple, scalar values, but is not the recommended approach for complex or structured types. Many of the benefits for strongly-typed properties are not available on the EDGE definition  because the type of the binding is not known until instantiation time. In addition, un-typed properties can be utilized to support string substitution. This allows a parameter value to be expanded to complete the connection to external data. Though again, all of the above noted benefits realized by strongly-typed properties are lost when using this approach. Much like loosely-typed properties, enhanced features on the EDGE definition  are not available because the type of the binding is not known until instantiation time.","According to one aspect, the EDGE definition  can support multiple data types . Consider the following example to better illustrate some of the user interactions and how the disclosed architecture supports them. In this example case, the user designed EDGE definition  can have several complex properties based on structured data types :",{"@attributes":{"id":"p-0048","num":"0047"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Typedef id=\u201cTemperatureLoop\u201d baseType=\u201cGroup\u201d>"},{"entry":"\u2002<meta:displayName>Temperature Loop with AutoTune Stuff"},{"entry":"\u2002<\/meta:displayName>"},{"entry":"\u2002<Properties>"},{"entry":"\u2003<Property id=\u201cdataPIDE\u201d type=\u201cPID_ENHANCED\u201d>"},{"entry":"\u2003\u2002<meta:displayName>Temperature Loop PIDE Tag"},{"entry":"\u2003\u2002<\/meta:displayName>"},{"entry":"\u2003\u2002<meta:category>General<\/meta:category>"},{"entry":"\u2003\u2002<meta:connectionOnly>true<\/meta:connectionOnly>"},{"entry":"\u2003\u2002<meta:required>true<\/meta:required>"},{"entry":"\u2003<\/Property>"},{"entry":"\u2003<Property id=\u201cautoTune\u201d type=\u201cPIDE_AUTOTUNE\u201d"},{"entry":"\u2003src=\u201cdataPIDE.@AutoTune\u201d >"},{"entry":"\u2003\u2002<meta:displayName>PIDE Auto Tune Tag<\/meta:displayName>"},{"entry":"\u2003\u2002<meta:category>General<\/meta:category>"},{"entry":"\u2003\u2002<meta:connectionOnly>true<\/meta:connectionOnly>"},{"entry":"\u2003\u2002<!-- Omitting the required element means that it is optional"},{"entry":"\u2003\u2002<meta:required>false<\/meta:required>"},{"entry":"\u2003\u2002-->"},{"entry":"\u2003<\/Property>"},{"entry":"\u2003<!-- ... -->"},{"entry":"\u2002<\/Properties>"},{"entry":"<\/Typedef>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":["304","306","308"]},{"@attributes":{"id":"p-0049","num":"0048"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TemperatureLoop name=\u201cTempLoop_201\u201d>"},{"entry":"\u2003<dataPIDE>{::Controller_1\\PIDE_201}<\/dataPIDE>"},{"entry":"\u2003<!-- Binding to the autoTune property defaults to using the value in:"},{"entry":"\u2003<autoTune type=\u201cPIDE_AUTOTUNE\u201d>{::Controller_1\\PIDE_201.-"},{"entry":"\u2003@AutoTune}<\/autoTune>"},{"entry":"\u2003-->"},{"entry":"<\/TemperatureLoop>"},{"entry":"<TemperatureLoop name=\u201cTempLoop_202\u201d>"},{"entry":"\u2003<dataPIDE>{::Controller_1\\PIDE_202}<\/dataPIDE>"},{"entry":"\u2003<autoTune>{::Controller_1\\GlobalAutoTuneTag}<\/autoTune>"},{"entry":"<\/TemperatureLoop>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"As can be seen above, the example EDGE definition  includes one required and one optional property. The required versus optional designation serves several purposes, for example, provides a cue for the design-time validation system to identify binding problems, and\/or provides the mechanisms for the designer of the EDGE definition  to develop conditional visualizations based on whether the property is bound or not. Typically, optional properties can necessitate additional constructs for the designer of the EDGE definition  to make decisions based on a property's binding. In other words, the property binding can be set or null, a valid type or an invalid type, a temporarily invalid or with bad quality (e.g., due to a transient communication error). Accordingly, in the above example, the visual layout can have conditional bindings such as:",{"@attributes":{"id":"p-0051","num":"0050"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<View>"]},{"entry":[{},"\u2002<!-- ... -->"]},{"entry":[{},"\u2002<Button id=\u201cLaunchAutoTuneView\u201d >"]},{"entry":[{},"\u2003<SetProperty ref=\u201cvisibility\u201d"]},{"entry":[{},"\u2003\u2003\u2003src=\u201c{(autoTune != null) && (autoTune.@Quality =="]},{"entry":[{},"\u2003\u2003\u2003Quality.Good)}\u201d \/>"]},{"entry":[{},"\u2003<!-- ... -->"]},{"entry":[{},"\u2002<\/Button>"]},{"entry":[{},"\u2002<!-- ... -->"]},{"entry":[{},"<\/View>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},"In one aspect, a user can also configure (e.g., via the binding component ) type mappings for the PID_ENHANCED and PIDE_AUTOTUNE types. Moreover, if any data type that supplies the required data fields is to be supported, an un-typed type mapping (or an un-typed property if configured in the EDGE properties) can be utilized, as follows:",{"@attributes":{"id":"p-0053","num":"0052"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<TypeMappings>"]},{"entry":[{},"\u2002<TypeMap to=\u201cPID_ENHANCED\u201d from=\u201canyType\u201d \/>"]},{"entry":[{},"\u2002<TypeMap to=\u201cPIDE_AUTOTUNE\u201d from=\u201canyType\u201d \/>"]},{"entry":[{},"<\/TypeMappings>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["304","304","304","312","304"]},{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TypeMappings>"},{"entry":"\u2002<TypeMap to=\u201cPID_ENHANCED\u201d from=\u201cMyTempLoopAOI\u201d>"},{"entry":"\u2003<Map to=\u201cPID_ENHANCED.PV\u201d from=\u201c{MyTempLoopAOI.-"},{"entry":"\u2003mySpecialPV}\u201d \/>"},{"entry":"\u2003<Map to=\u201cPID_ENHANCED.SP\u201d from=\u201c{MyTempLoopAOI.-"},{"entry":"\u2003mySpecialSP}\u201d \/>"},{"entry":"\u2003<!-- ... -->"},{"entry":"\u2002<\/TypeMap>"},{"entry":"\u2002<TypeMap to=\u201cPIDE_AUTOTUNE\u201d from=\u201cMyTempLoopAOI\u201d>"},{"entry":"\u2003<Map to=\u201cPIDE_AUTOTUNE\u201d from=\u201c{MyTempLoopAOI.-"},{"entry":"\u2003@AutoTuneInOutParam}\u201d \/>"},{"entry":"\u2003<!-- ... -->"},{"entry":"\u2002<\/TypeMap>"},{"entry":"<\/TypeMappings>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{},"b":"304"},{"@attributes":{"id":"p-0055","num":"0054"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TemperatureLoop name=\u201cTempLoop_203\u201d>"},{"entry":"\u2002<dataPIDE type=\u201canyType\u201d>{::Controller_1\\"},{"entry":"\u2002Supports_PIDE_Members}<\/dataPIDE>"},{"entry":"\u2002<autoTune type=\u201canyType\u201d>{::Controller_1\\"},{"entry":"\u2002Supports_AutoTune_Members}<\/autoTune>"},{"entry":"<\/TemperatureLoop>"},{"entry":"<TemperatureLoop name=\u201cTempLoop_204\u201d>"},{"entry":"\u2002<dataPIDE type=\u201cMyTempLoopAOI\u201d>{::Controller_1\\"},{"entry":"\u2002MyTempLoopAOI_204}<\/dataPIDE>"},{"entry":"\u2002<!-- Binding to the autoTune property defaults to using the value in:"},{"entry":"<autoTune"},{"entry":"type=\u201cPIDE_AUTOTUNE\u201d>{::Controller_1\\MyTempLoopAOI_204.-"},{"entry":"@AutoTuneInOutParam}<\/autoTune>"},{"entry":"\u2002-->"},{"entry":"<\/TemperatureLoop>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In another example, a valve can be represented by a simple EDGE that corresponds to an AOI. Moreover, the AOI can be the definition of the control logic and the EDGE can be the definition of the HMI visualization. In one aspect, the EDGE definition can provide an ability to specify more than one visualization for an EDGE. For example, visualizations can be displayed for an icon, overview, and\/or configuration of the EDGE. In yet another example, EDGE definition  can be defined, via configuration component , such that, the EDGE definitions  can connect with many data values from many different data types, and\/or be built as composites of other EDGEs. For example, a tank overview can be developed as an EDGE, wherein data is drawn from the primary tank of interest, secondary tanks\/silos containing material feeds, and individual equipment such as valves and pumps. Typically, many, if not all of these items, are typically modeled with a data type for each item (e.g., Tank_UDT, Silo_UDT, ValveAOI, etc.). In another example, a conveyor can be developed as a composite EDGE with multiple connections.","According to an aspect, several scenarios related to creating EDGE instances on a screen can be provided by system . In one aspect, a user (e.g., via terminal ) can drag the EDGE definition  from an element library (e.g., product library  and\/or project library ) to a screen . Typically, when the EDGE definition  is dropped onto the screen, a filtered list of tags  that match the EDGE's properties can be displayed (e.g., via display component ). In one embodiment, a search component  can be utilized search the project database (e.g., including product library  and\/or project library ) for the tags  that match the EDGE's data type .","In another aspect, the user (e.g., via terminal ) can drag a tag  from a tag browser (not shown) to the screen  and, when the tag  is displayed on the screen , a filtered list of EDGE definitions  that match (are bound to) the tag's data type  can be presented to a user (e.g., via display component ). Additionally or alternatively, the element library (e.g., product library  and\/or project library ) can be filtered based on a data type  and\/or a tag  for the selected EDGE definition . In other words, when instantiating an EDGE definition , only those tags  are displayed that can be used with that EDGE. Further, when searching for\/selecting a tag , a list of all of the EDGE definitions  that can be utilized with that tag  can be displayed along with the tag .",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 4A","b":["400","250","210","218"]},{"@attributes":{"id":"p-0060","num":"0059"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Typedef id=\u201cSimpleGauge\u201d baseType=\u201cGroup\u201d>"},{"entry":"\u2002<meta:displayName>A Simple Gauge EDGE<\/meta:displayName>"},{"entry":"\u2002<meta:description>This Gauge uses a complex property."},{"entry":"\u2002<\/meta:description>"},{"entry":"\u2002<!-- ... -->"},{"entry":"<\/Typedef>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"In one aspect, properties define the interface of the EDGE definition to its users. When an instance of an EDGE is created on the screen (and selected in the designer), its public properties are available for editing in a property pane (e.g., via the definition editor ). Each EDGE property has a set of core attributes defined by a run-time data model. For example, the core attributes can include an Identifier (e.g., a localized name of the property), a type (e.g., an expected type of property), and\/or a value (e.g., a default value of the property when the user does not specify a value (or when a bound value is not accessible in the run-time)). Each EDGE property can also have meta-information applied to it to support editing behavior in the design-time user interface (typically in the property pane). The meta-information can include, but is not limited to, a display name (e.g., a localized name of the property), a description (e.g., a localized description of the property), a category (e.g., a property pane category\/group in which to display the property), a required or optional designation on the property (e.g., defaults to optional), and\/or an indication that the property is intended to be bound to a live data value.","Typically, an EDGE designer can choose whether to expose complex or simple (scalar) values for each property. In one case, a property can be configured as a complex value for a controller data type. Alternatively, a set of simple properties for the various members of a complex data type can be exposed. For example, with respect to the gauge EDGE , a designer of the gauge EDGE  can decide that all of the internals of the Gauge element  are opaque and the end user cannot individually configure properties for each item. In other words, the designer can decide that all internal data is driven by a single complex property that connects to some external data. This approach is shown in the example below.",{"@attributes":{"id":"p-0063","num":"0062"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<Properties>"},{"entry":"\u2002<!-- In this example, a single numeric property to for the data value"},{"entry":"\u2002is exposed. -->"},{"entry":"\u2002<Property id=\u201cdataValue\u201d type=\u201canyNum\u201d>"},{"entry":"\u2003<meta:displayName>Gauge Data Tag<\/meta:displayName>"},{"entry":"\u2003<meta:category>General<\/meta:category>"},{"entry":"\u2003<meta:connectionOnly>true<\/meta:connectionOnly>"},{"entry":"\u2003<meta:required>true<\/meta:required>"},{"entry":"\u2002<\/Property>"},{"entry":"\u2002<!-- The EDGE designer chose to expose some properties to configure"},{"entry":"\u2003\u2003the visual appearance of the EDGE. -->"},{"entry":"\u2002<Property name=\u201cmyGaugeStyle\u201d type=\u201cStyleEnum\u201d value=\u201cSimple\u201d>"},{"entry":"\u2003<meta:displayName>Visual Style of the Gauge (Simple, Fancy, etc)"},{"entry":"\u2003<\/meta:displayName>"},{"entry":"\u2003<meta:category>Layout<\/meta:category>"},{"entry":"\u2002<\/Property>"},{"entry":"\u2002<!-- ... -->"},{"entry":"<\/Properties>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"According to an aspect, the below XML example depicts a visual layout of the gauge element . Typically, the binding statements for internal display elements (shown in the curly braces syntax) in the visual layout refer to properties of the EDGE definition (using the property identifiers). These bindings can refer to any properties in the EDGE definition including, but not limited to, the members of complex property values (e.g., controller data types).",{"@attributes":{"id":"p-0065","num":"0064"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<View>"},{"entry":"\u2003<!-- Ignoring all layout aspects such as width, height, x, y, etc... -->"},{"entry":"\u2003<!-- \u201cArea X tank pressure\u201d -->"},{"entry":"\u2003<TextDisplay id=\u201c_description\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201cfillColor\u201d","\u2002value=\u201cwhite\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2002<SetProperty ref=\u201cborderThickness\u201d value=\u201c3\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201ctext\u201d","src=\u201c{dataValue.@Description}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/TextDisplay>"},{"entry":"\u2003<!-- \u201c0\u201d on the left side of the Gauge -->"},{"entry":"\u2003<TextDisplay id=\u201c_min\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201cfillColor\u201d","\u2002value=\u201ctransparent\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2002<SetProperty ref=\u201cborderThickness\u201d value=\u201c0\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201ctext\u201d","src=\u201c{dataValue.@Min}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/TextDisplay>"},{"entry":"\u2003<!-- \u201c15000\u201d on the upper right side of the Gauge -->"},{"entry":"\u2003<TextDisplay id=\u201c_max\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201cfillColor\u201d","\u2002value=\u201ctransparent\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2002<SetProperty ref=\u201cborderThickness\u201d value=\u201c0\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201ctext\u201d","src=\u201c{dataValue.@Max + \u2018 \u2019 + dataValue.@Units}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<\/TextDisplay>"},{"entry":"<!-- Red Gauge arror rotating according to the current value -->"},{"entry":"<Line id=\u201c_arrow\u201d width=\u201c10\u201d color=\u201cred\u201d style=\u201csolid\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2002<SetProperty ref=\u201cfgColor\u201d","\u2002value=\u201cred\u201d \/>"]},{"entry":["\u2003\u2002<SetProperty ref=\u201cweight\u201d","\u2002value=\u201c4\u201d \/>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201cstyle\u201d","\u2002value=\u201csolid\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201crotation\u201d","src=\u201c{(dataValue\/(dataValue.@Max\u2212"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"dataValue.@Min))*135}\u201d\/>"},{"entry":"\u2003<\/Line>"},{"entry":"\u2003<!-- \u201c8,5000 psi\u201d on the bottom of the Gauge -->"},{"entry":"\u2003<TextDisplay id=\u201c_value\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201cfillColor\u201d","\u2002value=\u201cGreen\u201d src=\u201c{colorConverter(dataValue)}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"\u2003\u2002<SetProperty ref=\u201cborderThickness\u201d value=\u201c1\u201d \/>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"238pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<SetProperty ref=\u201ctext\u201d","value=\u201c\u201d src=\u201c{dataValue + \u2018 \u2019 + dataValue.@Units}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"350pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<\/TextDisplay>"},{"entry":"\u2002<\/View>"},{"entry":"\u2002<Behaviors>"},{"entry":"<Function id=\u201ccolorConverter\u201d parameter=\u201carg0\u201d type=\u201canyNum\u201d>"},{"entry":"\u2003\u2002<!-- Assume that there is a \u201cglobal\u201d Color table with at least the fields below -->"},{"entry":"\u2003\u2002<![CDATA["},{"entry":"\u2003\u2003if (arg0 <= arg0.@Min) return Colors.Alarm.Lo; <!-- red -->"},{"entry":"\u2003\u2003if (arg0 >= arg0.@Max) return Colors.Alarm.Hi; <!-- red -->"},{"entry":"\u2003\u2003return Colors.OK; <!-- green -->"},{"entry":"\u2003\u2002]]>"},{"entry":"\u2003<\/Function>"},{"entry":"\u2002<\/Behaviors>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{},"b":"400"},"Referring back to the drawings,  illustrate example screenshots that depict editing of a visual layout of an example gauge EDGE definition, for example, in a design-time user interface. In one aspect, when the instance of the gauge EDGE  is selected, as shown by a dotted line in , public properties of the EDGE definition are displayed in a property pane . Further, when an HMI element (, ) within the EDGE  is selected, the properties of that element are displayed in respective property panes (, ). For example, in , properties, such as, but not limited to, \u201ctext,\u201d \u201cfill color,\u201d \u201cborder thickness,\u201d and \u201cborder color\u201d associated with HMI element , along with values of the respective properties are displayed in property pane , on selection of the HMI element . In another example, in , properties, such as, but not limited to, \u201ctext,\u201d \u201cfill color,\u201d \u201cborder thickness,\u201d and \u201cborder color\u201d associated with HMI element , along with their corresponding values are displayed in property pane , on selection of the HMI element . Another useful view displayed in the editor (e.g., definition editor ) is that of the dataValue property , as depicted in . Moreover, this view can depict all the internal properties that reference the external data type\/external property. As an example, this cross-referencing can be performed by the binding component .",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIGS. 5A-C"},{"@attributes":{"id":"p-0068","num":"0067"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SimpleGauge name=\u201cGauge_101\u201d>"]},{"entry":[{},"\u2002<dataValue>{::Controller_1\\PressureSensor_101}<\/dataValue>"]},{"entry":[{},"<\/SimpleGauge>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"502","figref":"FIG. 5A"},"Internal to the EDGE, the data bindings are set based on the configuration of the above binding. For example, if the internal HMI elements (, ) are selected, as shown in , the resulting bindings of those HMI elements (, ) are displayed in the respective property panes (, ). As described supra, during creation of the EDGE definition, the full range or potential uses for the EDGE definition are generally not known. In other words, the end user can employ the EDGE definition for data types that are specific to the user's project, other than the intended data types thought of by an EDGE designer during creation of the EDGE definition. To support this scenario, in one aspect, the types employed in the properties of the EDGE definition can be extended by the end users, in a manner such that the EDGE definition remains intact.","Type mappings provide a mechanism for utilizing alternative data types as bindings for properties of an EDGE definition. This enables the definition of a single EDGE to be used against a broader set of data types. That is, the EDGE can work with both a primary data type defined by a property in the EDGE definition and the alternate data types defined in the type mappings. This mechanism provides additional flexibility for both the designer of the EDGE definition and the end user. Returning to the gauge EDGE example, consider an example scenario wherein the designer of the EDGE definition wanted to support a TIMER data type for the dataValue property (which is of anyNum type). In this example scenario, the designer can define a type mapping as part of the EDGE definition as follows:",{"@attributes":{"id":"p-0071","num":"0070"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TypeMappings>"},{"entry":"\u2003<TypeMap to=\u201canyNum\u201d from=\u201cTIMER\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<Map to=\u201canyNum\u201d","from=\u201c{TIMER.ACC}\u201d","\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003\u2002<Map to=\u201canyNum.@Description\u201d from=\u201c{TIMER.@Description}\u201d"},{"entry":"\u2003\u2002\/>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<Map to=\u201canyNum.@Min\u201d","from=\u201c0\u201d","\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003\u2002<Map to=\u201canyNum.@Max\u201d","\u2002from=\u201c{TIMER.PRE}\u201d","\/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"21pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003\u2002<Map to=\u201canyNum.@Units\u201d","from=\u201cmsec\u201d","\/>"]},{"entry":"\u2003<\/TypeMap>"},{"entry":"<\/TypeMappings>"},{"entry":{"@attributes":{"namest":"1","nameend":"3","align":"center","rowsep":"1"}}}]}}]}},"br":{}},{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<TypeMappings>"},{"entry":"\u2009<TypeMap to=\u201canyNum\u201d from=\u201cLegacyStructWithMeta\u201d>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":["\u2003<Map to=\u201canyNum\u201d","from=\u201c{LegacyStructWithMeta.value}\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\u2003<Map to=\u201canyNum.@Description\u201d from=\u201c{LegacyStructWithMeta.-"},{"entry":"\u2003descr}\u201d \/>"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\u2003<Map to=\u201canyNum.@Min\u201d","from=\u201c{LegacyStructWithMeta.-"]},{"entry":[{},"min}\u201d \/>"]},{"entry":["\u2003<Map to=\u201canyNum.@Max\u201d","from=\u201c{LegacyStructWithMeta.-"]},{"entry":[{},"max}\u201d \/>"]},{"entry":["\u2003<Map to=\u201canyNum.@Units\u201d","from=\u201c{LegacyStructWithMeta.-"]},{"entry":[{},"EU}\u201d \/>"]},{"entry":"\u2002<\/TypeMap>"},{"entry":"<\/TypeMappings>"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"In one aspect, the gauge EDGE definition's visual layout is not affected when such type mappings are added. Since the bindings in the visual layout only refer to properties of the EDGE definition, the visual layout is isolated from the details of type mappings. In other words, the visual layout bindings cannot employ any of the type map elements. Moreover, since the type mappings extend the data types supported by the EDGE definition, visualizations in the element browser can also be extended to show the user what types are supported by a given EDGE definition.","The extensibility and flexibility of the type mappings is realized when an instance of an EDGE is created on a screen. With the previously defined type mappings, the gauge EDGE now supports the anyNum, LegacyStructWithMeta and TIMER data types. Instances can be created using any of these types. For example,",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SimpleGauge name=\u201cGauge_102\u201d>"]},{"entry":[{},"\u2002<dataValue type=\u201cLegacyStructWithMeta\u201d>{::Controller_1\\"]},{"entry":[{},"\u2002LegacyStruct_102}<\/dataValue>"]},{"entry":[{},"<\/SimpleGauge>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0076","num":"0075"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"140pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dataValue","{::Controller_1\\LegacyStruct_102.value}"]},{"entry":[{},"@Description","{::Controller_1\\LegacyStruct_102.descr}"]},{"entry":[{},"@Min","{::Controller_1\\LegacyStruct_102.min}"]},{"entry":[{},"@Max","{::Controller_1\\LegacyStruct_102.max}"]},{"entry":[{},"@Units","{::Controller_1\\LegacyStruct_102.EU}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<SimpleGauge name=\u201cGauge_103\u201d>"},{"entry":"\u2002<dataValue type=\u201cTIMER\u201d>{::Controller_1\\Timer_103}<\/dataValue>"},{"entry":"<\/SimpleGauge>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},{"@attributes":{"id":"p-0078","num":"0077"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"147pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property","Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"dataValue","{::Controller_1\\Timer_103.ACC}"]},{"entry":[{},"@Description","{::Controller_1\\Timer_103.@Description}"]},{"entry":[{},"@Min","0"]},{"entry":[{},"@Max","{::Controller_1\\Timer_103.PRE}"]},{"entry":[{},"@Units","msec"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"It can be appreciated that, although the above example gauge EDGE utilizes a complex property, several simple properties can also be exposed for configuration by the end user. For example, the default bindings of the simple properties can employ meta-data from one of the other properties. Using this approach minimizes the configuration of the gauge EDGE instance when bound to data that supports these meta-data fields.","Referring now to , there illustrated is an example system  for associating an EDGE definition with the definition of a data source. Typically, graphic displays in HMI products can be associated with a data source such as, but not limited to, a controller tag variable. In one aspect, the binding component  can be utilized to associate, link, bind and\/or map an EDGE definition (e.g., EDGE definition ) stored in library , with the definition of a data source such as, but not limited to, a User Defined Type (UDT) or an AOI. Moreover, when an instance  of the EDGE is created in an HMI configuration environment , a designer can be prompted with a selection of suitable data sources (-) from a pre-configured program file.","Further, a population component  can be utilized to populate the instance of the EDGE with information to access data value fields that are stored and sourced by a data source (-), associated with properties of the EDGE definition. By associating an EDGE definition with data source type information such as UDT or AOI fields, the configuration of an instance  of EDGE is simplified, reducing the population of suitable data source fields from \u201cwhat ever is configured\u201d to \u201conly instances of the associated data source type.\u201d This also makes it possible to employ an EDGE as a data source inspector, selecting from among a set of data items of the particular type of data source associated with the EDGE definition. In one aspect, associating EDGE definitions with data source type information makes it easier to build domain-specific automation design content, connecting logic in the program file with Graphic Element content in a Configuration file.",{"@attributes":{"id":"p-0082","num":"0081"},"figref":"FIG. 7","b":["210","702","250","245","210","704","704","700","702","210","704","700","702"]},"According to an embodiment, a graphics generation component  can be utilized to automatically create an application that represents logic within the industrial automation device . In one aspect, the graphics generation component  can detect connection of the industrial automation device , for example, via the access network . Further, the graphics generation component  can identify the data from the industrial automation device  and determine a graphic element and\/or faceplate from the HMI application  that is best suited to represent the data. In an automatic mode (e.g., when a user selects an \u201cauto create\u201d option), the terminal  can create an application that best represents the logic in the industrial automation device , without requesting and\/or receiving user input. For example, a discovery component  can be utilized for discovery of information (e.g., logic) from the industrial automation device . Typically, the graphics generation component  can identify logic based on the information provided by the discovery component  or by querying the industrial automation device , and can identify a graphic element (and\/or faceplate) to represent the logic in the HMI application . Alternatively, in a manual mode (e.g., when a user selects a \u201ccreate with prompts\u201d option), the graphics generation component  can query and receive user input to manually select the controls and\/or screen grouping that best represents the logic in the industrial automation device . Typically, the \u201ccreate with prompts\u201d option allows increased flexibility for the user, but requires more user interaction.","In an aspect, the graphics generation component  can build a list of graphic elements that best fit the logic of the industrial automation device  and identify a recommended graphic element from the list, for example a best\/optimal graphic element. As an example, to infer the list of graphic elements, e.g., to reason and draw a conclusion based on a set of metrics, formal arguments, or known mathematical outcomes in controlled scenarios, graphics generation component  can exploit various artificial intelligence (AI) techniques. AI techniques typically apply advanced mathematical algorithms or methods to a data set; such algorithms or methods are part of the methodology and can include decision trees, neural networks, regression analysis, principal component analysis (PCA) for feature and pattern extraction, cluster analysis, genetic algorithm, or reinforced learning. In particular, graphics generation component , or one or more components therein, can employ at least one of numerous methods for learning from the data set and then drawing inferences from models formally represented by employed method. As an example, the numerous methods for learning can include Hidden Markov Models (HMMs) and related prototypical dependency models can be employed. General probabilistic graphical models, such as Dempster-Shafer networks and Bayesian networks like those created by structure search using a Bayesian model score or approximation can also be employed. In addition, linear classifiers, such as support vector machines (SVMs), non-linear classifiers like methods referred to as \u201cneural network\u201d methodologies, fuzzy logic methodologies can also be employed. Moreover, game theoretic models (e.g., game trees, game matrices, pure and mixed strategies, utility algorithms, Nash equilibria, evolutionary game theory, etc.) and other approaches that perform data fusion, etc., can be exploited by the graphics generation component . In one example, the user can provide a final determination on the graphic element to be utilized. In this manner, the user can build an HMI application  on the terminal  without using a design tool.","Additionally or optionally, a security component  can be utilized to restrict access to the industrial automation device . Although security component  is depicted to reside within terminal , it can be appreciated that the security component  can reside within the industrial automation device , a disparate device (not shown) coupled to the access network , distributed over multiple devices, etc. As an example, the security component  can verify security credentials (e.g., username, password, etc.) received from the user (or associated with the terminal ) to grant\/restrict access the industrial automation device . Typically, most any authentication and\/or authorization technique can be utilized, including, but not limited to, biometric identification and\/or verification. The security component  can also apply restrictions on the content generated by the graphics generation component . The HMI application  configured in this manner can be saved on the terminal  and can be available for upload to a desktop editing environment for further manipulation. According to one aspect, the graphics generation component  can also replace the current contents of a configured HMI application  in view of the information received from a newly attached controller (not shown). The security component  can be utilized to prevent accidental or deliberate access of this feature.",{"@attributes":{"id":"p-0086","num":"0085"},"figref":"FIG. 8","b":["800","800","702","210","704","702"]},"According to an aspect, the change can include modifying, adding, and\/or deleting components of the industrial automation device . For example, the name of a tag in the industrial automation device  is changed from \u201cBoiler1\u201d to \u201cMainBoiler\u201d. In the example case of the name change, the update component  can detect that the tag name was changed and update the HMI application  to reflect these changes, without a manual refresh by the user. In another example, if new components are added to the industrial automation device , the update component  can determine what has changed, and then find an optimal location in the HMI application  where the new graphic element corresponding to the new component can be added\/displayed. Typically, the addition of the new graphic element can be impacted by several factors, such as, but not limited to, an update mode that the terminal  is configured for, security of a user logged in at the terminal , configuration information supplied by a designer of the HMI , and the like. As an example, the update modes can include an automatic and\/or a manual update. Moreover, if the update mode is set as automatic, the update component  can identify a new graphic element(s) that can be added and a location for adding the new graphic element(s), without (or with minimal) user intervention. Typically, an AI technique and\/or most any optimization mechanism can be utilized to identify the new graphic element(s) and a location that is best suited for representing the change. Moreover, new logic identified on the industrial automation device  can be employed by the update component  to identify a type of graphic element that best matches\/represents the logic content. This matching\/representing can utilize pre-defined graphic element types that are available in the terminal . In one example, the terminal  (e.g., via display component ) can provide an indication of which new graphic element was added as result of this discovery and\/or the indication can be displayed until it is acknowledged. Alternatively, if the update mode is set as manual, then the update component  can notify the user that a new component has been detected on the industrial automation device  and can prompt the user to select a new graphic element to associate with the new component and\/or a location for the new graphic.","In one aspect, if a component is deleted from the industrial automation device , the update component  can detect the delete and mark the associated component for delete from the HMI application . Typically, the update component  can prompt a user to confirm delete of a graphic element associated with the deleted component (e.g., in automatic and\/or manual modes). Oftentimes, multiple changes can be detected by the update component , for example, new item added, existing item deleted, and existing item renamed etc. In this example case, the update component  can automatically update the HMI application , but prompt the user for input incase of any conflicts and\/or ambiguous situations. For example, if HMI application  includes a reference to a tag called \u201cBoiler1,\u201d which is deleted from the industrial automation device , and two new tags, \u201cMainBoiler\u201d and \u201cBoiler1,\u201d are created on the industrial automation device . In this example situation the update component  can detect that a new tag is created for \u201cMainBoiler\u201d and add an appropriate graphic element to the HMI application . In addition, the update component  can query a user to determine whether the reference to the named tag \u201cBoiler1\u201d is to be changed to match the new \u201cBoiler1\u201d tag in the industrial automation device , or whether a new graphic element is to be created. In one aspect, when graphic elements are modified, added and\/or removed, the update component  can adjust (e.g., auto-scale) the content on a screen of the terminal to accommodate the changes.","According to an embodiment, the update component  can monitor equipment (e.g., industrial automation device ) coupled to the terminal  continuously, periodically, and\/or on-demand. In another embodiment the equipment can push data indicative of the change to the terminal . Additionally or alternatively, if the equipment is disconnected or is not coupled to the terminal , the monitoring by the update component  can be suspended and can be resumed as soon as the connection is re-established. Further, in one aspect, the update component  can provide a visual notification on graphic element(s) that have been added, deleted or changed. Typically, this notification can stay on a screen until a user has acknowledged the addition or change. In the case of a deletion, a user with verified security credentials (e.g., by security component ) can be prompted to approve the delete. Further, the update component  can provide, other users, a notification indicating that the delete has occurred, but acknowledgement is pending. It can be appreciated that security credentials can be obtained and verified (e.g., by security component ) for any change, for example, add, modify and\/or delete, detected by the update component , prior to applying the change.","User security data (e.g., received from security component ) can have an impact on operation of the update component . For example, during an automatic mode, all changes except delete can be performed without user intervention. In the case of a delete, the update component  requests a confirmation from a user authorized to approve the deletion. Moreover, other users (e.g., that are not authorized to approve the deletion) that log in to HMI terminal  can be provided with an indication of the changes that have been made. In contrast, during the manual mode, all changes must be approved by a user with appropriate security access rights. Typically, all other users can be notified that a change is pending approval, so that a user with correct security credentials can be notified and logged in to accept the changes. Moreover, when the authorized user logs in, the update component  can prompt the authorized user to confirm the changes, select new graphic elements and\/or provide a location for the new graphic elements.","Typically, a setup component  can be utilized to configure the HMI application  in the design time environment to identify a level of instance discovery. As an example, the setup component  can be included within a design time client tool. Moreover, a designer can utilize the setup component  to control a scope of an instance discovery feature, for example, disable instance discovery for the application , enable or disable at a screen level based on the scope in the industrial automation device , and\/or configure a screen to adapt based on a tag type. Limiting instance discovery based on scope in the industrial automation device  allows for a single industrial automation device  to have many nodes. For example, a single controller can control two assembly lines. A first screen of the application  can be associated with tags of the first assembly line and a second screen of the application  can be associated with the second assembly line. In this manner, if new logic components are added to the second line, only the second screen will be updated (e.g., by update component . In addition, the setup component  can specify whether the application  can pre-identify a best\/optimal\/preferred choice when a type of logic component is encountered on the industrial automation device . Further, the setup component  can also provide an update frequency or time that the update component  can query the industrial automation device  for changes.","In view of the example systems described above, example methods that can be implemented in accordance with the disclosed subject matter can be better appreciated with reference to flowcharts in . For purposes of simplicity of explanation, various methods disclosed herein are presented and described as a series of acts; however, it is to be understood and appreciated that the subject disclosure is not limited by the order of acts, as some acts may occur in different order and\/or concurrently with other acts from that shown and described herein. It is noted that not all illustrated acts may be required to implement a described method in accordance with the subject specification. In addition, for example, one or more methods disclosed herein could alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, interaction diagram(s) or call flow(s) represent several of the example methods disclosed herein in accordance with the described subject matter; particularly in instances when disparate entities, or functional elements, enact disparate portions of one or more of the several methods. Furthermore, two or more of the disclosed example methods can be implemented in combination, to accomplish one or more features or advantages described in the subject disclosure.",{"@attributes":{"id":"p-0093","num":"0092"},"figref":"FIG. 9","b":["900","902"]},"At , user interaction with the EDGE definition or the controller data type can be enabled. Further, at , data searching and\/or filtering can be performed based on the user interaction. Moreover, methodology  provides bi-directional bindings between graphic element definitions and controller data types, such that, various user scenarios relating to drag\/drop, search\/filter, and other interactions which improve productivity can be enabled and an integrated design-time and run-time experience can be provided. The example method  can be implemented (e.g., executed) by a terminal (e.g., ) that renders controller data. In an aspect, one or more processors configured to provide or that provide the functionality of the one or more terminals can implement the subject example method.",{"@attributes":{"id":"p-0095","num":"0094"},"figref":"FIG. 10","b":["1000","1002","1004","1006"]},"Referring to , there illustrated is an example methodology  for automatically generating graphic elements according to aspects of the subject disclosure. In an embodiment, the terminal (e.g., ) can perform the subject example methodology . At , HMI faceplates can be stored within an EOI terminal. Typically, the EOI terminal can be coupled to an industrial automation device, for example, a controller. At , the controller content can be monitored, for example, periodically, at a pre-defined time and\/or on-demand. At , HMI screens can be generated based on an analysis of the content, for example, automatically, or manually. During automatic generation, an application can be created that optimally represents the logic in the controller. Further, the logic of the controller can be queried and a faceplate and\/or graphic element can be identified based on the logic. Alternately during a manual mode, user input can be received to select the controls and\/or screen groupings that represent the logic in the controller. Furthermore, at , the HMI screens, including graphic elements and\/or faceplates, can be updated based on a change in the content. For example, addition, modification and\/or deletion of a component can be detected and the HMI screen can modified accordingly.","Method(s) disclosed throughout the subject specification and annexed drawings are capable of being stored on an article of manufacture to facilitate transporting and transferring such method(s) to computers or chipsets with processing capability(ies) for execution, and thus implementation, by a processor, or for storage in a memory. In an aspect, one or more processors that enact method(s) described herein can be employed to execute computer-executable code instructions retained in a memory, or any computer-readable or machine-readable medium, to implement method(s) described herein; the code instructions, when executed by the one or more processor implement or carry out the various acts in the method(s) described herein. The computer-executable code instructions provide a computer-executable or machine-executable framework to enact, or implement, the method(s) described herein.","In order to provide additional context for various aspects thereof,  and the following discussion are intended to provide a brief, general description of a suitable computing environment  in which the various aspects of the innovation can be implemented. While the description above is in the general context of computer-executable instructions that may run on one or more computers, those skilled in the art will recognize that the innovation also can be implemented in combination with other program modules and\/or as a combination of hardware and software.","Generally, program modules include routines, programs, components, data structures, etc., that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations, including single-processor or multiprocessor computer systems, minicomputers, mainframe computers, as well as personal computers, hand-held computing devices, microprocessor-based or programmable consumer electronics, and the like, each of which can be operatively coupled to one or more associated devices.","The illustrated aspects of the innovation may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules can be located in both local and remote memory storage devices.","A computer typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer and includes both volatile and non-volatile media, removable and non-removable media. By way of example, and not limitation, computer-readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital video disk (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer.","Computing devices typically include a variety of media, which can include computer-readable storage media and\/or communications media, which two terms are used herein differently from one another as follows. Computer-readable storage media can be any available storage media that can be accessed by the computer and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer-readable storage media can be implemented in connection with any method or technology for storage of information such as computer-readable instructions, program modules, structured data, or unstructured data. Computer-readable storage media can include, but are not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disk (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or other tangible and\/or non-transitory media which can be used to store desired information. Computer-readable storage media can be accessed by one or more local or remote computing devices, e.g., via access requests, queries or other data retrieval protocols, for a variety of operations with respect to the information stored by the medium.","Communications media typically embody computer-readable instructions, data structures, program modules or other structured or unstructured data in a data signal such as a modulated data signal, e.g., a carrier wave or other transport mechanism, and includes any information delivery or transport media. The term \u201cmodulated data signal\u201d or signals refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in one or more signals. By way of example, and not limitation, communication media include wired media, such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media.","With reference again to , the example environment  for implementing various aspects includes a computer , the computer  including a processing unit , a system memory  and a system bus . The system bus  couples system components including, but not limited to, the system memory  to the processing unit . The processing unit  can be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit .","The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures. The system memory  includes read-only memory (ROM)  and random access memory (RAM) . A basic input\/output system (BIOS) is stored in a non-volatile memory  such as ROM, EPROM, EEPROM, which BIOS contains the basic routines that help to transfer information between elements within the computer , such as during start-up. The RAM  can also include a high-speed RAM such as static RAM for caching data.","The computer  further includes an internal hard disk drive (HDD)  (e.g., EIDE, SATA), which internal hard disk drive  may also be configured for external use in a suitable chassis (not shown), a magnetic floppy disk drive (FDD) , (e.g., to read from or write to a removable diskette ) and an optical disk drive , (e.g., reading a CD-ROM disk  or, to read from or write to other high capacity optical media such as the DVD). The hard disk drive , magnetic disk drive  and optical disk drive  can be connected to the system bus  by a hard disk drive interface , a magnetic disk drive interface  and an optical drive interface , respectively. The interface  for external drive implementations includes at least one or both of Universal Serial Bus (USB) and IEEE 1394 interface technologies. Interface  enables functional coupling of computer  to a removable memory, such as a USB memory device or a SD memory card. Other external drive connection technologies are within contemplation of the subject innovation.","The drives and their associated computer-readable media provide nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For the computer , the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer-readable media above refers to a HDD, a removable magnetic diskette, and a removable optical media such as a CD or DVD, it should be appreciated by those skilled in the art that other types of media which are readable by a computer, such as zip drives, magnetic cassettes, flash memory cards, cartridges, and the like, may also be used in the example operating environment, and further, that any such media may contain computer-executable instructions for performing the methods of the disclosed innovation.","A number of program modules can be stored in the drives and RAM , including an operating system , one or more application programs , other program modules  and program data . All or portions of the operating system, applications, modules, and\/or data can also be cached in the RAM . It is to be appreciated that the innovation can be implemented with various commercially available operating systems or combinations of operating systems.","A user can enter commands and information into the computer  through one or more wired\/wireless input devices, e.g., a keyboard  and a pointing device, such as a mouse . Other input devices (not shown) may include a microphone, an IR remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit  through an input device interface  that is coupled to the system bus , but can be connected by other interfaces, such as a parallel port, an IEEE 1394 serial port, a game port, a USB port, an IR interface, etc.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adapter . In addition to the monitor , a computer typically includes other peripheral output devices (not shown), such as speakers, printers, etc.","The computer  may operate in a networked environment using logical connections via wired and\/or wireless communications to one or more remote computers, such as a remote computer(s) . The remote computer(s)  can be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory\/storage device  is illustrated. The logical connections depicted include wired\/wireless connectivity to a local area network (LAN)  and\/or larger networks, e.g., a wide area network (WAN) . Such LAN and WAN networking environments are commonplace in offices and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communications network, e.g., the Internet.","When used in a LAN networking environment, the computer  is connected to the local network  through a wired and\/or wireless communication network interface or adapter . The adaptor  may facilitate wired or wireless communication to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .","When used in a WAN networking environment, the computer  can include a modem , or is connected to a communications server on the WAN , or has other means for establishing communications over the WAN , such as by way of the Internet. The modem , which can be internal or external and a wired or wireless device, is connected to the system bus  via the serial port interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, can be stored in the remote memory\/storage device . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers can be used.","The computer  is operable to communicate with any wireless devices or entities operatively disposed in wireless communication, e.g., a printer, scanner, desktop and\/or portable computer, portable data assistant, communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi and Bluetooth\u2122 wireless technologies. Thus, the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.","Wi-Fi, or Wireless Fidelity, allows connection to the Internet from a couch at home, a bed in a hotel room, or a conference room at work, without wires. Wi-Fi is a wireless technology similar to that used in a cell phone that enables such devices, e.g., computers, to send and receive data indoors and out; anywhere within the range of a base station. Wi-Fi networks use radio technologies called IEEE 802.11(a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wired networks (which use IEEE 802.3 or Ethernet). Wi-Fi networks operate in the unlicensed 2.4 and 5 GHz radio bands, at an 11 Mbps (802.11a) or 54 Mbps (802.11b) data rate, for example, or with products that contain both bands (dual band), so the networks can provide real-world performance similar to the basic 10BaseT wired Ethernet networks used in many offices.","Referring now to , there is illustrated a schematic block diagram of an example computing environment  in accordance with another aspect. The system  includes one or more client(s) . The client(s)  can be hardware and\/or software (e.g., threads, processes, computing devices). The client(s)  can house cookie(s) and\/or associated contextual information by employing the subject innovation, for example.","The system  also includes one or more server(s) . The server(s)  can also be hardware and\/or software (e.g., threads, processes, computing devices). The servers  can house threads to perform transformations by employing the invention, for example. One possible communication between a client  and a server  can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and\/or associated contextual information, for example. The system  includes a communication framework  (e.g., a global communication network such as the Internet) that can be employed to facilitate communications between the client(s)  and the server(s) .","Communications can be facilitated via a wired (including optical fiber) and\/or wireless technology. The client(s)  are operatively connected to one or more client data store(s)  that can be employed to store information local to the client(s)  (e.g., cookie(s) or associated contextual information). Similarly, the server(s)  are operatively connected to one or more server data store(s)  that can be employed to store information local to the servers .","In the subject specification and annexed drawings, terms such as \u201crepository,\u201d \u201cstore,\u201d \u201cdata store,\u201d data storage,\u201d and substantially any term(s) that convey other information storage component(s) relevant to operation and functionality of a functional element or component described herein, refer to \u201cmemory components,\u201d or entities embodied in a \u201cmemory\u201d or components comprising the memory. The memory components described herein can be either volatile memory or nonvolatile memory, or can include both volatile and nonvolatile memory. In addition, the memory components described herein can be statically affixed (screwed, bolted, soldered, etc.) or removably affixed. Further, the memory components can include computer-readable or machine-readable storage media.","By way of illustration, and not limitation, nonvolatile memory can include read only memory (ROM), programmable ROM (PROM), electrically programmable ROM (EPROM), electrically erasable ROM (EEPROM), or flash memory. Volatile memory can include random access memory (RAM), which acts as external cache memory. By way of further illustration and not limitation, RAM can be available in many forms such as synchronous RAM (SRAM), dynamic RAM (DRAM), synchronous DRAM (SDRAM), double data rate SDRAM (DDR SDRAM), enhanced SDRAM (ESDRAM), Synchlink DRAM (SLDRAM), and direct Rambus RAM (DRRAM). Additionally, the disclosed memory components of systems or methods herein are intended to comprise, without being limited to comprising, these and any other suitable types of memory.","The various illustrative logics, logical blocks, modules, and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor, a digital signal processor (DSP), an application specific integrated circuit (ASIC), a field programmable gate array (FPGA) or other programmable logic device (e.g., a PAC), discrete gate or transistor logic, discrete hardware components, or any combination thereof designed to perform the functions described herein. A general-purpose processor may be a microprocessor, but, in the alternative, the processor may be any conventional processor, controller, microcontroller, or state machine. A processor may also be implemented as a combination of computing devices, e.g., a combination of a DSP and a microprocessor, a plurality of microprocessors, one or more microprocessors in conjunction with a DSP core, or any other such configuration. Additionally, at least one processor may comprise one or more modules operable to perform one or more of the steps and\/or actions described above.","Further, the steps or acts of a method or algorithm described in connection with the aspects disclosed herein may be embodied directly in hardware, in a software module executed by a processor, or in a combination of the two. A software module may reside in RAM memory, flash memory, ROM memory, EPROM memory, EEPROM memory, registers, a hard disk, a removable disk, a CD-ROM, or any other form of storage medium known in the art. An example storage medium may be coupled to the processor, such that the processor can read information from, and write information to, the storage medium. In the alternative, the storage medium may be integral to the processor. Further, in some aspects, the processor and the storage medium may reside in an ASIC. Additionally, the ASIC may reside in a user terminal. In the alternative, the processor and the storage medium may reside as discrete components in a user terminal. Additionally, in some aspects, the steps and\/or actions of a method or algorithm may reside as one or any combination or set of codes and\/or instructions on a machine readable medium and\/or computer readable medium, which may be incorporated into a computer program product.","In one or more aspects, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored or transmitted as one or more instructions or code on a computer-readable medium. Computer-readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage medium may be any available media that can be accessed by a computer. By way of example, and not limitation, such computer-readable media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection may be termed a computer-readable medium. For example, if software is transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, digital subscriber line (DSL), or wireless technologies such as infrared, radio, and microwave, then the coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave are included in the definition of medium. Disk and disc, as used herein, includes compact disc (CD), laser disc, optical disc, digital versatile disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs usually reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.","What has been described above includes examples of the disclosed innovation. It is, of course, not possible to describe every conceivable combination of components and\/or methodologies, but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly, the innovation is intended to embrace all such alterations, modifications and variations that fall within the spirit and scope of the appended claims. Furthermore, to the extent that the term \u201cincludes\u201d is used in either the detailed description or the claims, such term is intended to be inclusive in a manner similar to the term \u201ccomprising\u201d as \u201ccomprising\u201d is interpreted when employed as a transitional word in a claim."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 4A-E"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5A-C"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
