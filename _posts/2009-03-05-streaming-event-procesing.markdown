---
title: Streaming event procesing
abstract: A query (e.g., an extensible markup language (XML) Path or XPath query) for one or more components of a document (e.g., XML document) may be received. A forward axis graph including a plurality of nodes with edges connecting the nodes may be generated based on the query and corresponding to a traversal of the document as associated with events (e.g., XML SAX events) corresponding to the document. A plurality of matching states of the forward axis graph including at least one final state may be identified, each matching state including a subset of the nodes wherein each incoming edge to the subset originates from one of the nodes of the subset. Whether the one or more components of the query exist within the document may be based on which events correspond to transitions between the matching states and whether the final state is achieved.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08630997&OS=08630997&RS=08630997
owner: Cisco Technology, Inc.
number: 08630997
owner_city: San Jose
owner_country: US
publication_date: 20090305
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","DESCRIPTION OF EXAMPLE EMBODIMENTS","Overview","Example Embodiments"],"p":["This description relates to processing streaming events.","XPath is a programming language that may be used to identify subelements of documents in the Extensible Markup Language (XML); it has numerous applications including those in business software and network routing. XPath queries define an analysis that can be performed to an XML document to produce a result set, which may be a subset of the document. A software program or other logic that applies an XPath query to XML documents to produce a result set may sometimes be referred to as an XPath processor. Most XPath processors operate on a tree representation of XML documents, using a process known as the Document Object Model (DOM). Other processors may treat the XML document as a stream of events using a method known as Simple API for XML (SAX).","Processing an XML document using the DOM process may be effective, but may require significant resources in constructing the DOM tree, which may slow the overall functionality of a system or device. A common technique used to process an XML document as SAX events is converting XPath statements in deterministic finite automata (DFAs). DFA processing however is limited in that a processor can only handle those XPath statements for which DFAs have already been defined.","According to an example embodiment, an apparatus is provided. A query handler may receive a query for one or more components of a document. An event handler may receive events corresponding to the document. A query engine may generate a forward axis graph based on the query and corresponding to an in-order traversal of the document as associated with the events, the forward axis graph including a plurality of nodes with edges connecting the nodes. A state identifier may identify a plurality of matching states of the forward axis graph including at least one final state, each matching state including a subset of one or more of the nodes wherein each incoming edge to the subset originates from one of the nodes of the subset. A transition identifier may determine transitions between the matching states. A state engine may determine whether the final state is achieved based on which of the received events correspond to the transitions and determine whether the one or more components of the query exist within the document based on whether the final state is achieved.","According to an example embodiment, a method is provided. A forward axis graph may be generated based on a query for one or more components of a document, the forward axis graph including a plurality of nodes connected by edges and arranged based on an in-order traversal of events corresponding to the document. A plurality of matching states may be identified within the forward axis graph, each matching state including a subset of the nodes wherein each incoming edge to the nodes of the subset originates from a node of the subset. A final state for determining whether the one or more components of the document have been identified may be identified from the matching states. One or more transitions may be identified between each of the matching states based on the incoming edges. Whether the document includes the one or more components of the query may be determined based on whether the one or more transitions to the final state have been identified from amongst the events.","According to an example embodiment, a method for identifying one or more components of a document based on a stream of events corresponding to the document is provided. A forward axis graph may be determined based on a query for one or more components of a document, the forward access graph including nodes connected by edges corresponding to the query. The nodes may be arranged into a plurality of matching states with transitions between the matching states corresponding to the edges, each matching state including a subset of one or more of the nodes wherein each incoming edge to the subset originates from one of the nodes of the subset. A final state for determining whether the one or more components of the document have been identified may be identified from amongst the matching states. For each event of a stream of events corresponding to a document until the final state is achieved: a first event may be received from the stream of events, an event determination whether the first event corresponds to one of the transitions may be made, and whether the final state has been achieved may be determined based on the event determination. The one or more identified components may be provided based upon a determination of the final state being achieved.","The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.",{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","100","100","100"]},"According to a non-limiting example embodiment, the system  may be used in an extensible markup language (XML) environment, for network traffic processing. For example, the document may include an XML document produced or otherwise received from user input to a web page. The components of the document to be located or otherwise identified by the system  may include, amongst other information, security or login information, such as user ID and\/or password as provided by a user or system. The system  may receive an extensible stylesheet language (XSL) or XML path language (XPath) query specifying the security components to be searched for from the XML document, and the system  may arrange the XPath query into a forward axis graph that corresponds with an in-order traversal of the XML document.","The XML document may be read and\/or processed as a stream or other sequence of events or data as received from a network using simple API for XML (SAX). The system  may receive the SAX events and, using the forward axis graph, may determine whether the identified security components (e.g., from the XPath query) exist within the XML document. Then for example, the system  may provide the security components to another system or device that may verify the security credentials of the user and may determine whether to grant access to a backend server or other device to the user. One skilled in the art would recognize that the XML environment and network traffic processing application as discussed herein is only one exemplary use of the system , and that the system  may be used in other environments and for other uses as well.","In the system , a network device  may receive a query  indicating one or more components A, B of a document  to be identified from a stream or other sequence of events  corresponding to the document . The network device  may include any network device, or portion thereof, configured to receive the events . For example, the network device  may include a server, firewall, gateway, router, switch, bridge or other network device. As referenced above, the network device  may include any network device that is configured to receive and process the events .","The query  may include any request or command indicating or specifying data to identify from the document . The query  may specify which component A of the document  if found within or amongst the events , is to be returned. Furthermore, the query  may describe the component A based, at least in part, on its relationship to other components B of the document . For example, the query  may indicate that component A is to be returned if found within the document , and that component A is the parent of component B and a child of component C. As indicated above, the query  may include an XPath query that indicates a result set to be returned if found within an XML document (e.g., ).","The components A, B may include anything that may be searched or queried for from amongst the events  of the document . For example, the components A, B may include tagged or otherwise identified elements within the document . As referenced above, the document  may include an XML document whereby the components A and B may be tagged within the XML document  by one or more XML tags. The query  may indicate the tags (e.g., A, B) for which to be searched within the document , and the system  may return the values associated with the tags upon their identification within the document . According to an example embodiment, the components A, B (e.g., as specified by the query ) may include elements, components, or other data or information that does not exist amongst the events  and\/or the document .","According to another example embodiment, the components A, B may include optional components that may be returned if found. For example, the query  may include both mandatory or primary components that are being looked for within the document  and optional components that if found in addition to the primary components are to be returned as well. The query  may also specify target components, the values of which are to be returned if identified.","The document  may include any data or information, at least a portion of which is to be provided to the network device . The document  may include a structured document, such as a web-based document. For example, the document  may include an e-mail (including a document capable of attachment therewith), HTML, Java, XML or other document. As referenced above, the document  may (or may not) include the components A and B as identified by the query . The document  may then be provided, via network , to the network device  as one or more streamed or sequenced events .","The events  may include any data, information or portions of the document  that is provided to the network device . For example, the events  may include data packets or other formatted or unformatted units of data. The events  may be streamed or otherwise transmitted to the network device . As referenced above, the events  may include SAX events that are provided to the network device , including one or more portions of the document . Then, for example, a component identifier  may attempt to locate the one or more components A, B (as indicated by the query ) within the document  from the streamed events  as received via the network .","The network  may include a computer or other communications or information network. For example, the network  may include a wired and\/or wireless intranet, the Internet or other network including a wide area network (WAN) or local area network (LAN). The network  may receive the document  and stream or otherwise transmit the events  to the network device  as discussed above. According to an example embodiment, the network  may use SAX to stream the events  of the XML document  to the network device , where the streamed SAX events  may be processed by the component identifier .","The component identifier  may receive the query  and process the events  based on the query . The component identifier  may determine, from the query , which components A, B are to be identified within the document . The component identifier  may then locate the components A, B from amongst the streamed events  if they exist within the document . If however, the queried components A, B do not exist within the document  and the component identifier  is unable to locate them amongst the streamed events , the component identifier  may return an indication that the components A, B were not identified within the document  and\/or amongst the events . The component identifier  may include multiple sub-components that perform the processing. For example, a query handler  may receive the query  (or multiple queries ) from a system or user.","The query , as referenced above, may specify or describe which components A, B of the document  are to be located. For example, the query  may include one or more location steps A, B. The location steps A, B may include any description or identification of the components A, B, such as a relationship between the components A and B and other elements of the document . For example, the location steps A and B may describe a target component as being a descendant of a root node, a parent of a second component, and a child of a third component, wherein the third component is a sibling of a fourth component that is a child of the second component. Then for example, upon locating the target component, as determined based upon its relationships with the other described components (e.g., in the location steps A, B), the component identifier  may return the identified target component.","An example XPath query  may include \u201c\/descendant::A\/descendant::B\/parent::C\u201d. In the example XPath query , the location steps A, B may be \u201cdescendant::A\u201d, \u201cdescendant::B\u201d and \u201cparent::C\u201d. The components A, B to be identified from the stream of events  may be \u201cA\u201d, \u201cB\u201d and \u201cC\u201d. The component identifier  may determine from the XPath query  that the value of the target component \u201cC\u201d, that is the parent of a component B that is a descendant of a component A, is to be returned if identified. The component identifier  may also determine from the XPath query  that the component A is a descendant of a root or base component.","A query engine  may generate a forward axis graph  from the query . The forward axis graph  may include an algorithm, analysis technique or other alternative expression of the query . The forward axis graph  may allow the component identifier  to analyze and process the events  as they are received, to determine whether the components A, B (as specified by the location steps A, B of the query ) exist in the document . The forward axis graph  may provide advantages over traditional analysis techniques such as constructing a document object model (DOM) or deterministic finite automatas (DFAs).","Traditional analysis using a DOM may include constructing a DOM tree from the received events  which may use significant resources and slow overall processing and functionality by the network device . Constructing DFAs from the query  (e.g., XPath query) is another traditional technique, however DFAs may be limited in that they may limit the system  to only processing a subset of components A, B that may be searched (e.g., only those for components A, B which the DFAs have been defined). Thus, constructing the forward axis graph  may have the advantage of both allowing greater flexibility than using DFAs and may save on resources that may be used in constructing a DOM tree. The forward axis graph  may represent an algorithm that may be used to identify an expected, or matching, sequence of events  for each location step A, B of the query .","The query engine  may construct the forward axis graph  with nodes A-D. The nodes A-D may represent a sequence of one or more of the (expected) events  as corresponding to the location steps A and B of the query . The nodes A-D as shown in the forward axis graph  may be connected by edges (as indicated by the pointing lines). The arrangement of the nodes A-D within the forward axis graph  may correspond to an in-order traversal of the document  and\/or the sequence of events . For example, the XPath query  provided above of \u201c\/descendant::A\/descendant::B\/parent::C\u201d may be represented in the forward axis graph  as shown in .","For example, as shown in , the components  \u201cRoot\u201d, \u201cC\u201d, \u201cA\u201d and \u201cB\u201d may be shown as nodes A-D, respectively along with the relationships as determined from the exemplary XPath query . Node B, as shown in the example query , may be a descendant of node A and have a parent C. As shown, however, rather than depicting node B as having a parent C, the forward axis graph  shows node C having a child B, which would correspond to an in-order traversal of the document . Because for example, a tree structure of the document  may include a parent node (e.g., node B) that appears prior to a child node (e.g., node D), thus the forward axis graph  uses a similar construction. Similarly, the events  may be received in such an order that a parent arrives before a child, thus the forward axis graph  represents this contingency. Based on the exemplary forward axis graph , the bolded node B (e.g., target component ) may represent the value that is returned if identified within the events .","Returning to , a state identifier  may identify a plurality of matching states  from the forward axis graph . A matching state  may include a subset of one or more of the nodes A-D wherein each incoming edge to a node of the subset originates from one of the nodes of the subset. For example, the node A may be one matching state , the nodes A and B may be a second matching state , but the nodes A, B and D may not be a matching state  because of the incoming edge from the node C which was not included as part of the subset.","A transition identifier  may identify transitions  from the forward axis graph . A transition  may include one or more events  (or anticipated events ) that correspond to an edge (or multiple edges) of the forward axis graph  that differentiates a first matching state  from a second matching state . For example, as shown in , the forward axis graph  may include the transitions A, B and C between various matching states A-D. For example, the matching states A-D may include \u201cRoot\u201d, \u201cRoot, C\u201d, \u201cRoot, A\u201d and \u201cRoot, C, A, B\u201d, respectively. Transition C is a multiple event  transition, in that neither \u201cRoot, C, B\u201d nor \u201cRoot, C, A\u201d are a matching state , thus in order to transition from either matching states \u201cRoot, A\u201d C or \u201cRoot, C\u201d B into the next matching state both events  as listed in the transition C are to occur or otherwise be determined.","An event handler  () may receive the events . The event handler  may receive and provide the events  to a state engine  that may compare the received event(s)  against the forward axis graph  (e.g., as shown in ). The state engine  may perform a comparison between a received event  and the transitions  (e.g., as identified from the forward axis graph ), wherein the state engine  may determine which matching state(s)  are currently active (e.g., active states ) and whether a transition  has been received or detected.","The state engine  may determine which of the matching states  are currently active (e.g., active states ) or have otherwise been achieved. The active states  may include any of the matching states  where events  have been received correspond to the transitions  associated with the active states . For example, upon the receipt or determination of a root event , the root matching state A (as shown in ) may be identified as an active state . Then for example, upon a receipt and determination of a \u201cA\u201d open event , corresponding to the transition B, the matching state C may become an active state . Then for example, both the matching states A and C may be identified as active states .","The state identifier  may identify one or more final states  from amongst the matching states . The final state  may include any matching state , that once achieved or otherwise identified as active (e.g., active state ), indicates that the components A, B as identified by the query  have been located or identified amongst the events . Then for example, upon a determination of the final state , the component identifier  may determine that the components A, B do or do not exist within the document , and if they exist, return values associated with the identified components A, B.","The state engine  may determine whether the final state  has been achieved or otherwise becomes identified as active (e.g., ). For example, the final state  in the forward axis graph  (as shown in ) may include all the nodes \u201cRoot\u201d, \u201cC\u201d, \u201cA\u201d and \u201cB\u201d (e.g., A-D) corresponding to the components A, B. Then for example, if the events  corresponding to the transitions A, B and C are received, the state engine  may determine that the final state  has been achieved and the components A, B do exist within the document . A delivery engine  may then provide the target node B \u201cC\u201d (see ) as a result set of the query .","The state engine  may also determine that upon a receipt of final event , that the final state  has not been achieved and that the document  does not include the specified components A, B. For example, the event handler  may determine that a final event  has been received indicating an end of the stream of events  and\/or the document . Then for example, the state engine  may determine from the active states  whether the final state  has been achieved. If, for example, the final state  has not yet been achieved and the final event  has been detected, then the state engine may determine that one or more of the components A, B could not be identified within the document  and\/or stream of events . Then for example, the delivery engine  may return an indication that the document  does not include one or more of the specified components A, B. In other example embodiments, multiple and\/or alternative final states  may exist within the forward axis graph .","The delivery engine , as referenced above, may deliver or provide the result from the component identifier . For example, the delivery engine  may provide an indication that the components A, B could not be identified, or perhaps return nothing if an identification could not be made. Or for example, if one or more of the components A, B were identified amongst the events , the delivery engine  may provide values associated with the identified components A, B.","As discussed above, the system  may be used to extract network traffic processing information from events  or other data packets traveling over, through or via a network . The component identifier  may identify the relevant components A, B from a document  of information, and provide those components A, B, when identified, to another system for verification and\/or other additional processing.",{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 2A","FIG. 1","FIG. 2A"],"b":["122","100","122","120","104","122","124","104","124","104"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 2B","FIG. 1","FIG. 2B"],"b":["122","100","122","132","128","104","140","104"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 3","FIG. 1","FIG. 3","FIG. 3","FIG. 1","FIG. 1"],"b":["300","300","300","300"]},"After a start operation, a query for one or more components of a document may be received (). For example, as shown in , the query handler  may receive the query  for the components A, B of the document . The query  may include the location steps A, B identifying the components A, B.","Events corresponding to the document may be received (). For example, the event handler  may receive the events  corresponding to the document .","A forward axis graph may be generated based on the query and corresponding to an in-order traversal of the document as associated with the events, the forward axis graph including a plurality of nodes with edges connecting the nodes (). For example, the query engine  may generate the forward axis graph  based on the query  and corresponding to an in-order traversal of the document  as associated with the events , the forward axis graph  including the nodes A-D with edges (as indicated by the arrows) connecting the nodes A-D.","A plurality of matching states of the forward axis graph including at least one final state may be identified, each matching state including a subset of one or more of the nodes wherein each incoming edge to the subset originates from one of the nodes of the subset (). For example, the state identifier  may identify the matching states  of the forward axis graph , including the final state . As shown in , the matching states A-D may include a subset of the nodes A-D wherein each incoming edge to the subset originates from one of the nodes A-D of the subset.","Transitions between the matching states may be determined (). For example, the transition identifier  () may determine the transitions A-C between the matching states A, B, C and D as shown in .","Whether the one or more components of the query exist within the document may be determined based on which of the received events correspond to the transitions and whether the final state is achieved (). For example, the event handler  may receive the events  and the state engine  may determine which of the received events  correspond to the transitions  and update the active states  accordingly. Then for example, the state engine  may determine from the active states  whether the final state  has been achieved and whether the components A and B of the query  exist within the document .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 4","FIG. 1","FIG. 4","FIG. 4","FIG. 1","FIG. 1"],"b":["400","400","400","400"]},"After a start operation, a forward axis graph may be generated based on a query for one or more components of a document, the forward axis graph including a plurality of nodes connected by edges and arranged based on an in-order traversal of events corresponding to the document (). For example, the query handler  may receive the query  for the components A, B of the document . Then for example, the query engine  may generate the forward axis graph  based on the query , the forward axis graph  including the nodes A-D with edges (as indicated by the arrows) connecting the nodes (as shown in ).","A plurality of matching states may be identified within the forward axis graph, each matching state including a subset of the nodes wherein each incoming edge to the nodes of the subset originates from a node of the subset (). For example, the state identifier  may identify the matching states  within the forward axis graph . The state identifier  may, for example as shown in , identify the matching states A-D, each matching state A-D including a subset of the nodes (e.g., A-C as shown in ) wherein each incoming edge to the nodes of the subset originating from a node of the subset.","A final state for determining whether the one or more components of the document have been identified may be identified from the matching states (). For example, the state identifier  may identify the final state  for determining whether the components A and B of the document  have been identified.","One or more transitions may be identified between each of the matching states based on the incoming edges (). For example, the transition identifier  () may identify the transitions A-C () between each of the matching states A-D based on the incoming edges.","Whether the document includes the one or more components of the query may be determined based on whether the one or more transitions to the final state have been identified from amongst the events (). For example, the state engine  may determine whether the transitions  to the final state  have been identified from amongst the events . Then for example, state engine  may determine whether the document  includes the components A, B of the query  based on whether the final state  has been achieved.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 5","FIG. 1","FIG. 5","FIG. 5","FIG. 1","FIG. 1"],"b":["500","500","500","500"]},"After a start operation, a forward axis graph may be determined based on a query for one or more components of a document, the forward access graph including nodes connected by edges corresponding to the query (). For example, as shown in , the query handler  may receive the query  for the components A, B of the document . Then for example, the query engine  may determine the forward axis graph  including the nodes A-D with edges (as indicated by the arrows) connecting the nodes A-D.","The nodes may be arranged into a plurality of matching states with transitions between the matching states corresponding to the edges, each matching state including a subset of one or more of the nodes wherein each incoming edge to the subset originates from one of the nodes of the subset (). For example, the query engine  may arrange the nodes A-D into a plurality of matching states  corresponding to the edges. For example, as shown in , the matching states A-D include a subset of one or more of the nodes A-D () wherein each incoming edge to the subset originates from one of the nodes A-D of the subset.","A final state, for determining whether the one or more components of the document have been identified, may be identified from amongst the matching states (). For example, the state identifier  may identify the final state  for determining whether the components A and B of the document  have been identified.","A first event from the stream of events may be received (). For example, the event handler  may receive a first event  from the stream of events .","An event determination whether the first event corresponds to one of the transitions may be made (). For example, the transition identifier  may identify the transitions  between the matching states . Then for example, the state engine  may make an event determination as to whether the first event  corresponds to any of the transitions .","Whether the final state has been achieved may be determined based on the event determination (). For example, the state identifier  may identify the final state  from amongst the matching states . Then for example, the state engine  may update the active states  based on the event determination and may determine whether the final state  has been achieved if it exists amongst the active states .","The one or more identified components may be provided based upon a determination of the final state being achieved (). For example, the delivery engine  may provide the identified components A, B based upon the state engine's  determination that the final state  has been achieved.",{"@attributes":{"id":"p-0066","num":"0065"},"figref":"FIG. 6","b":["600","100","600","600"]},"A network administrator  may provide the XPath query  to the firewall . The network administrator  may determine which information or security credentials are to be extracted from the XML document and verified against the security data .","A network user  trying to gain access to a backend server  may provide security credentials which may included in the XML document  as the XML elements A and B. The network  may provide the XML document  to the firewall  as a series of streaming SAX events . The component identifier  may extract or copy the identified XML elements A and B, as identified by the XPath query , from the SAX events  and check them against the security data .","The security data  may include a database, repository or other system of verifying security information or other information extracted from the XML document . For example, the security data  may include a list of users, passwords and access rights. Then for example, the firewall  may compared the identified XML elements A and B against the security data  to verify the user and password match-up against the security data  and that the identified network user  has the permissions to access to backend server . Upon a verification of this data, the firewall  may grant or deny the network user  access to the backend server . The backend server  may include any secured system, network, device or information trying to be accessed by the network user .",{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 7","FIG. 1","FIG. 1"],"b":["700","700","102"]},"The computing system  may include a memory . The memory  may include any storage medium that may hold, store or otherwise retrieve software, firmware and\/or other code associated with the functionality of the streaming event processing system. For example, the memory  may store or buffer the streamed events  or store components A, B as they are identified.","A processor  may provide overall control and\/or execution for the system . For example, the processor  may execute or otherwise access the information or code stored by the memory . According to an example embodiment, the processor  may execute the functionality of the network device , as discussed above and including the functionality of its components or related systems (e.g., component identifier ).","A network interface  may provide an interface to one or more devices or components. For example, the network interface  may provide an interface to a network, such as network  (of ) and\/or backend server  (of ). The network interface  may be configured to allow the streaming of events , as described above.","Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may be implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers. A computer program, such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.","Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).","Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.","While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0005","num":"0004"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 2A","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 2B","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 4","FIG. 1"]},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 5","FIG. 1"]},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 7","FIG. 1"]}]},"DETDESC":[{},{}]}
