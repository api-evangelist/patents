---
title: System and method for dynamically controlling gamut mapping functions
abstract: A method and system for controlling gamut mapping algorithm parameters and exposing those parameters as user interface elements to allow users to interactively control the gamut mapping algorithm parameters is provided. A request to modify a user interface is received and a modified gamut mapping algorithm parameter element is loaded into the user interface in response. The request to modify can be a request to modify a pre-existing gamut mapping algorithm parameter element or a format of a corresponding gamut mapping algorithm parameter. User specified requests to adjust gamut mapping algorithm parameter elements are received and color management operations are adjusted in response. A three dimensional representation of a device color gamut can be displayed and modified by a user, and an input image that is being processed by the color management operations is displayed and modified dynamically in response to user specific adjustments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07394565&OS=07394565&RS=07394565
owner: Microsoft Corporation
number: 07394565
owner_city: Redmond
owner_country: US
publication_date: 20031230
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS","A. Factoring","B. Redefinition","C. Inline Coding","D. Divorce","E. Rewriting"],"p":["Aspects of the present invention are directed generally to color management systems. More particularly, aspects of the present invention are directed to a system and method for controlling gamut mapping algorithm parameters for user specific control in color management operations.","User specific options and customization of products continues to be of increasing importance in the art of color management technology. Color management is the process of ensuring that color recorded by one device is represented as faithfully as possible to the human eye on a different device. The sensor of an imaging device will have, when compared to the human eye, a limited ability to capture all the color and dynamic range that the human eye can. The same problem occurs on both display devices and output devices. The problem is that while each of imaging, input and output devices have these color and dynamic range limitations, none of them will have limitations in exactly the same way. Therefore conversion rules must be set up to preserve as much of the already limited color and dynamic range information as possible, as well as ensure that the information appears as realistic as possible to the human eye, as it moves through the workflow.","With the differences between source and destination color spaces, colors that are present in the source color space which are not reproducible in the destination color space are referred to as out-of-gamut colors. In response to these out-of-gamut colors, the International Color Consortium (ICC) developed a profile specification that includes four different methods for processing out-of-gamut colors. A method for processing out-of-gamut colors is commonly known by one skilled in the art as a rendering intent or a gamut mapping algorithm. The four ICC profile specification rendering intents are 1) perceptual, 2) saturation, 3) relative colorimetric, and 4) absolute colorimetric. A perceptual rendering intent seeks to preserve the overall appearance of the image. A saturation rendering intent seeks to produce vivid colors and is often utilized for business graphics scenarios. A relative colorimetric rendering intent seeks accurate reproduction, relative to a white point. An absolute colorimetric rendering intent seeks a measurement accurate appearance. A detailed explanation of each type of rendering intent can be found on pages 88-92 of Fraser et al., , Peachpit Press, Berkeley, Calif., 2003.","Most advanced or profile based color management solutions are based on the ICC profile specification. The ICC profile specification includes broad, textual definitions for the different rendering intents. However, the rendering intents of the ICC profile specification do not include reference limitations. Further, the ICC rendering intents are not based upon any mathematical equations. As such, a vendor interprets and implements the rendering intents differently. For example, various vendor applications can perform a perceptual rendering intent. Yet, the resulting appearance of an image will be different for each application since each vendor application can perform a perceptual rendering intent as the vendor so chooses. Such a specification of rendering intents lacks uniformity between various vendors.","Another consequence of the ICC profile specification is the effect on subjective solutions that a user may wish to apply to his\/her workflow. The ICC profile specification combines objective intra-device measurements with the subjective inter-device gamut mapping functions. As such, a user cannot apply his\/her subjective solutions in an efficient and\/or interactive manner. Vendors have begun to include profiling tools for allowing a user to control certain parameters of a rendering intent or gamut mapping algorithm. The MonacoPROFILER 4.5 by Monaco Systems, Inc. of Andover, Mass. and the Heidelberg PrintOpen 4.5 by Heidelberg USA, Inc. of Kennesaw, Ga. are two examples of such a profiling tool. A user has limited and confined parameters that can be changed. The parameters are limited to certain parameters, such as the contrast or saturation of the colors, and the parameters are confined, i.e., a user cannot change the actual parameters to be controlled. A user cannot construct user interface elements to control parameters in a desired format. If the vendor provides a contrast user interface element, the user is confined to a linear input for the contrast parameter from a minimum value to a maximum value. A user cannot change the form of the contrast, such as a non-linear input, e.g., exponential input.","Conventional color management applications require a user to build and save a profile before applying it to an image. A user must exit a color management application prior to applying his\/her parameter choices to an image. If the resulting image is not the desired resulting image, a user must enter the color management application again, apply new settings to the corresponding parameter, exit the application and apply the parameter choices to the image again. A user is left to guess and hope that his\/her parameter choices, when applied to an input image, will provide a desired resulting image. A user cannot see a multi-dimensional representation of the source and destination device color gamuts in order to allow for easier, more efficient control over color management functions.","There is therefore a need for a color management system that allows a user to have more control over color management functions. An aspect of the present invention provides an architecture that enables a user to define color management controls over a certain parameter as designated by the user. The architecture takes parameter inputs from a user and applies them dynamically, in a gamut mapping algorithm, to process an image in a user interface. A user can apply a particular format, such as linear, non-linear, or polar coordinate, to the control function of the parameter as well.","Another aspect of the invention provides for display of the image being processed by the color management operations in a user interface. A user can see the effect of adjustments made to color mapping algorithm parameter elements dynamically on a display. Adjustments to color mapping algorithm parameter elements can be made without having to exit the user interface. Still another aspect of the invention provides for multi-dimensional representations of device color gamuts for the source and\/or destination devices. Display of a multi-dimensional representation allows a user to see the effect that adjustments make to the color gamut and even modify the multi-dimensional representation itself.","In the following description of various illustrative embodiments, reference is made to the accompanying drawings, which form a part hereof, and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.","Color management processing systems typically progress through the following components. Intra-device objective measurements are taken by an input device, such as an image with measured colors by a digital camera. This source input device has a predefined device color gamut. A color appearance model (CAM) is applied to the measured values. Next, an inter-device subjective transform is performed by a rendering intent, i.e., a gamut mapping algorithm. An inverse CAM is applied and the color information is finally sent to a destination device.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 1","FIG. 1"],"b":["100","110","120","110","130","140","150","130","120","140","100","130","100","120","120"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","120","200","200","200","210","210","215","215","210","210","210"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3A","b":["300","300","300","300"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general-purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, random access memory (RAM), read only memory (ROM), electronically erasable programmable read only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as ROM  and RAM . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disc drive  that reads from or writes to a removable, nonvolatile optical disc  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disc drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a digital camera , a keyboard , and pointing device , commonly referred to as a mouse, trackball or touch pad. Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus , but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well-known protocols such as TCP\/IP, Ethernet, FTP, HTTP and the like is presumed, and the system can be operated in a client-server configuration to permit a user to retrieve web pages from a web-based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.","A programming interface (or more simply, interface) may be viewed as any mechanism, process, or protocol for enabling one or more segment(s) of code to communicate with or access the functionality provided by one or more other segment(s) of code. Alternatively, a programming interface may be viewed as one or more mechanism(s), method(s), function call(s), module(s), object(s), etc. of a component of a system capable of communicative coupling to one or more mechanism(s), method(s), function call(s), module(s), etc. of other component(s). The term \u201csegment of code\u201d in the preceding sentence is intended to include one or more instructions or lines of code, and includes, e.g., code modules, objects, subroutines, functions, and so on, regardless of the terminology applied or whether the code segments are separately compiled, or whether the code segments are provided as source, intermediate, or object code, whether the code segments are utilized in a runtime system or process, or whether they are located on the same or different machines or distributed across multiple machines, or whether the functionality represented by the segments of code are implemented wholly in software, wholly in hardware, or in a combination of hardware and software.","Notionally, a programming interface may be viewed generically, as shown in  or .  illustrates an interface Interface as a conduit through which first and second code segments communicate.  illustrates an interface as comprising interface objects I and I (which may or may not be part of the first and second code segments), which enable first and second code segments of a system to communicate via medium M. In the view of , one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although  show bidirectional flow and interfaces on each side of the flow, certain implementations may only have information flow in one direction (or no information flow as described below) or may only have an interface object on one side. By way of example, and not limitation, terms such as application programming interface (API), entry point, method, function, subroutine, remote procedure call, and component object model (COM) interface, are encompassed within the definition of programming interface.","Aspects of such a programming interface may include the method whereby the first code segment transmits information (where \u201cinformation\u201d is used in its broadest sense and includes data, commands, requests, etc.) to the second code segment; the method whereby the second code segment receives the information; and the structure, sequence, syntax, organization, schema, timing and content of the information. In this regard, the underlying transport medium itself may be unimportant to the operation of the interface, whether the medium be wired or wireless, or a combination of both, as long as the information is transported in the manner defined by the interface. In certain situations, information may not be passed in one or both directions in the conventional sense, as the information transfer may be either via another mechanism (e.g. information placed in a buffer, file, etc. separate from information flow between the code segments) or non-existent, as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation, e.g., depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration, and so this list should be considered illustrative and non-limiting.","This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are, however, other ways to implement a programming interface, and, unless expressly excluded, these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of , but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown, some interfaces can be described in terms of divisible sets of functionality. Thus, the interface functionality of  may be factored to achieve the same result, just as one may mathematically provide 24, or 2 times 2 times 3 times 2. Accordingly, as illustrated in , the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA, InterfaceB, InterfaceC, etc. while achieving the same result. As illustrated in , the function provided by interface II may be subdivided into multiple interfaces I, I, I, etc. while achieving the same result. Similarly, interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I, I, I, etc. When factoring, the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of , the functional spirit of interfaces Interface and I remain the same as with , respectively. The factoring of interfaces may also follow associative, commutative, and other mathematical properties such that the factoring may be difficult to recognize. For instance, ordering of operations may be unimportant, and consequently, a function carried out by an interface may be carried out well in advance of reaching the interface, by another piece of code or interface, or performed by a separate component of the system. Moreover, one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.","In some cases, it may be possible to ignore, add or redefine certain aspects (e.g., parameters) of a programming interface while still accomplishing the intended result. This is illustrated in . For example, assume interface Interface of  includes a function call Square (input, precision, output), a call that includes three parameters, input, precision and output, and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario, as shown in , it could just as well be ignored or even replaced with a meaningless (in this situation) parameter. One may also add an additional parameter of no concern. In either event, the functionality of square can be achieved, so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system; however, once it is recognized that precision is not necessary for the narrow purpose of calculating the square, it may be replaced or ignored. For example, instead of passing a valid precision value, a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly, as shown in , interface I is replaced by interface I\u2032, redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I\u2032, redefined to ignore unnecessary parameters, or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects, such as parameters, which are not needed for some purpose, and so they may be ignored or redefined, or processed elsewhere for other purposes.","It may also be feasible to merge some or all of the functionality of two separate code modules such that the \u201cinterface\u201d between them changes form. For example, the functionality of  may be converted to the functionality of , respectively. In , the previous 1st and 2nd Code Segments of  are merged into a module containing both of them. In this case, the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus, for example, formal Call and Return statements may no longer be necessary, but similar processing or response(s) pursuant to interface Interface may still be in effect. Similarly, shown in , part (or all) of interface I from  may be written inline into interface I to form interface I\u2033. As illustrated, interface I is divided into Iand I, and interface portion Ihas been coded in-line with interface I to form interface I\u2033. For a concrete example, consider that the interface I from  performs a function call square (input, output), which is received by interface I, which after processing the value passed with input (to square it) by the second code segment, passes back the squared result with output. In such a case, the processing performed by the second code segment (squaring input) can be performed by the first code segment without a call to the interface.","A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in , one or more piece(s) of middleware (Divorce Interface(s), since they divorce functionality and\/or interface functions from the original interface) are provided to convert the communications on the first interface, Interface, to conform them to a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. This might be done, e.g., where there is an installed base of applications designed to communicate with, say, an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface, in this case interfaces InterfaceA, InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment, and so an intermediary is used to make the old and new interfaces compatible. Similarly, as shown in , a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface D to transmit the interface functionality to, for example, interfaces Iand I, redesigned to work with DI, but to provide the same functional result. Similarly, DI and DI may work together to translate the functionality of interfaces I and I of  to a new operating system, while providing the same or similar functional result.","Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example, there may be a system in which a code segment presented in an intermediate language (e.g. Microsoft IL, Java ByteCode, etc.) is provided to a Just-in-Time (JIT) compiler or interpreter in an execution environment (such as that provided by the .Net framework, the Java runtime environment, or other similar runtime type environments). The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment, i.e., to conform them to a different interface as may be required by the 2nd Code Segment (either the original or a different 2nd Code Segment). This is depicted in . As can be seen in , this approach is similar to the Divorce scenario described above. It might be done, e.g., where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol, but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed-base applications to the new interface of the operating system. As depicted in , this approach of dynamically rewriting the interface(s) may be applied to dynamically factor, or otherwise alter the interface(s) as well.","It is also noted that the above-described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways, serially and\/or in parallel, or with other intervening code. Thus, the alternative embodiments presented above are not mutually exclusive and may be mixed, matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that, as with most programming constructs, there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein, but nonetheless are represented by the spirit and scope of the invention, i.e., it is noted that it is at least partly the functionality represented by, and the advantageous results enabled by, an interface that underlie the value of an interface.",{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 4","FIG. 3A"],"b":["400","400","410","420","430","410","410","415","361","415","410","420","410","420","430","410","420","430","430","400","400"]},"According to at least one aspect of the present invention, a user can determine which gamut mapping functions to control during the color management processing of an input image. A user is not confined to a particular set of parameters established by a vendor. For example, a user can change a set of parameter functions, such as those shown in . As shown in , user interface  includes a new color management parameter identified as \u201cSKIN TONES\u201d. In this example, the \u201cSKIN TONES\u201d parameter may be a function where a user desires that particular skin tone colors change differently than other colors in an input image for color management processing. The new color management parameter can be adjusted by a user by way of a slide bar type control knob . Slide bar type control knob  includes a positioning point  which a user can click and drag to a desired level. As shown, the new color management parameter is shown along a scale with a minimum value and a maximum value.","Not only can a user control which particular color management parameters can be controlled during color management processing, but a user can also establish the format for input of the desired level of the parameter. As used herein, the term \u201cgamut mapping algorithm parameter element\u201d is defined to in what the actual parameter is, e.g., saturation, hue, as well as the format of the parameter, e.g., a linear based scale, an exponential based scale. A \u201cgamut mapping algorithm parameter element\u201d does not include a value of a gamut mapping algorithm parameter.","As shown in , the minimum value and maximum value of the slide bar type control knob  may be a non-linear based scale, such as an exponentially changing format. Therefore, a user can determine which color management parameters to control during color management processing of an image, and the user can also choose the format of the input control for any color management parameter. It should be understood by those skilled in the art that a slide bar type control knob is but one type of adjustable control system and that other types of adjustable control systems may be included. Any number of control knobs and different types of control knobs can be included within a user interface. Further, it should be understood by one skilled in the art that a number of different types of formats of the input control for a color management parameter may be used and\/or offered as an option to a user when constructing a user interface specifically configured to the desires of a user. For example, input parameters may be shown in polar coordinates, retrolinear coordinates, on an exponential scale, on a logarithmic scale, or in any other of a number of different types of formats.","Also, it should be understood by one skilled in the art that any type of parameter may be chosen by a user for use as an adjustable parameter during color management processing. For example, a user may construct a parameter that specifically controls changes to blue colors, saturation of only red colors, and\/or contrast of only green colors. The present invention parameterizes a gamut mapping algorithm and exposes those parameters as user interface elements to allow users to interactively control them. The architecture of the present invention may include an interface description language (IDL) for coding a gamut mapping algorithm to parameterize elements of the color management process. The architecture allows a user to define specific functions to be controlled. A user has the ability to control any function of the gamut mapping algorithm of a color management processing system.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6","b":["600","600","410","420","530","530","515","530","600","620","620","410","620","630","620"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 7","FIG. 6","FIG. 7"],"b":["700","700","620","700","720","720","620","720"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 8","b":["800","800","600","800","820","800","620","820","820","800"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 9","FIG. 3A"],"b":["301","910","915","920","930","940","940","915","910"]},"Concurrently with step , at step , a determination is made as to whether a request has been received for a new parameter format to be applied to a particular parameter in the user interface. If a request is received for a new parameter format to be applied to a particular parameter in the user interface, at step , the new parameter format applied to a particular parameter is loaded into the user interface and the process continues at step . Alternatively, if no request is received for a new parameter format to be applied to a particular parameter in the user interface, the process continues at step . It should be understood by one skilled in the art that step  does not have to occur concurrently with step  and that this is but one example process.","At step , another determination is made as to whether a request has been received to adjust a particular parameter within the user interface. If no request is received to adjust a particular parameter within the user interface, the process ends. If a request is received to adjust a particular parameter within the user interface, one or more of the following steps are performed. At step , the corresponding control knob that has been adjusted is adjusted on the display of the user interface. For example, if the positioning point has been moved to a minimum value or a maximum value, its position on the scale is adjusted in comparison to the level chosen by the user. At step , the newly adjusted parameter value is applied to a 3D representation of a source or destination device color gamut. At step , the newly adjusted parameter value is applied to the displayed image thumbnail, such as displayed image thumbnail  shown in .","Operation of any of the above described user interface elements and processing of a color mapping algorithm can occur in one of three different manners. First, processing of a color mapping algorithm can occur in a sequential manner. In this type of operation, every pixel that comes into the color mapping algorithm is processed and sent out of the color mapping algorithm. This type of operation is an algorithmic operation. Second, processing of a color mapping algorithm can occur by building a profile and building a transform to create a final table from the algorithms each time that a change occurs in the color management process, e.g., a user changes a parameter input value. Third, a delta is applied to the gamut mapping algorithm process. In this manner, a baseline transform is built and a baseline gamut mapping algorithm is built. A delta is computed between the baseline transform and baseline gamut mapping algorithm. Then, a look up table built before the gamut mapping algorithm and a look up table built after the gamut mapping algorithm are concatenated with the delta for all color management processing.","While illustrative systems and methods as described herein embodying various aspects of the present invention are shown, it will be understood by those skilled in the art, that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art, particularly in light of the foregoing teachings. For example, each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. Further, the examples illustrated in the Figures identify a digital camera. It should be understood by those skilled in the art that a digital camera is a type of an image capturing device and that the present invention is not so limited to a digital camera. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The foregoing summary of the invention, as well as the following detailed description of illustrative embodiments, is better understood when read in conjunction with the accompanying drawings, which are included by way of example, and not by way of limitation with regard to the claimed invention.",{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 3A"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIGS. 3B through 3M"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 4-8"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
