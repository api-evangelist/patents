---
title: Encryption method and apparatus with forward secrecy and random-access key updating method
abstract: An encryption method and apparatus that provides forward secrecy, by updating the key using a one-way function after each encryption. By providing forward secrecy within a cipher, rather than through a key management system, forward secrecy may be added to cryptographic systems and protocols by using the cipher within an existing framework. A random-access key updating method can efficiently generate one or more future keys in any order. Embodiments are applicable to forward secret ciphers that are used to protect protocols with unreliable transport, to ciphers that are used in multicast or other group settings, and to protection of packets using the IPSec protocols.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07095850&OS=07095850&RS=07095850
owner: Cisco Technology, Inc.
number: 07095850
owner_city: San Jose
owner_country: US
publication_date: 20011017
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS; PRIORITY CLAIM","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","Computation Tree Approach","Cipher Processing Functions and Key Setup Approach","PSEUDOCODE FOR KEY SETUP","Approach for Key Updating with Segmented Stream Ciphers Using Key Updating Tree","Hardware Overview","OTHER EMBODIMENTS AND MODIFICATIONS","Appendix A: Source Code","Appendix B: Test Vectors","Appendix C: Example Source Code-Forward Secret Counter Mode"],"p":["Continuation-in-part of application Ser. No. 09\/675,570, filed Sep. 29, 2000, now U.S. Pat. No. 6,862,354, from which domestic priority is hereby claimed under 35 U.S.C. \u00a7120, the entire contents of which are hereby incorporated by reference as if fully set forth herein.","The present invention generally relates to cryptology. The invention relates more specifically to an encryption method and apparatus that provides forward secrecy, including a random-access key updating method for generating a future segment of keystream for use in encryption or decryption.","Stream ciphers convert a plaintext to a ciphertext one bit at a time. In general, a stream cipher has a keystream generator that outputs a keystream consisting of a series of bits that, for perfect security, vary in value in an unpredictable manner. Each keystream bit is combined using a Boolean exclusive-OR operation (XOR) with an incoming bit of the plaintext, resulting in an output bit of the ciphertext. Thus, an additive stream cipher encrypts a plaintext by bitwise adding a pseudo-randomly generated keystream into the plaintext, modulo two.","For decryption, the ciphertext bits are XORed with an identical keystream to recover the plaintext bits. Accordingly, a stream cipher is ideally suited to encrypting a continuing stream of data, such as the data passing over a network connection between two computers or other network elements. Also, the security of a stream cipher resides in the randomness of the keystream, however, the keystream must be reproducible in identical form at decryption time. Therefore, design of the keystream generator is essential to security and practical operation.",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1A","b":["401","402","410","412","416","410","414"]},"The keystream generator of such a stream cipher can be described in terms of a state update function and an output function. For example, in , keystream generator  has internal state information , a next state function  (state update function), and output function . The state update function maps the internal state of the keystream generator at one instant to its next value. The output function maps the internal state to a segment of keystream, and the keystream is defined as the concatenation of the values of the output function. Further background information on stream ciphers is provided in B. Schneier, \u201cApplied Cryptography: Protocols, Algorithms and Source Code in C,\u201d 2ed. (New York: John Wiley & Sons, 1996).","Block ciphers such as the Data Encryption Standard (DES) are popularly used for encryption of computer communications. However, empirical evidence indicates that stream ciphers are faster than block ciphers at equivalent security levels. For example, in practical evaluation, the stream ciphers RC4 and SEAL have been determined to be significantly faster than any secure block cipher when implemented on general-purpose computer processors. Further, RC4 and SEAL have survived years of scrutiny by cryptanalysts. SEAL is described in U.S. Pat. No. 5,454,039; U.S. Pat. No. 5,675,652; U.S. Pat. No. 5,835,597; Rogaway, P. and Coppersmith, D., \u201cA Software-Optimized Encryption Algorithm\u201d, Proceedings of the 1994 Fast Software Encryption Workshop, Lecture Notes In Computer Science, Volume 809, Springer-Verlag, 1994, pp. 56\u201363; Rogaway, P. and Coppersmith, D., \u201cA Software-Optimized Encryption Algorithm\u201d, Journal of Cryptology, Volume 11, Number 4, Springer-Verlag, 1998, Pages 273\u2013287, and in the file named \u201cseal-abstract.html\u201d in the folder \u201c\u02dcrogaway\/papers\/\u201d of the domain \u201ccs.ucdavis.edu\u201d on the World Wide Web (www). Both SEAL and RC4 are discussed in Schneier.","Further, theoretically, a stream cipher is inherently immune to a chosen plaintext attack, and can contain more state information than a block cipher. A block cipher needs to have both encryption and decryption to be secure, and needs to have the avalanche property from the middle to both ends. For example, changing a single bit in the middle of the cipher should change each bit of the input and the output with probability of about \u00bd. Also, the stream cipher has the advantage that its outputs are ordered, while a block cipher must be able to efficiently compute every possible output in any possible order. As a result, for many applications stream ciphers are now clearly preferable over block ciphers.","Unfortunately, many stream ciphers have a significant limitation; most cannot efficiently seek to an arbitrary location in their keystream. In this context, seeking to an arbitrary location in the keystream means generating a segment of keystream that is conceptually located an arbitrary number of bits ahead of that portion of keystream that would be generated by ordinary operation of the keystream in its then-current state. This capability is required for numerous practical applications. For example, in a communications protocol that uses unreliable transport, there is no guarantee that data packets of a particular flow will arrive in order, or arrive at all. Examples of such protocols include Internet Protocol (IP), UDP, and RTP. Such protocols commonly experience loss and reorder of packets in practice. Therefore, for a flow that includes successive packets a, b, and c, a cipher may need to decrypt packet c before it decrypts packet b if packet c arrives before packet b. A stream cipher can be used to provide privacy for data communicated using such protocols, if the cipher can seek to the proper location in the keystream for packet c based on a sequence number.","Similarly, an encrypted disk partition or file system can use a stream cipher if the cipher supports the seek operation.","These examples do not require the random access capability of a block cipher, in which all inputs are equally simple to compute. Rather, the example applications require the capability to seek into the keystream, with a seek time that is not significant relative to the time required to generate the keystream itself. In this context, \u201cseek\u201d is used in the same sense as used in the POSIX and ANSI C functions for repositioning the offset of a file descriptor.","In one past approach to providing a stream cipher with a seek capability, the state update function is made linear in some field. In this approach, a seek is a composition of linear operations, and therefore is itself linear. This approach is similar to using a block cipher in counter mode, which imposes requirements on the output function that are similar to the requirements on block ciphers.","In an alternative approach, as taken by Rogaway et al. in the design of the SEAL cipher, a special seek function is defined that pseudo-randomly maps an index and a fixed key to an internal state of a keystream generator. Based on this state information, the keystream generator can generate a length of keystream. The keystream for the cipher is defined to be the concatenation of the keystreams generated for each index, with indices in ascending order. Effectively, this approach creates a stream cipher that can seek to some regularly spaced locations in its keystream.","While this approach is satisfactory for many applications, some applications may require the ability to seek to an arbitrary location in the keystream. For example, an encrypted database containing many small records could have this requirement. In addition, the seek function approach adds security requirements. The seek function itself must be secure, and the seek and advance functions must be such that they do not interact in an insecure way.","Based on the foregoing, there is a clear need for an additive stream cipher method that can seek to an arbitrary location in its keystream.","There is a specific need for a stream cipher that provides a keystream seek capability without using a linear state update function, and without a special seek function.","There is also a need to provide such a stream cipher in an embodiment that achieves excellent performance when executed in software implemented for general-purpose computer processors.","Some cryptographic systems benefit from the property of forward secrecy, in which the compromise of a current key does not cause or imply the compromise of all messages that were previously encrypted with that key or another key. For example, the Internet Key Exchange (IKE) can, optionally, provide forward secrecy by establishing session keys using the Diffie-Hellman key exchange with ephemeral public keys, as described in D. Harkins et al., \u201cThe Internet Key Exchange (IKE),\u201d RFC 2409, November 1998, and H. Orman, \u201cThe OAKLEY Key Determination Protocol,\u201d RFC 2412, November 1998.","In general, a cryptographic system that encrypts a sequence of messages m, m, m. . . provides forward security (or \u201cforward secrecy\u201d) against an adversary A if the disclosure of all the secret state values of the system between the encryption of messages mand mdoes not compromise to A any of the messages m, m, m. . . , which were encrypted before such disclosure, provided that A was not capable of compromising such messages before such disclosure.","Forward security can be provided in a symmetric key encryption system through a process of key updating. Key updating is a technique for providing forward secrecy by using a pseudorandom function to update a key, thus producing a sequence of keys. A key updating function maps a key to another key. For example, a key updating function f may produce a sequence K,K=f(K),K=f(K), . . . , kof l keys. In a practical key updating function, it is computationally infeasible to compute Kgiven Kwhenever j<i.","A segmented stream cipher such as SEAL, the cipher described above, and Counter Mode, is used in cryptographic systems in which the plaintext and ciphertext are segmented. Each segment is identified by a non-repeating integer. Symbolically, the keystream may be viewed as composed of 2segments S, S, . . . , and the segments are indexed by a t-bit value. A segmented cipher that provides forward secrecy could associate a distinct key in a key updating sequence with each segment of the keystream. Thus,\n\n(),\n\nwherein the function g maps keys to segments. Based on the foregoing, there is a clear need in this field for a way to provide forward security in a segmented stream cipher.\n","A cipher that provides forward security may have vulnerability to run-up attacks. A run-up attack is a denial-of-service attack against a protocol that uses the cipher. An adversary sends bogus ciphertexts with packet indices that are far in advance of the last valid index. The receiver of such packets cannot distinguish such packets as invalid without \u201crunning up\u201d the cipher to the proper keystream location. Therefore, there is a need for a way protect against run-up attacks.","Embodiments described herein include a key updating process for providing forward security in a packet security protocol such as IPSec. Packet data communication is often carried using an unreliable data network transport protocol. Examples of unreliable transport protocols include IP, UDP, and RTP. Such protocols may deliver packets out of sequence, and may fail to deliver some packets at all. As a result, a cipher that provides forward secrecy, and is used by a node that receives packets, may need to generate segment keys out of order, for corresponding out-of-order packets. Further, the cipher cannot discard segment keys that have not been used and that may be needed.","In such an approach, a positive constraint is that actual security protocols for use over unreliable transport permit only a certain amount of packet reordering, and reject packets with indices that precede the most recently received index by too great a factor. For example, the IPSec encapsulating security payload (ESP) includes a sequence number in each packet, enabling a receiver to determine the proper sequencing of the packets, and to determine if a packet has been received before. Packets with a sequence number (\u201cindex\u201d) that precedes the most recently received index by too great a factor are dropped. The receiver maintains a replay window, which may be a list of which index values in a fixed range have been received, and the window moves forward as legitimate packets are received. Thus, such protocols enforce a sliding window within which keys may be generated. Keys are not generated for just-received packets that are too old. A pseudocode description of this approach is:",{"@attributes":{"id":"p-0026","num":"0025"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if the index I precedes the replay window then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"reject the packet"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if i is already in the replay window then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"reject the packet"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"authenticate and decrypt the packet;"]},{"entry":[{},"add i to the replay window;"]},{"entry":[{},"slide replay window forward if needed"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end if"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"Forward secrecy is desirable for use with group keys that protect communications among multiple nodes or devices, such as in Internet multicasting. When multiple devices have a key, the chance of compromising the key increases. Forward secrecy can solve this problem, by ensuring that compromise of a current key does not affect previous traffic.","Forward secrecy is also desirable to enhance the security of system logs, as described in M. Bellare et al., \u201cForward Integrity for Secure Audit Logs,\u201d Technical Report, 1997, and in a paper presented by B. Schneier et al., USENIX Security Symposium, 1997. By authenticating each log message with a forward authentication code, a logging system gains the feature that any modification or removal of log messages will be evident to an auditor who knows the authentication key. By updating the authentication key using a one-way function after each message is authenticated, the log system also gains forward secrecy, and an intruder who gains control of a system protected by such a log is unable to unalterably erase the log messages that betray his presence.","In the past, message authentication codes with forward security have been described, especially in the context of secure logging systems. Digital signature systems with forward security are also known. However, these descriptions do not relate to a security system that provides privacy, do not provide for key updating within a cryptographic protocol, and do not address key generation in the presence of imperfect synchronization.","Keystream generators with a random-access property are known. However, these generators do not provide forward security.","Based on the foregoing, there is a clear need in this field for a way to generate keystream or keystream segments for use in encipherment, with forward security.","There is also a need for an approach that provides random access, such that any segment of keystream can be generated on demand.","The foregoing needs, and other needs and objects that will become apparent for the following description, are achieved in the present invention, which comprises, in one aspect, a stream cipher encryption method and apparatus that provides forward secrecy, by updating the key using a one-way function after each encryption. By providing forward secrecy within a cipher, rather than through a key management system, forward secrecy may be added to cryptographic systems and protocols by using the cipher within an existing framework.","A random-access key updating method can efficiently generate one or more future keys in any order. Embodiments are applicable to forward secret ciphers that are used to protect protocols with unreliable transport, and are applicable to ciphers that are used in multicast or other group settings.","A location value that identifies a location of the keystream segment within the complete keystream is received. A state value for a leaf node of a balanced binary tree is created and stored, wherein the leaves of the tree represent the complete keystream and the leaf node represents the keystream segment at the location, by a traversal of the tree from root node to the leaf node wherein a leftward tree branch transition comprises computing a first pseudo-random function and a rightward tree branch transition comprises computing a second pseudo-random function. The keystream segment is created and stored by applying a third function to the state value of the leaf node. The entire keystream can be efficiently computed, in order, via a preorder traversal of the tree.","According to another aspect, the invention provides a stream cipher encryption method and apparatus that can efficiently seek to arbitrary locations in a keystream. A segment of plaintext is received, along with information indicating where the segment of plaintext is located within a complete plaintext. Based on the location information, a keystream segment for that location is created and stored. The segment of plaintext is then enciphered by combining the keystream segment with the plaintext segment using an exclusive OR operation, resulting in creating and storing a segment of ciphertext.","In other aspects, the invention encompasses a computer apparatus, a computer readable medium, and a carrier wave configured to carry out the foregoing steps.","A stream cipher encryption method and apparatus that provides forward secrecy, by updating the key using a one-way function after each encryption. By providing forward secrecy within a cipher, rather than through a key management system, forward secrecy may be added to cryptographic systems and protocols by using the cipher within an existing framework.","A random-access key updating method can efficiently generate one or more future keys in any order. Embodiments are applicable to forward secret ciphers that are used to protect protocols with unreliable transport. Examples of unreliable transport protocols with which embodiments may be used include IP, UDPT, and RTP. Embodiments also are applicable to ciphers that are used in multicast or other group settings.","In the following description, for the purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent, however, to one skilled in the art that the present invention may be practiced without these specific details. In other instances, well-known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.","An improved additive stream cipher is defined in part by a keystream generating approach that uses a balanced binary tree.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 1B","FIG. 1"],"b":["100","102","104","102","106","106"]},"Computation of a keystream segment at a specified location within the complete keystream is carried out by computing from the root node  to one of the leaf nodes  that is associated with the specified location, then computing the rest of the nodes using a pre-order tree traversal. Thus seeking to a location in the keystream is equivalent to computing the state for a particular leaf  in the tree , a computation that requires computational effort that is logarithmic in the size of the keystream.","The root node  and each leaf node  contain m bits of state information. A left branch of tree  is computed using the nonlinear function\n\n(2^)\u2212>(2^)\n\nand a right branch is computed using the nonlinear function\n\n(2^)\u2212>(2^)\n\nThe outputs of the cipher are computed by applying the function\n\n(2^)\u2212>(2^)\n\nto the state information of the leaf nodes, which maps the n internal bits to an output of size r. Accordingly, in , leftward transitions from node to node have reference label a to indicate that such transitions involve computing function a. Similarly, rightward transitions from node to node have reference label b to indicate that such transitions involve computing function b. Exit paths from leaf nodes  have reference label c to indicate that such paths involve computing function c.\n","Generating a complete keystream in order is done by a preorder traversal of the entire tree, starting at the root. A binary tree with height h contains 2\u22121 nodes, 2leaves, and 2\u22122 edges. In this context, a tree with one node is defined as having height one. Each edge is computed exactly once in a traversal of the tree. Therefore, the present approach can generate keystream at a rate of approximately:",{"@attributes":{"id":"p-0064","num":"0063"},"maths":{"@attributes":{"id":"MATH-US-00001","num":"00001"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"mfrac":[{"msup":{"mi":"r2","mrow":{"mi":"h","mo":"-","mn":"1"}},"mrow":{"mrow":[{"msub":{"mi":["R","c"]},"mo":"\u2062","msup":{"mn":"2","mrow":{"mi":"h","mo":"-","mn":"1"}}},{"msub":{"mi":["R","ab"]},"mo":"\u2061","mrow":{"mo":["(",")"],"mrow":{"msup":{"mn":"2","mi":"h"},"mo":"-","mn":"2"}}}],"mo":"+"}},{"mi":"r","mrow":{"msub":{"mi":["R","c"]},"mo":"+","mrow":{"mn":"2","mo":"\u2062","msub":{"mi":["R","ab"]}}}}],"mo":"\u2245"}}},"br":{},"sub":["c ","ab "]},"In one embodiment, the tree is implemented by creating and storing a stack in memory of h elements, the ielement of which contains the state information of the node on the ipath from the root to the leaf corresponding to the current output. Thus, the computation tree defines a cipher with mh bits of internal state, wherein the state update function modifies only a portion of the current state. An important implementation consideration is that the preorder traversal is readily adaptable to parallel processing.","The functions a and b are comparable to the round functions of a substitution-permutation network. They are the main source of non-linearity in the cipher disclosed herein. The function c can be used to hide the internal state, as it has fewer outputs than inputs.","In one embodiment, a stream cipher that can seek to an arbitrary location in its keystream involved computing functions a, b, and c, and a key setup approach.","Improved Cipher Processing Approach","Some general-purpose central processing units, such as the Intel x86 family of processors, have no more than seven (7) available registers. In one specific embodiment, a cipher approach is optimized to operate with seven registers. Accordingly, in this embodiment, the present approach achieves high throughput on general-purpose processors.",{"@attributes":{"id":"p-0070","num":"0069"},"figref":"FIG. 1C","b":"120"},"In block , a state value is created and stored by conceptually traversing a balanced binary tree that represents the complete keystream. As stated in block , a leaf node in the tree represents the keystream segment. Traversal proceeds from the root node to the leaf node associated with the specified keystream segment, as shown in block . To traverse a left branch, a first non-linear function is computed, as shown by block . To traverse a right branch, a second non-linear function is computed, as shown by block .","In block , a third function is applied to the state value, to result in creating and storing the keystream segment.",{"@attributes":{"id":"p-0073","num":"0072"},"figref":"FIG. 1D"},"In block , an unencrypted packet is received as part of a stream of network communications. Block  may involve receiving one or more packets at any suitable network device or end station, such as a router, switch, gateway, server, etc. Also, the unencrypted information may comprise a portion of a packet, e.g., a payload of a packet wherein the header is treated separately.","In block , a location of the packet within a network flow is determined. Block  may involve, for example, determining the order of a particular packet within a larger flow of multiple packets, where the packets are received out of order.","In block , a keystream segment corresponding to the packet location is created and stored. Block  may involve carrying out the steps of  in order to generate a segment of keystream appropriate for the received packet.","In block , the packet is encrypted or enciphered using the keystream segment as applied to a stream cipher function. Block  may involve encrypting only the payload of a packet.","The process of  and the other processes described herein are applicable to encryption of packets that form portions of voice over Internet Protocol flows in network communications as part of the IPSec protocol, and for the encryption of unreliable network traffic in general, for example, traffic transported using the UDP protocol.","In one embodiment, the number m of bits of state per node, and the key size, are specified by parameter values. The parameterizable width enables reduced size versions of the cipher to be studied, enabling numerical experiments on the cipher to be more meaningful. The parameterizable key size is useful to adapt the cipher to different security policies, and to protect against typical plaintext attacks by enabling keys to be increased in size to compensate for the possibility of cryptographic attacks that use precomputation. See, e.g., D. McGrew et al., \u201cAttacks on Linearly Redundant Plaintext and Implications on Internet Security,\u201d the Proceedings of the Seventh Annual Workshop on Selected Areas in Cryptography.","Accordingly, in one embodiment, m is restricted to being a multiple of twelve, because of the internal structure of the functions a and b. In the description herein, x, y and z denote n bit quantities, and each node ,  of tree  has m=3n bits of state denoted as z|y|x, where the symbol | denotes concatenation, and n is a multiple of four","In one embodiment, the state contained by each node , ,  of tree  contains a unique node number to ensure that two distinct nodes cannot have the same state. The node number is denoted as z, and counted as part of the state of the node to which it corresponds. The node number of the root node  is defined as one. If the node number of a node is z, that of its left child is 2z and that of its right child is 2z+1. Functions of the cipher use substitution, rotation, and addition modulo 2. The \u201cfilter\u201d function c is defined as the linear reduction of 2n bits to 2 bits. The branching functions a and b are defined as the composition of a diffusion function d with the nonlinear \u201cconfusion\u201d functions f and g. Thus,\n\na=f\u2218d\n\nand\n\nb=g\u2218d\n\nThe definitions of functions f, g, d, and c are\n\n()=2(((())))|(((())))\n\n()=21|(((())))|((((\u25a1))))\n\n()=2\n\n()=\n\nwhere integer addition modulo two to the power n is denoted as +, bitwise exclusive-or is denoted as \u2295, and bitwise complementation is denoted as \u25a1. The functions R and L indicate rotation by n\/4 bits and to the right and left, respectively (where \u201cright\u201d means in the direction of the least significant bit). The nonlinear function S is implemented as a key-dependent substitution table.\n","The filter function c is a bitwise exclusive or of x and y. The composition of c with f and g is shown in , . Specifically,  is a computational graph diagram that illustrates one embodiment of the function c\u2218f, as indicated by reference numeral , and  is a computational graph diagram that illustrates one embodiment of the function c\u2218g, designated by reference numeral .  is a computational graph diagram that illustrates a concatenation of  and  (reference numeral ).  is a computational graph diagram that illustrates one embodiment of the function f\u2218d (reference numeral ).  is a computational graph diagram that illustrates one embodiment of the function g\u2218d, as indicated by reference numeral .","In , , , , and , inputs X, X, X, X represent the bytes of x, where X is the least significant byte, X is the second least significant, and so on. Similarly, inputs Y, Y, Y, Y represent the bytes of variable y, from least significant to next least significant, and inputs Z, Z, Z, Z represent bytes of variable z. The function S depends only on the lowest n\/4 bits of its argument, and can be viewed as four component functions S, S, S, S, as indicated by like labeled blocks in , , , , and . A key setup approach is defined such that component functions S, S, S, S are invertible.",{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 2","FIG. 3","FIG. 3"]},"The manner in which the functions f and g use a substitution table is similar to that of the block cipher WAKE, which is described in B. Schneier, supra, at . However, in the approach described herein, greater parallelism and lower register usage is achieved by using the substitution table to modify the value of its argument.","Key Setup","Key setup consists of generating four invertible functions, and storing them in concatenated form in a substitution table. The substitution operation herein maps a single variable x to x \u2295s(x), for some substitution table s that depends only on the lowest 8 bits of x. Thus, invertibility requires that the function mapping the lowest 8 bits of x to lowest 8 bits of x \u2295s(x) be invertible. This is achieved by pseudorandomly selecting an invertible function mapping 8 bits to 8 bits, then composing that function with the bitwise exclusive\u2014or function. Invertible functions are pseudorandomly generated by swapping elements at random in the table, an approach similar to that of the RC4 next-state function.","Detailed pseudocode for this method follows, in which S, S, S, and S are the substitution tables described above, \u2018key\u2019 represents the raw key, and i, j, k, and \u2018index\u2019 are integers between zero and . The symbol % denotes the modulus operator. The number of bytes in a key is represented here by the symbol bytesin_key, which is a parameter of this method.","1. (initialize substitution tables to zero)","for i from 0 to 255\n\n","endfor","2. (set substitution tables to key-dependent permutations)","for j from 0 to 255\n\n","endfor","3. (set S equal to the xor of itself with the identity permutation)","for i from 0 to 255\n\n","endfor","C language computer program source code for an example of a key setup approach is presented in Appendix A.","Performance","The functions f and g can each be computed in seven instructions on a general purpose CPU that can issue two instructions simultaneously, using five registers (holding x, y, z, a temporary variable, and a pointer to the substitution table). The theoretical encryption rate is about fifteen cycles per byte (using two execution units).","According to an embodiment, key updating is provided for use with an unreliable transport protocol, without vulnerability to run-up attacks, using a random-access key updating approach. A random-access key updating function is defined such that any future key can be computed efficiently, but finding previous keys is computationally infeasible. As a result, the sliding window of existing protocols is supported.","In this description, a key that is used to derive a sequence of keys, which may or may not be K, is termed the \u201cmaster key.\u201d At any given moment, a current key Kis maintained by the system. Keys with i<c are termed \u201cprevious keys,\u201d and keys with i>c are termed \u201cfuture keys.\u201d","In one specific approach, a key-updating tree is provided. The key-updating tree may be created and stored in memory of a processor that is carrying out cryptographic processing, and used as a basis for generating keys. Although illustrating the key updating tree graphically as a tree is convenient in this description, in practice the key updating tree may be represented as one or more tables, or any other form of abstract data structures or other programmatic constructs that may be convenient in a particular implementation.",{"@attributes":{"id":"p-0104","num":"0132"},"figref":"FIG. 7A"},"In this example embodiment, key updating tree  is a binary tree that comprises a root node designated as the Master Key node, a plurality outbound edges A, B, etc., leading to internal nodes and to leaf nodes. Internal nodes, designated X, X, etc., lead to leaf nodes designated K, K, etc. Thus, the root of the tree  is associated with a master key, and leaf nodes are associated with keys in a key updating sequence. Each outbound edge A, B, etc., is associated with a distinct one-way function f, f. Values of the tree are defined by computing down from the root.","Internal state information is maintained. In an embodiment, the internal state information describes a path from the root to a single leaf.","A binary tree representation is not required; multi-way tree representations may be used.",{"@attributes":{"id":"p-0108","num":"0136"},"figref":"FIG. 7B","sub":["i ","1 "],"sup":["th ","th "]},"In this embodiment, the ikey is defined as K=Xfor 0\u2266i<2, where X\u03b5{0,1}is defined as",{"@attributes":{"id":"p-0110","num":"0138"},"maths":{"@attributes":{"id":"MATH-US-00002","num":"00002"},"math":{"@attributes":{"overflow":"scroll"},"mrow":{"msub":{"mi":["X","i"]},"mo":"=","mrow":{"mo":"{","mtable":{"mtr":[{"mtd":{"mrow":{"msub":{"mi":"f","mn":"0"},"mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":"X","mrow":{"mo":["\u230a","\u230b"],"mrow":{"mi":"i","mo":"\/","mn":"2"}}}}}}},{"mtd":{"mrow":{"msub":{"mi":"f","mn":"1"},"mo":"\u2061","mrow":{"mo":["(",")"],"msub":{"mi":"X","mrow":{"mo":["\u230a","\u230b"],"mrow":{"mi":"i","mo":"\/","mn":"2"}}}}}}}]}}}}},"br":{},"sub":["0 ","1 "],"sup":"t"},"The root value X=K is the master key of the cipher, i.e., the value that is used as input to the cipher process or algorithm. The elements {X,X, . . . ,X} are the nodes of a binary tree that is defined by the one-way functions f,f{0,1}\u2192{0,1}.",{"@attributes":{"id":"p-0112","num":"0140"},"figref":"FIG. 8A"},"Cipher system  generally comprises a cipher engine  that is communicatively coupled to a key update process . The key update process  manages a section of a key updating tree  and a stack . The key update process also stores the index value c of the current key in memory.","In one embodiment, key update process  further comprises a Seek function , Advance function , and Initialize function . The functions , ,  operate on values in the stack  and provide all operations needed to provide a cipher with random-access key updating. An application programming interface that includes the Seek function and Advance function may be configured to provide external applications, processes or algorithms with a way to obtain key segments.","In one aspect of operation, plaintext  is provided to the cipher system  and is received at the cipher engine . The cipher engine determines that it needs to obtain one or more segments of keystream to encipher the plaintext. Accordingly, the cipher process  generates one or more key requests  and sends the key requests to the key update process . The key update process  determines one or more key segments  that are responsive to the key request, and sends the key segments  to the cipher engine  as output.","Using the key segments , the cipher engine  enciphers the plaintext  to result in ciphertext , which is the output of the cipher system . Such output may be delivered to an external system, or returned as part of a function call parameter.","Alternatively, a key function call  of an external program or process directly issues a key request  to key update process . This aspect of operation may be exposed to other programs or processes, for example, through an application programming interface (API).","Key updating as disclosed herein need not update a key after each message sent. Alternatively, a key may be associated with a given time period, such as a day, a portion of a day, etc.","Stack  comprises information identifying t or fewer nodes in the tree. The index c, which is the node number of the current key, is also stored, e.g., in association with the stack. Elements in the stack  store values that identify child nodes of the internal nodes on a path from the current key to the root of the tree, except that a sibling node of the current key is not stored if it precedes the key. As an example, for the state tree of , in which the current key is K, the stack stores values identifying the node locations or node numbers of nodes X, X, and X. All later keys are computable from such state information. In an implementation, stack  may be constructed as an array, linked list, table, etc. Further, a stack structure is not required; any other ordered association of a plurality of data values may be substituted for a stack.","The Initialize function  computes the initial values on the stack. Table 1 presents a pseudocode example of Initialize function , wherein K is the master key, X is a temporary key value, h is the height of the tree in levels, S is the stack, and f, and fare distinct one-way or pseudo-random functions.",{"@attributes":{"id":"p-0121","num":"0149"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"INITIALIZE FUNCTION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"X \u2190 K"]},{"entry":[{},"for i from 1 to h do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"push (S, f(X))"]},{"entry":[{},"set X\u2190f(X)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end for"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The Advance function  computes the next key in the sequence. Table 2 presents a pseudocode example of Advance function .",{"@attributes":{"id":"p-0123","num":"0151"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 2"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"ADVANCE FUNCTION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Given the current stack S, outputs the next key and updates"]},{"entry":[{},"the stack so as to discard used values. The pop( ) function is"]},{"entry":[{},"expected to zero-ize the value that it returns."]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set X \u2190 pop(S)"]},{"entry":[{},"while X is not a leaf do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"push (S, f(X))"]},{"entry":[{},"set X\u2190f(X)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end while"]},{"entry":[{},"output contents of X as key"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{},"b":["816","816"]},"Repeatedly invoking the Advance function  is equivalent to carrying out a pre-order traversal of the trees , , with intermediate state values stored on the stack.","In general, Seek function  is used to generate the keys needed to process packets. The Seek function  computes a future key, but does not discard the current key. To seek to an index d, where d>c, and c is the current index, the Seek function  finds the internal node having the highest node number that is an ancestor of nodes d and c. The key is computed by applying function fand\/or fto walk down the tree to node d. This operation requires no more than \u25141gl\u2518 evaluations of fand\/or f.","Table 3 presents a pseudo-code description of an example of the Seek function .  is a flow diagram of an example of the Seek function, and its use is illustrated in APPENDIX C, which is described further herein in a later section.",{"@attributes":{"id":"p-0127","num":"0155"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 3"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"SEEK FUNCTION"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Given the current stack S, and the index i of a future key,"]},{"entry":[{},"computes the value of the ikey and updates the stack so"]},{"entry":[{},"that its value is appropriate for that index."]},{"entry":[{},"set j to i"]},{"entry":[{},"while the node number of X is not equal to j do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set X \u2190 pop(S)"]},{"entry":[{},"set j \u2190 j\/2"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end while"]},{"entry":[{},"while X is not a leaf do"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"if j is even then"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set X\u2190f(X)"]},{"entry":[{},"push (S, f(X))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"else"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"set X\u2190f(X)"]},{"entry":[{},"push (S, X)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"end if"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"end while"]},{"entry":[{},"output X"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"To further enhance the security of the system, any key management method that is used to establish the master key should discard that key after providing it to cipher process .","Using this configuration, 2l-2 one-way function evaluations are needed in order to produce all l segment keys. Thus, roughly two such evaluations are needed for each segment.",{"@attributes":{"id":"p-0130","num":"0158"},"figref":"FIG. 7C","b":"750","sup":"th "},{"@attributes":{"id":"p-0131","num":"0159"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"center"}},"thead":{"row":[{"entry":"TABLE 4"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}},{"entry":"EXAMPLE STACK CONTENTS AND OUTPUT"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"center"}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"center"}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["S[0]","S[1]","S[2]","S[3]","Output (Node Number)"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"5"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"char","char":"."}},{"@attributes":{"colname":"4","colwidth":"21pt","align":"char","char":"."}},{"@attributes":{"colname":"5","colwidth":"98pt","align":"char","char":"."}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["3","5","9","8","8"]},{"entry":["3","5","9","0","9"]},{"entry":["3","5","0","0","10"]},{"entry":["3","11","0","0","11"]},{"entry":["3","0","0","0","12"]},{"entry":["7","13","0","0","13"]},{"entry":["7","0","0","0","14"]},{"entry":["15","0","0","0","15"]},{"entry":{"@attributes":{"namest":"1","nameend":"5","align":"center","rowsep":"1"}}}]}}]}}},{"@attributes":{"id":"p-0132","num":"0160"},"figref":["FIG. 9A","FIG. 7C"],"b":["816","812"]},"Following initialization, the stack  holds the following values, from the bottom of the stack to the top: 3, 5, 9, 8. Such values may be determined using the Initialize function .","At block , a request for a segment of keystream is received, as also illustrated by key request  of .","In response, at block , the topmost value on the stack is popped and a key node value is set to the popped value. Thus, the key node value is set to \u201c8,\u201d referring to node  of the tree  of . Further, the topmost value of the stack is set to \u201c0\u201d, as indicated by block . In an embodiment, block  and block  may be implemented in a single pop function.","In block , a test is carried out to determine whether the key node value represents a leaf node. For node , the test is true. Therefore, control passes to block , in which the segment of key stream represented by node  is output or returned.","When a subsequent key request  is received, a similar process is carried out, except that the value \u201c9\u201d is now at the top of the stack. Therefore, the segment of keystream represented by node  is returned as output.","When a third key request  is received, the value \u201c9\u201d is popped from the top of the stack. However, node  is not a leaf node. Therefore, control passes to block , in which the value f(X) is computed and pushed onto the top of the stack. In block , the key node value is set to f(X). Applying f(X) is equivalent to walking down the left branch from node  to arrive at node . Therefore, X is set to \u201c10\u201d, and the segment of keystream represented by node  is returned as output.","Memory Optimization","To provide better performance in processing out-of-order packets, intermediate values that are computed during the generation of out-of-order keys can be cached.  is a block diagram of a cipher system that includes a cache  that is communicatively coupled to key update process . For example, by increasing the amount of storage from h to h+w\u22121, all possible intermediate values that are generated, when the keys are no more than w keys out of order, may be stored.","One specific implementation is guided by the observation that any sequence of w or fewer keys is on a subtree of the key-updating tree of height \u250c1g w\u2510+1. Fixed storage space is reserved for a pointer-based binary tree in an amount equal to the size of the subtree. The tree comprises nodes whose values have been set to zero previously, and nodes whose values have not yet been used. As a result, neither data copying nor memory allocation is required, providing a performance benefit whenever the packet stream is disordered. Further, enough memory is available to store several keys.","Security Issues","The approach disclosed herein is highly secure. In particular, no previous keys are computable using fand fgiven the current value of the state retained by the traversal algorithm. While a previous key would be computable using fand\/or fgiven one of its ancestors or itself, in the approach herein, for each value X stored on the stack by the Initialization, Seek, or Advance functions, no ancestor of X is stored. Since the current key is merely the contents of the node identified in the top element of the stack, no ancestor of the current key is ever stored. The Advance function discards each key as it is used, so no previous key or any ancestors of a previous key are stored. Further, since an adversary A cannot distinguish the function for ffrom a random function in polynomial time, a cipher that uses the keys associated with the leaves of a key updating tree, from left to right, to encrypt a sequence of messages provides forward security.","Since many keys are generated by key updating, a key updating method may be viewed as more susceptible to key collision attacks. Such attacks may use the birthday paradox to reduce the number of trial encryptions needed to find an unknown key, by considering all of the collisions in two sets of ciphertexts, one of which is the set gathered from eavesdropping and the other of which was generated using known, random key values. If such an attack is possible, and if l keys are used, then up to 1g l bits of effective keysize are lost. Accordingly, in one embodiment, the segment keys are at least 1g l bits larger than the desired effective key size.","Another concern is that each iteration of a pseudo-random function reduces the size of the set of possible keys by about 1\/e. As a result, a loss in effective keysize no greater than 1gj bits, for all j>2. Accordingly, in conventional key updating, the final key is about 1g l bits less secure than its nominal key size. However, the approach disclosed herein provides better protection against this attack, because the path sizes from the master key to the keys in the sequence are logarithmic in the length l of that sequence. Thus, with the approaches herein, the loss of effective key size is no greater than 1g 1g l.","It also possible that a cipher using the approaches herein could be subjected to time-memory tradeoff attacks that invert the one-way function. Such attacks can remove up to one-third of the effective key size. Accordingly, in an embodiment, the segment keys are made at least one-third larger than the desired effective key size.","Applications of Forward Security","In many cases, the greatest threat to a secret key system is direct loss, through improper manipulation of software functions, operation system insecurity, or physical insecurity of the system, the failure of tamper-resistant hardware or software, user negligence, or maliciousness on the part of trusted users. In these cases, forward security can substantially improve the system.","Embodiments are applicable to generating keys for shared use among members of a group. When a secret key is shared among a group of users, rather than a pair of users, the chance that it can be acquired by an untrusted party increases. A cipher with forward secrecy can limit the effect of a compromised key. In one embodiment, the approaches disclosed herein are used for generating keys for groups, when the use of the group key is serialized. In this context, serialized usage means that only one user in the group can encrypt messages using the key at any particular time. An example of serialized usage occurs in multicast communications, and other contexts in which one group member sends a message to many other group members.","Effective group security systems normally have a method to recover from the compromise of a group key, or to respond to group members who join or leave, by generating a new key that is known only to the current members of the group. Such methods can use the forward secret cipher described herein as their key encryption cipher.","The Internet security protocol (IPSEC) provides network layer security services for computer devices that communicate using Internet Protocol over public networks. IPSEC is defined in S. Kent et al., IETF Request for Comments (RFC) 2401, RFC 2402, and RFC 2406. IPSEC services include authentication, data confidentiality, and data integrity.","IPSEC can be used either in transport mode or in tunnel mode. Transport mode is most typically applied to protect a network link between two hosts, and is obtained by adding an encapsulating payload (ESP) to data packets, or by adding an authenticating header (AH) after the IP header of data packets to provide end-to-end protection.","Tunnel mode is normally used to secure communications of a remote access client to a server. In tunnel mode, the ESP or AH header is added to the original packet, which is then encapsulated with a new IP header. IPSEC tunnel mode allows IPSEC to be provided by intermediate hosts or security gateways when end-to-end protection is not possible. For example, an IPSEC virtual private network (VPN) can link remote sites of an organization, and the cryptographic data confidentiality service of ESP is used to provide privacy on the Internet links between the sites. Use of IPSEC to support VPNs is a significant application because great cost savings may be realized in replacing fixed private links with VPN-protected public network links.","Another practical application of IPSEC involves communication with mobile users. A mobile user may connect to a server of an affiliated organization over the Internet. An IPSEC tunnel, which comprises a pair of IPSEC Security Associations (SA's), is created between the remote access client and a security gateway or firewall at the server or organization.","Cipher block chaining or a stream cipher can be used to produce the ESP header. According to an embodiment, as described in the next section, forward secret cipher block chaining or forward secret counter mode are used to generate the ESP header for a packet flow that is secured using IPSEC. In each case, the maximum allowed packet reorder (\u201creplay window size\u201d) may be approximately 64, and the maximum number of packets that can be encrypted under a single key is 2\u22121. Typical packet sizes may range from 20 bytes to 1500 bytes, and sizes up to 64,535 bytes may be used under Internet Protocol version four (IPv4).","Another use for random-access key updating as disclosed herein is protecting communication between a highly trusted computer system, such as a set of security servers, and a less trusted system, e.g., a laptop. In some circumstances it may be acceptable to require the less-trusted system to use key updating, while allowing the trusted system to store the master key. In this case, random-access key updating allows the trusted systems to efficiently compute the current key. If there are many laptops, the servers can compute the current key of any laptop without maintaining the current key of any laptop.","Random access key updating with forward security as disclosed herein also is applicable to the authentication of system logs. In this approach, a log auditor could generate the authentication keys in arbitrary order, removing the need for sequential processing. When a log contains a large number of entries, questionable entries could be checked quickly and at random without regard of their temporal positioning in the log. Further, the log could be checked using parallel processing approaches.","Specific Example Application: Forward Secret Counter Mode and Forward Secret Block Chaining Mode","Block ciphers normally can operate in a counter mode and a cipher block chaining mode. In counter mode, sequence numbers are used as the input to the cipher. Instead of using the output of an encryption algorithm to fill a register, the input to the register is a counter. After each block encryption, the counter increments by a constant. In block chaining mode, the input to the cipher is XOR'd with the XOR of all previous ciphertext blocks.","The approaches described herein are applicable to counter mode and block chaining modes. In one embodiment, a forward secure counter mode comprises counter mode in which the key is determined by key updating as described herein. In another embodiment, a forward secure cipher block chaining mode comprises cipher block chaining mode in which the key is determined by key updating as described herein.","In forward secure counter mode and forward secure block chaining, the block cipher underlying the mode defines the one-way functions that are used in key updating. Encryption of P under the block cipher encryption function, using the key K, is denoted as e(K, P). The functions fand fare defined as f(X)=e(A,X)\u2295X and f(X)=e(A,X)\u2295X, where Aand Aare fixed keys that are used only in the one-way functions, and \u2295 denotes bitwise binary addition. The key-updating tree has a height of 32 levels.","The fixed keys may be specified as additional parameters in a function call, or may be fixed for all uses of forward secure counter mode and forward secure block chaining. Using fixed key values for all uses of forward secure counter mode and forward secure block chaining has the advantage of simplicity, but some effective key size is given up to pre-computation attacks.","The keystream segment corresponding to the sequence number j is generated by using the jkey in the sequence in counter mode, where the block cipher inputs use a fixed offset value. Symbolically, the jkey or keystream segment is:\n\n()|(,(1)mod 2)|(,(2)mod 2)| . . . ,\n\nwhere Kis the jkey in the random access key updating sequence, w is the width of the block cipher in bits, and r is the w-bit fixed offset value.\n","In one specific approach, forward secure counter mode is used within the IPSec ESP, using a stream cipher ESP such as 128-bit encipherment with the cipher RIJNDAEL, developed in Belgium and proposed for adoption as the United States Advanced Encryption Standard (AES). This is only one example, and any other suitable block cipher can be used. In this specific approach, the effective key size is reduced by about 1g 32=5 bits, due to the range-compression effect. While the reduction of the effective key size from 128 to 123 bits is not ideal, it is not considered significant in current practice.","APPENDIX C provides example source code of an implementation, including tree traversal processes, for forward secret counter mode.",{"@attributes":{"id":"p-0166","num":"0194"},"figref":"FIG. 10","b":"1000"},"Computer system  includes a bus  or other communication mechanism for communicating information, and a processor  coupled with bus  for processing information. Computer system  also includes a main memory , such as a random access memory (\u201cRAM\u201d) or other dynamic storage device, coupled to bus  for storing information and instructions to be executed by processor . Main memory  also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system  further includes a read only memory (\u201cROM\u201d)  or other static storage device coupled to bus  for storing static information and instructions for processor . A storage device , such as a magnetic disk or optical disk, is provided and coupled to bus  for storing information and instructions.","Computer system  may be coupled via bus  to a display , such as a cathode ray tube (\u201cCRT\u201d), for displaying information to a computer user. An input device , including alphanumeric and other keys, is coupled to bus  for communicating information and command selections to processor . Another type of user input device is cursor control , such as a mouse, a trackball, or cursor direction keys for communicating direction information and command selections to processor  and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second axis (e.g., y), that allows the device to specify positions in a plane.","The invention is related to the use of computer system  for performing a stream cipher encryption method and apparatus that provides forward secrecy, and a method of generating an arbitrary segment of keystream. According to one embodiment of the invention, a stream cipher encryption method and apparatus that provides forward secrecy are provided by computer system  in response to processor  executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory  from another computer-readable medium, such as storage device . Execution of the sequences of instructions contained in main memory  causes processor  to perform the process steps described herein. In alternative embodiments, hard-wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus, embodiments of the invention are not limited to any specific combination of hardware circuitry and software.","The term \u201ccomputer-readable medium\u201d as used herein refers to any medium that participates in providing instructions to processor  for execution. Such a medium may take many forms, including but not limited to, non-volatile media, volatile media, and transmission media. Non-volatile media includes, for example, optical or magnetic disks, such as storage device . Volatile media includes dynamic memory, such as main memory . Transmission media includes coaxial cables, copper wire and fiber optics, including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves, such as those generated during radio wave and infrared data communications.","Common forms of computer-readable media include, for example, a floppy disk, a flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other optical medium, punchcards, papertape, any other physical medium with patterns of holes, a RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier wave as described hereinafter, or any other medium from which a computer can read.","Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor  for execution. For example, the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system  can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus  carries the data to main memory , from which processor  retrieves and executes the instructions. The instructions received by main memory  may optionally be stored on storage device  either before or after execution by processor .","Computer system  also includes a communication interface  coupled to bus . Communication interface  provides a two-way data communication coupling to a network link  that is connected to a local network . For example, communication interface  may be an integrated services digital network (\u201cISDN\u201d) card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example, communication interface  may be a local area network (\u201cLAN\u201d) card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation, communication interface  sends and receives electrical, electromagnetic or optical signals that carry digital data streams representing various types of information.","Network link  typically provides data communication through one or more networks to other data devices. For example, network link  may provide a connection through local network  to a host computer  or to data equipment operated by an Internet Service Provider (\u201cISP\u201d) . ISP  in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the \u201cInternet\u201d . Local network  and Internet  both use electrical, electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link  and through communication interface , which carry the digital data to and from computer system , are exemplary forms of carrier waves transporting the information.","Computer system  can send messages and receive data, including program code, through the network(s), network link  and communication interface . In the Internet example, a server  might transmit a requested code for an application program through Internet , ISP , local network  and communication interface . In accordance with the invention, one such downloaded application provides for carrying out a stream cipher encryption method and apparatus that provides forward secrecy.","The received code may be executed by processor  as it is received, and\/or stored in storage device , or other non-volatile storage for later execution. In this manner, computer system  may obtain application code in the form of a carrier wave.","Accordingly, a stream cipher encryption method and apparatus that provides forward secrecy has been described. The disclosed approach is easily integrated in current systems by defining ciphers that provide forward security and that are compatible with current security systems and architectures. Processes and data structures that efficiently provide random access in a key updating sequence have been described.","Further, a fast stream cipher that can efficiently seek to arbitrary locations in its keystream has been described. Unlike RC4, which cannot seek at all, and SEAL, which can seek only to a limited number of locations in the keystream, the approach described herein can seek to any location in the keystream. The cipher can efficiently seek to arbitrary locations in its keystream despite the fact that it does not use a linear state update function. This property is apparent from the architecture of the cipher in which its computation graph may be represented by a tree. Keystream can be efficiently generated using a preorder traversal of the tree, and the tree structure lends itself to parallelization.","Implementations may be embodied in one or more hardware circuits, one or more field programmable gate arrays (FPGAs), or in one or more software programs or processes. Any such implementation may be parallelized, offering significant gains in performance, as a result of the tree structure of the computations.","In an alternative embodiment, internal nodes may be used for tree traversal in addition to the leaf nodes. Directed graphs of many forms may be used as alternatives to trees.","In the foregoing specification, the invention has been described with reference to specific embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.","The ANSI C source code for the functions f, g, d and h is given below, in which each function is implemented using a macro. In these definitions, a and b are 32-bit unsigned integers (or uint32_ts, in POSIX terminology), and the function F is represented by the array F[256] of 32-bit unsigned integers. The macros ROT8 and ROT24 implement rotation by eight bits and twenty-four bits, respectively, where the direction of rotation is towards the most significant bit.",{"@attributes":{"id":"p-0183","num":"0211"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"#define ROT8(x) (((x) << 8) | ((x) >> 24))"]},{"entry":[{},"#define ROT24(x) (((x) << 24) | ((x) >> 8))"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"#define f(x, y, z, F) (",{}]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"z += z,","\\"]},{"entry":[{},"y = ROT24(y),","\\"]},{"entry":[{},"x {circumflex over (\u2009)}= F[x & 0xFF],","\\"]},{"entry":[{},"y {circumflex over (\u2009)}= F[y & 0xFF],","\\"]},{"entry":[{},"y = ROT24(y),","\\"]},{"entry":[{},"x = ROT8(x),","\\"]},{"entry":[{},"x {circumflex over (\u2009)}= F[x & 0xFF],","\\"]},{"entry":[{},"y {circumflex over (\u2009)}= F[y & 0xFF],","\\"]},{"entry":[{},"x = ROT8(x)","\\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")",{}]},{"entry":[{},"#define g(x, y, z, F) (","\\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"z += (z+1),","\\"]},{"entry":[{},"x = ~x;","\\"]},{"entry":[{},"x = ROT24(x),","\\"]},{"entry":[{},"x {circumflex over (\u2009)}= F[x & 0xFF],","\\"]},{"entry":[{},"y {circumflex over (\u2009)}= F[y & 0xFF],","\\"]},{"entry":[{},"x = ROT24(x),","\\"]},{"entry":[{},"y =ROT8(y),","\\"]},{"entry":[{},"x {circumflex over (\u2009)}= F[x & 0xFF],","\\"]},{"entry":[{},"y {circumflex over (\u2009)}= F[y & 0xFF],","\\"]},{"entry":[{},"y = ROT8(y)","\\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")",{}]},{"entry":[{},"#define d(x, y, z) (","\\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"77pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"x += y","\\"]},{"entry":[{},"y += x,","\\"]},{"entry":[{},"x += y","\\"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"#define h(a, b) (a {circumflex over (\u2009)} b)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0184","num":"0212"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"uint32_t"]},{"entry":[{},"leviathan_output(int leaf_num) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int i;"]},{"entry":[{},"uint32_t x, y, z;"]},{"entry":[{},"i = 1 << (LEVIATHAN_HEIGHT-1);"]},{"entry":[{},"x = y = 0;"]},{"entry":[{},"z = 1;"]},{"entry":[{},"while (i > 0 ) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"d(x, y, z);"]},{"entry":[{},"if (i & leaf) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"g(x, y, z, F); \/* right *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"} else {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"f(x, y, z, F); \/* left *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"i >>= 1;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"return h(x, y);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},{"@attributes":{"id":"p-0185","num":"0213"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"#define TABLE_SIZE 256"},{"entry":"#define NUM_PASSES 2"},{"entry":"void init_leviathan_key(const unsigned char *key,"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"size_t bytes_in_key, word *F) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int i, j, k, index;"]},{"entry":[{},"word tmp;"]},{"entry":[{},"for (i=0; i<TABLE_SIZE; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"F[i] = 0;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2002* Each iteration of this loop we form the permutation of one line"},{"entry":"\u2002* (and, incidentally, also permute previously formed lines)"},{"entry":"\u2002*\/"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (j=0; j<4; j++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*"]},{"entry":[{},"\u2002* Initialize the new line to the identity permutation, and"]},{"entry":[{},"\u2002* shift the existing lines over one"]},{"entry":[{},"\u2002*\/"]},{"entry":[{},"for (i=0; i<TABLE_SIZE; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"F[i] = F[i] * TABLE_SIZE + i;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/*"]},{"entry":[{},"\u2002* Initialize index to a line-dependant value, so that the"]},{"entry":[{},"\u2002* four lines will get distinct permutations"]},{"entry":[{},"\u2002*\/"]},{"entry":[{},"index = j;"]},{"entry":[{},"\/*"]},{"entry":[{},"\u2002* Do the byte-swapping NUM_PASSES times, using the new"]},{"entry":[{},"\u2002* line as the index"]},{"entry":[{},"\u2002*\/"]},{"entry":[{},"for (k=0; k<NUM_PASSES; k++) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"for (i=0; i < TABLE_SIZE; i++) {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"index += (key[i % bytes_in_key] + F[i]);"]},{"entry":[{},"index &= (TABLE_SIZE\u22121);"]},{"entry":[{},"tmp = F[i];"]},{"entry":[{},"F[i] = F[index];"]},{"entry":[{},"F[index] = tmp;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"}"]},{"entry":[{},"\/*"]},{"entry":[{},"\u2002* Finally, set S0 equal to the xor of itself with the"]},{"entry":[{},"\u2002* identity permutation, so that (S0 [x] {circumflex over (\u2009)} x) is a permutation."]},{"entry":[{},"\u2002*\/"]},{"entry":[{},"for (i=0; i < TABLE_SIZE; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"F[i] {circumflex over (\u2009)}= i;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}},"The key represented by the hexadecimal number FA57C5C0C0DE produces the following keystream (presented as a left to right, top to bottom list of 32 bit hexadecimal numbers):","0x1861600e, 0x88244832, 0x2a6d8201, 0xffd0f37d,","0xb8767ce6, 0xe7bd8954, 0xb3fc97f0, 0xe88caba1",{"@attributes":{"id":"p-0186","num":"0214"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"\/*"},{"entry":"\u2002* fscm.c"},{"entry":"\u2002*"},{"entry":"\u2002* example code for the Forward Secret Traversal Algorithm"},{"entry":"\u2002*"},{"entry":"\u2002* David A. McGrew"},{"entry":"\u2002*"},{"entry":"\u2002*\/"},{"entry":"#include"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["typedef unsigned word;","\/* holds state of a node","*\/"]},{"entry":["#define height 5","\/* the height of the tree","*\/"]},{"entry":"typedef struct {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"14pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int top ;","\/* indexes top element in stack","*\/"]},{"entry":[{},"word node[height];","\/* stack containing path from highest","\u2002*"]},{"entry":[{},{},"* known node to the current leaf","*\/"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"} stack;"},{"entry":"word top(stack *s) { return s\u2212>node[s\u2212>top]; }"},{"entry":"void push(stack *s, word x) { s\u2212>top++; s\u2212>node[s\u2212>top] = x; }"},{"entry":"word pop(stack *s) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"word tmp;"]},{"entry":[{},"tmp = s\u2212>node[s\u2212>top];"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"s\u2212>node[s\u2212>top\u2212\u2212] = 0;","\/* zeroize old stack elements! *\/"]},{"entry":[{},"return tmp;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"word pow2(word x) { return (word)1 << x; }"},{"entry":"\/* initialize a stack *\/"},{"entry":"void"},{"entry":"stack_init(stack *s) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"word i;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"28pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* set intermediate nodes to the children of the path from","*"]},{"entry":[{},"\u2002* root to the leftmost leaf","*\/"]},{"entry":[{},"for (i=0; i < height\u22121; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"s\u2212>node[i] = pow2(i+1)+1;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"\/* set top node to leftmost leaf *\/"]},{"entry":[{},"s\u2212>node[i] = pow2(i);"]},{"entry":[{},"s\u2212>top = i;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"void"},{"entry":"stack_print(stack *s) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"int i;"]},{"entry":[{},"printf(\u201cstack: \u201d);"]},{"entry":[{},"for (i=0; i < height; i++)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"printf(\u201c%2u \u201d, s\u2212>node[i]);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"word left(word x) { return x << 1; }"},{"entry":"word right(word x) { return (x << 1)+1; }"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["\/* stack_traverse generates the next num_leaves leaves","*"]},{"entry":["\u2002* given the context in the stack s","*\/"]},{"entry":"void"},{"entry":"stack_traverse(stack *s, int num_leaves) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"word x;"]},{"entry":[{},"\/* continue traversal until num_leaves have been generated *\/"]},{"entry":[{},"while (num_leaves \u2212\u2212 > 0) {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"35pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"stack_print(s);","\/* print all stack elements","*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"x = pop(s);","\/* pop stack and set x","*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"while (x < pow2(height\u22121)) { \/* go left until at a leaf, *\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"push(s, right(x)); \/* pushing right children of the path *\/"]},{"entry":[{},"x = left(x);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"49pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"printf(\u201c output: %d\\n\u201d, x);","\/* output leaf","*\/"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"}"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"int"},{"entry":"main ( ) {"}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"stack s;"]},{"entry":[{},"printf(\u201cforward secret traversal example driver\\n\u201d);"]},{"entry":[{},"stack_init(&s);"]},{"entry":[{},"stack_traverse(&s, 10);"]},{"entry":[{},"stack_traverse(&s, 6);"]},{"entry":[{},"return 0;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}}}],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention is illustrated by way of example, and not by way of limitation, in the figures of the accompanying drawings and in which like reference numerals refer to similar elements and in which:",{"@attributes":{"id":"p-0039","num":"0038"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 1C"},{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 1D"},{"@attributes":{"id":"p-0043","num":"0042"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 4","FIG. 2","FIG. 3"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 7A"},{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 7B"},{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 7C","b":"750","sup":"th "},{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0053","num":"0052"},"figref":"FIG. 9A"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 9B"},{"@attributes":{"id":"p-0055","num":"0054"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
