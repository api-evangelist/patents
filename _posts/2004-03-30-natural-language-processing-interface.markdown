---
title: Natural language processing interface
abstract: The present invention provides an interface and associated object model that exposes a comprehensive set of natural language processing features to an application developer. In one embodiment, the features include lexicon management services and proofing services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07409337&OS=07409337&RS=07409337
owner: Microsoft Corporation
number: 07409337
owner_city: Redmond
owner_country: US
publication_date: 20040330
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF ILLUSTRATIVE EMBODIMENTS"],"p":["The present invention deals with natural language processing. More specifically, the present invention relates to an interface and associated object model for providing integrated natural language processing services to an application.","Natural language processing involves the processing of a natural language input. A natural language input is generally language used by a person (as opposed to a computer language or other artificial language), including all of the idioms, assumptions and implications of an utterance in a natural language input. Natural language processing implemented by a computer is typically an attempt to determine the meaning of a natural language input such that the natural language input can be \u201cunderstood\u201d and\/or acted on by the computer.","In many prior natural language processing systems, natural language processing features have been provided by individual natural language processing components. For instance, such individual components have included language detection which is a process that attempts to detect a language that a natural language input is provided in, word breaking that attempts to identify individual words in a natural language input, spell checking, grammar checking, etc. In conventional systems, each of these components is provided separately. This leads to a number of difficulties.","For instance, a word-breaking component must provide its output in a manner which is consistent with the spell checking component. Similarly, the spell checking component must provide its output in a format acceptable to any downstream processing components. Of course, since these individual natural language processing components are often provided by different vendors, they often do not work seamlessly with one another, without substantial reformatting of the processing results so that they are suitable for the next downstream component.","Similarly, prior natural language processing systems have been configured to provide natural language processing features in a single language only. Therefore, if a developer was working on a multi-language application, the developer would likely need to send a natural language input (to be processed) first to a language detection component, and then call the appropriate natural language processing components, given the identified language.","Further, many of the natural language processing components required a lexicon. In order to add a lexicon, prior natural language processing systems often required the lexicon to be added to multiple individual components. The lexicon might have different format for different components or be incompatible between components. In other words, adding a lexicon was not enabled across multiple components or features.","All of these difficulties, presented as a result of providing individual natural language process components, have greatly benefited application developers that have extensive knowledge about a wide variety of individual components provided by different vendors. This has rendered the development of applications that utilize natural language processing very difficult, costly, and time consuming, and has hindered its widespread dissemination in computing.","The present invention provides an interface and associated object model that exposes a comprehensive set of natural language processing features to an application developer. In one embodiment, the features include lexicon management services and proofing services.","In one embodiment of the invention, the object model and associated interface integrate those features and provide the integrated set of features across a plurality of different languages.","In still another embodiment, the object model provides an object that is used to configure (or select) desired natural language processing features. This allows the user to easily accommodate a balance between the desired features and the performance of the natural language processing system in terms of speed.","Appendix A illustrates one embodiment of a specification for the interface and object model shown in .","The present invention relates to an interface and associated object model for providing natural language processing features, and also sub-processes and individual features provided by the interface and associated object model. However, prior to discussing the present invention in greater detail, one illustrative environment in which the present invention can be used will be described.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","Computer  typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer  and includes both volatile and nonvolatile media, removable and non-removable media. By way of example, and not limitation, computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier WAV or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, FR, infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way o example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into the computer  through input devices such as a keyboard , a microphone , and a pointing device , such as a mouse, trackball or touch pad. Other input devices (not shown) may include a joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . In addition to the monitor, computers may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface .","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a hand-held device, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user-input interface , or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","It should be noted that the present invention can be carried out on a computer system such as that described with respect to . However, the present invention can be carried out on a server, a computer devoted to message handling, or on a distributed system in which different portions of the present invention are carried out on different parts of the distributed computing system.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 2","FIG. 2"],"b":["200","200","202","204","206","200","208"]},"In accordance with one embodiment of the invention, programming interface  exposes members (methods, properties and interfaces) that can be invoked by application layer . The members of programming interface  are supported by an underlying object model such that an application in application layer  can invoke the exposed members to obtain natural language processing services.","In order to do so, an application in layer  may first access the object model that exposes interface  to configure the interface . By configure it is meant that desired natural language processing features or functions are selected. For instance, the application may wish to have spell checking and grammar checking performed. If so, the spell checking and grammar checking features are selected when configuring interface . Similarly, the application may wish to have word breaking or language auto detection performed as well as any of a wide variety of other features or functions. Those features can be selected as well.","Once interface  is configured, application layer  may provide a text to be processed to interface . The interface , in turn, can break the text into smaller pieces and access one or more natural language processing (NLP) engines  to perform natural language processing on the input text. The results of the natural language processing performed are provided back to the application in application layer  through programming interface .","Interface  or NLP engines  can also utilize lexicons . In one illustrative embodiment, system  provides a core lexicon  so no lexicons need to be added. However, in accordance with one embodiment of the invention, interface  also exposes members that allow applications to add customized lexicons . For example, if the application is directed to medical or legal subject matter, a customized medical or legal lexicon can be added. Of course, other lexicons can be added as well. In addition, in one embodiment, interface  exposes members that allow applications to add notations to the lexicon so that when results are returned from a lexicon, the notations are provided as well, as properties of the result. This is described in greater detail below.","One embodiment of natural language programming interface  is specified in Appendix A hereto. However, it will be noted that other application programming interfaces can be used as interface  as well. Further, even if the interface in Appendix A is used, then the classes identified in Appendix A can be combined or divided into smaller helper classes. Some of the classes can be eliminated and other classes can be added as well. Those shown in Appendix A are illustrative.",{"@attributes":{"id":"p-0037","num":"0036"},"figref":["FIG. 3","FIG. 3","FIG. 3"],"b":["202","202","202"]},"Object model  includes. Context object , and a plurality of natural language processing objects, such as TextChunk object , Sentence object , and Segment object . The Context object  is an object class that is created and used by the application developer to request the specific linguistic features to be analyzed from the text passed to the interface . In effect, Context object  allows the client to select the natural language processing features and functions which are to be performed on the input text and the results of which are to be returned through programming interface . For example, the client can call IsComputingCompounds to perform compound analysis in German, or the IsFindingDateTimeMeasures for named entity recognition of dates and times (e.g., Dec. 31, 2004 is recognized as a single segment with a type of date). Context object  is also the object through which developers can query interface  for features available for any given language. They can achieve this through the method GetCapabilitiesFor, for example, to determine if spell checking is available for a specific language.","Context object , itself, is language independent, but holds references to language dependent lexicons. Once Context object  is created and configured by the client, it acts as a read only component during analysis. Several analyses on different threads can refer to a single Context object . In one embodiment, thread-safe caching can occur on the Context object, such as for lexicons.","In order for natural language processing system  to perform any analysis on a textual input, context information must be input for that text. The context information refers to a configuration for Context object . For instance, in order to perform simple parsing on an input text, the context information required can be a number of simple settings, such as the type of parse to be performed and the level of output detail. For command and control scenarios, context information may expand to include the state of the application.","One embodiment of the properties on Context object  is set out in greater detail in Appendix A attached hereto. For instance, the client can select a number of items that the natural language processing system is to check for, such as repeated words, spelling, grammar, etc. The client can also configure Context object  to return properties such as compound analysis; morphological inflectional forms of words; lemmas; time, date, location, organization and person named entities; the input text broken by phrases (such as verb phrases, noun phrases, etc.); the normalized version of a token (such as a word); an identity of the lexicons associated with this Context object ; etc.","The TextChunk object  is the object in which the input text (or stream) is placed for analysis and in which the results of analysis are placed to fulfill client requests. The TextChunk object  has, as its parent, Context object  which contains the context information that tells the associated TextChunk object  what natural language processing features are requested on the input text. Application developers can use, for example, the InputText or InputTextArray properties to provide the text. They can also set the CultureInfo for the text. Setting an explicit CultureInfo indicates that the application developer knows the language of the input text. Setting it to a null value (the default) illustratively instigates the language detection behavior which automatically detects the language of the input text. The SingleLanguage property in Context object  illustratively determines the behavior of allowing the language to be set for a Sentence object  or the TextChunk object .","One embodiment of TextChunk object  is described in greater detail in Appendix A, and it exposes methods that provide the client results of various analyses.","Amongst other things, the TextChunk object  represents a collection of Sentence objects  that the client can iterate to find the sentences in the TextChunk. The Sentence object contains the results of analysis on that sentence that are required to fulfill client requests (or requests from an application). Thus, sentence object  has properties that provide information about the text. An example of this is the Culture property that provides the culture (i.e., the language) for the sentence represented by Sentence object , and the Range property that provides the range covered in the original text. It also produces a collection of Segment objects  which further separate the input text and its analysis.","The Segment object  is illustratively represented by a class of objects. Amongst other things, the Sentence object is a collection of Segment objects. The Segment object  illustratively represents the text and its properties commonly associated with words or multiple word entries. Properties of Segment object  are associated with the segments such as the range of the segment. Other properties identify different characteristics of the segment associated with a particular Segment object .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 4"],"b":"210"},"First, the application instantiates and invokes Context object  to select natural language processing features to be used. This is indicated by block  in , and is done by invoking methods and setting desired properties on an instance of Context object . This can be done at text analysis time, or before hand.","Assume, for example, that in block  the developer has specified that the natural language processing is to recognize Named Entities and offer spelling suggestions. The developer (or client) does this when configuring the Context object  by setting the appropriate properties on Context object .","For instance, in order to set spell checking, the client sets the property IsCheckingSpelling. In order to recognize Named Entities, the client sets the property IsFindingPersons.","The application next passes text to be processed into a TextChunk object . This is indicated by block . Again, this is done by the application invoking the appropriate methods on TextChunk object  to pass the text to be analyzed to the object.","The TextChunk object  then invokes one or more natural language processing engines  or similar functional components, to process the text passed to it in order to obtain desired TextChunk properties, such as sentence boundaries. This is indicated by block  in . Of course, to the extent other TextChunk properties are desired, TextChunk object  illustratively obtains the results of corresponding natural language analysis on the input text in order to return those properties as well.","In the example being discussed, TextChunk object  receives the text array and computes sentence boundaries of the text. TextChunk object  illustratively determines that there are two sentences and creates corresponding sentence objects  for each of those sentences. Creating Sentence objects  for each sentence identified in the input text is indicated by block  in .","The sentences in each Sentence object  are then processed (such as by NLP engines  in system ) to obtain desired sentence properties, such as segment identification. Although a wide variety of other properties could be returned for a sentence, the segment identification is discussed herein for the sake of example only. This is indicated by block  in .","Within each Sentence object , for each segment identified, a Segment object  is created. This is indicated by block  in . The segments in the example being discussed are illustratively words. Therefore, one segment object is associated with each word in the sentences identified in the input text.","The segments (words) are then processed (again, for example, using NLP engines  in system ) through the Segment objects  to obtain desired properties. The properties are illustratively Subsegments and spelling suggestions for misspelled words. Processing the segments is indicated by block  in .","Once the segment-level processing has been performed by system , system  returns a natural language output that is indicative of the desired natural language processing analysis requested by the application, and configured using the Context object. This is indicated by block  in .","One illustrative example of a natural language processing analysis of the input text is illustrated in . The analysis (or result) shown in  first presents the surface string (or input text) provided to TextChunk object . The result shown in  next shows the sentences identified in the surface string. Next, the result shown in  shows how each sentence was divided into segments and subsegments. As requested on the Context object , Named Entities are recognized (\u201cGeorge Bush\u201d and \u201cBill Gates\u201d) and spelling suggestions are provided for misspelled words (\u201cforward\u201d is suggested for \u201cforwarf\u201d).","While a wide variety of other operations can be performed using the interface set out in Appendix A, and while they can easily be identified simply by reviewing Appendix A, lexicon management is now discussed in greater detail.","It is worth noting at the outset, however, that in one embodiment, one or more core lexicons can be provided by system  so no other lexicons need to be added. Lexicons  (first shown in ) are also illustratively available across all of the features and languages that are serviced by programming interface . Therefore, while in prior systems lexicons needed to be loaded for each specific natural language processing component or engine, the present invention provides one or more core lexicons in system , and allows additional lexicons to be loaded into system , and those lexicons can be shared across all services and languages supported. System  does this by simply providing an appropriate method or property (such as the Lexical property) which can be used to load a lexicon into system . The lexicon is then available to the natural language processing engine .","The present invention also allows notations to be added to results returned from a given lexicon. For instance, interface  allows, a medical lexicon  to be added to a natural language processing system . The medical lexicon may include, for example, a dictionary of drugs indexed by drug name. When the lexicon returns a result indicating that one of the drugs in the drug dictionary was recognized, that will be indicated, for example, in a Segment object  corresponding to the segment that holds the drug name. The segment object  has a corresponding plurality of properties, and one of those properties can contain the annotations desired. For instance, the annotations corresponding to the drug name recognized in the medical lexicon may include recommended dosages for that given drug, common side effects, notes on how to administer the drug, etc. With this information in a property on the Segment object, it can be selected and used as desired by the application that requested the natural language processing.","Another feature of the present invention that is worth noting is that the language identification feature (LanguageAutoDetect) is integrated across all of the services offered by the present invention as well. For instance, in prior systems, the language autodetection component was a separate component from the other natural language processing engines or components. Therefore, the output of the language autodetection component needed to be consistent (or made consistent through additional processing) with the outputs from the other components in the system. The present invention, however, provides language autodetection through interface  and thus provides language autodetection as an integrated service for all other services (such as spell checking, compound analysis, grammar checking, etc.) supported by the system.","It can also be seen that the present invention allows the developer to choose the level of analysis, given the corresponding offset in speed. For instance, the more natural language analysis to be done on a given input text, the more time will be required to perform that natural language processing. Therefore, by providing all of the features in the natural language processing system  as being selectable through the Context object  in interface , the present invention allows the developer to quickly and easily select only those features of natural language processing analysis that are desired and thus to quickly and easily make a determination as to the trade off between performance (in terms of speed) and depth of analysis.","Further, the present invention integrates all natural language processing features into a single package, such that those features are accessible through a single interface. This removes from the developer the requirement of insuring that each individual natural language processing engine or component provides an output that is consistent with the other natural language processing engines or components in the system. Thus, the present invention significantly eases the burden of developers in implementing natural language processing analysis into their applications.","Although the present invention has been described with reference to particular embodiments, workers skilled in the art will recognize that changes may be made in form and detail without departing from the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 5","FIGS. 3 and 4"]}]},"DETDESC":[{},{}]}
