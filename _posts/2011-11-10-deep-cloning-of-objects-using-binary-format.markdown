---
title: Deep cloning of objects using binary format
abstract: Techniques are described herein that are capable of deep cloning (a.k.a. deep copying) objects using a binary format. A deep clone of a designated object includes references to other objects (and potentially copies of the other objects) included in the designated object. A binary representation of each object in an object graph is generated to provide a binary clone of the object graph. Objects created by a dynamic language engine are called dynamic language objects. Objects created by a host (e.g., that hosts the dynamic language engine) are called host objects. Each host object is associated with an intermediate representation thereof via a property bag that describes properties of that host object. Each intermediate representation is understandable by the dynamic language engine. A binary representation of each dynamic language object and each host object may be generated in accordance with the binary format to provide the binary clone.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954475&OS=08954475&RS=08954475
owner: Microsoft Technology Licensing, LLC
number: 08954475
owner_city: Redmond
owner_country: US
publication_date: 20111110
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments","III. Conclusion"],"p":["In modern data systems, data typically is structured and serialized before being transmitted over network connections (e.g., between servers and web applications). Serialization is a process of converting a data structure (a.k.a. object) or object state into a format that is capable of being stored and subsequently recreated. For instance, the resulting serialized data can be used to create a semantically identical clone of the original object.","A variety of formats has been proposed for structuring data and serializing objects. However, each such format has its limitations. One commonly-used format for structuring data and serializing objects is known as JavaScript Object Notation (JSON). The limitations of JSON are common among many of the other formats that have been proposed. One example of such a limitation is that JSON does not allow serialization of host objects. While unsupported data types may be converted and represented as some other data format, a universally recognized conversion algorithm typically does not exist. Accordingly, the sender of the data and the receiver of the data often coordinate to determine how such a conversion is to occur. Moreover, JSON is not capable of making a deep copy of an object. Rather, JSON makes shallow copies of objects. A deep copy of an object is a copy that includes references to other objects that are included in the original object. The deep clone may further include copies of the objects that are included in the original object. A shallow copy of an object is a copy that includes copies of other objects (but not references to the other objects) that are included in the original object. Furthermore, JSON does not track such references.","Various approaches are described herein for, among other things, deep cloning (a.k.a. deep copying) objects using a binary format. A deep clone of a designated object includes references to other objects that are included in the designated object. The deep clone may further include copies of the objects that are included in the designated object. Accordingly, the deep clone may facilitate maintenance of copies and references to other objects, including those potentially present in an object graph that includes the designated object. Whereas, a shallow copy of the designated object includes copies of other objects (but not references to the other objects) that are included in the designated object. As mentioned above, the objects to be cloned may be included in an object graph. A binary representation of each object in the object graph is generated to provide a binary clone of the object graph. For example, a host may execute on a device (e.g., a computer) and host a dynamic language engine. Objects that are created by the dynamic language engine are referred to as dynamic language objects. Objects that are created by the host are referred to as host objects. Each host object is associated with a property bag that contains an intermediate representation of that host object. For instance, each intermediate representation may describe properties of the corresponding host object. In accordance with this example, a binary representation of each dynamic language object and each host object may be generated in accordance with the binary format to provide the binary clone.","A method of deep cloning object(s) in an object graph using a binary format is described. In accordance with this method, a determination is made whether each of the object(s) in the object graph is a host object that is created by a host or a dynamic language object that is created by a dynamic language engine hosted by the host. Each dynamic language object that is included in the object(s) is retrieved from the dynamic language engine. Each host object that is included in the object(s) is retrieved from the host via an intermediate representation of that host object contained in a property bag. A binary representation of each dynamic language object and each host object is generated in accordance with the binary format to provide a binary clone of the object graph.","A method of reconstructing an object graph based on a binary clone of the object graph is described. The binary clone includes binary representation(s) of respective host object(s). In accordance with this method, a placeholder is created for each of the respective host object(s). Each of the binary representation(s) is extracted from the binary clone into a respective property bag object such that the respective property bag object includes properties of the host object. The properties from each property bag object are extracted. Each placeholder is initialized with the properties that are extracted from the respective property bag object to provide a respective initialized host object in a reconstructed object graph.","A system to deep clone object(s) in an object graph using a binary format is described. The system includes a host and a serialization engine. The host is configured to host a dynamic language engine. The serialization engine is included in the dynamic language engine. The serialization engine includes an object module, a retrieval module, and a binary module. The object module is configured to determine whether each of the object(s) in the object graph is a host object that is created by the host or a dynamic language object that is created by the dynamic language engine. The retrieval module is configured to retrieve each dynamic language object that is included in the object(s) from the dynamic language engine. The retrieval module is further configured to retrieve each host object that is included in the object(s) from the host via an intermediate representation of that host object contained in a property bag. The binary module is configured to generate a binary representation of each dynamic language object and each host object in accordance with the binary format to provide a binary clone of the object graph.","A system to reconstruct an object graph based on a binary clone of the object graph is described. The binary clone includes binary representation(s) of respective host object(s). The system includes a host, which creates a placeholder for each of the host object(s). The system further includes a dynamic language engine, which is hosted by the host. The dynamic language engine includes a de-serialization engine that extracts each of the binary representation(s) from the binary clone into a respective property bag object such that the respective property bag object includes properties of the host object. The host extracts the properties from each of the property bag objects. The host initializes each placeholder with the properties that are extracted from the respective property bag object to provide a respective initialized host object in a reconstructed object graph.","A computer program product is described that includes a computer-readable medium having computer program logic recorded thereon for enabling a processor-based system to deep clone object(s) in an object graph using a binary format. The computer program product includes first, second, third, and fourth program logic modules. The first program logic module is for enabling the processor-based system to determine whether each of the object(s) in the object graph is a host object that is created by a host or a dynamic language object that is created by a dynamic language engine hosted by the host. The second program logic module is for enabling the processor-based system to retrieve each dynamic language object that is included in the object(s) from the dynamic language engine. The third program logic module is for enabling the processor-based system to retrieve each host object that is included in the object(s) from the host via an intermediate representation of that host object contained in a property bag. The fourth program logic module is for enabling the processor-based system to generate a binary representation of each dynamic language object and each host object in accordance with the binary format to provide a binary clone of the object graph.","A computer program product is described that includes a computer-readable medium having computer program logic recorded thereon for enabling a processor-based system to reconstruct an object graph based on a binary clone of the object graph. The binary clone includes binary representation(s) of respective host object(s). The computer program product includes first, second, third, and fourth program logic modules. The first program logic module is for enabling the processor-based system to create a placeholder for each of the objects. The second program logic module is for enabling the processor-based system to extract each of the binary representation(s) from the binary clone into a respective property bag object such that the respective property bag object includes properties of the host object. The third program logic module is for enabling the processor-based system to extract the properties from each of the property bag objects. The fourth program logic module is for enabling the processor-based system to initialize each placeholder with the properties that are extracted from the respective property bag object to provide a respective initialized host object in a reconstructed object graph.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter. Moreover, it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and\/or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However, the scope of the present invention is not limited to these embodiments, but is instead defined by the appended claims. Thus, embodiments beyond those shown in the accompanying drawings, such as modified versions of the illustrated embodiments, may nevertheless be encompassed by the present invention.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d or the like, indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Furthermore, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the relevant art(s) to implement such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Example embodiments described herein are capable of deep cloning (a.k.a. deep copying) objects using a binary format. A deep clone of a designated object includes references to other objects that are included in the designated object. The deep clone may further include copies of the objects that are included in the original object. Accordingly, the deep clone may facilitate maintenance of copies and references to other objects, including those potentially present in an object graph that includes the designated object. Whereas, a shallow copy of the designated object includes copies of other objects (but not references to the other objects) that are included in the designated object. As mentioned above, the objects to be cloned may be included in an object graph. The example embodiments are capable of generating a binary representation of each object in the object graph to provide a binary clone of the object graph. In accordance with some example embodiments, a host executes on a device (e.g., a computer) and hosts a dynamic language engine. Objects that are created by the dynamic language engine are referred to as dynamic language objects. Objects that are created by the host are referred to as host objects. Each host object is associated with a property bag that contains an intermediate representation of that host object. For instance, each intermediate representation may describe properties of the corresponding host object. In these embodiments, a binary representation of each dynamic language object and each property bag is generated in accordance with the binary format to provide the binary clone.","Example techniques described herein have a variety of benefits as compared to conventional serialization techniques. For example, the binary format that is utilized by the example techniques may enable substantial optimization for runtime and\/or memory performance. In accordance with this example, using a binary format and abstracting the serialization engine and\/or the de-serialization engine for both dynamic language objects and host objects in the dynamic language engine may enable various performance optimizations, including but not limited to optimizing for scenarios in which cloned data need not be persisted and\/or optimizing based on source and target contexts that are serializing and de-serializing the data within (1) the same script context, (2) the same thread context, and\/or (3) the same process. A script context is a single dynamic language engine running on a thread. A thread context is a single thread having one or more dynamic language engines running thereon. A process is a single process containing one or more threads, each thread having at least one respective dynamic language engine running thereon. A thread is a smallest unit of processing that is capable of being scheduled by an operating system. These optimizations may reduce a likelihood that two references and copies of the binary data are maintained, one in the serializing context and one in the de-serializing context, by direct cloning of the object in a memory recycler of the target context, and just keeping object reference information in the binary format.","The example techniques may be extensible to various deep copying requirements for dynamic objects across hosts. The binary representations of the dynamic language objects and the property bags may be used in processes that do not support dynamic language objects. The example techniques may be capable of maintaining identity of objects that are cloned. The example techniques may provide relatively quick look-ups into the serialized data, as compared to conventional techniques. Application programming interfaces (APIs) may be exposed to humans (e.g., software developers) to allow the humans to access the deep cloning functionality of the example embodiments. In some example techniques, binary representations of host objects and native dynamic language objects (e.g., native ECMAScript\u00ae objects) may appear in the same object layout format in the binary clone. Accordingly, a de-serialization engine may be capable of processing the host objects in the same way as the native dynamic language objects.","In some example techniques, a host may be configured to determine whether each host object is to be serialized and\/or de-serialized synchronously or asynchronously. If the host determines that a host object is to be serialized and\/or de-serialized synchronously, the host and a dynamic language engine that is hosted by the host perform respective aspects of the serialization and\/or de-serialization synchronously. If the host determines that a host object is to be serialized and\/or de-serialized asynchronously, the host performs some aspects of the serialization and\/or de-serialization asynchronously, and a dynamic language engine that is hosted by the host may perform other aspects of the serialization and\/or de-serialization synchronously or asynchronously. In other example techniques, a dynamic language engine may be configured to determine whether a host is to serialize and\/or de-serialize each host object synchronously or asynchronously. The dynamic language engine may instruct the host to serialize and\/or de-serialize each host object in accordance with such a determination. In other example techniques, a dynamic language engine may be configured to determine whether each dynamic language object is to be serialized and\/or de-serialized synchronously or asynchronously. The dynamic language engine may then serialize and\/or de-serialize the dynamic language object accordingly.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 1","b":["100","100","100","100"]},"Generally speaking, device  operates to deep clone object(s) in an object graph  using a binary format to provide a binary clone  of the object graph . The binary clone  includes binary representation(s) of the respective object(s). The binary representation(s) are configured in accordance with the binary format. Device  includes a plurality of hosts A-M. Examples of a host include but are not limited to an operating system, a browser, etc. Examples of an operating system include but are not limited to Berkeley Software Distribution\u2122 (BSD), developed and distributed by the Computer Systems Research Group (CSRG) of the University of California, Berkeley, or descendants thereof; Linux developed and distributed under the GNU Project; Mac OS\u00ae developed and distributed by Apple Inc., Microsoft Windows\u00ae developed and distributed by Microsoft Corporation; and UNIX\u2122 developed and distributed by AT&T. Examples of a browser include but are not limited to Internet Explorer\u00ae, developed and distributed by Microsoft Corporation; Firefox\u00ae, developed and distributed by Mozilla Foundation; Google\u00ae Chrome\u2122, developed and distributed by Google Inc.; Safari\u2122, developed and distributed by Apple Inc.; and Opera\u2122, developed and distributed by Opera Software ASA. Each of the hosts A-M is capable of hosting one or more dynamic language engines (DLEs). Device  is shown to include a plurality of hosts A-M for illustrative purposes and is not intended to be limiting. For instance, M may be any integer, including 1, 2, 3, etc. Accordingly, device  may include a single host, such as host A.","First host A includes host object(s) , which are created by first host A. First host A further includes a plurality of dynamic language engines (DLEs) A-N. It will be recognized that first host A is shown to include a plurality of dynamic language engines (DLEs) A-N for illustrative purposes and is not intended to be limiting. For example, N may be any integer, including 1, 2, 3, etc. Accordingly, first host A may include a single DLE, such as first DLE A. It will be further recognized that any one or more of the hosts A-M may include host object(s) created by the respective host and\/or any one or more of the plurality of DLEs A-N.","Each of the DLEs A-N is capable of including a serialization engine and\/or a de-serialization engine to perform respective serialization and\/or de-serialization techniques, as described in further detail below with reference to . For instance, first DLE A is shown to include first serialization engine A and first de-serialization engine A; second DLE B is shown to include second serialization engine B and second de-serialization engine B, and so on. Each of the serialization engines A-N is configured to serialize data structures to provide binary representations of those data structures. For instance, each of the serialization engines A-N is capable of serializing the object graph  to provide the binary clone . Each of the de-serialization engines A-N is configured to de-serialize the binary representations of the data structures to provide non-binary representations of the data structures. For instance, each of the de-serialization engines A-N is capable of de-serializing the binary clone  to provide the object graph . Examples of a non-binary representation include but are not limited to an ECMAScript\u00ae (e.g., JavaScript\u00ae) representation, an extensible markup language (XML) representation, etc. An ECMAScript\u00ae representation is a representation that is configured in accordance with (e.g., written in) an ECMAScript\u00ae programming language. An XML representation is a representation that is configured in accordance with an XML programming language. The plurality of DLEs A-N further includes a plurality of respective DLE objects A-N. The first DLE object(s) A are created by first DLE A; the second DLE object(s) B are created by second DLE B, and so on.","Each of the serialization engines A-N and each of the de-serialization engines A-N may be implemented in various ways to respectively serialize and de-serialize objects, including being implemented in hardware, software, firmware, or any combination thereof. For example, any one or more of the serialization engines A-N and\/or any one or more of the de-serialization engines A-N may be implemented as computer program code configured to be executed in one or more processors. In another example, any one or more of the serialization engines A-N and\/or any one or more of the de-serialization engines A-N may be implemented as hardware logic\/electrical circuitry. In an embodiment, any one or more of the serialization engines A-N and\/or any one or more of the de-serialization engines A-N may be implemented in a system-on-chip (SoC). Each SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":["FIGS. 2-4","FIG. 1","FIGS. 2-4"],"b":["200","300","400","100","106","106","108","108"]},"As shown in , device  executes a host . Host  hosts a dynamic language engine . Dynamic language engine  includes a serialization engine  and a de-serialization engine . Serialization engine  is configured to serialize object(s) that are included in an object graph  in accordance with a binary format to provide binary representation(s) of the respective object(s) in a binary clone  of the object graph . De-serialization engine  is configured to de-serialize binary representation(s) of respective object(s) in the binary clone  to provide the object(s) having a non-binary format in the object graph .","As shown in , device  executes a host , which hosts first and second dynamic language engines A and B. First dynamic language engine A includes a serialization engine , which is configured to serialize object(s) that are included in an object graph  in accordance with a binary format to provide binary representation(s) of the respective object(s) in a binary clone  of the object graph . Second dynamic language engine B includes a de-serialization engine , which is configured to de-serialize binary representation(s) of respective object(s) in the binary clone  to provide the object(s) having a non-binary format in the object graph .","As shown in , device  executes a first host A and a second host B. First host A hosts a first dynamic language engine A, which includes a serialization engine . Second host B hosts a second dynamic language engine B, which includes a de-serialization engine . Serialization engine  is configured to serialize object(s) that are included in an object graph  in accordance with a binary format to provide binary representation(s) of the respective object(s) in a binary clone  of the object graph . De-serialization engine  is configured to de-serialize binary representation(s) of respective object(s) in the binary clone  to provide the object(s) having a non-binary format in the object graph .","As shown in , first device A executes a first host A. First host A hosts a first dynamic language engine A, which includes a serialization engine . Serialization engine  is configured to serialize object(s) that are included in an object graph  in accordance with a binary format to provide binary representation(s) of the respective object(s) in a binary clone  of the object graph . Second device B executes a second host B. Second host B hosts a second dynamic language engine B, which includes a de-serialization engine . De-serialization engine  is configured to de-serialize binary representation(s) of respective object(s) in the binary clone  to provide the object(s) having a non-binary format in the object graph .","Each of , , and  shows a serialization engine , , or  included in a first dynamic language engine A, A, or A and a de-serialization engine , , or  included in a second dynamic language engine B, B, or B. It will be recognized that the first dynamic language engine A, A, or A may be configured to execute commands written in a first dynamic language, and the second dynamic language engine B, B, or B may be configured to execute commands written in a second dynamic language that is different from the first dynamic language, though the scope of the example embodiments is not limited in this respect. For example, the first dynamic language engine A, A, or A may not be capable of executing commands written in the second dynamic language. In another example, the second dynamic language engine B, B, or B may not be capable of executing commands written in the first dynamic language.",{"@attributes":{"id":"p-0036","num":"0035"},"figref":["FIGS. 6A and 6B","FIG. 7","FIG. 1","FIG. 8","FIG. 8"],"b":["600","700","600","700","100","600","700","800","100","800","802","802","802","832","834","802","804","806","808","830","806","810","812","814","816","818","820","814","836","838","808","822","824","826","828","600","700"]},"As shown in , the method of flowchart  begins at step . In step , serialization of an object graph is instantiated via an application programming interface that is exposed by a serialization engine included in a dynamic language engine that is hosted by a host. In an example implementation, host(s)  instantiates serialization of an object graph  via an application programming interface that is exposed by serialization API module  of serialization engine . For instance, host(s)  may provide a serialization request  to dynamic language engine(s)  to request that the object graph  be serialized. Dynamic language engine(s)  may provide a serialization instruction  to retrieval module  in response to dynamic language engine(s)  receiving the serialization request . The serialization instruction  instructs retrieval module  to retrieve the object(s) that are identified in the object graph  for serialization. In accordance with this implementation, serialization engine  is included in dynamic language engine(s) , which are hosted by host(s) .","In an example embodiment, the serialization of the object graph is instantiated in accordance with a call from native dynamic language code in the serialization engine. In accordance with this example, the application programming interface may be exposed to a human developer (e.g., software developer) of the dynamic language code.","At step , a determination is made whether a first object in the object graph is a host object or a dynamic language object. If the first object is a host object, flow continues to step . However, if the first object is a dynamic language object, flow continues to step . In an example implementation, object module  determines whether the first object in object graph  is a host object or a dynamic language object.","At step , a first object is retrieved from the host via an intermediate representation of the first object contained in a property bag. For instance, the intermediate representation of the first object may describe properties of the first object. In an example implementation, call module  creates a property bag that corresponds to the first object. The property bag is included in property bag(s) . Call module  provides an API call  to an application programming interface that is exposed by host API module . The API call  includes a reference to the property bag that corresponds to the first object. In accordance with this implementation, host API module  fills the property bag that corresponds to the first object with the properties of the first object to provide a respective filled property bag. Host API module  includes the filled property bag in property bag(s) . Receipt module  receives the property bag(s)  from host API module . Each property bag that is included in property bag(s)  may be interpretable by the dynamic language engine(s)  and the host(s) . For instance, the property bag(s) may be understandable by serialization engine , de-serialization engine , and host(s) .","At step , the first object is retrieved from the dynamic language engine. For example, the first object may be retrieved directly from the dynamic language engine. In accordance with this example, the first object may be retrieved from the dynamic language engine without making a call to an intermediate module that requests the intermediate module to perform operations for retrieving the first object. In an example implementation, retrieval module  retrieves the first object form dynamic language engine(s) . In accordance with this implementation, the first object is included in DLE object(s) .","At step , a determination is made whether the object graph includes a next object. If the object graph includes a next object, flow continues to step . Otherwise, flow continues to step , which is shown in . In an example implementation, object module  determines whether the object graph  includes a next object.","At step , a determination is made whether the next object in the object graph is a host object or a dynamic language object. If the next object is a host object, flow continues to step . However, if the next object is a dynamic language object, flow continues to step . In an example implementation, object module  determines whether the next object in object graph  is a host object or a dynamic language object.","At step , a next object is retrieved from the host via an intermediate representation of the next object contained in a property bag. For instance, the intermediate representation of the next object may describe properties of the next object. In an example implementation, call module  creates a property bag that corresponds to the next object. The property bag is included in property bag(s) . Call module  provides an API call  to an application programming interface that is exposed by host API module . The API call  includes a reference to the property bag that corresponds to the next object. In accordance with this implementation, host API module  fills the property bag that corresponds to the next object with the properties of the next object to provide a respective filled property bag. Host API module  includes the filled property bag in property bag(s) . Receipt module  receives the property bag(s)  from host API module . Upon completion of step , flow returns to step .","At step , the next object is retrieved from the dynamic language engine. In an example implementation, retrieval module  retrieves the next object form dynamic language engine(s) . In accordance with this implementation, the next object is included in DLE object(s) . Upon completion of step , flow returns to step .","At step , an object identifier is generated by the serialization engine for each of the object(s) in the object graph. Each object identifier may include a numerical value (e.g., a unique numerical identifier) and\/or a pointer to another (e.g., previous) object in the object graph. For example, an object identifier that is generated for a first object in the object graph may include a pointer to a second object in the object graph. In accordance with this example, the second object is said to be a reference object with respect to the first object. Each object identifier may include any of a variety of characteristics of the object with which it corresponds, including but not limited to an order of that object with respect to other object(s) in the object graph, a type of the object (e.g., host object or dynamic language object), etc. A type of the object may include a specified native type of host object or a specified native type of dynamic language object. The object identifier(s) may be used during de-serialization, as described in further detail below with reference to . In an example implementation, identifier module  generates object identifier(s) (shown as \u201cobject ID(s)\u201d)  for the respective object(s) in the object graph .","At step , a binary representation of each dynamic language object and each host object is generated in accordance with the binary format to provide a binary clone of the object graph. For example, the binary clone may be dynamic language engine agnostic. By \u201cdynamic language engine agnostic\u201d, it is meant that the binary clone is readable (e.g., interpretable) by dynamic language engines and static language engines in addition to the dynamic language engine that includes the serialization engine used to generate the binary clone, even if the dynamic language engine that includes the aforementioned serialization engine is configured to read instructions written in a specified dynamic language and those other dynamic language engines and static language engines are not capable of reading instructions that are written in the specified dynamic language. In an example implementation, binary module  generates a binary representation of each dynamic language object and each host object in accordance with the binary format to provide a binary clone  of the object graph .","In an example embodiment, the binary representation(s) of the respective dynamic language object(s) and the binary representation(s) of the respective property bag(s) may include a specified (e.g., fixed) number of bits and\/or bytes. For example, each of the binary representation(s) may include four bytes of data. In accordance with this example, each byte may include eight binary bits. The specified number of bits and\/or bits may be predetermined (i.e., determined before serialization is instantiated), though the scope of the example embodiments is not limited in this respect.","At step , a byte stream indicator is received from the host at the serialization engine. The byte stream indicator specifies a designated byte stream into which the binary clone of the object graph is to be written. In an example implementation, serialization API module  receives a byte stream indicator  from host(s) . The byte stream indicator  specifies the designated byte stream into which the binary clone  of the object graph  is to be written.","At step , the binary clone of the object graph is written into the designated byte stream by the serialization engine based on the byte stream indicator. In an example implementation, provision module  writes the binary clone  of the object graph  into the designated byte stream based on the byte stream indicator .","It should be noted that the steps of flowchart  may be performed in accordance with a synchronous serialization technique or an asynchronous serialization technique. If the steps of flowchart  are performed in accordance with a synchronous serialization technique, steps performed by the host and steps performed by the serialization engine are performed synchronously. If the steps of flowchart  are performed in accordance with an asynchronous serialization technique, each of the steps performed by the host and each of the steps performed by the serialization engine may be performed synchronously or asynchronously.","In some example embodiments, one or more steps , , , , , , , , , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , , , , , , , , , and\/or  may be performed. For example, the method of flowchart  may include receiving contextual information (e.g., contextual information ) from the host at the serialization engine. In accordance with this example, the contextual information may specify whether serialization and de-serialization are to occur within a same dynamic language engine, within a same host, within a same device, and\/or whether the binary stream is to be persisted (e.g., to a database). In further accordance with this example, at step  of flowchart , the binary clone of the object graph may be written into the designated byte stream further based on the contextual information. For instance, the serialization engine may write references to respective host objects (and not copies of the host objects) into the designated byte stream if the serialization and de-serialization are to occur with the same dynamic language engine, within the same host, and\/or within the same device. This may result in serializing less data into the byte stream, which may improve performance (e.g., increase a rate at which the objects are serialized and\/or de-serialized).","In another example, the method of flowchart  may begin upon completion of the steps shown in flowchart , though the scope of the example embodiments is not limited in this respect. For instance, the method of flowchart  may be triggered by an instruction to reconstruct the object graph. It will be recognized that an entity (e.g., a device and\/or element(s) thereof) may generate an object graph based on a binary clone of the object graph, regardless whether the entity first performed steps to generate the binary clone based on the object graph","As shown in , the method of flowchart  begins at step . In step , de-serialization of the binary clone is initiated via an application programming interface that is exposed by a de-serialization engine that is included in a dynamic language engine. In an example implementation, host(s)  instantiates de-serialization of the binary clone  via an application programming interface that is exposed by a de-serialization API module (not shown) of de-serialization engine . For instance, host(s)  may provide a de-serialization request  to dynamic language engine(s)  to request that the binary clone  be de-serialized. Dynamic language engine(s)  may provide a de-serialization instruction  to de-serialization engine  in response to dynamic language engine(s)  receiving the de-serialization request . The de-serialization instruction  instructs de-serialization engine  to retrieve the binary representation(s) of the object(s) in the binary clone  for de-serialization.","At step , a placeholder is created for each host object. For example, the placeholder(s) for the host object(s) may be created based on respective object identifier(s) that are generated during serialization as described above with reference to step  of flowchart . In accordance with this example, the placeholder(s) may be created based on the respective object identifier(s) indicating that the respective object(s) are host object(s). In an example implementation, first creation module  provides a first instruction  to host(s)  that instructs host(s)  to create a placeholder for each host object. In accordance with this implementation, host(s)  creates the placeholder for each host object. For instance, host(s)  may create the placeholder(s) based on the respective object identifier(s)  that are generated by identifier module . In one example, the placeholder for each host object may be implemented as a respective uninitialized host object in uninitialized host object(s) . In accordance with this example, host(s)  may provide the uninitialized host object(s)  to reconstruction module  for further processing.","At step , the binary representation of each host object is extracted from the binary clone into a respective property bag object such that the respective property bag object includes properties of the host object. In an example implementation, first creation module  extracts the binary representation of each host object from the binary clone  into a respective property bag object. First creation module  provides each property bag object to host(s)  for further processing, as depicted by property bag object(s) .","At step , the properties from each property bag object are extracted. In an example implementation, host(s)  extracts properties  from the property bag object(s) .","At step , each placeholder is initialized with the properties that are extracted from the respective property bag object to provide a respective initialized host object to be included in a reconstructed object graph. In an example implementation, intermediate representation module  provides a second instruction  to host(s)  that instructs host(s)  to initialize the respective placeholder(s). In accordance with this implementation, host(s)  initializes the placeholder(s) with the properties  to provide respective initialized host object(s)  to be included in a reconstructed object graph .","At step , each dynamic language object is recreated for inclusion in the reconstructed object graph based on the binary representation of that dynamic language object. For example, the dynamic language object(s) may be recreated based on respective object identifier(s) that are generated during serialization. In accordance with this example, the dynamic language object(s) may be recreated based on the respective object identifier(s) indicating that the respective object(s) are dynamic language object(s). In an example implementation, second creation module  recreates the dynamic language object(s)  to provide recreated DLE object(s) , which are to be included in the reconstructed object graph . For instance, second creation module  may recreate the dynamic language object(s) further based on the respective object identifier(s)  that are generated by identifier module .","At step , the initialized host object(s) and the recreated dynamic language object(s) are combined to provide the reconstructed object graph. In an example implementation, reconstruction module  combines the initialized host object(s)  and the recreated DLE objects  to provide the reconstructed object graph . It should be noted that host(s)  may provide references to the respective initialized host object(s)  to reconstruction module  so that reconstruction module  can appropriately store the initialized host object(s)  in the reconstructed object graph .","Host(s)  may provide the contextual information  to reconstruction module  to drive time and space optimization. For example, reconstruction module  may determine whether each of the initialized host object(s) and each of the recreated DLE object(s)  in the reconstructed object graph  are to be persisted in a database based on the contextual information . In accordance with this example, reconstruction module  may selectively persist the initialized host object(s) and the recreated DLE object(s) in a database in accordance with the contextual information .","It should be noted that the steps of flowchart  may be performed in accordance with a synchronous de-serialization technique or an asynchronous de-serialization technique. If the steps of flowchart  are performed in accordance with a synchronous de-serialization technique, steps performed by the host and steps performed by the de-serialization engine are performed synchronously. If the steps of flowchart  are performed in accordance with an asynchronous de-serialization technique, each of the steps performed by the host and each of the steps performed by the de-serialization engine may be performed synchronously or asynchronously.","In some example embodiments, one or more steps , , , , , , and\/or  of flowchart  may not be performed. Moreover, steps in addition to or in lieu of steps , , , , , , and\/or  may be performed.","Serialization engine  and de-serialization engine  may perform operations in addition to those described above with reference to , B, , and . For instance, serialization engine  and\/or de-serialization engine  may be responsible for managing object identities, managing types among the object(s) in the object graph, resolving and\/or preserving cycles, etc. Serialization engine  and de-serialization engine  are capable of handling primitives, built-in objects, user-defined dynamic language objects, host objects, etc. Serialization and de-serialization may be performed natively with respect to serialization engine  and de-serialization engine , respectively, using the binary format.","It will be recognized that device  may not include one or more of serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , DLE object(s) , host API module , host object(s) , call module , and\/or receipt module . Furthermore, device  may include modules in addition to or in lieu of serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , and\/or receipt module .","Any one or more of hosts A-N, any one or more of DLEs A-N, any one or more of serialization engines A-N, any one or more of de-serialization engines A-N, serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , receipt module , flowchart , and flowchart  may be implemented in hardware, software, firmware, or any combination thereof.","For example, any one or more of hosts A-N, any one or more of DLEs A-N, any one or more of serialization engines A-N, any one or more of de-serialization engines A-N, serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , receipt module , flowchart , and\/or flowchart  may be implemented as computer program code configured to be executed in one or more processors.","In another example, any one or more of hosts A-N, any one or more of DLEs A-N, any one or more of serialization engines A-N, any one or more of de-serialization engines A-N, serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , receipt module , flowchart , and\/or flowchart  may be implemented as hardware logic\/electrical circuitry. For instance, in an embodiment, any one or more of hosts A-N, any one or more of DLEs A-N, any one or more of serialization engines A-N, any one or more of de-serialization engines A-N, serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , receipt module , flowchart , and\/or flowchart  may be implemented in a system-on-chip (SoC). The SoC may include an integrated circuit chip that includes one or more of a processor (e.g., a microcontroller, microprocessor, digital signal processor (DSP), etc.), memory, one or more communication interfaces, and\/or further circuits and\/or embedded firmware to perform its functions.",{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 9","FIG. 1","FIGS. 2-4"],"b":["900","100","8","900","900","900","900","900"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable storage media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable storage media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing any one or more of hosts A-N (e.g., operating system(s), browser(s), etc.), any one or more of DLEs A-N, any one or more of serialization engines A-N, any one or more of de-serialization engines A-N, serialization engine , de-serialization engine , serialization API module , object module , retrieval module , binary module , identifier module , provision module , first creation module , intermediate representation module , second creation module , reconstruction module , host API module , call module , receipt module , flowchart  (including any step of flowchart ), and\/or flowchart  (including any step of flowchart ), as described herein.","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A display device  (e.g., a monitor) is also connected to bus  via an interface, such as a video adapter . In addition to display device , computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through a network interface or adapter , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like. Such computer-readable storage media are distinguished from and non-overlapping with communication media. Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wireless media such as acoustic, RF, infrared and other wireless media. Example embodiments are also directed to such communication media.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments discussed herein. Accordingly, such computer programs represent controllers of the computer .","Example embodiments are also directed to computer program products comprising software (e.g., computer-readable instructions) stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments may employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMS-based storage devices, nanotechnology-based storage devices, and the like.","While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art(s) that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described example embodiments, but should be defined only in accordance with the following claims and their equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form part of the specification, illustrate embodiments of the present invention and, together with the description, further serve to explain the principles involved and to enable a person skilled in the relevant art(s) to make and use the disclosed technologies.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIGS. 2-5","FIG. 1"],"b":"8"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 6A and 6B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"}]},"DETDESC":[{},{}]}
