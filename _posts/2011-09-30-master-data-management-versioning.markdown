---
title: Master data management versioning
abstract: A method, system, apparatus, and article of manufacture provide the ability to maintain multiple versions of structured views of data in a computer system. A relational database management system (RDBMS) is executed that stores master data in the computer system in master RDBMS tables. The master data is hierarchical in nature and hierarchy metadata for the master data is stored in the RDBMS tables. As part of a process and framework, a series of business rules and process workflows are maintained to manage the master data. Version tables are created in the RDBMS that correspond to each of the master RDBMS tables. Each of the version tables includes an attribute denoting version information. Versions of the master data are defined by replicating the master data and hierarchy metadata into the corresponding version tables. The version tables are used to graphically visualize, manage, and manipulate the versions of the master data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098538&OS=09098538&RS=09098538
owner: Teradata US, Inc.
number: 09098538
owner_city: Dayton
owner_country: US
publication_date: 20110930
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS-REFERENCE TO RELATED APPLICATIONS","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENT","OVERVIEW","CONCLUSION"],"p":["This application claims the benefit under 35 U.S.C. Section 119(e) of the following commonly-assigned U.S. provisional patent application(s), which is\/are incorporated by reference herein:","Provisional Application Ser. No. 61\/388,387, filed Sep. 30, 2010, by Neelesh V. Bansode, Thomas K. Ryan, Latesh Pant, Vivek Shandilya, Nitin Pratap Jain and Shashank Shekhar, entitled \u201cMaster Data Management Versioning.\u201d","This application is related to the following co-pending and commonly-assigned patent application, which application is incorporated by reference herein:","U.S. patent application Ser. No. 12\/574,509, entitled \u201cHIERARCHY MANAGER FOR MASTER DATA MANAGEMENT\u201d, by Brian J. Wasserman, Thomas K. Ryan, Carl L. Christofferson, Neelesh V. Bansode, Santosh Kumar Singh, Madhavi Chandrashekar, and Vivek Shandilya, filed on Oct. 6, 2009, which application claims priority to Provisional Application Ser. No. 61\/195,321, filed Oct. 6, 2008, Brian J. Wasserman, Thomas K. Ryan, Carl Christofferson, Neelesh V. Bansode, Santosh Kumar Singh, Madhavi Chandrashekar, and Vivek Shandilya, entitled \u201cHierarchy Manager for Master Data Management.\u201d","1. Field of the Invention","This invention relates in general to managing business critical data in a computer, and in particular, to managing different versions of such data.","2. Description of Related Art","Master Data Management\u2122 (MDM) (also known as an MDM application), available from the assignee of the present invention, is an application that allows users to manage their business critical data. This critical data can originate from a myriad of sources and external feeds, but ultimately, the goal is that all of this data be consolidated into a central business data warehouse. Master Data Management\u2122 is the process and framework for maintaining a series of business rules and process workflows that will manage this data as it feeds in from multiple sources. Master Data Management\u2122 then applies these business rules and process workflows to produce \u201cmaster\u201d data, which is then fed to all consuming business processes.","A common requirement for customers in a Master Data Management\u2122 context is the ability to manage master data across different versions of that data. Specifically, users desire to manage \u201cversions\u201d of hierarchies that contain master data records and master data relationships. Such problems may be better understood with a more detailed explanation of master data and master data relationships.","Core to the management of master data is the definition of a data model. The data model serves as the foundation for all business rules and workflow processes within the Master Data Management\u2122 (MDM) framework. The data model represents the form the master data must ultimately take in the customer's data warehouse to be used by the consuming business applications.","A significant portion of the business critical master data consists of \u201cdata relationship\u201d data itself. Relationship data is the data required to manage the association of one piece of data (typically a data entity or table) to another. The Data Relationship can take the form of a hierarchy or a direct reference or any other association. Management of the relationship or association requires data and business processes that are key to the concept of Master Data Relationship Management.","Different versions of both the master data and relationship data may exist in various hierarchies across multiple users. Accordingly, it is desirable to manage and manipulate such different versions.","One or more embodiments of the invention provide techniques to manage and to manipulate versions of hierarchies and hierarchical data. The master data and the relationship data reside in a series of MDM\u2122 tables that are part of the core of Master Data Management\u2122. Management and manipulation of relationship data are provided within MD\u2122 in the form of user interfaces, hierarchies, and business workflows capabilities.","In the following description of the preferred embodiment, reference is made to the accompanying drawings which form a part hereof, and in which is shown by way of illustration a specific embodiment in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.","One or more embodiments of the invention provide techniques and capabilities for managing and manipulating different versions of hierarchies and hierarchical data.","Hardware and Software Environment Overview","Master data (sometimes referred to as reference data) are facts that define a business entity, facts that may be used to model one or more definitions or view of an entity. Entity definitions based on master data provide business consistency and data integrity when multiple systems across an organization (or beyond) identify the same entity differently (e.g., in differing data models).","Business entities modeled via master data are usually customer, product, or finance. However, master data can define any entity, like employee, supplier, location, asset, claim, policy, patient, citizen, chart of accounts, etc.","A system of record is often created or selected (also referred to as a trusted source) as a central, authenticated master copy from which entity definitions (and physical data) are propagated among all systems integrated via a Master Data Management\u2122 (MDM) framework.","The system of record can take many forms. Many users build a central database (e.g. a data warehouse or operational data store) as a hub through which master data, metadata, and physical data are synchronized. Some hubs are simply master files or tables that collect and collate records.","Regardless of the technology approach, embodiments of the invention provide the ability to deploy a system on any designated target system for testing or production.",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 1","b":["100","100","102","104","106","106","100"]},"In one or more embodiments, the RDBMS  includes at least one parsing engine (PE)  and one or more access module processors (AMPs) A-E storing the relational database in one or more data storage devices A-E. The parsing engine  and access module processors  may be implemented in separate machines, or may be implemented as separate or related processes in a single machine. The RDBMS  used in the preferred embodiment comprises the Teradata\u00ae RDBMS sold by Teradata\u2122 US, Inc., the assignee of the present invention, although other DBMS's could be used. In this regard, Teradata\u00ae RDBMS is a hardware and software based data warehousing and analytic application\/database system.","Generally, clients  include a graphical user interface (GUI) for operators or users of the system , wherein requests are transmitted to the interface  to access data stored in the RDBMS , and responses are received therefrom. In response to the requests, the interface  performs the functions described below, including formulating queries for the RDBMS  and processing data retrieved from the RDBMS . Moreover, the results from the functions performed by the interface  may be provided directly to clients  or may be provided to the RDBMS  for storing into the relational database. Once stored in the relational database, the results from the functions performed by the interface  may be retrieved more expeditiously from the RDBMS  via the interface . Further, each client  may have other data models .","Note that clients , interface , and RDBMS  may be implemented in separate machines, or may be implemented as separate or related processes in a single machine. Moreover, in one or more embodiments, the system  may use any number of different parallelism mechanisms to take advantage of the parallelism offered by the multiple tier architecture, the client-server structure of the client , interface , and RDBMS , and the multiple access module processors  of the RDBMS . Further, data within the relational database may be partitioned across multiple data storage devices  to provide additional parallelism.","Generally, the clients , interface , RDBMS , parsing engine , and\/or access module processors A-E comprise logic and\/or data tangibly embodied in and\/or accessible from a device, media, carrier, or signal, such as RAM, ROM, one or more of the data storage devices A-E, and\/or a remote system or device communicating with the computer system  via one or more data communications devices. The above elements - and\/or operating instructions may also be tangibly embodied in memory and\/or data communications devices, thereby making a computer program product or article of manufacture according to the invention. As such, the terms \u201carticle of manufacture,\u201d \u201cprogram storage device\u201d and \u201ccomputer program product\u201d as used herein are intended to encompass a computer program accessible from any computer readable device or media. Accordingly, such articles of manufacture are readable by a computer and embody at least one program of instructions executable by a computer to perform various method steps of the invention.","However, those skilled in the art will recognize that the exemplary environment illustrated in  is not intended to limit the present invention. Indeed, those skilled in the art will recognize that other alternative environments may be used without departing from the scope of the present invention. In addition, it should be understood that the present invention may also apply to components other than those disclosed herein.","Hardware and Software Environment Details","As described above with respect to , the master data is stored in RDBMS  and is accessed by clients  via interface . Such client  access through interface  is enabled by MDM sanctioned data processes referred to as workflows (e.g., provided in interface ). Rather than being provided via interface , such workflows may be provided as part of parsing engine  or be provided by the AMPs  (or other parts of RDBMS ). Consumer applications and processes may execute on clients  and may need to receive data from the RDBMS .","Further, as described above, it is desirable to manage master data across different versions of the data. In this regard, it is desirable to manage versions of hierarchies that contain master data records and master data relationships. To enable such versioning management and to achieve accurate decision making, hierarchy master data and its associated relationship data must be consistent and accurate. With the capability of providing various \u201cwhat-if\u201d scenarios of future verses present data relationship analysis, via \u201cversioning\u201d, embodiments of the invention provide a distinct advantage to the decision makers of the organization.","Within MDM, a \u2018Version\u2019 is an exact copy of the master data and all of its associated master data relationships tied together via a version-ID. A newly formed \u2018Version\u2019 can remain as the original, or modifications can be made to it (or any of its data contents), for comparisons, analysis and\/or reporting. The data model illustrated in  can assist in visualizing a hierarchy version in accordance with one or more embodiments of the invention. The data model of  can also be viewed as a version extension to the master data relationship management (MDRM) data model. A detailed description of  is below.","Embodiments of the invention directly integrate the management and visualization of hierarchical data with master data management. This allows for customers to view, visualize, and interact with data in a hierarchical version, while allowing this data to remain under the control of the MDM framework.","One desirable element in a design of embodiments of the invention is to create additional placeholder data structures and tables for the version metadata and data itself. Accordingly, a new staging area named \u201cVersion\u201d may be added (to the existing data model) for replicating the master data. Each master table has one corresponding version table. Also the version table may have an additional attribute denoting the version information and effectively forming the part of the primary key in the version tables. The version table may follow the standard naming conventions as per MDM staging areas.","Versioned staging tables are designed to utilize partitioning concept (PPI) to optimize the retrieval and deletion of version data, as the data is always fetched\/analyzed with respect to a particular partition at a time, hence, a version id is chosen to be the partition column, providing the benefits of dynamic partition elimination (DPE) at the run time.","An exemplary scenario is that of a geography hierarchy consisting of Country, State and City data. For simplicity, assume that these three data elements are master tables within the MDM context. These tables would also be the Relationship Objects (ROs) in the MDM Hierarchy Management context. The RO creation sub-module needs to be enhanced to capture the version related information by adhering to the above design principles.","There may be a need to take a version of this geography hierarchy for an analysis\/comparison purpose. The versioning process would copy the hierarchy metadata and the actual master data into the corresponding Version tables.","All of this information (master data as well as metadata) is stored in physically separate staging\/meta tables. Accordingly, the versioned data will have the proviso to undergo edits for \u201cwhat-if\u201d types of analysis or can be specified as \u201cread-only\u201d versions for historical or time dependent analysis and can be accessed in the same way as other hierarchies would be accessed from hierarchy a manager\/viewer. Additionally, each of these hierarchies can undergo multiple versions.","All other sub features of hierarchy manager\/viewer, e.g., search and drag and drop, including the support for database views, may also be enhanced to support the versioned hierarchy.","Hierarchy Manager Architecture","As described above, a hierarchy is a set of business data that can be organized into a hierarchical structure. In master data management (MDM), a hierarchy is constructed from the data already contained in a database (e.g., a Teradata\u2122 database available from the assignee of the present invention). This means that the member data contained in the fact tables that comprise a hierarchy is already under management of various MDM workflows and business processes.","The hierarchy manager feature of MDM allows users with proper authorization to create and modify the structural composition of a hierarchy. This hierarchy structure can then be used to drive a hierarchy viewer and any reporting processes. The hierarchy manager and viewer are integrated directly into the Master Data Management Framework (described above). Its hierarchy viewer (and manager)'s primary responsibilities are to allow users to visualize the data in a hierarchical fashion. Users can also interact directly with this data, to access detailed information about specific data elements, or to manipulate the data in a way that modifies the hierarchical relationships of the data.","In view of the above, various implementations of the invention may provide the ability to create a hierarchy and then launch a viewer to view the hierarchy and edit the hierarchy data.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":"FIG. 3","b":["300","302","304","306","302","306","302","306"]},"The user interface  may be coded using Adobe\u2122 Flex\u2122 components (e.g., Adobe\u2122 Flex\u2122 3 [MXML A and ActionScript\u2122 3.0 B]). A thin business delegate layer B (and supporting data transfer [or value] remote objects C) serves to separate the business tier logic  from the remainder of the presentation logic. This business delegate may be written in ActionScript\u2122 B. Thus, the business delegate layer B separates the presentation logic A from the business logic  in the web application server.","The business tier  resides on a web server and consists of POJOs (Plain Old Java Objects) A that handle the majority of the business tier processing.","The MDM hierarchy database  is a new database that holds various metadata tables. The tables hold metadata about hierarchies. This includes information about the dimensions, hierarchies, hierarchy objects, and hierarchy relationships.","The user interface component  is designed in a rich interface application (RIA) (e.g., via MXML A and ActionScript B) which in turn utilizes remote objects C to call a Java\u2122 servlet deployed in the web application server  (e.g., via BlazeDS\u2122). BlazeDS\u2122 B is a server-based Java\u2122 remoting and web messaging technology (available from Adobe\u2122) that enables developers to easily connect to back-end distributed data and push data in real-time to Flex\u2122 applications (i.e., in user interface ) for more responsive rich internet application (RIA) experiences.","To support hierarchy versioning, the user interface  may include various Flex\u2122 based screens for capturing versioning metadata and triggering the versioning process. Versioned hierarchy may be treated similar to a normal hierarchy and should maintain the common look and feel. Users may be able to indicate whether the version is editable or non-editable, at the time of creation. Users may also be able to launch the version viewer from a hierarchy manager and may also be able to jump directly to the viewer. Once launched, if a version is editable, embodiments of the invention may allow the user to perform operations like drag\/drop and cut\/paste to modify the hierarchy.","As described above, embodiments of the invention provide an extension to the existing hierarchy management feature within MDM. For creation of the new version staging area, a new \u201cversion\u201d service may be added that represents the new version tables. The schema generation and incremental schema generation process may be enhanced to account for the new staging area. Various components and viewing systems may be modified to depict such a new staging area and capture related details. Additional metadata tables may also be defined to capture the hierarchy version metadata. Again, as described above, Flex\u2122 technology may be used to represent the rich user interface for management of hierarchies. The Java\u2122 based APIs (application programming interfaces) may also be enriched to handle the versioning related objects and data for the business tier . New user interface panels and controls may also be defined for the creation of a version and viewing the version. In addition, stored procedures may be used for all data replication tasks to leverage the database  capabilities.","Additional details and example implementations of the user interface  are described below.","The business tier component  may be configured to support various high-level business tier functions for both hierarchies and the hierarchy version viewer. In this regard, various Java\u2122 APIs may be enriched to handle the versioning related objects and data for the business tier . With respect to hierarchies, the business tier  may provide the ability to get a hierarchy version for a hierarchy (i.e., returning a list of versions). In addition, a hierarchy version may be created by adding an entry to a hierarchy version table, a version metadata table, and by replicating the master data from MDM tables to version tables for all entities in the hierarchy.","To provide support for the hierarchy version viewer, the business tier  may perform search operations before and after launching a version viewer. Additionally, version data may be modified by various means (e.g., drag and drop, cut and paste, etc.). Lastly, on the click of a node, an internal or internal URL (uniform resource locator) may be launched that can provide additional details of the node.","Details of Exemplary Implementation","MDM Database ",{"@attributes":{"id":"p-0060","num":"0059"},"figref":["FIG. 2","FIG. 2"],"b":["306","306"]},"A dimension table  defines a dimension. Fields within the table include a unique identifier (e.g., an integer) of the dimension, a name of the dimension, and a description of the dimension.","The hierarchy table  defines a hierarchy that belongs to a specific dimension (from dimension table ). The hierarchy table  includes a HierarchyID, a name of the hierarchy, a description of the hierarchy, a version number for the hierarchy, a dimension ID for the dimension to which the hierarchy belongs, the name of the user creating the hierarchy, and a timestamp of the create date. The key to the hierarchy table  is the combination of the hierarchy ID and the version number.","The hierarchy version table  contains information about each version of the hierarchy (from hierarchy table ) including an ID (of the hierarchy), a version number, a name of the user that explicitly created the hierarchy version, a description of the version, a date the hierarchy becomes effective, a placeholder column for the status of the hierarchy version, and the date the user created this version of the hierarchy. Further information regarding the version information may be stored in table  and details regarding the version information of table  may be stored in version information details table .","A hierarchy relational object model (ROM) table  that defines a relation between hierarchy  are relational object entities (tables -). One hierarchy  can have one or more than one relation. The hierarchy ROM table  includes a unique identifier (e.g., integer) of the hierarchy  and an ID of the relational object map .","A relational object (from the hierarchy database) and a corresponding version relational object table  support the ability to use a hierarchy object in multiple hierarchies. To view a portion of the information in table , a version relational object filter may specify filtering information in table . Similarly, hierarchy information for the level of the relational object (for table  and the hierarchy version table ) may be specified in table . Table  may include the following:","a unique identifier of the relational object;","a logical name of the table present in the database;","a physical name of the table present in the MDM database;","a name of the relational object;","a description of the relational object;","a view name for which relational object is created (null if a physical name exists);","a name of the column of the table that is to be displayed in the hierarchy viewer;","a URL address of a website launched when a user clicks on the node (the website can be internal or external);","a parameter of the URL that needs to be appended;","column names by which data is to be sorted;","logical column name that is to be displayed;","logical names of columns by which data is to be sorted;","logical name of columns that are displayed when a user hovers around the node;","a display name for versioning;","a sort column in the version table by which data is to be sorted;","a URL address of a versioned node that is launched when the node is clicked on;","a version physical name;","a name of the view that is used for versioning (null when a physical name is specified);","a logical name of a version table; and","a logical column name that is displayed when a node is hovered.","A relational object map (from a hierarchy database) and a corresponding version relational object map table  contain relational object relationships. Various relational object properties\/version relational object properties and relational object data\/version relational object data for the relational object map may be specified in tables  and  respectively. Fields\/columns for the relational object map table  may include:","a unique identifier (integer) of the relational object map;","the name of the relationship, i.e. \u201cFamilies to Segments\u201d;","the name of relationship which two relational objects are mapped;","a unique identifier of the relational object that is present as the parent in the relation;","a unique identifier of the relational object that is present as the child in the relation;","a unique identifier of the relational object key type table , that defines the type of key for the parent RO (a description of the version relational object key may also be specified in a separate table );","a unique identifier of the relational object key type table , that defines the type of key for the child RO;","a unique identifier of the relational object (e.g., the version relational object data table ) for the relation's target (i.e., where the relational data persists);","physical names of columns that are involved in the mapping of relations from the parent RO table;","physical names of columns that are involved in the mapping of relations from the child RO table;","a description of the relation;","logical names of columns that are involved in the mapping for relations from the parent RO table; and","logical names of columns that are involved in the mapping for relations from the child RO table.","For versioned tables (i.e., all of the tables of ), an additional column\/field may be added to indicate the version ID. All other columns may remain the same from the hierarchy tables in the MDM database. Further, stored procedures may be used for all data replication tasks to leverage the database capabilities.","Framework Related Enhancements","For creation of the new version staging area, a new \u201cVersion\u201d service may be added that represents the new version tables (i.e., of ). As described above, MDM provides the process and framework for maintaining a series of business rules and process workflows that manage business critical data as it feeds in from multiple sources. Developers may need to design the schema for the database where the master data is stored. Prior art implementations provided a schema generation and incremental schema generation process to provide such design capabilities. To account for the addition of the new version service and version staging area, the schema generation and incremental schema generation processes may be enhanced. Further, prior art management and design tools (e.g., Studio\u2122) may be modified to depict the new staging area and to capture related details.","User Interface Enhancements for Versioning","As described above, it is desirable for customers in a MDM context to have the ability to search for a certain entity, view it in the hierarchy, and then launch a maintenance workflow for that record. Referring again to , the Adobe\u2122 Flex\u2122 technology (e.g., Adobe Flex 3\u2122) within UI component  provides a capability to represent and view an entity using a hierarchy Flex\u2122 UI. In addition, hierarchy versioning may utilize new Flex\u2122 based screens for capturing versioning metadata and triggering the versioning process. A versioned hierarchy is treated similar to a normal hierarchy and maintains the common look and feel as that of prior art hierarchies in a hierarchy viewer.","To create a hierarchy version, a user simply selects a menu option to create a version based on a currently selected hierarchy (that the version will correspond with).  is an exemplary user interface illustrating the selection of a menu option to create a new hierarchy version in accordance with one or more embodiments of the invention. As illustrated, the user selects a particular hierarchy (e.g., hierarchy \u201cCountry_State_City\u201d ), activates a menu command (e.g., via a keyboard control, right mouse click, etc.) and selects the \u201cCreate version\u201d option  from menu .","In response to the activation of menu option , the user may be presented with additional options for the hierarchy version.  is an exemplary user interface illustrating the options for configuring a hierarchy version in accordance with one or more embodiments of the invention. As illustrated, users can indicate whether the version is editable or non-editable , at the time of creation. Making a hierarchy non-editable would imply that editing or \u201cdrag and drop\u201d would not be allowed on this particular hierarchy version. Additional hierarchy version metadata may be specified including the reason for creating the hierarchy version , the version number , and the start and end dates .","To view a hierarchy, the user can launch a version viewer from within the hierarchy manager and can also jump directly to the viewer. Once launched, if the version is editable, it would allow the user to perform operations like Drag\/Drop and Cut\/Paste to modify the hierarchy. Further, the hierarchy viewer enables the user to view additional details of the hierarchy version including the creator and effective dates (e.g., specified in the user interface of ).  is a user interface illustrating a view of a hierarchy version using a hierarchy viewer in accordance with one or more embodiments of the invention. As illustrated, the version, reason, user, and relevant dates are displayed in the viewer .","Logical Flow",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 7"},"At step , a relational database management system (RDBMS) is executed. The RDBMS stores master data in the computer system in one or more master RDBMS tables. Further, the master data is hierarchical in nature and hierarchy metadata for the master data is also stored in the RDBMS tables.","At step , as part of a process and framework, a series of business rules and process workflows to manage the master data are maintained.","At step , one or more version tables are created in the RDBMS that correspond to each of the one or more master RDBMS tables. Each of the version tables further includes an attribute denoting version information (to tie together the different versions and also establish a primary key in\/for each version). Further, the version tables may utilize a partitioning concept to optimize a retrieval and deletion of version data.","At step , one or more versions of the master data are defined by replicating (e.g., in a version staging area) the master data and hierarchy metadata stored in the master RDBMS tables into the corresponding version tables.","At step , the version tables are used to graphically visualize, manage, and manipulate the one or more versions of the master data. Thus, a version of the master data may be edited using the hierarchy data stored in the version tables (e.g., using a hierarchy viewer that displays a hierarchical representation of the different versions.","This concludes the description of the preferred embodiment of the invention. The following paragraphs describe some alternative embodiments for accomplishing the same invention. In one alternative embodiment, any type of computer or configuration of computers could be used to implement the present invention. In addition, any database management system, decision support system, on-line analytic processing system, or other computer program that performs similar functions could be used with the present invention.","In view of the above, embodiments of the invention support different versions of master data that can be used to historical or time dependent analysis and that can be accessed in the same way as other hierarchies. Further, such versioning is supported as part of and integrated into the master data management context.","The foregoing description of the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Referring now to the drawings in which like reference numbers represent corresponding parts throughout:",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
