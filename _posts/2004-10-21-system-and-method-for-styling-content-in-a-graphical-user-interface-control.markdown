---
title: System and method for styling content in a graphical user interface control
abstract: An improved system and method for styling content in a graphical user interface control is provided. An application may define a user interface control having a data object of any type of singular content, including another user interface control. An application may include style declarations that may associate a style resource with the user interface control and a style resource may be dynamically selected for presenting the data object of the user interface control. The style resources may define property values that may be selectively applied to specify a visual representation for the user interface control and data object, such as a visual subtree. A visual representation of the user interface control with the data object may be generated and then a display representation may be rendered for presentation on a user interface display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603624&OS=07603624&RS=07603624
owner: Microsoft Corporation
number: 07603624
owner_city: Redmond
owner_country: US
publication_date: 20041021
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates generally to computer systems, and more particularly to an improved system and method for styling scontent in a graphical user interface control.","When creating a computer application, a developer typically may choose a particular environment, or platform on which the application will ultimately be executed. For example, when writing an application, the developer may choose to develop the application to run on the Microsoft Windows\u00ae platform. As a result, the program developer may have different options available for defining how user interface objects will look during interactions with a user of the application. However, an application developer may have only limited control over the user interface objects. For example, an application developer may typically change the labels of buttons, but may not be able to change their color depending upon the platform, and may not be able to change their shape, border thickness, or even their behavior.","As a result, an application developer may program the application with user interface elements provided by the platform or may create customized user interface elements by defining aspects of their appearance such as background color, font size, border thickness, and so forth, so that the chosen platform may render the display as intended by the application developer. Although functional, this process suffers certain drawbacks. For instance, in order to customize a graphical user interface control for a particular system, a developer may be required to explicitly specify the property values for how the graphical user interface control will be displayed. This may become a cumbersome and repetitive process since the customized style may only apply to one graphical user interface control and the process of customizing the style for other graphical user interface controls may need to be repeated for each graphical user interface control. Moreover, such controls traditionally only allowed their data content to be a simple string since that was the only type of data displayable for a control.","What is needed is a way for an application developer to customize the style of any type of graphical user interface control and more easily define how the content of the graphical user interface control will look during interactions with a user of the application. Such a system and method should allow a graphical user interface control to display any type of data content. Furthermore, the system and method should allow an application developer to define a customized style only once for displaying the user interface control with a certain type of data content so that the customized style may also be used for displaying other user interface controls.","Briefly, the present invention provides an improved system and method for styling content in a graphical user interface control. To this end, an application may define a user interface control having a data object of any type of singular content, including another user interface control. An application may include style declarations that may associate a style resource with the user interface control and a style resource may be dynamically selected for presenting the data object of the user interface control. The style resources may define property values that may be selectively applied to specify a visual representation for the user interface control and data object, such as a visual subtree. A styling engine may be provided for applying a style resource to a user interface control and a content presenter may be provided for dynamically selecting a style resource for presenting the data object of the user interface control. Furthermore, a property engine may be provided for locating property values, a data binding engine may be provided for binding properties of the style resource with properties on data content of the user interface control, and a tree assembler may be provided for generating a visual representation of the user interface control with the data object. Finally, a rendering engine may be provided for rendering a display representation of the visual representation for presentation on a user interface display.","The present invention also provides methods for displaying a user interface control with its data content using associated style resources. When a request is received to display a user interface control, style resources associated with the user interface control may be located and property values of the style resource may be applied to the user interface control. In applying the style resources, a visual representation of the user interface control with the applied property values may be generated. A style resource may also be dynamically assigned and applied to the data object of the user interface control. For example, a style may be dynamically selected by the content of data object, by the type of the data object, by one or more property values of the data object, and so forth. In applying the style resource, a visual representation of the data object with the applied property values may be generated. Finally, a display representation of the user interface control with the data object may then be rendered for presentation on a user interface display.","Advantageously, the present invention may associate shared style resources with several user interface controls for display. By sharing the style information, an application developer need only define the style once. Upon defining the style, the developer may declaratively associate any number of user interface controls with the defined style.","Other advantages will become apparent from the following detailed description when taken in conjunction with the drawings, in which:","Exemplary Operating Environment",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","100","100","100"]},"The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to: personal computers, server computers, hand-held or laptop devices, tablet devices, headless servers, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, being executed by a computer. Generally, program modules include routines, programs, objects, components, data structures, and so forth, which perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in local and\/or remote computer storage media including memory storage devices.","With reference to , an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of the computer  may include, but are not limited to, a processing unit , a system memory , and a system bus  that couples various system components including the system memory to the processing unit . The system bus  may be any of several types of bus structures including a memory bus or memory controller, a peripheral bus, and a local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnect (PCI) bus also known as Mezzanine bus.","The computer  typically includes a variety of computer-readable media. Computer-readable media can be any available media that can be accessed by the computer  and includes both volatile and nonvolatile media, and removable and non-removable media. By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can accessed by the computer . Communication media typically embodies computer-readable instructions, data structures, program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term \u201cmodulated data signal\u201d means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example, and not limitation, communication media includes wired media such as a wired network or direct-wired connection, and wireless media such as acoustic, RF, infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer-readable media.","The system memory  includes computer storage media in the form of volatile and\/or nonvolatile memory such as read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules  and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. By way of example only,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media, a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive  is typically connected to the system bus  through a non-removable memory interface such as interface , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a removable memory interface, such as interface .","The drives and their associated computer storage media, discussed above and illustrated in , provide storage of computer-readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules  and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers herein to illustrate that, at a minimum, they are different copies. A user may enter commands and information into the computer  through input devices such as a tablet, or electronic digitizer, , a microphone , a keyboard  and pointing device , commonly referred to as mouse, trackball or touch pad. Other input devices not shown in  may include a joystick, game pad, satellite dish, scanner, or other devices including a device that contains a biometric sensor, environmental sensor, position sensor, or other type of sensor. These and other input devices are often connected to the processing unit  through a user input interface  that is coupled to the system bus, but may be connected by other interface and bus structures, such as a parallel port, game port or a universal serial bus (USB). A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video interface . The monitor  may also be integrated with a touch-screen panel or the like. Note that the monitor and\/or touch screen panel can be physically coupled to a housing in which the computing device  is incorporated, such as in a tablet-type personal computer. In addition, computers such as the computing device  may also include other peripheral output devices such as speakers  and printer , which may be connected through an output peripheral interface  or the like.","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to the computer , although only a memory storage device  has been illustrated in . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets and the Internet. When used in a LAN networking environment, the computer  is connected to the LAN  through a network interface or adapter . When used in a WAN networking environment, the computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, may be connected to the system bus  via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to the computer , or portions thereof, may be stored in the remote memory storage device. By way of example, and not limitation,  illustrates remote application programs  as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Styling Content in a Graphical User Interface Control","The present invention is generally directed towards a system and method for styling content in a graphical user interface control. In particular, the present invention relates to providing a user interface control having a data object of any type of singular content and associating style resources with the user interface control for dynamically applying a style for displaying the data object. Moreover, the present invention may allow an application developer to define a customized style only once for displaying the user interface control with a certain type of data content so that the customized style may also be used for displaying other user interface controls with a data object.","As will be seen, the architecture of the present invention may be used for development of many different user interface controls and may support control composition for creating a control within another control. As will be understood, the various block diagrams, flow charts and scenarios described herein are only examples, and there are many other scenarios to which the present invention will apply.","Turning to  of the drawings, there is shown an exemplary illustration generally representing a user interface display for an application. The computer system , which may be representative of computer system  in , may render user interface elements for display on display screen . The display screen  is enlarged in  to show details of the display. The display  may relate to a display of an example company application used to manage different portions of a business, employee information for example. Those skilled in the art will appreciate that any other type of content or application may use the present invention.","In this particular example, the display  may have a title bar  and an employee window . There may be other windows for managing other information as indicated by scroll bar . Employee window  may have a title bar , a tool bar , and buttons , , , and  within flow panel . Tool bar  may provide user controls such as a search control  and an add employee control , among potentially many others. The user interface controls, buttons, title bars, scroll bars, tool bars and windows are generally known in the art as user interface elements. A user interface element may also be referred to as a user interface object and means, as used herein, any visual primitive used to build a graphical user interface screen including without limitation a listbox, combination box, menu, dialog box, a control, toolbar, a frame, a window, and so forth. A user interface control means any user interface element with its own graphical representation and programmed behavior for interacting with a user or the computer system in response to input such as the occurrence of specific events. A user interface control may include, for example, a button, a checkbox, a text box, a scroll bar, and so forth.","Within employee window , there are two sub-windows, such as employee list window  and employee detail window . In this particular example, employee window  displays a list of all the employees working for ABC Company. In a particular embodiment, each user interface control may be one of a group of user interface controls, such as buttons , ,  and , which may be stored in a database or other data store. Each user interface control may have an associated set of properties and data content. For example, the properties for a user interface control may include a size property, a shape property, a position property, a background color property and so forth. Any type of data content may be associated with the user interface control and a specific style may also be defined to display that data content.","The present invention relates to the association of user interface controls, such as the user interface controls represented by  in display , with user interface style properties in order to provide a layout representation to a rendering engine, which in turn may create the display representation, as shown in . User interface controls , ,  and , for example, may each be displayed using the same basic style definition that may also include a style definition for the data content associated with the user interface controls. For instance, the border thickness and background color used may be the same for each user interface control when displayed and the font size and font type used for displaying the data content may be the same. In general, defining a basic style for displaying properties of a user interface control need only be done once by a developer of an application and that style may be used for other user interface controls that are to be displayed and, significantly, that style may be used by a developer for user interface controls in any number of other applications. Furthermore, different style definitions may be created for different types of data content which may be dynamically displayed inside a user interface control.",{"@attributes":{"id":"p-0035","num":"0034"},"figref":["FIG. 3","FIG. 3","FIG. 1","FIG. 3"],"b":["330","320","328","320","110"]},"An application  may be any executable software code including a kernel component, an application component, a linked library, an object, and so forth. Furthermore, an application  may be any number of different computer applications or programs developed for use on many different types of computer systems. For example, the application  may be an employee management application such as described in conjunction with . The application  may execute on a computer system such as computer system  to display controls of a user interface, among other things. In an embodiment, the application  may access a data store , which may persistently store, among other items, a plurality of user interface controls . Each user interface control  may include a data object  which may be any type of data content. For instance, the data object may be text, an image, a user interface element, or other type of object. Each user interface control may be defined, for instance by application , by using control definitions . Each user interface control  may also include associated methods and events (not shown). In accordance with embodiments of the present invention, the user interface controls may be independent of any associated style for rendering a display representation of the user interface controls.","In order to associate a style with a user interface control, the application  may access style resources . The style resources  may be style definitions developed or designed by the developer of the application  or the definitions may be created by a third party. The style definitions relate to the actual style properties to be associated with the user interface controls  of an application in order for the user interface controls to be ultimately displayed. Among the style resources , there may be control styles  that may be used for developing a user interface control. A control style may be stored separately from the user interface controls and may be relatively independent of the user interface controls themselves. A control style may influence the display of user interface controls in three principal ways: (1) by specifying property values for the user interface control itself, (2) by specifying an internal representation for the user interface control, such as a visual subtree, and (3) by specifying property values and an internal representation, such as a visual subtree, for the data object of the user interface control. For instance, style definitions may include user interface control properties such as the background color, the foreground color, border thickness, and so forth. The style definition may also include data object properties such as the font size (such as 12 or 10 point, etc.), font type (such as Arial or Courier, etc.), font color (such as black or red, etc.), attributes (such as bold or italics, etc.), and so forth. Also, the style definition may also describes a visual subtree to aid in the creation of an internal visual representation of the user interface controls, such as where a given user interface control should be displayed and how the data object of the user interface control should be displayed. The visual tree is discussed in more detail below.","In an embodiment, the application  may have style declarations that may associate properties of the style resources  to user interface controls . The style declarations  may provide the declarative program statement(s) that associates one or more user interface controls to a control style. Such an association may be made by explicitly identifying the data types and the data style for that type, or by providing a style selector call, or by providing a default style, or by some other method.","Application  may operate on platform . Platform  may include the framework or application programming interface (API) that may provide the necessary communication between the application  and the operating system of the computer, such as computer  shown in . As such, the platform  may provide the intermediate functions and services that may allow the application  to ultimately display user interface elements, such as user interface controls , on a user interface display . Although not shown, the operating system and its necessary operations occur between platform  and display . In a particular embodiment of the invention, the platform  may be the Microsoft Windows platform developed by Microsoft Corporation.","Within the platform , a tree assembler  parses the information received from the application  in order to build a \u201cvisual tree\u201d which is an internal representation of the display and thus represents the combination of the data from the user interface controls  to be displayed and the information from the style resources  that describes how to display the data. The visual tree is described in more detail below in conjunction with . In an embodiment, the tree assembler  includes a styling engine  for locating and applying the appropriate style elements, a property engine  for locating the appropriate property values, and a data binding engine  to associate properties of a user interface elements with properties on data objects. The styling engine  may include a content presenter  for locating and applying the appropriate style elements to a data object of a user interface control. In one embodiment, the application  may make requests to the styling engine  to lookup the correct style definition, then the application  may make requests to the property engine  to lookup the appropriate property values specified by the style definition, and finally the application  may make requests to the data binding engine  to bind properties of the user interface elements with properties on data objects. These requests may be declarative, i.e., interpreted by the tree assembler , or procedural, i.e., the application  calls the binding methods at runtime. Additionally, data binding can also be performed by aliasing to create associations between properties on the elements in a visual tree and the properties of the element being styled, also referred to as the styled parent. This may allow a user of a user interface object such as a component to manipulate properties of the visual tree via direct object manipulation on the component itself. In one embodiment, the association of the properties may be stored in the style. Moreover, the control styles , may also have a declarative request for binding to data as well. In such a case the data binding engine  may handle these requests too. More details of the binding process may be found in copending U.S. patent application Ser. No. 10\/440,081, titled \u201cSYSTEM AND METHOD FOR CONTROLLING USER INTERFACE PROPERTIES WITH DATA\u201d filed on Oct. 23, 2003, assigned to the assignee of the present application, and incorporated herein by reference for all that it discloses and teaches.","In an embodiment, the tree assembler  receives the user interface controls and the style information directly from the application . In other embodiments, the tree assembler  may access the required user interface controls directly from the data store  and the styles resources , respectively, through the operation of the data binding engine . In doing so, the tree assembler  understands where to look and what to find based on the style binding information received from the application's style declarations .","The tree assembler  may complete the visual tree and pass the tree to the rendering engine . In an embodiment, the tree may be passed relatively directly to the rendering engine , which, in turn may use the visual tree to render a display representation of the user interface elements on the user interface display . In an alternative embodiment, the visual tree may be passed first to a layout engine  that may add more information to the visual tree, using user interface elements from a user interface object factory to complete the tree. The layout engine, in an embodiment, may understand the physical properties of the display such that it may determine where to place certain display items and how large to make them relative to the physical characteristics of a particular computer system. The application  and the tree assembler  may typically operate in a dynamic environment whereby the tree assembler  may make an initial visual tree and, as the application  runs and display items may change, the tree assembler  may rewrite or modify the visual tree to update the display representation on the user interface display .","In one embodiment, a user interface control may be a subclass of a base class of controls which may show singular content as a data object.  presents an illustration generally representing an exemplary base class definition for a user interface control named ContentControl . ContentControl may be a control that forms a base class of controls which may have a data object of any type of singular content. For example, a button, a textbox, a checkbox and other controls which may show singular content as their data object may be instances of a subclass of ContentControl. The base class definition of ContentControl  may include a content object named Content  and a style named ContentStyle . The Content may be the data object which represents the singular content displayed by the user interface control. The ContentStyle may be a style having properties for displaying the data object. One way a style may be associated with a data object of a user interface control is by assigning a style to ContentStyle. This style may then by used to create a display representation of the data object in the user interface control.","Once a style has been associated with a data object of a user interface control, the style may be applied to the data object for displaying the data inside the user interface control.  presents an illustration generally representing an exemplary class definition for a control used for applying a style to a data object for display. The illustration shows a definition of a control named ContentPresenter  that may be used to apply a content style to a data object to display the data inside a user interface control. The class definition of ContentPresenter  may include three properties: a data object named Content , a style named ContentStyle , and a style selector named ContentStyleSelector . The Content property of type object may be set to any content by an application author. For instance, the content may be another control or any type of data object including a string, an XML node, an image and so forth. The ContentStyle property of type style may be set to a style for displaying the data object of the user interface control. And the ContentStyleSelector property allows an application author to program logic for dynamically providing a style for the data object. Thus, the ContentPresenter may apply the style identified by ContentStyle or returned by a call to ContentStyleSelector to the Content for displaying the data object inside a user interface control. ContentPresenter may dynamically determine a style for the type of data and apply it.","The ContentStyleSelector may select a style for a given data object.  presents an illustration generally representing an exemplary class definition for a style selector for selecting a style declared for a data object of a user interface control. The definition of the style selector  illustrated in  may have one method for returning a style for a data object. A subclass may override this method in order to provide logic for selecting a style dynamically for a given data object and returning the style to apply to a data object for displaying the data inside a user interface control.","A style may be considered a set of property values that may be applied to a user interface element for presenting a display representation of the user interface element. Associating a set of property values with a user interface control may be accomplished using a defined style.  presents an illustration generally representing exemplary markup language for defining a style and associating the defined style with a user interface control. Lines - show a style definition of a button which includes a ContentPresenter declared on line  that may determine how to display the data object of the button. Lines - also show the three properties of ContentPresenter: the Content, ContentStyle and ContentStyleSelector. Each of these properties may be aliased to the target type of the user interface control what is being styled which, in this example, may be the button. When a ContentControl may be created, bindings may be set up between the properties of the Content, ContentStyle and ContentStyleSelector of the ContentControl to the corresponding properties on the ContentPresenter. The ContentPresenter may then use these properties when determining which style to apply to the content of the data object in the user control. Furthermore, any changes to these properties on the ContentControl may automatically update the corresponding properties on the ContentPresenter.","Lines - show another style for a button declared at line  that may have a data object that is a string, namely \u201cOK\u201d. In addition to the data object, other user interface elements are shown that may be displayed around the data object. For example, a dock panel declared on line  may be displayed within the button. There may be text declared on line  accompanied by an image declared on line  within the dock panel. A border declared on line  may surround a ContentPresenter declared on line  that indicates where the data object should be placed within the button.","Lines - show a third style for a user interface control having a data type of type \u201cPerson\u201d. A ContentPresenter declared on line  may have an image declared on line  to be displayed as the data object of the user interface control. In one embodiment, a user interface control may have a data context property associated with it that may provide a default data source for binding to properties of the user interface control. The ContentPresenter may likewise include a data context property that may be set to the user interface control for establishing data bindings of properties of the data object to the properties assigned to the user interface control. When the ContentPresenter may apply a style to a data object for creating a visual representation of the data object, any property values bound to values of the data object may be resolved by retrieving the corresponding values found in the visual representation for the user interface control.",{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 8","FIG. 7","FIG. 3"],"b":["722","744","802","320"]},"The first item shown in the visual subtree  is a button item . When building the tree, the tree assembler may encounter the button item declared on line  in . Upon encountering the button declaration, a node for the button item may be created to be placed in the visual subtree at position . Next, an inquiry may be performed to determine the style information for the button item. Such style information may include property values of the button as well as property values of the visual subtree for the button. This visual subtree might contain borders or shading information, a background color, and so forth. The tree assembler may set the properties of the button to their desired values, creates a copy of the desired visual tree, and adds it to the main visual tree at position .","The tree assembler may subsequently encounter the Dock Panel item declared on line  in , and a node for the Dock Panel item  may be created and placed in the subtree at position . Similarly, the tree assembler may then encounter the text item declared on line  in , the image item declared on line  in , and the border item declared on line  in . These items may be placed in the subtree at positions ,  and  respectively. Additionally, an inquiry may be performed to determine the style information for these items and the tree assembler may set the properties of these items to their desired values.","The tree assembler may next encounter the ContentPresenter declared on line  in . In general, the ContentPresenter may serve to indicate where the data object should be displayed within the button, may determine the style for displaying the data object within the button, and may apply the style to create the visual subtree for the data object. The data object for the button may be the string \u201cOK\u201d which was assigned to the Content of the button in the declaration for the button on line . The ContentPresenter may determine to display the data object in a Text control and properties of the Text control may be aliased to corresponding properties of the ContentPresenter to control, for example, the font, foreground color, and other text properties. Whenever the layout engine may query the properties of ContentPresenter to provide a layout representation to the rendering engine, the ContentPresenter may apply the style for the data object and may expand the visual tree to include the Text control as the representation for the data object. In one embodiment, a binding may be made like that appearing in line  of  instead of the actual text so that if the data may change in the data object, the data associated with the visual tree  will correspondingly change.","Upon completing the visual subtree  and adding the visual subtree  to the visual tree, the visual tree may be passed to a layout engine, such as engine  in  for including additional user interface elements prior to being sent to the rendering engine . In another embodiment, the layout engine may call the tree assembler as needed to generate the tree just in advance of the layout process. Rendering engine  may render a display representation from the visual tree for presentation on a user interface display.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 9","FIG. 3","FIG. 3","FIG. 1"],"b":["302","318","110"]},"At step , a request to display a user interface control may be received. Upon receiving the request, one or more style resources associated with the user interface control may be located at step . To locate the style resources associated with the user interface control, a style lookup may be performed to determine whether a style was declared by the application such as in style declarations  of , or whether a default style was provided for the user interface control, or whether property values may be inherited from a parent user interface control if a style defining that property value is not found.","Upon locating the style resources associated with a user interface control, the style resources may be applied to the user interface control at step . In applying a style to a user interface control, any property values defined for the visual representation of the user interface control, such as a set of property values for building a visual tree, may be applied at step . To apply the property values defined for the visual tree, the assigned property values may be set for the user interface control, a copy of the visual subtree specified by the style may be created for the user interface control, and the visual subtree for the user interface control may be added to the visual tree. Any property values declared in the style definition using data binding may also be resolved in building the visual tree.","After applying the property values defined for the visual representation of the user interface control, a style resource may be dynamically assigned to the data object of the user interface control at step  and then applied at step . Dynamically assigning and applying a style resource to the data object of a user interface control may be described in more detail below in conjunction with . In applying the style resource, any property values defined for the visual representation of the data object, such as a set of property values for building a visual tree, may be applied at step . To apply the property values defined for the visual tree, the assigned property values may be set for the data object, a copy of the visual subtree specified by the style may be created for the data object, and the visual subtree for the data object may be added to the visual tree. Any property values declared in the style definitions using databinding may also be resolved in building the visual tree.","After applying the property values defined for the visual representation of the data object of the user interface control, a display representation of the visual representation of the user interface control with the data object may be rendered at step . Upon rendering the display representation, the process is finished.",{"@attributes":{"id":"p-0059","num":"0058"},"figref":"FIG. 10","b":["1002","1004"]},"If the content of the data object is not a text element, then it may be determined at step  whether the content is a user interface element itself. If so, then a style may be applied at step  that may add an embedded object directly as a child of the ContentPresenter in the visual tree. For example, the Content property of ContentPresenter may be set to any user interface element. In this case, the user interface element may be placed directly in the tree as an embedded object.","If the content of the data object is not a user interface element, then it may be determined at step  whether the content style may be explicitly set. If so, then that style may be chosen to be applied to the data object at step . For instance, the ContentStyle property of the ContentPresenter may be assigned a style such as by an application. The data context property of the ContentPresenter could be set to the user interface control for establishing data bindings of properties of the data object to the properties assigned to the user interface control.","If the content style is not explicitly set, then it may be determined at step  whether the content style may be selected by using a content style selector. If so, then the style returned by a call to logic for choosing a style may be applied to the data object at step . For example, the ContentStyleSelector property of the ContentPresenter may be set, for instance, by an application. In this case, a call may be made to a method provided by an application author for returning a style for a given data object. In other embodiments, the method may be provided as part of the platform, the operating system, another application, a user library, and so forth. Thus, this mechanism may be used to dynamically select a style for a given data object. This mechanism may advantageously allow the value of the content on a button to change during the lifetime of an application. For example, sometimes the content of a button would be a person object, and at other times the content of the button would be a customer object. This mechanism may then be used to select the style that is appropriate for the person object whenever the content of the button may be the person object and this mechanism may be used to select the style that is appropriate for the customer object whenever the content of the button may be the customer object. Moreover, the style may be selected either by content, type or property values. For instance, a property value may be used directly or as part of an expression, such as if the person's age may be over thirty years old, to select a style. This mechanism provides flexibility for any logic to be used to map a content type or property value of content to a content style. Furthermore, this mechanism may provide a procedural way for an application to decide what style may be used for displaying the content of a user interface control.","If the content style is not selected by using a content style selector, then it may be determined at step  whether there may be a style applicable for the type of content of the data object. If so, a style for the type of data object may be found by a data-style lookup and applied at step . In one embodiment, a data-style lookup may search for a style resource that may have a type value for a style applicable to the type of the content. To do so, the data-style look up may search for style resources in an application resource dictionary or in a system resource dictionary for the type of content and also the type of base class of the content to find the most specific type of class. Such a resource dictionary may have a key, comprising the type of content and type of content presenter, and an associated style. If the data-style look up finds a key for the type of content and the type of content presenter, then that style may be used.","If a style applicable for the type of content of the data object is not found at step , then it may be determined at step  whether the content of the data object may be a string of characters. If so, then a style may be applied at step  that may add a text control directly as a child of the ContentPresenter in the visual tree with the string assigned or aliased as content of the text control. In addition to adding the text control as a child of the ContentPresenter in the visual tree, properties of the text control may be aliased to corresponding properties of the ContentPresenter to specify, for example, the font, foreground color, and other text properties.","If the content of the data object is not a string, then it may be determined at step  whether the content of the data object may be an XML node. If so, then a style may be applied at step  that may add a text control directly as a child of the ContentPresenter in the visual tree with the text of the XML node assigned as content of the text control. In one embodiment, the text of the XML node may be assigned as content of the text control by binding the path of the text of the XML node to the content of the text control.","Finally, if the content of the data object is not an XML node, then it may be determined at step  whether there is a type converter that may, for instance, produce a string or user interface element. If so, then a type converter may be applied at step  and a style may then be applied to the content from the type converter at step . For example, if the type converter produced a string, then the style may be applied as described at step . In this case, a text control may be added directly as a child of the ContentPresenter in the visual tree with the string assigned or aliased as content of the text control. As another example, if the type converter produced a user interface element, then the style may be applied as described at step . In this case, the user interface element may be directly added as a child of the ContentPresenter in the visual tree.","If there is not any type converter that may produce a string or a user interface element, then the ToString( ) method of the data object may be called at step  which may provide a string, and then a style may be applied at step  such as described at step . A text control may be added directly as a child of the ContentPresenter in the visual tree with the string assigned or aliased as content of the text control. After step , processing is finished for determining which style resource to apply to a data object of the user interface control.","Using the above systems and methods, an application author may provide customized styles for presenting data in a user interface control. A style may be dynamically selected for a given data object by content, type of content, or one or more property values of the data object. The present invention may thus advantageously support changing the value of the content displayed by a user interface control during the lifetime of an application. Moreover, the defined styles can be used for one or more different user interface controls. Importantly, the application author can assign style information in a declarative manner to program how a user interface control may look when displayed and how an end user might interact with the user interface control. In doing so, the style resources may be separated from the user interface control and its data object. Consequently, the author or an end user may change the style resources without changing the user interface controls. Likewise, the author may adjust the user interface controls without changing the style resources.","As can be seen from the foregoing detailed description, the present invention provides an improved system and method for styling content in a graphical user interface control. Significantly, the system and method allow a graphical user interface control to display any type of data content, including another control. Moreover, style resources may be associated with the user interface control for dynamically applying a style for displaying the data object. The architecture of the present invention may support a number of ways to provide a style for displaying the data content of a user interface control, including by type, by content, by property value, and so forth. In general, defining a basic style for displaying properties of a user interface control with a data object need only be done once by a developer of an application and that style may be used for other user interface controls that are to be displayed. As is now understood, the system and method thus provide significant advantages and benefits needed in contemporary computing.","While the invention is susceptible to various modifications and alternative constructions, certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood, however, that there is no intention to limit the invention to the specific forms disclosed, but on the contrary, the intention is to cover all modifications, alternative constructions, and equivalents falling within the spirit and scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
