---
title: Open types for distributed systems
abstract: Techniques for exchanging data are provided herein. An “open” data type is established on a computer system to define the structure of data. The open data type includes one or more predefined properties, and enables one or more extension properties to be optionally included. Data that is defined according to the open data type includes data values for the predefined properties, and may optionally include data values for extension properties. A second computer system may consider the extension properties to be extension properties or predefined properties of a data type known at the second computer system. In this manner, the type system that is used to exchange data between nodes need not necessarily be commonly known among the nodes, and/or may be dynamically modified, even for a particular data instance. Furthermore, queries may be performed against the data that query against the predefined properties and/or extension properties.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375018&OS=08375018&RS=08375018
owner: Microsoft Corporation
number: 08375018
owner_city: Redmond
owner_country: US
publication_date: 20090612
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional Application No. 61\/157,486, filed on Mar. 4, 2009, which is incorporated by reference herein in its entirety.","A database is a structured collection of records or data. A database is typically stored at a computer system, and may be accessed by other computer systems through the computer system. For example, a first computer system, which may be referred to as a \u201cclient,\u201d may include a \u201cclient agent\u201d configured to request data. The client agent may request data from a \u201cserver agent\u201d located at a second computer system (a \u201cserver\u201d) that maintains the data in storage in an associated database.","An example of a distributed system of computers where data may be exchanged is a service-oriented architecture (SOA) system. A SOA infrastructure allows different applications to exchange data with one another as they participate in business processes. Service-orientation aims at a loose coupling of services with operating systems, programming languages and other technologies which underlie the different applications. Another example of a distributed system of computers in which data may be exchanged is a REST (Representational Estate Transfer) system. A REST infrastructure allows data to be exchanged between computer systems according to a protocol (e.g., hypertext transfer protocol (HTTP)) without an additional message layer.","When data is exchanged in distributed systems there is an expectation by the participating nodes (e.g., computer systems) regarding the shape or structure of the exchanged data. In some cases, the data is self-describing (e.g., the data includes structure information regarding the data), and in other cases, the data is structured according to a known format or \u201ccontract\u201d that is agreed-upon and known by the participating nodes. Distributed systems that follow well established architectural styles, such as SOA and\/or REST systems, typically structure exchanged data according to known formats. As such, the nodes at the ends of a data exchange are assumed to know how to interpret various representations of exchanged data, provided that a \u201cname\u201d for a \u201ctype\u201d of the data that is exchanged is known. In a SOA system, this information is frequently provided in the form of data types described in WSDL documents. In REST systems, this information is provided as the Multipurpose Internet Mail Extensions (MIME) type for a given resource representation. This ability to interpret data according to known data types is particularly important in business applications that tend to focus on structured records carrying well-known data, and that need to preserve full fidelity as the data travels through the system.","However, the requirement for the use of known data types introduces increased coupling between nodes in a data exchange system. For example, the requirement for known data types does not allow the nodes exchanging data to dynamically modify the format of the data once the system has been deployed. Furthermore, this requirement causes difficulties with different versioning speeds in clients and servers, and does not allow nodes of a system to be developed when data types to be exchanged by the system are not known and\/or may possibly never be known.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended to be used to limit the scope of the claimed subject matter.","Methods, systems, and computer program products are described herein for enabling structured data to be exchanged in a more flexible manner than according to conventional techniques. An \u201copen\u201d data type may be established on a computer system to define the structure of data. The open data type includes zero or more predefined, static properties, and enables one or more extension properties to be optionally included. Data that is defined according to the open data type includes data values for the predefined properties, and may optionally include data values for one or more extension properties. Data may be received from a second computer system that has added data values for one or more extension properties to the data. The second computer system may define the extension properties as extension properties or as predefined properties of a data type known at the second computer system. In this manner, the type system that is used to exchange data between nodes in a data exchange system need not necessarily be commonly known among the nodes, and\/or may be dynamically modified, even for a particular data instance.","In one implementation, a method for exchanging data is provided. A first data type is associated with a request for a resource. The first data type is an open data type that includes a plurality of properties. The request for the resource is transmitted from a first computer system to a second computer system. The resource is instantiated at the second computer system according to a second data type that includes the plurality of properties and an additional property. The resource is received at the first computer system from the second computer system. The received resource is materialized into an instance of the first data type. The materialized instance includes a plurality of name\/value pairs corresponding to the plurality of properties and a name\/value pair associated with the additional property. The instance of the first data type is stored in a database.","Furthermore, a query that includes the extension property as a query parameter may be received. The query may be applied to the database to generate a query result. The query result may include zero or more instances that includes a data value for the extension property. The query result may be transmitted in response to the received query.","Still further, a request for the resource may be received from a third computer system. The resource is retrieved from storage by retrieving the plurality of name\/value pairs corresponding to the plurality of properties from storage, and retrieving the name\/value pair associated with the extension property from storage. The resource is transmitted to the third computer system in response to the request, including transmitting the plurality of name\/value pairs corresponding to the plurality of properties and the name\/value pair associated with the extension property.","The second data type may be an open data type or a conventional (non-open) data type). Furthermore, the second data type may be known or unknown to the first computer system.","In another implementation, a first computer system is provided. The first computer system includes a data request module and a materialization module. The data request module is configured to receive a request for a resource. The request has an associated first data type. The first data type is an open data type that includes a plurality of properties. The resource is instantiated at a second computer system according to a second data type that includes the plurality of properties and an additional property. The materialization module receives the resource from the second computer in response to the request being transmitted from the first computer system. The materialization module is configured to materialize the received resource into an instance of the first data type that includes a plurality of name\/value pairs corresponding to the plurality of properties and a name\/value pair associated with the additional property.","The first computer system may further include storage. The instance of the first data type may be stored in a database in the storage. The name\/value pair is stored in the database as an extension property to the open data type.","Furthermore, the first computer system may include a query module. The query module is configured to receive a query that includes properties, such as one or more extension properties and\/or one or more predefined properties, as query parameters and to apply the query to the database to generate a query result. The issuer of the query (e.g., a client) does not necessarily know which properties are considered extension properties and\/or predefined properties. The query result may include zero or more instances of the first data type that includes a data value for the extension property.","Still further, the first computer system may include a data response module. The data response module is configured to receive a request for the resource from the third computer system, to retrieve the resource from storage, and to transmit the resource to the third computer system in response to the request for the resource received from the third computer system. The data response module is configured to transmit the plurality of name\/value pairs corresponding to the plurality of properties and the name\/value pair associated with the extension property to the third computer system.","Computer program products are also described herein that enable data communications and queries with regard to open data types, client agents, and server agents, and further embodiments as described herein.","Further features and advantages of the invention, as well as the structure and operation of various embodiments of the invention, are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein.","The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings, in which like reference characters identify corresponding elements throughout. In the drawings, like reference numbers generally indicate identical, functionally similar, and\/or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit(s) in the corresponding reference number.","The present specification discloses one or more embodiments that incorporate the features of the invention. The disclosed embodiment(s) merely exemplify the invention. The scope of the invention is not limited to the disclosed embodiment(s). The invention is defined by the claims appended hereto.","References in the specification to \u201cone embodiment,\u201d \u201can embodiment,\u201d \u201can example embodiment,\u201d etc., indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.","Furthermore, it should be understood that spatial descriptions (e.g., \u201cabove,\u201d \u201cbelow,\u201d \u201cup,\u201d \u201cleft,\u201d \u201cright,\u201d \u201cdown,\u201d \u201ctop,\u201d \u201cbottom,\u201d \u201cvertical,\u201d \u201chorizontal,\u201d etc.) used herein are for purposes of illustration only, and that practical implementations of the structures described herein can be spatially arranged in any orientation or manner.","Embodiments of the present invention relate to data communications in distributed systems. For example,  shows a block diagram of a data communication system , according to an example embodiment. As shown in , system  includes a first computer system , a second computer system , a first storage , a network , and a second storage . First computer system  includes a first agent  (e.g., client agent), and second computer system  includes a second agent  (e.g., server agent). Storage  is coupled to first computer system . Storage  is coupled to second computer system . First and second computer systems  and  are communicatively coupled by network . First and second computer systems  and  may be computer systems in a distributed system of computers, such as a service-oriented architecture (SOA) system, a REST (Representational Estate Transfer) system, or other type of system. System  is configured to enable data exchanges between first and second computer systems  and . These elements of system  are described as follows.","First and second computer systems  and  may each be any type of computing device, including a desktop computer (e.g., a personal computer), a server, a mobile computer or computing device (e.g., a Palm\u00ae device, a RIM Blackberry\u00ae device, a personal digital assistant (PDA), a laptop computer, a notebook computer, etc.), or other type of computer system.","Storage  and storage  may each include one or more of any type of storage mechanism to store content (e.g., objects), including a hard disk drive, an optical disc drive, a memory device such as a RAM device, a ROM device, etc., and\/or any other suitable type of storage medium. Storage  and storage  may include long term storage (e.g., a hard disk drive) or temporary storage (e.g., a RAM device).","Network  may include one or more communication links and\/or communication networks, such as a PAN (personal area network), a LAN (local area network), a WAN (wide area network), or a combination of networks, such as the Internet. First and second communication links  and , which respectively couple first and second computer systems  and  to network , may include any number of communication links, including wired and\/or wireless links, such as IEEE 802.11 wireless LAN (WLAN) wireless links, Worldwide Interoperability for Microwave Access (Wi-MAX) links, cellular network links, wireless personal area network (PAN) links (e.g., Bluetooth\u2122 links), Ethernet links, USB links, etc. Note that in an embodiment, agents  and  may be included in a same computer system. In such an embodiment, network  may not need to be present.","First agent  is configured to perform a request for data for first computer system . For instance, first agent  may generate a request for a resource that is accessible at second computer system , which is transmitted from first computer system  in a first communication signal . First communication signal  is transmitted from first computer system  through a first communication link , network , and a second communication link , to second computer system . First communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets). Second computer system  receives first communication signal .","Second agent  processes the request received in first communication signal . For example, the request received from first agent  may be for a resource (e.g., of a plurality of resources -) stored in storage  associated with second computer system . Second agent  retrieves resource from storage  to include in a response. In an embodiment, resource may be structured data defined by a data type. Data types are well known to persons skilled in the relevant art(s). A data type typically includes a name and a structure, which may be defined by a set of one or more properties. A data type may also include a behavior. For purposes of brevity, behaviors are not further described herein, but may be present in some data types. Data types represent structured types of data that are processible by associated applications.","For example,  shows a block diagram of a resource  or data item, which is an example of resource . Resource  is structured according to a data type, indicated by a data type name , such as \u201cEmployee\u201d (e.g., when the data type is used to represent employee data) or other name, which may be descriptive of a structure of the included data. As shown in , resource  has a structure defined by a set of properties -. Resource  may include one or more properties . As shown in , properties -are each expressed as a name\/value pair, each name\/value pair including a corresponding property name  and a data value . Data value  may include a value and an associated type (e.g., integer, string, date, etc.)). For example, property includes a property name and a data value , and property includes a property name and a data value . Each property name  has a value that is a name for the corresponding property , and the corresponding data value  is a data value for the property  in resource . For instance, in an example where data type name  for resource  is \u201cemployee,\u201d property name may be \u201cname,\u201d and data value may be \u201cTom Smith,\u201d property name may be \u201cbirth date,\u201d and data value may be \u201c1976-08-27,\u201d and a property name may be \u201coffice number,\u201d and data value may be \u201cB1078.\u201d","Referring back to , second agent  may convert resource from its particular data type to a data format that may be transmitted from computer system  (e.g., a wire format), as would be known to persons skilled in the relevant art(s). Second computer system  generates a second communication signal , which is a response signal that includes the requested resource and includes an indication of the data type used for resource at second computer system . Second communication signal  is transmitted through second communication link , network , and first communication link , and is received by first computer system . Second communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","First agent  processes resource received in second communication signal . In a conventional data communication environment, first agent  converts the received version (e.g., wire format) of resource to the indicated data type in which resource was formatted at second computer system . This is because in conventional data communication systems, first and second agents  and  use the same data types (e.g., data types that match in name and in structure) to represent data. Thus, in an example where resource has the \u201cEmployee\u201d data type at second computer system , first and second computer systems  and  contain a common definition of the \u201cEmployee\u201d data type, and resource is also assigned the \u201cEmployee\u201d data type at first computer system . First agent  may optionally store the received resource in storage  (as indicated by dotted lines in ) (e.g., permanently, temporarily, and\/or transiently stored in storage).","Such conventional data communications have deficiencies due to the need to use common data types among different distributed computer systems. When agents in a system exchange data, each agent preferably represents that data as instances of data types that are known to the other agents. A consistency in data types at the agents typically must be maintained. For example, each agent typically maintains a common set of properties for a particular data type. This consistency enables the development environment to validate the structure and constraints of the data, as well as assist the developer through the knowledge of those types. However, extensive use of common data types introduces increased coupling between agents in a data communication system. One of the challenges of this approach is that pre-definition of types has the effect of fixing the set of attributes or \u201cproperties\u201d that each type has. Once all the nodes participating in the system have knowledge about those types, changing the definition of the type in one of the nodes would either cause other nodes to fail or to not be able to make use of the new information included in the change until the system is modified and re-deployed.","Embodiments of the present invention overcome such deficiencies in conventional data communication systems, enabling flexibility in data types across different distributed computer systems. Examples of such embodiments are described below.","Embodiments of the present invention enable computer systems to exchange data in a flexible manner through the use of \u201copen data types\u201d. Embodiments are provided that enable interacting nodes (typically a client and a server) in distributed systems to exchange structured data where the type system defining the structure may not be known and\/or may be dynamically modified, even for a given instance. Embodiments enable the nodes of the system to independently have incomplete knowledge of the type system and\/or to dynamically modify the type system. The example embodiments described herein are provided for illustrative purposes, and are not limiting. Furthermore, additional structural and operational embodiments, including modifications\/alterations, will become apparent to persons skilled in the relevant art(s) from the teachings herein.","In an embodiment, a client and server can each independently allow for some or all of their types to not be known. A message exchanged between a client and a server may have a consistent format independent of whether metadata of the types in the message are known by either node. Queries may be represented uniformly, regardless of whether metadata associated with queried data is known. Changes to data may be represented uniformly, regardless of whether metadata associated with the data is known. In an embodiment, client and server type systems can independently modify metadata of a type, even for a specific instance, without needing to modify the system interfaces.","For example,  shows a block diagram of an open data type , according to an example embodiment. As shown in , open data type  includes an open data type indication , one or more predefined properties , and enables one or more extension properties  to be present. A resource may be structured according to open data type  in a similar manner as resource  shown above, except that the resource will include one or more predefined properties defined by predefined properties  in open data type , and may optionally include one or more extension properties.","For example,  shows a block diagram of a resource  (e.g., data; a data item). Resource  is structured according to an open data type, such as open data type . Resource  may include a data type name (e.g., data type name ), predefined properties , and may optionally include extension properties . Predefined properties  includes zero or more predefined or static properties  that are each expressed as a name\/value pair, each name\/value pair having a property name  and a data value  (e.g., a predefined property that includes a property name and a data value ). Extension properties  are enabled to be present in resource  because the data type of resource  is an open data type. Extension properties  includes one or more extension properties  that are each expressed as a name\/value pair, each name\/value pair having a property name  and data value  (e.g., property that includes a property name and a data value ). Similarly to resource  described above, each predefined property  and extension property  may be a primitive type (e.g., integer, string, date) or another structured type (e.g., an address, which in turn has \u201cstreet,\u201d \u201czip,\u201d and \u201cstate\u201d primitive types).","Open data type  enables distributed systems to have both structured data typing, and enables distributed systems to defined structured data types with an arbitrary amount of open properties. For example, resources defined according to open data type  may be provided with per-instance custom properties (extension properties ) in addition to predetermined properties . Furthermore, open data type  enables nodes in a data exchange system to be changed independently from each other.","User agents may be enabled to define open data types. For instance,  shows a block diagram of a computer system  at which a user  may define an open data type, according to an example embodiment. As shown in , computer system  includes a user interface , an application , and a database . Application  may be a computer application (e.g., a software program) that interacts with typed data. Database  may be a database that stores typed data for application . For example, database  may be stored in storage associated with computer system . User  may interact with user interface , which is coupled to application , to configure an open data type. In embodiments, user  may be any type of user agent, including human users, non-human agents (e.g., a web-based program\/application), etc. Thus, in embodiments, user interface  may be an interface for a human, for a program\/application (e.g., an API (application programming interface)), or other type of interface.","An open data type may be configured in various ways. For instance,  shows a flowchart  for configuring an open data type, according to an example embodiment. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","In step , a data type is defined. For example, referring to , user  may interact with user interface  to define a new data type to be an open data type, or to modify an existing data type to be an open data type. For instance, user  may enter information textually into user interface  and\/or user interface  may provide a graphical user interface (GUI), an editor (e.g., an XML or other programming language editor that edits a configuration file), or other interface configured to enable data types to be configured. The GUI may provide a check box, or other feature, to enable user  to indicate that a data type being defined is an open data type (which is maintained as open data type indication  in ). User interface  may include any number and combination of user interface elements, such as a keyboard, a thumb wheel, a mouse pointer, a roller ball, a stick pointer, a display, any number of virtual interface elements, a voice recognition system, and\/or other user interface elements described elsewhere herein or otherwise known.","In step , the data type is enabled to include one or more extension properties. Step  may be an independent step, or may be performed by performing step . For example, by defining a data type as an open data type, the open data type is enabled to include one or more extension properties, such as shown in  as extension properties . User  or subsequent users of the open data type may add one or more extension properties to the open data type, including defining a property name and primitive type of data (e.g., integer, string, date\/time, etc.) for each extension property.","In step , at least one predefined property is defined to be included in the data type. Step  is optional, because an open data type need not necessarily include predefined properties. An open data type that does not include any predefined properties may also be referred to as a \u201cfully open data type.\u201d For example, referring to , user  may define one or more predefined properties to be included in the open data type, such as shown in  as predefined properties . For each property, a property name and a primitive type of data for the property (e.g., integer, string, date\/time, etc.) may be defined. In this manner, an open data type is formed, such as open data type  shown in .","For example, open data type  may be formed or generated according to flowchart  as an open data type declaration that includes a data type name, an open data type indication, and one or more property definitions for predefined properties . A data type declaration may be formed as text and\/or according to any suitable code (e.g., .NET framework languages such as C# and Visual Basic, schema languages such as Conceptual Schema Definition Language (CSDL) which is used to create Entity Data Model (EDM) schemas, etc.), as desired for a particular application. For instance, a C# programming language form of data type declaration may be expressed, as follows:",{"@attributes":{"id":"p-0062","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[open] public class ClientPerson"]},{"entry":[{},"{"]},{"entry":[{},"\u2002public int ID { get; set; }"]},{"entry":[{},"\u2002public string Name { get; set; }"]},{"entry":[{},"\u2002public int YearsOfExperience { get; set; }"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":"302"},"Computer systems  and  may be configured to accommodate open data types in various ways. For instance,  shows a block diagram of an open data type processing module  included in a computer system , according to an example embodiment. Open data type processing module  is configured to enable computer system  to process resources according to open data types, according to embodiments. For example, in an embodiment, computer system  may recognize a data type as an open data type. Open data type processing module  enables computer system  to request and\/or receive resources from other computer systems that include extension properties to the open data type. Furthermore, open data type processing module  may enable computer system  to receive and process requests for resources that include extension properties to the open data type. Still further, open data type processing module  may enable computer system  to receive queries that refer to extension properties to the open data type, and\/or to apply the queries to a database that stores resources that include extension properties to the open data type. Computer systems  and\/or  may be configured similarly to computer system  to be enabled to accommodate open data types, in embodiments.","Example embodiments for exchanging data configured according to open data types are described in the following subsections.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":["FIG. 8","FIG. 8","FIG. 8","FIG. 9","FIG. 9","FIG. 1"],"b":["102","102","800","804","800","702","800","102","104","800","802","806","800","900","800","108","900","900"]},"In step , a first data type is associated with a request for a resource, the first data type being an open data type that includes a plurality of properties. As shown in , data request module  receives a request . Request  is a request for a resource at second computer system . Request  may have been generated by an application or other module operating at first computer system . In an embodiment, a first data type that is available at first computer system  is associated with request . The first data type is an open data type, such as open data type  shown in . As shown in , open data type  includes one or more predefined properties  and may include one or more extension properties . Note that although described as a request for a resource, request  may alternatively be an insert operation, an update operation, a delete operation, a replace operation, a merge operation, and\/or other type of operation.","Referring back to , request  may have any suitable form. For instance,  shows a block diagram of a request , according to an example embodiment. As shown in , request  includes a first data type indication  and a requested resource indication . Data type indication  indicates a target data type for materializing the requested resource indicated by requested resource indication  when received at client agent , which in the current example is the first data type (an open data type).","Data request module  is optionally present. When present, data request module  is configured to convert request  to a network-transportable request , which has a network-transportable form (e.g., wire format). In an embodiment, network-transportable request  indicates the requested resource (e.g., includes requested resource indication  of ), but does not indicate the first data type. When data request module  is not present, request  may be directly received by network interface .","Referring back to , in step , the request for the resource is transmitted to a second computer system, the resource being instantiated at the second computer system according to a second data type that includes the plurality of properties and an additional property. As shown in , network-transportable request  is received by network interface . Network interface  is configured to transmit request  in a first communication signal . For example, similarly to first communication signal  of , first communication signal  may transmitted from first computer system  through first communication link , network , and second communication link , to second computer system . First communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets). Second computer system  receives first communication signal .","Second agent  processes request  included in first communication signal . For example, request  may be a request for resource stored in storage  associated with second computer system . Second agent  retrieves resource from storage  to include in a response. Resource is structured according to a second data type different from the first (open) data type associated with request . The second data type may be similar to the first open data type in that it includes the one or more predetermined properties  defined in open data type  in . Furthermore, the second data type includes one or more additional properties.","For instance, an example of the first data type (at first computer system ) is shown as follows in a generic form:",{"@attributes":{"id":"p-0072","num":"0071"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"[open] type ClientCustomer"]},{"entry":[{},"\u2003\u2003\u2003\u2002Name: string"]},{"entry":[{},"\u2003\u2003\u2003\u2002Phone: string"]},{"entry":[{},"\u2003\u2003\u2003\u2002LastContactDate: date"]},{"entry":[{},"\u2003\u2003\u2003\u2002Priority: integer"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["302","104"]},{"@attributes":{"id":"p-0073","num":"0072"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type ServerCustomer"]},{"entry":[{},"Name: string"]},{"entry":[{},"Phone: string"]},{"entry":[{},"LastContactDate: date"]},{"entry":[{},"Priority: integer"]},{"entry":[{},"PrimaryContact: string"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{}},"Continuing the current example, resource may be structured at second computer system  according to the ServerCustomer data type. For instance, Table 1 below shows example values for the corresponding property names of the ServerCustomer data type:",{"@attributes":{"id":"p-0075","num":"0074"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"91pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 1"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Property Name","Data Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"Name","Company One"]},{"entry":[{},"Phone","111-222-3333"]},{"entry":[{},"LastContactDate","Jul. 12, 2008"]},{"entry":[{},"Priority","2"]},{"entry":[{},"PrimaryContact","John Doe"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}}}},"Second agent  may convert resource from the second data type to a data format that may be transmitted from computer system  (e.g., a wire format), in a manner that would be known to persons skilled in the relevant art(s). For instance, an example wire format may have XML (extensible markup language) format, Javascript Object Notation (JSON), or other suitable format. Continuing the current example, where resource has the values shown in Table 1, second agent  may convert resource to JSON format as follows:",{"@attributes":{"id":"p-0077","num":"0076"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"{"]},{"entry":[{},"\u2003\u2003_metadata: { type: \u2018ServerCustomer\u2019 },"]},{"entry":[{},"\u2003\u2003Name: \u2018Company One\u2019,"]},{"entry":[{},"\u2003\u2003Phone: \u2018111-222-3333\u2019,"]},{"entry":[{},"\u2003\u2003LastContactDate: \u2018 date(7-12-08) \u2019,"]},{"entry":[{},"\u2003\u2003Priority: 2,"]},{"entry":[{},"\u2003\u2003PrimaryContact: \u2018John Doe\u2019"]},{"entry":[{},"}"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["120","120"],"i":["a ","a "]},"In an embodiment, representations used to exchange instances of data types (e.g. through network ) may use the same structure and format for predetermined properties and extension properties (e.g., as shown above). This enables decoupling between communicating nodes (e.g., first and second computer systems  and ) because each node can have a different perspective on which properties are statically defined in a type (predefined properties) versus what properties are extension properties. This applies to representations exchanged in both directions, as a result of query operations (described further below) and insert, update, and delete operations. In this manner, a standard serialization format\/wire format may be used to transmit instances of open data types within including information including which properties are extension properties.","Second computer system  in  generates second communication signal  (shown in ), which is a response signal that includes the requested resource and may optionally include an indication of the second data type (used for resource at second computer system ). Similarly to second communication signal  of , second communication signal  may be transmitted through second communication link , network , and first communication link , and is received by first computer system . Second communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","Referring to , in step , the resource is received from the second computer system. As shown in , second communication signal  is received by network interface  of first computer system  from second computer system . Second communication signal  includes the requested resource provided by second agent , which in the current example is resource . Network interface  outputs a network-transportable resource  extracted from second communication signal , which is a network transportable version of resource (e.g., as shown above in JSON format for the current example).","In step , the received resource is materialized into an instance of the first data type, the materialized instance of the first data type including a plurality of name\/value pairs corresponding to the plurality of properties and a name\/value pair associated with the additional property. In an embodiment, materialization module  shown in  is configured to materialize the received resource into an instance of the first data type. As shown in , materialization module  receives network-transportable resource . Furthermore, materialization module  receives a first data type indication , which is provided by data request module  (from request ), and receives local data type definitions , which includes data types of first computer system . Materialization module  materializes network-transportable resource  into an instance of the first data type, the definition of which is selected from local data type definitions  (according to the data type indicated by first data type indication ).","In an embodiment, materialization module  is configured to indicate which properties of the materialized instance of the first data type are predetermined properties and extension properties. For example,  shows a block diagram of materialization module , according to an example embodiment. As shown in , materialization module  includes a property type determiner . Property type determiner  receives a materialized instance of network-transportable resource , and indicates the properties of the materialized instance as predetermined properties or extension properties. As shown in , property type determiner  receives a first data type definition , which is a definition of the open data type, which may indicate the predetermined properties (predetermined properties ) for the open data type. Property type determiner  compares the properties of the materialized instance to the predetermined properties indicated by first data type definition . Any properties that match between the materialized instance and first data type definition  are indicated as predetermined properties . Any additional properties that do not match between the materialized instance and first data type definition  are indicated as extension properties . As such, first computer system  may be \u201copen\u201d to receiving open data types. Note that in another embodiment, even if a materialized instance does not include additional properties, first computer system  may associate the materialized instance with an open data type. In still another embodiment, first computer system  may be configured to be \u201cclosed\u201d to open data types, and thus may ignore additional properties received in a materialized instance that are not include in first data type definition .","For example, continuing the current example, resource having the format shown in Table 1 above may be converted to an instance of the ClientCustomer data type shown above, as indicated in Table 2 below:",{"@attributes":{"id":"p-0084","num":"0083"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 2"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Property Type","Property Name","Data Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"predetermined","Name","Company One"]},{"entry":[{},"predetermined","Phone","111-222-3333"]},{"entry":[{},"predetermined","LastContactDate","Jul. 12, 2008"]},{"entry":[{},"predetermined","Priority","2"]},{"entry":[{},"extension","PrimaryContact","John Doe"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["806","822","1102","120","1110","1106","1102","120","1108"],"i":["a ","a "]},"In step , the instance of the first data type is stored in a database, including storing the name\/value pair in the database as an extension property to the open data type. In an embodiment, the materialized instance of the first data type may be stored in storage  by materialization module  as resource , as shown in . As shown in , resource  includes predetermined property name\/value pair(s)  and extension property name\/value pair(s) . Predetermined property name\/value pair(s)  includes the property name and data value pairs corresponding to the one or more predetermined properties of the open data type (as indicated by predetermined properties  in ). For example, in the current example, predetermined property name\/value pair(s)  may include the name\/value pairs of \u201cName,\u201d \u201cCompany One\u201d; \u201cPhone,\u201d \u201c111-222-3333\u201d; \u201cLastContactDate,\u201d \u201c7-12-08\u201d; and \u201cPriority,\u201d \u201c2\u201d. Extension property name\/value pair(s)  includes the property name and data value pairs corresponding to the one or more extension properties to the open data type (as indicated by extension properties ). For example, in the current example, extension property name\/value pair(s)  may include the name\/value pair of \u201cPrimaryContact,\u201d \u201cJohn Doe.\u201d","Open data types enable computer systems  and  to be loosely coupled, because they do not need to maintain exact consistency between data types. First and second computer systems  and  can maintain independent data types that match each other to the extent that is required for them to operate, by using extension properties, as described herein.","Computer systems may be configured in various ways to process requests for resources that are instances of open data types. For instance,  shows a block diagram of first computer system , according to an example embodiment of the present invention. As shown in , first computer system  includes a client agent  and a network interface . Client agent  is an example of open data type processing module  shown in . Client agent  is configured to enable first computer system  to receive requests for resources configured according to open data types from second computer system  and\/or from further computer systems. As shown in , client agent  includes a data response module . Client agent  is described with respect to .  shows a flowchart  for a data communication between a first agent (e.g., client agent ) and a second agent (e.g., second agent  of ), according to an example embodiment. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart . Flowchart  is described as follows.","In step , a request is received for the resource from a third computer system. For example, as shown in , a first communication signal  is received by network interface  of first computer system  from a remote computer system, which may be second computer system  or another computer system. First communication signal  includes a request for resource . Network interface  outputs the request received in first communication signal  as request signal , which is received by data response module .","In step , a plurality of name\/value pairs corresponding to the plurality of properties is retrieved from storage. For example, in an embodiment, data response module  is configured to retrieve predetermined property name\/value pair(s)  from storage , which are associated with resource .","In step , the name\/value pair associated with the extension property is retrieved from storage. For example, in an embodiment, data response module  is configured to retrieve extension property name\/value pair(s)  from storage , which are associated with resource .","In step , the plurality of name\/value pairs and the name\/value pair associated with the extension property are transmitted to the third computer system in response to the request for the resource. In an embodiment, data response module  may be configured to dematerialize resource  (including predetermined property name\/value pair(s)  and extension property name\/value pair(s) ) to a network-transportable form that includes predetermined property name\/value pair(s)  and extension property name\/value pair(s) . As shown in , data response module  generates a network-transportable resource . Network-transportable resource  may include an identification of the open data type, and includes predetermined property name\/value pair(s)  and extension property name\/value pair(s) .","Network-transportable resource  is received by network interface , which transmits network-transportable resource  from first computer system  as a second communication signal . For example, second communication signal  may be transmitted through first communication link , network , and second communication link  to second computer system  (or other computer system that provided the request). Second communication signal  may be transmitted in any form, including in the form of a stream of packets (e.g., IP packets).","Although first computer system  may not recognize data associated with extension properties  (e.g., extension property name\/value pair(s) ) as part of open data type , because open data type  is an open data type, first computer system  treats extension property name\/value pair(s)  corresponding to extension properties  as being included in resource . At second computer system  (or other computer system) that receives network-transportable resource , the received resource may be associated with a non-open data type or an open data type. Thus, extension property name\/value pair(s)  included in the received resource may be considered predetermined properties (e.g., of an open or non-open data type) or as extension properties (e.g., of an open data type), depending on the data type associated with the received resource at second computer system .","Computer systems may be configured in various ways to process queries over resources that are instances of open data types. For instance,  shows a block diagram of first computer system , according to an example embodiment of the present invention. As shown in , first computer system  includes a query module . Query module  is configured to enable first computer system  to process queries over resources configured according to open data types. Query module  is configured to handle queries such that a syntax of the queries is uniform across both predefined properties and extension properties. As such, computer systems (e.g., first and second computer systems ) do not need to coordinate with each other on what data types are considered to be open or not open, and which properties are considered to be extension properties. Query module  is described with respect to .  shows a flowchart  for processing a received query, according to an example embodiment. Further structural and operational embodiments will be apparent to persons skilled in the relevant art(s) based on the discussion regarding flowchart .  and flowchart  are described as follows.","In step , a query is received that includes the extension property as a query parameter. For example, as shown in , query module  receives a query . Query  is a query intended to be run over resources contained in a database  stored in storage . Database  may store any number of resources, including resource . Query  may be received from any source, including from an application running on first computer system , from second computer system  (e.g., received using network interface ), or other computer system. Query  includes one or more extension properties  as a query parameter, and may include one or more predefined properties  as query parameters. For example, query  may include one or more data values for extension properties of open data types associated with resources stored in database . The data values may be used in expressions that are used to filter, sort, and otherwise process resources stored in database .","In step , the query is applied to the database to generate a query result, the query result including zero or more instances of the first data type that include a data value for the extension property. As shown in , query module  may apply query  to database  to generate a query result . Query result  includes the results of applying query  to database , such as one or more resources that fulfill the query expressions of query . Query module  may be configured to apply queries to database  in a manner known to persons skilled in the relevant art(s), with the addition of being enabled to apply queries against extension properties.","For instance, referring to the example shown further above, resource  in database  may be configured as shown in Table 3 below (repeated from Table 2 above) according to the \u201cClientCustomer\u201d open data type:",{"@attributes":{"id":"p-0098","num":"0097"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"4"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"3","colwidth":"70pt","align":"left"}}],"thead":{"row":[{"entry":[{},"TABLE 3"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]},{"entry":[{},"Property Type","Property Name","Data Value"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"predetermined","Name","Company One"]},{"entry":[{},"predetermined","Phone","111-222-3333"]},{"entry":[{},"predetermined","LastContactDate","Jul. 12, 2008"]},{"entry":[{},"predetermined","Priority","2"]},{"entry":[{},"extension","PrimaryContact","John Doe"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"3","align":"center","rowsep":"1"}}]}]}}}},"br":{},"b":["1404","1402","1408","1406","1408","1404","1406","820","820","1406","820","1404","820","1406"]},"It is noted that database  may store resources of an open data type, such as the \u201cClientCustomer\u201d open data type, that do not include an extension property that is being queried against by query . For example, a second resource of the \u201cClient Customer\u201d open data type may be stored in database  that includes a data value for only the predetermined properties of \u201cName,\u201d \u201cPhone,\u201d \u201cLastContactDate,\u201d and \u201cPriority.\u201d A third resource of the \u201cClient Customer\u201d open data type may be stored in database  that includes a data value for each of the predetermined properties of \u201cName,\u201d \u201cPhone,\u201d \u201cLastContactDate,\u201d and \u201cPriority,\u201d and includes a data value for an extension property of \u201cSecondaryContact.\u201d As such, query  may include a query parameter of the extension property of \u201cPrimaryContact,\u201d but no \u201cPrimaryContact\u201d extension property is included in the second and third resources. In an embodiment, instances of resources stored in database  that do not include extension properties included in query parameters may be handled as if the extension properties are present, but have \u201cnull,\u201d empty string, or other indications that a value for an extension property is not present. For example, the second and third resources may each be provided with a \u201cnull\u201d value for the \u201cPrimaryContact\u201d extension property in addition to their respective properties. Because the behavior of queries with respect to properties having \u201cnull\u201d value is typically well defined in most query systems, known semantics and uniform query models may be applied by query module  to both predefined and extension properties.","In this manner, query module  may be configured according to a query model that surfaces regular and extension properties in the same way from the query formulation perspective. This reduces the coupling between nodes (e.g., between first and second computer systems  and ) by not requiring a node (e.g., second computer system ) that formulates query  to know whether any given property is an extension property or a predetermined property. As just described, because extension properties may not be present in all instances, query module  may be configured with a behavior (e.g., treating non-present extension properties as present, but \u201cnull\u201d) to be applied when a given query operation is to be evaluated against an instance that does not include a given extension property.",{"@attributes":{"id":"p-0101","num":"0100"},"figref":"FIG. 15","b":["1504","1504","1404","1504","1504","1504"],"i":["a ","b ","a","b"]},"In step , the query result is transmitted in response to the received query. For example, as shown in , query module  transmits query result . Query result  may be transmitted to the source of query , such as to an application running on first computer system , to second computer system  (e.g., transmitted using network interface ), or to other computer system.","Open data type processing module , client agent , data request module , materialization module , property type determiner , client agent , data response module , and query module  may be implemented in hardware, software, firmware, or any combination thereof. For example, open data type processing module , client agent , data request module , materialization module , property type determiner , client agent , data response module , and\/or query module  may be implemented as computer program code configured to be executed in one or more processors. Alternatively, open data type processing module , client agent , data request module , materialization module , property type determiner , client agent , data response module , and\/or query module  may be implemented as hardware logic\/electrical circuitry.",{"@attributes":{"id":"p-0104","num":"0103"},"figref":"FIG. 16","b":["1600","102","104","500","700","1600","1600","1600","1600","1600"]},"As shown in , computer  includes a processing unit , a system memory , and a bus  that couples various system components including system memory  to processing unit . Bus  represents one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. System memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS) is stored in ROM .","Computer  also has one or more of the following drives: a hard disk drive  for reading from and writing to a hard disk, a magnetic disk drive  for reading from or writing to a removable magnetic disk , and an optical disk drive  for reading from or writing to a removable optical disk  such as a CD ROM, DVD ROM, or other optical media. Hard disk drive , magnetic disk drive , and optical disk drive  are connected to bus  by a hard disk drive interface , a magnetic disk drive interface , and an optical drive interface , respectively. The drives and their associated computer-readable media provide nonvolatile storage of computer-readable instructions, data structures, program modules and other data for the computer. Although a hard disk, a removable magnetic disk and a removable optical disk are described, other types of computer-readable media can be used to store data, such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","A number of program modules may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. These programs include an operating system , one or more application programs , other program modules , and program data . Application programs  or program modules  may include, for example, computer program logic for implementing open data type processing module , client agent , data request module , materialization module , property type determiner , client agent , data response module , query module , flowchart , flowchart , flowchart  and\/or flowchart  (including any step of flowcharts , , , and\/or ).","A user may enter commands and information into the computer  through input devices such as keyboard  and pointing device . Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are often connected to the processing unit  through a serial port interface  that is coupled to bus , but may be connected by other interfaces, such as a parallel port, game port, or a universal serial bus (USB).","A display device  is also connected to bus  via an interface, such as a video adapter . In addition to the monitor, computer  may include other peripheral output devices (not shown) such as speakers and printers.","Computer  is connected to a network  (e.g., the Internet) through an adaptor or network interface , a modem , or other means for establishing communications over the network. Modem , which may be internal or external, is connected to bus  via serial port interface .","As used herein, the terms \u201ccomputer program medium\u201d and \u201ccomputer-readable medium\u201d are used to generally refer to media such as the hard disk associated with hard disk drive , removable magnetic disk , removable optical disk , as well as other media such as flash memory cards, digital video disks, random access memories (RAMs), read only memories (ROM), and the like.","As noted above, computer programs and modules (including application programs  and other program modules ) may be stored on the hard disk, magnetic disk, optical disk, ROM, or RAM. Such computer programs may also be received via network interface  or serial port interface . Such computer programs, when executed or loaded by an application, enable computer  to implement features of embodiments of the present invention discussed herein. Accordingly, such computer programs represent controllers of the computer .","The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing devices, causes a data processing device(s) to operate as described herein. Embodiments of the present invention employ any computer-useable or computer-readable medium, known now or in the future. Examples of computer-readable mediums include, but are not limited to storage devices such as RAM, hard drives, floppy disks, CD ROMs, DVD ROMs, zip disks, tapes, magnetic storage devices, optical storage devices, MEMs, nanotechnology-based storage devices, and the like.","While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be understood by those skilled in the relevant art(s) that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined in the appended claims. Accordingly, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents."],"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION","I. Introduction","II. Example Embodiments","III. Example Embodiments","A. Example Embodiments for Resources Materialized as Instances of Open Data Types","B. Example Embodiments for Processing Requests for Resources Materialized as Instances of Open Data Types","C. Example Embodiments for Processing Queries for Resources Materialized as Instances of Open Data Types","III Further Example Embodiments","IV. Conclusion"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS\/FIGURES","p":["The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0035","num":"0034"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
