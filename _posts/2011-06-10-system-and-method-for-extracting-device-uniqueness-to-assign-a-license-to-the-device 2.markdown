---
title: System and method for extracting device uniqueness to assign a license to the device
abstract: An information handling system includes a device, a controller, and a license manager subsystem. The controller is configured to determine whether the device has a license assigned and to extract a unique identification for the device in response to a request for information about the device. The license manager subsystem is configured to send the request for information about the device to the controller, to send the unique identification for the device to a license server as a request for the license for the device, to receive the license from the license server, and to assign the license to the device when the license is received.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614678&OS=09614678&RS=09614678
owner: DELL PRODUCTS, LP
number: 09614678
owner_city: Round Rock
owner_country: US
publication_date: 20110610
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","DETAILED DESCRIPTION OF DRAWINGS"],"p":["This disclosure generally relates to information handling systems, and more particularly relates to a system and method for extracting device uniqueness to assign a license to the device.","As the value and use of information continues to increase, individuals and businesses seek additional ways to process and store information. One option is an information handling system. An information handling system generally processes, compiles, stores, and\/or communicates information or data for business, personal, or other purposes. Because technology and information handling needs and requirements can vary between different applications, information handling systems can also vary regarding what information is handled, how the information is handled, how much information is processed, stored, or communicated, and how quickly and efficiently the information can be processed, stored, or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing, airline reservations, enterprise data storage, or global communications. In addition, information handling systems can include a variety of hardware and software components that can be configured to process, store, and communicate information and can include one or more computer systems, data storage systems, and networking systems.","An information handling system, such as a server, can include a network interface card, a host bus adaptor, a redundant array of independent disks, a controller, and the like. Each of these devices may have a different manufacturer that can require a user of the server to acquire a license before using the device.","The use of the same reference symbols in different drawings indicates similar or identical items.","The following description in combination with the Figures is provided to assist in understanding the teachings disclosed herein. The following discussion will focus on specific implementations and embodiments of the teachings. This focus is provided to assist in describing the teachings and should not be interpreted as a limitation on the scope or applicability of the teachings. However, other teachings can certainly be utilized in this application.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1","b":"100"},"The licensing system  includes a server , which communicates with a license server  via a network . The server  includes devices , , and , a controller , a license manager (LM) subsystem , and a local interface card . The controller  is in communication with the devices , , and , with the LM subsystem , with the local interface card , and with a memory . The memory  can be external to the server , or can be located within the server. The local interface card  can communicate with a local display  and with a local keyboard .","The local interface card  can be an integrated keyboard, video, and mouse (iKVM) interface card that can provide a local user with access to each of the devices , , and . The controller  can be any type of controller, such as an integrated Dell Remote Access Controller (iDRAC), which is an interface card that can provide out-of-band management of the servers , , or . The controller  can have a processor, a memory, a battery, a network connection, and access to a server chassis bus. The controller  can provide different functions for the server  such as power management, virtual media access, and remote console capabilities. A local user can utilize the local interface card , the local display , and the keyboard  to communicate with the controller  and the LM subsystem  to access, configure, or assign a license to one of the devices , , and , and the controller .","The devices , , and  in the server  can be each manufactured by different vendors that may require the user to receive a license to use the device. When the server  is turned on, the LM subsystem  can communicate with a daemon process  of the controller , via an application programming interface (API), to request information about the devices in the server, and whether each of the devices has been assigned a license. The daemon process  can then communicate with the devices , , and  to extract a unique identification (ID) for each of the devices, such as a peripheral component interconnect (PCI) ID string. The daemon process  can then determine whether a license is assigned to each of the devices , , and .","The daemon process  can then return the unique ID for each of the devices , , and  that is not assigned a license to the LM subsystem , which in turn can send the unique ID for each of the devices to the license server  to request a license for the device. The license server  includes a license key generator (LKG) , which can generate the license for a specific device based on the unique ID of the device. For example, the LKG  can determine whether the unique ID of a device is a proper unique ID. If the unique ID is proper, the LKG  can generate the license, and can sign the license with a signature. The signature can be an encrypted signature in an extensible markup language (XML) format, or the like. The license server  can also include the unique ID of the device within the license, such that the unique ID of the license can be matched with a unique ID of a device.","The LKG  can also include other restrictions on the license based on licensing requirements of the manufacturer of the device. The other restrictions can be that the license is bound to a specific platform, that the license is bound to a service tag or to the unique ID, that the license has a time constraint, or the like. Binding the license to a specific platform can cause the license to be valid only for a specific system ID, such as an ID associated with the server . Binding the license to a specific platform can also cause the license to be valid only for a specific platform generation, such as a specific operating system generation. Binding the license to a service tag or unique ID can cause the license to be valid only for a device that has a service tag or unique ID that matches the unique ID of the license. The time constraint for the license can limit the license to a specific amount of time, indicate a start date and\/or an end date of the license, indicate that the license is valid during an evaluation period, or the like.","The license server  can send the license to the LM subsystem  with the license being embedded in an email, via a web portal interface, via a license management tool, or the like. When the LM subsystem  has received the license, the LM subsystem can store the license in a local storage medium, such as the memory . The user can utilize the LM subsystem  to access a licensing graphical user interface (GUI) , as shown in , to import and save a license to one or more of the devices , , and  within the server .",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 2","b":["122","202","204","206","208","210","210","212","214","204","206"]},"For example, the status  for the controller  can indicate that the controller does not have a license assigned. The user can then select one of the actions  from the drop down menu  for the controller , such as to import a license. When the action  has been selected, the licensing GUI  can expand a field for that device such that a file text box , a browse button , an apply button , and a cancel button  can be inserted into the licensing GUI as shown in .",{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 3","FIG. 4"],"b":["302","304","306","308","212","114","306","304","402"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 4","b":["402","404","406","408","410","406","410","404","408","404","402","202"]},"If the user selects the open button , the file information for the license file  can be copied into the file input text box  as shown in . The user can then click the apply button  to assign the license to the device, such as the controller . The user can also select the cancel button  to cancel the operation. However, if the user selects the apply button , the LM subsystem  can then attempt to assign the license to the controller . When the license is imported for a device existing in the server , the LM subsystem  can verify the encrypted signature for the license, verify that the device is valid, and determine whether the license is bound. If the license is bound to a unique ID, the LM subsystem  can verify the device by comparing the unique ID of the device with the unique ID in the license.","Referring back to , the user can also utilize the licensing GUI  to delete a previously assigned license from device , , or . If the user decides to delete a license, the user can select the delete action  from the drop down menu . When the delete action  has been selected, the license file can be removed from the device , , or , and the license file can become un-assigned.","Some of the devices , , and  may have more than one license assigned to the device. When the user is deleting a license from a device, the user can determine if a single license or all licenses need to be deleted from the device. If all licenses should be deleted, the user can select delete from the drop down menu  in . Otherwise, if an individual license is to be deleted, the user can select to view an expanded license view  for the device by selecting the \u201c+\u201d icon  in the licensing GUI  to display an expanded license view  as shown in .",{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6","b":["602","604","606","608","612","614","604","604","606","602","608","608","608","608"]},"When a license is assigned to a device, such as the device , the device can store information about the license in a memory of the device. If the user wants to revoke or delete the license from the device , the user can select the delete action  for the license of the device. The LM subsystem  can then issue a revoke command to the device , which in turn causes the device to delete the license and other information about the license from the memory in the device. When the license has been removed from the device , the LM subsystem  can delete the license from a datastore of the LM subsystem.","If no other licenses are installed on the device , the controller  may only allow functions for the base product for the device until another license is assigned to the device that turns on additional features, evaluation periods, upgrades, or the like. In an embodiment, if the device  becomes unusable, such as if the device breaks, is removed, or the like, the license may be deleted from the server  and reapplied to a similar device on another server unless the license is bound to the server or to the device.","Another action the user may want to perform is to replace an existing license assigned to the device  with a new license. For example, the user may want to extend an evaluation license, replace an evaluation license with a purchased license, replace an expiring type license with an extension or a perpetual non-expiring license, or the like. The LM subsystem  can first receive an upgraded\/updated license from one of several methods, such as the license being embedded in an email, via a web portal interface, via a license management tool, or the like. When the upgraded\/updated license has been received and the LM subsystem  has stored the license on a local storage medium, the user can use the licensing GUI  and the expanded license view  to replace the license file from the local storage medium to the datastore of the LM subsystem.","The user can determine which device, such as device , has a license that should be replaced, and can then select \u201c+\u201d icon next to the device to display the expand license view  of the licensing GUI . The user can then select the replace action  from the drop down menu  for the license that is to be replaced. The user can then perform the steps for importing a license described above with respect to .","Another action that the user can perform is to export a license to an external storage medium, such as the memory . To export the license, the user can select the export action  from the drop down menu , or can select the export action  from the drop down menu . A file save dialog box can be displayed in response to the user selecting the export action. The LM subsystem  can then assign a file name consisting of the device ID and license entitlement ID to the license file in the external storage medium.",{"@attributes":{"id":"p-0033","num":"0032"},"figref":"FIGS. 7 and 8","b":["700","702","704","706"]},"If a license is not assigned to the device, the unique ID for the device is returned the to the LM subsystem and the unique ID for the device is sent from the LM subsystem to a license server to request the license for the devices at block , otherwise the flow repeats as stated above at block . The license for the device is generated by a license key generator based on the unique ID of the specific device at block . At block , the license is signed with an encrypted signature. The encrypted signature can be in an extensible markup language (XML) format, or the like. The unique ID of the device is included within the license at block .","At block , restrictions on the license are included in the license based on licensing requirements of a manufacturer of the device. The other restrictions can be that the license is bound to a specific platform, that the license is bound to a service tag or the unique ID, that the license has a time constraint, or the like. Binding the license to a specific platform can cause the license to be valid only for a specific system ID, such as an ID associated with the server. Binding the license to a specific platform can also cause the license to be valid only for a specific platform generation, such as a specific operating system generation. Binding the license to a service tag or unique ID can cause the license to be valid only for a device that has service tag or unique ID that matches the unique ID of the license. The time constraint for the license can limit the license for a specific amount of time, indicate a start date and\/or and end date of the license, indicate that the license is valid during an evaluation period, or the like.","At block , the license is sent to the LM subsystem. The license can be sent via the license being embedded in an email, via a web portal interface, via a license management tool, or the like. The license is stored in a local storage medium in response to the LM subsystem receiving the license at block . At block , a determination is made whether an import action is requested for a device in the server via a licensing GUI. If an import action is not request the flow continues at block , otherwise the licensing GUI is expanded to display a file text box, a browse button, an apply button, and a cancel button at block .","At block , an operating system (OS) file browser is opened when the browse button is selected. A license file is highlighted and selected at block . The license file is highlighted and selected by a user clicking on the license file. At block , a file name of the license file is copied into the file text box of the licensing GUI when an open button of the OS file browser is selected. The license is imported for the device in response to the apply button being selected at block .","At block , the encrypted signature of the license is verified and determination is made that the license is bound to the device. The device is verified by comparing the unique ID of the device with the unique ID in the license at block . At block , the imported license is assigned to the specific device.","At block , a determination is made whether a delete action is selected. If the delete action has been selected, the license file is removed from the specific device and the license file is un-assigned at block . If the delete action is not selected, a determination is made whether a replace action is selected at block . If the replace action is selected a new license can be assigned to the specific device at block . The new license can extend an evaluation license, replace an evaluation license with a purchased license, replace an expiring type license with an extension or a perpetual non-expiring license, or the like. If the replace action is not selected, a determination is made whether an export action is selected at block . If the export action is selected the license is sent to a memory at block . The memory may be external to the server, internal to the server, or the like.",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 9","b":["900","902","904"]},"At block , a determination is made whether a device without an assigned license is located in the server. The device can be located by matching a peripheral component interconnect (PCI) identification (ID) for the device. If a device without an assigned license is located in the server, a unique ID is determined for the device at block . The unique ID can be determined and then sent to the LM subsystem as part of a comprehensive embedded management (CEM) license application programming interface (API). Additionally, the unique ID can be assigned to the device by a vendor of the device, such as a media access control (MAC) address for a NIC, world wide name (WWN) for a host bus adaptor (HBA), and the like.","At block , the unique ID is returned, by the LM subsystem, to the calling script of the factory process. A license key generator (LKG) is provided with the unique ID by the calling script at block . In an embodiment, the LKG can be a microprocessor, a general processor, or the like. At block , a license is generated by the LKG for the device using the unique ID. A hash is generated and the license is signed with an encrypted signature at block . At block , the license is passed to the LM subsystem. The license is validated, by the LM subsystem, based on the hash and the encrypted signature, and the device is located and assigned the license at block . The flow then repeats at block , such that the determination is made whether another device without an assigned license is located in the server. If another device is located without a license, the flow continues as stated above at block . If no device is located without a license the production of the server is finalized at block .","As shown in , the information handling system  can include a first physical processor  coupled to a first host bus  and can further include additional processors generally designated as nphysical processor  coupled to a second host bus . The first physical processor  can be coupled to a chipset  via the first host bus . Further, the nphysical processor  can be coupled to the chipset  via the second host bus . The chipset  can support multiple processors and can allow for simultaneous processing of multiple processors and support the exchange of information within information handling system  during multiple processing operations.","According to one aspect, the chipset  can be referred to as a memory hub or a memory controller. For example, the chipset  can include an Accelerated Hub Architecture (AHA) that uses a dedicated bus to transfer data between first physical processor  and the nphysical processor . For example, the chipset , including an AHA enabled-chipset, can include a memory controller hub and an input\/output (I\/O) controller hub. As a memory controller hub, the chipset  can function to provide access to first physical processor  using first bus  and nphysical processor  using the second host bus . The chipset  can also provide a memory interface for accessing memory  using a memory bus . In a particular embodiment, the buses , , and  can be individual buses or part of the same bus. The chipset  can also provide bus control and can handle transfers between the buses , , and .","According to another aspect, the chipset  can be generally considered an application specific chipset that provides connectivity to various buses, and integrates other system functions. For example, the chipset  can be provided using an Intel\u00ae Hub Architecture (IHA) chipset that can also include two parts, a Graphics and AGP Memory Controller Hub (GMCH) and an I\/O Controller Hub (ICH). For example, an Intel 820E, an 815E chipset, or any combination thereof, available from the Intel Corporation of Santa Clara, Calif., can provide at least a portion of the chipset . The chipset  can also be packaged as an application specific integrated circuit (ASIC).","The information handling system  can also include a video graphics interface  that can be coupled to the chipset  using a third host bus . In one form, the video graphics interface  can be an Accelerated Graphics Port (AGP) interface to display content within a video display unit . Other graphics interfaces may also be used. The video graphics interface  can provide a video display output  to the video display unit . The video display unit  can include one or more types of video displays such as a flat panel display (FPD) or other type of display device.","The information handling system  can also include an I\/O interface  that can be connected via an I\/O bus  to the chipset . The I\/O interface  and I\/O bus  can include industry standard buses or proprietary buses and respective interfaces or controllers. For example, the I\/O bus  can also include a Peripheral Component Interconnect (PCI) bus or a high speed PCI-Express bus. In one embodiment, a PCI bus can be operated at approximately 66 MHz and a PCI-Express bus can be operated at more than one speed, such as 2.5 GHz and 5 GHz. PCI buses and PCI-Express buses can be provided to comply with industry standards for connecting and communicating between various PCI-enabled hardware devices. Other buses can also be provided in association with, or independent of, the I\/O bus  including, but not limited to, industry standard buses or proprietary buses, such as Industry Standard Architecture (ISA), Small Computer Serial Interface (SCSI), Inter-Integrated Circuit (IC), System Packet Interface (SPI), or Universal Serial buses (USBs).","In an alternate embodiment, the chipset  can be a chipset employing a Northbridge\/Southbridge chipset configuration (not illustrated). For example, a Northbridge portion of the chipset  can communicate with the first physical processor  and can control interaction with the memory , the I\/O bus  that can be operable as a PCI bus, and activities for the video graphics interface . The Northbridge portion can also communicate with the first physical processor  using first bus  and the second bus  coupled to the nphysical processor . The chipset  can also include a Southbridge portion (not illustrated) of the chipset  and can handle I\/O functions of the chipset . The Southbridge portion can manage the basic forms of I\/O such as Universal Serial Bus (USB), serial I\/O, audio outputs, Integrated Drive Electronics (IDE), and ISA I\/O for the information handling system .","The information handling system  can further include a disk controller  coupled to the I\/O bus , and connecting one or more internal disk drives such as a hard disk drive (HDD)  and an optical disk drive (ODD)  such as a Read\/Write Compact Disk (R\/W CD), a Read\/Write Digital Video Disk (R\/W DVD), a Read\/Write mini-Digital Video Disk (R\/W mini-DVD), or other type of optical disk drive.","Although only a few exemplary embodiments have been described in detail in the exemplary embodiments without materially departing from the novel teachings and advantages of the embodiments of the present disclosure. For example, the methods described in the present disclosure can be stored as instructions in a computer readable medium to cause a processor, such as chipset , to perform the method. Additionally, the methods described in the present disclosure can be stored as instructions in a non-transitory computer readable medium, such as a hard disk drive, a solid state drive, a flash memory, and the like. Accordingly, all such modifications are intended to be included within the scope of the embodiments of the present disclosure as defined in the following claims. In the claims, means-plus-function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents, but also equivalent structures."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["It will be appreciated that for simplicity and clarity of illustration, elements illustrated in the Figures have not necessarily been drawn to scale. For example, the dimensions of some of the elements are exaggerated relative to other elements. Embodiments incorporating teachings of the present disclosure are shown and described with respect to the drawings presented herein, in which:",{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIGS. 2-6"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
