---
title: Method and apparatus for developing web services using standard logical interfaces to support multiple markup languages
abstract: The Web Services Development Kit (WSDK) comprises a set of build-time tools and run-time components designed to support the development of web services and the interface to those services. WSDK provides a framework for the development of web services that isolates developers from the implementation details of the markup and transport layers, by separating the logical aspects of the service development from the physical aspects. A “call” generated by a client contains a batch of operations to be executed in the context of a single request/reply message exchange. A markup library translates logical structure to a specific markup language. Additional markup languages are supported by adding additional modules to the markup library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07127700&OS=07127700&RS=07127700
owner: Openwave Systems Inc.
number: 07127700
owner_city: Redwood City
owner_country: US
publication_date: 20020919
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims the benefit of U.S. Provisional patent application No. 60\/364,480 filed on Mar. 14, 2002 and U.S. Provisional patent application No. 60\/364,862 filed on Mar. 14, 2002, which are incorporated herein by reference.","At least one embodiment of the present invention pertains to tools and components for the development of web services and, more particularly, to a method and apparatus for developing web services that employ a standard logical interface to support multiple markup implementations.","\u201cWeb services\u201d is an industry term that covers a collection of standards and proposals that define how distributed computing should be implemented in a web-based network environment, such as the World Wide Web. Web services is an evolving area of technology that has a broad range of potential applications but is immature in implementation. There are several general attributes that describe the essence of web services.","The primary paradigm for web services is that of a client\/server relationship. A client sends a request to a server for the execution of some task. The server executes the task and sends an appropriate reply back to the client.","Interoperability is a main goal of current web services efforts. Applying lessons from past mistakes, the industry is focusing its efforts on ensuring that information communicated between components of the system will be interpreted identically by all of the parties involved. The focus on \u201con the wire\u201d representation has allowed for the development of very different (and competing) technologies for constructing web service implementations. Two of the major contenders at present include Microsoft, with its .NET architecture that leverages its traditional COM technology, and IBM, with its WebSphere architecture that leverages such Java technologies as Java 2 Enterprise Edition (J2EE).","Communication between client and server on the World Wide Web is typically accomplished via Hypertext Transport Protocol (HTTP). This is one of the factors that distinguish web services from other client\/server approaches, such as remote procedure call (RPC) or common object request broker architecture (CORBA). Web service interactions also differ from those of typical Web browser interactions. In the typical browser interaction, the client sends a request for content from the server which will be rendered for display to an end user. In the web services model, the client sends a request for a task (or operation) to be executed by the server, and the reply contains the results of executing that operation.","Underlying most aspects of web services is the extensible markup language (XML). Most situations that call for representation of data employ XML as the base data structuring language. Most web services protocols are defined as a set of XML elements and conventions. This is another major factor that distinguishes web services from other client\/server approaches. For example, CORBA employs one language (IDL) for defining interfaces and a different protocol (IIOP) for communicating between client and server. In the web services context, both the interface definition language and the client\/server communication protocol are represented in XML.","There are two problems with XML, however, that probably originate from its original focus on supporting text processing. First, XML can be quite difficult and expensive to parse, due to such features as user-defined entities, processing instructions, etc., most of which are not needed for most inter-application communication. Second, as a text-based protocol, XML does not support the transport of raw binary information. Instead, it must be encoded into text for transmission (e.g., Base64 or similar encoding mechanisms).","There are essentially two approaches typically used for solving the first problem. The first approach is to define protocols that are based on the important core features of XML, but specifically forbid the use of particularly complex XML features (such as processing instructions). A recent example of this approach is the Simple Object Access Protocol (SOAP). See \u201cSimple Object Access Protocol (SOAP) 1.1,\u201d W3C Note, May 8, 2000. SOAP is an XML-based protocol that provides basic rules for the format of request and reply messages exchanged between client and server during operation execution. The second approach is to define a separate \u201clogical\u201d document model and then provide information to \u201cmap\u201d that logical model onto the specific XML representation. A recent example of this approach is the Web Services Description Language (WSDL). See \u201cWeb Services Description Language (WSDL) 1.1,\u201d W3C Note, Mar. 15, 2001. WSDL is an XML-based interface definition language that is used to define the operations supported by a server and how requests and replies for those operations are represented in the messages exchanged between client and server.","SOAP defines four basic things:\n\n","WSDL defines a grammar for describing web service interfaces. A WSDL interface description consists of the following five top-level elements:\n\n","A full WSDL specification thus consists of logical information (types, messages and portTypes), physical information (bindings), and location information (services). Since this information is typically needed by clients at different points in the development, WSDL specifications are often produced in fragments that are assembled together via an analog of the C pre-processor \u201c#include\u201d directive.","Aside from SOAP and WSDL, there are other initiatives that are often considered web services \u201cbuilding blocks\u201d, such as XML schema and universal description, discovery, and integration (UDDI) protocol. XML schema provides a set of rules for defining logical data types in XML and is the preferred language for defining types in WSDL. UDDI is an XML-based protocol for obtaining information about the services provided by a particular organization. Typically, UDDI is used to retrieve the complete WSDL specifications (including location information) for a set of operations.","Combined, SOAP and WSDL perform three basic tasks when mapping information exchange onto a structured document:\n\n","Consider the following sequence of events, which describes a typical experience for a web services client developer:\n\n","The two basic approaches represented by SOAP and WSDL have shortcomings. For example, SOAP does not define how one represents the tasks to be executed by the server, how the data associated with the request and reply is structured, relationships between request and reply messages, or real-world issues such as application versioning. These issues must be coordinated between client and server \u201cout of band\u201d. WSDL addresses the \u201clogical to physical\u201d mapping problem by individually specifying how different elements in the logical model map to their counterparts in the physical model. Consequently, a consumer of such an interface must parse and understand such mapping instructions, which is not a trivial task. In addition, SOAP and WSDL are both XML-based. Consequently, without either changing the XML specification or manipulating the underlying transport (e.g., HTTP) protocol, one cannot pass binary data without encoding it as text. Other problems are associated with SOAP and WSDL, as described below.","Further, additional facilities are needed for effective implementation of typical web services, which are not provided by known current specifications. These facilities include user identification and authentication, access control, version management, transaction management, and ad hoc (dynamic) \u201cbatching\u201d (sending several logical operation requests together in a single physical message).","The invention includes a processing system comprising a processor and a storage facility storing a program, accessible to a client and a server in a web based network environment, which when invoked by the client or the server, converts between a logical structure that is not specific to any markup language and a markup language encoding of the logical structure, without using any explicitly-declared binding of logical structure to markup language encoding. The logical structure defines a set of operations for a web based application involving the client and the server.","Other features of the present invention will be apparent from the accompanying drawings and from the detailed description which follows.","A method and apparatus for developing web services that employ a standard logical interface to support multiple markup implementations are described. Note that in this description, references to \u201cone embodiment\u201d or \u201can embodiment\u201d mean that the feature being referred to is included in at least one embodiment of the present invention. Further, separate references to \u201cone embodiment\u201d or \u201can embodiment\u201d in this description do not necessarily refer to the same embodiment; however, such embodiments are also not mutually exclusive unless so stated, and except as will be readily apparent to those skilled in the art from the description. For example, a feature, structure, act, etc. described in one embodiment may also be included in other embodiments. Thus, the present invention can include a variety of combinations and\/or integrations of the embodiments described herein.","As described in greater detail below, the present invention introduces a set of build-time tools and run-time components designed to support the development of web services and the interface to those services. These tools and components are referred to collectively as Web Services Development Kit (WSDK). WSDK provides a framework for the development of web services that isolates developers from the implementation details of the markup and transport layers. In particular, WSDK separates the logical aspects of the service development from the physical aspects (markup and transport) so that service developers can focus on business logic and platform developers can take care of mapping the logical model into particular markup languages (or versions of particular languages). Note that for purposes of this document, for ease of reference, different versions or variations of a given markup language shall be treated as different markup languages. WSDK provides additional support for real-world application development and deployment issues not addressed in the standard web services arena, such as batching, transaction management, and versioning, etc.","WSDK provides the above features in a form suitable for the extreme performance and scalability requirements of a carrier-class environment. For example, in certain embodiments of the invention: all server-side code is written in low-overhead C and C++; there is minimal use of dynamic memory allocation and string\/data copying; hand-rolled \u201cno copy\u201d parsers are used with little or no dynamic memory allocation; and efficient code generated at build-time is used rather than run-time data dictionary queries.","There are three main areas where WSDK differs conceptually from the service model defined by WSDL. First, the concept of \u201cservice\u201d differs between WSDL and WSDK. In WSDL, a service may be viewed as a set of network end-points (host, port, and URI) that support a specific collection of \u201cbound\u201d operations. WSDK, on the other hand, distinguishes between \u201cserver\u201d (a run-time software unit that handles requests on an end-point) and \u201cservice\u201d (a well-defined collection of operations more akin to the WSDL \u201cportType\u201d). A WSDK server may host multiple services. In the remainder of this document, \u201cservice\u201d will be used to mean a top-level aggregation of operations and related data types and fault codes.","Second, WSDL defines a direct relationship between operations and messages. Essentially, the entire content of a message is defined by the logical content and binding method of a single operation. WSDK, on the other hand, introduces an intermediate runtime-only entity known as a call. A call contains a batch (one or more) of operations to be executed in the context of a single request\/reply message exchange. Batching is an optional runtime decision made by the client and is only available via the client APIs provided with WSDK. A batch of operations is defined dynamically by a client, based on a previously defined (static) operation structure definition. Thus, a client may dynamically select particular portions of an operation structure definition to incorporate into a message (a batched request), according to its current needs and\/or the current state of application execution. Note that messages generated from a call containing only one operation are identical to those defined via WSDL.","Further, in WSDL the relationship between the logical operation request\/reply structure and a particular markup language representation is specified via a declarative per-operation syntax. WSDK, on the other hand, uses an entirely different mechanism, employing a markup library that can dynamically translates logical structure to any supported markup language, without using any explicitly-declared binding of logical structure to markup language encoding. Additional markup languages are supported by adding additional modules to the markup library. Where explicit (e.g., WSDL) bindings are required, the hard-coded internal rules are simply translated into WSDL binding statements.","To facilitate description of the present invention, various components are described herein as being implemented in a particular programming language, such as C, C++, or Java. It will be recognized that such references to particular programming languages refer only to certain embodiments of the invention, and that in other embodiments, the described components may be implemented in other programming languages and\/or by using hardware-based techniques.",{"@attributes":{"id":"p-0040","num":"0058"},"figref":["FIG. 1","FIG. 1"]},"The components of WSDK include a WSDK Code Generator, a WSDK Client API Framework (WCAF) , a WSDK Server Framework (WSF) , and a WSDK Markup Library . The Code Generator , henceforth referred to as \u201cOSDGen\u201d, is a build-time generation tool that parses Operation Structure Definition (OSD) files and generates code for both service implementation and client interface.","The WSF  is, in one embodiment, a C++ server framework that manages the runtime operation dispatch process and all associated facilities.","The WCAF  is, in certain embodiments, a C or Java client framework that provides a framework within which client APIs are exposed. As described further below, this framework includes an \u201cOipcCall\u201d data structure that is populated with \u201cOipcOperation\u201d objects. The WCAF  also includes a set of functions to serialize the request portion of the call to a request document and to populate the reply portion of the call from a reply document. In general, these \u201ccall-level\u201d functions are simply wrappers over the operation-specific code generated by OSDGen .","The Markup Library  is, in certain embodiments, a C or Java markup library that translates logical markup API calls into physical markup (e.g., SOAP). This library  is used by both the WSF  and the WCAF .","The illustrated components related to WSDK include: a Server Transport Framework ; Operations, Administration, and Management (OA&M) facilities ; and a Client Transport Library . Multiple implementations of these components may exist.","The server transport framework (STF)  is responsible for the basic runtime environment the server side. It may be, for example, a UNIX program that is designed to service \u201crequest\u201d messages sent from a client over a TCP socket. The STF  would typically be capable of servicing multiple requests simultaneously (so it typically either has multiple threads or multiple processes) and may use HTTP as a \u201ctunneling\u201d protocol (e.g., requests are sent via an HTTP POST). The STF  would typically allow for the separate development and integration of modules that implement service business logic.","The WSF  is provided in the form of a library that is linked into a main program, i.e., the STF . The STF  \u201cdrives\u201d the WSF  via two interfaces: a \u201cstartup initialization\u201d interface, and a \u201crequest dispatch\u201d interface. An example of the STF  for WSDK-based servers is the Apache web server. This is combined with a small Apache module that provides the \u201cglue\u201d between Apache and WSF .","Thus, the \u201cserver-side\u201d can be viewed as having three levels of abstraction:","1) The \u201cserver\u201d level (provided by the STF)\u2014a \u201cmain\u201d program.","2) The \u201cservice framework\u201d level (provided by the WSF )\u2014a \u201cmodule\u201d in the form of a library that is \u201cplugged in\u201d to the server main program.","3) The \u201cservice\u201d level\u2014a set of shared libraries (one for each service) that is \u201cplugged in\u201d to the WSF .","The OA&M facilities  are a set of configuration and logging facilities used by the WSF  via an abstract interface. Typically, the STF  is responsible for initializing appropriate instances of these facilities.","The Client Transport Library  is used by the client for communication with WSDK-based servers when the generated WCAF  is employed. The Client Transport Library  provides basic TCP\/IP connection management and client-side HTTP support.","Operation Structure Definition (OSD) Specifications  are input files that are provided by developers and are described further below.","The generated code shown as dashed-line boxes  in  includes components generated by OSDGen  and described in greater detail below.","The Service Implementations are the server-side code (e.g., C++) generated by OSDGen . They include a combination of type declarations, service initialization, operation serialization and validation, and skeletons for operation business logic.","The Service Client APIs A are the client-side code (e.g., C or Java) that corresponds to individual operations. This code includes a combination of type declarations and operation serialization logic.","The Service WSDL Specifications B are the WSDL specifications (logical and binding descriptions only) that correspond to the operations of the service. They are provided as an alternative to using the client APIs. Note that WSDL location information (e.g., host and port) is not provided by WSDK, since it depends upon information known only at deployment. Clients that intend to use WSDL specifications must obtain the location information via another facility.","Referring now to , a WSDK-based development project will normally include the following process performed by the service developer:","Compose the OSD specification for the service (block ), i.e., construct the OSD file(s) for the service being defined, including the specifications for each of the operations the service will provide. OSD and OSDGen  are described further below.","Run OSDGen  (block ) to create the server-side operation context classes and the skeletons for the server-side service and operation classes.","Complete the implementation of the generated server skeleton classes and build the service into a shared library (block ). When this library is placed in a designated directory, the service will automatically be loaded and initialized during WSF startup initialization. This stage includes developing the set of utility classes that will be needed by the operation during execution. Typically, this might include code for interfacing with database systems, authenticating users, etc. Where appropriate, implement the \u201cTransaction Member\u201d interface for participation in the message-defined transaction model.","Run OSDGen  again (with different options) to generate the client-side interface artifacts (block ), including: Logical and binding portions of WSDL specifications for the service. Fault message catalogs that can then be localized for display of human-readable fault messages; and client APIs.","Implement the execute( ) methods for each of the operation classes (block ).",{"@attributes":{"id":"p-0065","num":"0083"},"figref":"FIG. 3","b":["31","32","33","31","32","34","35","36","36"]},"The MAG  controls the connection to the wireless client device  (session management), retrieving content from the origin server  on behalf of the wireless client device  (proxying), and ensuring that the content is in a form that the wireless client device  can understand (translation). The MAG  may also perform many other functions, such as billing, enhanced services, and push content delivery.","In various other embodiments, the wireline network  could be a type of network other than the Internet, such as a local area network (LAN), a private wide area network (WAN), or a corporate intranet.","One or more wireless client devices  can be connected to one or more servers  on the wireline network  through the MAG . Likewise, one or more other client devices  can be connected to one or more servers  in this manner directly through the wireline network . Any of the clients and servers shown in  may implement WSDK and other features of the invention described herein.","As noted, the invention can also be implemented within many other network environments. For example, the invention can be implemented advantageously in purely-wireline network environments, i.e., in network environments which do not included a wireless network or wireless (mobile) devices.",{"@attributes":{"id":"p-0070","num":"0088"},"figref":"FIG. 4A","b":"3"},"Following each class name in  are three additional items of information (in the following order):\n\n","There are three possible lifetimes of an object: server, call, and txn. Objects with \u201cserver\u201d lifetime are created and initialized during server initialization and exist for the lifetime of the server. Objects with \u201ccall\u201d lifetime are created and initialized when a new request message is received by the call manager and exist until the reply message has been generated. Objects with \u201ctxn\u201d lifetime are created and initialized at the beginning of a logical transaction. Depending upon the error handling method identified in the request message, a transaction will either span an entire call or just the execution of a single operation (for calls that contain only one operation request, this distinction is moot).","The roles of the key classes\/objects of the WSF  will now be described. The OipsCallMgr object coordinates the call dispatch process. This object is responsible for initializing the call context and resources, for dispatching the operation executions, and for all major error handling and transaction management logic. The OipsCallMgr is a concrete class (no subclassing) with a single instance that exists for the lifetime of the server. The functionality of this class is described further below.","The OipsCallResources object is a holder for call-related resources that do not directly correspond to items in the request or reply messages.","The OipsTxnCtxt object contains a list of members (instances of subclasses of OipsTxnMember) of the current transaction and delegates commit( ) and rollback( ) methods to those objects.","The OipsCallCtxt object contains the parsed request message and partially generated reply message for the current call and provides methods for traversing the request and populating the reply. This class is the server-side equivalent to \u201cOipcCall\u201d on the client side (see description of WCAF, below). Hence, OipsCallCtxt includes:","requestDoc (OipmInputDoc)\u2014the parsed request received from the client","replyDoc (OipmOutputDoc)\u2014the reply document sent (or will send, when it is completed) to the client.","errorMode (enum OipcErrorMode)\u2014the indication of the error mode to be used (e.g., \u201cstop\u201d, \u201ccontinue\u201d, or \u201crollback\u201d) when executing the operations in a request. In \u201cstop\u201d mode, execution of the operations for the request is stopped in response to an error occurring during execution of the operations. In \u201ccontinue\u201d mode, execution of the operations for the request continues in response to an error occurring during execution of the operations. In \u201crollback\u201d mode, execution of the operations for the request is stopped in response to an error occurring during execution of the operations, and the state that existed immediately prior to execution of the first operation for the request is resumed.","The OipsServiceMgr object is responsible for loading service implementations (during server initialization) and for providing access to service operations (during request processing).","The OipsService class is an abstract parent class. Each implemented service will have one subclass of OipsService and one instance of that subclass. Service classes are primarily responsible for initializing operations (during server initialization) and for providing access to operations (during request processing). Service class skeletons are generated by OSDGen . In many cases, the generated code is sufficient.","The OipsOperation class is an abstract parent class. Each implemented operation will have one subclass of OipsOperation and one instance of that subclass. Operation class skeletons are generated by OSDGen  and contain an execute( ) method that is invoked by the OipsCallMgr object to execute a particular operation. Many subclasses of the OipsOperation class may exist. For each subclass, there is exactly one instance that exists for the lifetime of the server.","The OipsOpCtxt class is an abstract parent class that contains the \u201crequest\u201d and \u201creply\u201d fragments for each operation found in the request. OipsOpCtxt is equivalent to \u201cOipcOperation\u201d on the client side. Each implemented operation will have one subclass of OipsOpCtxt. Instances of these subclasses are created as necessary (by the OipsCallMgr object via delegation through the OipsServiceMgr object) to hold the data contained in the current request. Operation context classes are fully generated by OSDGen  and do not require any manual coding. OipsOpCtxt contains the following standard methods:","parseRequest( )\u2014similar to \u201cdocToReply\u201d function of OipcOperation. This populates the \u201crequest\u201d portion of the operation context from data parsed from the requestDoc of the call context.","writeReply( )\u2014similar to \u201crequestToDoc\u201d function of OipcOperation. This writes the \u201creply\u201d data from the operation context into the replyDoc of the call context.","OipsOpSummary objects contain the set of information that will be logged in the operation summary logs for the execution of the associated operation. There is a standard set of information provided automatically by WSF. Individual operations can augment this information by adding additional parameters (with names of the form \u201cx-name\u201d).","OipsStatus objects are used for reporting application faults. A standalone OipsStatus population function is automatically generated by OSDGen  for each faultdef defined for a service.","The objects and processes used on the server side are described further below.","The WCAF  will now be described with reference to . In the illustrated embodiment, the WCAF  includes two data structures , named OipcOperation and OipcCall, and a set of functions , named oipcInitCall, oipcAddOperation, oipcGenerateRequest, and oipcSetReply.","The OipcOperation data structure represents an instance of a particular operation. This structure is utilized in a manner similar to a C++ abstract class\u2014it defines a set of standard attributes and function pointers. Actual operations have their own unique structure types (but may be \u201ccasted\u201d to OipcOperation). The OipcOperation structure contains the following:","requestToDoc(OipcCall*, OipcOperation*)\u2014write the request data from the operation into the \u201coutput document\u201d of the OipcCall.","docToReply(OipcCall*, OipcOperation*)\u2014read from the \u201cinput documen\u201d of the OipcCall and write to the \u201creply\u201d portion of the operation.","cleanup(OipcOperation*)\u2014clean up any memory allocated by \u201cdocToReply\u201d.","Each \u201cderived\u201d OipcOperation structure also contains a \u201crequest\u201d structure and a \u201creply\u201d structure.","The OipcCall structure contains the contents of an entire message exchange between client and server, i.e.:","requestHeader (struct OipcRequestHeader)\u2014a simple structure containing standardized request message header information (mostly client identification information used for logging).","replyHeader (struct OipcReplyHeader)\u2014a simple structure containing standardized reply message header information (mostly server identification information).","ops (OipcOperation*[ ])\u2014an array of \u201cOipcOperation\u201d structures.","markupStyle (enum OipmMarkupStyle)\u2014the markup \u201cstyle\u201d used for this call (e.g., Lite, SOAP). A markup style corresponds to a markup language. It includes an enumerated type and an associated markup implementation (a software module) that handles conversion between the \u201cgeneric\u201d data format and a markup language-specific data format.","errorMode (enum OipcErrorMode)\u2014the error mode the server should use when executing the request (continue, stop, or rollback).","requestDoc (OipmOutputDoc)\u2014the request document created when the \u201crequestToDoc\u201d functions for all the operations in \u201cops\u201d are called.","replyDoc (OipmInputDoc)\u2014the reply document parsed from the reply buffer received from the server.","The functions included in the WCAF  are oipcInitCall, oipcAddOperation, oipcGenerateRequest, and oipcSetReply. These functions are defined as follows:","oipcInitCall(OipcCall*,OipmMarkupStyle,OipcErrorMode)\u2014initialize a new call","oipcAddOperation(OipcCall*,OipcOperation*)\u2014Add an operation to this call (the \u201crequest\u201d portion of the operation structure should be filled out before calling this function).","oipcGenerateRequest(OipcCall*, char**, unsigned*)\u2014Finalize the request message and return it as a text buffer for submitting to the server (calls the \u201crequestToDoc\u201d functions for each operation in the call).","oipcSetReply(OipcCall*, char*, unsigned)\u2014Parse the given reply buffer received from the server and use it to populate the reply part of each of the call's operations (calls the \u201creplyToDoc\u201d functions for each operation in the call).","As can be seen from the foregoing description, the WCAF  has components that mirror the functionality of the server side, but with some important differences. On the client side, a call is created from scratch. Separately, operations are created from scratch, their request portions are populated, and they are added to the call. The call is then serialized into a request message and sent to the server. The resulting reply message is parsed and used to populate the \u201creply\u201d portions of each of the operations.","In contrast, on the server side, a call is initialized with the incoming request document. No operation structures are contained within the call structure. Instead, operation structures are created as the request document is parsed and the reply document is written.","The WSDK Library  (also called the \u201cmarkup engine\u201d or \u201cmarkup library\u201d) has two modules: an input module  and an output module , as shown in . Before examining these two modules in detail, however, note first that there are three principals in the markup space: 1) the \u201ccore\u201d markup library; 2) markup implementations (described below); and 3) users of the markup library. Between these three principals, there are four distinct visibility relationships, that apply to both the input module  and the output module :","The core markup library exports public data structures (\u201ccore-public-data\u201d) for use by both users of the markup library and markup implementations.","The core markup library exports a public interface (\u201ccore-public-func\u201d) for use by users of the markup library.","The core markup library exports a private interface (\u201ccore-private\u201d) for use by markup implementations (\u201ccore-private\u201d).","Markup implementations export private interfaces (\u201cmarkup-private\u201d) for use by the core markup library (\u201cmarkup-private\u201d).","The above topology applies to both the input module  and the output module  of the WSDK Library .","A. Input Module","In accordance with one embodiment of the invention, the input module  includes the following elements:","A single complex (core-public-data) data structure, called OipmInputDoc, used by both markup library users and markup implementations.","A set of (core-public-func) functions for \u201creading\u201d the data structure, used by markup library users.","A set of (core-private) functions for \u201cwriting\u201d the data structure, used by markup implementations.","A single (core-public-func) function for \u201ccreating\u201d the data structure, used by markup library users. For each markup implementation, there is a single (markup-private) function that is invoked from the core-public-func function. This markup-private function uses the core-private functions to construct the OipmInputDoc.","A single (core-public-func) function for \u201cdestroying\u201d the data structure, used by markup library users.","Thus, the input module  is illustrated conceptually in , according to one embodiment. As shown, the input module  includes the data structure , called OipmInputDoc (core-public-data), a submodule  (core-public-func) that handles the lifecycle and navigation of the input parse tree, a submodule  (core-private) that handles construction of the input parse tree, and a set of input markup implementations  (markup-private).","The OipmInputDoc data structure  is a complex data structure that is used by both markup library users and markup implementations . It includes the following fields: 1) a \u201cmarkup style\u201d (i.e., an enumerated type defined as part of (core-public-date) and an associated markup implementation  that handles converting between the \u201cgeneric\u201d data format and a markup language-specific data format); 2) a reference to the raw text buffer that was used to construct the input document (this buffer is modified as the document is parsed); 3) an array of \u201centries\u201d; 4) an array of entry \u201centry arrays\u201d; and 5) a \u201ccurrent group\u201d context. The \u201cmarkup style\u201d indicates the markup style that is in effect for the document.","An \u201centry\u201d represents an entity found while parsing the document. There are two basic types of entries (indicated with a Boolean flag): an \u201citem\u201d entry and a \u201cgroup\u201d entry. An \u201citem\u201d entry has a single value associated with it. A \u201cgroup\u201d entry, which has a list of \u201cchild\u201d entry arrays associated with it (see below). The parent-child relationship between groups and their sub-entries directly corresponds to the typical hierarchy one observes from structured documents. Consider the following example:",{"@attributes":{"id":"p-0125","num":"0146"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<foo>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<bar1>value1<\/bar1>"]},{"entry":[{},"<bar2>value2<\/bar2>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/foo>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this case, the group \u201cfoo\u201d has two children (bar and bar).","An entry array provides a mechanism for aggregating multiple entries with the same name. Entry arrays have a \u201cname\u201d and one or more child entries (the child entries may be items or groups). The parent-child relationship between entry arrays and entries is not typically apparent from an examination of original document\u2014it is an artifact of the implementation to support asking for entries by name and index.","Consider the following document fragment:",{"@attributes":{"id":"p-0129","num":"0150"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<foo>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<bar>bar value 1<\/bar>"]},{"entry":[{},"<bar>bar value 2<\/bar>"]},{"entry":[{},"<fubar>fubar value<\/fubar>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/foo>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"This write in would be represented in the parse tree as follows:",{"@attributes":{"id":"p-0131","num":"0152"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"* Entry array with name \u201cfoo\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"* Group entry (index 0)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"* Entry array (index 0) with name \u201cbar\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* Item entry (index 0) with value \u201cbar value 1\u201d"]},{"entry":[{},"* Item entry (index 1) with value \u201cbar value 2\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"* Entry array (index 1) with name \u201cfubar\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"* Item entry at index 0 with value \u201cfubar value\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"As noted above, the input module  of the markup library  includes a submodule  (core-public-func) that handles the lifecycle and navigation of the input parse tree, and a set of markup implementations . A set of key functions for operating on the input document form at least a portion of submodule  and markup implementations . These functions, according to one embodiment, are named: oipmInitInputDoc, oipmNumEntries, oipmOpenGroup, oipmGet* (where\u201c*\u201d represents one of several possible suffixes), and oipmCloseGroup, and are characterized as follows:","oipmInitInputDoc(IN inputDoc, IN buffer, IN markupStyle)\u2014this function inputs a text buffer and a markup style (how the text buffer should be interpreted). The function is called with an empty parse tree (no entries or entry arrays). When it returns, the parse tree is fully populated. All of the other input functions operate on the parse tree, not on the original text buffer. Documents have a single top-level group and the \u201ccurrent group\u201d is set to this top-level group.","Note that documents written in any markup language (within reasonable bounds) can be converted into a standardized parse tree\u2014thus document navigation is fully insulated against differences in markup languages. Note also that for purposes of this document, for ease of reference, different versions or variations of a given markup language shall be treated as different markup languages.","oipmNumEntries(IN inputDoc, IN name, OUT count)\u2014This function looks for an entry array within the current group with the given name and then returns the number of child entries for that array. If no array is found with the given name or it contains no entries, 0 is returned.","oipmOpenGroup(IN inputDoc, IN name, IN index)\u2014This function looks (within the current group) for an entry array with the given name and an entry with the given index within that array, checks to see if that entry is a group, and if so, changes the \u201ccurrent group\u201d context to that group.","oipmGet*(IN inputDoc, IN name, IN index, OUT value)\u2014These functions (oipmGetData, oipmGetInt, and oipmGetString) look for an entry array (within the current group) with the given name and a child with the given index and returns the value associated with that child entry.","oipmCloseGroup(IN inputDoc)\u2014This function switches \u201ccurrent group\u201d to the parent of the current group (the parent of the array within which the current group is located). Equivalent to a \u201ccd..\u201d in a UNIX shell.","Submodule  (core-private) includes a set of implementation \u201chelper\u201d functions that are used by markup implementations to build the parse tree. These helper functions, according to one embodiment, are named: oipmiAddArray, oipmiAddEntry, oipmiGetArray, oipmiGetEntry, oipmiNewArray, and oipmiNewEntry, and are characterized as follows:","oipmiAddArray (IN inputDoc, IN groupEntry, IN entryArray)\u2014adds the given array as a child of the given group entry.","oipmiAddEntry (IN inputDoc, IN entryArray, IN entry)\u2014adds the given entry as a child of the given entry array.","oipmiGetArray(IN inputDoc, IN name, OUT entryArray)\u2014returns the entry array with the given name within the current group.","oipmiGetEntry(IN inputDoc, IN name, IN index, OUT entry)\u2014returns the entry at position \u201cindex\u201d within the array named \u201cname\u201d found within the current group.","oipmiNewArray(IN inputDoc, OUT entryArray)\u2014returns a newly initialized entry array","oipmiNewEntry(IN inputDoc, OUT entry)\u2014returns a newly initialized entry.","The input module  also includes a set of input markup implementations , as noted above. Each markup style has an associated input markup implementation. When \u201coipmInitInputDoc\u201d is called, the markup library calls the appropriate markup implementation, based upon the markup style selected. The markup implementations are expected to parse through the original input buffer (possibly modifying it) and use the helper functions described above to construct the input document parse tree.","Note that the markup implementations  and the implementation helper functions are not visible to users of the WSDK Library \u2014they are artifacts of markup language implementation.","B. Output Module","The output module  of the markup library  is based on a similar principle to that of the input module  (i.e., users of the library construct documents via a standardized logical model without regard to markup-language specific issues) but has a different implementation. A strict inversion of the input module would involve creating a parse tree via a set of markup-neutral API functions, followed by a markup-specific translation of that parse tree to a text buffer. For performance reasons, however, only a very sparse amount of context information is maintained and the output document is mostly built on the fly.","The output module  has a structure similar to that of the input module  represented in . In particular, the output module  includes:","A single complex (core-public-data) data structure, called OipmOutputDoc, used by both markup library users and markup implementations.","A set of (core-public-func) functions for \u201cwriting\u201d the data structure, used by markup library users. For each markup implementation, there is a (markup-private) function that corresponds to (almost every) core-public-func function.","A single (core-public-func) function for \u201cinitializing\u201d the data structure, used by markup library users. For each markup implementation, there is a (markup-private) function that corresponds to this initialization function. These markup-private functions typically have very little functionality.","A set of (core-private) functions for \u201cwriting\u201d the data structure, used by markup implementations.","The data structure OipmOutputDoc represents the document under construction. Key fields of this structure include: 1) A markup style, 2) a group \u201cstack\u201d; and 3) the output buffer under construction. The group \u201cstack\u201d is used to capture the context for the output document. For example, suppose we were at the following location in a document:",{"@attributes":{"id":"p-0155","num":"0176"},"tables":{"@attributes":{"id":"TABLE-US-00004","num":"00004"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<group1>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<blah>blahblah<\/blah>"]},{"entry":[{},"<group2>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<blah>blahblah<\/blah>"]},{"entry":[{},"<group3>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<-- we're here"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"In this case, the group stack would contain:","group1","group2","group3 <--top of stack","Similarly to the input module , the output module  includes a set of key functions for operating on output documents, which according to one embodiment are: oipmInitOutputDoc, oipmBeginGroup, oipmEndGroup, and oipmPut* (where\u201c*\u201d represents one of several possible suffixes). These functions are characterized as follows:","oipmInitOutputDoc(IN outputDoc, IN markupStyle)\u2014initializes the document appropriately for the given markup style. Note that this function provides much less functionality than its counterpart in the input module , oipmInitInputDoc.","oipmBeginGroup(IN outputDoc, IN name)\u2014open up a group with the given name within the current context (and add the new group name to the top of the group stack). For a markup language based on XML, this would typically involve writing the group name within <>, e.g.:","oipmBeginGroup(odoc, \u201cfoo\u201d)","would add \u201c<foo>\u201d to the output document.","oipmEndGroup(IN outputDoc)\u2014close the current group and remove it from the top of the group stack. For a markup language based upon XML, this would typically involve writing a close tag for the group, e.g.:","oipmBeginGroup(odoc, \u201cfoo1\u201d);","oipmBeginGroup(odoc, \u201cfoo2\u201d);","oipmEndGroup(odoc);","oipmEndGroup(odoc);","might result in:",{"@attributes":{"id":"p-0171","num":"0192"},"tables":{"@attributes":{"id":"TABLE-US-00005","num":"00005"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<foo1>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"105pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"112pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<foo2>"]},{"entry":[{},"<\/foo2>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/foo1>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"oipmPut*(IN outputDoc, IN name, IN value)\u2014write an item of the appropriate type (oipmPutData, oipmPutInt, oipmPutString) into the document, e.g.:","oipmBeginGroup(odoc, \u201cgroup1\u201d);","oipmPutString(odoc, \u201cfoo\u201d, \u201cfoo_value\u201d);","oipmBeginGroup(odoc, \u201cgroup2\u201d);","oipmPutInt(odoc, \u201cifoo\u201d, 10);","oipmEndGroup(odoc);","oipmEndGroup(odoc);","might result in something like:",{"@attributes":{"id":"p-0180","num":"0201"},"tables":{"@attributes":{"id":"TABLE-US-00006","num":"00006"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<group1>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<foo>foo_value<\/foo>"]},{"entry":[{},"<group2>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"91pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"126pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<ifoo>10<\/ifoo>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"77pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"140pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<group2>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<group1>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"An implementation helper function in the output module  reserves space in the output buffer prior to writing to it. This function, oipmiReserveOutput, is defined as follows:","oipmiReserveOutput(IN outputDoc, IN bytesNeeded)","The output module  also contains a set of output markup implementations, as noted above. Input markup implementations  include a single function that is called from oipmInitInputDoc. Output markup implementations, however, include a set of functions to accomplish each of the following actions:","Initializing the output buffer","Beginning a group","Ending a group","Writing a data buffer","Writing an integer","Writing a string","Finalizing an output buffer","When the corresponding API function is called by a user of the markup library API, that function in turn calls the appropriate implementation function (based upon the markup style registered for the document).","C Header Files","In one embodiment of the invention, the above-described data structures and key functions for both the input module  and the output module  are all declared in a single C header file. The implementation helper functions are declared in a separate header file (for use by markup implementers).","In one embodiment, these header files are named oip_markup.h, oip_markup_impl.h, oipm_light.h, and oipm_soap.h, and are defined as follows:","oip_markup.h: Contains definitions for OipmInputDoc, OipmOutputDoc, and public oipm* functions. Used by programmers who code to a WSDK-based client API.","oip_markup_impl.h: Contains declarations for all oipmi* functions. Used by markup implementors.","oipm_light.h: Contains declarations for the \u201cLite\u201d markup. Used by markup library.","oipm_soap.h: Contains declarations for the \u201cSOAP\u201d markup. Used by markup library.","D. Markup Implementations","In one embodiment of the invention, the WSDK library includes markup implementations to support at least two markups, SOAP and OIP-LIGHT.","1. OIP-LITE Markup Implementation","The OIP-LITE markup language has a simple syntax. Groups entries are represented as:",{"@attributes":{"id":"p-0201","num":"0222"},"tables":{"@attributes":{"id":"TABLE-US-00007","num":"00007"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"groupName ("},{"entry":")"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"Item entries use a simple run-length encoding mechanism for values:\n\n","(In this case \u201c6\u201d is the length of the value \u201cAndrew\u201d associated with the entry named \u201cFirstName\u201d).","For example:\n\n","would result in a buffer that contains:\n\n","When parsed into an input document, you would have:",{"@attributes":{"id":"p-0207","num":"0247"},"tables":{"@attributes":{"id":"TABLE-US-00008","num":"00008"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"array \u201cEnvelope\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entry (group) 0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"array \u201cPerson\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entry (group) 0"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"array \u201cFirstName\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entry (item) 0, value \u201cAndrew\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"array \u201cLastName\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"entry (item) 0, value \u201cLarge\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"array \u201cAge\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"98pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"119pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"entry (item) 0, value \u201c36\u201d"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"2. SOAP Markup Implementation","The SOAP implementation can be simply an XML parser generator with some hard-coded conventions around special elements, including the SOAP \u201cenvelope\u201d, \u201cheader\u201d, and \u201cbody\u201d groups. For example:\n\n","would result in:",{"@attributes":{"id":"p-0211","num":"0258"},"tables":{"@attributes":{"id":"TABLE-US-00009","num":"00009"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SOAP-ENV:Envelope xmlns:SOAP-"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"ENV=\u201chttp:\/\/schemas.xmlsoap.org\/soap\/envelope\/\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SOAP-ENV:Body>"]},{"entry":[{},"<oip:envelope"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"xmlns:oip=\u201chttp:\/\/www.openwave.com\/protocols\/oip\/\u201d>"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oip:Person>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<oip:FirstName>Andrew<\/oip:FirstName>"]},{"entry":[{},"<oip:LastName>Large<\/oip:LastName>"]},{"entry":[{},"<oip:Age>10<\/oip:Age>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oip:Person>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/oip:envelope>"]},{"entry":[{},"<\/SOAP-ENV:Body>"]},{"entry":[{},"<\/SOAP-ENV:Envelope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"and would have exactly the same parse tree structure as the \u201cLITE\u201d version for the input document.","In one embodiment of the invention, the SOAP markup implementation includes the following functions and operates as described:","oipmsParseDoc( )\u2014this is called from oipmInitInputDoc when the markup style is SOAP. Its role is to parse through a buffer containing SOAP\/XML markup and build the corresponding parse tree. Consider the following document:",{"@attributes":{"id":"p-0215","num":"0262"},"tables":{"@attributes":{"id":"TABLE-US-00010","num":"00010"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<SOAP-ENV:Envelope . . . >"]},{"entry":[{},"<SOAP-ENV:Body>"]},{"entry":[{},"<oip:envelope . . . >"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<oip:AuthUser>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<oip:userName>user<\/oip:userName>"]},{"entry":[{},"<oip:password>password<\/oip:password>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/oip:AuthUser>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/oip:envelope>"]},{"entry":[{},"<\/SOAP-ENV:Body>"]},{"entry":[{},"<\/SOAP-ENV:Envelope>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The function would skip over the SOAP-ENV tags to find the \u201coip:envelope\u201d tag, and then:","When it found the opening \u201coip:envelope\u201d tag, it would call:\n\n","and then set the newly created entry as the current group.","When it found the \u201coip:AuthUser\u201d tag, it would call:\n\n","and then set the newly created entry as the current group.","When it found the \u201coip:userName\u201d tag, it would call:\n\n","When it found the \u201cuser\u201d text for the oip:userName tag, it would change the entry type to ITEM, set the value to point to where \u201cuser\u201d occurred in the text buffer, and skip past the \u201c\/oip:userName\u201d closing tag.","When it found the \u201coip:password\u201d tag it would call:\n\n","When it found the \u201cpassword\u201d text for the oip:password tag, it would change the entry type to ITEM, set the value to point to where \u201cpassword\u201d occurred in the text buffer, and skip past the \u201c\/oip:password\u201d closing tag.","When it found the \u201c\/oip:AuthUser\u201d closing tag, it would change the current group to the parent of the AuthUser array (the envelope group).","When it found the \u201c\/oip:envelope\u201d closing tag, it would change the current group to the parent of the envelope array (the top context of the document).","oipmsBeginGroup\u2014called from oipmBeginGroup when the markup style is SOAP. Example:\n\n","would call:\n\n","and then push \u201cAuthUser\u201d onto the output group stack.","oipmsEndGroup\u2014called from oipmEndGroup when the markup style is SOAP. Example:\n\n","oipmsFinalize\u2014called from oipmFinalizeOutput when the markup style is SOAP. This just adds the SOAP closing tags to the document, e.g.:\n\n","oipmsInitDoc\u2014called from oipmInitOutputDoc when the markup style is SOAP. This just adds the SOAP header tags to the document, e.g.:\n\n","oipmsPutData\u2014called from oipmPutData when the markup style is SOAP. This encodes the data in base and then writes the data to the document, e.g.:\n\n","oipmsPutString\u2014called from oipmPutString when the markup style is SOAP, e.g.:\n\n","Development of a WSDK-based service starts with Operation Structure Definition (OSD) specifications for the service. OSD is a hierarchical declaration language with a lexical syntax somewhat similar to LISP. Fundamentally, OSD is a language for describing the logical structure of operation requests and replies. The structure declared within an OSD file directly maps to markup API calls described above. In other words, OSD is used to describe the interface to a set of operations (similar to the logical section of a WSDL description) and to introduce additional server-side authorization and validation logic.","Programmers will manually construct OSD files during development. They will then use OSDGen  during development to create skeleton server-side operation implementations (in, for example, C++ or Java), which they then manually populate with the code that handles executing the operation.","During build (when source code is translated to binary), OSDGen  is used to generate the entire service client API, as well as portions of the server-side code (the context classes). The generated code is generated and compiled in a single logical build step.","OSDGen  is not used at runtime. However, both the code generated by OSDGen  (the client API and the server-side operation context code) and the manually written server-side operation implementation are used.","The primary entities defined using OSD include:\n\n","OSD also supports the equivalent of the C pre-processor \u201c#include\u201d directive.","The most common organization of OSD files includes: a single top-level service file; a file that contains all the itemdef, groupdef, and faultdef definitions for the service; and a separate file for each operation.","Once OSD files exist, OSDGen  can be used to generate the following types of service-specific source files (based upon command-line options to OSDGen ), server-side operation classes, server-side operation context classes, server-side service facility classes, client-side operation context code, and client-side support files:\n\n","OSD has a grammar that maps to the markup language structure. There are two types of \u201centries\u201d in OSD: a \u201cgroup\u201d entry and an \u201citem\u201d entry. A group entry in OSD is depicted as:","(type \u201cname\u201d . . . )","An \u201citem entry\u201d in OSD is depicted as:","name \u201cvalue\u201d","The following main groups are defined within OSD: service, itemdef, item, groupdef, group, operation, which are characterized as follows:","service\u2014used to define services. This is the highest-level construct in OSD. Everything else falls within a service definition, e.g.:\n\n","itemdef\u2014used to define types for items that will be contained in a request or reply, e.g.:",{"@attributes":{"id":"p-0250","num":"0362"},"tables":{"@attributes":{"id":"TABLE-US-00011","num":"00011"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemdef \u201cOipAuthToken\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mtype \u201cstring\u201d # markup type (string, int, or data)"]},{"entry":[{},"min_length \u201c64\u201d"]},{"entry":[{},"max_length \u201c64\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"item\u2014an instance of an item, e.g.:",{"@attributes":{"id":"p-0252","num":"0364"},"tables":{"@attributes":{"id":"TABLE-US-00012","num":"00012"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(item \u201cauthToken\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type \u201cOipAuthToken\u201d"]},{"entry":[{},"card \u201c1..1\u201d)"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"groupdef\u2014used to define (complex) types for groups that will be contained in a request or reply, e.g.:",{"@attributes":{"id":"p-0254","num":"0366"},"tables":{"@attributes":{"id":"TABLE-US-00013","num":"00013"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(groupdef \u201cSubscriber\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(item \u201cid\u201d type \u201cSmgSubscriberId\u201d card \u201c1..1\u201d)"]},{"entry":[{},"(item \u201cauthToken\u201d type \u201cOipAuthToken\u201d card \u201c1..1\u201d)"]},{"entry":[{},"(group \u201cattrs\u201d type \u201cAttribute\u201d card \u201c0..n\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"196pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"group\u2014used to define an instance of a group","operation\u2014used to define an operation. Every operation must contain a \u201crequest\u201d and a \u201creply\u201d group:",{"@attributes":{"id":"p-0257","num":"0369"},"tables":{"@attributes":{"id":"TABLE-US-00014","num":"00014"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(operation \u201cAuthenticateSubscriber\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201crequest\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201clookupInfo\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type \u201cLookupInfo\u201d"]},{"entry":[{},"desc \u201cInformation to find the subscriber.\u201d"]},{"entry":[{},"card \u201c1..1\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201cauthInfo\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type \u201cAuthInfo\u201d"]},{"entry":[{},"desc \u201cInformation to authenticate the subscriber.\u201d"]},{"entry":[{},"card \u201c1..1\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"(group \u201creply\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(item \u201cid\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type \u201cSmgSubscriberID\u201d"]},{"entry":[{},"card \u201c1..1\u201d"]},{"entry":[{},"write_ctxt \u201ctrue\u201d"]},{"entry":[{},"desc \u201cGlobally unique subscriber ID\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(item \u201cauthToken\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"type \u201cOipAuthToken\u201d"]},{"entry":[{},"card \u201c1..1\u201d"]},{"entry":[{},"write_ctxt \u201ctrue\u201d"]},{"entry":[{},"desc \u201cTo be used with future requests.\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},")"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"Consider the following trivial example of a service that contains an operation for translating from a numerical digit to the corresponding English word (e.g., \u201c1\u201d> \u201cone\u201d).",{"@attributes":{"id":"p-0259","num":"0371"},"tables":{"@attributes":{"id":"TABLE-US-00015","num":"00015"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(service \u201cdigit\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemdef \u201cDigitWord\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mtype \u201cstring\u201d"]},{"entry":[{},"min_length \u201c3\u201d"]},{"entry":[{},"max_length \u201c5\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(itemdef \u201cDigitSymbol\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"mtype \u201cinteger\u201d"]},{"entry":[{},"min \u201c0\u201d max \u201c9\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(operation \u201cToWord\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201crequest\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(item \u201csymbol\u201d type \u201cDigitSymbol\u201d card \u201c1..1\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201creply\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(item \u201cword\u201d type \u201cDigitWord\u201d card \u201c1..1\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},")"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"On the client side, OSDGen  would produce the following set of C declarations:",{"@attributes":{"id":"p-0261","num":"0373"},"tables":{"@attributes":{"id":"TABLE-US-00016","num":"00016"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"struct DigitToWordRequest {"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"int symbol;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct DigitToWordReply {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"char* word;"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},"struct DigitToWordOperation {"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OipcStatus (*requestToDoc)("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OipcCall* call,"]},{"entry":[{},"const OipcOperation* op);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OipcStatus (*docToReply)("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OipcCall* call,"]},{"entry":[{},"OipcOperation* op);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"void (*cleanup)("]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"133pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"OipcOperation* op);"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"147pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"DigitToWordRequest request;"]},{"entry":[{},"DigitToWordReply reply;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"56pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"161pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"};"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}},"br":{}},"The following is an example of what the init and \u201crequestToDoc\u201d functions for DigitToWordOperation would look like:",{"@attributes":{"id":"p-0263","num":"0375"},"tables":{"@attributes":{"id":"TABLE-US-00017","num":"00017"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"void digitInitToWord("}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"DigitToWordOperation* op)"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"memset(op, 0, sizeof(DigitToWordOperation));"]},{"entry":[{},"op->cleanup = _DigitToWordCleanup;"]},{"entry":[{},"op->docToReply = _DigitToWordDocToReply;"]},{"entry":[{},"op->requestToDoc = _DigitToWordRequestToDoc;"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":"static OipsStatus_DigitToWordRequestToDoc("}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"OipcCall* call,"]},{"entry":[{},"const OipcOperation* op)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":"{"}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"245pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"const DigitToWordOperation* l_op = (const DigitToWordOperation*)op;"]},{"entry":[{},"const DigitToWordRequest* r = &l_op->request;"]},{"entry":[{},"oipmBeginGroup(&call->requestDoc, \u201cdigit_ToWord\u201d);"]},{"entry":[{},"oipmPutInt(&call->requestDoc, \u201csymbol\u201d, r->symbol);"]},{"entry":[{},"oipmEndGroup(&call->requestDoc);"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"259pt","align":"left"}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"}"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}]}},"br":{}},"If a reply item is marked with \u2018write_ctxt \u201ctrue\u201d\u2019, then the server will write the reply data for that item in two locations within the OipsCallCtxt object: 1) in the reply document (using the same oipm* functions displayed above for the client); and 2) in a context \u201cmap\u201d maintained within the call context (see below). If a request item is marked with \u2018read_ctxt \u201ctrue\u201d\u2019, then a query for that item in the request will look in two places: 1) in the request document (via the appropriate oipmGet* function); and 2) if it is not found in the request document, then the context map is queried for the item.","This relationship between write_ctxt and read_ctxt is an important facet of the batching capabilities of the server, since it allows for a batch in circumstances that might normally require an additional round-trip. In particular, one can specify that reply (output) data from one operation in a batch be used as request data (input) for a later operation in the same batch. For example, consider the following:\n\n","Marking the authentication token in the reply of AuthUser as \u2018write_ctxt \u201ctrue\u201d\u2019 and the authentication token in the request of GetUserProfile allows for both of these operations to be submitted as part of the same batch (essentially using output from AuthUser as input to GetUserProfile).","As an example of how OSDGen  parses OSD files, consider the following simple example OSD code fragment:",{"@attributes":{"id":"p-0268","num":"0386"},"tables":{"@attributes":{"id":"TABLE-US-00018","num":"00018"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(groupdef \u201cPerson\u201d"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(item \u201cFirstName\u201d mtype \u201cstring\u201d)"]},{"entry":[{},"(item \u201cLastName\u201d mtype \u201cstring\u201d)"]},{"entry":[{},"(item \u201cAge\u201d mtype \u201cint\u201d min \u201c1\u201d max \u201c200\u201d)"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"35pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"182pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},")"]},{"entry":[{},"(operation \u201cPromoteEmployee\u201d"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(request"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"63pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"154pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"(group \u201cperson\u201d type \u201cPerson\u201d))"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"49pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"168pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},". . . "]},{"entry":[{},")"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The above OSD fragment says that a \u201cPromoteEmployee\u201d operation expects to have a \u201cPerson\u201d identified in the request. OSDGen  parses these structural definitions and automatically generates the code that actually invokes the WSDK library API. So, for the above operation, client code would be automatically generated by OSDGen  to contain the following code fragment in the portion of the \u201cPromoteEmployee\u201d client API that is responsible for generating the request message:\n\n","A. System Initialization","System initialization begins with the initialization of server-level resources (logging, configuration, etc.) for a server instance, followed by discovery and dynamic loading of the set of services to be hosted within that server instance (during initialization, each service creates and registers a single instance of each operation class). The call manager, oipsCallMgr, is then initialized and created.","B. Document Exchange","An example of a document exchange between client and server using the WSDK APIs is as follows, as illustrated in :","1. Client initializes an output document (block ) by calling oipmInitOutputDoc, selecting the markup as appropriate for its performance and compatibility needs. For example, if a large volume of non-text data (e.g., .WAV or MP3 files) is to be sent, then the client might op to use a markup other than SOAP, which is not well-suited for such uses.","2. (Assuming use of the above APIs) Client uses the WSDK markup library  to add groups and items to the document as appropriate for the services being requested and then asks for the \u201cserialized\u201d representation of the output document (a data buffer containing the \u201con the wire\u201d representation of the document) (block ). This is done by making a number of calls to oipmPut*( ), oipmBeginGroup( ) and oipmEndGroup( ), as appropriate, followed by a call to oipmFinalizeOutput( ) (which allows the implementation to append any markup-specific trailer onto the buffer and returns the buffer).","3. Client transmits the document to the server (block ), identifying the markup style in a transport-specific manner. For a typical case where the transport is via an HTTP POST, a URI is used to identify the markup style (e.g., URL is \u201chttp:\/\/host:port\/oip\/soap\u201d or \u201chttp:\/\/host:port\/oip\/light\u201d).","4. Server reads the request message from client into a data buffer (from socket, file, Apache module API, etc.) (block ).","5. Server invokes the markup library  to \u201cparse\u201d the document into the input structure (passing the appropriate markup style to the markup library ) and initializes an empty output document in the same markup style in a data buffer (block ). In this context, \u201cparsing\u201d includes: 1) parsing from text form into \u201cinput document\u201d form, and 2) extracting data from the input document to build a native language structure.","6. Server invokes the handleCall method of oipsCallMgr to execute the instructions contained in the input document, to populate the output document (block ).","7. Server transmits the output document back to the client, for example as the reply to the HTTP POST (block ).","8. Client receives and parses the document into an input structure (using the markup library ), passing in the original requested markup style (block ).","9. Client traverses the document to determine the results of its request (block ).","B. Client Operation","The actions performed by the client during a document exchange will now be described in greater detail, with reference to . The actions performed by the client are as follows:","1. Create and initialize a \u201ccall\u201d object, specifying the markup style and error handling mode desired (block ).","2. For each operation to bundle into the call (blocks , , ):\n\n","3. Invoke the \u201cGenerate Request\u201d method of the call object (call oipcGenerateRequest) to obtain the markup-specific serialized representation of the request (block ).","4. Send the request message to the server using an appropriate transport engine and obtain the reply message (block ).","5. Invoke the \u201cSet Reply\u201d method of the call object (call oipcSetReply) to parse the reply message (block ).","6. Examine the \u201creply\u201d sub-structures as appropriate for each of the operations in the call (block ).","7. Clean-up the call object (block ).","C. Server Operation","As discussed above, OipsCallMgr is the top-level manager of the call dispatch process on the server side. OipsCallMgr has a \u201chandleCall\u201d method, which is invoked by an underlying server framework. The handleCall method performs the following process, illustrated in , when a new request message is received:","1. Construct a call context, OipsCallCtxt, passing in the request message and the markup style (block ).","2. If the error mode is \u201crollback\u201d (block ), initialize the transaction context (block ).","3. Call oipmNumEntries( ) on the OipsCallCtxt's request document to find out how many operations exist in the document (block ).","4. For each operation in the document (blocks \u2013):\n\n","5. If the error mode is \u201crollback\u201d (block ), call \u201ccommit( )\u201d on the transaction manager (see ) (block ).","The techniques described above may be implemented in one or more processing systems using software executed by one or more conventional processors, or using special-purpose hardwired circuitry, or a combination thereof.  is a high-level block diagram showing an example of a processing system that can be used to implement the described techniques. Note that a variety of specific architectures can be represented by .","The illustrated system includes one or more processors , i.e. a central processing unit (CPU), random access memory (RAM) , read-only memory (ROM) , and, which may be coupled to each other by a bus system . The processor(s)  may be, or may include, one or more programmable general-purpose or special-purpose microprocessors, digital signal processors (DSPs), programmable controllers, application specific integrated circuits (ASICs), programmable logic devices (PLDs), or a combination of such devices.","The bus system  includes one or more buses or other connections, which may be connected to each other through various bridges, controllers and\/or adapters, such as are well-known in the art. For example, the bus system  may include a \u201csystem bus\u201d, which may be connected through one or more adapters to one or more expansion buses, such as a Peripheral Component Interconnect (PCI) bus, HyperTransport or industry standard architecture (ISA) bus, small computer system interface (SCSI) bus, universal serial bus (USB), or Institute of Electrical and Electronics Engineers (IEEE) standard 1394 bus (sometimes referred to as \u201cFirewire\u201d).","Also coupled to the bus system  are one or more data communication devices , one or more mass storage devices , one or more input devices  and one or more output devices . The input devices  may include, for example, a keyboard and a pointing device. The output devices  may include, for example, a display device and an audio speaker. Of course, such devices are unnecessary on a server if the server is not intended to directly interface with a user or operator. It will be understood that the processing system may also include other conventional components that are not shown.","Each data communication device  is a device suitable for enabling the processing system to communicate with remote devices and may be, for example, a conventional modem, a Digital Subscriber Line (DSL) modem, a cable modem, an Ethernet adapter, an Integrated Services Digital Network (ISDN) adapter, a satellite transceiver, a wireless transceiver (e.g., in the case of a mobile device), or the like. Each mass storage device  may include any one or more storage media suitable for storing large volumes of data in a non-volatile manner, such as a magnetic disk or tape, magneto-optical (MO) storage device, or any of various forms of Digital Versatile Disk (DVD) or Compact Disk (CD) based storage, or a combination thereof.","The processes described above may be implemented using a combination of instructions and data  stored in a storage medium, which may be, for example, any of RAM , mass storage device  and\/or ROM , as shown, or on a remote processing system.","Thus, a method and apparatus for developing web services that employ a standard logical interface to support multiple markup implementations have been described. Although the present invention has been described with reference to specific exemplary embodiments, it will be recognized that the invention is not limited to the embodiments described, but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly, the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense."],"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION","I. Overview","II. WSDK Architecture","II. Network Environment","III. WSDK Server Framework (WSF)","IV. WSDK Client API Framework (WCAF)","V. WSDK Library","VI. OSD and OSDGen","VII. System Operation","VIII. Processing System Implementation"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["One or more embodiments of the present invention are illustrated by way of example and not limitation in the figures of the accompanying drawings, in which like references indicate similar elements and in which:",{"@attributes":{"id":"p-0022","num":"0040"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0041"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0042"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0043"},"figref":"FIG. 4A"},{"@attributes":{"id":"p-0026","num":"0044"},"figref":"FIG. 4B"},{"@attributes":{"id":"p-0027","num":"0045"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0028","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0029","num":"0047"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0030","num":"0048"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0031","num":"0049"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0032","num":"0050"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
