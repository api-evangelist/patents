---
title: Bulk import in a directory server
abstract: A method of bulk import in a directory server, including defining an extended operation on a server and a client, sending an extended operation request from the client to the server, performing the extended operation after receiving the extended operation request from the server, sending a response of the server back to the client specifying an object identifier of the extended operation and data specific to the extended operation; and performing a series of LDAP add operations framed by extended operations to import an entry into the directory server. A bulk import system for a directory server, including a processor, a memory, extended operations defined on a server and a client, and software instructions residing in memory executable on the processor for performing a series of LDAP add operations framed by extended operations to import an entry into the directory server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06877026&OS=06877026&RS=06877026
owner: Sun Microsystems, Inc.
number: 06877026
owner_city: Santa Clara
owner_country: US
publication_date: 20010608
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND OF THE INVENTION","SUMMARY OF INVENTION","DETAILED DESCRIPTION"],"p":["The most fundamental program resident on any computer is the operating system (OS). Various operating systems exist in the market place, including Solaris\u2122 from Sun Microsystems Inc., Palo Alto, Calif. (Sun Microsystems), MacOS from Apple Computer, Inc., Cupertino, Calif., Windows NT\u00ae, from Microsoft Corporation, Redmond, Wash., UNIX, and Linux. The combination of an OS and its underlying hardware is referred to herein as a \u201ctraditional platform\u201d. Prior to the popularity of the Internet, software developers wrote programs specifically designed for individual traditional platforms with a single set of system calls and, later, application program interfaces (APIs). Thus, a program written for one platform could not be run on another. However, the advent of the Internet made cross-platform compatibility a necessity and a broader definition of a platform has emerged. Today, the original definition of a traditional platform (OS\/hardware) dwells at the lower layers of what is commonly termed a \u201cstack,\u201d referring to the successive layers of software required to operate in the environment presented by the Internet and World Wide Web.","Prior art  illustrates a conceptual arrangement wherein a first computer () running the Solaris\u2122 platform and a second computer () running the Windows\u00ae NT platform are connected to a server () via the Internet (). A resource provider using the server () might be any type of business, governmental, or educational institution. The resource provider () needs to be able to provide its resources to both the user of the Solaris\u2122 platform and the user of the Windows\u00ae 98 platform, but does not have the luxury of being able to custom design its content for the individual traditional platforms.","Effective programming at the application level requires the platform concept to be extended all the way up the stack, including all the new elements introduced by the Internet. Such an extension allows application programmers to operate in a stable, consistent environment.","iPlanet\u2122 E-commerce Solutions, a Sun Microsystems|Netscape Alliance, has developed a net-enabling platform shown in  called the Internet Service Deployment Platform (ISDP) (). ISDP () gives businesses a very broad, evolving, and standards-based foundation upon which to build an e-enabled solution.","ISDP () incorporates all the elements of the Internet portion of the stack and joins the elements seamlessly with traditional platforms at the lower levels. ISDP () sits on top of traditional operating systems () and infrastructures (). This arrangement allows enterprises and service providers to deploy next generation platforms while preserving \u201clegacy-system\u201d investments, such as a mainframe computer or any other computer equipment that is selected to remain in use after new systems are installed.","ISDP () includes multiple, integrated layers of software that provide a full set of services supporting application development, e.g., business-to-business exchanges, communications and entertainment vehicles, and retail Web sites. In addition, ISDP () is a platform that employs open standards at every level of integration enabling customers to mix and match components. ISDP () components are designed to be integrated and optimized to reflect a specific business need. There is no requirement that all solutions within the ISDP () are employed, or any one or more is exclusively employed.","In a more detailed review of ISDP () shown in , the iPlanet\u2122 deployment platform consists of the several layers. Graphically, the uppermost layer of ISDP () starts below the Open Digital Marketplace\/Application strata ().","The uppermost layer of ISDP () is a Portal Services Layer () that provides the basic user point of contact, and is supported by integration solution modules such as knowledge management (), personalization (), presentation (), security (), and aggregation ().","Next, a layer of specialized Communication Services () handles functions such as unified messaging (), instant messaging (), web mail (), calendar scheduling (), and wireless access interfacing ().","A layer called Web, Application, and Integration Services () follows. This layer has different server types to handle the mechanics of user interactions, and includes application and Web servers. Specifically, iPlanet\u2122 offers the iPlanet\u2122 Application Server (), Web Server (), Process Manager (), Enterprise Application and Integration (EAI) (), and Integrated Development Environment (IDE) tools ().","Below the server strata, an additional layer called Unified User Management Services () is dedicated to issues surrounding management of user populations, including Directory Server (), Meta-directory (), delegated administration (), Public Key Infrastructure (PKI) (), and other administrative\/access policies (). The Unified User Management Services layer () provides a single solution to centrally manage user account information in extranet and e-commerce applications. The core of this layer is iPlanet\u2122 Directory Server (), a Lightweight Directory Access Protocol (LDAP)-based solution that can handle more than 5,000 queries per second.","iPlanet\u2122 Directory Server (iDS) provides a centralized directory service for an Intranet or extranet while integrating with existing systems. The term directory service refers to a collection of software, hardware, and processes that store information and make the information available to users. The directory service generally includes at least one instance of the iDS and one or more directory client programs. Client programs can access names, phone numbers, addresses, and other data stored in the directory.","One common directory service is a Domain Name System (DNS) server. The DNS server maps computer host names to Internet Protocol (IP) addresses. Thus, all of the computing resources (hosts) become clients of the DNS server. The mapping of host names allows users of the computing resources to easily locate computers on a network by remembering host names rather than numerical IP addresses. The DNS server only stores two types of information, but a typical directory service stores virtually unlimited types of information.","The iDS is a general-purpose directory that stores all information in a single, network-accessible repository. The iDS provides a standard protocol and application programming interface (API) to access the information contained by the iDS.","The iDS provides global directory services, meaning that information is provided to a wide variety of applications. Until recently, many applications came bundled with a proprietary database. While a proprietary database can be convenient if only one application is used, multiple databases become an administrative burden if the databases manage the same information. For example, in a network that supports three different proprietary e-mail systems where each system has a proprietary directory service, if a user changes passwords in one directory, the changes are not automatically replicated in the other directories. Managing multiple instances of the same information results in increased hardware and personnel costs.","The global directory service provides a single, centralized repository of directory information that any application can access. However, giving a wide variety of applications access to the directory requires a network-based means of communicating between the numerous applications and the single directory. The iDS uses LDAP to give applications access to the global directory service.","LDAP is the Internet standard for directory lookups, just as the Simple Mail Transfer Protocol (SMTP) is the Internet standard for delivering e-mail and the Hypertext Transfer Protocol (HTTP) is the Internet standard for delivering documents. Technically, LDAP is defined as an on-the-wire bit protocol (similar to HTTP) that runs over Transmission Control Protocol\/Internet Protocol (TCP\/IP). LDAP creates a standard way for applications to request and manage directory information.","X.500 and X.400 are the corresponding Open Systems Interconnect (OSI) standards. LDAP supports X.500 Directory Access Protocol (DAP) compatibilities and can easily be embedded in lightweight applications (both client and server) such as email, web browsers, and groupware. LDAP originally enabled lightweight clients to communicate with X.500 directories. LDAP offers several advantages over DAP, including that LDAP runs on TCP\/IP rather than the OSI stack, LDAP makes modest memory and CPU demands relative to DAP, and LDAP uses a lightweight string encoding to carry protocol data instead of the highly structured and costly X.500 data encodings.","An LDAP-compliant directory, such as the iDS, leverages a single, master directory that owns all user, group, and access control information. The directory is hierarchical, not relational, and is optimized for reading, reliability, and scalability. This directory becomes the specialized, central repository that contains information about objects and provides user, group, and access control information to all applications on the network. For example, the directory can be used to provide information technology managers with a list of all the hardware and software assets in a widely spanning enterprise. Most importantly, a directory server provides resources that all applications can use, and aids in the integration of these applications that have previously functioned as stand-alone systems. Instead of creating an account for each user in each system he or she needs to access, a single directory entry is created for the user in the LDAP directory.  shows a portion of a typical directory with different entries corresponding to real-world objects. The directory depicts an organizational entry () with the attribute type of domain component (dc), an organizational unit entry () with the attribute type of organizational unit (ou), a server application entry () with the attribute type of common name (cn), and a person entry () with the attribute type of user ID (uid). All entries are connected by the directory.","Understanding how LDAP works starts with a discussion of an LDAP protocol. The LDAP protocol is a message-oriented protocol. The client constructs an LDAP message containing a request and sends the message to the server. The server processes the request and sends a result or results back to the client as a series of LDAP messages. Referring to , when an LDAP client () searches the directory for a specific entry, the client () constructs an LDAP search request message and sends it the message to the LDAP server () (step ). The LDAP server () retrieves the entry from the database and sends the entry to the client () in an LDAP message (step ). A result code is also returned to the client () in a separate LDAP message (step ).","LDAP-compliant directory servers, like the iDS, have nine basic protocol operations, which can be divided into three categories. The first category is interrogation operations, which include search and compare operators. These interrogation operations allow questions to be asked of the directory. The LDAP search operation is used to search the directory for entries and retrieve individual directory entries. No separate LDAP read operation exists. The second category is update operations, which include add, delete, modify, and modify distinguished name (DN), i.e., rename, operators. A DN is a unique, unambiguous name of an entry in LDAP. These update operations allow the update of information in the directory. The third category is authentication and control operations, which include bind, unbind, and abandon operators.","The bind operator allows a client to identify itself to the directory by providing an identity and authentication credentials. The DN and a set of credentials are sent by the client to the directory. The server checks whether the credentials are correct for the given DN and, if the credentials are correct, notes that the client is authenticated as long as the connection remains open or until the client re-authenticates. The unbind operation allows a client to terminate a session. When the client issues an unbind operation, the server discards any authentication information associated with the client connection, terminates any outstanding LDAP operations, and disconnects from the client, thus closing the TCP connection. The abandon operation allows a client to indicate that the result of an operation previously submitted is no longer of interest. Upon receiving an abandon request, the server terminates processing of the operation that corresponds to the message ID.","In addition to the three main groups of operations, the LDAP protocol defines a framework for adding new operations to the protocol via LDAP extended operations. Extended operations allow the protocol to be extended in an orderly manner to meet new marketplace needs as they emerge.","A typical complete LDAP client\/server exchange might proceed as depicted in FIG. . First, the LDAP client () opens a TCP connection to the LDAP server () and submits the bind operation (step ). This bind operation includes the name of the directory entry that the client wants to authenticate as, along with the credentials to be used when authenticating. Credentials are often simple passwords, but they might also be digital certificates used to authenticate the client (). After the directory has verified the bind credentials, the directory returns a success result to the client () (step ). Then, the client () issues a search request (step ). The LDAP server () processes this request, which results in two matching entries (steps  and ). Next, the LDAP server () sends a result message (step ). The client () then issues the unbind request (step ), which indicates to the LDAP server () that the client () wants to disconnect. The LDAP server () obliges by closing the connection (step ).","By combining a number of these simple LDAP operations, directory-enabled clients can perform useful, complex tasks. For example, an electronic mail client can look up mail recipients in a directory, and thereby, help a user address an e-mail message.","The basic unit of information in the LDAP directory is an entry, a collection of information about an object. Entries are composed of a set of attributes, each of which describes one particular trait of an object. Attributes are composed of an attribute type (e.g., common name (cn), surname (sn), etc.) and one or more values.  shows an exemplary entry () showing attribute types () and values (). Attributes may have constraints that limit the type and length of data placed in attribute values (). A directory schema places restrictions on the attribute types () that must be, or are allowed to be, contained in the entry ().","In general, in one aspect, the present invention involves a method of bulk import in a directory server, comprising defining extended operations on a server and a client, importing an entry into the directory server through a series of LDAP add operations framed by extended operations, importing the entry remotely, importing state information within the entry, identifying extended operations by an object identifier, and suspending all operations except LDAP operations necessary for bulk import once bulk import commences. The extended operations specify an object identifier and data specific to extended operations.","In general, in one aspect, the present invention involves a method of bulk import in a directory server, comprising defining extended operations on a server and a client, importing an entry into the directory server through a series of LDAP add operations framed by extended operations, importing the entry remotely, importing state information within the entry, identifying extended operations by an object identifier, and suspending all operations except LDAP operations necessary for bulk import once bulk import commences. The extended operations specify an object identifier and data specific to extended operations.","In general, in one aspect, the present invention involves a method of bulk import in a directory server, comprising defining an extended operation on a server and a client, sending an extended operation request from the client to the server, performing the extended operation after receiving the extended operation request from the server, sending a response of the server back to the client specifying an object identifier of the extended operation and data specific to the extended operation, performing a series of LDAP add operations framed by extended operations to import an entry into the directory server; importing the entry remotely, importing state information within the entry, identifying extended operations by an object identifier, and suspending all operations except LDAP operations necessary for bulk import when bulk import commences.","In general, in one aspect, the present invention involves a bulk import system for a directory server, comprising a processor, a memory, extended operations defined on a server and a client, and software instructions residing in memory executable on the processor for performing a series of LDAP add operations framed by extended operations to import an entry into the directory server, a back-end portion for use by a fast replica initialization component, and a wire import component, state information contained within the entry, and an object identifier that identifies the extended operation.","In general, in one aspect, the present invention involves a bulk import apparatus for a directory server, comprising means for defining an extended operation on a server and a client, means for sending an extended operation request from the client to the server, means for performing the extended operation after receiving the extended operation request from the server, means for sending a response of the server back to the client specifying an object identifier of the extended operation and data specific to the extended operation, and means for performing a series of LDAP add operations framed by extended operations to import an entry into the directory server.","Other aspects and advantages of the invention will be apparent from the following description and the appended claims.","Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.","The invention described here may be implemented on virtually any type computer regardless of the traditional platform being used. For example, as shown in , a typical computer () has a processor (), associated storage element (), and numerous other elements and functionalities typical to today's computers (not shown). The computer () has associated therewith input means such as a keyboard () and a mouse (), although in a given accessible environment these input means may take other forms. The computer () is also associated with an output device such as a display (), which also may take a different form in a given accessible environment.","Directory servers have been used as a corporate infrastructure component for over a decade. The directory server concept has evolved substantially over this time. Today, the directory industry roughly comprises three major categories: Network Operating Systems (NOS) Directories, Meta-directories, and Application Directories.","NOS directories are the oldest of the three major categories. These directories serve as information storage systems for the NOS. NOS directories are designed to support print-sharing and file-sharing requirements for small to medium-sized networked workgroups as shown in FIG. . The network workgroup shows a first client (), a second client (), a third client (), and a shared printer () with an Ethernet connection () at one location. Using a router (), a connection is made to a remote network via a hub (). Connected to the hub () is a remote shared printer (), a first remote client (), a second remote client (), and a file server (). The entire networked workgroup is able to connect to a wide area network () or the Internet () via the router (). NOS directories are also tightly integrated with the operating system. Typical NOS directories include Microsoft\u00ae NT Domain Directory and Active Directory for Windows\u00ae 2000, Novell Directory Services (NDS), and Sun Microsystems Network Information Service (NIS) for UNIX.","Meta-directories are a result of the increase in the requirements of the directory server due to the increased usage of e-mail communication. Meta-directories use standard protocols and proprietary connections for synchronizing e-mail systems. Further, Meta-directories integrate key legacy data-systems into a standards-based directory for use by one or more corporate Intranet applications.","Application directories store user information, such as employee, partner, vendor, and customer information, in a single repository for access by multiple applications across multiple heterogeneous systems for up to millions of users. Application directories provide storage for user information, user authentication and access control, and provide the foundation for security for many Internet applications. The primary purpose of an application directory is to support Intranet and E-commerce applications. Application directories serve this role by having such features as Meta-directory capabilities, high-performance, scalability and reliability.","iPlanet\u2122 Directory Server (iDS) is an application directory and delivers user-management infrastructure for managing large volumes of user information for e-business applications and services. The iDS is a high performance, scalable LDAP Server with an on-disk database. The iDS is able to function on a variety of platforms, including Windows\u00ae NT, Windows\u00ae 2000 and a wide range of UNIX compliant platforms.","The present invention involves a Bulk Import feature of the iDS, which is implemented as plug-in to an iDS back-end. Rapidly importing large quantities of data is often necessary for the iDS. Using the Bulk Import feature, data can be imported to populate directories, merge directories, perform replication activities, etc. When the feature is activated, all LDAP operations within the iDS are suspended except the operations necessary to accomplish the bulk import. The Bulk Import feature of the iDS imports data using several different methods, including a Fast Replica Initialization method, a Wire Import method, and a Direct Transfer method.","The Fast Replica Initialization method remotely transfers an entry containing state information (i.e., present state or deleted state for each attribute and value of an entry) into the iDS. During the Fast Replica Initialization method, the LDAP client imports entries remotely through a series of LDAP add operations, framed by extended operations. Each extended operation is identified by an Object Identifier (OID). The OID is a unique series of integers separated by periods where each OID is specific to a particular operation. The Fast Replica Initialization method starts when the LDAP client sends an extended operation request to the server. Within the request, the LDAP client specifies the OID of the extended operation to be performed and data specific to the extended operation. Next, the server receives the request and performs the extended operation. The server then sends a response back to the client specifying the OID of the extended operation and any additional data. In order to use extended operations, the extended operations are defined on both the server and the client.","Referring to , the Fast Replica Initialization method starts when an LDAP client () issues an OID for the \u201cstart bulk import\u201d extended operation request to the LDAP server () and a suffix indicating the name of the back-end portion receiving the import, or an instance back-end name, as parameters (step ). Next, the LDAP server () processes the request by performing the \u201cstart bulk import\u201d extended operation. The LDAP server () then sends back to the LDAP client () a response containing the OID associated with the \u201cstart bulk import\u201d extended operation (step ). Next, the LDAP client () sends a plurality of LDAP add operation requests to the LDAP server () (step ). The LDAP server () performs the LDAP add operation and returns a success result of each add operation to the client, if applicable (step ). The LDAP client () then issues a request with the OID for the \u201cbulk import done\u201d extended operation (step ), which indicates to the LDAP server () that the LDAP client () intends to stop the Fast Replica Initialization method. The LDAP server () performs the \u201cbulk import done\u201d extended operation and returns a result to the client containing the OID of the \u201cbulk import done\u201d extended operation and a message that indicating that the import has completed successfully (step ).","Generally, the completion of the Fast Replica Initialization method is signified by the receipt of the \u201cbulk import done\u201d extended operation by the LDAP server. Alternatively, in the case of an error in communication such as a dropped connection before normal LDAP operations can resume within the iDS, an abort of the Fast Replica Initialization method signifies completion.","As shown in , the Bulk Import feature (), including Fast Replica Initialization method and the Wire Import method includes a front-end portion () and a back-end portion () with a connection whereby the LDAP protocol () is carried between the front-end portion () and the back-end portion ().","Referring to , the front-end portion is able to track the status of the Bulk Import by marking a connection flag for a given connection. If the connection flag is not set, the Bulk Import feature is not active and cannot be started (step ). If the connection flag is set (step ), only the LDAP add operation pertaining to the Bulk Import feature and \u201cbulk import done\u201d extended operations are allowed (step ). If an operation other than the necessary LDAP add operations or \u201cbulk import done\u201d operation is requested, the operation is suspended until the bulk import is completed (step ). Next, the front-end portion calls a SLAPI_BACKEND function (a member of a connection data structure that is responsible for maintaining connection information) with a pointer indicating the specific back-end that is performing the bulk import (step ). The front-end portion then performs schema checking (step ) to ensure all new or modified directory entries conform to schema rules. If the schema rules are violated, the directory rejects the requested change and a constraint violation error is returned to the LDAP client (step ). If the schema rules are not violated, the front-end portion calls a back-end function to perform the corresponding operation, which is either an LDAP add operation (step ) or the \u201cBulk Import Done\u201d extended operation (step ).","As shown in , the database plug-in for the back-end portion of the directory server supports the Bulk Import if a back-end fast replica function pointer is defined (step ). However, if the back-end fast replica function is left NULL (step ), then the database plug-in for the back-end portion does not support bulk import and the front-end portion returns an error to any LDAP clients attempting to access the back-end portion (step ). If the back-end fast replica function is not NULL (step ), then the back-end fast replica function is called, the previous contents of the back-end portion are lost, and several parameters are sent to the back-end portion (step ). The parameters include: a name of a back-end server receiving the imported data, a specific connection pointer associated with this bulk import containing the identity of the user making the connection), the unique ID of a directory entry to add (as with normal adds, this entry becomes the property of the back-end), and a state indicating that the bulk import is underway. Once the bulk import has begun, the call to the back-end fast replica function is repeated for each LDAP add operation (step ) with the same parameters listed above.","If the back-end fast replica function performs without error (step ), the back-end portion saves any necessary state information in an extension on the connection (step ). If the back-end fast replica function encounters errors (step ), the back-end portion returns an error message to the LDAP client (step ).","Alternatively, the Fast Replica Initialization method can be aborted by dropping the connection. If the connection is dropped (step ), the connection extension's destructor is called to destroy the connection and terminate the input (step ). Next, the iDS is either returned to the condition that existed prior to commencing the Fast Replica Initialization method or the iDS goes offline (step ).","If the Fast Replica Initialization method completes (step ), the back-end fast replica function is called again in the same manner as an LDAP add operation (step ), however the state is changed to indicate that the bulk import is complete. Then, the back-end portion performs cleanup activities (step ), which continues until the directory server is ready to resume normal operation (step ).","The Wire Import method features a remote process that transfers an entry containing no state information. The Wire Import method imports an entry to the directory server through a series of LDAP add operations. When processing the LDAP add operation, the front-end portion of the Bulk Import feature calls a corresponding back-end portion to add the entry to the directory server. The Wire Import method performs the import of the entry in the same manner as the Fast Replica Initialization method except that the front-end portion does not use extended operations. The extended operations are not necessary because the entry does not contain state information. The Wire Import method uses the same back-end procedure as the Fast Replica Initialization method described above and shown in  except that there is no state information to save in step .","LDAP Data Interchange Format (LDIF) is used as a way to describe a directory and directory entries in a standard text-based format. LDIF allows a user to export directory data and import the data into another directory server, even if the servers use different internal database formats. There are two different types of LDIF files. The first type describes a set of directory entries, and the second describes changes to be applied to directory entries. The second type of LDIF file includes a series of LDIF update statements for describing the changes. With the Direct Transfer method, the LDIF file is physically transferred in a LDIF formatted file directly to the iDS using an administration console feature of the iDS. The Direct Transfer method does not use a connection over the wire.","Advantages of the present invention may include one or more of the following. The Bulk Import feature of the iDS provides increased reliability and performance of the directory service. Rapid importation into the directory service of entries that contain state information. Data integrity can be ensured by unique Ids. Also, the iDS is able to properly track imported data.","While the invention has been described with respect to a limited number of embodiments, those skilled in the art, having benefit of this disclosure, will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly, the scope of the invention should be limited only by the attached claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":[{"@attributes":{"id":"P-00034","num":"00034"},"figref":"FIG. 1"},{"@attributes":{"id":"P-00035","num":"00035"},"figref":"FIG. 2"},{"@attributes":{"id":"P-00036","num":"00036"},"figref":"FIG. 3"},{"@attributes":{"id":"P-00037","num":"00037"},"figref":"FIG. 4"},{"@attributes":{"id":"P-00038","num":"00038"},"figref":"FIG. 5"},{"@attributes":{"id":"P-00039","num":"00039"},"figref":"FIG. 6"},{"@attributes":{"id":"P-00040","num":"00040"},"figref":"FIG. 7"},{"@attributes":{"id":"P-00041","num":"00041"},"figref":"FIG. 8"},{"@attributes":{"id":"P-00042","num":"00042"},"figref":"FIG. 9"},{"@attributes":{"id":"P-00043","num":"00043"},"figref":"FIG. 10"},{"@attributes":{"id":"P-00044","num":"00044"},"figref":"FIG. 11"},{"@attributes":{"id":"P-00045","num":"00045"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
