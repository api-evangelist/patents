---
title: Execution of unverified programs in a wireless, device operating environment
abstract: A computer device having wireless communication capability and a computer platform with a resident application environment for selectively downloading applications to the platform across the wireless network with a predefined security protocol for downloading and executing applications at the platform, such as verifying the presence of a certificate. The download manager is resident on the computer platform and allows download, storage, and execution of applications that do not otherwise comply with the security protocol of the resident application environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549166&OS=08549166&RS=08549166
owner: QUALCOMM Incorporated
number: 08549166
owner_city: San Diego
owner_country: US
publication_date: 20040301
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["The present invention generally relates to communication between computer devices across wireless computer networks. More particularly, the invention relates to the operating system and environment of the computer platform of a wireless device, and the ability to download and execute programs that are not verified (or certified) to properly operate in the wireless device environment.","Computer devices that are networked to other computer devices, either through a direct connection or in a wireless network, have the ability to download programs from the other computer devices, and store and execute the downloaded programs. In particular, wireless communication devices, such as cellular phones, PDAs, mini-laptops, and advanced pagers, can include a computer platform which allows the download and execution of applications. However, these devices typically have limited storage capability and their operating environment is greatly curtailed from a full operating system common to desktop personal computers (PCs) and servers.","One example of a highly optimized Java runtime environment is the Java 2 Platform, Micro Edition (J2ME) which is intended to operate on devices with limited computing capabilities, such wireless communication devices. In J2ME, a \u201cmobile information device profile\u201d (MIDP), combined with the \u201cconnected limited device configuration\u201d (CLDC), is the Java runtime environment providing a core application functionality required at the wireless computer device, such as the user interface (UI), network connectivity, local data storage, and application lifecycle management. In J2ME, there are several standard application-programming interfaces (APIs) and other tools, such as the \u201cJava Virtual Machine\u201d (JVM).","The JVM interprets compiled Java binary code (often called \u201cbytecode\u201d) for the hardware platform so that the device can perform Java instructions. One benefit of the use of Java is that it allows application programs to be constructed that can execute on any computer platform without having to be rewritten or recompiled by the programmer. The JVM permits this because it tracks the specific instruction lengths and other attributes of the computer platform, and defines an abstract machine or processor, in essence, an abstract instruction set, set of registers, a stack, a heap, and a method area. Thus, once a JVM has been implemented for a given computer platform, any Java program can run on that platform. A JVM can either interpret the bytecode one instruction at a time (thus mapping the instruction to a current processor instruction) or the bytecode can be compiled further for the real processor using what is called a \u201cjust-in-time compiler.\u201d","The common types of programs downloaded by the Java-based or compatible computer devices are \u201capplets.\u201d An applet is a small program that is typically sent along with a Web page to a user, and can perform interactive animations, immediate calculations, or other simple tasks without having to send a user request back to the server. Other applets, called \u201cMIDlets\u201d are applications designed to run on wireless Java enabled devices and are provided across the wireless network for download to the wireless computer device.","The downloaded programs however must be compatible with the software environment of the device intending to execute the program or else errors can occur. To insure that downloaded applications can be executed in the resident environment, a security protocol is often used such as verifying the presence of digital certificates within the downloaded software application. For example, Verisign\u00ae will issue a \u201cClass 3 certificate\u201d for inclusion within the program to an organization after authentication that an organization exists, has a name, and is entitled to use that name. And if the resident application environment is designed to only work with applications that have been signed with a specific certificate, or otherwise distributed in a certain manner, the computer device will not be able to obtain applications that do not meet the predetermined security protocol. In most instances, the resident application environment will refuse to download the application, much less attempt to execute unverified application. However, many unverified applications pose no risk to the resident application environment and the user of the computer device has no ability to obtain the otherwise safe, unverified application due to the safety protocol.","Accordingly, it would be advantageous to provide a system for a wireless computer device, such as a cellular telephone, PDA, or other device, to download, store and execute programs that are not verified for execution in the operating system or application environment resident on the wireless device. Such system should allow the use of the unverified program with minimal risk of adversely affecting the resident application environment or device operating system. It is thus to the provision of such a system and method of enabling a wireless device to download and execute unverified and non-security protocol complying applications that the present invention is primarily directed.","The present invention is a system and method at computer device having a wireless communication capability to download and execute programs that do not meet the proper security protocol, such as certificate verification, to properly operate in the wireless device application environment. The wireless computer device includes a wireless communication portal for selectively sending and receiving data across a wireless network, a computer platform including a resident application environment and selectively downloading applications to the platform through the portal, and a data store that is in communication with the computer platform and selectively sends data to and receives data from the computer platform. The resident application environment utilizes a predefined security protocol for at least executing a downloaded application and a download manager is resident on the computer platform that at least selectively downloads applications that do not comply with the predefined security protocol. The download manager can also execute and store the unverified application, and can use the existing interfaces and methods of the resident application environment to handle the unverified application, such as the user interface or storage directory, or can use its own interface and method, or both.","The method for selectively downloading through a wireless connection to a computer device an application that does not comply with a predefined security protocol for use at that computer device includes the steps of downloading to the computer platform an application that does not comply with the predefined security protocol and the executing the application at the computer device with the download manager. The method can also include the step of storing the downloaded unverified application for later execution. Further, the step of executing the downloaded application with the download manager can occur either inside, outside, or partially inside of the resident application environment.","It is therefore an object of the system and method to provide a wireless computer device, such as a cellular telephone or PDA, that can download, store and execute programs that are not verified or do not otherwise meet the safety protocol for execution in the operating system or application environment resident on the wireless device. A download manager that can exist as part of or separate from the resident application environment manages the use of the unverified program with minimal risk of adversely affecting the resident application environment. The download manager can be easily implemented utilizing the tools of an existing resident application environment, selectively use the other tools of the environment, and can present its own interface and perform separate file management of unverified applications.","Other objects, advantages, and features of the present invention will become apparent after review of the hereinafter set forth Brief Description of the Drawings, Detailed Description of the Invention, and the Claims.","With reference to the figures in which like numerals represent like elements throughout,  illustrates block diagram of a computer architecture on a wireless device including a resident download manager for managing applications that do not comply with the security protocol of the resident application environment. The wireless device, such as cellular telephone , has a computer platform  that can receive and execute software applications transmitted from the application download server  (). The computer platform  includes, among other components, an application-specific integrated circuit (\u201cASIC\u201d) , or other processor, microprocessor, logic circuit, programmable gate array, or other data processing device. The ASIC  is installed at the time of manufacture of the wireless device and is not normally upgradeable. The ASIC  or other processor executes an application programming interface (\u201cAPI\u201d) layer , which includes the resident application environment, and can include the operating system loaded on the ASIC . The resident application environment interfaces with any resident programs in the memory  of the wireless device. An example of a resident application environment is the \u201cbinary runtime environment for wireless\u201d (BREW) software developed by Qualcomm\u00ae for wireless device platforms. There is also a download manager  for handling the download and\/or execution of unverified programs as is further described herein.","As shown here, the wireless device can be a cellular telephone , with a graphics display, but can also be any wireless device with a computer platform as known in the art, such as a personal digital assistant (PDA), a pager with a graphics display, or even a separate computer platform that has a wireless communication portal, and may otherwise have a wired connection to a network or the Internet. Further, the memory  can be comprised of read-only or random-access memory (RAM and ROM), EPROM, EEPROM, flash cards, or any memory common to computer platforms. The computer platform  can also include a local database  for storage of software applications not actively used in memory , such as the software applications downloaded from the third party application download server  (). The local database  is typically comprised of one or more flash memory cells, but can be any secondary or tertiary storage device as known in the art, such as magnetic media, EPROM, EEPROM, optical media, tape, or soft or hard disk.","The wireless device, such as cellular telephone , has wireless communication capability through a wireless communication portal or communication interface  that selectively sends and receives data across a wireless network . The computer platform  resident application environment selectively downloads applications to the platform  through the portal (interface ) and utilizes a predefined security protocol for at least downloading an application, such as the presence of a digital certificate, pubic key certificate, or other security protocol. A data store, such as local database  or in some instances memory , are in data communication with the computer platform . The download manager  is resident on the computer platform  at least selectively downloads applications that do not comply with the predefined security protocol to the computer platform , and preferably manages the handling of the unverified application through download, storage, and execution, as is further described herein.","Cellular telephones and telecommunication devices, such as cellular telephone , are being manufactured with increased computing capabilities and are becoming tantamount to personal computers and hand-held personal digital assistants (\u201cPDAs\u201d). These \u201csmart\u201d cellular telephones allow software developers to create software applications that are downloadable and executable on the processor, such as ASIC , of the cellular device . The wireless device, such as cellular telephone , can download many types of applications, such as web pages, applets, MIDlets, games and stock monitors, or simply data such as news and sports-related data. The downloaded data or executable applications can be immediately displayed on a display of the device  or stored in the local database  when not in use. The software applications can be treated as a regular software application resident on the wireless device , and the user can selectively upload stored resident applications from the local database  to memory  for execution on the API , i.e. within the resident application environment. However, if the application sought downloaded does not comply with a predefined security protocol, such as the verification of a certificate present in the download to insure the author of the download, the resident application environment will refuse to download the unverifiable application. The end-user of the wireless device  can also selectively attempt download non-security protocol complying applications. As a result, end-users of cellular telephones  can customize their telephones with programs, such as games, printed media, stock updates, news, or any other type of information or program available for download from application download servers through the wireless network .",{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 2","b":["25","12","25","14","26","28"]},"The server-side components communicate with a carrier network  through a data link, such as the Internet, a secure LAN, WAN, or other network. The carrier network  controls messages (generally in the form of data packets) sent to a messaging service controller (\u201cMSC\u201d) . The carrier network  communicates with the MSC  by a network, the Internet and\/or POTS (\u201cplain ordinary telephone system\u201d). Typically, the network or Internet connection between the carrier network  and the MSC  transfers data, and the POTS transfers voice information. The MSC  is connected to multiple base stations (\u201cBTS\u201d) . In a similar manner to the carrier network, the MSC  is typically connected to the BTS  by both the network and\/or Internet for data transfer and POTS for voice information. The BTS  ultimately broadcasts messages wirelessly to the wireless devices, such as cellular telephone , by short messaging service (\u201cSMS\u201d), or other over-the-air methods known in the art.","In developing wireless networks , often called \u201c3G\u201d networks, if the end-user of the wireless device  desires to download and use a software application, the end-user will attempt to connect to an application download server , which is typically either the carrier's server or a third party application download server , through bridging a communication connection to the wireless network , and attempt to access and download the desired software application. Once the wireless device contacts the application download server , an initial contact is made and the application download server  can determine what applications and data are available to that wireless device  and send the appropriate information so that the end-user at the wireless device  can learn of the available applications and services.","A third party, such as an independent software vendor or developer, either through the third parties own computer devices or through a network carrier , to provide software applications as downloadable to the wireless device , which may or may not have the requisite security protocol to work on the platform  of the device. For example, the resident application environment may require the inclusion of a Verisign\u00ae digital certificate in the download in order to download the application. To allow the download and\/or execution of the unverified\/non-complying application, the present wireless device platform  includes a download manager  that can handle the unverified application partially or fully independently of the resident application environment.","One method of creating the download manager , particularly in BREW environment is to create a \u201cJava Management Console\u201d (JMC) using a standard \u201cJava Virtual Machine\u201d (JVM) extension. The JMC provides management functions for downloading an unverified application, such as applets and MIDlets, from the carrier network  or third party application download servers  through the existing API . The JMC stores unverified application in the resident BREW director and provides an end-user interface for selecting, launching, deleting, and saving the history of the unverified application. The JMC can be extended to support application specific auto-install or remove functionality, as well as support an alternative security protocol for the unverified application. Thus, in this embodiment, the download manager is a standard BREW application between the BREW JVM extension and the unverified executable content to perform all management and customer interface functions. Other embodiments of the download manager  can occur in other device operating systems and resident application environments.","The download manager  can exist entirely within resident application environment and use an existing application download interface, or can use its own interfaces to handle the unverified applications. The download manger  can be resident on the computer platform  at the time of manufacture, or can be downloaded thereto in operation of the wireless device. In one embodiment, the download manager  can be resident at the third party application download server  and transmitted to the computer platform  when the request of the unverified application is made.","The download manager  can manage execution, storage, installation\/removal, or otherwise completely handle the downloaded application that does not comply with the predefined security protocol. The predefined security protocol can be verifying the origination of the application, the presence of a certificate within the downloaded application, or any other security protocol known in the art of network security. Further, the download manager can segregate and treat unverified downloaded applications in a different manner dependent upon criteria such as risk to the stability of the device OS, cost of download, nature of the end-user, or other predetermined criteria.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":["FIG. 3","FIG. 1"],"b":["10","26","40","10","26","42","46","26","46","44","52","50","24","48"]},"The user thus browses for and purchases an application from the application download server  through the WAP Gateway  and WAP browser . The application\/MIDlet is then sent to the Java Application Manager , either directly from the application download server  or to the WAP Browser  and then to the Java Application manager . At the AMS , at least the downloaded application\/MIDlet is unpackaged and installed, and alternately, other functionality can be implemented within the AMS , especially in regard to the Java activation framework for a Java MIDlet, such as requesting a Java application descriptor (JAD) file, processing a JAD, retrieving a Java archive file (JAR) locator, and\/or requesting a JAR file. Once the application\/MIDlet is ready for use, it is sent to the appropriate tool of the JVM for execution, as shown at block .",{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 4","b":["10","16","60","62","64"]},"If the application sought downloaded at decision  does meet the security protocol (is verifiable), then the process forwards to make a determination as to whether the execution of the application has been requested, as shown at decision . Otherwise, if the application sought downloaded has not been verified or does not meet the security protocol for download and\/or handling by the resident application environment at decision , then the download manager  is invoked as shown at step . In this embodiment, the unverified application is downloaded and stored as controlled by the download manager , as shown at step . Then, and after the download of a verified, secure application at decision , a decision is then made as to whether the execution of the downloaded application as shown at decision . If execution is not requested at decision , then the process ends.","Otherwise, if execution of the downloaded application is requested at decision , then a determination is made as to whether the application sought executed is an unverified application or does not comply with the security protocol, as shown at decision . If the application is not an unverified application at decision , then the application is executed in the resident application environment, as shown at step , such as on the standard OS of the device platform. If the application sought executed is an unverified application at decision , the download manager is invoked, as shown at step , and then executes the unverified application as shown at step . After the execution, the download\/execution process terminates. As is seen in , an unverified application can be downloaded with or without the download manager , and then the download manager  can be invoked at the time of execution. The downloaded application can be immediately executed, or stored and then later executed on the download manager .","It can thus be seen that the wireless device  therefore provides a method for of selectively downloading through a wireless connection to a computer device, such as wireless device , an application that does not comply with a predefined security protocol for use at that computer device  including the steps of downloading to a computer platform  of the computer device  an application that does not comply with a predefined security protocol for use at that computer device , the computer platform  including a resident application environment for downloading and executing applications utilizing a predefined security protocol, the downloading occurring through the use of a download manager  resident on the computer platform , and the executing the application at the computer device  with the download manager . If the download manager  exists within resident application environment, the step of downloading can use an existing application download interface.","The method can further include the steps of storing, with the download manager , the unverified downloaded, and then executing the stored application with the download manager . The predefined security protocol can be verification of the nature of the downloaded application, such as through location of the presence of a certificate within the downloaded application. Further, the method can include the step of downloading the download manager  to the computer platform  of the computer device  after a request to download an unverified application has been made, and prior to the step of downloading the requested application.","The method accordingly can be implemented by the execution of a program held computer readable medium, such as the memory  of the computer platform . The instructions can reside in various types of signal-bearing or data storage primary, secondary, or tertiary media. The media may comprise, for example, RAM (not shown) accessible by, or residing within, the wireless device. Whether contained in RAM, a diskette, or other secondary storage media, the instructions may be stored on a variety of machine-readable data storage media, such as DASD storage (e.g., a conventional \u201chard drive\u201d or a RAID array), magnetic tape, electronic read-only memory (e.g., ROM, EPROM, or EEPROM), flash memory cards, an optical storage device (e.g. CD-ROM, WORM, DVD, digital optical tape), paper \u201cpunch\u201d cards, or other suitable data storage media including digital and analog transmission media.","While the foregoing disclosure shows illustrative embodiments of the invention, it should be noted that various changes and modifications could be made herein without departing from the scope of the invention as defined by the appended claims. Furthermore, although elements of the invention may be described or claimed in the singular, the plural is contemplated unless limitation to the singular is explicitly stated."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
