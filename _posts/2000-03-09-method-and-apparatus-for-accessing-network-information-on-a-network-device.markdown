---
title: Method and apparatus for accessing network information on a network device
abstract: A computer-implemented method and system of distributing management of network resources on a network to network devices is provided. During execution, the system receives a request on a network device to execute a task that performs a set of operations related to managing the network, receives an application over the network wherein the application includes operations for performing the task, processes operations on the network device that requests network parameters from a remote network device, transmits the request for the network parameter over the network to the remote network, and receives the requested network parameter over the network from the remote network device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07433941&OS=07433941&RS=07433941
owner: Nortel Networks Limited
number: 07433941
owner_city: St. Laurent, Quebec
owner_country: CA
publication_date: 20000309
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"p":["This application claims priority from U.S. Provisional Application No. 60\/124,047, filed Mar. 12, 1999.","This invention generally relates to network management and, more particularly, to a method and apparatus for accessing network information on a network of intelligent network devices.","Computer networks are becoming increasingly complex and difficult to manage. This is driven in part by the ever-increasing variety of network devices, computers, and software being combined together to integrate large enterprise-based intranets with the Internet. Network management tools have been produced to monitor these complex combinations of hardware and software and help troubleshoot network failures when they occurred.","Traditional network management tools use a protocol called simple network management protocol (SNMP) to monitor network devices such as routers, switches, hubs, remote access devices, or even computers in a network. The protocol used to interface with SNMP includes rudimentary commands to operate on data such as to \u201cget\u201d a variable, \u201cset\u201d a variable, or \u201ctest\u201d a variable. These commands typically are deployed from a central network management server (NMS) within the network to a network device connected to the network. The network device processes one or more of these rudimentary commands and then returns the results to the NMS for further processing and analysis. In these systems, little or no processing or analysis is performed by the network devices. Instead, the NMS is saddled with the responsibility of receiving the results as well as performing the complex analyses associated with monitoring network operation and performance.","In one aspect of the present invention, a system for managing network resources includes a network device operatively connected to the network having a processor capable of downloading a task over the network, executing the task, and providing the results from the task. In addition, a network management server requests that the network device execute a task related to the management of resources associated with the network and receives the results from the task for use in management of the network.","In another aspect of the invention, a computer-implemented method of distributing management of network resources on a network to network devices includes receiving a request on a network device to execute a task that performs a set of operations related to managing the network, receiving an application over the network wherein the application includes operations for performing the task, processing operations on the network device that requests network parameters from a remote network device, transmitting the request for the network parameter over the network to the remote network, and receiving the requested network parameter over the network from the remote network device.","These network management systems and methods have one or more of the following advantages. For example, the network management system (NMS) can operate more efficiently even on complex networks with high amounts of network traffic. Instead of performing tasks centrally, the tasks are distributed to many different network nodes connected to the network. This reduces the amount of status information sent between the network nodes and the NMS because the processing is done locally on each network node. Each network device sends the results of a specific task back to the NMS rather than transmitting numerous status packets. Accordingly, this reduces the bandwidth required for most network management tasks and increases response time even during a peak traffic period on the network.","For example, a traditional SNMP network command requires at least two network transmissions to gather each network parameter. A first transmission carries a request from the central NMS over the network to the network node with the requested network parameter. The second transmission carries a reply having the network parameters or status over the network from the network node back to the central NMS. Using the systems and methods described herein, numerous commands can be executed on a network node before a response is supplied to the NMS.","The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the invention will be apparent from the description and drawings, and from the claims.","Systems and methods described herein are used to distribute network management tasks to one or more network devices connected to a network. A network application distributed to each network device collects relevant network parameters from each network device and transmits the results back to a central NMS or to other network devices on the network for further analysis. Each network application can be programmed to perform a series of complex operations using an object-oriented programming language such as Java. The network application interfaces on each network device provides an application programming interface (API) compatible with the particular programming language. This API is compatible with legacy network management protocols such as simple network management protocol (SNMP) and, therefore, can be adapted to work with a wide range of legacy compatible devices.","Tools used to generate the API consistent with the present invention include a management information database (MIB) to object-oriented software compiler and a MIB map. The compiler uses existing MIB information to generate an object oriented MIB interface to the underlying MIB information collected on each network device. The compiler also generates a MIB map to determine if access to the MIB information is made directly to the storage location of the MIB database or through a network address and network management protocol associated with the network device.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 1","b":["100","102","104","106","112","102","104","106","112"]},"Network device  facilitates the transfer of applications from an application server  to the other network devices and nodes on the network. Server  provides applications that can execute directly on network devices - and target network device . The variety of network applications available for downloading from application server  increases the network management capabilities of each network device. For example, application server  may provide an application to a network device that enables the device to filter network traffic containing data packets generated from activities not critical to business, such as browsing the Internet. The resulting increase in bandwidth can be used for more critical business needs.","Network device  enables authentication server  to authenticate downloading of applications from application server  to other network devices within communication system . Authentication server  can identify a network device on the network and determine if that device should or should not receive a particular application. For example, authentication server  may authenticate a particular application and determine if the application should be downloaded to a network device in communication system . This feature could be used to prevent introduction of viruses or other unauthorized software onto the network. Additionally, authentication server  may also determine if a network device within communication system  has proper authorization to download an application.","Network device  facilitates communication between a network monitor server (NMS)  and other network nodes and processes within communication system . Traditionally, an NMS will send network commands to the network devices and, in return, receive input from the network devices, including network parameters. This traditional approach to network management requires NMS  to perform a majority of the processing for network management. In contrast, system  distributes processing to the network devices that are in communication with the network. This reduces the processing load and frees up NMS  so that it can process more critical tasks. For example, network device  may monitor network traffic between it and network  to reduce the processing load on NMS server . In such a case, NMS  might receive a notification from network device  when device  detects that the network bandwidth has exceeded a predetermined threshold.","Target network device  depicts an exemplary network device monitored by either a user or central NMS . The client node user interface  allows the user to perform network management tasks that execute directly on target network device . NMS  is used to monitor larger and more frequent management tasks dealing with groups of network devices or the overall network. For example, NMS server  can execute software agents on different network devices and monitor overall traffic being processed by a group of network devices connected to the network.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 2","b":["112","112","202","204","206","208","210","211"]},"Network communication port  is compatible with a variety of physical and logical network protocols including, for example, TCP\/IP and Novell NetWare. A loop back address  enables network management applications executing on target device  to access local storage areas and resources using the local network protocol stack and local network parameters rather than accessing the storage area on the network device directly. By using the network protocol stack, network applications can access network parameters on a local device and a remote device in a uniform manner. For example, a network management application executing on target network device  can access network parameters associated with a remote network device or a local network device through network communication port  by specifying either the network address of the remote network device or the local device respectively. Specifically, the network management application executing on the local device can access network parameters of the local network device by specifying loop back address . In effect, loop back address  provides indirect access to the network parameters of the local device through the network protocol stack.","Secondary storage  may include a disk drive, CD-ROM, or any other storage device used by target network device . Input-output ports  include physical connections for terminals, printers, pointing devices, keyboards, or any other device useful in operating target network device .","During execution, memory  includes a real time operating system (RTOS) , an annotation layer , a native variable interface , a simple network management protocol (SNMP) stack , a virtual machine runtime environment , a management information database (MIB) map , a MIB compiler , an object-oriented MIB interface , a mobile agent module , and a client application . On target network device , RTOS  provides improved performance by executing instructions as they arrive without interruption or delay. A general-purpose operating system may be used in lieu of RTOS  but may reduce performance of target network device  as processes are preempted and swapped out of memory.","Annotation layer  provides an interface between applications accessing the MIB database associated with a network device and the actual storage locations for the MIB database on the network device. This layer is necessary because different hardware devices tend to store the underlying MIB database information in different locations on the network device. For example, one network device may store port speed address in a central lookup table of RAM while other network devices may store the port speed addresses for each port on separate ASIC chips associated with each port. Using annotation layer  an application can request MIB database information without specifying the actual location of data on the network device.","SNMP stack  implements a network management protocol used by different networks to exchange network management information while monitoring network communication. Typically, SNMP stack  exchanges network information with other nodes on the network through messages called protocol data units (PDUs). The PDUs contain variables with titles and values and are generally capable of \u201cgetting\u201d network parameters, \u201csetting\u201d network parameters, or \u201ctesting\u201d for network events occurring on network devices. For example, SNMP stack  may transmits a PDU to a remote network device to determine if the remote device has a terminal attached to it. If the terminal is attached to the remote network device, SNMP stack  will receive back a PDU containing information that may identify and describe the specific terminal. Each PDU typically includes a variable title, the data-type of the variable (e.g., integer, string etc.), whether the variable is read-only or read-write, and a value of the variable.","Native variable interface  provides direct access to underlying SNMP data stored on a network device. Each device on the network requires a different native variable interface  customized to the specific features of the device hardware and software. As new network devices are produced or added to a network, a new interface  is customized to the specific hardware and software requirements. While this customization process increases the research and development costs, it also increases the efficiency associated with retrieving network parameters from a network device because the information is accessed directly.","Alternatively, network parameters may also be retrieved using SNMP stack  and loopback address . This eliminates the need for native variable interface  and reduces the corresponding costs associated with developing the native variable interface. In lieu of accessing the network parameters directly, a network management application submits requests to loopback address  of a network device. Within the requests are SNMP compatible commands formulated to retrieve the desired network parameters. Local processes on the network device monitoring loopback address  pass the request to SNMP stack  which, in turn, accesses the network parameters as requested. The same local processes then return the resulting network parameters back through SNMP stack  and through loopback address  and back to the network management application requesting the information.","Virtual machine runtime environment  processes object-oriented instructions for execution on processor , and may include a virtual machine (VM) and a corresponding development kit (DK) having object-oriented class libraries. The VM simulates a processor and executes on many different hardware platforms. Instructions from a variety of applications are interpreted by the VM and executed on processor . One virtual machine run time environment  includes a Java virtual machine (JVM) and the Java foundation classes. The Java virtual machine is one type of virtual machine that promotes platform independent computing using the Java programming language.","In operation, MIB map  facilitates converting object-oriented requests for MIB information into requests for network parameters either through SNMP stack  or native variable interface . MIB map  determines how network parameters in a MIB should be accessed for different types of network devices. For example, MIB map  can be implemented with a table that converts requests for network parameters through native variable interface  or SNMP stack  into a series of object-oriented method calls. The map includes a database listing the network parameters related to the management of a network device and a set of object-oriented methods for manipulating the network parameters. MIB map  maps requests for network parameters from a set of operations to access and manipulate the network parameters to a database having the actual network parameter information. Each request for a network parameter may invoke one or more object-oriented methods depending on the complexity associated with retrieving and processing the data.","If a new type of network device is added to the network, MIB map  will initially access the network parameters using SNMP stack  and loopback address  in the manner previously discussed. This allows a network management device to access network parameters on an SNMP compatible network device using existing SNMP features built into the network device. Once a native variable interface  is developed for the network device, MIB map  can be reconfigured to access network parameters through the faster and more efficient native variable interface .","Object-oriented MIB interface  provides an interface for applications to access MIB information using object-oriented classes and methods. Initially, a MIB compiler , discussed in further detail below, receives a list of MIB variables and generates the classes and method found in the object-oriented MIB interface . At least two types of variables\u2014scalar variables and table variables\u2014are accessible through object-oriented MIB interface . A scalar variable is a single variable with an identifier that identifies the variable and a value associated with the variable. If an application requests a scalar variable, object oriented MIB interface  returns an object-oriented instance of that scalar variable. For example, a network management application may request a scalar variable identifying the number of resent packets on the network device. Alternatively, object-oriented MIB interface  may request a table of information from the underlying SNMP layer. In response, the underlying SNMP layer would provide an object table and corresponding methods for accessing each of the entries within the table. As an example, one type of object table may include a list of network addresses associated with network devices in a subnet and methods for an application to manipulate the entries in such a table.","Mobile agent module  provides a framework for executing a variety of mobile agents. Client application  represents one such mobile agent application as illustrated in . Accordingly, mobile agent module  interfaces between the mobile agent and the underlying execution environment, thus allowing a mobile agent to operate on a variety of network devices and operating environments.","For example, mobile agent module  implemented in accordance with the Java Bean\u2122 application programming interface defines a portable, platform-mutual set of APIs for software components to communicate with each other in accordance with the Java Beans conventions. In addition, mobile agents implemented using Java Bean components are able to plug into other component architectures, such as Microsoft's COM\/DCOM\/Active X architecture. In this capacity, mobile agent module  acts as a bridge between mobile agents developed using Java Beans and other component object models or component architectures. For example, mobile agent module  may receive Java instructions from client application  and convert them into instructions compatible with the COM\/DCOM\/Active X environment or alternatively, may convert these same Java instructions into byte codes to run on a virtual machine in virtual machine run time environment . It should be appreciated that client application  may be any type of network management application designed for execution on target network device .",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 4"],"b":["221","222","220","221","302"]},"Next, MIB compiler  extracts network parameters for the specific network device from the MIB definitions (step ). This involves lexically recognizing and parsing each token in the MIB definitions for the network device. MIB compiler  then generates an object-oriented MIB application programming interface or MIB interface and MIB map  corresponding to the MIB definitions (step ). The object-oriented MIB interface creates classes corresponding to the MIB hierarchy and methods for accessing each of the variables in the MIB definition. MIB map  assists in mapping object-oriented class definitions and method calls into corresponding combinations of SNMP primitives (e.g., get, set, and test) used by SNMP stack .",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["400","403","400","402","404","406","408","410","412","414"]},"For example, vendor specific group A includes an area that a vendor can define their own network parameters and proprietary information. SNMP group A includes definitions for protocol data units (PDUs) used for network nodes to communicate. IP group A includes information corresponding to the network communication layer. For example, IP group A may include the IP address of a network device and nearby routers or switches. TCP group A, which includes information corresponding to the transport protocol layer, may include a list of all active connections communicating using a \u201csocket\u201d interface as well as the ports and corresponding services.","MIB compiler  in  receives the MIB definitions  in  in a database that lists the network parameters related to the management of a network device. MIB compiler  converts these MIB definitions  into corresponding MIB objects  including data class B, vendor's specific class B, SNMP class B, system class B, IP class B, TCP class B, and interface class B. During the conversion process, MIB compiler  refers to MIB map  in  to determine how the methods access network parameters in the MIB database at run time. In addition, MIB compiler  then creates the methods an application can use to access network parameters in the MIB database corresponding to the classes.",{"@attributes":{"id":"p-0044","num":"0043"},"figref":"FIG. 5","b":"502"},"In response to the request to load a set of operations, the network device accesses an application server having the application(s) capable of performing the set of operations associated with the task (step ). For example, an application server  as shown in  stores hundreds of network applications ready for execution on target network device . Application server  receives the request, locates the application, and then transfers it to the appropriate network device (step ). In one implementation, application server  transfers a network application from application server  to the network device each time or session the network device executes the application. Alternatively, an application may remain resident in a network device once it is initially downloaded from the application server.","The network device loads and executes the requested application (step ). Using the application, the network device may perform a variety of network management functions. For example, the network device may be asked to monitor network traffic on a nearby network and notify the central NMS when a node on the network becomes inactive or the network traffic increases beyond a particular threshold.","Once the information or results are generated, the network device provides information back to the NMS for processing (step ). If a central NMS is not present, the network device may broadcast results over the network to other network devices monitoring and processing the network information.",{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6"},"As shown in , a network management application initially begins execution on a local network device. The network management application executing on the local network device requests a network parameter typically found in the MIB (step ). For example, a network management application may request MIB information corresponding to the current count and the cumulative count of packets being transmitted to determine if the capacity of a network device has been met or exceeded.","The network management application then determines if the requested network parameter is associated with the local network device or a remote network device (step ). If the network parameter is associated with a remote network device, the network management application forms and sends a request for the network parameter to the remote network address of the network device (step ). For example, the network management application may request that SNMP stack  (see ) create a PDU to gather MIB information on the remote device. This request can be formed using an object-oriented programming language such as Java. SNMP stack  then transmits the request for a network parameter over the network to the remote network device for processing. A network protocol such as TCP\/IP associated with that remote network device receives the request for the network parameter. The SNMP stack on the remote device processes the request and retrieves the requested network parameter, which includes MIB information (step ). Once the network parameter is received on a remote network device, the corresponding SNMP stack packages the result into a PDU and sends the results back to SNMP stack  for processing by the network application executing on a local network device (step ).","If the network management application requests network information associated with the local network device (step ), the network management application can access the requested network parameters in at least two different ways. The network management application can access the network parameters on the local network device directly (step ) using a software interface customized for the network device (step ). For example, the network management application can use a native variable interface to access network parameters on the local network device.","Alternatively, the network management application may access local network parameters on a local network device using existing network protocol. Initially, the network management application sends a request for a network parameter through the network protocol of the local network device using the \u201cloopback\u201d address (step ). This loopback address is a self-referential address which identifies the local network device on the network without sending packets of information over the actual network. For example, sending a request to the loop back address establishes a data route directly back to the network protocol stack on the local network device. The network management application essentially uses SNMP stack  on the local network device to create a PDU to request the corresponding network parameter (step ). SNMP stack  then retrieves the requests for the particular network parameter (step ). The results, are then returned to network management application  executing on local network device (step ).","While specific implementations have been described herein for purposes of illustration, various modifications may be made without departing from the spirit and scope of the invention. For example, although aspects of the present invention are described as being stored in memory and other storage mediums, they can also be stored on or read from other types of computer-readable media, such as secondary storage devices, like hard disks, floppy disks, or CD-ROM, a carrier wave from the Internet, or other forms of RAM or ROM. Accordingly, the invention is not limited to the above-described embodiments, but instead is defined by the appended claims and their full scope of equivalents."],"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"DESCRIPTION OF DRAWINGS","p":["The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate an embodiment of the invention and, together with the description, serve to explain the advantages and principles of the invention.",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
