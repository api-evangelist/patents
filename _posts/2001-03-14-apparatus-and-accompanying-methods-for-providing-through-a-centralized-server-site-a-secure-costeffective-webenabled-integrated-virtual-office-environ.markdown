---
title: Apparatus and accompanying methods for providing, through a centralized server site, a secure, cost-effective, web-enabled, integrated virtual office environment remotely accessible through a network-connected web browser
abstract: Apparatus and accompanying methods for use therein for implementing an integrated, virtual office user environment, through an office server(s), through which a remotely stationed user can access typical office network-based applications, including e-mail, file sharing and hosted thin-client programs, through a remotely located network, e.g., WAN, connected web browser. Specifically, a front end, namely a service enablement platform (SEP), to one or more office servers on a LAN is connected to both the WAN and LAN and acts both as a bridge between the user and his(her) office applications and as a protocol translator to enable bi-directional, web-based, real-time communication to occur between the browser and each such application. The SEP translates user input originating from the browser into application-specific protocols and applies a result to a corresponding office application server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07111060&OS=07111060&RS=07111060
owner: AEP Networks, Inc.
number: 07111060
owner_city: Somerset
owner_country: US
publication_date: 20010314
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CLAIM TO PRIORITY","COPYRIGHT NOTICE","BACKGROUND OF THE DISCLOSURE","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["This application claims the benefit of our co-pending United States provisional patent application titled \u201cVIRTUAL OFFICE\u201d filed on Mar. 14, 2000 and assigned Ser. No. 60\/189,251.","A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.","1. Field of the Invention","The invention relates to apparatus and accompanying methods for use therein for implementing a secure, cost-effective, web-enabled, integrated, virtual office user environment, through a centralized server(s), through which a remotely stationed user can access typical office network-based applications, including, e.g., e-mail, file sharing and hosted thin-client application programs, through a remotely located network, e.g., WAN, connected web browser, as well as for remotely providing network monitoring and management capabilities. The present invention is particularly, though not exclusively, suited for use in small to medium size organizations which, for economic reasons, do not have adequate in-house computer support (technical and administrative) capabilities.","2. Description of the Prior Art","With laptop personal computers (PCs) having become rather ubiquitous over the last several years, individuals who are away from their office, typically desktop, PCs and hence not in communication with their office networks, because they are either traveling or are at home, often have a continuing need to gain access to those networks. Such access is required if, for no other reasons, than only for those users to transfer files between their laptop PCs and servers on these networks and\/or access their network-based e-mail servers (both for receiving incoming and transmitting outgoing messages).","This need is not only shared by many individuals but also by organizations of widely varying size, from large organizations to very small businesses and other groups.","The art teaches various approaches to meet this need. However, they are all deficient in one respect or another. In that regard, none of these approaches offers an effective, integrated solution that readily provides all the functionality obtainable using an office network through one simple remote user interface, such as a web browser.","Specifically, one approach is to simply install appropriate conventional communications software in each client laptop PC and permit its user to access, through a dial-up telephone line, his(her) office network to gain access to the network server for file transfer and e-mail functionality. All application programs would reside on and locally execute on the client laptop PC. While this approach is quite simple, nevertheless it necessitates that each and every such application program be installed, configured and then maintained on that PC. Consequently, over time, this approach, particularly in view of the on-going support costs of the installed application programs, can become quite expensive.","Another approach involves using a traditional virtual private network (VPN) to provide wide area network (WAN) connectivity from a user's remote or home location to an office local area network (LAN). A VPN WAN connection implements a so-called OSI layer 2 extension or \u201cconduit\u201d of the office network itself between the LAN and the user's remote\/home location. A remote client PC, connected through a VPN to an office LAN, locally appears on the LAN, as far as that user is concerned, as if that client PC were directly connected to it. In essence, for packets destined from the client PC to the LAN, a VPN connection therebetween involves, at a near end of the VPN connection, encapsulating outgoing OSI layer 3 packets at the client PC into layer 2 IP (Internet protocol) packets and transmitting those layer 2 packets over the VPN connection (in effect tunneling those layer 3 packets through the VPN connection), and subsequently, at a remote (LAN) end of the VPN connection, disassembling the layer 2 packets to yield the layer 3 packets and applying the resulting layer 3 packets onto the LAN for carriage to their ultimate destination, such as a network server. The opposite operation occurs in reverse for packets emanating from LAN, e.g., the server, and destined, over the VPN connection, to the remote client PC. Since the layer 2 packet tunneling is totally transparent to both the LAN and the client PC, advantageously the client PC can provide the same level of functionality to its user as if that PC were directly connected to the LAN.","Historically, a VPN connection required special, expensive VPN termination equipment located at each end of the connection, or required special client software to be installed and configured at the client machine. This equipment was rather expensive to acquire, and proved to be rather tedious to properly configure and hence costly to administer and maintain, particularly for those small to medium sized organizations that lacked adequate in-house technical support personnel.","In particular, at the remote client site, a so-called VPN terminator (also referred to as a \u201cclient-site VPN router\u201d) was connected to a client PC to bi-directionally interface that PC to the VPN connection. This terminator provided layer 2 packet processing as well as appropriate packet encryption\/decryption functionality. However, such a terminator, which included special-purpose software, was generally quite expensive to procure and needed to be installed and properly configured for its particular client PC\u2014the latter entailing significant costs in both time and money. To mitigate the cost somewhat, various currently available PC operating systems (O\/S's) now provide VPN support features, and, as an alternative, VPN vendors have built client VPN software that runs on the client machine and interacts with that vendors' own VPN server or with VPN servers from other vendors. Such client VPN software has been built to work with conventional PC O\/S's such as Windows 98, Windows NT, Windows 2000, etc. However, PC O\/S-based or client software based VPN support requires considerable packet processing (e.g., for packet encapsulation and disassembly, and cryptographic processing), which disadvantageously imposes a significant processing burden on the PC\u2014though this burden may be acceptable for a home PC with a relatively light processing load, rather than a remote PC connected to an office network.","Furthermore, VPN services must be very secure. Unfortunately, until rather recently such PC O\/S-based VPN support used a rather small key size, such as 40-bits, which generally does not provide sufficient security against third-party intrusion. While relatively new PC-based operating systems have become available that exhibit significantly increased VPN security, through use of triple DES and IPsec features\u2014such as MICROSOFT\u00ae WINDOWS\u00ae 2000 O\/S (\u201cWindows 2000\u201d is a trademark of the Microsoft Corporation of Redmond, Wash.), this support still presents a considerable processing load to the PC; hence, denigrating PC performance, specifically processing throughput.","Moreover, such PC operating systems, whether those exhibiting increased VPN security or not, still do not provide requisite reliability.","As such, to provide VPN connectivity with required levels of security and reliability without imposing an undue processing load on the client PC, use of a separate dedicated client-site VPN terminator\u2014even in view of its expense\u2014is still strongly favored in practice.","Not only is expensive, specialized VPN equipment required at the client site (or alternatives such as OS-based VPN support or client software packages, both with their accompanying problems, need to be used), but it is also necessary, to an even greater extent, at the LAN (central) site. At the LAN site, VPN support requires installation and configuration of an office-site VPN router. Office-site routers are considerably more expensive than client-site VPN routers for the simple reason that the processing circuitry in the former, which implements the necessary cryptographic and packet processing operations, is sized based on a number of users that need to be simultaneously supported. Each user is allocated a certain slice of the available processing capacity. Even if such a router is sized to support just a few simultaneous remote users on the LAN, its cost can easily amount to several thousands of dollars, with the cost rapidly escalating as user load and hence necessary processing capacity of the VPN router increased. Recently, server operating systems, such as the MICROSOFT\u00ae WINDOWS\u00ae 2000 server O\/S, have become available that incorporate multi-user VPN support with sufficient security features; however, such support drains considerable processing resources from the server and still is insufficiently reliable. Moreover, if such a server O\/S-based approach is used, counterpart client-site software, such as the Windows 2000 O\/S, must be installed and properly configured on each client PC, which, if a large number of remote users exists, can be rather expensive and time consuming.","Therefore, in view of the relatively high cost involved, most small to medium sized organizations were and continue to be unable to afford the use of VPN connectivity, thus precluding themselves from providing secure remote office access to their internal networks and various business efficiencies and productivity increases that could have gained thereby.","A further, though totally different approach, evolved in the art for providing remote connectivity to an office LAN. This approach, predicated on an \u201capplication service provider\u201d (ASP) model, involves installing specialized server software, such as \u201cMetaframe\u201d software available from Citrix Corporation, in the network server and an \u201cICA\u201d client program in each client PC. Through the Metaframe program, the network server situated on the LAN would function as an ASP by hosting multiple virtual sessions of a given application program executing on the server, in effect implementing multiple virtual machines, to various different remotely located client PCs. Each remote client, running the ICA client program, would access, over, e.g., a WAN connection, a desired thin-client application hosted at the LAN-based server and establish a separate application session. The ICA client would communicate mouse clicks and keystrokes entered by a user stationed at the client PC, over the WAN connection, to the Metaframe program executing in the server which, in turn, would provide screen shots back to the client PC for local display to a user stationed thereat. This information would be carried between the client and server using an \u201cICA\u201d protocol.","As PC manufacturers began equipping their PCs with client web browsers as standard issue software as well as users downloading such browsers for free from various software manufacturers, the Metaframe program evolved to permit remote browser-based web access, with the ICA client being replaced by the use of a resident client browser in the PC.","The concept of providing multiple virtual machines is also provided through \u201cWindows Terminal Services\u201d (WTS) software currently available from the Microsoft Corporation (\u201cWINDOWS\u00ae\u201d is a trademark of the Microsoft Corporation) for Windows NT 4 and Windows 2000 server operating systems, with client-server communication of screen shots, keystrokes and mouse clicks being carried to and from WTS using \u201cRDP (\u2018Remote Desktop Protocol\u2019 defined by Microsoft Corporation and based on the ANSI T.128 standard)\u201d, rather than an \u201cICA\u201d protocol. Again, WTS, like the Metaframe program, still carries a considerable processing burden.","Unfortunately, with this ASP-based approach, the client PC did not appear as if it were connected to the LAN. As such, while this approach did allow remote application execution, it did not accommodate remote access of other essential office network-based functionality, such as file sharing and e-mail. Hence, this approach was seen as being rather \u201cone-sided\u201d.","The art supplemented this ASP-based approach by incorporating a VPN (layer 2) connection between the LAN and client PC. This, in turn, provided added client functionality inasmuch as the client PC appeared as though it was on the remote LAN. However, this approach not only proved to be rather inconvenient to use but also, due to its VPN connectivity and for the reasons set forth above, rather expensive.","Specifically, a VPN server was connected to the LAN and a VPN router (or VPN terminator) was connected to each client PC, or each client PC used OS-based VPN support, or special client software had to be installed on each PC. The Metaframe program or WTS executed on the server which provided access, through a client browser or a special client application program, to a server-hosted virtual application session. By virtue of the VPN connection, the user at the client PC could remotely execute server-hosted thin-client applications, with the client PC appearing as if it were directly connected to the LAN. Unfortunately, this approach, being hampered by the constraints of the Metaframe software or WTS, only accommodated thin-client applications through the browser, and hence was just as \u201cone sided\u201d. No other network functionality, such as e-mail or shared file access, was accommodated through the browser; hence, this approach proved somewhat inconvenient to use. Moreover, the high cost of the associated VPN client-site and office-site servers principally dissuaded many small to medium size organizations from using this approach.","To off-load some of the processing burden from the LAN server running WTS, a two-tier approach recently appeared in the art through which a specialized processing system was inserted between the server and a WAN connection. This processor converted RDP packets associated with WTS into AIP packets (AIP is a proprietary protocol owned by Tarantella Inc. of Santa Cruz, Calif.) or to some other less bandwidth-intensive protocol and conducted client application communication (screen shots, keystrokes and mouse clicks) with the far-end client PC through either of the latter protocols. ICA provides similar bandwidth conserving functionality. Alternatively, communication in native RDP may be used instead. In any event, the client PC interacted with the processing system through either a specialized client application program or a web browser executing an appropriate JAVA applet (\u201cJAVA\u201d is a trademark of Sun Microsystems, Inc. of Palo Alto, Calif.). While this scheme relieved some of the load on the server, it still suffered the same deficiency as an ASP approach: it was not integrated and thus failed to provide through one single user interface, such as a browser, all the functionality which that user would have if his(her) client PC were directly connected to his(her) office LAN.","In view of the increasing costs of software acquisition, client installation and maintenance of client application programs, internally centralized ASP-based remote application hosting may well become an attractive alternative for business users.","However, adequate security remains a concern, particularly for small to medium size businesses that seek to implement an ASP-approach using the Win 2000 O\/S or similar system. In that regard, WTS provides cryptography, though at a 168-bit level, through use of a symmetric key. While each RDP message from a network server to a remote client is sufficiently encrypted by WTS to preclude its brute-force cryptanalysis, shared symmetric keys are vulnerable to third party discovery for the simple reason that the secret key has to be distributed to the parties using it, and thus can be obtained by a malicious party. Since the Windows 2000 WTS approach does not involve the use of certificates, it is vulnerable to \u201cman-in-the-middle\u201d attacks from malicious parties that have obtained the symmetric key. In symmetric-key cryptography, both sides, here being the remote client PC and the server, utilize the same key. As such, if a third-party interloper, a so-called \u201cman in the middle\u201d that had previously obtained the symmetric key, were to intercept communications, that party through its computer, could pose as the server to the client machine, and as the client to the server machine. However, that party would thus be privy to all communications attempted between the client and the server, and thus have access to information that could be highly proprietary. That party could readily decrypt each message it received from one end and then alter the message contents as it saw fit, and transmit a modified message to the other end, thus potentially causing considerable mischief. Since WTS provides no effective protection to so-called \u201cman in the middle\u201d attacks, inasmuch as its symmetric key scheme does not involve the use of certificates and public keys cryptography, use of WTS under the WIN 2000 O\/S is still not viewed by many organizations as offering a sufficiently attractive or secure solution to properly support such centralized thin-client application program hosting.","Therefore, a need exists in the art for a technique, specifically apparatus and methods for use therein, that provides secure, but integrated network functionality through a remote WAN connection between a remote client PC and a server based on an office LAN. Such a technique should provide all network functionality, including, e.g., thin-client application program hosting, file sharing and e-mail, through a single, commonly available user interface, such as a web browser, as if that client PC were connected directly to the LAN. The security should be such as to substantially eliminate potential \u201cman in the middle\u201d attacks or other such third-party intrusions. Furthermore, through such a technique, the client PC should appear as if it were directly connected to the LAN.","While such a technique could utilize a VPN connection, it should function with preferably far less costly alternatives, such as interacting directly with transport schemes such as DSL (digital subscriber line) or other relatively low-cost, high-speed digital access modalities. Also, such a technique should be remotely administered and supported, particularly when employed in those organizations which can not afford to maintain adequate in-house computer support capabilities.","Such a technique, were it to exist, would likely be very attractive to many organizations, including small and medium sized businesses: (a) to permit effective internal ASP-based (centralized) thin-client application program hosting for remote client connectivity, with resulting cost savings to those organizations in application procurement as well as through centralized administration and maintenance of those application programs, and (b) through its use, to yield increased efficiency and productivity by providing remote access for individual users to all their office network-based functionality.","Advantageously, our present invention satisfies this need and overcomes the deficiencies in the art by providing a front-end, in the form of a service enablement platform (SEP), to a LAN-connected office server(s) for implementing secure, remote web-based access, through a WAN-connected user browser, for a user situated at a remote client computer (e.g., remote laptop PC). Through the SEP, the remote user is provided with essentially, if not completely, the same network-based office functionality implemented by the office server as if the remote computer were directly connected to that LAN.","In accordance with our inventive teachings, the SEP is situated between the LAN and the WAN-connected user. In use, the SEP acts both as a bridge between the remote user and his(her) office applications and as a protocol translator to enable bi-directional, web-based, real-time communication to occur between the user browser and each of these office applications. In that regard, the SEP provides bi-directional protocol translation to exchange necessary information (data and user interactions) between, on the one hand, application-specific protocols, such as MICROSOFT\u00ae-RDP, IMAP4 (Internet Mail Access Protocol version 4) or MICROSOFT\u00ae .NET SMB (Server Message Block), to communicate with office-based client application, e-mail and file servers; and, on the other hand, HTML, in conjunction with HTTP, as required by the user browser or some other protocol, e.g., AIP or the like, used by an applet within the browser.","The SEP establishes a LAN connection for the remote user that, as far as that user is concerned, places the remote PC directly on the LAN. By virtue of such a connection, the remote user can, e.g.: (a) send and receive e-mail through the office e-mail server and manipulate his(her) e-mail stored thereon, (b) access, through the office file server, all his(her) and other shared files stored on and accessible through the LAN as well as transfer files, (c) remotely execute, through the thin-client application server any of his(her) hosted client application programs stored thereon, with real-time results of each of these operations being displayed in HTML form on the user browser.","Specifically, the SEP includes a separate client application module for each basic office function: file sharing, e-mail and thin-client application hosting. Each such module accepts as input, in one direction, user interaction data, in the form of URI\/URL selection, form input, etc., user mouse clicks and keystrokes provided in HTML form (or in an intermediate transmission protocol, such as AIP), and generates a message, in the appropriate application protocol, containing this data to a corresponding office application. Each such module also operates in the reverse direction by accepting output information, such as a screen shot or data list, produced by its corresponding office application and converting that information, from its application protocol, into a graphical HTML page (or in the intermediate transmission protocol) for transmission to and rendering as a web page by the user browser. Thus, each of these modules acts both as a bridge between the user and a specific one of his(her) office applications and as a protocol translator to enable bi-directional, web-based, real-time communication to occur between the user browser and that particular office application.","Furthermore, since user access to the SEP is provided on an authenticated basis, through use of a unique, pre-defined and pre-stored certificate, rather than through use of a symmetric key, the present invention is generally not as susceptible to third-party intrusion through so-called \u201cman in the middle\u201d attacks.","In accordance with a feature of our invention, while the principal office-based applications are file sharing, e-mail and thin-client application program hosting, our invention can readily and easily accommodate web-based, secure, remote user access to other additional office-based applications by merely incorporating a corresponding client application module for each such additional office application to provide required bi-directional, real-time protocol translation for both incoming user interaction data to that office application and output data generated by that office application.","To facilitate understanding, identical reference numerals have been used, where possible, to designate identical elements that are common to the figures.","After considering the following description, those skilled in the art will clearly realize that the teachings of our present invention can be utilized in any of a wide number of different client-server networked processing architectures that support remote access from a client PC to an office server. In essence, our invention supports remote, secure, web-based user access to network-supported and hosted office processing functions, including client application programs, e-mail and file sharing, to a remotely located user with the same capabilities and essentially the same ease of use as if his(her) computer were directly connected to an office network rather than through a wide area network (WAN) or other remote connection; hence, providing that user with a so-called \u201cvirtual office\u201d. Advantageously, our inventive apparatus effectively implements a front-end to the office server, regardless of whether that office server is implemented by a single machine (computer) or multiple machines, and regardless of whether those machines are co-located or not, as long as they are interconnected to the apparatus through an appropriate network. If the office server is implemented by multiple inter-networked machines\u2014as is often the case in medium or large sized organizations, each of these machines can handle one or more specific office processing tasks, e.g., client application program hosting, e-mail serving and\/or file serving. Alternatively, for small organizations with limited processing equipment, either our inventive apparatus itself, through its internal processing capability, can implement all these tasks or can serve as a front-end to a single separate machine (computer) which does so. For the sake of simplicity, we will describe our invention for use in an small office environment where either the apparatus serves as a front-end to a single machine situated at an office location that collectively implements all the necessary office processing tasks or additionally implements all those tasks itself. Furthermore, although our invention can readily support simultaneous access by multiple remotely located clients, again for simplicity, we will describe our invention in the context of use with only one such client at a time. Clearly, based on the ensuing description, those skilled in the art can readily appreciate how our inventive architecture can simultaneously accommodate multiple clients and can be scaled upward to simultaneously handle relatively large numbers of such clients.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 1","b":"5"},"As shown, this environment includes remote client , that is typically a personal computer (PC) generally a laptop, connected through wide area network (WAN) , to office server  situated at an office site. WAN  can be implemented by a publicly accessible network, such as the Internet, or a private network. Connectivity to the WAN is provided through any relatively high-speed (broadband) access modality such as, e.g., digital subscriber line (DSL), cable modem, integrated service digital network (ISDN), fractional T1 or even a T1 line. Alternatively, remote dial-up analog modem access can be used instead, though end-to-end transport delays, in view of a relatively slow communication speed provided by such a modem, may markedly slow system response as perceived by a user situated at PC .","Our invention advantageously utilizes web-based access to office applications, with those applications being remotely hosted by virtual office server  and encrypted communication provided through conventional secure sockets layer (SSL) capability supported within the browser. As such, client  contains conventional user browser . Advantageously, since all the office applications are hosted remotely, there is no need to install, configure or maintain any user application programs, other than a web browser, on remote client ; thereby, dramatically reducing cost of ownership of the client PC.","Virtual office server  contains conventional broadband WAN interface , firewall\/router , service enablement platform (SEP) , and server . Interface  is conventional in nature and provides high-speed network access. It can take the form of, e.g., a cable modem, a DSL interface, an ISDN terminal adapter or a fractional\/full T1 interface. The specific modality of peered-network access used by both client PC  and interface  is not critical provided that the chosen modality can support sufficiently high access speeds between the remote client and server . Firewall\/router  is conventional in nature and attempts to isolate server  from unauthorized network-based attacks as well as provide outgoing and incoming network routing capability to and from WAN . While interface  and firewall\/router  are both shown as being external to the SEP, interface  can be located internal to the SEP as, to the extent needed, can firewall\/router . From a network perspective, SEP  is situated between WAN  (via broadband interface  and firewall\/router ) and local area network (LAN) .","In accordance with our inventive teachings and as described in considerable detail below, SEP  provides a front end to server  for implementing secure, remote, web-based access, through browser , by a user situated at client  to the network-based office functionality implemented by server  and to the same extent as if client PC  were directly connected to LAN . Server  resides on LAN  to collectively implement, through separate internal LAN accessible application servers, various office processing applications (tasks) including, through client applications server , thin-client hosted application programs; through web-enabled application server , remotely-hosted web-enabled thin-client application programs; through e-mail server , e-mail messaging; and, through file server , shared file access. Each of these servers is conventional, with E-mail server  being implemented, for example, by a MICROSOFT\u00ae EXCHANGE\u2122 server (\u201cMICROSOFT\u00ae EXCHANGE\u2122\u201d is a trademark of Microsoft Corporation of Redmond, Wash.). As noted, in small offices, server  is typically implemented by a single server computer. Alternatively, rather than using two separate physical computers, server  and SEP  can be collectively implemented, as indicated by dot-dashed line , on one single physical computer\u2014with the necessary processing needed to implement server  being provided by SEP . However, to facilitate understanding, we will depict SEP , in terms of its functionality, separate from that of server  or any of the hosted applications and servers executing thereon.","Furthermore, during initial configuration of office server , SEP  establishes a dial-up connection, as symbolized by line , via WAN , to administrative web site  (specifically a web site operated by Netilla Networks Inc., which is the present assignee thereof) through which a unique X.509 digital certificate is downloaded to and stored on SEP , along with other configuration information, such as, e.g., necessary IP addresses. This certificate is used to provide secure conventional, encrypted, authenticated communication that is substantially immune to \u201cman in the middle\u201d attacks. Since the manner through which SEP  utilizes the certificate is conventional, as is the use of SSL by browser , we will not address these aspects in any detail. Once this certificate and configuration information has been provided over connection , SEP  establishes a web-based (HTTP) connection to web site  to complete its set-up procedure. SEP , once fully configured and functioning in a network environment, continually monitors the state of its network connections, both to WAN  and LAN , as well as the state of LAN  and the various application servers (whether executing in a separate physical computer or on the same computer that implements SEP ), and provides associated maintenance and status information back to a server (not shown) associated with web site , by establishing a dial-up connection to WAN  via line , for purposes of remote monitoring, problem diagnosis and routine maintenance. Since none of these particular functions is relevant to the present invention, these functions will not be discussed in any further detail.","Once SEP  is fully functioning in its network environment, a user situated at his(her) PC can readily and remotely access his(her) office network-based applications by simply establishing a secure web (HTTPS) connection to a web server implemented on SEP . To do so, the user enters, through browser , a web address associated with this server. Once the connection is established, a web page, as shown in screen shot  for a typical graphical display depicted in , is downloaded by SEP  to the user browser through which, once rendered by the browser, the user then enters his(her) username and password to log on to virtual office capability provided by SEP . After the user successfully logs in by entering his(her) username and password in fields  and clicking on \u201cLog In\u201d button , a session begins through which a web page is downloaded by SEP , as shown in , and displayed on the browser through which several icons, illustratively tabs, are displayed: \u201cMy Files\u201d, \u201cMy E-mail\u201d, \u201cMy Apps\u201d and \u201cMy Admin\u201d (such as those appearing in screen shots ,  and  of the displays shown in ,  and ; all of which are discussed in detail below). The user can then click on any of these icons, which, once communicated back to SEP , will cause the SEP  to launch the associated office application (or administrative function for the \u201cMy Admin\u201d tab), generate an HTML file for a graphical display produced by that application, and then download the HTML file to browser , for local rendering thereat. During the web session, browser  communicates user form input and URI (uniform resource identifier)\/URL (uniform resource locator) selection via HTTP requests to SEP  which processes this input and provides an appropriate display back to the browser. In addition, for application support, an efficient protocol such as AIP (or the like) is used to transfer user keystrokes and mouse clicks from a window on the remote PC representing an application executing on a remote server to SEP , which then relays that user interaction data to the application server via RDP for processing. Note that RDP itself could have been used between the remote browser and SEP , but use of AIP or a similar protocol provides more efficient bandwidth utilization than does RDP. The user can readily move between one remote office application to the next by simply clicking on the associated icon.","In doing so, SEP  (see ) establishes a LAN connection for the remote user that, as far as that user is concerned, places remote client  directly on the LAN. By virtue of such a connection, the remote user can, e.g.: (a) send and receive e-mail through server  and manipulate his(her) e-mail stored thereon, (b) access, through file server , all his(her) files, as well as other shared files, stored on and accessible through LAN , (c) remotely execute, through application server , any of his(her) thin-client applications hosted thereon, as well as through server  remotely execute any of his(her) thin-client web-based applications hosted there, with real-time results of each of these operations being displayed in HTML form on browser . Application server  receives user mouse clicks and keystroke data and provides user screen shot displays through use of MICROSOFT\u00ae RDP (remote desktop protocol). Web-enabled application server  communicates client application information using HTTP. E-mail server  utilizes a conventional IMAP4 protocol; while file server  communicates user information using MICROSOFT\u00ae .NET technology Simplified Message Block (SMB) data (to implement MICROSOFT\u00ae .NET technology-BIOS functionality). Note, that while SMB and IMAP4 were shown here as examples, other protocols such as Novell Netware and the POP3 (Post Office Protocol 3) are usable as well.","In essence, as the reader can appreciate, SEP  acts both as a bridge between the user and his(her) office applications and as a protocol translator to enable bi-directional, web-based, real-time communication to occur between user browser  and each of these office applications. In that regard, the SEP provides bi-directional protocol translation to exchange necessary information (data and user interactions) between, on the one hand, MICROSOFT\u00ae-RDP, IMAP4 or MICROSOFT\u00ae .NET SMB to communicate with office application servers ,  or , respectively; and, on the other hand, HTML and HTTP as required by user browser  for non-thin-client applications, and AIP, or a similar protocol, for thin-client control information, or for thin-client user interaction data transfer (i.e., mouse clicks, keystrokes, control data).",{"@attributes":{"id":"p-0069","num":"0068"},"figref":"FIG. 14","b":"20"},"As shown, site  is formed of a front-end portion that provides homepage and user interface web pages, database  and a back-end portion having interfaces  and .","Front-end portion  provides a home page and user interface which permits users  to access this site. These users include appropriate Netilla Networks Inc. technical personnel (Netilla Networks Inc. is the present assignee hereof; hereinafter referred to as \u201cNetilla\u201d) as well authorized third-parties, such as Netilla partners (e.g., resellers), system integrators and installers, to log onto site , on a secure, though restricted basis (depending on the person seeking access). Once appropriate username and password information is entered, each such user gains access for purposes of configuring and determining operational status of any SEP for which (s)he is then providing technical assistance or is responsible. In addition, members of the public can access certain web pages associated with site  that provide general information regarding the services currently offered by Netilla and other related information posted on that site. Database , which interacts with both the front- and back-end portions of site , stores information for each SEP then in service, alarm reports generated by each such SEP and other related status as provided by that SEP, configuration and maintenance information for that SEP, as well as information (such as user name and password) to permit appropriate access to certain secure areas of the site by Netilla technical personnel as well as each authorized third-party user, i.e., resellers, installers and system integrators. Interface  communicates with individual SEPs (of which, for simplicity, only one SEP  is shown in ) in order to permit Netilla technical personnel or an authorized third-party to change configuration information, e.g., a profile, stored on a particular SEP and to instruct web site  to send such changed information to this particular SEP. This information will be stored within database  and then sent, via this interface, to that SEP. Interface , utilizing information stored within database , communicates with conventional back-end business applications, such as accounting and billing systems , to, among other aspects, establish a new account for a SEP to be or then being installed, modify an existing account and periodically bill an appropriate party, such as a third-party reseller, for use of each SEP for which that party is responsible.",{"@attributes":{"id":"p-0072","num":"0071"},"figref":"FIG. 2","b":["200","200"]},"As shown, SEP  contains Ethernet I\/F ports  and  (also referred to as Ethernet ports  and ), V.90 Fax modem , and microprocessor , all interconnected by local bus . Microprocessor , which is illustratively any conventional Intel Pentium grade processor or equivalent (having a clock speed of, e.g., 300 MHz or higher) (Pentium is a trademark of Intel Corporation of Santa Clara, Calif.), is itself connected, through bus , to memory  and via bus  to hard drive . Memory  is illustratively synchronous dynamic random access memory (SDRAM). Hard drive  stores program  and X.509 certificate . During operation of SEP , segments of program , to the extent needed, are copied from hard drive  into memory  from which those segments are executed. Memory , being volatile, also stores temporary data, as required during program execution.","Ethernet ports  and  permit the SEP to be situated in series, via LAN connection , between office server  (see ), and, via an Ethernet connection symbolized by line , to a broadband connection to the WAN, via interface  (through, e.g., firewall\/router ). As such, SEP  can intercept incoming network messages incoming from WAN , perform required protocol conversion and IP address translation on each such message and route that message to a correct office application server on LAN , and provide the opposite functionality in a reverse direction for outgoing messages.","Fax modem  provides analog dial-up connectivity over line  for use, as described above, during installation of SEP ; for communicating monitoring and status information back to administrative web site , and as a back-up data connection in the event the broadband connection fails. The fax capability of the modem is not used by SEP  unless a specific hosted user (thin-client) application program requests it.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":["FIG. 3A","FIG. 2"],"b":["300","200"]},"This software is composed of two basic components: operating system (O\/S) and related modules  and virtual office software .","Component  is formed of a basic O\/S kernel , illustratively a conventional Linux O\/S, with specific additional and conventional Linux modules to implement necessary network and web-based processing, and device operation. These modules include network address translation (NAT) module , IP routing module , Open SSL module , web server  (which is currently available under the name \u201cApache web server\u201d), send mail module , TCP\/IP processing module , PPP processing module  and device drivers . Software  includes, as its other component, virtual office software  that communicates, as symbolized by line , through Apache web server . Though a Linux O\/S kernel is used, O\/S  could just as easily be implemented using nearly any other PC or server-based operating system, such as a UNIX or MICROSOFT\u00ae WINDOWS\u00ae operating system\u2014though, of course, the modules would need to be compatible with the chosen O\/S.","NAT module  is conventional in nature and translates network, specifically IP, addresses as requested by O\/S kernel . In particular, incoming messages from the WAN, depending on its port designation\u2014which identifies a particular office application server and program on server  for which the message is intended, translates the address of that message from the IP address of the SEP to an IP address associated with that particular server. The port designation remains to define the particular server for that message. Similarly, though in a reverse direction, NAT  translates each outgoing message, based on its port address, from each one of the servers and destined to the remote client PC from the private IP address of the server to the public IP address of the SEP along with the corresponding port designation.","IP routing module  provides a routing table that provides IP routing information to O\/S kernel . This routing table is established during initial configuration of the SEP from routing information provided from administrative web site  (see ). It can, alternatively, be updated via conventional dynamic routing protocols such as RIP, OSPF, etc.","Open SSL module , as shown in , provides conventional SSL processing\u2014though in a Linux environment, including message encryption\/decryption, using X.509 certificate . This certificate once downloaded during initial configuration of the SEP, is then accessed, as symbolized by line , by SSL process . The Apache web server uses the Open SSL module for secure traffic received over TCP port number .","Module  is a conventional web server, though again suited for use in a Linux environment, and provides a web-based portal through which virtual office software  communicates, over a WAN connection, with user browser  and receives user interaction data (mouse clicks and keystrokes therefrom) and provides screen shots thereto for local display on remote PC .","Sendmail module  (also known as \u201cQmail\u201d for use with the Linux O\/S) is conventional and is employed if SEP  is used without an external e-mail server, such as e-mail server  shown in . Module  implements message transmission through use of SMTP (simplified mail transport protocol).","TCP\/IP processing module  and PPP processing module , shown in , are conventional in nature and correspondingly implement a well-known TCP\/IP stack (with packet assembly and disassembly) and provide point-to-point protocol (PPP) packet processing for use with packet transmission employing the PPP protocol over dial-up WAN link .","Display drivers module  comprises a set of conventional display drivers operating under control of O\/S kernel  to control two Ethernet ports  and , V.90 fax\/modem  and a local LCD display (not shown). Information is communicated between device drivers module  and Ethernet ports  (Port ) and  (Port ), and V.90 Fax Modem  as symbolized by lines ,  and , respectively and, as symbolized by line , between display drivers module  and O\/S kernel .","Communication between O\/S kernel  and modules , , , , , ,  and  is symbolized by lines , , , , , ,  and , respectively. Inasmuch as modules , , , , ,  and  are all conventional and readily available Linux components, none of them will not be discussed in any further detail.","Virtual office software , operative in conjunction with web server module , forms a core software component of our present inventive apparatus. In that regard, software  (which is discussed in detail below) implements real-time, bi-directional protocol translation, as described above, to enable the user situated at remote PC  to remotely control, execute and interact with any office application hosted at server  (see ). In that regard, through appropriate protocol conversion, software , as shown in , exchanges necessary information (data and user interactions) between, on the one hand, MICROSOFT\u00ae-RDP, IMAP4 or MICROSOFT\u00ae .NET SMB to communicate with office application servers ,  or  (see ), respectively; and, on the other hand, HTML and HTTP (or an intermediate transport protocol\u2014AIP) as required by user browser  for non-thin-client applications, and AIP or a similar protocol for thin-client applications\u2014all as required to support centralized hosting of office applications (e.g., user application hosting, file serving, and e-mail) but with user interaction and application display occurring remotely at the client computer under the browser. Modules , , , ,  and , as shown in , all provide necessary network packet processing, including address translation, encryption\/decryption and send mail functionality, ancillary to software  but necessary to support proper packet communication over a WAN connection between it and both remote PC  and individual office applications executing on local server  (shown in ).",{"@attributes":{"id":"p-0088","num":"0087"},"figref":"FIG. 3B","b":["300","200"]},"Given the location of the SEP intermediate between LAN  and WAN , three basic paths, i.e., paths ,  and , exist, all three of which are under the control of O\/S kernel . Note that paths  and are common from the bottom of the figure to a point just below the Apache web server. From that point, path  continues through the Apache web server to the virtual office software, while path bypasses the Apache web server and goes directly to the virtual office software.","First, incoming packets from the WAN connection, i.e., originating from remote PC  (see ) and containing user interaction information relevant to non-thin-client functionality (e.g., user URI\/URL selection, forms inputs, etc.) flows, as symbolized by dashed line  (also labeled as path \u201cB\u201d in ), through Ethernet port  (port ), within the SEP through device drivers module , and via the O\/S kernel, to TCP\/IP processing module  for appropriate TCP\/IP packet processing, including packet disassembly. From TCP\/IP processing module , the resulting information in the disassembled packet is provided by O\/S kernel , to web server , which calls on services of Open SSL module  to perform SSL processing on the packet, if necessary; for the Netilla Virtual Office, all information transfer is protected by SSL. After SSL processing, the HTTP request is extracted and sent to virtual office software  for protocol translation into a form suitable for use by a desired office application. Once virtual office software  has appropriately processed the information, by providing suitable protocol conversion, that information flows directly from software  to that office application accessible through the LAN if necessary (i.e., if it cannot be handled directly by the virtual office software). Information (such as the \u201cnetwork neighborhood\u201d for the file sharing application) from the SEP destined to the remote user flows along path  but in an opposite direction to that just described so as to provide the opposite functionality.","Incoming packets from the WAN connection, i.e., originating from remote PC  (see ) and containing user interaction information relevant to thin-client functionality (e.g., starting of a thin-client application, keystrokes and mouse clicks associated with a thin-client application, etc.) flows, as symbolized by dashed line , through Ethernet port  (port ), within the SEP through device drivers module , and via the O\/S kernel, to TCP\/IP processing module  for appropriate TCP\/IP packet processing, including packet disassembly. From TCP\/IP processing module , the resulting information in the disassembled packet is provided by O\/S kernel , to virtual office software  via path (paths  and are identical except at the very end; path  goes to software  via the Apache web server while path goes directly to the virtual office software). Once virtual office software  has appropriately processed the information by providing suitable protocol conversion (including performing SSL operations on the data), that information flows directly from software  to that office application accessible through the LAN via path , as described below, if necessary (i.e., if it cannot be handled by the virtual office software directly). Information (such as a thin-client screen update for a particular thin-client application, such as MICROSOFT\u00ae WORD\u2122, a word processing application software, for example) from the SEP destined to the remote user flows along path and then via path  but in an opposite direction to that just described so as to provide the opposite functionality.","Information incoming to the SEP from the LAN and which is ultimately destined to the remote user for non-thin-client applications (e-mail and file sharing) flows as shown by dotted path  (also labeled as path \u201cA\u201d) within the SEP. This information is first received by Ethernet interface  (port ), which is connected to the LAN, and from there transits through device drivers module , O\/S kernel , TCP\/IP processing module  (again for packet disassembly), then back through the O\/S kernel to virtual office software . For non-thin-client data (i.e., data involved with file sharing or e-mail), software  generates an appropriate HTML page via an HTTP response containing this information and thereafter provides this page to web server . The web server calls on the services of Open SSL module  to provide appropriate security functions, and then transmits this page, via an HTTP response, to the remote client PC, specifically user browser  for display thereat. The data path from the virtual office software subsequently follows path  described previously. Information from the SEP, i.e., originating from the user, to the LAN flows in a reverse direction to that described in order again to provide the opposite functionality.","Information incoming to the SEP from the LAN and which is ultimately destined to the remote user for thin-client applications flows as shown by dotted path  within the SEP. This information is first received by Ethernet interface  (port ), which is connected to the LAN, and from there transits through device drivers module , O\/S kernel , TCP\/IP processing module  (again for packet disassembly), then back through the O\/S kernel to virtual office software . For thin-client data (i.e., data involved with application execution on servers on the LAN), virtual office software  performs data protocol conversion if necessary (for example, from RDP to AIP), along with the appropriate image conversions. Software  then generates appropriate AIP packets, on which it performs security operations as necessary, and then forwards those packets along path to the remote client PC, specifically user browser  for display thereat. Information from the SEP, i.e., originating from the user, to the LAN flows in a reverse direction to that described in order again to provide the opposite functionality.","Note that in the traversals described above, the transference of data is traced through the O\/S kernel as much as possible. However, since the O\/S kernel is involved in essentially all operations that occurs in the SEP,  only shows those data flows particularly pertinent to the present invention, else showing every single interaction with the O\/S kernel would result in overwhelmingly complex data flow diagram with essentially little gained from a perspective of understanding. Thus, for example, when the Apache web server hands off data to the virtual office software, the former must use some O\/S kernel services to do so. However, this does not add to the understanding and unnecessarily complicates the diagram if one were to show this; therefore,  traces a direct path between the web server software and the virtual office software.","Lastly, information incoming to the SEP through the dial-up connection, such as from administrative web site , flows as shown by dot-dashed path  (also labeled as path \u201cC\u201d). This information is first received by V.90 fax modem , such as from the administrative web site via the WAN, and from there transits through device drivers module , O\/S kernel  and PPP processing module . Once module  has provided requisite PPP processing, O\/S kernel  routes the resulting processed message to TCP\/IP processing module  (again for packet disassembly), then back through the O\/S kernel to virtual office software , via web server , for protocol translation into a form suitable for use by a desired office management process or application, and for subsequent routing to the appropriate office application server, if necessary. Outgoing information from the SEP, i.e., originating from an office management process or application server and destined to, e.g., the administrative web site but carried through the dial-up WAN connection flows in a reverse direction to that described in order to provide the opposite functionality. Specifically, for such outgoing information, software  first receives the information from the office management process or application server and then applies this information to web server  which, in turn, imparts HTTP processing of this message. The message then transits, via the O\/S kernel, to TCP\/IP processing module  and PPP processing module  prior to be routed, via device drivers , to the V.90 fax modem for transmission, via dial-up WAN connection , to the user browser. Note that sessions originating from the SEP, such as sessions to the administrative web site from the management process in the SEP, would follow essentially the same outgoing and incoming paths, except that they would not go through the Apache web server.",{"@attributes":{"id":"p-0096","num":"0095"},"figref":"FIG. 4","b":"400"},"As shown, software  contains four office application modules: file sharing application module , e-mail application module , thin-client application module  and administration module ; along with multiplexor .","In general, each of the modules accepts as input, in one direction, user interaction data, in the form of user URI\/URL inputs and form data provided via HTTP\/secure HTTP or in the form of keystrokes, mouse clicks, etc. encoded via a transport protocol, such as AIP, (optionally secured by SSL) for the thin-client support and generates a message, in an appropriate application protocol, containing this data to a corresponding office application. Each such module also operates in the reverse direction by accepting output information, such as a screen shot or data list, produced by its corresponding office application and converting that information, from its application protocol, into a graphical HTML page in a secure HTTP response or into a transport protocol, such as AIP, secured by SSL for thin-client support for transmission to and rendering, as a web page, by the user browser. Thus, each of these modules acts both as a bridge between the user and a specific one of his(her) office applications and as a protocol translator to enable bi-directional, secure, web-based, real-time communication to occur between user browser  and that particular office application.","File-sharing application module  (described in detail below in conjunction with ) interacts with a client file handler (specifically a Linux \u201cSAMBA\u201d module which is an open source software component that implements a NET-BIOS Windows Networking client on a Linux O\/S to interact with Windows based file servers) in order to provide user file information, such as listings of desired directories, and permit the user to copy, move and delete files, as desired.","E-mail application module  (described in detail below in conjunction with ) interacts with a client e-mail handler (specifically an IMAP client) to access and retrieve user e-mail stored on an e-mail server, such as a MICROSOFT\u00ae EXCHANGE\u2122 server, as well as to manipulate stored e-mail residing in user's e-mail folders (Inbox, Outbox, Sent Mail and the like) on that server. In terms of message reception, module  provides a list of received messages, typically with address and truncated content information\u2014as typically occurs in e-mail clients (such as in MICROSOFT\u00ae OUTLOOK\u2122 e-mail client program; \u201cMICROSOFT\u00ae OUTLOOK\u2122\u201d is a trademark of the Microsoft Corporation of Redmond, Wash.) and, once displayed, permits the user to select, and separately and fully display each message, as desired. This module also permits the user to send outgoing e-mail to and through that server.","Thin-client application module  (described in detail below in conjunction with ) interacts, through the remote desktop protocol (RDP), with a client application program (e.g., MICROSOFT\u00ae WORD\u2122, a word processing application software, MICROSOFT\u00ae EXCEL\u2122, a spreadsheet software application, or other application program; \u201cMICROSOFT\u00ae WORD\u2122\u201d and \u201cMICROSOFT\u00ae EXCEL\u2122\u201d are trademarks of the Microsoft Corporation of Redmond, Wash.) being hosted on server . Module  receives user mouse clicks and keystrokes from the user browser, in AIP form, and passes that information, via RDP, to the client application program to control its execution. In return, this module obtains graphical output displays, as screen shots, generated by the client application program and in RDP form, and converts those screen shots into AIP form and then transmits AIP messages, containing the screen shots, back to the user, specifically the user browser for rendering thereat.","Administration module  maintains lists of user names and passwords and other information necessary to permit controlled, secure, remote access to the virtual office functionality as well as to properly monitor its ongoing operation. This module interacts through web server  and contains a conventional internal database and associated processes (all of which are not shown but well known) to maintain lists (including establishing initial lists and updating them as needed) of authorized user names and passwords, and, based on login information supplied by a user then seeking remote access, determine whether that user is to be permitted to access virtual office functionality and, if so, to enable such access. This module also alerts administrative web site  (see ) if, as a result of its monitoring tasks, it detects any abnormal operation for any of the virtual office functionality. Since this module is not particularly relevant to the present invention, we will not discuss it in any further detail.","Multiplexor  passes each outgoing message from each of the modules destined to the user to web server  or directly to TCP\/IP module  for the thin-client processing, as well as each incoming message from the user, as received by the web server or directly from the TCP\/IP module, to an associated one of the application modules. Communication between each of applications , ,  and , and multiplexor  is symbolized by lines , ,  and , respectively; while communication between the multiplexor and the web server is symbolized by line  and communication between the multiplexor and the TCP\/IP module (via the O\/S kernel) is symbolized by line .",{"@attributes":{"id":"p-0104","num":"0103"},"figref":["FIG. 5","FIG. 4"],"b":["420","400"]},"Module  contains SAMBA component , file sharing front end component  and HTML pages .","SAMBA component  is a conventional open source LINUX component that implements a NET-BIOS Windows Networking client for interacting with a Windows remote file server, here file server  on LAN . File sharing front end  is itself formed of state machine  and user interaction component  which communicate with each other through an application programming interface (API) as symbolized by line .","User interaction component  obtains, as symbolized by line , user interaction data, i.e., URL\/URI selection and form input, incoming from multiplexor  and contained in secure HTTP requests provided by user browser , representative of a user request to file server . Component  extracts the information from these web pages. This request can take the form of, e.g., the user clicking, through his(her) user browser, on a displayed icon in order to obtain a network environment (\u201cnetwork neighborhood\u201d) listing for the LAN or a directory or sub-directory listing for a particular computer then connected to the LAN. Once component  obtains sufficient user interaction data to issue the request to the file server, this component then translates this interaction data into a corresponding request to state machine . The state machine, in turn, interprets this request into a sequence of specific commands, by issuing one command at a time based, where appropriate, on a immediately prior response from the file server. In that regard, state machine  applies, as symbolized by line , a command to SAMBA component  which directly interacts, over the LAN and as symbolized by dashed line , with file server . File server  provides its response to that command back to SAMBA component  which, in turn, provides that response to state machine . Based on each response it receives, via SAMBA component  and via line , from file server , state machine  will react accordingly and could issue another command, via the SAMBA component, to the file server for additional data which the state machine then needs to fulfill the user request or, if all such data has then been received, construct a suitable response containing that data (if any) and provide it, via API , to user interaction component . Once the data has been provided to component , that component will retrieve, based on the nature of the user request and as symbolized by line , a corresponding stored HTML template page from stored pages  and populate that template page with the data returned in the list. Component  then returns, here symbolized by line , a resulting populated HTML page, via multiplexor , to web server  for transmission, via HTTP, to user browser  for rendering thereat.",{"@attributes":{"id":"p-0108","num":"0107"},"figref":"FIG. 16","b":["1600","15","420","1610"]},"As depicted in screen shot , a network neighborhood, showing various computers then available on the LAN, appears in graphical form as a vertical list in left panel  with each computer being represented by an icon and its machine name. Should a user click on any icon in the left panel, user interaction component  will generate, based on information it receives from state machine  and originating from file server , a hierarchical display under that icon, in effect expanding that hierarchy one level, to show a next lower level in the hierarchy, and so on. Hence, all the directories for the machine represented by the icon will be displayed directly under that icon and appropriately indented and graphically linked to show their hierarchical relationship. The contents at that lower level of the hierarchy or any user selected item at that level will be displayed in right panel . The user can then click on any directory at that hierarchical level, on either the left or right panels, to gain a listing of the next lower hierarchical level, and so forth, with the further expanded hierarchy shown in left panel  and the contents of any selected item at that lower level in that hierarchy shown in right panel . At a lowest level of the hierarchy, panel  will depict the sub-directories at that level with panel  depicting the files for a selected sub-directory thereat. By successively clicking on an icon in the hierarchy, the user can drill down the hierarchy to examine a particular sub-directory of interest on a desired networked machine available on LAN . The illustrative display in screen shot  specifically depicts a high level of the hierarchy prior to the user selecting any of the network-connected computers for further examination. Further, by clicking on an \u201cUp\u201d, \u201cNew Folder\u201d, \u201cPaste\u201d or \u201cUpload\u201d button in display area , the file sharing application module will display a next higher level of the hierarchy, create a new folder (or file), paste a folder into a desired location in the hierarchy or upload a selected folder residing on the remote client PC to a desired location at the file server, respectively. Note that popup menus are provided, at particular levels of the hierarchy, to allow for features such as the copying, deleting, etc. of files and directories at each such level.","To gain improved understanding of the operation of file sharing application module , the reader should now simultaneously refer to .",{"@attributes":{"id":"p-0111","num":"0110"},"figref":["FIG. 6","FIG. 7"],"b":["600","522","700","420","78"]},"As shown, state machine  contains four distinct states: null state , command interpretation state , waiting for response state  and response construction state .","Initially, state machine  resides in null state . One a user clicks on the \u201cMy File\u201d icon in the Netilla virtual office graphical interface (e.g., displays ,  or  shown in ,  or , respectively), this operation being symbolized by line , user browser  issues, symbolized by line , an appropriate HTTP request instruction (\u201cHTTP_GET_REQ (\/hosts)\u201d) to fetch a name of every host then on the LAN. File sharing front end , specifically user interaction component  (see ), receives this command, and in response thereto, issues a command to the state machine, such as \u201cGET_SERVER_LIST\u201d, to identify all the file servers on LAN . State machine  then transitions as symbolized by path  (in ), to command interpretation state . While in this state, state machine  interprets the \u201cGET_SERVER_LIST\u201d command to yield a sequence of commands to SAMBA component  to query component  for the desired information. In particular, for the \u201cGET_SERVER_LIST\u201d command, command interpretation state  will first issue, as symbolized by line , a \u201cNMBLOOKUP -M-\u201d command to SAMBA component  to query file server  for a list of master browsers then operating on the LAN. A master browser identifies a computer that contains a list of names of all the computers then accessible on the LAN for a particular domain. The SAMBA component will, in turn, send appropriate commands to file servers  to satisfy this query. Once this command is issued, state machine  will then transition, as symbolized by line , to state  wherein the state machine will simply wait, as represented by line , for a response from the file servers as provided by SAMBA component . Eventually, the file server responds to the SAMBA query through which, as a result, SAMBA component  provides, as symbolized by line , a list of the master browsers for each domain on the LAN to state machine  within file sharing front-end component . In response, state  will determine if the state machine has received all the responses from the file server needed to satisfy the user request or whether additional information is necessary. If the latter occurs, then state  will transition, as symbolized by line , back to command interpretation state  for the latter state to issue the next SAMBA command in sequence, and so forth. In the present example, once the list of master browsers is returned, command interpretation state  issues, as symbolized by line , an \u201cSMBCLIENT -L hostname\u201d command where \u201chostname\u201d is the name of the master browser for a particular domain on the LAN. In response to this latest command, again state machine  transitions, as symbolized by line , to state  at which the state machine remains (as symbolized by line ) until it receives an appropriate response from the file server via the SAMBA command. In response to this command, the file server returns a list of services, a list of shares and a list of computers associated with the corresponding domain, which the SAMBA component in turn, passes, as symbolized by line , back to file sharing front end  and specifically to state machine  therein. At this point, all the needed information has been received for this particular user request. Hence, state machine  transitions, as symbolized by line , to response construction state . Through this state, state machine  constructs a linked list that contains all the information supplied by the file server in response to the \u201cGET-SERVER-LIST\u201d message (which was originally sent as a result of the receipt of the \u201cHTTP_GET_REQ (\/hosts) message\u201d and provides that list back to user interaction component . Once this occurs, state machine  returns, as symbolized by line , back to null state . Once the user interaction component receives the linked list, it accesses an appropriate HTML template web page and populates that page with the information provided in the response. After the page is fully constructed, the user interaction component sends, as symbolized by line , that page back through multiplexor  to web server , via an \u201cHTTP_GET_RESP\u201d message, for transmission to user browser  to depict a graphical rendering of the hosts specified by the file server, e.g., a page of the form shown by screen shot  for the typical display shown in . Response construction state , shown in , is also entered from state  if excess time, i.e., a timeout condition, has occurred once a command has been issued to the SAMBA component without any corresponding response therefrom (which could be as a result of a problem with the SAMBA component, with the LAN itself, or with server(s) on the LAN. As such, state  will specify this timeout condition to the user interaction component which, in turn, will construct and then transmit a web page to user browser  notifying the user of an timeout\/error condition.","Not only can the user display files through interaction with user browser , but also, depending upon current permissions which this user then has, (s)he can move or copy selected files from one directory (sub-directory) to another, or delete such files. File sharing module , including state machine , operates in a very similar manner as that described above, with identical states though different commands, to execute file copy, move and delete operations through file server  in response to corresponding remote user interactions through user browser .",{"@attributes":{"id":"p-0115","num":"0114"},"figref":["FIG. 8","FIG. 4"],"b":["430","400","430"]},"Module  contains IMAP (Internet Message Access Protocol) client component , e-mail front end component  and HTML pages . As can be appreciated, module  has a very similar architecture to file sharing application module  shown in , as well as to thin-client application module  shown in  (and discussed in detail below).","IMAP client component  is a conventional e-mail client component that provides rich interaction with a mail server, such as MICROSOFT\u00ae EXCHANGE\u2122 server, that supports the IMAP4 protocol. For example, the IMAP client downloads and displays stored e-mail messages, residing on the mail server, from an Inbox associated with a user. The IMAP client then permits the user to move and copy mail messages from one folder at the server associated with that user (e.g., Inbox) to another such folder (e.g., Sent), as well as delete any such messages from any such folder. E-mail front end  is itself formed of state machine  and user interaction component  which communicate with each other through an application programming interface (API) as symbolized by line .","User interaction component  (in a similar manner as does user interaction component  described above) obtains, as symbolized by line , user interaction data, i.e., form input data and URI\/URL selections, incoming from multiplexor  and contained in HTTP requests provided by user browser , representative of a user request to e-mail server . Component  extracts the information from these requests. This request can take the form of, e.g., the user clicking, through user browser , on the \u201cMy E-mail\u201d tab to access and list the user's e-mail then residing in his(her) Inbox on the e-mail server. Such an interaction results in the user browser issuing an \u201cHTTP_GET_REQ (\/Inbox)\u201d message (request) to obtain an HTML page in response (via an HTTP Response) that contains the desired list. Further, once this page and its list are returned and graphically rendered by the user browser, subsequent user interaction can take the form of the user clicking on an icon associated with a different folder of e-mail messages to obtain a list of the messages, in abbreviated form, in that folder; as well as the user clicking on any such entry in any such list then being displayed to expand that rendered version of the message. Similarly, the user, through appropriate mouse manipulation, can drag and drop, hence rearranging, e-mail messages from one of his(her) folders to another.","Once component  obtains sufficient user interaction data from the user\u2014which in the simple case of the user clicking on the \u201cMy E-mail\u201d tab is the HTTP request message, via web server  (see ) and multiplexor , to issue a request to the e-mail server, this component then translates this interaction data into a corresponding request to state machine , shown in . The state machine, in turn, interprets this request into a sequence of specific commands, by issuing one command at a time based, where appropriate, on a immediately prior response from the e-mail server. In that regard, state machine  applies, as symbolized by line , a command to IMAP client component  which directly interacts, as symbolized by dashed line  and over LAN , with e-mail server . E-mail server  provides its response to that command back to IMAP client component  which, in turn, provides, via line , that response to state machine . Based on each response it receives, via IMAP client component , from e-mail server , state machine  will react accordingly and issue another command, via the IMAP client component, to the e-mail server for additional data which the state machine then needs to fulfill the user request or, if all such data has then been received, construct a suitable response containing that data and provide it, via API , in the form of a linked list to user interaction component . Once the linked list has been provided to component , that component will retrieve, based on the nature of the user request and as symbolized by line , a corresponding stored HTML template page from stored pages  and populate that template page with the data returned in the list. Component  then returns, here symbolized by line , a resulting populated HTML page, via multiplexor , to web server  for transmission, via HTTP, to user browser  for rendering thereat.",{"@attributes":{"id":"p-0120","num":"0119"},"figref":"FIG. 17","b":["1700","15","420","1710"]},"As depicted in display , a vertical list of the e-mail folders available for that user is graphically provided in left display panel . These folders include \u201cInbox\u201d, \u201cDrafts\u201d, \u201cSent Items\u201d as well as other folders, such as \u201cSpam\u201d, including those which the user has specifically defined. When this capability is first invoked, a listing of the user's e-mail in his(her) Inbox folder is displayed in abbreviated form in mail list (upper right) display area  as entries in a vertical table with contents of a most recent entry in that folder being displayed in mail content (lower right) display area . Here, that table contains only one illustrative entry with its specific contents being displayed. Should the mail list contain multiple entries, the user can click on any such entry. In response, user interaction component  will display the contents of the message, associated with that entry, in display area . The specific folder then being displayed is graphically indicated through an change (here being a small overlaid envelope symbol) in its displayed icon (as shown for the Inbox icon). Similarly, if the user clicks on an icon for a different folder, then display area  will list the contents of that folder from which the user can select, again by clicking, a desired entry to reveal its contents in display area . In addition, through tool , specifically selection of either a \u201cMove\u201d or \u201cCopy\u201d link within links  and selection of a desired folder through pull-down menu , the user can move or copy the presently displayed e-mail message to the selected folder. Contacts display area  provides various folders which contain contact information, e.g., names, addresses\u2014both postal and e-mail, telephone and facsimile numbers, and other information stored and organized by that user in various folders. Further, when the user clicks on a \u201cNew Mail\u201d, \u201cReply\u201d, \u201cReply All\u201d or \u201cForward\u201d button in display area , the e-mail application module will correspondingly invoke associated functionality to compose a new e-mail message; compose a reply message to the sender of a message then being displayed in area  or to the sender and all recipients of that message, or forward the message then being displayed in area  to a desired recipient, such as those in any of the contacts folders. By clicking on a \u201cPrint\u201d or \u201cDelete\u201d button in area , the e-mail application module will invoke associated functionality to print the e-mail message then selected in area  or displayed in area , or to delete that message, respectively. Lastly, when the user clicks on the \u201cSend\/Rec\u201d, \u201cAddresses\u201d, \u201cPurge\u201d or Find\u201d buttons, the e-mail application module will correspondingly invoke functionality to toggle its mode from receiving to sending e-mail, list addresses through a conventional address book capability, purge a mail folder then being displayed of its entries, and finally undertake a search through an e-mail folder then being displayed for a desired message.","To gain improved understanding of the operation of e-mail application module , the reader should now simultaneously refer to .",{"@attributes":{"id":"p-0123","num":"0122"},"figref":["FIG. 9","FIG. 10"],"b":["900","822","1000","430","76"]},"As shown, state machine  contains four distinct states (similar to those in state diagram  shown in  for state machine  in file sharing application module ): null state , command interpretation state , waiting for response state  and response construction state .","Initially, state machine  resides in null state . Once a user clicks on the \u201cMy E-Mail\u201d icon in the Netilla virtual office graphical interface (e.g., displays ,  or  shown in ,  and , respectively), this operation being symbolized by line , user browser  issues, as symbolized by line , an appropriate HTTP request instruction (\u201cHTTP_GET_REQ (\/Inbox)\u201d) to fetch the contents of the user's Inbox. The e-mail application module, now acting through the IMAP client, interacts with the e-mail server, via the IMAP protocol, to retrieve a message list for the user's Inbox.","In doing so, e-mail front end , specifically user interaction component  (see ) receives this HTTP command, and in response thereto, issues a command, \u201cGET_INBOX_LIST\u201d, to state machine . State machine  then transitions as symbolized by path , to command interpretation state . While in this latter state, state machine  interprets the \u201cGST_INBOX_LIST\u201d command to yield a sequence of commands to IMAP client component  to query e-mail server  for the desired inbox mail list.","For this command, command interpretation state  will first issue, as symbolized by line , a \u201cA101 SELECT INBOX\u201d command to the e-mail server to select the proper inbox on the e-mail server. Term \u201cA101\u201d (as well as similar term \u201cA102\u201d, and so forth) is a transaction tag assigned to this particular interaction between the state machine and the e-mail server such that server responses can be paired, by the state machine, with appropriate IMAP client requests. Identical circled numerals are shown in  in order for the reader to visually correlate specific inter-component messages shown in communications  with their corresponding events (including state transitions) in state diagram . Once the \u201cSELECT INBOX\u201d command is issued, state machine  will then transition, as symbolized by line , to state  wherein the state machine will simply wait, as represented by line , for a response from the e-mail server as provided by IMAP client component . Eventually, the e-mail server responds to the \u201cSELECT inbox\u201d command through which, as a result, IMAP client  provides, as symbolized by lines  and , an indication of the number of messages in the user's Inbox. In the example shown in , the response is \u201c*3 EXISTS\u201d which signifies that the Inbox contains three messages. This is followed, as symbolized by line , by a \u201cA101 OK [READ-WRITE] SELECT completed\u201d response from the IMAP Server indicating that the A101 transacting has been completed, and that the Inbox can be read or written during this session. In response, state  will determine if the state machine has received all the responses from the e-mail server needed to satisfy the user request or whether additional information is necessary. For the example shown, at this point in the processing, state  will determine that messages need to be fetched from the e-mail server. Accordingly, once the \u201cA101 OK [READ-WRITE] SELECT completed\u201d message is received, state  will transition, as symbolized by line , back to command interpretation state  for the latter state to issue subsequent IMAP commands as necessary. Illustratively, here, command interpretation state will issue, as symbolized by lines  and , a \u201cFETCH 1:3\u201d command to the e-mail server to fetch the three queued messages in the Inbox. Here, tag \u201cA102\u201d is attached to this message to uniquely define this interaction. Included in the \u201cFETCH\u201d command are parameters indicating that \u201cdate\u201d and \u201cdate from field\u201d data from the header for each message should be fetched as well. At this point, the e-mail server issues individual fetch responses, here shown as \u201c*1 FETCH\u201d, \u201c*2 FETCH\u201d and \u201c*3 FETCH\u201d and as represented by lines ,  and  in communication , back to the e-mail front end. During this time, state machine  will remain in state command interpretation state  as indicated by line . Each response contains the fetched information for a corresponding e-mail message in the user's Inbox. Once all three messages have been successfully fetched, the e-mail server, as indicated by line , issues an \u201cA102 OK FETCH\u201d message which indicates the completion of this transaction. In response to this completion message, state  will determine that all the necessary responses have been received from the e-mail server. Hence, state machine  transitions, as symbolized by line , to response construction state . Through this state, state machine  constructs a linked list, here list , that contains all the user messages supplied by the e-mail server in response to the \u201cHTTP_GET_REQ (\/Inbox)\u201d message and provides that list back to user interaction component . Once this occurs, state machine  returns, as symbolized by line , back to null state . Once the user interaction component receives the linked list, it accesses an appropriate HTML template web page and populates that template page with the information provided in the response to yield, e.g., a page of the form shown by display page  shown in  (with an Inbox icon in a left panel and titles to individual e-mail message in a right panel). After this page is fully constructed, the user interaction component sends, as symbolized by line  in , that page back through multiplexor  to web server , via an \u201cHTTP_GET_RESP\u201d message, for transmission to user browser  to depict the web page providing the e-mail messages downloaded from the e-mail server. Response construction state  is also entered from state  if excess time, i.e., a timeout condition, has occurred once an IMAP command has been issued to the e-mail server without any corresponding response therefrom. As such, state  will specify this timeout condition to the user interaction component which, in turn, will construct and then transmit a web page to user browser  notifying the user of an timeout\/error condition.","Not only can the user download his e-mail messages through interaction with user browser , but also, as discussed above, the user can move or copy selected e-mail messages from one e-mail folder to another, or delete any such messages. E-mail application module , including state machine , operates in a very similar manner as that described above, with identical states though different commands, to execute e-mail copy, move and delete operations through e-mail server  in response to remote user interactions through user browser .","Furthermore, the user can also send an outgoing e-mail message through appropriate interaction with user browser  and particularly using e-mail application module . Specifically, whenever the user clicks on \u201cNew Mail\u201d button in area  on e-mail display screen  shown in , user interaction component  shown in  will interpret that response, as originated from user browser , and access a correct HTML e-mail form from stored web pages  and return that form, as symbolized by line , back to the user browser to be rendered to the user. Once the user appropriately completes the form, (s)he will click on the \u201cSend\/Rec\u201d button in area  to send the message. This interaction, originating from user browser  and when received by user interaction component  shown in , will cause that component to receive the form containing the e-mail from the user browser. Once the form is so received, user interaction component  will extract the content, including the sender and recipient addresses, of the particular e-mail message from the received form and then issue a command to state machine , via API , to send that content out to the e-mail server for transmission. This command will be a \u201cSEND_MAIL_REQ\u201d which will contain as a parameter the e-mail to be sent. To accomplish this, state machine  interacts with two components to actually send this outgoing e-mail message: SMTP (simplified mail transport protocol\u2014conventional and not shown) and IMAP client . The SMTP interaction provides the e-mail message and actually instructs the e-mail server to transmit the e-mail onward to its destination. Once this interaction concludes, state machine  interacts with the IMAP client in order to update the \u201cSent Mail\u201d folder, maintained on the e-mail server, for that particular user to include this message in its listing of sent e-mail messages. The interaction involving state machine , via the IMAP client, and the e-mail server is very similar to that used to read the Inbox, though different commands are used in order to write a message into the user's \u201cSent Mail\u201d folder rather than read the user's \u201cInbox\u201d folder. Once state machine  has successfully sent the e-mail to the server for transmission, the state machine then sends a positive response, i.e., an appropriate \u201cSEND_MAIL_RESPONSE\u201d, to user interaction component . If this user interaction component maintains a local HTML page containing titles of all e-mails in the user's \u201cSent-Mail\u201d folder, component  updates that HTML page to include the message that has just been sent and then supplies that page, as here symbolized by line , back to user browser  for rendering to the user. Alternatively, the user interface component can also access, as symbolized here by line , a predefined HTML page, from stored pages , that merely contains a confirmation that the e-mail message was successfully sent and provide that particular web page, here too symbolized by line , back to web server  for transmission, via HTTP, to user browser  for rendering to the user as appropriate visual confirmation that his(her) message was transmitted. If an external e-mail server is not used, then the IMAP client interacts with Sendmail module  (shown in ) instead.","Though we have described the interaction for both the file sharing and e-mail application modules as illustratively user-initiated, i.e., starting with a user request entered at user browser , the interaction can be server-initiated as well, with either file server  or e-mail server , via SAMBA component  or IMAP client , respectively. In this case, as will be described below in connection with RDP client  (in conjunction with ), a server-initiated request will be directed to the corresponding state machine, be processed by that state machine, and if appropriate, forward resulting data onward to the corresponding user interaction component to be incorporated into an appropriate web page and then transmitted to user browser  for rendering to the remote user. Alternatively, in some cases, once the state machine has processed the request, the state machine may, depending on the nature of the data supplied by the server, generate further commands to the server. Though the specific commands and transition events will likely vary, the state processing will be quite similar to that shown and described herein.",{"@attributes":{"id":"p-0131","num":"0130"},"figref":["FIG. 11","FIG. 4"],"b":["440","400","440","70","440","440","1180","1180"]},"Module  contains RDP component , thin-client front end component , stored HTML pages  and user database .","Thin-client front end  is itself formed of state machine  and user interaction component  which communicate with each other through an application programming interface (API) as symbolized by line . State machine , in a similar fashion to state machines  and  (in file sharing front end  and e-mail front end  shown in , respectively), interacts with an RDP client component  which, in turn, interacts with client applications server . User interaction component , in a similar manner to user interaction components  and  (in file sharing front end  and e-mail front end  shown in , respectively), interacts with user browser  and passes and receives application information to and from the state machine. Protocol engine , discussed below, receives user interaction data, i.e., user mouse clicks and keystrokes in the form of AIP messages, from user browser  that are related to a client application program then executing on server  and sends screen updates to the user browser for display thereat.","RDP component  is conventional and implements a client side of the RDP. Specifically, it interacts directly with client application server  using RDP by translating commands from a format used by state machine  into the RDP for application to server  and translating responses received from this server into an appropriate format for use by state machine .","User interaction component  contains generic web page module  and protocol engine . Generic web page module  responds to a request from the user, and specifically user browser , that does not directly involve the execution of a thin-client application program. For example, when the user first clicks on the \u201cMy Apps\u201d tab, an HTML page that contains a Java applet that controls input\/output to executing thin-client application programs, using the AIP protocol, is downloaded to the browser and then instantiated under the browser to become Java applet .","As shown in , user interaction data in the form of user mouse clicks and keystrokes is provided by user browser  and specifically through execution of conventional internal Java applet  that encodes this data into the AIP protocol. Additionally, control information is passed between the Java applet and the SEP to enable the applet to, for example, correctly display the icons for the client application programs that a particular user can access. For the discussion that follows, this control data is also sent via the AIP protocol. In general, this data could be sent by the same protocol as is used for transfer of the user interaction data in the form of mouse clicks and keystrokes, or by some alternate protocol.","In any event, user interaction component  obtains, as symbolized by line , AIP message data incoming from multiplexor . This message can take the form of a message indicating that a user has clicked on one of his(her) displayed client application program icons to invoke that particular application. Protocol engine  within component  extracts the interaction data from the AIP message and applies it to state machine . The state machine, in turn, provides, as symbolized by line , this command to RDP component  which converts it into a corresponding RDP message. Component  then sends that RDP message, over the LAN and as symbolized by dashed line , to client application server . Server  then extracts the interaction data from the RDP message and applies it to the corresponding client application program then executing, or in the case of a user initially clicking on a client application program icon displayed by the user browser, launches that application on the server. The resulting graphical display produced by the application is then returned by the server, within an RDP message and also as symbolized by dashed line , back to RDP component . This component, in turn, provides the display data to state machine . The state machine will react accordingly and provide that data, via API , to user interaction component . This component, through protocol engine , converts that display data (screen shot) into an AIP message and then transmits that message, via multiplexor  and web server , to user browser  to update the application display then being rendered thereat. Within the browser, Java applet  converts the AIP message into an appropriate display to the user within the window assigned for this particular instance of the remotely executing client application program.","Protocol engine  does not always need to interact with state machine . For example, when Java applet  sends a request to the protocol engine for a list of client application programs to which the user can access (via the control portion of the AIP protocol or via a separate control protocol), the protocol engine can refer, as symbolized by line , to local user database  for that application list. Once the list is returned to engine , that engine, in turn, will instruct the Java applet as to which specific applications to graphically display to the user. Alternatively, rather than accessing local user database , protocol engine  could access a non-local database through a conventional protocol, such as LDAP.","When the user clicks on the \u201cMy Apps\u201d tab as displayed by user browser  in order to invoke thin-client application program hosting, a display similar to that shown in screen shot  depicted in  is rendered as a result. Visual feedback of that selection is again illustratively provided through a highlighted background for this tab in display region . Those specific client application programs to which the user can access are displayed through separate graphical icons  situated in display area . The user can then click on any of these icons to remotely launch the associated client application program in a separate browser window through which the user can fully interact with that application.","To gain improved understanding of the operation of thin-client application module , the reader should now simultaneously refer to , B and .",{"@attributes":{"id":"p-0141","num":"0140"},"figref":["FIGS. 12A and 12B","FIG. 13"],"b":["1200","1250","1122","1126","72","1110","15","1300","440","72"]},"As shown, state machine  contains four distinct states (similar to those in state diagrams  and  shown in  for state machine  and  in file sharing application module  and e-mail application module , respectively): null state , command interpretation state , waiting for response state  and response construction state .","Initially, state machine  resides in null state . One a user clicks on the \u201cMy Apps\u201d icon in the Netilla virtual office graphical interface (e.g., displays ,  or  shown in ,  and , respectively), this operation being symbolized by line , user browser  issues, as symbolized by line , an appropriate HTTP request instruction (\u201cHTTP_GET_REQ (\/Apps)\u201d) to fetch a list of the client application programs which that user can access. User interaction component  receives this command, and in response thereto, issues, as symbolized by line , an HTTP_GET_RESP message containing an HTML page with an embedded Java applet. Once downloaded into user browser , this Java applet is instantiated by the browser as Java applet  (see ) and then issues, as symbolized by line , a query, \u201cUser_Desktop_Query\u201d, to thin-client front end  for a list of the user's accessible hosted client application programs. As a result of this query, component  in thin-client front end  returns, as symbolized by line  (in ), a response, \u201cUser_Desktop_Response\u201d, based on stored user information contained within user database , containing a list of those application programs. Thereafter, Java applet  executing in the browser displays an icon on user browser  for each of these application programs. At this point, the user, being provided with a graphical display such as display  shown in , can click on any of these icons to invoke the corresponding client application program.","If the user then clicks on any such icon, e.g., that associated with the MICROSOFT\u00ae WORD\u2122 program (a word processing application software), this interaction being symbolized by line , Java applet  spawns a new browser window (which the applet controls) for use as a user display area for that particular remotely hosted application program. In addition, then user browser  provides, as symbolized by line , a \u201cSession_Start\u201d command to thin-client front end . This command includes the name of an application server (server  as shown in ), appropriate flags, a domain within which the application server runs, password of the user, the name of the application program (here \u201cWord\u201d), a name of a working directory and other related parameters needed to properly and remotely execute the application program (including fully defining its user environment).","In response to the \u201cSession_Start\u201d command, state machine  transitions, as symbolized by line  in , from null state  to command interpretation state  where it processes this command. Similar to , identical circled letters, rather than numerals, are shown in , B and  in order for the reader to visually correlate specific inter-component messages shown in communications  with their corresponding events (including state transitions) in state diagrams  and . Specifically, while in state , the state machine issues, as symbolized by line , an \u201cRDP_CONNECT_REQ\u201d request message to client RDP component  to request a session with a particular client application server. This request contains, e.g., the server, directory, application program (e.g., MICROSOFT\u00ae WORD\u2122, a word processing application software,) and other information provided, in the Session_Start command, to the thin-client front end. Once this message is issued, state machine  transitions, as indicated by line , to waiting for response state , waiting for a response from the client application server, e.g., server  shown in .","Once the server has established the requested application session, the server issues an appropriate message to client RDP component  as shown in , which, in turn, provides, as symbolized by line , an RDP connect response message, \u201cRDP_CONNECT_RESP\u201d, to the thin-client front end. In response to this RDP message, state machine  remains, as symbolized by line , in this state to determine if this is the only response that the state machine has been expecting from the client application server or not. If it is, as is the case here for session startup, then state machine  transitions, as indicated by line , from state  to response construction state . Once in the latter state, state machine  constructs an appropriate session start response message. i.e., \u201cSESSION_START_RESP\u201d, to user interaction component  after which the state machine transitions back, as symbolized by line , back to null state . As a result of this response message, the user interaction component sends a \u201cSession_Start_Resp\u201d message, as symbolized by line , to user browser  and specifically to Java applet  executing thereunder to indicate that the desired application session has been established. In essentially the same manner as just described, subsequent user-initiated interactions, i.e., mouse clicks and keystrokes, with the executing application program will be provided by the user browser and processed through the thin-client front end and translated from AIP into appropriate RDP messages which, in turn, are provided to client application server  to control execution of that application program.","Returning to the example shown in  for startup of an remotely hosted thin-client application program session, once the application session has been established and the application invoked at server , the server will provide RDP client component  with an initial graphical display screen. In response, RDP component  will issue, as symbolized by line , an \u201cRDP_PROCESS_BITMAP_UPDATES (stream)\u201d message containing screen bitmap display data for display. In response to this RDP message, state machine  will transition, as symbolized by line  in , from null state  to command interpretation state . In this latter state, the state machine will simply pass this bitmap data onward to user interaction component  within thin-client front end  such that this data can be forwarded to the user browser for rendering thereat. As such, state machine  will issue, as symbolized by line , an image update command, \u201cIMAGE UPDATE\u201d, to the user interaction component, and, as symbolized by line , transition back to null state . In response to this state machine command, the user interaction component performs certain initial processing of this bitmap data. In particular, given limited display capabilities of a Java virtual machine executing in user browser , this processing includes operations not supported by that virtual machine, such as, e.g., plane masking, logical operations and others. In addition, the user interaction component, through use of protocol engine , will also determine if Java applet  has cached any portion of the display that can be reused in the updated display, e.g., a glyph representing a character, hence eliminating a need to resend that portion so as to conserve transmission bandwidth and expedite update time by user browser . At the conclusion of this processing, user interaction component  within thin-client front end  will send, as symbolized by line , a \u201cDisplay_Screen (Image)\u201d message containing the update display data to user browser  for rendering thereat in the corresponding window spawned to support this particular client application program. In the same manner as described, subsequent server-initiated interactions, i.e., bitmap display screens, for this program will be provided by client application server  and processed through the thin-client front end and translated from RDP into appropriate AIP messages which, in turn, are provided to user browser  to appropriately update the display in the corresponding application window.","Though we have described client interaction component  as utilizing protocol engine  and user browser  as utilizing Java applet , both to support the AIP protocol in order to advantageously increase bandwidth efficiency, these components could use native RDP all the way to the user browser.","Furthermore, though we have described our invention as providing remote office functionality in terms of file access, e-mail and thin-client application hosting, our inventive teachings can be used with any other additional office-based application that is to be provided to remote users over a network connection via a browser. In that regard, another application module would be implemented and incorporated into virtual office software  shown in FIG. \u2014and similar to those described above\u2014to provide necessary bi-directional, real-time protocol translation of user interaction data in secure HTTP (or a particular transmission protocol, if used in lieu of secure HTTP) into a particular protocol used by that other office-based application, and convert resulting output data (whether graphical or in another form) provided by that application-specific protocol into secure HTTP (or the intermediate transmission protocol) for transmission to the user browser and rendering, as a web page, to the user situated thereat. As such, by now, the reader can clearly appreciate that our inventive teachings are not limited to merely providing remote access to just office-based file access, e-mail and thin-client application hosting functions, though these functions are likely to be those most often appearing and needed in the processing environments for which the present invention will likely see use.","Although a single embodiment, with various modifications, which incorporates the teachings of the present invention has been shown and described in considerable detail herein, those skilled in the art can readily devise many other embodiments that still utilize these teachings."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The teachings of the present invention can be readily understood by considering the following detailed description in conjunction with the accompanying drawings, in which:",{"@attributes":{"id":"p-0038","num":"0037"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 2","FIG. 1"],"b":"200"},{"@attributes":{"id":"p-0040","num":"0039"},"figref":["FIG. 3A","FIG. 2"],"b":["300","200"]},{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 3B","FIG. 3A"],"b":["300","200"]},{"@attributes":{"id":"p-0042","num":"0041"},"figref":["FIG. 4","FIG. 2"],"b":["400","200"]},{"@attributes":{"id":"p-0043","num":"0042"},"figref":["FIG. 5","FIG. 4"],"b":["420","400"]},{"@attributes":{"id":"p-0044","num":"0043"},"figref":["FIG. 6","FIG. 5"],"b":["600","522"]},{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 7","FIG. 1"],"b":["700","420","78"]},{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 8","FIG. 4"],"b":["430","400"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 9","FIG. 8"],"b":["900","822"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":["FIG. 10","FIG. 1"],"b":["430","76"]},{"@attributes":{"id":"p-0049","num":"0048"},"figref":["FIG. 11","FIG. 4"],"b":["440","400"]},{"@attributes":{"id":"p-0050","num":"0049"},"figref":["FIG. 12A","FIG. 11","FIG. 1"],"b":["1200","1122","72"]},{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 12B","FIG. 11","FIG. 1"],"b":["1250","1122","72","15"]},{"@attributes":{"id":"p-0052","num":"0051"},"figref":["FIG. 13","FIG. 1"],"b":["440","72","72","15"]},{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 14","FIG. 1"],"b":"20"},{"@attributes":{"id":"p-0054","num":"0053"},"figref":["FIG. 15","FIG. 1"],"b":["1500","15"]},{"@attributes":{"id":"p-0055","num":"0054"},"figref":["FIG. 16","FIG. 1"],"b":["1600","15","78"]},{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 17","FIG. 1"],"b":["1700","15","76"]},{"@attributes":{"id":"p-0057","num":"0056"},"figref":["FIG. 18","FIG. 1"],"b":["1800","15","72"]}]},"DETDESC":[{},{}]}
