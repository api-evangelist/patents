---
title: Defining time for animated objects
abstract: Systems and methods for synchronizing the playing of animation objects are presented. An animation object map may assign an animation object to each region of multiple regions of a viewing area. A synchronization shading map may assign a shade to each of the regions, where at least two of the shades assigned to regions differ in intensity. Playing each animation object may involve determining a start time for each of the regions. The start time for each particular region depends upon an intensity of a shade assigned to the particular region by the synchronization shading map, and ones of the regions having different shades differ in their respective start times based on a difference in intensities of shades assigned to those regions by the synchronization shading map. Playing of the animation object within a region begins at the start time determined for the region according to the synchronization map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08350858&OS=08350858&RS=08350858
owner: Adobe Systems Incorporated
number: 08350858
owner_city: San Jose
owner_country: US
publication_date: 20090529
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","Description of the Related Art","SUMMARY","DETAILED DESCRIPTION OF EMBODIMENTS","INTRODUCTION"],"p":["In the early days of animation, each frame in a video sequence was drawn by hand. To create the illusion of motion, the hand-drawn images were projected onto a screen in sequential order, rapidly enough to give the appearance that the elements in the individual frames were moving smoothly. Since those days, the graphic arts have evolved to include specialized computer software and hardware designed to produce video animation sequences.","One current conventional technique for producing video animation employs a timeline to define the exact times at which various images are set to appear, and the period of time for which they are to be shown. The manual placement of large numbers of video animation objects along such timelines can be laborious and time-consuming.","Another conventional method employs the manipulation of mathematical curves to control video animation sequences, requiring slope adjustments to accelerate or decelerate the speed of an animated object. This method can be non-intuitive and indirect.","Presets (ready-made animations) are also currently in use, but they tend to be inflexible, and to restrict the artist to a small number of pre-defined animated sequences over which the artist has limited control.","Various embodiments of systems and methods for synchronizing the playing of animation objects in several regions of a viewing area are disclosed. In one embodiment, a method may include a computer receiving an animation object map. The animation object map may assign an animation object to each region in a collection of regions of a viewing area. The method may further include receiving a synchronization shading map that assigns a shade to each region in the collection of regions of the viewing area. At least two of the shades assigned to regions in the collection of regions differ in intensity. The method may entail the computer playing, within each region of the collection of regions, the animation object assigned to the region by the animation object map. The playing may involve determining a start time for each of the regions in the collection of regions. The start time for each particular region depends upon an intensity of a shade assigned to the particular region by the synchronization shading map. Ones of the collection of regions having different shades differ in their respective start times based on a difference in intensities of shades assigned to those regions by the synchronization shading map. The playing may also encompass, for each region of the collection of regions, starting playing within the region the animation object that is assigned to the region by the animation object map, so that the playing of the animation object within the region begins at the start time determined for the region.","In one embodiment, a memory is coupled to a processor, and the memory stores program instructions executable by the processor to implement a playing module that may be configured to perform receiving an animation object map. The animation object map may assign an animation object to each region in a collection of regions of a viewing area. The playing module may further be configured to perform receiving a synchronization shading map that assigns a shade to each region in the collection of regions of the viewing area. At least two of the shades assigned to regions in the collection of regions differ in intensity. The playing module may also be configured to perform playing, within each region of the collection of regions, the animation object assigned to the region by the animation object map. The playing may include determining a start time for each of the regions in the collection of regions. The start time for each particular region depends upon an intensity of a shade assigned to the particular region by the synchronization shading map. Ones of the collection of regions having different shades differ in their respective start times based on a difference in intensities of shades assigned to those regions by the synchronization shading map. The playing may also involve, for each region of the collection of regions, starting playing within the region the animation object that is assigned to the region by the animation object map, so that the playing of the animation object within the region begins at the start time determined for the region.","Further embodiments of systems and methods for synchronizing the playing of animation objects in several regions of a viewing area are disclosed. In one embodiment, the system may include a computer-readable storage medium storing program instructions that are computer-executable to perform receiving an animation object map. The animation object map may assign an animation object to each region in a collection of regions of a viewing area. The program instructions may be further executable to perform receiving a synchronization shading map that assigns a shade to each region in the collection of regions of the viewing area. At least two of the shades assigned to regions in the collection of regions differ in intensity. The program instructions may encompass playing, within each region of the collection of regions, the animation object assigned to the region by the animation object map. The playing may include determining a start time for each of the regions in the collection of regions. The start time for each particular region depends upon an intensity of a shade assigned to the particular region by the synchronization shading map. Ones of the collection of regions having different shades differ in their respective start times based on a difference in intensities of shades assigned to those regions by the synchronization shading map. The playing may also involve, for each region of the collection of regions, starting playing within the region the animation object that is assigned to the region by the animation object map, so that the playing of the animation object within the region begins at the start time determined for the region.","While the present disclosure is described herein by way of example for several embodiments and illustrative drawings, those skilled in the art will recognize that the disclosure is not limited to the embodiments or drawings described. It should be understood, that the drawings and detailed description thereto are not intended to limit the claims to the particular form disclosed, but on the contrary, the intention is to cover modifications, equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application, the word \u201cmay\u201d is used in a permissive sense (i.e., meaning having the potential to), rather than the mandatory sense (i.e., meaning must). Similarly, the words \u201cinclude,\u201d \u201cincluding,\u201d and \u201cincludes\u201d mean including, but not limited to.","In the following detailed description, numerous specific details are set forth to provide a thorough understanding of claimed subject matter. However, it will be understood by those skilled in the art that claimed subject matter may be practiced without these specific details. In other instances, methods, apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.","Some portions of the following detailed description are presented in terms of algorithms or symbolic representations of operations on binary digital signals stored within a memory of a specific apparatus or special purpose computing device or platform. In the context of this particular specification, the term specific apparatus or the like includes a general purpose computer once it is programmed to perform particular functions pursuant to instructions from program software. Algorithmic descriptions or symbolic representations are examples of techniques used by those of ordinary skill in the signal processing or related arts to convey the substance of their work to others skilled in the art. An algorithm is here, and is generally, considered to be a self-consistent sequence of operations or similar signal processing leading to a desired result. In this context, operations or processing involve physical manipulation of physical quantities. Typically, although not necessarily, such quantities may take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared or otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to such signals as bits, data, values, elements, symbols, characters, terms, numbers, numerals or the like. It should be understood, however, that all of these or similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise, as apparent from the following discussion, it is appreciated that throughout this specification discussions utilizing terms such as \u201cprocessing,\u201d \u201ccomputing,\u201d \u201ccalculating,\u201d \u201cdetermining\u201d or the like refer to actions or processes of a specific apparatus, such as a special purpose computer or a similar special purpose electronic computing device. In the context of this specification, therefore, a special purpose computer or a similar special purpose electronic computing device is capable of manipulating or transforming signals, typically represented as physical electronic or magnetic quantities within memories, registers, or other information storage devices, transmission devices, or display devices of the special purpose computer or similar special purpose electronic computing device.","As mentioned above, the graphic arts have evolved to include specialized computer software and hardware designed to produce video animation sequences, but some of the associated conventional techniques can be non-intuitive or time-consuming. For example, in order to create a showing of animation objects within multiple regions of a viewing area so that the playing of the animation objects within the regions is synchronized, an author may use a conventional timeline. Depending on complexity of the animation objects and the number of regions within which they may be shown, an author may have to manually place a large number of objects on one or more timelines, and to keep track of the relative positions of the objects both within a single timeline and among a collection of timelines. The process of physically manipulating objects onto one or more timelines, and of simultaneously coordinating the independencies of the multitude of objects upon the one or more timelines can be a daunting challenge. Other techniques requiring the manipulation of mathematical curves to synchronize the playing of the animation objects can be similarly burdensome, as well as complex and non-intuitive. The continued evolution of software and hardware affords an opportunity to augment presently-known conventional techniques with new methods which are more direct and more intuitive, and are less cumbersome and less time-consuming.","In the following discussion, various embodiments of systems and methods for synchronizing the playing of animation objects within multiple regions of a viewing area are explored. In particular, there is a detailed description of several intuitive mappings onto multiple regions of a viewing area. In a clear and direct way, these maps may be used to synchronize the playing of animation objects across multiple regions of a viewing area. There is a discussion of the manner in which the playing of animation objects within a multiplicity of regions may be controlled by the maps, and of various interfaces for creating, configuring, and controlling effects of the maps. Methods for creating the maps are illuminated as well.","The systems and methods described below afford quick, natural, and easy techniques for synchronizing the playing of animation objects across multiple regions of a viewing area. They facilitate speedy experimentation with multiple variations, rapid prototyping and testing, and consonant swift development and convergence towards a final design.","Synchronized Playing of Animation Objects","One embodiment of a system for synchronizing the playing of animation objects across multiple regions of a viewing area is illustrated in . In the illustrated embodiment, synchronized playing system  (or simply, system ) includes a computer system  that has a viewing area  configured to display a plurality of regions . Computer system  is configured to display, within the plurality of regions , a synchronized playing of one or more animation objects.","Generally speaking, computer system  may correspond to any suitable type of computer system configured to execute applications. For example, computer system  may correspond to a desktop computer system, a laptop or notebook computer, a handheld computing device such as a personal digital assistant, cellular phone, media player, or combination device, or any other suitable type of device. In various embodiments, computer system  may include a microprocessing system, storage capacity, input and output systems, and\/or networking capability. Storage capacity may be implemented remotely or locally, and may include internal storage or removable media devices. Internal storage may be implemented, for example, using memory, such as random access memory (RAM), mass storage devices such as hard disks, solid-state drives, disk array controllers, or other suitable means. Removable storage media devices may include, for example, compact disc systems, DVD systems, Blu-ray systems, floppy disk drives, Zip drives, USB flash drives, tape drives, or other types of devices. Input systems may include a keyboard, mouse, trackball, joystick, or similar device. They may also include an image scanner or web cam for image or video input. Output systems may variously include a video subsystem including a video monitor or other display device, an audio subsystem, or other types of output devices. In some embodiments, computer system  may be configured to execute one or more operating systems, such as Microsoft Windows\u2122, Apple MacOS\u2122, Linux\u2122, or any other suitable operating systems.","In various embodiments, viewing area  may be configured to display any of a wide variety of regions , and regions  may play within themselves a wide variety of animation objects. The plurality of regions  many include contiguous blocks of regions, or it may include regions which are non-contiguous, or both. For example, the plurality of regions  illustrated in  includes a block of three contiguous regions, together with 5 regions positioned separately from each other. Each one of a plurality of regions  may play any of multiple types of animation objects. In some embodiments, plurality of regions  may play animation objects that include, during the time they are being played, a representation of one or more particles which move or change, a representation of one or more objects which twinkle, pulse or blink, a representation of one or more fractal geometric patterns, a representation of one or more weather elements, video content, repetitive motion, or audible content. For example,  shows an embodiment in which a rectangular grid of regions of a viewing area are playing a variety of types of animation objects. During their playing, the illustrated animation objects variously represent particles in motion, fractal geometric patterns, pulsing light, twinkling stars, clouds in motion, falling snow, falling rain, people playing ball, a repeating pattern, and a moving bird whose singing is audible. Another region of the viewing area that is not included in the rectangular grid of regions is shown outside the rectangular grid, with a still image displayed within it. In other embodiments, animation objects being played within the plurality of regions  may represent natural phenomena likes dust particles in motion, tornadic winds, migrating insects, shifting tectonic structures, glacial migration, electrical patterns, shifting geophysical structures, subatomic particles, or others of a great variety of dynamic phenomena.","Various embodiments of systems for playing animation objects in synchronization with each other, within several regions of a viewing area, may involve the use of an animation object map which assigns (maps) an animation object to each region of a plurality of regions of a viewing area.  illustrates one embodiment of an animation object map. In the illustrated embodiment, viewing area  displays a rectangular grid of contiguous rectangular regions . In this embodiment, animation object map  assigns the same animation object  to each region in the illustrated rectangular grid of contiguous rectangular regions  of viewing area . Animation object  is represented by an oval that appears inside each of the regions in the rectangular grid of contiguous rectangular regions . For the embodiment shown in , the same animation object  plays within all of the regions . The start time for each of the regions in the rectangular grid of contiguous rectangular regions , that is, the time at which each region begins its own playing of animation object , is determined by an intensity of a shade assigned to the region, as described below. The various intensities of shades assigned to regions  determine how the playing of animation object  is synchronized across all of the regions .  form an interrelated collection of drawings which further illustrate the sort of embodiment depicted in . For example, animation object  of  may be realized as animation object  presented in . Animation object map  of  may be compared to animation object map  of . Viewing area  of  may be associated with viewing area  of . The playing of animation object  within each of the contiguous rectangular regions , such that the playing is synchronized across all of the contiguous rectangular regions , is illustrated in , and described in subsequent paragraphs. It is not always necessary that an animation object map assign the same animation object to each region in a collection of regions. For example,  picture embodiments in which an animation object map assigns different animation objects to various ones of a collection of regions.",{"@attributes":{"id":"p-0039","num":"0038"},"figref":["FIG. 3","FIG. 15"],"sub":["1 ","10","1 ","10 ","1 ","6","7","8","9 ","10 ","1 ","9","1 ","10","1 ","4","5 ","7","6","8","9","10","1 ","10 "],"b":["310","320","320","320","310","330","335","335","330","330","330","330","320","335","320","335","320"]},"Various embodiments of systems for playing animation objects within several regions of a viewing area, such that the playing is synchronized across the several regions, may also involve the use of map which assigns a shade to each of the several regions of the viewing area. In various embodiments, such a map may assign shades of varying intensities to the several regions, and is referred to as a synchronization shading map. The variation in intensities of shades assigned to a plurality of regions in a viewing area by a synchronization shading map is used to determine how the playing of animation objects assigned to the plurality of regions is synchronized across the plurality of regions.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":"FIG. 4","b":["440","420","410","420","440","440","440","420","440","420","420"]},"A map similar to synchronization shading map  may be applied to the contiguous rectangular regions  of . Shading tool  of  may be used to create synchronization shading map , as explained below. The effects of applying synchronization shading map  in determining differences in start times for the various regions  may be controlled by means of interfaces like the ones represented in .","Embodiments of systems for playing animation objects within several regions of a viewing area, such that the playing is synchronized across the several regions, may include a synchronization shading map module, an animation object map module, a playing module, and an interface linked to the modules, as illustrated in .","According to some embodiments, animation object map module  of  may supply one or more animation object maps to playing module . In some embodiments, animation object map module  may receive one or more animation object maps from a source external to the system shown in . According to other embodiments, animation object map module  may be configured to create one or more animation object maps. The creation of animation object maps by animation object map module  may be automated in some embodiments, or it may be manually controlled in other embodiments. Interface  may be configured to facilitate creation of animation object maps by animation object map module , and may allow configuration of the creation of animation object maps by animation object map module . Interface  may be configured to actively manage the details of creating animation object maps using animation object map module . For example, interface  may allow control of the size and type of animation objects being created. Interface  may also allow animation object map module  to access external resources to facilitate the creation of animation object maps. In some embodiments, animation object map module  may store animation object maps that it receives, or it may store animation object maps that it creates. Storage of animation object maps may occur either locally or remotely.","According to some embodiments, synchronization shading map module  of  may supply one or more synchronization shading maps to playing module . Similarly to animation object map module , synchronization shading map module  may, according to various embodiments, either receive one or more synchronization shading maps, or generate synchronization shading maps. In some embodiments, synchronization shading map module  may receive one or more synchronization shading maps from a source external to the system shown in . According to other embodiments, synchronization shading map module  may be configured to create one or more synchronization shading maps. The creation of synchronization shading maps by synchronization shading map module  may be automated in some embodiments, or it may be manually controlled in other embodiments. Interface  may be configured to facilitate creation of synchronization shading maps by synchronization shading map module , and may allow configuration of the creation of synchronization shading maps by synchronization shading map module . Interface  may be configured to actively manage the details of creating synchronization shading maps using synchronization shading map module . For example, interface  may allow control of the size and type of synchronization shading maps being created. Interface  may also allow synchronization shading map module  to access external resources to facilitate the creation of synchronization shading maps. In some embodiments, synchronization shading map module  may store synchronization shading maps that it receives, or it may store synchronization shading maps that it creates. Storage of synchronization shading maps may occur either locally or remotely.","Playing module  of  may, according to some embodiments, receive animation object maps from animation object map module , and it may receive synchronization shading maps from synchronization shading map module . Playing module  may begin playing, within each region of a plurality of regions of a viewing area, an animation object assigned to the region by an animation object map. Playing module  may synchronize the playing across all regions in the plurality of regions. The synchronization may involve determining a start time for each of the regions in a plurality of regions, where the start time for each particular region depends upon an intensity of a shade assigned to the particular region by a synchronization shading map, and where ones of the plurality of regions having different shades differ in their respective start times based on a difference in intensities of shades assigned to those regions by the synchronization shading map. The synchronization may further entail, for each region of the plurality of regions, starting playing within the region the animation object that is assigned to the region by the animation object map, where the playing of the animation object within the region begins at the start time determined for the region.","Interface  of  may be embodied as an application programming interface that is automatically invoked by software or hardware components, or it may be embodied as a graphical interface or an application programming interface that is invoked by a developer, author, artist, or other individual who is structuring the playing of animation objects in synchronization with each other, within several regions of a viewing area. Interface  may also be embodied as a tangible interface displayed on a viewing screen. Such tangible, visible embodiments of interface  may be passive or may be interactive. Particular forms taken by interface  may vary widely according to numerous or diverse embodiments. , , , , , , , , , and  depict several visible embodiments of interface .","It is noted that the architecture illustrated in  is merely one example, and that other configurations are possible. For example, in various embodiments, the functionality of animation object map module  may be implemented wholly or partially within another element, such as synchronization shading map module , or may be distributed among a number of modules or components, or may be implemented wholly or partially within an operating system, or within external entities. For another example, some portion of the functionality of playing module  may be implemented an application external to the system shown in . In general, the full capabilities of the system for synchronizing the playing of animation objects across multiple regions of a viewing area, and incorporated in the architectural embodiment shown in , may also be incorporated in other architectural embodiments.","The flow chart provided in  encapsulates the main operational stages of a system for synchronizing the playing of animation objects across a plurality of regions of a viewing area. In the illustrated embodiment, operation begins in block , where an animation object map and a synchronization shading map are received. As discussed above, animation object map module  of  may supply one or more animation object maps, and synchronization shading map module  of  may supply one or more synchronization shading maps. Examples of received animation object maps may be found in , , B, and, implicitly, in .  shows a frame-by-frame depiction of an animation object map in the form of a video clip containing ten frames that appear successively at 1-second intervals. The first frame displays a large, dark circle, and the succeeding nine frames display circles of ever-diminishing size and intensity. Examples of received synchronization shading maps appear in , , , and C. The discussion of  that follows presents methods for creating synchronization shading maps. An application running on computer system  may receive an animation object map and a synchronization shading map either automatically or in response to user interaction through an application interface. Computer system  may store the maps in memory or in a separate file.","At block  of , a start time is determined for each region of the plurality of regions of the viewing area, where the start time for each particular region depends upon an intensity of a shade assigned to the particular region by the synchronization shading map. A plurality of regions of a viewing area may take many forms, and examples appear in , -, B-C, E, and . The foregoing discussion of  furnishes an illustrative description of the determination of a start time for each region of a plurality of regions of a viewing area.  present typical interfaces for configuring and controlling effects of synchronization shading maps in determining differences in start times for various regions. An application running on computer system  may determine a start time for each region in response to receiving user input through an interface such as the ones depicted in , or through another embodiment of a control interface.","Finally, at block , playing begins, within each region of the plurality of regions, of an animation object assigned to the region, so that within any particular region, playing begins at the start time determined for that particular region.  provide an example of a synchronized playing of an animation object assigned to each region of a plurality of regions. Computer system  may commence the playing of one or more animation objects across the plurality of regions in response to receiving input from a user to initiate the playing.","As explained above, interface  of  may be visibly embodied in numerous or diverse ways.  depicts one embodiment of a visible interface for creating a synchronization shading map. In this embodiment, a representation of a plurality of regions  of a viewing area is displayed, and a painting tool  is provided for painting a visible shade onto each region of the representation. Painting tool  is shown tracing a path through the plurality of regions . In this embodiment, painting tool  is configured to make regions lying along its path turn black, and to cause regions off its path to turn various shades of gray. The farther a region is located from the path taken by painting tool , the lighter will be the shade painted onto the region. In this manner, a single pass with painting tool  can paint visible shades of gray onto each of the plurality of regions . In this embodiment, painting tool  performs as a gradient-painting device. The result is the synchronization shading map seen in . The path taken by painting tool  as it moves across the plurality of regions  is indicated by the black regions, which lie on a curve similar to a sine wave. Painting tool  may be configured to operate differently in other embodiments. For example, it may be configured to make regions lying along its path turn white instead of black, and to cause regions off its path to turn various shades of gray, such that the farther a region is located from the path taken by the painting tool , the darker will be the shade painted onto it. In still other embodiments, painting tool  may be configured to operate in a variety of ways. Painting tool  serves to create a synchronization shading map. This and other methods for painting a visible shade onto each region in the plurality of regions  may facilitate rapid, intuitive, and easy creation of synchronization shading maps.","According to various embodiments, painting tool  may be configured to paint more than one region at a time. In some embodiments, painting tool  may paint several regions at a time without having to touch all of the regions being painted. For example, as illustrated in  and described above, painting tool  may trace a path through the plurality of regions , touching only a few of the plurality of regions , such that the touched regions turn black, but regions not touched turn various shades of gray. In this example, the farther a region is located from the path taken by painting tool , the lighter will be the shade that is automatically painted onto the region. Here, painting tool  performs as a gradient-painting device.","In other embodiments, painting tool  may be configured to touch all of the regions that it paints, whether functioning as a gradient-painting device or not. In some such instances, painting tool  may be embodied as a broad brush, with various shade intensities corresponding to various portions of the broad brush.","As indicated in the discussion of , painting tool  may be configured to paint several regions simultaneously, and it may be configured to paint several visible shades simultaneously. In other embodiments, painting tool  may be configured to paint one region at a time. Painting tool  may also be configured to paint one visible shade at a time.","While the embodiment of painting tool  illustrated in  applies visible shades of gray, there are other embodiments in which painting tool  applies visible colors that are neither gray nor black nor white. For example, painting tool  may be configured to paint various shades of orange onto a plurality of regions . In such an instance, intensity values may be established for each of the various shades of orange, such that the intensity values impose a sequential ordering on the various shades of orange. The intensity ordering for the various shades of orange enables the full functionality of the systems, methods, and techniques described herein for synchronizing the playing of animation objects across a plurality of regions of a viewing area. In other embodiments, painting tool  may be configured to apply any other colors from the visible spectrum, including, but not limited to, red, yellow, blue, green, and violet.","A palette may also be provided to allow a user to choose, from among several shades or colors, a current shade or shades or color or colors that may be applied by painting tool .",{"@attributes":{"id":"p-0058","num":"0057"},"figref":"FIG. 8","b":["860","840","870","820","840"]},"In other embodiments of a control interface for controlling the form and effect of a synchronization shading map, start-time differences for regions may be controlled differently. For example, there may be a provision for varying the start-time differences according to particular pairs of consecutive shades used in painting a plurality of regions.  illustrates a collection of shaded blocks representing shades used in a synchronization shading map, arranged consecutively in order of intensity. In this embodiment, start-time differences for regions painted in consecutive shades by the synchronization shading map are controlled by narrowing or widening an adjustable gap  between blocks representing consecutive shades. For example, the start-time difference between regions painted in a particular consecutive pair of shades may be set to 1 second, while another start-time difference between regions painted in some other consecutive pair of shades may be set to 5 seconds. In this manner, the effect of one pair of consecutive shades upon start times for corresponding regions may be controlled independently of the effect of a different pair of consecutive shades upon start times for regions corresponding to the different pair of consecutive shades.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 9B","sub":["1","2","3","4","5 ","3","1 ","5"]},{"@attributes":{"id":"p-0061","num":"0060"},"figref":"FIG. 10","b":"1080"},"The flow chart of  shows operational stages of one embodiment of a method for creating a synchronization shading map used in a system for synchronizing the playing of animation objects across a plurality of regions of a viewing area. In the illustrated embodiment, operation begins in block , where a maximum number of shades for use in a synchronization shading map is specified. In other embodiments, the specification of a maximum number of shades for use in a synchronization shading map may be given automatically, or may be fixed.  present sample interfaces for specifying a maximum number of shades for use in a synchronization shading map. An application running on computer system  may receive user input through an interface such as the ones depicted in , or through another embodiment of a control interface. In response to receiving the user input, computer system  may store the specified number in a file or memory data structure.","At block , a difference in start times is set for regions painted in consecutive shades by the synchronization shading map. In some embodiments, a difference in start times for regions painted in consecutive shades by the synchronization shading map may be set to a default value, while in others, it may be set to a non-default value. According to various embodiments, the step indicated at block  may be deferred until a later stage, or may occur after creation of the synchronization shading map. An application running on computer system  may receive user input through an interface such as the ones depicted in , or through another embodiment of a control interface. In response to receiving the user input, computer system  may store the specified start-time differences in a file or memory data structure.","Block  represents the stage of painting a visible shade onto each region of a displayed representation of the plurality of regions in the viewing area. The painting of a visible shade onto each region may be accomplished using an interface provided by an application running on computer system , such as the one described in connection with .","The resulting synchronization shading map, created by painting a visible shade onto each region of a displayed representation of the plurality of regions, may then be stored, as indicated in block , by an application running on computer system . The storage indicated in block  may be in volatile memory in some embodiments, and it may be in non-volatile media in other embodiments.","Various embodiments of a system for playing animation objects in synchronization with each other, within a plurality of regions of a viewing area, may involve the use of a duration shading map. The duration shading map may control the playing-time duration for regions belonging to the plurality of regions in the viewing area.  depicts an embodiment of a control interface for a duration shading map. In this example, a duration shading map  for a collection of regions  is displayed. Playing-time duration field  permits setting a playing-time duration for regions assigned the lightest shade of gray by duration shading map . Duration difference field  permits setting a difference in playing-time duration of regions to which duration shading map  assigns consecutive shades. In this instance, a playing-time duration of 3 seconds is set for regions to which duration shading map  assigns the lightest shade. The difference in playing-time duration of regions to which duration shading map  assigns consecutive shades is set at 1.7 seconds. Therefore, in this embodiment, regions having the lightest shade may play for 3 seconds, those having the next-lightest shade may play for 4.7 seconds, and so forth.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":["FIG. 13","FIG. 13"],"b":"1380"},{"@attributes":{"id":"p-0068","num":"0067"},"figref":"FIGS. 14A through 14E"},{"@attributes":{"id":"p-0069","num":"0068"},"figref":["FIG. 14A","FIGS. 14A-14E","FIG. 14B"],"b":["1435","1435","1435"]},{"@attributes":{"id":"p-0070","num":"0069"},"figref":["FIG. 14B","FIG. 14A"],"b":["1430","1435","1420","1410","1420","1435"]},{"@attributes":{"id":"p-0071","num":"0070"},"figref":"FIG. 14C","b":["1420","1410","1440","1420","1410","1420","1420","1420","1420","1435","1435"]},{"@attributes":{"id":"p-0072","num":"0071"},"figref":["FIG. 14D","FIG. 14C","FIG. 14C","FIG. 14C","FIG. 14C"],"b":["1435","1420","1435","1435","1435"]},"In , the shaded column above the 5-second point on the time axis represents the appearance of the various regions  during the 5second after playing commences in the two darkest-shaded regions. The bottom cell in the column shows the 5frame of video clip , which is the frame displayed, during the 5second, within the regions labeled \u201c1\u201d in . The next cell shows the 4frame of video clip , and so forth. The 6cell in the column is blank, because, during the 5second, playing has not yet begun within those regions whose shading matches the shade shown to the left of the 6row in the shade gradient column, that is, within those regions labeled with the integer \u201c6\u201d in .",{"@attributes":{"id":"p-0074","num":"0073"},"figref":["FIG. 14E","FIG. 14A","FIG. 14E","FIG. 14C"],"b":["1420","1435","1420","1420"],"sup":"th "},{"@attributes":{"id":"p-0075","num":"0074"},"figref":"FIG. 15","b":["1520","1510","1520","1520"]},"Exemplary Computer System","It is contemplated that in some embodiments, any of the methods, techniques or components described above may be implemented as instructions and data capable of being stored or conveyed via a computer-accessible medium. Such methods or techniques may include, for example and without limitation, the various methods for playing animation objects within several regions of a viewing area, such that the playing is synchronized across the several regions, as described above with respect to . In particular, any of synchronization shading map module , animation object map module , playing module , and interface , or other suitable combinations or partitions of the functionality of these entities may be implemented as such instructions. Such instructions may be executed to perform a particular computational function, such as generating, sending, or receiving a message, to implement mathematical functions such as integration, differentiation, convolution, etc., as well as to implement higher-order functions such as operating system functionality, network communications functionality, application functionality, and\/or any other suitable functions.","One exemplary embodiment of a computer system including tangible, computer-accessible storage media is illustrated in . In the illustrated embodiment, computer system  includes one or more processors  coupled to a system memory  via an input\/output (I\/O) interface . Computer system  further includes I\/O interfaces  coupled to external devices. In different embodiments, system  may be variously configured as a server system, a desktop or notebook system, an embedded system, a handheld or portable client system, etc. In various embodiments, computer system  may be representative of computer system  of  or of modules and interfaces illustrated in , including synchronization shading map module , animation object map module , playing module , and interface .","In various embodiments, computer system  may be a uniprocessor system including one processor , or a multiprocessor system including several processors  (e.g., two, four, eight, or another suitable number). Processors  may be any suitable processor capable of executing instructions. For example, in various embodiments processors  may be a general-purpose or embedded processor implementing any of a variety of instruction set architectures (ISAs), such as the x86, PowerPC\u2122, SPARC\u2122, or MIPS\u2122 ISAs, or any other suitable ISA. In multiprocessor systems, each of processors  may commonly, but not necessarily, implement the same ISA.","System memory  may be configured to store instructions and data accessible by processor . In various embodiments, system memory  may be implemented using any suitable memory technology, such as static random access memory (SRAM), synchronous dynamic RAM (SDRAM), nonvolatile\/Flash-type memory, or any other type of memory. In the illustrated embodiment, instructions and data implementing desired functions, methods or techniques, such as those described above, are shown stored within system memory  as code . It is noted that in some embodiments, code  may include instructions and data implementing desired functions that are not directly executable by processor  but are represented or encoded in an abstract form that is translatable to instructions that are directly executable by processor . For example, code  may include instructions specified in an ISA that may be emulated by processor , or by other code  executable on processor . Alternatively, code  may include instructions, procedures or statements implemented in an abstract programming language that may be compiled or interpreted in the course of execution. As non-limiting examples, code  may include code specified in a procedural or object-oriented programming language such as C or C++, a scripting language such as Perl or Ruby or Python, a markup language such as HTML or XML, or any other suitable language.","In one embodiment, I\/O interface  may be configured to coordinate I\/O traffic between processor , system memory , and any peripheral devices in the device, including I\/O interfaces  or other peripheral interfaces. In some embodiments, I\/O interface  may perform any necessary protocol, timing or other data transformations to convert data signals from one component (e.g., system memory ) into a format suitable for use by another component (e.g., processor ). In some embodiments, I\/O interface  may include support for devices attached through various types of peripheral buses, such as a variant of the Peripheral Component Interconnect (PCI) bus standard or the Universal Serial Bus (USB) standard, for example. In some embodiments, the function of I\/O interface  may be split into two or more separate components, such as a north bridge and a south bridge, for example. Also, in some embodiments some or all of the functionality of I\/O interface , such as an interface to system memory , may be incorporated directly into processor .","I\/O interfaces  may be configured to allow data to be exchanged between computer system  and external devices, such as other computer systems or communications devices, for example. In particular, I\/O interfaces  may be configured to allow communication between computer system  and various external devices. These external devices may include various computing and communications devices, which may include elements similar to those of computer system . In particular, the external devices may include personal computers, telephony devices or network-attached computing devices that users may employ to access network services. Additionally, I\/O interfaces  may support communication via telecommunications\/telephony networks such as analog voice networks or digital fiber communications networks, via storage area networks such as Fibre Channel SANs, or via any other suitable type of network and\/or protocol.","In some embodiments, system memory  may be one embodiment of a tangible, computer-accessible storage medium configured to store instructions and data as described above. However, in other embodiments, instructions and\/or data may be stored upon and retrieved from different types of computer-accessible storage media. Generally speaking, a computer-accessible medium may include storage media or memory media such as magnetic or optical media, e.g., disk or CD\/DVD-ROM coupled to computer system  via I\/O interface . A computer-accessible medium may also include any volatile or non-volatile media such as RAM (e.g. SDRAM, DDR SDRAM, RDRAM, SRAM, etc.), ROM, etc, that may be included in some embodiments of computer system  as system memory  or another type of memory. A computer-accessible medium may generally be accessible via transmission media or signals such as electrical, electromagnetic, or digital signals, which may be conveyed via a communication medium such as a network and\/or a wireless link, such as may be accessed via I\/O interfaces .","It is noted that the various methods illustrated in the figures and described above represent exemplary embodiments of methods. These methods may be implemented in software, hardware or any suitable combination thereof. Where suitable, the order of operation of method elements is not restricted to the order described or shown, and in other embodiments various method elements may be performed in a different order. It is also contemplated that in various embodiments, not all method elements need be performed, and existing method elements may be modified or additional elements added.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications. Accordingly, the above description is to be regarded in an illustrative rather than a restrictive sense."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIGS. 9A and 9B"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 14A"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 14B"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 14C"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 14D","FIG. 14C"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":["FIG. 14E","FIG. 14A"]},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 16"}]},"DETDESC":[{},{}]}
