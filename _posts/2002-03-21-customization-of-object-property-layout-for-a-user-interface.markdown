---
title: Customization of object property layout for a user interface
abstract: A process flow development tool is given a capability of determining the properties corresponding to a particular type of object and allowing a user to decide how and where the properties will be shown in a Properties dialog for individual objects of the particular type. The capability allows the tool to present a dialog that allows the user to customize, for the particular type of object, the layout for the properties in the Properties dialog. This layout may then be stored in an organizer object associated with the particular type of object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06925598&OS=06925598&RS=06925598
owner: International Business Machines Corporation
number: 06925598
owner_city: Armonk
owner_country: US
publication_date: 20020321
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The present invention relates to software user interfaces and, in particular, to selection and\/or layout of properties of an object for a user interface.","It once was the case that a software program had a design that was determined solely by the original developer of the software. Over the last number of years, software has become increasingly modular, especially in view of object oriented programming. Object oriented programming has provided for the reuse of objects that are essentially parts of a whole. Once coded, a given object, with built-in properties and methods, may be imported into any number of different programs. One particular benefit of this is that a large object, designed to provide specific functionality, can be coded once but include a wide variety of possible implementations.","In the realm of software user interfaces, it is typical that a developer, to make use of an object, writes code to select those properties that are to be displayed in a user interface and to specify a layout for the selected properties. Where the developer wishes to use a pre-existing object which defines a user interface, the developer can rearrange the code for the object to reflect a desired layout. However, when changes in the layout of a particular user interface are required, the code must be reedited to affect the necessary changes. Those changes could include addition of properties to a display, deletion of properties from the display or simply re-arranging the manner in which the properties are displayed. This process adds time to what is called \u201cthe development cycle\u201d, i.e., the time required to develop a program.","Consider the familiar \u201cPreferences\u201d dialog that may be seen by selecting a \u201cPreferences\u201d menu option in an \u201cEdit\u201d drop-down menu in the known web browser program Netscape\u2122 Navigator\u2122. The Preferences dialog provides a choice of pages of options that allow a user to customize the program to his or her liking. These pages have names like \u201cAppearance\u201d, \u201cNavigator\u201d, \u201cMail & Newsgroups\u201d, and \u201cAdvanced\u201d. On the \u201cNavigator\u201d page are presented a number of options that allow a user to: decide the nature of the page that is displayed when the program starts; specify a \u201cHome\u201d page; specify a time period after which a record of visited pages expires; and clear a location bar.","In the circumstance where an upgraded version of the Navigator\u2122 program is being devised, it may be decided to move the location bar clearing option to a position just below the Home page specification option. Unfortunately, the source code of the program will require altering to provide such a minor cosmetic change.","To customize a user interface to display properties of a given type of object (i.e., a given class), respective identities of properties of the type of object are first determined. A user is then allowed to decide a manner in which each of the properties will be shown in a user interface dialog. Once the user has communicated information about the identity of the properties, of a given type of object, that are to be displayed and the manner in which each property will be displayed (i.e., the object property layout), this information may be stored in an organization object associated with the given type of object. Subsequently, when an instance of the given type of object is created, the stored organization object is associated with the instance so that when a Properties dialog is requested for the instance, the properties may be displayed according to the layout described in the associated organization object.","In accordance with an aspect of the present invention there is provided a method of providing, to a user, a capability to customize a property layout for objects of a given type of object. The method includes determining a set of properties of said given type of object, displaying said set of said properties in a user interface, receiving an indication, from said user, of a grouping of particular ones of said set of said properties and storing information describing said grouping in a property organizer object associated with said given type of object. In a further aspect of the present invention, there is provided a computer system for process flow development for carrying out the invention. In a still further aspect of the present invention, there is provided a software medium that permits a general purpose computer to carry out this method.","In accordance with another aspect of the present invention there is provided a method of customizing the display of properties of an object of a class. The method includes allowing a user to group selected properties of said class and storing said grouped selected properties in an organizer object in association with said class.","In accordance with a further aspect of the present invention there is provided a method for displaying an object. The method includes, during instantiation of said object from a class, determining whether an organizer object is associated with said class and, where said organizer object is associated with said class, displaying properties of said instantiated object as specified by said organizer object.","In accordance with an aspect of the present invention there is provided a method of providing, to a user, a properties user interface for a given object, where said properties user interface has a customized property layout. The method includes presenting a menu, to said user, including a properties menu item, receiving an indication, from said user, of a selection of said properties menu item and displaying a properties user interface with a layout specified by an associated property organizer object. In a still further aspect of the present invention, there is provided a software medium that permits a general purpose computer to carry out this method.","Other aspects and features of the present invention will become apparent to those of ordinary skill in the art upon review of the following description of specific embodiments of the invention in conjunction with the accompanying figures.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 1","b":["100","100","100","102","102","104","104"]},"While software, or anything else that requires a specific process flow to be laid out, is being developed, it is often helpful to employ tools to organize the flow. One such tool is Flow Composition Builder, which is a component of a universal tool platform marketed by IBM of Armonk, N.Y. Flow Composition Builder allows a user to create an object that is an instance of a \u201cFlow Type\u201d, representative of an event or a software component, to a canvas, where the Flow Type object becomes a \u201cnode\u201d. Connections between these nodes may then be arranged in keeping with a desired process flow. A menu may be associated with each node so that particular actions may be taken by a user in respect of particular nodes, which are instances of specific Flow Types. As well, a menu may be associated with each Flow Type so that an action may be taken by a user in respect of all instances of the specific Flow Type. When the universal tool platform is initialized, a file is consulted to set up a development environment. For the purposes of the present discussion, this file can be referred to as \u201cplugin.xml\u201d.","Notably, \u201cFlow Type\u201d is a term proprietary to the above-mentioned Flow Composition Builder. However, where such a tool is implemented with regard to Java program development, a \u201cFlow Type\u201d maps to a Java class. As is known, Java classes have \u201cattributes\u201d, which may also be known as \u201cfields\u201d or \u201cproperties\u201d. In general, the term \u201cproperties\u201d will be used herein.","A rudimentary view of a process flow development system  is illustrated in FIG. A. The process flow development system  includes a process flow development core , which may be, for instance, the CPU of a conventional personal computer. The process flow development core  typically includes a processor , a memory  for object storage and an interface  to input and output peripherals. Such peripherals may include a display monitor , a keyboard  and a mouse . It should be clear that alternative peripheral devices exist. For instance, a trackball device may be used as a pointing device in place of the mouse . The processor  may be loaded with object property layout customization software for executing methods exemplary of this invention from a software medium  which could be a disk, a tape, a chip or a random access memory containing a file downloaded from a remote source.","As illustrated in , a process flow development tool may present a window-type user interface  including a canvas . In the canvas  may be a node  and a user may invoke a menu  in respect of the node , as shown.","In overview, a process flow development tool, which may perform methods exemplary of the present invention, is capable of determining the properties corresponding to a particular type of object (i.e., a Flow Type or class) and allowing a user to decide how and where the properties will be shown in a Properties dialog. The tool may present a dialog that allows the user to customize the object property layout. This layout may then be stored in an object called an Attribute Organizer. The Attribute Organizer object is stored in association with the type of object to which the Attribute Organizer object relates. Subsequently, when an instance of the given type of object is created, the stored organization object is associated with the instance so that when a Properties dialog is requested for the instance, the properties may be displayed according to the layout described in the associated organization object.","The Attribute Organizer object may take the form of a serialized file in Extensible Markup Language (xml) format that is stored physically along with the particular Flow Type whose property layout is being customized. One way of serializing xml is called the \u201cxml Meta data Interchange\u201d (XMI) format. The Attribute Organizer object can provide for a one-to-one relationship between instances of the particular Flow Type and the Properties dialog displayed in relation to the instances. Once a desired layout of the properties has been specified for a Flow Type object, a Properties dialog may display the properties of the Flow Type object in response to invocation of the Properties menu item on an instance of the Flow Type.","In operation, the user edits the plugin.xml file to add an \u201cextension point\u201d. The extension point is used to specify the Flow Types that are to be available for a process flow layout session. An exemplary extension point follows.\n\n","As a result of the extension point, a \u201cProperties\u201d menu item is added to menus associated with nodes that are instances of Flow Types that are specified in the extension point. In a conventional manner, this addition of a menu item to a menu is performed at the time that the menu is invoked. Further, a \u201cCustomize Properties\u201d menu item is provided in menus associated with Flow Types that are specified in the extension point.","An exemplary Customize Properties dialog , populated with properties (attributes) from an associated Flow Type, is illustrated in FIG. . The Customize Properties dialog  includes a left pane  and a right pane . In the right pane  are three columns, namely an Attribute Name column , a Representation column  and a Property Editor column . The Customize Properties dialog  also includes several buttons, in particular, a \u201cMove Up\u201d button , a \u201cMove Down\u201d button , a \u201cMove To . . . \u201d button , a \u201cCreate Group . . . \u201d button , a \u201cDelete\u201d button  and a \u201cCustomize Layout . . . \u201d button  may all be identified.","The value in the Attribute Name column , for a given row, is the XMI name of the property to which the given row corresponds. It will be seen in the following that attribute, property and field may be used interchangeably to refer to a component of an object. The property may be a static attribute, which may be, for instance, modeled using Rational Rose\u2122, or a dynamic attribute. Dynamic attributes are not presently very common. However, it is expected that embodiments of the present invention should work with dynamic attributes once dynamic attributes are supported by the underlying tool platform. The XMI name may also be used as a key when referencing the Resource file specified in the extension point above.","The value in the Representation column , for the given row, is the default representation of the property and is dependent on the type of the property in the Attribute Name column . A mouse click in the Representation column  of a particular row can provide a user with a \u201ccombo box\u201d or drop-down menu of choices for the representation of the associated property. The representation can then be changed by the user to one of a set of supported types listed in the combo box.","The Property Editor column  is optional. In use, when a cell in the Property Editor column  is selected, a list of choices is displayed. In one embodiment of the present invention, the choices listed are the names of classes implementing the available property editor interface, for example, the com.ibm.etools.fcb.properties.FCBPropertyEditor interface or the java.beans.PropertyEditor interface. In order for a name of a property editor interface to be displayed in the list of choices, the property editor is required to be specified in the plugin.xml file.","If a particular property editor interface is selected from the property editor list, the particular property editor may be used by a user to specify a representation for the corresponding property and the corresponding cell in the Representation column  will be ignored.","The information displayed in the Customize Properties dialog  may be saved in an Attribute Organizer object in a primitive file of the Flow Type to which the information relates. As will be apparent to a person skilled in the art, the primitive file of a given Flow Type is a file that uniquely relates to the given Flow Type. The information can then be used later to display the properties of any instance of the Flow Type. It may be that the Attribute Organizer object is also accessible from user interface dialogs other than the Customize Properties dialog . Such access to the Attribute Organizer object may be implemented using application programming interfaces (APIs) that may allow modification of some object property layouts or allow the addition or deletion of entries in the Attribute Organizer object.","The \u201cMove Up\u201d button  and the \u201cMove Down\u201d button  of the Customize Properties dialog  of  may be used to change the vertical order of presentation for the layout of the properties of a particular group of properties. In particular, the user would first select a property (other than the top property on the list) and click on the \u201cMove Up\u201d button . The selected property would then move up the vertical list and displace the property formerly immediately superior to the selected property to a position immediately inferior to the selected property.","The \u201cMove To . . . \u201d button  may be used to move a particular property from a first group to a second group. This button eliminates the need to delete the particular property from the first group and add it to the second group. Advantageously, some of the settings relating to the particular property (such as layout, Property Editor) will be moved with the particular property.","The \u201cCreate Group . . . \u201d button  may be used to create a group of properties for displaying in a Properties dialog. As will be seen hereinafter, selecting the \u201cCreate Group . . . \u201d button  may result in the user being presented with a Create Group Attributes dialog  (illustrated in FIG. ).","The \u201cDelete\u201d button  may be used to remove a property from a particular group.","The \u201cCustomize Layout . . . \u201d button  may be used to invoke a dialog to allow a user to customize the size, spacing and indentation of a selected property.","Throughout this invention description, dialogs are invoked for various purposes. Where an embodiment of the present invention is implemented in the Java\u2122 programming language, it should be apparent to a person skilled in the art of Java Programming that extensive use of the Java Abstract Windowing Toolkit may be required. This toolkit provides the user interface features, such as buttons, check boxes and grouping of properties, seen in the dialogs described in conjunction with the following discussion of the figures that include exemplary dialogs.","The properties listed in the Customize Properties dialog  of  represent all the properties of a given Flow Type (i.e., class). The display of these properties may be customized for any given instance of this Flow Type by first selecting groups of properties, such that each group of properties will be displayed on the same (display) page. Thus, to customize the Properties dialog of an instance of the Flow Type having the attributes listed in the Customize Properties dialog  of , it is initially necessary to create a grouping of the properties that are to be displayed on a particular page. This grouping is achieved by first selecting the properties that are to be grouped on the particular page and then selecting the \u201cCreate Group . . . \u201d button  on the Customize Properties dialog . As a result, the Create Group Attributes dialog  (illustrated in ) may be displayed. The selection of the properties can be performed by the user through the use of such peripherals as the keyboard  and the mouse  (FIG. A).","As is conventional, a left mouse click while a cursor rests over a cell displaying a first property name may select that first property. A further left click, in conjunction with holding down a \u201cShift\u201d key on the keyboard , while the cursor rests over a cell displaying a second property name may select the second property, and all properties in the range between the first and second properties. An even further left click, in conjunction with holding down a \u201cCtrl\u201d key on the keyboard , while the cursor rests over a cell displaying a third property name may add the third property to those selected. However, unlike the above mentioned \u201cShift\u201d key related left click, the \u201cCtrl\u201d key related left click does not select the range of properties between the third property and the most recently selected property.","The Create Group Attributes dialog , as shown in , includes a \u201cGroup Name\u201d field  for receiving from the user a name for the group being created (which group will be displayed on the same page). Also included is a \u201cGroup Type\u201d group box  that presents to the user a number of possibilities available for the type of the group being created. An Attributes group box  includes a properties text area , a \u201cMove Up\u201d button  and a \u201cMove down\u201d button . The properties text area  displays the names of the properties selected to be part of the group being created while the \u201cMove Up\u201d button  and the \u201cMove down\u201d button  allow the user to specify a vertical order for the properties. As is common with such dialogs, an \u201cOK\u201d button  and a \u201cCancel\u201d button are also included.","As a result of a user clicking on the \u201cOK\u201d button  on the Create Group Attributes dialog , a group, whose name is \u201cPage1\u201d and whose type is \u201cMain Page\u201d, may be added to the Attribute Organizer object associated with the Flow Type whose properties are listed in the Customize Properties dialog  of FIG. . Subsequently, the group \u201cPage1\u201d can be divided into other groupings such as Nested Pages, Group Boxes or Vertical or Horizontal groupings.","In , a Customize Properties dialog A has a left pane A and a right pane A. In the left pane A, the group, or page, \u201cPage1\u201d has been selected. Accordingly, the right pane A shows only those attributes in the group \u201cPage1\u201d. The left pane A shows that a group box called \u201cOptions\u201d has been created, as part of the group \u201cPage1\u201d. As will become apparent hereinafter, the group box contains two check boxes. As can be seen in the right pane A, the attributes as listed from top to bottom include a \u201cdescription\u201d property  with a textField representation, a \u201cdocumentation\u201d property  with a textField representation, an \u201cOptions\u201d property  with a groupBox representation and a \u201cprogram\u201d property  with a textField representation.","Notably, a \u201cDelete Group\u201d button  has become active in the Customize Properties dialog A, in a position below the left pane A. The \u201cDelete Group\u201d button  was not active in the Customize Properties dialog  of  as no groups yet existed. Two further buttons are grouped with the \u201cDelete Group\u201d button  for altering the order of display of a number of groups, or pages. As there is only a single group defined in the Customize Properties dialog A of , these buttons remain inactive.","It should be clear that further groups, or pages, may be added to the left pane A through the use of the \u201cCreate Group . . . \u201d button  on the Customize Properties dialog . Once the number of pages number more than one, the use of the \u201cMove To . . . \u201d button  should become more apparent. While viewing the properties of a first page on the Customize Properties dialog , the user may select a given first page property. The user may then use the mouse to select the \u201cMove To . . . \u201d button . In response, the user will be given an opportunity to specify a second page to which of the more than one pages the selected property should be moved. Once the second page has been selected, the property is removed from the first page and added to the second page.","To invoke the Properties dialog, i.e., to view the property layout, of an instance of a given Flow Type, the user does not have to compose additional code. As is typical, an interaction between the user and a node  on the canvas  (FIG. B), say a right mouse click, can provide the user with a menu. When a menu corresponding to the node  is invoked, the node  may be examined to determine whether the Flow Type, of which the node  is an instance, has an Attribute Organizer object declared in the plugin.xml file. If the Flow Type does have a declared Attribute Organizer object, a \u201cProperties\u201d menu item will be included in the menu that is provided responsive to the action of the user. The action corresponding to selecting the \u201cProperties\u201d menu item may be the presentation, by the tool, of a \u201cProperties\u201d dialog that lists the customized pages of the Flow Type object and shows the contents of a selected one of those customized pages.","A Properties dialog A, illustrated in , is a viewer for the edited properties of FIG. . Selected on a left properties pane  is the group \u201cPage1\u201d. While on a right preferences pane A is shown an object property layout arranged according to the layout specified in the Customize Properties dialog A of FIG. . In particular, a \u201cdescription\u201d text field A is shown, corresponding to the \u201cdescription\u201d property  of  \u201cdocumentation\u201d text field A is shown, corresponding to the \u201cdocumentation\u201d property . An \u201cOptions\u201d group box  is shown, corresponding to the \u201cOptions\u201d property . Further, a \u201cprogram\u201d text field A is shown, corresponding to the \u201cprogram\u201d property . Notably, the \u201cOptions\u201d group box  includes a \u201cnotificationFromPredefinedMembers\u201d check box  and a \u201cprogramActivitiesCanBeCheckedOut\u201d check box .","In , a Customize Properties dialog B has a left pane B and a right pane B. In the left pane B, the group \u201cPage1\u201d has been selected. The right pane B shows that the layout of the object properties of the group \u201cPage1\u201d has been altered (customized). In particular, the representation of the \u201cdescription\u201d property  and the \u201cdocumentation\u201d property  has been changed from textField to textArea and the \u201cprogram\u201d property  has been moved from the bottom of the list to the top of the list.","A Properties dialog B is illustrated in FIG. . Selected on a left properties pane  is the group \u201cPage1\u201d. While on a right properties pane B is shown a user interface layout arranged according to the object property layout specified in the Customize Properties dialog B of FIG. . In the order specified in , the \u201cprogram\u201d text field A is shown at the top of the layout. Next, a \u201cdescription\u201d text area B is shown. A \u201cdocumentation\u201d text area A is then shown. Finally, the \u201cOptions\u201d group box  is shown.","Based on the above layout, the serialized Attribute Organizer object will include the following information:\n\n","The Size, Spacing, Alignment and Indentation of the properties can also be changed through use of the Customize Properties dialog  (seen in FIG. ), specifically via the Customize Layout . . . button , thereby giving more than typical layout control and flexibility to the properties dialog designer, i.e., the user of the tool.","To increase control over the representation of a property, the Property Editor column  can be used. As an example, a class may be supplied that extends a class FCBPropertyEditor, which is a default property editor that is included with Flow Control Builder, and is called NameFormatter. Furthermore, the class called NameFormatter may be assigned as a property editor for the \u201cprogram\u201d property . A Customize Layout dialog C is illustrated in  where this assignment has been made.","A Preferences dialog C is illustrated in FIG. . Selected on a left preferences pane  is the group \u201cPage1\u201d. While on a right preferences pane C is shown a user interface layout arranged according to the object property layout specified in the Customize Properties dialog C of FIG. . In the order specified in , the \u201cprogram\u201d text field C is shown at the top of the layout, with a representation as edited through use of the class called NameFormatter. Next, the \u201cdescription\u201d text area B is shown, followed vertically downward by the \u201cdocumentation\u201d text area B and the \u201cOptions\u201d group box .","The NameFormatter class has the following exemplary constructor:\n\n",{"@attributes":{"id":"p-0065","num":"0088"},"figref":"FIG. 10","b":["1004","1002","1006","1008","1004","1002","1006","1008","1006","1006","200","2","1008","500","5","1008","1002"]},"The steps followed by a process flow development tool in allowing a user to customize a layout for object properties is illustrated in FIG. . The tool initially receives an indication of a Flow Type of interest (step ) from the underlying tool platform. It is then necessary for the tool to determine a set of properties for the Flow Type (step ). Where the Flow Type is a Java class, the process flow development tool may communicate with the underlying tool platform using an API, for instance, a Meta Object Facility (MOF) API. As will be apparent to a person skilled in the art, for Java objects there exists reflective APIs that will provide a list of the properties of a specified class. Once the set of properties for a particular Flow Type (class) have been determined, a dialog may be opened to display to the user, say, on the display monitor  of , the set of properties in a dialog like the Customize Properties dialog  of  (step ). Using the Customize Properties dialog , the user may then indicate a desire to create a group, say, by selecting the \u201cCreate Group . . . \u201d button  (FIG. ). Responsive to receiving this group creation indication (step ), the tool may present a dialog like the Create Group Attributes dialog  of  (step ). It is through such a dialog that the tool may receive an indication which of properties to group (step ). Responsive to the Create Group Attributes dialog  being closed, say, though the selection of the \u201cOK\u201d button  (FIG. ), an object property layout may be stored (step ) in an Attribute Organizer object associated with the particular Flow Type, including information about the properties grouped in step . The association of an Attribute Organizer object with a Flow Type may be accomplished by specifying the Attribute Organizer object in a field of the Flow Type. Alternatively, the Attribute Organizer object can be stored and referenced by a plug-in file associated with the Flow Type.","As discussed above, the user of the tool will select a Flow Type and create an instance, i.e., an object, of the selected Flow Type on the canvas  (FIG. B). If the user has already customized the property layout for the selected Flow Type, a new Attribute Organizer object (a copy of the Attribute Organizer object associated with the Flow Type) is associated with the Flow Type object. If the user has not customized the property layout for the selected Flow Type, the Flow Type object is created without an associated Attribute Organizer object.","Once a Flow Type object is on the canvas , it is represented by a node  (FIG. B). A user may wish to review the properties of the Flow Type object. This wish may be indicated, for example, by directing a cursor, through the use of the mouse  (FIG. A), to a position over the node . A right mouse click may act as a request to view a menu related to the node . From the perspective of the tool and in view of , the tool receives the request from the user to present a menu in respect of the Flow Type object (step ). The tool then determines whether the Flow Type object has an associated Attribute Organizer object (step ). If the Flow Type object has an associated organizer object, the tool presents the node-specific menu including a \u201cProperties\u201d menu item (step ). The tool may then receive an indication from the user of a selection of the \u201cProperties\u201d menu item () and, in response to receiving the indication, the tool may display a Properties dialog with a layout specified by the associated Attribute Organizer object (step ). In the case where the node  does not have an associated Attribute Organizer object, the node-specific menu presented to the user does not include a \u201cProperties\u201d menu item (step ). Should the user select an action from this menu, the tool reacts accordingly (step ).","As will be apparent from the foregoing, after extraction of properties of a Flow Type (class), a property editor may be used to select properties and organize selected properties for display. This selection and organization is stored in an Attribute Organization object associated with the Flow Type (class). Then, when an object of the Flow Type is instantiated, properties of the instantiated Flow Type object will be displayed as dictated by the Attribute Organization object.","Advantageously, where the underlying tool platform supports the creation, at runtime, of compounds of objects, i.e., an object made up of several objects of different Flow Types, embodiments of the present invention maintain the ability to allow the customization of the layout of the properties of the compound object. This ability to work with compound objects is feasible because embodiments of the present invention can function with any object whose type is declared in an extension point in a plugin.xml file. The layout of those runtime created objects can be set via APIs which save a desired layout into an Attribute Organizer object with or without user input, dependent upon the manner in which the new (compound) object is created.","Another advantage of the present invention is an ability to change the property layout of a Flow Type object at runtime without having to rewrite the Properties dialog of the Flow Type. This can be achieved by updating the Attribute Organizer of the Flow Type to reflect a desired change in the property layout. Consequently, any instances of the Flow Type, which, naturally, have an association with the Attribute Organizer of the Flow Type, are affected by the change. Examples of changes to the property layout include property addition, property deletion, movement of properties from one page (group) to another and new page creation.","As will be apparent to a person skilled in the art, the structure of the Properties dialog need not necessarily be as illustrated herein. A departure from the left pane illustrated structure may include the well-known use of \u201ctabs\u201d protruding from the top of each page to identify the page and allow the selection of other pages.","Other modifications will be apparent to those skilled in the art and, therefore, the invention is defined in the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["In the figures which illustrate example embodiments of this invention:",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0016","num":"0015"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0017","num":"0016"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 5","FIG. 4"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":["FIG. 6","FIG. 4"]},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 7","FIG. 6"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":["FIG. 8","FIG. 6"]},{"@attributes":{"id":"p-0022","num":"0021"},"figref":["FIG. 9","FIG. 8"]},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 11A"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 11B"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 13"}]},"DETDESC":[{},{}]}
