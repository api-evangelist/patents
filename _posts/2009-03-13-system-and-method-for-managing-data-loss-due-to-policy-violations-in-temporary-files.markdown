---
title: System and method for managing data loss due to policy violations in temporary files
abstract: A method and apparatus for managing data loss due to policy violations in temporary files is described. In one embodiment, the method includes monitoring, by a client agent, information content on a client for violations of a policy. The method further includes determining, by the client agent, that a violation of the policy has occurred for content of a temporary file of an application. In one embodiment, the policy violation of the temporary file is correlated, by the client agent, with an original file of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07991747&OS=07991747&RS=07991747
owner: Symantec Corporation
number: 07991747
owner_city: Mountain View
owner_country: US
publication_date: 20090313
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["PRIORITY","FIELD OF INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PRESENT INVENTION"],"p":["This application claims the benefit of priority to U.S. Provisional Patent Application Ser. No. 61\/098,207, filed Sep. 18, 2008, which is incorporated herein by reference in its entirety.","Embodiments of the invention relate to the field of processing data, and more particularly, to correlating data loss prevention policy violations detected for temporary application files with associated application files.","Data Loss Prevention (DLP) involves computer and information security, where DLP systems identify, monitor, and protect data in use (e.g., endpoint actions), data in motion (e.g., network actions), and data at rest (e.g., data storage). DLP systems may be deployed at user endpoint devices, network servers, etc. to inspect information content. DLP systems are designed to detect and prevent the unauthorized use and transmission of confidential information.","Client computer systems and devices, such as personal computers, laptop computers, personal digital assistants, smart phones, etc. are prolific in modern organizations. Often these systems include applications that allow users to create and edit documents, spreadsheets, presentations, databases, etc, which are referred to collectively as \u201cdocuments.\u201d","When a user edits a document in an application, such as an MSOFFICE\u2122 document edited in MSWORD\u2122, the application creates a temporary application file in the background. The temporary application file is utilized by the application to protect the user from data loss due to an abnormal termination of the application. That is, the temporary application file may be used to recover new\/edited content from the temporary file to prevent users from losing prior work.","This behavior of productivity and office applications interferes with real-time data loss prevention systems deployed on endpoint devices. That is, every time a temporary file is written, an endpoint data loss prevention system detects the file creation. The newly created, and temporary, application file may thereafter be scanned by a data loss prevention system for data loss prevention policy violations. When a policy violation occurs, the name of the temporary file is reported in a corresponding data loss prevention incident report. However, temporary file names, such as \u2018\u02dcwrd0394575.doc\u2019, are not based on the original file name and thus make it difficult to associate the policy violation with the original document.","A method and apparatus for managing data loss due to policy violations in temporary files is described. In one embodiment, the method includes monitoring, by a client agent, information content on a client for violations of a policy. The method further includes determining, by the client agent, that a violation of the policy has occurred for content of a temporary file of an application. In one embodiment, the policy violation of the temporary file is correlated, by the client agent, with an original file of the application.","A method and apparatus for managing data loss due to policy violations in temporary files is described. In one embodiment, the method includes monitoring, by a client agent, information content on a client for violations of a policy. The method further includes determining, by the client agent, that a violation of the policy has occurred for content of a temporary file of an application. In one embodiment, the policy violation of the temporary file is correlated, by the client agent, with an original file of the application.","In the following description, numerous details are set forth. It will be apparent, however, to one of ordinary skill in the art having the benefit of this disclosure, that the present invention may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present invention.","Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.","It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion, it is appreciated that throughout the description, discussions utilizing terms such as \u201cprocessing\u201d, \u201ccomputing\u201d, \u201ccalculating\u201d, \u201cdetermining\u201d, \u201cdisplaying\u201d or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.","The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions.","The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.",{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 1","b":["100","100","104","106","108","108","104","106","104","106"]},"Alternatively, the DMS , PMS , and user endpoint devices (e.g., user endpoint device - to -N) may reside on different LANs that may be coupled together via the Internet but separated by firewalls, routers, and\/or other network devices. In yet another configuration, the PMS  may reside on a server, or different servers, coupled to other devices via a public network (e.g., the Internet) or a private network (e.g., LAN). It should be noted that various other network configurations can be used including, for example, hosted configurations, distributed configurations, centralized configurations, etc.","The PMS  is responsible for receiving parameters pertaining to data loss prevention (DLP) policies, such as pre-configured template policies or customized policies, and creating policies based on these parameters. In one embodiment, the PMS  receives the policy parameters via a policy definition graphical user interface (not shown). In another embodiment, the PMS  receives the policy parameters from an Application Programming Interface (API) or via a configuration file formatted in text or a defined data format (e.g., extensible markup language (XML) or binary format).","The PMS  may create policies based on regulations concerning handling of sensitive information maintained by an organization, or based on corporate data governance rules. The regulations may include, for example, the Health Insurance Portability and Accountability Act (HIPAA) ensuring the confidentiality of electronic protected health information, California Senate Bill 1 (SB1) or Senate Bill 1386 (SB1386) controlling customer information leaving the company and affiliates, the Gramm-Leach-Bliley Financial Services Modernization Act controlling customer information leaving a financial institution, the Cardholder Information Security Program (CISP) controlling handling of customer credit card information maintained by an organization, or the like. In one embodiment, the PMS  may use policy templates or customized policies pre-configured based on input provided by individuals familiar with the relevant regulations or corporate data governance rules.","A policy may include a set of rules that specify which information should be present in a message to trigger a violation. For example, a message may represent a transmitted document (e.g., an email message, a web mail message, etc.), a document generated by an application, or data stored in databases, caches, etc. The set of rules may provide specific conditions for triggering a violation (e.g., a sender or recipient of a message, inclusion in a message of a keyword(s) or regular expression pattern, etc.). The rules in the policy may be combined using logical connectives of first-order logic (e.g., AND, OR, NAND, NOR, NOT, equivalent, nonequivalent, or the like).","In one embodiment, a policy specifies source data that should be protected from unauthorized transmission, access or any other use. The source data may be stored in a tabular format (e.g., data in a relational database, data maintained by client\/server applications built on top of relational databases, data in document and file systems that store table formatted data (e.g., CSV files or Excel spreadsheet files), etc.) or it may be stored in a non-tabular format that may be convertible to a tabular format (e.g., data stored as comma separated values in a flat file, a password database or a single-sign-on system, relational data in an object-oriented database, etc.) or may not be convertible to a tabular format (e.g., text files, etc.). The policy may also specify which portions of the source data  should be included in a message to trigger a policy violation.","In one embodiment, the PMS  creates an abstract data structure that includes signature of data elements of the source data. The signature may be an encrypted or hashed copy of the data element or some other representation of the data element that would not allow a malicious user to recover the actual content of the data element. In one embodiment, the abstract data structure also includes placement information of data elements within the source data. The placement information may include the number of a row storing the data element in the source data and\/or the number of a column storing the data element in the source data. Optionally, the placement information may also include the data type of the column. The signatures and placement information may be stored in a tuple-storage structure derived from the source data. A tuple-storage structure provides a mechanism for storing multiple tuples associated with the elements of the source data. Examples of tuple-storage structures include a hash table, a vector, an array, a tree or a list. Each type of the tuple-storage structure is associated with a method for retrieving a set of tuples for any given content element (the set of tuples may be empty if no match is found in the tuple-storage structure). The abstract data structure may be created periodically and sent to the DMS , along with the policy that is to be implemented.","In one embodiment, the DMS  is responsible for monitoring information content (e.g., sent email messages, instant messages, text messages, and\/or other documents according to a configuration of the DMS ) transmitted over network  to detect policy violation incidents. In one embodiment, the DMS detects policy violation incidents using the policies supplied by the PMS  and the abstract data structure created by the PMS . Once the DMS  has detected a policy violation, the DMS  reports the policy violation to an appropriate entity (e.g., a manager, database administrator, a reporting system, etc.) or performs some other action.","In one embodiment, the user endpoint devices (e.g., user endpoint devices - to -N) assist the DMS  in detecting policy violations by monitoring information content locally (e.g., files and\/or other documents) on the user endpoint devices . In one embodiment, the information content is monitored in real-time by a data loss prevention (DLP) agent  of the user endpoint devices , utilizing policies supplied by the PMS . In one embodiment, user endpoint devices - to -N are client devices, such as, for example, personal computers, laptop computers, cellular telephones, personal digital assistants (PDAs), etc. In one embodiment, once a DLP Agent  has detected a policy violation, the DLP Agent  notifies the DMS , which then reports the policy violation to an appropriate entity (e.g., a manager, database administrator, a reporting system, etc.) or performs some other action.","In one embodiment, user endpoint devices  include applications (not shown) that generate temporary application files. For example, when an MSOFFICE\u2122 file is edited by a user, a temporary file is created. Temporary files are typically generated automatically by productivity or office applications (e.g., word processing applications, spreadsheet applications, database applications, email applications, etc.), and reflect an edited state of a corresponding original (non-temporary) application file. When an application file is saved\/closed by a user of a user endpoint device , the prior version of the application file is deleted, the temporary file is renamed with the corresponding non-temporary filename, and then closed. In one embodiment, DLP agents  monitor temporary application files for policy violations. When a policy violation occurs for a temporary file, the DLP agent  causes the temporary file policy violation to be reported to the appropriate entity.","However, temporary files are created with non-administrator friendly file names (e.g., \u02dcwrd002343.doc, \u02dctmpfilename.doc, etc.). Thus, when a policy violation occurs with respect to a temporary file, the temporary file name (e.g., \u02dcwrd002343.doc) is included in the generated incident report. The use of temporary file names make it difficult to determine the actual file (e.g., the corresponding non-temporary application file) involved in policy violation, an associated user, etc. Therefore, in one embodiment, DLP Agent  correlates the temporary application file policy violation with a name of a corresponding original application file. Because the original application file name is correlated with the temporary application file policy violation, the original application file is identified in a policy violation report when the report is transmitted to the appropriate entity.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 2","b":["200","250","200","208","200","208","200","208","210","210","208","212","212"]},"In one embodiment, file system driver  is running on top of the file system  using an application programming interface (API) of the file system . The file system driver  monitors file system operations, such as rename, create, close, read, write, etc., file system operations. In one embodiment, file system driver  reports monitored file system operations to DLP agent . Furthermore, in one embodiment, file system driver  receives file system instructions from DLP agent , such as an instruction for file system  to delete a file that violates a policy, and causes file system  to perform the associated action.","In one embodiment, user endpoint device  includes an application . In one embodiment, application  is a productivity or office suite application, such as an MSOFFICE\u2122, COREL\u2122, STAROFFICE, etc. application. Furthermore, the application may be any of a word processing application (e.g., WORD\u2122, WORDPERFECT, STARWRITER\u2122), a spreadsheet application (e.g., EXCEL\u2122, QUATRO PRO\u2122, STARCALC\u2122), a presentation application (e.g., POWERPOINT\u2122, PRESENTATIONS\u2122, STARIMPRESS\u2122), a database application (e.g. ACCESS\u2122, STARBASE\u2122), drawing applications (e.g., STARDRAW\u2122), diagramming applications (e.g., VISIO\u2122), etc. Application  enables a user to create and edit application file . When application  creates a new document or edits an existing document, Application  instructs the file system  via the file system driver  to create a temporary application file (not shown) in local storage  or removable storage device . As content is added to document , application  applies the edit to the temporary application file. In response to a request to close document , application  causes application file  to be deleted, and the temporary application file to be closed and then renamed with application file 's original file name. As discussed above, file system driver  monitors the actions taken by file system , such as the delete, rename, and close operations, and reports the operations to DLP agent . In one embodiment, file system driver  reports all monitored file system actions to DLP agent . In another embodiment, file system driver  reports less than all actions to DLP agent , such as file system operations related to specific file types, files related to specific applications, etc.","In one embodiment, DLP agent  is responsible for the real-time monitoring and policy enforcement for content within application files. As discussed above, when a user creates or edits application file , the edits are applied to a corresponding temporary application file within either local storage  or removable storage device . Thus, in one embodiment, DLP agent  monitors temporary application files as well.","In one embodiment, DLP agent  opens a channel with file system driver , and instructs file system driver  to report operations performed by file system  to the DLP agent . In one embodiment, file system driver  reports the file system operations to file system connector . File system connector  informs policy violation detector  of the actions performed by file system .","In one embodiment, policy violation detector  is responsible for real-time monitoring of content within application file , and corresponding temporary application files. In one embodiment, policies utilized by policy violation detector  are supplied by the PMS . Policy violation detector  is further responsible for generating policy violation reports, and sending it to DMS  for transmission to an appropriate source, such as a network administrator, database, etc.","In one embodiment, when policy violation detector  detects a policy violation in a temporary application file, policy violation detector  stores the incident, and may thereafter correlate the policy violation with an original application file (e.g., a non-temporary application file) in a policy violation report. As will be discussed in greater detail, in one embodiment, policy violation detector  makes the correlation when policy violation detector  monitors a sequence of operations performed by file system .","In one embodiment, policy violation detector  may further instruct file system , utilizing the channel between file system connector  and file system driver , to perform remedial actions in response to detection of a policy violation. In one embodiment, where the policy violation is detected for a temporary file stored on removable storage , policy violation detector  instructs file system  to delete the temporary file. In one embodiment, where a temporary application file has been correlated with an original application file, policy violation detector  causes the renamed temporary application file (e.g., the original application file) to be deleted from the removable storage  after the rename operation. In another embodiment, policy violation detector  causes the temporary application file to be deleted immediately from the removable storage , and without waiting until the temporary application file has been correlated with application file . Any number and variety of policies may be supplied by a PMS (not shown), and acted upon by policy violation detector , and sent to DMS .",{"@attributes":{"id":"p-0042","num":"0041"},"figref":"FIG. 3","b":["300","300","300","250"]},"Referring to , processing logic begins by monitoring information content on a client for a data loss prevention (DLP) policy violation (processing block ). As discussed above, the information content may include content of original application files and content of temporary application files, which are automatically created by office or productivity applications, such as word processing, spreadsheet, etc. applications, when an original application file is created or opened. Furthermore, the files are created with an automatically generated name, such as \u2018\u02dcwrd387903.doc\u2019. In one embodiment, processing logic monitors the information content in real-time.","Processing logic detects a policy violation and determines that the policy violation has occurred for content of a temporary application file (processing block ). In one embodiment, processing logic determines if a policy violation has occurred according to one or more policies supplied by a policy management server, such as PMS  of . In one embodiment, as new user content is added to the temporary application file, or existing content is edited, corresponding modifications are made to the temporary application file by the application. In one embodiment, processing logic determines if the content, new or edited, violates a data loss prevention policy.","Processing logic correlates the temporary application file policy violation with an original application file (processing block ). In one embodiment, and as discussed in greater detail below, processing logic utilizes monitored file system operations to correlate the policy violation with an original application file. In another embodiment, the correlation could be based on monitored function calls issued by an application. In yet another embodiment, the correlation could be based on a determination that a file is a temporary file, such as by detecting a file name that beings with \u2018\u02dc\u2019 or \u2018\u02dctmp\u2019, and monitoring subsequent file system operations on the temporary file.","Processing logic then generates a policy violation report for the original application file (processing block ). In one embodiment, because the temporary application file policy violation was correlated with an original application file, the original application file name (i.e., example_filename.doc) may be used in the resultant policy violation report, as opposed to the temporary application file name (i.e., \u02dcwrd387903.doc'). By correlating and reporting the policy violation, using the original (non-temporary) application file name, the policy violation report is more precise (since users are usually not aware of the temporary file), simplifies database recording of policy reports, etc.",{"@attributes":{"id":"p-0047","num":"0046"},"figref":"FIG. 4","b":["400","400","400","250"]},"Referring to , processing logic begins with receiving data identifying file system operations for a temporary application file stored in local memory (processing block ). In one embodiment, the temporary application file is located on a hard drive of a user endpoint device, such as local storage  of . Furthermore, as discussed above, the file system operation data may be received from a file system driver running on top of an operating system's file system. In one embodiment, processing logic receives data for all file system operations, such as file system read, undo open, close, rename, delete, etc. operations. Furthermore, in one embodiment, the file system driver informs processing logic that the file system operations are operations performed on a local memory.","Processing logic determines when a policy violation has occurred for contents of the temporary application file (processing block ).","Processing logic detects a first file system operation and then detects a second file system operation (processing blocks  and ). In one embodiment, processing logic detects the sequence of operations, where each operation in the sequence is a different operation. In one embodiment, the first operation is a close operation applied to the temporary application file, and the second operation is a rename operation to be performed on the closed temporary application file. For example, processing logic may determine that a file system is attempting to rename \u2018\u02dcwrd387903.doc\u2019 to \u2018filename.doc\u2019.","Processing logic then determines if the operations indicate a file correlation (processing block ). As will be discussed in greater detail below, in one embodiment, processing logic utilizes properties of monitored file system operations to determine if a temporary application file may be correlated with a non-temporary application file.","When processing logic determines that a correlation does exist, processing logic correlates the temporary application file policy violation with a corresponding original application file (processing block ), and generates a policy violation report for the original application file (processing block ). As a result, a policy violation report is issued for \u2018filename.doc\u2019, even though the policy violation determination was made for \u02dcwrd387903.doc'.","However, when processing logic determines that a correlation does not exist, processing logic generates a policy violation report for the temporary application file (processing block ). In one embodiment, only the policy violation correlated with a non-temporary application file is reported. In another embodiment, all policy violations (e.g., violations which have been correlated, and violations associated with temporary application files) are reported. In this case, a policy reporting system is enabled to decide how to handle the policy violation reports, such as ignoring reports for files beginning with \u2018\u02dc\u2019, \u2018\u02dctmp\u2019, etc.",{"@attributes":{"id":"p-0054","num":"0053"},"figref":"FIG. 5","b":["500","500","500","250"]},"Referring to , processing logic begins by receiving file system operation data for a temporary application file stored in removable storage device (processing block ). In one embodiment, processing logic receives an indication, from a file system driver, that the file system operations are being performed on a removable storage device. In one embodiment, the removable storage device is a flash memory device, universal serial bus (USB) flash drive, external hard disk drive, writeable compact disk, etc.","Processing logic determines a policy violation has occurred for contents of the temporary application file (processing block ). Then, processing logic detects a first file system operation and then detects a second file system operation (processing blocks  and ). As discussed above, in one embodiment, the file system operations may include a rename operation and a close operation.","Processing logic then initiates remedial actions (processing block ). In one embodiment, processing logic marks the renamed temporary application file for deletion before the second operation is permitted to be executed by the file system, and causes the renamed temporary application file to be deleted after the second operation occurs. Processing logic causes the file to be deleted because of the nature of the storage device. That is, because the file is located on a removable storage device, and a policy violation has been detected, processing logic actively removes the policy-violating file from the removable storage device to ensure that the device is not subsequently disconnected and the sensitive data lost or stolen.","Processing logic then determines if the operations indicate a file correlation (processing block ). As will be discussed in greater detail below, in one embodiment, processing logic utilizes properties of the monitored file system operations to determine if a temporary application file may be correlated with a non-temporary application file.","When processing logic determines that a correlation does exist, processing logic correlates the temporary application file policy violation with a corresponding application file (processing block ), and generates a policy violation report for the application file (processing block ). However, when processing logic determines that a correlation does not exist, processing logic generates a policy violation report for the temporary application file (processing block ).",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["600","600","600","250"]},"Referring to , processing logic begins by determining a time when a request to close a temporary application file occurred has occurred (processing block ). Processing logic also determines a time when a request to rename the closed temporary application file occurred (processing block ). In one embodiment, processing logic utilizes properties of monitored file system operations to determine if the temporary application file may be correlated with a non-temporary application file. In one embodiment, the file system operations times are utilized by processing logic for file correlation, and more particularly the time between a sequence of file system operations.","From the two times determined by processing logic, processing logic determines a time interval between the close and rename requests (processing block ). In one embodiment, the temporary application file is first closed and then renamed. Thus, when the rename operation occurs, processing logic determine the elapsed time between the two operations by obtaining the last write time of the file and the current system time.","If processing logic determines that the time interval is within a time limit (processing block ), processing logic correlates a temporary application file with a name for an application file (processing block ). In one embodiment, the time limit is of a very short duration, such as 50-100 milliseconds. Because the time interval is set so short, processing logic is able to infer that the file system operations are the result of some computerized behavior, and not user actions. For example, when a user closes an application file, the application will cause a temporary application file to be closed and then renamed. The sequence of operations is automated by the application and will occur rapidly (e.g., within the 50-100 millisecond time limit). However, when a user manually renames a file, the rename operation may not be associated with a close operation, or the time between a manual user-renaming of a file and the file's closure will be beyond the time limit. Therefore, processing logic is able to determine when certain file system operations for temporary application files should be correlated with associated non-temporary application files.","However, if processing logic determines that the time interval is not within the time limit, processing logic does not correlate the temporary application file with a name for an application file.",{"@attributes":{"id":"p-0065","num":"0064"},"figref":"FIG. 7","b":"700"},"The exemplary computer system  includes a processing device (processor) , a main memory  (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory  (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device , which communicate with each other via a bus .","Processor  represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processor  may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor  may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processor  is configured to execute the processing logic  for performing the operations and steps discussed herein.","The computer system  may further include a network interface device . The computer system  also may include a video display unit  (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device  (e.g., a keyboard), a cursor control device  (e.g., a mouse), and a signal generation device  (e.g., a speaker).","The data storage device  may include a machine-accessible storage medium  on which is stored one or more sets of instructions (e.g., software ) embodying any one or more of the methodologies or functions described herein. The software  may also reside, completely or at least partially, within the main memory  and\/or within the processor  during execution thereof by the computer system , the main memory  and the processor  also constituting machine-accessible storage media. The software  may further be transmitted or received over a network  via the network interface device .","While the machine-accessible storage medium  is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-accessible storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, and\/or associated caches and servers) that store the one or more sets of instructions. The term \u201cmachine-accessible storage medium\u201d shall also be taken to include any medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term \u201cmachine-accessible storage medium\u201d shall accordingly be taken to include, but not be limited to, solid-state memories, optical media, and magnetic media.","It is to be understood that the above description is intended to be illustrative, and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The present invention will be understood more fully from the detailed description given below and from the accompanying drawings of various embodiments of the invention, which, however, should not be taken to limit the invention to the specific embodiments, but are for explanation and understanding only.",{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
