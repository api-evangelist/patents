---
title: Configuring a GUI element to subscribe to data
abstract: System and method for configuring a graphical user interface (GUI) element to publish data to a data target and/or subscribe to data from a data source. During program development, a developer associates a GUI element with a program, e.g., for receiving user input data and/or indicating data to the user. The developer configures the GUI element to publish data associated with the GUI element to a data target and/or to subscribe to data from a data source, and specifies a data source or target for the data connection. The program is executed, during which the program automatically determines and uses an appropriate protocol for interfacing with the data source/target to connect to or open the data source and/or target, and receive data from the data source, which is provided to and displayed by the GUI element, and/or send or write data associated with the GUI element to the data target.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07287230&OS=07287230&RS=07287230
owner: National Instruments Corporation
number: 07287230
owner_city: Austin
owner_country: US
publication_date: 20001213
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","DESCRIPTION OF THE RELATED ART","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE PREFERRED EMBODIMENTS"],"p":["The present invention relates to the field of computer program data exchange, and more particularly to a system and method for configuring a graphical user interface (GUI) element to publish or subscribe to data, e.g., to send data associated with the GUI element to a data target or to receive and display data from a data source.","Graphical user interfaces (GUIs) enable users to interact with computer programs in an intuitive manner, utilizing various types of graphical user interface (GUI) elements. Different programming environments may enable developers to include any of various types of GUI elements in a program's graphical user interface. For example,  (prior art) illustrate several GUI elements, including GUI elements that may be used in instrumentation or measurement applications.  (prior art) illustrates an exemplary graphical user interface panel for a measurement program for computing the averaged power spectrum of a simulated input signal. For example, the panel includes a knob GUI element for adjusting the frequency of the simulated signal and a chart GUI element for displaying a chart of the power spectrum.  (prior art) illustrates additional examples of GUI elements useful for instrumentation or measurement applications, e.g., a thermometer, an LED, a meter, a waveform chart, a tank, etc. Other types of GUI elements that may be included on a graphical user interface panel include text boxes, check boxes, etc.","GUI elements may be configured to indicate data to the user, e.g., by displaying the data on a display screen. For example, the Power Spectrum chart on the user interface panel of  displays a chart of the averaged power spectrum computed by the program.","In many cases, it may be desirable for data indicated by a GUI element to originate from a data source outside of the program. For example, in various applications, it may be desirable for the data to originate from a file, such as a file on the host computer system or a file received from a remote computer server, such as an FTP or HTTP server. It may also be desirable for the data to originate from another program or process running on the host computer system or a remote computer system. For example, an application for viewing live weather data may display data received from a remote computer system that senses weather-related variables, such as temperature, wind speed, humidity, etc., and transduces these variables into data that the application can display. It may also be desirable for the data indicated or displayed by a GUI element to be provided to a data target outside of the program.","GUI elements may also be configured to provide user input to a program. For example, when the value of the Frequency knob on the user interface panel of  changes, e.g., due to a user interactively turning the knob, the program may detect this change in value, e.g., by intercepting an event triggered when the value changes, and may respond by changing the signal that is generated in accordance with the new frequency value.","In many cases, it may be desirable for user input received by a GUI element to be provided to a data target outside of the program. For example, a program to control a system located in a remote laboratory may have a graphical user interface panel including various GUI elements such as knobs, buttons, etc. When a user changes the values associated with the GUI elements, it may be desirable for the program to send the values to a program running on a computer system in the remote laboratory which is operable to send control signals to the system, based on the received GUI element values. It may also be desirable for an input GUI element to receive input data from a data source.","In the prior art, developing a program which associates a GUI element with an external data source or target is often a difficult and time-consuming task. For example, consider the program described above for viewing weather data, wherein a client computer system that executes the viewer program is connected over a TCP\/IP network to a server computer that generates the data. In order for the viewer program to receive the data from the server computer, the TCP protocol would typically be used, which may involve several steps, such as:\n\n","This list only provides an overview of the complexity involved in receiving the data. Once the data is received, the developer must still associate the data with the GUI element such that the data is displayed properly. Thus, this scenario illustrates several details that many developers would not have the necessary skill to deal with or would prefer not to deal with.","A further disadvantage of the prior art is that a consistent mechanism for associating GUI elements with different types of data sources and targets is lacking. For example, reading data from a file instead of a remote server may require the developer to code a different set of steps, e.g., to open the file, read data from the file, close the file, etc.","Thus, associating a GUI element with different types of data sources or targets may require different types of expertise. The situation is further complicated when platform issues are considered. For example, different computing platforms support different mechanisms for data exchange. For example, a Windows program may use DDE or ActiveX\/COM, whereas programs running on other platforms use different mechanisms.","Thus, an improved system and method for associating a GUI element with a data source and\/or target are desired. As described above, this task can be difficult and time-consuming, and some users may not possess the necessary knowledge required, especially those users who are not highly trained in programming techniques.","Thus, it would be highly beneficial if the system and method were to enable the user to configure a GUI element to publish data to a data target and\/or subscribe to data from a data source without requiring the user to specify any source code. It would be also desirable for such an improved system and method to be independent of the type of data source or target. For example, the method of configuring a chart GUI element to display waveform data read from a file would ideally be the same or substantially the same as the method of configuring the chart GUI element to display live waveform data generated by a remote application. It would be also desirable for such an improved system and method to be independent of the platform on which the program runs.","One embodiment of the present invention comprises a system and method for configuring a graphical user interface (GUI) element to publish data to a data target and\/or subscribe to data from a data source. During program development, a developer may associate a GUI element with a program or otherwise cause a GUI element to be displayed. The GUI element may be for receiving user input data or indicating data to the user. The GUI element may be an element of any of various types, e.g., depending on which GUI elements are supported by an application development environment that the developer uses to create the program. For example, various application development environments may support GUI elements such as graphs, text boxes, check boxes, knobs, etc. The application development environment may also enable the developer to create or use custom GUI elements. For example, some application development environments enable developers to use custom GUI elements packaged as ActiveX controls.","The GUI element (or a set of GUI elements) may be associated with the program in various ways, e.g., depending on the particular application development environment or programming language. Typically, the developer creates a graphical user interface panel and places various GUI elements on the panel, e.g., by choosing the GUI elements from a palette, from menu options, from a dialog box, etc.","The developer may then configure the GUI element to publish data associated with the GUI element to a data target and\/or to subscribe to data from a data source. In the preferred embodiment, the developer is not required to specify any source code for the program in performing this configuration. For example, the developer may simply invoke a dialog box and choose from a set of options, such as \u201cPublish\u201d, \u201cSubscribe\u201d, and \u201cPublish and Subscribe\u201d in order to specify a data connection type for the GUI element. The developer may also specify a data source or target for the data connection, e.g., by specifying a uniform resource locator (URL).","In the preferred embodiment, the developer may specify various types of data sources\/targets for the data connection. The type of data source\/target may be specified by the access method portion of a URL. For example, a URL such as \u201chttp:\/\/www.ni.com\/data.html\u201d specifies an HTTP server, while a URL such as \u201cftp:\/\/www.ni.com\/data.txt\u201d specifes an FTP server. In one embodiment, supported data sources\/targets include: files, HTTP servers, FTP servers, OPC servers, SNMP servers, and a type of server referred to herein as a \u201cDataSocket\u201d server. In other embodiments, any of various other data source\/target types may be supported.","Once the developer has created the GUI element and configured the GUI element with a data connection to a data source and\/or target, the GUI element may be operable to automatically begin publishing data or subscribing to data. Alternatively, if the GUI element is comprised in a program, the GUI element may publish and\/or subscribe to data when the program is executed. During program execution, the program may be operable to automatically, i.e., programmatically, determine and use an appropriate protocol for interfacing with the data source\/target, such as HTTP, FTP, SNMP, etc.","If the developer configured the GUI element to subscribe to data from a data source, then the program may connect to or open the data source, using an appropriate protocol or access method, and receive data from the data source. This data may then be provided to the GUI element. If the GUI element is an input GUI element, the GUI element may be operable to receive and display the input data and provide the input data to other parts of the program. If the GUI element is an output GUI element, the output GUI element may be operable to display or otherwise indicate the received data to the user. The GUI element may indicate the data in various ways, e.g., depending on the type of data and\/or the GUI element type. The data is typically displayed on a display screen, but may also be indicated in other ways, e.g., as audio.","Any of various types of data may be associated with a data source, such as strings, scalars, Booleans, waveforms, etc. A given GUI element may only be operable to receive or indicate certain types of data. For example, a chart GUI element may be able to display two-dimensional numeric waveform data, but not three-dimensional waveform data. In this case, if three-dimensional waveform data is received from a data source with which the chart GUI element is associated, an invalid data connection may be indicated, e.g., by displaying a small colored indicator beside the GUI element. In one embodiment, data may be received in a self-describing format enabling the program (or execution environment) to parse the data appropriately and determine whether the data is valid data for a particular GUI element. In one embodiment, if the data is not valid data for the GUI element, then the program or execution environment may be operable to dynamically select a GUI element that is valid for the data, i.e., a GUI element that can receive and display the data. This GUI element may then be dynamically substituted for the original GUI element, such as at execution time.","If the developer configured the GUI element to publish data to a data target, then the program may connect to or open the data target, using an appropriate protocol or access method, and send or write data associated with the GUI element to the data target. For example, data may be associated with the GUI element programmatically. In other words, a computer program may operate to generate data during program execution and provide the data to the GUI element, such as for display. In the prior art GUI of , for example, the program includes source code to programmatically specify power spectrum data for the Power Spectrum chart to display. Thus, the developer could easily configure the Power Spectrum chart to publish the power spectrum data to a data target, e.g., to provide the data to a remote application or write the data to a file.","In other cases GUI element data to be published to a data target may be received as user input. In the prior art GUI of , for example, a data value for the Frequency knob GUI element is received as user input. Thus, the developer could easily configure the knob to publish the input frequency value received from the user to a data target, e.g., to control a remote system operable to receive the frequency value from this data target or to allow a remote user to view the input data being provided to the program.","In one embodiment, the developer may configure a GUI element to both publish and subscribe to data. For example, the developer could configure a knob GUI control, such as the Frequency knob shown in the GUI of , to publish and subscribe to data. For example, consider a situation in which two control programs execute at different locations, wherein both control programs monitor a remote system and control the opening and closing of a valve in the remote system. A knob GUI control for each program may display a value indicating a setting for the remote system valve. If a user of one of the control programs, i.e., the \u201cfirst\u201d control program, turns the knob, then the first control program may send a control message to the remote system, causing the remote system to adjust the valve setting accordingly. The first control program may also publish the new knob setting value to a data target\/source, such as a server, to which the knob GUI control of the first control program is configured to publish and subscribe. The other control program, i.e., the \u201csecond\u201d control program, may also subscribe and publish to this data source\/target, so that the change in the knob setting is automatically reflected on the GUI of the second control program. Since both control programs publish and subscribe to the data source\/target, a change in the GUI knob control setting that originates from the second control program will similarly be automatically reflected on the GUI of the first control program.","The scenario described above is one example of exchanging \u201clive\u201d data between different applications. In this case, data may be exchanged only periodically, e.g., when a user turns a knob GUI control on one of the control programs. In other cases, live data may be exchanged continuously. Other examples of live data exchange include: a reader application that subscribes to live multimedia data, e.g., audio and\/or video data, generated by a writer application; two chat programs that exchange live text data with one another; etc. Also, as measurement and automation applications have become increasingly distributed and software-oriented, live data exchange has become especially important in these applications, e.g., in order to send acquired or generated signals across a network.","In various embodiments, the live data exchange may be implemented in any of various ways. In one embodiment, a server program or process may act as an intermediate between a writer program that writes live data and a reader program that subscribes to the live data. In one embodiment, multiple reader programs may receive and display data generated by a writer program, by interfacing with the server. For example, multiple users may execute a reader program to view live weather data. In the prior art, creating these types of applications is typically a complicated task, but one embodiment of the present invention enables data exchange between a writer program and multiple reader programs executing in different locations to occur without the developer having to specify or write any source code to accomplish the data exchange.","Programs having GUI elements configured as described above may be implemented using any of various programming languages or application development environments. The GUI elements may also be associated with any of various programming tools or development environments. In one embodiment, the programs which include the GUI elements may be graphical programs. Graphical programming has become a popular programming paradigm, especially among scientists and engineers. In creating a graphical program, a developer may include a plurality of graphical nodes and other graphical elements on block diagram and connect the nodes and elements such that the resulting diagram graphically represents the functionality of the graphical program. The graphical nodes or icons may be connected using one or more of data flow, control flow, and\/or execution flow techniques. Many developers find graphical programming to be a more intuitive and user friendly model for developing a program, e.g., as opposed to using a traditional text-based programming language, such as C, C++, Basic, etc. Thus, one embodiment of the present invention further enhances the user-friendliness of graphical programming by enabling a developer to easily configure a data connection for a GUI element on a graphical program's graphical user interface panel.","In one embodiment, a program with a GUI element configured with a data connection to a data source or target may utilize a separate layer or component for interfacing with the data source or target. One embodiment of such a layer, referred to as \u201cDataSocket\u201d, is described. DataSocket provides a single, unified, end-user application programming interface (API) for connecting to data from a number of sources, such as local files, files on FTP or Web servers, and data items on OPC Servers. A DataSocket application specifies the data location by using a familiar networking standard, the URL. Just as a Web browser uses a URL to connect to a Web page, a DataSocket application uses a URL to connect to data. In addition, the DataSocket Transfer Protocol connects a DataSocket application to live data by specifying a connection to a DataSocket Server. The DataSocket Server manages most of the networking tasks for the developer.","With conventional technologies such as TCP\/IP, the developer would have to write code to convert data to an unstructured stream of bytes in the broadcasting application, as well as code to parse the stream of bytes back into its original form in subscribing applications. DataSocket, however, transfers data in a self-describing format that can represent data in an unlimited number of formats, including strings, scalars, Booleans, and waveforms. The DataSocket read and write operations transparently convert data to and from the underlying byte streams, eliminating the need to write complicated parsing code. DataSocket uses a protocol referred to as the DataSocket Transport Protocol (DSTP) to send data to and receive data from a DataSocket server.","As described above, many applications require data to be exchanged with various types of data sources and targets, but this data exchange is often a difficult task for developers. Thus various embodiments of the system and methods described above may greatly benefit users by enabling complicated exchange of data to be performed by a simple configuration of a GUI element for a program.","In the above description, the program developer may first include a GUI element in the program's graphical user interface and may then configure the GUI element with a data connection to a data source. In another embodiment, the developer may first specify a data source, e.g., via a URL, and the method may automatically or programmatically determine an appropriate GUI element to display data received from the data source, automatically include the GUI element in the program's GUI, and automatically configure the GUI element to display data from the data source when the program is executed. Various techniques for automatically determining an appropriate GUI element are described. For example, the method may connect to the data source to receive a data sample and may examine the received data to determine an appropriate GUI element.","In one embodiment, the decision of which GUI element to include in the program's GUI may be deferred until the program is executed, or a first GUI element may be selected and the GUI element may be changed to a new type during program execution. For example, it may not be possible to connect to the data source during program development. Also, the type of data associated with the data source could change from development time to runtime. Thus, in these cases it may be desirable to examine the data at runtime and select an appropriate GUI element dynamically or programmatically. The GUI element may then be dynamically included in the program's graphical user interface and configured to display the received data.","One embodiment of the invention comprises a program which utilizes this ability to dynamically or programmatically select a GUI element in order to enable end users to connect to various types of data sources and display data received from the data sources. In such a program, an end user (i.e., a user of the program, rather than the program developer) may specify a data source. The data source may be a data source of any of various types, such as a file or a server of various types, such as an HTTP server, an FTP server, an OPC server, an SNMP server, a DataSocket server, a database server, etc. The end user may specify the data source in any of various ways. For example, the program may be operable to receive URL information specifying the data source, similarly as described above.","In response to receiving the data source information from the end user, the program may be operable to automatically determine an appropriate GUI element for displaying data from the data source, display the GUI element, and provide data from the data source to the GUI element for display. The appropriate GUI element may be determined similarly as described above, e.g., by connecting to the data source to receive a data sample from the data source and then examining the received data, or in any of various other ways. Also, in one embodiment, the program may enable the user to explicitly specify a GUI element to use in viewing the data. For example, in response to a user command, the program may display a set of GUI elements from which the user can choose.","Thus, as previously described, one embodiment of the invention enables a program developer to develop a program which, when executed, is operable to display data from a particular data source, wherein, in developing the program, the program developer is able to simply display a GUI element and specify a data source URL with which to associate the GUI element, without having to program the functionality of interfacing with the data source. Another embodiment of the invention enables the implementation of a program which, when executed, enables an end user to specify a data source, e.g., via a URL, and view data received from the data source, wherein the end user may specify any of various types of data sources and any of various types of data may be received from the data sources. In this embodiment, one of various types of GUI elements is dynamically, i.e., programmatically, selected and displayed to allow the end user to view the received data. Thus, the end user may only be required to specify the data source, and selection, display, and configuration of the GUI element to subscribe to the data may be performed automatically or programmatically.","This latter embodiment may be utilized, for example, to implement a data viewer tool which end users may execute to view various types of live data. For example, the data viewer tool may enable end users to connect to remote instrumentation systems and view real-time data acquired or generated by the systems, including numeric data, two-dimensional waveform data, three-dimensional waveform data, etc.","While the invention is susceptible to various modifications and alternative forms, specific embodiments thereof are shown by way of example in the drawings and are herein described in detail. It should be understood, however, that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed, but on the contrary, the intention is to cover all modifications, equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.","Incorporation by Reference","The following patent applications are hereby incorporated by reference in their entirety as though fully and completely set forth herein:","U.S. patent application Ser. No. 09\/185,161 titled, \u201cDataSocket System and Method for Accessing Data Sources Using URLs\u201d filed on Nov. 3, 1998, whose inventor was Paul Austin;","U.S. patent application Ser. No. 09\/374,740 titled, \u201cSystem and Method for Automatically Creating URLs for Accessing Data Sources and Data Targets\u201d filed on Aug. 13, 1999, whose inventors were Paul F. Austin, David W Fuller, Brian H. Sierer, Kurt Carlson, Stephen Rogers and Chris Mayer; and","U.S. patent application Ser. No. 09\/518,492 titled, \u201cSystem and Method for Programmatically Creating a Graphical Program,\u201d filed on Mar. 3, 2000, whose inventors were Ram Kudukoli, Robert Dye, Melanie Jensen, and Yumiko Kawachi.","U.S. patent application Ser. No. 09\/546,047 titled, \u201cSystem and Method for Connecting to and Viewing Live Data using a Standard User Agent,\u201d filed on Apr. 10, 2000, whose inventor was Paul F. Austin.","U.S. patent application Ser. No. 09\/737,639, titled, \u201cSystem and Method for Automatically Configuring Program Data Exchange,\u201d filed on Dec. 13, 2000, whose inventor was Paul F. Austin.","U.S. patent application Ser. No. 09\/737,528, titled, \u201cSystem and Method for Automatically Configuring a Graphical Program to Publish or Subscribe to Data,\u201d filed on Dec. 13, 2000, whose inventor was Paul F. Austin.","FIGS. A and B\u2014Computer Systems Connected Via a Network","One embodiment of the present invention enables developers to easily create programs that exchange data with each other, including programs that execute on separate computer systems.  illustrate exemplary networked computer systems. It is noted that  are exemplary only and that, in various embodiments, the present invention may be used in any type of system, including a system with only one computer.",{"@attributes":{"id":"p-0072","num":"0077"},"figref":"FIG. 3A","b":["82","84","86","86","88","90","82","86","90","84","88","84","88"]},"In one embodiment, the first computer system  may execute a writer program that generates data, and the third computer system  may execute a reader program that uses the data generated by the first computer system . The computer system  may act as an intermediate server between the writer program and the reader program. For example, the intermediate server  may execute a server program (or process) with which the writer program and the reader program interface in order to exchange data. One embodiment of such a server program, referred to herein as a \u201cDataSocket server,\u201d is described below.","Such an intermediate server program may not necessarily execute on a separate computer system from the writer and reader programs. For example, the computer system  may execute the writer program which may interface with a server program also executing on the computer system . In this case, a reader program may interface with the server program executing on the computer system  in order to receive the data generated by the writer program. For example, the reader program may execute on the computer system , e.g., as shown in , or may execute on the same computer system . Alternatively, the writer program may execute on the computer system , and the server and reader programs may execute on the computer system .","The reader program may include a graphical user interface (GUI) with a GI element which the developer configured to subscribe to a data target to which the writer program writes data. In other words, the data target for the writer program may be a data source for the reader program. As described below, one embodiment of the present invention enables the developer to easily associate a GUI element with a data source, without having to specify or write any source code. The GUI element may indicate data received from the data source, e.g., by displaying the data in various ways.","The writer program may include a graphical user interface (GUI) with a GUI element which the developer configured to publish data to a data source from which the reader program receives data. In other words, the data source for the reader program may be a data target for the writer program. As described below, one embodiment of the present invention enables the developer to easily associate a GUI element with a data target, without having to specify or write any source code.","It is noted that the writer and reader program do not necessarily both have GUI elements configured as described above. For example, the writer program may include user-specified (i.e., developer-specified) source code to implement writing the data to the data target, rather than having a GUI element configured to publish data to the data target with no user-created source code required.","It is noted that the use of terms such as \u201cuser-specified\u201d and \u201cuser input\u201d may vary somewhat in the present disclosure. As described in the summary above, in various embodiments, the invention may be utilized during development of a computer program, e.g., to aid a developer to create a desired program, or may be implemented in an existing program, e.g., to enable an end user to execute the existing program to view data received from various types of data sources. In the first instance, \u201cuser input\u201d may refer to input received from the program developer, such as input received by an application development environment during editing of a program. In the second instance, \u201cuser input\u201d may refer to input received from an end user during execution of an existing program which implements an embodiment of the invention.","In a case where the writer program has a graphical user interface with a GUI element that displays the data that needs to be written to the data target, enabling the developer to simply configure the GUI element to automatically publish the data to the data target may be a very easy way to write the data to the data target. However, the writer program may not have a graphical user interface or may not display the data in a GUI element. For example, the reader program may receive data from a writer program executing on an embedded device that acquires real-time data from a physical system. In such a case, the writer program may include explicit source code to write the data to the data target.","Similarly, the reader program may include user-specified (i.e., developer-specified) source code to implement receiving the data from the data source, rather than having a GUI element configured to subscribe to the data source with no user-created source code required. For example, the reader program may not include a graphical user interface or may not indicate the data received from the data source to the user.","Thus, one or both of a writer program and reader program may implement one embodiment of the present invention, and each of the writer program and reader program may interface with various applications or programs which can publish or subscribe to data over a network but which do not utilize the present invention.","To illustrate one example of a writer and reader program, consider a writer program executing on a computer system in a laboratory, wherein the writer program is operable to continuously acquire signal data from a hardware unit under test. The writer program may publish the acquired signal data to a data target, such as a server.","In one case, the writer program may have a graphical user interface panel that includes a GUI element for displaying the signal data, such as a chart GUI element operable to display the signal data as a two-dimensional waveform. In this case, the developer of the writer program may easily configure the writer program to publish the signal data to the data target by simply associating the chart GUI element with the data target, according to one embodiment of the present invention. For example, as described below, the developer may simply invoke a user interface dialog box and specify a URL referencing the desired data target for the chart GUI element. In response, the chart GUI element may be automatically, i.e., programmatically, configured to provide the signal data to the data target during execution of the writer program. Thus, the developer of the writer program may not need to specify or write any source code to accomplish the publication of the signal data to the data target.","In other cases, the writer program may publish the signal data to the data target in other ways. For example, the developer of the writer program may manually create source code to accomplish the publication of the signal data. Also, in other cases, the writer program may not have a GUI element that displays the signal data or may not even have a graphical user interface.","In this example, a reader program may be operable to subscribe to the data target, e.g., the server, to which the writer program publishes the signal data. In other words, the data target for the writer program is a data source for the reader program.","In one case, the reader program may have a graphical user interface panel that includes a GUI element for displaying the signal data acquired from the data source\/target, such as a chart GUI element operable to display the signal data as a two-dimensional waveform. For example, a user may execute the reader program in a remote computer system outside of the laboratory, in order to remotely monitor the hardware unit under test.","The developer of the reader program may easily configure the reader program to subscribe to and display the signal data by simply associating the chart GUI element with the data source (i.e., the data target of the writer program), according to one embodiment of the present invention. For example, as described below, the developer may simply invoke a user interface dialog box and specify a URL referencing the desired data source with which to associate the chart GUI element of the reader program. In response, the chart GUI element may be automatically, i.e., programmatically, configured to acquire the signal data from the data source during execution of the reader program and display the signal data. Thus, the developer of the reader program may not need to specify or write any source code to accomplish the acquisition and display of the signal data.","In other cases, the reader program may acquire the signal data from the data source in other ways. For example, the developer of the reader program may manually create source code to acquire the signal data. Also, in other cases, the reader program may not have a GUI element that displays the signal data or may not even have a graphical user interface. For example, the reader program may acquire the signal data and log the data to a file, without displaying it.","It is noted that various embodiments of the present invention do not use a writer and reader program together such as described above. A writer and reader program may be used together, for example, when \u201clive\u201d data needs to be exchanged between two applications. However, some programs may need to receive data from or write data to a data source\/target not associated with another program, such as a file, or other type of data source\/target, such as a hardware device. For example, a program may include a GUI element to automatically (i.e., with no explicit source code required) receive data from a file and display the data. Another program may include a GUI element to automatically (i.e., with no explicit source code required) write data associated with the GUI element to a file. In these types of cases a GUI element of a writer or reader program executing on the host computer system  may be configured to write data to or read data from a data target or source located either on the host computer system  or on another computer system connected via a network, such as computer system . Thus, embodiments of the invention may be used with \u201clive\u201d and\/or \u201cnon-live\u201d data.","FIGS. A and B\u2014Instrumentation and Industrial Automation Systems",{"@attributes":{"id":"p-0090","num":"0095"},"figref":["FIGS. 4A and 4B","FIGS. 4A and 4B"],"b":["102","102","82","86","90","102"]},{"@attributes":{"id":"p-0091","num":"0096"},"figref":"FIG. 4A","b":["100","100","102","102","102","150"]},"The one or more instruments may include a GPIB instrument  and associated GPIB interface card , a data acquisition board  and associated signal conditioning circuitry , a VXI instrument , a VXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , and\/or one or more computer based instrument cards , among other types of devices.","The GPIB instrument  is coupled to the computer  via the GPIB interface card  provided by the computer . In a similar manner, the video device  is coupled to the computer  via the image acquisition card , and the motion control device  is coupled to the computer  through the motion control interface card . The data acquisition board  is coupled to the computer , and may interface through signal conditioning circuitry  to the UUT. The signal conditioning circuitry  preferably comprises an SCXI (Signal Conditioning eXtensions for Instrumentation) chassis comprising one or more SCXI modules .","The GPIB card , the image acquisition card , the motion control interface card , and the DAQ card  are typically plugged in to an I\/O slot in the computer , such as a PCI bus slot, a PC Card slot, or an ISA, EISA or MicroChannel bus slot provided by the computer . However, these cards , ,  and  are shown external to computer  for illustrative purposes.","The VXI chassis or instrument  is coupled to the computer  via a VXI bus, MXI bus, or other serial or parallel bus provided by the computer . The computer  preferably includes VXI interface logic, such as a VXI, MXI or GPIB interface card (not shown), which interfaces to the VXI chassis . The PM chassis or instrument is preferably coupled to the computer  through the computer's PCI bus.","A serial instrument (not shown) may also be coupled to the computer  through a serial port, such as an RS-232 port, USB (Universal Serial bus) or IEEE 1394 or 1394.2 bus, provided by the computer . In typical instrumentation control systems an instrument will not be present of each interface type, and in fact many systems may only have one or more instruments of a single interface type, such as only GPIB instruments.","The instruments are coupled to the unit under test (UUT) or process , or are coupled to receive field signals, typically generated by transducers. The system  may be used in a data acquisition and control application, in a test and measurement application, a process control application, or a man-machine interface application.",{"@attributes":{"id":"p-0098","num":"0103"},"figref":["FIG. 4B","FIG. 4A","FIG. 4A"],"b":["160","160","100","160","102","102","102","150"]},"The one or more devices may include a data acquisition board  and associated signal conditioning circuitry , a PXI instrument , a video device  and associated image acquisition card , a motion control device  and associated motion control interface card , a fieldbus device  and associated fieldbus interface card , a PLC (Programmable Logic Controller) , a serial instrument  and associated serial interface card , or a distributed data acquisition system, such as the Fieldpoint system available from National Instruments, among other types of devices.","The DAQ card , the PXI chassis , the video device , and the image acquisition card  are preferably connected to the computer  as described above. The serial instrument  is coupled to the computer  through a serial interface card , or through a serial port, such as an RS-232 port, provided by the computer . The PLC  couples to the computer  through a serial port, Ethernet port, or a proprietary interface. The fieldbus interface card  is preferably comprised in the computer  and interfaces through a fieldbus network to one or more fieldbus devices. Each of the DAQ card , the serial card , the fieldbus card , the image acquisition card , and the motion control card  are typically plugged in to an I\/O slot in the computer  as described above. However, these cards , , , , and  are shown external to computer  for illustrative purposes. In typical industrial automation systems a device will not be present of each interface type, and in fact many systems may only have one or more devices of a single interface type, such as only PLCs. The devices are coupled to the device or process .","Referring again to , the computer system  preferably includes a memory medium on which software according to one embodiment of the present invention is stored. For example, the memory medium may store a reader program and\/or a writer program which include GUI elements that were automatically configured to subscribe to data from a data source and\/or publish data to a data target, as described herein. As another example, in one embodiment the memory medium may store \u201cDataSocket\u201d software as well as other software that enables a GUI element to subscribe to data from a data source and\/or publish data to a data target in response to a URL. Also, the memory medium may store an application development environment which utilizes the methods described herein to support the creation and\/or execution of reader\/writer programs having automatically configured GUI elements.","The term \u201cmemory medium\u201d is intended to include an installation medium, e.g., a CD-ROM, floppy disks , or tape device, a computer system memory or random access memory such as DRAM, SRAM, EDO RAM, etc., or a non-volatile memory such as a magnetic media, e.g., a hard drive, or optical storage. The memory medium may comprise other types of memory as well, or combinations thereof.","In addition, the memory medium may be located in a first computer in which the programs are executed, or may be located in a second different computer which connects to the first computer over a network, such as the Internet. In the latter instance, the second computer may provide the program instructions to the first computer for execution. Also, the computer system  may take various forms, including a personal computer system, mainframe computer system, workstation, network appliance, Internet appliance, personal digital assistant (PDA), television system, embedded computer, or other device. In general, the term \u201ccomputer system\u201d can be broadly defined to encompass any device having at least one processor which executes instructions from a memory medium.","FIG. \u2014Computer System Block Diagram",{"@attributes":{"id":"p-0104","num":"0109"},"figref":["FIG. 5","FIGS. 4A and 4B","FIG. 5","FIGS. 4A and 4B"]},"The computer  includes at least one processor or central processing unit or CPU  which is coupled to a processor or host bus . The CPU  may be any of various types, including an x86 processor, e.g., a Pentium class, a PowerPC processor, a CPU from the SPARC family of RISC processors, as well as others. Main memory  is coupled to the host bus  by means of memory controller .","The main memory  may store software according to one embodiment of the present invention, such as a reader and\/or a writer program, and\/or an application development environment operable to create the reader\/writer programs. The main memory  also stores operating system software as well as the software for operation of the computer system, as well known to those skilled in the art. The computer programs of the present invention will be discussed in more detail below.","The host bus  is coupled to an expansion or input\/output bus  by means of a bus controller  or bus bridge logic. The expansion bus  is preferably the PCI (Peripheral Component Interconnect) expansion bus, although other bus types can be used. The expansion bus  includes slots for various devices such as the data acquisition board  (of ), a GPIB interface card  which provides a GPIB bus interface to the GPIB instrument  (of ), and a VXI or MXI bus card  coupled to the VXI chassis  for receiving VXI instruments. The computer  further comprises a video display subsystem  and hard drive  coupled to the expansion bus .","FIG. \u2014Program with a GUI Element Configured to Subscribe to a Data Source",{"@attributes":{"id":"p-0108","num":"0113"},"figref":"FIG. 6"},"In step , a GUI element may be displayed in response to user input received during program development, e.g., for inclusion on a graphical user interface for the program. A developer may include the GUI element in the program user interface in any of various ways, e.g., depending on the techniques supported by a particular application development environment for creating a graphical user interface. For example, many application development environments provide a user interface editor enabling the user to create a graphical user interface panel and place various GUI elements on the panel.","The developer may display a GUI element of any of various types, e.g., depending on what types are supported by an application development environment. For example, various application development environments may support GUI elements such as graphs, text boxes, check boxes, knobs, etc. The application development environment may also enable the developer to create or use custom GUI elements. For example, some application development environments enable developers to use custom GUI elements packaged as ActiveX controls.","In some cases, the developer may desire to include an output GUI element in the program user interface, for example, to display data received from a data source external to the program. In other cases, the developer may desire to include an input GUI element in the program user interface, for example, to not only display the data received from the data source, but to also provide the data as input to other parts of the program.","The GUI element may be operable to display or indicate data to the user in various ways. For example,  illustrates a chart GUI element operable to display a two-dimensional chart of data.  illustrates GUI elements that indicate data in other ways. For example,  illustrates a thermometer GUI element that indicates numeric data by adjusting the height of a red column, an LED GUI element that indicates Boolean data by displaying a light turned on or off, a meter GUI element that indicates numeric data by adjusting the position of a needle, etc. If a custom GUI element is used, such as an ActiveX control, the GUI element may define its own behavior for indicating data to the user. In addition to displaying data to the user, various GUI elements may also indicate data in other ways, e.g., by sending audio signals to a sound device. A GUI element may indicate discrete or continuous data. For example, in , the chart display may change continuously as new data is constantly received, while in , the LED light may change only occasionally, e.g., to indicate a Boolean change in the state of a variable that occurs only occasionally.","In step , user input may be received during development of the program, wherein the user input specifies a data source with which to associate the GUI element. Receiving this user input specifying the data source preferably does not include receiving user input specifying source code for the program. In other words, the developer can specify a data source with which to associate the GUI element without having to specify any source code.","In response to the user input specifying the data source received in step , the method may operate to automatically or programmatically configure the GUI element to receive and display data from the specified data source in step . In other words, the program may be configured to connect to the data source and receive data from the data source during program execution and display the data in the GUI element. The implementation of step  may depend on the particular application development environment or programming language being used. In one embodiment, no source code is added to the program in performing this configuration. For example, the method may store information regarding the data source connection in a data structure. When the program is compiled, for example, the compiler may use this connection information to enable the program to dynamically connect to the data source and provide data received from the data source to the GUI element. For example, the program may launch a separate thread to perform this task. In another embodiment, the method may automatically alter the program source code in order to enable the GUI element to receive and display the data from the data source. For example, the method may automatically generate a set of functions to connect to the data source, receive data from the data source, and pass the data to the GUI element.","In one embodiment, performing step  may utilize a separate layer or component specialized for exchanging data with various types of data sources and targets. One such component, referred to as a \u201cDataSocket\u201d, is described in the above-incorporated patent application titled, \u201cDataSocket System and Method for Accessing Data Sources Using URLs\u201d. An overview of the DataSocket system is also given below.","In step , the program may be executed.","In step , the graphical user interface of the program may be displayed, in response to execution of the program. For example, depending on a particular language or development environment, the program may include source code for displaying the GUI, or the GUI may be automatically displayed when the program is executed. In step , the GUI element configured in steps - may be displayed on the GUI.","In step , the GUI element may receive data from the data source specified in step . As described above with reference to step , the program may be operable to connect to the data source and pass data to the GUI element in various ways.","In step , the GUI element may indicate the data received in step , e.g., by displaying the data or by altering the way in which the GUI element is displayed. The GUI element may indicate the data in any of various ways. For example: a chart GUI element that receives a continuous stream of numeric data may display a scrolling chart of the data; a knob GUI element that receives a numeric value may alter the appearance of the knob to illustrate that the knob is currently set to the received value; an LED GUI element that receives a Boolean value may alter the appearance of the LED light to appear to be turned on or off; etc.","Depending on the type of data source, steps  and  may be performed multiple times, as indicated by the flowchart arrow from step  to step . For example, if the data source is a DataSocket server, the program may maintain a continuous network connection with the DataSocket server and may periodically or continuously receive new data from the DataSocket server and pass the new data to the GUI element for display. For other types of data sources, such as a file, steps  and  may only be performed once.","FIG. \u2014Specifying a Data Source",{"@attributes":{"id":"p-0121","num":"0126"},"figref":["FIG. 7","FIG. 8","FIG. 9"],"b":["202","250"]},"In step , the developer may specify a type of data connection for the GUI element. For example, in one embodiment, the developer may specify a data connection type of \u201cPublish\u201d, \u201cSubscribe\u201d, or \u201cPublish and Subscribe\u201d, as shown in . To configure the GUI element to receive and indicate data from a data source, the developer may choose the \u201cSubscribe\u201d option. The \u201cPublish\u201d and \u201cPublish and Subscribe\u201d options are discussed below.","In step , the developer may specify the data source to associate the GUI element with. For example,  illustrates a \u201cConnect To:\u201d field in which the user may provide a URL referencing the data source. In the preferred embodiment, various types of data sources may be specified. For example, the developer may specify a server as the data source, such as a HyperText Transfer Protocol (HTTP) server, a File Transfer Protocol (FTP) server, an OLE for Process Control (OPC) server, a Simple Network Management Protocol (SNMP) server, or a type of server referred to herein as a DataSocket server (discussed below). The developer may also specify a file as the data source.","The data source URL may specify the type of data source the GUI element is associated with and\/or may specify a protocol to use in obtaining data from the data source. As described below, when the program is executed, the program may interface with the data source using an appropriate protocol in order to enable the GUI element to receive data from the data source. For example, a URL beginning with \u201cftp:\/\/\u201d designates an FTP server. In this case, the program may interface with the data source using the File Transfer Protocol, e.g., in order to enable the GUI element to receive and display data from a remote file. Various examples of data source types are discussed below.","In step , the developer may apply the information specified in the dialog box, e.g., by clicking on the \u201cChange\u201d button shown in .",{"@attributes":{"id":"p-0126","num":"0131"},"figref":"FIG. 7","b":"202"},"Programmatically Determining an Appropriate GUI Element Based on a Data Source","It is noted that in an alternative embodiment, instead of first displaying the GUI element and then associating the GUI element with a data source, the developer may first specify the data source, and an appropriate GUI element may be automatically included in the program's graphical user interface and associated with the data source.","In various embodiments the data source information may be provided in any of various ways. For example, many programming environments include a user interface editor or window for designing a graphical user interface. The developer may interact with the user interface editor window to specify the data source. For example, the developer may drag and drop an icon representing the data source, such as a URL icon or file icon, onto the window, or the developer may paste in data source information, e.g., a URL, from the clipboard.","In response to receiving the URL or other information, the method may operate to present the developer with a user interface, e.g., a user interface dialog such as described above, for providing further information. A URL by itself may not designate the referenced resource as either a data source or target. Thus, the dialog may enable the developer to specify whether to treat the referenced resource as a data source or a data target.","It is noted that the data source information may be received in any of various other ways, in addition to dropping or pasting the information into a window. For example, the developer may invoke a menu command that displays the above-described user interface dialog, and the developer may type or paste a URL into a text field in the dialog box and specify that the URL references a data source.","Any of various techniques may be used in automatically determining an appropriate GUI element for subscribing to data received from a data source. If the data source is a server (or is located on a server), the method may automatically connect to the server and receive data from the server. The appropriate GUI element to include in the program's GUI may then be determined based on the data received. Any of various types of data may be associated with a data source, such as strings, scalars, Booleans, waveforms, etc.","As well known in the art, the beginning portion of a URL specifies an access protocol. For example, the URL \u201chttp:\/\/www.ni.com\/map.htm\u201d specifies the hypertext transfer protocol (HTTP) as an access protocol. In one embodiment, a data source\/target may be accessed using a protocol that supports self-describing data. One example of such a protocol, the DataSocket Transport Protocol (DSTP) is discussed below. The DSTP protocol is used when interfacing with a type of server described herein, referred to as a DataSocket server. As an example, the data source URL may be a URL such as \u201cdstp:\/\/dsserver.ni.com\/wave\u201d, and data received from this data source (i.e., received from the DataSocket server when accessing this data source) may be two-dimensional waveform data. For example, the data may comprise live waveform data that is generated in real time. Since the data is received in a self-describing format, the method may determine that an appropriate GUI element for displaying the data would be a chart GUI element.","In some cases, more than one GUI element may be operable to display the data received from a data source. Thus, in one embodiment, the method may present the program developer with a list of items or icons corresponding to the possible GUI elements, and the developer may select which one to use. Alternatively, the method may select one of the GUI elements to use, without receiving user input. For example, the selection of default GUI elements to use for various types of data may be user-configurable.","In some cases it may not be possible to determine an appropriate GUI element by examining data received from the data source. For example, the access protocol used may not support self-describing data. In this case, it may be possible to determine an appropriate GUI element based on other information. For example, if the URL specifies a file name, the GUI element may be determined based on the file extension. For example, if the URL specifies a file such as \u201cftp:\/\/ftp.ni.com\/wavel.wav\u201d then the method may determine that the data is waveform data, based on the \u201c.wav\u201d file extension. Thus, a chart GUI element may be used to display this waveform data, and\/or an audio GUI element may be used which causes the \u201c.wav\u201d file to be audibly presented on a speaker of the computer system.","If it is not possible to automatically determine an appropriate GUI element, then the method may prompt for user input. For example, the method may display a user interface dialog or window enabling the developer to easily select which GUI element to associate with the specified data source.","In one embodiment, once a GUI element has been automatically determined and included in the program's graphical user interface, the developer may be allowed to easily change the GUI element to a new type of GUI element. For example, if a first GUI element was automatically determined and included in the GUI, the developer may override this choice by changing the first GUI element to a new type of GUI element, e.g., by right-clicking on the first GUI element and selecting a popup menu item to change the type.","In one embodiment, the decision of which GUI element to include in the program's GUI may be deferred until the program is executed, or the GUI element may be changed to a new type during program execution. For example, it may not be possible to connect to a data source during program development. Also, the type of data associated with the data source could change from development time to runtime. Thus, in these cases it may be desirable to examine the data at runtime and select an appropriate GUI element dynamically.","FIG. \u2014Program with a GUI Element Configured to Publish to a Data Target",{"@attributes":{"id":"p-0138","num":"0143"},"figref":"FIG. 10"},"In step , a GUI element may be displayed in response to user input received during program development, e.g., for inclusion on a graphical user interface for the program. Step  is similar to step , described above.","In some cases, the developer may desire to include an output GUI element in the program user interface, for example, to receive and display data dynamically generated by the program during program execution. In other cases, the developer may desire to include an input GUI element in the program user interface, for example, to receive user input. In either case, a data target may be associated with the GUI element, and the program may be automatically configured to publish data associated with the GUI element (e.g., user input data or programmatically generated data) to the data target, as described below.","In step , user input may be received during development of the program, wherein the user input specifies a data target with which to associate the GUI element displayed in step . Step  is similar to step , described above. Similarly as for step , receiving this user input specifying the data target preferably does not include receiving user input specifying source code for the program. In other words, the developer can specify a data target with which to associate the GUI element without having to specify any source code. In one embodiment, step  may be performed similarly as described above with reference to the flowchart of . However, in step  the developer may choose a \u201cPublish\u201d option for the data connection type instead of a \u201cSubscribe\u201d option.  illustrates an exemplary dialog box similar to the dialog box of . However, in , the developer has chosen the \u201cPublish\u201d option instead of the \u201cSubscribe\u201d option, since the GUI element is being configured to publish data to a data target. A data target may be specified by a URL, similarly as for a data source.","In step , the method may operate to automatically or programmatically configure the GUI element to write data to the specified data target. In other words, the program may be configured to connect to the data target and write data associated with the GUI element to the data target during program execution. The implementation of step  may depend on the particular application development environment or programming language being used. In one embodiment, no source code is added to the program in performing this configuration. For example, the method may store information regarding the data target connection in a data structure. When the program is compiled, for example, the compiler may use this connection information to enable the program to dynamically connect to the data target and write the GUI element data to the data target. For example, the program may launch a separate thread to perform this task. In another embodiment, the method may automatically alter the program source code in order to enable the GUI element data to be written to the data target. For example, the method may automatically generate a set of functions to connect to the data target, obtain data from the GUI element, and write the data to the data target.","In one embodiment, performing step  may utilize a separate layer or component specialized for exchanging data with various types of data sources and targets. One example of such a layer, which utilizes a component referred to as a \u201cDataSocket\u201d, is described below.","In step , the program may be executed.","In step , the graphical user interface of the program may be displayed, in response to execution of the program. For example, depending on a particular language or development environment, the program may include source code for displaying the GUI, or the GUI may be automatically displayed when the program is executed. In step , the GUI element configured in steps - may be displayed on the GUI.","In step , data may be associated with the GUI element, e.g., during execution of the program. Any of various types of data may be associated with the GUI element, e.g., depending on the type of GUI element. For example, a text box GUI element may have text string data, whereas a knob GUI element may have a numeric value as data. The GUI element may receive this data in various ways, e.g., programmatically or as user input, as described above.","In step , data from the GUI element may be written to the specified data target. As described above with reference to step , the method may obtain the GUI element data and write the data to the data target using any of various techniques or formats appropriate for the type of data and\/or GUI element. Depending on factors such as the type of data or GUI element, steps  and\/or  may be performed multiple times, as indicated by the flowchart arrow looping from step  to step . For example, if the GUI element is a chart that programmatically receives and displays a stream of numeric data, the program may write data from the GUI element to the data target in a continuous stream.","In the above description, a developer may first display a GUI element and may then specify a data target with which to associate the GUI element. It is noted that in an alternative embodiment, the developer may first specify the desired data target, and the method may operate to automatically, i.e., programmatically, determine a GUI element determine a GUI element appropriate to provide data to the specified data target, e.g., based on a file extension of the data target, if applicable, or based on information in a URL referencing the data target. For example, the method may be operable to maintain or access data on which types of GUI elements were used in the past in connection with which types of data targets. In another embodiment, the method may prompt for user input specifying a GUI element to use, in response to receiving the data target information.","FIG. \u2014Exchanging Data Between a Writer and Reader Program",{"@attributes":{"id":"p-0149","num":"0154"},"figref":"FIG. 12"},"In step , a writer program may be created, wherein the writer program includes a GUI element configured to publish data to a server, e.g., a server program or process. For example, the GUI element of the writer program may be configured as described above with reference to , e.g., by specifying a URL of the server and configuring the GUI element to publish data associated with the GUI element to this URL.","In step , a reader program may be created, wherein the reader program includes a GUI element configured to subscribe to data from the server. For example, the GUI element of the reader program may be configured as described above with reference to , e.g., by specifying a URL of the server and configuring the GUI element to subscribe to data referenced by this URL.","In step , the writer and reader programs may be executed. The writer and reader programs may execute on the same computer or on different computers, e.g., computers connected via a network. The server program may execute on one of these computers or may execute on a different computer.","In step , the GUI element of the reader program displays (or otherwise indicates) data from the writer program. The exchange of data from the writer program to the reader program via the server program may be implemented in various ways. One embodiment of this is described below.",{"@attributes":{"id":"p-0154","num":"0159"},"figref":"FIG. 12"},{"@attributes":{"id":"h-0015","num":"0000"},"figref":"FIGS. 13-14"},{"@attributes":{"id":"p-0155","num":"0160"},"figref":["FIGS. 13 and 14","FIG. 13","FIG. 14","FIG. 11","FIG. 9","FIGS. 9 and 11"]},{"@attributes":{"id":"p-0156","num":"0161"},"figref":"FIGS. 13 and 14"},"The reader program may be operable to determine that new data was written to the DataSocket server in any of various ways. In one embodiment, the reader program connects to the DataSocket server when the GUI is displayed and receives new data as the data is written to the DataSocket server, e.g., via a DataSocket component that interfaces with the DataSocket server. The reader program may then provide the data for display in the chart GUI element of the reader program. In other embodiments, the coordination of data exchange between the writer and reader programs may be implemented in any of various other ways.","As described above, the developer may configure the writer and reader programs to exchange and display live data very easily, e.g., using simple dialog boxes, without specifying any source code. The writer and reader programs may be implemented using any of various programming languages or application development environments.  illustrate an embodiment in which the writer and reader programs, respectively, are graphical programs created using the LabVIEW graphical programming environment.","Graphical programming has become a popular programming paradigm, especially among scientists and engineers. In creating a graphical program, a developer may include a plurality of graphical nodes and other graphical elements on block diagram and connect the nodes and elements such that the resulting diagram graphically represents the functionality of the graphical program. Many users find graphical programming to be a more intuitive and user friendly model for developing a program, e.g., as opposed to using a traditional text-based programming language, such as C, C++, Basic, etc. Thus, one embodiment of the present invention further enhances the user-friendliness of graphical programming by enabling a developer to easily configure a data connection for a GUI element on a graphical program's graphical user interface panel.",{"@attributes":{"id":"p-0160","num":"0165"},"figref":["FIG. 15","FIG. 14","FIG. 14","FIG. 15"]},"In addition to the chart GUI element node, the reader program block diagram of  also includes a programmatic loop element . When the program executes, the graphical code inside the loop is executed until the user presses the \u201cStop\u201d button shown on the  GUI panel. As described above, the writer program is operable to write a continuous stream of numeric waveform data to the server. Thus, the programmatic loop enables the reader program to execute indefinitely. While the reader program executes, the data is received from the server and displayed in the chart GUI element. As discussed above, for example, a separate thread may be responsible for handling the exchange and display of this data.","In one embodiment, the graphical programming environment may be operable to automatically generate graphical code such as the programmatic loop element  and the graphical code inside the loop. For example, the developer may create the chart GUI element and configure the chart GUI element with a data connection to subscribe to the server. The developer may then request the graphical programming environment to automatically generate code such as the loop code shown in . This would allow the developer to create an entire program to receive and display live data continuously from a data source, without having to specify any source code for the program at all. This may be useful, for example, to enable users to quickly connect to various data sources and monitor data, with no programming involved. For example, a user may easily monitor real-time measurement data acquired by an instrument located in a remote laboratory.",{"@attributes":{"id":"p-0163","num":"0168"},"figref":["FIG. 16","FIG. 13","FIG. 13"]},"In the examples of , the program may implement the connection from a GUI element to a data target or source \u201cbehind the scenes\u201d of the block diagram. In other words, source code indicating this connection does not appear on the block diagram. In another embodiment, it may be desirable to include source code indicating the connection on the block diagram. In this case, the source code implementing the data connection may be automatically included on the block diagram when the developer specifies the data connection information. For example,  illustrates another embodiment of a graphical program block diagram corresponding to the reader program GUI panel illustrated in . In this embodiment, the chart GUI element node is connected to another node, unlike the diagram of . The chart GUI element node receives data from a DataSocket node . This DataSocket node is configured to connect and read data from the DataSocket server referenced by the URL, \u201cdstp:\/\/dsserver.ni.com\/wave\u201d. Thus, in this embodiment, the user can view source code implementing the data connection to the data source.","In the above-incorporated patent application titled, \u201cSystem and Method for Programmatically Creating a Graphical Program\u201d, a system and method for programmatically generating a graphical program is described. For example, various code generation wizards or tools may use this ability to automatically generate a graphical program, e.g., to implement a prototype created by a user, to implement a state machine diagram specified by a user, etc. If desired, this system and method may be utilized to programmatically generate a graphical program that includes a GUI element configured with a data connection to a data source or target. For example, it may be desirable to enable a tool to generate a graphical program to implement a user-specified prototype, wherein the block diagram of the program includes no code or a minimal amount of code related to data input\/output with external data sources\/targets, e.g., in order for the user to be able to better understand the operation of the block diagram.","This system and method may also be used to add source code to an existing graphical program, e.g., to create the graphical program of , wherein a GUI element node is connected to other nodes in the block diagram.","In the embodiments discussed above, various graphical programs are discussed. It is noted that programs which include GUI elements configured with data connections as described herein are not necessarily graphical programs and may be coded using any of various other types of languages or application development environments, such as text-based programming languages.",{"@attributes":{"id":"h-0016","num":"0000"},"figref":"FIGS. 18-21"},"As described above,  illustrate one embodiment of a dialog box for specifying data connection information for a GUI element. As shown in , the dialog box may include a \u201cBrowse\u201d button enabling the developer to choose a data source or target via a graphical user interface. In this example, the user can choose to browse the file system of the host computer, which may cause a file dialog box may be displayed. As shown, the user may also choose to browse measurement data. For example, in one embodiment, the user may be able to subscribe to a hardware device as a data source or publish data to a hardware device data target.  illustrates a dialog box that may appear when the user selects \u201cBrowse Measurement data\u201d. This dialog box displays various data sources and targets associated with hardware instruments connected to the computer.","The dialog box of  also lists OPC servers available to the host computer. OPC (Object Linking and Embedding (OLE) for Process Control) is built on Microsoft ActiveX and Distributed Component Object Model (DCOM) technology. OPC servers and clients exchange real-time information among a variety of systems. OPC establishes an open industry standard for plug-and-play interoperability among disparate automation devices, systems, and software.","The user can configure a GUI element to connect to an OPC Server in the same way as any other data source. A URL identifies the OPC server item. URLs that address OPC servers start with opc: and include the following parts:\n\n","The following is an example of a URL that reference the National Instruments OPC test server installed with the LabVIEW application:\n\n","As described in the above-incorporated U.S. patent application Ser. No. 09\/374,740, titled \u201cSystem and Method for Automatically Creating URLs for Accessing Data Sources and Data Targets\u201d, in one embodiment, URLs for accessing data sources and targets may be automatically generated. Various hardware devices, hardware device channels, OPC servers, etc., may be referenced by these URLs. Thus, when a user selects a data source or target associated with a hardware device from the dialog box of , the \u201cConnect To\u201d field of  may be populated with a URL corresponding to the data source or target. The URL may include configuration information for a device. Thus, when a program having a GUI element configured with a data connection to a hardware device data source or target executes, the device may be automatically configured.",{"@attributes":{"id":"p-0173","num":"0184"},"figref":["FIG. 20","FIG. 20","FIG. 20"]},{"@attributes":{"id":"p-0174","num":"0185"},"figref":"FIG. 20"},"Connection Status and Data Type Issues","In one embodiment, the status of a data connection for a GUI element may be visually indicated on the GUI panel. For example, as shown in , a small status indicator  may appear beside a GUI element when a data connection for the GUI element has been specified. If the connection is valid, this indicator may be colored green during program execution, or if not, the indicator may be colored red.","An invalid connection may be caused by an error in a specified hostname or path of a data source or target, a network connection problem, etc. Also, an invalid connection may occur when a GUI element is not compatible with its configured data source or target. For example, a program may be able to connect to a data source and receive data from the data source, but the data received may not be valid data for the GUI element.","Any of various types of data may be associated with a data source, such as strings, scalars, Booleans, waveforms, etc. A given GUI element may only be operable to display certain types of data. For example, a chart GUI element may be able to display two-dimensional numeric waveform data, but not three-dimensional waveform data. In this case, if three-dimensional waveform data is received from a data source with which the chart GUI element is associated, an invalid connection may be indicated. As described below, in one embodiment, data may be received in a self-describing format enabling the program (or execution environment) to parse the data appropriately and determine whether the data is valid data for a particular GUI element.","In one embodiment, if the data is not valid data for the GUI element, then the program or execution environment may be operable to dynamically select a GUI element that is valid for the data, i.e., a GUI element that can receive and display the data. This GUI element may then be dynamically substituted for the original GUI element at execution time.",{"@attributes":{"id":"h-0018","num":"0000"},"figref":"FIGS. 22-23"},{"@attributes":{"id":"p-0179","num":"0190"},"figref":["FIGS. 22-23","FIGS. 13 and 14","FIGS. 22 and 23"]},"FIG. \u2014Live Weather Data Example",{"@attributes":{"id":"p-0180","num":"0191"},"figref":["FIG. 24","FIG. 24"]},"As described below, one embodiment of the present invention enables multiple reader programs to receive and display data generated by a writer program, by interfacing with a server. Thus, multiple users may execute the program of  to view live weather data. In the prior art, creating these types of applications is typically a complicated task, but one embodiment of the present invention enables data exchange between a writer program and multiple reader programs executing in different locations to occur without the developer having to supply any source code.",{"@attributes":{"id":"h-0020","num":"0000"},"figref":"FIG. 25"},"In the examples discussed above, a GUI element was configured to either publish data to a data target or subscribe to data from a data source. In some cases, it is desirable for a program to both receive data for display in a GUI element from external data sources and provide data associated with a GUI element to external data targets.  is a flowchart diagram illustrating one embodiment of a method for performing this type of two-way data exchange by configuring a GUI element to publish and subscribe to a data target\/source. The method of  illustrates an example in which two-way exchange of data is performed in order to coordinate the monitoring and control of a remote system. However, the ability to configure a GUI element to both publish and subscribe to data may be useful in many other situations.","In step , two programs may be executed, e.g., at different locations, in order to monitor and control a remote system. Each program may have a GUI control configured to both publish and subscribe to data. For example, the programs may display a knob GUI control, such as the Frequency knob shown in the GUI of , configured to publish and subscribe to data. For example, consider a situation in which two control programs execute at different locations, wherein users of the control programs monitor a remote system and control the opening and closing of a valve in the remote system by tuning the knob GUI control.","In step , the GUI control for each program may display a value indicating a setting for the system. In the example above, the knob GUI controls may display a value indicating the current state of the valve on the remote system.","In step , a user of one of the control programs, i.e., the \u201cfirst\u201d control program, may specify a new value for the GUI control displayed by the first control program. In the example above, the user may turn the knob GUI control of the first control program to a new value.","In step , the first computer program may adjust the system according to the new value. In the above example, the first computer program may adjust the remote system by sending a control signal requesting the remote system to open or close the valve controlled by the knob GUI control. Also, since the GUI control is configured to publish its data, the new value is published to the configured data target\/source to which the GUI control of the first control program is configured to publish and subscribe. For example, the new value may be published to a server as described above.","The other control program, i.e., the \u201csecond\u201d control program, may also subscribe and publish to this data source\/target. Thus, in step , the second control program may receive the new value published by the first control program, e.g., by interfacing with the server, and may update the value displayed by the GUI control of the second control program. In the example above, the knob GUI element of the second control program may thus be automatically turned to reflect the new setting specified by the user of the first control program.","DataSocket System","As discussed above, a program with a GUI element configured with a data connection to a data source or target may utilize a separate layer or component for interfacing with the data source or target. This section provides an overview of one embodiment of such a layer, referred to as \u201cDataSocket\u201d. For more information on the DataSocket system, please refer to the DataSocket documentation available from National Instruments Corp. or to the above-incorporated patent application titled, \u201cDataSocket System and Method for Accessing Data Sources Using URLs\u201d.","DataSocket provides a single, unified, end-user application programming interface (API) for connecting to data from a number of sources, such as local files, files on FTP or Web servers, and data items on OPC Servers. A DataSocket application specifies the data location by using a familiar networking standard, the URL. Just as a Web browser uses a URL to connect to a Web page, a DataSocket application uses a URL to connect to data. By using an industry-standard URL, the user can quickly and easily bring data into or share data from DataSocket applications. In addition, the DataSocket Transfer Protocol connects a DataSocket application to live data by specifying a connection to a DataSocket Server. The DataSocket Server manages most of the networking tasks for the user.","With the DataSocket Server, a lightweight, stand-alone component, programs using DataSocket can broadcast live data, such as measurement data, at high rates across a network such as the Internet to multiple remote clients concurrently. These client applications use DataSocket to subscribe to the live data. Because the DataSocket Server is a stand-alone component, it simplifies network (TCP\/IP) programming by automatically managing connections to clients and automatically converting data to and from the stream of bytes sent across the network. The user does not have to write the parsing code. The DataSocket Server can run on any computer on a network, which improves performance and provides security by isolating the Web connections from other applications.","Various DataSocket APIs are provided so that various types of programming environments may interface with a DataSocket Server for data exchange. For example, as shown in , a DataSocket node may be included in the block diagram of a graphical program. An ActiveX DataSocket interface is also provided, enabling C++, Basic, Java, and other types of programs to use DataSocket.","With conventional technologies such as TCP\/IP, the developer would have to write code to convert data to an unstructured stream of bytes in the broadcasting application, as well as code to parse the stream of bytes back into its original form in subscribing applications. DataSocket, however, transfers data in a self-describing format that can represent data in an unlimited number of formats, including strings, scalars, Booleans, and waveforms. The DataSocket read and write operations transparently convert data to and from the underlying byte streams, eliminating the need to write complicated parsing code. DataSocket uses a protocol referred to as the DataSocket Transport Protocol (DSTP) to send data to and receive data from a DataSocket server.","With DataSocket the data source or target name is in the form of a URL. For example, in the URL, \u201cdstp:\/\/localhost\/wave\u201d, the \u201cdstp:\/\/\u201d indicates that the DataSocket application is connecting to a DataSocket Server using the DataSocket Transfer Protocol for live data. The \u201clocalhost\u201d indicates that the DataSocket Server is running on the local machine; if the DataSocket Server were running on another machine, the user would replace localhost with the machine name or IP address. The \u201cwave\u201d is the data item name on the server. This is an arbitrary name which identifies the location of the data on the DataSocket Server. A single DataSocket Server can handle numerous data items.","FIG. \u2014DataSocket Server",{"@attributes":{"id":"p-0194","num":"0205"},"figref":"FIG. 26"},"Using the DataSocket server, the writer supplying the data is not required to handle the administrative details of sending data to many different clients, and hence can run more efficiently. The DataSocket server, which can be located on a different machine, assumes the task of redistributing the information. The user can configure the maximum number of data items and maximum number of connections allowed to the server. The user can also configure multiple write connections to a data item at the same time, if desired.","FIG. \u2014DataSocket Transfer Protocol","A brief description of the DataSocket Transfer Protocol as used in one embodiment follows:","Message Formats:","Messages may be made up of packets of bytes comprising the following parts.\n\n","Messages are sent as a block of values stored in the \u201ccluster\u201d format described above. The first element is the op code, subsequent elements are parameters, if necessary, for the specific op code.\n\n","With the exception of the greeting messages, the client, or server never waits for a reply. Either the client or server can cancel the session at any time by sending the appropriate \u201cdisconnect\u201d message.","Protocol Functions:","Functions:","Getting, setting, and subscribing to values of items stored in a database maintained by a server.","Name of the Port:",{"@attributes":{"id":"p-0201","num":"0000"},"ul":{"@attributes":{"id":"ul0008","list-style":"none"},"li":"nati-dstp"}},"DataSocket handles all tasks of converting data and data attributes from their native application format (strings, arrays, Booleans, etc.) into a TCP\/IP suitable format, referred to as the Flex Data format, and converting back from the Flex Data format on the client end. Because the DSTP network communication only requires TCP\/IP support, the DataSocket can be used to share information through many different types of networks, including the Internet. The DataSocket can be used to share information between machines located on opposite sides of the world using local Internet service providers. Of course, DataSocket and the DataSocket server can be used on a local Windows network or in a single stand-alone computer.",{"@attributes":{"id":"h-0028","num":"0000"},"figref":"FIGS. 28A-28B"},{"@attributes":{"id":"p-0203","num":"0233"},"figref":["FIGS. 28A-28B","FIGS. 28A-28B","FIGS. 28A-28B"]},"As shown in step  the DataSocket may receive a request to connect to the specified URL. For example, the developer may have created a program with a GUI element configured to connect to a data source or target specified by the URL. When the program begins execution, the program may attempt to connect to the data source or target, e.g., by requesting the DataSocket to connect to the URL.","In step  the DataSocket partitions the URL into an AccessMethod, Host, and Path. The AccessMethod of the URL preferably comprises the first portion of the URL, e.g., http, ftp, file, dstp, etc. Other AccessMethods are also contemplated. The \u201cHost\u201d portion specifies the host computer where the data is located, and the \u201cPath\u201d specifies the path where the data is located on the host computer.","If the AccessMethod is either http or ftp as determined in step , then in step  the DataSocket connects to the http or ftp server using conventional technology, e.g., using conventional Internet technology.","After step , in step  the DataSocket determines the file type. The DataSocket determines the file type for http based on the mime type. The DataSocket may also determine the file type based on the URL path suffix and\/or the stream contents. After step , operation proceeds to step .","If the access method is \u201cfile\u201d as determined in step , then in step  the DataSocket opens the file using the system's file library. In step  the DataSocket determines the file type based on the file suffix, the file contents, or parameters contained within the URL. After step , operation advances to step .","After the DataSocket has determined the file type in either of steps  or , in step  the DataSocket determines if it has built-in support for the type. If the DataSocket has built-in support for the file type as determined in step , then in step  the built-in adapter comprised in the DataSocket converts the data from the file or stream into a Flex Data object, also referred to as a FlexDataObject.","In step  the DataSocket converts the data into a form more usable by a typical programming language or application. Examples of data converted by the DataSocket include WAV files, tabbed text files, DSD files, and text. For example, if the data is retrieved from a spreadsheet, the DataSocket converts the tab delimited spreadsheet data into a 2D array of numbers, without any tabs or ASCII strings. This 2D array of numbers is not required to be parsed by the containing application. Also, in general, a number of engineering formats exist for storing vectors or arrays. The DataSocket preferably operates to convert data of these various formats into arrays of data or numbers for direct use by the application. After step , operation proceeds to step .","In step  the Flex Data object value in the DataSocket is set. This means that the data which was converted into the more usable form in step , such as a 2d array, is now stored in memory managed by an object that is accessible by the client program. The client application may get a copy value from the Flex Data object by calling a method on the Flex Data object named \u201cGetValue\u201d. This method preferably returns a copy of the value stored in a VARIANT, a structure defined by Microsoft as part of its ActiveX standard for component software. The Value of attributes can be gotten by calling a method named GetAttribute, or set by calling a method called SetAttribute. A VARIANT structure is used for attributes as well. The VARIANT structure can hold simple data types like numbers or Boolean values and data types that require additional memory for storage such as strings and arrays.","In step  the DataSocket notifies the container or application using the DataSocket that it has received a value from the data source, preferably through a new data event. Operation then completes.","If the DataSocket does not include built-in support for the file type as determined in step , then in step  the DataSocket determines if a DataSocket file adapter is registered for that file type. A DataSocket file adapter is created by a user and registered with the DataSocket. The DataSocket file adapter is used to read or write files using custom-defined formats. If a DataSocket file adapter is not registered for that type, then in step  the DataSocket notifies the container or application that the value cannot be retrieved, and operation completes.","If a DataSocket file adapter is registered for that file type as determined in step , then in step  the DataSocket creates the file adapter component or client. In step  the DataSocket calls or invokes the file adapter's Connect method. In step  the file adapter reads data from the file identified by the URL. In step  the file adapter constructs a Flex Data object with values and attributes extracted from the file.","After steps - have been performed, in step  Flex Data object value in the DataSocket is set, and in step  the DataSocket notifies the container or application that it has received a value from the URL, and operation completes.","If the access method is \u201cdstp\u201d as determined in step , then in step  the DataSocket attempts to make a connection to the DataSocket server identified by the URL using the host name or Internet address encoded in the URL according to standard URL syntax. As described above, the access mode \u201cdstp\u201d directs the DataSocket to connect to the DataSocket server identified in the URL. If the connection is established in step , then in step  the DataSocket sends a command indicating a request to subscribe to a specific tag or item, or to write the value of a specific tag maintained by the DataSocket server. The DataSocket preferably sends this command over TCP\/IP. If the specific tag does not exist on the server, then the server may create the tag and give it an initial value, or may report back an error indicating that that the requested tag does not exist. This is a configuration option on the DataSocket server. Reporting errors is preferably done by sending commands over the TCP\/IP connection. Commands are preferably sequences of bytes sent over a TCP\/IP connection.","After step , as updates are received in step , the DataSocket sets the value in the DataSocket's Flex Data object and notifies the container or application using the DataSocket. Thus, each time update notifications are received from the server, the Flex Data object is set and the container or application is notified of each update. Step  is continually performed as data is received until the container instructs the DataSocket to disconnect from the data source to which it is connected.","If the access method is not \u201cdstp\u201d as determined in step , and is not either http, ftp, or file as determined in steps  and , then in step  the DataSocket derives or constructs the name of an extension or plug-in from the access method that was specified in the URL. For example, if the access method is \u201copc\u201d then the name of the extension or plug-in could be \u201cDataSocketPlugIn_opc\u201d.","In step  the DataSocket determines if a DataSocket extension or plug-in with that name is registered. Thus, if the access method is not one of the pre-defined types, e.g., http, ftp, file, or dstp, in steps  and  the DataSocket attempts to intelligently determine the proper extension or plug-in from the access method that was specified in the URL.","If no DataSocket plug-in is registered with the derived name, then the DataSocket notifies the application or container that the value cannot be retrieved, and operation completes.","If a DataSocket plug-in is registered for the determined extension name as determined in step , then steps - are performed.","In step  the DataSocket creates an extension component based on the registered DataSocket extension. In other words, the DataSocket instantiates a component from the registered DataSocket extension.","In step  the DataSocket calls the extension component's Connect method. In step  the extension or plug-in connects to the data source determined by the path and parameters in the URL. In step , when the data source has a value, the extension stores the value in a Flex Data object and operation then advances to . As discussed above, in steps  and  the DataSocket's Flex Data object value is set and the DataSocket notifies the container that it has received a value from the data source, and operation then completes.","FIG. \u2014Data Viewer Program","As noted above, in one embodiment, when a program receives data from a data source during program execution, an appropriate GUI element to display the data may be determined dynamically, i.e., at runtime, and the GUI element may be dynamically included in the program's graphical user interface and configured to display the received data. One embodiment of the invention comprises a program which utilizes this ability to enable end users to connect to various types of data sources and display data received from the data sources. In such a program, an end user (i.e., a user of the program, rather than the program developer) may specify a data source. The data source may be a data source of any of various types, such as a file or a server of various types, such as an HTTP server, an FTP server, an OPC server, a DataSocket server, a database server, etc. The end user may specify the data source in any of various ways. For example, the program may be operable to receive URL information specifying the data source, similarly as described above.","In response to receiving the data source information from the end user, the program may be operable to automatically determine an appropriate GUI element for displaying data from the data source, display the GUI element, and provide data from the data source to the GUI element for display. The appropriate GUI element may be determined similarly as described above, e.g., by connecting to the data source to receive a data sample from the data source and then examining the received data, or in any of various other ways. Also, in one embodiment, the program may enable the user to explicitly specify a GUI element to use in viewing the data. For example, in response to a user command, the program may display a set of GUI elements from which the user can choose.","Thus, one embodiment of the invention enables the implementation of a program which, when executed, enables an end user to specify a data source, e.g., via a URL, and view data received from the data source, wherein the end user may specify any of various types of data sources, any of various types of data may be received from the data sources, and any of various types of GUI elements may be dynamically displayed to allow the end user to view the received data.","This latter embodiment may be utilized, for example, to implement a data viewer tool which end users may execute to view various types of live data. For example, the data viewer tool may enable end users to connect to remote instrumentation systems and view real-time data acquired or generated by the systems, including numeric data, twodimensional waveform data, three-dimensional waveform data, etc.",{"@attributes":{"id":"p-0228","num":"0258"},"figref":"FIG. 29"},"In step , a data viewer program is executed.","In step , the data viewer program may receive user input specifying a data source. The data source user input may comprise URL information, for example. Any of various types of data sources may be supported, including files of various types and servers of various types, such as described above. Also, any of various types of data may be associated with the data source.","In step , the data viewer program may automatically determine an appropriate GUI element for viewing data received from the data source. Step  may be implemented similarly as described above.","In step , the data viewer program may dynamically display the determined GUI element and configure the GUI element to receive and display data from the data source. Step  may be implemented similarly as described above.","In steps  and , the GUI element receives data from the data source and displays the data, similarly as described above.","Although the embodiments above have been described in considerable detail, numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["A better understanding of the present invention can be obtained when the following detailed description of the preferred embodiment is considered in conjunction with the following drawings, in which:",{"@attributes":{"id":"p-0037","num":"0042"},"figref":"FIGS. 1 and 2"},{"@attributes":{"id":"p-0038","num":"0043"},"figref":"FIGS. 3A and 3B"},{"@attributes":{"id":"p-0039","num":"0044"},"figref":"FIGS. 4A and 4B"},{"@attributes":{"id":"p-0040","num":"0045"},"figref":["FIG. 5","FIGS. 4A and 4B"]},{"@attributes":{"id":"p-0041","num":"0046"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0042","num":"0047"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0043","num":"0048"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0044","num":"0049"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0045","num":"0050"},"figref":"FIG. 10"},{"@attributes":{"id":"p-0046","num":"0051"},"figref":["FIG. 11","FIG. 9"]},{"@attributes":{"id":"p-0047","num":"0052"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0048","num":"0053"},"figref":"FIGS. 13 and 14"},{"@attributes":{"id":"p-0049","num":"0054"},"figref":["FIG. 15","FIG. 14"]},{"@attributes":{"id":"p-0050","num":"0055"},"figref":["FIG. 16","FIG. 13"]},{"@attributes":{"id":"p-0051","num":"0056"},"figref":["FIG. 17","FIG. 14"]},{"@attributes":{"id":"p-0052","num":"0057"},"figref":["FIG. 18","FIG. 9"]},{"@attributes":{"id":"p-0053","num":"0058"},"figref":"FIG. 19"},{"@attributes":{"id":"p-0054","num":"0059"},"figref":"FIG. 20"},{"@attributes":{"id":"p-0055","num":"0060"},"figref":"FIG. 21"},{"@attributes":{"id":"p-0056","num":"0061"},"figref":"FIGS. 22-23"},{"@attributes":{"id":"p-0057","num":"0062"},"figref":"FIG. 24"},{"@attributes":{"id":"p-0058","num":"0063"},"figref":"FIG. 25"},{"@attributes":{"id":"p-0059","num":"0064"},"figref":"FIG. 26"},{"@attributes":{"id":"p-0060","num":"0065"},"figref":"FIG. 27"},{"@attributes":{"id":"p-0061","num":"0066"},"figref":"FIGS. 28A-28B"},{"@attributes":{"id":"p-0062","num":"0067"},"figref":"FIG. 29"}]},"DETDESC":[{},{}]}
