---
title: Publishing of an application program interface
abstract: A method comprising creating and publishing (H, K) an application program interface (API) enabling access to a dataset from a source data file; determining, by an application, a type of change (E) that has occurred to the source data file; and in dependence at least on a result of said determining, taking at least one action (H, K) relating to permitting subscriber access to the dataset of the changed source data file. The action may comprise permitting subscriber access to the dataset from the changed source data file either: in place of the dataset from the source data file (H), using the API; or by creating and publishing a new API (K). The permitting access to the dataset may also depend on subscriber access controls and/or publication controls under the control of a publishing entity. Changes to datasets may be provided to the application by a file synchronization system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384068&OS=09384068&RS=09384068
owner: Release Consulting Limited
number: 09384068
owner_city: London
owner_country: GB
publication_date: 20121005
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF EMBODIMENTS"],"p":["The invention relates to a method of, and computer program and system for, creating and publishing an application program interface (API) enabling access to a dataset and handling changes to the dataset.","APIs enable data owners to make their data available to others. Increased use of smartphones, apps and cloud-based services is resulting in increased need to develop APIs. APIs are typically custom-built and, as such, are time-consuming and expensive to design and develop, requiring developers with specialist skills not only to construct them but also to maintain them. The likelihood of APIs yielding a return on investment is also difficult for data owners to evaluate, which makes decisions on whether to develop them difficult. These obstacles to development result in many data owners not making their data available to others via APIs, missing potential revenue streams and also preventing multiple business opportunities for potential users of the data.","It is an object of the present invention to provide a straightforward way of enabling data owners to make their data available to others that does not require specialist technical software skills to operate.","According to a first aspect of the present invention, there is provided a method comprising, at a cloud-based application creating and publishing an application program interface (API) enabling access to a dataset from a source data file, determining, by the application, a type of change that has occurred to the source data file, and in dependence at least on a result of said determining, taking at least one action relating to permitting subscriber access to the dataset of the changed source data file.","According to a second aspect of the present invention, there is provided a computer program comprising computer program code stored in computer-readable storage medium, which when executed by processing apparatus, performs the steps of creating and publishing an application program interface (API) enabling access to a dataset from a source data file, determining, by the application, a type of change that has occurred to the source data file, and in dependence at least on a result of said determining, taking at least one action relating to permitting subscriber access to the dataset of the changed source data file.","According to a third aspect of the present invention, there is provided a system comprising a application program interface (API) creation and publishing system configured to create and publish an API enabling access to a dataset from a source data file, to determine, by the application, a type of change that has occurred to the source data file, and in dependence at least on a result of said determining, take at least one action relating to permitting subscriber access to the dataset of the changed source data file.","According to a fourth aspect of the present invention, there is provided a method comprising, at cloud-based application program interface (API) creation and publishing system, receiving a dataset contained in a source data file by synchronisation with a remotely stored corresponding data file, and creating and publishing a first application program interface (API) enabling access to the dataset.","According to a fifth aspect of the present invention, there is provided a system comprising a application program interface (API) creation and publishing system configured to receive a dataset contained in a source data file by synchronisation with a remotely stored corresponding data file, and create and publish a first application program interface (API) enabling access to the dataset.","According to a sixth aspect of the present invention, there is provided a computer program comprising computer program code stored in computer-readable storage medium, which when executed by a processor, performs the steps of: receiving a dataset contained in a source data file by synchronisation with a remotely stored corresponding data file, and creating and publishing a first application program interface (API) enabling access to the dataset.","Like elements are denoted by like reference numerals throughout.","Referring to , a cloud-based file synchronisation system (FSS)  and a cloud-based API creation and publishing system , the latter referred to herein as \u201cAPI Maker\u201d, are each connected to a communications network . Computer systems ,  respectively of a data owner and a developer are also connected to the communications network . By way of general overview, the FSS  and the API Maker  enable the data owner to make data available to the developer so that the developer can use the data. The API Maker  also enables changes to the data to be reflected in the data that is available to the developer.","The communications network  is an Internet Protocol (IP) network, but is not limited to being any particular kind of network. The communications network may comprise more than one kind of network. For example, the computer system  of the data owner may be connected to a local area network, or, where the computer system  is suitably configured, a mobile telecommunications cellular network, which is connected to an IP network.","It will be appreciated that, although only one computer system  of a data owner and one computer system  of the developer are shown in , many such computer systems will be connected to the communications network  and use the FSS  and the API Maker . The term \u201cdata owner\u201d is used to refer to an entity under who controls publishing of a data set and may include agents of the actual owner of the data.",{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 2","b":["16","18","16","18","19","20","22","24","26","16","18","27","16"]},"The mass storage device  comprises a computer-readable storage medium providing non-volatile storage. The computer-readable storage medium is typically a hard disk, but is not limited to such. The computer-readable medium may include volatile and non-volatile, removable and non-removable media configured for storage of information, such as RAM, ROM, Erasable Programmable Read Only Memory (EPROM), Electrically Erasable Programmable Read Only Memory (EEPROM), flash memory or other solid state memory, CD-ROM, DVD, or other optical storage, magnetic disk storage, magnetic tape or other magnetic storage devices, or any other medium which can be used to store information which can be accessed. The processor may be a single processing unit, or a plurality of connected processing units.","Each computer system ,  further includes programs (not shown) stored in the system memory  and the mass storage device , including an operating system and a web browser, as well as other programs. The computer system  of the data owner includes a client file synchronisation program for use with the FSS . The programs are implemented by suitable computer program code (not shown) which, when executed by the processor , causes the respective computer system ,  to provide the functionality described herein. Alternatively, the functionality of the programs could be implemented in dedicated processing equipment or a mixture of dedicated hardware and software.","The FSS  may be used in a file synchronisation service for general file synchronisation, that is, for synchronising across a plurality of storage devices. A suitable service is provided by the US company \u201cDropbox Inc\u201d marketed under the brand name Dropbox\u00ae. Dropbox is a cloud storage and file synchronisation service, whose software includes the functionality ascribed to the FSS  herein. It should however be understood that other file synchronisation services may be used in place of Dropbox. For example, Box.com\u00ae, Apple iCloud\u00ae, Google Drive\u00ae and Microsoft SkyDrive\u00ae may be used instead. It should be understood that a person skilled in the art could make any modifications necessary, if any, for another file synchronisation service to be used in place of Dropbox. Where Dropbox is referred to herein, it should be understood that this is by way of example only.","The data owner subscribes to the FSS  and has an account therewith. The To synchronise across multiple devices, the FSS  typically maintains a copy of the designated FSS folder in its own cloud based storage system. The FSS , with the client file synchronisation program, updates the copy when changes are made to files in the designated FSS folder on the computer system . In other words, the FSS  is configured to synchronise a folder in its own storage system to correspond to the contents of a designated FSS folder on the computer system  of the data owner. This is done automatically, that is, without need for user action.","The API Maker  is a web application configured to create APIs for datasets and to publish the APIs so that developers can access data owners' datasets.","The API Maker  provides a website, known as a \u2018Developer Portal\u2019, for each data owner account. Preferably, the API Maker  is configured to allow the data owner to enter and to upload a logo, so that persons wishing to access the data owner's data using an API can do so via the Developer Portal. The API Maker  is also configured to allow developers to register at the Developer Portal and to have an account.","The API Maker  has a storage system. The FSS  and the API Maker  are configured to allow the FSS  to copy to and maintain the contents of a folder on the storage system of the API Maker  so that the contents of the folder reflect the contents of a sub-folder of the designated FSS folder on the data owner's computer system . It should be understood that the API Maker  and the FFS  may be integrated systems, in which case such an additional folder in the storage system of the API Maker  would not be necessary.","The block diagram of  illustrates where copies of a dataset may be stored. Thus, referring to , the storage of the computer system  includes a designated FSS folder  having a sub-folder  (\u201cAPI Maker folder\u201d). The FSS  maintains a copy of the designated FSS folder, indicated at , on its storage system and changes in the designated FFS folder  on the computer system  are copied to the designated folder  on the FSS . Thus changes in the API Maker folder  are copied to an API Maker folder  in the designated folder  on the FSS . The FSS  maintains a copy of the API Maker folder  on the storage system of the API Maker  in synchronicity with the copies on the storage system of the FSS  and the API Maker folder  on the computer system . The folder on the storage system of the API Maker  is referred to as the \u201cdata owner folder\u201d and is indicated at .","The API Maker  is configured to extract information, for example datasets or parts of datasets, from source data files stored in the data owner folder  when changes occur in the data owner folder . Detection that changes have taken place and action that is taken when changes have occurred is described in greater detail below. The extracted data is stored in a database  of the API Maker .","The API Maker  is also configured to enable subscribers to the API to obtain the datasets and\/or part of the datasets. A copy of the whole or part of one or more datasets may therefore be stored in a database  on the computer system .","It will be appreciated that the FSS  typically stores designated folders  and API Maker folders  for many data owners and the API Maker  typically stores data owner folders of many data owners.","Alternatively, rather than a designated folder  existing on the computer system , designated folder may exist solely on the storage system of the FFS  in a cloud based storage environment to which the data owner can upload files. Some FSSs available, for example Dropbox\u00ae offer this option. The owner of the data and the provider of the FSS are responsible for the configuration of the FSS and the location of the designated folder. Both the FSS  and the API Maker  are applications that run in a cloud environment, in which their code is stored on computer readable storage media and executed by processing apparatus to provide the functionality described herein.","The data is in a structured form: a 2-dimensional data array, comprising rows, columns and data cells, collectively termed a \u201cdataset\u201d. The API Maker  is configured to create each API using a dataset extracted from a source data file. In the present embodiment of the invention the source data file may be either a comma separated value (csv) data file, or a Microsoft Excel file. In the case where the source data file is an Excel document then it may be the case that the Excel document consists of one or more datasheets. In this scenario API Maker treats each datasheet as a distinct dataset.","Each dataset held within a source data file includes meta-data containing information such as the name of the dataset, the number of rows and the number of columns. The rows of the dataset hold text.","The API Maker  is configured to create APIs for datasets stored in the database . This includes wrapping each dataset in JavaScript Object Notation (JSON), making the data available via REStful Webservice APIs, and securing it with OAuth2 authorisation technologies although other ways of creating the APIs are possible. Embodiments of the invention are not limited to any particular method.","The API Maker  is configured to present an interface to a data owner or developer for each data owner or developer account. The interface is in the form of a dashboard. The data owner dashboard enables the data owner to control publishing of APIs and access to the APIs using publication controls and subscriber access controls. The developer dashboard enables developers to select APIs to subscribe to. Developers may have to request approval from the data owners for each subscription to each API. The data owner dashboard and the developer dashboard allow management of the approval process. An example data owner dashboard is shown in  and the referenced parts are explained below.","In the \u201cdataset\/file name\u201d column, the name of the datasets uploaded to the API Maker  are indicated. The \u201cStatus\u201d and \u201cAction Required\u201d columns respectively together indicate whether a dataset is available to subscribers, whether any changes have been made to the dataset, or whether any action is required to make the dataset available, or to disable the dataset. The \u201cConfirm Delete\/Rename\u201d button is present to allow the data owner to confirm before changes that may effect operation of developer's applications are made. In the downgrade column, the data owner may select to \u201cun-publish\u201d an API. By selecting \u201creview dataset\u201d, the data owner may review the data in the dataset, for example to check for corruption. The data owner may use the \u201cPublish API\u201d button to publish the API, thereby making the corresponding dataset available to others. Using the \u201cManage Subscriptions\u201d button, the data owner may manage requests from developers to subscribe to the API corresponding to the button. By selecting the \u201cDescriptor\u201d button, the data owner may modify certain metadata and set preferences.","Preferences (not shown) can be configured in the publication controls so that the API Maker  operates in a more manual or more automated manner in accordance with data owner preferences. The preferences can be set so that a new API is automatically published when new source data files are placed in the API Maker folder on the computer system . Also, the preferences can be set so that changes to the data part of a source data file are automatically published. Also, any requirement to approve subscription requests can be removed. Where the API Maker  includes functionality to notify registered developers of changes, the preferences can be configured so that the developers are automatically notified by email.","The data owner folder  of the API Maker  is periodically automatically synchronised with changes in the API Maker folder on the computer system . In addition a \u201cImmediate Synchronisation\u201d button is made available to \u2018manually\u2019 trigger an immediate re-synchronisation between the API Maker folder  of the FSS  and the data owner folder  of the API Maker  so that its record of contents of the files accurately reflects the files in the API Maker folder on the storage system of the FSS .","To detect changes in a data owner folder  of the API Maker , the API Maker is configured to periodically poll a Delta API function provided by the FSS , which indicates to changes in the API Maker folder . The Delta API function may provide information about the state of the folder, for example time of last update. Alternatively, the Delta API function may provide more detailed information, for example indicate specific changes to specific source data files.","In alternative embodiments, the metadata of the folder hierarchy may be monitored. Alternatively, the FSS  may notify the API Maker  when changes occur. Other ways of detecting changes in a folder are possible. In further alternatives, particular source files may be monitored for changes than whole folders.","The API Maker  is configured to determine the type of change that has occurred. A non-limiting list of types of change is set out in . This table indicates the contents of a table that the API Maker  maintains in its system database of all possible types of changes that may be made to a source data file on FSS and associated actions that can be taken. This includes changing the name, deleting the source data file, adding data to a source data file, editing data in a source data file, removing data from a source data file, and restoring a source data file. Each change listed in the database has a corresponding action to be taken in the API Maker . In this way, the API Maker  translates the changes to the state of a source data file, or the data contained within a source data file, into a set of instructions that are applied to the data set of the API associated with the source data file.","Where the API Maker  detects that a dataset in a source data file has been changed, the API Maker  also determines whether certain architectural configuration information of the source data file has changed in order to determine the type of change. When the API Maker  detects a source data file has changes, the API Maker  is configured to compare the dataset stored in its database  with the dataset in the corresponding changed source data file in the data owner folder . Change of certain architectural configuration information will mean that changes will be necessary to developers' applications to accommodate the changes to the source data file. Accordingly, where the type of change involves a change to a source data file including a change to predetermined architectural configuration information, a new API is created. Where the type of change involves a change to a source data file and there is no change to the predetermined architectural configuration information, a new API need not be created; the dataset for the source file in the database  can be updated and the current API can continue to be used.","Each API contains Meta data. The Meta data includes file header type information, such as version, timestamps, row count, etc. The Meta data also includes data record type information, such as field name list, field order, etc. An example of the Meta data fields that may be used to describe an API are as follows:",{"@attributes":{"id":"p-0054","num":"0053"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0","pgwide":"1"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"70pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"196pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Field","Meaning"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["_id","Filename and version"]},{"entry":["_rev","Internal checksum of file"]},{"entry":["fieldList","Lists the API fields in the order that they appear in the API."]},{"entry":[{},"The columns in the source file are alphabetically sorted when the"]},{"entry":[{},"API is created"]},{"entry":["fieldListDocOrder","Lists the API fields in the original column order of the source file"]},{"entry":["name","Informal name of an API"]},{"entry":["published","Indication of whether API has been published"]},{"entry":["fileSize","Size of the original source file in its original format"]},{"entry":["fileCreated","The date and timestamp of when an API was first created"]},{"entry":["fileModified","The date and timestamp of when an API was last updated"]},{"entry":["fileRevision","fileRevision is a number which is incrementally increased"]},{"entry":[{},"whenever a change to the source data file is detected. This is used"]},{"entry":[{},"by API Maker to correctly identify what version of a file it is"]},{"entry":[{},"working on (because simply using \u2018filename\u2019 is not accurate"]},{"entry":[{},"enough)."]},{"entry":["fileName","The name and extension of the original source file used to create"]},{"entry":[{},"an API"]},{"entry":["rows","The number of data rows in an API"]},{"entry":["contentChecksum","A unique checksum which is generated by API Maker and"]},{"entry":[{},"associated with the source data file. When changes are made to the"]},{"entry":[{},"source data file, API Maker recalculates the contentChecksum and"]},{"entry":[{},"compares it with a previous historical version. API Maker uses this"]},{"entry":[{},"comparison to help interpret actions on the source data file and"]},{"entry":[{},"translate them into system actions. For example, if the two"]},{"entry":[{},"contentChecksums are different then API Maker knows a content"]},{"entry":[{},"change has taken place."]},{"entry":["timestamp","The date and timestamp of the last time anything changed"]},{"entry":[{},"for an API"]},{"entry":["seq","The latest delta sequence number."]},{"entry":[{},"This is to be used in conjunction with the Delta API described"]},{"entry":[{},"below in section 5"]},{"entry":["root","This term applies to the root name of a filename associated with a"]},{"entry":[{},"dataset. It is used when the source data file has originated from an"]},{"entry":[{},"Excel file in which there are multiple datasheets. In this case the"]},{"entry":[{},"root \u2018name\u2019 is the name of the Excel file and the extracted datasets"]},{"entry":[{},"are named according to the name of the datasheets in the Excel"]},{"entry":[{},"document."]},{"entry":["apiVersion","The version number of an API"]},{"entry":["type","The type of source file used to generate and API"]},{"entry":[{},"Currently set to \u201cdocument\u201d in this version of API Maker"]},{"entry":["limit","The number of rows returned in an API Method"]},{"entry":[{},"This will be based on:"]},{"entry":[{},"A limit that was specified when making the original call"]},{"entry":[{},"The actual number of rows in an API if less than 200"]},{"entry":[{},"The default maximum of 200 if no limit specified and more"]},{"entry":[{},"than 200 data rows in an API"]},{"entry":["offset","The starting point row number of the returned results"]},{"entry":[{},"This will be the same as specified on the original call or zero if not"]},{"entry":[{},"specified"]},{"entry":["pageNumber","The number of pages in an API based on the limit specified or"]},{"entry":[{},"defaulted."]},{"entry":[{},"EG. pageNumber = 5 if API contains 1000 rows and limit = 200"]},{"entry":["pageCount","The current page number within an API based on limit and offset"]},{"entry":[{},"EG pageCount = 3 if API contains 1000 rows"]},{"entry":[{},"and limit = 200 and offset = 400"]},{"entry":["numRowsInContents","The number of rows returned in the result contents array for an"]},{"entry":[{},"API method request"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"Each API is RESTful and is constructed in accordance with standard API practices, such as offset and limit parameters for paging.","By way of example, the URL of the API may be formatted as follows: https:\/\/www.datownia.com\/api\/doc\/{publisher}\/v1\/{document}?offset=25&limit=0. In this URL, the publisher is the name of the organisation (typically the data owner) that is publishing the data in the API. The version is the version number of the source data file (e.g. v1). The version number increments when the architectural configuration of the API has been changed, for example fields have been added or removed. The filename is the name of the source data file that was used to create the API. This is usually meaningful and describes the data that is in the API and is typically the same name that appears on a dataset list in the data owner's API website. Where the data file is an Excel file, an example URL of the API may be formatted as follows: https:\/\/www.datownia.com\/api\/doc\/{publisher}\/v1\/{root}\/{sheet}?offset=25&limit=0.","The first time that a data owner uses the API Maker , a set up process is performed. If the data owner does not already subscribe to the FSS , for example Dropbox, the data owner is required to. This results in the computer system  of the data owner having a designated FSS folder  in which files can be stored, and the contents of the folder is automatically synchronised with the corresponding designated folder  on the storage system of the FSS . Thus any changes made to the designated folder  are mirrored in the folder  on the storage system.","When the data owner registers with the API Maker , the API Maker  sends a request for authorization to connect with the designated folder  on the FSS . The request may be presented to the data owner on the computer system  as shown at  in . The data owner accepts the request. The FSS  then sends to the data owner a request for authorization for the API Maker  to connect. This request may be presented to the data owner on the computer system  as shown at  in . Provided the data owner accepts, the API Maker  creates the \u201cAPI Maker folder\u201d  within the designated folder . The FSS  also grants API Maker \u2018data read\u2019 and \u2018data write\u2019 permissions to and from the \u201cAPI Maker folder\u201d in the designated folder on the FSS. In an alternative embodiment in which the FSS  and the API Maker  are integrated, it will be understood that permissions do not have to be requested.","Steps involved in creating and publishing a new API or in updating an existing API will now be described with reference to . At step A, the data owner makes a change in the API Maker folder . The data owner may add a new source data file, change an existing data source file, delete a source data file, rename a source data file, or restore a previously deleted source data file. For example, to add a new source data file, the data owner can drag-and-drop into the API Maker folder . The FFS  then synchronises the API Maker folder  in the storage of the FSS  at step B and also the data owner folder of the API Maker  at step C.","The API Maker  periodically checks for changes to source files. At step D, the API Maker  then determines that a change has occurred in the data owner folder or to a particular source file and determines at step E a type of change. Determining the type of change can be done in various ways. The API Maker  determines at step F the action to be taken in view of the type of change with reference to a stored copy of the table indicated in . Depending on the type of change, the API Maker  then either creates a new dataset in the database  and creates a new API for the dataset (step G), or makes changes to an existing dataset and enables subscribers to access the changed dataset using the existing API for the dataset (step J). The new API or the existing data can then be made available to subscribers automatically, or upon confirmation from the data owner via the data owner dashboard (steps H and K). In steps I and L, developers are notified of the new API or the updated API. In step G, it should be understood that the new API may be considered to be a new version of an existing API.","Where a source data file has been changed and saved, the API Maker determines whether predetermined architectural configuration information has changed. The types of change and corresponding action that is taken will now be described in greater detail.","a) When the API Maker  determines in step E that the type of change is the addition of a new source data file, the API Maker  extracts the dataset from the new source data file on the storage system of the API Maker , stores it in its database , and indicates the existence of a new dataset on the data owner dashboard.\n\nb) When in step E the API Maker  determines that a source data file has been updated and determines that the predetermined architectural configuration information is the same, the changes can simply be made to the dataset stored in the database . This is achieved by comparing the existing dataset in the database  with the dataset in the source data file in the data owner folder  and generating information indicative of the differences. The API Maker  then updates the dataset in the database  using the information. Such changes to the dataset in the source data file may be automatically recognized and interpreted by the API Maker  and applied to the API by selecting the \u201cpublish\u201d icon. Alternatively, the API Maker  may be configured so that any such changes in the dataset for a published API are automatically published. An example dashboard indicating that such change have been made to a dataset is indicated at  in .\n\nc) When in step E the API Maker  determines that the predetermined architectural configuration information has changed, for example because new columns have been added to the dataset in the source data file or a column has been deleted or the name of a column has been changed (which is treated as addition of a new column and deletion of a previous column), the API Maker  creates a new version of the API separate from the currently active API. Where developers are using the currently active API, the act of creating a new version of the API prevents impact on their work products which will continue to operate with the previous version of the API. The developers may be notified of the architectural changes and given an opportunity to modify their work products to work with the new version of the API. The developers may then switch to using the new version of the API. The data owner dashboard displays when developers have stopped using the earlier version of the API and allows deactivation of the earlier version. An example data owner dashboard is shown in . An unpublished second version of a dataset having architectural changes is indicated at  and an earlier version of that dataset is indicated at . Datasets that are currently accessible through their corresponding APIs are indicated at , as well as at .\n\nc) Another type of change is removal of a source data file. An API can be disabled by removing a source data file from the API Maker folder. In this case, the data owner is requested to confirm that the API is to be disabled by asking for the data owner to select a \u201cconfirm delete\u201d button. If an API is disabled, developers will not be able to access it any more. Alternatively, the data owner can disable an API by selecting \u201cun-publish\u201d. Alternatively, removing a file from the API Maker folder may automatically disable the corresponding API.\n\nd) Another type of change is a rename. The API Maker  searches for differently named files having the same checksum to determine whether a rename has occurred. In this case, the API Maker  extracts a dataset from the renamed source data file and creates a new dataset and a new API for that dataset. Alternatively, if the source data file is renamed, the API Maker  may request, via the dashboard, for confirmation that the API for the dataset is to be published with the new name, and whether or when to disable the API for the dataset with the original name.\n","Renaming a file to the name of a previous file having a corresponding API and removing the previous file, provided the predetermined architectural configuration information for both files is the same, results in a switch of dataset from which the API is created. Any application using the original dataset will then use the new dataset.","If a sub-folder is created within the API Maker folder, but it does not contain any source data files, then API Maker takes no action. If a source data file is moved to a sub-folder within the API Maker folder then this is handled by the API Maker  as if the source data file has been renamed.","e) If a source data file that has been removed from the data owner folder  is to be restored, the API Maker  requests, via the dashboard, whether to create a restored version of the dataset with the same name and then allow to re-publishing of the API.","When an API for a new or changed dataset is to be published, an indication thereof is visible on the data owner dashboard. Using the dashboard the data owner then preferably reviews the data that was uploaded to ensure that the data that was intended for upload has been uploaded. The data owner then preferably adds descriptive text to the dataset and usage terms and conditions.","To publish an API for a dataset, the data owner selects a \u201cpublish\u201d icon on the data owner dashboard corresponding to the dataset. The API is then published to the Developer Portal of the data owner. The data owner can then send to a link to the Developer Portal to any potential subscribers to the API.","Developers can access the Developer Portal to view information on the or each API that the data owner has made available. An example view of the developer dashboard on the Developer Portal is shown in . As can be seen at , developers may be able to view a sample of the data available for each API. If the registered developer selects at button  to subscribe to one or more datasets of a particular data owner, a request is sent to the data owner for approval to subscribe. Pending requests can be viewed by selecting on the button .","Requests to subscribe received from developers can be managed on the data owner dashboard. Requests which have been authorised are also shown and can be cancelled. An example dashboard is shown  with a section for \u201cSubscriptions\u201d.","The API Maker  allows a common set of API functions for every dataset it accepts as input and subsequently processes. In the embodiment, the set of API functions does not change or vary between datasets. API Maker is able to do this because its API functions are designed to work with any 2-dimensional dataset regardless of meaning of the data held in the dataset.","Supported API functions may include, by way of example:\n\n","Each request or call made to an API function from a Developer's application must be authenticated or recognized, through the use of a digital security key, before the function returns a value. The API Maker  creates and assigns the digital security key to a Developers software application. The API Maker  maintains a database table that creates an association between an API and one or more digital security keys that are approved to access that specific API. When a request from a developer to subscribe their application to a specific API is approved by the data owner, then the API Maker  makes a record in its database which associates all of the API's functions with the digital security key associated with the application created by the developer. If authentication fails, because the digital security key is not associated with the specific API, then the API function will returns an error or null value. If authentication is successful, because the digital security key is associated with the specific API, then the API function will execute normally.","The API Maker  permits a Developer to register one or more applications with the API Maker . Each application can be associated with any number of APIs created by the API Maker . The associated APIs may belong to one or more data owners. To achieve this the API Maker  permits a single Developer account and the applications created in association with that account to be logically independent of the data owner accounts.","Examples of publisher to subscriber relationships can be seen in . As can be understood, a developer can, for each application developed, subscribe to more than one dataset through each corresponding API.","In a specific implementation, the API Maker  may use OAuth 2 for authentication purposes and require developers to enable OAuth 2 client integration when calling the API. The authentication key and secret are used to verify each API call. Each application requires only one set of keys and those allow authentication for all APIs that have been approved for use by that application.","Embodiments of the invention usefully allow each API to be updated with data, and \u2018managed\u2019 on an ongoing basis, via the interpretation of changes to files and folders on the FSS . Embodiments advantageously enable API creation and ongoing management of APIs to be conducted remotely via the interpretation of data and file systems changes on the data owners copy of the dataset, held in source data files, and on an FSS  which is remote to the API Maker system.","Usefully, a data owner may use the API Maker  to automatically update its own website where the website is configured to use a dataset through the API. Thus, the data owner need only modify data in a source data file in order to effect changes on the website.","It should be understood that the data in the source data file may reference content located elsewhere on the Internet. Thus, textual and non-textual content on websites may be provided and updated using the API Maker .","Data owners are automatically authorized to have access to their own APIs.","Referring to , some applications, for example as indicated at , keep a local cached copy of a dataset accessed using an API. This means that any changes made to the data part of the dataset of an API may need to be applied to those local copies. The API Maker  includes a cached data support module (CDSM) which integrates into the appropriate API functions to simplify the work effort required to make the data changes in the local copies.","The CDSM is made available to developers in a downloadable Software Development Kit . The Software Development Kit comprises a database  (which accurately includes datasets reflecting the structure of all the \u2018API Maker\u2019 data APIs to which an application using the CDSM is subscribed) and some software that assists the developer maintain an accurate synchronised local copy of the datasets that are provided by the APIs to which the application is subscribed. The software in the Software Development Kit  integrates into a Delta API function that is made available by the API Maker  for every dataset.","The Delta API function contains a list of every new or removed data row for an API since it was first published. A change to a data row is represented as a removal of the row with the old data values and an addition of a data row with the new values.","The Delta API function is ordered in the sequence that the changes were applied to an API and identified by a sequence number \u201cseq\u201d. This sequence number is used when calling the Delta API function to return the correct set of Delta API records that need to be applied.","The API Maker  uses a row identifier key (\u201c_id\u201d) to uniquely identify each row of data in an API. This key is also used in the Delta API function. The Delta API function will identify data rows to be deleted by the identifier key only, that is, the rows are empty.","The API Maker  is configured so that to access the Delta API function a term is added to the path in the API Maker URL. For example, where the term chosen is \u201cdelta\u201d the URL is: https:\/\/www.datownia.com\/api\/doc\/{publisher}\/v1\/delta\/{document}?seq=1&offset=20&limit=0.","In the embodiment, the data in an API can be downloaded as SQlite instead of JSON. This is achieved by appending \u201csqlite\u201d to the filename in the API Maker URL as follows: https:\/\/www.datownia.com\/api\/doc\/{publisher}\/v1\/delta\/{document}.sqlite The returned database contains a table named the same as the filename with the version number appended. The primary key of the table in this case is also the row identifier (\u201c_id\u201d).","The Delta API function can be configured to return either JSON or a set of SQL statements in the SQlite download.","An example of the Delta API function, for a specific dataset, text in rows of which has been changed is as follows:",{"@attributes":{"id":"p-0088","num":"0098"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Request: \/api\/doc\/customer99\/v1\/delta\/testdocument1?seq=0 (i.e. give me"},{"entry":"all the deltas since seq 0)"},{"entry":"Returns:"},{"entry":"\u2003\u2003["},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\u201c_id\u201d: \u201ce51431cc-0114-4ea6-bca1-306b3f755771_1.0_delta_1\u201d,"},{"entry":"\u2003\u2003\u2003\u201c_rev\u201d: \u201c1-68f3a51785506ce2e4f1807dc13d9948\u201d,"},{"entry":"\u2003\u2003\u2003\u201ctype\u201d: \u201cdelta\u201d,"},{"entry":"\u2003\u2003\u2003\u201cparent\u201d: \u201ce51431cc-0114-4ea6-bca1-306b3f755771_1.0\u201d,"},{"entry":"\u2003\u2003\u2003\u201cseq\u201d: 1,"},{"entry":"\u2003\u2003\u2003\u201caction\u201d: \u201cdelete\u201d,"},{"entry":"\u2003\u2003\u2003\u201cdata\u201d: \u201ca6a8580a6619cb36205d0a2c7b037be9\u201d"},{"entry":"\u2003\u2003\u2002},"},{"entry":"\u2003\u2003\u2002{"},{"entry":"\u2003\u2003\u2003\u201c_id\u201d: \u201ce51431cc-0114-4ea6-bca1-306b3f755771_1.0_delta_2\u201d,"},{"entry":"\u2003\u2003\u2003\u201c_rev\u201d: \u201c1-541c1d9f71ebae277d1b04fe9ca64627\u201d,"},{"entry":"\u2003\u2003\u2003\u201ctype\u201d: \u201cdelta\u201d,"},{"entry":"\u2003\u2003\u2003\u201cparent\u201d: \u201ce51431cc-0114-4ea6-bca1-306b3f755771_1.0\u201d,"},{"entry":"\u2003\u2003\u2003\u201cseq\u201d: 2,"},{"entry":"\u2003\u2003\u2003\u201caction\u201d: \u201cinsert\u201d,"},{"entry":"\u2003\u2003\u2003\u201cdata\u201d: {"},{"entry":"\u2003\u2003\u2003\u2002\u201cname\u201d: \u201cBattery\u201d,"},{"entry":"\u2003\u2003\u2003\u2002\u201csku\u201d: 328143,"},{"entry":"\u2003\u2003\u2003\u2002\u201cstock level\u201d: 10,"},{"entry":"\u2003\u2003\u2003\u2002\u201cwarehouse\u201d: \u201cyork\u201d,"},{"entry":"\u2003\u2003\u2003\u2002\u201c_id\u201d: \u201cf83b140aa934e650febeec76cb2c53f7\u201d"},{"entry":"\u2003\u2003\u2003}"},{"entry":"\u2003\u2003\u2002}"},{"entry":"\u2003\u2003]"},{"entry":"\u2003\u2003IF action = \u201cdelete\u201d THEN the data is the \u201c_id \u201cof the row that"},{"entry":"\u2003\u2003needs deleting"},{"entry":"\u2003\u2003IF action = \u201cinsert\u201d THEN the data is the data for the row that"},{"entry":"\u2003\u2003needs inserting"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}}},"In the event of error when an API is called, the following error codes may be sent to the computer system  of the developer.",{"@attributes":{"id":"p-0090","num":"0100"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"42pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"175pt","align":"left"}}],"thead":{"row":[{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}},{"entry":["Error Code","Error Reason"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["200","Okay"]},{"entry":["400","Problem with request - in terms of bad method call"]},{"entry":["401","Not authorised"]},{"entry":["404","Not Found"]},{"entry":["500","Problem with request - in terms of temporal issue, may be"]},{"entry":[{},"resolved by repeat"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In an embodiment, the computer system  may be a mobile device, and is required to operate offline. When the computer system  is online, it uses the software development kit (CDSM)  to synchronise the corresponding current dataset with the local data held in the local database. In the event that the computer system  is to be used offline, the application is configured to store a copy of the dataset in the local database. When the computer system  is online again, it automatically connects to the API Maker  using the API and updates the local database in view of any changes using the Delta API.","The application therefore functions properly when the computer system  is offline. Further, advantageously, querying a local database is much faster than querying over the internet. Therefore, data from the API can be obtained by the application more quickly. Where an internet connection is unstable, or if the API Maker  suffers an outage, the application continues to function properly. No bespoke hosting is required to keep the application running.","It will be appreciated by the person skilled in the art that various modifications may be made to the embodiments described above. In particular, the embodiments may be modified to avoid need for the FSS . In this case, with reference to , in place of steps A to C, the data owner may upload files to the data owner folder  on the storage of the API Maker , and in place of step D, the API Maker  may be configured to determine whether changes have occurred in the data owner folder . Steps E to M are as described with reference to .","The applicant hereby discloses in isolation each individual feature or step described herein and any combination of two or more such features or steps, to the extent that such features or steps or combinations are capable of being carried out based on the present specification as a whole in the light of the common general knowledge of a person skilled in the art, irrespective of whether such features or steps or combinations of features or steps solve any problems disclosed herein, and without limitation to the scope of the claims. The applicant indicates that aspects of the present invention may consist of any such individual feature or combination of features. In view of the foregoing description it will be evident to a person skilled in the art that various modifications may be made within the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF FIGURES","p":["For better understanding of the invention, embodiments will now be described, by way of example only, in which:",{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 1A"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 1B"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 5A"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":"FIG. 5B"},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIGS. 9 and 10"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 12"}]},"DETDESC":[{},{}]}
