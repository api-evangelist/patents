---
title: Method, system, and apparatus for a voice markup language interpreter and voice browser
abstract: The present invention can include a method of allocating an interpreter module within an application program. The application program can create one or more interpreter module instances. The method also can include updating a property descriptor of the interpreter module instance and directing the interpreter module instance to allocate speech and audio resources. Content then can be loaded into the interpreter module instance and run.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925512&OS=07925512&RS=07925512
owner: Nuance Communications, Inc.
number: 07925512
owner_city: Burlington
owner_country: US
publication_date: 20040519
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION"],"p":["1. Field of the Invention","The present invention relates to multimodal browsers and voice servers and, more particularly, to voice markup language interpreters.","2. Description of the Related Art","Visual browsers are complex application programs that can render graphic markup languages such as Hypertext Markup Language (HTML) or Extensible HTML (XHTML). As such, visual browsers lack the ability to process audible input and\/or output. Still, visual browsers enjoy a significant user base.","Voice browsers are the audio counterparts of visual browsers. More particularly, voice browsers can render voice markup languages such as Voice Extensible Markup Language (VXML), thereby allowing users to interact with the voice browser using speech. Voice browsers, however, are unable to process or render graphic markup languages.","Recent developments in Web-based applications have led to the development of multimodal interfaces. Multimodal interfaces allow users to access multimodal content, or content having both graphical and audible queues. Through a multimodal interface, the user can choose to interact or access content using graphic input such as a keyboard or pointer entry, using an audible queue such as a speech input, or using combination of both. For example, one variety of multimodal interface is a multimodal browser that can render XHTML and Voice markup language, also referred to as X+V markup language.","To provide both graphic and voice functionality, developers are left with the option of developing a new multimodal browser or, alternatively, redesigning existing visual browsers to provide voice functionality. The complexity of visual browsers, and browsers in general, however, makes such efforts both time consuming and costly.","The inventive arrangements disclosed herein provide a solution for providing speech and\/or voice processing functionality within a host application program. In one embodiment, a library of voice markup language functions is provided as a voice markup language interpreter that is accessible via an application programming interface. In another embodiment, one or more instances of the voice interpreter can be created by a host application program thereby providing speech processing capabilities for the host application program. For example, the inventive arrangements disclosed herein can be used to voice-enable a visual browser or as a voice browser for use in a voice server.","One aspect of the present invention can include a method of allocating an interpreter module within an application program. The application program can create one or more interpreter module instances. The method also can include updating a property descriptor of the interpreter module instance and directing the interpreter module instance to allocate speech and audio resources. Content then can be loaded into the interpreter module instance and run.","Another aspect of the present invention can include a system for processing speech within a host application program. The system can include a voice markup language interpreter that is instantiated by the host application program and an application programming interface through which the voice markup language interpreter communicates with the host application program. The system further can include an updateable property descriptor specifying a listening mode and a language to be used by the voice markup language interpreter. The voice markup language interpreter can be configured to allocate speech resources and audio resources under direction of the host application program, wherein the audio resources are distinct from the speech resources.","Another aspect of the present invention can include a machine readable storage being programmed to cause a machine to perform the various steps disclosed herein.",{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 1","b":["100","100","102","105","115","100","125","130","135","115","105"]},"The computer system  can be a server for hosting one or more applications such as voice browsers, interactive voice response systems, voice servers, or the like. For example, in one embodiment, the application  can be a visual browser that is to be voice or speech enabled. Accordingly, the application  can function as a multimodal browser once the interpreter  is instantiated. In another embodiment, the application  can be a voice server. In that case, the interpreter  can function as, or form, a voice browser. Regardless, the application  can be configured to create one or more instances of the interpreter , for example a pool of interpreters , as may be required, depending upon intended use.","The interpreter  can include an application programming interface (API)  and a property descriptor . The interpreter  can be implemented as a lightweight software component. When more than one instance of the interpreter  is instantiated, for example, the interpreter  instances can function as multiple concurrent and serially reusable processing modules.","The API  provides a library of functions, methods, and the like for accessing the functionality of the interpreter . As such, the API  provides an interface through which the application  and the interpreter  can communicate. The property descriptor  is a configurable electronic document that specifies operational parameters of the interpreter . In one embodiment, the property descriptor  can specify modes of operation and a locale. For example, one mode of operation can include a listening mode such as \u201calways listening\u201d or \u201cpush to talk\u201d, or \u201cpush to activate\u201d. The listening mode determines when audio data is streamed to the speech recognition engine and how the end of an utterance is determined. That is, the listening mode can specify how audio events are to be detected and handled. The locale can specify the language to be used in speech processing functions, whether speech recognition or text-to-speech.","Table 1 below illustrates additional properties that can be specified in or by the property descriptor .",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"84pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"133pt","align":"left"}}],"thead":{"row":[{"entry":"TABLE 1"},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":["CACHE_FC_SIZE","Property used to define the maximum size"]},{"entry":[{},"of the file cache."]},{"entry":["CACHE_FC_THOLD","Property used to define the file cache"]},{"entry":[{},"threshold."]},{"entry":["CACHE_FSE_LEN","Property used to define the maximum size of"]},{"entry":[{},"a file entry for the platform file system."]},{"entry":["CACHE_MC_SIZE","Property used to define the maximum size of"]},{"entry":[{},"the memory cache."]},{"entry":["CACHE_NAME","Property used to define the symbolic name of"]},{"entry":[{},"the resource cache to use."]},{"entry":["CALL_TIMEOUT","Property used to configure the length of time"]},{"entry":[{},"the browser should wait to connect to a call"]},{"entry":[{},"if not provided one."]},{"entry":["FETCH_EXPIRES","Property used to define the default expiration"]},{"entry":[{},"time for fetched resources."]},{"entry":["FETCH_THREADS","Property used to define the initial number of"]},{"entry":[{},"fetch threads to used for fetching resources."]},{"entry":["FETCH_TIMEOUT","Property used to define the default fetch"]},{"entry":[{},"timeout."]},{"entry":["LOCALE_LIST","Property used to define the possible set of"]},{"entry":[{},"locales to be used by the VoiceXML"]},{"entry":[{},"application."]},{"entry":["OVERRIDE_SERVICES","Property used to override the default"]},{"entry":[{},"mechanism for obtaining browser services."]},{"entry":["OVERRIDE_SITE_DOC","Property used to override the site document"]},{"entry":[{},"URL for this browser session."]},{"entry":["PP_CAPACITY","Property used to set the size of the parser"]},{"entry":[{},"tool capacity of the interpreter."]},{"entry":["PP_PRELOAD","Property used to set the preload count for the"]},{"entry":[{},"parser pool of the interpreter."]},{"entry":["SITE_DOC","Property used to set the site document URL."]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}}}},"In one embodiment, the interpreter  can function as a voice markup language interpreter. Such can be the case, for example, where the application  is implemented as a visual browser. The interpreter  can be configured to parse and render any of a variety of voice markup languages such as Voice Extensible Markup Language (VXML) or any subset thereof. For example, the interpreter  can be configured to render the subset of VXML used by the Extensible Hypertext Markup Language (XHTML) and Voice markup language, commonly referred to as X+V markup language. In this manner, the interpreter  can function in a complementary fashion with the application  to provide multimodal browsing. The application  can process graphical markup language and provide any voice markup language to the interpreter  for rendering.","In another embodiment, the interpreter  can provide the core voice markup language rendering capabilities for implementing a voice browser. In that case, the application  can be a voice server.","As noted, the system  can include a variety of resources such as the audio subsystem , the ASR engine , and the TTS engine . The audio resources are distinct from the speech resources. More particularly, the audio subsystem  is distinct from both the ASR engine  and the TTS engine . Rather than incorporating audio handling capabilities within the speech resources, i.e. the ASR engine  and\/or the TTS engine , the audio subsystem  can handle such functions. The interpreter  can manipulate the speech resources through the speech services API . This allows the interpreter  to be implemented independently of the speech resources, thereby facilitating the use of speech resources from different vendors.","Thus, in one embodiment, the audio subsystem  can capture or record audio from a user input and provide that audio to the ASR engine . Similarly, the audio subsystem  can obtain recorded and\/or synthetic speech from the TTS engine  and\/or other audio playback system and provide that audio to a user. The audio subsystem  further can route audio between the various speech resources and a user device.","The audio subsystem  can include one or more audio listeners. For example, the audio subsystem  can include play and record listeners. The record listener can detect and record audio, including speech, received from a user, for example via a communications link. Such speech can be recorded and provided to the ASR engine . The play listener can detect speech generated by the TTS engine  to be played back to a user.","Because each of the processing resources is distinct. i.e. the audio subsystem , the ASR engine , and the TTS engine , each can be allocated individually. Such an arrangement further allows audio to be handled in a manner that is independent from the processing functions to be performed upon the audio.","While the application  and the interpreter  can function in a cooperative manner, the audio subsystem , the ASR engine , and the TTS engine  need not be part of the same system. That is, in one embodiment, the processing resources can execute in one or more other computer systems. Such computer systems can be proximate to, or remotely located from the computer system . For example, the audio and speech resources can be provided as individual services that are accessible to the interpreter  and application  via a communications network , which can include, but is not limited to, a local area network, a wide area network, the public switched telephone network, a wireless or mobile communications network, the Internet, and\/or the like. Still, in another embodiment, the resources can be located within a same computer system as the application  and\/or the interpreter .","In operation, once one or more instances of the interpreter  are created by the application . Once created, the application  can access the audio and speech resources via the interpreter . That is, the interpreter  can render voice markup languages and utilize the audio subsystem , the ASR engine , and the TTS engine . Accordingly, voice services can be provided to a user accessing the computer system  via a telephone  or a computer system  over another communications network .","The application program  can be synchronized with the interpreter  through events and state change information, i.e. through the addition of XML event listeners and state listeners. Events and state changes are propagated from the interpreter  to the application  through these event listeners. The application  uses the API's for adding event and state change listeners to the interpreter . A listener is an object oriented programming technique for implementing a callback function. Using a state change event allows API's to function properly as some API's may fail if the interpreter  is in the wrong state. Accordingly, the application  can wait until the interpreter  is in the correct state, using the state change listener, before calling those API's that are sensitive to the internal state of the interpreter .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 2","b":["200","200","200"]},"In step , the application program, via the API provided as part of the interpreter, can create an instance of the interpreter. For example, the instance can be created using a factory design pattern or a constructor. In step , the application program can modify the property descriptor of the interpreter in accordance with the desired listening mode and language to be used to interact with the interpreter. The application can be programmed to configure the property descriptor to cause the interpreter to operate in a particular fashion or for a particular mode of operation.","In step , an ECMAScript Scope and Scope Factory can be set. The interpreter used with the multimodal browser can share the ECMAScript engine from the visual browser, i.e. the application, through an abstract interface called Scope. Scope is an abstraction of the hierarchical VoiceXML variable scopes. A setScopeFactory method enables the application to pass a callback function to the interpreter which allows the interpreter to create new scopes (ECMAScript objects) at runtime.","Additionally, the interpreter used with the multimodal browser shares the Document Object Model (DOM) of the document being rendered by the visual browser. This is done with an API setECMAScriptScope. Synchronization between speech recognition events and update of visual input elements can then be implemented by the interpreter directly updating the DOM using the Scope interface and the \u201cdocument\u201d variable contained in the Scope object passed in through setECMAScriptScope.","In step , the application program can instruct the newly created interpreter instance to begin allocating resources. More particularly, the interpreter can be instructed to allocate speech resources such as an ASR engine and\/or a TTS engine. In step , the application program can instruct the interpreter to allocate the audio subsystem. As noted, the audio subsystem can be allocated separately from the speech resources as the audio subsystem is distinct from the speech resources. In step , the application program optionally can instruct the interpreter to add event listeners. For example, in the case where the interpreter is to function with a visual browser, the event listeners can be Extensible Markup Language (XML) listeners.","In step , content can be loaded into the interpreter from the application program. For example, in the case where the interpreter functions as a voice browser in a voice server context, a site VXML or other site voice markup language document can be set. The current VXML or other voice markup language document can be set for the current browser session. In the case where the interpreter functions as a multimodal browser, VXML link fragments for Command and Control and Content Navigation (C3N) can be loaded. Further, VXML form fragments can be loaded as content to be rendered.","In step , the content can be executed or run. For example, where the interpreter functions with a visual browser, the interpreter can enable document level link grammars and run a form fragment by identifier. Where the interpreter functions as a voice browser, the current voice markup language document can be run. In any case, the interpreter can begin listening for events.","The application can listen and respond to events generated by the interpreter in step . Notably, the application can determine whether the received event is a user event such as a VoiceXML user event from a C3N grammar. If so, the interpreter can execute a user interface response to a C3N event. If the event is an XML event, a Document Object Model level 2 (DOM2) event, or an event formatted using another suitable protocol can be created and propagated through the DOM.","In step , if the interpreter is finished running the loaded content, the method can continue to step  to load and execute additional content. If not, the method can loop back to step  to continue listening and responding to further events.","While the method  has been descriptive of a single interpreter, it should be appreciated that multiple instances of the interpreter can be created and run. Accordingly, in another embodiment, a pool of one or more interpreter instances can be created by the application program. A threading policy can be established in the application program to facilitate the asynchronous operation of each of the interpreter instances.","The present invention can be realized in hardware, software, or a combination of hardware and software. The present invention can be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software can be a general-purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.","The present invention also can be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.","This invention can be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly, reference should be made to the following claims, rather than to the foregoing specification, as indicating the scope of the invention."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["There are shown in the drawings, embodiments that are presently preferred; it being understood, however, that the invention is not limited to the precise arrangements and instrumentalities shown.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 2"}]},"DETDESC":[{},{}]}
