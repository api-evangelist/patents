---
title: System and method for a service provisioning platform for activating services in a communication network
abstract: A system for provisioning services may include a device that may receive a service order that identifies a service to be provisioned. The device may obtain, using the service order, a specification for the service. The device may further identify, based on the specification, a service processing system to invoke for provisioning the service, and invoke the service processing system by sending the service order and the specification to the identified service processing system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08645459&OS=08645459&RS=08645459
owner: Telefonaktiebolaget LM Ericsson (Publ)
number: 08645459
owner_city: 
owner_country: SE
publication_date: 20091118
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["TECHNICAL FIELD","BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["Embodiments described herein relate generally to communication systems, and more specifically, to techniques for provisioning services in communication systems.","Service providers may offer a variety of services to customers. For example, a customer may be provided with the option of obtaining a wired telephone-based service, a wireless telephone-based service, a data networking-based service (wired or wireless), a television-based service, etc. To obtain such a service from the service provider, the customer may submit an order for the desired service. Once submitted, the service may be activated prior to the customer being able to use the service.","A current service provisioning architecture includes a Customer Administration System (CAS), a provisioning gateway, and a group of service enablers. In operation, the CAS may provide information for a service order to the provisioning gateway, which acts to provide the appropriate information to the appropriate service enablers for activating the ordered service. One of the main problems with the current service provisioning architecture is that the architecture does not support reuse of existing information. As a result, the CAS (and\/or its administrator) has to collect all information that will be required for provisioning a service before the provisioning even starts. Thus, the provisioning of a service can be greatly delayed until all of the information can be collected.","In addition, the current provisioning gateway provides an interface that is based on concrete data models, where there is a different data model for each service enabler. Thus, when a new service enabler is provided in the network, network administrators have to update the provisioning gateway to include a new data model for the new service enabler, and notify the existing activation processes, the existing interfaces, the existing clients (e.g., order systems\/processes), the CAS, the administration system, etc. of the new service enabler. Thus, introduction of new components to the current service provisioning architecture is a big undertaking.","The current service provisioning architecture provides schemas that specify what activation\/provisioning information a specific service needs. However, current provisioning interfaces, such as Service Provisioning Markup Language (SPML) and Customer Administration Interface 3rd Generation (CAI3G), are abstract eXtensible Markup Language (XML)-based interfaces. Thus, even though the provisioning interface may remain the same, usage of the provisioning interface may require that a client that operates on the provisioning interface has to be changed in order to handle a new schema. As a result, the provisioning interfaces may be changed (e.g., internal code may be updated to support new provisioning targets).","It is an object of the invention to overcome at least some of the above disadvantages, and to provide a service provisioning platform that provides a single generic, concrete, and stable interface for provisioning services.","An embodiment described herein may provide a method that is performed by a device. The method may include receiving, using the device, a service order, the service order identifying a service to be provisioned; obtaining, using the device, information regarding the service; identifying, using the device, a service processing system to invoke for provisioning the service, the identifying being based on the obtained information regarding the service; and routing, using the device, the service order and the information regarding the service to the identified service processing system.","Another embodiment described herein may provide a system that includes a service activator, a service processing system, and an adapter. The service activator may receive a service order that identifies a service to be provisioned; obtain, using the service order, a specification for the service; identify, based on the specification, the service processing system to invoke for provisioning the service; and send the service order and the specification to the identified service processing system. The service processing system may receive the service order and the specification from the service activator; collect, in response to receiving the service order and the specification, information from one or more external sources; and forward information for provisioning the service to an adapter, the information being based on the collected information and the service order, and the specification. The adapter may receive the information for provisioning the service from the service processing system, convert the received information to an appropriate format, and transfer the converted information to one or more of a provisioning gateway or one or more service enablers for provisioning the service.","Systems and\/or methods described herein provide a service provisioning platform that uses service-specific activation processes, which results in a single generic, concrete, and stable interface. The service provisioning platform provides support for activation\/provisioning of any type of service. The service provisioning platform also provides support for multiple service activation state machines and activation processes at the same time. For example, data for multiple services may be simultaneously collected and multiple services may be simultaneously activated on service enablers. In addition, due to the concrete and predefined service types defined in the service provisioning platform, external clients, such as order systems\/processes, do not need to be changed when new services are introduced.","The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also, the following detailed description does not limit the invention.","Embodiments described herein may provide a service provisioning platform that provides a single, service-oriented interface for activating services in a communication system. The service provisioning platform may include a service activator that is independent of a service to be activated. In addition, the service provisioning platform may include service processing systems that may simultaneously collect the information that is needed for provisioning\/activating a service.","A \u201cservice,\u201d as used herein, may refer to a data network-related service, a telephone-related service, and\/or another type of service. A service may be visible to and directly usable by the customer (sometimes called a Customer Facing Service) or invisible to and\/or not directly usable by the customer (sometimes called a Resource Facing Service). A particular service order may cause one or more Customer Facing Services to be activated and\/or one or more Resource Facing Services to be used in order to activate the one or more Customer Facing Services. As a simple example, assume that the customer orders a Virtual Private Network (VPN) service. In addition, assume that the VPN service specification requires the use of a particular routing protocol. Thus, the service order for the VPN may cause activation of the VPN service and the required routing protocol service. In this example, the VPN service may be considered a Customer Facing Service and the routing protocol service may be considered a Resource Facing Service.",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1","b":["100","100","110","120","130"]},"Client device  may include a device, such as a personal computer, a mainframe computer, a server, a lap top, a personal digital assistant (PDA), a telephone device, such as a wired or wireless telephone, etc. In one embodiment, client device  may correspond, for example, to a self-service portal, via which a customer may order a service, a Customer Administration System (CAS), via which a network operator or service provider administrator may order a service for a customer, a Business Support System (BSS), or another type of device or combination of devices. Client device  may connect to network  via any technique, such as wired or wireless connections.","Service provisioning platform  may include one or more devices that activate services in system . For example, service provisioning platform  may receive service orders from client devices  and cause the ordered or requested services, including any dependent services, to be activated. Service provisioning platform  may include one or more centrally located or distributed servers and\/or other types of network devices. Service provisioning platform  may connect to network  via any technique, such as wired or wireless connections.","Network  may include one or more networks of any type, including a Public Land Mobile Network (PLMN), a telephone network (e.g., a Public Switched Telephone Network (PSTN) and\/or a wireless network), a local area network (LAN), a metropolitan area network (MAN), a wide area network (WAN), an Internet Protocol Multimedia Subsystem (IMS) network, a private network, the Internet, an intranet, and\/or another type of network.","Although  shows exemplary devices and networks of system , in other embodiments, system  may include fewer, different, differently arranged, or additional devices and\/or networks than depicted in . Additionally, or alternatively, one or more devices of system  may perform one or more of the tasks described as being performed by one or more other devices of system .",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 2","b":["120","120","210","220","230","240","240","240","250","260","270"]},"Interface  may include one or more devices that act as an external view of service provisioning platform . For example, interface  may act as a specification or contract between the self-service portal, the CAS, and\/or the BSS and service provisioning platform  (or, more particularly, service activator ). Interface  may receive a service order from a client device . In one embodiment, the service order may include information associated with the service instance that belongs to the customer. The service order may also include references to the customer and\/or service instance owner, and references to the service specification. In addition, the service order may include selected customer-specific characteristics\/configurations.","Service catalog  may include one or more databases that store information fragments for services. The databases may be stored locally at service provisioning platform  or stored at one or more, possibly remote, locations in system . In one embodiment, the information fragments may be implemented according to the TeleManagement (TM) Forum Shared Information\/Data Model (SID). The information fragments may include information specifying the characteristics of services, information identifying service dependencies, information identifying SPSs  to be invoked for activating the services, and\/or other information that may be needed for activating services specified in service orders or other services (e.g., other Customer Facing Services and\/or Resource Facing Services) dependent on the services specified in the service orders.","As an example, an information fragment, provided in service catalog , may include a Specification class, a ServiceSpecification class, a CustomerFacingServiceSpec class, a CustomerFacingServiceSpecAtomic class, a CustomerFacingServiceSpecComposite class, a ResourceFacingServiceSpec class, a ResourceFacingServiceSpecAtomic class, a ResourceFacingServiceSpecComposite class, a ServiceSpecCharacteristic class, a ServiceSpecCharacteristicValue class, a ServiceSpecCharRelationship class, a ServiceSpecCharValueRelationship class, a ServiceSpecCharUse class, a RootEntity class, a RootEntityType class, a CharacteristicSpecification class, a CharacteristicValue class, and\/or a CharacteristicSpecValue class.","The Specification class may be an abstract type that contains common characteristics independent of a specification type. Information in the Specification class may not be visible in interface . However, the attributes of the Specification class may be visible via the inheriting types. The ServiceSpecification class may be an abstract type that is specialized for services. The ServiceSpecification may be the information holder for common information independent of type of service specification. Information in the ServiceSpecification class may not be visible in interface .","The CustomerFacingServiceSpec class may be an abstract type that is specialized for customer facing services. Information in the CustomerFacingServiceSpec class may not be visible in interface . However, the attributes of the CustomerFacingServiceSpec may be visible via the inheriting types. The CustomerFacingServiceSpecAtomic class may inherit attributes and associations from the Specification class, the ServiceSpecification class, and the CustomerFacingServiceSpec class. An instance of the CustomerFacingServiceSpecAtomic class may contain common information for a specific service independent of customers. The CustomerFacingServiceSpecAtomic class may also associate possible service characteristics and possible values, defining customer facing service specifications that do not depend on other customer facing service specifications. Information in the CustomerFacingServiceSpecAtomic class may be visible in interface . The CustomerFacingServiceSpecComposite class may be similar to the CustomerFacingServiceSpecAtomic class. However, the CustomerFacingServiceSpecComposite class may contain other CustomerFacingServiceSpecs (e.g., the CustomerFacingServiceSpecComposite class may contain both atomic and composite services).","The ResourceFacingServiceSpec class may be an abstract type that is specialized for resource facing services. Information in the ResourceFacingServiceSpec class may not be visible in interface . However, the attributes of the ResourceFacingServiceSpec may be visible via the inheriting types. The ResourceFacingServiceSpecAtomic class may inherit attributes and associations from the Specification class, the ServiceSpecification class, and the ResourceFacingServiceSpec class. An instance of the ResourceFacingServiceSpecAtomic class may contain common information for a specific service independent of customers. The ResourceFacingServiceSpecAtomic class may also associate possible service characteristics and possible values, defining resource facing service specifications that do not depend on other resource facing service specifications. Information in the ResourceFacingServiceSpecAtomic class may be visible in interface . The ResourceFacingServiceSpecComposite class may be similar to the ResourceFacingServiceSpecAtomic class. However, the ResourceFacingServiceSpecComposite class may contain other ResourceFacingServiceSpecs (e.g., the ResourceFacingServiceSpecComposite class may contain both atomic and composite services).","The ServiceSpecCharacteristic class may store information defining features (such as bandwidth) of the service specification. The ServiceSpecCharacteristicValue class may store information defining a set of attributes, each of which can be assigned to a corresponding set of attributes in a ServiceSpecCharacteristic object. The ServiceSpecCharRelationship class may store information defining relationships among service specification characteristics. The ServiceSpecCharValueRelationship class may store information defining relationships among service specification characteristic values. The ServiceSpecCharUse class may store information defining the use of the service specification characteristics defined in the ServiceSpecCharacteristics class.","The RootEntity class may be an abstract type for information common to the information fragment. Information from the RootEntity class may not be visible in interface . However, the attributes of the RootEntity class may be visible via the inheriting types. The RootEntityType class may be an information holder for the CharacteristicSpecification class (that holds a key for accessing the appropriate SPS ).","The CharacteristicSpecification class may be the specification for a key for accessing the appropriate SPS . For example, the CharacteristicSpecification class may be a specification of a variable (e.g., a name, an identifier, etc.). The CharacteristicSpecValue class may store information identifying a number or text that can be assigned to a characteristic specification of the CharacteristicSpecification class. In one embodiment, the CharacteristicSpecValue class may store a value, for the key stored in the CharacteristicSpecification class, representing the type of SPS  to be activated. For example, the value type may represent a Universal Description Discovery and Integration (UDDI) Uniform Resource Indicator (URI) value type, a Java Naming and Directory Interface (JNDI) URI value type, or an endpoint Uniform Resource Locator (URL) value type. The CharacteristicValue class may store information defining a value for a characteristic defined by the CharacteristicSpecification class. In one embodiment, the CharacteristicValue class may store a value, corresponding to the value type specified in the CharacteristicSpecValue class, that is used to identify a location of the appropriate SPS(s)  to be used for the ordered service.","Service activator  may include one or more devices that process a service order to determine the appropriate SPS(s)  to invoke for activating the service or services needed for the service order. In one embodiment, service activator  may receive a service order, specifying a service to be activated. In response, service activator  may retrieve, using information identifying the service, a service specification for the service from service catalog . The service specification may describe the service, identified in the service order, describe additional services (if any) that will need to be activated for the ordered service, and describe how the ordered service and additional services will be activated. Based on the service specification, service activator  may determine an order in which the services are be activated and identify the particular SPS(s)  to be invoked for activating the services. Service activator  may pass the service order and the service specification to the particular SPS(s) .","SPSs  may include one or more devices that collect information for activating services. In one embodiment, SPSs  may be implemented based on the Business Process Execution Language (BPEL) and\/or Enterprise JavaBeans (EJB). SPSs  may be service specification driven, meaning that each SPS  may collect additional information for activating a service, and may also wait for new information in order to fulfill the provisioning of the service. The collection of additional information may, for example, include information from one or more databases and\/or one or more systems, information from one or more services that were performed either automatically or manually, and\/or other types of information that may be needed to activate the service identified in the service order.","In one embodiment, an SPS  may be responsible for performing the final service provisioning and handling all potential states in which the service may enter. For example, one or more SPS(s)  may be implemented as a service activation state machine, such as the state machine defined in TMF518_SA_A, \u201cPart 2: Service Activation Interface (SAI),\u201d version 1.1, dated May 2008, which includes the following service activation states: a feasibility check state, a designed state, a reserved state, a provisioned inactive state, a provisioned active state, and a terminated state. In the feasibility check state, an SPS  may determine whether a service can be fulfilled and when the service can be activated. In the designed state, an SPS  may create one or more service orders for additional services (e.g., resource facing services needed for activating the service specified in the service order). In the reserved state, an SPS  may reserve a service for activation at a particular date and time, and reserve resources for the service. In the provisioned inactive state, an SPS  may cause a service to become active, but not available to a requesting customer. In the provisioned active state, an SPS  may cause a service to become available for use by a customer. In the terminated state, an SPS  may cause a service to be deactivated and may deallocate other services (e.g., resource facing services) from the service. In some instances, different SPSs  may support different service states. For example, each SPS  may support a different one of the above service activation states.","Adapters  may include one or more devices that may condition information from SPSs  for communication with other systems, such as provisioning gateway , service enablers , data sources from which SPSs  may need to collect data, and\/or other systems. In one embodiment, an adapter  may include a frontend and a backend. The frontend may be responsible for data model transformations, such as performing information type translation, which may include both type translation and name mapping (entity and attribute). For example, if an ordered service needs a specific value translation, the frontend of adapter  may perform this function. In one embodiment, the frontend may be implemented, for example, as Stateless EJB and\/or Extensible Stylesheet Language Transformation (XSLT). The backend may be responsible for technology translations (e.g., translating from a Java format to a Telnet-based communication). In one embodiment, the backend may be implemented, for example, as a Java Platform, Enterprise Edition (J2EE or JEE) Resource Adapter, based on the Java Connector Architecture (JCA).","Provisioning gateway  may include one or more devices that receive data for activating a service from an adapter , determine one or more service enablers (e.g., one or more of service enablers ), and transmit the data to the appropriate service enablers. Service enablers  may include one or more devices that enable services based on data received from provisioning gateway  and\/or adapters . For example, assume that, to enable a service for a customer, a user identifier and password need to be configured on a server. An adaptor  may receive the user identifier and password from an SPS , format the user identifier and password into a format used by the particular service enabler that will enable the user identifier and password, and send that formatted data to the particular service enabler. The particular service enabler may receive the formatted data and configure the server with the user identifier and password.","Although  shows exemplary components of service provisioning platform , in other embodiments, service provisioning platform  may include fewer, different, differently arranged, or additional components than depicted in . In still other embodiments, one or more components of service provisioning platform  may perform the tasks described as being performed by one or more other components of service provisioning platform .",{"@attributes":{"id":"p-0040","num":"0039"},"figref":"FIG. 3","b":["300","210","230","240","250","260","270","300","310","320","330","340","350","360"]},"Bus  may permit communication among the components of entity . Processing unit  may include one or more processors and\/or microprocessors that interpret and execute instructions. In some embodiments, processing unit  may be implemented as or include an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), or the like. Memory  may include a random access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by processing unit , a read only memory (ROM) device and\/or another type of static storage device that stores static information and instructions for the processing unit , a magnetic or optical recording medium and its corresponding drive for storing information and\/or instructions, and\/or other types of memory.","Input device  may include a device that permits an operator to input information to entity , such as a keyboard, a keypad, a mouse, a pen, a microphone, one or more biometric mechanisms, and the like. Output device  may include a device that outputs information to the operator, including a display, a printer, a speaker, etc.","Communication interface  may include any transceiver-like mechanism that enables entity  to communicate with other devices and\/or systems. For example, communication interface  may include mechanisms for communicating with another device or system via a network, such as network .","As will be described in detail below, entity  may perform certain operations relating to provisioning a service. Entity  may perform these and other operations in response to processing unit  executing software instructions contained in a computer-readable medium, such as memory . A computer-readable medium may be defined as one or more physical and\/or logical memory devices. A logical memory device may include a space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into memory  from another computer-readable medium or from another device via communication interface . The software instructions contained in memory  may cause processing unit  to perform processes that will be described later. Alternatively, hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus, systems and methods described herein are not limited to any specific combination of hardware circuitry and software.","Although  shows exemplary components of entity , in other embodiments, entity  may include fewer, different, differently arranged, or additional components than depicted in . In some embodiments, one or more components of entity  may perform the tasks described as being performed by one or more other components of entity .",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 4","FIG. 4","FIG. 3"],"b":["230","230","410","420","430","440","410","420","430","440"]},"Activator scheduler  may include one or more components that receive and process service orders. For example, in one embodiment, activator scheduler  may receive a service order that identifies a service. Activator scheduler  may, using information identifying the service, retrieve a service specification for the service from service catalog . As indicated above, the service specification may describe the identified service (e.g., characteristics of the service, values of the characteristics, etc.), describe additional services (if any) that will need to be activated for the ordered service, and describe how the ordered service and additional services will be activated. Based on the service specification, activator scheduler  may determine an order in which the services are be activated. Activator scheduler  may pass the service order and the service specification to access point resolver .","Access point resolver  may include one or more components that receive the service order and the service specification, from activator scheduler , and process the received information to determine the SPS naming service lookup client(s) to use for identifying the appropriate SPS(s)  to invoke for activating the service and any other services (e.g., resource facing services) needed for activating the service. In one embodiment, access point resolver  may identify the SPS clients to use in the order in which the services are to be activated, as determined by activator scheduler . For example, assume that a service order specifies a customer facing service, that the service specification for the customer facing service indicates that a resource facing service is needed to activate the customer facing service, and that activator scheduler  determines that the resource facing service is to be used before the customer facing service is activated. In this example, access point resolver  may determine an SPS client for the resource facing service before determining an SPS client for the customer facing service. Alternatively, access point resolver  may determine the SPS clients for the resource facing service and the customer facing service substantially simultaneously.","Access point resolver  may determine the appropriate SPS client to use for a service based on information in the service specification. For example, in one embodiment, access point resolver  may determine the appropriate SPS client based on value type in the CharacteristicSpecValue class of the service specification, retrieved from service catalog .","The SPS clients may include one or more components that identify the appropriate SPS(s)  to invoke for services and may forward the service order and the service specification to the identified SPS(s) . In one embodiment, the SPS clients may include EJB client  and WS client . EJB client  may include one or more components that perform a lookup in a JNDI database . For example, EJB client  may receive a JNDI name (e.g., specified in the CharacteristicValue associated with the CharacteristicSpecValue class of the service specification) and use this JNDI name to perform a lookup in JNDI database  to find location information (e.g., an object reference (address)) for the appropriate SPS  to be invoked for the service. WS client  may include one or more components that perform a lookup in a UDDI database . For example, WS client  may receive a UDDI URI (e.g., specified in the CharacteristicValue associated with the CharacteristicSpecValue class of the service specification) and use this UDDI URI to perform a lookup in UDDI database  to find location information (e.g., an endpoint URL) for the appropriate SPS  to be invoked for the service. In some situations, the CharacteristicValue associated with the CharacteristicSpecValue class of the service specification may store an endpoint URL. In this situation, no database lookup may be needed. Instead, access point resolver  may use WS client  to transmit information for activating the appropriate service to the appropriate SPS  associated with the endpoint URL point. In some embodiments, EJB client  and WS client  may operate in parallel.","The functional components illustrated in  are exemplary. In practice, service activator  may include fewer, different, differently arranged, or additional functional components than illustrated in . In some embodiments, one or more functional components of service activator  may perform one or more of the tasks described as being performed by one or more other functional components of service activator .",{"@attributes":{"id":"p-0052","num":"0051"},"figref":"FIG. 5","b":["500","500","230","500","230","120"]},"As illustrated in , process  may include receiving a service order (block ). Service activator  (e.g., activator scheduler ) may receive a service order from, for example, a self-service portal, a CAS or other BSS, etc. The service order may identify, among other things, a customer facing service that is to be activated.","Process  may further include obtaining a service specification applicable to the service identified in the service order (block ). For example, service activator  (e.g., activator scheduler ) may use information identifying the customer facing service identified in the service order to obtain a service specification for the service from service catalog . As indicated above, the service specification may define characteristics and values for the customer facing service and may identify other services (e.g., one or more other customer facing services and\/or one or more resource facing services) that are needed for activating the customer facing service identified in the service order. In addition, the service specification may define how the service and other services are to be activated.","Process  may additionally include identifying service(s) to be activated based on the service specification (block ). For example, service activator  (e.g., activator scheduler ) may use information from the service specification to identify other services (e.g., one or more other customer facing services and\/or one or more resource facing services) that are needed for activating the customer facing service identified in the service order. Service activator  (e.g., activator scheduler ) may identify resource facing services (if any) that are needed for activating the customer facing service identified in the service order from, for example, the ResourceFacingServiceSpecComposite class of the service specification. Service activator  (e.g., activator scheduler ) may identify other customer facing services (if any) that are needed for activating the customer facing service identified in the service order from, for example, the CustomerFacingServiceSpecComposite class of the service specification. For explanatory purposes, assume that the service specification indicates that a resource facing service is needed for activating the customer facing service.","Process  may include identifying an order in which service(s) are to be activated based on the service specification (block ). For example, service activator  (e.g., activator scheduler ) may use information from the service specification to identify the order in which the customer facing service, identified in the service order, and other services are to be activated. Service activator  (e.g., activator scheduler ) may identify the order based, for example, on the dependency information specified in the ResourceFacingServiceSpecComposite class of the service specification. For explanatory purposes, assume that the service specification specifies that the resource facing service is to be activated before the customer facing service.","Process  may further include identifying an SPS naming service lookup to perform for the identified service(s) based on the service specification (block ). For example, service activator  (e.g., access point resolver ) may use information from the service specification to identify the type of lookup to perform for the service(s). Service activator  (e.g., access point resolver ) may identify the type of lookup to perform for each service based, for example, on information specified in the value type in the CharacteristicSpecValue class of the service specification. For explanatory purposes, assume that the service specification indicates that the resource facing service requires a JNDI lookup and that the customer facing service requires a UDDI lookup.","Process  may still further include performing an SPS naming service lookup, based on the service specification, to determine location(s) of SPS(s)  to be invoked for the service(s) (block ). For example, service activator  (e.g., access point resolver ) may cause EJB client  to lookup a location of an SPS  (e.g., in JNDI database ) to be invoked for the resource facing service. In addition, service activator  (e.g., access point resolver ) may cause WS client  to lookup a location of an SPS  (e.g., in UDDI database ) to be invoked for the customer facing service.","Process  may include routing the service order and the service specification to the SPS(s) in the appropriate order (block ). For example, service activator  (e.g., one of EJB client  or WS client ) may transfer the service order and the service specification to the appropriate SPS , based on the determined location of SPS . In the example above, EJB client  may transfer the service order and the service specification to an SPS , based on the location obtained from JNDI database . In addition, at some time instance (e.g., when service activator  receives an indication that the resource facing service has been activated), WS client  may transfer the service order and the service specification to an SPS , based on the location obtained from UDDI database . EJB client  and WS client  may provide the information to the appropriate SPS  in the order determined by service activator . For example, in the example above, EJB client  may transfer the service order and the service specification to SPS  (identified from JNDI database ) before WS  transfers the service order and the service specification to SPS  (identified from UDDI database ). In some embodiments, EJB client  and WS  may transfer the service order and the service specification in another order, such as in parallel.",{"@attributes":{"id":"p-0060","num":"0059"},"figref":"FIG. 6","b":["600","600","240","600","240","120"]},"As illustrated in , process  may include receiving a service order and a service specification from service activator  (block ). For example, SPS  may receive the service order and the service specification from one of EJB client  or WS client . For explanatory purposes, assume that a customer has ordered a broadband data service and that service activator  passes the service order and the service specification (for the broadband data service) to SPS .","Process  may further include collecting additional information needed for activating the service (block ). For example, SPS  may use information from the service order and\/or the service specification to obtain additional information for activating the service. The additional information may include information obtained from one or more databases and\/or systems, information obtained that has been manually collected and provided to SPS , and\/or other information. As an example, assume that, to activate the broadband data service, SPS  is to reserve physical resources in network . In addition, assume that this reservation of physically resources failed due, for example, to the customer living in a residual area that has not been set up to support the broadband data service. As a result, SPS  may generate a new service order. This new service order may include manual services (e.g., a service technician may need to perform one or more manual patches and upgrades at a cabinet that serves the customer's neighborhood). SPS  may be notified once the new service order has been satisfied. SPS  may then attempt, for a second time, to reserve the physical resources that are needed to provide the broadband data service. SPS  may continue generating new service orders for any other required services until the physical resources are able to be reserved.","Further, assume that SPS  is to add the customer's information (e.g., an identifier and password) to the servers that provide the broadband data service. In addition, assume that the password was previously generated as part of processing the service order for the broadband data service. Thus, SPS  may collect the generated password from the system that generated the password.","Process  may additionally include forwarding the collected information and\/or information relating to the service order, via adapters, to service enabler(s) to activate the requested service (block ). For example, SPS  may forward the collected information, information relating to the service order (e.g., data and\/or parameters), and\/or information related to the service specification to a service enabler , via an adapter  and\/or provisioning gateway . As an example, assume that the generated password is received in a Web Service message and that the service enabler, to which the generated password is to be passed, has a REpresentational State Transfer (REST) interface. Adapter  may transform the web service message to a REST-based message, and transmit the transformed REST-based message to the service enabler. In this way, SPS  may, in the process of activating a service, invoke (e.g., via adaptors ) several different service enablers , other systems, and possibly human interactions.","Systems and\/or methods described herein provide a service provisioning platform that uses service-specific activation processes, which results in a single generic, concrete, and stable interface. The service provisioning platform provides support for activation\/provisioning of any type of service. The service provisioning platform also provides support for multiple service activation state machines and activation processes at the same time. For example, multiple services may be simultaneously activated on service enablers. In addition, due to the concrete and predefined service types defined in the service provisioning platform, external clients, such as order systems\/processes, do not need to be changed when new services are introduced.","The foregoing description of embodiments provides illustration and description, but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example, while series of blocks have been described with regard to , the order of the blocks may be modified in other embodiments. Further, non-dependent blocks may be performed in parallel.","It should be emphasized that the term \u201ccomprises\/comprising\u201d when used in this specification is taken to specify the presence of stated features, integers, steps or components but does not preclude the presence or addition of one or more other features, integers, steps, components or groups thereof.","It will be apparent that exemplary aspects, as described above, may be implemented in many different forms of software, firmware, and hardware in the embodiments illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus, the operation and behavior of the aspects were described without reference to the specific software code\u2014it being understood that software and control hardware could be designed to implement the aspects based on the description herein.","Even though particular combinations of features are recited in the claims and\/or disclosed in the specification, these combinations are not intended to limit the invention. In fact, many of these features may be combined in ways not specifically recited in the claims and\/or disclosed in the specification.","No element, block, or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also, as used herein, the article \u201ca\u201d is intended to include one or more items. Where only one item is intended, the term \u201cone\u201d or similar language is used. Further, the phrase \u201cbased on\u201d is intended to mean \u201cbased, at least in part, on\u201d unless explicitly stated otherwise."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 3","FIG. 2"]},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 4","FIG. 2"]},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIGS. 5 and 6"}]},"DETDESC":[{},{}]}
