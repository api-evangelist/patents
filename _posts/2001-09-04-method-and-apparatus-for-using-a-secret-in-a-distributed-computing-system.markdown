---
title: Method and apparatus for using a secret in a distributed computing system
abstract: There are many times when a secret needs to be used in a distributed computing system—these are often held in security tokens, such as smart cards. It may be desirable for another device, such as a computer platform, to act in place of the security token as the repository of a secret, particularly for operations within a distributed computing system. Within the distributed computing system there is located a trusted entity, physically and logically resistant to unauthorized modification—this may be a trusted device located within a specific computing platform. This contains validation information which can be communicated to the security token. The security token then carries out a validation process on this validation information—if successful, the security token then provides a secret to the trusted device for use within the distributed computing system. The trusted device may be required to use this secret only for a specified period of time, or for a specific purpose or task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07779267&OS=07779267&RS=07779267
owner: Hewlett-Packard Development Company, L.P.
number: 07779267
owner_city: Houston
owner_country: US
publication_date: 20010904
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["CROSS REFERENCE TO RELATED APPLICATIONS","SUMMARY OF THE INVENTION","SPECIFIC EMBODIMENTS OF THE INVENTION"],"p":["The subject matter of the present application may also be related to the following U.S. patent applications: \u201cSmartcard User Interface for Trusted Computing Platform,\u201d Ser. No. 09\/936,131, filed Sep. 4, 2001; and \u201cComputing Apparatus and Methods Using Secure Authentication Arrangements,\u201d Ser. No. 09\/936,132, filed Sep. 4, 2001.","1. Field of the Invention","The invention relates to the use of secrets in distributed computing systems. It has particular relevance to use of security tokens, for example smart cards, within distributed computing systems, and in particular to methods and apparatus for effective use of secrets retained within or provided by such security tokens.","2. Background Art","Security tokens, particularly smart cards, have been proposed as a particularly effective way of representing a particular user on a distributed electronic network. A security token may be considered to be a device containing an identity or a credential of a user, the security token being capable of physical control by the user\u2014advantageously, it will be a portable device (such as a smart card). Use of such a smart card simply to identify a user is well known and relatively straightforward (British Patent Application No. 2317038 is one of many examples of such a system).","Use of such smart cards may not only assure entities of the distributed electronic network that an alleged user is who he or she says he is, but also may assure the user that hardware and services are performing as intended or as advertised. Use of a user smart card can be effectively combined with use of a trusted device wit a computing platform. A trusted device, designed to be both physically and logically protected against unauthorized modification, can be used to obtain all integrity metric of a computing platform and thereby confirm to a user that the computing platform is operating as intended (this process is discussed in the applicant's International Patent Application Publication No. WO 00\/48063). Use of such a trusted device is at the heart of the Trusted Computing Platform Alliance (www.trustedpc.org) proposals for trusted computing interaction of a trusted device with multiple user smartcards is discussed in the aplicant's International Patent Application Publication No. WO 00\/54125, and obtaining permission from a user smartcard for platform operations is discussed in the apphcait's International Patent Application Publication No. WO 00\/54126.","The arrangements shown in WO 00\/54125 and WO 00\/54126 do indicate how user smart cards can be used for more complex process steps than simple user identification or authentication. There are, however, processes in which use of a user smart card and a rusted device within a distributed computing system can prove relatively inefficient. One example is that of a transaction with a remote server\u2014this may require multiple communications with a smart card in a single transaction, which can be slow, either because of the additional number of \u201clegs\u201d of communication required or because (as will usually be the case) the smart card processor is significantly slower than the device processor. Another example is that of a transaction or other process involving multiple smart cards\u2014WO 00\/54125 does indicate one way in which this may be achieved (by specifying that the user smart card may be removed for some length of time to be replaced by a specified auxiliary smart card), but this process may in some circumstances be time-consuming and inefficient.","In a first aspect, the invention provides a computing system comprising a token reader, a trusted device which is physically and logically protected from unauthorized modification, the trusted device having therein a device memory and a device interface adapted for communication with the token reader, and a security token having therein a token processor and a token memory, wherein validation information is stored in the device memory and a secret is stored in the token memory, and whereby on provision of validation information from the device memory to the token memory, and satisfactory completion of a validation process by the token processor, the security token is adapted to provide the secret to the device memory.","By providing the or a secret to the trusted device in this way, various processes (such as transactions involving a remote server, or processes involving multiple smart cards) can be achieved much more effectively. Preferably, the trusted device acts as a proxy for the security token (typically a smart card). The trusted device may be required to use the secret only for a specific time, or a specific task or purpose\u2014this may even be built into the secret provided to the trusted device (for example, if the security token has a private key and is adapted to generate a session key pair, the secret provided to the trusted device may be a session key pair signed with the private key, the security token also generating a certificate indicating the time or purpose for which the session key pair is valid).","It is particularly appropriate for the trusted device to be of the type described by the Trusted Computing Platform Alliance in the TCPA specification obtainable from www.trustedpc.org. Such a trusted device is typically located within a computing platform and is adapted to determine a integrity metric of that computing platform. The trusted device will generally have an identity that advantageously forms all or part of the validation information. The integrity metric may also form part, or even all, of the validation information. Mutual authentication between the trusted device and the security token may be required.","In a second aspect, the invention comprises a method of using in a distributed computing system a secret stored on a security token, the method comprising: the security token obtaining validation information from a trusted entity within the distributed computing system, the dusted entity being logically and physically protected from unauthorized modification; the security token executing a validation process on the validation information, wherein if said validation process is successful; the security token provides the secret to the trusted entity for use within the distributed computing system.","The trusted entity may be a trusted device as indicated above. However, a trusted entity may also be a rusted process\u2014typically this process will be logically protected from other processes mining on the same or related hardware, but the hardware in which the process runs will itself be physically protected from unauthorized modification.","In a third aspect, the invention comprises a computing apparatus acted for temporary use of a received secret, comprising: a computing environment comprising a main processor and a main memory, a trusted entity physically and logically protected from unauthorized modification, the trusted device being adapted to determine an integrity metric of the computing environment; and a token reader in communication with the trusted entity, wherein the trusted entity is adapted to communicate with a security token trough the token reader, to provide the integrity metric to the security token, to receive a secret from the security token, and to use the secret as prescribed by the security token.","In a fourth aspect, the invention provides a computing system comprising: a first trusted entity which is physically and logically protected from unauthorized modification; a second trusted entity which is physically and logically protected from unauthorized modification; a communications channel between the first dusted entity and the second trusted entity; wherein validation information is held by the fiat trusted entity and a secret is held by the second trusted entity, and whereby on provision of validation information from the first trusted entity to the second trusted entity, and satisfactory completion of a validation process by the second trusted entity, the second trusted entity is adapted to provide the secret to the first trusted entity.","The first trusted entity (which may be a trusted device or a trusted process) can thereby act as a proxy for a second trusted entity (which may again be a trusted device or a trusted process). The first trusted entity may be, for example, a trusted device or process in a trusted server, and the second trusted entity the trusted device or process in a trusted user platform.","In a fifth aspect, the invention provides a method of using a secret in a distributed computing system, the method comprising a first trusted entity wit the distributed computing system providing validation information to a second trusted entity within the distributed computing system, each said trusted entity being logically and physically protected from unauthorized modification; the second trusted entity executing a validation process on the validation information, wherein if said validation process is successful; the second trusted entity provides the secret to the first trusted entity for use within the distributed computing system).","Preferred embodiments of the invention employ a trusted device of the general type described in the applicant's International Patent Application Publication No. WO 00\/48063, the contents of which are incorporated by reference herein. The nature of a trusted platform incorporating such a tusked device and its operation are described below.","A \u201ctrusted platform\u201d will now be described. This is achieved by the incorporation into a computing platform of a physical trusted device (the trusted device) whose function is to bind the identity of the platform to reliably measured data that provides an integrity metric of the platform. The identity and the integrity metric are compared with expected values provided by a tasted party (TP) that is prepared to vouch for the trustworthiness of the platform. If there is a match, the implication is that at least part of the platform is operating correctly, depending on the scope of the integrity metric.","A user verifies the correct operation of the platform before exchanging other data with the platform. A user does this by requesting the trusted device to provide its identity and an integrity metric. (Optionally the trusted device will refuse to provide evidence of identity if it itself was unable to verity correct operation of the platform.) The user receives the proof of identity and the identity metric, and compares them against values which it believes to be true. Those proper values are provided by the TP or another entity that is tusked by the user. If data reported by the trusted device is the same as that provided by the TP, the user trusts the platform. This is because the user trusts the entity. The entity trusts the platform because it has previously validated the identity and determined the proper integrity metric of the platform.","Once a user has established trusted operation of the platform, he exchanges other data with the platform. For a local user, the exchange might be by interacting with some software application rung on the platform. For a remote user, the exchange might involve a secure transaction. In either case, the data exchanged is \u2018signed\u2019 by the tusked device. The user can then have greater confidence that data is being exchanged with a platform whose behaviour can be trusted.","The trusted device uses cryptographic processes but does not necessarily provide an external interface to those cryptographic processes. Also, a most desirable implementation would be to make the trusted device tamperproof, to protect secrets by making them inaccessible to other platform functions and provide an environment that is substantially immune to unauthorized modification. Since tamper-proofing is impossible, the best approximation is a trusted device that is tamper-resistant, or taper-detecting. The trusted device, therefore, preferably consists of one physical component that is tamper-resistant.","Techniques relevant to tamper-resistance are well known to those skilled in the art of security. These techniques include methods for resisting tampering (such as appropriate encapsulation of the tusked device), methods for detecting tampering (such as detection of out of specification voltages, X-rays, or loss of physical integrity in the trusted device casing), and methods for eliminating data when tampering is detected. Further discussion if appropriate techniques can be found in \u201cTamper Resistance\u2014a Cautionary Note\u201d, by Ross Anderson and Markus Kuhn, published in the Second USENIX Workshop on Electronic Commerce Proceedings, Oakland, Calif., November 1996, pp 1-11, ISBN 1-880446-83-9. It will be appreciated that, although tamper-proofing is a most desirable feature of the trusted device, it is beyond the scope of the present invention and will not be described in any detail herein.","The trusted device is preferably a physical one because it must be difficult to forge. It is most preferably tamper-resistant because it must be hard to counterfeit. It typically has an engine capable of using cryptographic processes because it is required to prove identity, both locally and at a distance, and it contains at least one method of measuring some integrity metric of the platform with which it is associated.","In alternative arrangements, the trusted entity may not be a physical trusted device  at all. Instead, it may be a tusked process protected from a surrounding computing environment (for example a Java sandbox in which a Java Virtual Machine operates) \u2014such an arrangement may be termed a compartment, Java Virtual Machines and the handling of security within Java are described at the Sun Microsystems Java web site (http:\/\/java.sun.com, particularly http:\/\/java.sun.com\/security). To implement sandboxes, a Java platform relies on three major components: the class loader, the byte-code verifier, and the security manager. Each component plays a key role in maintaining the integrity of the system. Together, these components ensure that: only the correct classes are loaded; the classes are in the correct format; untrusted classes will not execute dangerous instructions; and untrusted classes are not allowed to access protected system resources. Each component is described further in, for example, the white paper entitled \u201cSecure Computing with Java\u2122. Now and the Future\u201d or in the Java Development Kit 1.1.X (both obtainable from Sun Microsystems, for example at http:\/\/java.sun.com). An example of the use of Java Virtual Machines in a compartmental environment is provided by HP Praesidium VirtualVault (basic details of HP Praesidium VirtualVault are described at http:\/\/www.hp.com\/securtiy\/products\/virtualvault\/papers\/brief4.0\/). In such an arrangement, it is preferable for the relevant computing environment as a whole to be protected against physical modification (for example, by being provided in a tamper-resistant physical shell).","A trusted platform  is illustrated in the diagram in . The platform  includes the standard features of a keyboard , mouse  and visual display unit (VDU) , which provide the physical \u2018user interface\u2019 of the platform. This embodiment of a trusted platform also contains a smart card reader \u2014a smart card reader is not an essential element of all trusted platforms, but is employed in embodiments of the present invention (an alternative form of token reader could be used for an alternative form of security token, such as an RP tag). Alongside the smart card reader , there is illustrated a smart card  to allow trusted user interaction with the trusted platform as shall be described further below. In the platform , there are a plurality of modules : these are other functional elements of the trusted platform of essentially any kind appropriate to that platform (the functional significance of such elements is not relevant to the present invention and will not be discussed further herein).","As illustrated in , the motherboard  of the trusted computing platform  includes (among other standard components) a main processor , main memory , a trusted device , a data bus  and respective control lines  and lines , BIOS memory  containing the BIOS program for the platform  and an Input\/Output (IO) device , which controls interaction between the components of the motherboard and the smart card reader , the keyboard , the mouse  and the VDU . The main memory  is typically random access memory (RAM). In operation, the platform  loads the opera system, for example Windows NT\u2122, into RAM from bard disk (not shown). Additionally, in operation, the platform  loads the processes or applications that may be executed by the platform  into RAM from hard disk (not shown).","Typically, in a personal computer the BIOS program is located in a special reserved memory area, the upper 64K of the first megabyte do the system memory (address F\u00d8\u00d8\u00d8h to FFFFh), and the main processor is arranged to look at this memory location first, in accordance with an industry wide standard.","The significant difference between the platform and a conventional platform is that, after reset, the main processor is initially controlled by the trusted device, which then hands control over to the platform-specific BIOS program, which in turn initialises all input\/output devices as normal. After the BIOS program has executed, control is handed over as normal by the BIOS program to an operating system program, such as Windows NT (\u2122), which is typically loaded into main memory  from a hard disk drive (not shown).","Clearly, this change from the normal procedure requires a modification to the implementation of the industry standard, whereby the main processor  is directed to address the trusted device  to receive its first instructions. This change may be made simply by hard-coding a different address into the main processor . Alternatively, the trusted device  may be assigned the standard BIOS program address, in which case there is no need to modify the main processor configuration.","It is highly desirable for the BIOS boot block to be contained within the trusted device . This prevents subversion of the obtaining of the integrity metric (which could otherwise occur if rogue software processes are present) and prevents rogue software processes creating a situation in which the BIOS (even if correct) fails to build the proper environment for the operating system.","Although, in the preferred embodiment to be described, the rusted device  is a single, discrete component, it is envisaged that the functions of the trusted device  may alternatively be split into multiple devices on the motherboard, or even integrated into one or more of the existing standard devices of the platform. For example, it is feasible to integrate one or more of the functions of the trusted device into the main processor itself, provided that the functions and their communications cannot be subverted. This, however, would probably require separate leads on the processor for sole use by the trusted functions. Additionally or alternatively, although in the present embodiment the trusted device is a hardware device that is adapted for integration into the motherboard , it is anticipated that a trusted device may be implemented as a \u2018removable\u2019 device, such as a dongle, which could be attached to a platform when required. Whether the trusted device is integrated or removable is a mater of design choice. However, where the trusted device is separable, a mechanism for providing a logical binding between the trusted device and the platform should be preset.","The tasted device  comprises a number of blocks, as illustrated in . After system reset, the trusted device  performs a secure boot process to ensure that the operating system of the platform  (including the system clock and the display on the monitor) is running properly and in a secure manner. During the secure boot process, the trusted device  acquires an integrity medic of the computing platform . The trusted device  can also perform secure data transfer arid, for example, authentication between it and a smart card via encryption\/decryption and signature\/verification. The trusted device  can also securely enforce various security control policies, such as locking of the user interface.","Specifically, the trusted device comprises: a controller  programmed to control the overall operation of the trusted device , and interact with the other functions on the trusted device  and with the other devices on the motherboard ; a measurement function  for acquiring the integrity metric from the platform ; a cryptographic function  for signing, encrypting or decrypting specified data; an authentication function  for authenticating a smart card; and interface circuitry  having appropriate ports (,  & ) for connecting the trusted device  respectively to the data bus , control lines  and address lines  of the motherboard . Each of the blocks in the trusted device  has access (typically via the controller ) to appropriate volatile memory areas  and\/or non-volatile memory areas  of the trusted device . Additionally, the trusted device  is designed in a known manner, to be tamper resistant.","For reasons of performance, the trusted device  may be implemented as an application specific integrated circuit (ASIC). However, for flexibility, the trusted device  is preferably an appropriately programmed micro-controller. Both ASICs and micro-controllers are well known in the art of microelectronics and will not be considered herein in any further detail.","One item of data stored in the non-volatile memory  of the trusted device  is a certificate . The certificate  contains at least a public key  of the trusted device  and an authenticated value  of the platform integrity metric measured by a rusted part (TP). The certificate  is signed by the TP using the TP's private key prior to it being stored in the trusted device . In later communications sessions, a user of the platform  can verify the integrity of the platform  by comparing the acquired integrity metric with the authentic integrity metric . If there is a match, the user can be confident that the platform  has not been subverted. Knowledge of the TP's generally-available public key enables simple verification of the certificate . The non-volatile memory  also contains an identity (ID) label . The ID label  is a conventional ID label, for example a serial number, that is unique within some context. The ID label  is generally used for indexing and labelling of data relevant to the trusted device , but is insufficient in itself to prove the identity of the platform  under trusted conditions.","The trusted device  is equipped with at least one method of reliably measuring or acquiring the integrity metric of the computing platform  with which it is associated. In the present embodiment, the integrity metric is acquired by the measurement function  by generating a digest of the BIOS instructions in the BIOS memory. Such an acquired integrity metric, if verified as described above, gives a potential user of the platform  a high level of confidence that the platform  has not been subverted at a hardware, or BIOS program level. Other known processes, for example virus checkers, will typically be in place to check that the operating system and application program code has not been subverted.","The measurement function  has access to: non-volatile memory  for storing a hash program  and a private key  of the tested device , and volatile memory  for storing acquired integrity metric in the form of a digest . In appropriate embodiments, the volatile memory  may also be used to store the public keys and associated ID labels -of one or more authentic smart cards that can be used to gain access to the platform .","The process of measurement of an integrity metric is not central to the present invention and is not her discussed here\u2014reference should be made to WO 00\/48063. There are a number of different ways in which the integrity metric may be calculated, depending upon the scope of the trust required. The integrity metric should be of such a form that it will enable reasoning about the validity of the boot process\u2014the value of the integrity metric can be used to verify whether the platform booted using the correct BIOS. Other integrity checks could involve establishing that various other devices, components or apparatus attached to the platform are present and in correct working order. In one example, the BIOS programs associated with a SCSI controller could be verified to ensure communications with peripheral equipment could be trusted. In another example, the integrity of other devices, for example memory devices or co-processors, on the platform could be verified by enacting fixed challenge\/response interactions to ensure consistent results. The integrity metric may be calculated by the trusted device  itself, or in alternative arrangements calculated by the main processor of the trusted platform.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":["FIG. 4","FIG. 4"],"b":"24"},"At the first instance, a TP, which vouches for trusted platforms, will inspect the type of the platform to decide whether to vouch for it or not. This will be a matter of policy. If all is well, in step , the TP measures the value of integrity metric of the platform. Then, the TP generates a certificate, in step , for the platform. The certificate is generated by the TP by appending the trusted devce's public key, and optionally its ID label, to the measured integrity metric, and signing the string with the TP's private key.","The trusted device  can subsequently prove its identity by using its private key to process some input data received from the user and produce output data, such that the input\/output pair is statistically impossible to produce without knowledge of the private key. Hence, knowledge of the private key forms the basis of identity in is case. Clearly, it would be feasible to use symmetric encryption to form the basis of identity. However, the disadvantage of using symmetric encryption is that the user would need to share his secret with the trusted device. Further, as a result of the need to share the secret with the user, while symmetric encryption would in principle be sufficient to prove identity to the user, it would insufficient to prove identity to a third party, who could not be entirely sure the verification originated from the basted device or the user.","In step , the trusted device  is initialised by writing the certificate  into the appropriate nonvolatile memory locations  of the trusted device . This is done, preferably, by secure communication with the trusted device  after it is installed in the motherboard . The method of writing the certificate to the trusted device  is analogous to the method used to initialise smart cards by writing private keys thereto. The secure communications is supported by a \u2018master key\u2019, known only to the TP, that is written to the rusted device (or smart card) during manufacture, and used to enable the writing of data to the trusted device ; writing of data to the trusted device  without knowledge of the master key is not possible.","At some later point during operation of the platform for example when it is switched on or reset, in step , the rusted device  acquires and stores the integrity metric  of the platform.","When a user wishes to communicate with the platform, in step , he creates a nonce, such as a random number, and, in step , challenges the trusted device  (the operating system of the platform, or an appropriate software application, is arranged to recognise the challenge and pass it to the trusted device , typically via a BIOS-type call, in an appropriate fashion). The nonce is used to protect the user from deception caused by replay of old but genuine signatures (called a \u2018replay attack\u2019) by untrustworthy platforms. The process of providing a nonce and verifying the response is an example of the well-known \u2018challenge\/response\u2019 process.","In step , the trusted device  receives the challenge and creates an appropriate response. This may be a digest of the measured integrity metric and the nonce, and optionally its ID label. Then, in step , the trusted device  signs the digest, using its private key, and returns the signed digest, accompanied by the certificate , to the user.","In step , the user receives the challenge response and verifies the certificate using the well known public key of the TP. The user then, in step , extracts the trusted device's  public key from the certificate and uses it to decrypt the signed digest from the challenge response. Then, in step , the user verifies the nonce inside the challenge response. Next, in step , the user compares the computed integrity metric, which it extracts from the challenge response, with the proper platform integrity metric, which it extracts from the certificate. If any of the foregoing verification steps fails, in a steps , ,  or , the whole process ends in step  with no further communications tang place.","Assuming all is well, in steps  and , the user and the trusted platform use other protocols to set up secure communications for other data, where the data from the platform is preferably signed by the trusted device .","Further refinements of this verification process are possible. It is desirable that the challenger becomes aware, through the challenge, both of the value of the platform integrity metric and also of the method by which it was obtained. Both these pieces of information are desirable to allow the challenger to make a proper decision about the integrity of the platform. The challenger also has many different options available\u2014it may accept that the integrity metric is recognised as valid in the trusted device , or may alternatively only accept that the platform has the relevant level of integrity if the value of the integrity metric is equal to a value held by the challenger (or may hold there to be different levels of trust in these two cases).","The techniques of signing, using certificates, and challenge\/response, and using them to prove identity, are well known to those skilled in the art of security and therefore need not be described in any more detail herein.","A processing part  of a logon smart card  is illustrated in . As shown, the logon smart card  processing part  has the standard features of a processor , memory  and interface contacts . The processor  is programmed for simple challenge\/response operations involving authentication of the logon smart card  and verification of the platform , as will be described below. The memory  contains its private key , its public key , a user profile , the public key  of the TP and an identity . The user profile  lists the allowable auxiliary smartcards  AC-ACn usable by the user, and the individual security policy  for the user. For each auxiliary smart card , the user profile includes respective identification information , the trust structure  between the smart cards (if one exists) and, optionally, the type or make  of the smart card. Use of a user profile (and hence of a security policy  or trust structures ) is not necessary in all embodiment of the invention, but is advantageous where multiple smart cards may be required in a process.","In the user profile , each auxiliary smart card  entry AC-ACn includes associated identification information , which varies in dependence upon the type of card. For example, identification information for a cash card (containing credits which can be debited in a transaction) typically includes a simple serial number, whereas, for a crypto card (with cryptographic functionality and associated with a privilege not transferable to another user), the identification information typically comprises the public key (or certificate) of the crypto card (the private key being stored secretly on the crypto card itself).","The \u2018security policy\u2019  dictates the permissions that the user has on the platform  while using an auxiliary smart card . For example, the user interface may be locked or unlocked while an auxiliary smart card  is in use, depending on the function of the auxiliary smart card . Additionally, or alternatively, certain files or executable programs on the platform  may be made accessible or not, depending on how trusted a particular auxiliary smart card  is. Further, the security policy  may specie a particular mode of operation for the auxiliary smart card , such as \u2018credit receipt\u2019 or \u2018temporary delegation\u2019, as will be described below.","A \u2018trust structure\u2019  defines whether an auxiliary smart card  can itself \u2018introduce\u2019 further auxiliary smart cards  into the system without first re-using the logon smart card . In the embodiments described in detail here, the only defined trust is between the logon smart card  and the auxiliary smart cards  that can be introduced to the platform  by the logon smart card . Introduction may be \u2018single session\u2019 or \u2018multi-session\u2019, as will be descried below. However, there is no reason why certain auxiliary smart cards  could not in practice introduce further auxiliary smart cards . This would require an auxiliary smart card  to have an equivalent of a user profile listing the or each auxiliary smart card that it is able to introduce.","Further types of smart card suitable for use with a rusted device are described in the applicant's International Patent Application Publication No WO 00\/54126, the contents of which are incorporated by reference herein.","A process for mutual authentication between the smart card  of  and the trusted platform  will be described with reference to . As will be described, the process conveniently implements a challenge\/response routine. There exist many available challenge\/response mechanisms. The implementation of an authentication protocol used in the present embodiment is mutual (or -step) authentication, as descried in ISO\/IEC 9798-3. Of course, there is no reason why other authentication procedures coot be used, for example 2-step or 4-step, as also described in ISO\/IEC 9798-3.","Initially, the user inserts their smart card  into the smart card reader  of the platform  in step . Beforehand, the platform  will typically be operating under the control of its standard operating system and executing the authentication process, which waits for a user to insert their smart card . Apart from the smart card reader  being active in this way, the platform  is typically rendered inaccessible to users by \u2018locking\u2019 the user interface (i.e. the screen, keyboard and mouse).","When the smart card  is inserted into the smart card reader , the trusted device  is triggered to attempt mutual authentication in step by generating and transmitting a nonce A to the logon smart card  in step . A nonce, such as a random number, is used to protect the originator from deception caused by replay of old but genuine responses (called a \u2018replay attack\u2019) by untrustworthy third parties.","In response, in step , the smart card  generates and returns a response comprising the concatenation of: the plain text of the nonce A, a new nonce B generated by the logon smart card , the ID  of the trusted device  and some redundancy, the signature of the plain text, generated by signing the plain text with the private key of the smart card ; and a certificate containing the ID and the public key of the smart card .","The trusted device  authenticates the response by using the public key in the certificate to verify the signature of the plain text in step . If the response is not authentic, the process ends in step . If the response is authentic, in step  the trusted device  generates and sends a further response including the concatenation of: the plain text of the nonce A, the nonce B, the ID  of the smart card  and the acquired integrity metric; the signal of the plain text, generated by sighing the plan text using the private key of the trusted device ; and the certificate comprising the public key of the trusted device  and the authentic integrity metric, both signed by the private key of the TP.","The smart card  authenticates this response by using the public key of the TP and comparing the acquired integrity metric with the authentic integrity metric, where a match indicates successful verification, in step . If the further response is not authentic, the process ends in step .","If the procedure is successful, both the trusted device  has authenticated the smart card  and the smart card  has verified the integrity of the trusted platform  and, in step , the authentication process executes the secure process for the user. Then, the authentication process sets an interval timer in step . Thereafter, using appropriate operating system interrupt routines, the authentication process services the interval timer periodically to detect when the timer meets or exceeds a predetermined timeout period in step .","Clearly, the authentication process and the interval timer run in parallel with the secure process.","When the timeout period is met or exceeded, the authentication process triggers the trusted device  to re-authenticate the smart card , by transmitting a challenge for the logon smart to identify itself in step . The smart card  returns a certificate including its ID  and its public key  in step . In step , if there is no response (for example, as a result of the smart card  having been removed) or the certificate is no longer valid for some reason (for example, the smart card has been replaced with a different smart card), the session is terminated by the trusted device  in step . Otherwise, in step , the process from step  repeats by resetting the interval timer.","Authentication of the smart card  by the trusted device  is not essential for general application of the present invention (but is advantageously employed in relevant embodiments). Aspects of the present invention do require that a security token such as smart card  validates the trusted device by obtaining validation information (such as the identity of the trusted device , the acquired integrity metric, or both\u2014the last of these three options is assumed below) and conducting a validation process (such as comparing the acquired integrity metric with the authentic integrity metric verified by the TP).","A first embodiment of the present invention will now be described with reference to .  shows execution of a process on trusted computing platform  with a session between trusted device  and smart card  established. This process may be, for example, a secure process such as that shown in step  of .","At some point in the process, it is recognised that efficiency will be gained by transferring a secret in the smart card  to the trusted device . This may be at the beginning of a process in which it is known that multiple uses of the secret will be required, or in which it is known that one or more additional smart cards will be used, or may be later in the process when it has become clear that for these or other reasons, operational effectiveness will be enhanced by transferring the secret. At whatever stage is appropriate, the trusted device  requests (step ) the secret from the smart card \u2014it is also possible that the request emanates from the trusted computing platform  rather than specifically the trusted device . This request may include some description of the purpose for which the secret is required. The smart card  has by this point both authenticated the trusted device  and confirmed that the identity and integrity metric are as expected. The smart card  then determines (step ) which, if any, conditions should be met by the trusted device  in using the secret. The secret is then provided (unless, for example, the purpose for use of the secret is unacceptable to the smart card , or of course if appropriate validation information, such as authentication information for the trusted device  or provision of a valid integrity metric, has not been provided by the trusted device ) to the trusted device  (step ) with any conditions to be met in its use\u2014such use parameters may include a time at which permitted use will expire, specific actions or purposes for which the secret can be used, or a more detailed scheme of use of the secret (for instance, a proposed course of a transaction process). The secret is then used (step ) in accordance with any conditions imposed. Preferably the secret is deleted (step ) after the relevant process has been completed, and confirmation is provided (step ) that this deletion has occurred.","A second embodiment of the present invention is illustrated in . This indicates an alternative manner in which a smart card  may provide a secret to a trusted device . The mechanism is slightly more complex, and requires cryptographic capability (or access to cryptographic capability) in the smart card , but has the advantage that use of the secret can be controlled by the smart card  without reliance on compliance with conditions by the trusted device .","As before, the trusted device  requests (step ) a secret from the smart card . In this arrangement, the secret will typically be a private key of the smart card . As before, the request may include a statement of the proposed use of the secret, and the smart card may determine (step ) what conditions to place on use of the secret by the trusted device . The smart card  now uses its cryptographic capability to generate a session key pair (step ). The smart card also genes (step ) a certificate, signed with its relevant private key, for the session key pair. The certificate indicates that the session key maybe used as a proxy for the relevant smart card private key under the conditions determined in step . The session key pair and the certificate are then provided to the trusted device  (step ). When the smart card private key is first required in the relevant process, the trued device  instead provides the certificate (step ) to the other party involved. The trusted device  then uses the session key (step ) as a proxy secret for the smart card private key throughout the process, with the other party accepting this use if it falls within the parameters indicated by the certificate. In due course, the validity of the session key will expire (step ), either through completion of the relevant task or purpose or through lapse of tie or both, so there is no need for it to be positively deleted. This arrangement relies less on the security provided by the trusted device , and it would be possible to use this approach either with an environment that is less secure than a preferred security level of trusted computing platform , or else with a processing and memory element less secure than trusted device .","In both the  and  arrangements it is desirable that communication between the smart card  and the trusted device  is secure. This can be achieved by using encrypted communication throughout. An alternative would be to use a physically isolated communication path between the two (in which case the smart card reader  would be connected to the trusted device  and not to any other processor or memory within the relevant computing environment). Both approaches could be employed together for greater security.","Where the smart card  is simply interacting with a local trusted computing platform , the arrangement of  may be generally sufficient and the embodiments of  not required. In , arrangements are briefly described in which the embodiments of  may be effectively employed.",{"@attributes":{"id":"p-0083","num":"0082"},"figref":["FIG. 9","FIG. 7","FIG. 8"],"b":["999","10","21","1200","999","1210","19","21","1220","24","19","21","24","19","24","24","1230","24","19","1240","24","24","1250","999","21","999","1210","1250","1260","1270","24","24","24","19","24","24"]},{"@attributes":{"id":"p-0084","num":"0083"},"figref":["FIG. 10","FIG. 10"],"b":["24","19","17","17"]},{"@attributes":{"id":"p-0085","num":"0084"},"figref":["FIG. 10","FIG. 10","FIG. 9","FIG. 7","FIG. 8"],"b":["10","21","19","17","17","999","9","17","19","12","1300","19","24","1310","1320","21","24","1330","1340","1350","19","17","1360","624","625","621","21","24","17","24","24"]},"In the  arrangement, it can be noted that it would be desirable for the trusted device  to be able to proxy multiple secrets at any one time. In different arrangements, it may be desirable for the trusted device to proxy multiple secrets from a single smart cad, multiple secrets from a master smart card and auxiliary smart cards, or even multiple secrets from different security tokens for completely unrelated processes.","As indicated above, the present invention is not limited in application to smart cards (or other security tokens), which interact passively with a platform. The invention is applicable also to smart cards which can initiate a command to a platform (or trusted device on a platform), communicate with the trusted device for exchange of messages and information, send requests for information, and receive results from the trusted device in response to those requests. Implementation of initiation of user commands from a smart card is known in \u201cSmartcards\u2014from Security Tokens to Intelligent Adjuncts\u201d, by Boris Balacheff, Buno Van Wilder and David Chan, published in CARDIS 1998 Proceedings.","Aspects of the present invention may involve one trusted device (or other trusted entity) using the secret of, or acting as a proxy for, a second trusted entity. Essentially the same preferred process steps as indicated above will apply (mutual authentication of the two trusted entities followed by communication of the secret and use parameters from one trusted entity to the other), but the circumstances in which this aspect arc employed are likely to be different. One possibility is for the trusted device of a user trusted platform to be proxied to the trusted device (or a trusted process) operating on a trusted server. Another possibility is for a user to proxy a trusted device from a portable computing platform (such as a PDA, mobile phone or notebook computer) to a fixed platform with, for example, a high bandwidth connection to a transaction server.","Similarly, the interpretation of integrity measurements provided by the trusted device may not be achieved by the user, as represented by a smart card or otherwise. An appropriate solution is for a user smart card to have access (typically trough the platform) to a trusted third party server which provides this functionality. This can be an advantageous solution because of the limited processing power and memory available on most smart cards. In this arrangement, the integrity metrics data is sent not to the at card but to a remote server trusted by the smart card. The remote server verifies that the integrity metrics data provided by the trusted device is correct by comparing it with a set of expected integrity metrics. The expected integrity metrics may be supplied by the trusted device itself from pre-stored data within it, or where the platform is of a common type, the trusted server may store sets of expected integrity metrics for that type of computer platform. In either case, the trusted server performs the heavy computational data processing required for verification of the integrity metrics with the expected integrity metrics, and digitally signs the result of the verification. This is sent back to the smart card, which then may either accept or reject the digital signature, and hence the verification result.","While the invention has been described with reference to several preferred embodiments, it will be appreciated that various modifications can be made to the parts and methods that comprise the invention without departing from the spirit and scope thereof."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["Preferred embodiments of the invention will now be described, by way of example, with reference to the accompanying drawings, of which:",{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
