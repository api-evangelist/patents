---
title: System and method for embedding a streaming media format header within a session description message
abstract: A system and method for embedding a streaming media format header within a session description message. The streaming media format header is encapsulated within a session description message as a header attribute. The streaming media format header describes complex relationships between available media streams. The session description message also includes a list of content description attributes storing metadata about the media streams. A media description field in the session description message stores a stream attribute identifying a media stream associated with the media description field.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451229&OS=07451229&RS=07451229
owner: Microsoft Corporation
number: 07451229
owner_city: Redmond
owner_country: US
publication_date: 20020624
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["NOTICE","TECHNICAL FIELD","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE INVENTION","Appendix A"],"p":["Information in this document, including uniform resource locator and other Internet Web site references, is subject to change without notice. Unless otherwise noted, the example companies, organizations, products, domain names, e-mail addresses, logos, people, places and events depicted herein are fictitious, and no association with any real company, organization, product, domain name, e-mail address, logo, person, place or event is intended or should be inferred.","The present invention relates to the field of streaming media. In particular, this invention relates to a system and method for embedding a streaming media format header within a session description message describing content in a streaming media session.","Content streaming, such as the streaming of audio, video, text, or other media, indicates that data representing the content is provided over a network to a client computer on an as-needed basis rather than being pre-delivered in its entirety before playback. Thus, the client computer renders streaming data as it is received from a network server, rather than waiting for an entire file to be delivered.","The widespread availability of streaming multimedia enables a variety of informational content that was not previously available over the Internet or other computer networks. Live content is one significant example of such content. Using streaming multimedia, audio, video, or audio\/visual coverage of noteworthy events can be broadcast over the Internet as the events unfold. Similarly, television and radio stations can transmit their live content over the Internet. Content streaming can be implemented with one or more protocols.","For example, the Real-time Transport Protocol (RTP), as described in the Internet Engineering Task Force (IETF) RFC 1889, the entire disclosure of which is incorporated herein by reference, provides end-to-end network transport functions suitable for applications transmitting real-time data, such as audio, video or simulation data, over multicast or unicast network services. RTP does not address resource reservation and does not guarantee quality-of-service for real-time services. The data transport is augmented by a control protocol (RTCP) to allow monitoring of the data delivery in a manner scalable to large multicast networks, and to provide minimal control and identification functionality. RTP and RTCP are designed to be independent of the underlying transport and network layers.","In addition, the Real-time Streaming Protocol (RTSP), as described in the IETF RFC 2326, the entire disclosure of which is incorporated herein by reference, is an application-level protocol for control of the delivery of data with real-time properties. RTSP provides an extensible framework to enable controlled, on-demand delivery of real-time data, such as audio and video. Sources of data can include both live data feeds and stored clips. This protocol is intended to control multiple data delivery sessions, provide a means for choosing delivery channels such as user datagram protocol (UDP), multicast UDP and transmission control protocol (TCP), and provide a means for choosing delivery mechanisms based upon RTP.","Further, the Session Description Protocol (SDP), as described in the IETF RFC 2327, the entire disclosure of which is incorporated herein by reference, is an application level protocol intended for describing multimedia sessions for the purposes of session announcement, session invitation, and other forms of multimedia session initiation. SDP can be used in conjunction with RTSP to describe and negotiate properties of the multimedia session used for delivery of real-time data.","A multimedia encoder can capture real-time audio and video data and represent the captured data as multiple streams. For example, audio is typically represented as one stream and video as another. Complex files can have multiple streams, some of which may be mutually exclusive. RTSP specifies a mechanism by which a client can ask a server to deliver one or more of the encoded media streams. RTSP also provides a way for the client to obtain information about the contents of the multimedia presentation via SDP message format prior to delivery of the multimedia. SDP enumerates the available media streams and lists a limited set of auxiliary information (\u201cSDP metadata\u201d) that is associated with the collection of streams.","However, SDP is not able to express complex relationships between streams in part because SDP only defines a limited set of SDP metadata items. In addition, SDP does not have a notion of mutually exclusive streams. For example, SDP lacks support for specifying SDP metadata in multiple languages in a single SDP message. As such, SDP fails to adequately describe content encoded in certain formats.","For example, some multimedia encoders capture real-time audio and video data and save the content as advanced streaming format (ASF) file (also referred to as active streaming format or advanced system format) as disclosed in U.S. Pat. No. 6,041,345. ASF is a file format specification for streaming multimedia files containing text, graphics, sound, video, and animation. An ASF file has objects including a header object containing information about the file, a data object containing the media streams (i.e., the captured audio and video data), and an optional index object that can help support random access to data within the file. The header object of an ASF file stores information as metadata that is needed by a client to decode and render the captured data. The list of streams and their relationships to each other is also stored in the header object of the ASF file. Some of the metadata items may be mutually exclusive because the metadata items describe the same information using different spoken languages. SDP fails to adequately describe content encoded in ASF.","For these reasons, a system and method for embedding a streaming media format header within a session description message describing content in a streaming media session is desired to address one or more of these and other disadvantages.","The invention provides for embedding a streaming media format header within a session description message describing content having a plurality of media streams in a streaming media session. In particular, the invention includes software with data structures for encapsulating and embedding the streaming media format header within the session description message. In addition, the invention software embeds a list of content descriptions attributes storing metadata about the media streams within the session description message. A media description field in the session description message stores a stream attribute identifying a media stream associated with the media description field.","The invention extends the functionality of the session description message by embedding the streaming media format header and a representation of metadata inside the message. With the invention, the client is provided access to the entire header within the message. As a result, if an encoder extends the header with additional information, the new extensions will be conveyed by the server even if the server itself does not understand the header extensions. In addition, new metadata items can be introduced without having to define a new extension to the session description message because the collection of metadata items is treated as a single unit. Further, a simple client or intermediate device (such as a proxy server) that does not understand the header or the metadata will still be able to understand the remainder of the message. That is, the invention is backwards-compatible with devices that do not implement this invention. The invention allows the use of a standards-based protocol such as RTSP without sacrificing any of the functionality supported by the streaming media format.","In accordance with one aspect of the invention, one or more data fields are encoded in a data signal for transmission over a communications channel. The data fields include content encoded in a streaming media format. The streaming media format includes a header. The data fields further include the header encapsulated therein.","In accordance with another aspect of the invention, a method streams content encoded in a streaming media format to at least one client as one or more media streams via a streaming protocol. The streaming media format has a header including one or more stream identifiers. Each of the stream identifiers corresponds to at least one of the media streams. The method includes receiving a description request from the client to describe the content. The method also includes transmitting a description message via a description protocol to the client in response to the received description request. The description message includes the header encapsulated therein. The method also includes receiving at least one of the stream identifiers from the client. The received stream identifiers correspond to the media streams selected by the client for rendering. The method further includes delivering the selected media streams to the client via the streaming protocol in response to the received stream identifiers.","In accordance with yet another aspect of the invention, a method receives content streamed from a server via a streaming protocol as one or more media streams. The content is encoded in a streaming media format having a header with one or more stream identifiers. Each of the stream identifiers corresponds to at least one of the media streams. The method includes transmitting a description request to the server for a description of the content. The method also includes receiving a description message from the server via a description protocol in response to the transmitted description request. The description message includes the header encapsulated therein. The method further includes selecting one or more of the media streams for rendering and transmitting the stream identifiers corresponding to the selected media streams to the server to notify the server of the selected media streams. The method further includes requesting delivery of the selected media streams from the server via the streaming protocol, receiving the delivered, selected media streams, and rendering the media streams.","In accordance with yet another aspect of the invention, one or more computer-readable media store a data structure representing a description message transmitted by a server to at least one client via a description protocol to describe content encoded in a streaming media format as one or more media streams. The streaming media format includes a header. The data structure includes a session description field and one or more media description fields. The session description field stores a header attribute wherein a value for the header attribute represents an encapsulation of the streaming media format header. Each of the media description fields stores information specific to one or more of the media streams.","In accordance with yet another aspect of the invention, a method encapsulates data into a description message. The description message is transmitted by a server to at least one client via a description protocol. The description message describes content encoded in a streaming media format for streaming via a streaming protocol. The method includes generating a serialized representation of the data and converting the serialized representation into a character string.","Alternatively, the invention may comprise various other methods and apparatuses.","Other features will be in part apparent and in part pointed out hereinafter.","Corresponding reference characters indicate corresponding parts throughout the drawings.","The invention includes software and data structures for embedding a streaming media format header within a session description message describing content having a plurality of media streams in a streaming media session. In particular, the invention includes software that encapsulates and embeds the streaming media format header within a session description field of the session description message. Encapsulating the header treats the collection of structured information within the header as a whole without affecting or taking notice of its internal structure. In addition, the invention software embeds a list of content descriptions attributes storing metadata about the media streams within the session description message. A media description field in the session description message stores a stream attribute identifying a media stream associated with the media description field. The data fields of the session description message are encoded within a data signal according to various protocols including, but not limited to, a real-time streaming protocol (RTSP), a session description protocol (SDP), and a real-time transport protocol (RTP) for delivery over a communications channel. The communications channel may be any data communication network such as described with reference to . In one embodiment, transmission of the media streams is controlled by RTSP while the media streams are transmitted using RTP.","The invention is operable in a system that includes an optional encoder , a media server , and a client  as shown in . The media server  is the first server the content flows through on the way to the client . The media server  generally receives content from either a file system  at  or a feed from the encoder  at  (optional). If the media server  receives content from the encoder , the file system  may be bypassed, or the encoded content may be concurrently stored in the file system . In an alternative embodiment (not shown), one or more downstream servers generally receive data from the media server . In complex distribution scenarios involving multiple levels of servers, the downstream servers may receive and forward content from another server that is sourcing content from the media server . Since the data flows from the media server  to the client , a server is considered downstream from previous servers. The last server in a distribution scenario that is downstream from all other servers in the distribution chain is intended to have direct client communications. In the simplified embodiment of , the media server  communicates directly with the client , possibly via a network such as described with reference to .",{"@attributes":{"id":"p-0031","num":"0030"},"figref":["FIG. 1","FIG. 1"]},"At , the client  sends an RTSP DESCRIBE request to the media server . At , the server  responds to the RTSP DESCRIBE request with an SDP message. The SDP message includes the streaming media format file header and the content description list. Clients usually retrieve at least one RTSP uniform resource locator (URL) for streaming content from an SDP record retrieved from the server  by means of a DESCRIBE request. The URL may also be retrieved by other mechanisms, such as from the command line or from a file. An example RTSP URL is rtsp:\/\/MyServer.MyDomain.com\/foo.asf.","The server  challenges the client  when the client  issues a DESCRIBE request and may re-authenticate during any subsequent exchange; the authentication related exchange of information takes place before going further. If the authentication fails, the client  may retry a number of times before abandoning the request. The client  retrieves the various properties of the session such as an identifier uniquely identifying the content (e.g., via a globally unique identifier (GUID) for the SDP record) and all URLs for the session. There may be more than one URL specified in the SDP record if, for example, there is a separate URL for a video stream and one for it s associated audio stream. The client  initiates a connection to the server  using a RTSP SETUP command. The number of SETUP messages sent by the client  depends on the number of stream URL's in the announcement record (one per RTSP stream URL). The client  is also free to choose which streams it wants to SETUP (i.e., receive from the server ). The client  does not have to SETUP all available streams. For example, there may be multiple available video streams encoded at different bit rates (i.e., with different quality) and the client  may choose which one to receive. In addition or in alternative, the client  may not choose any video at all, and SETUP only audio instead. The server  responds to the SETUP request validating the client request. The response contains the various transport level parameters and the session identifier for the session. The session identifier is used by the client  in any subsequent communications regarding this exchange with the server . In subsequent streaming operations the client  will use the transport parameters for this session in order to access server ports for data flows, retransmissions etc.","At , the encoder  streams the streaming media format content in real-time to the server . The media server  may read metadata items at  from the file system . In another embodiment at , the encoder  creates a streaming media format file which is stored on the file system  that is accessible to the media server . The media server  reads the streaming media format file from the file system  at  and may read, in addition, metadata items from a separate file which are used to create and embed the content description list in the session description message.","Encoder Operations","The encoder  creates a streaming media format file that stores real-time media content such as audio and video. For example, the streaming media format may be an advanced streaming format (ASF) such as illustrated in  (also referred to as active streaming format or advanced system format). In , audio and video data are stored as separate media streams in the file in a data field . Each stream is assigned a stream identifier such as a number. In one embodiment of ASF, stream identifiers are integer numbers in the range  to  inclusive. The streaming media format has a header field  listing the stream identifiers and information about each stream. For example, the header field  may include stream # information  through stream #M information . Each stream identifier corresponds to one of the media streams. The header field  stores metadata for each stream, such as the encoded bit rate and the language (if applicable). The ASF file in  also has an optional index field .","The streaming media format file may contain multiple mutually exclusive representations of the same content. For example, the file may contain multiple audio streams, each in a different spoken language or differing in other aspects, or there may be multiple video streams, each encoded using a different bit rate. In addition, the audio streams may be encoded using different bit rates. The encoder  creates a streaming media format file that is stored on a computer-readable medium such as file system , but it is also possible for the encoder  to stream the file in real-time to a streaming media server  without storing the content on the file system .","Server Operations","The streaming media server  reads a streaming media format file from a computer-readable medium, or streams it in real-time from another server or the encoder . Metadata items such as \u201cTitle\u201d and \u201cAuthor\u201d may be associated with the streaming media format file. The metadata can originate from different sources. Some metadata items may be stored in the streaming media format file header (e.g., header field ), while other metadata items are either obtained from a separate file or generated dynamically by the server . The collection of metadata is referred to as a content description list. Each content description in this list contains metadata items for a specific language.","When the server  streams a file to the client , it may override some of the metadata items defined in the streaming media format file header (e.g., header field ) with information dynamically generated or obtained from separate files. This allows the administrator of the server  to deliver modified or updated metadata to the client  without modifying the streaming media format file header. One example of such a separate file that overrides an attribute of the streaming media format file header is the playlist below. This playlist instructs the server  to stream the streaming media format file called \u201cpresentation.wmv\u201d and specifies a metadata attribute called \u201cTitle\u201d that overrides any \u201cTitle\u201d attribute that is found in the header of the file for use with a streaming media player:",{"@attributes":{"id":"p-0039","num":"0038"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"thead":{"row":{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<SMIL>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<media src=\u201cpresentation.wmv\u201d >"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"42pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"175pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<CLIENTDATA Title=\u201cStreaming over RTSP\u201d \/>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"<\/media>"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/SMIL>"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"1","align":"center","rowsep":"1"}}]}]}}]}}},"The flow between the client  and the server  in  is illustrated in greater detail with reference to .","Referring next to , an exemplary flow diagram illustrates the interaction between the client  and the server  to initiate a streaming media session. In the exemplary embodiment of , the server  implements RTSP. RTSP allows the client  to request the delivery of a subset of the streams in the file. The client  sends a description request (e.g., an RTSP DESCRIBE request) to the server  to describe the available content. When the server  receives a RTSP DESCRIBE request, the server  responds by encapsulating the streaming media format header within a description message (e.g., an SDP message) and transmitting the description message via a description protocol (e.g., SDP) to the client . In RTSP (as defined in RFC 2326), the description message is referred to as a presentation description. The header is inserted in the description message in such a way that it is ignored by clients that do not have logic to understand the header (see ). Other information such as the content description list is also included in the session description message (see ). The SDP message lists each stream that is contained in the streaming media format file. SDP establishes a separate URL for each stream. In one embodiment, the stream URL is considered to be a stream identifier. In other embodiments, the stream identifier is an integer. The stream URL can be used by the client  to request delivery of the stream via a playback request (e.g., using the RTSP \u201cSETUP\u201d request). For each such URL, the SDP message also specifies the corresponding streaming media format stream identifier. This establishes a one-to-one mapping between the stream URL and the stream identifier.","The content description list is also inserted in the description message (see ) in such a way that it will be ignored by clients that do not have the logic to understand it. See Appendix A for excerpts from an SDP content description that are returned to the client  in response to a DESCRIBE request. The SDP description message indicates the URL that should be used with RTSP commands that operate on the presentation as a whole, as opposed to individual streams. Examples of such commands include PLAY and PAUSE. In addition, the SDP description message indicates URLs for audio and video streams and associated standard and dynamic streams.","Client Operations","In the exemplary RTSP embodiment, the client  connects to the server  using RTSP based on an initial URL. The client  sends the description request (e.g., RTSP DESCRIBE) after connecting to the server . The server  responds with the presentation description (e.g., the SDP message) or other session description message that includes the streaming media format file header and the content description list. The client  may send an RTSP request to dynamically measure the connection bandwidth to the server . In another embodiment, the connection bandwidth has been manually specified at the client  in which case the client  will bypass these requests. The client  examines the streaming media format file header to decide which streams it wants to select. Several factors influence the client's selection of the streams including, but not limited to, the connection bandwidth and the user's language. For example, if the client  is unable to display video, only an audio stream may be selected.","In the streaming media format file header, each stream is represented by its stream identifier. Hence, the result of the selection process is a list of stream identifiers for the streams that were chosen. The description message provides a mapping from each stream identifier to a URL. Using this mapping, the client  sends a playback request (e.g., an RTSP SETUP request) for each stream that the client  has chosen. The client  also selects a content description from the content description list that relate to the selected media streams. For example, the client  may select a content description that most closely matches a user's language preference to display certain metadata items from that list in a user interface for the user. Alternatively or in addition, the client  specifies a desired language in an Accept-Language header that the client  includes in the DESCRIBE request. The server  selects the content description that most closely matches the requested language, and includes the chosen content description in the SDP message sent to the client . The client  may issue a separate RTSP PLAY request for each stream that has been chosen to initiate delivery of the chosen streams. Alternatively, the play request is included with the playback request with the selected stream identifiers. That is, the client  may send a separate PLAY command for each stream that has been selected, if the server  supports this type of PLAY command. Alternatively, the client  may send a PLAY request using the URL that controls the presentation as a whole. This starts playback of all the selected streams. In response to the playback request, the client  receives the selected streams (e.g., via RTP) from the server  and renders or otherwise processes the received streams in the UI for the user. For example, the client player UI may render video, audio, text, and\/or animations.","SDP and the Streaming Media Format File Header","Referring next to , an exemplary block diagram illustrates the structure of a session description message  or a presentation description or the like. Those skilled in the art will appreciate that the exemplary data structure of the session description message  described with reference to  is merely exemplary. It is contemplated by the inventors that a header attribute , a content description list , and\/or stream identifier attributes ,  maybe stored in various fields of the session description message  and in any order not specifically described herein. In addition, it is contemplated by the inventors that the invention software and data structures are operable with any session description message , protocol, or format and not specifically limited to SDP or any other format or protocol.","The description message  includes with a session description section or field , followed by one or more media description sections or fields ,  such as media description field # through media description field #M. The session description field  provides information pertaining to all streams, while each media description field ,  provides information that is specific to a particular stream. The session description field  stores a header attribute  such that a value for the header attribute  represents an encapsulation of a streaming media format header such as header  illustrated in . The header attribute  stores, for example, stream identifier information ,  such as stream identifier # information through stream identifier #M information. In one embodiment, the value for the header attribute  represents an encapsulation of the streaming media format header as a uniform resource locator (URL). In the SDP embodiment, the header attribute  is identified by the SDP directive \u201ca=\u201d which can be used to extend the message format. However, while SDP is an ASCII-based message format, the streaming media format header may be binary, so the header is encoded into a subset of characters that can be safely used with SDP (see  below).","In one embodiment, the streaming media format file header is encoded as a data URL. Typically, URLs refer to content that it stored at a remote location. However, in the case of a data URL, the content is stored inside the URL itself. The specification for the data URL allows arbitrary binary data to be included, if Base64 encoding is used to encode the binary data into a subset of the US-ASCII character set. In addition, the header attribute  comprises a type tag identifying the value as representing the streaming media format header. For example, the data URL allows a multipurpose Internet mail extension (MIME) tag type to be specified. The MIME type is used to identify the type of content that is contained within the data URL. In one embodiment, the MIME type \u201capplication\/vnd.ms.wms-hdr.asfv1\u201d identifies that a data URL contains a streaming media format file header.","In the SDP embodiment, the software of the invention identifies the header attribute  as a program parameters URL (e.g., PGMPU) extension attribute whose value is a URL that can be used to obtain the streaming media header or other information about the multimedia presentation. The header attribute  appears in the session description section  of SDP. An exemplary syntax is as follows\n\n","Each media description field stores a stream identifier attribute. For example, the media description field  stores stream identifier attribute # , and the media description field  stores stream identifier attribute #M . In an SDP embodiment, the software of the invention identifies the stream identifier attributes ,  as a STREAM extension attribute in each of the media description fields  through . A value for the stream attribute ,  represents a stream identifier for one or more of the media streams associated with the media description field ,  and stored in the streaming media format file. An exemplary syntax is as follows.\n\n","In this example, when these attributes appear in the media description part ,  of the session description message , it means that the URL \u201crtsp:\/\/server\/presentation.wmv\/audio\u201d can be used in an RTSP SETUP request to select the delivery of the streaming media format stream with stream ID #.","The data referred to by these attributes is accessed through a URL, which is provided as the value of the attribute. The server  supports URLs with the data URL scheme. Such URLs have the property that the data to be conveyed is stored inline in the URL itself. The data URL scheme is presently defined in the IETF RFC 2397, the entire disclosure of which is incorporated herein by reference.","Content Description List","With further reference to , the session description field stores the list  of one or more content description attributes ,  such as content description attribute # through content description attribute #N. Each content description attribute ,  includes one or more name-value pairs. For example, content description attribute  stores name-value pair #  through name-value pair #X . In addition, content description attribute  stores name-value pair #  through name-value pair #Y . In  and , the exemplary values for M, N, X, and Y are integer values. A value for each content description attribute ,  references at least one metadata item relating to the media streams (e.g., via a URL). In one embodiment, the metadata items are stored as the name-value pairs , , , . For example, the metadata item may represent an encoded bit rate for the media stream. In another example, the content description attribute (e.g., content description attribute ) represents a language, and wherein at least one name-value pair (e.g., name-value pair ) for the content description attribute references at least one metadata item related to the language.","In one embodiment, each content description attribute ,  in the content description list  is a collection of name-value pairs for a specific language. Names are represented as strings in a 16-bit character encoding standard such as the Unicode character set (e.g., Unicode strings or numbers).","In an alternative embodiment (not shown), the content descriptions are stored in the appropriate media description part of the session description message .","Encapsulation","While the following section describes an exemplary process for encapsulating the content description list  for embedding into the session description field  of a session description message , the process is also applicable to encapsulating the streaming media format header in the header attribute . Those skilled in the art will note that the process for encoding described herein is merely exemplary, and that other methods of encoding exist and are contemplated by the inventors to be within the scope of the invention.","Referring next to , the exemplary process of encoding the content description list  into the description message  can be divided into serialization, UTF-8 encoding, and conversion into a data URL. The software of the invention generates or otherwise creates a serialized representation at  of the contents of a data structure such as the content description list . That is, everything in the content description list  is written to a contiguous buffer so that it can readily be converted into a data URL. For example, each name-value pair of a content description is serialized as follows: <name length>,<name>,<type>,<value length>,<value> where the <name length> field stores a number indicating the number of characters in the <name> field. The <name> field stores a string giving the name of the metadata item. The <type> field stores a numerical value that identifies whether the value of the metadata item should be interpreted as any form of string (e.g., binary or character) or as a number. For example, the value of the metadata item may be a binary string representing a graphic image. The <value length> field stores a number indicating the number of characters in the <value> field. The <value> field stores either a string or a number as the value of the metadata item. The value of the <type> field determines how to interpret the <value> field. Multiple name-value pairs in a content description are separated by a comma character (\u201c,\u201d). In one embodiment, the following table lists valid values for the <type> field:",{"@attributes":{"id":"p-0057","num":"0061"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"center"}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"thead":{"row":[{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]},{"entry":[{},"Value of <type> field","Interpretation of <value> field"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":{}}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"3"},"colspec":[{"@attributes":{"colname":"offset","colwidth":"21pt","align":"left"}},{"@attributes":{"colname":"1","colwidth":"84pt","align":"char","char":"."}},{"@attributes":{"colname":"2","colwidth":"112pt","align":"center"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"3","Number"]},{"entry":[{},"8","String"]},{"entry":[{},"19","Number"]},{"entry":[{},"31","String"]},{"entry":[{},{"@attributes":{"namest":"offset","nameend":"2","align":"center","rowsep":"1"}}]}]}}]}}},"In this embodiment, no other values for the <type> field are valid. If the client  encounters a <type> field with an invalid value, the client  will skip that metadata item. Those skilled in the art will note that the values and interpretations listed in the above table are merely exemplary. It is contemplated by the inventors that the invention is operable with any set of values and interpretations.","The invention includes exemplary formatting for the serialized content description. Metadata items appear in any order in a serialized content description, with the following exception: The <name> field of the first serialized metadata item in each content description has the value \u201clanguage\u201d. Furthermore, the value of the <type> field of this metadata item is \u201c8\u201d or \u201c31\u201d. The value of the <value> field of this metadata item is the language tag in the IETF RFC 1766, the entire disclosure of which is incorporated herein by reference, that identifies the language of all other metadata items in the content description. If no language tag is available or if the metadata items are considered to be language independent, the value of the <value> field may be empty.","Multiple content descriptions are separated by a carriage return followed by line feed (CRLF) character sequence. In other words, if a metadata item is followed by a CRLF, it indicates the end of the current content description and the start of a new content description. An example of a serialized content description list  with two content descriptions follows (CRLF character sequences are not visible).\n\n","The second part of the exemplary encoding process converts at  the serialized representation of the data (e.g., the content description list ) into a character string from the Unicode character set to the UTF-8 character set. UTF-8 is a reversible encoding of Unicode that yields a more compact representation of the Unicode string, if the string contains western European characters. Also, UTF-8 characters are commonly used in URLs, while Unicode characters are not. UTF-8 is described in the IETF RFC 2279, the entire disclosure of which is incorporated herein by reference.","The third part of the process converts or otherwise encodes the serialized content description list at  into a data URL. An exemplary MIME type \u201capplication\/x-wms-contentdesc\u201d indicates that the data URL includes a serialized content description list. In one embodiment, Base64 encoding is not applied to the serialized content description list, but any characters that cannot safely appear in a URL need to be escaped using a hex-escape mechanism for URLs.","The data URL embodying the content description list  is inserted into the session description field  using an extension attribute or directive. In one embodiment, an extension attribute identifier such as PGMPU used to convey the streaming media format file header is utilized. The MIME type in the data URL is used to distinguish between the two usages of the PGMPU extension attribute. An example of the resulting SDP syntax after the content description list  has been inserted into the description message  follows as a single line in SDP.\n\n","Alternatively, the data URL embodying the content description list  is inserted into the session description field  using an extension attribute or directive other than PGMPU. In such an embodiment, the MIME type in the data URL is not needed.","Although UTF-8 encoding is shown separately from serialization for convenience in , in one embodiment, the UTF-8 encoding is part of the serialization. That is, each \u201cname\u201d or \u201cvalue\u201d is first UTF-8 encoded and then added to the serialized representation. In this embodiment, the <name length> and <value length> fields, for example, already reflect the length of the UTF-8 encoded names and values, respectively.","Exemplary Operating Environment",{"@attributes":{"id":"p-0066","num":"0073"},"figref":"FIG. 6","b":["130","130","130","132","134","136","134","132","136"]},"The computer  typically has at least some form of computer readable media. Computer readable media, which include both volatile and nonvolatile media, removable and non-removable media, may be any available medium that can be accessed by computer . By way of example and not limitation, computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information such as computer readable instructions, data structures, program modules or other data. For example, computer storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical disk storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium that can be used to store the desired information and that can be accessed by computer . Communication media typically embody computer readable instructions, data structures, program modules, or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal, which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media, such as a wired network or direct-wired connection, and wireless media, such as acoustic, RF, infrared, and other wireless media, are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.","The system memory  includes computer storage media in the form of removable and\/or non-removable, volatile and\/or nonvolatile memory. In the illustrated embodiment, system memory  includes read only memory (ROM)  and random access memory (RAM) . A basic input\/output system  (BIOS), containing the basic routines that help to transfer information between elements within computer , such as during start-up, is typically stored in ROM . RAM  typically contains data and\/or program modules that are immediately accessible to and\/or presently being operated on by processing unit . By way of example, and not limitation,  illustrates operating system , application programs , other program modules , and program data .","The computer  may also include other removable\/non-removable, volatile\/nonvolatile computer storage media. For example,  illustrates a hard disk drive  that reads from or writes to non-removable, nonvolatile magnetic media  also shows a magnetic disk drive  that reads from or writes to a removable, nonvolatile magnetic disk , and an optical disk drive  that reads from or writes to a removable, nonvolatile optical disk  such as a CD-ROM or other optical media. Other removable\/non-removable, volatile\/nonvolatile computer storage media that can be used in the exemplary operating environment include, but are not limited to, magnetic tape cassettes, flash memory cards, digital versatile disks, digital video tape, solid state RAM, solid state ROM, and the like. The hard disk drive , and magnetic disk drive  and optical disk drive  are typically connected to the system bus  by a non-volatile memory interface, such as interface .","The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in , provide storage of computer readable instructions, data structures, program modules and other data for the computer . In , for example, hard disk drive  is illustrated as storing operating system , application programs , other program modules , and program data . Note that these components can either be the same as or different from operating system , application programs , other program modules , and program data . Operating system , application programs , other program modules , and program data  are given different numbers here to illustrate that, at a minimum, they are different copies.","A user may enter commands and information into computer  through input devices or user interface selection devices such as a keyboard  and a pointing device  (e.g., a mouse, trackball, pen, or touch pad). Other input devices (not shown) may include a microphone, joystick, game pad, satellite dish, scanner, or the like. These and other input devices are connected to processing unit  through a user input interface  that is coupled to system bus , but may be connected by other interface and bus structures, such as a parallel port, game port, or a Universal Serial Bus (USB). A monitor  or other type of display device is also connected to system bus  via an interface, such as a video interface . In addition to the monitor , computers often include other peripheral output devices (not shown) such as a printer and speakers, which may be connected through an output peripheral interface (not shown).","The computer  may operate in a networked environment using logical connections to one or more remote computers, such as a remote computer . The remote computer  may be a personal computer, a server, a router, a network PC, a peer device or other common network node, and typically includes many or all of the elements described above relative to computer . The logical connections depicted in  include a local area network (LAN)  and a wide area network (WAN) , but may also include other data communication networks. Such networking environments are commonplace in offices, enterprise-wide computer networks, intranets, and global computer networks (e.g., the Internet).","When used in a local area networking environment, computer  is connected to the LAN  through a network interface or adapter . When used in a wide area networking environment, computer  typically includes a modem  or other means for establishing communications over the WAN , such as the Internet. The modem , which may be internal or external, is connected to system bus 136 via the user input interface  or other appropriate mechanism. In a networked environment, program modules depicted relative to computer , or portions thereof, may be stored in a remote memory storage device (not shown). By way of example, and not limitation,  illustrates remote application programs  as residing on the memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.","Generally, the data processors of computer  are programmed by means of instructions stored at different times in the various computer-readable storage media of the computer. Programs and operating systems are typically distributed, for example, on floppy disks or CD-ROMs. From there, they are installed or loaded into the secondary memory of a computer. At execution, they are loaded at least partially into the computer's primary electronic memory. The invention described herein includes these and other various types of computer-readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.","For purposes of illustration, programs and other executable program components, such as the operating system, are illustrated herein as discrete blocks. It is recognized, however, that such programs and components reside at various times in different storage components of the computer, and are executed by the data processor(s) of the computer.","Although described in connection with an exemplary computing system environment, including computer , the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover, the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems, environments, and\/or configurations that may be suitable for use with the invention include, but are not limited to, personal computers, server computers, hand-held or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputers, mainframe computers, distributed computing environments that include any of the above systems or devices, and the like.","The invention may be described in the general context of computer-executable instructions, such as program modules, executed by one or more computers or other devices. Generally, program modules include, but are not limited to, routines, programs, objects, components, and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote computer storage media including memory storage devices.","In operation, a server computer such as computer  or media server  executes computer-executable instructions such as those illustrated in  to receive a description request from the client  to describe the content and to transmit the description message  via a description protocol to the client  in response to the received description request. The description message  includes the header encapsulated therein. The server computer further executes instructions to receive at least one of the stream identifiers from the client  where the received stream identifiers correspond to the media streams selected by the client  for rendering. The server computer further executes instructions to deliver the selected media streams to the client  in response to the received stream identifiers.","In operation, a client computer such as computer  or client  executes computer-executable instructions such as those illustrated in  to transmit a description request to the server  for a description of the content and receive a description message  from the server  via a description protocol in response to the transmitted description request. The description message  includes the header encapsulated therein. The client computer further executes instructions to select one or more of the media streams for rendering and transmit the stream identifiers corresponding to the selected media streams to the server  to notify the server  of the selected media streams. The client computer further executes instructions to request delivery of the selected media streams from the server , receive the delivered, selected media streams, and render the media streams.","When introducing elements of the present invention or the embodiment(s) thereof, the articles \u201ca,\u201d \u201can,\u201d \u201cthe,\u201d and \u201csaid\u201d are intended to mean that there are one or more of the elements. The terms \u201ccomprising,\u201d \u201cincluding,\u201d and \u201chaving\u201d are intended to be inclusive and mean that there may be additional elements other than the listed elements.","In view of the above, it will be seen that the several objects of the invention are achieved and other advantageous results attained.","As various changes could be made in the above constructions, products, and methods without departing from the scope of the invention, it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.","The following contains excerpts from an SDP content description that is returned to clients in response to a DESCRIBE request. The SDP description indicates the path for the content file, URLs for audio and video streams, and associated standard and dynamic streams.\n\n"],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 6"}]},"DETDESC":[{},{}]}
