---
title: Browser-based secure desktop applications for open computing platforms
abstract: Example browser-based secure desktop applications for open computing platforms are disclosed. An example method disclosed herein to provide secure desktop functionality to a computing platform comprises providing, in response to a first request, a secure desktop application to the computing platform, the secure desktop application for execution by a browser on the computing platform, and establishing a secure communication connection between a service node and the secure desktop application, the secure communication connection to provide the secure desktop application with access to a trusted entity, the secure communication connection being accessible to a trusted application downloaded to the computing platform for execution by the browser in association with the secure desktop application, the secure communication connection being inaccessible to an untrusted application not executed in association with the secure desktop application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047476&OS=09047476&RS=09047476
owner: AT&T Intellectual Property I, L.P.
number: 09047476
owner_city: Atlanta
owner_country: US
publication_date: 20111107
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE DISCLOSURE","BACKGROUND","DETAILED DESCRIPTION"],"p":["This disclosure relates generally to computing platforms and, more particularly, to browser-based secure desktop applications for open computing platforms.","People routinely use computing devices, such as personal computers, smartphones, etc., to access and work with sensitive data, such as proprietary data, confidential data, sensitive personal information, etc. However, such sensitive data can be at risk of being compromised by malware that gains access to the user's computing device. As such, some enterprises (e.g., employers, retailers, governmental entities, etc.) restrict the computing devices that may be used to access sensitive data. Such restrictions can limit the user's choice of devices, or require the user to have multiple devices that perform similar functions.","Example browser-based secure desktop applications for open computing platforms are disclosed herein. An example method disclosed herein, which may be performed by, for example, a provider network to provide secure desktop functionality to a computing platform, includes providing, in response to a first request, a secure desktop application to the computing platform for execution by a browser on the computing platform. In some examples, the first request corresponds to the browser being used to navigate to a server from which the secure desktop application can be downloaded. The example disclosed method also includes establishing a secure communication connection between a service node (e.g., in a provider network) and the secure desktop application. The secure communication connection provides the secure desktop application with access to a trusted entity. Furthermore, the secure communication connection is accessible to a trusted application downloaded to the computing platform for execution by the browser in association with the secure desktop application. However, the secure communication connection is inaccessible to an untrusted application not executed by the browser in association with the secure desktop application.","Some example methods further include providing, in response to a second request, the trusted application to the computing platform for execution by the browser in association with the secure desktop application. For example, the secure desktop application can cause the browser to navigate to a server from which trusted application(s) can be downloaded for execution by the browser in association with (e.g., in the context of) the secure desktop application. In this way, the functionality provided by the secure desktop application executing in the browser of the computing device can be augmented using, for example, plug-in trusted applications.","Some example methods also include storing data remotely from the computing platform, where the data is associated with a secure desktop session involving the secure desktop application. In some examples, storing data remotely from the computing platform permits a second secure desktop application (e.g., being executed by a second browser on a second computing platform) to use the data to join the secure desktop session. Additionally or alternatively, after execution of the secure desktop application by the browser is terminated, storing data remotely from the computing platform can, for example, permit a second secure desktop application (e.g., being executed by a second browser on a second computing platform) to use the data to resume the secure desktop session.","Some example methods include receiving a policy profile from the trusted entity, and enforcing a policy to control download of the trusted application to the browser in the computing platform based on the policy profile, and\/or to control access to the trusted entity by the trusted application based on the policy profile, etc. In some examples, the policy profile includes a user profile, and enforcing the policy includes determining whether to permit the trusted application to have access to the trusted entity via the secure communication connection based on comparing user information for a user of the secure desktop application with the user profile. In some examples, the policy profile additionally or alternatively includes a device profile, and enforcing the policy additionally or alternatively includes determining whether to permit the trusted application to be downloaded to the browser in the computing platform based on comparing descriptive information for the computing platform with the device profile.","Other example methods disclosed herein may be performed by, for example, a secure desktop application executing in a browser on a computing platform, and include establishing a secure communication connection between a service node (e.g., of a provider network) and the secure desktop application. The secure communication connection provides access to a trusted entity. Furthermore, the secure communication connection is accessible to a trusted application downloaded for execution by the browser in association with the secure desktop application. However, the secure communication connection is inaccessible to an untrusted application not executed by the browser in association with the secure desktop application. Some such example methods also include downloading the trusted application for execution by the browser in association with the secure desktop application.","In some example methods, data associated with a secure desktop session (e.g., involving the secure desktop application) is stored remotely from the computing platform to enable the secure desktop session, for example, to be resumed after execution of the secure desktop application by the browser is terminated. In some example methods, data is stored by the secure desktop application securely in local storage associated with the computing platform. In such examples, the stored data is accessible to the trusted application and inaccessible to the untrusted application. In some examples, securing the stored data in the local storage includes using a set of keys (e.g., such as one or more public encryption keys) to perform just-in-time encryption of data to be written to the local storage, and using the set of keys to perform just-in-time decryption of data to be read from the local storage. In some examples, securing the stored data in the local storage further includes detecting termination of the secure communication connection between the trusted entity and the secure desktop, and revoking the set of keys after expiration of a time period beginning when the termination of the secure communication connection is detected (e.g., to support off-line access to the sensitive, secured data for a period of time after the secure connection to the trusted entity is terminated). Additionally or alternatively, in some examples the method waits to revoke the set of keys until the secure desktop itself is to be terminated to permit access to the sensitive, secured data while the secure desktop is active (even if the secure communication connection has been terminated).","Some example methods include exposing an application programming interface to trusted application(s) downloaded by the secure desktop application for execution by the browser. The application programming interface can enable the trusted application(s) to access the secure communication connection. Additionally or alternatively, the application programming interface can enable the trusted application(s) to access data that is stored securely in the local storage (e.g., via encryption). Additionally or alternatively, the application programming interface can enable a first trusted application to communicate with a second trusted application.","As noted above, some enterprises restrict the computing devices that may be used to access sensitive data to reduce the risk of the sensitive data being compromised by malware that gains access to the user's computing device. Some enterprises (e.g., such as in a banking application) may also require a user to perform an authentication procedure when accessing the enterprise from the user's computing device, especially when the computing device is not already associated with the user (such as when the user is accessing the enterprise from a public computer or someone else's computing device). However, such techniques may still be inadequate when it comes to preventing sensitive data from being compromised. For example, malware may still gain access to an enterprise-approved device, thereby permitting the malware to access an existing secure connection to the enterprise (e.g., such as a virtual private network established between the user's device and the enterprise) and\/or to obtain authentication information used to authenticate the user, through which sensitive data can be siphoned off or otherwise compromised.","Unlike such prior techniques that attempt to mitigate the threat of unauthorized access to sensitive data, example methods, apparatus and articles of manufacture disclosed herein provide an on-demand, secure desktop environment for a computing platform that can prevent untrusted applications, such as malware, from accessing sensitive data associated with an enterprise or, more generally, a trusted entity. In some examples, the secure desktop environment is implemented by a secure desktop application that is provided on-demand to a web-browser on the computing platform for execution by the web-browser. As such, example on-demand secure desktop environments disclosed herein can be provided to almost any type of computing platform capable of running a web browser.","In some examples, an on-demand secure desktop environment (also referred to herein as an on-demand trusted enclave environment) provided to a computing platform as disclosed herein can prevent untrusted applications (e.g., malware) from accessing a secure connection established between a trusted entity and the secure desktop on an otherwise open computing platform. In some examples disclosed herein, the on-demand secure desktop environment can also prevent untrusted applications from being able to access and compromise sensitive data and\/or authentication information that is stored locally on the otherwise open computing platform, and\/or that is exchanged with the trusted entity via the secure connection. In some examples disclosed herein, the on-demand secure desktop environment can further prevent untrusted applications from communicating with the secure desktop environment and\/or trusted applications executing in the context of the secure desktop environment.","Additionally or alternatively, in some examples disclosed herein, the on-demand secure desktop environment stores secure desktop session data remotely at the trusted entity or the provider network (e.g., such as in a cloud computing environment), to provide virtual, always-on functionality, as described in greater detail below. Furthermore, in some examples disclosed herein, policy management is supported. For example, user and\/or device profiles may be specified by a trusted entity and\/or a provider network to allow or block execution of certain trusted application(s) in the context of an on-demand secure desktop executing on a particular computing device for a particular user.","Turning to the figures, a block diagram of an example system  that includes an example computing platform  supporting an example on-demand secure desktop  as disclosed herein is illustrated in . The computing platform  may be implemented by any type(s) of computing device, such as any personal computer, laptop, smartphone, cellular phone, computing pad, personal digital assistant, tablet personal computer, personal communicator, kiosk, server, etc. In the illustrated example, the computing platform  is an open computing platform in which there are few, if any, inherent restrictions on which applications can and cannot be installed on and\/or executed by the platform's operating system. As described in greater detail below, the secure desktop  of the illustrated example is able to provide a secure area and\/or trusted enclave in the otherwise open computing platform .","The computing platform  of the illustrated example includes a communication interface to provide one or more example network connections A-C, such as one or more data streams, data sessions, etc., to an example communication network . In the illustrated example of , the communication network  is an open and untrusted network , such as the Internet. The network connections A-C can be established using any type(s) of wired and\/or wireless technology capable of providing connectivity to the communication network . For example, the network connections A-C can correspond to a fiber, cable and\/or digital subscriber line connection to an Internet service provider (ISP); one or more mobile (e.g., cellular) data channels conforming to any type of mobile network communication protocol, such as the 3rd Generation Partnership Project (3GPP) Long Term Evolution (LTE) wireless communication standard, the General Packet Radio Service (GPRS) for second generation (2G) protocol, the Wideband-Code Division Multiple Access (W-CDMA)-based third generation (3G) protocol, the Universal Mobile Telecommunication System (UMTS) protocol, the Global System for Mobile Communications (GSM) protocol, etc.; a wireless local area network (WLAN) connection; a Bluetooth connection; etc.","In the illustrated example, the network connection B is open and untrusted such that any client application executing on the computing platform  can use the network connection B to access the network . In the illustrated example, the network connection C is also open and untrusted such than an example web browser  executing on the computing platform , and\/or web application(s) being executed by the web browser , can use the network connection C to access the network . The web browser  can be implemented by any type(s) of web browser, such as, but not limited to, Internet Explorer\u00ae by Microsoft\u00ae, Inc., Chrome\u2122 by Google\u00ae, Inc., Firefox\u00ae by Mozilla\u00ae, Safari\u00ae by Apple\u00ae, Inc. etc. As used herein, an application can include, for example, any type(s) and\/or number of computing application(s) or app(s), program(s), code(s), procedure(s), process(es), function(s), widget(s), etc., able to be installed on and\/or executed or otherwise performed by the computing platform  (e.g., as a standalone client, or in conjunction with the web browser ).","For example, the computing platform  of the illustrated example includes and is able to execute one or more example untrusted client application(s)  and\/or one or more untrusted web application(s) . The untrusted client application(s)  include, for example, applications installed on and\/or executed by the computing platform  as processing clients, but that do not undergo authentication and\/or whose origins may be unknown. The untrusted web application(s)  include, for example, applications downloaded and executed by the web browser , but that also do not undergo authentication and\/or whose origins may be unknown. As such, one or more of the untrusted client application(s)  and\/or the untrusted web application(s)  could be malware and\/or other malicious or unauthorized code that, for example, attempts to gain access to and compromise sensitive data stored on the computing platform .","In the illustrated example of , the untrusted client application(s)  and the untrusted web application(s)  executing on the computing platform  can access example storage  of the computing platform . As such, the untrusted client application(s)  and the untrusted web application(s)  can read data from and write data to the storage , which could enable malicious code to retrieve and\/or overwrite (e.g., corrupt) unprotected sensitive data stored in the storage . The storage  can correspond to any type or combination of temporary and\/or permanent tangible storage media, such as one or more of cache, volatile memory, flash memory, local disk storage, etc., including but not limited to the mass storage devices  and\/or volatile memory  in the example processing system  of , which is described in greater detail below. Although one storage element  is illustrated in the example of , the computing platform  can support an appropriate type(s) and\/or number of storage elements .","Additionally, in the illustrated example of , the untrusted client application(s)  and the untrusted web application(s)  can also communicate or, in other words, exchange data with each other via, for example, inter-process connections. The inter-process connections can be implemented by inter-process communications, memory area mappings, signals, etc., and\/or any other type(s) of inter-process connection(s) supported by the operating system and\/or storage  of the computing platform .","As mentioned above, the computing platform  of the illustrated example includes the on-demand secure desktop  (also referred to herein as a secure desktop application, a trusted enclave application, etc.) to provide a secure area or trusted enclave in the otherwise open computing platform  via which an example trusted entity  and any associated sensitive data can be accessed in a secure manner. In the illustrated example, the on-demand secure desktop  provides access to the trusted entity  via the communication connection A, which is a secure connection between the on-demand secure desktop  and an example provider network  included in and\/or implementing the network . The provider network , in turn, establishes an example secure connection  between the provider network  and the trusted entity . In the example provider network  of , an example service node  is included to support on-demand secure desktop functionality. For example, the service node  establishes the secure connection  between the provider network  and the trusted entity , and communicatively couples the secure connection  and the secure connection A to enable the on-demand secure desktop  to access the trusted entity . In some examples, the secure communication connections A and\/or  correspond to one or more encrypted data streams, data sessions, etc., employing any type(s) of data encryption, such as encryption according to the data encryption standard (DES), advanced encryption standard (AES), etc. The service node  can be implemented by any type(s) or combination of one or more network nodes, computers, servers, etc.","From the perspective of the trusted entity , the secure desktop  is considered to be a trusted application. Trusted applications include, for example, applications that undergo authentication and\/or whose origins can otherwise be known. The trusted entity  can correspond to any enterprise, business, server, computer, processing cloud, etc., accessible by the computing platform  and that employs authentication and\/or other trusted computing techniques to establish trusted communications and\/or data access for users, applications, devices, etc., that access the trusted entity .","In some examples, the on-demand secure desktop  is a trusted application from the perspective of the trusted entity , and is downloadable upon request and\/or on-demand from the service node  to the web browser  on the computing platform . For example, a user of the computing platform  can navigate the web browser  to a web address or uniform resource locator (URL) (e.g., https:\/\/secure-desktop.att.com) for a server associated with, for example, the service node , the provider network  and\/or the trusted entity , and from which the on-demand secure desktop  can be downloaded. In such examples, after being downloaded to the web browser , the on-demand secure desktop  is executed by the web browser  and establishes the secure communication connection A with the service node , as described in greater detail below. In the illustrated example, the service node  has already established the secure communication connection  with the trusted entity . Thus, the service node  is able to connect the secure connection A and the secure connection  to enable the on-demand secure desktop  to access the trusted entity .","Furthermore, the on-demand secure desktop  provides the communication endpoint for the secure connection A on the computing platform . As such, the secure connection A to the trusted entity  is accessible only via the secure desktop . This is unlike prior computing platforms in which a secure connection, such as a virtual private network (VPN), is terminated at the operating system and, thus, could be accessed by any application via the operating system. However, the secure communication connection A could be carried by a VPN established between the computing platform  and the service node  and\/or the trusted entity . As described in greater detail below, to prevent the untrusted applications  and\/or  from being able to access the secure connection A, the on-demand secure desktop  does not exchange data with the untrusted applications  and . Because the untrusted applications  and  cannot exchange data with the on-demand secure desktop , and the on-demand secure desktop  provides the communication endpoint for the secure connection A, the untrusted applications  and  also cannot access the secure connection A between the secure desktop  and the trusted entity . In some examples, the on-demand secure desktop  also provides local data security, via just-in-time encryption and decryption as described in greater detail below, to prevent the untrusted applications  and  from being able to access data stored by the on-demand secure desktop  in the otherwise unsecured local storage  of the computing platform .","In the example of , the service node  (and\/or the provider network  in general, and\/or the trusted entity ) stores data, which is associated with secure desktop session(s) involving the on-demand secure desktop , remotely from the computing platform . By enabling secure desktop session data to be stored remotely, the system  of the illustrated example enables multiple on-demand secure desktops  on the same and\/or different computing platforms  to join a collaborative secure desktop session. Such remote storage of secure desktop session data also permits a secure desktop session associated with a first on-demand secure desktop  to be resumed by a second on-demand secure desktop  (on the same or different computing platform ) after, for example, the first on-demand secure desktop  has been terminated. Such examples of virtual, always-on secure desktop functionality capable of being supported by storing secure desktop session data remotely are described in greater detail below.","After being downloaded and launched by the web browser , the on-demand secure desktop  also supports downloading trusted applications, such as the trusted web applications T_APP and T_APP, for execution by the web browser  in the secure context of the on-demand secure desktop . In the illustrated example, the trusted web applications T_APP and T_APP are downloaded from the service node  upon request (e.g., to enhance existing functionality and\/or provide new functionality to the secure desktop ) and, thus, are known to be trusted. In some examples, the on-demand secure desktop  can also authenticate the trusted web applications T_APP and T_APP after being downloaded to further establish that these web applications are trusted. Although two () trusted applications T_APP and T_APP are illustrated in the example of , the on-demand secure desktop  in the computing platform  can support any appropriate number of trusted applications.","Because the trusted applications T_APP and T_APP execute in the context of the on-demand secure desktop  (e.g., via an application programming interface described in greater detail below), the trusted applications T_APP and T_APP can access the secure connection A and, thus, the trusted entity . Additionally or alternatively, the trusted applications T_APP and T_APP can access the secure session data stored locally in the storage  and\/or remotely by the service node  (and\/or the provider network  in general, and\/or the trusted entity ). Additionally or alternatively, the on-demand secure desktop  enables the trusted applications T_APP and T_APP to intercommunicate and exchange data.","In some examples, the service node  provides policy enforcement to determine which trusted applications T_APP and T_APP are permitted to be downloaded to and\/or executed on a particular computing device , which trusted applications T_APP and T_APP are permitted to access the secure connection A, etc. Additionally or alternatively, the service node  provides policy enforcement to initially determine whether the on-demand secure desktop can be downloaded to a particular computing platform . Such policy enforcement can be based on one or more profiles specified by the trusted entity  and\/or the provider network , as described in greater detail below.","Although the example computing platform  is illustrated in  as supporting one on-demand secure desktop  providing one secure connection A to one trusted entity  via one service node  in one provider network , the on-demand secure desktop  can be used to provide multiple secure connections A and  to the same or different trusted entities  over the same or different networks  and\/or  using any number of service nodes . Furthermore, multiple on-demand secure desktops  can be included in or executed by the computing platform  to provide, for example, different respective secure connections A to different respective trusted entities .","A block diagram of an example implementation of the example service node  in the provider network  of  is illustrated in . Similar elements in  are labeled with the same reference numerals. The example service node  of  includes an example secure desktop server  to store on-demand secure desktop application(s)  for downloading to one or more computing platforms . For example, the on-demand secure desktop  can be implemented as a web application that can be downloaded on-demand from the secure desktop server  (and\/or one or more other servers associated with the service node , the provider network , the trusted entity , etc.) to the computing platform . As mentioned above, the web browser  of the computing platform  can be used to navigate to a URL of the secure desktop server  and to request downloading of the on-demand secure desktop application . After being downloaded by the web browser , the on-demand secure desktop  is executed by the web browser  as a web application. Because the on-demand secure desktop  is implemented as a web application in this example, the on-demand secure desktop  does not involve installation of client software on the computing platform  and can be implemented in a manner that is device independent and\/or operating system (OS) independent, thereby facilitating downloading to any type of computing device, such as personal laptops, web kiosks, borrowed laptops, hotel personal computers, etc.","The example service node  of  also includes an example trusted application server  to store trusted applications, such as the trusted applications T_APP and\/or T_APP, for downloading to one or more computing platforms  that are executing on-demand secure desktop(s) . The trusted applications stored on the trusted application server  can be used, for example, to enhance and\/or augment existing functionality and\/or add new functionality to be provided by the on-demand secure desktop . In some examples, a trusted application stored by the trusted application server  is downloaded into an on-demand secure desktop  that has already been launched by an associated web browser . In this way, the on-demand secure desktop  can be provided with the latest version(s) of the requested trusted application(s) after being launched by the web browser  on the computing platform . In such examples, the secure desktop server  and the trusted applications server  can be implemented by the same or different servers, computers, etc., and are responsible for storing the latest version of the secure desktop application(s)  and the associated trusted applications T_APP, T_APP, etc.","The example service node  of  further includes an example trusted entity gateway  and an example secure connection interface  to establish secure connection(s) between the on-demand secure desktop  executing on the computing platform  and one or more trusted entities . In the illustrated example, the trusted entity gateway  is used to establish secure connection(s) (e.g., such as the secure connection ) between the service node  and one or more trusted entities , and the secure connection interface  is used to establish secure connection(s) (e.g., such as the secure connection A) between the on-demand secure desktop  and the service node . The secure connection interface  also joins the secure connection(s) with the on-demand secure desktop  to the appropriate secure connection(s) with the one or more trusted entities . The secure communication connections implemented by the trusted entity gateway  and the secure connection interface  can be any type of secure connections implemented using any type of secure connection technology, such as public key encryption, symmetric key encryption, certificates, two-factor authentication, etc.","As mentioned above, secure desktop session data associated with the on-demand secure desktop  and\/or one or more of the trusted applications T_APP, T_APP, etc., can be stored locally on the computing platform  (e.g., in the storage ) and\/or remotely at the service node , provider network  and\/or trusted entity . Such secure desktop session data can include, for example, sensitive data obtained from and\/or provided to the trusted entity  and\/or processed by the on-demand secure desktop  and\/or one or more of the trusted applications T_APP, T_APP, etc. To store secure desktop session data remotely from the computing platform(s) , the service node  of  includes example session data storage . The session data storage  can be implemented by any type or combination of memory and\/or storage technology, such as one or more of the mass storage devices  and\/or volatile memory  in the example processing system  of , which is described in greater detail below.","When secure desktop session data is stored remotely at the session data storage  (and\/or elsewhere at the service node , the provider network , the trusted entity , etc.), the on-demand secure desktop  of the illustrated example provides virtual, always-on functionality. For example, a web application, such as the on-demand secure desktop , usually stops executing once it is exited, and any session context associated with the web application is lost. However, when the secure desktop session data being used by the on-demand secure desktop  is stored remotely (e.g., at the session data storage ), the on-demand secure desktop  maintains a virtual presence in the provider network . In other words, the session context of the on-demand secure desktop  can be maintained even after the computing platform  closes or exits the on-demand secure desktop . As such, a user can move between computing platforms  seamlessly, or use multiple computing platforms  in parallel, without interrupting the session context of the on-demand secure desktop , which is maintained in the provider network  (e.g., at the session data storage  of the service node ). For example, multiple on-demand secure desktops  on the same and\/or different computing platforms  can use secure desktop session data stored at the session data storage  to join a collaborative secure desktop session. As another example, a secure desktop session associated with a first on-demand secure desktop  that has been terminated can be resumed by a second on-demand secure desktop  (e.g., running on the same or different computing platform ) by accessing the secure desktop session data stored at the session data storage  for the first on-demand secure desktop .","The service node  of  includes an example policy enforcer  to support policy enforcement and associated profile management with respect to operation of on-demand secure desktop(s)  in the system . In some examples, the provider network  and\/or one or more trusted entities  may specify policy profile(s) for use by the policy enforcer  to determine whether a secure desktop application  can be downloaded by the secure desktop server  to a particular computing platform , whether a particular trusted application can be downloaded by the trusted application server  to a particular secure desktop  (e.g., associated with a particular platform  and\/or a particular user), whether a particular trusted application can be executed by a particular secure desktop  (e.g., associated with a particular platform  and\/or a particular user) and\/or granted access to the secure connection A to the trusted entity , etc. The policy profile(s) can be stored at an example profile storage . The profile storage  can be implemented by any type or combination of memory and\/or storage technology, such as one or more of the mass storage devices  and\/or volatile memory  in the example processing system  of , which is described in greater detail below.","For example, the provider network  and\/or one or more trusted entities  may specify and provide device profile(s) associated with respective computing platform(s) , and\/or user profile(s) associated with respective user(s), which can be used to customize operation of the on-demand secure desktop  on a particular computing platform  and\/or a particular user. The policy enforcer  uses the device profile(s) and\/or user profile(s) stored at the profile storage  to enforce policies affecting operation of the on-demand secure desktop  on a particular computing platform  and\/or a particular user. For example, the policy enforcer  can process a user policy to determine whether to allow or block execution of one or more particular trusted apps in the on-demand secure desktop  executing on a particular computing device  based on comparing the user policy with user information associated with a particular user. As another example, the policy enforcer  can process a device policy for a particular computing platform  to determine whether to allow or block execution of one or more particular apps based on comparing the device policy with descriptive information associated with the particular computing platform . For example, device profiles could be used to block a particular trusted application from executing when the on-demand secure desktop  in which it is being executed is on a device that is not an authorized computing platform  for that trusted application. In some examples, the policy enforcer  additionally or alternatively uses the device profile(s) and\/or user profile(s) to determine whether the secure desktop server  is to respond to a request to download the on-demand secure desktop application  to a particular computing platform  associated with a particular user in the first place.","A block diagram of an example implementation of the on-demand secure desktop  of  is illustrated in . Similar elements in  are labeled with the same reference numerals. The on-demand secure desktop  of  includes an example browser interface  to enable the on-demand secure desktop  to be executed by a web browser, such as the web browser  on the computing platform . In the illustrated example of , the on-demand secure desktop  also includes an example application downloader  to enable trusted application(s), such as the trusted applications T_APP, T_APP, etc., to be selected, requested for download and executed by the web browser  in the context of the on-demand secure desktop . For example, the browser interface  and the application downloader  can be implemented to support hypertext markup language  (HTML) and\/or any other type of language, protocol, interface, etc., that enables the on-demand secure desktop  to interface with and be executed by the web browser .","The on-demand secure desktop  of  further includes an example secure connection endpoint  to establish the secure connection A with the trusted entity  and to provide the endpoint on the computing platform  for the secure connection A. For example, the secure connection A established by the secure connection endpoint  can be any type of secure connection implemented using any type of secure connection technology, such as public key encryption, symmetric key encryption, certificates, two-factor authentication, etc. In some examples, the secure connection A is established after the secure connection endpoint  has authenticated a user of the secure desktop  with the trusted entity  and\/or the service node  of the provider network . For example, the secure connection endpoint  provides authentication information for a user to the service node  to enable the service node  to authenticate the user and, when authentication is successful, permit the secure connection endpoint  of the secure desktop  to establish the secure connection A. Examples of such authentication information for a user of the secure desktop  include, but are not limited to, username and password information, biometric information, etc., and\/or other information to support one, two or multiple factor authentication.","The secure desktop  of  also includes an example encryption processor  to store local data  securely in the storage  for use by the secure desktop . In some examples, sensitive data used by the secure desktop , and\/or one or more trusted applications executing in the context of the secure desktop , is stored at the trusted entity , at the service node  of the provider network , in a network cloud, etc. However, the secure desktop  also supports storing data locally (e.g., in the computing platform ) in a secure manner such that any sensitive data included in the stored local data is secure. Thus, the encryption processor  protects the local data  stored by the secure desktop  from being read and compromised by, for example, one or more of the untrusted applications  and\/or . For example, the encryption processor  can use any type of key-based encryption (e.g., public-key encryption, symmetric-key encryption, etc.) to secure the local data  in the storage . In some examples, the encryption processor  provides just-in-time encryption of the local data  when the local data  is being written to the storage  by the secure desktop  and\/or one or more trusted applications executing in the context of the secure desktop . In such an example, the encryption processor  also provides just-in-time decryption of the local data  when the local data  is being read from the storage  by the secure desktop  and\/or one or more trusted applications executing in the context of the secure desktop . Because untrusted applications, such as the applications  and\/or , do not possess or otherwise have access to the encryption key(s) used by the encryption processor  to decrypt and\/or encrypt the encrypted local data , the encrypted local data  is secure and protected from unauthorized or otherwise improper access by any untrusted application.","In some examples, the encryption processor  generates the set of one or more encryption keys to be used to encrypt the local data  using any type of key generation algorithm using any appropriate input information, such as user information (e.g., username, password, etc.) provided by a user, biometric data, data obtained from a security token, etc., or any combination thereof In some examples, the trusted entity  and\/or the service node  associated with a particular secure connection A is\/are responsible for managing and providing the set of one or more encryption keys to be used by the encryption processor  to encrypt local data  associated with that particular trusted entity. In such examples, the encryption processor  receives the set of keys for encrypting the local data from the appropriate trusted entity  and\/or service node  over the secure connection A that has already been established with the service node  (and, thus, the trusted entity ). The encryption processor  then uses the generated\/received set of keys to perform just-in-time encryption of data related to the trusted entity  that is to be written to the local storage , and to perform just-in-time decryption of this data when it is to be read from the local storage . In some examples, when the secure desktop  detects that the secure connection A associated with the trusted entity  has terminated (e.g., voluntarily by the secure desktop  and\/or the trusted entity , or involuntarily due to one or more error conditions), the encryption processor  revokes (e.g., by randomization or other intentional overwriting and\/or corruption of the stored key(s) to make the key(s) unusable) or otherwise discards the set of encryption keys to protect the local data  from any subsequent access attempts. Additionally or alternatively, in some examples the encryption processor  waits to revoke the set of keys until the secure desktop itself  is to be terminated to permit access to the sensitive, secured data while the secure desktop  is active (even if the secure connection A has been terminated). When the computing platform  is a portable or shared platform, the foregoing feature(s) can be especially useful for protecting sensitive data included in encrypted local data  when the computing platform  is lost or being used by a different user.","In some examples, the encryption processor  may wait until after expiration of a time period beginning when termination of the secure connection A is detected to revoke or otherwise discard the set of encryption keys used to encrypt the local data  and\/or service node . In this way, the encryption processor  can support an associated period of time during which off-line access to the encrypted local data  is permitted. The time period for off-line access can be a configuration parameter of the secure desktop , a parameter provided by the trusted entity , a parameter provided by the service node , a parameter entered by a user, etc.","The secure desktop  of  also includes an example application programming interface (API)  to enable one or more trusted applications to access the secure desktop  and thereby access the secure connection A and the encrypted local data  provided by the secure desktop . In other words, the API  provides a plug-in interface via which trusted application(s) (e.g., trusted plug-in extensions) can be downloaded and executed by the web browser  in the context of the secure desktop . In this way, the API  supports extending the capabilities of the secure desktop  over time. The API  can be implemented as part of a software development kit (SDK) and\/or any other type of API architecture.","In the illustrated example, the API  includes an example communication API , an example storage API , an example inter-process API  and an example authentication API . In the example of , the communication API  provides trusted applications with access to the secure connection A provided by the secure desktop . For example, the communication API  can be used by a trusted application to provide data to the secure connection endpoint  that is to be sent to the trusted entity  via the secure connection A. The communication API  can also be used by the trusted application to obtain data from the secure desktop  that has been received from the trusted entity  via the secure connection A and the secure connection endpoint .","In the example of , the storage API  provides trusted applications with access to the encrypted local data  stored in the storage . For example, the storage API  can be used by a trusted application to provide data to the secure desktop  that is to be included by the encryption processor  in the secure local data  written to the storage . The storage API  can also be used by the trusted application to retrieve data from the secure desktop  that is read by the encryption processor  from the secure local data  stored in the storage .","In the example of , the inter-process API  provides trusted applications with access to other trusted applications executing in the context of the secure desktop . For example, the inter-process API  can be used by a trusted application to address and communicate data to another trusted application already associated with the secure desktop . The inter-process API  can also be used by the trusted application to address and receive data from another trusted application already associated with the secure desktop .","In some examples, the secure desktop  does not expose the API  (or at least some portions of the API ) to an application until the application has been authenticated by the secure desktop  and thereby becomes a trusted application. This feature can prevent untrusted applications, such as the applications  and\/or , from accessing the API  and gaining access to the secure connection A, the encrypted local data  and\/or one or more trusted applications. For example, the secure desktop  may expose just the authentication API  to an application requesting access to thereby provide an interface via which the application can be authenticated. The application can then use the authentication API  to provide authentication information, such as a digital certificate and\/or signature associated with the application, an identification checksum associated with the application, signed identification information, etc. Upon successful authentication of the application, the secure desktop  considers the application to be a trusted application and exposes the rest of the API  (or one or more of the other API components -) to this trusted application.",{"@attributes":{"id":"p-0058","num":"0057"},"figref":["FIG. 4","FIGS. 1-3","FIGS. 1-4"],"b":["160","150","110","160","110","105","105","110","105"]},"In the illustrated example of , the service node  evaluates a device policy associated with the computing platform  and\/or a user policy associated with a user of the computing platform  to decide to permit the trusted application T APP to execute and access the secure connection A, but blocks the trusted application T_APP from being able to execute and\/or access the secure connection A. For example, the service node  can block execution of the trusted application T_APP for a particular user based on the user's profile stored at the service node . As another example, the service node  can block execution of the trusted application T_APP for the particular computing platform  (e.g., because the platform  is not an enterprise approved platform) based on the platform's device profile stored at the service node . In such an example, if a user is using multiple computing platforms  to invoke secure desktops  and trusted applications T_APP and T_APP, the user might be able to execute trusted application T_APP on an approved platform  (e.g., an enterprise approved device), but not on an unapproved platform  (e.g., a personal computing device). In some examples, the service node  checks user and\/or device profiles to perform policy management each time the on-demand secure desktop  is launched and\/or each time a trusted application, such as one of the trusted applications T_APP, T_APP, etc., is downloaded and\/or executed.","While example manners of implementing the secure desktop  and the service node  have been illustrated in , one or more of the elements, processes and\/or devices illustrated in  may be combined, divided, re-arranged, omitted, eliminated and\/or implemented in any other way. Further, the example secure desktop server , the example trusted application server , the example trusted entity gateway , the example secure connection interface , the example policy enforcer , the example browser interface , the example application downloader , the example secure connection endpoint , the example encryption processor , the example API , the example communication API , the example storage API , the example inter-process API , the example authentication API  and\/or, more generally, the example secure desktop  and\/or the example service node  of  may be implemented by hardware, software, firmware and\/or any combination of hardware, software and\/or firmware. Thus, for example, any of the example secure desktop server , the example trusted application server , the example trusted entity gateway , the example secure connection interface , the example policy enforcer , the example browser interface , the example application downloader , the example secure connection endpoint , the example encryption processor , the example API , the example communication API , the example storage API , the example inter-process API , the example authentication API  and\/or, more generally, the example secure desktop  and\/or the example service node  could be implemented by one or more circuit(s), programmable processor(s), application specific integrated circuit(s) (ASIC(s)), programmable logic device(s) (PLD(s)) and\/or field programmable logic device(s) (FPLD(s)), etc. When any of the apparatus or system claims of this patent are read to cover a purely software and\/or firmware implementation, at least one of the example secure desktop , the example service node , the example secure desktop server , the example trusted application server , the example trusted entity gateway , the example secure connection interface , the example policy enforcer , the example browser interface , the example application downloader , the example secure connection endpoint , the example encryption processor , the example API , the example communication API , the example storage API , the example inter-process API  and\/or the example authentication API  are hereby expressly defined to include a tangible computer readable medium such as a memory, digital versatile disk (DVD), compact disk (CD), etc., storing such software and\/or firmware. Further still, the example secure desktop  and\/or the example service node  of  may include one or more elements, processes and\/or devices in addition to, or instead of, those illustrated in , and\/or may include more than one of any or all of the illustrated elements, processes and devices.","Flowcharts representative of example machine readable instructions that may be executed to implement the example secure desktop , the example service node , the example secure desktop server , the example trusted application server , the example trusted entity gateway , the example secure connection interface , the example policy enforcer , the example browser interface , the example application downloader , the example secure connection endpoint , the example encryption processor , the example API , the example communication API , the example storage API , the example inter-process API  and\/or the example authentication API  are shown in . In these examples, the machine readable instructions represented by each flowchart may comprise one or more programs for execution by a processor, such as the processor  shown in the example processing system  discussed below in connection with . Alternatively, the entire program or programs and\/or portions thereof implementing one or more of the processes represented by the flowcharts of  could be executed by a device other than the processor  (e.g., such as a controller and\/or any other suitable device) and\/or embodied in firmware or dedicated hardware (e.g., implemented by an ASIC, a PLD, an FPLD, discrete logic, etc.). Also, one or more of the machine readable instructions represented by the flowchart of  may be implemented manually. Further, although the example machine readable instructions are described with reference to the flowcharts illustrated in , many other techniques for implementing the example methods and apparatus described herein may alternatively be used. For example, with reference to the flowcharts illustrated in , the order of execution of the blocks may be changed, and\/or some of the blocks described may be changed, eliminated, combined and\/or subdivided into multiple blocks.","As mentioned above, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a tangible computer readable medium such as a hard disk drive, a flash memory, a read-only memory (ROM), a CD, a DVD, a cache, a random-access memory (RAM) and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively, the example processes of  may be implemented using coded instructions (e.g., computer readable instructions) stored on a non-transitory computer readable medium, such as a flash memory, a ROM, a CD, a DVD, a cache, a random-access memory (RAM) and\/or any other storage media in which information is stored for any duration (e.g., for extended time periods, permanently, brief instances, for temporarily buffering, and\/or for caching of the information). As used herein, the term non-transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals. Also, as used herein, the terms \u201ccomputer readable\u201d and \u201cmachine readable\u201d are considered equivalent unless indicated otherwise.","Example machine readable instructions  that may be executed to implement the on-demand secure desktop  of  are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the web browser  of the computing platform  is used to navigate to the secure desktop server  of the service node  in the provider network , as described above. At blocks  and , the on-demand secure desktop application  is downloaded to and executed by the web browser , as described above. At block , the on-demand secure desktop  establishes and provides the endpoint for the secure connection A with the trusted entity service node , as described above. Example machine readable instructions that may be used to implement the processing at block  are illustrated in , which is described in greater detail below. At block , the on-demand secure desktop  secures the local data , including any sensitive data associated with the trusted entity , that is used by the secure desktop  and\/or any trusted application executing in the context of the secure desktop , as described above. Example machine readable instructions that may be used to implement the processing at block  are illustrated in , which is described in greater detail below.","At block , the on-demand secure desktop  causes the web browser  to navigate to the trusted application server  of the service node  to download trusted application(s), such as the trusted application(s) T_APP, T_APP, etc., for execution by the web browser . At block , the on-demand secure desktop  provides its API  to the downloaded trusted applications to enable them to be executed in the context of the secure desktop , as described above. Example machine readable instructions that may be used to implement the processing at block  are illustrated in , which is described in greater detail below. At block , the trusted application(s) downloaded at block  are executed by the web browser  in the context of the on-demand secure desktop .","At block , the on-demand secure desktop  accesses the session data storage  of the service node  to detect whether any session data exists for a prior virtual secure desktop session that may be resumed by the on-demand secure desktop . If such session data exists at the session data storage , then at block  the on-demand secure desktop  accesses this remotely stored session data for the prior secure desktop session. At block , the on-demand secure desktop  resumes the prior secure desktop session using the session data stored remotely at the session data storage  of the service node .","Example machine readable instructions  that may be executed to implement the secure connection endpoint  of the on-demand secure desktop  of , and\/or used to implement the processing at block  of , are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the secure connection endpoint  generates a set of one or more session keys (e.g., public encryption keys, symmetric encryption keys, etc.) to be used to establish the secure connection A with the service node . For example, the secure connection endpoint  can use any type of key generation algorithm using any appropriate input information known by both the service node  (and\/or the trusted entity ) and the secure desktop  such that both the secure connection endpoint  and the service node  (and\/or the trusted entity ) independently generate the session key(s) for establishing the secure connection A. Such input information can include, for example, pre-exchanged user information (e.g., username, password, etc.) and\/or biometric data provided by a user, data associated with a security token provided by the service node  (and\/or the trusted entity ) to a user of the computing platform , etc., or any combination thereof.","At block , the secure connection endpoint  uses the generated session key(s) to establish the secure connection A. When the communication session between the on-demand secure desktop  and the trusted entity  (e.g., via the service node ) ends (block ), at block  the secure connection endpoint  revokes (e.g., via randomization or other intentional overwriting and\/or corruption of the stored key(s) to make the key(s) unusable) or otherwise discards the session key(s) and closes the secure connection A with the service node .","Example machine readable instructions  that may be executed to implement the encryption processor  of the on-demand secure desktop  of , and\/or used to implement the processing at block  of , are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the secure connection endpoint  obtains a set of one or more security keys (e.g., public encryption keys, symmetric encryption keys, etc.) to be used by the encryption processor  to secure the local data  used by the secure desktop  and associated with the trusted entity , as described above. In some examples, the processing at block  of  can be omitted and the security key(s) obtained by the on-demand secure desktop  at block  of  may be the same as the session key(s) generated by the secure desktop  at block  of .","At blocks  and , the encryption processor  of the secure desktop  uses the security key(s) to perform just-in-time encryption of local data  to be written by the secure desktop  (or a trusted application executing in the context of the secure desktop ) to the storage , and to perform just-in-time decryption of the local data  to be read by the secure desktop  (or a trusted application executing in the context of the secure desktop ) from the storage , as described above. At block , the encryption processor  determines whether the secure connection A has been terminated and, thus, the current session between the on-demand secure desktop  and the trusted entity  has ended. If the current session between the secure desktop  and the trusted entity  has ended (block ), then at block  the encryption processor  determines whether off-line data security is supported for local data associated with this particular trusted entity . If off-line data security is supported (block ) and, thus, off-line access of the secure local data  associated with this trusted entity  is permitted, then at block  the encryption processor  initializes an off-line session timer or similar time counting mechanism to enable determination of whether a time period for off-line data access has expired, as described above. After the time period has expired (block ) or if off-line data security is not supported (block ), then at block  the encryption processor  revokes or otherwise discards the security key(s) associated with this trusted entity  to thereby prevent subsequent access to the local data  associated with the trusted entity .","Example machine readable instructions  that may be executed to implement the API  of the on-demand secure desktop  of , and\/or used to implement the processing at block  of , are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the on-demand secure desktop  receives a request from an application to initiate a data interchange with the secure desktop . At block , the on-demand secure desktop  exposes the authentication API  of its API  to the application to enable the application to provide authentication information to the secure desktop , as described above. At block , the secure desktop  authenticates the application using the authentication information received via the authentication API . If the application is an untrusted application, such as one of the untrusted applications  or , then authentication is unsuccessful (block ), and at block  the secure desktop  refuses the application's request to initiate the data interchange.","However, if the application is a trusted application, such as the trusted application T_APP or T_APP, then authentication is successful (block ), and at block  the on-demand secure desktop  exposes the communication API  of its API  to enable the trusted application to access the secure communication endpoint  of the secure desktop  and thereby access the secure connection A with the trusted entity service node , as described above. At block , the secure desktop  exposes the storage API  of its API  to enable the trusted application to access the secure local data  stored in the storage , as described above. At block , the secure desktop  exposes the inter-process API  of its API  to enable the trusted application to communicate with other trusted applications, such as the trusted applications T_APP and\/or T_APP, executing in the context of the on-demand secure desktop .","Example machine readable instructions  that may be executed to implement the service node  of  are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the trusted entity gateway  of the service node  establishes the secure connection  with the trusted entity , as described above. At block , the secure desktop server  of the service node  receives a first request from the web browser  of the computing platform  to download the on-demand secure desktop application , as described above. At block , the secure desktop server  authenticates the computing platform  and\/or a user associated with the request to download the on-demand secure desktop application . Any type of authentication can be employed by the processing at block .","If authentication is successful (block ), then at block  the policy enforcer  of the service node  processes device and\/or user profiles associated with the computing platform  to perform policy enforcement to control operation of the on-demand secure desktop . Example machine readable instructions that may be used to implement the processing at block  are illustrated in , which is described in greater detail below. At block , the secure desktop server  downloads (in response to the first request received at block  and per the policy enforcement performed at block ) the on-demand secure desktop application  to the web browser  of the computing platform , as described above. At block , the secure connection interface  of the service node  establishes the secure connection A with the on-demand secure desktop application , and connects the secure connection A with the secure connection  to the trusted entity . At block , the trusted application server  of the service node  receives second and subsequent request(s) from the web browser  of the computing platform  for trusted application(s) to be downloaded to the web browser . At block , the trusted application server  also downloads (in response to the second and subsequent request(s) and per the policy enforcement performed at block ) the trusted application(s) to the web browser  for execution in the context of the on-demand secure desktop application .","Example machine readable instructions  that may be executed to implement the policy enforcer  of the service node  of , and\/or used to implement the processing at block  of , are represented by the flowchart shown in . With reference to the preceding figures, the machine readable instructions  of  begin execution at block  at which the profile storage  receives policy profile(s), such as user and\/or device profile(s), from one or more trusted entities , and\/or from the provider network . Policy profile(s) may be updated at, added to, removed from, etc., the profile storage  at any time and\/or at any interval. At block , the policy enforcer  determines whether secure desktop activity is detected, such as corresponding to a request for downloading of the on-demand secure desktop  and\/or a request for downloading of a trusted application for execution in the context of the secure desktop .","If secure desktop activity is detected (block ), then at block  the policy enforcer  determines whether a device profile exists in the profile storage  for the computing platform  executing the on-demand secure desktop  associated with the detected desktop activity. If such a device profile exists (block ), then at block  the policy enforcer  processes the device profile to, for example, (1) determine whether to allow or deny download and\/or execution of the on-demand secure desktop  on the computing platform , and\/or (2) determine whether to allow or deny download and\/or execution of one or more trusted applications on the computing platform , etc., as described above. At block  the policy enforcer  determines whether a user profile exists in the profile storage  that is associated with the user of the computing platform  executing the on-demand secure desktop  associated with the desktop activity detected at block . If such a user profile exists (block ), then at block  the policy enforcer  processes the user profile to, for example, (1) determine whether to allow or deny download and\/or execution of the on-demand secure desktop  on the computing platform , and\/or (2) determine whether to allow or deny download and\/or execution of one or more trusted applications on the computing platform , etc., as described above.",{"@attributes":{"id":"p-0076","num":"0075"},"figref":"FIG. 11","b":["1100","1100"]},"The system  of the instant example includes a processor  such as a general purpose programmable processor. The processor  includes a local memory , and executes coded instructions  present in the local memory  and\/or in another memory device. The processor  may execute, among other things, the machine readable instructions represented in . The processor  may be any type of processing unit, such as one or more Intel\u00ae microprocessors from the Pentium\u00ae family, the Itanium\u00ae family and\/or the XScale\u00ae family, one or more microcontrollers from the ARM\u00ae and\/or PIC\u00ae families of microcontrollers, etc. Of course, other processors from other families are also appropriate.","The processor  is in communication with a main memory including a volatile memory  and a non-volatile memory  via a bus . The volatile memory  may be implemented by Static Random Access Memory (SRAM), Synchronous Dynamic Random Access Memory (SDRAM), Dynamic Random Access Memory (DRAM), RAMBUS Dynamic Random Access Memory (RDRAM) and\/or any other type of random access memory device. The non-volatile memory  may be implemented by flash memory and\/or any other desired type of memory device. Access to the main memory ,  is typically controlled by a memory controller (not shown).","The processing system  also includes an interface circuit . The interface circuit  may be implemented by any type of interface standard, such as an Ethernet interface, a universal serial bus (USB), and\/or a third generation input\/output (3GIO) interface.","One or more input devices  are connected to the interface circuit . The input device(s)  permit a user to enter data and commands into the processor . The input device(s) can be implemented by, for example, a keyboard, a mouse, a touchscreen, a track-pad, a trackball, an isopoint and\/or a voice recognition system.","One or more output devices  are also connected to the interface circuit . The output devices  can be implemented, for example, by display devices (e.g., a liquid crystal display, a cathode ray tube display (CRT)), by a printer and\/or by speakers. The interface circuit , thus, typically includes a graphics driver card.","The interface circuit  also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network (e.g., an Ethernet connection, a digital subscriber line (DSL), a telephone line, coaxial cable, a cellular telephone system, etc.).","The processing system  also includes one or more mass storage devices  for storing machine readable instructions and data. Examples of such mass storage devices  include floppy disk drives, hard drive disks, compact disk drives and digital versatile disk (DVD) drives. In some examples, the mass storage device  may implement the storage , session data storage  and\/or the profile storage . Additionally or alternatively, in some examples the volatile memory  may implement the storage , session data storage  and\/or the profile storage .","The coded instructions  of  may be stored in the mass storage device , in the volatile memory , in the non-volatile memory , in the local memory  and\/or on a removable storage medium, such as a CD or DVD .","At least some of the above described example methods and\/or apparatus are implemented by one or more software and\/or firmware programs running on a computer processor. However, dedicated hardware implementations including, but not limited to, application specific integrated circuits, programmable logic arrays and\/or other hardware devices can likewise be constructed to implement some or all of the example methods and\/or apparatus described herein, either in whole or in part. Furthermore, alternative software implementations including, but not limited to, distributed processing or component\/object distributed processing, parallel processing, or virtual machine processing can also be constructed to implement the example methods and\/or apparatus described herein.","To the extent the above specification describes example components and functions with reference to particular standards and protocols, it is understood that the scope of this patent is not limited to such standards and protocols. For instance, each of the standards for Internet and other packet switched network transmission (e.g., Transmission Control Protocol (TCP)\/Internet Protocol (IP), User Datagram Protocol (UDP)\/IP, HyperText Markup Language (HTML), HyperText Transfer Protocol (HTTP)) represent examples. Such standards are periodically superseded by faster or more efficient equivalents having similar functionality. Accordingly, replacement standards and protocols having similar functions are equivalents which are contemplated by this patent and are intended to be included within the scope of the accompanying claims.","Additionally, as used herein, when the phrase \u201cat least\u201d is used as a preamble of a claim, it is open-ended in the same manner as the term \u201ccomprising\u201d is open ended.","Furthermore, although this patent discloses example systems including software or firmware executed on hardware, it should be noted that such systems are merely illustrative and should not be considered as limiting. For example, it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware, exclusively in software, exclusively in firmware or in some combination of hardware, firmware and\/or software. Accordingly, while the above specification described example systems, methods and articles of manufacture, the examples are not the only way to implement such systems, methods and articles of manufacture. Therefore, although certain example methods, apparatus and articles of manufacture have been described herein, the scope of coverage of this patent is not limited thereto. On the contrary, this patent covers all methods, apparatus and articles of manufacture fairly falling within the scope of the claims either literally or under the doctrine of equivalents."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0004","num":"0003"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0005","num":"0004"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0006","num":"0005"},"figref":["FIG. 3","FIG. 1"]},{"@attributes":{"id":"p-0007","num":"0006"},"figref":["FIG. 4","FIGS. 1-3","FIG. 1"]},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 5","FIGS. 1"],"b":"3"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":["FIG. 6","FIG. 5","FIGS. 1"],"b":"3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":["FIG. 7","FIG. 5","FIGS. 1"],"b":"3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 8","FIG. 5","FIGS. 1"],"b":"3"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":["FIG. 9","FIGS. 1"],"b":"2"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 10","FIG. 9","FIGS. 1"],"b":"2"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":["FIG. 11","FIGS. 5-9","FIGS. 1","FIGS. 1"],"b":["10","3","2"]}]},"DETDESC":[{},{}]}
