---
title: Minimal download and simulated page navigation features
abstract: Embodiments are provided that include client-server computing architectures that use minimal download features and functionality as part of page navigation operations, but are not so limited. In an embodiment, a client-server computer system uses a page transition strategy to navigate between electronic pages based in part on script, style, content, and/or other page differences that can be used as part of providing minimal download features and functionality. A method of an embodiment operates to package page incremental rendering information for use in rendering a new electronic page without having to reapply common aspects of the new electronic page and a reference electronic page. Other embodiments are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700691&OS=08700691&RS=08700691
owner: Microsoft Corporation
number: 08700691
owner_city: Redmond
owner_country: US
publication_date: 20111205
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTION"],"p":["The computing age has dramatically affected the consumer knowledge base which, in turn, requires device and application providers to provide user-friendly and rich application functionality. Collaboration or content management systems provide a natural place to share ideas and information due in part to access and management abilities offered to multiple users, rich customization options, and a lightweight collaborative environment. However, a general problem pertains to reducing the amount of data sent to a web page during a navigation operation. One solution uses data compression and non-navigation operations, requiring a client to request specific data changes. Unfortunately, disadvantages of such a technique include: a) a complete rewrite of a web page, b) each individual part of a page may update separately, which can be very expensive and inefficient, and c) page changes are not recorded in a browser history such that the back and forward buttons or other navigation features do not operate as expected.","This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","Embodiments are provided that include client-server computing architectures that use minimal download features and functionality as part of page navigation operations, but are not so limited. In an embodiment, a client-server computer system uses a page transition strategy to navigate between electronic pages, such as web pages for example, based in part on script, style, content, and\/or other page differences that can be used as part of providing minimal download features and functionality. A method of an embodiment operates to package page incremental rendering information for use in rendering a new electronic page without having to reapply common aspects of the new electronic page and a reference electronic page. Other embodiments are also disclosed.","These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.",{"@attributes":{"id":"p-0013","num":"0012"},"figref":["FIG. 1","FIG. 1"],"b":["100","100","102","104","104","104"]},"As described below, a minimal download technique determines differences between a user's current web page and a new requested web page, packaging determined differences for sending to a client for local difference application to update one or multiple areas of the requested web page on a screen\/display. The technique can be applied to a class of existing webpages with minimal updating, so there is no need to rewrite entire suites of webpages. The server  of an embodiment includes minimal download features  configured in part to perform page processing services\/features as part of providing difference packages including page incremental rendering information for navigation operations between various electronic pages, as described below.","In one embodiment, the minimal download features  activate as part of a minimal download strategy during a page navigation operation when the server  determines that a minimal download page transition process is to be used. The minimal download features  can operate to build a layer of indirection between page script and a window object, document object, and\/or form object of a page and thereby control events\/notifications and lifetime of any associated hooks. The layer of indirection provides for controlled execution of various browser code for execution during page navigation simulation. In an embodiment, when a page is navigated away from, the minimal download features  disconnect the page objects from the window, document and form objects, and prepare to render a new or target electronic page resulting from a user interaction (e.g., enters a URL, clicks a URL, etc.).","A failover process can be used to enable the client  to perform a normal navigation operation, such as by downloading page components used to render the page locally at the client  absent using the minimal download features  and\/or page incremental rendering information. The server  is configured to generate and provide packages and\/or other substantiations of page differences according to electronic page requests issued from clients when minimal download features are used. For example, a user can use a browser type application to communicate with the server  and request an electronic page as part of a page navigation operation, where the server  can provide a difference package including page incremental rendering information corresponding to changed aspects of a requested page for use by the client .","The server  can process the request and determine whether to direct the client  to a failover process and normal page navigation procedures, or provide a server-generated difference package to process locally at the client  as part of a page transition operation. For example, the client  can be incorporated into a user computer device as part of a browser type user interface (UI) component that enables a user to interact with and access electronic pages based in part on aspects of a transmitted uniform resource locator (URL), wherein the server  can process or examine each transmitted URL and determine whether to implement normal page navigation operations or minimal download operations as the user navigates between electronic pages.","The server  of an embodiment can be configured to generate each difference package based in part on differences between aspects of a new or target page (e.g., determined by a URL input (e.g., clicked\/selected URL)) and aspects of a current or previously rendered page. For example, the server  can examine a URL associated with a page request to determine if the requested page is part of a class of electronic pages. If the requested page is configured for applying page incremental rendering information (e.g., based on a collaboration master template or page of a family of electronic pages), the server  can provide differences between the new page and reference page to provide the page incremental rendering and any other information for use by the client  in rendering the new page. The server  of one embodiment operates to generate page difference information that includes one or more of a page script set, a page style sheet set, and\/or markup and other differences (e.g., hypertext markup language (HTML) and asynchronous JAVASCRIPT and extensible markup language (XML), hidden input fields, form action, etc.), as described further below.","It will be appreciated that other user devices\/systems can be included that couple, communicate, and\/or interact with one or more components of the environment  as part of providing page navigation features and functionality. Each server can include one or multiple physical serving machines, including co-location, remote-location, and\/or distributed architectures. End-users can use different interactive applications, including browser-type applications such as those used with smartphones, laptop computers, tablet computers, desktop computers, and\/or other computer\/communication interfaces, to access features of the environment . For example, an enterprise user can use a browser or other application to create and\/or access a SHAREPOINT worksite using a browser-type interface. In an embodiment, a user can use a browser application or interface to leverage the features and functionality of the exemplary computing environment , including existing and\/or future standards, cross-browser compatible markup, etc.",{"@attributes":{"id":"p-0020","num":"0019"},"figref":["FIG. 2","FIG. 2"],"b":["200","202","200"]},"If the request is an initial page request, the process  at  provides the electronic page associated with the initial request including any relevant script, style, and\/or markup information. If the request is not an initial page request and the requested page is of the same page class or family, the process  at  generates a difference package that includes incremental rendering information associated with a currently used electronic page (e.g., in focus) and a target electronic page associated with the page request.","In an embodiment, the process  at  operates to generate a difference package that includes differences between a requested or target electronic page and a different version of the requested page taking into account global page scripts, submit scripts, script references, inline style information and\/or references, markup, markup differences, etc. Differences can be packaged into the difference package and communicated to a requesting client for local application. For example, new inline script, script file references, style changes, etc. can be included in the difference package or file and thereafter applied locally as part of rendering a new electronic page.","At , the process  uses the generated difference package to render the requested electronic page for the user. In one embodiment, the process  at  uses aspects of a minimal download component to update a window object locally using the difference package (e.g., page script set, page style set, HTML, etc.). For example, a client computing device can use encoded navigation features to process a difference package as part of building a state of a window object using variables associated with a template or master page along with incremental rendering information provided in the difference package to render the new page including firing page load events, executing script, etc. In one embodiment, JAVASCRIPT run time can be based on properties of the windows object.","It will be appreciated that processing, networking, and\/or other features can assist in providing page navigation features and interfaces. Aspects of the process  can be distributed to and among other components of a computing architecture, and client, server, and other examples and embodiments are not intended to limit features described herein. While a certain number and order of operations is described for the exemplary flow of , it will be appreciated that other numbers and\/or orders can be used according to desired implementations.",{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 3A","b":["302","304","306","308","310","312","314","306","308","302"]},"When a user navigates away from a page, the minimal download component  of an embodiment operates to disconnect page objects from the window object, document object, and form object in preparing to render a new page. When a script calls the add event listener component , the script can also call the remove event listener component  to remove an associated hook when the notifications are no longer needed. Since normal navigation behavior does not require a call to a remove function, the minimal download component  of one embodiment operates to remove the remove event listener component  when navigating to a new page. The minimal download component  provides a type of handling for other application programming interfaces (APIs) (e.g., setTimeout\/clearTimeout, setInterval\/clearInterval, etc.). In an embodiment, a plurality of APIs are used to gather page incremental rendering information for use in generating a new electronic page as part of navigating away from a currently rendered page.",{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 3B","b":["316","318","320","320","323","316","318","316","321","318","322","324","326","328","330"]},"The exemplary computing architecture uses a set of application programming interfaces (APIs) to build either the regular HTMLx page or page incremental rendering information  (e.g., difference package including page differences between a new page and a baseline or reference page (e.g., master family template)). For example, the APIs can be configured to separate and\/or identify the page HTMLx markup from resources such as JAVASCRIPT, CSS declarations, etc. HTMLx markup can reference the JAVASCRIPT and CSS declarations.","A minimal download page navigation request can determine whether to render a new page incrementally using page incremental rendering information  or render the new page using a default rendering procedure. For example, a server can examine a request to determine whether to provide a difference package including the page incremental rendering information  for use in rendering a new page and without having to re-communicate, re-execute, and\/or re-apply common portions (e.g., script, styles, etc.) associated with a new page and a prior or reference page (e.g., a master page). For example, a new page can be rendered absent having to re-download, re-compile, and\/or re-apply common portions of a master template and a previously rendered page that is related to or associated with the master template.",{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 3C","b":["334","334","332","334"]},{"@attributes":{"id":"p-0032","num":"0031"},"figref":"FIG. 4","b":["400","402"]},"At , the server receives and processes the page request. The server of an embodiment can be configured to include an initial request handler that identifies a site that corresponds with the request and determines if a site enables page transitions using page incremental rendering information. For example, a \u201cMinimal Download\u201d property can be set to either redirect to start.aspx+the content represented by an original URL, or serve the requested or new page. Thus, according to an embodiment, based in part on the request processing, it is determined whether page incremental rendering information is to be used to render a new page.","If page incremental rendering information is not to be used, at  a failover process is implemented to provide normal URL handling operations at , and then the process  returns to . For example, the server can use information associated with page request (e.g., URL) to determine if the requested page is within a page family or satisfies some other associative criteria such that page incremental rendering information can be used to provide a minimal download page transition process as the user navigates from one page to another page, including backward and forward page navigation operations. Failover can include use of normal or default browser code as one example or, as another example, the client may need to refresh a master page and then proceed with minimal download navigation operations.","If page incremental rendering information is to be used (e.g., requested page can be incrementally rendered), at  the process  uses a page snapshot as part of identifying differences and\/or managing snapshot updates. It will be appreciated that a page snapshot can be taken upon or after initially rendering a page and\/or updated and\/or saved at different intervals or times. A page snapshot can include runtime code such as JAVASCRIPT runtime code for example and can be used as a reference when generating and applying page incremental rendering information. At , the client requests a difference package that includes page incremental rendering information from the server.","At , the server of an embodiment generates the difference package using the page snapshot to generate one or more of a page script set, styles set, markup, and\/or other information that comprises page incremental rendering information. In an embodiment, the server can operate for an entire page to create: an array of the scripts registered by all controls, an array of styles registered by all controls, and\/or an array of hidden input fields registered by all controls. As part of such an embodiment, the server can be configured to generate page incremental rendering information by creating and storing a string representation of the rendered contents for portions of a page to be visually updated, package the scripts, styles, input fields, rendered contents, and\/or other resources, and\/or send the package to a client for processing.","At , the client receives the difference package and fires page unload operations at . In an embodiment, before firing page unload or other operations, the client can be configured to first check if a JAVASCRIPT variable exists which indicates transition is possible, and then request page changes from the server. At , the client removes portions of the previously rendered page, such as specific global variables, styles, and\/or markup using the page snapshot. The client of an embodiment can be configured to destroy\/remove all the objects (and references) for each \u201cglobal init\u201d function run on a previous page, and\/or remove the style from the global style array for each style added on the previous page that is not required on the new page.","At , the client assembles the difference information including script, styles, and\/or markup information, and updates the page snapshot at . As one example, the client can be configured to: 1) find the corresponding div in a loaded page and set the content of a div element (e.g., div.innerHTML) to the appropriate string to represent each part of the HTML section of the difference package which corresponds to an area to be updated\/modified; 2) execute only the \u201cglobal\u201d function to initialize related global variables if a script file has already been loaded or load an entire script file for each script file to be applied to the new page if the script file has not already been loaded; 3) load an entire style file (e.g., CSS file) to be applied to the page if the style file has not already been loaded for each style file; 4) execute the inline script for the new page; and\/or 5) add an inline style to a global style array for each inline style of the new page. In an embodiment, the server can be configured to update and\/or maintain page snapshots and\/or differences therebetween.","At , the client completes the incremental page transition and renders the page, loading inline images, video, etc. at . At , the client runs the global page script and fires page load events at , and returns to . It will be appreciated that order of operations can change or individual and\/or collectively performed at other times, such as reversing the order of the operations at  and  as an example.","It will be appreciated that processing, networking, and\/or other features can assist in providing page navigation features and interfaces. Aspects of the process  can be distributed to and among other components of a computing architecture, and client, server, and other examples and embodiments are not intended to limit features described herein. While a certain number and order of operations is described for the exemplary flow of , it will be appreciated that other numbers and\/or orders can be used according to desired implementations.",{"@attributes":{"id":"p-0041","num":"0040"},"figref":["FIG. 5","FIG. 5"],"b":["502","506","504","508","510","516","504","518","508","502","520","504","522","524","504","510","512","520","504","526","522"]},"As part of rendering the new page , the client  applies the page-specific style file (e.g., B.css) globally at time , evaluates the page-specific script file (e.g., A.js) at time , and evaluates inline script at . Apply styles globally of an embodiment includes adding the style file (e.g., B.css) to an array of style files associated with the associated document object model (DOM). Evaluating script of a script file (e.g., A.js) of an embodiment includes creating a script element that references or points to the script file (A.js) and adding the script element to the DOM, wherein all contained script of the script file will be executed. Evaluating global script from a script file (e.g., A.js) of an embodiment includes executing only a global function defined in the script file and initializing all the global variables needed for other code in the script file to function correctly.","The client  then issues a new request at time  to the server  for new page . Note at this point, page incremental rendering information is to be used as part of the minimal download functionality since the new page  is associated with page  (e.g., in the same page template class (MDS=1 of the URL). At time , the server  page processing operations determine that component  requires a previously identified page-specific script file (e.g., A.js), component  requires a new page-specific script file (C.js), and component  requires a new page-specific style file (e.g., D.css) for the new page .","The server  responds to the new page request at time  by returning a package of encoded information that includes the page incremental rendering information for the new page  (C.js and D.css). As part of rendering the new page , the client removes B.css globally at time , evaluates global script of A.js at time , evaluates the new script file (e.g., C.js) at , evaluates new style file at , and evaluates inline script at . Removing styles globally of an embodiment includes removing the associated style file (e.g., B.css) from the array of style files in the DOM.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":"FIGS. 6A-6C","b":"600"},{"@attributes":{"id":"p-0046","num":"0045"},"figref":"FIG. 6A","b":["600","602"]},{"@attributes":{"id":"p-0047","num":"0046"},"figref":["FIG. 6B","FIG. 6B"],"b":["600","602","606","608","610","612","602","614","610","612"]},{"@attributes":{"id":"p-0048","num":"0047"},"figref":"FIG. 6C","b":["600","610","612","614"]},"While certain embodiments are described herein, other embodiments are available, and the described embodiments should not be used to limit the claims. Exemplary communication environments for the various embodiments can include the use of secure networks, unsecure networks, hybrid networks, and\/or some other network or combination of networks. By way of example, and not limitation, the environment can include wired media have the capability of storing in computer memory, which computer memory includes such as a wired network or direct-wired connection, and\/or wireless media such as acoustic, radio frequency (RF), infrared, and\/or other wired and\/or wireless media and components. In addition to computing systems, devices, etc., various embodiments can be implemented as a computer process (e.g., a method), an article of manufacture, such as a computer program product or computer readable media, computer readable storage medium, and\/or as part of various communication architectures.","Suitable programming means include any means for directing a computer system or device to execute steps of a method, including for example, systems comprised of processing units and arithmetic-logic circuits coupled to computer memory, which systems electronic circuits configured to store data and program instructions. An exemplary computer program product is useable with any suitable data processing system. While a certain number and types of components are described, it will be appreciated that other numbers and\/or types and\/or configurations can be included according to various embodiments. Accordingly, component functionality can be further divided and\/or combined with other component functionalities according to desired implementations.","The term computer readable media as used herein may include computer storage media. Computer storage media may include volatile and nonvolatile, removable and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data. System memory, removable storage, and non-removable storage are all computer storage media examples (i.e., memory storage.). Computer storage media may include, but is not limited to, RAM, ROM, electrically erasable read-only memory (EEPROM), flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store information and which can be accessed by a computing device. Any such computer storage media may be part of device.","The embodiments and examples described herein are not intended to be limiting and other embodiments are available. Moreover, the components described above can be implemented as part of networked, distributed, and\/or other computer-implemented environment. The components can communicate via a wired, wireless, and\/or a combination of communication networks. Network components and\/or couplings between components of can include any of a type, number, and\/or combination of networks and the corresponding network components include, but are not limited to, wide area networks (WANs), local area networks (LANs), metropolitan area networks (MANs), proprietary networks, backend networks, etc.","Client computing devices\/systems and servers can be any type and\/or combination of processor-based devices or systems. Additionally, server functionality can include many components and include other servers. Components of the computing environments described in the singular tense may include multiple instances of such components. While certain embodiments include software implementations, they are not so limited and encompass hardware, or mixed hardware\/software solutions. Other embodiments and configurations are available.","Exemplary Operating Environment","Referring now to , the following discussion is intended to provide a brief, general description of a suitable computing environment in which embodiments of the invention may be implemented. While embodiments of the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer, those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems, devices, and\/or program modules.","Generally, program modules include routines, programs, components, data structures, and other types of structures that perform particular tasks or implement particular abstract data types. Moreover, those skilled in the art will appreciate that the embodiments of the invention may be practiced with other computer system configurations, including hand-held devices, multiprocessor systems, microprocessor-based or programmable consumer electronics, minicomputers, mainframe computers, and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment, program modules may be located in both local and remote memory storage devices.","Referring now to , an illustrative operating environment for embodiments of the invention will be described. As shown in , computer  comprises a general purpose server, desktop, laptop, handheld, or other type of computer capable of executing one or more application programs. The computer  includes at least one central processing unit  (\u201cCPU\u201d), a system memory , including a random access memory  (\u201cRAM\u201d) and a read-only memory (\u201cROM\u201d) , and a system bus  that couples the memory to the CPU . A basic input\/output system containing the basic routines that help to transfer information between elements within the computer, such as during startup, is stored in the ROM . The computer  further includes a mass storage device  for storing an operating system , application programs, and other program modules.","The mass storage device  is connected to the CPU  through a mass storage controller (not shown) connected to the bus . The mass storage device  and its associated computer-readable media provide non-volatile storage for the computer . Although the description of computer-readable media contained herein refers to a mass storage device, such as a hard disk or CD-ROM drive, it should be appreciated by those skilled in the art that computer-readable media can be any available media that can be accessed or utilized by the computer .","By way of example, and not limitation, computer-readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non-volatile, removable and non-removable media implemented in any method or technology for storage of information such as computer-readable instructions, data structures, program modules or other data. Computer storage media includes, but is not limited to, RAM, ROM, EPROM, EEPROM, flash memory or other solid state memory technology, CD-ROM, digital versatile disks (\u201cDVD\u201d), or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other medium which can be used to store the desired information and which can be accessed by the computer .","According to various embodiments of the invention, the computer  may operate in a networked environment using logical connections to remote computers through a network , such as a local network, the Internet, etc. for example. The computer  may connect to the network  through a network interface unit  connected to the bus . It should be appreciated that the network interface unit  may also be utilized to connect to other types of networks and remote computing systems. The computer  may also include an input\/output controller  for receiving and processing input from a number of other devices, including a keyboard, mouse, etc. (not shown). Similarly, an input\/output controller  may provide output to a display screen, a printer, or other type of output device.","As mentioned briefly above, a number of program modules and data files may be stored in the mass storage device  and RAM  of the computer , including an operating system  suitable for controlling the operation of a networked personal computer, such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond, Wash. The mass storage device  and RAM  may also store one or more program modules. In particular, the mass storage device  and the RAM  may store application programs, such as word processing, spreadsheet, drawing, e-mail, and other applications and\/or program modules, etc.","It should be appreciated that various embodiments of the present invention can be implemented (1) as a sequence of computer implemented acts or program modules running on a computing system and\/or (2) as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly, logical operations including related algorithms can be referred to variously as operations, structural devices, acts or modules. It will be recognized by one skilled in the art that these operations, structural devices, acts and modules may be implemented in software, firmware, special purpose digital logic, and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.","Although the invention has been described in connection with various exemplary embodiments, those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly, it is not intended that the scope of the invention in any way be limited by the above description, but instead be determined entirely by reference to the claims that follow."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0006","num":"0005"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIGS. 3A-3C"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIGS. 6A-6C"},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 7"}]},"DETDESC":[{},{}]}
