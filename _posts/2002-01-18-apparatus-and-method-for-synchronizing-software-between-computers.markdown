---
title: Apparatus and method for synchronizing software between computers
abstract: A method and apparatus for synchronizing software between computers are disclosed. A software fix manager compares a preferred software inventory with a software inventory from a computer that is to be synchronized and, from this comparison, creates a number of software product synchronizations. An update manager uses the software fix list to apply software product synchronizations to the computer. Preferably, the computer can be brought to the same fix level or product level, if desired, as the preferred software inventory through this process. The software fix manager can place synchronizations in a fix list. There can be multiple software product synchronizations per software product, and the synchronizations can be applied to a computer by removing a software product fix or installing a product software fix. The current invention may also be applied to software products themselves, by installing or removing software products. The present invention potentially has its best application in networks, as numerous target computers or groups of target computers may be synchronized with a preferred software inventory of a model system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=06968550&OS=06968550&RS=06968550
owner: International Business Machines Corporation
number: 06968550
owner_city: Armonk
owner_country: US
publication_date: 20020118
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["REFERENCE TO PARENT APPLICATION","BACKGROUND OF THE INVENTION","BRIEF SUMMARY OF INVENTION","DETAILED DESCRIPTION OF INVENTION"],"p":["This application is a divisional of U.S. Ser. No. 09\/314,951, filed on May 19, 1999 by Michael John Branson et al., and entitled \u201cApparatus and Method for Synchronizing Software Between Computers\u201d, which is hereby incorporated by reference.","1. Technical Field","This invention generally relates to updating software. More specifically, this invention relates to an apparatus and method for synchronizing software between one or more computers.","2. Background Art","Computers have progressed from taking rooms full of vacuum tubes to becoming tiny, hand-held devices. Computers in some form or another control most of the products with which we come in contact during our lives. They control the anti-lock brake systems in our cars, the timing of the lights that we encounter on our way to work, where the elevator stops on the way to our offices, and temperature of our offices. Furthermore, they control and affect our primary work environment, as most people use computers every day as part of their jobs.","As computers have become ubiquitous, so has the software that is needed to run them. While computers evolved from tubes to miniature devices made of silicon, software has also developed from punch cards to sophisticated programs capable of rendering and shading three-dimensional objects, performing complex calculations on simulated loaded beams, and performing other feats that were previously impossible. Not only has the sophistication of software dramatically increased, but the pace of additions, modifications, and changes to software has quickened dramatically.","Previously, a new release of a software product occurred about two or three years after the previous release of the product. Today, a two year timetable seems to be preferred, and many timetables are shorter. Furthermore, because of the complexity of software, as soon as the software product is released, errors (commonly called \u201cbugs\u201d, after a famous incident where an insect shorted out a vacuum tube and caused errors) are found. These errors are generally attended to immediately by the software product's programmers, who find a \u201cfix\u201d or \u201cpatch\u201d for the program. These fixes or patches are usually distributed to registered owners of the software product, or placed on an Internet website where the software product owner can download the fix. Thus, between major updates of software are numerous (and sometimes substantial) fixes to the software product.","These multiple updates and fixes have become problematic for many individuals and businesses. Due to the sheer number of fixes for all of the software products on a computer system, the individual responsible for maintaining the computer system may not even know that fixes or updates exist for the system. The individual must himself or herself ferret out the fixes and updates. In addition, there is the potentially devastating effect that one software fix may actually \u201cbreak\u201d or cause errors in another software program or even the software product that the fix is supposed to update.","These problems are particularly onerous for computers that are connected through one or more networks. In these systems, there is generally one or more system administrators that are responsible for the upkeep of a number of computer systems. For instance, a large network may have several system administrators, each of which are responsible for a number of computer systems in his or her area. The system administrator for the north-west area might put a patch that fixes a security problem on one computer in her network. She would test the patch to ensure that it causes less harm than benefit, and then manually apply the patch to each computer in her area.","Meanwhile, the system administrator (SA) in charge of the computers in the south-east area has applied a fix to an operating system component on one computer in the network. Unfortunately, this fix has had a devastating effect on one important software product. The south-east area SA decides to add an update to the software product in hopes that this will eliminate the effect caused by the operating system fix. However, the effect is still there after application of the update, but the update has solved other problems associated with the software product. The south-east area SA decides to uninstall the operating system component, but the component does not uninstall correctly, and the SA must manually uninstall the fix and reinstall part or all of the operating system.","Neither SA knows what the other SA is doing. In this example, the north-west area SA might apply the same fix to the same operating system and experience the same effects. The south-east SA might not know that a patch for the security flaw exists and may be leery of applying the patch after the destruction caused by the operating system fix. Each SA might rediscover the problems or benefits caused by a fix or patch that the other has already discovered.","These system administrators have other administration duties that are also inefficient. It is very hard to determine the fix level of any computer without actually visiting that computer. Thus, one computer may have a patch or fix installed, but the computer immediately next to it may not have the same patch or fix. This can lead to level mismatches in the enterprise, where some computers are at one fix level and other computers are at another fix level.","Level mismatches can sometimes create problems. For instance, a patch may be developed that fixes a problem with a database that, in certain cases, could cause a non-obvious error. If this patch is applied to some but not all of the computers in a network, a person accessing more than one database (on multiple computers) may get different, anomalous results. Even if the person sees the anomaly, he or she might give the database the benefit of the doubt and use the erroneous information regardless. If all databases on all computers had the same patch, the non-obvious error would not occur.","Even if the SA can remotely determine the software fixes that are applied on one computer, additional or different software fixes for that computer must be manually installed. A significant quantity of time can be invested in just updating computers, as each computer must be accessed to determine the software fixes that are installed, and then additional or different software fixes must be applied to each computer. In small networks this process can take quite a bit of time, and in large networks this process can take weeks or months.","Without a method and apparatus for synchronizing software in a network, system administrators will continue to rediscover software problems, will have more computers that are at different software fix levels, will have to keep track of the software fix level of each computer in the network, and will have to manually update each computer in the network.","The preferred embodiments of the present invention provide a method and apparatus for synchronizing software between computers. A software fix manager compares a preferred software inventory with a software inventory from a computer that is to be synchronized. The software fix manager generates a number of synchronizations from this comparison, preferably packaging these synchronizations into a fix list. An update manager uses the software fix list to apply software product synchronizations to the computer. Preferably, the computer can be brought to the same fix level or product level, if desired, as the preferred software inventory through this process.","The fix list is a list of software product synchronizations. There can be multiple software product synchronizations per software product, and the synchronizations can be applied to a computer by removing a software product fix or installing a product software fix. The current invention may also be applied to software products themselves, by installing or removing software products.","The present invention potentially has its best application in networks, as numerous target computers or groups of target computers may be synchronized with a preferred software inventory of a model system.","The foregoing and other features and advantages of the present invention will be apparent in the preferred embodiments of the invention, as illustrated in the accompanying drawings.","The preferred embodiments of the present invention provide a method and apparatus for synchronizing software between computers. A software fix manager compares a preferred software inventory with a software inventory from a computer that is to be synchronized. The software fix manager creates a number of software product synchronizations based on this comparison, and preferably places these synchronizations in a fix list. An update manager uses the software fix list to apply software product synchronization to the computer. Preferably, the computer can be brought to the same fix level or product level as the preferred software inventory through this process. The fix list is a list of software product synchronizations. There can be multiple software product synchronizations per software product, and the synchronizations can be applied to a computer by removing a software product fix, installing a software product fix, or installing or removing a software product.","The present invention potentially has its best application in networks, as numerous target computers or groups of target computers can be synchronized with a preferred software inventory of a model system. Preferably, each computer to be updated has two software inventories, a software product inventory and a software fix inventory. The former describes which software products have been installed and at what release the products are. The latter describes the fixes added to releases of the software product. The software fix manager is preferably installed on a central location (also called a managing computer) in a network whereby system administrators can log into the system and run the software fix manager on the managing computer. The software fix manager gathers or receives software inventories from a number of computer systems in the network, and these software inventories are compared to a preferred software inventory. The preferred software fix inventory and preferred software product inventory are generally derived from one computer (called a model system) that has a preferred mixture of software products and software product fixes on it.","The software fix manager creates a fix list of software product synchronizations, and the update controller on each computer in the network applies the software product synchronizations to its own computer. Preferably, the fix list is a union of all the software product synchronizations (and fix records) for each computer in the network that is being updated. Because the fix list is preferably a union, the update controller on each target computer may have to ignore some software product synchronizations that are not applicable to it. Each software product synchronization is a directive to install or remove a software product fix, which may also indicate installation or removal of a software product. These details will become more apparent during later, more in-depth discussions of these topics.","Before proceeding to detailed discussions of the embodiments of the current invention, it is beneficial to discuss terminology that is used herein. A \u201csoftware product\u201d is a release of software for a computer system. A software product could be an operating system, financial software, office software, an internet browser, text-editing software, a child's game, etc. In addition, a software product could be drivers for printers, video cards, sound cards, etc. A \u201crelease\u201d of a software product is intended to be complete. Releases generally have new version numbers that have years or whole numbers associated with them, such as Version 97 or Version 2.0. A software fix is a permanent or temporary change or addition to the software product. General terms for these types of software fixes include an \u201cupdate\u201d or a \u201cpatch.\u201d Updates are usually permanent fixes for software products and are minor changes to the software product, while patches are usually temporary pieces of software that fix one or more problems. A more permanent fix for the problem usually follows the patch. For some operating systems (i.e., OS\/400), the term \u201cpermanent\u201d means that the fix is installed permanently and cannot be removed, while the term \u201ctemporary\u201d means that the fix may be removed or uninstalled.","In general then, \u201csoftware product\u201d is intended to indicate a working version of a software product, while a \u201csoftware product fix\u201d is intended to indicate additions or changes to the software product that are not a complete version of the software product. The term \u201csoftware product synchronization\u201d encompasses installing a software product fix, attempting to remove and removing a software product fix, installing a software product, or uninstalling a software product.","Finally, a \u201cfix record\u201d is a term used to indicate a particular software fix for a software product at a particular release, while a \u201cproduct record\u201d is used to indicate a software product at a particular release. Some manufacturers use dates for these (such as Version 97 or Mar. 7, 1999 Fix), or a combination of these (such as Version 97, Update 1). In the latter example, the product record could be \u201cSoftware Product A, Version 97\u201d, while the fix record would be \u201cUpdate 1, Software Product A, Version 97\u201d. These concepts will be more apparent in later discussions. Furthermore, other manufacturers use numbers and letters (such as Version 2.03a) for the product record and fix record. Additionally, some manufacturers also add \u201cbuild levels\u201d, \u201cservice pack\u201d numbers, or additional identifying indicia. In short, a \u201cproduct record\u201d is any indicia used to track the software product, and a \u201cfix record\u201d is any indicia used to track software fixes added to the product.","Turning now to , a computer system  in accordance with a preferred embodiment of the present invention includes a plurality of Central Processing Units (CPUs) , a terminal interface , an auxiliary storage interface , a workstation , a Direct Access Storage Device (DASD) , a bus , and a memory  that includes multiple locations for containing various software programs. In this example, memory  includes an update controller , one or more software products , and a software inventory  in location . Memory  also includes a software fix manager  and a fix list  in location , a preferred software inventory  in location , and one or more software fixes  in location .","CPUs  perform computation and control functions of system . All CPUs associated with system  may each individually comprise a single integrated circuit, such as a microprocessor, or may comprise any suitable number of integrated circuit devices and\/or circuit boards working in cooperation to accomplish the functions of a central processing unit. All CPUs are capable of suitably executing the programs contained within memory  and acting in response to those programs or other activities that may occur in system .","Memory  is any type of memory known to those skilled in the art. This would include Dynamic Random Access Memory (DRAM), Static RAM (SRAM), flash memory, cache memory, etc. While not explicitly shown in , memory  may be a single type of memory component or may be composed of many different types of memory components. For example, memory  and CPUs  may be distributed across several different computers that collectively comprise system . For example, update controller  may reside on one computer with CPU, software fix manager  may reside on another computer system with a separate CPU, preferred software fix inventory  may reside on a third computer system with a different CPUand software product fixes  may reside on a fourth computer with a different CPU. Alternatively, all components could be located on one computer with one CPU. Computer system  of  simply illustrates many of the salient features of the invention, without limitation regarding the physical location of CPUs  or memory locations within memory .","Bus  serves to transmit programs, data, status and other forms of information or signals between the various components of system . The preferred embodiment for bus  is any suitable physical or logical means of connecting computer systems and components known to those skilled in the art. This includes, but is not limited to, direct hard-wired connections, fiber optics, infrared (IR) and other forms of wireless connections. It is anticipated that many alternative methods and material for connecting computer systems and components will be readily adapted for use with the present invention. This would include those methods and materials not presently known but developed in the future.","Terminal interface  allows human users to communicate with system , normally through a workstation . Workstation  is preferably a computer system such as an IBM personal computer or RS\/6000. Although system  as depicted in  contains only a single workstation , it should be understood that the actual number of workstations attached to system  will be a function of system design and user preference. Workstation  may also be a dumb terminal or other non-programmable computer input\/output device which allows human interaction with computer system .","Auxiliary storage interface  represents any method of interfacing a storage apparatus to a computer system known to those skilled in the art. Auxiliary storage interface  allows auxiliary storage devices such as DASD  to be attached to and communicate with the other components of system . While only one auxiliary storage interface  is shown, the present invention anticipates multiple interfaces and multiple auxiliary storage devices such as DASD . For example, DASD  may be a floppy disk drive which is capable of reading and writing programs or data on a floppy disk. DASD  may also be any other type of DASD known to those skilled in the art. This would include CD-ROM drives, hard disk drives, optical drives, etc.","Network interface  is used to connect other computer systems and\/or workstations to computer system  in networked fashion. One particular preferred networking configuration will be shown in . The present invention applies equally no matter how computer system  may be connected to other computer systems and\/or workstations, regardless of whether the connection is made using present-day analog and\/or digital techniques or via some networking mechanism of the future.","It is important to note that while the present invention has been (and will continue to be) described in the context of a fully functional computer system, those skilled in the art will appreciate that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms, and that the present invention applies equally regardless of the particular type of signal bearing media to actually carry out the distribution. Examples of signal bearing media include recordable type media such as floppy disks (e.g., disk ) and CD ROMS, and transmission type media such as digital and analog communication links, including wireless communication links.","Software fix manager  compares software inventory  with preferred software inventory  and creates fix list . Fix list  is a list of software product synchronizations that preferably could be used to synchronize software products  on computer system  with the preferred software inventory. Update controller  applies the software product synchronization to computer system . If any software product fixes need to be installed, these products or fixes are usually retrieved from software product fixes .","Turning now to ,  illustrates computer network  that is in a preferred configuration for synchronizing software fixes on a number of different target systems. Computer network  comprises a multitude of target systems, such as target system  through target system  and target group . These systems communicate through network  with managing system , source system  and model system . Network  can be any network known to those skilled in the art, such as a token ring network, a star system network, or any other network. Each computer system in computer network  could be any type of computer system known to those skilled in the art, such as a personal computer, a work station, a server, or a super computer. Each computer will generally contain at least one processor, a memory coupled to the at least one processor, and an operating system. Each computer system can have more than one processor, storage device, or memory type. In addition, each computer system can be running any operating system known to those skilled in the art or hereafter developed.","Target system  comprises an update controller , software fix inventory , a software product inventory , and a plurality of software products, software product  through software product . Similarly, target system  comprises an update controller , a software fix inventory , a software product inventory  and software products  through . Group  is a group of computers that are selected as one group, which is solely a means of helping a user to group disparate computers. Each computer in the group will have separate update controllers (such as update controller ), software fix inventories (such as software fix inventory ), and software product inventories (such as software product inventory ). Each computer's software inventory and update controller is completely separate from all the other computers' inventories and update controller. From a user perspective, the group is acted on as a group, but, in reality, each computer is acted on separately by the current invention.","The synchronization scenario is that the target systems have software products on each system and it is preferred that these software products be synchronized with a model system's software products. This synchronization could involve removing software products and software product fixes, if possible, for software products that are on the target system but are not on the model system. In addition, the synchronization could involve installing software product fixes to software products that are on the model system and are also on the target system. Furthermore, software products themselves could be installed on the target systems, if these products are not on the target systems but are on the model system. These concepts will become more apparent in later discussion.","Model system  comprises a preferred software fix inventory , a preferred software product inventory , and a number of software products, such as software products  through software product . Model system  has preferably been managed by system administrators into having the preferred number of software products and the software product fixes (not shown in ) for these software products. Model system  should be heavily tested to make sure that all products operate as they should and to make sure that fixes, installations and un-installations of fixes and products also operate as they should and do not harm other software products. Thus, model system  provides a repository wherein known software fixes and software products can be placed and changes made without harming any of the other systems in the network. This should limit rediscovery problems as only one system is used to test software product updates, fixes, or installations. In addition, model system  provides a system that has a preferred group of software products, so that this system can be compared with other computers in the network.","If desired, there could be multiple model systems in the network. For instance, one model system could have a preferred group of financial software products, while another model system could have a preferred group of office software products. This bifurcated set up may be preferred when there are multiple operating systems in the network. In this case, each model system could comprise a group of software products for that model's particular operating system.","Each software fix inventory (inventories , ,  and ) and software product inventory (inventories , , and ) may be discovered in a number of ways. Some operating systems keep a record of software fixes and products that are installed on the system. Thus, the software fix inventory and software product inventory for these types of operating systems and computers already exist. If no software fix inventory is currently kept on the computer system, the computer system may be queried by the update controller to determine what software products and fixes have been installed. Most operating systems will allow the update controller to query a target system (through application programming interfaces or through system or other configuration files) and determine what software products and software product fixes are installed.","Managing system  comprises software fix manager , software fix inventory  through software fix inventory  that are from target systems  through N, software product inventory  through preferred software inventory  that are also from target system  through N, preferred software fix inventory  and preferred software product inventory  that are from model system , and fix list . Managing system  can be any computer in the network, although it may be best to place software fix manager  on a managing system  that is a server, as a server allows better remote access to software fix manager . A copy of preferred software fix inventory  and preferred software product inventory  is now on managing system .","Once model system  has had the preferred software products installed, and the software product fixes installed to those products, the preferred software fix inventory  should be in a complete state. The preferred software fix inventory and the preferred software inventory then describe the preferred software configuration for the model system. In this state, the preferred software inventories are really just files. As such, once the files have been created and solidified, the files themselves can be sent to different networks. Furthermore, once the preferred software inventories are created, it is not really necessary to have a model system . However, it is preferred to have a model system , because the preferred software inventories will always be updated and improved. Additionally, subsequent software products or fixes for the software products that are currently installed in the model system may be installed and checked more easily with a model system. Thus, model system  provides a safe place to check new fixes and software products.","Software fix manager  has a variety of different functions. One function is to allow a system administrator to log into the managing system (and the software fix manager) and select the target systems that he or she would like to have synchronized with the preferred software fix inventory. Software fix manager  also, once fix list  is created, can display that fix list if desired. If some control over the fix list is desired, software fix manager  can allow a system administrator to select or deselect items in the fix list  so that those items will or will not be sent to each target system. Software fix manager  compares software fix inventories  through  with preferred software fix inventory  to create and update fix list , as will become apparent in later discussions. Additionally, software fix manager  accesses software product inventories  through  and the preferred software product inventory  during the creation and update of fix list . Fix list  is a result of the comparisons between the software inventories from the target systems and the preferred software inventories. Fix list  is preferably a union of the different software products synchronizations that will be sent to each target system. Software fix inventory  through software fix inventory  and software product inventories  through  could be sent by the target systems to the managing system upon the managing systems request. Alternatively, the managing system could retrieve those software inventories from the target systems.","Although not shown on managing system  in , the software inventories of each computer in group  could also be placed on managing system  to be compared with the preferred software inventories.","The present invention will be mainly described with reference to software fix inventories, as limiting the discussion reduces prolixity. However, the invention herein applies equally as well to software product inventories. Whereas comparing the software fix inventories with the preferred software fix inventory allows synchronizing software fixes, comparing software product inventories with a preferred software inventory (software inventory ) allows software products to be installed or uninstalled. Comments about the software product inventory embodiment of the invention will be made when it is helpful to understand this embodiment.","After the fix list has been developed by software fix manager , the fix list  is sent to each target system that has been selected for updating. For instance, if target system  has been selected for updating, while target system  has not been selected, then the fix list would go to target system  and not go to target system . This also means that the software fix inventory  should not be used to create fix list . After fix list  arrives at each target system that will be updated, the update controller for that target system compares the software fix inventory of its own target system with the fix list. For instance, if target system  is going to be updated, update controller  will compare software fix inventory  with fix list . Because fix list  is preferably a union of a different software product synchronizations from different target systems, some of the software product synchronizations may not be applicable to target system . For example, if target system  does not have software product  (which is installed on target system ), any software product synchronization in fix list  that applies to software product  will not be applied to target system . Update controller  will ignore software product synchronization for that software product. This will become more apparent later.","Target system  communicates though network  with source system  to retrieve any software products or fixes that will be applied to target system  by update controller . Update controller  can also attempt to remove software product fixes, if possible. Source system  comprises software product fix  and software product fixes  through . If target system  determines from fix list  that there is a software product synchronization (software product synchronizations will be discussed in more detail in reference to ) applicable to a software product on its computer and that the synchronization involves installing a software product fix, target system  communicates through network  to get the software product fix from source system . Source system , like the managing system  and model system , can be any computer in the network. Source  is a repository for software product fixes. The update controller retrieves the software product fix or software product from the source system by requesting a particular fix or product from the source system. The source system finds this fix or product then transmits the product or fix to the target system. The update controller, as part of the retrieval of the fix or product from the source system receives the product or fix.","Once target system  retrieves a software product fix from source system , update controller  then installs the software product fix or software product installation on the target system. If for any reason there is an error or the software product cannot be installed for some reason, the update controller will report that status to the managing system . In addition, the update controller will generally report other status information, such as whether the software product synchronization completed or not. Managing system  can then display this information to a system administrator that is performing or has directed the update to be performed on target .","Note that the software fixes  through  are independent programs or files that actually do the updating or installation of the software product. The update controllers get the program or file and then direct the operating system to execute, run, or load the program or file, which itself does the actual updating or installation. If desired, a software fix could simply be a file to be installed over a currently existing file. For instance, a Dynamic Link Library (DLL) file could be retrieved from the source system and then installed over a DLL that already exists. However, it is preferred that the software fix be an independent file that executes and performs whatever functions are necessary to install the fix.","In the software product inventory embodiment of the present invention, software fix manager  compares each software product inventory of selected target systems or target groups with preferred software product inventory . A fix list similar to fix list  may be made or additions to fix list  may be made that indicate which software products are to be installed or removed (un-installed). This \u201cnew\u201d fix list is preferably a union of software products. The \u201cnew\u201d fix list is sent to each target controller which then determines if the fix list applies to the target controller's computer, and the target controller applies the synchronizations. If software products are to be installed, the software products (not shown in source system  of ) are retrieved from source system  and installed.","Thus, software fix manager  compares a number of software inventories from target system computers or target system groups with a preferred software inventory from a model system and creates a fix list. The fix list is then distributed to the target systems. Each target systems or target system group has an update controller that compares the fix list versus its own software fix inventory for its own computer and applies software product synchronizations to software products on its computer. Each target system retrieves any needed software products or fixes from source system .","Turning now to , a method  is shown that illustrates a software administrator's interaction with a software fix manager and the steps that the software fix manager will take to create a fix list and send the fix list to each target system. This figure is applicable to both software fix inventories and software product inventories, and, thus, the generic term \u201csoftware inventory\u201d will be used in this method. Method  is performed when the system administrator wishes to update one or more target systems or target system groups. This will generally happen after the system administrator has solidified the software products and software product fixes that are installed on the model system, such that the model system has a preferred software fix inventory and a preferred software product inventory. As stated previously, the preferred software inventories, once the model system has been solidified, can simply be thought of and used as files.","Method  starts in  when a system administrator selects the targets or target groups that will be updated. In addition, the system administrator can also select the source and model systems. In this step, the preferred software inventory can also be selected as a file or as a file on a model system. For instance, if the preferred software inventory has been received through e-mail, then in this step a system administrator can also select the preferred software inventory as a file. Step  will generally be preformed by having the system administrator log into the managing system and the software fix manager. In step , all target systems' software inventories are received or retrieved. As stated previously, the managing system could direct each target system to send the managing system their software inventories, or the managing system could directly retrieve the software inventories from each target system or target system group. In addition, if the software inventory is not normally kept as part of the operating system, such that the update controller will have to query the target system, the managing system can direct the update controllers for the target system scheduled to be updated to query their individual target systems. Each update controller will then create an appropriate software inventory.","If it is desired that each target system's software inventory be retrieved independently, step  can be modified so that the software fix manager retrieves or receives only one software inventory at a time. This one software inventory may have steps  through  applied to it. Fetching all of the target systems' software inventories in step  (as  currents is written) is equally as good as fetching each inventory separately.","Once one or more system inventories have been received or retrieved, the software fix manager then compares each inventory with the preferred software inventory to generate a fix list. The comparison occurs in step , and creation or updating of the fix list occurs in . A preferred method for comparing a software fix inventory with a preferred software fix inventory is shown in . If the fix list is not currently created, such that the first target system's software inventory is being compared with the preferred software inventory, then the fix list would be created at that time and filled with software product synchronizations. These first synchronizations are the differences between the software inventory on this first target system and the software inventory on the model system. This will be explained in more detail below.","If all software inventories from all target systems have not been compared to the preferred software inventory (step =No), then the next target system software inventory is compared (step ). If all software inventories of all target systems have been compared (step =Yes), then a list of software product synchronizations are displayed on the screen, for the system administrator's use, in step . The system administrator can then select which synchronizations should be applied to the target systems that he or she has already selected. Note that this method assumes that all target system's inventories will be received or retrieved as one discrete step (step ). However, if desired, each target system's software inventories could be received individually in step . Then, each one of the inventories would be independently compared versus the preferred inventory in step , the fix list updated in step , and if all of the software inventories have not been compared in step  (step =No), then steps  and  would be performed again to retrieve the software inventory and compare this software inventory with the preferred inventory.","As discussed below, the fix list is preferably a union of all software product synchronizations for all target systems and target system groups. The union is preferred because the software fix manager then does not have to generate individual lists of individual software products synchronizations for individual targets. Thus, the fix list gets sent to each target system and each update controller then compares the fix list with it's own software inventory to determine which software product synchronizations will and will not be applied. If this is not preferred, each individual target system could have it's own fix list created for it. However, the union is preferred as it minimizes network traffic and the fix list will be sent once to all target systems instead of having individual fix lists sent to each target system and target system group. In step , the fix list is sent to each target and each target group. Each update controller then compares the fix list, if the fix list is a union, to its software inventory and applies the applicable synchronizations its computer. If the fix list is not a union, each update controller just applies the fix list to its own target system. After the appropriate software product synchronizations have been applied by the update controller to its target system and software products, a status is sent to the software fix manager. Software fix manager then displays the results in step . Based on this result, the system administrator then knows which computer has had which software product synchronizations applied to it.","Turning now to , a method  is shown that is performed by an update controller on a target system. This figure is applicable to both software fix inventories and software product inventories, and, thus, the generic term \u201csoftware inventory\u201d will be used in this method. Method  is performed whenever an update controller is informed by the software fix manager that a software update will be made, and the software update is actually performed. Method  begins, in step , when the update controller determines the software inventory. The software inventory is preferably already determined. Some systems, such as the OS\/400 operating system that runs on AS\/400 computers, create both a software product inventory and a software fix inventory whenever software products or fixes to the software products are installed or removed. For those operating systems that do not automatically make software product and fix inventories, as stated previously, the update controller can query the target system and determine a software product and fix inventories. If this is not possible, update controller  can be modified or the operating system on the target system can be modified to allow the update controller to determine software product and fix inventories.","Once the software inventory has been determined, the update controller for the target system sends a software inventory to a managing computer system (step ). Alternatively, the software manager could retrieve the software inventory from the target system. Between steps  and , the software fix manager compares a list of software inventories and group software inventories with the preferred software inventory to determine a fix list. Once the fix list is determined, the fix list is sent to and received by each target system in step .","There are a number of ways of performing steps  and steps . One way is to determine the applicability of each synchronization in a fix list, which is step . If that synchronization entails retrieving a fix from a source system, step , then that fix could be retrieved from the source system. Note here also that source computer system  of  (not shown in ) is not entirely necessary. If desired, the software product fixes could be sent with the fix list. This is particularly true if the fix list is going to be an individual fix list for each target system. If the fix list is a union, however, the number of software products that would have to be sent with a fix list may be too onerous for the network.","Alternatively, step  and step  may also be applied to the entire fix list. For instance, in step , when the applicability of each synchronization in the fix list is determined, this determination can be made for every single synchronization in the entire fix list. Then, if there are any fixes that must be retrieved from a source system (if the source system is being used) all of the fixes can be retrieved at one time. Alternatively, once the applicability of all synchronizations have been determined, each software fix could be retrieved individually from the source system, the software fix applied, the next software fix retrieved from the source system and applied, and so on. The particulars of how the software fixes are retrieved from the source system are discussed in reference to .","Regardless of how steps  and steps  are performed, in step  an attempt is made to apply one of the software product synchronizations. A software product synchronization could be an installation or removal of a current software fix. In addition, it could be an installation or removal of a software product. If there is any installation being performed, the file that is being installed should be received from the source system, if the source system is being used, or should be sent by the managing system to the target system. In step , the attempt to apply a software product synchronization should be preformed on a case by case basis. Although it may be possible in some systems to perform synchronizations in parallel, generally it is not possible to uninstall one fix while installing a second fix or to install more than one fix at a time. Thus, it is preferred that step  be performed serially, one synchronization at a time. To apply the synchronizations, the update controller directs the operating system on the target system to uninstall or install a software fix or software product.","After all synchronizations have been complete, or alternatively after each synchronization, the update controller sends an update to the software fix manager. This occurs in step . The software fix manager can then display results from that target system. This result may be used by the system administrator to determine the software fix level of each target system.","Thus,  show a software fix manager and an update controller collaborating together to create a fix list and to distribute that fix list to each target system. Each target system then applies that fix list to itself through the update controller. Preferably, after this process each target system or target system group should have the same or very similar products installed at the same software fix level.","It is important to note that the current invention describes three major steps: comparing software inventories with a preferred software inventory and creating\/updating software product synchronizations (preferably placed in the fix list); sending the synchronizations to target computers; and applying the synchronizations to the target computers. If desired, there can be a time period, determined by the system administrator, between each step. For instance, the system administrator might run the comparison one day, direct the software fix manager to send the synchronizations to the target computers the next week, and then, in the next week thereafter, direct the update controllers (preferably by having the software fix manager command each update controller to update) to update its respective target computer. Additionally, the current invention also allows a system administrator to only run the comparison and generation of the fix list, or to run the comparison, generation, and transmission of the fix list to each target. The former situation allows the system administrator to determine the update status of software on multiple computers in the network without going to each computer, while the latter situation allows the system administrator to prepare the target systems for synchronization and to run the synchronization at some later time.","Now that the overall mechanisms have been described that allow software synchronization to occur, an in depth discussion of preferred software inventories and fix lists will now be shown in .  illustrate examples of comparisons done by the software fix manager. When discussing , reference will also be made to preferred methods of comparison performed by the software fix manager and given in . The software fix manager compares the preferred software inventory and software inventories from targets to create and update a fix list.  illustrate examples of update controllers on two different target systems that use the fix list to synchronize the software on their systems. These update controllers compare the fix list received from the software fix manager with their own software inventories and apply software product synchronizations in the fix lists. In , software fix inventories will be mainly described as the comparison inventories. However, the concepts that are used to create and update a fix list may be applied equally as well to product inventories, and some discussion of software product inventories will occur when appropriate.","Turning now to ,  shows a software fix inventory  from target system  (not shown in ) being compared with preferred software fix inventory  to create fix list . Software fix manager  (not shown in ) compares software fix inventory  with preferred software fix inventory  to create fix list . Software product inventory  of target system  and preferred software product inventory  of the model system are also shown. Software fix inventory  comprises a plurality of fix records , , , , and . Similarly, preferred software fix inventory  comprises a plurality of fix records , , , , and . Each fix record indicates which software product fixes of that software product that are installed. As previously discussed, the term \u201csoftware product\u201d that is used herein encompasses any type of complete software product, such as an operating system component, a driver, dynamic link libraries, programs, and files. The fix record indicates what fixes, improvements, or additions have also been installed for a particular software product at a particular release. Software fixes are tied to releases of software products: a particular software fix is made for one particular release of a software product. The fix record can be any indicia known to those skilled in the art that is used to determine a particular software fix.","In , software fix inventory  comprises fix records  through , and each software fix record has a fix identification , a product identification , and a product release . In the example of , there are a number of fix identifications , including fix identification one for fix record  and fix identification  for fix record . These two fix identifications are for software product one, as evidenced by product identification  in fix records  and . A fix identification is preferably a unique identifier that identifies this particular software fix. The fix identification is usually a number, but it could be any indicia that uniquely identifies one particular software fix. As an example of the unique identification for software fixes, assume that a software fix with a fix identification of \u201c1008\u201d is used to fix a DLL. The next day, another fix is created (or the former software fix modified) that fixes this same DLL. This new software fix preferably is given a new fix identification, such as \u201c1009\u201d or \u201c1300\u201d, so that this software fix is uniquely identified from the previous software fix.","Product release  can also be alphanumeric if that is desired. The product and product release are not used to identify which software products are installed on target system . Instead, they are indicators used to identify the release of the software product to which the software fix is applicable. Software product inventory  (to be discussed below) identifies the software products installed on the target system.","Note that fix level identification  or product release  could be made to include a date, such that the current version could be tracked by date. In addition, software fix inventory  or fix record  through  could include another element, such as a date, to go along with the fix identification, product identification, and product release.","Software fix inventory  illustrates that there are fixes installed for software product two on target system . There are two software fixes for software product two at a release of 2.0.0 (indicated in product release ), which are indicated by fix records  and . Software fix inventory  also illustrates that there is a software fix installed on target  for a third software product (software product three). The software fix with fix identification  of \u201cFixID,\u201d which is installed for the third software product at a release of 3.5.1, is indicated in fix record . Thus, target system  has fixes installed for three software products.","Software product inventory  indicates the software products that are installed on target system . In addition, the release of each software product is shown. Software product inventory  comprises a number of product records , , , and . Each product record comprises a product identification  and a product release . Software product inventory  shows that the following products are installed at the following releases: software product one at release 0.9.0, software product two at release 2.0.0, software product three at release 3.5.1, and software product four at release 4.0.3.","It is important to note that, according to software product inventory , software product four is installed on target system . However, there is no indication by observing software fix inventory  that software product four is installed on target system . There is no indication because there are no software fixes installed for software product four. This example illustrates that the software product inventory and the software fix inventory are preferably independent. Additional software products may be installed without ever installing fixes for those products. It should also be noted that these inventories can be combined into one inventory. For instance, product inventory record  could be moved into software fix inventory  and have a fix identification field  added. If this field is blank, then this entry could indicate that it is a product record. If this field is filled, then this could indicate that this entry is a fix record.","Preferred software fix inventory  comprises preferred fix records  through . The preferred software fix inventory indicates that the model system has the following software fixes installed for the following software products: the fix that is identified by \u201cFixID\u201d for software product one at release 0.9.0, as indicated by preferred fix record ; the fix that is identified by \u201cFixID\u201d for software product two at release 2.0.0, as indicated by preferred fix record ; the fixes that are identified by \u201cFixID\u201d and \u201cFixID\u201d for software product three at release 3.5.1, as indicated preferred fix records  and ; and the fix that is identified by \u201cFixID\u201d for software product four at release 4.0.3, as indicated by preferred fix record .","Preferred software product inventory  comprises four product records , , , and . Preferred software product inventory  has the same entries as software product inventory . However, the preferred fix inventory  for the model system is different than fix inventory .","Fix list  is created when software fix manager  (not shown in  or ) compares software fix inventory  with preferred software fix inventory . Fix list  comprises a plurality of software products synchronizations , , , , , and . Each software products synchronization comprises fix record  and an extra indication . Software fix manager  compares each fix record from software fix inventory  with each fix record from preferred software fix inventory . If there is a fix record in software fix inventory  that is not in preferred software fix inventory , this fix record is marked as extra. If there is a fix record that is on the model system (i.e., that is in the preferred software fix inventory) but is not on the target system (i.e., that is not in the software fix inventory system), then this software fix is marked as needed.","Turning now to  in addition to , these figures show preferred methods for comparing a software fix inventory from a target with a preferred software inventory and updating or creating a fix list.  are performed by the software fix manager and essentially correspond to steps  and  of .  illustrates a method  that the software fix manager uses when marking a fix record as \u201cneeded.\u201d The software fix manager marks a fix record as needed and places the fix record into fix list  if a software fix for a software product at a particular release is in preferred software fix inventory  but not in the target system's fix inventory. To mark the fix as needed, the extra indication for this synchronization is left unchanged (e.g., the extra indication could be a boolean with a value of NEEDED, for example). Marking the fix record in the synchronization as needed means that the software fix that corresponds to this fix record should be installed on the target system.  illustrates a method  that the software fix manager uses when marking a fix record as \u201cextra.\u201d A fix record is marked as extra and placed into fix list  if a software fix for a software product at a particular release is not in preferred software fix inventory  but is in the target system's fix inventory. To mark the fix record as extra, the extra indication for this synchronization is changed (e.g., the extra indication could be a boolean with a value of EXTRA, for example). Marking the fix record in the synchronization as extra means that the software fix that corresponds to this fix record should be un-installed or removed from the target system.","Method  of  begins when a target system fix record is fetched. Preferred fix record  of  is fetched in step  of . In the example of , the first target system fix record fetched is fix record . In step  of , the software fix manager determines if the software product and release indicated in product identification  and release  of fix record  is on the model system. To determine if the software product and release is on the model system, the software fix manager accesses preferred software product inventory  and attempts to match the software product and release in fix record  with a software product and release in preferred software product inventory . Because product record  contains the same product identification and release as fix record , the software fix manager proceeds to step  of  (step =yes). The software fix manager determines in this step if the fix is installed on the model system. To do this, the software fix manager compares fix identification  of fix record  with fix identifications  in preferred software fix inventory  for this software product and release. Because fix record  matches fix record , the software fix manager knows that the software fix corresponding to fix records  and  is installed on the target system (step =yes).","Software fix manager  then fetches another target system fix record (step ), which in this example is fix record  of software fix inventory  (of ). Again, the software fix manager determines if the software product at the release shown in fix record  is installed on the model system by searching software product inventory  for a match for the software product identification  and release  of fix record . In this example, the software fix manager determines that there is a software product at this release installed on the model system, as indicated by product record  (step  of FIG. =yes). Next, the software fix manager determines that this fix is not installed on the model system (step =no), because the fix identification  in fix record  of \u201cFixID\u201d does not correspond to the fix identification  in fix record .","In step  of , the software fix manager first determines if a synchronization corresponding to fix record , marked as extra, has been added to fix list  of . This portion of step  is designed to prevent adding the same fixes more than once to fix list . Because a synchronization corresponding to fix record , marked as extra, is not found in fix list , the software fix manager adds synchronization  to fix list . The software fix manager adds synchronization  to fix list  by adding fix record  and marking extra indication  as EXTRA. An \u201cX\u201d in extra indication  of fix list  indicates that the fix record  corresponding to the extra indication is marked as EXTRA; a blank in extra indication  indicates that the fix record  corresponding to the extra indication is marked as NEEDED. Synchronization  indicates that, if possible, the software fix corresponding to fix record  should be removed. Software fix manager  then determines that not all target system fix records have been compared (step =no), and the software fix manager fetches another target system fix record (step ).","The software fix manager fetches fix record  from software fix inventory , determines that the software product at the release level indicated in fix record  is on the model system (step  of FIG. =yes), as these elements match the product identification  and release  in product record  of software product inventory . The software fix manager determines that this fix is not installed on the model system (step ) because fix identification  of fix record  does not match fix identification  of fix record . The software fix manager adds synchronization  to fix list  (step ) to indicate that the software fix corresponding to fix record  should be un-installed or removed (note that extra indication  of synchronization  is marked as EXTRA). Because not all target system fix records have been compared (step =no), the software fix manager fetches another target system fix record.","Following the steps in method , the software fix manager fetches fix record  from software inventory  and determines that the fix corresponding to this fix record is not installed the model system. Software fix manager adds synchronization  to indicate that the software fix corresponding to fix record  should be removed from target system . The software fix manager fetches the last fix record, fix record , from software inventory . The software fix manager determines that the software fix corresponding to this fix record is installed on the model system because fix record  matches exactly the fix record  of preferred software fix inventory  (step =yes). The software fix manager ends method  at this point because the software fix manager ends the method if there are no more target system fix records to examine in step .","The software fix manager has examined all the fix records in the software fix inventory  for target system . The software fix manager also compares the fix records in the preferred software fix inventory  to add to fix list . The software fix manager uses method  to perform this comparison. Note that the order that the software fix manager runs these two methods, methods  and , is irrelevant.","Method  starts when the software fix manager fetches a preferred fix record from preferred software inventory  (step ). The software fix manager chooses, for example, fix record . The software fix manager determines, in step , if the software product at the release given in fix record  is installed on the target system. The software fix manager accesses software product inventory  and determines that product record  has the same product identification  and release  that fix record  has (step =yes). The software fix manager next determines if the software fix corresponding to fix record  is installed on the target system (step ). To perform this step, the software fix manager compares fix identification  (\u201cFixID\u201d) of fix record  with fix identifications  of software fix inventory  that correspond to the product identification and release indicated in preferred fix record . Because fix record  matches preferred fix record  exactly, the software fix manager determines that this fix is installed on the target system (step =yes).","The software fix manager fetches another preferred fix record in step . This time, the software fix manager fetches fix record . The software product at the release indicated in preferred fix record  is installed on the target system, as indicated by product record  of software product inventory  (step =yes). The software fix manager determines, in step , if the software fix corresponding to preferred fix record  is installed on the target system. Again, the software fix manager compares the fix identification  of \u201cFixID\u201d in preferred fix record  matches the fix identification  in fix records  and  of software fix inventory . These two fix records are the only two fix records that correspond to software product two at release level 2.0.0. The software fix manager determines that neither of the fix identifications in these two fix records correspond to fix identification  of preferred fix record  (step =no). The software fix manager, in the first portion of step , determines if the fix is already added by searching fix list  for fix record . In this case, no match is found. The software fix manager adds synchronization  to fix list  by adding fix record  in fix record  of synchronization  and by marking extra indication  of synchronization  as NEEDED (which, in the example of , is indicated by a blank extra indication ). The software fix manager determines that not all preferred fix records have been compared (step =no), and fetches the next preferred fix record.","Following the steps in method , the software fix manager determines that the software product fix corresponding to preferred software fix record  has already been added to the target system (preferred software fix record  exactly matches software fix record ). The software fix manager also determines that the software product fix corresponding to the preferred fix record  is not installed on target system , as the fix identifications  in fix records  and  do not match. Thus, the software fix manager adds synchronization  to fix list . Synchronization  indicates that the software product fix corresponding to fix record  should be installed (because extra indication  of synchronization  is marked as NEEDED) on target system .","Finally, the software fix manager compares the software product identification and release level of preferred fix record  with the software product identification and release level of the product records in software product inventory  (step ). The software fix manager determines through this process that software product four at release 4.0.3 is installed on the target system (step =yes). The software fix manager also determines that this software fix corresponding to preferred fix record  is not installed on target system  (step =no), because the software fix manager cannot locate any fix record in software inventory  that has a software product identification of \u201cproduct four\u201d. Thus, the software fix manager adds synchronization  to indicate (by marking extra indication  as NEEDED) that the software product fix corresponding to fix record  should be installed (step ). The software fix manager then ends method , in step , because all preferred fix records have been compared.","It should be noted that the software fix manager may also compare (through a modified version of methods  of  of ) software product inventory  with preferred software product inventory  to create a different fix list or add elements to fix list . In the example of , all the elements in these two software product inventories are the same. However, if the model system had a software product five installed, for example, and the target system did not have this product installed, an entry could be made in the fix list that indicates that this product should be installed on the target system. Similarly, if the target system had a software product five installed, but the model system did not, then an entry could be made in the fix list that indicates that this product should be un-installed on the target system.","Turning now to  in addition to ,  shows software fix inventory  of target system  (not shown in ) being compared with preferred software fix inventory  to create additional entries in fix list . Also, a software product inventory  of target system  and preferred software inventory  of model system  are shown. As stated previously, fix list  in this example is a union of all the fixes for all the target computers. Because preferred software fix inventory has already been compared with the software fix inventory  of target , software product synchronizations  through  currently exist in fix list .","Software fix inventory  has two fix records  and . Fix record  indicates that a software product fix corresponding to fix identification  of \u201cFixID\u201d for software product three (as shown in product identification ) is installed at a product release level  of 3.7.0. Fix record  indicates that a software product fix corresponding to fix identification  of \u201cFixID\u201d for software product four (as shown in product identification ) is installed at a product release level of 4.0.3.","Software product inventory  indicates that two software products are installed (software products three and four, as indicated by software product identifications  of product records  and ). These products are at release levels 3.7.0 and 4.0.3, as indicated by releases  of product records  and .","When the software fix manager performs method  of  to add needed fix records to fix list , the software fix manager fetches preferred fix record  in step . Because the software product (software product one) is not installed on target system  (step  of FIG. =no), as indicated by software product inventory , the software fix manager fetches preferred fix record  in step . Because software product two is not installed on target system , the software fix manager fetches preferred fix record . For this preferred fix record, the product identification  in this preferred fix record matches the product identification  in product record . However, the release in preferred fix record  does not match the release in product record . Thus, the software fix manager determines that the software product at the release indicated in preferred fix record  is not installed on target system  (step =no). The software fix manager fetches (step ) preferred fix record , which has the same release  as did preferred fix record . Thus, the software fix manager determines that the software product at the release indicated in preferred fix record  is not installed on target system  (step =no).","The software fix manager fetches the final preferred fix record, preferred fix record . The software product and release for this preferred fix record matches the product identification  and release  in product record  (step =yes). The software fix manager determines that the software product fix corresponding to preferred fix record  is not installed on target system  because the fix identification  in preferred fix record  does not match the fix identification  in fix record  (step =no). The software fix manager checks to see if a synchronization has already been added to fix list  (step ). In this case, the synchronization has already been added as synchronization . Thus, the software fix manager does not add another synchronization to fix list , as synchronization  (which corresponds to fix record ) already exists in fix list . The software fix manager determines that all preferred fix records have been compared (step ) and ends method .","When the software fix manager runs method  of  to add extra fixes to fix list , the software fix manager starts by fetching fix record  (step ) from software fix inventory  (shown in ). The software fix manager determines that this software product (product three, as indicated by product identification  of fix record ) is installed on the model system, but that the release  of fix record  does not match release  of product record  of preferred software product inventory . Thus, the software fix manager determines that this software product at this release (3.7.0) is not installed on the model system (step =no).","The software fix manager fetches the final fix record, fix record , in step . The software fix manager determines that the software product and release, as indicated by fix record , is installed on the model system (step =yes). The software fix manager determines this because there is a match for both the product identifications and releases between fix record  and product record  of preferred software inventory . In addition, the software product fix corresponding to fix record  is not installed on the model system (step =no) because fix identification  of fix record  does not match fix identification  of preferred fix record . Thus, the software fix manager determines that the synchronization corresponding to fix record  has not been added to the fix list, and the software fix manager adds synchronization  to fix list  (step ). This synchronization indicates that the software product fix corresponding to fix record  should be removed (as indicated by marking extra indication  of synchronization  as EXTRA). The software fix manager then ends method  when it determines that all target system fix records have been compared (step =yes).","Note that the software fix manager could be made to compare preferred product inventory  with product inventory  of target system . By comparing each product record  through  in preferred software product inventory  with each product record  and  in software product inventory , it could be determined that software products one and two are not installed on the target system. The software fix manager could add to fix list  (or create a new fix list) and indicate that software products at these release levels are to be installed. Similarly, if a software product five was installed on target system  but not installed on model system , the software fix manager could indicate that software product five is to be uninstalled.","Thus,  show software fix manager  comparing a number of software fix inventories with the preferred software fix inventory in order to create a fix list of software product synchronizations. Fix list  in these examples is a union of software product synchronizations that is derived from the differences between the preferred software fix inventory and a multitude of individual software inventories from target systems. Although fix list  could be designed to be the synchronizations for only one target system, the union is preferred as it reduces network traffic (e.g., one union is sent to all computers vice sending a multitude of fix lists to a multitude of computers) and comparison and fix list construction time.","Now that fix list  is complete for these two target systems, the fix list is sent to each target system. Each update controller for the target systems then compares the fix list with its own software fix inventory. Each update controller, after the comparison, then attempts to uninstall or remove those fixes or software products marked as extra and attempts to install the software products in the software products synchronizations that are marked as needed.","For instance, in , target system  has received fix list . Target system 's current software fix inventory  and software product inventory  are shown in  along with fix list . The top inventories  of the drawing indicate the software product  and fix  inventories on target  before the update controller updates the target system, while the bottom inventories  of the drawing indicate the software product  and fix inventories  after the update controller updates the target system.","It is important to note that software fix inventories and software product inventories may exist in a number of ways. Preferably, the operating system maintains these inventories such that the inventories are always resident and available. Thus, as the update controller applies synchronizations to its target computer, the operating system for the target computer updates software inventories  and . For those systems where the update controller needs to query the computer to create these software inventories, the software inventories shown in  will be transitory. They will probably only exist prior to and during the update to the target system. If desired, the update controller can make these inventories persistent, and can be made to modify these inventories.","It is also important to note that the current invention uses the operating system to remove and install software fixes (and products, if desired). For installation of software fixes, the update controller passes the software fix to the operating system, directing the operating system to install the software fix, and the operating system does the installation. Similarly, for uninstallation of software fixes, the update controller passes the software fix to the operating system, directing the operating system to uninstall the software fix, and the operating system does the uninstallation. Although not shown in , fix list  could indicate an installation or uninstallation program to run, if this is desired. This program would then be handed to the operating system by the update controller, the update controller would direct the operating system to perform an installation or uninstallation, and the operating system would run the installation or uninstallation program. For software products, the update controller would similarly direct the operating system to install or uninstall a software product. The current invention could be extended to include \u201cfix packs,\u201d where multiple software fixes are conglomerated\u2014with or without compression\u2014into one large file. Finally, the software fixes and product installation or uninstallation files themselves could be sent to the targets along with fix list , if desired.","Target system  indicates, through its software product inventory , that it has software products one, two, three, and four installed (indicated by product identifications ) at particular releases  Thus, update controller  will examine fix list , looking for synchronizations related to any of these software products at these releases. Then, the update controller can determine the software product synchronizations in fix list  that are applicable to target system . If any of the synchronizations in fix list  are applicable to the target system, a second applicability determination is made by comparing fix records  through  in software fix inventory  with the fix records  in each of the software product synchronizations  through  and  in fix list . Each fix record  in fix list  must match a fix record in software fix inventory  if a software product fix corresponding to that fix record is to be removed. For installation of a software product fix, the product identification  and release  in a fix record in software product inventory  must match the product identification and release in a fix record of the fix list, and the fix identifications for these two fix records must not match. This is discussed in more detail below.","Because software fix record  in software product synchronization  matches software fix record  in software fix inventory , the update controller will attempt to remove the software product fix corresponding to this fix record, if possible. A match in this instance means that all elements (fix identification , product identification , and release ) of each fix record are the same. Similarly, because fix record  of software product synchronization  matches fix record  of software fix inventory , the update controller will attempt to remove the software product fix corresponding to this fix record. Finally, because fix record  of software product synchronization  matches fix record  of software fix inventory , the update controller will attempt to remove the software product fix corresponding to this fix record.","When a software synchronization is marked as needed, the update controller will compare and attempt to match the software product identification  and release  in each fix record  through  with the product identification  and release  in each product record  through  of the software product inventory . In this case, software product synchronizations , , and  are for software products two, three, and four, respectively. Because the extra indications in fix list  for these fix records are marked as NEEDED (i.e., they are unmarked), indicating that these particular software products are to be installed on target system , the update controller will compare these fix records with the product records in the product inventory . If the product identification and release for the fix and product records match, the update controller will install the software fixes corresponding to fix records  of fix list . One caveat to this is when a fix record in both the fix list and the software fix inventory exactly match for software fixes that are marked as NEEDED (i.e., in addition to the product identifications and releases matching, both fix identifications  in the fix records match). In this instance, the software product fix is already installed on the target system, and the update controlled can either ignore the reinstallation of the fix or apply the synchronization and install the fix.","Thus, the update controller has determined that the applicable synchronizations for target system  are software product synchronizations  through . The update controller has also determined that software product synchronization  is not applicable to target system  because software fix inventory  does not contain fix record . As stated previously, for a software product fix corresponding to a fix record to be removed from a target system, the fix record  in the synchronization must exactly match a fix record in the target's software fix inventory. As shown in , fix record  has a fix identification  of \u201cFixID.\u201d None of the fix records in software fix inventory  match this fix identification. Therefore, update controller  determines that fix record  (and, thus, software product synchronization ) is not applicable to target system .","Since there is no synchronization that affects the software fix that corresponds to fix record , the operating system does not modify fix record  of software fix inventory . This is shown in the software inventory  at the bottom  of , where fix record  is unchanged.","Update controller , based on software product synchronization  being marked as extra in extra entry , will determine that the software product fix corresponding to fix record  should be uninstalled. Preferably, the update controller passes this information to the operating system, and then the operating system attempts to remove the software fix. The update controller, thus, informs the operating system that the software product fix, which corresponds to synchronization , for this software product is to be removed. In this example, the operating system (or the uninstall program run by the operating system) was able to remove the software fix corresponding to fix record . The operating system changes software product fix list  to indicated that the software fix corresponding to fix record  no longer exists on target system . Accordingly, software fix inventory  at the bottom  of  no longer contains fix record .","Similarly, according to software product synchronization , update controller  will inform the operating system that the software fix corresponding to fix record  should be removed. In this example, the software fix corresponding to fix record  was removed by the operating system. Therefore, the software fix inventory  at the bottom  of  does not contain fix record .","Next, according to software product synchronization , the update controller informs the operating system that the software fix corresponding to fix record  should be removed. In this example, the software fix corresponding to fix record  was not removed because there was some error when the operating system went to remove the software product fix. This error could have been, for example, the condition that it was impossible to remove the software product fix (e.g., if the software fix installed a new DLL and the previous DLL was no longer on the system) or that the uninstallation started but failed (e.g., for lack of disk space). Accordingly, software fix inventory  at the bottom  of  still contains fix record .","Note that the uninstallations or removals occur before the installations. This is the recommended method of removal and installation. If desired, additional installation or removal instructions could be provided in fix list . Currently, fix list  does not include any type of order of installation or uninstallation. However, update controller  will generally uninstall any extra products before installing fixes or products for one particular software product. For instance, the software fixes corresponding to fix records  and  would usually be uninstalled before the software fix corresponding to fix record  would be installed (to be discussed below). If necessary, if it is critical to have an installation or uninstallation order, then an order could be placed in fix list .","Next, update controller  determines, by comparing the fix records in software fix inventory  with fix list , that software product synchronizations , , and  must applied to target system . To apply these synchronizations to target system , update controller  retrieves the software fixes corresponding to these synchronizations from the source system. Essentially, the update controller contacts the source system with the fix records , , and  corresponding to synchronizations , , and , respectively. The source system uses these fix records to locate and the software fixes corresponding to these fix records. The source system then transmits these software fixes to the update controller. The update controller receive the software fixes and informs the operating system that the software fixes are to be installed, and the operating system installs the software fixes. In this example, no problems occurred during the installation of these software fixes, and all three software fixes were installed. The operating system has added fix records , , and  to software fix inventory . This updated software fix inventory is shown at the bottom  of .","Note that the software product inventory  is unchanged. As indicated by software product inventory  at the top  of  (the software product inventory before synchronization) and the same product inventory at the bottom  of  (the software product inventory after synchronization), no changes have occurred to the software product inventory. As previously stated, this inventory is preferably separate and distinct from software fix inventory . Changes to software product inventory  are made when a new software product is added or removed. If desired, the current invention can be made to install or remove software products.","Turning now to , software fix inventory  of target system  is shown, along with software product inventory . Additionally, fix list , and new software fix inventory  are shown. The inventories at the top  of  illustrate the original software product and fix inventories before update controller  (not shown) uses fix list  to update target . The inventories at the bottom  of  illustrate the resultant inventories after the update of target .","Update controller  of  compares the product identification and release of a fix record in fix list with the product identification and release of product records  and  in product inventory . If any of these match, then the fix record of the fix list that has the matching product identification and release is compared with fix records in software fix inventory  to further determine which software product synchronizations are applicable to its system. If a synchronization indicates that a software fix corresponding to a fix record is to be uninstalled, the fix records between the software fix inventory and the fix list must match. If a synchronization indicates that a software fix corresponding to a fix record is to be installed, fix records in the software fix inventory are compared with the fix record of the synchronization to see if the fix is already installed. If the fix is not installed, the fix is retrieved and installed.","In this instance, update controller  has determined that synchronizations  through  do not apply to target system  because these synchronizations are for software products one and two. Additionally, synchronization  does not apply to target system  because release  of fix record  is 3.5.1, while product records  and  of product inventory  indicates that software product three at this release is not installed on target system . While software product three at release 3.7.0 is installed on target , both the product identification  and the release  must match for a software fix corresponding to a fix record to be uninstalled or installed. Update controller  thus leaves software fixes for software product three untouched, and the operating system similarly leaves software fix inventory  untouched. This is shown in , where fix record  is in both software fix inventory  at the top  of  (which is software fix inventory  before synchronization) and software fix inventory  at the bottom  of  (which is software fix inventory  after synchronization).","The update controller determines that synchronizations  and  are applicable to its target system . Synchronization  indicates that the software fix corresponding to fix record  is to be installed. The product identification and release of this fix record correspond to the product identification and release in product record  of product inventory . Additionally, a search of fix inventory  indicates that there are no fix records in this inventory that match fix record . Therefore, the software fix corresponding to this fix record will be installed. The update controller has also determined that fix record  is applicable to its target system. Again, the product identification and release of this fix record correspond to the product identification and release in product record  of product inventory . A search of software fix inventory  finds a fix record (fix record ) in the fix inventory that corresponds to the fix record in synchronization . Thus, the software fix corresponding to this fix record is to be uninstalled.","However, when update controller  attempts to uninstall the fix corresponding to this fix record, the uninstallation fails. Therefore, the operating system leaves fix record  unchanged, indicating that the software fix corresponding to this fix record is still installed. Finally, the update controller requests the software fix corresponding to fix record  from the source system. The update controller receives the file containing this software fix and informs the operating system that it needs to install this software fix. The operating system updates new fix inventory  with this information, as fix record  that is indicated in software fix inventory  on the bottom  of . Note at this point that the update controller  could inform software fix manager  of the status. The status in this case would indicate that an error occurred and the software fix corresponding to fix record  was not uninstalled.","As a final note, the present invention could be made to install or remove software products. For instance, fix list  could indicate that software product two at a particular release level is to be installed. The update controller could receive this fix (which would be a complete software product) and then preferably direct the operating system to execute the fix to install software product two. The update controller could then add product records to product inventory  to indicate the newly installed software product. If this product was installed before the update controller determines if the fix list has any fixes for this product at its release level, then the update controller could install fixes for the newly installed product.","As shown in the previous examples, the preferred embodiments of the present invention describe a method and apparatus for synchronizing software in a network. By combining a software fix manager, which generates a fix list by comparing a preferred software fix inventory with software inventories from one or more computers in the network, with update managers running on computers in the network, a powerful synchronization system is created. This allows multiple computers or groups of computers to be synchronized with one preferred software fix inventory (preferably created by installing, removing, and testing software on a model system).","While the present invention has been particularly shown and described with reference to preferred embodiments thereof, it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention. For instance, the software fix manager and\/or update controllers could be made to schedule comparisons and synchronizations in the evenings, at night, or on weekends. As another example, update controllers could be made to prepare the system for updating or perform after-updating functions, such as checking the computer's hard drive for errors before the update and deleting temporary files after the update."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF DRAWINGS","p":["The preferred exemplary embodiments of the present invention will hereinafter be described in conjunction with the appended drawings, wherein like designations denote like elements, and:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIGS. 5 and 6"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIGS. 7 and 8"},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIGS. 9 and 10"}]},"DETDESC":[{},{}]}
