---
title: Pattern recognition in web search engine result pages
abstract: Described herein are methods and systems for pattern recognition in web search engine result pages. The input data is a result page from a web search engine as well as an integer number for the results on the page. The output is a regular expression that matches all the results on the page, capturing each result and its individual fields.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08326830&OS=08326830&RS=08326830
owner: Business Objects Software Limited
number: 08326830
owner_city: Dublin
owner_country: IE
publication_date: 20091006
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["FIELD OF THE INVENTION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION"],"p":["The invention relates to a pattern recognition algorithm. More precisely, the invention relates to pattern recognition in web search engine result pages.","A search engine is an information retrieval system designed to help find information from one or more sources. A web search engine typically retrieves information from an open data source such as the World Wide Web but search engines can be targeted at any number of data sources, including other search engines. Search engines that search multiple sources and aggregate the results are often called \u201cfederated search engines\u201d and sometimes \u201cmeta search engines\u201d. When a federated search engine queries another search engine, often the only way to retrieve the results is via the same result page the target search engine displays to users. The federated search engine must then extract each result and its fields from the result page before the results can be aggregated. Effectively extracting this data is a common problem for federated search engines. There are different tools for dissociating the information of interest from the entire data that is retrieved. One technique for accomplishing such dissociation is by means of regular expressions. Regular expressions consist of meta-text written in a formal language that other programs can use to match text patterns and extract values occurring within the match. Regular expressions are the key to powerful flexible and efficient text processing.","A computerized method and system for pattern recognition in web search engine result pages are described herein. In one embodiment, the method includes receiving a result page from a web search engine and an integer number for the results on the result page. The result page is simplified by making variations through excluding noisy markup tags and each pattern from the variations is tested to see if it repeats the integer number times. The method also includes defining one or more result patterns and evaluating the highest rated according to predefined criteria. The method ends with generating a regular expression from the highest rated result pattern.","In another embodiment of the invention, the system includes one or more memory devices with a search application to search a variety of sources and a processor to execute the instructions in the memory related to the search application. The system also includes a search server to process all the encountered search results of the search application and a broker plug-in for the search server, to translate the search queries, perform the search, page through the result, pull out results from the pages, and extract fields from each result.","These and other benefits and features of embodiments of the invention will be apparent upon consideration of the following detailed description of preferred embodiments thereof, presented in connection with the following drawings.","Embodiments of techniques for pattern recognition in web search engine result pages are described herein. In the following description, numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however, that the invention can be practiced without one or more of the specific details, or with other methods, components, materials, etc. In other instances, well-known structures, materials, or operations are not shown or described in detail to avoid obscuring aspects of the invention.","Reference throughout this specification to \u201cone embodiment\u201d, \u201cthis embodiment\u201d and similar phrases, means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus, the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore, the particular features, structures, or characteristics may be combined in any suitable manner in one or more embodiments.",{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 1","b":["100","110","120","120","150","150","120","150","160","170","120","150","130","180","160","170","130","180","130"]},"In one embodiment, as shown in , a federated search server  provides a regular expression  to a standard regular expression matcher . Regular expressions consist of meta-text written in a formal language that other programs can use to match text patterns and extract values occurring within the match. Regular expressions are the key to powerful flexible and efficient text processing. The regular expression  is used to match text patterns and extract fields occurring within an HTML result page . The regular expression  is retrieved by processing a raw HTML  that comes from a search engine. The broker editor  is used for processing the raw HTML  into the regular expression . This processing is further explained in connection to . In some embodiments, the standard regular expression matcher  may reside within the federated search server . The standard regular expression matcher  receives two inputs\u2014the regular expression  and an HTML result page  from the same or similar search engine as the raw HTML . By having the regular expression , the standard regular expression matcher  is able to extract a result object  from the HTML result page . This result object consists of fields from the HTML result page  that may be of interest to a user. Thus, pattern recognition in web search engine result page is performed to extract some fields of the result page that may be of interest to a user.","The way the Broker Editor  may transform raw result pages from web search engines into regular expressions is explained in reference to .  is a flow diagram describing a pattern recognition method  for web search engine result pages. First, at block , a result page, which is a string of text and markup tags, is received as input. An integer number for the results on the result page is also used as an input, which is later necessary in discovering result patterns. The result page typically comes from a web search engine. The result page is typically in HTML, a text-based markup language used to write web pages. HTML tags are coding instructions imbedded in HTML documents. A web browser is designed to read the instructions, or HTML tags, in order to render the page graphically. Thus, a web browser translates HTML tags into visual effects that mold the way an HTML document looks to the viewer. The content between HTML tags is referred to here as a free text element. The raw result page may consist of noisy data some of which may be HTML tags. Then, at block , the result page is simplified. Part of the simplification is excluding noisy HTML tags and everything inside the tags is stripped. Examples of noisy HTML tags are bold tags, break tags, cite tags, emphasis tags, font tags, image tags, italic tags, no break tags, span tags, strong tags, and underline tags. Because some HTML noisy tags may be useful, different variations of simplified HTML pages are created that preserve one HTML noisy tag. There might be tags that are stripped in all cases like, for example, break tags and image tags. There might also be a variation, which preserves none of the HTML noisy tags. All removed HTML tags may be restored so there is data saved for the removed HTML tags and their location. An example of HTML simplification is presented below:",{"@attributes":{"id":"p-0017","num":"0016"},"tables":{"@attributes":{"id":"TABLE-US-00001","num":"00001"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"Original HTML:"},{"entry":"<html>"},{"entry":"<body>"},{"entry":"<h1 class=\u201cc\u201d>My Webpage<\/h1>"},{"entry":"<span class=\u201cd\u201d>Hello and welcome <\/span>"},{"entry":"<font size=1>to my webpage! <\/font>"},{"entry":"<i>Enjoy <\/i>"},{"entry":"your stay"},{"entry":"<p>and visit again<\/p>."},{"entry":"<\/body>"},{"entry":"<\/html>"},{"entry":"Simplified HTML (simplified variation 1, Span tags preserved):"},{"entry":"<html><body><h1>FREETEXT<\/h1><span>FREETEXT<\/span>"},{"entry":"FREETEXT<p>FREETEXT<\/p><\/body><\/html>"},{"entry":"Simplified HTML (simplified variation 2, Font tags preserved):"},{"entry":"<html><body><h1>FREETEXT<\/h1>FREETEXT<font>"},{"entry":"FREETEXT<\/font>FREETEXT<p>FREETEXT<\/p><\/body><\/html>"},{"entry":"Simplified HTML (simplified variation 3, I tags preserved):"},{"entry":"<html><body><h1>FREETEXT<\/h1>FREETEXT<i>"},{"entry":"FREETEXT<\/i>FREETEXT<p>FREETEXT<\/p><\/body><\/html>"},{"entry":"Simplified HTML (simplified variation 4, No tags preserved):"},{"entry":"<html><body><h1>FREETEXT<\/h1>FREETEXT<p>"},{"entry":"FREETEXT<\/p><\/body><\/html>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},{"@attributes":{"id":"p-0018","num":"0017"},"tables":{"@attributes":{"id":"TABLE-US-00002","num":"00002"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"1"},"colspec":{"@attributes":{"colname":"1","colwidth":"217pt","align":"left"}},"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":"<a href=\u201dnews.htm\u201d>Breaking news stories<\/a><p\/><span> January 1,"},{"entry":"2009<\/span><span>Check out top news stories of the day<\/span>"},{"entry":{"@attributes":{"namest":"1","nameend":"1","align":"center","rowsep":"1"}}}]}}}},"br":{}},"Turning back to , in the next step, at block , the simplified variations are parsed for patterns, iterating over each variation and finding repeating patterns. At block , the patterns that repeat the exact number of the integer value that was input in block , are selected as result patterns. To check how many times each pattern is repeated, the pattern may be converted to a string and then standard string operations may be performed. A pattern according to some embodiments is a substring of a simplified result page. The substring begins on an open angle bracket (\u201c<\u201d) or the free text marker and ends on a close angle bracket (\u201c>\u201d) or the free text marker. For example, \u201c<h1>FREETEXT<\/h1>FREETEXT\u201d could be a pattern. If a pattern is found to be repeated within the HTML code a number of times equal to the integer number submitted as input above in step  then it is suspected as a result pattern. Each match found from such a result pattern and its underlying raw HTML are evaluated to locate some fields that are of interest to the search. Such fields of interest may be, for example, URL, title, summary, and date. In block , all result patterns are evaluated according to predefined rating criteria. The predefined rating criteria may be the ability to normalize text fields as a date, character length of text fields, position of text fields in relation to other text fields, and location and proximity of HTML anchors in relation to text fields. The predefined rating criteria are specific to the fields of interest. Thus, the result patterns are examined and rated. The highest rated result pattern is most likely to contain the fields of interest (e.g. URL, title, summary and date).","Potential fields of interest in the result patterns are found by going over each of its integer number matches and looking for free text elements whose value changes across matches. This is because, in the simplification step, the free text elements are presented as uniform values, and if there is a pattern that repeats the integer number of times and the pattern differs along the matches, it is likely to be one of the searched result fields. Then, looking at each field, it is checked, for example, if any of them can be parsed as a date. If multiple dates are found, it chooses the best one determined by how many of the matches have a parseable date and how complete the date is. Next step may be to choose the longest field in terms of average number of characters over each match and set that as the summary. It may go on to look for fields occurring before the summary and choose the longest one before the summary as the title or if no fields occur before the summary it chooses one following the summary as the title. Finally it may examine each anchor to see if any of them immediately precedes the title. In HTML, an anchor can be either the origin or the target (destination) end of a hyperlink (e.g., <a href=\u201curl\u201d>Link text<\/a>). If so, then that field becomes the URL, otherwise it chooses the first anchor in the matches as the URL. Turning back to , the last step of the algorithm is presented in block , where a regular expression is generated from the highest rated result pattern. The regular expression created from the highest rated pattern may be used later to extract real results from raw HTML pages from a web search engine. The created regular expression matches all the result on the HTML page, capturing each result and its individual fields. The regular expression is constructed so as to match to certain fields of the HTML page and is able to extract these fields by having capturing groups where the fields are. In some embodiments, the generation of a regular expression from the highest rated result pattern includes restoration of any removed HTML tags during the simplification step. Then, all text fields are examined for HTML tags and tags found within the text fields are set to be allowable. Allowable tags mean that if such tags show up in the free text, the regular expression will still be able to extract properly the result fields, but such tags are not required to be present. Any other tags in the pattern that are not in the text fields are required to be matched. The regular expression is constructed so that when a tag is matched, only the angle brackets and tag name need to be matched. Also, all whitespace is ignored. An example of a generated regular expression from HTML follows:",{"@attributes":{"id":"p-0021","num":"0020"},"tables":{"@attributes":{"id":"TABLE-US-00003","num":"00003"},"table":{"@attributes":{"frame":"none","colsep":"0","rowsep":"0"},"tgroup":[{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"thead":{"row":{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}},"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"HTML fragment:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"<\/li><li class=\u201csummary\u201d>"]},{"entry":[{},"<h3>"]},{"entry":[{},"<a href=\u201chttp:\/\/www.nytimes.com\/"]},{"entry":[{},"2009\/03\/09\/business\/economy\/09treasury.html?scp=21&amp;sq="]},{"entry":[{},"geithner&amp;st=cse\u201d>"]},{"entry":[{},"Geithner, With Few Aides, Faces a Wave of"]},{"entry":[{},"Challenges<strong><\/strong>"]},{"entry":[{},"<\/a><\/h3>"]},{"entry":[{},"Even as Timothy F. Geithner"]},{"entry":[{},"maintains a frenetic pace to help heal the economy, there are signs"]},{"entry":[{},"that events are getting ahead of him.<strong><\/strong>"]},{"entry":[{},"<span class=\u201cbyline\u201d>"]},{"entry":[{},"March 9, 2009 - By EDMUND L. ANDREWS and"]},{"entry":[{},"STEPHEN LABATON - Business \/ Economy"]},{"entry":[{},"<\/span>"]}]}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"28pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"189pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":{"entry":[{},"Generated regular expression from the HTML fragment:"]}}},{"@attributes":{"align":"left","colsep":"0","rowsep":"0","cols":"2"},"colspec":[{"@attributes":{"colname":"1","colwidth":"14pt","align":"left"}},{"@attributes":{"colname":"2","colwidth":"203pt","align":"left"}}],"tbody":{"@attributes":{"valign":"top"},"row":[{"entry":[{},"(?s)<\/li[\\s\\p{Cntrl}]*>[\\s\\p{Cntrl}]*<li\\b[{circumflex over (\u2009)}>]*>[\\s\\p{Cntrl}]*"]},{"entry":[{},"<h3\\b[{circumflex over (\u2009)}>]*>[\\s\\p{Cntrl}]*"]},{"entry":[{},"(?:(?:(?=(?:[\\s\\p{Cntrl}])*+<a\\b[{circumflex over (\u2009)}>]*>)"]},{"entry":[{},"(?:<(?:a\\b[{circumflex over (\u2009)}>]*?\\bhref\\b[\\s\\p{Cntrl}]*=[\\s\\p{Cntrl}]*"]},{"entry":[{},"([{circumflex over (\u2009)}>\\s\\p{Cntrl}]*)[{circumflex over (\u2009)}>]*)\\b[{circumflex over (\u2009)}>]*>|[\\s\\p{Cntrl}])*+))"]},{"entry":[{},"(?:((?=(?:<\/?(?:strong)\\b[{circumflex over (\u2009)}>]*>|[\\s\\p{Cntrl}])*+[{circumflex over (\u2009)}<>\\s\\p{Cntrl}])"]},{"entry":[{},"(?:<\/?(?:strong)\\b[{circumflex over (\u2009)}>]*>|[{circumflex over (\u2009)}<>])*+))"]},{"entry":[{},"<\/a[\\s\\p{Cntrl}]*>[\\s\\p{Cntrl}]*<\/h3[\\s\\p{Cntrl}]*>[\\s\\p{Cntrl}]*"]},{"entry":[{},"(?:((?=(?:<\/?(?:strong)\\b[{circumflex over (\u2009)}>]*>|[\\s\\p {Cntrl}])*+[{circumflex over (\u2009)}<>\\s\\p{Cntrl}])"]},{"entry":[{},"(?:<\/?(?:strong)\\b[{circumflex over (\u2009)}>]*>|[{circumflex over (\u2009)}<>])*+))"]},{"entry":[{},"<span\\b[{circumflex over (\u2009)}>]*>[\\s\\p{Cntrl}]*"]},{"entry":[{},"(?:((?=(?:[\\s\\p{Cntrl}])*+[{circumflex over (\u2009)}<>\\s\\p{Cntrl}])(?:[{circumflex over (\u2009)}<>])*+))"]},{"entry":[{},"<\/span[\\s\\p{Cntrl}]*>[\\s\\p{Cntrl}]*"]},{"entry":{"@attributes":{"namest":"1","nameend":"2","align":"center","rowsep":"1"}}}]}}]}}},"Some embodiments of the invention may include the above-described methods being written as one or more software components. These components, and the functionality associated with each, may be used by client, server, distributed, or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as, functional, declarative, procedural, object-oriented, lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively, the components maybe implemented in server and client applications. Further, these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example, a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level (e.g., a graphical user interface). These first and second computer systems can be configured in a server-client, peer-to-peer, or some other configuration. The clients can vary in complexity from mobile and handheld devices, to thin clients and on to thick clients or even other servers.","The above-illustrated software components are tangibly stored on a computer readable medium as instructions. The term \u201ccomputer readable medium\u201d should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term \u201ccomputer readable medium\u201d should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store, encode, or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described, represented, or illustrated herein. Examples of computer-readable media include, but are not limited to: magnetic media, such as hard disks, floppy disks, and magnetic tape; optical media such as CD-ROMs, DVDs and holographic devices; magneto-optical media; and hardware devices that are specially configured to store and execute, such as application-specific integrated circuits (\u201cASICs\u201d), programmable logic devices (\u201cPLDs\u201d) and ROM and RAM devices. Examples of computer readable instructions include machine code, such as produced by a compiler, and files containing higher-level code that are executed by a computer using an interpreter. For example, an embodiment of the invention may be implemented using Java, C++, or other object-oriented programming language and development tools. Another embodiment of the invention may be implemented in hard-wired circuitry in place of, or in combination with machine readable software instructions.",{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 4","b":["400","400","405","455","400","440","455","410","415","410","415","405","415","400","425","430","400","425","430","400","435","400","450","450","400","445","400","420","460","460","460","450","460"]},"The above descriptions and illustrations of embodiments of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather, the scope of the invention is to be determined by the following claims, which are to be interpreted in accordance with established doctrines of claim construction."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The claims set forth the embodiments of the invention with particularity. The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. The embodiments of the invention, together with its advantages, may be best understood from the following detailed description taken in conjunction with the accompanying drawings.",{"@attributes":{"id":"p-0008","num":"0007"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":"FIG. 4"}]},"DETDESC":[{},{}]}
