---
title: File fetch from a remote client device
abstract: Techniques for an electronic file fetch system are described. A method may comprise sending a request for a roaming file list to a file fetch server from a first client device and receiving the roaming file list from the file fetch server by the first client device. The roaming file list includes a unique identifier associated with an application file stored on a second client device. The unique identifier includes a machine identifier identifying the second client device and a local file path portion identifying the file path of the application file stored on the second client device. Based on the machine state of the second client device as indicated in the roaming file list, the application file stored on the second client device may be downloaded to the first client device. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965958&OS=08965958&RS=08965958
owner: Microsoft Corporation
number: 08965958
owner_city: Redmond
owner_country: US
publication_date: 20111027
---

{"@attributes":{"id":"description"},"BRFSUM":[{},{}],"heading":["BACKGROUND","SUMMARY","DETAILED DESCRIPTIONS"],"p":["Application files saved locally to a hard drive or other memory component of a first machine are not easily accessible via a second machine that is remote from the first machine. This is due to the distinction in local memory between the machines. One way for a user to access an application file stored on the first machine is to first transfer the application file from the first machine to a server hosted location accessible by the user via the second machine that is remote from the first machine. However, this requires forethought by the user to recognize that the application file will be needed in the future and to save the file to a server hosted location where the user may access it using the second machine which is remote from the first machine. This also requires that the user have access to a server hosted location and sufficient space on the server hosted location to save the application file.","Alternatively, an application file may be synched between the first and second machines so that a user may access this application file from either machine. However, this necessitates synchronizing the application file peer-to-peer which requires additional resources from the first machine regardless of whether or not the application file is ever accessed via the second machine. This results in a waste of device resources. In addition, synching the application file peer-to-peer may also require the application file to be saved in a specific location on the hard drive of the first machine and that in turn requires forethought by the user that the application file will be needed at a later time. It is with respect to these and other considerations that the present improvements have been needed.","This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter, nor is it intended as an aid in determining the scope of the claimed subject matter.","Various embodiments are generally directed to electronic file fetch systems. Some embodiments are particularly directed to an electronic file fetch system arranged to retrieve an application file from a remote client device. The electronic file fetch system may allow a user to save an application on a first client device and retrieve that same application file from a second client device which is remote from the first client device. In one embodiment, a user registers the first and second client devices with a web service to allow communication therebetween. The file fetch system utilizes a roaming file list sent from the first client device to the web service on a file fetch server. The roaming file list includes a list of application files saved locally on the first client device. The roaming file list is retrieved from the file fetch server by the second client device. In one embodiment, if the machine state of the first client device is \u201cON\u201d, a user may select an application file listed on the roaming file list for download from the first client device. The machine state of the first client device determines whether or not the application file saved locally on that device is available for download to the second client device. A communication connection is established between the first client device, and the second client device to allow the application file to be downloaded to the second client device.","In one embodiment, for example, an apparatus may comprise a logic device and a file manager component operative on the logic device. The logic device may comprise, for example, a processor that accesses memory. The file manager component is operative to receive a roaming file list from a file fetch server via a communication connection established therebetween. The roaming file list includes an application file identifier corresponding to an application file stored on a remote client device. The file manager component is operative to receive the application file identifier in the roaming file list from the file fetch server with a status indicator representing a machine state of the remote client device on which the application file is stored. A communication connection is established between the file fetch server and the remote client device to allow the application file to be retrieved from the remote client device. The file manager component is operative to receive the application file stored on the remote client device. The apparatus may further comprise an application program operative to open the application file received from the remote client device. The file manager component establishes a communication connection with a server hosted location and is operative to send a control directive to the server hosted location to save the application file received from the remote client device to the server hosted location for future retrieval by a user. Other embodiments are described and claimed.","Various embodiments are generally directed to a file fetch system used to provide access to a file saved on a local memory of a first client device by a second remote client device. The file fetch system generates a roaming file list comprising application file identifiers of application files associated with an application program saved on the first client device. The roaming file list is generated by a file fetch server based on, for example, a recent file list of application files sent from the first client device to a web service implemented by the file fetch server.","In many cases, a user such as a knowledge worker may use multiple heterogeneous computing devices suitable for a given work environment. For instance, the user may have a desktop computer at a home or office for core work, a laptop computer for mobile work, and a smart phone for instant connectivity. While the use of multiple heterogeneous devices adds convenience in the form of computing platforms, it comes at the cost of increased complexity in file management across these numerous devices. The file fetch system solves these and other problems by allowing a user to easily access an application file from multiple heterogeneous devices regardless of which device is currently storing the application file. As a result, the file fetch system reduces costs associated with managing application files across multiple devices, while enhancing user convenience, flexibility, and experience.","The file fetch system may allow a user to access an application file locally saved on a first client device from a second client device remote from the first client device without having to anticipate needing to first save that application file to a server hosted location or removable memory device. Instead, a roaming file list may be maintained by a web service and accessed by authorized client devices registered with the web service to select a particular application file identified in the roaming file list for download from the first client device to the second client device.","Each time a user saves an application file to local memory on a first client device, a unique identifier is assigned as a roaming setting for the particular application file. The unique identifier includes a machine identifier unique to the first client device and a local file path portion representing where on the first client device the application file is stored. The roaming file list is provided to a web service from the first client device via any one of various communications networks. A user may register particular client devices with the web service so that the client devices have access to the roaming file list as well as application files identified on the roaming file list regardless of which client device the application file is stored on. When the registered user accesses the application program from the second client device, the application program requests the roaming file list from the web service. The web service checks the machine state of the first client device. The web service may update the availability of the application files identified in the roaming file list based on the machine state of the first client device before sending the roaming file list to the second client device. Alternatively, the web service may send the roaming file list to the second client device and subsequently send one or more updates to indicate the availability of each of the application files identified on the roaming file list before the roaming file list is displayed to a user of the second client device. As a further alternative, the web service may send the roaming file list to the second client device and may send a subsequent update to the second client device after the roaming file list is displayed to a user of the second client device, but as the machine state of the first client device is updated by the web service. For example, if the machine state of the first client device is \u201cON\u201d then the application files stored on the first client device are available to the second client device via the file fetch server. If the machine state of the first client device is \u201cOFF\u201d then the application files stored on the first client device are unavailable to the second client device via the file fetch server. Alternatively, the machine state of the first client device may be in a \u201cstandby\u201d mode. In this case, if the client device can be accessed by the web service, then the machine state of the device will be treated as ON and if the client device cannot be accessed by the web service, then the machine state of the device will be treated as OFF. In this manner, the roaming file list is received by the second client device and indicates the availability of each of the application files included in the list. If a user selects an available application file identified on the roaming file list for download, the web service automatically establishes a communication connection with the first client device over a network and retrieves the selected application file for download to the second client device. In this manner, a user who saves a file to local memory on a first machine can seamlessly access that same file from a second machine through the use of a roaming list of recently edited files.",{"@attributes":{"id":"p-0032","num":"0031"},"figref":["FIG. 1","FIG. 16"],"b":["100","110","1","110","100","100","150","140","110","1","110","130","1","120","1","110","1","110","110","1","110","110","1","110"]},"For purposes of this disclosure, client devices - and - will be used as an example of the client device - . . . -N, however the description herein is equally applicable to any of the client devices - . . . -N. In particular, client device - includes logic device - arranged to execute an application program - having a file manager component -. Memory - may be used to store application files - . . . -N and file manager component - is used to provide a user with one or more of the application files - . . . -N. In one embodiment, for example, the logic device - may comprise a processing system having a processor and memory. A user may, for example, use the file manager component - and application program - to create, open, edit, print, copy, or otherwise manage one or more application files - . . . -N. Alternatively, the application program - may be stored on a remote server application accessible via network  which accesses an application file - . . . -N stored in memory - of client device -. Examples of application program - may include client-based application programs (or \u201cclient applications\u201d) such as, without limitation, MICROSOFT\u00ae WORD, MICROSOFT EXCEL\u00ae, MICROSOFT POWERPOINT\u00ae, MICROSOFT OUTLOOK\u00ae, MICROSOFT ACCESS\u00ae, MICROSOFT INFOPATH\u00ae, MICROSOFT ONENOTE\u00ae, MICROSOFT PROJECT, MICROSOFT PUBLISHER, MICROSOFT SHAREPOINT\u00ae WORKSPACE, MICROSOFT VISIO\u00ae, MICROSOFT OFFICE INTERCONNECT, MICROSOFT OFFICE PICTURE MANAGER, MICROSOFT SHAREPOINT DESIGNER, MICROSOFT LYNC. Examples of application program - may further include server-based application programs (or \u201ccloud applications\u201d) such as, without limitation, MICROSOFT WINDOWS LIVE\u00ae, MICROSOFT OFFICE WEB APPLICATIONS, MICROSOFT OFFICE LIVE, MICROSOFT LIVE MEETING, MICROSOFT OFFICE PRODUCT WEB SITE, MICROSOFT UPDATE SERVER, and MICROSOFT OFFICE 365.","It is worthy to note that although the file manager component - is shown in  as an integrated part of the application program -, it may be appreciated that the file manager component - may be implemented as part of another software program separate from the application program -. For instance, the file manager component - may be implemented as part of a system program, such as an operating system (OS) for the client device - which is made accessible to the application program -. Alternatively, the file manager component - may be implemented as a stand-alone software program separate from the application program -. This implementation may allow the file manager component - to be used as a shared resource among different application programs -. In addition, although the file fetch server  is shown and described as a single server environment this has been done for ease of explanation. It should be understood that the file fetch server  may be implemented as one or more servers, server farm and\/or distributed server architecture. For instance, file fetch server  may represent a first server that manages the generation and transmission of a roaming file list (e.g. ) and a separate server that communicates with the first server and manages the fetching\/transmission of an application file (e.g. -) retrieved from one client device (e.g. -) and sent to another client device (e.g. -).","The following describes the generation of a roaming file list (e.g. ) by file fetch server  based on a recent file list (e.g. -) received from a particular client device (e.g. client device -) in accordance with an exemplary embodiment. The roaming file list  is generated by extracting all or a portion of the information contained in the recent file list -. In particular, the recent file list - is generated by file manager component - which assigns a unique identifier for each application file saved on client device -. Alternatively, the recent file list may be generated by a program separate from the file manager component -, but within the application program - in which case the steps described herein as being performed by the file manager component - would likewise be performed by such separate program. When an application file - . . . -N is stored in memory -, the file manager component - assigns a globally unique identifier (GUID) to the particular application file. Briefly (and as described in more detail with reference to ), the GUID includes a machine identifier  and a local file path portion . The GUID may be locally unique to a particular user of a client device - . . . -N and the user is globally unique to all other users. The machine identifier  is a unique identifier for a particular one of the client devices - . . . -N (e.g. client device -) and the local file path portion  is the path within the particular one of the client devices - where the particular application file (e.g. application file -) is stored. Each application file - . . . -N is assigned a unique GUID by the file manager component (e.g. file manager component -) associated with each application program (e.g. application program -) when the application file is saved.","The recent file list - includes certain of the application files - . . . -N accessed by a user of client device - associated with the particular application program -. The recent file list - may be provided when a user opens the particular application program -. For example, a recent file list - for MICROSOFT WORD may provide a listing of document files recently stored in memory - of client device -. The recent file list - may be a subset of all the application files for a particular application program, may be limited by a predetermined number of application files, and\/or may be limited by a date range. This provides one convenient way for the application program - to identify a set of application files from application files - . . . -N that may be most relevant to a user. Again, each application file - . . . -N stored in memory - includes a GUID. The recent file list - may provide the user with the GUID or may only provide a user readable file path derived from all or a portion of the GUID when the application files listed in recent file list - are saved locally on client device -.","Although the recent file list - may include a subset of application files - . . . -N using a temporal limitation for application files - . . . -N recently stored in memory - for client device -, it may be appreciated that the recent file list - may alternatively remove the temporal limitation and include an entire set of application files - . . . -N stored in memory - for client device -. In this arrangement, a user may retrieve any of the application files - . . . -N stored by the client device - from another client device (e.g. -).","The recent file list - is sent to the file fetch server  where roaming file list  is generated. This may occur, for example, at various predetermined time intervals by file manager component -, during use of the application program -, sent upon the occurrence of a particular instruction from application program -, or pushed from the file fetch server  based on an update to the roaming file list  from a client device (e.g. -) different from client device -. When the recent file list - is received by file fetch server , the server file manager  may process the recent file list - to generate the roaming file list . This processing may include extraction of all or part of the data contained in the recent file list - received from file manager component - and includes the GUID associated with each application file identified in the recent file list -. The processing may optionally include data format conversion between data schemas as needed for particular application programs (e.g. -). The application files - . . . -N identified in the roaming file list  are not necessarily saved on the file fetch server , but rather the roaming file list  is a list of the application files - . . . -N identified on the recent file list - received from client device -. In addition, each time the recent file list - is saved to file fetch server , server file manager  rewrites or reprocesses the information received in the recent file list to generate a current roaming file list . In particular, server file manager  may extract any portion of the information received in recent file list - as desired for a given implementation, but must include at least the GUID for each of the application files - . . . -N.","The roaming file list  may be generated based on a particular application program - that the application files - . . . -N are associated with, and\/or by a client device -, -. In particular, server file manager  may generate a roaming file list  for each different type of application program - on client device -. For example, if client device - includes a word processing application program and a database application program, each file manager component - associated with the corresponding application program - on client device - may generate a separate recent file list - for each application program - and send each of these recent file lists - to file fetch server . In turn, server file manager  may generate separate corresponding roaming file lists  for each received recent file list - associated with each of the word processing and database application programs. Alternatively and as an additional example, server file manager  may receive each of the recent file lists - from client device - and generate one roaming file list  unique to the client device - or unique to a registered user and save this roaming file list  on file fetch server .","In order to send the recent file list - to file fetch server  to generate roaming file list , a communication session is established between client device - and file fetch server . In particular, web service  provides communications between file fetch server  and client device - by establishing a machine-to-machine connection therebetween over network . Web service  is also used to provide communication and interaction between client device - and client device - via network  as well as to manage the transmission of one or more of the application files - . . . -N to the remote client device - and the transmission of roaming file lists ,  and  as described in more detail below. Although network  is illustrated as a single network, it should be understood that network  may comprise any number of separate and\/or interconnected networks as described in more detail with reference to .","The various devices of the file fetch system  may communicate with each other over the network  utilizing web service . Web service  is a software architecture designed to support interoperable machine-to-machine interaction over network . In various embodiments, web service  may implement various web technologies, including remote procedure call (RPC) based technologies, simple object access protocol (SOAP) based technologies, service-oriented architecture (SOA) based technologies, or representational state transfer (REST) based technologies, among others.","In one embodiment, for example, web service  may utilize an interface described in a machine-processable format such as web services description language (WSDL) format. Other systems interact with the web service  in a manner prescribed by its description using SOAP messages. SOAP is a protocol specification for exchanging structured information to implement web services over a computer network. SOAP relies on extensible markup language (XML) as a message format. SOAP also relies on other application layer protocols, such as RPC and hypertext transfer protocol (HTTP), for message negotiation and transmission. SOAP can form a foundation layer of a web services protocol stack providing a basic messaging framework upon which web services  can be built. HTTL is an application layer request-response protocol specification for client-server computing.","A user must register with the web service  in order to utilize the file fetch system . In addition, a user must also register, with the web service, the particular devices (e.g. - . . . -N) such as, for example, a desktop computer, a laptop computer and a smart phone in order for these devices to be recognized by web service  to send\/receive roaming file lists as well as download particular application files between the devices. User registration with file fetch system  as well as the registration of particular client devices (e.g. - . . . -N) with web service  may be performed automatically by application program - or may be initiated by a user. In addition, a user may arbitrarily assign different permission levels between and among the different client devices as part of the registration process. For example, a user may register a desktop computer with web service  and assign permissions to this device such that application files may be retrieved from and downloaded to the device. Alternatively, a user may register a laptop computer with web service  and assign permissions to this device such that application files may only be downloaded to the device from a remote client device. Web service  stores the permission profile associated with each of the registered client devices. By registering particular client devices, the web service authenticates the client device when, for example, an application program on that client device attempts to retrieve the roaming file list from the web service, thereby preventing unauthorized access to roaming file lists as well as application files stored locally on client devices.","Client device - is registered with web service  in order to allow the sending of recent file list - to file fetch server  as well as to later provide controlled access to application files - . . . -N saved on client device - from another client device, for example client device - shown in  which is also registered with web service . For example, the client device - may register with the web service  using XML messaging that conforms to a particular data schema. Server file manager  receives the unique identifier for client device - and stores it in file fetch server  for access by web service . The unique identifier for a client device (e.g. client device -) used to register the client device with web service  may correspond to the machine identifier of the GUID as described in more detail below. In this manner, a user registers particular client devices (e.g. -, -) with web service  to select those devices that can fetch or retrieve application files saved on other registered client devices.","Included herein are flow charts representative of exemplary methodologies for performing novel aspects of the disclosed architecture. While, for purposes of simplicity of explanation, the one or more methodologies shown herein, for example, in the form of a flow chart or logic flow are shown and described as a series of acts, it is to be understood and appreciated that the methodologies are not limited by the order of acts as some acts may, in accordance therewith, occur in a different order and\/or concurrently with other acts from that shown and described herein. For example, those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events, such as in a state diagram. Moreover, not all acts illustrated in a methodology may be required for a novel implementation.",{"@attributes":{"id":"p-0046","num":"0045"},"figref":["FIG. 2","FIG. 1"],"b":["200","200","110","1"]},"In the illustrated embodiment shown in , an application program requests to store an application file at block . For example, the application program - and more particularly file manager -, processes a request by a user to save an application file - to memory -. The application file - is associated with a particular application program -.","The logic flow  assigns a GUID to the application file to be stored at block . For example, the file manager component - of the application program - assigns a GUID to the particular application file - which includes a machine identifier  () associated with the particular client device - and a local file path portion  () associated with a particular application file - stored in a unique path within client device -. The logic flow  stores the application file in memory at block . For example, the application file - associated with application program - may be stored in memory - of client device -.","The logic flow  updates a recent file list with a GUID of the stored application file at block . For example, the file manager component - of the application program - updates the recent file list - with the GUID of the application file stored in memory -.","The logic flow  sends the recent file list to a web server at block . For example, the recent file list - generated by application program - is sent to file fetch server  via network  for storage by server file manager . The recent file list - is uniquely identified for the particular client device - through the registration process described above. Each application file (e.g. -) listed on the recent file list - includes a GUID which identifies the particular client device (e.g. -) in which each application file (e.g. -) is stored. In this manner, the web service  determines which application file (e.g. -) is saved on which client device (e.g. -) as described in more detail below.",{"@attributes":{"id":"p-0051","num":"0050"},"figref":"FIG. 3","b":["300","125","1","170","1","120","1","110","1","300","300","125","1","175","1","300","125","1","175","1","150","175","1","173","1","110","1","180","300","175","1","180","180","300","125","1","175","1","110","1"]},"As shown in , the GUID  may be comprised of a machine identifier  and a local file path portion . The machine identifier  of the GUID  identifies a particular machine or client device (e.g. -) that an application file - is saved on. One example of a machine identifier  may comprise a device serial number or media access control (MAC) address which is globally unique. Alternatively, the machine identifier  may be randomly assigned by application program - and may be locally specific for a particular user (e.g. -) rather than globally unique to all users (e.g. - . . . -N). For example, a user's desktop computer may be assigned the locally unique identifier \u201cmachine 1\u201d, the same user's laptop computer may be assigned the locally unique identifier \u201cmachine 2\u201d and the user's mobile device may be assigned the locally unique identifier \u201cmachine 3\u201d. In this manner, the registered client devices are unique to a particular user which is globally unique to all users.","The local file path portion  of the GUID  identifies a location and a file name within the particular client device (e.g. -) where the application file (e.g. -) is stored and may be unique to a particular client device. One example of a local file path portion  may comprise a memory path in which the application file is stored including appropriate hard-drives, folder and file name. An application file (e.g. -) saved on the same client device (e.g. -) may have the same machine identifier  of GUID , but will have different local file path portions  comprising different local file paths with each local file path including a different file name usually indicated at the end of the local file path with a file extension associated with a particular application program (e.g. -). Conversely, an application file saved on different client devices may have the same local file path portion , but would have a different machine identifier . For example, an application file - saved on a hard disk drive of client device - usually indicates the particular drive designation together with one or more folder and\/or sub-folders, the name of the application file - and a file extension to indicate the particular application program - associated with the saved application file. For instance, a local file path portion  may comprise the following:\n\n",{"@attributes":{"id":"p-0054","num":"0054"},"figref":"FIG. 4","b":["100","110","2","110","1","110","2","110","1","110","1","110","2","110","1","130","2","120","2","126","1","126","110","1","110","2","110","1","110","2"]},"The use of the terms \u201cavailable\u201d or \u201cunavailable\u201d herein is intended to denote whether or not an application file may be downloaded from a remote client device using file fetch system . When a user opens the application program - on client device - remote from client device -, application program - sends a control directive to web service  to retrieve the roaming file list  saved on file fetch server . The web service  establishes a secure communication session with client device - identified in the roaming file list  saved on file fetch server  to determine the state (e.g. the \u201cON state\u201d or \u201cOFF state\u201d) of the respective machine. If the client device - identified on the recent file list - is in the ON state and accessible by the file fetch server , the web service  updates the roaming file list  stored on file fetch server  to indicate that the one or more application files - . . . -N identified on the roaming file list  saved on client device - are available. If the client device - identified on the recent file list - is in the OFF state and not accessible by the file fetch server , the web service  updates the roaming file list  stored on file fetch server  to indicate that the one or more application files - . . . -N identified on the roaming file list  saved on client device - are unavailable.","Alternatively, web service  may send roaming file list  to client device - and subsequently send one or more updates to indicate the availability of each of the application files (e.g. - . . . -N) based on the machine state of client device - before the roaming file list  is displayed to a user of client device -. As another alternative, web service  may send the roaming file list  to client device - and may also send subsequent updates to the client device - after the roaming file list  is displayed to a user of the client device -, but as the machine state of client device - is updated by web service . In this manner, if the machine state of client device - is OFF when web service sends the roaming file list  to client device -, but the machine state of client device - changes to the ON state, web service  provides this update to the roaming file list  already displayed to a user of client device -. For ease of explanation it will be understood that an application file - will be representative of one or more of the application files - . . . -N that may be identified on roaming file list  associated with client device -. If the client device - identified in the roaming file list  saved on file fetch server  is not in the ON state, or otherwise not accessible by the file fetch server , the web service  updates the recent file list - to indicate that the application file - identified on the roaming file list  saved on client device - is unavailable. Once the machine state of client device - identified on the recent file list - is updated as being ON or OFF, the web service  sends the updated roaming file list  to application program - on remote client device - via network  to indicate if an application file saved on that client device is available or unavailable. The application file - identified on the roaming file list  as unavailable based on the machine state of the corresponding client device - is still identified in the roaming file list  when supplied to file manger component - of application program -, but is indicated as unavailable as described in more detail with reference to . Alternatively, web service  may remove the unavailable application files from roaming file list  and only provide a listing of the available application files (- . . . -N) to client device -. In this manner, the machine state of a client device (e.g. ON or OFF) dictates whether or not an application file stored on the client device is available or unavailable to other client devices.",{"@attributes":{"id":"p-0057","num":"0057"},"figref":["FIG. 5","FIG. 4"],"b":["500","500","110","2"]},"In the illustrated embodiment shown in , the logic flow  monitors access of an application program on a client device at block . For example, when a user accesses an application program - on a client device -, the application program - generates a recent file list -, but waits to update the recent file list - with application file information from roaming file list  identifying certain application files - stored on registered client device -.","The logic flow  requests the roaming file list from the web server for client device - at block . For example, the file manager component - of the application program - or the application program - establishes a secure communication session with file fetch server  to have the web service  send the roaming file list  to client device -.","Before sending the roaming file list, the logic flow  determines the state of each client device identified in the roaming file list from the web service at block . For example, before sending the roaming file list  to client device -, the server file manager  utilizes the web service  to determine the state (e.g. ON state or OFF state) of client device - corresponding to the machine identifier  of each GUID  identified in the recent file list - as being saved locally at client device -. As another example, the roaming file list  may be sent to client device - and subsequently updated by web service  based on the machine state of client device -. The logic flow  updates the roaming file list with an available indicator if an application file identified on the roaming file list  is available at block  and updates the roaming file list  with an unavailable indicator, different from the available indicator, if the application file identified on the roaming file list is unavailable at block . For example, if the roaming file list  includes an application file with a GUID  having a machine identifier  that corresponds to client device -, the machine state of client device - is checked by web service . To determine the machine state of client device -, web service  attempts to establish a communication connection via network  using, for example, SOAP messaging between file fetch server  and client device -. If the machine state of client device - is ON, then the web service  updates the application files identified on roaming file list  having a machine identifier  of GUID  corresponding to client device - with an available indicator. If the machine state of client device - is OFF, then the web service  is unable to establish a secure communication session between the file fetch server  and client device -. In this latter case, the application files - . . . -N identified on recent file list - having a machine identifier  of GUID  corresponding to client device - are updated with an unavailable indicator. Alternatively, the unavailable application files - . . . -N based on the OFF machine state of client device - may be removed from the roaming file list . The updated roaming file list  is saved on file fetch server . In this manner, the availability to download, open, or otherwise access the application files identified in the roaming file list  by client device - is updated based on the machine state of the client device -.","The logic flow  sends the updated roaming file list to client device - at block . For example, once the server file manager  determines the machine state of client device - identified on the roaming file list  by the corresponding GUID  and has updated the recent file list  with a corresponding indicator to denote whether or not the application files stored on client device - corresponding to the machine identifier  of GUID  are available or unavailable, the server file manager  utilizes the web service  to send the updated roaming file list  to client device -.",{"@attributes":{"id":"p-0062","num":"0062"},"figref":"FIG. 6","b":["100","110","2","150","180","175","2","126","1","126","110","2","170","2","110","2","180","150","150","110","2","173","2","180","175","2","181","180","160","110","1","110","2","110","1","181","180","175","2","110","2","175","2","180","110","1","110","2"]},{"@attributes":{"id":"p-0063","num":"0063"},"figref":"FIG. 7","b":["181","181","180","110","2","150","140","175","2","126","1","126","110","2","125","1","180","110","1","181","110","2"]},{"@attributes":{"id":"p-0064","num":"0064"},"figref":"FIG. 8A","b":["800","181","110","2","800","173","2","170","2","800","110","2"]},"Again, roaming file list  comprises application files ,  from application file list - and roaming file list , respectively. By way of example and for purposes of explanation, application file list - may include application files - and - stored locally on client device - and roaming file list  may include application files -, - and - stored on remote client device -. In this particular example, the client device - may be referred to as a \u201cremote client device\u201d since it is physically remote from the client device - which includes roaming file list . Thus, user interface view  of roaming file list  lists application files - and - from recent file list - which are saved locally and available to client device -, and application files -, - and - from roaming file list  saved on client device -. The application files -, -, -, - and - each have a corresponding GUID - . . . -, respectively. Each application file -, -, -, - and - may have an associated status indicator to denote to the user whether or not a particular application file -, -, -, - and - is available or unavailable to client device -. For example, application files -, - and - are illustrated as having a status indicator comprising bold text to indicate that these application files are not saved locally on user device -. Application files - and - do not have such bold text since they are identified on recent file list -, saved locally and available to client device -.","The bold text is an example of visual indicia that denotes which of the application files -, -, -, - and - on roaming file list  is not saved locally to client device -. By way of example and not limitation, the bold text associated with application file names -, - and - may be representative of the color green to indicate that these application files are not saved locally on client device -, but that each is available to client device - from remote client device -. Alternatively, the bold text associated with application files -, - and - may be representative of the color red to indicate that these application files are not saved locally to client device - and are unavailable to a user of client device -. The absence of color associated with application files - and - may indicate that these application files are saved locally on client device - and are available to a user. It may be appreciated that other visual indicators as well as combinations thereof may be used as well.",{"@attributes":{"id":"p-0067","num":"0067"},"figref":"FIG. 8B","b":["840","181","110","2","840","181","125","1","125","2","125","3","126","1","126","2","300","1","300","5","125","1","125","2","125","3","126","1","126","2","125","1","125","2","125","3","126","1","126","2","810","1","810","2","810","3","125","1","125","2","125","3","125","1","125","2","125","3","110","2","110","2","810","1","810","2","810","3","125","1","125","2","125","3","110","2","125","1","125","2","125","3","110","2","810","1","810","2","810","3","125","1","125","2","125","3","110","2","125","1","125","2","125","3","110","2","810","1","810","2","810","3","181","110","2"]},{"@attributes":{"id":"p-0068","num":"0068"},"figref":"FIG. 8C","b":["850","181","110","2","850","181","125","1","125","2","125","3","126","1","126","2","300","1","300","5","125","1","125","2","125","3","110","2","126","1","126","2","110","2"]},"As another exemplary alternative, the application files -, -, - may also have an associated icon -, - and - as further visual indicia to indicate whether or not the application file is available or unavailable. Thus, the bold text associated with application files -, -, - may represent the color green to indicate that these application files are not saved locally to client device - together with an associated icon -, - and - also colored green to indicate that the machine state of the associated client device (client device -) is in an ON state and application files -, -, - are available, but must be downloaded to the client device - before being accessible by the user. Alternatively, the bold text may represent the color red to indicate that the application files -, -, - are not stored locally on client device - and the associated icons -, - and - are also colored red to indicate that the machine state of that client device where application files -, -, - are stored (e.g. client device -) is in an OFF state and therefore the application files -, -, - are unavailable. In this manner, a user may easily visually identify those files that are saved locally and those that are available from a remote device and those that are stored on a remote client device, but are unavailable. Again, an application file is available to a user if the application file is stored locally on client device - or if it is stored on a remote client device (e.g. -) and the machine state of the remote client device is in an ON state.",{"@attributes":{"id":"p-0070","num":"0070"},"figref":["FIG. 9","FIG. 1"],"b":["100","125","1","110","2","110","1","125","1","110","1","110","2","125","1","110","2","125","1","110","1","125","1","125","120","1","110","1","110","2","125","1","125","110","1","181","110","2"]},"For example, a user of client device - may request to download application file - identified on roaming file list  saved on remote client device - (shown in ) via file fetch server  and network . In particular, a user on client device - may select the available application file - identified in the roaming file list  via a user interface shown, for example, in . The selected application file - may be available for download based on the machine state of the remote client device - determined by web service  as described above with reference to . Once application file - is selected by the user of client device -, file manager component - sends a control directive  to file fetch server  via network  to instruct web service  to retrieve application file - stored on client device -. Web service  establishes a secure communication session with client device - and fetches or retrieves application file - from memory - based on the GUID associated with the selected application file -. Server file manager  receives the application file - and, with a communication session established by web service , downloads the returned application file - from file fetch server  to client device - via network .","As stated above, client devices -, - communicate with web service  via network  to transfer the recent file list - as well as to transfer and retrieve application files (e.g. -) to\/from file fetch server . There exists standard web services specifications, architecture and invocation models to provide for registration and communication to and from web services, such as web service  via network , as defined by the Web Services Interoperability Organization (WS-I). A number of different techniques may be utilized to provide such communication any of which may be utilized to register client devices -, - with web service  and to provide for the transfer of recent file list -, roaming file lists ,  as well as application file -. However, by way of background, a typical interaction between client device - and web service  will be described as an example of one way client - communicates with web service  to transfer recent file list - and application file - to file fetch server  as well as registration and communication between client devices -, - and web service . The following description is equally applicable to communication between web service  and any of the client devices - . . . -N.","For example, to communicate with web service , an application program (e.g. application program -) of client device - initiates a procedure call to web service  using a WSDL file obtained from web service . An HTTP communication channel over network  is established with web service  using a service endpoint associated with the web service  defined in the WSDL file. A procedure call is sent from application program - to web service  over the HTTP connection using SOAP and RPC. Briefly, RPC is an inter-process communication mechanism that enables data exchange and invocation of functionality between client device - and web service . The web service  accepts the procedure call, performs processing based on the procedure call, and returns a response to client device - via the established HTTP communication channel over network  also using SOAP and RPC. Client device - returns the response from web service  to the application program -. This procedure generally describes one way registration, authentication and communication between a client device - . . . -N and web service  may be accomplished.",{"@attributes":{"id":"p-0074","num":"0074"},"figref":["FIG. 10","FIG. 9"],"b":["1000","1000","110","2"]},"In the illustrated embodiment shown in , a user selects an available application file stored on a remote client device at block  where the availability of the application file is based on the machine state of the remote client device. For example, file manager component - processes a request from a user to select application file - saved on remote client device -. The application file - has an associated availability indicator based on the machine state of client device -. In particular, if the machine state of client device - is ON, the GUID  corresponding to the selected application file - included in the roaming file list  has an associated visual indicia to indicate that the application file - is available from client device -.","A control directive is sent by the file manager component of a particular client device to retrieve the available application file selected by a user from the remote client device at block . For example, file manager component - of client device - sends a control directive  to file fetch server  via network  to instruct the server file manager  to retrieve the selected application file - stored on remote client device - via web service .","The control directive is received by the file fetch server  to retrieve the available application file selected by the user of client device - at block . For example, the file fetch server  receives the control directive  from client device - and web service  establishes a secure communication session with remote client device -.","The available application file is retrieved from the remote client device - at block  via the secure communication session established between web service  and remote client device -. For example, web service  fetches or retrieves the selected application file - from memory - of remote client device - based on the GUID  associated therewith and the file manager  on file fetch server  receives the selected application file -.","The available application file is sent from the file fetch server  to the client device - at block . For example, the server file manager  on the file fetch server  sends the available application file - to client device - via network  using the communication session established by web service  between client device - and file fetch server .","The selected application file is downloaded to the client device - at block . For example, the client device - downloads the selected application file - retrieved from client device - via file fetch server  and a user opens the file using file manager component - and application program -.",{"@attributes":{"id":"p-0081","num":"0081"},"figref":["FIG. 11","FIG. 10"],"b":["100","110","2","173","2","125","1","950","140","173","2","125","1","150","110","2","170","2","173","2","125","1","173","2","110","2","125","1","170","2","125","1","950","140","950","173","2","950","125","1","950","110","2","173","2","125","1","950","140"]},"Since the downloaded file is in read-only format, a user may save the application file - to local memory - on client device - if a new version of the application file - is saved and\/or the application file - is renamed. In either case, a new GUID , specific to the renamed or new version of application file - will be generated by file manager component - and the roaming file list  associated with application program - will be updated with the renamed or new version of application file -. In the event that application file - is saved as a new version, various versioning and synchronizing procedures may be implemented to reconcile the various versions of application file - between client devices - and -. In either event, the application file - downloaded to client device -, but saved as a different file or version will receive a new GUID  and will no longer be associated with application file - originally saved on client device -.",{"@attributes":{"id":"p-0083","num":"0083"},"figref":"FIG. 12","b":["100","181","110","1","950","960","125","1","110","1","110","2","950","100","125","1","960","110","1","950"]},"In particular, when application file - is saved by a user on network server  a network identifier  is sent to file manager component - of application program -. The network identifier  may be a network server file path indicating where on network server  application file - is stored. An example of such a network server file path may be a Uniform Resource Identifier (URI) or other application-specific network server file path.","File manager component - receives the network identifier  and adds the network identifier to the GUID associated with application file - on the roaming file list . In particular and as described above with reference to , roaming file list  includes the roaming file list  associated with client device - received from file fetch server  and the recent file list - associated with application program - local to client device -. Since the source of application file - was originally client device -, the GUID  associated with application file - includes the machine identifier  of client device - and the local file path portion  which identifies the location and file name within the client device - where the application file - was stored. However, the application file - was subsequently stored by a user of client device - on network server  which is a location other than client device -, the original source of the application file. The network identifier  represents the new saved location of the application file - originally retrieved from client device -. In this manner, the GUID  associated with application file - may be updated to include the network identifier , along with the previous GUID information of the machine identifier  representing client device - and the local file path portion .",{"@attributes":{"id":"p-0086","num":"0086"},"figref":["FIG. 13","FIG. 13","FIG. 3"],"b":["970","125","1","950","125","1","970","110","1","950","110","2","970","300","970","305","310","960","305","125","1","110","1","310","970","170","1","110","1","125","1","960","950","125","1","305","310","970"]},{"@attributes":{"id":"p-0087","num":"0087"},"figref":"FIG. 14","b":["100","182","173","2","110","2","150","140","950","100","110","1","110","2","110","1","125","1","125","1","950","950","110","1","182","150","110","2","175","1","110","1","100"]},"In particular, when the application file - is stored on network server  as described with reference to , the GUID  associated with the application file - was modified from the GUID  identified in roaming file list . Again, roaming file list  included the application files saved on client device - as well as the recent file list - associated with the application files - . . . -N for application program - saved locally on client device -. When application file - is stored on network server , file manager component - updates the roaming file list  with GUID  and generates roaming file list . In this manner, roaming file list  includes the recent file list - as well as the GUID  for application file - saved to network server . The roaming file list  is sent, by file manager component -, to the file fetch server  via network  and is compared (as detailed below) to recent file list - of client device - to determine if a newer version of the application file - is available for a user. The roaming file list  may be sent to the file fetch server  at various predetermined time intervals by file manager component -, during use of the application program -, or may be sent upon the occurrence of a particular instruction from application program -.",{"@attributes":{"id":"p-0089","num":"0089"},"figref":["FIG. 15","FIGS. 8A-8C"],"b":["182","182","181","960","181","181","180","175","2","180","110","1","175","2","110","2","125","1","950","960","300","125","1","970","173","2","181","970","125","1","182","182","125","1","125","110","1","180","126","1","126","175","2","173","2","110","2","125","1","125","110","2","110","1","950","182","110","1","182","110","2"]},{"@attributes":{"id":"p-0090","num":"0090"},"figref":"FIG. 16","b":["100","110","1","173","1","110","1","173","1","160","182","150","110","2","182","175","1","170","1","175","1","125","1","125","110","1","170","1"]},"When a user selects a particular application file - . . . -N identified on the recent file list -, file manager component - checks the roaming file list  saved on file fetch server  to determine if the selected application file - . . . -N has a new location. In particular, file manager - checks the GUID (e.g. ) of the selected application file - . . . -N from recent file list - with the GUID (e.g. ) of the same application file on roaming file list . If the GUID (e.g. ) on the recent file list - for the selected application file - . . . -N matches the GUID (e.g. ) of the same application file on roaming list , file manager component - opens the selected application file - . . . -N stored in memory -. If the GUID (e.g. ) on the recent file list - for the selected application file - . . . -N does not match the GUID (e.g. ) of the same application file - . . . -N on roaming list , file manager component - utilizes a network identifier  of the non-matching GUID (e.g. ) to send a request to network server  to retrieve the application file - . . . -N from the network server . By way of example, the GUID  for a selected application file - which was identified on the recent file list - comprises a corresponding machine identifier  and a local file path portion . However, if the same application file - was saved by a user via client device - to network server , the GUID  will also include a network identifier  in addition to the machine identifier  and a local file path portion . Thus, the GUID  for the same application file - will not match when the application file - has been saved to a new location (e.g. network server ). In this instance, file manager component - renders a prompt to the user indicating that a new version of the selected application file - is available and whether or not the user would like to switch to the application file - saved on the network server .",{"@attributes":{"id":"p-0092","num":"0092"},"figref":"FIG. 17","b":["1700","100","1700","110","1","950","110","2"]},"In the illustrated embodiment shown in , the logic flow  checks the GUID of an application file against the roaming file list. For example, when a user selects application file - (which was originally saved locally on client device -) via the recent file list -, the file manager component - checks the roaming file list  saved on file fetch server  to determine if the selected application file - has a new saved location. Alternatively, the roaming file list  may be downloaded from the file fetch server  and saved to the client device (e.g. -) in which case the file manager component - checks the roaming file list  on the local client device - when a user selects application file - to determine if it has a new saved location. This alternative provides system performance since the file manager component - does not have to communicate with the file fetch server , but rather performs the check locally at client device -.","The logic flow  determines if the GUID on the recent file list matches the GUID on the roaming file list at block . For example, file manager - checks the GUID of the selected application file - from recent file list - with the GUID of the same application file - on roaming file list  to determine if they match.","The logic flow  opens the application file from the local client device at block  if the GUID on the recent file list matches the corresponding GUID for the same application file on the roaming file list. For example, if the application file -, originally saved on client device - was not saved to network server , the GUID  for application file - identified on the recent file list - will match the GUID  for application file - identified on the roaming file list . This indicates that a new version of application file - does not exist. Thus, file manager - opens application file - stored locally in memory - of client device -.","The logic flow  renders a prompt indicating that a new version of the selected application file is available at block  if the GUID on the recent file list does not match the corresponding GUID for the same application file on the roaming file list. For example, if the application file - was originally saved on client device -, but was subsequently accessed by a user of client device - and saved to network server , the GUID  identified in the recent file list - and the GUID  identified in the recent file list  for the same application file - will not match. In particular, the GUID  for the selected application file - identified on the recent file list - comprises a corresponding machine identifier  and a local file path portion . However, since the same application file - was saved by a user via client device - to network server , the GUID  will also include a network identifier  in addition to the machine identifier  and the local file path portion . Thus, the GUID s ,  for the same application file - will not match and a prompt will be rendered to the user indicating the newer version of the application file - is available from network server .","The logic flow  determines if the user selected the newer version of the application file at block  based on the rendering of the prompt indicating that a new version of the selected application file is available. For example, file manager component - determines if the user of client device - selected the newer version of the application file - saved on network server . If the user does not select the newer version of the application file -, the logic flow opens the application file - saved on the local client device at block . For example, if the user does not select to open the newer version of application file - saved on network server , application manager component - opens the application file - saved in memory - of client device -.","The logic flow  retrieves the application file from network server at block  if the user has selected the new version of the application file. For example, if the user selects to open the newer version of application file - saved on network server , file manager component - retrieves the application file from network server .",{"@attributes":{"id":"p-0099","num":"0099"},"figref":"FIG. 18","b":["1800","110","1","110","2","100","1800","1800"]},"As shown in , the computing architecture  comprises a processing unit , a system memory  and a system bus . The processing unit  can be any of various commercially available processors. Dual microprocessors and other multi-processor architectures may also be employed as the processing unit . The system bus  provides an interface for system components including, but not limited to, the system memory  to the processing unit . The system bus  can be any of several types of bus structure that may further interconnect to a memory bus (with or without a memory controller), a peripheral bus, and a local bus using any of a variety of commercially available bus architectures.","The system memory  may include various types of memory units, such as read-only memory (ROM), random-access memory (RAM), dynamic RAM (DRAM), Double-Data-Rate DRAM (DDRAM), synchronous DRAM (SDRAM), static RAM (SRAM), programmable ROM (PROM), erasable programmable ROM (EPROM), electrically erasable programmable ROM (EEPROM), flash memory, polymer memory such as ferroelectric polymer memory, ovonic memory, phase change or ferroelectric memory, silicon-oxide-nitride-oxide-silicon (SONOS) memory, magnetic or optical cards, or any other type of media suitable for storing information. In the illustrated embodiment shown in , the system memory  can include non-volatile memory  and\/or volatile memory . A basic input\/output system (BIOS) can be stored in the non-volatile memory .","The computer  may include various types of computer-readable storage media, including an internal hard disk drive (HDD) , a magnetic floppy disk drive (FDD)  to read from or write to a removable magnetic disk , and an optical disk drive  to read from or write to a removable optical disk  (e.g., a CD-ROM or DVD). The HDD , FDD  and optical disk drive  can be connected to the system bus  by a HDD interface , an FDD interface  and an optical drive interface , respectively. The HDD interface  for external drive implementations can include at least one or both of Universal Serial Bus (USB) and IEEE 1394 interface technologies.","The drives and associated computer-readable media provide volatile and\/or nonvolatile storage of data, data structures, computer-executable instructions, and so forth. For example, a number of program modules can be stored in the drives and memory units , , including an operating system , one or more application programs , such as application programs -, -, other program modules , and program data . A user can enter commands and information into the computer  through one or more wire\/wireless input devices, for example, a keyboard  and a pointing device, such as a mouse . Other input devices may include a microphone, an infra-red (IR) remote control, a joystick, a game pad, a stylus pen, touch screen, or the like. These and other input devices are often connected to the processing unit  through an input device interface  that is coupled to the system bus , but can be connected by other interfaces such as a parallel port, IEEE 1394 serial port, a game port, a USB port, an IR interface, and so forth.","A monitor  or other type of display device is also connected to the system bus  via an interface, such as a video adaptor . The monitor  is an example of the user interface device used to display the views illustrated in . In addition to the monitor , a computer may also include other peripheral output devices, such as speakers, printers, and so forth.","The computer  may operate in a networked environment using logical connections via wire and\/or wireless communications to one or more remote computers, such as a remote computer . The remote computer  can be a workstation, a server computer, a router, a personal computer, portable computer, microprocessor-based entertainment appliance, a peer device or other common network node, and typically includes many or all of the elements described relative to the computer , although, for purposes of brevity, only a memory\/storage device  is illustrated. The logical connections depicted include wire\/wireless connectivity to a local area network (LAN)  and\/or larger networks, for example, a wide area network (WAN) . Such LAN and WAN networking environments are commonplace in offices and companies, and facilitate enterprise-wide computer networks, such as intranets, all of which may connect to a global communications network, for example, the Internet.","When used in a LAN networking environment, the computer  is connected to the LAN  through a wire and\/or wireless communication network interface or adaptor . The adaptor  can facilitate wire and\/or wireless communications to the LAN , which may also include a wireless access point disposed thereon for communicating with the wireless functionality of the adaptor .","When used in a WAN networking environment, the computer  can include a modem , or is connected to a communications server on the WAN , or has other means for establishing communications over the WAN , such as by way of the Internet. The modem , which can be internal or external and a wire and\/or wireless device, connects to the system bus  via the input device interface . In a networked environment, program modules depicted relative to the computer , or portions thereof, can be stored in the remote memory\/storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.","The computer  is operable to communicate with wire and wireless devices or entities using the IEEE 802 family of standards, such as wireless devices operatively disposed in wireless communication (e.g., IEEE 802.11 over-the-air modulation techniques) with, for example, a printer, scanner, desktop and\/or portable computer, personal digital assistant (PDA), communications satellite, any piece of equipment or location associated with a wirelessly detectable tag (e.g., a kiosk, news stand, restroom), and telephone. This includes at least Wi-Fi (or Wireless Fidelity), WiMax, and Bluetooth\u2122 wireless technologies. Thus, the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices. Wi-Fi networks use radio technologies called IEEE 802.11x (a, b, g, etc.) to provide secure, reliable, fast wireless connectivity. A Wi-Fi network can be used to connect computers to each other, to the Internet, and to wire networks (which use IEEE 802.3-related media and functions).",{"@attributes":{"id":"p-0109","num":"0109"},"figref":"FIG. 19","b":["1900","100","1900","1900"]},"As shown in , the communications architecture  comprises includes one or more clients  and servers . The clients  may implement the system . The servers  may implement the server systems  and\/or . The clients  and the servers  are operatively connected to one or more respective client data stores  and server data stores  that can be employed to store information local to the respective clients  and servers , such as cookies and\/or associated contextual information.","The clients  and the servers  may communicate information between each other using a communication framework . The communications framework  may implement any well-known communications techniques and protocols, such as those described with reference to system . The communications framework  may be implemented as a packet-switched network (e.g., public networks such as the Internet, private networks such as an enterprise intranet, and so forth), a circuit-switched network (e.g., the public switched telephone network), or a combination of a packet-switched network and a circuit-switched network (with suitable gateways and translators).","Various embodiments as described herein may be implemented using hardware elements, software elements, or a combination of both. Examples of hardware elements may include devices, components, processors, microprocessors, circuits, circuit elements (e.g., transistors, resistors, capacitors, inductors, and so forth), integrated circuits, application specific integrated circuits (ASIC), programmable logic devices (PLD), digital signal processors (DSP), field programmable gate array (FPGA), memory units, logic gates, registers, semiconductor device, chips, microchips, chip sets, and so forth. Examples of software elements may include software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. Determining whether an embodiment is implemented using hardware elements and\/or software elements may vary in accordance with any number of factors, such as desired computational rate, power levels, heat tolerances, processing cycle budget, input data rates, output data rates, memory resources, data bus speeds and other design or performance constraints, as desired for a given implementation.","Some embodiments may comprise an article of manufacture. An article of manufacture may comprise a storage medium to store logic. Examples of a storage medium may include one or more types of computer-readable storage media capable of storing electronic data, including volatile memory or non-volatile memory, removable or non-removable memory, erasable or non-erasable memory, writeable or re-writeable memory, and so forth. Examples of the logic may include various software elements, such as software components, programs, applications, computer programs, application programs, system programs, machine programs, operating system software, middleware, firmware, software modules, routines, subroutines, functions, methods, procedures, software interfaces, application program interfaces (API), instruction sets, computing code, computer code, code segments, computer code segments, words, values, symbols, or any combination thereof. In one embodiment, for example, an article of manufacture may store executable computer program instructions that, when executed by a computer, cause the computer to perform methods and\/or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code, such as source code, compiled code, interpreted code, executable code, static code, dynamic code, and the like. The executable computer program instructions may be implemented according to a predefined computer language, manner or syntax, for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high-level, low-level, object-oriented, visual, compiled and\/or interpreted programming language.","Some embodiments may be described using the expression \u201cone embodiment\u201d or \u201can embodiment\u201d along with their derivatives. These terms mean that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase \u201cin one embodiment\u201d in various places in the specification are not necessarily all referring to the same embodiment.","Some embodiments may be described using the expression \u201ccoupled\u201d and \u201cconnected\u201d along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example, some embodiments may be described using the terms \u201cconnected\u201d and\/or \u201ccoupled\u201d to indicate that two or more elements are in direct physical or electrical contact with each other. The term \u201ccoupled,\u201d however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other.","It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72(b), requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition, in the foregoing Detailed Description, it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather, as the following claims reflect, inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description, with each claim standing on its own as a separate embodiment. In the appended claims, the terms \u201cincluding\u201d and \u201cin which\u201d are used as the plain-English equivalents of the respective terms \u201ccomprising\u201d and \u201cwherein,\u201d respectively. Moreover, the terms \u201cfirst,\u201d \u201csecond,\u201d so forth, are used merely as labels, and are not intended to impose numerical requirements on their objects.","Although the subject matter has been described in language specific to structural features and\/or methodological acts, it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather, the specific features and acts described above are disclosed as example forms of implementing the claims."],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":[{"@attributes":{"id":"p-0007","num":"0006"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0008","num":"0007"},"figref":["FIG. 2","FIG. 1"]},{"@attributes":{"id":"p-0009","num":"0008"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0010","num":"0009"},"figref":"FIG. 4"},{"@attributes":{"id":"p-0011","num":"0010"},"figref":["FIG. 5","FIG. 3"]},{"@attributes":{"id":"p-0012","num":"0011"},"figref":"FIG. 6"},{"@attributes":{"id":"p-0013","num":"0012"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0014","num":"0013"},"figref":"FIG. 8A"},{"@attributes":{"id":"p-0015","num":"0014"},"figref":"FIG. 8B"},{"@attributes":{"id":"p-0016","num":"0015"},"figref":"FIG. 8C"},{"@attributes":{"id":"p-0017","num":"0016"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0018","num":"0017"},"figref":["FIG. 10","FIG. 9"]},{"@attributes":{"id":"p-0019","num":"0018"},"figref":"FIG. 11"},{"@attributes":{"id":"p-0020","num":"0019"},"figref":"FIG. 12"},{"@attributes":{"id":"p-0021","num":"0020"},"figref":"FIG. 13"},{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 14"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 15"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 16"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 17","FIG. 16"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 18"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":"FIG. 19"}]},"DETDESC":[{},{}]}
