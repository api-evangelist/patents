---
title: Application functionality for a test tool for application programming interfaces
abstract: Methods and apparatus for enabling efficient testing of application programming interface (API) frameworks and application code are disclosed. According to one aspect of the present invention, a framework suitable for use to test an API includes a metadata provider arrangement that stores declarative metadata and a metadata provider interface that obtains the declarative metadata associated with a test from the declarative metadata provider. A first test adapter includes logic used to process the declarative metadata, and a diagnostic test interface cooperates with the first test adapter to execute the test. The first test adapter is effectively interfaced with the diagnostic test interface. Finally, a diagnostics execution engine is arranged to communicate with the diagnostic test interface to cause the test to be executed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603658&OS=07603658&RS=07603658
owner: Oracle International Corporation
number: 07603658
owner_city: Redwood Shores
owner_country: US
publication_date: 20041117
---

{"@attributes":{"id":"description"},"RELAPP":[{},{}],"heading":["CROSS REFERENCE TO RELATED PATENT APPLICATION","BACKGROUND OF THE INVENTION","SUMMARY OF THE INVENTION","DETAILED DESCRIPTION OF THE EMBODIMENTS"],"p":["This patent application claims priority to U.S. patent provisional application 60\/546,451, entitled \u201cAPI Test Tool,\u201d filed Feb. 19, 2004, which is incorporated herein by reference in its entirety. This patent application is related to copending U.S. patent application Ser. No. 10\/991,883 and Ser. No. 10\/991,608, filed concurrently herewith, which are each incorporated herein by reference in their entireties.","1. Field of Invention","The present invention relates to database systems. More specifically, the invention relates to an application programming interface (API) testing system which enables API frameworks and application code to be efficiently tested.","2. Description of the Related Art","An application programming interface (API) is the interface used, or the calling conventions used, to allow an application program to access an operating system, as well as other system resources. APIs are often defined at a source code level, and effectively enable a level of abstraction to be present between an application program and a kernel such. In some instances, an API may provide an interface between a high level language and lower level services, particularly those services or utilities which may have been written without taking into account calling conventions of compiled languages.","Testing of framework and application code associated with APIs is important to ensure that APIs function as intended. Without thorough testing of the framework and the application code associated with APIs, any errors or other unexpected results which may occur when an API is put into use may not be found until the API is used. When an API that is in use fails to function as intended, an application program which uses the API may be prevented from operating as desired.","Typically, for each test case associated with an API, a specific API test is coded and developed. The requirements for valid API tests on a framework and application code may be prohibitive in that a generally high number of tests are typically needed, and many issues may arise relating to the management of the tests. Hence, the requirements for comprehensive API tests on a framework and application code are often considered to be too extensive for comprehensive tests to be productive. As a result, API tests are likely to only be written to test code or test cases which are considered to be critical. In other words, not all APIs may be thoroughly tested.","When only some test cases associated with an API are subjected to API testing, the reliability of the API may be compromised, as the framework and application code associated with the API is not fully tested. Since the overhead and the overall costs associated with comprehensively testing the framework and application code associated with the API is generally prohibitive, many developers and users are electing to write API tests for only the most crucial test code or test cases.","Therefore, what is needed is a method and an apparatus which enables the framework and application code associated with an API to be efficiently tested. That is, what is desired is an API test tool which provides a framework which allows API tests to be readily developed.","The present invention relates to the efficient testing of application programming interface (API) frameworks and application code. According to one aspect of the present invention, a framework suitable for use to test an API includes a metadata provider arrangement that stores declarative metadata and a metadata provider interface that obtains the declarative metadata associated with a test from the declarative metadata provider. A first test adapter includes logic used to process the declarative metadata, and a diagnostic test interface cooperates with the first test adapter to execute the test. The first test adapter is effectively interfaced with the test interface. Finally, an execution engine is arranged to communicate with the test interface to cause the test to be executed.","In one embodiment, the framework also includes a second test adapter that is interfaced with the test interface. In such an embodiment, the first test adapter and the second test adapter each include a generic adapter portion, and the first test adapter provides a first extension to the generic adapter portion while the second test adapter provides a second extension to the generic adapter portion.","Test adapters generally contain the processing logic needed to essentially transform test metadata into test interfaces which cooperate with a test engine for API test execution and report generation. There may be multiple test adapters processing different parts of test metadata. However, each test adapter includes a generic adapter portion which defines the core data that each test adapter processes. One mechanism that may be used to extend a framework which uses adapters is to associate new adapters for new tags within test metadata. The ability of a testing engine to be integrated with any number of custom adapters is effectively enabled by substantially ensuring that the adapter classes conform to the standards desired by a metadata provider. By conforming to the standards, the custom adapters effectively identify themselves as adapters to the metadata provider.","An extensible API testing framework which includes adapters which effectively implement testing logic allows the functionality of the API testing framework to be efficiently extended without generating significant amounts of code. When a new type of test is to be supported by the testing framework, a custom adapter may be created for each type of test. In other words, a custom adapter may be created for each new type of test. Within such a custom adapter, a generic portion which is common to substantially all adapters interfaced with the test interface defines a set of tags which may be used in test scripts for each type of test. Each custom adapter may generally extend the functionality of the generic portion, which may be considered to a building block for each adapter.","According to another aspect of the present invention, a method within an adapter class is arranged for processing test data that has declarative metadata within a testing framework that has a first adapter arranged to handle the test data includes analyzing the test data and creating a test interface object. The test interface object stores the test data as at least a first set of information and a second set of information. The first set of information is associated with declarative metadata and the second set of information is associated with metadata in general. In one embodiment, the method also includes executing a test associated with the test data using the test interface object, wherein an execution layer of the testing framework causes the test to be executed.","The methods of an adapter class enable the execution layer of a test framework to execute a desired test as specified in the test metadata. This is made possible by ensuring that a test interface object generated by the adapter contains the logic to invoke the test associated with the test metadata.","In accordance with still another aspect of the present invention, a method for running an API test includes obtaining test data which includes declarative metadata using a test declarative metadata adapter of a first class. The method also includes providing the test data to a diagnostic test interface and executing a test associated with the test data using the diagnostic test interface. Executing the test associated with the test data using the diagnostic test interface includes calling a first test adapter of the first class to obtain testing logic for executing the test associated with the test data. The first test adapter is arranged to include a generic test adapter portion that defines at least one tag that is common to a plurality of test adapters of the first class and a test adapter portion that defines at least one tag that is not common to the plurality of test adapters of the first class.","According to yet another aspect of the present invention, a framework suitable for use to test an API includes a metadata provider arrangement, a test declarative metadata adapter arrangement, a first test adapter arrangement, and a diagnostic test interface. The metadata provider arrangement stores declarative metadata associated with the test, and the test declarative metadata adapter arrangement marshals and unmarshals the declarative metadata associated with the test from the metadata provider arrangement. The diagnostic test interface being arranged to cooperate with the first test adapter arrangement to execute the test, wherein the first test adapter arrangement is effectively interfaced with the diagnostic test interface.","In accordance with yet another aspect of the present invention, a method for extending functionality associated with a testing framework which includes a repository arranged to store metadata, a diagnostics execution engine, a diagnostic test interface, and an API test adapter involves creating a first test adapter to perform a first type of test. Creating the first test adapter includes incorporating a first portion with a first set of declarative metadata tags, which is also included in the API test adapter, and a third portion that extends the first portion. The first test adapter is then interfaced with the diagnostic test interface.","Other features and advantages of the invention will become readily apparent upon review of the following description in association with the accompanying drawings, where the same or similar structures are designated with the same reference numerals.","In the description that follows, the present invention will be described in reference to embodiments that test subsystems on a platform for a software application, such as a database application. However, embodiments of the invention are not limited to any particular architecture, environment, application, or implementation. For example, although embodiments will be described in reference to database applications, the invention may be advantageously applied to any software application. Therefore, the description of the embodiments that follows is for purposes of illustration and not limitation.","A framework which enables application programming interface (API) testing to occur without requiring that a specific API test be written for each test case enables testing of API application code to occur efficiently. Such a framework may allow for relatively efficient development of API tests by effectively allowing functionality associated with different API tests to be shared and reused. Such a framework allows an API to be tested without requiring that significant amount of software be written, and further enables multiple API tests to be chained together, an API may be comprehensively tested in an efficient manner. Hence, the reliability of an API may be enhanced as developers may be more willing, as well as able, to more fully test an API since the need to write a significant amount of software code is effectively eliminated.",{"@attributes":{"id":"p-0034","num":"0033"},"figref":"FIG. 1","b":["100","100","138","148","148","138","148","140","144"],"i":"a"},"Database metadata provider  and XML metadata provider  are source specific providers that are arranged to transform data into a format that may be understood by a execution engine or layer . While only database metadata provider  and XML metadata provider  are shown, any number of providers may generally be included that interface with execution engine  via a metadata provider interface . Metadata provider interface  is generally arranged such that providers such as database metadata provider  and XML metadata provider  may communicate with execution engine .","API test XML adapter is arranged to enable custom tags of an XML schema definition, which will be described below with reference to , to be read and written. In general, API test XML adapter is an interface that is arranged to persist XML data. API test XML adapter may marshal XML test data into a custom test object, e.g., a custom Java test object, at run-time that may effectively be executed by execution engine . It should be understood that other types of text XML adapters, as for example a SQL test XML adapter , may be provided to interface with XML metadata provider  to enable custom tags of an XML schema definition associated with a SQL test to be read and written. XML metadata provider  is generally arranged to identify an appropriate test XML adapter or test type adapter for a test to be executed.","When execution engine  runs tests such as an API test, execution engine  accesses a security provider interface  which provides a security model that is used to enforce authorization rules which control access to a test and to test results. That is, security provider interface  is arranged to enforce security in terms of who may run a test and who may view the output of a test. In one embodiment, security provider interface  delegates a call to a security provider (not shown).","Execution engine  also logs information, e.g., the output of tests, for reporting purposes using a log provider interface . Log provider interface  is effectively a reporting storage interface. Repositories such as an XML writer  and a database writer  which are interfaced with execution engine  through log provider interface  are arranged to store reports which are persisted in log files. XML writer  may be used for the storage of reports associated with XML metadata, while database writer  may be used for the storage of reports associated with database metadata.","In general, execution engine  includes the core execution logic associated with architecture , and delegates calls or logic to appropriate sources. Execution engine  may take user commands and cause a test to be run and registered, and also cause test results or output to be displayed as appropriate. For example, when an API test is to be run, execution engine  calls into a test interface  which effectively provides handshaking between execution engine  and adapters such as API test adapter , SQL test adapter , and any custom adapters .","For each test type, an adapter which is arranged to run the test type is effectively interfaced with test interface . By way of example, API test adapter  is arranged to include the logic that is needed in order to understand a test definition provided in an XML file. API test adapter  is arranged to instantiate the method identified in the XML file, and to provide the results of the instantiation to execution engine . In general, adapters such as API test adapter  transform declarative metadata into objects that implement test interface . At runtime, when execution engine  runs a test, an object that implements test interface  invokes desired APIs on a desired entity with prescribed input parameters, and also captures output parameters and performs comparisons to determine the success or the failure of the test.","In general, an adapter such as API test adapter  is a program which has the ability to transform data, e.g., declarative metadata, from one format into another such that the data may be understood by execution engine . API test adapter , for example, transforms test metadata into a format that is understood by execution engine .","Java diagnostic tests  which contain runtime information, a PL\/SQL adapter , a declarative adapter , API test adapter , SQL test adapter , and any custom adapters  are all arranged to interface with execution engine  via test interface . Such elements effectively rewrite data into a language or format that is understood by test interface . Each of the elements which are effectively plugged into test interface  include a generic adapter portion or a common layer . Specifically, each element plugged into test interface  essentially extends the functionality or logic associated with generic adapter portion . In one embodiment, while generic adapter portion  effectively handles common tags associated with a declarative metadata file, the extensions associated with each element, e.g., the extensions off of generic adapter portion  associated with API test adapter , handle custom or unique tags within the declarative metadata file. It should be appreciated that API test adapter  may include the capabilities associated with API test XML adapter . That is, API test adapter  may be arranged to persist XML data and to read and write custom tags, in addition to being arranged to provide a running test logic interface.","Extensibility enables custom adapters  to be written as needed, and then plugged into architecture  when additional functionality within architecture  is desired. Extensibility further enables such custom adapters  to utilize and build off of generic adapter portion .","A rendering interface , e.g., a user interface rendering interface, is in communication with execution engine , and enables information pertaining to tests to be displayed to a user. User interface rendering interface  may be JSP fronted for web-based user interfaces, for example, and generally provides an abstraction away from what a user interface is expected to look like. It should be appreciated that JSP is just one example of a suitable user interface technology. There may be several different user interfaces that may be used to present diagnostics data to a user. In general, user interfaces and commandline user interfaces may be in communication with user interface rendering interface  through renderers . For each available user interface, an associated user interface renderer  that implements method or routines prescribed by user interface rendering interface  typically exists. That is, diagnostic user interface renderers  implement user interface rendering interface . Such user interface renderers  may include, but are not limited to, a diagnostics renderer , a Jdeveloper renderer , a command line or text renderer , and an integration renderer , which may effectively be used to record a test when an application such as Winrunner is interfaced with integration renderer . Winrunner is available commercially from Mercury Interactive of Mountain View, Calif. In order for communication to be achieved with a user interface layer (not shown), execution engine  invokes the methods of a suitable user interface renderer  that is associated with a specified user interface.",{"@attributes":{"id":"p-0045","num":"0044"},"figref":["FIG. 2","FIGS. 9"],"b":["600","604","608","600","628","628","628","612","632","632","632","9","616","620","600","636","604"],"i":["a","b","c","a ","b"]},"Some API tests which are specified within XML schema definitions or, more generally, declarative metadata, such as XML schema definition  of  may be a part of a test suite. A test suite is generally an overall test application which includes a plurality of API tests. Referring next to , an XML tag structure which is used within an overall test application will be described in accordance with an embodiment of the present invention. An XML tag structure for a test application  includes a test suite tag  which may identify a name of the test suite, and provide some information pertaining to the test suite. Test suite  generally contains a plurality of tests that test a particular piece of functionality. Since a test suite typically includes a group of tests, e.g., a logical group of tests, test type tags such as test type tag  are effectively a component of test suite . As shown, test type tag  may be an API test type tag. An API test type tag is converted by a QA test interface object by an API test type adapter. In general, a QA test interface object is used by an execution layer for running the test specified by the API test type tag.","It should be appreciated that a test suite may generally contain a plurality of test type tags  which may include test type tags other than an API test type tag. Another suitable test type tag is a SQL test type tag, which will be described below with reference to . Different test types may generally exist within a test suite.","In one embodiment, a test application represents an overall product that is being tested, and may include one or more test suites. Substantially all test suites or, more generally, tests specified in a test application are pertinent to the overall product that is being tested. While any number of attributes may be specified with a test application, a test application is typically specified with at least a short name for the test application, a full name for the test application, and a file version of the test application.","A service bean information tag , which may be specified under API test type tag , is arranged to contain information relating to a service name and configuration information. Also specified under API test type tag  are an input parameters tag , an output parameters tag , a description tag , an error information tag , and an output exception tag . Input parameters tag  is arranged to encapsulate any number of input parameter tags . Similarly, output parameters tag  is arranged to encapsulate any number of output parameter tags .",{"@attributes":{"id":"p-0050","num":"0049"},"figref":"FIG. 4","b":["800","800","802","800","800","802","806","806","806"],"i":["a","d ","a","d ","a","d "]},"Each test type -, e.g., test type which is an API test type, is specified with additional information. The additional information typically includes input parameters , where each input parameter  is specified within input parameters . Similarly, the additional information specified in test types such as test type also includes output parameters , where each output parameter  is specified within output parameters . Error information  is also typically specified within test types with a type. An error message and error fix information are also included within error information . In the described embodiment, test type further includes a description  which describes test type ","As previously mentioned, a test suite may include test type tags other than, or in addition to, an API test type tag. By way of example, a test suite may include a SQL test type tag. A SQL test type and an API test type may have tags in common, as well as tags which are not in common. When an API test type adapter and a SQL test type adapter, e.g., API test type adapter  and SQL test type adapter  of , are created, each test type adapter includes generic tags. Further, an API test type adapter and a SQL test type adapter may each includes custom tags. However, test adapters are not limited by the interpretation of common tags defined by the generic adapter. Being extensions of the generic adapter, test adapters may extend or override the functionality of the generic adapter.",{"@attributes":{"id":"p-0053","num":"0052"},"figref":["FIG. 5","FIG. 3"],"b":["750","752","752","756","796","756","796","796"]},"A SQL test type which is identified by a SQL test type tag  which is generally converted to a QA test interface object by a SQL test type adapter. A SQL tag , which may be specified under SQL test type tag , is arranged to contain a block of SQL that is to be executed. An input parameters tag , an output parameters tag , a description tag , and an error information tag  are also specified under SQL test type tag , and are effectively \u201cgeneric\u201d or base tags which are specified for each test type associated with declarative metadata such as XML metadata. In other words, input parameters tag , output parameters tag , description tag , and error information tag  are common tags associated with a generic adapter portion, e.g., generic adapter portion  of , that is associated with a variety of test types such as an API test type and a SQL test type.","Input parameters tag  is arranged to encapsulate at least one input parameter tag  that that is bound to SQL tag . Similarly, output parameters tag  is arranged to encapsulate at least one output parameter tag  that is bound to SQL tag . Description tag  is arranged to describe what a test, i.e., the test specified by SQL test type tag , does, while error information tag  is arranged to identify an error message and fix information that is displayed to a user in the event that a test fails.",{"@attributes":{"id":"p-0056","num":"0055"},"figref":["FIG. 6","FIG. 1"],"b":["856","100","880","884","864","872","868","876","864","872","880","856","884","862","862"]},"As previously mentioned, each test adapter has an associated set of tags which may be used in a schema, e.g., a schema written in an extensible markup language such as XML, that allows API testing to be performed. The set of tags for a test adapter includes tags associated with a generic adapter. That is, among the tags which are understood by a test adapter are common tags which are effectively defined by a generic adapter that is extended by the test adapter to include tags that are understood substantially only by that test adapter. The generic adapter is effectively encompassed by any test adapters associated with the framework discussed above with respect to .","Each test adapter is generally associated with functionality that enables any custom tags associated with each test adapter to be read from and written into a suitable repository, e.g., an XML metadata provider. That is, in addition to including a test logic interface, each test adapter has an associated interface which enables data, e.g., XML data, associated with custom tags to be persisted. The functionality that enables data associated with custom tags to be persisted may either be implemented separately from a corresponding test adapter, or as part of an overall test adapter. In other words, the functionality to marshal and to unmarshal data from a suitable repository may be implemented as part of an overall test adapter, or substantially separately from the overall test adapter, though the functionality is used by the overall test adapter. The implementation of functionality that enables data associated with custom tags to be implemented separately will be described below with respect to , while the functionality that enables data associated with custom tags to be implemented as a part of an overall test adapter will be described below with respect to .","With reference to , test adapters and test XML adapters, or adapters with functionality to persist XML data, will be described in accordance with an embodiment of the present invention. As previously mentioned, a test adapter is essentially a translator which may be used to allow a diagnostics execution engine to execute a test schema or test script obtained from a repository. A test XML adapter allows a test to be written into or read from a suitable repository. An overall adapter class is associated with test adapters, or adapters which include test logic interfaces, and test XML adapters, or adapters which enable XML data to be persisted in a repository. An API test adapter , which is of an overall API adapter class, is arranged to effectively include a generic adapter portion , and to interface with a diagnostic test interface . API test adapter includes an API test logic interface that is used by diagnostic test interface  to cause an API test obtained from a metadata provider  to be run. An API test XML adapter , which is also part of the API adapter class, is used by metadata provider  to marshal and to unmarshal specialized tags associated with a schema or a test definition of the API adapter class. As shown, API test adapter and API test XML adapter may be implemented as two substantially separate adapters.","A SQL test adapter , which is of an overall SQL adapter class, also includes generic adapter portion  and interfaces with diagnostic test interface . A SQL test adapter that is associated with SQL test adapter is used by metadata provider  to marshal and to unmarshal specialized tags associated with the SQL adapter class.","When a new adapter class is created, any new custom test adapter that is associated with the new adapter class includes generic adapter portion , and is arranged to communicate with diagnostic test interface . A new custom test XML adapter associated with the new adapter class is arranged to interface with metadata provider , and is an interface which allows any custom tags associated with the new adapter class to be read and written into a repository.","As mentioned above, an adapter class may either allow a test adapter and a test XML adapter to be created as two substantially separate adapters, or an adapter class may allow a test adapter to be created that includes the functionality and the interfaces which are generally associated with a test XML adapter. Referring next to , the use of a single adapter for an adapter class to encompass the functionality of a test adapter and the functionality of a test XML adapter will be described in accordance with an embodiment of the present invention. An API test adapter , which is effectively instantiated form an API test adapter class, includes a generic adapter portion  which is associated with common tags that are generally common to all test adapters within an overall framework. API test adapter , in addition to being arranged to include a test logic interface, also includes the interface which enables specialized tags associated with an API test adapter class to be read from and written into a metadata provider . Hence, API test adapter  is in communication with both diagnostic test interface  and with metadata provider .","A new custom test adapter  created for a new test adapter class includes, in addition to generic adapter portion , new custom test XML adapter . Like API test adapter , new custom test adapter  is in communication with both diagnostic test interface  and with metadata provider . For ease of illustration, a SQL test adapter has not been shown, though a SQL test adapter may also include both a generic adapter portion and a SQL test XML adapter.","A generic test adapter, as described above, is arranged to effectively include or utilize tags which are common to substantially all test adapter classes which effectively extend the functionality of the generic test adapter. Extending the functionality of the generic test adapter generally includes creating and utilizing custom tags which are associated with different test adapter classes.  is a block diagram representation of a generic adapter and test adapter classes which extend the functionality of the generic adapter in accordance with an embodiment of the present invention. A generic adapter  has an associated set of generic or common tags which include, but are not limited to, a description tag , an input parameters tag , an output parameters tag , and an error information tag . Such tags, as well as substantially all functionality associated with generic adapter , may be incorporated into adapter classes  which provide extended functionality. That is, adapter classes  extend generic adapter . Adapter classes  often include custom tags .","An API test adapter \u2032 that is instantiated from an adapter class  may include amongst other tags inbound parameters, outbound parameters, an output exception tag \u2032, and a service bean information tag \u2032. A SQL test adapter \u2033 that is instantiated from an adapter class  includes a SQL tag \u2033. In general, a custom test adapter \u2032\u2033 which effectively extends the functionality of generic adapter  includes at least one custom test tag \u2032\u2033, and may be created when a new type of test is to be executed using an overall framework which allows for custom test adapters. It should be appreciated that custom test adapter \u2032\u2033 may not necessarily include a custom test tag and may, instead, substantially only utilize the tags associated with generic adapter .","Typically, an object, e.g., a Java object, is created by an adapter class after a document obtained from a repository is substantially analyzed, as previously mentioned. Such an object may be a test interface object or, more specifically, when the document is an XML document, such an object may be a QA test interface object that is used in the execution of a test involving the XML document. In one embodiment, a QA test information object may be considered to be an in-memory representation of XML metadata that is stored in an XML metadata provider.",{"@attributes":{"id":"p-0067","num":"0066"},"figref":"FIG. 10","b":["984","982","980","986","986","982","982","986","994","994"]},"Test interface object  includes information  which typically includes information  that is common to substantially all tests and information  that is relatively specific to the type of metadata associated with the tests. By way of example, when repository  is an XML metadata provider, test interface object  contains information  specific to XML metadata. Alternatively, when repository  is a database metadata provider, test interface object  contains information specific to database metadata. Test interface object , as shown, is a QA test interface object that is associated with core test data  that is XML metadata.","Within test interface object , standard information  may include, but is not limited to, a test name, a test description, names and types of inputs, default values for the inputs, a type associated with the test, and application and group names within which the test resides. A type associated with a test, in the described embodiment, may be a Java type, a PLSQL type, a declarative type, a Java unit type, and a PLSQL unit type. When repository  is a XML metadata repository, test-specific information  may include names and types of outputs and a name of adapter class .","Although only a few embodiments of the present invention have been described, it should be understood that the present invention may be embodied in many other specific forms without departing from the spirit or the scope of the present invention. By way of example, while Java has generally been described as an API test type language, substantially any test type language may be used. Suitable test type languages may include, but are not limited to, PL\/SQL.","A system with an API test adapter has been described as also including a SQL test adapter and other custom test adapters. It should be appreciated that a system which includes an API test adapter may not necessarily also include a SQL test adapter or other custom test adapters. Conversely, a SQL test adapter or other custom adapters may be included in a system that does not include an API test adapter.","While declarative metadata has been described as being XML metadata, it should be appreciated that declarative metadata is not limited to being XML metadata. Other suitable types of declarative metadata may be used to create a schema that utilizes common and custom tags.","In general, the steps associated with methods of the present invention may vary widely. Steps may be added, removed, altered, and reordered without departing from the spirit or the scope of the present invention. Therefore, the present examples are to be considered as illustrative and not restrictive, and the invention is not to be limited to the details given herein, but may be modified within the scope of the appended claims."],"BRFSUM":[{},{}],"brief-description-of-drawings":[{},{}],"description-of-drawings":{"heading":"BRIEF DESCRIPTION OF THE DRAWINGS","p":["The invention may best be understood by reference to the following description taken in conjunction with the accompanying drawings in which:",{"@attributes":{"id":"p-0022","num":"0021"},"figref":"FIG. 1"},{"@attributes":{"id":"p-0023","num":"0022"},"figref":"FIG. 2"},{"@attributes":{"id":"p-0024","num":"0023"},"figref":"FIG. 3"},{"@attributes":{"id":"p-0025","num":"0024"},"figref":["FIG. 4","FIG. 3"]},{"@attributes":{"id":"p-0026","num":"0025"},"figref":"FIG. 5"},{"@attributes":{"id":"p-0027","num":"0026"},"figref":["FIG. 6","FIG. 5"]},{"@attributes":{"id":"p-0028","num":"0027"},"figref":"FIG. 7"},{"@attributes":{"id":"p-0029","num":"0028"},"figref":"FIG. 8"},{"@attributes":{"id":"p-0030","num":"0029"},"figref":"FIG. 9"},{"@attributes":{"id":"p-0031","num":"0030"},"figref":"FIG. 10"}]},"DETDESC":[{},{}]}
